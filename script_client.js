(function () {
    const hc = window;
    let c = 76;
    const Pc = function (a) {
        let b = "";
        for (let d = 0; d < a.length; d++) {
            b += hc.String.fromCharCode(a[d] ^ c++ % 255);
        }
        return b;
    };
    var t = 169;
    if (t >= 10) {
        t = 54;
    }
    var Rg = 122;
    if (Rg === 6) {
        Rg = 63;
    }
    var Yh = 188;
    if (Yh === 13) {
        Yh = 93;
    }
    var aj = 220;
    var bj = 159;
    if (bj === 8) {
        bj = 132;
    }
    var cj = 238;
    if (cj >= 12) {
        cj = 112;
    }
    if (aj > 9) {
        aj = 59;
    }
    var dj = 65;
    if (dj === 13) {
        dj = 67;
    }
    var ej = 170;
    if (ej === 7) {
        ej = 46;
    }
    var fj = 142;
    if (fj === 10) {
        fj = 230;
    }
    const gj = undefined;
    const b = 256;
    const hj = gj;
    const d = 18;
    const m = 8;
    const p = true;
    const v = 19;
    const C = false;
    const f = 100;
    const z = -8;
    const y = 3;
    const w = C;
    const P = 20;
    const A = 4;
    const k = 10;
    const x = 6;
    const J = 0;
    const M = 9;
    const B = 12;
    const D = 20;
    const I = 16;
    const E = 255;
    const S = -4;
    const Q = 17;
    const T = 255;
    const R = 7;
    const F = 11;
    const j = 100;
    const G = 14;
    const L = 5;
    const W = 15;
    const O = 1;
    const N = 2;
    const q = 13;
    const H = 1 << 2;
    const U = 1 << 11;
    const Y = 6;
    const K = 1 << 12;
    const V = 16;
    const X = 2;
    const Z = 6;
    const _ = 4;
    const ee = 12;
    const ie = 8;
    const ne = 100;
    let oe;
    let te = gj;
    const ij = p;
    const se = 19;
    let he = gj;
    let jj = gj;
    let kj = gj;
    const lj = 255;
    let be = gj;
    let mj = gj;
    const nj = 17;
    const ce = 9;
    let me;
    const oj = 7;
    const Ce = 256;
    const Te = 100;
    let fe = "_";
    let pj = [];
    let ye = gj;
    const qj = 5;
    let Pe;
    let rj = gj;
    const sj = hj;
    let xe = sj;
    const tj = 13;
    const Me = 255;
    let Be;
    let uj;
    const vj = 11;
    let Ee = sj;
    let wj = gj;
    const xj = 8;
    const _e = 15;
    let Re;
    let yj = hj;
    const zj = 100;
    const Ge = 4;
    const Le = 16;
    const We = 10;
    const Oe = 18;
    const Ne = 3;
    const qe = 7;
    const He = ij;
    let Ue;
    let Aj = hj;
    let Bj = gj;
    const Cj = 11;
    let Xe;
    const Dj = C;
    const $e = 14;
    const ei = 19;
    let ii = gj;
    const Ej = 12;
    let ni;
    const Fj = 5;
    const ai = ij;
    let ri;
    const Gj = 20;
    let hi;
    const Hj = 10;
    let gi;
    const Ij = He;
    let bi;
    let Jj = sj;
    let Kj = hj;
    const Lj = w;
    let mi;
    const Mj = 100;
    let Ci;
    const Nj = 255;
    let fi;
    let Oj;
    let Pj;
    let Qj = sj;
    const Rj = 19;
    const Ai = 6;
    let ki;
    let Sj;
    let Tj = gj;
    let Uj = gj;
    const Vj = 8;
    const Di = 13;
    let Ii;
    let Wj;
    let Xj = gj;
    const Yj = 1;
    let _i;
    let Zj;
    const $j = 256;
    let ji;
    const _j = 6;
    const Li = 10;
    const Wi = 0;
    const Oi = 2;
    const Ni = 16;
    let qi = gj;
    const ak = 255;
    const Ui = 100;
    let Yi;
    let bk;
    let ck;
    let dk = sj;
    let ek = 0;
    if (!hc.WebAssembly || !hc.WebAssembly.instantiate) {
        ΔᐃⲆΔⲆΔⲆΔⵠ();
    }
    const fk = hj;
    const gk = 14;
    const hk = 17;
    const ik = {
        Date: Date
    };
    hc.WebAssembly.instantiate(Uint8Array.from(hc.atob(""), function (a) {
        return a.charCodeAt(0);
    }), ik).then(async function (a) {
        te = a.instance;
        oe = te.exports;
        he = oe.memory;
        jj = he.buffer;
        kj = oe.__pin;
        mj = oe.__unpin;
        be = oe.__new;
        me = oe.__collect;
        fe = "_";
        for (let b = 0; b < 31; b++) {
            pj[b] = oe[fe + b];
        }
        ye = oe.__rtti_base;
        rj = new Float32Array(jj);
        Pe = new Float64Array(jj);
        xe = new BigUint64Array(jj);
        Be = new Uint32Array(jj);
        uj = new Uint16Array(jj);
        wj = new Uint8Array(jj);
        Ee = new BigInt64Array(jj);
        Re = new Int32Array(jj);
        yj = new Int16Array(jj);
        Aj = new Int8Array(jj);
        ji = pj[20];
        bk = pj[0];
        bi = pj[7];
        ii = pj[3];
        Tj = pj[14];
        Uj = pj[2];
        Wj = pj[18];
        fi = pj[26];
        Sj = pj[27];
        Ii = pj[5];
        dk = pj[25];
        Ci = pj[22];
        Jj = pj[10];
        ki = pj[23];
        hi = pj[8];
        Yi = pj[13];
        _i = pj[16];
        Bj = pj[17];
        Oj = pj[1];
        Qj = pj[9];
        Pj = pj[6];
        ri = pj[15];
        Xe = pj[12];
        Zj = pj[24];
        mi = pj[30];
        Xj = pj[28];
        ni = pj[21];
        Kj = pj[4];
        gi = pj[19];
        qi = pj[11];
        Ue = pj[29];
        ek = 1;
        if (ck) {
            await ck();
        }
    });
    const jk = 13;
    const kk = function (a) {
        return Be[(ye + 4 >>> 2) + (a << 1)];
    };
    function lk(a) {
        return 31 - Math.clz32(a >>> 6 & 31);
    }
    const mk = 15;
    function nk(a, b, c) {
        if (c) {
            switch (a) {
                case 2:
                    return rj;
                case 3:
                    return Pe;
            }
        } else {
            switch (a) {
                case 0:
                    if (b) {
                        return Aj;
                    } else {
                        return wj;
                    }
                case 1:
                    if (b) {
                        return yj;
                    } else {
                        return uj;
                    }
                case 2:
                    if (b) {
                        return Re;
                    } else {
                        return Be;
                    }
                case 3:
                    if (b) {
                        return Ee;
                    } else {
                        return xe;
                    }
            }
        }
    }
    const ok = 9;
    function pk(b) {
        const c = Be[b + z >>> 2];
        const d = kk(c);
        const e = lk(d);
        let f = d & H ? b : Be[b + 4 >>> 2];
        const g = d & N ? Be[b + 12 >>> 2] : Be[f + S >>> 2] >>> e;
        return nk(e, d & U, d & K).subarray(f >>>= e, f + g);
    }
    const qk = 20;
    const rk = 18;
    const sk = 5;
    const tk = C;
    const uk = 7;
    const vk = 11;
    const wk = "development";
    const xk = "production";
    function yk(a) {
        this.ⵠⵠⵠⲆ = 2147483648;
        this.a = 1103515245;
        this.c = 12345;
        this.state = a || Math.floor(Math.random() * (this.ⵠⵠⵠⲆ - 1));
    }
    yk.prototype.random = function () {
        this.state = (this.a * this.state + this.c) % this.ⵠⵠⵠⲆ;
        return this.state / this.ⵠⵠⵠⲆ;
    };
    const zk = 4;
    const Ak = 19;
    const Bk = 14;
    const Ck = 2;
    yk.prototype.ΔᐃⲆᐃⲆⵠⲆ = function (a) {
        this.state = a;
    };
    ΔΔⲆⲆΔΔᐃ = 10000;
    ᐃⵠΔᐃⵠᐃⵠ = [];
    var Dk = new yk();
    const Ek = 7;
    Dk.ΔᐃⲆᐃⲆⵠⲆ(new Date().getTime());
    for (var Fk = 0; Fk < ΔΔⲆⲆΔΔᐃ; Fk++) {
        ᐃⵠΔᐃⵠᐃⵠ.push(Dk.random());
    }
    const Gk = 10;
    function Hk(b, c, d, e) {
        const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
        const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
        const a = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
        const j = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
        const k = function (c, e, f, i, j, k) {
            const a = c ^ 10715;
            const m = (24 << (e >> 16 & 255)) + (16 << (e >> 32 & 255)) + (32 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
            const n = (8 << (f >> 16 & 255)) + (32 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (24 << (f >> 32 & 255));
            const h = i ^ 40782;
            const l = j ^ 41301;
            const g = ~(k & 12091) & (k | 12091);
            const o = tn(a, m, n, h, l, g);
            tn(a, m, n, h, l, g);
            yn(a, m, n, h, l);
            const b = (o | 3006) & ~(o & 3006);
            return ~(b & 24460) & (b | 24460);
        }(f, i, a, j, f, i);
        const h = Dn(a, j, f, i, a);
        tn(j, f, i, a, j, f);
        const l = (1013904223 + (26191 + (k ^ h)) * 1664525) % 4294967296;
        return (l | 38630) & ~(l & 38630);
    }
    function Ik(c, e, f, i, j, k) {
        const a = ((39488 + c) * 214013 + 2531011) % 4294967296;
        const m = ~(e & 49976) & e | ~(e & 49976) & 49976;
        const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
        const h = i ^ 52219;
        const l = (j + 3575) % 65503;
        const g = ~(k & 6932) & k | ~(k & 6932) & 6932;
        const o = kn(a, m, n, h, l);
        const b = function (c, d, e, f, i, j) {
            const a = c ^ 30142;
            const k = (d + 63025) % 65493;
            const m = e ^ 30777;
            const h = ((45939 + f) * 22695477 + 1) % 4294967296;
            const l = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 8 & 255));
            const g = (j | 45652) & ~(j & 45652);
            const n = kn(a, k, m, h, l);
            Nk(g, a, k, m, h);
            bn(l, g, a, k, m, h);
            return n ^ 60048;
        }(g, a, m, n, h, l);
        sn(g, a, m, n, h, l);
        const d = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
        return ~(d & 42138) & d | ~(d & 42138) & 42138;
    }
    const Jk = 14;
    const Kk = He;
    const Lk = 20;
    const Mk = 3;
    function Nk(c, d, e, f, i) {
        const j = ((c + 14772) * 2147483629 + 2147483587) % 2147483647;
        const a = d ^ 63080;
        const k = ((e + 60304) * 22695477 + 1) % 4294967296;
        const m = ~(f & 5467) & 5467 | ~(f & 5467) & f;
        const h = (i | 40165) & ~(i & 40165);
        const l = function (b, c, d, e) {
            const f = (b | 57611) & ~(b & 57611);
            const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
            const a = d ^ 62842;
            const j = ~(e & 1179) & e | ~(e & 1179) & 1179;
            const k = Rk(f, i, a, j);
            const h = wn(f, i, a, j);
            Hk(f, i, a, j);
            const l = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & 255)) + (16 << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> 8 & 255));
            return ~(l & 63304) & (l | 63304);
        }(j, a, k, m);
        const g = Dn(h, j, a, k, m);
        const n = Sn(h, j, a, k, m, h);
        return ((28765 + ((16 << ((l ^ g) >> 24 & 255)) + (8 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 32 & 255)) + (32 << ((l ^ g) >> 8 & 255)) ^ n)) * 1664525 + 1013904223) % 4294967296;
    }
    const Ok = w;
    const Pk = 12;
    const Qk = gj;
    function Rk(b, c, d, e) {
        const f = b ^ 11762;
        const g = ~(c & 19425) & 19425 | ~(c & 19425) & c;
        return ((55182 + (((17757 + ((32 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(e & 259) & 259 | ~(e & 259) & e))) * 1664525 + 1013904223) % 4294967296;
    }
    function Sk(c, d, e, f, i) {
        const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
        const a = d ^ 58614;
        const k = ((e + 45267) * 214013 + 2531011) % 4294967296;
        const m = f ^ 40810;
        const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
        const l = In(j, a);
        const g = Hk(k, m, h, j);
        (function (b, c, d, e) {
            const f = (b + 34282) % 65336;
            const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
            const a = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
            const j = ~(e & 25475) & 25475 | ~(e & 25475) & e;
            const k = function (a, b) {
                const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
                const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
                const e = Bn(c, d, c);
                an(d, c, d, c);
                return ((42346 + (e ^ 18573 ^ Vk(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
            }(f, i);
            const h = Jn(a, j, f, i, a);
            In(j, f);
            const l = (58498 + (k ^ h)) % 65531;
        })(a, k, m, h);
        const n = (24 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 32 & 255)) + (16 << ((l ^ g) >> 8 & 255));
        return ~(n & 13644) & n | ~(n & 13644) & 13644;
    }
    const Tk = 16;
    function Uk(b, c, d, e, f) {
        const i = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
        const a = (12345 + (c + 3024) * 1103515245) % 2147483648;
        const j = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
        const k = (1 + (e + 41324) * 22695477) % 4294967296;
        const h = (f | 19607) & ~(f & 19607);
        const l = xn(i, a);
        Jn(j, k, h, i, a);
        bn(j, k, h, i, a, j);
        const g = ~(l & 49323) & 49323 | ~(l & 49323) & l;
        return ~(g & 46567) & (g | 46567);
    }
    function Vk(b, c, d, e, f) {
        const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
        const a = (c + 39144) % 65406;
        const j = d ^ 34575;
        const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
        const h = (f | 25975) & ~(f & 25975);
        const l = Rk(i, a, j, k);
        Jn(h, i, a, j, k);
        sn(h, i, a, j, k, h);
        return (l | 19326) & ~(l & 19326) ^ 36297;
    }
    const Wk = 255;
    const Xk = 0;
    function Yk(c, d, e, f, i, j) {
        const a = (1013904223 + (c + 28824) * 1664525) % 4294967296;
        const k = (1013904223 + (13210 + d) * 1664525) % 4294967296;
        const m = ~(e & 32165) & 32165 | ~(e & 32165) & e;
        const h = (24 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 32 & 255));
        const l = (1 + (39199 + i) * 22695477) % 4294967296;
        const g = j ^ 33037;
        const n = function (b, c, d) {
            const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
            const f = (c | 44117) & ~(c & 44117);
            const g = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
            const a = dn(e, f, g, e, f);
            const i = Sn(g, e, f, g, e, f);
            const j = function (a, b) {
                const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
                const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
                const e = bn(c, d, c, d, c, d);
                (function (b, c, d, e, f) {
                    const i = b ^ 64570;
                    const a = (2531011 + (c + 41768) * 214013) % 4294967296;
                    const j = (1013904223 + (d + 43923) * 1664525) % 4294967296;
                    const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
                    const h = (f | 21896) & ~(f & 21896);
                    const l = function (a, b) {
                        const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
                        const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
                        const e = function (b, c, d) {
                            const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
                            const f = (c | 55665) & ~(c & 55665);
                            const g = (d + 54633) % 65404;
                            const a = Nk(e, f, g, e, f);
                            (function (c, e, f, i, j, k) {
                                const a = (2531011 + (c + 16955) * 214013) % 4294967296;
                                const m = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                                const n = (f | 14774) & ~(f & 14774);
                                const h = (i | 48802) & ~(i & 48802);
                                const l = ~(j & 24998) & (j | 24998);
                                const g = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                                const o = zn(a, m, n, h);
                                const b = Jn(l, g, a, m, n);
                                const d = zn(h, l, g, a);
                            })(g, e, f, g, e, f);
                            wn(g, e, f, g);
                            return ~(a & 43875) & (a | 43875) ^ 15116;
                        }(c, d, c);
                        yn(d, c, d, c, d);
                        Rk(c, d, c, d);
                        return (e | 17943) & ~(e & 17943) ^ 21791;
                    }(i, a);
                    an(j, k, h, i);
                    const g = Uk(a, j, k, h, i);
                })(c, d, c, d, c);
                xn(d, c);
                return (e | 58283) & ~(e & 58283) ^ 8337;
            }(g, e);
            const h = (16 << ((a ^ i) >> 32 & 255)) + (24 << ((a ^ i) >> 24 & 255)) + (32 << ((a ^ i) >> 8 & 255)) + (8 << ((a ^ i) >> 16 & 255));
            return (8 << ((h ^ j) >> 32 & 255)) + (16 << ((h ^ j) >> 8 & 255)) + (32 << ((h ^ j) >> 16 & 255)) + (24 << ((h ^ j) >> 24 & 255));
        }(a, k, m);
        wn(h, l, g, a);
        return ((34159 + (n ^ 2959 ^ zn(k, m, h, l))) * 1103515245 + 12345) % 2147483648;
    }
    const Zk = ai;
    const $k = 20;
    const _k = 19;
    const Sm = 6;
    function zn(b, c, d, e) {
        const f = ~(b & 33107) & (b | 33107);
        const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
        const a = ~(d & 32053) & (d | 32053);
        const i = e ^ 12240;
        const j = function (b, c, d, e) {
            const f = (32 << (b >> 32 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
            const i = (1 + (50595 + c) * 22695477) % 4294967296;
            const a = ~(d & 40066) & d | ~(d & 40066) & 40066;
            const j = e ^ 18768;
            const k = kn(f, i, a, j, f);
            const h = Sk(i, a, j, f, i);
            const l = un(a, j);
            return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ l)) * 1664525 + 1013904223) % 4294967296;
        }(f, g, a, i);
        wn(f, g, a, i);
        return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ kn(f, g, a, i, f))) * 214013) % 4294967296;
    }
    function _n(a) {
        const b = Math.random;
        const c = [];
        Math.random = function () {
            for (let a = 0; a < 1131; a++) {
                c.push(a);
            }
            return b();
        };
    }
    const no = 100;
    const po = 10;
    const en = 100;
    function tn(b, c, d, e, f, i) {
        const a = ~(b & 36133) & (b | 36133);
        const j = (c | 13670) & ~(c & 13670);
        const k = (d | 31390) & ~(d & 31390);
        const h = e ^ 64081;
        const l = f ^ 7550;
        const g = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
        return (12345 + (36760 + (((62552 + (An(a, j, k, h, l) ^ wn(g, a, j, k))) * 2147483629 + 2147483587) % 2147483647 ^ yn(h, l, g, a, j))) * 1103515245) % 2147483648;
    }
    const nn = 15;
    const on = 1;
    function an(b, c, d, e) {
        const f = (b | 15432) & ~(b & 15432);
        const g = c ^ 12315;
        const a = d ^ 38714;
        const i = e ^ 58084;
        const j = Ik(f, g, a, i, f, g);
        wn(a, i, f, g);
        return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ sn(a, i, f, g, a, i))) * 214013 + 2531011) % 4294967296;
    }
    const rn = 14;
    function sn(b, c, d, e, f, g) {
        const a = b ^ 23409;
        const i = c ^ 26380;
        const j = ((f + 33017) * 1103515245 + 12345) % 2147483648;
        const h = g ^ 42490;
        return ((19056 + (Rk(a, i, d ^ 53590, e ^ 36633) ^ Rk(j, h, a, i))) * 22695477 + 1) % 4294967296;
    }
    const hn = 17;
    const ln = 20;
    const gn = 256;
    function un(b, c) {
        const d = (2531011 + (b + 62874) * 214013) % 4294967296;
        const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
        const f = sn(d, e, d, e, d, e);
        const g = sn(d, e, d, e, d, e);
        Rk(d, e, d, e);
        const a = (16 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
        return ~(a & 55949) & 55949 | ~(a & 55949) & a;
    }
    function bn(c, e, f, i, j, k) {
        const a = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
        const m = (e | 41551) & ~(e & 41551);
        const n = (24 << (f >> 24 & 255)) + (16 << (f >> 32 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 8 & 255));
        const h = ~(i & 32641) & (i | 32641);
        const l = ((j + 35582) * 214013 + 2531011) % 4294967296;
        const g = ~(k & 1090) & (k | 1090);
        const o = Sn(a, m, n, h, l, g);
        Vk(a, m, n, h, l);
        Rk(g, a, m, n);
        const b = ~(o & 8077) & 8077 | ~(o & 8077) & o;
        return ~(b & 3708) & (b | 3708);
    }
    function dn(b, c, d, e, f) {
        const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
        const a = ~(c & 7703) & c | ~(c & 7703) & 7703;
        const j = (d | 31275) & ~(d & 31275);
        const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
        const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
        const l = sn(i, a, j, k, h, i);
        const g = Rk(a, j, k, h);
        Bn(i, a, j);
        return (24 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 32 & 255)) ^ 31710;
    }
    const vn = 12;
    const cn = 6;
    const mn = 13;
    const pn = 2;
    const Cn = 8;
    function Tn(a) {
        const b = hc.setTimeout;
        const c = b;
        const d = function () {
            b(d, 9243);
            c(d, 191);
        };
        d();
    }
    const fn = 12;
    function yn(b, c, d, e, f) {
        const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
        const a = ((18197 + c) * 214013 + 2531011) % 4294967296;
        const j = (2531011 + (22845 + d) * 214013) % 4294967296;
        const k = (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
        const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
        const l = sn(i, a, j, k, h, i);
        const g = bn(a, j, k, h, i, a);
        Rk(j, k, h, i);
        return (8 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 32 & 255)) ^ 35444;
    }
    function wn(b, c, d, e) {
        const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
        const g = c ^ 57623;
        const a = ~(d & 40280) & d | ~(d & 40280) & 40280;
        const i = ~(e & 24601) & e | ~(e & 24601) & 24601;
        const j = xn(f, g);
        xn(a, i);
        Dn(f, g, a, i, f);
        const h = ~(j & 43902) & 43902 | ~(j & 43902) & j;
        return (h | 8862) & ~(h & 8862);
    }
    const Pn = C;
    function An(c, d, e, f, i) {
        const j = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
        const a = d ^ 55978;
        const k = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
        const m = ~(f & 30642) & (f | 30642);
        const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
        const l = Jn(j, a, k, m, h);
        const g = yn(j, a, k, m, h);
        Rk(j, a, k, m);
        const n = (16 << ((l ^ g) >> 32 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (8 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255));
        return ~(n & 23686) & (n | 23686);
    }
    function kn(b, c, d, e, f) {
        const i = b ^ 62008;
        const a = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
        const j = ((d + 46531) * 22695477 + 1) % 4294967296;
        const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
        const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
        const l = Nk(i, a, j, k, h);
        Sn(i, a, j, k, h, i);
        return ((3037 + (l ^ 57467 ^ Dn(a, j, k, h, i))) * 1664525 + 1013904223) % 4294967296;
    }
    function xn(a, b) {
        const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
        const d = b ^ 53080;
        return (1 + (57525 + ((17769 + (An(c, d, c, d, c) ^ Jn(d, c, d, c, d))) % 65357 ^ Rk(c, d, c, d))) * 22695477) % 4294967296;
    }
    function Jn(b, c, d, e, f) {
        const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
        const a = c ^ 50118;
        const j = d ^ 41620;
        const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
        const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
        const l = Sn(i, a, j, k, h, i);
        Sn(a, j, k, h, i, a);
        return (2531011 + (53616 + ((l | 43477) & ~(l & 43477) ^ Rk(j, k, h, i))) * 214013) % 4294967296;
    }
    const Mn = 12;
    function Bn(b, c, d) {
        const e = b ^ 23323;
        const f = (2531011 + (61713 + c) * 214013) % 4294967296;
        const g = (d | 24198) & ~(d & 24198);
        const a = Uk(e, f, g, e, f);
        const h = Uk(g, e, f, g, e);
        Uk(f, g, e, f, g);
        return (16 << ((a ^ h) >> 32 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 24 & 255)) + (32 << ((a ^ h) >> 16 & 255)) ^ 31181;
    }
    function Dn(c, d, e, f, i) {
        const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
        const a = (d + 52922) % 65337;
        const k = e ^ 25250;
        const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
        const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
        const l = Vk(j, a, k, m, h);
        const g = In(j, a);
        Vk(k, m, h, j, a);
        const n = (1 + (19675 + (l ^ g)) * 22695477) % 4294967296;
        return ~(n & 7922) & n | ~(n & 7922) & 7922;
    }
    function In(b, c) {
        const d = b ^ 24508;
        const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
        const f = Uk(d, e, d, e, d);
        const g = An(e, d, e, d, e);
        dn(d, e, d, e, d);
        const a = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
        return ~(a & 40927) & 40927 | ~(a & 40927) & a;
    }
    const En = 19;
    function Sn(b, c, d, e, f, i) {
        const a = d ^ 8102;
        const j = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255));
        const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
        const h = (1 + (62237 + i) * 22695477) % 4294967296;
        const l = un((b + 52483) % 65496, (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
        const g = un(a, j);
        un(k, h);
        return (45290 + (l ^ g)) % 65334 ^ 55575;
    }
    ;
    function Qn(b, c, d, e, f) {
        const g = (24 << (e & 255)) + (8 << (e >> 8 & 255)) + (0 << (e >> 16 & 255)) + (16 << (e >> 24 & 255));
        const a = f ^ 22245;
        const h = Yb(((b + 49384) * 214013 + 2531011) % 4294967296, ((44127 + c) * 22695477 + 1) % 4294967296, (20285 + d) % 65460);
        jt(g, a);
        return h ^ 43601;
    }
    const Rn = 12983368;
    const Fn = 12983368 .ΔΔᐃⲆᐃⵠⵠΔⵠ;
    const jn = `const ⵠΔᐃΔᐃᐃⵠ = (typeof ⵠΔᐃⲆⲆᐃΔ === "${Fn}") ? 1 : 0; return ⵠΔᐃΔᐃᐃⵠ;`;
    const Gn = 0;
    const Ln = 18;
    function Wn(b, c, d, e) {
        const f = ((6367 + b) * 2147483629 + 2147483587) % 2147483647;
        const g = c ^ 25276;
        const a = (8 << (d >> 24 & 255)) + (16 << (d >> 16 & 255)) + (24 << (d >> 0 & 255)) + (0 << (d >> 8 & 255));
        const i = (2147483587 + (e + 62957) * 2147483629) % 2147483647;
        const j = Qn(f, g, a, i, f);
        Qn(g, a, i, f, g);
        return j ^ 16466;
    }
    function On(c, d, e, f, i, j) {
        const a = ((1434 + c) * 1103515245 + 12345) % 2147483648;
        const k = (d | 25294) & ~(d & 25294);
        const m = ((51975 + e) * 2147483629 + 2147483587) % 2147483647;
        const h = (2147483587 + (f + 416) * 2147483629) % 2147483647;
        const l = (i | 58160) & ~(i & 58160);
        const g = (8 << (j >> 24 & 255)) + (16 << (j >> 16 & 255)) + (24 << (j >> 8 & 255)) + (0 << (j >> 0 & 255));
        const n = xt(a, k, m, h);
        (function (b, c, d, e, f, g) {
            const a = f ^ 53397;
            const i = ((39640 + g) * 2147483629 + 2147483587) % 2147483647;
            const j = ir(b ^ 50608, (c | 17926) & ~(c & 17926), ~(d & 44554) & 44554 | ~(d & 44554) & d, e ^ 17347);
            (function (b, c) {
                const d = b ^ 15145;
                const e = (1 + (c + 52738) * 22695477) % 4294967296;
                const f = function (b, c, d) {
                    const e = (35159 + b) % 65372;
                    const f = ~(c & 22427) & (c | 22427);
                    const g = (8 << (d >> 8 & 255)) + (16 << (d >> 16 & 255)) + (0 << (d >> 24 & 255)) + (24 << (d & 255));
                    const a = yx(e, f, g, e, f, g);
                    const h = function (b, c, d, e, f) {
                        const g = (24 << (b & 255)) + (0 << (b >> 8 & 255)) + (8 << (b >> 24 & 255)) + (16 << (b >> 16 & 255));
                        const a = (c | 46101) & ~(c & 46101);
                        const i = ~(d & 57731) & 57731 | ~(d & 57731) & d;
                        const j = (e | 7436) & ~(e & 7436);
                        const h = Qn(g, a, i, j, ~(f & 2961) & f | ~(f & 2961) & 2961);
                        (function (b, c, d, e) {
                            const f = (0 << (b >> 24 & 255)) + (24 << (b >> 16 & 255)) + (16 << (b & 255)) + (8 << (b >> 8 & 255));
                            const g = ((45721 + c) * 1103515245 + 12345) % 2147483648;
                            const a = (d + 54485) % 65346;
                            const i = ((2098 + e) * 1664525 + 1013904223) % 4294967296;
                            const j = rb(f, g);
                            (function (b, c, d, e) {
                                const f = ((b + 5142) * 2147483629 + 2147483587) % 2147483647;
                                const g = (12345 + (c + 43143) * 1103515245) % 2147483648;
                                const a = d ^ 3877;
                                const i = ((e + 8339) * 2147483629 + 2147483587) % 2147483647;
                                const j = Wn(f, g, a, i);
                                (function (b, c, d, e) {
                                    const f = ~(b & 11968) & b | ~(b & 11968) & 11968;
                                    const g = ~(c & 5537) & 5537 | ~(c & 5537) & c;
                                    const a = ~(d & 14285) & 14285 | ~(d & 14285) & d;
                                    const i = ((e + 48016) * 1103515245 + 12345) % 2147483648;
                                    const j = function (b, c, d, e, f, g) {
                                        const a = (8 << (d >> 24 & 255)) + (0 << (d >> 8 & 255)) + (16 << (d >> 0 & 255)) + (24 << (d >> 16 & 255));
                                        const i = ~(e & 694) & e | ~(e & 694) & 694;
                                        const j = Zw((8 << (b >> 16 & 255)) + (0 << (b >> 8 & 255)) + (24 << (b >> 24 & 255)) + (16 << (b & 255)), (c | 60515) & ~(c & 60515));
                                        Zw(a, i);
                                        return ~(j & 26248) & (j | 26248);
                                    }(f, g, a, i);
                                    const h = it(a, i, f, g, a);
                                })(f, g, a, i);
                            })(a, i, f, g);
                        })(g, a, i, j);
                        return ~(h & 43020) & 43020 | ~(h & 43020) & h;
                    }(e, f, g, e, f);
                    return (24 << ((a ^ h) & 255)) + (16 << ((a ^ h) >> 24 & 255)) + (8 << ((a ^ h) >> 16 & 255)) + (0 << ((a ^ h) >> 8 & 255));
                }(d, e, d);
                const g = lt(e, d);
            })(a, i);
        })(l, g, a, k, m, h);
        return ~(n & 45317) & (n | 45317);
    }
    const Nn = 9;
    const qn = 11;
    ⵠᐃⵠ = {
        ⵠᐃⲆΔΔⵠⵠ: () => new Promise((a, b) => {
            hc.grecaptcha.ready(function () {
                hc.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
                    action: "validate_recaptcha"
                }).then(function (b) {
                    a(b);
                }).catch(c => {
                    if (Nf) {
                        a(0);
                    } else {
                        console.log(fk);
                        b(c);
                    }
                });
            });
        }),
        ⲆⵠⵠΔⲆⲆΔⲆⵠ: function (a) {
            hc.open(a, "_blank").focus();
        },
        ⵠᐃⲆΔⵠᐃΔ: function (a) {
            hc.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
        },
        ⲆⲆᐃᐃⵠⵠⲆ: function (a, b) {
            for (var c in a) {
                if (a[c] != b[c]) {
                    return false;
                }
            }
            return true;
        },
        ⲆⲆᐃΔΔΔΔᐃⵠ: function (a, b) {
            if (a.length != b.length) {
                return Lj;
            }
            for (var c = 0; c < a.length; c++) {
                if (typeof a == "object") {
                    if (!this.ⲆⲆᐃᐃⵠⵠⲆ(a[c], b[c])) {
                        return Pn;
                    }
                } else if (a[c] != b[c]) {
                    return false;
                }
            }
            return Kk;
        },
        ⵠΔΔΔⲆΔΔ: function (a, b) {
            b.x = a.x;
            b.y = a.y;
        },
        ⲆᐃΔᐃΔΔᐃ: function (a, b) {
            return {
                x: a.x - b.x,
                y: a.y - b.y
            };
        },
        ⲆⵠⵠΔⲆⲆΔⲆⲆ: function (a, b) {
            a.x *= b;
            a.y *= b;
        },
        ⵠⲆⲆᐃⲆΔⲆ: function (a, b) {
            return a.x * b.x + a.y * b.y;
        },
        ᐃΔⵠⵠᐃⲆΔ: function (a) {
            return Math.sqrt(a.x * a.x + a.y * a.y);
        },
        sign: function (a) {
            if (a < 0) {
                return -1;
            } else {
                return 1;
            }
        },
        ᐃᐃᐃΔᐃⵠΔ: function (a, b) {
            return a.x * b.y - a.y * b.x;
        },
        ΔⲆⵠᐃᐃΔΔ: function (b, c, d, e) {
            var f = e - c;
            var g = d - b;
            return Math.atan2(f, g);
        },
        ᐃⲆⵠⵠᐃΔⵠ: function (a, b) {
            return Math.asin(this.ⵠⲆⲆᐃⲆΔⲆ(a, b) / (this.ᐃΔⵠⵠᐃⲆΔ(a) * this.ᐃΔⵠⵠᐃⲆΔ(b))) * this.sign(this.ᐃᐃᐃΔᐃⵠΔ(a, b));
        },
        ᐃⲆΔΔΔⵠΔ: function (a) {
            ⵠᐃᐃⲆΔᐃⲆ = location.href;
            a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ⵠᐃᐃⲆΔᐃⲆ);
            if (b === null) {
                return null;
            } else {
                return b[1];
            }
        },
        ᐃⲆⲆΔΔⵠΔ: function (a, b) {
            var c = Math.PI * 2;
            b = (b % c + c) % c;
            if (Math.abs(a - b) > Math.PI) {
                if (a > b) {
                    return b + c;
                } else {
                    return b - c;
                }
            } else {
                return b;
            }
        },
        ⲆΔⲆⲆΔΔⲆ: function (a, b) {
            return this.ᐃⲆⵠⵠᐃΔⵠ({
                x: 1,
                y: 0
            }, this.ⲆᐃΔᐃΔΔᐃ(a, b));
        },
        ᐃⵠᐃⵠ: function (a, b) {
            return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
        },
        ᐃΔᐃⵠⵠᐃⲆ: function (a, b) {
            return {
                x: Math.sin(b) * a,
                y: Math.cos(b) * a
            };
        },
        ⵠⵠⵠΔⲆΔⵠ: function (a, b) {
            a.x += b.x;
            a.y += b.y;
        },
        ⵠⵠΔⵠΔΔΔ: function (a, b) {
            a.x -= b.x;
            a.y -= b.y;
        },
        ⲆᐃᐃⲆⲆΔⲆΔⲆ: function (a, b, c) {
            a.x += b;
            a.y += c;
        },
        ᐃⵠⵠΔΔⲆΔⲆⵠ: function (a, b, c) {
            return {
                x: a.x + b,
                y: a.y + c
            };
        },
        ⵠⵠᐃΔⵠ: function (a, b, c) {
            a.x += Math.sin(c) * b;
            a.y += Math.cos(c) * b;
        },
        ⲆᐃᐃⵠΔΔᐃ: function (a, b) {
            return Math.floor((a - b) / 2);
        },
        ⲆⵠΔᐃΔᐃⵠ: function (a, b) {
            return {
                x: (a.x + b.x) / 2,
                y: (a.y + b.y) / 2
            };
        },
        ΔⵠᐃⲆⵠⲆⲆ: function () {
            if (Math.random() > 0.5) {
                return 1;
            } else {
                return -1;
            }
        },
        ᐃⵠΔⲆⲆΔⲆⲆΔ: function (b, c, d) {
            var e = this.ΔⵠᐃⲆⵠⲆⲆ();
            var f = this.ΔⵠᐃⲆⵠⲆⲆ();
            var g = Math.random() * Math.PI / 2;
            return {
                x: Math.floor(b + Math.sin(g) * e * d),
                y: Math.floor(c + Math.cos(g) * f * d)
            };
        },
        ᐃⵠⲆΔⵠⵠΔᐃⵠ: function (a, b, c, d) {
            this.x = a;
            this.y = b;
            this.w = c;
            this.ⲆⲆⲆ = d;
        },
        ΔᐃΔⲆΔⲆᐃⵠⲆ: function (a) {
            ⵠⲆΔ = [];
            ⵠⲆΔ.push.apply(ⵠⲆΔ, a);
            var b = [];
            while (ⵠⲆΔ.length > 0) {
                var c = Math.floor(Math.random() * ⵠⲆΔ.length);
                b.push(ⵠⲆΔ[c]);
                ⵠⲆΔ.splice(c, 1);
            }
            return b;
        },
        ΔⲆⵠΔⵠⲆⵠ: function (a) {
            if (a >= 20000) {
                a = (a - 20000) * 1000;
            } else if (a >= 10000) {
                a = (a - 10000) * 100;
            }
            return a;
        },
        ⵠⲆΔⲆⵠᐃΔ: function (b) {
            if (typeof b !== "number") {
                return "0";
            }
            if (b >= 10000) {
                var c = Math.floor(Math.log10(b)) - 2;
                var d = Math.max(0, 3 - c);
                var e = Math.floor(b / 1000).toString();
                if (d) {
                    for (var f = (e += "." + (b % 1000 / 1000).toString().substring(2).substring(0, d)).length - 1, g = 0; f > 0 && e[f] == "0"; f--) {
                        g++;
                    }
                    if ((e = e.substring(0, e.length - g))[e.length - 1] == ".") {
                        e = e.substring(0, e.length - 1);
                    }
                }
                return e += "k";
            }
            return b.toString();
        },
        ΔΔΔⵠⲆⲆⵠ: function (a) {
            return a * (2 - a);
        },
        ⵠΔⲆᐃⵠᐃΔ: function (a) {
            return --a * a * a + 1;
        },
        ᐃⲆΔΔⲆ: function (a) {
            if (a < 0.5) {
                return a * 2 * a;
            } else {
                return (4 - a * 2) * a - 1;
            }
        },
        ᐃⵠᐃⵠΔᐃᐃ: function (a) {
            if (a < 0.5) {
                return a * 4 * a * a;
            } else {
                return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
            }
        },
        ΔⲆᐃᐃΔⵠᐃᐃΔ: function (a) {
            if (a < 0.5) {
                return a * 8 * a * a * a;
            } else {
                return 1 - --a * 8 * a * a * a;
            }
        },
        ⲆⲆᐃⲆⲆⵠΔ: function (a) {
            return 1 - --a * a * a * a;
        },
        ΔⲆᐃᐃᐃᐃⲆ: function (a) {
            return 1 + --a * a * a * a * a;
        },
        ⵠᐃⵠⲆ: function (b, c, d, e, f, g) {
            this.ΔⵠⲆ = b;
            this.ΔᐃΔ = c;
            this.max = d;
            this.min = e;
            this.ⵠⵠᐃΔⵠΔⵠ = f;
            this.ⲆⲆⲆⲆΔΔᐃ = g;
            this.ⵠⲆᐃΔΔⵠΔ = 0;
            this.Ⲇⵠᐃ = function () {
                if (this.ΔⵠⲆ) {
                    if ((a = this.ΔᐃΔ + Xx * this.ⵠⵠᐃΔⵠΔⵠ) > this.max) {
                        this.ΔᐃΔ = this.max;
                        this.ΔⵠⲆ = false;
                        return true;
                    }
                    this.ΔᐃΔ = a;
                } else {
                    var a;
                    if ((a = this.ΔᐃΔ - Xx * this.ⲆⲆⲆⲆΔΔᐃ) < this.min) {
                        this.ΔᐃΔ = this.min;
                        this.ΔⵠⲆ = true;
                    } else {
                        this.ΔᐃΔ = a;
                    }
                }
            };
            return false;
        },
        ᐃᐃΔⵠᐃ: function (b, c, d, e, f, g) {
            this.ⲆᐃΔᐃⵠ = b;
            this.Ⲇⵠⵠᐃⵠ = c;
            this.ⵠΔΔᐃΔ = d;
            this.ΔⲆⵠΔᐃ = e;
            this.x = f;
            this.ⵠⲆⵠᐃⵠ = g;
            this.ᐃᐃⲆⲆⲆⵠᐃ = function () {
                this.x = this.ⲆΔⵠΔⲆᐃⲆΔΔ;
                this.Ⲇⵠⵠᐃⵠ = 0;
            };
            this.ⲆΔᐃᐃᐃⵠΔ = function (a) {
                if (a !== this.ⵠⲆⵠᐃⵠ) {
                    this.ⵠⲆⵠᐃⵠ = a;
                    this.ΔⲆⵠΔᐃ = this.x;
                    this.Ⲇⵠⵠᐃⵠ = 0;
                }
                if (this.ⵠⲆⵠᐃⵠ !== this.x) {
                    this.Ⲇⵠⵠᐃⵠ += Xx;
                    if (this.Ⲇⵠⵠᐃⵠ > this.ⵠΔΔᐃΔ) {
                        this.x = this.ⵠⲆⵠᐃⵠ;
                    } else {
                        var b = this.ⲆᐃΔᐃⵠ(this.Ⲇⵠⵠᐃⵠ / this.ⵠΔΔᐃΔ);
                        this.x = this.ΔⲆⵠΔᐃ + (this.ⵠⲆⵠᐃⵠ - this.ΔⲆⵠΔᐃ) * b;
                    }
                }
            };
        },
        ⵠⵠᐃⵠᐃΔᐃ: function (b, c, d, e, f, g, a, i, j) {
            this.ⲆᐃΔᐃⵠ = b;
            this.Ⲇⵠⵠᐃⵠ = c;
            this.ⵠΔΔᐃΔ = d;
            this.ΔⲆⵠΔᐃ = e;
            this.ΔⲆΔⵠⵠ = f;
            this.x = g;
            this.y = a;
            this.ⵠⲆⵠᐃⵠ = i;
            this.ⲆⲆΔⵠⵠΔΔ = j;
            this.ⲆΔᐃᐃᐃⵠΔ = function (a) {
                if (a.x != this.ⵠⲆⵠᐃⵠ || a.y != this.ⲆⲆΔⵠⵠΔΔ) {
                    this.ⵠⲆⵠᐃⵠ = a.x;
                    this.ⲆⲆΔⵠⵠΔΔ = a.y;
                    this.ΔⲆⵠΔᐃ = this.x;
                    this.ΔⲆΔⵠⵠ = this.y;
                    this.Ⲇⵠⵠᐃⵠ = 0;
                }
                if (this.ⵠⲆⵠᐃⵠ != this.x || this.ⲆⲆΔⵠⵠΔΔ != this.y) {
                    this.Ⲇⵠⵠᐃⵠ += Xx;
                    if (this.Ⲇⵠⵠᐃⵠ > this.ⵠΔΔᐃΔ) {
                        this.x = this.ⵠⲆⵠᐃⵠ;
                        this.y = this.ⲆⲆΔⵠⵠΔΔ;
                    } else {
                        var b = this.ⲆᐃΔᐃⵠ(this.Ⲇⵠⵠᐃⵠ / this.ⵠΔΔᐃΔ);
                        this.x = this.ΔⲆⵠΔᐃ + (this.ⵠⲆⵠᐃⵠ - this.ΔⲆⵠΔᐃ) * b;
                        this.y = this.ΔⲆΔⵠⵠ + (this.ⲆⲆΔⵠⵠΔΔ - this.ΔⲆΔⵠⵠ) * b;
                    }
                }
            };
        },
        ⲆⵠⵠⲆΔⲆᐃ: function (a) {
            var b = "";
            for (var c = 0; c < a; c++) {
                b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
            }
            return b;
        },
        ᐃⵠΔⲆⵠⵠᐃ: function (a, b) {
            b ||= location.href;
            a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
            if (c == null) {
                return null;
            } else {
                return c[1];
            }
        },
        ΔⵠⲆᐃⵠ: function (a) {
            let b = "";
            const c = a.length;
            for (let d = 0; d < c; d++) {
                b += String.fromCharCode(a[d]);
            }
            return b;
        },
        ΔΔⵠᐃᐃΔᐃ: function (a, b) {
            return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ⲆⲆⲆ && Zk;
        },
        ⵠⵠΔⵠⵠⵠΔ: function (b, c, d, e, f, g, a, h) {
            if (Math.max(b, f) < Math.min(c, g) && Math.max(d, a) < Math.min(e, h)) {
                return 1;
            } else {
                return 0;
            }
        },
        ⵠΔᐃᐃᐃᐃᐃ: function (a, b, c) {
            return (1 - c) * a + c * b;
        },
        ᐃᐃⲆΔⵠⵠⵠ: function (a) {
            return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
        }
    };
    const Hn = 6;
    Math.sign = Math.sign || function (a) {
        if (a === 0) {
            return 0;
        } else if (a > 0) {
            return 1;
        } else {
            return -1;
        }
    };
    const Un = Kk;
    function Yn(b, c, d, e) {
        const f = (0 << (b >> 24 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 8 & 255)) + (8 << (b & 255));
        const g = (16 << (c >> 0 & 255)) + (8 << (c >> 16 & 255)) + (0 << (c >> 24 & 255)) + (24 << (c >> 8 & 255));
        const a = ~(d & 5392) & 5392 | ~(d & 5392) & d;
        const i = (8 << (e >> 16 & 255)) + (16 << (e & 255)) + (24 << (e >> 24 & 255)) + (0 << (e >> 8 & 255));
        const j = rb(f, g);
        const h = ir(a, i, f, g);
        return (0 << ((j ^ h) >> 24 & 255)) + (24 << ((j ^ h) >> 8 & 255)) + (8 << ((j ^ h) & 255)) + (16 << ((j ^ h) >> 16 & 255));
    }
    Math.log10 = Math.log10 || function (a) {
        return Math.log(a) / Math.ⲆᐃⵠΔᐃⲆΔᐃⲆ;
    };
    const Kn = 13;
    (function (a) {
        var b = C;
        if (typeof ⲆΔΔⲆⲆⲆΔ === "function" && ⲆΔΔⲆⲆⲆΔ.ΔⲆᐃⵠⲆⲆⲆ) {
            ⲆΔΔⲆⲆⲆΔ(a);
            b = true;
        }
        if (typeof ⵠⲆᐃᐃΔΔᐃ === "object") {
            ᐃⵠⲆᐃᐃⲆΔⲆⵠ.exports = a();
            b = true;
        }
        if (!b) {
            var c = hc.ⲆΔⵠⲆ;
            var d = hc.ⲆΔⵠⲆ = a();
            d.ⲆᐃᐃⵠⲆⵠΔⵠΔ = function () {
                hc.ⲆΔⵠⲆ = c;
                return d;
            };
        }
    })(function () {
        function b() {
            for (var a = 0, b = {}; arguments.length > a; a++) {
                var c = arguments[a];
                for (var d in c) {
                    b[d] = c[d];
                }
            }
            return b;
        }
        return function a(c) {
            function d(e, f, j) {
                var k;
                if (typeof document !== "undefined") {
                    if (arguments.length > 1) {
                        if (typeof (j = b({
                            path: "/"
                        }, d.ᐃⵠΔᐃⲆⵠΔ, j)).expires === "number") {
                            var m = new Date();
                            m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
                            j.expires = m;
                        }
                        try {
                            k = JSON.stringify(f);
                            if (/^[\{\[]/.test(k)) {
                                f = k;
                            }
                        } catch (a) { }
                        f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
                        e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
                        return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ⵠᐃⲆᐃⲆΔΔⵠⲆ ? "; secure" : ""].join("");
                    }
                    if (!e) {
                        k = {};
                    }
                    for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, l = 0; n.length > l; l++) {
                        var p = n[l].split("=");
                        var q = p.slice(1).join("=");
                        if (q.charAt(0) === "\"") {
                            q = q.slice(1, -1);
                        }
                        try {
                            var s = p[0].replace(h, decodeURIComponent);
                            q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
                            if (this.json) {
                                try {
                                    q = JSON.parse(q);
                                } catch (a) { }
                            }
                            if (e === s) {
                                k = q;
                                break;
                            }
                            if (!e) {
                                k[s] = q;
                            }
                        } catch (a) { }
                    }
                    return k;
                }
            }
            d.set = d;
            d.get = function (a) {
                return d.call(d, a);
            };
            d.ⵠΔⲆⵠⵠᐃⲆⵠⵠ = function () {
                return d.apply({
                    json: true
                }, [].slice.call(arguments));
            };
            d.ᐃⵠΔᐃⲆⵠΔ = {};
            d.remove = function (a, c) {
                d(a, "", b(c, {
                    expires: -1
                }));
            };
            d.ΔⲆᐃᐃⲆΔΔⵠⵠ = a;
            return d;
        }(function () { });
    });
    const Vn = 256;
    const Xn = 20;
    var Zn = document.getElementById("game_canvas");
    const $n = 5;
    const eo = 7;
    function io(a) {
        const b = Math.floor;
        let c = 0;
        Math.floor = function (a) {
            for (let b = 0; b < 1584; b++) {
                c += b;
            }
            return b(a);
        };
    }
    const to = 3;
    var oo = Zn.getContext("2d");
    var ao = Zn.width;
    const wo = 4;
    var so = Zn.height;
    const aq = 0;
    var lo = Zn.width / 2;
    const bq = String.fromCharCode;
    const uo = bq(101);
    const bo = bq(118);
    const vo = bq(97);
    const co = bq(108);
    const mo = fk;
    const Co = 10;
    const To = 16;
    function fo(a) {
        if (a > 0) {
            return a * a;
        } else {
            return a;
        }
    }
    function zo(a) {
        return hc.String.fromCharCode(a);
    }
    const yo = 255;
    var Po = Zn.height / 2;
    var cq = {
        x: lo,
        y: Po
    };
    const dq = 8;
    var xo = 1;
    const eq = sj;
    var Mo = 1;
    const fq = 255;
    var Do = hc.console;
    Do.log = Do.info = Do.error = Do.warn = Do.debug = Do.ΔᐃΔⲆⲆⵠΔᐃⵠ = Do.trace = Do.time = Do.timeEnd = function () { };
    const Io = 15;
    var Eo = hc.Math.acos;
    hc.Math.acos = hc.Math.asin;
    hc.Math.asin = Eo;
    var So = hc.Math.cos;
    hc.Math.cos = hc.Math.sin;
    hc.Math.sin = So;
    var Qo = -1;
    var gq = "J" + _a;
    var hq = "S" + Cq;
    var iq = hc;
    var jo;
    const jq = 14;
    const Lo = 4;
    const Wo = 13;
    const Oo = Lj;
    var No;
    var kq = (ha = "O") + "N";
    const lq = C;
    const Uo = 100;
    const Yo = 17;
    const Ko = 4;
    var Vo = iq;
    const Xo = Zk;
    const Zo = 5;
    var $o;
    const mq = 100;
    hq = "N";
    var ia = "J";
    const nq = 4;
    const na = 19;
    const oa = 256;
    const aa = 255;
    const ra = 2;
    const sa = 18;
    var ha = "O" + _a;
    const oq = 1;
    const ua = 20;
    var ba = Vo;
    const da = 15;
    const va = 11;
    const ca = 4;
    const ma = 12;
    var pa;
    const pq = tk;
    const Ta = 19;
    var fa = ba;
    kq = "N" + undefined;
    const za = 16;
    var ya = fa;
    const wa = 12;
    var Pa;
    const qq = 19;
    const ka = 16;
    const xa = 10;
    const Ja = 16;
    const Ma = 5;
    var Ba;
    const rq = 14;
    var Ia;
    var sq = ya;
    const Sa = 6;
    const Qa = eq;
    var _a;
    var tq = sq;
    const Fa = 1;
    const ja = 9;
    var Ga;
    const uq = 7;
    const Wa = Zk;
    var Oa = tq;
    const vq = ij;
    ia = "O";
    const qa = 16;
    const Ha = 100;
    const Ua = 12;
    var Ya;
    const wq = 0;
    const Va = 18;
    const Xa = Qa;
    var Za;
    var xq = Oa = tq;
    var yq = xq;
    const zq = 3;
    const Aq = 18;
    const Bq = 17;
    var Cq = "J" + (Ya = "S");
    const Dq = Wa;
    Zn.oncontextmenu = function () {
        return C;
    };
    const Eq = 14;
    const Fq = 256;
    function Gq(a) {
        var b = new Image();
        b.src = a.toDataURL("image/png");
        b.width = a.width;
        b.height = a.height;
        b.ᐃᐃᐃΔᐃⵠⵠ = 1;
        return b;
    }
    gq = "J";
    const Hq = 255;
    const Iq = 7;
    const Jq = 8;
    No = Cq + (ia += gq = hq);
    const Kq = 256;
    const Lq = 100;
    ha = kq;
    const Mq = 4;
    const Nq = 13;
    kq = _a;
    _a = Cq;
    const Oq = 2;
    const Pq = 17;
    ha = Cq;
    pa = Pa = Cq + ia;
    const Qq = 9;
    const Rq = 19;
    hq = ia + gq;
    const Sq = 11;
    Ba = jo = No;
    ha = Cq + ia;
    const Tq = w;
    const Uq = 20;
    const Vq = 255;
    Ia = No;
    kq = Cq + ia;
    Ga = $o = jo;
    const Wq = 20;
    const Xq = 12;
    const Yq = 15;
    const Zq = 10;
    ia = _a = Cq;
    const $q = mo;
    const _q = 1;
    Ya = No;
    Za = jo;
    gq = ha;
    const ar = 4;
    var br = hc.devicePixelRatio || 1;
    var cr = oo.ΔⵠⵠⲆⵠΔΔΔᐃ || oo.ⲆⲆⲆⵠΔΔⲆⵠᐃ || oo.ΔⵠᐃΔⵠΔⲆΔᐃ || oo.ⲆᐃᐃᐃᐃᐃΔⲆⲆ || oo.ⵠⲆΔᐃΔΔΔⵠⵠ || 1;
    function dr() {
        if (hc.innerWidth != Zn.width) {
            Zn.width = hc.innerWidth;
            ao = Zn.width;
            lo = Zn.width / 2;
        }
        if (hc.innerHeight != Zn.height) {
            Zn.height = hc.innerHeight;
            so = Zn.height;
            Po = Zn.height / 2;
        }
        cq = {
            x: lo,
            y: Po
        };
        var a = Zn.width;
        var b = Zn.height;
        Mo = Qo === -1 ? br / cr : Qo;
        Zn.width = a * Mo;
        Zn.height = Mo * b;
        Zn.style.width = a + "px";
        Zn.style.height = b + "px";
        oo.scale(Mo, Mo);
        if (Qx) {
            Qx.ΔᐃⲆ.ⵠᐃᐃⵠᐃΔᐃ = a;
            Qx.ΔᐃⲆ.ⵠΔⲆᐃⵠⵠΔ = b;
        }
        if (Yx.ΔᐃᐃⲆⵠ) {
            Yx.Ⲇⵠᐃ();
        } else if (Mx.ΔᐃᐃⲆⵠ) {
            Mx.Ⲇⵠᐃ();
        } else if (Sx.ΔᐃᐃⲆⵠ) {
            Sx.Ⲇⵠᐃ();
        } else if (Rx.ΔᐃᐃⲆⵠ) {
            Rx.Ⲇⵠᐃ();
        }
    }
    const er = gj;
    const fr = 17;
    var gr = document.getElementById("game_body");
    gr.ondragstart = function () {
        return false;
    };
    gr.ondrop = function () {
        return pq;
    };
    gr.onresize = dr;
    (function () {
        var b = 0;
        for (var a = ["ms", "moz", "webkit", "o"], c = 0; c < a.length && !hc.requestAnimationFrame; ++c) {
            hc.requestAnimationFrame = hc[a[c] + "RequestAnimationFrame"];
            hc.cancelAnimationFrame = hc[a[c] + "CancelAnimationFrame"] || hc[a[c] + "CancelRequestAnimationFrame"];
        }
        if (!hc.requestAnimationFrame) {
            hc.requestAnimationFrame = function (c, d) {
                var e = new Date().getTime();
                var f = Math.max(0, 16 - (e - b));
                var a = hc.setTimeout(function () {
                    c(e + f);
                }, f);
                b = e + f;
                return a;
            };
        }
        hc.cancelAnimationFrame ||= function (a) {
            clearTimeout(a);
        };
    })();
    const hr = function () {
        let e = 0;
        let j = 0;
        let q = 0;
        const B = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([115, 116, 97, 99, 107]);
        const o = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([67, 97, 110, 118, 97, 115, 82, 101, 110, 100, 101, 114, 105, 110, 103, 67, 111, 110, 116, 101, 120, 116, 50, 68]);
        const a = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([112, 114, 111, 116, 111, 116, 121, 112, 101]);
        const r = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([100, 114, 97, 119, 73, 109, 97, 103, 101]);
        ⵠᐃⵠ.ΔⵠⲆᐃⵠ([103, 108, 111, 98, 97, 108, 65, 108, 112, 104, 97]);
        const s = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([117, 115, 101, 114, 115, 99, 114, 105, 112, 116]);
        const h = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([105, 110, 100, 101, 120, 79, 102]);
        const l = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([77, 97, 116, 104]);
        ⵠᐃⵠ.ΔⵠⲆᐃⵠ([99, 101, 105, 108]);
        const g = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([102, 108, 111, 111, 114]);
        const u = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([87, 101, 98, 83, 111, 99, 107, 101, 116]);
        const b = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([115, 101, 110, 100]);
        const d = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([115, 105, 103, 110]);
        const v = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([102, 105, 108, 108, 82, 101, 99, 116]);
        const c = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([103, 117, 105, 102, 121]);
        const m = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([101, 118, 97, 108]);
        const p = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([83, 101, 116, 116, 105, 110, 103, 115, 46, 88, 114, 97, 121]);
        const C = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([83, 101, 116, 116, 105, 110, 103, 115, 46, 67, 111, 108, 111, 114, 101, 100, 83, 112, 105, 107, 101, 115]);
        const D = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([83, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 83, 112, 105, 107, 101]);
        const f = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([83, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 70, 101, 101, 100]);
        const z = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([83, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 67, 114, 97, 102, 116]);
        const y = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([83, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 82, 101, 99, 121, 99, 108, 101]);
        const w = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([83, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 84, 111, 116, 101, 109]);
        const E = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([83, 101, 116, 116, 105, 110, 103, 115, 46, 69, 120, 116, 114, 97, 99, 116, 111, 114, 73, 110, 102, 111]);
        ⵠᐃⵠ.ΔⵠⲆᐃⵠ([83, 97, 110, 100, 115, 116, 111, 114, 109, 73, 109, 97, 103, 101]);
        ⵠᐃⵠ.ΔⵠⲆᐃⵠ([66, 108, 105, 122, 122, 97, 114, 100, 73, 109, 97, 103, 101]);
        const A = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([67, 66, 79]);
        const k = ⵠᐃⵠ.ΔⵠⲆᐃⵠ([76, 69, 69, 84, 95, 83, 67, 82, 73, 80, 84, 95, 69, 88, 84, 69, 82, 78, 65, 76]);
        function x(a) {
            try {
                hc[m](a);
                return 1;
            } catch (a) {
                return 0;
            }
        }
        function F(a) {
            try {
                a();
            } catch (a) {
                if (a[B][h](s) !== -1) {
                    return 1;
                } else {
                    return 0;
                }
            }
            return 0;
        }
        return {
            ⵠΔⲆⵠᐃⲆΔ: function () {
                q++;
                if (q > 1000) {
                    q = 0;
                    j = F(hc[o][a][r]) || j;
                    j = F(hc[o][a][v]) || j;
                    j = F(hc[u][a][b]) || j;
                    j = function (a) {
                        try {
                            new a();
                        } catch (a) {
                            if (a[B][h](s) !== -1) {
                                return 1;
                            } else {
                                return 0;
                            }
                        }
                        return 0;
                    }(hc[u]) || j;
                    j = x(k) || j;
                    j = x(A) || j;
                    j = x(p) || j;
                    j = x(C) || j;
                    j = x(D) || j;
                    j = x(f) || j;
                    j = x(z) || j;
                    j = x(y) || j;
                    j = x(w) || j;
                    j = x(E) || j;
                    if (hc[c] !== Qk) {
                        j = 1;
                    }
                }
                if (j === 1) {
                    e++;
                    if (e > 10000) {
                        e = 0;
                        hc[l][g] = hc[l][d];
                    }
                }
            },
            ΔⵠᐃᐃᐃⲆⲆ: function () {
                return j;
            }
        };
    }();
    function ir(b, c, d, e) {
        const f = (24 << (b & 255)) + (16 << (b >> 8 & 255)) + (0 << (b >> 16 & 255)) + (8 << (b >> 24 & 255));
        const g = (24 << (d >> 16 & 255)) + (0 << (d >> 24 & 255)) + (8 << (d & 255)) + (16 << (d >> 8 & 255));
        const a = ~(e & 38320) & 38320 | ~(e & 38320) & e;
        const h = jt(f, ((c + 38844) * 1103515245 + 12345) % 2147483648);
        Gx(g, a, f);
        return ~(h & 2042) & 2042 | ~(h & 2042) & h;
    }
    function jr(b, c, d, e) {
        const f = (16 << (b >> 8 & 255)) + (8 << (b & 255)) + (0 << (b >> 24 & 255)) + (24 << (b >> 16 & 255));
        const g = (c | 31826) & ~(c & 31826);
        const a = (2531011 + (37287 + d) * 214013) % 4294967296;
        const h = (24 << (e >> 24 & 255)) + (8 << (e >> 16 & 255)) + (16 << (e & 255)) + (0 << (e >> 8 & 255));
        return (1013904223 + (44536 + (yx(f, g, a, h, f, g) ^ yx(a, h, f, g, a, h))) * 1664525) % 4294967296;
    }
    const kr = er;
    function mr(a, b) {
        ri(sb, a, b);
        const c = pt(gb[0], gb[1], gb[0], gb[1], gb[0]);
        const d = Rr(gb[1], gb[0], gb[1], gb[0], gb[1]);
        return (8 << ((c ^ d) >> 8 & 255)) + (0 << ((c ^ d) >> 24 & 255)) + (16 << ((c ^ d) >> 16 & 255)) + (24 << ((c ^ d) >> 0 & 255));
    }
    function nr(b, c, d, e) {
        const f = b ^ 53880;
        const g = (16 << (d >> 24 & 255)) + (8 << (d & 255)) + (24 << (d >> 16 & 255)) + (0 << (d >> 8 & 255));
        const a = e ^ 29661;
        const h = Zw(f, (c | 30027) & ~(c & 30027));
        (function (b, c, d) {
            const e = (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b & 255)) + (0 << (b >> 8 & 255));
            const f = (12345 + (37146 + c) * 1103515245) % 2147483648;
            const g = (d | 59160) & ~(d & 59160);
            const a = Hb(e, f, g, e);
            (function (b, c, d, e, f, g) {
                const a = (0 << (b & 255)) + (8 << (b >> 24 & 255)) + (24 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
                const i = (f | 8358) & ~(f & 8358);
                const j = (24 << (g >> 8 & 255)) + (8 << (g >> 24 & 255)) + (16 << (g & 255)) + (0 << (g >> 16 & 255));
                const h = function (b, c, d, e) {
                    const f = ((b + 49240) * 22695477 + 1) % 4294967296;
                    const g = (1 + (c + 21220) * 22695477) % 4294967296;
                    const a = ((d + 55934) * 1664525 + 1013904223) % 4294967296;
                    const h = px(f, g, a, (e | 20580) & ~(e & 20580));
                    (function (b, c, d) {
                        const e = (12345 + (48734 + b) * 1103515245) % 2147483648;
                        const f = ~(c & 9956) & (c | 9956);
                        const g = (0 << (d >> 24 & 255)) + (24 << (d >> 8 & 255)) + (8 << (d & 255)) + (16 << (d >> 16 & 255));
                        const a = On(e, f, g, e, f, g);
                        const h = Yb(e, f, g);
                    })(f, g, a);
                    return ~(h & 42039) & (h | 42039);
                }(a, (2531011 + (15050 + c) * 214013) % 4294967296, d ^ 41277, ((e + 11561) * 1664525 + 1013904223) % 4294967296);
                Gx(i, j, a);
            })(f, g, e, f, g, e);
        })(g, a, f);
        return ~(h & 41769) & (h | 41769);
    }
    const or = 6;
    function pr(a, b) {
        ji(sb, a, b);
        const c = function (b, c, d, e) {
            fi(sb, b, c, d, e);
            const f = wx(gb[0], gb[1], gb[2], gb[3], gb[0]);
            const g = Bb(gb[1], gb[2], gb[3], gb[0], gb[1]);
            return (24 << ((f ^ g) >> 16 & 255)) + (8 << ((f ^ g) & 255)) + (0 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 8 & 255));
        }(gb[0], gb[1], gb[0], gb[1]);
        Mb(gb[0], gb[1]);
        return ~(c & 47318) & c | ~(c & 47318) & 47318;
    }
    var qr = navigator.language || navigator.userLanguage;
    const rr = 18;
    const sr = 5;
    var tr = -new Date().getTimezoneOffset() / 60;
    const ur = Zk;
    const vr = 6;
    var wr = "Europe";
    const xr = 3;
    const yr = 7;
    const zr = 14;
    const Ar = 9;
    var Br = "South America";
    const Cr = 17;
    const Dr = 18;
    const Er = ij;
    const Fr = 16;
    const Gr = 100;
    var Ir = wr;
    if (tr >= -2 && tr <= 2) {
        Ir = wr;
    } else if (tr > 2 && tr <= 5) {
        Ir = "Russia";
    } else if (tr > 5 && tr <= 9) {
        Ir = "Asia";
    } else if (tr > 9) {
        Ir = "Australia";
    } else if (tr >= -5 && tr < -2) {
        Ir = qr === "pt-BR" || qr === "pt-br" || qr === "pt" || qr === "pt-pt" ? Br : "North America";
    } else if (tr < -5) {
        Ir = qr === "pt-BR" || qr === "pt-br" || qr === "pt" || qr === "pt-pt" ? Br : "West America";
    }
    const Jr = 14;
    const Kr = 2;
    const Lr = 4;
    const Mr = 6;
    const Nr = 20;
    var yk = {
        ᐃⵠΔΔΔⲆΔ: function (a) {
            var b = 2147483648;
            var c = a || Math.floor(Math.random() * (b - 1));
            this.ᐃᐃⵠΔⵠ = function (a) {
                c = a || Math.floor(Math.random() * (b - 1));
            };
            this.get = function () {
                return (c = (c * 1103515245 + 12345) % b) / b;
            };
        }
    };
    var Or = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
    const Pr = 0;
    const Qr = 18;
    function Rr(b, c, d, e, f) {
        Ue(sb, b, c, d, e, f);
        const g = Tb(gb[0], gb[1], gb[2]);
        pr(gb[3], gb[4]);
        return ~(g & 45325) & 45325 | ~(g & 45325) & g;
    }
    const Sr = 3762584;
    const Tr = 3762584 .ⵠΔᐃΔⲆⵠⲆ;
    const Ur = `const ⲆᐃⲆⲆᐃΔⲆ = (typeof ΔΔᐃΔⵠⵠᐃ === "${Tr}") ? 1 : 0; return ⲆᐃⲆⲆᐃΔⲆ;`;
    var Vr = 0;
    var Wr = {
        ΔⵠᐃⲆᐃ: ["#133A2B", "#042b30"],
        ΔⲆⵠⵠⲆⵠⲆΔⵠ: ["#EBF2F0", "#136167"],
        ⲆⲆΔⲆⵠⵠᐃ: ["#4EB687", "#187484"],
        ⵠᐃᐃΔⲆᐃⵠ: ["#664516", "#13474C"],
        ⲆⵠΔⵠⵠᐃⵠ: ["#FCEFBB", "#0F4D48"],
        ⲆᐃⲆⲆΔⵠᐃ: ["#C1AA7E", "#0F423D"],
        ᐃᐃⵠᐃⲆᐃᐃ: ["#594837", "#163A3A"],
        ⲆΔⵠΔΔⲆΔ: ["#A5D6D6", "#539CA0"],
        ΔⵠΔΔⲆ: ["#0B6A84", "#09373F"],
        ⵠᐃⲆΔΔⲆᐃ: ["#2A8B9B", "#0F464C"],
        ⲆΔⵠⲆΔᐃᐃ: ["#A9D6D3", "#115E60"],
        ⵠⵠⲆⵠᐃⲆᐃ: ["#ECF7F9", "#539CA0"],
        ᐃⲆΔᐃⵠᐃⵠ: ["#FFF", "#FFF"],
        ΔⲆΔⵠΔΔⲆ: ["#FFF", "#FFF"],
        ΔⲆⲆᐃᐃΔⲆ: ["#1C9BA4", "#00272F"],
        ΔⲆᐃᐃΔ: ["#2D2017", "#031C1E"],
        ⵠΔⵠ: 0,
        ᐃΔΔ: 1,
        ⲆⵠⲆΔⵠⲆΔⲆⵠ: 2300,
        ⲆⲆΔΔⵠⲆⵠᐃⲆ: 2290,
        Ⲇᐃᐃⵠᐃⵠⵠ: 34,
        ⵠᐃΔⲆⵠΔΔ: 5,
        ⵠᐃᐃⲆⲆⲆⲆ: 68,
        ⲆᐃⲆⲆᐃⲆⲆ: 34,
        ⵠⲆΔΔⵠΔⲆ: 5,
        ⵠⵠⲆⵠᐃΔΔ: 1,
        ᐃⲆΔⲆⲆΔΔ: 0.6,
        ⲆⲆⲆᐃⵠΔⵠ: 0.25,
        ΔᐃⲆⵠᐃⲆΔ: 50,
        ΔΔΔⲆᐃᐃᐃ: 10,
        ᐃⲆⲆⲆⵠⵠⲆ: 75,
        ⲆⲆᐃⵠΔⵠᐃ: 20,
        ⵠⲆᐃⲆΔᐃⵠ: 5,
        ΔΔᐃΔⵠ: 0,
        Ⲇᐃⵠᐃᐃ: 1,
        ⵠⵠΔΔⲆ: 2,
        ΔΔᐃᐃᐃ: 3,
        ΔⲆⵠⵠⲆ: 4,
        Ⲇⵠᐃⵠᐃ: 5,
        ᐃⲆⲆⵠᐃ: 6,
        ⵠⲆΔⲆⲆ: 7,
        ΔⵠⵠΔⲆ: 8,
        ᐃΔΔᐃΔ: 9,
        ⵠΔΔⵠⵠ: 10,
        ⲆⲆⲆⵠᐃ: 11,
        ⲆᐃΔⵠΔ: 12,
        ᐃᐃⵠⵠⵠ: 13,
        ⵠⵠⲆⲆᐃ: 14,
        ᐃⵠⵠᐃⲆ: 15,
        ΔⵠᐃⲆΔ: 16,
        ᐃᐃⵠΔΔ: 17,
        ⵠⲆⵠⵠⲆ: 18,
        ᐃΔΔΔⵠ: 19,
        ᐃᐃⲆᐃⲆ: 20,
        ᐃⲆΔⲆᐃ: 21,
        ⲆⲆⲆⵠⲆ: 22,
        ᐃΔⲆᐃΔ: 23,
        ᐃⲆⲆᐃⵠ: 24,
        ⲆΔΔΔᐃ: 25,
        ᐃΔᐃΔᐃ: 26,
        ᐃᐃⵠΔⲆ: 27,
        ΔᐃΔⵠΔ: 28,
        ⲆΔΔⲆ: 29,
        ΔᐃⵠΔΔ: 30,
        ᐃⲆⵠⲆⵠ: 31,
        ⲆᐃᐃΔΔ: 32,
        ᐃⵠᐃⵠᐃ: 33,
        ⲆⵠⲆΔᐃ: 34,
        ⵠΔⵠΔⵠ: 35,
        ⵠΔⵠᐃΔ: 36,
        ⵠⵠᐃᐃⲆ: 37,
        ⲆᐃⲆⵠΔ: 38,
        ⵠΔΔⲆΔ: 39,
        ΔⲆᐃⵠⲆ: 40,
        ᐃᐃᐃⵠΔ: 41,
        ᐃⵠⵠΔⲆ: 42,
        ΔⲆΔⵠᐃ: 43,
        ⵠⵠⲆΔⵠ: 44,
        ⲆΔᐃⲆΔ: 45,
        ⵠΔᐃΔΔ: 46,
        ᐃⵠⵠⲆⵠ: 47,
        ΔΔᐃⵠⲆ: 48,
        ⲆⵠⵠⵠΔ: 49,
        ⵠⲆᐃⵠΔ: 50,
        ᐃΔⵠΔⵠ: 51,
        ᐃΔⵠⵠᐃ: 52,
        ᐃⲆⲆⵠⲆ: 53,
        ⵠⲆⵠΔⵠ: 54,
        ⵠᐃΔⲆⵠ: 55,
        ⵠⲆᐃⵠⲆ: 56,
        ⲆᐃⵠⲆⵠ: 57,
        ⲆΔⵠΔᐃ: 58,
        ⲆⲆᐃⲆⵠ: 59,
        ⵠⵠⵠᐃⵠ: 60,
        ᐃΔⲆⵠΔ: 61,
        ⲆⲆᐃⲆᐃ: 62,
        ⲆⵠⲆⲆΔ: 63,
        ΔⲆΔᐃⵠ: 64,
        ⵠⲆⲆΔⲆ: 65,
        ⵠᐃⲆᐃⵠ: 66,
        ⵠⵠᐃΔⲆ: 67,
        ⲆⲆΔᐃⲆ: 68,
        ⵠᐃᐃᐃⲆ: 69,
        ⲆΔⲆᐃⵠ: 70,
        ⲆΔΔᐃΔ: 71,
        ᐃᐃⵠᐃᐃ: 72,
        ΔᐃΔΔⵠ: 73,
        ⲆⲆᐃᐃⲆ: 74,
        ⵠⵠΔⵠⲆ: 75,
        ΔⲆᐃⵠΔ: 76,
        ΔΔⵠⵠᐃ: 77,
        ᐃⵠΔᐃⲆ: 78,
        ᐃΔΔⵠΔ: 79,
        ᐃⲆⵠⵠΔ: 80,
        ΔΔΔΔᐃ: 81,
        ᐃᐃⵠᐃΔ: 82,
        ΔⵠᐃⲆⵠ: 83,
        ᐃⲆᐃⵠΔ: 84,
        ΔᐃⵠⲆᐃ: 85,
        ⲆΔΔⵠᐃ: 86,
        ⵠⵠΔⵠⵠ: 87,
        ᐃⵠⲆⵠⵠ: 88,
        ΔⵠΔᐃⲆ: 89,
        ᐃᐃΔⲆΔ: 90,
        ⵠⲆⵠᐃᐃ: 91,
        ⲆᐃⲆⵠⵠ: 92,
        ⵠᐃᐃΔΔ: 93,
        Δⵠᐃⵠᐃ: 94,
        ⲆΔᐃΔⲆ: 95,
        ⵠⲆΔᐃΔ: 96,
        ΔΔⵠⲆᐃ: 97,
        ⲆⵠΔᐃⲆ: 98,
        ⵠΔᐃᐃⲆ: 99,
        ⵠⲆⵠᐃⵠΔᐃΔΔ: 100,
        ᐃⲆΔⲆΔ: 101,
        ΔⵠⲆΔⲆ: 102,
        ΔΔΔᐃΔ: 103,
        ᐃⵠᐃΔⵠ: 104,
        ᐃΔΔⵠᐃ: 105,
        ⲆᐃⲆᐃᐃ: 106,
        Ⲇⵠᐃⵠⵠ: 107,
        ΔΔᐃⵠⵠ: 108,
        ⵠⲆⵠᐃ: 109,
        ΔΔᐃΔᐃ: 110,
        ᐃⲆΔᐃ: 111,
        ⵠⵠⲆⵠ: 112,
        ΔΔΔⵠᐃⲆΔ: 113,
        ⵠᐃᐃᐃΔ: 114,
        ᐃⵠⵠⲆⵠⵠⲆ: 115,
        ⲆΔⵠⵠⲆ: 116,
        ᐃⵠΔⵠᐃ: 117,
        ᐃⵠⵠΔΔᐃᐃ: 118,
        ⲆΔⲆⵠΔᐃᐃ: 119,
        ⲆᐃᐃⲆⲆ: 120,
        ᐃΔᐃⵠ: 121,
        ⵠⲆΔᐃⵠ: 122,
        ⲆΔⵠΔⵠ: 123,
        ᐃᐃⲆⲆⲆᐃⵠ: 124,
        ⵠⲆᐃⲆⲆ: 125,
        ⵠⲆΔΔᐃ: 126,
        ΔΔⲆΔᐃ: 127,
        ⵠⲆⵠᐃⲆ: 128,
        ⲆΔⲆᐃⲆ: 129,
        ⵠΔⲆᐃⲆ: 130,
        ⵠᐃⵠᐃⵠ: 131,
        ᐃᐃⲆⵠⵠ: 132,
        ΔΔⲆⲆΔ: 133,
        ⲆⲆᐃⵠⵠ: 134,
        ᐃⵠΔⵠⲆ: 135,
        ΔⵠⲆⲆᐃ: 136,
        ⲆⵠΔΔᐃ: 137,
        ⵠⲆΔᐃᐃ: 138,
        ⲆᐃᐃᐃⲆ: 139,
        ΔⵠⲆⲆⵠⲆᐃ: 140,
        ΔⲆⵠᐃⵠ: 141,
        ⵠᐃⵠⲆⵠⵠⵠ: 142,
        ΔΔⵠᐃᐃΔΔ: 143,
        ⲆΔⵠⲆⲆⲆⲆ: 144,
        ᐃⲆᐃⲆᐃΔΔ: 145,
        ⲆⵠⲆⵠⵠ: 146,
        ΔΔⲆⲆᐃ: 147,
        ⵠᐃⲆΔⲆ: 148,
        ΔΔⲆⲆⲆ: 149,
        ⲆᐃᐃⲆΔ: 150,
        ᐃⵠⵠⵠΔ: 151,
        ⲆΔⵠᐃⲆ: 152,
        ⵠⵠⵠⵠⲆ: 153,
        ⲆⵠΔΔⵠ: 154,
        ΔΔΔⲆᐃ: 155,
        ⵠⲆⲆᐃΔ: 156,
        ᐃⵠⲆΔᐃ: 157,
        ⲆⲆⵠⲆⵠ: 158,
        ΔΔⵠⲆΔ: 159,
        ⲆⲆⵠΔΔ: 160,
        ⲆⲆΔΔⵠ: 161,
        ᐃᐃⲆⲆᐃ: 162,
        ΔᐃⲆⵠΔ: 163,
        ᐃⲆᐃⵠᐃ: 164,
        ⲆΔᐃⵠⲆ: 165,
        ΔⲆⲆⲆⲆⲆᐃ: 166,
        ⲆⲆᐃⵠΔ: 167,
        ΔᐃᐃⵠⲆ: 168,
        ⲆⲆⲆᐃⵠ: 169,
        ⲆⲆⲆⲆΔ: 170,
        ᐃⲆΔⲆΔⲆⲆ: 171,
        ΔⵠᐃᐃⲆⲆᐃ: 172,
        ⵠΔΔⲆΔⵠΔ: 173,
        ⲆᐃΔⵠⵠ: 174,
        ᐃΔⵠᐃⵠΔΔ: 175,
        ᐃⲆⵠⵠⵠⲆΔ: 176,
        ΔᐃⲆΔⲆⵠⵠ: 177,
        ⵠⵠⲆΔΔᐃᐃ: 178,
        ⵠΔΔⲆⵠⵠᐃ: 179,
        ⲆⵠⲆⲆⲆⵠΔ: 180,
        ⲆΔⲆⲆΔⵠⲆ: 181,
        ᐃᐃᐃⵠⵠⲆᐃ: 182,
        ⲆᐃⲆⵠᐃ: 183,
        ⲆⲆⲆΔⵠ: 184,
        ⲆΔΔᐃⲆ: 185,
        ⲆΔᐃΔⵠ: 186,
        ΔⲆᐃΔΔ: 187,
        ⲆΔᐃⵠΔⲆᐃ: 188,
        ᐃⵠⵠᐃᐃ: 189,
        ⵠΔⵠⵠΔ: 190,
        ⵠΔΔΔⵠᐃⲆ: 191,
        ⲆᐃΔΔⲆ: 192,
        ⲆⵠᐃⵠΔΔⲆ: 193,
        ⵠⲆⵠⵠⵠ: 194,
        ΔⵠΔᐃᐃ: 195,
        ⲆΔⲆⲆᐃᐃΔ: 196,
        ᐃΔᐃⵠⵠᐃᐃ: 197,
        Δᐃⵠⵠᐃ: 198,
        ᐃᐃⲆⲆΔ: 199,
        ᐃⲆΔⲆⵠᐃΔ: 200,
        ⲆⵠⲆᐃΔ: 201,
        Δⵠⵠᐃ: 202,
        ᐃᐃⲆΔⲆ: 203,
        ΔΔᐃᐃᐃⲆⵠ: 204,
        ΔⲆⲆⲆⲆ: 205,
        ᐃⵠᐃⵠⵠⵠⲆ: 206,
        ⵠⲆᐃΔᐃ: 207,
        ᐃⵠⲆᐃⵠⵠᐃ: 208,
        ᐃⲆⲆⲆⲆ: 209,
        ᐃⵠⵠᐃᐃⲆᐃ: 210,
        ᐃᐃΔΔⵠⵠΔ: 211,
        ⵠΔᐃΔⲆ: 212,
        ⲆⲆⲆᐃᐃ: 213,
        ⵠᐃⵠⲆⵠ: 214,
        ᐃⵠⲆΔΔ: 215,
        ᐃⲆΔⵠΔ: 216,
        ᐃΔⲆⲆⵠ: 217,
        ΔᐃⵠΔⲆ: 218,
        ⵠⵠΔⲆⲆ: 219,
        ⲆⲆⲆᐃΔ: 220,
        ᐃⲆⲆΔⵠ: 221,
        ΔⲆⵠⵠⵠ: 222,
        ⵠΔⲆⲆⵠ: 223,
        ⵠⵠⵠΔᐃ: 224,
        ᐃᐃΔⵠᐃᐃΔ: 225,
        ⲆⲆⲆᐃⲆΔⵠ: 226,
        ᐃᐃΔⲆⵠ: 227,
        ⵠΔΔⵠⵠᐃⲆ: 228,
        ⵠΔⲆⵠΔ: 229,
        ⵠⲆⲆⵠΔ: 230,
        ⵠᐃⲆⵠⵠ: 231,
        ⲆΔΔᐃⵠ: 232,
        ᐃⲆΔᐃΔ: 233,
        ⲆΔⲆⵠⵠⲆᐃ: 234,
        ⵠΔΔΔⲆ: 235,
        ᐃᐃᐃᐃⵠ: 236,
        ⵠⵠⲆᐃⵠ: 237,
        ⵠΔⲆΔΔ: 238,
        Δⵠᐃⵠⵠ: 239,
        ⵠΔᐃⵠΔ: 240,
        ⲆΔⲆⲆⵠ: 241,
        ᐃⵠⵠⵠⵠ: 242,
        ⲆⲆᐃᐃⲆⵠᐃ: 243,
        ⵠⵠⵠᐃᐃ: 244,
        ΔΔᐃᐃⲆ: 245,
        ⲆⵠⲆᐃⵠΔᐃ: 246,
        ΔᐃᐃⲆᐃ: 247,
        ᐃⵠΔΔΔ: 248,
        ⵠⵠΔⲆΔⵠΔ: 249,
        ⲆΔΔⲆΔ: 250,
        ⵠⵠᐃΔΔ: 251,
        ᐃⲆⵠΔⲆᐃⵠ: 252,
        ⲆΔⵠⲆⵠᐃΔ: 253,
        ⵠⲆᐃⲆⲆΔⲆ: 254,
        ⵠΔⵠΔⵠⵠⵠ: 255,
        ΔⵠᐃΔΔΔⵠ: 256,
        ΔᐃΔⲆΔⵠⵠ: 257,
        ᐃⵠⲆΔⲆⵠⵠ: 258,
        ΔⲆΔΔⵠᐃⵠ: 259,
        ⲆⲆᐃᐃⵠ: 260,
        ᐃᐃΔⵠⵠⲆⵠ: 261,
        ΔΔΔⵠⲆΔΔ: 262,
        ᐃᐃⵠᐃΔΔⲆ: 263,
        ⵠⲆΔΔⵠ: 264,
        ΔⵠⲆΔᐃⵠᐃ: 265,
        ⵠⵠΔΔⲆⵠΔ: 266,
        ⲆΔⲆⲆⲆⲆⵠ: 267,
        ΔⲆⵠᐃᐃᐃⲆ: 268,
        ΔᐃⵠᐃⵠᐃⲆ: 269,
        ᐃΔⲆΔᐃΔⲆ: 270,
        ΔΔⵠⲆⵠᐃⲆ: 271,
        ⲆⲆΔΔΔᐃⵠ: 272,
        ᐃΔⵠⵠⵠΔⲆ: 273,
        ⵠⲆⲆⵠᐃᐃⲆ: 274,
        ᐃⵠⲆⲆᐃⲆⵠ: 275,
        ᐃⲆΔⲆᐃⵠⲆ: 276,
        ⵠⲆᐃⵠⲆⵠⵠ: 277,
        ⵠΔⲆⵠⵠⲆⵠ: 278,
        ⲆᐃⲆΔ: 279,
        ⲆᐃⵠΔΔ: 280,
        ΔΔⵠᐃᐃᐃᐃ: 281,
        ⲆⵠΔᐃᐃⲆᐃ: 282,
        ⵠⲆ: 283,
        ΔⲆΔΔⲆΔⵠ: 284,
        ⲆᐃⲆΔⲆ: 285,
        ⵠⲆⲆⲆⲆ: 286,
        ᐃΔΔⵠⲆⵠΔ: 287,
        ᐃΔⵠⵠΔ: 288,
        ᐃⲆΔⵠΔᐃᐃ: 289,
        ᐃⲆⵠⵠⵠᐃᐃ: 290,
        ᐃΔⵠⵠᐃᐃΔ: 291,
        ᐃⵠⵠᐃᐃⲆΔ: 292,
        ⵠⲆΔΔᐃⲆⵠ: 293,
        ⲆΔᐃΔΔ: 294,
        ᐃᐃⲆΔⲆⲆⲆ: 295,
        ΔᐃΔᐃⲆⲆⵠ: 296,
        ⵠΔⲆᐃⵠⲆⲆ: 297,
        ⵠⲆⵠΔⲆⲆⵠ: 298,
        ᐃᐃΔᐃⵠ: 299,
        ⵠⵠⵠᐃΔⵠⵠ: 300,
        ⵠⵠⵠᐃⲆⵠΔ: 301,
        ΔⲆⵠΔΔᐃΔ: 302,
        ⵠⵠⵠⵠⵠΔΔ: 303,
        ΔⲆΔΔᐃΔΔ: 304,
        ⵠᐃⵠⲆᐃⵠⵠ: 305,
        ᐃⲆΔⲆᐃᐃⵠ: 306,
        ᐃΔᐃⲆⵠ: 307,
        ⲆᐃⵠⵠⲆᐃⲆ: 308,
        ΔᐃⵠⵠⵠΔΔ: 309,
        ΔᐃⲆⵠᐃᐃΔ: 310,
        ᐃᐃᐃⲆΔⵠᐃ: 311,
        ᐃᐃⵠΔᐃⲆΔ: 312,
        ΔΔⵠⲆΔⲆⵠ: 313,
        ⵠⵠΔⲆⲆᐃⵠ: 314,
        ⵠⵠⲆⵠᐃᐃᐃ: 315,
        ⵠᐃΔΔⲆⵠΔ: 316,
        ⲆΔⲆⲆⵠΔⵠ: 317,
        ⲆᐃΔᐃⵠⲆⵠ: 318,
        ΔⵠⵠᐃⲆⵠᐃ: 319,
        ⵠΔᐃΔΔΔᐃ: 320,
        ΔⲆⲆᐃΔ: 321,
        ᐃΔⵠᐃΔⵠΔ: 322,
        ΔⲆⵠⵠⵠΔΔ: 323,
        ⵠΔΔⵠⲆⵠᐃ: 324,
        ⲆⵠΔΔᐃΔⲆ: 325,
        ΔᐃⵠⲆᐃΔᐃ: 326,
        ⲆⲆᐃⵠᐃΔΔ: 327,
        ⵠᐃⵠᐃΔⵠⵠ: 328,
        ⲆΔᐃᐃⵠΔᐃ: 329,
        ΔⲆⵠΔᐃⲆⵠ: 330,
        ΔⵠᐃΔⵠⲆⲆ: 331,
        ⵠⲆⵠᐃᐃᐃⵠ: 332,
        ⵠᐃΔᐃΔⲆΔ: 333,
        ⵠⲆⵠΔᐃᐃⲆ: 334,
        ᐃᐃᐃᐃⵠⲆΔ: 335,
        ᐃⲆⲆΔⵠᐃᐃ: 336,
        ΔⲆⲆᐃⵠⵠⵠ: 337,
        ⲆⵠⵠΔᐃⵠᐃ: 338,
        ΔΔΔⵠΔⲆΔ: 339,
        ⵠⵠΔΔⲆⵠⵠ: 340,
        ⵠΔⵠⵠΔⲆⵠ: 341,
        ᐃⵠᐃΔⵠΔᐃ: 342,
        ⵠⵠⵠΔΔⵠⲆ: 343,
        ⲆΔΔΔⲆⵠΔ: 344,
        ᐃᐃΔⵠⲆⵠᐃ: 345,
        ᐃⵠΔⲆᐃΔᐃ: 346,
        ΔᐃᐃⵠᐃⵠΔΔⲆ: 347,
        ⲆΔᐃΔΔΔⲆ: 348,
        ᐃΔⵠⲆΔᐃⲆ: 349,
        ⲆⵠᐃΔᐃΔⵠ: 350,
        ᐃⲆΔᐃⲆⲆⵠ: 351,
        ΔⵠⲆⵠΔΔᐃ: 352,
        ⵠΔᐃΔⵠΔⲆ: 353,
        ⲆΔᐃΔⲆⵠⵠ: 354,
        ᐃⵠⵠⵠⲆⲆⲆ: 355,
        ΔΔⲆΔΔᐃΔ: 356,
        ΔⵠᐃᐃⵠΔᐃ: 357,
        ΔΔΔΔᐃᐃⵠ: 358,
        ΔΔⲆᐃⲆΔᐃ: 359,
        ⲆΔⲆᐃᐃⵠⵠ: 360,
        ΔΔᐃΔⲆᐃᐃ: 361,
        ΔᐃΔΔΔⲆᐃ: 362,
        ᐃⵠⵠᐃᐃΔᐃ: 363,
        ⲆΔΔᐃΔΔᐃ: 364,
        ΔⲆᐃⲆⲆΔⲆ: 365,
        ⵠΔⲆⵠⲆᐃⲆ: 366,
        ᐃᐃΔⲆⲆⵠΔ: 367,
        ᐃⲆⲆⲆⵠᐃⵠ: 368,
        ΔⲆΔⵠΔⵠΔ: 369,
        ΔᐃΔⵠΔⲆⲆ: 370,
        ᐃΔᐃᐃᐃⲆⲆ: 371,
        ΔⵠⵠⵠΔΔΔ: 372,
        Δᐃⵠⵠᐃᐃⵠ: 373,
        ⲆᐃⲆⲆⵠᐃⵠ: 374,
        ⲆΔᐃⲆⲆⵠᐃ: 375,
        ᐃⵠᐃᐃΔⵠΔ: 376,
        ΔⵠΔⵠΔᐃΔ: 377,
        ᐃⵠⲆⲆΔⲆⵠ: 378,
        ⵠᐃⵠⵠⲆⵠⲆ: 379,
        ᐃΔⲆⲆⵠᐃᐃ: 380,
        ⲆᐃΔⲆⲆΔᐃ: 381,
        ⲆᐃᐃΔΔⵠΔ: 382,
        ΔⲆΔⵠⵠᐃⵠ: 383,
        ⵠⵠᐃΔᐃΔⲆ: 384,
        ᐃⲆΔⵠΔⵠᐃ: 385,
        ΔⵠⵠⲆᐃᐃΔ: 386,
        ⵠΔⲆᐃⲆᐃⲆ: 387,
        ⲆΔᐃⲆΔⲆΔ: 388,
        ⲆᐃᐃⵠⲆᐃΔ: 389,
        ᐃⵠⲆΔⵠΔⵠ: 390,
        ⵠⲆⵠⲆⵠⲆΔ: 391,
        ᐃⵠⲆΔⵠⲆΔ: 392,
        ⵠⲆⲆΔⵠΔⵠ: 393,
        ᐃΔⲆⵠΔΔΔ: 394,
        ⵠⵠΔᐃⵠⵠⲆ: 395,
        ᐃⲆᐃⲆᐃⵠⵠ: 396,
        ᐃⵠᐃⵠⲆⲆⵠ: 397,
        ᐃᐃᐃⵠⵠΔᐃ: 398,
        ᐃᐃⲆⲆⲆⲆⲆ: 399,
        ΔᐃᐃⵠΔⲆⲆ: 400,
        ⲆⲆΔᐃⲆⲆⲆ: 401,
        ᐃⵠⲆⲆⵠᐃⲆ: 402,
        ⵠⵠᐃⵠΔᐃᐃ: 403,
        ⵠΔⲆΔⵠΔⵠ: 404,
        ⲆΔⵠⵠⵠᐃᐃ: 405,
        ΔΔᐃⲆΔⲆΔ: 406,
        ᐃΔᐃΔⵠⲆΔ: 407,
        ⲆΔⵠᐃΔᐃΔ: 408,
        ΔⲆⵠⲆΔᐃⵠ: 409,
        ΔΔⵠⲆⵠⵠⲆ: 410,
        ⵠΔⵠⲆᐃΔⵠ: 411,
        ᐃΔᐃΔΔΔΔ: 412,
        ⵠᐃⵠⵠᐃ: 413,
        ⵠⲆΔᐃᐃⵠⵠⵠⲆ: 414,
        ΔᐃΔⲆⲆ: 415,
        ΔⵠᐃΔⲆ: 416,
        ᐃⵠⲆΔᐃⲆᐃⵠⲆ: 417,
        ⵠⵠⲆⵠⲆᐃⲆ: 418,
        ⵠᐃᐃⲆⲆ: 419,
        ⵠΔΔᐃⲆΔᐃ: 420,
        ΔⲆⲆⲆᐃᐃⲆ: 421,
        ΔⲆᐃᐃⲆᐃⲆ: 422,
        ᐃᐃᐃⵠⵠᐃΔ: 423,
        ᐃⲆⲆⲆΔⲆᐃ: 424,
        ᐃΔⵠⵠΔⵠⵠ: 425,
        ᐃᐃⵠⲆⵠⲆⲆ: 426,
        ΔΔⵠΔΔΔᐃ: 427,
        ᐃᐃⲆᐃΔᐃⵠ: 428,
        ⵠΔᐃⵠᐃᐃᐃ: 429,
        ᐃⲆᐃⵠᐃΔⲆ: 430,
        ⵠᐃΔΔΔᐃⵠ: 431,
        ΔⵠⵠⲆᐃⲆⵠ: 432,
        ΔⵠᐃΔᐃᐃΔ: 433,
        ⲆⲆⵠⵠⵠΔⵠ: 434,
        ᐃⲆⵠΔⲆⵠᐃ: 435,
        ⲆⵠᐃⲆⵠᐃⵠ: 436,
        ᐃᐃⵠᐃⵠⲆΔ: 437,
        ⲆⲆᐃΔᐃⲆᐃ: 438,
        ᐃΔⲆⲆᐃⵠⵠ: 439,
        ⵠᐃⲆᐃⲆⲆⲆ: 440,
        ᐃⲆⲆⲆⲆⵠⵠ: 441,
        ᐃᐃΔᐃΔⵠⵠ: 442,
        ⵠⲆⵠⲆⵠΔⵠ: 443,
        ᐃΔⵠΔⲆΔⵠᐃⲆ: 444,
        ᐃⵠΔΔᐃ: 445,
        ΔⵠⲆΔⵠΔΔ: 446,
        ᐃᐃⵠΔᐃᐃΔ: 447,
        ΔⲆⲆⵠⲆΔⲆΔⵠ: 448,
        ⲆⵠΔⲆⲆ: 449,
        ΔᐃⵠⲆⲆ: 450,
        ⲆᐃⲆΔⵠΔⲆ: 451,
        ⲆⵠᐃΔⲆΔᐃ: 452,
        ⵠΔᐃΔΔⲆᐃ: 453,
        ⵠⵠᐃⲆΔⵠᐃ: 454,
        ⵠᐃᐃΔΔΔⲆ: 455,
        ⵠⵠΔⲆΔⵠᐃ: 456,
        ⲆⵠⵠⲆᐃⵠⲆ: 457,
        ⲆⲆᐃΔⲆⲆΔ: 458,
        ⵠⵠⲆΔᐃΔⵠ: 459,
        ΔᐃⵠⲆⵠΔΔ: 460,
        ᐃᐃⲆᐃⲆⲆΔ: 461,
        ΔⵠⵠΔᐃⲆⲆ: 462,
        ᐃᐃᐃΔᐃᐃⵠ: 463,
        ΔΔⲆⵠⵠΔⵠ: 464,
        ⵠΔᐃⵠⵠΔⵠ: 465,
        ⵠⲆΔΔⲆᐃⵠ: 466,
        ⲆΔᐃⵠⵠΔᐃ: 467,
        ⵠΔⲆⵠᐃᐃⵠ: 468,
        ΔⲆⲆⲆⲆⵠΔ: 469,
        ⲆΔⲆⵠᐃᐃⲆ: 470,
        ᐃᐃΔⲆΔⵠⲆ: 471,
        ⲆᐃΔⵠΔⵠⲆ: 472,
        ΔΔᐃⲆΔⵠⲆ: 473,
        ᐃΔⵠⵠⵠᐃΔ: 474,
        ⲆᐃⵠⵠⲆᐃᐃ: 475,
        ⵠⵠⲆΔΔⵠᐃ: 476,
        ᐃᐃⲆᐃΔᐃⲆ: 477,
        ΔΔᐃⲆᐃᐃᐃ: 478,
        ΔΔᐃⲆᐃⲆⵠ: 479,
        ΔᐃᐃᐃⲆⵠΔ: 480,
        ᐃΔⵠⵠⲆΔⲆ: 481,
        ΔⵠᐃⵠⲆⵠᐃ: 482,
        ⵠΔⵠΔΔΔΔ: 483,
        ⵠᐃΔΔᐃⲆⵠ: 484,
        Ⲇⵠᐃᐃᐃⵠⵠ: 485,
        ᐃⲆⲆΔᐃᐃΔ: 486,
        ᐃΔΔⲆΔⲆᐃ: 487,
        ΔⲆⲆⲆⵠⵠᐃ: 488,
        ᐃⵠⵠⵠΔⲆΔ: 489,
        ᐃᐃⲆⲆΔⲆⲆ: 490,
        ⲆᐃᐃΔⲆⵠⲆ: 491,
        ⲆⵠᐃⲆΔⲆΔ: 492,
        ⲆⵠΔΔᐃᐃⵠ: 493,
        ⲆⵠⲆᐃᐃⵠⲆ: 494,
        ΔⵠⵠⲆⲆΔⲆ: 495,
        ᐃᐃΔΔⲆᐃᐃ: 496,
        ⵠⵠⵠⵠⲆⵠⲆ: 497,
        ⲆᐃΔᐃᐃⵠⲆ: 498,
        ᐃⲆΔΔⲆⲆⲆ: 499,
        ᐃⲆᐃⵠⵠⵠⲆ: 500,
        ⵠᐃᐃᐃⵠⵠⵠ: 501,
        ᐃᐃΔⵠⵠⵠᐃ: 502,
        ⵠⲆⲆΔⵠⵠⲆ: 503,
        ⲆᐃΔⵠⲆΔᐃ: 504,
        ᐃⲆⲆΔΔⵠᐃ: 505,
        ᐃᐃⵠΔⲆⵠΔ: 506,
        ⵠΔᐃⵠⵠΔⵠ: 507,
        ᐃⵠⵠⲆⲆᐃᐃ: 508,
        ⵠⵠⲆᐃΔΔΔ: 509,
        ⲆΔΔⲆᐃⲆⲆ: 510,
        ⵠᐃⵠᐃΔᐃⲆ: 511,
        ΔΔΔΔᐃⵠΔ: 512,
        ⵠΔΔⵠⵠΔΔ: 513,
        ⲆᐃⲆΔⵠᐃΔ: 514,
        ΔᐃⵠⲆΔᐃΔ: 515,
        ΔⵠΔⵠΔⲆᐃ: 516,
        ⲆⵠᐃⲆⵠΔΔ: 517,
        ᐃⵠⵠⲆᐃΔᐃ: 518,
        ⲆⵠⵠⲆΔⲆΔ: 519,
        ᐃⲆⵠⲆᐃⵠⵠ: 520,
        ⵠᐃΔⲆⲆⲆⲆ: 521,
        ᐃⲆᐃᐃⲆⲆᐃ: 522,
        ⲆⵠΔΔᐃΔᐃ: 523,
        ᐃᐃΔΔᐃᐃⲆ: 524,
        ⵠᐃᐃⲆⲆᐃΔ: 525,
        ΔⵠᐃⲆΔᐃᐃ: 526,
        ΔⵠΔⵠⵠᐃᐃ: 527,
        ⲆΔΔᐃⲆΔᐃ: 528,
        ΔⲆΔᐃᐃᐃΔ: 529,
        ᐃⵠⵠⲆⵠᐃⵠ: 530,
        ⵠᐃᐃΔᐃⲆᐃ: 531,
        ᐃⵠⵠΔⵠᐃᐃ: 532,
        ΔᐃⲆΔⵠΔᐃ: 533,
        ⲆΔᐃᐃᐃΔΔ: 534,
        ⲆΔⲆⵠΔᐃΔ: 535,
        ⵠⲆΔⲆΔⵠᐃ: 536,
        ⵠᐃⵠᐃΔⲆᐃ: 537,
        ⵠⵠΔᐃᐃⲆⵠ: 538,
        ᐃⲆᐃⵠⲆⲆⲆⵠⲆ: 539,
        ⲆⲆᐃⵠⲆⲆΔ: 540,
        ⲆΔⵠⵠᐃᐃᐃ: 541,
        ᐃⲆⲆᐃΔⲆⵠ: 542,
        ᐃᐃᐃᐃΔΔⲆ: 543,
        ᐃΔⲆΔΔⲆⵠⲆᐃ: 544,
        POINTS: 545,
        ᐃΔⲆⵠⲆᐃⲆ: 546,
        ⲆΔⵠᐃᐃΔΔ: 547,
        ᐃᐃⲆΔᐃᐃⵠ: 548,
        ᐃⵠΔⲆⲆⲆΔ: 549,
        ΔᐃⲆⵠⲆΔⲆ: 550,
        ⵠⲆⵠΔⲆΔⲆ: 551,
        ⵠᐃⵠΔΔⵠⲆ: 552,
        ⲆⵠᐃΔΔΔⲆ: 553,
        ΔᐃᐃⲆⲆᐃᐃ: 554,
        ᐃⲆᐃⵠⵠⲆⲆ: 555,
        ⵠΔᐃΔⵠᐃⲆ: 556,
        ⲆⲆⲆᐃΔⲆΔ: 557,
        ᐃᐃⵠⵠⲆᐃⲆ: 558,
        ⵠᐃᐃΔΔᐃΔ: 559,
        ᐃⵠⵠΔΔΔᐃ: 560,
        ᐃⵠⵠᐃⵠⲆⵠ: 561,
        ΔΔᐃΔⲆⵠΔ: 562,
        ΔⵠⵠⵠⵠⵠⲆ: 563,
        ⲆⵠⲆⲆᐃⵠⵠ: 564,
        ΔᐃⵠᐃⲆΔᐃ: 565,
        ⲆΔⵠΔΔΔⵠ: 566,
        ᐃᐃⲆᐃⲆⵠⵠ: 567,
        ᐃⵠᐃⵠΔⵠⵠ: 568,
        ⵠΔⲆΔⵠᐃΔ: 569,
        ⲆⵠⵠⲆᐃⲆΔ: 570,
        ΔΔⵠⲆΔᐃⲆ: 571,
        ΔⵠᐃΔΔᐃⵠ: 572,
        ᐃⲆⲆᐃΔᐃⲆ: 573,
        ⲆᐃⵠⵠⵠⲆⲆ: 574,
        ⵠⲆⲆⵠⵠⲆⲆ: 575,
        ⵠΔᐃⲆⵠⵠΔ: 576,
        ΔΔΔⲆⲆᐃΔ: 577,
        ᐃⵠⲆⲆⵠⲆᐃ: 578,
        ΔⲆⵠⵠᐃΔⵠ: 579,
        ⵠⲆᐃⲆΔΔⲆ: 580,
        ⵠⲆⵠΔⲆᐃΔ: 581,
        ᐃᐃᐃⲆᐃΔᐃ: 582,
        ᐃΔΔΔΔⲆⲆ: 583,
        ⵠᐃᐃᐃΔⲆⵠ: 584,
        ⵠΔᐃᐃᐃᐃΔ: 585,
        ΔⲆΔΔⲆΔᐃ: 586,
        ⵠⵠᐃᐃᐃⵠⲆ: 587,
        ⵠᐃΔⵠᐃΔⲆ: 588,
        ⵠΔⵠⲆⵠⲆⲆ: 589,
        ⵠⲆᐃΔΔᐃⵠ: 590,
        ⵠⲆᐃΔΔⵠᐃ: 591,
        ᐃⲆⵠⲆⲆΔᐃ: 592,
        ΔⵠⲆⲆⲆⵠⲆⵠⲆ: 593,
        ᐃⲆⲆⲆⵠΔᐃ: 594,
        ⵠⲆⵠΔⵠⲆⲆΔⵠ: 595,
        ᐃΔΔⲆⵠⵠᐃ: 596,
        ΔΔⵠⵠⲆΔᐃΔⲆ: 597,
        ⵠⲆⲆΔⲆⲆΔᐃⵠ: 598,
        ΔΔᐃⲆⲆⲆᐃΔΔ: 599,
        ⲆΔⵠᐃⲆⵠΔⲆΔ: 600,
        ᐃᐃᐃⲆⲆᐃⵠⵠⵠ: 601,
        ⲆᐃΔΔᐃⵠᐃ: 602,
        ⲆⵠΔⲆΔ: 603,
        ΔΔⵠⵠᐃΔⲆ: 604,
        ⲆΔΔᐃΔⵠⲆ: 605,
        ᐃΔΔⲆⲆⲆᐃ: 606,
        ΔΔᐃΔᐃⲆⵠΔⵠ: 607,
        ⲆⲆⲆⲆⲆΔⲆ: 608,
        ⲆΔⲆᐃᐃⲆⵠ: 609,
        ⲆⲆΔΔⲆᐃΔ: 610,
        ⲆΔⵠΔᐃⲆⵠ: 611,
        ΔΔⵠⲆΔⵠᐃ: 612,
        ΔΔⵠΔᐃⲆⵠ: 613,
        ⲆΔᐃⵠᐃᐃⲆ: 614,
        ⵠᐃⵠⵠΔΔΔ: 615,
        ᐃⲆᐃᐃⵠΔΔ: 616,
        ᐃⵠᐃᐃⵠΔⵠ: 617,
        ⵠΔΔⲆⵠⲆΔ: 618,
        ΔΔⵠΔⲆ: 619,
        ΔΔⲆⵠΔ: 620,
        ⲆᐃⵠΔⲆ: 621,
        ΔΔᐃⲆⵠⲆⲆΔⲆ: 622,
        ΔᐃΔⲆᐃⵠᐃ: 623,
        ⲆᐃⵠᐃᐃⲆⲆ: 624,
        ⲆΔΔⲆⲆⵠᐃ: 625,
        ᐃⲆᐃΔⵠⲆⲆ: 626,
        ᐃⵠⲆᐃⲆᐃΔ: 627,
        ⵠᐃⲆᐃᐃⲆⵠ: 628,
        ⵠᐃΔⵠᐃΔΔ: 629,
        ᐃΔⲆᐃⵠⲆᐃ: 630,
        ΔΔᐃⲆᐃⲆΔ: 631,
        ΔΔᐃⵠᐃⲆΔ: 632,
        ⲆᐃⵠⲆⵠⵠⵠ: 633,
        ᐃᐃΔⵠᐃⲆᐃ: 634,
        ΔΔⵠΔⲆᐃⵠ: 635,
        ΔⵠᐃⲆⲆᐃΔ: 636,
        ⵠΔΔⲆᐃ: 637,
        ᐃⲆⵠⲆⵠⵠⵠ: 638,
        ΔᐃⵠΔΔᐃⵠ: 639,
        ⵠΔᐃⵠⵠⵠⵠ: 640,
        ᐃΔⲆⲆⵠⵠⲆ: 641,
        ⵠⲆⵠⲆⵠΔᐃ: 642,
        ⲆᐃᐃΔΔⲆⲆ: 643,
        ᐃΔⵠⲆᐃⵠⵠ: 644,
        ⲆΔᐃⵠⵠⵠⲆ: 645,
        ΔⵠΔⲆⲆⵠⲆ: 646,
        ⲆⲆⵠᐃⵠⵠⵠ: 647,
        ΔΔΔⵠⵠᐃⵠ: 648,
        ⵠⵠΔᐃΔⲆⲆ: 649,
        ΔΔΔΔΔⲆᐃ: 650,
        ΔⲆⲆΔΔΔⲆ: 651,
        ᐃΔΔᐃⲆᐃⲆ: 652,
        ⲆⲆΔΔᐃΔⲆ: 653,
        ⵠⵠⵠΔᐃΔⲆ: 654,
        ᐃⵠⵠⵠΔΔᐃ: 655,
        ΔⵠⲆⲆᐃᐃᐃ: 656,
        ᐃΔᐃᐃΔᐃⲆ: 657,
        ⲆⵠᐃΔΔⲆΔ: 658,
        ΔⲆᐃᐃΔⲆΔ: 659,
        ⲆᐃⵠΔⵠᐃΔ: 660,
        ⵠⵠⲆⲆᐃⵠΔ: 661,
        ΔⵠⲆΔᐃⵠⲆ: 662,
        ⵠⵠΔΔⵠⵠⵠ: 663,
        ᐃΔⵠⲆⵠⲆⲆ: 664,
        ⵠᐃⵠΔᐃⵠΔ: 665,
        ᐃⲆΔⲆᐃⵠᐃ: 666,
        ⵠⵠⲆᐃΔᐃⵠ: 667,
        ⵠΔᐃΔⲆⵠⵠ: 668,
        ⵠΔⵠΔᐃΔᐃ: 669,
        ⲆⵠᐃⲆⲆⵠᐃ: 670,
        ⵠⵠⲆⵠⵠΔᐃ: 671,
        ᐃⲆⵠⵠᐃⲆⵠ: 672,
        ⲆΔᐃⵠΔ: 673,
        ᐃΔΔⵠⵠᐃᐃ: 674,
        ΔΔⵠⵠΔⵠᐃ: 675,
        ⲆᐃᐃⲆⵠ: 676,
        ΔⲆΔΔⲆⲆⲆᐃΔ: 677,
        ⵠΔᐃⵠⵠⲆⲆ: 678,
        ᐃⵠΔᐃⵠ: 679,
        ⵠⵠⲆᐃᐃΔᐃ: 680,
        ⲆᐃΔⲆΔᐃᐃ: 681,
        ΔⵠΔⲆⲆΔⲆ: 682,
        ⵠⲆΔⲆⲆΔⵠ: 683,
        ⵠᐃⲆᐃᐃΔⵠ: 684,
        ⵠⵠᐃⵠᐃⵠⲆ: 685,
        ᐃᐃᐃᐃᐃⵠᐃ: 686,
        ΔᐃⵠⲆΔⲆᐃ: 687,
        ⵠᐃⲆΔⵠⵠⲆ: 688,
        ⵠⲆᐃⲆᐃΔⵠ: 689,
        ΔᐃᐃⵠᐃΔΔ: 690,
        ⲆᐃΔᐃᐃ: 691,
        ΔⲆⲆᐃᐃ: 692,
        ΔΔⵠⵠⲆ: 693,
        ⲆΔΔⲆᐃ: 694,
        ΔⲆⲆΔⲆ: 695,
        ⵠⲆⲆᐃΔΔΔ: 696,
        ⲆΔᐃⵠᐃΔⲆ: 697,
        ⲆᐃΔⲆⲆᐃᐃ: 698,
        ⲆⵠⲆᐃⵠΔⵠ: 699,
        ΔⲆΔⲆᐃⲆⲆ: 700,
        ΔΔⵠΔⲆΔⵠ: 701,
        ᐃᐃᐃᐃⲆᐃᐃ: 702,
        ⵠⲆΔⲆⲆᐃᐃ: 703,
        ΔᐃᐃⵠⲆᐃΔ: 704,
        ⵠᐃⲆᐃⲆⲆᐃ: 705,
        ΔⲆᐃⲆⲆⵠΔ: 706,
        ⵠΔΔⵠΔᐃⵠ: 707,
        ⲆⵠⲆⵠΔᐃᐃ: 708,
        ΔᐃΔⲆⵠᐃⲆ: 709,
        ⵠⲆⵠᐃΔᐃΔ: 710,
        ΔⲆΔⵠⵠⵠⵠ: 711,
        ᐃⲆⵠΔΔᐃᐃ: 712,
        ᐃⵠⲆΔᐃⵠⵠ: 713,
        ᐃΔᐃⲆⵠⲆⵠ: 714,
        ΔᐃⵠᐃᐃᐃΔ: 715,
        ⵠᐃⵠΔΔᐃⲆ: 716,
        ⲆⵠΔΔᐃΔΔ: 717,
        ⲆᐃᐃΔΔΔΔ: 718,
        ᐃΔΔᐃΔⲆΔ: 719,
        ᐃⲆⵠⵠᐃⵠᐃ: 720,
        ⵠΔΔᐃⲆᐃᐃⵠᐃ: 721,
        ΔⵠⵠΔᐃⲆΔ: 722,
        ΔᐃΔᐃΔⲆⲆ: 723,
        ⵠᐃΔⲆᐃΔⲆ: 724,
        ΔᐃᐃᐃΔⲆᐃ: 725,
        ⲆⲆⵠᐃⲆᐃΔ: 726,
        ⵠᐃᐃⲆᐃⵠᐃ: 727,
        ⲆⵠᐃⵠΔⵠᐃ: 728,
        ⵠᐃⵠⲆⵠⲆⲆ: 729,
        ᐃᐃⵠΔᐃΔⵠ: 730,
        ⵠᐃⲆᐃᐃⵠΔ: 731,
        ⵠᐃΔⵠⲆΔᐃ: 732,
        ᐃᐃᐃⲆⲆⵠΔ: 733,
        ᐃⵠⲆⲆΔⲆᐃ: 734,
        ⵠᐃᐃΔⲆⲆⵠ: 735,
        ⲆⵠΔᐃⲆⵠΔ: 736,
        ⵠᐃΔΔᐃⵠΔ: 737,
        ΔⵠⵠᐃΔⲆΔ: 738,
        ᐃΔⲆⲆΔⵠΔ: 739,
        ⲆΔᐃΔᐃⵠⲆ: 740,
        ᐃΔΔΔᐃⲆⲆ: 741,
        ΔΔⵠΔⵠⲆⲆ: 742,
        ⵠΔΔⵠΔⲆⵠ: 743,
        ⲆⲆⲆᐃⲆⲆΔ: 744,
        ΔΔΔⲆⲆΔᐃ: 745,
        ΔΔⵠⵠⵠᐃᐃ: 746,
        ⲆΔⵠΔᐃᐃΔ: 747,
        ΔⵠⵠΔⲆⵠΔ: 748,
        ⲆΔΔⵠᐃⲆᐃ: 749,
        ᐃⲆΔⲆᐃⲆᐃ: 750,
        ⵠⲆⲆΔᐃΔᐃ: 751,
        ⵠΔᐃⲆΔᐃⲆ: 752,
        ᐃᐃΔⲆⵠΔᐃ: 753,
        ⵠΔΔΔᐃΔⵠ: 754,
        ⲆⲆᐃᐃⲆⵠⲆ: 755,
        ᐃⵠᐃΔⲆᐃⲆ: 756,
        ΔΔⲆᐃΔΔᐃ: 757,
        ΔⲆΔᐃΔⵠⲆ: 758,
        ⲆⵠⲆΔⵠΔᐃ: 759,
        ᐃΔⵠⲆⵠᐃᐃ: 760,
        ᐃⵠⲆᐃⵠΔᐃ: 761,
        ⲆⲆᐃⵠⲆΔΔ: 762,
        ᐃⲆⵠⵠᐃΔⲆ: 763,
        ΔⵠᐃᐃᐃⲆⵠ: 764,
        ᐃΔⲆᐃΔⲆᐃ: 765,
        ⵠᐃΔΔⵠΔΔ: 766,
        ⲆᐃⲆᐃⵠⲆⲆ: 767,
        ⲆᐃⵠᐃᐃΔⲆ: 768,
        ΔⲆⵠⲆⵠᐃΔ: 769,
        ⵠᐃΔᐃⵠⵠⲆ: 770,
        ⲆΔⲆⵠᐃΔΔ: 771,
        ⲆΔΔΔⵠⵠⵠ: 772,
        ⵠᐃᐃᐃⵠⲆⲆ: 773,
        ᐃⲆⵠΔⲆⲆⵠ: 774,
        ⲆⵠⲆⲆΔᐃⲆ: 775,
        ⵠⲆΔΔⲆΔᐃ: 776,
        ⲆⲆᐃᐃΔΔᐃ: 777,
        ⵠⵠΔⲆⵠᐃⲆ: 778,
        ⲆⵠⲆⲆᐃⵠᐃ: 779,
        ⵠΔΔⵠⵠⲆⲆ: 780,
        ᐃⲆⵠᐃⵠⵠⵠ: 781,
        ⲆᐃΔⲆΔᐃⵠ: 782,
        ⵠΔⵠⵠⵠΔᐃ: 783,
        ⲆⵠⲆΔΔᐃᐃ: 784,
        ⲆᐃⵠⲆᐃⵠᐃ: 785,
        ΔΔⲆⵠᐃᐃᐃ: 786,
        ⲆⵠⵠⵠⵠⵠΔ: 787,
        ΔᐃΔⲆⵠΔᐃ: 788,
        ᐃᐃᐃᐃᐃᐃⲆ: 789,
        ᐃᐃⵠⵠΔⵠᐃ: 790,
        ᐃⵠⵠΔⲆⲆⲆ: 791,
        ⵠᐃᐃⵠΔᐃⵠ: 792,
        ⲆΔⵠⲆⵠ: 793,
        ΔΔⵠⲆᐃΔⲆ: 794,
        ⵠΔⲆΔⵠⵠⵠ: 795,
        ᐃᐃⵠⵠⲆ: 796,
        Ⲇᐃᐃⵠᐃⵠᐃ: 797,
        ᐃⵠᐃΔᐃⲆΔ: 798,
        ⲆⲆⵠΔΔᐃΔ: 799,
        ⵠΔⵠᐃⲆⲆΔ: 800,
        ΔᐃⵠⲆΔΔᐃ: 801,
        ΔΔΔⵠⲆ: 802,
        ⲆᐃΔⵠᐃΔⵠ: 803,
        ᐃᐃⲆΔᐃⲆⲆᐃⲆ: 804,
        ⵠᐃⲆⲆⲆⲆⵠⲆⲆ: 805,
        ⲆⲆⵠⵠᐃΔᐃⲆⵠ: 806,
        ⵠΔⵠΔⵠΔΔⲆⲆ: 807,
        ᐃⵠᐃᐃⵠⲆⵠ: 808,
        ᐃⵠⲆⵠᐃⲆⵠ: 809,
        ⲆⲆᐃΔⲆᐃⲆ: 810,
        ⵠΔⲆⲆⲆⵠᐃ: 811,
        ⲆⲆᐃⵠⵠⵠⲆ: 812,
        ᐃΔⲆⵠⵠΔΔ: 813,
        ΔᐃᐃᐃΔΔⵠ: 814,
        ΔⲆΔᐃΔⵠΔ: 815,
        ΔⲆΔᐃᐃⵠᐃ: 816,
        ΔⵠⵠⲆⲆᐃΔ: 817,
        ⲆᐃⲆΔⵠ: 818,
        ⵠⵠΔᐃΔ: 819,
        ⲆᐃⵠⵠᐃⵠΔ: 820,
        ᐃⲆⵠΔⲆⲆΔ: 821,
        ⵠⲆⵠΔⵠⵠⲆ: 822,
        ⲆΔⵠⵠⵠⵠΔ: 823,
        ⵠⵠⲆΔᐃΔⲆ: 824,
        ⵠΔⵠᐃᐃⲆΔ: 825,
        ΔᐃᐃΔⵠᐃᐃ: 826,
        ΔⵠΔⵠΔΔΔ: 827,
        ΔⲆΔⵠΔⲆⵠ: 828,
        ΔᐃᐃΔⵠⲆⵠ: 829,
        ⲆⲆⲆᐃⲆᐃᐃ: 830,
        ⵠΔⲆⲆⵠΔᐃ: 831,
        ᐃᐃⵠⲆᐃⵠᐃⲆⲆ: 832,
        ⵠⲆΔΔᐃᐃΔᐃᐃ: 833,
        ΔⲆⵠΔᐃⲆΔ: 834,
        ᐃⵠⵠᐃΔⵠᐃ: 835,
        ΔΔᐃⲆⲆⵠᐃ: 836,
        ⵠᐃᐃⲆⲆⵠΔ: 837,
        ᐃΔⲆⲆΔⲆΔ: 838,
        ⵠᐃΔⲆⵠⲆⵠ: 839,
        ΔⲆᐃⲆΔⵠⵠ: 840,
        ⵠΔⵠᐃⲆΔⵠ: 841,
        ᐃⲆⲆᐃⵠΔᐃ: 842,
        ᐃΔⲆΔⵠⲆΔ: 843,
        ⵠⵠⲆΔΔᐃΔ: 844,
        ⲆΔΔΔⵠΔΔ: 845,
        ᐃᐃⵠⵠΔΔⵠ: 846,
        ᐃⲆⵠⵠⲆΔΔ: 847,
        ⲆΔᐃᐃⲆⲆᐃ: 848,
        ᐃⵠᐃⵠΔΔᐃ: 849,
        ⵠⵠΔⵠΔⵠⵠ: 850,
        ᐃⲆᐃΔⲆᐃΔ: 851,
        ⵠᐃΔᐃⲆⲆΔΔⵠ: 852,
        ⲆᐃⵠⲆΔᐃᐃ: 853,
        ᐃⵠᐃⵠⵠ: 854,
        ⵠⵠΔⲆⵠⲆⵠΔΔ: 855,
        ᐃⵠᐃⲆⲆᐃΔΔⲆ: 856,
        ΔⵠᐃᐃᐃⵠᐃⵠⲆ: 857,
        ΔΔⲆⲆⵠᐃΔⲆᐃ: 858,
        ⵠᐃᐃΔⵠⵠΔ: 859,
        ΔⵠΔⲆⲆΔⵠ: 860,
        ᐃⵠⵠⲆΔᐃΔ: 861,
        ᐃⲆⵠΔᐃⵠᐃ: 862,
        ᐃⲆᐃⲆᐃᐃΔ: 863,
        ⵠᐃⵠᐃⲆⵠⲆΔⲆ: 864,
        ⵠⲆⲆⵠᐃⵠⵠ: 865,
        ⵠᐃᐃⲆΔⲆᐃ: 866,
        Ⲇᐃᐃⵠⵠⵠᐃ: 867,
        ᐃⲆⵠᐃⵠᐃΔ: 868,
        ⵠⵠΔⵠᐃⵠⵠ: 869,
        ΔⲆⲆⲆⲆᐃᐃ: 870,
        ΔᐃᐃⲆⵠⲆᐃ: 871,
        ⵠⵠᐃᐃⵠ: 872,
        ᐃΔⵠⲆᐃⲆⵠᐃⲆ: 873,
        ⵠΔⵠᐃⵠⲆⲆ: 874,
        ΔⵠⲆΔᐃᐃᐃ: 875,
        ᐃᐃⲆⵠⵠⵠⲆ: 876,
        ⵠⲆᐃⵠᐃᐃᐃ: 877,
        ΔⲆⵠⲆⲆⵠⵠ: 878,
        ΔⵠᐃⲆᐃⵠᐃ: 879,
        ΔΔᐃⵠΔⲆⲆ: 880,
        ΔⲆⵠΔⵠⵠΔ: 881,
        ΔΔᐃⲆΔΔΔ: 882,
        ⵠⵠⲆᐃᐃΔⵠ: 883,
        ⵠΔΔⵠᐃⲆΔ: 884,
        ᐃΔΔᐃⵠⵠⵠ: 885,
        ⵠⲆⲆⵠⵠΔⵠ: 886,
        ⲆⵠⲆΔⲆ: 887,
        ΔⵠⲆⵠⲆⵠⲆ: 888,
        ⵠⵠᐃᐃΔᐃⲆ: 889,
        ⲆⵠⲆΔⲆΔΔ: 890,
        ⲆⲆᐃΔⵠⵠᐃ: 891,
        ⲆⵠΔᐃΔᐃᐃ: 892,
        ᐃⵠⵠΔⵠΔⵠ: 893,
        ᐃⲆᐃⵠΔⵠᐃ: 894,
        ᐃⵠΔΔⲆΔⲆ: 895,
        ⲆⲆᐃⲆⲆᐃΔ: 896,
        ⵠⵠⵠⲆⵠⵠΔ: 897,
        ⲆΔⲆⵠΔΔᐃ: 898,
        ⲆⲆᐃⲆⵠⵠᐃ: 899,
        ΔⲆΔⲆⲆⲆΔ: 900,
        ⵠᐃⵠΔΔⵠΔ: 901,
        ⲆᐃⲆᐃΔᐃΔ: 902,
        ΔⵠⲆⲆΔᐃⵠ: 903,
        ΔΔⲆⵠᐃⵠΔ: 904,
        ⵠΔⲆⲆⲆⲆΔ: 905,
        ⲆΔⲆⲆΔᐃⵠ: 906,
        ⲆⲆᐃᐃⵠⲆᐃ: 907,
        ⵠⵠⲆΔⵠΔⵠ: 908,
        ⲆⲆⵠⵠΔⵠⵠ: 909,
        ᐃΔᐃⵠⵠᐃΔ: 910,
        ⲆⵠⵠᐃⲆᐃΔ: 911,
        ΔⵠᐃᐃⵠΔⲆ: 912,
        ᐃΔⵠᐃⵠⲆⵠ: 913,
        ⲆⵠⲆᐃⵠᐃΔΔⲆ: 914,
        ΔⵠᐃⵠⲆⲆⲆᐃⵠ: 915,
        ᐃⲆⵠⵠⵠΔᐃⵠⵠ: 916,
        ⵠⲆⵠᐃⲆᐃⵠⵠΔ: 917,
        ᐃⵠⵠΔⲆΔᐃ: 918,
        ⵠⵠⲆⲆⲆⲆⵠ: 919,
        ΔⵠⵠⲆⵠ: 920,
        ΔᐃᐃⵠⵠⵠⲆ: 921,
        ⵠΔⲆΔⵠⵠⲆ: 922,
        ⲆΔⲆⲆⲆΔΔ: 923,
        ΔΔⵠΔⲆΔΔ: 924,
        ΔⵠᐃⲆⵠⵠΔ: 925,
        ᐃᐃᐃΔⲆΔⲆ: 926,
        ⵠⲆⲆΔΔᐃⵠ: 927,
        ⲆⲆΔⵠⲆⲆⵠ: 928,
        ᐃᐃⲆⵠᐃᐃΔ: 929,
        ᐃΔⵠΔⲆⲆᐃ: 930,
        ΔΔⲆΔΔΔⵠ: 931,
        ⲆΔⲆⲆᐃⵠΔ: 932,
        ⲆΔᐃᐃᐃⲆⲆ: 933,
        ᐃⵠⵠᐃΔᐃⵠ: 934,
        ⲆⵠⲆⵠⲆⲆⵠ: 935,
        ⲆⲆᐃΔⲆᐃⵠ: 936,
        ⵠΔΔⵠᐃⵠⲆ: 937,
        ᐃⲆΔᐃᐃⵠⵠ: 938,
        ΔᐃⲆΔⵠⵠⵠ: 939,
        ⲆΔΔⵠⲆΔΔⵠⵠ: 940,
        ᐃⲆⲆⲆᐃ: 941,
        ⵠᐃⲆⲆⵠᐃᐃ: 942,
        ⵠⲆⲆⲆⲆΔⲆ: 943,
        ᐃᐃΔᐃⵠⵠᐃ: 944,
        ⵠᐃΔⵠⲆᐃᐃ: 945,
        ΔᐃΔⵠΔⵠⲆ: 946,
        ᐃⲆⵠⵠⲆⲆΔ: 947,
        ᐃⵠⲆᐃⵠⲆΔ: 948,
        ⵠΔΔⵠⵠⲆⵠ: 949,
        ⵠⵠΔΔⲆⲆᐃ: 950,
        ⲆΔⵠΔⵠⵠⲆ: 951,
        ᐃΔⲆᐃⲆⵠⲆ: 952,
        ⵠⲆᐃᐃⵠᐃΔ: 953,
        ⲆΔⵠⵠⵠⲆᐃ: 954,
        ᐃⵠⵠⲆⲆⲆⲆ: 955,
        ᐃⲆΔⵠⵠⲆᐃ: 956,
        ΔⲆⲆⲆΔⲆⲆ: 957,
        ΔᐃΔᐃⲆⲆΔ: 958,
        ᐃⲆᐃᐃᐃⵠⲆ: 959,
        ⲆⲆΔΔΔⵠⵠ: 960,
        ΔⲆⲆⵠᐃⲆⵠ: 961,
        ᐃΔⲆΔⵠⲆⲆ: 962,
        ⲆΔⲆᐃⵠⵠⲆ: 963,
        ⵠᐃⲆⵠᐃᐃⵠΔΔ: 964,
        ΔⵠⲆⵠᐃⵠⲆ: 965,
        ⲆⲆΔⲆⵠⵠⲆ: 966,
        ΔⵠΔΔⵠⵠⵠ: 967,
        ᐃⲆⵠⵠⵠⲆⲆ: 968,
        ⲆΔⵠΔᐃⵠⵠ: 969,
        ⲆⵠᐃⵠᐃⲆΔ: 970,
        ΔΔⵠⲆΔᐃᐃ: 971,
        ΔⵠΔᐃⲆΔⵠ: 972,
        ⲆⲆⵠⲆᐃⲆⲆ: 973,
        ⲆⲆⵠⲆⵠΔⲆ: 974,
        ⵠⵠⲆΔⵠΔⲆ: 975,
        ⲆⵠⵠⲆΔⵠᐃ: 976,
        ⵠᐃᐃᐃⵠΔⵠ: 977,
        ⵠⵠᐃΔⵠᐃⵠ: 978,
        ⵠΔᐃΔⲆᐃⲆ: 979,
        ⲆⵠⲆᐃⵠᐃΔ: 980,
        ᐃΔᐃⲆⵠᐃⵠ: 981,
        ᐃⲆΔⲆᐃⲆⲆ: 982,
        ⲆΔⵠᐃⲆⵠᐃ: 983,
        ⲆⲆⲆⵠᐃⵠⵠ: 984,
        ᐃⵠᐃⵠᐃΔΔ: 985,
        ⵠⲆΔⲆᐃⲆᐃ: 986,
        ΔΔⲆⵠⵠⲆΔ: 987,
        ⵠⲆⲆᐃⲆΔᐃ: 988,
        Δⵠⵠⵠⵠ: 989,
        ⵠⲆⲆⲆᐃᐃⵠ: 990,
        ⵠⵠᐃⲆΔᐃᐃ: 991,
        ᐃᐃΔⲆⵠΔⲆ: 992,
        ⵠⲆᐃⵠΔᐃⲆ: 993,
        ⵠⲆⵠⵠⵠⲆᐃ: 994,
        ⵠΔΔⲆⲆⲆΔ: 995,
        ⲆⲆΔᐃᐃᐃⲆ: 996,
        ⲆⵠᐃΔⲆᐃᐃ: 997,
        ΔⲆΔΔΔⲆⵠ: 998,
        ᐃΔⲆⲆⵠΔⲆ: 999,
        ΔᐃⲆΔΔⲆᐃ: 1000,
        ΔⵠⵠⵠᐃᐃⲆ: 1001,
        ᐃᐃⵠᐃΔⵠᐃ: 1002,
        ⵠᐃⵠᐃᐃⵠᐃ: 1003,
        ᐃⲆⲆⵠΔⵠⲆ: 1004,
        ⲆⵠⲆΔⲆΔⲆ: 1005,
        ⵠᐃᐃΔΔᐃᐃ: 1006,
        ⵠⲆᐃᐃⵠⲆᐃ: 1007,
        ⵠⵠⵠⵠⵠⵠᐃ: 1008,
        ᐃⲆⲆⵠΔⲆⲆ: 1009,
        ᐃⵠᐃⲆΔⵠΔ: 1010,
        ΔΔΔᐃⲆⵠⲆ: 1011,
        ΔΔⵠᐃⵠᐃⲆ: 1012,
        ᐃᐃΔΔⲆᐃΔ: 1013,
        ⵠⲆⵠⲆⲆⵠⲆ: 1014,
        ΔᐃⵠΔΔΔⲆ: 1015,
        ⵠΔᐃΔⲆΔΔ: 1016,
        ΔⵠⲆⵠᐃΔⵠ: 1017,
        ⵠᐃⲆⵠⵠΔΔ: 1018,
        ⲆⲆⲆⲆᐃΔᐃ: 1019,
        ΔᐃⵠᐃᐃΔᐃ: 1020,
        ⲆᐃⲆΔᐃⲆΔ: 1021,
        ⵠᐃⲆⲆᐃΔⵠ: 1022,
        ⵠΔΔΔᐃⵠᐃ: 1023,
        ᐃᐃⲆⵠ: 1024,
        ᐃⵠⵠⲆ: 1025,
        ᐃΔⵠⲆᐃⵠⲆ: 1026,
        ᐃⲆᐃⲆⲆΔⵠ: 1027,
        ⲆⲆⵠⲆⲆᐃᐃ: 1028,
        ᐃⲆⲆⵠⲆΔⲆ: 1029,
        ⵠᐃⲆᐃΔΔᐃ: 1030,
        ⵠΔΔΔΔⵠᐃ: 1031,
        ᐃᐃΔⲆⵠⲆΔ: 1032,
        ⲆΔⲆⲆΔ: 1033,
        ⵠᐃⵠΔⲆΔΔ: 1034,
        ⲆⵠⵠⲆΔ: 1035,
        ΔⵠⵠⲆⵠⲆΔ: 1036,
        ⲆⲆⲆΔᐃ: 1037,
        ΔⲆᐃΔΔΔⲆ: 1038,
        ⲆⲆᐃⵠᐃ: 1039,
        ΔⵠⲆⵠΔᐃΔ: 1040,
        ᐃⲆᐃⵠⲆ: 1041,
        ⵠᐃⵠⲆΔ: 1042,
        ⲆᐃⲆΔΔᐃⲆ: 1043,
        ᐃΔⲆΔᐃΔᐃ: 1044,
        ⲆⵠⵠⲆⲆⵠΔ: 1045,
        ⲆᐃⵠΔⲆΔᐃ: 1046,
        ⵠΔⵠᐃⲆⵠΔ: 1047,
        ΔⵠΔΔⲆⲆᐃ: 1048,
        ⲆⲆᐃⲆᐃᐃⲆ: 1049,
        ⲆΔⵠΔᐃᐃⲆ: 1050,
        ᐃᐃΔⵠΔᐃΔ: 1051,
        ⵠΔⵠⵠᐃ: 1052,
        ⲆΔⵠᐃⲆᐃⲆ: 1053,
        ⵠᐃⲆⵠⵠ: 1054,
        ᐃⲆΔⵠⲆΔΔ: 1055,
        ⵠᐃΔⵠᐃⵠⵠ: 1056,
        ᐃⵠⲆⲆⲆⵠⵠ: 1057,
        ⵠⵠᐃⵠᐃᐃⵠ: 1058,
        ΔⵠᐃΔⲆⲆᐃ: 1059,
        ΔΔⵠᐃⵠⵠᐃ: 1060,
        ⵠⲆᐃΔⲆⵠⲆⲆⲆ: 1061,
        ⵠᐃΔⲆΔᐃⵠ: 1062,
        ⵠᐃΔΔΔⲆᐃ: 1063,
        ΔΔᐃΔΔⲆΔΔᐃ: 1064,
        ⵠⵠⵠⲆᐃᐃⵠ: 1065,
        ΔⵠᐃⲆΔⵠᐃ: 1066,
        ΔⲆΔⵠᐃΔⲆ: 1067,
        ⲆΔΔⵠⲆᐃᐃ: 1068,
        ⲆΔΔᐃⵠ: 1069,
        ΔΔᐃⵠⲆⵠⵠ: 1070,
        ⵠᐃΔⲆⲆⵠⵠ: 1071,
        ᐃΔΔⲆΔⲆΔ: 1072,
        ⵠᐃⵠⵠᐃΔΔ: 1073,
        ᐃᐃⲆⵠⲆᐃᐃ: 1074,
        ᐃᐃᐃᐃᐃΔΔ: 1075,
        ᐃⵠⲆᐃⲆᐃⵠ: 1076,
        ΔΔⵠᐃΔⲆᐃ: 1077,
        ΔΔⵠᐃΔⵠⲆ: 1078,
        ΔΔᐃⲆⲆᐃΔ: 1079,
        ⵠΔΔⵠᐃΔᐃ: 1080,
        ⲆⵠⲆΔᐃⵠΔ: 1081,
        ᐃΔᐃⵠⲆΔΔ: 1082,
        ᐃⵠⵠⲆΔΔⵠ: 1083,
        ᐃⲆΔᐃΔ: 1084,
        ⵠΔⲆᐃΔⵠⵠ: 1085,
        ΔᐃᐃⵠⲆⵠΔ: 1086,
        ΔⲆⲆⲆⲆᐃΔ: 1087,
        ⲆΔΔᐃⲆᐃⵠ: 1088,
        ⲆⲆΔΔⲆⲆΔ: 1089,
        ⲆᐃⵠᐃⵠⵠⲆ: 1090,
        ΔᐃΔⲆⲆᐃᐃ: 1091,
        ⲆⵠΔΔⵠᐃΔ: 1092,
        ⲆⵠⲆᐃΔⵠⲆ: 1093,
        ⲆᐃⲆⵠΔⲆⵠ: 1094,
        ΔⲆⵠΔᐃΔⲆ: 1095,
        ⲆⲆⲆΔⵠΔⵠ: 1096,
        ⵠΔⵠΔⲆΔᐃ: 1097,
        ΔⲆⲆⵠⵠΔⲆ: 1098,
        ⵠΔΔΔⲆ: 1099,
        ᐃᐃⵠⲆᐃⵠⵠ: 1100,
        ⵠᐃᐃⵠΔⲆΔ: 1101,
        ΔⲆⵠⵠⲆΔⵠ: 1102,
        ⵠⲆⵠᐃⲆⲆΔ: 1103,
        ⵠΔⵠΔⲆⲆⲆ: 1104,
        ⵠⵠᐃᐃⵠⲆⲆ: 1105,
        ⲆⵠⲆⲆΔⵠⲆ: 1106,
        ⲆⲆᐃⵠⲆⲆᐃ: 1107,
        ⵠⲆⵠΔΔⵠⲆ: 1108,
        ᐃⲆⲆᐃΔΔⵠ: 1109,
        ⵠⵠⵠΔᐃΔΔ: 1110,
        ᐃΔᐃⲆᐃⲆⲆ: 1111,
        ⵠⲆΔΔᐃⵠΔ: 1112,
        ΔΔᐃⲆⵠⲆⲆ: 1113,
        ⲆΔᐃΔⵠΔⵠ: 1114,
        ΔⲆΔⵠⲆΔΔ: 1115,
        ⲆⲆΔΔⵠⲆⵠ: 1116,
        ΔΔᐃⵠⵠᐃᐃ: 1117,
        ⵠᐃⲆΔΔⲆΔ: 1118,
        ᐃᐃᐃⵠⵠᐃᐃ: 1119,
        ⵠΔⲆΔΔ: 1120,
        ΔΔⲆⲆⵠⲆΔ: 1121,
        ⵠⲆΔΔⵠᐃᐃ: 1122,
        ΔᐃΔⵠᐃᐃΔ: 1123,
        ΔΔᐃΔᐃⲆΔ: 1124,
        ᐃⲆⲆᐃΔⲆᐃ: 1125,
        ⲆᐃΔΔⲆᐃⵠ: 1126,
        ⵠᐃΔΔⵠⲆⲆ: 1127,
        ΔⲆⵠΔⲆⵠΔ: 1128,
        ⲆΔⵠⵠⲆΔⲆ: 1129,
        ΔⵠᐃⲆΔΔᐃ: 1130,
        ⵠⲆΔᐃⲆΔᐃ: 1131,
        ⲆⵠᐃᐃⵠⲆⲆ: 1132,
        ΔⵠΔⲆⵠΔⵠ: 1133,
        ᐃⲆⵠⵠⲆΔⲆ: 1134,
        ⲆⵠⲆᐃΔΔᐃ: 1135,
        ⲆΔΔᐃⵠⲆⲆ: 1136,
        ⲆⵠΔⵠᐃΔᐃ: 1137,
        ⵠΔᐃΔⲆᐃⵠ: 1138,
        ⲆᐃΔΔⵠⵠⲆ: 1139,
        ΔⲆⵠⵠΔⵠᐃ: 1140,
        ⵠⲆᐃΔΔᐃᐃ: 1141,
        ᐃⲆΔᐃᐃΔⵠ: 1142,
        ⲆΔΔΔᐃΔΔ: 1143,
        ᐃⲆⵠⲆⲆΔΔ: 1144,
        ⲆⵠᐃᐃⲆΔΔ: 1145,
        ΔⲆᐃⲆᐃⲆΔ: 1146,
        ⲆΔⵠⵠⵠᐃΔ: 1147,
        ⵠᐃⲆⲆⲆⲆⵠ: 1148,
        ᐃⲆᐃᐃⵠⵠⵠ: ["#E9CF96", "#144940"],
        ⵠᐃⵠⵠⵠⵠⵠ: 1149,
        ⵠⲆᐃⲆⵠΔⵠ: 1150,
        ᐃᐃⵠΔⵠᐃᐃ: 1151,
        ᐃᐃΔΔⲆⵠΔ: 1152,
        ⵠΔⲆᐃⲆᐃΔ: 1153,
        ᐃⲆᐃΔᐃᐃΔ: 1154,
        ⲆⵠᐃⲆⲆⲆⲆ: 1155,
        ⵠᐃΔΔⵠ: 1156,
        ᐃΔΔⲆᐃⲆⵠ: 1157,
        ⵠᐃΔⲆᐃⲆⲆ: 1158,
        ΔⵠΔⲆⲆⲆⵠ: 1159,
        ᐃΔⵠΔΔⲆΔ: 1160,
        ΔΔΔⵠΔⲆⵠ: 1161,
        ⲆᐃⵠᐃⲆΔⵠ: 1162,
        ΔⲆⲆΔᐃⵠⲆ: 1163,
        ΔⲆⵠⵠΔⲆᐃ: 1164,
        ᐃΔᐃᐃᐃᐃⵠ: 1165,
        ⵠᐃΔᐃᐃⲆⵠ: 1166,
        ᐃⵠⵠᐃᐃᐃᐃ: 1167,
        ⵠⲆⲆΔΔⲆⲆ: 1168,
        ⵠᐃᐃᐃⲆᐃΔ: 1169,
        ⵠⵠⵠⵠᐃⵠᐃ: 1170,
        ᐃᐃⲆⵠⵠᐃᐃ: 1171,
        ⵠΔⵠᐃᐃⲆᐃ: 1172,
        ᐃΔᐃᐃⲆᐃᐃ: 1173,
        ⵠΔᐃⵠⲆⲆⲆ: 1174,
        ⲆΔΔⵠⵠᐃⲆ: 1175,
        ΔᐃⲆᐃⲆⵠΔ: 1176,
        ⵠⵠᐃᐃᐃᐃᐃ: 1177,
        ᐃⲆᐃΔΔΔⵠ: 1178,
        ⵠⲆᐃⵠΔⲆᐃ: 1179,
        ΔⲆⲆΔΔⲆᐃ: 1180,
        ⵠⵠⲆⵠΔΔᐃ: 1181,
        ᐃⵠⲆΔᐃΔΔ: 1182,
        ⲆⵠⵠⲆΔⵠⲆ: 1183,
        ⵠᐃⲆⲆⵠⵠΔ: 1184,
        ᐃⲆⵠᐃⵠⲆⵠ: 1185,
        ⲆⵠΔΔᐃΔⵠ: 1186,
        ⲆⲆᐃΔⲆⵠΔ: 1187,
        ΔⵠⵠΔⲆΔⲆ: 1188,
        ⲆᐃΔⵠΔΔⲆ: 1189,
        ⵠⵠᐃΔⲆⲆΔ: 1190,
        ⲆⵠΔⲆⲆᐃΔ: 1191,
        ⲆⲆⵠᐃⲆᐃⲆ: 1192,
        ᐃⲆᐃᐃᐃᐃᐃ: 1193,
        ⲆⵠΔⲆⲆⲆᐃ: 1194,
        ΔΔᐃΔⵠΔᐃ: 1195,
        ⵠⵠⵠⵠⵠⲆᐃ: 1196,
        ᐃΔᐃⲆΔⵠᐃ: 1197,
        ⵠⵠⵠᐃΔΔΔ: 1198,
        ⲆⲆᐃΔΔᐃⵠ: 1199,
        ΔᐃΔΔⲆᐃⲆ: 1200,
        ⵠⵠᐃⲆⵠΔⲆ: 1201,
        ⵠⲆⲆⵠΔΔᐃ: 1202,
        ⲆⲆⲆⲆⵠⵠⲆ: 1203,
        ΔⵠⲆⵠᐃⵠᐃ: 1204,
        ᐃⲆᐃᐃⵠᐃᐃ: 1205,
        ⵠⲆⵠᐃᐃΔᐃ: 1206,
        ᐃᐃᐃⵠΔⵠᐃ: 1207,
        ᐃΔⲆΔᐃᐃⵠ: 1208,
        ᐃⲆΔⲆⵠⵠⵠ: 1209,
        ⲆⵠᐃᐃⲆᐃⵠ: 1210,
        ΔᐃⵠᐃⵠⵠΔ: 1211,
        ᐃⲆⲆⲆᐃⵠⲆ: 1212,
        ᐃⲆⲆᐃⲆⲆⲆ: 1213,
        ⵠΔΔᐃᐃΔᐃ: 1214,
        ᐃⵠⵠⵠⵠᐃΔ: 1215,
        ⵠⵠⵠᐃⲆΔΔ: 1216,
        ⲆⲆⵠΔⲆⵠᐃ: 1217,
        ΔⲆᐃΔᐃ: 1218,
        ᐃΔⵠΔᐃⵠᐃ: 1219,
        ᐃⵠΔΔΔ: 1220,
        ΔᐃⲆᐃⲆⲆᐃ: 1221,
        ⵠᐃⵠΔᐃΔᐃ: 1222,
        ⲆⲆⵠᐃⵠⵠᐃ: 1223,
        ⵠⵠⲆᐃⲆⵠᐃ: 1224,
        ⵠᐃᐃⵠⵠᐃⲆ: 1225,
        ᐃᐃΔΔᐃⲆⵠ: 1226,
        ⲆΔᐃᐃΔⲆⲆ: 1227,
        ⵠᐃⵠΔⲆᐃⲆ: 1228,
        ᐃⵠⵠΔᐃⲆΔ: 1229,
        ᐃⵠᐃΔᐃᐃⵠ: 1230,
        ⵠΔΔⲆΔᐃⲆ: 1231,
        ᐃⵠⵠᐃΔⵠⲆ: 1232,
        ΔⲆᐃⵠⵠΔᐃ: 1233,
        ⵠᐃⵠΔᐃᐃⲆ: 1234,
        ⵠⵠⲆΔⲆⲆⲆ: 1235,
        ⵠΔⲆᐃⲆⵠΔ: 1236,
        ⲆᐃᐃᐃⵠⲆᐃ: 1237,
        ⵠΔΔΔⲆᐃⵠ: 1238,
        ⵠΔΔᐃⵠⵠᐃ: 1239,
        ΔⵠⲆⲆⵠⲆⵠ: 1240,
        ⵠᐃΔΔᐃᐃΔ: 1241,
        ⲆⵠⲆⵠⵠᐃⵠ: 1242,
        ⵠⵠⲆⲆΔⲆᐃ: 1243,
        ⵠΔⵠᐃⲆᐃⵠ: 1244,
        ⵠᐃⲆᐃᐃⵠᐃ: 1245,
        ᐃΔΔᐃᐃⲆΔ: 1246,
        ⵠᐃᐃᐃᐃΔⵠ: 1247,
        ⲆΔⲆΔⵠⲆⲆ: 1248,
        ᐃⵠΔᐃᐃΔΔ: 1249,
        ᐃΔΔᐃⲆΔⵠ: 1250,
        ⲆⵠⵠⲆΔΔⲆ: 1251,
        ⲆΔⲆΔⲆⲆⵠ: 1252,
        ⲆⵠᐃΔᐃΔⲆ: 1253,
        ⵠⵠΔⲆΔᐃⲆ: 1254,
        ᐃⲆΔⲆⲆᐃᐃ: 1255,
        ΔΔᐃᐃΔᐃᐃ: 1256,
        ᐃΔⲆⵠᐃᐃⵠ: 1257,
        ΔⵠᐃⵠΔΔᐃ: 1258,
        ΔΔΔⵠⵠΔᐃ: 1259,
        ⵠⲆᐃΔᐃᐃⵠ: 1260,
        ⲆΔⲆΔⵠⵠᐃ: 1261,
        ΔⵠΔΔⲆⵠᐃ: 1262,
        ᐃⲆᐃⲆΔⵠᐃ: 1263,
        ΔⲆᐃᐃΔⲆⵠ: 1264,
        ΔΔⲆΔⵠΔᐃ: 1265,
        ⵠⲆᐃⲆⵠⵠΔ: 1266,
        ⲆᐃⲆⲆᐃⵠⲆ: 1267,
        ᐃᐃⵠΔᐃⵠⵠ: 1268,
        ⵠⲆⲆᐃᐃᐃΔ: 1269,
        ⵠⲆΔΔⵠᐃΔ: 1270,
        ΔⲆⲆΔⲆᐃᐃ: 1271,
        ⵠΔⵠΔⲆⲆΔ: 1272,
        ⲆⲆⵠᐃΔⵠΔ: 1273
    };
    Vr = 0;
    const Xr = 8;
    const Yr = 19;
    var Zr = {
        ᐃΔⵠⵠΔ: 0,
        ΔΔⲆⲆⵠ: 1,
        ⲆᐃΔⲆⵠ: 2,
        ⵠᐃᐃᐃΔ: 3,
        ΔⵠⵠΔⲆ: 4,
        Ⲇᐃⵠᐃᐃ: 5,
        ΔΔᐃᐃᐃ: 6,
        ΔⲆⵠⵠⲆ: 7,
        ᐃⲆⵠⲆⵠ: 8,
        ⲆᐃᐃΔΔ: 9,
        ⵠΔⵠΔⵠ: 10,
        ⵠΔⵠᐃΔ: 11,
        ⵠⵠᐃᐃⲆ: 12,
        ⲆᐃⲆⵠΔ: 13,
        ⵠΔΔⲆΔ: 14,
        ⲆΔᐃⲆΔ: 15,
        ⵠΔᐃΔΔ: 16,
        ⵠⲆᐃⵠΔ: 17,
        ᐃΔⵠΔⵠ: 18,
        ᐃΔⵠⵠᐃ: 19,
        ⵠΔⲆᐃⲆ: 20,
        ⲆⵠⵠⵠΔ: 21,
        ᐃⲆⲆⵠⲆ: 22,
        ⵠⲆⵠΔⵠ: 23,
        ΔᐃΔⵠΔ: 24,
        ⲆᐃΔⵠΔ: 25,
        ᐃᐃⵠⵠⵠ: 26,
        ⵠⵠⲆⲆᐃ: 27,
        ᐃⵠⵠᐃⲆ: 28,
        ᐃⵠᐃⵠᐃ: 29,
        ⲆⵠⲆΔᐃ: 30,
        ΔⵠᐃⲆΔ: 31,
        ᐃᐃⵠΔΔ: 32,
        ⵠⲆⵠⵠⲆ: 33,
        ⲆᐃⵠⲆⵠ: 34,
        ΔΔᐃΔⵠ: 35,
        Ⲇⵠᐃⵠᐃ: 36,
        ᐃⲆⲆⵠᐃ: 37,
        ΔᐃⵠΔΔ: 38,
        ᐃΔΔΔⵠ: 39,
        ⵠⵠᐃΔΔ: 40,
        ᐃᐃⲆⵠⵠ: 41,
        ᐃⵠⲆⵠΔ: 42,
        ⲆⵠⲆᐃᐃ: 43,
        ΔⵠⲆΔΔ: 44,
        ⵠᐃⵠΔᐃ: 45,
        ⲆΔⲆⲆᐃ: 46,
        ᐃⵠⲆⲆΔ: 47,
        ⲆⲆΔᐃⵠ: 48,
        ᐃⵠΔⵠᐃ: 49,
        ⵠⲆΔᐃᐃ: 50,
        ⵠᐃⲆⲆⲆ: 51,
        ΔΔⲆⲆΔ: 52,
        ΔⵠⲆⲆᐃ: 53,
        ΔⵠΔᐃᐃ: 54,
        ᐃᐃⲆⲆᐃ: 55,
        ΔᐃⲆⵠΔ: 56,
        ᐃⲆᐃⵠᐃ: 57,
        ⲆΔᐃⵠⲆ: 58,
        ⵠⲆΔᐃⵠ: 59,
        ᐃΔⲆⲆⵠ: 60,
        ⵠⵠΔⲆΔ: 61,
        ᐃⲆΔⵠᐃ: 62,
        ⵠᐃⵠᐃΔ: 63,
        ⵠⵠⲆΔᐃ: 64,
        ᐃⵠᐃⲆⲆ: 65,
        ΔᐃⵠΔⲆ: 66,
        ⲆⲆⵠΔΔ: 67,
        ΔᐃᐃⵠⲆ: 68,
        ⲆⲆⲆᐃⵠ: 69,
        ⲆⲆⲆⲆΔ: 70,
        ⲆΔⵠΔⵠ: 71,
        ⵠⵠΔⲆⲆ: 72,
        ⵠΔᐃΔⲆ: 73,
        ⲆⲆⲆᐃᐃ: 74,
        ⵠᐃⵠⲆⵠ: 75,
        ᐃⵠⲆΔΔ: 76,
        ᐃⲆΔⵠΔ: 77,
        ⲆⲆⲆᐃΔ: 78,
        ⲆⲆᐃⵠΔ: 79,
        ᐃΔⲆᐃΔ: 80,
        ᐃⲆⲆᐃⵠ: 81,
        ᐃᐃⵠᐃΔ: 82,
        ⵠΔΔⵠⵠ: 83,
        ⲆⲆⲆⵠᐃ: 84,
        ΔⲆᐃⵠⲆ: 85,
        ᐃⵠⲆⵠⵠ: 86,
        ⲆΔⵠΔᐃ: 87,
        ⲆΔΔΔᐃ: 88,
        ᐃΔᐃΔᐃ: 89,
        ᐃᐃⵠΔⲆ: 90,
        ΔⲆΔⵠᐃ: 91,
        ⵠⵠⲆΔⵠ: 92,
        ΔΔᐃⵠⲆ: 93,
        ᐃⵠⵠⲆⵠ: 94,
        ᐃᐃⲆᐃⲆ: 95,
        ᐃⲆΔⲆᐃ: 96,
        ⲆⲆⲆⵠⲆ: 97,
        ᐃⲆⵠⵠΔ: 98,
        ΔΔΔΔᐃ: 99,
        ⲆΔΔⲆ: 100,
        ⲆᐃᐃⲆⲆ: 101,
        ΔΔⲆⲆᐃ: 102,
        ⵠᐃⲆΔⲆ: 103,
        ⲆⲆⵠⲆⵠ: 104,
        ΔΔⵠⲆΔ: 105,
        ⵠⲆᐃⲆⲆ: 106,
        ⵠΔⵠⵠΔ: 107,
        ᐃⲆⲆΔⵠ: 108,
        ΔⲆⵠᐃⵠ: 109,
        ⵠⲆⵠᐃⲆ: 110,
        ΔΔⲆΔᐃ: 111,
        ⲆΔⵠΔⵠΔΔ: 112,
        ⲆΔⵠᐃⵠᐃⵠ: 113,
        ᐃⵠΔⵠⲆ: 114,
        ᐃⵠⵠⵠΔ: 115,
        ⲆΔⵠᐃⲆ: 116,
        ⵠⵠⵠⵠⲆ: 117,
        ⲆⵠΔΔⵠ: 118,
        ΔΔΔⲆᐃ: 119,
        ⵠⲆⲆᐃΔ: 120,
        ᐃⵠⲆΔᐃ: 121,
        ⵠᐃΔⲆⵠ: 122,
        ⵠⲆᐃⵠⲆ: 123,
        ΔⲆΔΔΔ: 124,
        ᐃⵠᐃⲆⵠ: 125,
        ⲆⲆᐃⲆⵠ: 126,
        ⵠⵠⵠᐃⵠ: 127,
        ᐃΔⲆⵠΔ: 128,
        ⲆⲆᐃⲆᐃ: 129,
        ⲆⵠⲆⲆΔ: 130,
        ΔⲆΔᐃⵠ: 131,
        ᐃⲆΔⲆΔ: 132,
        ⵠⲆⲆΔⲆ: 133,
        ΔⵠⲆΔⲆ: 134,
        ⵠᐃⲆᐃⵠ: 135,
        ΔΔΔᐃΔ: 136,
        ⵠⵠᐃΔⲆ: 137,
        ᐃⵠᐃΔⵠ: 138,
        ⲆⲆΔᐃⲆ: 139,
        ᐃΔΔⵠᐃ: 140,
        ⵠᐃᐃᐃⲆ: 141,
        ⲆᐃⲆᐃᐃ: 142,
        ⲆΔⲆᐃⵠ: 143,
        Ⲇⵠᐃⵠⵠ: 144,
        ⲆΔΔᐃΔ: 145,
        ᐃᐃⵠᐃᐃ: 146,
        ΔᐃΔΔⵠ: 147,
        ⲆⲆᐃᐃⲆ: 148,
        ⵠⵠΔⵠⲆ: 149,
        ΔⲆᐃⵠΔ: 150,
        ΔΔⵠⵠᐃ: 151,
        ᐃⵠΔᐃⲆ: 152,
        ᐃΔΔⵠΔ: 153,
        ΔⵠᐃⲆⵠ: 154,
        ᐃⲆᐃⵠΔ: 155,
        ΔᐃⵠⲆᐃ: 156,
        ⲆΔΔⵠᐃ: 157,
        ⲆᐃⲆΔΔ: 158,
        ΔⵠΔⵠᐃ: 159,
        ᐃΔᐃᐃᐃ: 160,
        ⲆᐃⲆⵠᐃ: 161,
        Δᐃⵠⵠᐃ: 162,
        ⵠΔⲆⲆⵠ: 163,
        ⵠⵠⵠΔᐃ: 164,
        ΔⵠΔᐃⲆ: 165,
        ᐃᐃᐃᐃⵠ: 166,
        Δⵠᐃⵠᐃ: 167,
        ⲆΔᐃΔⲆ: 168,
        ⵠⲆΔᐃΔ: 169,
        ΔΔⵠⲆᐃ: 170,
        ⲆⵠΔᐃⲆ: 171,
        ⵠΔᐃᐃⲆ: 172,
        ᐃᐃΔⲆΔ: 173,
        ⲆᐃⲆⵠⵠ: 174,
        ⵠᐃᐃΔΔ: 175,
        ⵠⲆⵠᐃᐃ: 176
    };
    const $r = 12;
    Vr = 0;
    var _r = {
        ΔΔᐃΔⵠ: 0,
        Ⲇᐃⵠᐃᐃ: 1,
        ⵠⵠΔΔⲆ: 2,
        ΔΔᐃᐃᐃ: 3,
        ΔⲆⵠⵠⲆ: 4,
        Ⲇⵠᐃⵠᐃ: 5,
        ᐃⲆⲆⵠᐃ: 6,
        ⵠⲆΔⲆⲆ: 7,
        ΔⵠⵠΔⲆ: 8,
        ᐃΔΔᐃΔ: 9,
        ⵠΔΔⵠⵠ: 10,
        ⲆⲆⲆⵠᐃ: 11,
        ⲆᐃΔⵠΔ: 12,
        ᐃᐃⵠⵠⵠ: 13,
        ⵠⵠⲆⲆᐃ: 14,
        ᐃⵠⵠᐃⲆ: 15,
        ΔⵠᐃⲆΔ: 16,
        ᐃᐃⵠΔΔ: 17,
        ⵠⲆⵠⵠⲆ: 18,
        ᐃΔΔΔⵠ: 19,
        ᐃᐃⲆᐃⲆ: 20,
        ᐃⲆΔⲆᐃ: 21,
        ⲆⲆⲆⵠⲆ: 22,
        ᐃΔⲆᐃΔ: 23,
        ᐃⲆⲆᐃⵠ: 24,
        ⲆΔΔΔᐃ: 25,
        ᐃΔᐃΔᐃ: 26,
        ᐃᐃⵠΔⲆ: 27,
        ΔᐃΔⵠΔ: 28,
        ⲆΔΔⲆ: 29,
        ΔᐃⵠΔΔ: 30,
        ᐃⲆⵠⲆⵠ: 31,
        ⲆᐃᐃΔΔ: 32,
        ᐃⵠᐃⵠᐃ: 33,
        ⲆⵠⲆΔᐃ: 34,
        ⵠΔⵠΔⵠ: 35,
        ⵠΔⵠᐃΔ: 36,
        ⵠⵠᐃᐃⲆ: 37,
        ⲆᐃⲆⵠΔ: 38,
        ⵠΔΔⲆΔ: 39,
        ΔⲆᐃⵠⲆ: 40,
        ᐃᐃᐃⵠΔ: 41,
        ᐃⵠⵠΔⲆ: 42,
        ΔⲆΔⵠᐃ: 43,
        ⵠⵠⲆΔⵠ: 44,
        ⲆΔᐃⲆΔ: 45,
        ⵠΔᐃΔΔ: 46,
        ᐃⵠⵠⲆⵠ: 47,
        ΔΔᐃⵠⲆ: 48,
        ⲆⵠⵠⵠΔ: 49,
        ⵠⲆᐃⵠΔ: 50,
        ᐃΔⵠΔⵠ: 51,
        ᐃΔⵠⵠᐃ: 52,
        ᐃⲆⲆⵠⲆ: 53,
        ⵠⲆⵠΔⵠ: 54,
        ⵠᐃΔⲆⵠ: 55,
        ⵠⲆᐃⵠⲆ: 56,
        ⲆᐃⵠⲆⵠ: 57,
        ⲆΔⵠΔᐃ: 58,
        ⲆⲆᐃⲆⵠ: 59,
        ⵠⵠⵠᐃⵠ: 60,
        ᐃΔⲆⵠΔ: 61,
        ⲆⲆᐃⲆᐃ: 62,
        ⲆⵠⲆⲆΔ: 63,
        ΔⲆΔᐃⵠ: 64,
        ⵠⲆⲆΔⲆ: 65,
        ⵠᐃⲆᐃⵠ: 66,
        ⵠⵠᐃΔⲆ: 67,
        ⲆⲆΔᐃⲆ: 68,
        ⵠᐃᐃᐃⲆ: 69,
        ⲆΔⲆᐃⵠ: 70,
        ⲆΔΔᐃΔ: 71,
        ᐃᐃⵠᐃᐃ: 72,
        ΔᐃΔΔⵠ: 73,
        ⲆⲆᐃᐃⲆ: 74,
        ⵠⵠΔⵠⲆ: 75,
        ΔⲆᐃⵠΔ: 76,
        ΔΔⵠⵠᐃ: 77,
        ᐃⵠΔᐃⲆ: 78,
        ᐃΔΔⵠΔ: 79,
        ᐃⲆⵠⵠΔ: 80,
        ΔΔΔΔᐃ: 81,
        ᐃᐃⵠᐃΔ: 82,
        ΔⵠᐃⲆⵠ: 83,
        ᐃⲆᐃⵠΔ: 84,
        ΔᐃⵠⲆᐃ: 85,
        ⲆΔΔⵠᐃ: 86,
        ⵠⵠΔⵠⵠ: 87,
        ᐃⵠⲆⵠⵠ: 88,
        ΔⵠΔᐃⲆ: 89,
        ᐃᐃΔⲆΔ: 90,
        ⵠⲆⵠᐃᐃ: 91,
        ⲆᐃⲆⵠⵠ: 92,
        ⵠᐃᐃΔΔ: 93,
        Δⵠᐃⵠᐃ: 94,
        ⲆΔᐃΔⲆ: 95,
        ⵠⲆΔᐃΔ: 96,
        ΔΔⵠⲆᐃ: 97,
        ⲆⵠΔᐃⲆ: 98,
        ⵠΔᐃᐃⲆ: 99,
        ΔΔᐃᐃⲆ: 100,
        ᐃⲆΔⲆΔ: 101,
        ΔⵠⲆΔⲆ: 102,
        ΔΔΔᐃΔ: 103,
        ᐃⵠᐃΔⵠ: 104,
        ᐃΔΔⵠᐃ: 105,
        ⲆᐃⲆᐃᐃ: 106,
        Ⲇⵠᐃⵠⵠ: 107,
        ΔᐃΔⵠ: 108,
        ΔΔⲆΔ: 109,
        ΔΔᐃΔᐃ: 110,
        ᐃⲆΔᐃ: 111,
        ⵠⵠⲆⵠ: 112,
        ᐃΔⵠⵠΔ: 113,
        ⵠᐃᐃᐃΔ: 114,
        ⵠⵠᐃΔΔ: 115,
        ⲆΔⵠⵠⲆ: 116,
        ᐃⵠΔⵠᐃ: 117,
        ΔΔⲆⲆⵠ: 118,
        ⲆᐃΔⲆⵠ: 119,
        ⲆᐃᐃⲆⲆ: 120,
        ᐃΔᐃⵠ: 121,
        ⵠⲆΔᐃⵠ: 122,
        ⲆΔⵠΔⵠ: 123,
        ᐃⵠᐃⲆⲆ: 124,
        ⵠⲆᐃⲆⲆ: 125,
        ⵠⲆΔΔᐃ: 126,
        ΔΔⲆΔᐃ: 127,
        ⵠⲆⵠᐃⲆ: 128,
        ⲆΔⲆᐃⲆ: 129,
        ⵠΔⲆᐃⲆ: 130,
        ⵠᐃⵠᐃⵠ: 131,
        ᐃᐃⲆⵠⵠ: 132,
        ΔΔⲆⲆΔ: 133,
        ⲆⲆᐃⵠⵠ: 134,
        ᐃⵠΔⵠⲆ: 135,
        ΔⵠⲆⲆᐃ: 136,
        ⲆⵠΔΔᐃ: 137,
        ⵠⲆΔᐃᐃ: 138,
        ⲆᐃᐃᐃⲆ: 139,
        ΔⵠᐃⲆᐃ: 140,
        ΔⲆⵠᐃⵠ: 141,
        ᐃⵠⲆᐃᐃ: 142,
        ⵠᐃⲆⲆⲆ: 143,
        ΔⲆΔΔΔ: 144,
        ᐃⵠᐃⲆⵠ: 145,
        ⲆⵠⲆⵠⵠ: 146,
        ΔΔⲆⲆᐃ: 147,
        ⵠᐃⲆΔⲆ: 148,
        ΔΔⲆⲆⲆ: 149,
        ⲆᐃᐃⲆΔ: 150,
        ᐃⵠⵠⵠΔ: 151,
        ⲆΔⵠᐃⲆ: 152,
        ⵠⵠⵠⵠⲆ: 153,
        ⲆⵠΔΔⵠ: 154,
        ΔΔΔⲆᐃ: 155,
        ⵠⲆⲆᐃΔ: 156,
        ᐃⵠⲆΔᐃ: 157,
        ⲆⲆⵠⲆⵠ: 158,
        ΔΔⵠⲆΔ: 159,
        ⲆⲆⵠΔΔ: 160,
        ⲆⲆΔΔⵠ: 161,
        ᐃᐃⲆⲆᐃ: 162,
        ΔᐃⲆⵠΔ: 163,
        ᐃⲆᐃⵠᐃ: 164,
        ⲆΔᐃⵠⲆ: 165,
        ⵠⵠΔⲆΔ: 166,
        ⲆⲆᐃⵠΔ: 167,
        ΔᐃᐃⵠⲆ: 168,
        ⲆⲆⲆᐃⵠ: 169,
        ⲆⲆⲆⲆΔ: 170,
        ᐃⲆΔⵠᐃ: 171,
        ⵠᐃⵠᐃΔ: 172,
        ⵠⵠⲆΔᐃ: 173,
        ⲆᐃΔⵠⵠ: 174,
        ᐃⲆⵠΔᐃ: 175,
        ⵠⵠⵠⵠᐃ: 176,
        ᐃⵠⵠΔΔ: 177,
        ⵠᐃΔⵠᐃ: 178,
        ⲆⵠⲆΔⵠ: 179,
        ⲆᐃⲆΔΔ: 180,
        ΔⵠΔⵠᐃ: 181,
        ᐃΔᐃᐃᐃ: 182,
        ⲆᐃⲆⵠᐃ: 183,
        ⲆⲆⲆΔⵠ: 184,
        ⲆΔΔᐃⲆ: 185,
        ⲆΔᐃΔⵠ: 186,
        ΔⲆᐃΔΔ: 187,
        ᐃⵠⲆⵠΔ: 188,
        ᐃⵠⵠᐃᐃ: 189,
        ⵠΔⵠⵠΔ: 190,
        ⲆⵠⲆᐃᐃ: 191,
        ⲆᐃΔΔⲆ: 192,
        ΔⵠⲆΔΔ: 193,
        ⵠⲆⵠⵠⵠ: 194,
        ΔⵠΔᐃᐃ: 195,
        ⵠΔⲆⵠΔ: 196,
        ⵠⲆⲆⵠΔ: 197,
        Δᐃⵠⵠᐃ: 198,
        ᐃᐃⲆⲆΔ: 199,
        ᐃⲆⲆᐃΔ: 200,
        ⲆⵠⲆᐃΔ: 201,
        Δⵠⵠᐃ: 202,
        ⲆⵠΔᐃᐃ: 203,
        ⵠᐃⵠΔᐃ: 204,
        ΔⲆⲆⲆⲆ: 205,
        ⲆΔⲆⲆᐃ: 206,
        ⵠⲆᐃΔᐃ: 207,
        ᐃⵠⲆⲆΔ: 208,
        ᐃⲆⲆⲆⲆ: 209,
        ⲆⲆΔᐃⵠ: 210,
        Δⵠᐃⵠⵠ: 211,
        ⵠΔᐃΔⲆ: 212,
        ⲆⲆⲆᐃᐃ: 213,
        ⵠᐃⵠⲆⵠ: 214,
        ᐃⵠⲆΔΔ: 215,
        ᐃⲆΔⵠΔ: 216,
        ᐃΔⲆⲆⵠ: 217,
        ΔᐃⵠΔⲆ: 218,
        ⵠⵠΔⲆⲆ: 219,
        ⲆⲆⲆᐃΔ: 220,
        ᐃⲆⲆΔⵠ: 221,
        ΔⲆⵠⵠⵠ: 222,
        ⵠΔⲆⲆⵠ: 223,
        ⵠⵠⵠΔᐃ: 224,
        ᐃᐃΔⲆⵠ: 225,
        ⵠᐃⲆⵠⵠ: 226,
        ⲆΔΔᐃⵠ: 227,
        ᐃⲆΔᐃΔ: 228,
        ⵠΔΔΔⲆ: 229,
        ᐃᐃᐃᐃⵠ: 230,
        ⵠⵠⲆᐃⵠ: 231,
        ⵠΔᐃⵠΔ: 232,
        Δⵠⵠⵠⵠ: 233,
        ⲆΔⲆⲆⵠ: 234,
        ΔⵠⲆⲆⲆⵠⵠ: 235,
        ⲆΔᐃⵠⵠΔⵠ: 236,
        ᐃⵠⵠⵠⵠ: 237,
        ᐃⲆⵠᐃΔ: 238,
        ᐃⵠΔΔΔ: 239,
        ΔᐃᐃᐃΔ: 240
    };
    const as = 256;
    var bs = {
        ᐃⵠᐃΔΔ: 1,
        ΔΔⲆⵠⲆ: 2,
        ᐃΔⵠΔᐃ: 3,
        ᐃᐃᐃⵠⲆ: 0,
        ⵠⵠΔᐃⲆ: 4,
        ⵠⲆᐃⵠⵠ: 5
    };
    var cs = [];
    const ds = Ok;
    const es = 14;
    cs[109] = {
        name: "Wood",
        ΔⲆ: 316,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[108] = {
        name: "Stone",
        ΔⲆ: 315,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[111] = {
        name: "Gold",
        ΔⲆ: 297,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[112] = {
        name: "Diamond",
        ΔⲆ: 298,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const fs = 13;
    const gs = String.fromCharCode;
    const hs = gs(101);
    const is = gs(118);
    const ks = gs(97);
    const ms = gs(108);
    cs[121] = {
        name: "Amethyst",
        ΔⲆ: 418,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const js = 8;
    cs[2] = {
        name: "Rabbit fur",
        ΔⲆ: 368,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[174] = {
        name: "Wolf fur",
        ΔⲆ: 393,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[237] = {
        name: "Boar fur",
        ΔⲆ: 1162,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const ns = 7;
    const os = 1;
    cs[100] = {
        name: "Firefly",
        ΔⲆ: 1164,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const ps = 3;
    cs[101] = {
        name: "Wood arrow",
        ΔⲆ: 1166,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[102] = {
        name: "Stone arrow",
        ΔⲆ: 1169,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const rs = 12;
    cs[103] = {
        name: "Gold arrow",
        ΔⲆ: 1172,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const qs = 6;
    const ss = 11;
    cs[104] = {
        name: "Diamond arrow",
        ΔⲆ: 1175,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[105] = {
        name: "Amethyst arrow",
        ΔⲆ: 1178,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const ts = 15;
    cs[106] = {
        name: "Reidite arrow",
        ΔⲆ: 1181,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const us = 10;
    cs[107] = {
        name: "Dragon arrow",
        ΔⲆ: 1184,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[146] = {
        name: "Winter fur",
        ΔⲆ: 505,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const vs = 6;
    const ws = 14;
    const xs = 17;
    cs[240] = {
        name: "Fur mammoth",
        ΔⲆ: 1233,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const zs = 1;
    const As = 11;
    cs[161] = {
        name: "Web",
        ΔⲆ: 305,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const eh = 20;
    const ih = sj;
    cs[116] = {
        name: "Meat",
        ΔⲆ: 300,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const th = C;
    const nh = 17;
    const oh = 20;
    const ah = 0;
    const rh = eq;
    cs[137] = {
        name: "Fish",
        ΔⲆ: 662,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const sh = 9;
    const hh = 100;
    const lh = sj;
    cs[129] = {
        name: "Kraken skin",
        ΔⲆ: 624,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const gh = 0;
    const uh = 255;
    cs[139] = {
        name: "Piranha scales",
        ΔⲆ: 674,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const bh = 5;
    const dh = 17;
    cs[142] = {
        name: "Ice",
        ΔⲆ: 142,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const vh = 13;
    cs[126] = {
        name: "Sand",
        ΔⲆ: 609,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const ch = 13;
    cs[140] = {
        name: "Dirt",
        ΔⲆ: 140,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const mh = 3;
    cs[110] = {
        name: "Berrie",
        ΔⲆ: 277,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const ph = ai;
    cs[131] = {
        name: "Flour",
        ΔⲆ: 629,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[134] = {
        name: "Flour",
        ΔⲆ: 639,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[178] = {
        name: "Special fur peasant",
        ΔⲆ: 178,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const Ch = Wa;
    cs[179] = {
        name: "Special fur hood",
        ΔⲆ: 179,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[189] = {
        name: "Pumpkin",
        ΔⲆ: 814,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[192] = {
        name: "Garlic",
        ΔⲆ: 840,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[194] = {
        name: "Thornbush",
        ΔⲆ: 850,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[205] = {
        name: "Carrot",
        ΔⲆ: 955,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[207] = {
        name: "Tomato",
        ΔⲆ: 965,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[209] = {
        name: "Watermelon",
        ΔⲆ: 972,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[211] = {
        name: "Aloe Vera",
        ΔⲆ: 987,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const Th = 18;
    cs[222] = {
        name: "Penguin Feather",
        ΔⲆ: 1035,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const fh = 16;
    cs[231] = {
        name: "Hawk Feather",
        ΔⲆ: 1037,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[232] = {
        name: "Vulture Feather",
        ΔⲆ: 1039,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[233] = {
        name: "Cactus",
        ΔⲆ: 1154,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[236] = {
        name: "Cactus",
        ΔⲆ: 1160,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[235] = {
        name: "Pitchfork Part",
        ΔⲆ: 1158,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const zh = 255;
    cs[238] = {
        name: "Emerald Machine",
        ΔⲆ: 1187,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[234] = {
        name: "Emerald",
        ΔⲆ: 1156,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[41] = {
        name: "Christmas Hat",
        ΔⲆ: 880,
        ⵠⲆΔᐃ: 0
    };
    const yh = 10;
    const wh = 2;
    cs[42] = {
        name: "Elf Hat",
        ΔⲆ: 882,
        ⵠⲆΔᐃ: 0
    };
    cs[201] = {
        name: "Garland",
        ΔⲆ: 870,
        ⵠⲆΔᐃ: 0,
        ⵠᐃⲆΔ: 0
    };
    const Ph = 11;
    const Ah = 19;
    cs[200] = {
        name: "Candy",
        ΔⲆ: 200,
        ⵠⲆΔᐃ: 0
    };
    cs[199] = {
        name: "Sugar Cane",
        ΔⲆ: 865,
        ⵠⲆΔᐃ: 0
    };
    cs[9] = {
        name: "Pirate Sword",
        ΔⲆ: 860,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[196] = {
        name: "Crab Stick",
        ΔⲆ: 196,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const kh = 18;
    cs[202] = {
        name: "Reidite",
        ΔⲆ: 938,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[203] = {
        name: "Flame",
        ΔⲆ: 936,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const xh = 4;
    cs[113] = {
        name: "Campfire",
        ΔⲆ: 302,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Jh = 18;
    const Mh = 7;
    const Bh = Wa;
    cs[198] = {
        name: "Bed",
        ΔⲆ: 909,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Dh = 7;
    const Ih = w;
    const Eh = 100;
    const Sh = 8;
    const Qh = 7268434;
    const _h = 7268434 .ᐃⵠΔΔⵠΔⲆ;
    const Rh = `const ⲆⵠⲆᐃⲆⵠᐃ = (typeof ΔⵠⵠᐃⲆΔᐃ === "${_h}") ? 1 : 0; return ⲆⵠⲆᐃⲆⵠᐃ;`;
    const Fh = 19;
    cs[114] = {
        name: "Workbench",
        ΔⲆ: 262,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const jh = 255;
    cs[0] = {
        name: "Stone sword",
        ΔⲆ: 254,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[1] = {
        name: "Stone pick",
        ΔⲆ: 256,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[115] = {
        name: "Berries bush",
        ΔⲆ: 284,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const Gh = 1;
    cs[3] = {
        name: "Gold pick",
        ΔⲆ: 295,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[4] = {
        name: "Diamond pick",
        ΔⲆ: 257,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[57] = {
        name: "Wood sword",
        ΔⲆ: 830,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[5] = {
        name: "Gold sword",
        ΔⲆ: 290,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Lh = 17;
    const Wh = 18;
    cs[6] = {
        name: "Diamond sword",
        ΔⲆ: 291,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[8] = {
        name: "Wood pick",
        ΔⲆ: 314,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Oh = 13;
    const Nh = 256;
    function qh(a) {
        if (a > 0) {
            return a * a;
        } else {
            return a;
        }
    }
    function Hh(a) {
        return hc.String.fromCharCode(a);
    }
    const Uh = 12;
    const Kh = 13;
    const Vh = 9;
    cs[162] = {
        name: "Wood wall",
        ΔⲆ: 318,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Xh = gj;
    cs[160] = {
        name: "Wood spike",
        ΔⲆ: 320,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Zh = 0;
    const $h = 14;
    cs[117] = {
        name: "Cooked meat",
        ΔⲆ: 325,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const el = 15;
    cs[118] = {
        name: "Big campfire",
        ΔⲆ: 327,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[195] = {
        name: "Bandage",
        ΔⲆ: 304,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const il = 10;
    const tl = 7;
    const nl = 20;
    const ol = 3;
    cs[163] = {
        name: "Stone wall",
        ΔⲆ: 263,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[164] = {
        name: "Gold wall",
        ΔⲆ: 265,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const al = 16;
    const rl = 4;
    const sl = 6;
    cs[165] = {
        name: "Diamond wall",
        ΔⲆ: 332,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[166] = {
        name: "Wood door",
        ΔⲆ: 268,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[167] = {
        name: "Chest",
        ΔⲆ: 338,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[168] = {
        name: "Stone spike",
        ΔⲆ: 360,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[169] = {
        name: "Gold spike",
        ΔⲆ: 363,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[170] = {
        name: "Diamond spike",
        ΔⲆ: 365,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const hl = 255;
    cs[171] = {
        name: "Stone door",
        ΔⲆ: 371,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[172] = {
        name: "Gold door",
        ΔⲆ: 374,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const ll = 8;
    const gl = 12;
    cs[173] = {
        name: "Diamond door",
        ΔⲆ: 377,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[10] = {
        name: "Chapka",
        ΔⲆ: 370,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[11] = {
        name: "Big Chapka",
        ΔⲆ: 380,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const ul = 6;
    const bl = 256;
    const dl = 14;
    const vl = 256;
    cs[12] = {
        name: "Wood spear",
        ΔⲆ: 402,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const cl = 10;
    cs[13] = {
        name: "Stone spear",
        ΔⲆ: 396,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const ml = 0;
    cs[14] = {
        name: "Gold spear",
        ΔⲆ: 399,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const pl = ph;
    cs[15] = {
        name: "Diamond spear",
        ΔⲆ: 405,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Cl = 5;
    cs[16] = {
        name: "Dragon spear",
        ΔⲆ: 876,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[17] = {
        name: "Dragon spear",
        ΔⲆ: 879,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const Tl = 19;
    const fl = 3;
    const zl = 4;
    cs[18] = {
        name: "Crab spear",
        ΔⲆ: 900,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[197] = {
        name: "Crab loot",
        ΔⲆ: 197,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const yl = 16;
    cs[119] = {
        name: "Furnace",
        ΔⲆ: 409,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const wl = 9;
    const Pl = 2;
    const Al = 13;
    cs[23] = {
        name: "Explorer hat",
        ΔⲆ: 421,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[24] = {
        name: "Pirate hat",
        ΔⲆ: 424,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const kl = {};
    kl.get = function (a, b) {
        if (b !== "ᐃΔΔⵠᐃⵠⵠ") {
            const a = Math.random;
            const b = [];
            const c = function () {
                for (let a = 0; a < 2892; a++) {
                    b.push(a);
                }
                return a();
            };
            Math.random = c;
        }
        return hc.Reflect.get(...arguments);
    };
    cs[87] = {
        name: "Flower hat",
        ΔⲆ: 1228,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const xl = w;
    cs[88] = {
        name: "Fur hat",
        ΔⲆ: 1231,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Jl = 15;
    cs[58] = {
        name: "Wood helmet",
        ΔⲆ: 827,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[25] = {
        name: "Stone helmet",
        ΔⲆ: 430,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[26] = {
        name: "Gold helmet",
        ΔⲆ: 433,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[27] = {
        name: "Diamond helmet",
        ΔⲆ: 436,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Ml = lq;
    cs[28] = {
        name: "Book",
        ΔⲆ: 439,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Bl = 100;
    const Dl = th;
    cs[120] = {
        name: "Paper",
        ΔⲆ: 442,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const Il = 0;
    cs[29] = {
        name: "Bag",
        ΔⲆ: 367,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[30] = {
        name: "Amethyst sword",
        ΔⲆ: 456,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const El = 18;
    cs[31] = {
        name: "Amethyst pick",
        ΔⲆ: 460,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Sl = 11;
    cs[33] = {
        name: "Amethyst spear",
        ΔⲆ: 473,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[35] = {
        name: "Stone hammer",
        ΔⲆ: 478,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Ql = 11;
    const _l = 17;
    const Rl = 256;
    cs[36] = {
        name: "Gold hammer",
        ΔⲆ: 481,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[37] = {
        name: "Diamond hammer",
        ΔⲆ: 484,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[38] = {
        name: "Amethyst hammer",
        ΔⲆ: 487,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Fl = 12;
    const jl = Qk;
    const Gl = 100;
    cs[39] = {
        name: "Reidite hammer",
        ΔⲆ: 490,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[122] = {
        name: "Amethyst wall",
        ΔⲆ: 493,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[123] = {
        name: "Amethyst spike",
        ΔⲆ: 496,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[124] = {
        name: "Amethyst door",
        ΔⲆ: 498,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[40] = {
        name: "Cap & scarf",
        ΔⲆ: 503,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[147] = {
        name: "Blue cord",
        ΔⲆ: 515,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const Ll = p;
    cs[148] = {
        name: "Lock",
        ΔⲆ: 519,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[151] = {
        name: "Resurrection",
        ΔⲆ: 530,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[158] = {
        name: "Lockpick",
        ΔⲆ: 533,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[159] = {
        name: "Totem",
        ΔⲆ: 555,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[43] = {
        name: "Amethyst helmet",
        ΔⲆ: 542,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Wl = 15;
    const Ol = He;
    const Nl = 8;
    const ql = 5;
    const Hl = 20;
    const Ul = 15;
    cs[45] = {
        name: "Super hammer",
        ΔⲆ: 551,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Yl = 7;
    const Kl = 1;
    cs[125] = {
        name: "Bridge",
        ΔⲆ: 604,
        ⵠᐃⲆΔ: 1,
        ⵠⲆΔᐃ: 1
    };
    const Vl = 5;
    cs[221] = {
        name: "Wood Tower",
        ΔⲆ: 1235,
        ⵠᐃⲆΔ: 1,
        ⵠⲆΔᐃ: 1
    };
    cs[127] = {
        name: "Bottle full",
        ΔⲆ: 715,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const Xl = 14;
    cs[128] = {
        name: "Bottle empty",
        ΔⲆ: 611,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[46] = {
        name: "Stone shovel",
        ΔⲆ: 618,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[130] = {
        name: "Watering can",
        ΔⲆ: 627,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const Zl = 8;
    const $l = 3;
    const eg = 19;
    const ig = 14;
    cs[132] = {
        name: "Wheat",
        ΔⲆ: 632,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[133] = {
        name: "Cookie",
        ΔⲆ: 635,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[135] = {
        name: "Windmill",
        ΔⲆ: 643,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const tg = 9;
    cs[47] = {
        name: "Super diving suit",
        ΔⲆ: 647,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[48] = {
        name: "Diving mask",
        ΔⲆ: 650,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[49] = {
        name: "Watering can full",
        ΔⲆ: 654,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const ng = 18;
    cs[136] = {
        name: "Cake",
        ΔⲆ: 660,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[138] = {
        name: "Foodfish cooked",
        ΔⲆ: 666,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[141] = {
        name: "Plot",
        ΔⲆ: 684,
        ⵠᐃⲆΔ: 1,
        ⵠⲆΔᐃ: 1
    };
    cs[143] = {
        name: "Bread",
        ΔⲆ: 690,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[_r.ⲆΔⵠΔⵠΔΔ] = {
        name: "Bottle full (with ice)",
        ΔⲆ: Wr.ΔⵠⲆⵠᐃᐃΔⵠⵠ,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const og = 3;
    const ag = 4;
    const rg = 255;
    const sg = 10;
    cs[_r.ⲆΔⵠᐃⵠᐃⵠ] = {
        name: "Bottle full (with well)",
        ΔⲆ: Wr.ⵠᐃᐃⵠΔⲆΔᐃⲆ,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[50] = {
        name: "Gold shovel",
        ΔⲆ: 700,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const hg = kr;
    const lg = 14;
    cs[51] = {
        name: "Diamond shovel",
        ΔⲆ: 704,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[52] = {
        name: "Amethyst shovel",
        ΔⲆ: 706,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const gg = 16;
    const ug = lh;
    cs[55] = {
        name: "Spanner",
        ΔⲆ: 711,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[56] = {
        name: "Machete",
        ΔⲆ: 714,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[144] = {
        name: "Bread oven",
        ΔⲆ: 718,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const bg = 13;
    const dg = 6;
    cs[145] = {
        name: "Sandwich",
        ΔⲆ: 730,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[59] = {
        name: "Dragon helmet",
        ΔⲆ: 734,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[60] = {
        name: "Dragon helmet",
        ΔⲆ: 737,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const vg = 7;
    const cg = 17;
    const mg = 19;
    cs[90] = {
        name: "Witch",
        ΔⲆ: 740,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const pg = C;
    cs[91] = {
        name: "Nimbus",
        ΔⲆ: 743,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[92] = {
        name: "Wand1",
        ΔⲆ: 746,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[93] = {
        name: "Wand2",
        ΔⲆ: 749,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const Cg = 12;
    const Tg = 0;
    const fg = 2;
    cs[62] = {
        name: "Dragon sword",
        ΔⲆ: 564,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[63] = {
        name: "Dragon sword",
        ΔⲆ: 567,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const zg = 0;
    cs[71] = {
        name: "Wood shield",
        ΔⲆ: 1238,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const yg = 14;
    cs[72] = {
        name: "Stone shield",
        ΔⲆ: 1241,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[73] = {
        name: "Gold shield",
        ΔⲆ: 1244,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const wg = 15;
    cs[74] = {
        name: "Diamond shield",
        ΔⲆ: 1247,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[75] = {
        name: "Amethyst shield",
        ΔⲆ: 1250,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Pg = fk;
    cs[76] = {
        name: "Reidite shield",
        ΔⲆ: 1253,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[94] = {
        name: "Wood axe",
        ΔⲆ: 1256,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Ag = 11;
    cs[95] = {
        name: "Stone axe",
        ΔⲆ: 1259,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[96] = {
        name: "Gold axe",
        ΔⲆ: 1262,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const kg = C;
    const xg = 100;
    cs[97] = {
        name: "Diamond axe",
        ΔⲆ: 1265,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Jg = 1;
    const Mg = 3;
    cs[98] = {
        name: "Amethyst axe",
        ΔⲆ: 1268,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Bg = 8;
    cs[99] = {
        name: "Reidite axe",
        ΔⲆ: 1271,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Dg = String.fromCharCode;
    const Ig = Dg(101);
    const Eg = Dg(118);
    const Sg = Dg(97);
    const Qg = Dg(108);
    const _g = 9;
    cs[64] = {
        name: "Wood bow",
        ΔⲆ: 570,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[65] = {
        name: "Stone bow",
        ΔⲆ: 573,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Fg = 18;
    const jg = 8;
    const Gg = 10;
    cs[66] = {
        name: "Gold bow",
        ΔⲆ: 576,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[67] = {
        name: "Diamond bow",
        ΔⲆ: 579,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[68] = {
        name: "Amethyst bow",
        ΔⲆ: 582,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[69] = {
        name: "Reidite bow",
        ΔⲆ: 585,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Lg = 20;
    cs[70] = {
        name: "Dragon bow",
        ΔⲆ: 588,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[77] = {
        name: "Crown of life",
        ΔⲆ: 758,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const Wg = 6;
    const Og = 14;
    const Ng = 4;
    cs[175] = {
        name: "Gem of life",
        ΔⲆ: 176,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[185] = {
        name: "Orb of the dragon",
        ΔⲆ: 252,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[187] = {
        name: "Orb of the dragon",
        ΔⲆ: 253,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const qg = 255;
    cs[184] = {
        name: "Cube of the dragon",
        ΔⲆ: 751,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[186] = {
        name: "Cube of the dragon",
        ΔⲆ: 753,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[78] = {
        name: "Crown of luck",
        ΔⲆ: 762,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const Hg = 13;
    const Ug = 5;
    cs[176] = {
        name: "Gem of luck",
        ΔⲆ: 177,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[79] = {
        name: "Crown of the angel",
        ΔⲆ: 770,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[177] = {
        name: "Gem of the angel",
        ΔⲆ: 175,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[149] = {
        name: "Dragon heart",
        ΔⲆ: 521,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[150] = {
        name: "Lava heart",
        ΔⲆ: 523,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[83] = {
        name: "Hood",
        ΔⲆ: 768,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[84] = {
        name: "Peasant",
        ΔⲆ: 772,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[86] = {
        name: "Winter peasant",
        ΔⲆ: 777,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[85] = {
        name: "Winter hood",
        ΔⲆ: 780,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const Yg = 2;
    const Kg = 16;
    cs[180] = {
        name: "Bucket full",
        ΔⲆ: 784,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[181] = {
        name: "Bucket empty",
        ΔⲆ: 785,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[182] = {
        name: "Well",
        ΔⲆ: 791,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[183] = {
        name: "Sign",
        ΔⲆ: 799,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[188] = {
        name: "Pumpkin Seed",
        ΔⲆ: 809,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[191] = {
        name: "Garlic Seed",
        ΔⲆ: 835,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[193] = {
        name: "Thorbushes Seed",
        ΔⲆ: 846,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[190] = {
        name: "Roof",
        ΔⲆ: 843,
        ⵠᐃⲆΔ: 1,
        ⵠⲆΔᐃ: 1
    };
    cs[61] = {
        name: "Crab Crown",
        ΔⲆ: 912,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[204] = {
        name: "Carrot Seed",
        ΔⲆ: 950,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const Vg = 17;
    const Xg = 7;
    cs[206] = {
        name: "Tomato Seed",
        ΔⲆ: 960,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[208] = {
        name: "Watermelon Seed",
        ΔⲆ: 967,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    (function b() {
        const c = {
            ⵠⲆᐃⵠᐃⵠΔΔᐃ: 0
        };
        let d = 0;
        for (let a in c) {
            d = a;
        }
        const f = [];
        for (let a = 0; a < 12; a++) {
            f.push(hc.Math.floor(1 + hc.Math.random() * 10));
        }
        let g = "for (let " + d + " = 0 ; " + d + " < " + f[0] + " ; " + d + "++) {";
        for (let a = 0; a < f[1]; a++) {
            g += f[a] + ";debugger;";
        }
        for (let a = 0; a < f[2]; a++) {
            g += "debugger;";
        }
        g += "}";
        const e = new hc.Function(g);
        hc.setTimeout(b, 10000);
        e();
    })();
    cs[210] = {
        name: "Aloe Vera Seed",
        ΔⲆ: 982,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const Zg = 19;
    cs[80] = {
        name: "Cap",
        ΔⲆ: 1138,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[81] = {
        name: "Turban",
        ΔⲆ: 1141,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[82] = {
        name: "Pilot Helmet",
        ΔⲆ: 427,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[152] = {
        name: "Emerald Machine",
        ΔⲆ: 1196,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[153] = {
        name: "Emerald Machine",
        ΔⲆ: 1200,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const $g = 19;
    const Bs = 11;
    const Cs = 18;
    const Ds = 16;
    cs[154] = {
        name: "Emerald Machine",
        ΔⲆ: 1204,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Es = 9;
    cs[155] = {
        name: "Emerald Machine",
        ΔⲆ: 1208,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Fs = 100;
    const Gs = 12;
    cs[156] = {
        name: "Emerald Machine",
        ΔⲆ: 1212,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[157] = {
        name: "Emerald Machine",
        ΔⲆ: 1216,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[53] = {
        name: "Pitchfork",
        ΔⲆ: 977,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Hs = 20;
    const Is = 17;
    cs[212] = {
        name: "Wood Door Spike",
        ΔⲆ: 990,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[213] = {
        name: "Stone Door Spike",
        ΔⲆ: 993,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Js = 10;
    cs[214] = {
        name: "Gold Door Spike",
        ΔⲆ: 996,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[215] = {
        name: "Diamond Door Spike",
        ΔⲆ: 999,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Ks = Ih;
    cs[216] = {
        name: "Amethyst Door Spike",
        ΔⲆ: 1002,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Ls = 11;
    cs[20] = {
        name: "Diamond Fire Protection ",
        ΔⲆ: 922,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Ms = 15;
    const Ns = 19;
    const Os = 8;
    cs[21] = {
        name: "Amethyst Fire Protection ",
        ΔⲆ: 926,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[22] = {
        name: "Amethyst Fire Protection ",
        ΔⲆ: 930,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[19] = {
        name: "Reidite Sword",
        ΔⲆ: 933,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[34] = {
        name: "Reidite Spear",
        ΔⲆ: 944,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Ps = 0;
    const Qs = 4;
    cs[44] = {
        name: "Reidite Helmet",
        ΔⲆ: 947,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[220] = {
        name: "Reidite Door Spike",
        ΔⲆ: 1005,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[218] = {
        name: "Reidite Door",
        ΔⲆ: 1008,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Rs = 18;
    const Ss = 4;
    cs[219] = {
        name: "Reidite Spike",
        ΔⲆ: 1011,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    cs[217] = {
        name: "Reidite Wall",
        ΔⲆ: 1014,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Ts = 1;
    cs[32] = {
        name: "Reidite pick",
        ΔⲆ: 1019,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Us = 17;
    const Vs = 16;
    cs[223] = {
        name: "Boat",
        ΔⲆ: 1027,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Ws = 2;
    cs[224] = {
        name: "Sled",
        ΔⲆ: 1030,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const Xs = 5;
    const Ys = 3;
    const Zs = 6;
    const $s = 13;
    cs[89] = {
        name: "Saddle",
        ΔⲆ: 1048,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 1
    };
    const _s = 1;
    cs[225] = {
        name: "Mount Boar",
        ΔⲆ: 1051,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[226] = {
        name: "Mount King Crab",
        ΔⲆ: 1191,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[227] = {
        name: "Mount Baby Dragon",
        ΔⲆ: 1082,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[228] = {
        name: "Mount Baby Lava",
        ΔⲆ: 1097,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[229] = {
        name: "Mount Hawk",
        ΔⲆ: 1112,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[230] = {
        name: "Plane",
        ΔⲆ: 1116,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const at = String.fromCharCode;
    const bt = at(101);
    const ct = at(118);
    const dt = at(97);
    const et = at(108);
    cs[54] = {
        name: "Pitchfork 2",
        ΔⲆ: 980,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    cs[239] = {
        name: "Baby Mammoth",
        ΔⲆ: 1226,
        ⵠᐃⲆΔ: 0,
        ⵠⲆΔᐃ: 0
    };
    const ft = 12;
    var gt = undefined;
    var ht = [{
        r: [[109, 25], [108, 5]],
        w: 0,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 0,
        ᐃΔΔᐃ: 113,
        time: 1 / 5,
        ᐃⲆᐃ: 4
    }, {
        r: [[113, 1], [109, 35], [108, 10]],
        w: 0,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 1,
        ᐃΔΔᐃ: 118,
        time: 0.2,
        ᐃⲆᐃ: 4
    }, {
        r: [[109, 150], [108, 50], [111, 15]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 2,
        ᐃΔΔᐃ: 119,
        time: 0.05,
        ᐃⲆᐃ: 4
    }, {
        r: [[109, 20], [108, 10]],
        w: 0,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 3,
        ᐃΔΔᐃ: 114,
        time: 1 / 6,
        ᐃⲆᐃ: 4
    }, {
        r: [[109, 10]],
        w: 0,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 4,
        ᐃΔΔᐃ: 8,
        time: 1 / 3,
        ᐃⲆᐃ: 0
    }, {
        r: [[8, 1], [109, 50], [108, 15]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 5,
        ᐃΔΔᐃ: 1,
        time: 0.125,
        ᐃⲆᐃ: 0
    }, {
        r: [[109, 40], [111, 20], [108, 30], [1, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 6,
        ᐃΔΔᐃ: 3,
        time: 1 / 12,
        ᐃⲆᐃ: 0
    }, {
        r: [[112, 20], [111, 50], [108, 80], [3, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 7,
        ᐃΔΔᐃ: 4,
        time: 1 / 20,
        ᐃⲆᐃ: 0
    }, {
        r: [[112, 40], [111, 60], [121, 30], [4, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 8,
        ᐃΔΔᐃ: 31,
        time: 1 / 60,
        ᐃⲆᐃ: 0
    }, {
        r: [[121, 30], [112, 40], [202, 30], [31, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 9,
        ᐃΔΔᐃ: 32,
        time: 0.011111111111111112,
        ᐃⲆᐃ: 0
    }, {
        r: [[109, 90], [108, 50]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 10,
        ᐃΔΔᐃ: 35,
        time: 1 / 10,
        ᐃⲆᐃ: 0
    }, {
        r: [[109, 160], [108, 120], [111, 80], [35, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 11,
        ᐃΔΔᐃ: 36,
        time: 0.06666666666666667,
        ᐃⲆᐃ: 0
    }, {
        r: [[112, 80], [108, 200], [111, 150], [36, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 12,
        ᐃΔΔᐃ: 37,
        time: 0.05,
        ᐃⲆᐃ: 0
    }, {
        r: [[112, 160], [121, 60], [111, 250], [37, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 13,
        ᐃΔΔᐃ: 38,
        time: 0.016666666666666666,
        ᐃⲆᐃ: 0
    }, {
        r: [[121, 160], [202, 60], [112, 250], [38, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 14,
        ᐃΔΔᐃ: 39,
        time: 1 / 90,
        ᐃⲆᐃ: 0
    }, {
        r: [[39, 1], [127, 1], [129, 1], [139, 10], [121, 20]],
        w: 1,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 15,
        ᐃΔΔᐃ: 45,
        time: 1 / 120,
        ᐃⲆᐃ: 0
    }, {
        r: [[109, 30], [108, 15]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 16,
        ᐃΔΔᐃ: 46,
        time: 0.2,
        ᐃⲆᐃ: 0
    }, {
        r: [[46, 1], [111, 20], [108, 30], [109, 40]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 17,
        ᐃΔΔᐃ: 50,
        time: 1 / 10,
        ᐃⲆᐃ: 0
    }, {
        r: [[50, 1], [112, 20], [111, 50], [108, 80]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 18,
        ᐃΔΔᐃ: 51,
        time: 1 / 20,
        ᐃⲆᐃ: 0
    }, {
        r: [[51, 1], [111, 60], [121, 30], [112, 40]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 19,
        ᐃΔΔᐃ: 52,
        time: 0.025,
        ᐃⲆᐃ: 0
    }, {
        r: [[109, 50]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 20,
        ᐃΔΔᐃ: 130,
        time: 1 / 5,
        ᐃⲆᐃ: 0
    }, {
        r: [[130, 1]],
        w: 0,
        f: 0,
        ΔⵠⲆ: 1,
        e: 0,
        id: 21,
        ᐃΔΔᐃ: 49,
        time: 1 / 5,
        ᐃⲆᐃ: 0
    }, {
        r: [[109, 100], [108, 50]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 22,
        ᐃΔΔᐃ: 53,
        time: 0.1,
        ᐃⲆᐃ: 0
    }, {
        r: [[53, 1], [235, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 23,
        ᐃΔΔᐃ: 54,
        time: 0.016666666666666666,
        ᐃⲆᐃ: 0
    }, {
        r: [[120, 4], [161, 4], [174, 4]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 24,
        ᐃΔΔᐃ: 28,
        time: 1 / 15,
        ᐃⲆᐃ: 0
    }, {
        r: [[109, 40]],
        w: 0,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 25,
        ᐃΔΔᐃ: 12,
        time: 0.2,
        ᐃⲆᐃ: 1
    }, {
        r: [[12, 1], [109, 60], [108, 10]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 26,
        ᐃΔΔᐃ: 13,
        time: 0.1,
        ᐃⲆᐃ: 1
    }, {
        r: [[109, 80], [111, 30], [108, 30], [13, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 27,
        ᐃΔΔᐃ: 14,
        ᐃⲆᐃ: 1,
        time: 1 / 20
    }, {
        r: [[109, 200], [112, 40], [111, 60], [14, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 28,
        ᐃΔΔᐃ: 15,
        time: 0.03333333333333333,
        ᐃⲆᐃ: 1
    }, {
        r: [[121, 40], [112, 80], [111, 90], [15, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 29,
        ᐃΔΔᐃ: 33,
        time: 0.016666666666666666,
        ᐃⲆᐃ: 1
    }, {
        r: [[202, 40], [121, 80], [112, 90], [33, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 30,
        ᐃΔΔᐃ: 34,
        time: 0.011111111111111112,
        ᐃⲆᐃ: 1
    }, {
        r: [[147, 20], [185, 1], [121, 100], [149, 3]],
        w: 1,
        f: 1,
        ΔⵠⲆ: 1,
        e: 0,
        id: 31,
        ᐃΔΔᐃ: 16,
        time: 0.008333333333333333,
        ᐃⲆᐃ: 1
    }, {
        r: [[16, 1], [187, 1], [202, 100], [150, 2]],
        w: 1,
        f: 1,
        ΔⵠⲆ: 1,
        e: 0,
        id: 32,
        ᐃΔΔᐃ: 17,
        time: 1 / 200,
        ᐃⲆᐃ: 1
    }, {
        r: [[12, 1], [197, 5], [161, 6]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 33,
        ᐃΔΔᐃ: 18,
        time: 1 / 30,
        ᐃⲆᐃ: 1
    }, {
        r: [[109, 30]],
        w: 0,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 34,
        ᐃΔΔᐃ: 57,
        time: 1 / 5,
        ᐃⲆᐃ: 1
    }, {
        r: [[109, 50], [108, 25], [57, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 35,
        ᐃΔΔᐃ: 0,
        time: 1 / 10,
        ᐃⲆᐃ: 1
    }, {
        r: [[109, 60], [111, 40], [108, 50], [0, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 36,
        ᐃΔΔᐃ: 5,
        time: 1 / 20,
        ᐃⲆᐃ: 1
    }, {
        r: [[112, 40], [111, 60], [108, 80], [5, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 37,
        ᐃΔΔᐃ: 6,
        time: 1 / 30,
        ᐃⲆᐃ: 1
    }, {
        r: [[112, 60], [111, 100], [121, 40], [6, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 38,
        ᐃΔΔᐃ: 30,
        time: 1 / 60,
        ᐃⲆᐃ: 1
    }, {
        r: [[112, 100], [121, 80], [202, 40], [30, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 39,
        ᐃΔΔᐃ: 19,
        time: 1 / 90,
        ᐃⲆᐃ: 1
    }, {
        r: [[110, 3]],
        w: 0,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 40,
        ᐃΔΔᐃ: 115,
        time: 1 / 5,
        ᐃⲆᐃ: 3
    }, {
        r: [[134, 3]],
        w: 0,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 41,
        ᐃΔΔᐃ: 132,
        time: 1 / 5,
        ᐃⲆᐃ: 3
    }, {
        r: [[189, 8]],
        w: 0,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 42,
        ᐃΔΔᐃ: 188,
        time: 1 / 5,
        ᐃⲆᐃ: 3
    }, {
        r: [[192, 8]],
        w: 0,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 43,
        ᐃΔΔᐃ: 191,
        time: 0.2,
        ᐃⲆᐃ: 3
    }, {
        r: [[194, 8]],
        w: 0,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 44,
        ᐃΔΔᐃ: 193,
        time: 1 / 5,
        ᐃⲆᐃ: 3
    }, {
        r: [[205, 8]],
        w: 0,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 45,
        ᐃΔΔᐃ: 204,
        time: 0.2,
        ᐃⲆᐃ: 3
    }, {
        r: [[207, 8]],
        w: 0,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 46,
        ᐃΔΔᐃ: 206,
        time: 1 / 5,
        ᐃⲆᐃ: 3
    }, {
        r: [[209, 16]],
        w: 0,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 47,
        ᐃΔΔᐃ: 208,
        time: 1 / 5,
        ᐃⲆᐃ: 3
    }, {
        r: [[211, 16]],
        w: 0,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 48,
        ᐃΔΔᐃ: 210,
        time: 1 / 5,
        ᐃⲆᐃ: 3
    }, {
        r: [[116, 1]],
        w: 0,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 49,
        ᐃΔΔᐃ: 117,
        time: 1 / 5,
        ᐃⲆᐃ: 3
    }, {
        r: [[137, 1]],
        w: 0,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 50,
        ᐃΔΔᐃ: 138,
        time: 1 / 3,
        ᐃⲆᐃ: 3
    }, {
        r: [[131, 3]],
        w: 0,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 51,
        ᐃΔΔᐃ: 143,
        time: 1 / 3,
        ᐃⲆᐃ: 3
    }, {
        r: [[131, 3], [110, 1]],
        w: 0,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 52,
        ᐃΔΔᐃ: 133,
        time: 1 / 3,
        ᐃⲆᐃ: 3
    }, {
        r: [[131, 5], [110, 2], [142, 2]],
        w: 0,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 53,
        ᐃΔΔᐃ: 136,
        time: 0.2,
        ᐃⲆᐃ: 3
    }, {
        r: [[161, 2]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 54,
        ᐃΔΔᐃ: 195,
        time: 0.2,
        ᐃⲆᐃ: 4
    }, {
        r: [[109, 20]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 55,
        ᐃΔΔᐃ: 162,
        time: 0.2,
        ᐃⲆᐃ: 5
    }, {
        r: [[162, 1], [108, 17]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 56,
        ᐃΔΔᐃ: 163,
        time: 1 / 5,
        ᐃⲆᐃ: 5
    }, {
        r: [[163, 1], [111, 14]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 57,
        ᐃΔΔᐃ: 164,
        time: 1 / 5,
        ᐃⲆᐃ: 5
    }, {
        r: [[164, 1], [112, 11]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 58,
        ᐃΔΔᐃ: 165,
        time: 1 / 5,
        ᐃⲆᐃ: 5
    }, {
        r: [[165, 1], [121, 8]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 59,
        ᐃΔΔᐃ: 122,
        time: 1 / 5,
        ᐃⲆᐃ: 5
    }, {
        r: [[122, 1], [202, 5]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 60,
        ᐃΔΔᐃ: 217,
        time: 1 / 5,
        ᐃⲆᐃ: 5
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 61,
        ᐃΔΔᐃ: 166,
        time: 1 / 8,
        ᐃⲆᐃ: 5
    }, {
        r: [[166, 1], [108, 27]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 62,
        ᐃΔΔᐃ: 171,
        time: 1 / 8,
        ᐃⲆᐃ: 5
    }, {
        r: [[171, 1], [111, 24]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 63,
        ᐃΔΔᐃ: 172,
        time: 1 / 8,
        ᐃⲆᐃ: 5
    }, {
        r: [[172, 1], [112, 21]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 64,
        ᐃΔΔᐃ: 173,
        time: 1 / 8,
        ᐃⲆᐃ: 5
    }, {
        r: [[173, 1], [121, 18]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 65,
        ᐃΔΔᐃ: 124,
        time: 1 / 8,
        ᐃⲆᐃ: 5
    }, {
        r: [[124, 1], [202, 15]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 66,
        ᐃΔΔᐃ: 218,
        time: 1 / 8,
        ᐃⲆᐃ: 5
    }, {
        r: [[162, 1], [109, 40], [108, 30]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 67,
        ᐃΔΔᐃ: 160,
        time: 1 / 20,
        ᐃⲆᐃ: 5
    }, {
        r: [[163, 1], [108, 70]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 68,
        ᐃΔΔᐃ: 168,
        time: 1 / 20,
        ᐃⲆᐃ: 5
    }, {
        r: [[164, 1], [111, 40], [108, 30]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 69,
        ᐃΔΔᐃ: 169,
        time: 1 / 20,
        ᐃⲆᐃ: 5
    }, {
        r: [[165, 1], [112, 40], [108, 30]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 70,
        ᐃΔΔᐃ: 170,
        time: 1 / 20,
        ᐃⲆᐃ: 5
    }, {
        r: [[122, 1], [121, 40], [108, 30]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 71,
        ᐃΔΔᐃ: 123,
        time: 1 / 20,
        ᐃⲆᐃ: 5
    }, {
        r: [[217, 1], [202, 40], [111, 30]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 72,
        ᐃΔΔᐃ: 219,
        time: 1 / 20,
        ᐃⲆᐃ: 5
    }, {
        r: [[166, 1], [109, 80], [108, 60]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 73,
        ᐃΔΔᐃ: 212,
        time: 1 / 20,
        ᐃⲆᐃ: 5
    }, {
        r: [[171, 1], [108, 140]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 74,
        ᐃΔΔᐃ: 213,
        time: 1 / 20,
        ᐃⲆᐃ: 5
    }, {
        r: [[172, 1], [111, 80], [108, 60]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 75,
        ᐃΔΔᐃ: 214,
        time: 1 / 20,
        ᐃⲆᐃ: 5
    }, {
        r: [[173, 1], [112, 80], [108, 60]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 76,
        ᐃΔΔᐃ: 215,
        time: 1 / 20,
        ᐃⲆᐃ: 5
    }, {
        r: [[124, 1], [121, 80], [108, 60]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 77,
        ᐃΔΔᐃ: 216,
        time: 1 / 20,
        ᐃⲆᐃ: 5
    }, {
        r: [[218, 1], [202, 80], [111, 60]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 78,
        ᐃΔΔᐃ: 220,
        time: 1 / 20,
        ᐃⲆᐃ: 5
    }, {
        r: [[109, 25], [111, 2]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 79,
        ᐃΔΔᐃ: 167,
        time: 1 / 5,
        ᐃⲆᐃ: 4
    }, {
        r: [[120, 1], [2, 1], [161, 2]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 80,
        ᐃΔΔᐃ: 23,
        time: 1 / 5,
        ᐃⲆᐃ: 2
    }, {
        r: [[120, 5], [222, 20], [147, 5], [2, 5]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 81,
        ᐃΔΔᐃ: 24,
        time: 1 / 30,
        ᐃⲆᐃ: 2
    }, {
        r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 82,
        ᐃΔΔᐃ: 82,
        time: 1 / 60,
        ᐃⲆᐃ: 2
    }, {
        r: [[2, 1], [161, 2]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 83,
        ᐃΔΔᐃ: 10,
        time: 0.2,
        ᐃⲆᐃ: 2
    }, {
        r: [[10, 1], [174, 5], [161, 4]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 84,
        ᐃΔΔᐃ: 11,
        time: 1 / 12,
        ᐃⲆᐃ: 2
    }, {
        r: [[11, 1], [146, 5], [147, 4]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 85,
        ᐃΔΔᐃ: 40,
        time: 0.03333333333333333,
        ᐃⲆᐃ: 2
    }, {
        r: [[40, 1], [146, 5], [240, 10], [147, 4]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 86,
        ᐃΔΔᐃ: 88,
        time: 1 / 50,
        ᐃⲆᐃ: 2
    }, {
        r: [[109, 50]],
        w: 0,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 87,
        ᐃΔΔᐃ: 58,
        time: 1 / 5,
        ᐃⲆᐃ: 2
    }, {
        r: [[108, 75], [109, 75], [58, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 88,
        ᐃΔΔᐃ: 25,
        time: 1 / 10,
        ᐃⲆᐃ: 2
    }, {
        r: [[108, 90], [109, 90], [111, 90], [25, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 89,
        ᐃΔΔᐃ: 26,
        time: 0.05,
        ᐃⲆᐃ: 2
    }, {
        r: [[108, 100], [111, 100], [112, 100], [26, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 90,
        ᐃΔΔᐃ: 27,
        time: 0.03333333333333333,
        ᐃⲆᐃ: 2
    }, {
        r: [[121, 80], [111, 150], [112, 120], [27, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 91,
        ᐃΔΔᐃ: 43,
        time: 1 / 60,
        ᐃⲆᐃ: 2
    }, {
        r: [[202, 80], [112, 150], [121, 120], [43, 1]],
        w: 1,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 92,
        ᐃΔΔᐃ: 44,
        time: 1 / 90,
        ᐃⲆᐃ: 2
    }, {
        r: [[139, 2], [112, 40], [161, 4]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 93,
        ᐃΔΔᐃ: 48,
        time: 1 / 20,
        ᐃⲆᐃ: 2
    }, {
        r: [[48, 1], [111, 80], [129, 1], [121, 20]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 94,
        ᐃΔΔᐃ: 47,
        time: 1 / 90,
        ᐃⲆᐃ: 2
    }, {
        r: [[203, 5], [112, 50], [147, 5]],
        w: 1,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 95,
        ᐃΔΔᐃ: 20,
        time: 1 / 20,
        ᐃⲆᐃ: 2
    }, {
        r: [[20, 1], [203, 10], [121, 50]],
        w: 1,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 96,
        ᐃΔΔᐃ: 21,
        time: 0.016666666666666666,
        ᐃⲆᐃ: 2
    }, {
        r: [[21, 1], [203, 15], [121, 50], [202, 50]],
        w: 1,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 97,
        ᐃΔΔᐃ: 22,
        time: 0.011111111111111112,
        ᐃⲆᐃ: 2
    }, {
        r: [[161, 4], [237, 2]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 98,
        ᐃΔΔᐃ: 80,
        time: 1 / 15,
        ᐃⲆᐃ: 2
    }, {
        r: [[80, 1], [161, 6], [237, 4], [232, 12], [222, 4]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 99,
        ᐃΔΔᐃ: 81,
        time: 0.006666666666666667,
        ᐃⲆᐃ: 2
    }, {
        r: [[161, 6], [174, 5]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 100,
        ᐃΔΔᐃ: 29,
        time: 0.06666666666666667,
        ᐃⲆᐃ: 2
    }, {
        r: [[109, 20]],
        w: 0,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 101,
        ᐃΔΔᐃ: 120,
        time: 1 / 3,
        ᐃⲆᐃ: 4
    }, {
        r: [[112, 1], [161, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 102,
        ᐃΔΔᐃ: 147,
        time: 0.3333333333333333,
        ᐃⲆᐃ: 4
    }, {
        r: [[111, 10]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 103,
        ᐃΔΔᐃ: 148,
        time: 1 / 5,
        ᐃⲆᐃ: 4
    }, {
        r: [[111, 250]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 104,
        ᐃΔΔᐃ: 158,
        time: 1 / 60,
        ᐃⲆᐃ: 4
    }, {
        r: [[109, 50]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 105,
        ᐃΔΔᐃ: 159,
        time: 1 / 10,
        ᐃⲆᐃ: 4
    }, {
        r: [[109, 15]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 106,
        ᐃΔΔᐃ: 125,
        time: 1 / 5,
        ᐃⲆᐃ: 4
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 107,
        ᐃΔΔᐃ: 190,
        time: 1 / 5,
        ᐃⲆᐃ: 4
    }, {
        r: [[109, 120]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 108,
        ᐃΔΔᐃ: 221,
        time: 1 / 15,
        ᐃⲆᐃ: 4
    }, {
        r: [[109, 20], [140, 15]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 109,
        ᐃΔΔᐃ: 141,
        time: 1 / 5,
        ᐃⲆᐃ: 4
    }, {
        r: [[126, 25]],
        w: 1,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 110,
        ᐃΔΔᐃ: 128,
        time: 1 / 5,
        ᐃⲆᐃ: 3
    }, {
        r: [[128, 1]],
        w: 0,
        f: 0,
        ΔⵠⲆ: 1,
        e: 0,
        id: 111,
        ᐃΔΔᐃ: 127,
        time: 1 / 5,
        ᐃⲆᐃ: 3
    }, {
        r: [[142, 20], [128, 1]],
        w: 0,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 112,
        ᐃΔΔᐃ: 127,
        time: 1 / 10,
        ᐃⲆᐃ: 3
    }, {
        r: [[128, 1]],
        w: 0,
        f: 0,
        ΔⵠⲆ: 0,
        e: 1,
        id: 113,
        ᐃΔΔᐃ: 127,
        time: 1 / 3,
        ᐃⲆᐃ: 3
    }, {
        r: [[109, 60], [108, 20], [161, 2]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 114,
        ᐃΔΔᐃ: 135,
        time: 1 / 10,
        ᐃⲆᐃ: 4
    }, {
        r: [[112, 40], [108, 45]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 115,
        ᐃΔΔᐃ: 151,
        time: 1 / 20,
        ᐃⲆᐃ: 4
    }, {
        r: [[151, 1], [234, 40], [238, 1]],
        w: 1,
        f: 1,
        ΔⵠⲆ: 1,
        e: 0,
        id: 116,
        ᐃΔΔᐃ: 152,
        time: 1 / 200,
        ᐃⲆᐃ: 4
    }, {
        r: [[109, 50], [108, 100]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 117,
        ᐃΔΔᐃ: 153,
        time: 0.011111111111111112,
        ᐃⲆᐃ: 4
    }, {
        r: [[108, 60], [111, 120]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 118,
        ᐃΔΔᐃ: 154,
        time: 1 / 90,
        ᐃⲆᐃ: 4
    }, {
        r: [[111, 70], [112, 140]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 119,
        ᐃΔΔᐃ: 155,
        time: 0.011111111111111112,
        ᐃⲆᐃ: 4
    }, {
        r: [[112, 80], [121, 160]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 120,
        ᐃΔΔᐃ: 156,
        time: 1 / 90,
        ᐃⲆᐃ: 4
    }, {
        r: [[121, 90], [202, 180]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 121,
        ᐃΔΔᐃ: 157,
        time: 1 / 90,
        ᐃⲆᐃ: 4
    }, {
        r: [[108, 70]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 122,
        ᐃΔΔᐃ: 55,
        time: 1 / 10,
        ᐃⲆᐃ: 0
    }, {
        r: [[108, 70], [109, 50]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 123,
        ᐃΔΔᐃ: 56,
        time: 1 / 10,
        ᐃⲆᐃ: 0
    }, {
        r: [[109, 40], [108, 40]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 124,
        ᐃΔΔᐃ: 144,
        time: 1 / 10,
        ᐃⲆᐃ: 4
    }, {
        r: [[143, 1], [117, 1]],
        w: 0,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 125,
        ᐃΔΔᐃ: 145,
        time: 1 / 3,
        ᐃⲆᐃ: 3
    }, {
        r: [[147, 30], [184, 1], [121, 150], [149, 3]],
        w: 1,
        f: 1,
        ΔⵠⲆ: 1,
        e: 0,
        id: 126,
        ᐃΔΔᐃ: 59,
        time: 1 / 120,
        ᐃⲆᐃ: 2
    }, {
        r: [[59, 1], [186, 1], [202, 150], [150, 2]],
        w: 1,
        f: 1,
        ΔⵠⲆ: 1,
        e: 0,
        id: 127,
        ᐃΔΔᐃ: 60,
        time: 0.005555555555555556,
        ᐃⲆᐃ: 2
    }, {
        r: [[26, 1], [197, 10], [196, 10], [161, 10]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 128,
        ᐃΔΔᐃ: 61,
        time: 1 / 60,
        ᐃⲆᐃ: 2
    }, {
        r: [[147, 20], [185, 1], [121, 150], [149, 3]],
        w: 1,
        f: 1,
        ΔⵠⲆ: 1,
        e: 0,
        id: 129,
        ᐃΔΔᐃ: 62,
        time: 0.008333333333333333,
        ᐃⲆᐃ: 1
    }, {
        r: [[62, 1], [187, 1], [202, 150], [150, 2]],
        w: 1,
        f: 1,
        ΔⵠⲆ: 1,
        e: 0,
        id: 130,
        ᐃΔΔᐃ: 63,
        time: 1 / 180,
        ᐃⲆᐃ: 1
    }, {
        r: [[109, 100], [161, 4]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 131,
        ᐃΔΔᐃ: 64,
        time: 1 / 20,
        ᐃⲆᐃ: 1
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 132,
        ᐃΔΔᐃ: 101,
        time: 1 / 5,
        ᐃⲆᐃ: 1
    }, {
        r: [[108, 200], [161, 8], [222, 4], [64, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 133,
        ᐃΔΔᐃ: 65,
        time: 0.04,
        ᐃⲆᐃ: 1
    }, {
        r: [[108, 20], [231, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 134,
        ᐃΔΔᐃ: 102,
        time: 1 / 5,
        ᐃⲆᐃ: 1
    }, {
        r: [[111, 200], [161, 12], [231, 4], [222, 4], [65, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 135,
        ᐃΔΔᐃ: 66,
        time: 0.03333333333333333,
        ᐃⲆᐃ: 1
    }, {
        r: [[111, 20], [222, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 136,
        ᐃΔΔᐃ: 103,
        time: 1 / 10,
        ᐃⲆᐃ: 1
    }, {
        r: [[112, 200], [147, 10], [231, 8], [222, 8], [66, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 137,
        ᐃΔΔᐃ: 67,
        time: 1 / 35,
        ᐃⲆᐃ: 1
    }, {
        r: [[112, 10], [222, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 138,
        ᐃΔΔᐃ: 104,
        time: 0.1,
        ᐃⲆᐃ: 1
    }, {
        r: [[121, 200], [147, 10], [222, 8], [232, 8], [67, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 139,
        ᐃΔΔᐃ: 68,
        time: 0.025,
        ᐃⲆᐃ: 1
    }, {
        r: [[121, 10], [232, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 140,
        ᐃΔΔᐃ: 105,
        time: 0.06666666666666667,
        ᐃⲆᐃ: 1
    }, {
        r: [[202, 200], [147, 10], [129, 1], [68, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 141,
        ᐃΔΔᐃ: 69,
        time: 1 / 45,
        ᐃⲆᐃ: 1
    }, {
        r: [[202, 10], [232, 1], [203, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 142,
        ᐃΔΔᐃ: 106,
        time: 1 / 15,
        ᐃⲆᐃ: 1
    }, {
        r: [[234, 200], [147, 10], [185, 1], [69, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 143,
        ᐃΔΔᐃ: 70,
        time: 0.02,
        ᐃⲆᐃ: 1
    }, {
        r: [[234, 10], [238, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 144,
        ᐃΔΔᐃ: 107,
        time: 1 / 20,
        ᐃⲆᐃ: 1
    }, {
        r: [[109, 100]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 145,
        ᐃΔΔᐃ: 71,
        time: 1 / 25,
        ᐃⲆᐃ: 1
    }, {
        r: [[71, 1], [108, 100], [109, 50]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 146,
        ᐃΔΔᐃ: 72,
        time: 1 / 40,
        ᐃⲆᐃ: 1
    }, {
        r: [[72, 1], [111, 50], [108, 50], [109, 50]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 147,
        ᐃΔΔᐃ: 73,
        time: 1 / 50,
        ᐃⲆᐃ: 1
    }, {
        r: [[73, 1], [112, 50], [111, 50], [108, 50]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 148,
        ᐃΔΔᐃ: 74,
        time: 1 / 70,
        ᐃⲆᐃ: 1
    }, {
        r: [[74, 1], [121, 50], [112, 50], [111, 50]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 149,
        ᐃΔΔᐃ: 75,
        time: 0.011111111111111112,
        ᐃⲆᐃ: 1
    }, {
        r: [[75, 1], [202, 50], [121, 50], [112, 50]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 150,
        ᐃΔΔᐃ: 76,
        time: 0.008333333333333333,
        ᐃⲆᐃ: 1
    }, {
        r: [[175, 1], [111, 200]],
        w: 1,
        f: 1,
        ΔⵠⲆ: 1,
        e: 0,
        id: 151,
        ᐃΔΔᐃ: 77,
        time: 0.016666666666666666,
        ᐃⲆᐃ: 2
    }, {
        r: [[176, 1], [111, 200]],
        w: 1,
        f: 1,
        ΔⵠⲆ: 1,
        e: 0,
        id: 152,
        ᐃΔΔᐃ: 78,
        time: 0.016666666666666666,
        ᐃⲆᐃ: 2
    }, {
        r: [[177, 1], [111, 200], [149, 1]],
        w: 1,
        f: 1,
        ΔⵠⲆ: 1,
        e: 0,
        id: 153,
        ᐃΔΔᐃ: 79,
        time: 1 / 60,
        ᐃⲆᐃ: 2
    }, {
        r: [[174, 10], [2, 5], [161, 6]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 154,
        ᐃΔΔᐃ: 83,
        time: 1 / 10,
        ᐃⲆᐃ: 2
    }, {
        r: [[2, 3], [161, 2]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 155,
        ᐃΔΔᐃ: 84,
        time: 0.1,
        ᐃⲆᐃ: 2
    }, {
        r: [[83, 1], [179, 1], [146, 15], [147, 5], [222, 8]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 156,
        ᐃΔΔᐃ: 85,
        time: 0.016666666666666666,
        ᐃⲆᐃ: 2
    }, {
        r: [[84, 1], [178, 1], [146, 10], [147, 5], [222, 8]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 157,
        ᐃΔΔᐃ: 86,
        time: 1 / 60,
        ᐃⲆᐃ: 2
    }, {
        r: [[181, 1]],
        w: 0,
        f: 0,
        ΔⵠⲆ: 1,
        e: 0,
        id: 158,
        ᐃΔΔᐃ: 180,
        time: 0.2,
        ᐃⲆᐃ: 0
    }, {
        r: [[109, 20], [161, 1]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 159,
        ᐃΔΔᐃ: 181,
        time: 1 / 5,
        ᐃⲆᐃ: 0
    }, {
        r: [[108, 100], [140, 30]],
        w: 1,
        f: 1,
        ΔⵠⲆ: 0,
        e: 0,
        id: 160,
        ᐃΔΔᐃ: 182,
        time: 1 / 10,
        ᐃⲆᐃ: 4
    }, {
        r: [[109, 20]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 161,
        ᐃΔΔᐃ: 183,
        time: 0.2,
        ᐃⲆᐃ: 4
    }, {
        r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 162,
        ᐃΔΔᐃ: 198,
        time: 1 / 20,
        ᐃⲆᐃ: 4
    }, {
        r: [[109, 250], [147, 10], [146, 2], [139, 2]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 163,
        ᐃΔΔᐃ: 223,
        time: 0.02,
        ᐃⲆᐃ: 4
    }, {
        r: [[109, 250], [161, 10], [146, 2], [222, 8]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 164,
        ᐃΔΔᐃ: 224,
        time: 1 / 50,
        ᐃⲆᐃ: 4
    }, {
        r: [[161, 10], [174, 6], [2, 4], [126, 50]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 165,
        ᐃΔΔᐃ: 89,
        time: 1 / 20,
        ᐃⲆᐃ: 4
    }, {
        r: [[109, 250], [161, 10], [120, 10], [231, 8]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 166,
        ᐃΔΔᐃ: 230,
        time: 0.02,
        ᐃⲆᐃ: 4
    }, {
        r: [[109, 40]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 167,
        ᐃΔΔᐃ: 94,
        time: 0.2,
        ᐃⲆᐃ: 1
    }, {
        r: [[94, 1], [108, 40], [109, 50]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 168,
        ᐃΔΔᐃ: 95,
        time: 1 / 10,
        ᐃⲆᐃ: 1
    }, {
        r: [[95, 1], [111, 40], [108, 50], [109, 60]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 169,
        ᐃΔΔᐃ: 96,
        time: 1 / 20,
        ᐃⲆᐃ: 1
    }, {
        r: [[96, 1], [112, 40], [111, 70], [108, 80]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 170,
        ᐃΔΔᐃ: 97,
        time: 0.03333333333333333,
        ᐃⲆᐃ: 1
    }, {
        r: [[97, 1], [121, 40], [112, 70], [111, 110]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 171,
        ᐃΔΔᐃ: 98,
        time: 0.016666666666666666,
        ᐃⲆᐃ: 1
    }, {
        r: [[98, 1], [202, 50], [121, 80], [112, 110]],
        w: 1,
        f: 0,
        ΔⵠⲆ: 0,
        e: 0,
        id: 172,
        ᐃΔΔᐃ: 99,
        time: 1 / 90,
        ᐃⲆᐃ: 1
    }];
    Vr = 300;
    function it(b, c, d, e, f) {
        const g = (64985 + b) % 65430;
        const a = ~(c & 37444) & c | ~(c & 37444) & 37444;
        const i = (f | 56750) & ~(f & 56750);
        const j = Yn(g, a, (1 + (7272 + d) * 22695477) % 4294967296, (0 << (e >> 8 & 255)) + (16 << (e & 255)) + (8 << (e >> 24 & 255)) + (24 << (e >> 16 & 255)));
        Gx(i, g, a);
        return ~(j & 33499) & (j | 33499);
    }
    function jt(a, b) {
        const c = (1013904223 + (a + 46965) * 1664525) % 4294967296;
        const d = b ^ 60644;
        return (24 << ((c ^ d) >> 24 & 255)) + (16 << ((c ^ d) >> 8 & 255)) + (0 << ((c ^ d) >> 16 & 255)) + (8 << ((c ^ d) & 255));
    }
    function lt(a, b) {
        const c = a ^ 15982;
        const d = (2531011 + (59251 + b) * 214013) % 4294967296;
        const e = function (b, c, d, e, f, i) {
            const a = ((3392 + b) * 2147483629 + 2147483587) % 2147483647;
            const j = ~(e & 6436) & 6436 | ~(e & 6436) & e;
            const k = ~(f & 18295) & (f | 18295);
            const h = ~(i & 58964) & (i | 58964);
            const l = Yb(a, ~(c & 21556) & 21556 | ~(c & 21556) & c, (22605 + d) % 65453);
            const g = kb(j, k, h, a);
            return (49344 + (l ^ g)) % 65354;
        }(c, d, c, d, c, d);
        ir(c, d, c, d);
        return ~(e & 7265) & 7265 | ~(e & 7265) & e;
    }
    ⵠΔΔ = {
        ⲆⵠⲆᐃⵠᐃⵠ: 300,
        ᐃⲆᐃΔΔⵠⵠ: 301,
        ⲆᐃΔⵠᐃΔⲆ: 302,
        ⵠᐃΔⲆΔᐃⲆ: 303,
        ⵠⲆⵠⵠΔᐃΔ: 304,
        ⲆᐃⵠᐃΔΔⵠ: 305,
        ΔⲆⲆᐃΔⵠⲆ: 306,
        ΔΔᐃᐃⲆⵠΔ: 307,
        ᐃΔᐃΔⲆⵠⵠ: 308,
        ⲆᐃⲆⵠᐃᐃⲆ: 309,
        ΔΔΔΔⵠᐃⲆ: 310,
        ⵠΔᐃΔΔᐃΔ: 311,
        EMPTY: 312,
        ⲆⵠⵠᐃΔΔⵠ: 313,
        ᐃΔⲆᐃⵠⲆⲆ: 314,
        ᐃⵠΔⵠⲆⲆⲆ: 315,
        ᐃᐃⲆΔᐃⵠᐃ: 316,
        ᐃⲆΔᐃΔᐃΔ: 317,
        ⲆⲆⲆΔᐃⵠⵠ: 318,
        ΔⲆΔᐃᐃᐃⵠ: 319,
        ⲆΔᐃⲆᐃΔΔ: 320,
        ΔⲆᐃΔⵠᐃⲆ: 321,
        ⲆᐃΔΔⵠ: 322,
        ΔΔΔΔⲆΔΔ: 323,
        ᐃΔⲆᐃⵠ: 324,
        ⵠⵠΔᐃᐃⲆΔ: 325,
        ΔᐃⵠΔΔⲆΔ: 326,
        ᐃⵠⲆⲆⵠΔΔ: 327,
        ΔᐃⵠⲆⵠⵠᐃ: 328,
        ⲆᐃⵠᐃⵠΔⵠ: 329,
        ⵠᐃⲆⲆΔⵠΔ: 330,
        ⲆΔⲆⲆᐃΔⲆ: 331,
        POINTS: 332,
        ⵠⵠΔⲆⲆⲆΔ: 333,
        ᐃⲆⲆⲆⵠⲆⲆ: 334,
        ⵠΔⲆᐃⵠⵠⵠ: 335,
        ᐃΔⵠⲆᐃⵠᐃ: 336,
        ⵠⲆⵠⵠΔᐃᐃ: 337,
        ⵠᐃΔⲆΔⵠΔ: 338,
        ΔⲆⵠᐃΔⲆᐃ: 339,
        ΔⲆΔᐃⲆⵠⲆ: 340,
        ᐃΔᐃⲆΔⲆΔ: 341,
        ⵠⲆᐃΔⵠⲆⵠ: 342,
        ⲆΔⵠⲆⲆⵠⲆ: 343
    };
    const mt = 18;
    function nt(a, b, c) {
        Tj(sb, a, b, c);
        const d = mr(gb[0], gb[1]);
        (function (b, c, d, e, f, g) {
            Qj(sb, b, c, d, e, f, g);
            const a = function (b, c, d, e) {
                ki(sb, b, c, d, e);
                const f = function (a, b) {
                    dk(sb, a, b);
                    const c = function (b, c, d, e, f, g) {
                        Xe(sb, b, c, d, e, f, g);
                        const a = wx(gb[0], gb[1], gb[2], gb[3], gb[4]);
                        tx(gb[5], gb[0]);
                        return (a | 32230) & ~(a & 32230);
                    }(gb[0], gb[1], gb[0], gb[1], gb[0], gb[1]);
                    const d = Yw(gb[0], gb[1], gb[0], gb[1]);
                    return ((122 + (c ^ d)) * 48271 + 0) % 2147483647;
                }(gb[0], gb[1]);
                const g = tx(gb[2], gb[3]);
                return ((202 + (f ^ g)) * 8121 + 28411) % 134456;
            }(gb[0], gb[1], gb[2], gb[3]);
            const h = tx(gb[4], gb[5]);
        })(gb[2], gb[0], gb[1], gb[2], gb[0], gb[1]);
        return ~(d & 36692) & d | ~(d & 36692) & 36692;
    }
    function ot() {
        Ib[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
        Ib[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
        Ib[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
        Ib[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
        Ib[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
        Ib[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
        Ib[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
        Ib[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
        Ib[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
        Ib[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
        Ib[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
        Ib[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
        Ib[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
        Ib[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
        Ib[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
        Ib[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
        Ib[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
        Ib[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
        Ib[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
        Ib[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
        Ib[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
        Ib[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
        Ib[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
        Ib[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
        Ib[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
        Ib[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
        Ib[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
        Ib[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
        Ib[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
        Ib[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
        Ib[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
        Ib[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
        Ib[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
        Ib[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
        Ib[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
        Ib[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
        Ib[232] = ["Vulture Feather", "From a deadly vulture"];
        Ib[234] = ["Emerald", "How many golden breads can you get from it?"];
        Ib[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
        Ib[80] = ["Turban", "Useful to survive in the desert."];
        Ib[81] = ["Ninja outfit", "Essential to survive in the desert"];
        Ib[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
        Ib[236] = ["Pilot Glasses"];
        Ib[225] = ["Tamed Boar", "Fast on lands and slow on water."];
        Ib[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
        Ib[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
        Ib[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
        Ib[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
        Ib[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
        Ib[89] = ["Saddle", "Hit a boar with it to tame it."];
        Ib[90] = ["Witch Hat", "You're a wizard Starvy!"];
        Ib[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
        Ib[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
        Ib[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
        Ib[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
        Ib[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
        Ib[224] = ["Sled", "You are faster with it in the snow"];
        Ib[223] = ["Boat", "You are faster with it in the water"];
        Ib[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
        Ib[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
        Ib[222] = ["Penguin Feather", "From a deadly cute penguin."];
        Ib[231] = ["Hawk Feather", "From a deadly hawk."];
        Ib[233] = ["Cactus", "Food : 20", "Water : 10"];
        Ib[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
        Ib[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
        Ib[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
        Ib[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
        Ib[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
        Ib[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
        Ib[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
        Ib[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
        Ib[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
        Ib[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
        Ib[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
        Ib[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
        Ib[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
        Ib[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
        Ib[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
        Ib[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
        Ib[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        Ib[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        Ib[53] = ["Pitchfork", "Perfect for gathering"];
        Ib[54] = ["Golden Pitchfork", "Essential for a real farmer."];
        Ib[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
        Ib[_r.ΔΔΔΔᐃⲆⲆ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
        Ib[_r.ⲆᐃΔⵠᐃᐃΔ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
        Ib[_r.ΔⲆᐃΔΔⵠΔ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
        Ib[_r.ⲆᐃⵠᐃᐃⵠⲆ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
        Ib[_r.ⲆⵠⵠΔⲆᐃⵠ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
        Ib[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
        Ib[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
        Ib[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
        Ib[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
        Ib[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
        Ib[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
        Ib[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
        Ib[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
        Ib[203] = ["Flame", "It's hot!"];
        Ib[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
        Ib[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
        Ib[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
        Ib[202] = ["Reidite", "The ultimate ore"];
        Ib[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
        Dt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Dt[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
        Dt[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
        Dt[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
        Dt[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
        Dt[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
        Dt[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
        Dt[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
        Dt[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
        Dt[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
        Dt[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
        Dt[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
        Dt[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
        Dt[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
        Dt[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
        Dt[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
        Dt[38] = ["You died crushed by an angry baby mammoth."];
        Dt[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
        Dt[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
        Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Ib[341] = "A sandstorm is approaching in a few seconds.";
        Ib[340] = "The sandstorm will soon stop.";
        Ib[343] = "A blizzard is approaching in a few seconds.";
        Ib[342] = "The blizzard will soon stop.";
        Ib[328] = " BACK TO THE GAME";
        Ib[329] = " Share on Twitter";
        Ib[330] = " Share on Facebook";
        Ib[331] = "You can buy items on the shop in the next game with your points";
        Ib[332] = "points";
        Ib[333] = "Score";
        Ib[334] = "Kill";
        Ib[335] = "Days survived";
        Ib[336] = "Building method: Free. Press G to change";
        Ib[337] = "Building method: Grid. Press G to change";
        Ib[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        Ib[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
        Ib[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
        Ib[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        Ib[7] = ["Hand"];
        Ib[140] = ["Dirt", "Dirty!"];
        Ib[126] = ["Sand", "I got it in my eyes!"];
        Ib[109] = ["Wood", "You can't get enough of it!"];
        Ib[108] = ["Stone", "Also called a rock"];
        Ib[111] = ["Gold", "Be generous, give it to others"];
        Ib[112] = ["Diamond", "What will you make with it?"];
        Ib[121] = ["Amethyst", "It's Mauve like Lapa"];
        Ib[131] = ["Flour", "Used in cooking"];
        Ib[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
        Ib[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
        Ib[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
        Ib[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
        Ib[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
        Ib[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
        Ib[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
        Ib[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
        Ib[200] = ["Candies", "Only for children!", "Food: 20"];
        Ib[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
        Ib[201] = ["Garland", "Perfect decoration for roofs"];
        Ib[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
        Ib[110] = ["Berry", "Berry tasty!", "Food: 10"];
        Ib[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        Ib[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
        Ib[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        Ib[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
        Ib[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        Ib[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
        Ib[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
        Ib[194] = ["Thorn bush", "It stings!"];
        Ib[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
        Ib[142] = ["Ice", "Useful for making cakes and water"];
        Ib[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
        Ib[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
        Ib[2] = ["Rabbit Fur", "That rabbit was so cute..."];
        Ib[178] = ["Pure Fur", "You're a bread factory"];
        Ib[179] = ["Dark Fur", "You get ready to do something wrong"];
        Ib[146] = ["Winter Fur", "These animals just wanted a hug..."];
        Ib[139] = ["Scales", "It smells like fish!"];
        Ib[129] = ["Kraken Skin", "Weren't you too scared?"];
        Ib[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
        Ib[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
        Ib[114] = ["Workbench", "Very useful to craft all kinds of objects"];
        Ib[161] = ["Cord", "Used in crafting Hats and Bag"];
        Ib[147] = ["Diamond Cord", "Used in crafting Special Hats"];
        Ib[167] = ["Chest", "Allows you to store items", "Durability: 500"];
        Ib[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
        Ib[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
        Ib[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
        Ib[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
        Ib[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
        Ib[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
        Ib[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
        Ib[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
        Ib[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
        Ib[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
        Ib[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
        Ib[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
        Ib[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
        Ib[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
        Ib[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
        Ib[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
        Ib[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
        Ib[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
        Ib[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
        Ib[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
        Ib[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
        Ib[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
        Ib[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
        Ib[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
        Ib[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
        Ib[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
        Ib[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
        Ib[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
        Ib[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
        Ib[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
        Ib[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
        Ib[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
        Ib[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
        Ib[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
        Ib[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
        Ib[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
        Ib[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
        Ib[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
        Ib[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
        Ib[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
        Ib[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
        Ib[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
        Ib[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        Ib[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
        Ib[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        Ib[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
        Ib[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
        Ib[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
        Ib[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
        Ib[175] = ["Green Gemstone", "You didn't cheat, promise?"];
        Ib[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
        Ib[177] = ["Blue Gemstone", "For too kind people"];
        Ib[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
        Ib[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
        Ib[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
        Ib[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
        Ib[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
        Ib[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
        Ib[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
        Ib[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
        Ib[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
        Ib[29] = ["Bag", "More space for your items!"];
        Ib[120] = ["Paper", "Used in book-crafting"];
        Ib[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
        Ib[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
        Ib[148] = ["Lock", "Allow you to lock your chest"];
        Ib[158] = ["Lock-pick", "Allows you to unlock one chest"];
        Ib[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
        Ib[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
        Ib[183] = ["Sign", "Leave a message to others", "Durability: 200"];
        Ib[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
        Ib[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
        Ib[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
        Ib[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
        Ib[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
        Ib[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
        Ib[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
        Ib[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
        Ib[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
        Ib[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
        Ib[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
        Ib[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
        Ib[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
        Ib[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
        Ib[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
        Ib[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
        Ib[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
        Ib[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
        Ib[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
        Ib[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
        Ib[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
        Ib[300] = "You cannot join this server";
        Ib[301] = "Kicked: ";
        Ib[302] = "Your key is already used by someone else";
        Ib[303] = "Your key is wrong";
        Ib[304] = "You have an old version, you need to clear your cache";
        Ib[338] = "Your client version is too recent for this server. The server is being updated";
        Ib[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
        Ib[305] = "There are no more new resources";
        Ib[306] = "You survived 1 day";
        Ib[307] = "You survived ";
        Ib[308] = " days";
        Ib[309] = "You are dead ;-;";
        Ib[310] = "Server cannot find spawn location! Spam the play button!";
        Ib[311] = "Server is full! Spam the play button!";
        Ib[312] = "Resource is empty";
        Ib[313] = "Inventory is full (right-click to empty items)";
        Ib[314] = " is dead";
        Ib[315] = "This is not the right tool";
        Ib[316] = "You joined a team";
        Ib[317] = "You are dead";
        Ib[318] = " joined the team";
        Ib[319] = "Your team was destroyed";
        Ib[320] = "You left the team";
        Ib[321] = " left the team";
        Ib[322] = "Someone stole your token :>";
        Ib[323] = "Choose a server";
        Ib[324] = "players";
        Ib[325] = "total players";
        Ib[326] = "players on this mode";
        Ib[327] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Nickname";
        Dt[0] = ["You were killed for no reason"];
        Dt[1] = ["You starved to death, as the name of the game implies"];
        Dt[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
        Dt[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
        Dt[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
        Dt[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
        Dt[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
        Dt[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
        Dt[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
        Dt[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
        Dt[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
        Dt[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
        Dt[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
        Dt[13] = ["You died of thirst. Better drink your own piss."];
        Dt[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
        Dt[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
        Dt[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
        Dt[17] = ["Your skin's falling apart, the sun killed you."];
        Dt[18] = ["Garlic stored in your pockets boiled your brain."];
        Dt[19] = ["As a vampire, don't stand near the garlic cloves."];
        Dt[20] = ["You ate garlic as a vampire, what did you expect?"];
        Dt[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
        ⵠⵠΔⵠΔ = "Uuunnnggg";
        ⲆΔᐃᐃᐃⵠⲆ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
    }
    function pt(a, b, c, d, e) {
        Jj(sb, a, b, c, d, e);
        return (29341 + (Tb(gb[0], gb[1], gb[2]) ^ function (a, b) {
            gi(sb, a, b);
            const c = nb(gb[0], gb[1], gb[0], gb[1]);
            Rr(gb[0], gb[1], gb[0], gb[1], gb[0]);
            return c ^ 15588;
        }(gb[3], gb[4]))) % 65356;
    }
    const qt = 20;
    const rt = 0;
    const st = 11;
    const tt = 5;
    function ut(a, b) {
        const c = ~(a & 31838) & 31838 | ~(a & 31838) & a;
        const d = (b | 55562) & ~(b & 55562);
        const e = jt(c, d);
        jt(c, d);
        return ~(e & 13050) & 13050 | ~(e & 13050) & e;
    }
    const vt = 5;
    function wt() {
        Ib[184] = ["You feel a great power emanating from this orb"];
        Dt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Ib[328] = " BACK TO THE GAME";
        Ib[329] = " Share on Twitter";
        Ib[330] = " Share on Facebook";
        Ib[331] = "You can buy items on the shop in the next game with your points";
        Ib[332] = "points";
        Ib[333] = "Score";
        Ib[334] = "Kill";
        Ib[335] = "Days survived";
        Ib[336] = "Building method: Free. Press G to change";
        Ib[337] = "Building method: Grid. Press G to change";
        Ib[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        Ib[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        Ib[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        Ib[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        Ib[7] = ["Рука"];
        Ib[140] = ["Земля", "Грязно!"];
        Ib[126] = ["Песок", "Он в моих глазах!"];
        Ib[109] = ["Дерево", "Постоянно нужно больше!"];
        Ib[108] = ["Камень", "Твердый"];
        Ib[111] = ["Золото", "Будьте щедры, давайте его другим"];
        Ib[112] = ["Алмаз", "Что вы создадите с помощью него?"];
        Ib[121] = ["Аметист", "Он сиреневый, как Lapa"];
        Ib[131] = ["Мука", "Используется в готовке"];
        Ib[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
        Ib[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
        Ib[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
        Ib[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
        Ib[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
        Ib[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
        Ib[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
        Ib[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
        Ib[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
        Ib[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
        Ib[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
        Ib[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
        Ib[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
        Ib[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        Ib[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
        Ib[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        Ib[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
        Ib[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
        Ib[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
        Ib[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
        Ib[194] = ["Колючий Куст", "Это больно!"];
        Ib[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
        Ib[142] = ["Лёд", "Используется для изготовления тортов и воды"];
        Ib[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
        Ib[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
        Ib[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
        Ib[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
        Ib[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
        Ib[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
        Ib[139] = ["Чешуя", "Она пахнет рыбой!"];
        Ib[129] = ["Шкура Кракена", "Вы не испугались?"];
        Ib[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
        Ib[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
        Ib[114] = ["Верстак", "Необходим для создания многих предметов"];
        Ib[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
        Ib[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
        Ib[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
        Ib[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
        Ib[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
        Ib[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
        Ib[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
        Ib[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
        Ib[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
        Ib[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
        Ib[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
        Ib[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
        Ib[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
        Ib[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
        Ib[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
        Ib[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
        Ib[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
        Ib[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
        Ib[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
        Ib[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
        Ib[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
        Ib[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
        Ib[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
        Ib[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
        Ib[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
        Ib[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
        Ib[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
        Ib[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
        Ib[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
        Ib[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
        Ib[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
        Ib[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
        Ib[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
        Ib[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
        Ib[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
        Ib[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
        Ib[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
        Ib[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
        Ib[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
        Ib[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        Ib[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
        Ib[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
        Ib[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
        Ib[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        Ib[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        Ib[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        Ib[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
        Ib[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
        Ib[185] = ["Шар Дракона", "Даётся за квест"];
        Ib[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
        Ib[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
        Ib[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
        Ib[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
        Ib[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
        Ib[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
        Ib[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
        Ib[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
        Ib[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
        Ib[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
        Ib[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
        Ib[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
        Ib[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
        Ib[29] = ["Рюкзак", "Больше места для ваших предметов!"];
        Ib[120] = ["Бумага", "Используется при создании книги"];
        Ib[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
        Ib[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
        Ib[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
        Ib[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
        Ib[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
        Ib[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
        Ib[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
        Ib[190] = ["Крыша", "Немного скрывает вас и согревает!"];
        Ib[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
        Ib[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
        Ib[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
        Ib[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
        Ib[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
        Ib[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
        Ib[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
        Ib[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
        Ib[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
        Ib[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
        Ib[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
        Ib[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
        Ib[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
        Ib[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
        Ib[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
        Ib[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
        Ib[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
        Ib[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
        Ib[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
        Ib[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
        Ib[300] = "Вы не можете зайти на этот сервер";
        Ib[301] = "Выгнаны: ";
        Ib[302] = "Ваш ключ уже используется кем-то";
        Ib[303] = "Ваш ключ неправильный";
        Ib[304] = "У вас старая версия, вам нужно очистить кеш";
        Ib[305] = "Ресурсов больше нет";
        Ib[306] = "Вы выжили 1 день";
        Ib[307] = "Вы выжили ";
        Ib[308] = " дней";
        Ib[309] = "Вы умерли ;-;";
        Ib[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
        Ib[311] = "Сервер заполнен! Спамьте кнопку играть!";
        Ib[312] = "Ресурсы закончились";
        Ib[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
        Ib[314] = " умер";
        Ib[315] = "Это не тот инструмент";
        Ib[316] = "Вы вошли в команду";
        Ib[317] = "Вы умерли";
        Ib[318] = " вошёл в команду";
        Ib[319] = "Ваша команда была разрушена";
        Ib[320] = "Вы покинули команду";
        Ib[321] = " покинул команду";
        Ib[322] = "Кто-то использует ваш токен :>";
        Ib[323] = "Выберите сервер";
        Ib[324] = "игроков";
        Ib[325] = "игроков всего";
        Ib[326] = "игроков в этом режиме";
        Ib[327] = "Скоро...";
        document.getElementById("nickname_input").placeholder = "Имя";
        Dt[0] = ["Вы были убиты без причины"];
        Dt[1] = ["Вы умерли от голода, как название игры подразумевает это"];
        Dt[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
        Dt[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
        Dt[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
        Dt[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
        Dt[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
        Dt[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
        Dt[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
        Dt[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
        Dt[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
        Dt[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
        Dt[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
        Dt[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
        Dt[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
        Dt[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
        Dt[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
        Dt[17] = ["Твоя кожа разваливается, солнце убило тебя"];
        Dt[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
        Dt[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
        Dt[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
        Dt[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
        ⵠⵠΔⵠΔ = "Uuunnnggg";
        ⲆΔᐃᐃᐃⵠⲆ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
    }
    function xt(b, c, d, e) {
        const f = (24 << (b >> 8 & 255)) + (0 << (b >> 16 & 255)) + (16 << (b >> 24 & 255)) + (8 << (b & 255));
        const g = (8 << (c >> 8 & 255)) + (24 << (c >> 16 & 255)) + (16 << (c >> 24 & 255)) + (0 << (c & 255));
        const a = ~(d & 36528) & (d | 36528);
        const i = ~(e & 27035) & (e | 27035);
        const j = yx(f, g, a, i, f, g);
        const h = Hx(a, i, f, g, a, i);
        return (24 << ((j ^ h) >> 16 & 255)) + (16 << ((j ^ h) >> 24 & 255)) + (8 << ((j ^ h) >> 8 & 255)) + (0 << ((j ^ h) & 255));
    }
    const yt = 8;
    const zt = 9;
    const At = 7;
    const eb = 5;
    function ib() {
        Ib[184] = ["You feel a great power emanating from this orb"];
        Dt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Ib[328] = " BACK TO THE GAME";
        Ib[329] = " Share on Twitter";
        Ib[330] = " Share on Facebook";
        Ib[331] = "You can buy items on the shop in the next game with your points";
        Ib[332] = "points";
        Ib[333] = "Score";
        Ib[334] = "Kill";
        Ib[335] = "Days survived";
        Ib[336] = "Building method: Free. Press G to change";
        Ib[337] = "Building method: Grid. Press G to change";
        Ib[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        Ib[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        Ib[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        Ib[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        Ib[7] = ["mão"];
        Ib[140] = ["terra", "está sujo!"];
        Ib[126] = ["areia", "entrou nos meus olhos!"];
        Ib[109] = ["madeira", "você não pode pegar o suficiente disso!"];
        Ib[108] = ["pedra", "também chamado rocha"];
        Ib[111] = ["ouro", "seja generoso, dê para outros"];
        Ib[112] = ["diamante", "o que você irá fazer com isso?"];
        Ib[121] = ["ametista", "é mauve como lapa"];
        Ib[131] = ["farinha", "usada na cozinha"];
        Ib[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
        Ib[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
        Ib[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
        Ib[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
        Ib[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
        Ib[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
        Ib[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
        Ib[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
        Ib[200] = ["doces", "apenas para crianças!", "comida: 100"];
        Ib[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
        Ib[201] = ["pisca-pisca", "decoração perfeita de telhado"];
        Ib[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
        Ib[110] = ["berry", "Berry saborosa!", "comida: 10"];
        Ib[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
        Ib[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
        Ib[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
        Ib[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
        Ib[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
        Ib[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
        Ib[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
        Ib[194] = ["mato de espinhos", "pica!"];
        Ib[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
        Ib[142] = ["gelo", "útil para fazer bolo e água"];
        Ib[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
        Ib[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
        Ib[2] = ["pele de coelho", "o coelho era tão fofo..."];
        Ib[178] = ["pele pura", "você é uma fábrica de pão"];
        Ib[179] = ["pele negra", "você está pronto para fazer algo errado"];
        Ib[146] = ["pele de inverno", "ele só queria um abraço"];
        Ib[139] = ["escala", "é pequeno como peixe!"];
        Ib[129] = ["pele do kraken", "você não está com medo?"];
        Ib[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
        Ib[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
        Ib[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
        Ib[161] = ["linha", "usada para fazer chapéus e mochila"];
        Ib[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
        Ib[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
        Ib[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
        Ib[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
        Ib[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
        Ib[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
        Ib[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
        Ib[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
        Ib[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
        Ib[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
        Ib[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
        Ib[_r.ⵠΔⲆᐃΔᐃⲆⲆΔ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
        Ib[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
        Ib[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
        Ib[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
        Ib[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
        Ib[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
        Ib[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
        Ib[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
        Ib[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
        Ib[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
        Ib[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
        Ib[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
        Ib[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
        Ib[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
        Ib[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
        Ib[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
        Ib[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
        Ib[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
        Ib[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
        Ib[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
        Ib[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
        Ib[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
        Ib[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
        Ib[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
        Ib[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
        Ib[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
        Ib[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
        Ib[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
        Ib[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
        Ib[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
        Ib[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
        Ib[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
        Ib[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
        Ib[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
        Ib[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
        Ib[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
        Ib[185] = ["esfera do dragão", "dado na questt"];
        Ib[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
        Ib[175] = ["pedra verde", "você não vai trapacear, promete?"];
        Ib[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
        Ib[177] = ["pedra azul", "para pessoas muito gentis"];
        Ib[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
        Ib[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
        Ib[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
        Ib[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
        Ib[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
        Ib[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
        Ib[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
        Ib[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
        Ib[49] = ["regador", "permite regar as plantas", "dano: 1"];
        Ib[29] = ["mochila", "mais espaço para seus itens!"];
        Ib[120] = ["papel", "usado para fazer o livro"];
        Ib[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
        Ib[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
        Ib[148] = ["fechadura", "permite você trancar seu baú"];
        Ib[158] = ["chave", "permite destrancar um baú"];
        Ib[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
        Ib[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
        Ib[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
        Ib[190] = ["telhado", "esconde você um pouco e te esquenta!"];
        Ib[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
        Ib[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
        Ib[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
        Ib[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
        Ib[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
        Ib[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
        Ib[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
        Ib[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
        Ib[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
        Ib[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
        Ib[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
        Ib[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
        Ib[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
        Ib[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
        Ib[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
        Ib[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
        Ib[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
        Ib[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
        Ib[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
        Ib[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
        Ib[300] = "você não pode entrar no servidor";
        Ib[301] = "kickado: ";
        Ib[302] = "sua chave está em uso por outra pessoa";
        Ib[303] = "sua chave está errada";
        Ib[304] = "você tem uma versão velha, limpe seu cache";
        Ib[305] = "não tem mais recursos";
        Ib[306] = "você sobreviveu 1 dia";
        Ib[307] = "você sobreviveu ";
        Ib[308] = " dias";
        Ib[309] = "você está morto ;-;";
        Ib[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
        Ib[311] = "servidor está cheio! spam o botão de play!";
        Ib[312] = "não tem recursos";
        Ib[313] = "inventário está cheio (botão direito para deletar itens)";
        Ib[314] = " está morto";
        Ib[315] = "essa não é a ferramenta certa";
        Ib[316] = "você entrou no time";
        Ib[317] = "você está morto";
        Ib[318] = "entrou no time";
        Ib[319] = "seu time foi destruido";
        Ib[320] = "você saiu do time";
        Ib[321] = " saiu do time";
        Ib[322] = "alguém roubou sua ficha :>";
        Ib[323] = "escolha um servidor";
        Ib[324] = "jogadores";
        Ib[325] = "jogadores totais";
        Ib[326] = "jogadores nesse modo";
        Ib[327] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Apelido";
        Dt[0] = ["você morreu sem motivo"];
        Dt[1] = ["você morreu de fome, como o jogo diz"];
        Dt[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
        Dt[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
        Dt[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
        Dt[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
        Dt[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
        Dt[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
        Dt[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
        Dt[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
        Dt[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
        Dt[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
        Dt[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
        Dt[13] = ["você morreu de sede. melhor beber sua própria urina."];
        Dt[14] = ["você sabia que você morre afogado? agora você sabe."];
        Dt[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
        Dt[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
        Dt[17] = ["sua pele caindo aos pedaços, o sol te matou."];
        Dt[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
        Dt[19] = ["como vampiro, não chegue perto do alho."];
        Dt[20] = ["você comeu alho como vampiro, o que você esperava?"];
        Dt[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
        ⵠⵠΔⵠΔ = "Uuunnnggg";
        ⲆΔᐃᐃᐃⵠⲆ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
    }
    const tb = 15;
    function nb(a, b, c, d) {
        bk(sb, a, b, c, d);
        return ((242 + ((64325 + ((~(gb[0] & 35586) & gb[0] | ~(gb[0] & 35586) & 35586) ^ gb[2])) % 65406 ^ gb[3])) * 8121 + 28411) % 134456;
    }
    function ob() {
        Ib[184] = ["You feel a great power emanating from this orb"];
        Dt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Ib[328] = " BACK TO THE GAME";
        Ib[329] = " Share on Twitter";
        Ib[330] = " Share on Facebook";
        Ib[331] = "You can buy items on the shop in the next game with your points";
        Ib[332] = "points";
        Ib[333] = "Score";
        Ib[334] = "Kill";
        Ib[335] = "Days survived";
        Ib[336] = "Building method: Free. Press G to change";
        Ib[337] = "Building method: Grid. Press G to change";
        Ib[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        Ib[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        Ib[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        Ib[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        Ib[7] = ["Mano"];
        Ib[140] = ["Tierra", "¡Tan limpia como mis manos!"];
        Ib[126] = ["Arena", "¡Tengo arena en mis ojos!"];
        Ib[109] = ["Madera", "¡Nunca hay suficiente!"];
        Ib[108] = ["Piedra", "También llamada roca."];
        Ib[111] = ["Oro", "Sé generoso, compártelo con los otros"];
        Ib[112] = ["Diamante", "¿Que vas a hacer con él?"];
        Ib[121] = ["Amatista", "Es Mauve como Lapa"];
        Ib[131] = ["Harina", "Usada para cocinar."];
        Ib[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
        Ib[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
        Ib[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
        Ib[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
        Ib[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
        Ib[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
        Ib[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
        Ib[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
        Ib[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
        Ib[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
        Ib[201] = ["Guirnalda", "Perfecta para decorar el techo"];
        Ib[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        Ib[110] = ["Baya", "No es venenosa.", "Comida: 10"];
        Ib[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        Ib[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
        Ib[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        Ib[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
        Ib[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
        Ib[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
        Ib[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
        Ib[194] = ["Planta de Espinas", "¡Te daña!"];
        Ib[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
        Ib[142] = ["Hielo", "Bueno para hacer tartas y agua"];
        Ib[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
        Ib[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
        Ib[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
        Ib[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
        Ib[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
        Ib[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
        Ib[139] = ["Escamas", "¡Huele a pescado!"];
        Ib[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
        Ib[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
        Ib[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
        Ib[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
        Ib[161] = ["Hilo", "Usado para craftear ropa y mochila"];
        Ib[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
        Ib[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
        Ib[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
        Ib[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
        Ib[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
        Ib[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
        Ib[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
        Ib[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
        Ib[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
        Ib[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
        Ib[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
        Ib[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
        Ib[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
        Ib[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
        Ib[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
        Ib[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
        Ib[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
        Ib[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
        Ib[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
        Ib[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
        Ib[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
        Ib[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
        Ib[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
        Ib[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
        Ib[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
        Ib[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
        Ib[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
        Ib[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
        Ib[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
        Ib[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
        Ib[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
        Ib[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
        Ib[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
        Ib[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
        Ib[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
        Ib[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
        Ib[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
        Ib[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
        Ib[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
        Ib[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
        Ib[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
        Ib[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
        Ib[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
        Ib[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
        Ib[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
        Ib[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
        Ib[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
        Ib[185] = ["Esfera del Dragón", "Dada en la misión"];
        Ib[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
        Ib[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
        Ib[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
        Ib[177] = ["Gema Azul", "Para gente muy amable"];
        Ib[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
        Ib[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
        Ib[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
        Ib[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
        Ib[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
        Ib[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
        Ib[128] = ["Botella Vacia", "La puedes llenar de agua"];
        Ib[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
        Ib[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
        Ib[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
        Ib[120] = ["Hoja", "Usada para hacer un libro"];
        Ib[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
        Ib[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
        Ib[148] = ["Cerradura", "Te permite cerrar tu cofre"];
        Ib[158] = ["Llave", "Te permite abrir un cofre cerrado"];
        Ib[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
        Ib[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
        Ib[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
        Ib[190] = ["Techo", "Te esconde un poco y te protege del frío"];
        Ib[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
        Ib[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
        Ib[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
        Ib[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
        Ib[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
        Ib[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
        Ib[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
        Ib[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
        Ib[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
        Ib[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
        Ib[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
        Ib[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
        Ib[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
        Ib[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
        Ib[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
        Ib[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
        Ib[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
        Ib[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        Ib[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        Ib[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
        Ib[300] = "No puedes unirte a este servidor";
        Ib[301] = "Expulsado: ";
        Ib[302] = "Tu llave ya está usada";
        Ib[303] = "Tu llave está mal";
        Ib[304] = "Tienes una versión antigua, limpia tu cache";
        Ib[305] = "No hay mas recursos";
        Ib[306] = "Has sobrevivido 1 día";
        Ib[307] = "Has sobrevivido ";
        Ib[308] = " días";
        Ib[309] = "Estás muerto ;-;";
        Ib[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
        Ib[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
        Ib[312] = "Recurso vacio";
        Ib[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
        Ib[314] = " está muerto";
        Ib[315] = "Esta no es la herramienta correcta";
        Ib[316] = "Te has unido a un equipo";
        Ib[317] = "Estás muerto";
        Ib[318] = " se unió al equipo";
        Ib[319] = "Tu equipo ha sido destruido";
        Ib[320] = "Has dejado el equipo";
        Ib[321] = " dejo el equipo ";
        Ib[322] = "Alguien te robó tu token :>";
        Ib[323] = "Elige un servidor";
        Ib[324] = "jugadores";
        Ib[325] = "total de jugadores";
        Ib[326] = "Jugadores en este modo de juego";
        Ib[327] = "Próximamente...";
        document.getElementById("nickname_input").placeholder = "Apodo";
        Dt[0] = ["Has muerto por ninguna razón"];
        Dt[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
        Dt[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
        Dt[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
        Dt[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
        Dt[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
        Dt[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
        Dt[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
        Dt[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
        Dt[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
        Dt[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
        Dt[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
        Dt[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
        Dt[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
        Dt[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
        Dt[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
        Dt[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
        Dt[17] = ["Tu piel se cayó, el sol te quemó."];
        Dt[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
        Dt[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
        Dt[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
        Dt[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
        ⵠⵠΔⵠΔ = "Uuunnnggg";
        ⲆΔᐃᐃᐃⵠⲆ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
    }
    function ab() {
        Ib[184] = ["You feel a great power emanating from this orb"];
        Dt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Ib[328] = " BACK TO THE GAME";
        Ib[329] = " Share on Twitter";
        Ib[330] = " Share on Facebook";
        Ib[331] = "You can buy items on the shop in the next game with your points";
        Ib[332] = "points";
        Ib[333] = "Score";
        Ib[334] = "Kill";
        Ib[335] = "Days survived";
        Ib[336] = "Building method: Free. Press G to change";
        Ib[337] = "Building method: Grid. Press G to change";
        Ib[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        Ib[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        Ib[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        Ib[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        Ib[7] = ["Hand"];
        Ib[140] = ["Boden", "Dreckig!"];
        Ib[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
        Ib[109] = ["Holz", "Du kannst niemals zu viel haben!"];
        Ib[108] = ["Stein", "Auch Fels gennant"];
        Ib[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
        Ib[112] = ["Diamant", "Was wirst du daraus machen?"];
        Ib[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
        Ib[131] = ["Mehl", "wird fürs Backen gebraucht"];
        Ib[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
        Ib[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
        Ib[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
        Ib[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
        Ib[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
        Ib[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
        Ib[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
        Ib[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
        Ib[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
        Ib[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
        Ib[201] = ["Girlande", "perfekter Schmuck für Dächer"];
        Ib[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        Ib[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
        Ib[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        Ib[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
        Ib[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        Ib[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
        Ib[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        Ib[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
        Ib[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
        Ib[194] = ["Dornenbusch", "Es sticht!"];
        Ib[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
        Ib[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
        Ib[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
        Ib[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
        Ib[2] = ["Hasenfell", "Der Hase war so süß..."];
        Ib[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
        Ib[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
        Ib[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
        Ib[139] = ["Schuppen", "Es riecht wie Fisch!"];
        Ib[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
        Ib[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
        Ib[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
        Ib[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
        Ib[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
        Ib[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
        Ib[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
        Ib[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
        Ib[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
        Ib[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
        Ib[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
        Ib[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
        Ib[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
        Ib[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
        Ib[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
        Ib[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
        Ib[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
        Ib[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
        Ib[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
        Ib[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
        Ib[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
        Ib[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
        Ib[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
        Ib[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
        Ib[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
        Ib[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
        Ib[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
        Ib[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
        Ib[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
        Ib[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
        Ib[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
        Ib[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
        Ib[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
        Ib[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
        Ib[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
        Ib[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
        Ib[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
        Ib[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
        Ib[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
        Ib[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
        Ib[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
        Ib[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
        Ib[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
        Ib[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
        Ib[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
        Ib[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
        Ib[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
        Ib[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
        Ib[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
        Ib[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
        Ib[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
        Ib[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        Ib[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
        Ib[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
        Ib[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
        Ib[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
        Ib[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
        Ib[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        Ib[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        Ib[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        Ib[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
        Ib[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
        Ib[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
        Ib[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
        Ib[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
        Ib[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
        Ib[29] = ["Rucksack", "Mehr Platz im Inventar!"];
        Ib[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
        Ib[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
        Ib[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
        Ib[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
        Ib[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
        Ib[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
        Ib[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
        Ib[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
        Ib[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
        Ib[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
        Ib[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
        Ib[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
        Ib[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
        Ib[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
        Ib[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
        Ib[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
        Ib[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
        Ib[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
        Ib[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
        Ib[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
        Ib[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
        Ib[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
        Ib[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
        Ib[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
        Ib[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
        Ib[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
        Ib[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
        Ib[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
        Ib[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
        Ib[300] = "Du kannst diesem Server nicht beitreten";
        Ib[301] = "Gekickt: ";
        Ib[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
        Ib[303] = "Dein Schlüssel ist falsch";
        Ib[304] = "Deine Version ist veraltet, säubere dein Cache";
        Ib[305] = "Es gibt keine neuen Ressourcen";
        Ib[306] = "Du hast einen Tag überlebt";
        Ib[307] = "Du hast überlebt ";
        Ib[308] = " Tage";
        Ib[309] = "Du bist gestorben ;-;";
        Ib[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
        Ib[311] = "Server ist voll! Drücke immer wieder auf spielen!";
        Ib[312] = "Ressource ist leer";
        Ib[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
        Ib[314] = " ist gestorben";
        Ib[315] = "Das ist nicht das richtige Werkzeug";
        Ib[316] = "Du bist einem Team beigetreten";
        Ib[317] = "Du bist gestorben";
        Ib[318] = " ist dem Team beigetreten";
        Ib[319] = "Dein Team wurde zerstört";
        Ib[320] = "Du hast das Team verlassen";
        Ib[321] = " hat das Team verlassen";
        Ib[322] = "Jemand hat dein Token gestohlen :>";
        Ib[323] = "Suche dir ein Server aus";
        Ib[324] = "Spieler";
        Ib[325] = "alle Spieler";
        Ib[326] = "Spieler in diesem Modus";
        Ib[327] = "Bald verfügbar...";
        document.getElementById("nickname_input").placeholder = "Spitzname";
        Dt[0] = ["Du wurdest ohne Grund getötet"];
        Dt[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
        Dt[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
        Dt[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
        Dt[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
        Dt[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
        Dt[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
        Dt[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
        Dt[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
        Dt[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
        Dt[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
        Dt[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
        Dt[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
        Dt[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
        Dt[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
        Dt[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
        Dt[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
        Dt[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
        Dt[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
        Dt[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
        Dt[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
        Dt[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
        ⵠⵠΔⵠΔ = "Uuunnnggg";
        ⲆΔᐃᐃᐃⵠⲆ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
    }
    function rb(a, b) {
        const c = a ^ 57405;
        const d = ~(b & 3222) & b | ~(b & 3222) & 3222;
        const e = Wn(c, d, c, d);
        Wn(c, d, c, d);
        return ~(e & 39995) & e | ~(e & 39995) & 39995;
    }
    let sb;
    const Bt = 256;
    const lb = 2;
    let gb;
    const Ct = 11;
    const bb = 13;
    const db = 8;
    const vb = ck;
    const cb = 10;
    const mb = 17;

    /*
    *****************
    *SCRIPT VARIABLE*
    *****************
*/

    (function () {
        function e(t, r, n) {
            function i(a, s) {
                if (!r[a]) {
                    if (!t[a]) {
                        var u = "function" == typeof require && require;
                        if (!s && u) return u(a, !0);
                        if (o) return o(a, !0);
                        var d = Error("Cannot find module '" + a + "'");
                        throw d.code = "MODULE_NOT_FOUND", d
                    }
                    var m = r[a] = {
                        exports: {}
                    };
                    t[a][0].call(m.exports, function (e) {
                        return i(t[a][1][e] || e)
                    }, m, m.exports, e, t, r, n)
                }
                return r[a].exports
            }
            for (var o = "function" == typeof require && require, a = 0; a < n.length; a++) i(n[a]);
            return i
        }
        return e
    })()({
        1: [function (e, t, r) {
            let n = e("worker-timers");
            window.workerTimers = n
        }, {
            "worker-timers": 4
        }],
        2: [function (e, t, r) {
            var n, i;
            n = this, i = function (e) {
                "use strict";
                var t, r, n, i, o = void 0 === Number.MAX_SAFE_INTEGER ? 9007199254740991 : Number.MAX_SAFE_INTEGER,
                    a = new WeakMap,
                    s = (r = (t = a, function (e, r) {
                        return t.set(e, r), r
                    }), n = a, function (e) {
                        var t = n.get(e),
                            i = void 0 === t ? e.size : t < 1073741824 ? t + 1 : 0;
                        if (!e.has(i)) return r(e, i);
                        if (e.size < 536870912) {
                            for (; e.has(i);) i = Math.floor(1073741824 * Math.random());
                            return r(e, i)
                        }
                        if (e.size > o) throw Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
                        for (; e.has(i);) i = Math.floor(Math.random() * o);
                        return r(e, i)
                    }),
                    u = (i = s, function (e) {
                        var t = i(e);
                        return e.add(t), t
                    });
                e.addUniqueNumber = u, e.generateUniqueNumber = s
            }, "object" == typeof r && void 0 !== t ? i(r) : "function" == typeof define && define.amd ? define(["exports"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).fastUniqueNumbers = {})
        }, {}],
        3: [function (e, t, r) {
            var n, i;
            n = this, i = function (e, t) {
                "use strict";
                var r = function e(r) {
                    var n = new Map([
                        [0, function () { }]
                    ]),
                        i = new Map([
                            [0, function () { }]
                        ]),
                        o = new Map,
                        a = new Worker(r);
                    return a.addEventListener("message", function (e) {
                        var t, r = e.data;
                        if (void 0 !== (t = r).method && "call" === t.method) {
                            var a = r.params,
                                s = a.timerId,
                                u = a.timerType;
                            if ("interval" === u) {
                                var d = n.get(s);
                                if ("number" == typeof d) {
                                    var m = o.get(d);
                                    if (void 0 === m || m.timerId !== s || m.timerType !== u) throw Error("The timer is in an undefined state.")
                                } else if (void 0 !== d) d();
                                else throw Error("The timer is in an undefined state.")
                            } else if ("timeout" === u) {
                                var f = i.get(s);
                                if ("number" == typeof f) {
                                    var c = o.get(f);
                                    if (void 0 === c || c.timerId !== s || c.timerType !== u) throw Error("The timer is in an undefined state.")
                                } else if (void 0 !== f) f(), i["delete"](s);
                                else throw Error("The timer is in an undefined state.")
                            }
                        } else if (null === (l = r).error && "number" == typeof l.id) {
                            var l, v = r.id,
                                p = o.get(v);
                            if (void 0 === p) throw Error("The timer is in an undefined state.");
                            var h = p.timerId,
                                w = p.timerType;
                            o["delete"](v), "interval" === w ? n["delete"](h) : i["delete"](h)
                        } else throw Error(r.error.message)
                    }), {
                        clearInterval: function e(r) {
                            var i = t.generateUniqueNumber(o);
                            o.set(i, {
                                timerId: r,
                                timerType: "interval"
                            }), n.set(r, i), a.postMessage({
                                id: i,
                                method: "clear",
                                params: {
                                    timerId: r,
                                    timerType: "interval"
                                }
                            })
                        },
                        clearTimeout: function e(r) {
                            var n = t.generateUniqueNumber(o);
                            o.set(n, {
                                timerId: r,
                                timerType: "timeout"
                            }), i.set(r, n), a.postMessage({
                                id: n,
                                method: "clear",
                                params: {
                                    timerId: r,
                                    timerType: "timeout"
                                }
                            })
                        },
                        setInterval: function e(r, i) {
                            var o = t.generateUniqueNumber(n);
                            return n.set(o, function () {
                                r(), "function" == typeof n.get(o) && a.postMessage({
                                    id: null,
                                    method: "set",
                                    params: {
                                        delay: i,
                                        now: performance.now(),
                                        timerId: o,
                                        timerType: "interval"
                                    }
                                })
                            }), a.postMessage({
                                id: null,
                                method: "set",
                                params: {
                                    delay: i,
                                    now: performance.now(),
                                    timerId: o,
                                    timerType: "interval"
                                }
                            }), o
                        },
                        setTimeout: function e(r, n) {
                            var o = t.generateUniqueNumber(i);
                            return i.set(o, r), a.postMessage({
                                id: null,
                                method: "set",
                                params: {
                                    delay: n,
                                    now: performance.now(),
                                    timerId: o,
                                    timerType: "timeout"
                                }
                            }), o
                        }
                    }
                };
                e.load = r
            }, "object" == typeof r && void 0 !== t ? i(r, e("fast-unique-numbers")) : "function" == typeof define && define.amd ? define(["exports", "fast-unique-numbers"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimersBroker = {}, n.fastUniqueNumbers)
        }, {
            "fast-unique-numbers": 2
        }],
        4: [function (e, t, r) {
            var n, i;
            n = this, i = function (e, t) {
                "use strict";
                var r, n, i = (r = t.load, n = null, function () {
                    if (null !== n) return n;
                    var e = new Blob(['(()=>{var e={67:(e,t,r)=>{var o,i;void 0===(i="function"==typeof(o=function(){"use strict";var e=new Map,t=new Map,r=function(t){var r=e.get(t);if(void 0===r)throw new Error(\'There is no interval scheduled with the given id "\'.concat(t,\'".\'));clearTimeout(r),e.delete(t)},o=function(e){var r=t.get(e);if(void 0===r)throw new Error(\'There is no timeout scheduled with the given id "\'.concat(e,\'".\'));clearTimeout(r),t.delete(e)},i=function(e,t){var r,o=performance.now();return{expected:o+(r=e-Math.max(0,o-t)),remainingDelay:r}},n=function e(t,r,o,i){var n=performance.now();n>o?postMessage({id:null,method:"call",params:{timerId:r,timerType:i}}):t.set(r,setTimeout(e,o-n,t,r,o,i))},a=function(t,r,o){var a=i(t,o),s=a.expected,d=a.remainingDelay;e.set(r,setTimeout(n,d,e,r,s,"interval"))},s=function(e,r,o){var a=i(e,o),s=a.expected,d=a.remainingDelay;t.set(r,setTimeout(n,d,t,r,s,"timeout"))};addEventListener("message",(function(e){var t=e.data;try{if("clear"===t.method){var i=t.id,n=t.params,d=n.timerId,c=n.timerType;if("interval"===c)r(d),postMessage({error:null,id:i});else{if("timeout"!==c)throw new Error(\'The given type "\'.concat(c,\'" is not supported\'));o(d),postMessage({error:null,id:i})}}else{if("set"!==t.method)throw new Error(\'The given method "\'.concat(t.method,\'" is not supported\'));var u=t.params,l=u.delay,p=u.now,m=u.timerId,v=u.timerType;if("interval"===v)a(l,m,p);else{if("timeout"!==v)throw new Error(\'The given type "\'.concat(v,\'" is not supported\'));s(l,m,p)}}}catch(e){postMessage({error:{message:e.message},id:t.id,result:null})}}))})?o.call(t,r,t,e):o)||(e.exports=i)}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";r(67)})()})();'], {
                        type: "application/javascript; charset=utf-8"
                    }),
                        t = URL.createObjectURL(e);
                    return n = r(t), setTimeout(function () {
                        return URL.revokeObjectURL(t)
                    }), n
                }),
                    o = function e(t) {
                        return i().clearInterval(t)
                    },
                    a = function e(t) {
                        return i().clearTimeout(t)
                    },
                    s = function e(t, r) {
                        return i().setInterval(t, r)
                    },
                    u = function e(t, r) {
                        return i().setTimeout(t, r)
                    };
                e.clearInterval = o, e.clearTimeout = a, e.setInterval = s, e.setTimeout = u
            }, "object" == typeof r && void 0 !== t ? i(r, e("worker-timers-broker")) : "function" == typeof define && define.amd ? define(["exports", "worker-timers-broker"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimers = {}, n.workerTimersBroker)
        }, {
            "worker-timers-broker": 3
        }]
    }, {}, [1]);

    function calcAngle(p1, p2, type) {
        if (p1 && p2) {
            if (type) return Math.atan2(p2.r.y - p1.r.y, p2.r.x - p1.r.x);
            return Math.atan2(p2.y - p1.y, p2.x - p1.x)
        }
        return null
    }

    function dist2dSQRT(p1, p2) {
        if (p1 && p2) {
            return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2)
        }
        return null
    }

    let Settings = {
        AutoSpike: {
            e: false,
            k: "Space",
            m: true,
            p: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"]
        },
    };

    window.Utils = {
        initUI: () => {
            let gui = new guify({
                title: "pew",
                theme: {
                    name: "loux",
                    colors: {
                        panelBackground: "rgb(0,0,0)",
                        componentBackground: "rgb(3, 16, 34)",
                        componentForeground: "rgb(62, 125, 215)",
                        textPrimary: "rgb(0, 255, 255)",
                        textSecondary: "rgb(255,255,255)",
                        textHover: "rgb(43, 16, 159)"
                    },
                    font: {
                        fontFamily: "Baloo Paaji",
                        fontSize: "20px",
                        fontWeight: "1"
                    }
                },
                align: "right",
                width: 550,
                barMode: "none",
                panelMode: "none",
                opacity: .6,
                root: document.body,
                open: false
            });

            gui.Register({
                type: "folder",
                label: "AutoSpike",
                open: false
            });

            gui.Register([{
                type: "button",
                label: "Set AutoSpike Key",
                action: data => {
                    Utils.controls.setKeyBind("AutoSpike")
                }
            }, {
                type: "display",
                label: "AutoSpike Key:",
                object: Settings.AutoSpike,
                property: "k"
            }, {
                type: "checkbox",
                label: "AutoSpike 2",
                object: Settings.AutoSpike,
                property: "m",
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "1",
                object: Settings.AutoSpike.p,
                property: "0",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "2",
                object: Settings.AutoSpike.p,
                property: "1",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "3",
                object: Settings.AutoSpike.p,
                property: "2",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "4",
                object: Settings.AutoSpike.p,
                property: "3",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "5",
                object: Settings.AutoSpike.p,
                property: "4",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "6",
                object: Settings.AutoSpike.p,
                property: "5",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "7",
                object: Settings.AutoSpike.p,
                property: "6",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }], {
                folder: "AutoSpike"
            });
        },
        controls: null,
        controller: class {
            setKeyBind(callback) {
                Settings[callback].k = "Press any key";
                let click = 0;
                document.addEventListener("keydown", function abc(event) {
                    click++;
                    if (click >= 1) {
                        if (event.code == "Escape") {
                            Settings[callback].k = "NONE"
                        } else {
                            Settings[callback].k = event.code
                        }
                        document.removeEventListener("keydown", abc);
                        Utils.saveSettings()
                    }
                })
            }
        },
        saveSettings: () => {
            for (let HACK in Settings) {
                localStorage.setItem(HACK + "loux", JSON.stringify(Settings[HACK]))
            }
        },
        loadSettings: () => {
            for (let HACK in Settings) {
                let data = localStorage.getItem(HACK + "loux");
                if (data) Settings[HACK] = JSON.parse(data)
            }
        },
        LoadHack: () => {
            window.Utils.loadSettings();
            Settings.AutoSpike.e = false;
            window.Utils.controls = new window.Utils.controller;
            let script = document.createElement("script");
            script.onload = function () {
                window.Utils.initUI()
            };
            script.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js";
            document.body.appendChild(script);
            setTimeout(() => {
                let mainFlakes = document.getElementById("snowflakeContainer");
                if (mainFlakes) {
                    mainFlakes.nextElementSibling.remove();
                    mainFlakes.previousElementSibling.remove();
                    for (let i = 0; i < mainFlakes.childNodes.length; i++) {
                        mainFlakes.childNodes[i].remove()
                    }
                    mainFlakes.remove()
                }
            }, 1e4)
        }
    };

    function LouxInterval() {
        if (ΔⵠΔΔ.ᐃⲆΔΔ && ΔⵠΔΔ.ᐃⲆΔΔ.readyState === 1 && Qx && Qx.ⵠΔΔᐃⲆ) {
            let myPlayer = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
            if (myPlayer) {
                if (Settings.AutoSpike.e) {
                    var spikeid;
                    for (let i = 0, SpikeP = Settings.AutoSpike.p; i < SpikeP.length; i++) {
                        var CurrentSpike = SpikeP[i];
                        switch (CurrentSpike) {
                            case "Reidite Spike":
                                CurrentSpike = 219;
                                break;
                            case "Amethyst Spike":
                                CurrentSpike = 123;
                                break;
                            case "Diamond Spike":
                                CurrentSpike = 170;
                                break;
                            case "Gold Spike":
                                CurrentSpike = 169;
                                break;
                            case "Stone Spike":
                                CurrentSpike = 168;
                                break;
                            case "Wood Spike":
                                CurrentSpike = 160;
                                break;
                            case "Wood Wall":
                                CurrentSpike = 162;
                                break;
                            case "Nothing":
                                CurrentSpike = -1;
                                break
                        }
                        if (CurrentSpike === -1 || !Qx.ⲆⲆⵠΔ.ΔⲆᐃ[CurrentSpike]) continue;
                        spikeid = CurrentSpike;
                        break
                    }
                    if (spikeid) {
                        let PInumb = 2 * Math.PI;
                        let MYPLAYERANGLE = Math.floor((myPlayer.angle + PInumb) % PInumb * 255 / PInumb);
                        if (Settings.AutoSpike.m) {
                            for (let ang = 1; ang <= 15; ang++) {
                                ΔⵠΔΔ.ᐃⲆΔΔ.send(JSON.stringify([15, spikeid, (ang + MYPLAYERANGLE) % 255, 0]));
                                ΔⵠΔΔ.ᐃⲆΔΔ.send(JSON.stringify([15, spikeid, (MYPLAYERANGLE - ang + 255) % 255, 0]));
                            }
                        }
                        ΔⵠΔΔ.ᐃⲆΔΔ.send(JSON.stringify([15, spikeid, MYPLAYERANGLE, 0]))
                    }
                }
            }
        }
    }

    /*
    *********
    ***END***
    *********
    */

    ck = async function () {
        sb = kj(mi(13));
        gb = pk(sb);
        if (vb) {
            vb();
        }

        await window.gapi.load("auth2", Cy);

        let MainHackInterval;
        setTimeout(() => {
            MainHackInterval = workerTimers.setInterval(LouxInterval, 80);
        }, 7000);

        window.Utils.LoadHack();
    };
    const pb = 12;
    const Cb = 17;
    function Tb(a, b, c) {
        Kj(sb, a, b, c);
        const d = nb(gb[0], gb[1], gb[2], gb[0]);
        Mb(gb[1], gb[2]);
        return d ^ 30702;
    }
    const fb = 16;
    const zb = 11;
    function yb() {
        Ib[184] = ["You feel a great power emanating from this orb"];
        Dt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Ib[328] = " BACK TO THE GAME";
        Ib[329] = " Share on Twitter";
        Ib[330] = " Share on Facebook";
        Ib[331] = "You can buy items on the shop in the next game with your points";
        Ib[332] = "points";
        Ib[333] = "Score";
        Ib[334] = "Kill";
        Ib[335] = "Days survived";
        Ib[336] = "Building method: Free. Press G to change";
        Ib[337] = "Building method: Grid. Press G to change";
        Ib[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        Ib[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        Ib[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        Ib[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        Ib[7] = ["Ręka"];
        Ib[140] = ["Ziemia", "Brudna!"];
        Ib[126] = ["Piasek", "Mam go w oczach!"];
        Ib[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
        Ib[108] = ["Kamień", "Także nazywany skałą"];
        Ib[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
        Ib[112] = ["Diament", "Co z nim zrobisz?"];
        Ib[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
        Ib[131] = ["Mąka", "Używana w gotowaniu"];
        Ib[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
        Ib[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
        Ib[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
        Ib[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
        Ib[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
        Ib[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
        Ib[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
        Ib[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
        Ib[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
        Ib[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
        Ib[201] = ["Girlanda", "Idealna do dekorowania dachów"];
        Ib[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        Ib[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
        Ib[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        Ib[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
        Ib[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        Ib[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
        Ib[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        Ib[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
        Ib[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
        Ib[194] = ["Kolczasty krzew", "Kłuje!"];
        Ib[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
        Ib[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
        Ib[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
        Ib[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
        Ib[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
        Ib[178] = ["Skóra", "Jesteś fabryką chleba"];
        Ib[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
        Ib[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
        Ib[139] = ["Łuski", "Pachnie jak ryba!"];
        Ib[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
        Ib[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
        Ib[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
        Ib[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
        Ib[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
        Ib[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
        Ib[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
        Ib[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
        Ib[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
        Ib[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
        Ib[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        Ib[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        Ib[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
        Ib[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
        Ib[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
        Ib[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
        Ib[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
        Ib[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        Ib[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        Ib[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        Ib[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
        Ib[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
        Ib[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
        Ib[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
        Ib[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
        Ib[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
        Ib[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
        Ib[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
        Ib[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
        Ib[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
        Ib[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
        Ib[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        Ib[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        Ib[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        Ib[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
        Ib[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
        Ib[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
        Ib[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
        Ib[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
        Ib[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
        Ib[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
        Ib[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
        Ib[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
        Ib[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
        Ib[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
        Ib[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
        Ib[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
        Ib[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
        Ib[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
        Ib[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
        Ib[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
        Ib[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        Ib[185] = ["Smocza kula", "Zdobyta podczas zadania"];
        Ib[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
        Ib[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
        Ib[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
        Ib[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
        Ib[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        Ib[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        Ib[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        Ib[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
        Ib[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
        Ib[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
        Ib[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
        Ib[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
        Ib[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
        Ib[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
        Ib[120] = ["Papier", "Używany w tworzeniu książki"];
        Ib[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
        Ib[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
        Ib[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
        Ib[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
        Ib[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
        Ib[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
        Ib[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
        Ib[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
        Ib[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
        Ib[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
        Ib[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
        Ib[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
        Ib[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
        Ib[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
        Ib[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
        Ib[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
        Ib[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
        Ib[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
        Ib[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
        Ib[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
        Ib[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
        Ib[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
        Ib[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
        Ib[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
        Ib[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
        Ib[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        Ib[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        Ib[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
        Ib[300] = "Nie możesz dołączyć do tego serwera";
        Ib[301] = "Wyrzucony: ";
        Ib[302] = "Twój klucz jest aktualnie używany przez innego gracza";
        Ib[303] = "Twój klucz jest nieprawidłowy";
        Ib[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
        Ib[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
        Ib[306] = "Przeżyłeś 1 dzień";
        Ib[307] = "Przeżyłeś ";
        Ib[308] = " dni";
        Ib[309] = "Jesteś martwy ;-;";
        Ib[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
        Ib[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
        Ib[312] = "Źródło jest puste";
        Ib[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
        Ib[314] = " jest martwy";
        Ib[315] = "To nie jest właściwe narzędzie";
        Ib[316] = "Dołączyłeś do drużyny";
        Ib[317] = "Jesteś martwy";
        Ib[318] = " dołączył do drużyny";
        Ib[319] = "Twoja drużyna została zniszczona";
        Ib[320] = " Opuściłeś drużynę";
        Ib[321] = " opuścił drużynę";
        Ib[322] = "Ktoś ukradł twój żeton :>";
        Ib[323] = "Wybierz serwer";
        Ib[324] = "graczy";
        Ib[325] = "wszystkich graczy";
        Ib[326] = "graczy w tym trybie";
        Ib[327] = "Już wkrótce...";
        document.getElementById("nickname_input").placeholder = "Przydomek";
        Dt[0] = ["Zostałeś zabity bez powodu"];
        Dt[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
        Dt[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
        Dt[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
        Dt[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
        Dt[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
        Dt[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
        Dt[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
        Dt[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
        Dt[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
        Dt[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
        Dt[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
        Dt[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
        Dt[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
        Dt[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
        Dt[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
        Dt[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
        Dt[17] = ["Twoja skóra odpada, słońce cię zabija."];
        Dt[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
        Dt[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
        Dt[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
        Dt[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
        ⵠⵠΔⵠΔ = "Uuunnnggg";
        ⲆΔᐃᐃᐃⵠⲆ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
    }
    function wb(b, c) {
        const d = (2147483587 + (54479 + b) * 2147483629) % 2147483647;
        const e = ~(c & 51377) & 51377 | ~(c & 51377) & c;
        const f = Yn(d, e, d, e);
        const g = lt(d, e);
        return (0 << ((f ^ g) >> 16 & 255)) + (24 << ((f ^ g) >> 0 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (16 << ((f ^ g) >> 24 & 255));
    }
    function Pb(b, c, d, e, f, g) {
        const a = (2147483587 + (2797 + f) * 2147483629) % 2147483647;
        const i = ~(g & 14478) & (g | 14478);
        const j = function (b, c, d, e) {
            const f = ((2173 + b) * 214013 + 2531011) % 4294967296;
            const g = c ^ 58687;
            const a = d ^ 60565;
            const i = (2531011 + (11846 + e) * 214013) % 4294967296;
            const j = wb(f, g);
            px(a, i, f, g);
            return j ^ 16209;
        }(~(b & 25014) & (b | 25014), (0 << (c >> 24 & 255)) + (8 << (c & 255)) + (24 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)), ~(d & 52246) & (d | 52246), (51505 + e) % 65533);
        const h = rb(a, i);
        return (16 << ((j ^ h) >> 8 & 255)) + (8 << ((j ^ h) >> 24 & 255)) + (24 << ((j ^ h) >> 16 & 255)) + (0 << ((j ^ h) & 255));
    }
    const Ab = 7;
    function kb(b, c, d, e) {
        const f = (12454 + b) % 65475;
        const g = c ^ 39985;
        const a = (16 << (d >> 16 & 255)) + (24 << (d & 255)) + (0 << (d >> 24 & 255)) + (8 << (d >> 8 & 255));
        return ((62242 + (function (b, c, d, e, f) {
            const g = ~(b & 64435) & (b | 64435);
            const a = (c | 54840) & ~(c & 54840);
            const i = ~(d & 18036) & (d | 18036);
            const j = Pw(g, a, i, (e | 12777) & ~(e & 12777), (16 << (f >> 8 & 255)) + (0 << (f >> 16 & 255)) + (24 << (f & 255)) + (8 << (f >> 24 & 255)), g);
            Ub(a, i);
            return ~(j & 48563) & (j | 48563);
        }(f, g, a, ~(e & 63912) & (e | 63912), f) ^ Ub(g, a))) * 1664525 + 1013904223) % 4294967296;
    }
    const xb = 0;
    const Jb = 15;
    function Mb(a, b) {
        Wj(sb, a, b);
        return ((130 + (nb(gb[0], gb[1], gb[0], gb[1]) ^ nb(gb[0], gb[1], gb[0], gb[1]))) * 8121 + 28411) % 134456;
    }
    function Bb(b, c, d, e, f) {
        Xj(sb, b, c, d, e, f);
        const g = Yw(gb[0], gb[1], gb[2], gb[3]);
        Mb(gb[4], gb[0]);
        return g ^ 46945;
    }
    function Db() {
        Ib[184] = ["You feel a great power emanating from this orb"];
        Dt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Ib[328] = " RETOUR AU JEU";
        Ib[329] = " Partage sur Twitter";
        Ib[330] = " Partage sur Facebook";
        Ib[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
        Ib[332] = "points";
        Ib[333] = "Score";
        Ib[334] = "Tués";
        Ib[335] = "Jours survécus";
        Ib[336] = "Mode de construction: Libre. Appuie sur G pour changer";
        Ib[337] = "Mode de construction: Grille. Appuie sur G pour changer";
        Ib[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
        Ib[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
        Ib[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
        Ib[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quêtes";
        document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
        document.getElementById("constraintquest").innerHTML = " Contraintes";
        document.getElementById("claim_rewards").innerHTML = " Résultat";
        document.getElementById("rewardquest").innerHTML = " Récompenses";
        document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
        document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
        document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
        document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
        document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
        document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
        document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
        Ib[7] = ["Main"];
        Ib[140] = ["Terre", "C'est sale!"];
        Ib[126] = ["Sable", "J'en ai dans les yeux"];
        Ib[109] = ["Bois", "Tu n'en auras jamais trop!"];
        Ib[108] = ["Pierre", "Aussi appelée roche"];
        Ib[111] = ["Or", "Sois généreux, donne en aux autres"];
        Ib[112] = ["Diamant", "Comme tes yeux! wesh"];
        Ib[121] = ["Améthyste", "C'est Mauve comme Lapa"];
        Ib[131] = ["Farine", "Utile pour la cuisine"];
        Ib[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
        Ib[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
        Ib[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
        Ib[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
        Ib[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
        Ib[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
        Ib[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
        Ib[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
        Ib[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
        Ib[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
        Ib[201] = ["Guirlandes", "Utilisable sur les toits"];
        Ib[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
        Ib[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
        Ib[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
        Ib[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
        Ib[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
        Ib[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
        Ib[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
        Ib[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
        Ib[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
        Ib[194] = ["Ronces", "Ça pique!"];
        Ib[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
        Ib[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
        Ib[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
        Ib[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
        Ib[2] = ["Peau de lapin", "Vous êtes un monstre"];
        Ib[178] = ["Fourrure blanche", "Tu es une usine à pain"];
        Ib[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
        Ib[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
        Ib[139] = ["Écailles", "Ça sent le poisson!"];
        Ib[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
        Ib[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
        Ib[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
        Ib[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
        Ib[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
        Ib[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
        Ib[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
        Ib[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
        Ib[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
        Ib[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
        Ib[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
        Ib[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
        Ib[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
        Ib[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
        Ib[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
        Ib[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
        Ib[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
        Ib[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
        Ib[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
        Ib[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
        Ib[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
        Ib[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
        Ib[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
        Ib[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
        Ib[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
        Ib[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
        Ib[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
        Ib[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
        Ib[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
        Ib[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
        Ib[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
        Ib[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
        Ib[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
        Ib[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
        Ib[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
        Ib[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
        Ib[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
        Ib[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
        Ib[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
        Ib[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
        Ib[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Ib[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Ib[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Ib[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Ib[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Ib[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Ib[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
        Ib[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Ib[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Ib[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Ib[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
        Ib[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
        Ib[185] = ["Orbe du Dragon", "Donné en Quête"];
        Ib[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
        Ib[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
        Ib[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
        Ib[177] = ["Gemme bleue", "Pour les gens trop gentils"];
        Ib[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
        Ib[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
        Ib[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
        Ib[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
        Ib[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
        Ib[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
        Ib[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
        Ib[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
        Ib[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
        Ib[29] = ["Sac", "Plus de place dans ton inventaire!"];
        Ib[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
        Ib[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
        Ib[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
        Ib[148] = ["Cadenas", "Pour verrouiller un coffre"];
        Ib[158] = ["Clé", "Pour déverrouiller un coffre"];
        Ib[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
        Ib[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
        Ib[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
        Ib[190] = ["Toit", "Te cache un peu et te réchauffe"];
        Ib[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
        Ib[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
        Ib[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
        Ib[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
        Ib[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
        Ib[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
        Ib[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
        Ib[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
        Ib[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
        Ib[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
        Ib[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
        Ib[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
        Ib[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
        Ib[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
        Ib[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
        Ib[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
        Ib[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
        Ib[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
        Ib[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
        Ib[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
        Ib[300] = "Tu ne peux pas rejoindre le serveur";
        Ib[301] = "Expulsé: ";
        Ib[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
        Ib[303] = "Ta clé est fausse";
        Ib[304] = "Tu as une vieille version, rafraichis tes caches";
        Ib[305] = "Il n'y a plus de nouvelles ressources";
        Ib[306] = "Tu as survécu 1 jour";
        Ib[307] = "Tu as survécu ";
        Ib[308] = " jours";
        Ib[309] = "Tu es mort ;-;";
        Ib[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
        Ib[311] = "Le serveur est complet! Spam le bouton jouer";
        Ib[312] = "Cette ressource est vide";
        Ib[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
        Ib[314] = " est mort";
        Ib[315] = "Ce n'est pas le bon outil";
        Ib[316] = "Tu as rejoins une équipe";
        Ib[317] = "Tu es mort";
        Ib[318] = " a rejoint l'équipe";
        Ib[319] = "Ton équipe a été détruite";
        Ib[320] = "Tu as quitté l'équipe";
        Ib[321] = " a quitté l'équipe";
        Ib[322] = "Quelqu'un a volé ton token :>";
        Ib[323] = "Choisis un serveur";
        Ib[324] = "joueurs";
        Ib[325] = "joueurs";
        Ib[326] = "joueurs dans ce mode";
        Ib[327] = "Bientôt...";
        document.getElementById("nickname_input").placeholder = "Surnom";
        Dt[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
        Dt[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
        Dt[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
        Dt[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
        Dt[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
        Dt[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
        Dt[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
        Dt[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
        Dt[8] = ["Cet ours voulait juste un câlin."];
        Dt[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
        Dt[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
        Dt[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
        Dt[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
        Dt[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
        Dt[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
        Dt[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
        Dt[16] = ["Un kraken a 'kraké' tes os."];
        Dt[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
        Dt[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
        Dt[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
        Dt[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
        Dt[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
        ⵠⵠΔⵠΔ = "Uuunnnggg";
        ⲆΔᐃᐃᐃⵠⲆ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
    }
    var Ib = [];
    const Eb = 1;
    const Sb = 4;
    for (var Qb = 0; Qb < 344; Qb++) {
        Ib[Qb] = "";
    }
    var Dt = [];
    const Rb = 11;
    const Fb = 2;
    $(".md-languages").on("click", function () {
        $(this).toggleClass("active");
    });
    const jb = 7;
    $(".md-languages ul li").on("click", function () {
        var a = $(this).text();
        if (a === "English") {
            ot();
        } else if (a === "Français") {
            Db();
        } else if (a === "Deutsch") {
            ab();
        } else if (a === "Español") {
            ob();
        } else if (a === "Português") {
            ib();
        } else if (a === "Русский") {
            wt();
        } else if (a === "Polski") {
            yb();
        }
        ⵠΔᐃᐃⵠ = [];
        Qx.ᐃⲆⵠΔ.label = [];
        $(".md-languages ul li").removeClass("active");
        $(this).addClass("active");
        $(".md-languages label button").text(a);
    });
    qr = "EN";
    var Gb = navigator.language || navigator.userLanguage;
    const Lb = 13;
    const Wb = 8;
    switch (Gb) {
        case "ru":
            qr = "RU";
            break;
        case "en":
            qr = "EN";
            break;
        case "es":
            qr = "SP";
            break;
        case "fr":
            qr = "FR";
            break;
        case "pl":
            qr = "PL";
            break;
        case "de":
            qr = "DE";
            break;
        case "pt":
            qr = "PT";
    }
    var Ob;
    const Et = 3;
    if (qr === "FR") {
        $(".md-languages label button").text("Français");
        Ob = Db;
    } else if (qr === "PL") {
        $(".md-languages label button").text("Polski");
        Ob = yb;
    } else if (qr === "PT") {
        $(".md-languages label button").text("Português");
        Ob = ib;
    } else if (qr === "SP") {
        $(".md-languages label button").text("Español");
        Ob = ob;
    } else if (qr === "RU") {
        $(".md-languages label button").text("Русский");
        Ob = wt;
    } else if (qr === "DE") {
        $(".md-languages label button").text("Deutsch");
        Ob = ab;
    } else {
        $(".md-languages label button").text("English");
        Ob = ot;
    }
    const qb = 6;
    function Hb(b, c, d, e) {
        const f = b ^ 25464;
        const g = (59183 + c) % 65530;
        const a = ~(d & 19436) & d | ~(d & 19436) & 19436;
        const h = ~(e & 26954) & 26954 | ~(e & 26954) & e;
        return ((37221 + (kb(f, g, a, h) ^ Pb(f, g, a, h, f, g))) * 214013 + 2531011) % 4294967296;
    }
    function Ub(b, c) {
        const d = (b + 2014) % 65517;
        const e = ~(c & 26473) & (c | 26473);
        const f = ut(d, e);
        const g = it(d, e, d, e, d);
        return (16 << ((f ^ g) >> 16 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (0 << ((f ^ g) & 255)) + (24 << ((f ^ g) >> 24 & 255));
    }
    function Yb(b, c, d) {
        const e = b ^ 13334;
        const f = (c | 46047) & ~(c & 46047);
        const g = d ^ 19930;
        const a = ir(e, f, g, e);
        const h = Hx(f, g, e, f, g, e);
        return (8 << ((a ^ h) >> 8 & 255)) + (16 << ((a ^ h) >> 24 & 255)) + (24 << ((a ^ h) >> 0 & 255)) + (0 << ((a ^ h) >> 16 & 255));
    }
    const Kb = 20;
    ᐃⵠ = {
        ⲆΔΔⲆⲆⲆᐃΔᐃ: "img/logo.png",
        ⲆᐃᐃΔⵠᐃⲆ: "img/mapday.png",
        ⲆᐃᐃΔⵠⲆΔ: "img/mapnight.png",
        ΔΔᐃᐃΔᐃᐃⵠᐃ: "img/bigzday.png",
        ΔⵠᐃΔⵠΔΔΔΔ: "img/bigznight.png",
        ⲆⲆΔⲆΔⵠΔ: "img/bigday-river1.png",
        ΔΔⵠⵠⲆⲆΔⵠΔ: "img/bigday-lake.png",
        ᐃᐃⲆⵠⲆⵠΔ: "img/bigday-berry.png",
        ᐃⲆΔΔᐃⲆΔ: "img/bigday-stone1.png",
        ᐃⵠⲆⲆⲆⵠΔ: "img/bigday-stone2.png",
        ⲆΔⲆⲆⲆⵠⲆ: "img/bigday-gold1.png",
        ΔⵠΔⵠᐃⲆᐃ: "img/bigday-gold2.png",
        ΔΔᐃⲆⲆΔᐃ: "img/bigday-emerald1.png",
        ΔⲆᐃⲆΔⲆᐃ: "img/bigday-emerald2.png",
        ᐃⲆⵠⵠΔⵠⲆ: "img/bigday-amethyst.png",
        ⵠⵠΔᐃⲆⵠΔ: "img/bigday-bear.png",
        ⵠⵠᐃΔⲆΔᐃ: "img/bigday-cave.png",
        ⵠΔⵠᐃⵠⲆᐃ: "img/bigday-diamond.png",
        ᐃᐃⵠᐃΔⵠⲆ: "img/bigday-island.png",
        ⵠΔⲆⵠΔᐃⲆ: "img/bigday-reidite.png",
        ⲆΔⵠᐃⵠⵠᐃ: "img/bigday-spider.png",
        ⵠΔΔⵠᐃᐃᐃ: "img/bigday-wolf.png",
        ⵠΔⲆᐃΔΔᐃ: "img/bigday-fir-tree.png",
        ⲆΔⲆⲆΔΔΔ: "img/bigday-fox.png",
        ⵠⵠⲆⵠⲆⵠΔ: "img/bigday-kraken.png",
        ⵠⵠⲆⲆⵠⵠⵠ: "img/bigday-piranha.png",
        ⵠᐃᐃᐃᐃᐃᐃ: "img/bigday-cactus.png",
        ᐃⵠⲆⲆⲆᐃⵠ: "img/bigday-magma.png",
        ᐃᐃⲆⲆΔᐃⵠ: "img/bigday-river1.png",
        ⵠΔΔⵠᐃⵠᐃⲆᐃ: "img/bignight-lake.png",
        ⵠΔΔΔᐃΔΔⵠΔ: "img/bignight-berry.png",
        ⵠⵠⵠⲆⵠΔΔ: "img/bignight-stone1.png",
        ΔᐃᐃⵠⵠⵠΔ: "img/bignight-stone2.png",
        ⲆᐃᐃΔⵠⵠᐃ: "img/bignight-gold1.png",
        ΔΔⵠⲆΔⵠΔ: "img/bignight-gold2.png",
        ⲆΔΔⲆΔᐃⲆ: "img/bignight-emerald1.png",
        ⲆΔⵠⲆⲆⲆᐃ: "img/bignight-emerald2.png",
        ᐃⲆⵠⲆⵠᐃⲆ: "img/bignight-amethyst.png",
        ᐃΔⵠⵠΔΔᐃ: "img/bignight-bear.png",
        ⵠⲆΔΔⵠⵠⵠ: "img/bignight-cave.png",
        ⲆⵠⲆⲆⲆΔᐃ: "img/bignight-diamond.png",
        ΔⵠⵠⲆᐃᐃⵠ: "img/bignight-island.png",
        ΔᐃΔⵠⵠⲆⵠ: "img/bignight-reidite.png",
        ⲆⵠᐃⲆΔⲆⵠ: "img/bignight-spider.png",
        ΔⲆⲆⵠⲆⵠᐃ: "img/bignight-wolf.png",
        ᐃᐃᐃⲆΔᐃᐃ: "img/bignight-fir-tree.png",
        ⵠⲆΔᐃⲆⲆᐃ: "img/bignight-fox.png",
        ᐃᐃⲆᐃⵠΔⵠ: "img/bignight-kraken.png",
        ᐃᐃⵠΔⲆⵠⲆ: "img/bignight-piranha.png",
        ⲆⲆⲆⲆⵠᐃΔ: "img/bignight-cactus.png",
        ⵠΔⲆⵠᐃⵠⲆ: "img/bignight-magma.png",
        ⵠⵠⵠⲆⵠⵠᐃ: "img/bigday-desert.png",
        ⵠⵠᐃᐃⲆᐃΔ: "img/bigday-winter.png",
        ᐃᐃΔⵠⵠΔⲆ: "img/bigday-lava.png",
        ⵠⲆΔΔᐃⲆᐃ: "img/bigday-forest.png",
        ᐃⵠⲆᐃⲆⲆᐃ: "img/bignight-desert.png",
        ⲆΔΔⲆΔᐃΔ: "img/bignight-winter.png",
        ᐃᐃⲆⲆⲆⵠΔ: "img/bignight-lava.png",
        ⲆⵠΔΔΔΔᐃ: "img/bignight-forest.png",
        ᐃⲆⲆΔΔⲆΔ: "img/day-river-wave.png",
        ⲆⵠᐃΔⵠⵠΔ: "img/night-river-wave.png",
        ΔⵠⲆⲆᐃΔᐃ: "img/day-fog0.png",
        ⲆΔⲆⵠΔⲆΔ: "img/day-fog1.png",
        ⲆⵠⲆⲆΔᐃᐃ: "img/day-fog2.png",
        ⵠΔΔⲆⲆΔⵠ: "img/night-fog0.png",
        ⵠⲆⵠⵠⲆΔᐃ: "img/night-fog1.png",
        ᐃⵠᐃⵠⲆΔⲆ: "img/night-fog2.png",
        ⲆⲆᐃΔⵠⲆⲆ: "img/day-fogdesert0.png",
        ᐃⵠⲆⲆΔΔⲆ: "img/day-fogdesert1.png",
        ᐃᐃⵠⲆΔᐃⲆ: "img/day-fogdesert2.png",
        ⵠⵠⲆᐃΔⵠΔ: "img/night-fogdesert0.png",
        ΔⵠⵠⵠⲆⵠⲆ: "img/night-fogdesert1.png",
        ⲆΔᐃΔⲆⵠᐃ: "img/night-fogdesert2.png",
        ⲆⵠᐃΔΔΔΔ: "img/day-cross-server.png",
        ΔⲆⵠⲆΔⵠⲆ: "img/day-here-server.png",
        ΔΔⵠᐃΔΔⵠ: "img/day-finish-server.png",
        ⲆⲆⵠΔⵠⵠΔ: "img/day-item-server.png",
        ⲆᐃⵠⲆᐃᐃⵠ: "img/day-skull-server.png",
        ΔⲆΔⲆΔΔᐃ: "img/night-cross-server.png",
        ᐃⵠΔᐃⲆⵠⲆ: "img/night-here-server.png",
        ΔⵠⲆⲆΔᐃᐃ: "img/night-finish-server.png",
        ΔᐃΔΔᐃⲆⲆ: "img/night-item-server.png",
        ΔⵠⲆⲆⵠⵠᐃ: "img/night-skull-server.png",
        ᐃⵠⵠⵠⵠΔⵠ: "img/day-reidite0.png",
        ᐃⲆⵠⲆΔⵠⲆ: "img/night-reidite0.png",
        ᐃᐃⲆⵠⵠᐃⲆ: "img/day-reidite1.png",
        ⵠⲆⲆΔΔⵠⲆ: "img/night-reidite1.png",
        ΔΔΔⵠⲆⲆΔ: "img/day-reidite2.png",
        ⵠᐃⵠΔᐃⵠⵠ: "img/night-reidite2.png",
        ⵠⲆᐃᐃᐃΔⲆ: "img/day-lava1.png",
        ⲆΔᐃⵠᐃΔᐃ: "img/night-lava1.png",
        ⵠΔΔⲆᐃᐃⲆ: "img/day-lava2.png",
        ᐃΔⲆΔⵠΔΔ: "img/night-lava2.png",
        ΔΔⲆⵠⲆᐃⵠ: "img/day-lava3.png",
        ΔᐃⵠⲆΔΔⲆ: "img/night-lava3.png",
        ΔΔⵠΔⵠⲆΔ: "img/day-lava4.png",
        ᐃⵠⲆΔΔⵠⵠ: "img/night-lava4.png",
        ᐃⲆⵠΔⲆΔⵠ: "img/day-lava5.png",
        ΔᐃⵠΔⲆᐃⵠ: "img/night-lava5.png",
        ᐃᐃⲆⲆᐃᐃⵠ: "img/day-lava6.png",
        ⵠⵠⵠᐃⵠⲆΔ: "img/night-lava6.png",
        ᐃⲆΔᐃⲆⲆᐃ: "img/day-lava-ground1.png",
        ⲆΔΔᐃⲆⵠⲆ: "img/night-lava-ground1.png",
        ⲆⲆⲆⵠᐃᐃΔ: "img/day-lava-ground2.png",
        ΔⲆᐃΔᐃΔΔ: "img/night-lava-ground2.png",
        ΔⵠᐃΔᐃΔΔ: "img/day-lava-ground3.png",
        ᐃⵠⵠⲆⵠᐃΔ: "img/night-lava-ground3.png",
        ᐃΔⵠᐃΔⵠⵠ: "img/day-lava-ground4.png",
        ⲆⵠⲆⵠΔⵠᐃ: "img/night-lava-ground4.png",
        ᐃᐃᐃΔΔΔᐃ: "img/day-lava-ground5.png",
        ΔᐃΔⲆⲆⵠⲆ: "img/night-lava-ground5.png",
        ⵠⲆⲆᐃⲆⲆᐃ: "img/day-lava-ground6.png",
        ᐃⵠⵠⵠⲆⵠΔ: "img/night-lava-ground6.png",
        ΔΔⲆᐃΔⲆᐃ: "img/day-fire-mob.png",
        ᐃΔⲆⲆⵠⲆⵠ: "img/night-fire-mob.png",
        ⵠⵠᐃᐃⲆΔⲆ: "img/hurt-fire-mob.png",
        ⲆⵠΔⲆᐃΔⲆ: "img/day-diamond-protection.png",
        ⵠΔⲆⲆⲆᐃΔ: "img/night-diamond-protection.png",
        ⲆΔⵠᐃⲆΔⲆ: "img/day-hand-diamond-protection.png",
        ⲆⲆᐃΔⵠⵠⲆ: "img/night-hand-diamond-protection.png",
        ⲆⵠΔᐃᐃⲆⵠ: "img/inv-diamond-protection-out.png",
        ⲆⵠᐃΔⲆⵠᐃ: "img/inv-diamond-protection-in.png",
        ⵠⵠⲆⵠᐃΔⲆ: "img/inv-diamond-protection-click.png",
        ⵠⵠⲆⵠⲆⲆᐃ: "img/day-amethyst-protection.png",
        ⵠⵠⲆᐃᐃⲆⲆ: "img/night-amethyst-protection.png",
        ᐃⵠⵠΔⲆⲆⵠΔⲆ: "img/day-hand-amethyst-protection.png",
        ⲆΔⲆⵠⵠⲆᐃⲆᐃ: "img/night-hand-amethyst-protection.png",
        ᐃⲆⵠᐃⵠⵠᐃ: "img/inv-amethyst-protection-out.png",
        ⲆΔΔⵠⲆⵠᐃ: "img/inv-amethyst-protection-in.png",
        ⲆⲆΔⵠΔᐃⲆ: "img/inv-amethyst-protection-click.png",
        ⲆΔΔⲆΔⵠΔ: "img/day-reidite-sword.png",
        ⲆᐃⵠΔᐃᐃⵠ: "img/night-reidite-sword.png",
        ᐃᐃᐃΔⵠⵠⲆ: "img/inv-reidite-sword-out.png",
        ΔⲆⲆΔⲆΔᐃ: "img/inv-reidite-sword-in.png",
        ⵠⲆΔᐃⵠᐃⵠ: "img/inv-reidite-sword-click.png",
        ᐃᐃᐃⵠᐃᐃⵠ: "img/inv-reidite-out.png",
        ᐃⲆΔⲆΔΔⵠ: "img/inv-reidite-in.png",
        ᐃΔᐃΔⲆⲆᐃ: "img/inv-reidite-click.png",
        ⲆⲆΔⵠⵠΔⵠ: "img/inv-flame-out.png",
        ᐃⲆᐃΔΔⵠΔ: "img/inv-flame-in.png",
        ⵠⵠⲆΔⵠⵠᐃ: "img/inv-flame-click.png",
        ⵠΔⲆᐃⵠᐃⵠ: "img/day-magma-buble0.png",
        ⲆⲆⵠⲆⲆⲆⲆ: "img/night-magma-buble0.png",
        ⵠΔⲆⵠⵠⲆⲆ: "img/day-magma-buble1.png",
        ΔⲆΔΔⲆⲆⵠ: "img/night-magma-buble1.png",
        ⲆᐃᐃⵠᐃⲆⵠ: "img/day-magma-buble2.png",
        ΔᐃⲆⲆⲆⲆⵠ: "img/night-magma-buble2.png",
        ⲆⲆΔᐃΔⵠⵠ: "img/day-lava-dragon.png",
        ΔΔⵠⲆⲆⵠⲆ: "img/night-lava-dragon.png",
        ⵠⲆΔⲆᐃⲆΔⵠⲆ: "img/day-fire-dragon.png",
        ᐃⲆΔΔⲆⲆⵠᐃᐃ: "img/night-fire-dragon.png",
        ΔΔⲆⵠⵠΔⵠ: "img/hurt-lava-dragon.png",
        ⲆⲆⲆΔⵠⲆⵠ: "img/day-lava-wing-left.png",
        ΔᐃⵠⲆᐃⵠⵠ: "img/night-lava-wing-left.png",
        ⵠⵠⲆⵠⵠⵠⵠ: "img/day-lava-wing-right.png",
        ᐃᐃⲆⵠⵠⲆⵠ: "img/night-lava-wing-right.png",
        ⵠΔⲆⵠᐃᐃⵠ: "img/hurt-lava-wing-left.png",
        ΔⲆⲆⲆⲆⵠΔ: "img/hurt-lava-wing-right.png",
        ⵠΔⲆᐃⵠΔᐃ: "img/day-reidite-spear.png",
        ᐃᐃᐃⲆⲆⲆΔ: "img/night-reidite-spear.png",
        ᐃᐃΔΔⲆᐃⵠ: "img/inv-reidite-spear-out.png",
        ᐃⵠⵠⲆⵠᐃᐃ: "img/inv-reidite-spear-in.png",
        ᐃⲆᐃⵠⲆΔⲆ: "img/inv-reidite-spear-click.png",
        ᐃⲆⲆΔΔΔⲆ: "img/day-reidite-helmet.png",
        ᐃΔᐃⲆⵠⵠⲆ: "img/night-reidite-helmet.png",
        ⵠΔⵠᐃⲆΔΔ: "img/inv-reidite-helmet-out.png",
        ᐃΔᐃⲆⲆⵠΔ: "img/inv-reidite-helmet-in.png",
        ΔᐃΔᐃⲆⵠⵠ: "img/inv-reidite-helmet-click.png",
        ΔᐃᐃⲆΔⲆᐃ: "img/day-hand-reidite-protection.png",
        ΔⵠⵠᐃⵠⲆᐃ: "img/night-hand-reidite-protection.png",
        ᐃΔᐃⲆⲆⲆΔ: "img/day-reidite-protection.png",
        ᐃⵠΔΔΔⵠᐃ: "img/night-reidite-protection.png",
        ᐃΔⵠΔᐃⵠⵠ: "img/inv-reidite-protection-out.png",
        ᐃᐃΔᐃΔⲆⲆ: "img/inv-reidite-protection-in.png",
        ΔⲆΔⵠᐃᐃᐃ: "img/inv-reidite-protection-click.png",
        ᐃⲆΔᐃⲆᐃΔ: "img/day-lava-dragon-sword.png",
        ⵠΔⵠᐃⵠΔΔ: "img/night-lava-dragon-sword.png",
        ⵠᐃⲆΔΔⵠᐃ: "img/inv-lava-dragon-sword-out.png",
        ᐃⲆⵠⵠᐃᐃΔ: "img/inv-lava-dragon-sword-in.png",
        ⲆᐃΔᐃᐃⵠᐃ: "img/inv-lava-dragon-sword-click.png",
        ΔΔⲆΔⵠᐃⵠ: "img/day-lava-spear.png",
        ᐃⵠᐃⲆⵠⵠⲆ: "img/night-lava-spear.png",
        ΔΔⵠΔⲆᐃᐃ: "img/inv-lava-spear-out.png",
        ⵠⵠⵠΔᐃⵠⵠ: "img/inv-lava-spear-in.png",
        ᐃⲆⲆⵠᐃⲆΔ: "img/inv-lava-spear-click.png",
        ⵠΔⲆᐃⲆΔⵠ: "img/day-lava-helmet.png",
        ΔⲆⵠΔⲆⵠᐃ: "img/night-lava-helmet.png",
        ΔᐃⲆᐃᐃⵠΔ: "img/inv-lava-helmet-out.png",
        ⵠᐃᐃᐃΔΔⵠ: "img/inv-lava-helmet-in.png",
        ᐃⲆΔᐃⲆⲆⲆ: "img/inv-lava-helmet-click.png",
        ΔⲆΔⲆⲆᐃⲆ: "img/day-witch-hat.png",
        ⵠⵠⲆⵠⲆΔⵠ: "img/night-witch-hat.png",
        ᐃᐃⲆⲆΔΔⲆ: "img/inv-witch-hat-out.png",
        ⵠⲆᐃᐃⵠᐃⵠ: "img/inv-witch-hat-in.png",
        ΔᐃᐃᐃⲆⲆⵠ: "img/inv-witch-hat-click.png",
        ⵠᐃⵠᐃⲆⲆⲆ: "img/day-nimbus2000.png",
        ᐃΔⵠᐃᐃΔⵠ: "img/night-nimbus2000.png",
        ⲆΔᐃΔⲆᐃⵠ: "img/inv-nimbus2000-out.png",
        ⵠΔⲆᐃⵠⲆᐃ: "img/inv-nimbus2000-in.png",
        ⲆᐃΔΔⵠΔΔ: "img/inv-nimbus2000-click.png",
        ⲆⲆΔⵠᐃⵠᐃ: "img/day-accessory1-pacques.png",
        ᐃⵠⵠΔⲆᐃⲆ: "img/night-accessory1-pacques.png",
        ᐃᐃᐃᐃΔⲆᐃ: "img/day-accessory2-pacques.png",
        ΔⲆⵠⲆⵠⲆⵠ: "img/night-accessory2-pacques.png",
        ᐃᐃᐃⵠⵠⵠⵠ: "img/day-accessory3-pacques.png",
        ⲆⵠΔᐃᐃⲆΔ: "img/night-accessory3-pacques.png",
        ᐃⵠⵠᐃᐃΔⵠ: "img/day-accessory5-pacques.png",
        ⵠⵠΔᐃΔᐃΔ: "img/night-accessory5-pacques.png",
        ᐃᐃⵠⲆⲆⵠᐃ: "img/day-accessory6-pacques.png",
        ⵠⲆⲆΔⲆᐃⵠ: "img/night-accessory6-pacques.png",
        ΔⲆΔᐃⵠΔⵠ: "img/day-accessory7-pacques.png",
        ᐃᐃⲆΔⵠΔᐃ: "img/night-accessory7-pacques.png",
        ⵠⲆⵠᐃⲆⵠᐃ: "img/day-accessory8-pacques.png",
        ⲆⲆⵠⲆΔⲆⵠ: "img/night-accessory8-pacques.png",
        ΔΔᐃⲆᐃΔⲆ: "img/day-bag-pacques.png",
        ΔΔΔΔⵠΔⲆ: "img/night-bag-pacques.png",
        ⵠⵠⲆⲆᐃⵠⵠ: "img/day-carrot.png",
        ΔᐃⲆΔᐃⲆⲆ: "img/night-carrot.png",
        ⲆΔⵠⲆΔⵠᐃ: "img/day-carrot-dried.png",
        ⲆⲆΔΔᐃᐃᐃ: "img/night-carrot-dried.png",
        ⵠᐃᐃᐃᐃⲆᐃ: "img/day-tomato-herb.png",
        ᐃⵠᐃⲆᐃᐃⲆ: "img/night-tomato-herb.png",
        ⵠΔⵠⲆⵠᐃⲆ: "img/day-tomato-herb-dried.png",
        ΔⵠⵠⲆⵠⲆⵠ: "img/night-tomato-herb-dried.png",
        ΔΔⲆΔᐃⲆⲆ: "img/day-tomato.png",
        ⵠΔⲆΔⲆΔᐃ: "img/night-tomato.png",
        ΔᐃⵠⲆⵠⲆᐃ: "img/inv-carrot-out.png",
        ⲆΔΔᐃⲆᐃᐃ: "img/inv-carrot-in.png",
        ⲆᐃⲆⵠⲆⵠΔ: "img/inv-carrot-click.png",
        ᐃⲆⵠΔⵠᐃⵠ: "img/inv-tomato-out.png",
        ΔᐃΔΔᐃΔⵠ: "img/inv-tomato-in.png",
        ⵠⵠΔΔⵠᐃΔ: "img/inv-tomato-click.png",
        ΔⵠΔⲆᐃᐃΔ: "img/day-player0.png",
        ⲆⲆΔΔⵠΔᐃ: "img/night-player0.png",
        ⲆΔΔᐃⵠΔᐃ: "img/day-player1.png",
        ᐃΔΔⲆⵠᐃᐃ: "img/night-player1.png",
        ᐃⲆⵠᐃⲆΔᐃ: "img/day-player2.png",
        ΔⵠⵠΔΔⲆᐃ: "img/night-player22.png",
        ⵠΔⵠᐃⵠᐃᐃ: "img/day-player3.png",
        ΔᐃΔⲆᐃⲆⲆ: "img/night-player33.png",
        ⲆⵠᐃΔⵠⵠᐃ: "img/day-player4.png",
        ΔⲆⲆⵠΔᐃᐃ: "img/night-player4.png",
        ᐃΔᐃⵠⵠΔⲆ: "img/day-player5.png",
        ᐃⵠΔᐃΔᐃᐃ: "img/night-player5.png",
        ᐃᐃⲆⲆᐃΔⲆ: "img/day-player6.png",
        ⲆⲆΔⲆⲆⵠⵠ: "img/night-player6.png",
        ⵠⵠⵠΔᐃⵠᐃ: "img/day-player7.png",
        ⵠⲆΔⵠΔΔᐃ: "img/night-player7.png",
        ⲆΔᐃᐃⵠᐃΔ: "img/day-player8.png",
        ⵠᐃᐃⵠΔⲆᐃ: "img/night-player8.png",
        ⵠΔΔᐃᐃⲆᐃ: "img/day-player9.png",
        ⵠⲆᐃᐃⲆΔᐃ: "img/night-player9.png",
        ⲆⵠⲆⲆⲆⲆΔ: "img/day-player10.png",
        ΔⵠⵠⲆΔⲆΔ: "img/night-player10.png",
        ΔⲆⲆⵠⲆⵠⵠ: "img/day-player11.png",
        ᐃΔΔⲆⵠⵠⲆ: "img/night-player11.png",
        ⵠᐃΔⲆⵠⵠⵠ: "img/day-player12.png",
        ΔᐃⵠᐃΔⵠᐃ: "img/night-player12.png",
        ⲆⲆᐃⵠᐃΔⲆ: "img/day-player13.png",
        ⲆΔΔΔᐃΔᐃ: "img/night-player13.png",
        ΔᐃΔΔᐃⵠⲆ: "img/day-player14.png",
        ΔⵠΔΔᐃᐃΔ: "img/night-player14.png",
        ᐃΔᐃᐃⲆⵠⵠ: "img/day-player15.png",
        ᐃⵠΔΔΔΔⵠ: "img/night-player15.png",
        ΔΔᐃΔⵠᐃΔ: "img/day-player16.png",
        ⲆⲆΔⲆΔᐃΔ: "img/night-player16.png",
        ΔΔΔⲆⲆⵠᐃ: "img/day-player17.png",
        ΔⲆᐃᐃⲆⵠᐃ: "img/night-player17.png",
        ΔΔΔΔΔᐃΔ: "img/day-player18.png",
        ΔᐃⲆⵠΔⲆⲆ: "img/night-player18.png",
        ᐃΔⲆᐃΔᐃᐃ: "img/day-player19.png",
        ᐃⵠⵠⲆⲆᐃⲆ: "img/night-player19.png",
        ΔΔΔⵠⲆΔⲆ: "img/day-hand-player0.png",
        ⵠΔᐃᐃΔⵠΔ: "img/night-hand-player0.png",
        ⵠΔᐃⵠᐃΔΔ: "img/day-hand-player1.png",
        ᐃΔᐃⲆⲆΔᐃ: "img/night-hand-player1.png",
        ΔⲆⵠᐃⵠΔⲆ: "img/day-hand-player2.png",
        ᐃΔΔⵠΔᐃⵠ: "img/night-hand-player22.png",
        ⲆΔⲆⲆⲆⲆᐃ: "img/day-hand-player3.png",
        ⲆⲆΔⵠⵠⵠΔ: "img/night-hand-player33.png",
        ⲆⲆΔᐃᐃΔⵠ: "img/day-hand-player4.png",
        ΔΔΔᐃⵠⲆΔ: "img/night-hand-player4.png",
        ΔⵠⲆⲆⵠⲆⲆ: "img/day-hand-player5.png",
        ⵠᐃΔᐃᐃⵠⵠ: "img/night-hand-player5.png",
        ᐃΔᐃⵠᐃⲆⲆ: "img/day-hand-player6.png",
        Δᐃᐃᐃⵠⵠⵠ: "img/night-hand-player6.png",
        ⵠⵠᐃᐃⵠⵠᐃ: "img/day-hand-player7.png",
        ᐃᐃⵠᐃᐃᐃΔ: "img/night-hand-player7.png",
        ᐃⲆⵠⲆΔⲆⵠ: "img/day-hand-player8.png",
        ⲆⵠΔᐃᐃᐃⵠ: "img/night-hand-player8.png",
        ⲆᐃⵠΔⲆΔⵠ: "img/day-hand-player9.png",
        ᐃᐃⲆᐃᐃΔΔ: "img/night-hand-player9.png",
        ᐃΔΔᐃΔᐃⲆ: "img/day-hand-player10.png",
        ᐃⲆΔΔⵠⵠⲆ: "img/night-hand-player10.png",
        ᐃᐃᐃΔⲆⵠⵠ: "img/day-hand-player11.png",
        ⵠⵠᐃΔⵠᐃᐃ: "img/night-hand-player11.png",
        ⵠᐃᐃᐃΔΔᐃ: "img/day-hand-player12.png",
        ΔᐃᐃⵠⲆΔⵠ: "img/night-hand-player12.png",
        ⵠⲆΔΔᐃΔΔ: "img/day-hand-player13.png",
        ⲆⵠⲆⵠᐃᐃΔ: "img/night-hand-player13.png",
        ΔᐃⲆⲆᐃⵠᐃ: "img/day-hand-player14.png",
        ΔⵠⲆΔⲆΔⲆ: "img/night-hand-player14.png",
        ΔΔⵠⲆΔΔⵠ: "img/day-hand-player15.png",
        ᐃᐃΔΔⵠΔⲆ: "img/night-hand-player15.png",
        ᐃⵠΔᐃⵠⲆᐃ: "img/day-hand-player16.png",
        ⲆⲆΔⵠⵠⲆΔ: "img/night-hand-player16.png",
        ⵠΔⵠΔⲆⵠⲆ: "img/day-hand-player17.png",
        Δⵠⵠᐃᐃⵠⵠ: "img/night-hand-player17.png",
        ⵠⲆᐃΔⲆΔⵠ: "img/day-hand-player18.png",
        ⵠᐃᐃΔᐃΔᐃ: "img/night-hand-player18.png",
        ⵠⲆⵠⲆΔᐃⵠ: "img/day-hand-player19.png",
        ΔΔⲆⲆⲆⲆⵠ: "img/night-hand-player19.png",
        ΔⵠΔΔᐃΔΔ: "img/day-accessory4.png",
        ⲆⵠⵠΔⲆⲆΔ: "img/night-accessory4.png",
        ⵠⵠᐃⲆᐃⵠᐃ: "img/day-accessory9.png",
        ᐃᐃᐃᐃΔᐃΔ: "img/night-accessory9.png",
        ⵠΔᐃⵠᐃⵠⲆ: "img/day-accessory10.png",
        ΔΔΔΔⵠᐃᐃ: "img/night-accessory10.png",
        ⵠᐃΔᐃΔΔᐃ: "img/day-accessory11.png",
        ᐃᐃⵠⲆⲆᐃⲆ: "img/night-accessory11.png",
        ⵠᐃⵠⵠⵠΔⵠ: "img/day-accessory12.png",
        ᐃⵠⵠⲆⵠⲆᐃ: "img/night-accessory12.png",
        ⵠΔΔⲆⵠΔⵠ: "img/day-bag.png",
        ΔᐃᐃⵠᐃⵠⲆ: "img/night-bag.png",
        ⵠⵠΔᐃΔᐃⲆ: "img/inv-bag-out.png",
        ΔⵠⲆⲆΔⵠᐃ: "img/inv-bag-in.png",
        ⲆΔⲆᐃΔᐃΔ: "img/inv-bag-click.png",
        ⵠᐃⵠⵠᐃⲆΔ: "img/day-pitchfork.png",
        ΔᐃᐃⲆᐃΔⲆ: "img/night-pitchfork.png",
        ⲆᐃⵠⵠⲆⵠⲆ: "img/inv-pitchfork-out.png",
        ΔⵠΔⲆⵠᐃⵠ: "img/inv-pitchfork-in.png",
        ⵠⲆⵠⲆᐃⵠᐃ: "img/inv-pitchfork-click.png",
        ⲆᐃΔⲆᐃΔⵠ: "img/inv-wood-spike-door-out.png",
        ΔⵠᐃᐃΔᐃⲆ: "img/inv-wood-spike-door-in.png",
        ⲆᐃⵠⵠⲆⲆⲆ: "img/inv-wood-spike-door-click.png",
        ΔⲆᐃⲆⵠΔΔ: "img/inv-stone-spike-door-out.png",
        ⲆⲆᐃⲆⵠᐃᐃ: "img/inv-stone-spike-door-in.png",
        ΔⵠΔΔᐃⵠⵠ: "img/inv-stone-spike-door-click.png",
        ⵠⲆΔᐃΔⵠΔ: "img/inv-gold-spike-door-out.png",
        ΔᐃⲆᐃᐃᐃΔ: "img/inv-gold-spike-door-in.png",
        ⲆᐃᐃΔΔΔᐃ: "img/inv-gold-spike-door-click.png",
        ⲆⲆⵠⲆᐃⵠᐃ: "img/inv-diamond-spike-door-out.png",
        ᐃᐃᐃᐃⵠΔⲆ: "img/inv-diamond-spike-door-in.png",
        ΔΔⵠⵠⵠⲆΔ: "img/inv-diamond-spike-door-click.png",
        ⵠⲆᐃⲆᐃⵠᐃ: "img/inv-amethyst-spike-door-out.png",
        ΔⲆⵠΔᐃΔΔ: "img/inv-amethyst-spike-door-in.png",
        ΔΔⵠⵠⵠⵠⲆ: "img/inv-amethyst-spike-door-click.png",
        ⲆΔⵠⲆΔΔⲆ: "img/day-wood-spike-door.png",
        ⵠᐃⲆⲆΔⲆⵠ: "img/night-wood-spike-door.png",
        ⵠⲆⲆΔⲆΔⲆ: "img/day-stone-spike-door.png",
        ᐃΔⲆⵠᐃᐃΔ: "img/night-stone-spike-door.png",
        ΔᐃᐃⲆⵠᐃⵠ: "img/day-gold-spike-door.png",
        ᐃᐃⲆΔⲆΔⵠ: "img/night-gold-spike-door.png",
        ΔᐃΔᐃᐃᐃⲆ: "img/day-diamond-spike-door.png",
        ᐃΔᐃⲆᐃⲆΔ: "img/night-diamond-spike-door.png",
        ᐃᐃⵠΔΔΔⵠ: "img/day-amethyst-spike-door.png",
        ⵠⵠᐃⵠΔᐃⵠ: "img/night-amethyst-spike-door.png",
        ᐃⲆⲆⵠⲆⲆΔ: "img/inv-reidite-spike-door-out.png",
        ΔΔⵠΔⵠΔΔ: "img/inv-reidite-spike-door-in.png",
        ΔᐃᐃⵠᐃⵠΔ: "img/inv-reidite-spike-door-click.png",
        ᐃⲆⵠⵠᐃⵠΔ: "img/inv-reidite-door-out.png",
        ⵠⵠΔⵠⲆⵠⲆ: "img/inv-reidite-door-in.png",
        ⵠⲆⵠⵠⲆᐃⲆ: "img/inv-reidite-door-click.png",
        ΔⵠΔⲆΔΔⵠ: "img/inv-reidite-spike-out.png",
        ⵠΔΔⲆⵠⲆⲆ: "img/inv-reidite-spike-in.png",
        ⵠⲆⲆᐃⲆΔΔ: "img/inv-reidite-spike-click.png",
        ΔΔΔⵠⲆⲆⲆ: "img/inv-reidite-wall-out.png",
        ΔⲆΔⲆᐃⵠᐃ: "img/inv-reidite-wall-in.png",
        ⲆΔΔⵠⵠΔⲆ: "img/inv-reidite-wall-click.png",
        ⲆⲆⵠᐃⵠⵠΔ: "img/day-reidite-wall.png",
        ⲆᐃⲆⵠⲆⵠᐃ: "img/night-reidite-wall.png",
        ΔᐃⲆⲆΔᐃΔ: "img/day-reidite-door.png",
        ΔᐃᐃᐃⲆⵠⵠ: "img/night-reidite-door.png",
        ᐃⲆΔⲆⵠΔⲆ: "img/day-reidite-spike.png",
        ΔᐃᐃᐃⵠᐃΔ: "img/night-reidite-spike.png",
        ᐃⲆΔᐃⵠⵠᐃ: "img/day-reidite-spike-door.png",
        ΔⲆⵠᐃᐃⲆᐃ: "img/night-reidite-spike-door.png",
        ⵠⵠᐃᐃᐃⵠⵠ: "img/inv-reidite-pickaxe-out.png",
        ᐃᐃⲆⲆΔⵠΔ: "img/inv-reidite-pickaxe-in.png",
        ⲆⵠⵠⲆᐃᐃⲆ: "img/inv-reidite-pickaxe-click.png",
        ΔᐃΔᐃᐃⲆᐃ: "img/day-reidite-pickaxe.png",
        ᐃⵠᐃᐃᐃᐃΔ: "img/night-reidite-pickaxe.png",
        ΔᐃΔΔᐃᐃⲆ: "img/inv-reidite-hammer-out.png",
        ⲆⲆⵠᐃΔΔᐃ: "img/inv-reidite-hammer-in.png",
        ᐃΔⵠⲆᐃⲆⵠ: "img/inv-reidite-hammer-click.png",
        ᐃᐃⲆΔᐃⲆⲆ: "img/day-reidite-hammer.png",
        ⲆⲆⵠⲆⲆΔΔ: "img/night-reidite-hammer.png",
        ⲆⵠⵠᐃⲆⲆΔ: "img/day-watermelon1.png",
        ⵠᐃⲆⲆⲆᐃⲆ: "img/night-watermelon1.png",
        ᐃᐃⲆᐃᐃⲆᐃ: "img/day-watermelon-dried1.png",
        ᐃⲆΔⵠΔΔⲆ: "img/night-watermelon-dried1.png",
        ⵠⲆⵠΔᐃⲆΔ: "img/inv-watermelon-out.png",
        ΔⵠⵠⵠⵠᐃⲆ: "img/inv-watermelon-in.png",
        ⲆΔᐃⲆᐃΔᐃ: "img/inv-watermelon-click.png",
        ΔᐃᐃⵠΔᐃⵠ: "img/day-boat.png",
        ⲆΔⵠⲆⵠᐃⵠ: "img/night-boat.png",
        ⲆΔⲆⲆⵠΔᐃ: "img/day-boat-wave.png",
        ᐃⲆΔᐃΔΔⵠ: "img/night-boat-wave.png",
        ⵠᐃⵠᐃⲆΔⵠ: "img/inv-boat-out.png",
        ⵠⲆⲆᐃⲆᐃⵠ: "img/inv-boat-in.png",
        ⲆΔⲆᐃⵠᐃⵠ: "img/inv-boat-click.png",
        ⵠⲆⵠⲆᐃᐃᐃ: "img/day-plane.png",
        ΔΔΔⲆΔⲆⲆ: "img/night-plane.png",
        ᐃΔⵠⵠᐃⵠⵠ: "img/inv-plane-out.png",
        ⵠⵠⵠΔⲆⵠᐃ: "img/inv-plane-in.png",
        ᐃⲆᐃⵠᐃΔᐃ: "img/inv-plane-click.png",
        ⵠⵠⵠΔⲆⵠⲆ: "img/day-sled.png",
        ⵠⵠⲆⲆᐃᐃΔ: "img/night-sled.png",
        ᐃΔΔⲆΔⵠΔ: "img/day-sled-wave.png",
        ᐃⲆᐃᐃΔⵠⲆ: "img/night-sled-wave.png",
        ᐃⵠⵠΔⲆΔⵠ: "img/inv-sled-out.png",
        ⵠⲆΔⵠⲆΔᐃ: "img/inv-sled-in.png",
        ᐃⲆⲆᐃᐃᐃΔ: "img/inv-sled-click.png",
        ᐃΔⲆⲆΔΔᐃ: "img/day-pirate-hat.png",
        ᐃⲆᐃⲆΔΔΔ: "img/night-pirate-hat.png",
        ⲆΔⲆΔⵠᐃⵠ: "img/inv-pirate-hat-out.png",
        ΔᐃⲆᐃⲆⲆⵠ: "img/inv-pirate-hat-in.png",
        ΔᐃΔⵠⲆⲆΔ: "img/inv-pirate-hat-click.png",
        ᐃᐃΔᐃⲆⲆΔ: "img/day-penguin.png",
        ⲆⲆⲆᐃⲆᐃΔ: "img/night-penguin.png",
        ⵠᐃⵠΔⲆΔΔ: "img/hurt-penguin.png",
        ⲆⵠⵠⲆΔ: "img/inv-penguin-feather-click.png",
        ⲆⲆⲆΔᐃ: "img/inv-hawk-feather-click.png",
        ᐃΔⲆⵠⲆᐃᐃ: "img/day-boar1.png",
        ΔᐃᐃΔᐃⵠᐃ: "img/day-boar1-tamed.png",
        ΔᐃᐃⵠⲆΔΔ: "img/day-boar1-angry.png",
        ⵠᐃᐃⵠⲆⵠⵠ: "img/night-boar1.png",
        ΔⲆⵠⲆΔΔⲆ: "img/night-boar1-tamed.png",
        ⲆᐃⵠΔΔⲆᐃ: "img/night-boar1-angry.png",
        ⲆⲆᐃΔᐃᐃΔ: "img/inv-mount-boar-out.png",
        ⲆΔΔⲆᐃΔΔ: "img/inv-mount-boar-in.png",
        ⵠᐃⵠⵠⲆⲆⵠ: "img/inv-mount-boar-click.png",
        ⲆⵠⵠⲆⲆⵠΔ: "img/day-hurt-boar1.png",
        ⵠΔΔⵠⵠᐃⲆ: "img/boar1-step.png",
        ᐃⵠᐃᐃᐃΔⲆ: "img/day-saddle1.png",
        ᐃⵠΔⵠⲆⵠⲆ: "img/night-saddle1.png",
        ᐃᐃⵠⲆΔᐃᐃ: "img/inv-saddle-out.png",
        ΔΔⵠΔΔⲆᐃ: "img/inv-saddle-in.png",
        ᐃⵠⲆᐃᐃᐃᐃ: "img/inv-saddle-click.png",
        ᐃⵠᐃᐃⵠΔᐃ: "img/day-magic-wand0.png",
        ⵠᐃⵠΔᐃⵠⲆ: "img/night-magic-wand0.png",
        ᐃΔⵠᐃΔᐃⵠ: "img/day-light-wand1.png",
        ᐃⲆΔΔΔⵠᐃ: "img/night-light-wand1.png",
        ᐃᐃⵠⵠᐃⲆΔ: "img/inv-magic-wand0-out.png",
        ⲆᐃⲆᐃⵠΔΔ: "img/inv-magic-wand0-in.png",
        ᐃᐃΔᐃⲆᐃΔ: "img/inv-magic-wand0-click.png",
        ⵠⲆᐃⵠⵠΔᐃ: "img/day-magic-wand1.png",
        ΔⵠΔⲆΔⲆΔ: "img/night-magic-wand1.png",
        ΔⵠᐃᐃᐃΔᐃ: "img/day-light-wand0.png",
        ΔΔⵠᐃⵠΔⲆ: "img/night-light-wand0.png",
        ⵠᐃⵠⲆⲆⲆⲆ: "img/inv-magic-wand1-out.png",
        ⲆⲆⲆΔⲆⲆⵠ: "img/inv-magic-wand1-in.png",
        ⵠᐃᐃᐃΔΔⲆ: "img/inv-magic-wand1-click.png",
        ⲆⲆΔᐃⵠᐃᐃ: "img/day-firefly.png",
        ΔⵠⲆⵠᐃᐃᐃ: "img/night-firefly.png",
        ⲆⵠⲆᐃⵠΔᐃ: "img/hurt-firefly.png",
        ΔᐃΔⵠΔΔⵠ: "img/inv-firefly-out.png",
        ⵠⵠΔⲆⲆⵠΔ: "img/inv-firefly-in.png",
        ΔⲆⲆΔᐃΔᐃ: "img/inv-firefly-click.png",
        ⵠΔᐃΔᐃⵠⲆ: "img/day-baby-dragon.png",
        ᐃⲆᐃΔⲆΔⲆ: "img/night-baby-dragon.png",
        ⲆⲆᐃᐃⲆΔΔ: "img/day-baby-dragon-angry.png",
        ⵠⵠΔΔΔⵠΔ: "img/night-baby-dragon-angry.png",
        ⲆᐃΔⲆⵠⲆⲆ: "img/day-baby-dragon-tamed.png",
        ⵠᐃᐃⵠΔⵠⲆ: "img/night-baby-dragon-tamed.png",
        ⵠⲆⵠⵠᐃᐃᐃ: "img/day-wing-dragon-left-angry.png",
        ᐃᐃⲆΔⲆⵠⵠ: "img/night-dragon-wing-left-angry.png",
        ⵠⵠⲆᐃΔᐃⲆ: "img/day-wing-dragon-right-angry.png",
        ⲆⲆⵠᐃⵠΔΔ: "img/night-dragon-wing-right-angry.png",
        ᐃⲆⲆⲆΔⵠⲆ: "img/day-wing-dragon-left-tamed.png",
        ᐃΔΔⲆΔⲆⲆ: "img/night-dragon-wing-left-tamed.png",
        ⲆᐃᐃΔᐃΔⵠ: "img/day-wing-dragon-right-tamed.png",
        ΔΔⲆΔⲆⵠⵠ: "img/night-wing-dragon-right-tamed.png",
        ⵠΔᐃᐃᐃΔⵠ: "img/day-wing-dragon-left.png",
        ᐃᐃᐃⲆⵠΔΔ: "img/night-dragon-wing-left.png",
        ⲆᐃΔᐃᐃᐃⲆ: "img/day-wing-dragon-right.png",
        ΔᐃᐃΔⵠΔⵠ: "img/night-wing-dragon-right.png",
        ΔΔⵠᐃΔⲆᐃ: "img/hurt-baby-dragon.png",
        ΔΔⵠᐃΔⵠⲆ: "img/hurt-baby-dragon-wing-left.png",
        ΔΔᐃⲆⲆᐃΔ: "img/hurt-baby-dragon-wing-right.png",
        ⵠΔⵠΔⵠⵠΔ: "img/inv-baby-dragon-out.png",
        ⵠᐃⲆⲆΔΔᐃ: "img/inv-baby-dragon-in.png",
        ΔⲆⵠⵠⲆⲆⲆ: "img/inv-baby-dragon-click.png",
        ᐃΔⵠⵠⲆΔⵠ: "img/day-baby-lava.png",
        ᐃᐃΔΔᐃᐃᐃ: "img/night-baby-lava.png",
        ᐃᐃⵠⲆⲆⵠⵠ: "img/day-baby-lava-angry.png",
        ⵠⲆΔᐃⲆⲆⵠ: "img/night-baby-lava-angry.png",
        ΔΔᐃΔᐃᐃᐃ: "img/day-baby-lava-tamed.png",
        ᐃᐃΔᐃΔⲆΔ: "img/night-baby-lava-tamed.png",
        ⵠᐃⲆⵠⲆⲆⲆ: "img/day-wing-lava-left-angry.png",
        ⲆⵠᐃᐃΔᐃΔ: "img/night-wing-lava-left-angry.png",
        ⵠⲆⵠⵠΔΔᐃ: "img/day-wing-lava-right-angry.png",
        ΔⵠⵠᐃΔΔΔ: "img/night-wing-lava-right-angry.png",
        ᐃⵠⲆⲆⲆⵠᐃ: "img/day-wing-lava-left-tamed.png",
        ᐃⵠⵠⵠⲆⲆΔ: "img/night-wing-lava-left-tamed.png",
        ΔᐃΔᐃᐃⵠⲆ: "img/day-wing-lava-right-tamed.png",
        ⵠᐃᐃⵠⲆⲆⲆ: "img/night-wing-lava-right-tamed.png",
        ΔᐃⲆⲆΔⵠΔ: "img/day-wing-lava-left.png",
        ⲆⵠΔⵠⲆᐃᐃ: "img/night-wing-lava-left.png",
        ⵠⵠᐃⲆⵠⵠᐃ: "img/day-wing-lava-right.png",
        ⲆⲆⵠⵠⲆⵠⲆ: "img/night-wing-lava-right.png",
        ⲆⵠΔΔⵠᐃΔ: "img/hurt-baby-lava.png",
        ⲆⵠⲆᐃΔⵠⲆ: "img/hurt-baby-lava-wing-left.png",
        ⲆᐃⲆⵠΔⲆⵠ: "img/hurt-baby-lava-wing-right.png",
        ΔⲆᐃΔⵠⲆⲆ: "img/inv-baby-lava-out.png",
        ᐃΔΔⲆᐃΔᐃ: "img/inv-baby-lava-in.png",
        ⲆⲆΔΔΔⵠⲆ: "img/inv-baby-lava-click.png",
        ⵠⵠΔⵠΔΔⵠ: "img/day-falcon.png",
        ᐃⲆⲆΔⲆΔⵠ: "img/night-falcon.png",
        ⲆΔⲆΔⲆᐃᐃ: "img/day-falcon-angry.png",
        ᐃⲆⲆⲆᐃΔΔ: "img/night-falcon-angry.png",
        ⲆΔⲆᐃᐃᐃⲆ: "img/day-falcon-ground.png",
        ⵠΔⲆΔⲆᐃⲆ: "img/night-falcon-ground.png",
        ΔᐃΔΔᐃⵠᐃ: "img/day-falcon-ground-angry.png",
        ΔⲆⲆⵠⲆΔⵠ: "img/night-falcon-ground-angry.png",
        ᐃᐃΔΔΔⲆΔ: "img/day-falcon-wings-left.png",
        ⲆⵠⲆΔⵠΔΔ: "img/night-falcon-wings-left.png",
        ⵠΔⲆΔⲆⲆⲆ: "img/day-falcon-wings-right.png",
        ⵠΔⵠⵠᐃⵠⲆ: "img/night-falcon-wings-right.png",
        ⵠᐃⵠⵠΔⲆᐃ: "img/day-falcon-angry-wings-left.png",
        ⲆᐃᐃᐃⵠⵠⲆ: "img/night-falcon-angry-wings-left.png",
        ⲆΔⲆΔΔᐃΔ: "img/day-falcon-angry-wings-right.png",
        ᐃᐃΔᐃᐃⲆⲆ: "img/night-falcon-angry-wings-right.png",
        ΔΔⲆᐃᐃᐃΔ: "img/day-falcon-wings-left-tamed.png",
        ⲆⲆᐃⵠΔᐃⲆ: "img/night-falcon-wings-left-tamed.png",
        ΔⵠⵠΔⲆⲆⲆ: "img/day-falcon-wings-right-tamed.png",
        ΔΔᐃⲆᐃⲆⲆ: "img/night-falcon-wings-right-tamed.png",
        ᐃΔⲆΔⵠᐃⵠ: "img/day-falcon-tamed.png",
        ᐃⲆⵠΔⵠⲆᐃ: "img/night-falcon-tamed.png",
        ΔⲆΔⵠⲆΔΔ: "img/hurt-falcon-ground.png",
        ⲆⲆᐃⵠⲆⲆᐃ: "img/hurt-falcon.png",
        ⵠⲆⵠΔΔⵠⲆ: "img/hurt-falcon-wings-left.png",
        ᐃⲆⲆᐃΔΔⵠ: "img/hurt-falcon-wings-right.png",
        ΔΔⲆⵠᐃⵠᐃ: "img/inv-falcon-out.png",
        ⵠΔⲆⵠᐃᐃᐃ: "img/inv-falcon-in.png",
        ᐃΔⵠᐃΔⵠⲆ: "img/inv-falcon-click.png",
        ⵠⲆⲆΔᐃᐃⵠ: "img/day-crab-boss.png",
        ⵠⲆΔΔⲆΔⲆ: "img/night-crab-boss.png",
        Δᐃⵠᐃᐃᐃⵠ: "img/day-crab-boss-angry.png",
        ⵠΔᐃΔΔᐃᐃ: "img/night-crab-boss-angry.png",
        ᐃⵠΔⵠᐃᐃᐃ: "img/day-crab-boss-tamed.png",
        ⲆⲆⵠΔᐃΔⲆ: "img/night-crab-boss-tamed.png",
        ⵠᐃⵠⵠΔᐃⵠ: "img/day-crab-boss-claw-left-attack.png",
        ⲆⲆⲆᐃΔⵠⲆ: "img/night-crab-boss-claw-left-attack.png",
        ⵠⵠⵠⵠⵠⲆΔ: "img/day-crab-boss-claw-right-attack.png",
        ΔⲆⵠΔⲆᐃᐃ: "img/night-crab-boss-claw-right-attack.png",
        ⵠⵠⵠⵠⲆⵠᐃⲆΔ: "img/day-crab-boss-claw-left-tamed.png",
        ⵠᐃΔⵠᐃⵠΔⵠᐃ: "img/night-crab-boss-claw-left-tamed.png",
        ΔΔᐃⵠⲆⵠᐃΔⲆ: "img/day-crab-boss-claw-right-tamed.png",
        ⲆⲆⲆΔⲆⵠᐃᐃΔ: "img/night-crab-boss-claw-right-tamed.png",
        ᐃⵠⵠᐃΔⵠⵠ: "img/day-crab-boss-claw-left.png",
        ᐃΔⲆⲆᐃⲆΔ: "img/night-crab-boss-claw-left.png",
        ⲆⲆⲆᐃⲆᐃⵠ: "img/day-crab-boss-claw-right.png",
        ⲆΔⵠⲆΔΔᐃ: "img/night-crab-boss-claw-right.png",
        ⵠᐃΔⵠᐃⵠⵠ: "img/hurt-crab-boss.png",
        ᐃⵠⲆⲆⲆⵠⵠ: "img/hurt-crab-boss-claw-left.png",
        ⵠⵠᐃⵠᐃᐃⵠ: "img/hurt-crab-boss-claw-right.png",
        ⵠⵠⵠⲆᐃᐃⵠ: "img/heal-crab-boss.png",
        ΔⵠᐃⲆΔⵠᐃ: "img/heal-crab-boss-claw-left.png",
        ΔⲆΔⵠᐃΔⲆ: "img/heal-crab-boss-claw-right.png",
        ⲆΔⲆⵠⵠⲆᐃ: "img/crab-step.png",
        ᐃⲆᐃⲆᐃΔⲆ: "img/inv-crab-boss-out.png",
        ⵠⲆΔΔⲆΔΔ: "img/inv-crab-boss-in.png",
        ΔΔⵠⲆᐃᐃⵠ: "img/inv-crab-boss-click.png",
        ΔᐃⵠⵠΔⵠΔ: "img/day-cactus10.png",
        ⲆⲆⵠΔΔⵠⲆ: "img/night-cactus10.png",
        ΔⲆΔⵠΔΔΔ: "img/inv-cactus-out.png",
        ΔᐃΔⲆⲆΔⵠ: "img/inv-cactus-in.png",
        ᐃΔᐃⵠΔΔⵠ: "img/inv-cactus-click.png",
        ⲆΔⲆⵠⲆΔⵠ: "img/day-scorpion.png",
        ᐃⲆᐃⵠΔⵠⵠ: "img/night-scorpion.png",
        ⲆᐃᐃᐃⵠⵠΔ: "img/day-scorpion-hand-left.png",
        ⲆΔⲆⵠⲆΔΔ: "img/night-scorpion-hand-left.png",
        ᐃⲆⲆᐃⵠᐃⲆ: "img/day-scorpion-hand-right.png",
        ᐃᐃⵠᐃⵠⲆⵠ: "img/night-scorpion-hand-right.png",
        ᐃⲆⵠⲆⲆΔΔ: "img/hurt-scorpion.png",
        ⲆΔⵠⵠⵠᐃΔ: "img/hurt-scorpion-hand-left.png",
        ⵠᐃⲆⲆⲆⲆⵠ: "img/hurt-scorpion-hand-right.png",
        ⵠⵠⲆⲆⲆⵠⲆ: "img/day-vulture.png",
        ⲆᐃⵠⲆⵠⵠⲆ: "img/night-vulture.png",
        ⲆᐃⵠΔΔⵠΔ: "img/day-vulture-angry.png",
        ΔⵠΔΔᐃΔᐃ: "img/night-vulture-angry.png",
        ΔᐃⵠⲆⵠⲆⲆ: "img/day-vulture-ground.png",
        ⲆΔⲆⲆᐃⲆΔ: "img/night-vulture-ground.png",
        ΔⲆΔΔⲆⵠⲆ: "img/day-vulture-ground-angry.png",
        ⵠᐃᐃΔⵠΔⵠ: "img/night-vulture-ground-angry.png",
        ⲆΔᐃⲆⵠⲆΔ: "img/day-vulture-wings-left.png",
        ⵠⵠΔⵠΔⵠⲆ: "img/night-vulture-wings-left.png",
        ΔᐃⲆΔΔⵠⲆ: "img/day-vulture-wings-right.png",
        ⲆⲆⵠᐃⲆⵠᐃ: "img/night-vulture-wings-right.png",
        ᐃᐃⵠΔᐃᐃⲆ: "img/day-vulture-angry-wings-left.png",
        ΔΔᐃΔΔⲆΔ: "img/night-vulture-angry-wings-left.png",
        ΔⲆΔΔⲆⵠΔ: "img/day-vulture-angry-wings-right.png",
        ΔⲆᐃⲆⲆⵠⲆ: "img/night-vulture-angry-wings-right.png",
        ⵠΔΔΔᐃⵠⲆ: "img/day-vulture-wings-left-tamed.png",
        ⵠⵠΔΔᐃⲆⵠ: "img/night-vulture-wings-left-tamed.png",
        ᐃᐃⲆⲆΔΔᐃ: "img/day-vulture-wings-right-tamed.png",
        ᐃⲆΔⲆⵠⲆΔ: "img/night-vulture-wings-right-tamed.png",
        ΔⵠΔᐃⲆΔᐃ: "img/day-vulture-tamed.png",
        ΔⲆⲆΔⲆⲆⲆ: "img/night-vulture-tamed.png",
        ⲆΔΔᐃⵠⲆⲆ: "img/hurt-vulture-ground.png",
        ΔⲆⵠΔⲆⵠΔ: "img/hurt-vulture.png",
        ⲆΔⵠⵠⲆΔⲆ: "img/hurt-vulture-wings-left.png",
        ΔⵠᐃⲆΔΔᐃ: "img/hurt-vulture-wings-right.png",
        ⲆⲆⵠⲆΔⵠⵠ: "img/day-aloe-vera.png",
        ΔΔⵠᐃᐃⲆΔ: "img/night-aloe-vera.png",
        ᐃⲆᐃⵠᐃⵠⵠ: "img/inv-aloe-vera-out.png",
        ΔⵠⵠⲆⲆΔⵠ: "img/inv-aloe-vera-in.png",
        ⲆΔΔⵠᐃΔᐃ: "img/inv-aloe-vera-click.png",
        ⵠΔᐃⲆⵠⲆᐃ: "img/day-aloe-vera-grown.png",
        ΔΔᐃⵠᐃΔⵠ: "img/night-aloe-vera-grown.png",
        ᐃⲆᐃᐃᐃⵠⵠ: "img/day-aloe-vera-dried.png",
        ⵠΔⵠΔᐃⲆΔ: "img/night-aloe-vera-dried.png",
        ᐃΔᐃⲆⵠⲆᐃ: "img/day-turban1.png",
        ⲆⵠᐃΔΔⲆᐃ: "img/night-turban1.png",
        ⵠⵠᐃⵠⵠᐃⲆ: "img/day-turban2.png",
        ⵠⲆⵠⲆΔⵠᐃ: "img/night-turban2.png",
        ⲆⵠⵠΔΔⵠⵠ: "img/inv-turban2-out.png",
        ⲆⲆⲆⲆⲆⲆᐃ: "img/inv-turban2-in.png",
        ⵠⲆⵠⵠΔⲆⵠ: "img/inv-turban2-click.png",
        ⵠᐃᐃΔΔΔΔ: "img/inv-turban1-out.png",
        ⵠⲆⵠⲆⲆΔᐃ: "img/inv-turban1-in.png",
        ΔⲆⵠⵠᐃᐃΔ: "img/inv-turban1-click.png",
        ᐃΔⲆᐃᐃⵠΔ: "img/day-pitchfork2.png",
        ΔΔᐃⲆⵠⵠᐃ: "img/night-pitchfork2.png",
        ᐃⲆΔᐃΔⵠⲆ: "img/inv-pitchfork2-out.png",
        ⲆⲆⵠᐃⵠⲆΔ: "img/inv-pitchfork2-in.png",
        ⵠΔⵠᐃᐃΔⵠ: "img/inv-pitchfork2-click.png",
        ΔΔⲆᐃΔⲆΔ: "img/inv-gold-fork-click.png",
        ⲆⵠⵠᐃΔΔⲆ: "img/inv-pilot-glasses-click.png",
        ΔΔᐃΔⵠⵠⵠ: "img/day-pilot-helmet.png",
        ΔⲆΔⲆⵠᐃⵠ: "img/night-pilot-helmet.png",
        ⵠⲆᐃⵠᐃᐃΔ: "img/inv-pilot-helmet-out.png",
        ⵠⵠⲆᐃⵠⲆᐃ: "img/inv-pilot-helmet-in.png",
        ⵠⲆⲆⲆᐃΔⵠ: "img/inv-pilot-helmet-click.png",
        ⵠⲆⲆⲆᐃⵠᐃⵠⲆ: "img/day-sandworm0.png",
        ⲆᐃᐃⵠⲆΔᐃ: "img/day-sandworm1.png",
        ᐃⵠⲆⵠΔⵠᐃ: "img/day-sandworm2.png",
        ⲆⲆᐃⲆⲆΔⵠⲆⵠ: "img/night-sandworm0.png",
        ⲆⵠⵠⲆⲆΔⲆ: "img/night-sandworm1.png",
        ᐃΔⲆⲆⲆⲆⵠ: "img/night-sandworm2.png",
        ⵠᐃⵠⵠⵠⵠⵠ: "img/hurt-sandworm0.png",
        ᐃᐃⵠΔⵠᐃᐃ: "img/hurt-sandworm1.png",
        ⵠΔⲆᐃⲆᐃΔ: "img/hurt-sandworm2.png",
        ⲆⲆᐃⵠᐃ: "img/inv-vulture-feather-click.png",
        ΔⵠⲆΔⵠⵠΔ: "img/day-emerald0.png",
        ⲆᐃⵠⲆⵠⵠᐃ: "img/night-emerald0.png",
        ⲆΔⲆΔⲆᐃⵠ: "img/day-emerald1.png",
        ⵠᐃⵠⲆⲆᐃⲆ: "img/night-emerald1.png",
        ⲆᐃⵠᐃⲆᐃⲆ: "img/day-emerald2.png",
        ᐃⵠΔᐃᐃᐃᐃ: "img/night-emerald2.png",
        ⵠᐃΔΔⵠ: "img/inv-emerald-click.png",
        ᐃᐃⵠⲆⲆΔⵠ: "img/inv-sworm-juice-out.png",
        ΔⲆⵠᐃⵠⲆⵠ: "img/inv-sworm-juice-in.png",
        ⵠᐃᐃⲆⵠᐃⵠ: "img/inv-sworm-juice-click.png",
        ⲆΔᐃᐃᐃᐃᐃ: "img/day-point-machine.png",
        ΔΔᐃⲆⲆⵠⵠ: "img/night-point-machine.png",
        ᐃᐃΔⵠⲆᐃⵠ: "img/day-point-machine-hole.png",
        ᐃᐃⵠⵠᐃᐃΔ: "img/night-point-machine-hole.png",
        ΔΔⵠⲆⲆⲆⲆ: "img/day-point-machine-ground.png",
        ⵠⵠᐃⵠΔΔᐃ: "img/night-point-machine-ground.png",
        ᐃⲆⵠⵠⲆⲆⲆ: "img/day-point-machine-rotate.png",
        ᐃⵠⵠⲆⵠⵠΔ: "img/night-point-machine-rotate.png",
        ⵠⲆⵠᐃᐃⲆᐃ: "img/inv-point-machine-out.png",
        ᐃⵠⵠⲆᐃⲆⵠ: "img/inv-point-machine-in.png",
        ΔᐃⲆᐃⲆᐃⵠ: "img/inv-point-machine-click.png",
        ᐃⲆᐃⵠᐃᐃⵠ: "img/day-extractor-machine0-stone.png",
        ΔΔⲆⵠᐃᐃⵠ: "img/night-extractor-machine0-stone.png",
        ⲆΔⲆⲆⲆΔⵠ: "img/day-extractor-machine-stone.png",
        ⲆᐃⲆΔΔΔⲆ: "img/night-extractor-machine-stone.png",
        ΔᐃⲆΔΔⵠⵠ: "img/inv-extractor-machine-stone-out.png",
        ⲆⵠΔᐃⵠⵠⵠ: "img/inv-extractor-machine-stone-in.png",
        ᐃᐃⲆⵠⵠⲆⲆ: "img/inv-extractor-machine-stone-click.png",
        ΔⵠⲆΔⵠⲆⲆ: "img/day-extractor-machine0-gold.png",
        Ⲇᐃᐃⵠⵠᐃᐃ: "img/night-extractor-machine0-gold.png",
        ⲆΔΔΔⲆΔⵠ: "img/day-extractor-machine-gold.png",
        ᐃⲆᐃⲆⵠⲆᐃ: "img/night-extractor-machine-gold.png",
        ⵠⲆⵠⲆⵠΔΔ: "img/inv-extractor-machine-gold-out.png",
        ᐃⵠΔΔᐃᐃⵠ: "img/inv-extractor-machine-gold-in.png",
        ᐃᐃⵠᐃⲆⵠⵠ: "img/inv-extractor-machine-gold-click.png",
        ⲆᐃⲆᐃⲆΔΔ: "img/day-extractor-machine0-diamond.png",
        ᐃⲆⵠⵠⵠⲆⵠ: "img/night-extractor-machine0-diamond.png",
        ΔⲆⵠⲆⲆⲆᐃ: "img/day-extractor-machine-diamond.png",
        ⲆⵠᐃⵠⵠⲆⲆ: "img/night-extractor-machine-diamond.png",
        ΔⲆⲆⵠⵠΔΔ: "img/inv-extractor-machine-diamond-out.png",
        ⲆᐃⲆⵠᐃⵠⵠ: "img/inv-extractor-machine-diamond-in.png",
        ⵠⲆⲆΔΔᐃΔ: "img/inv-extractor-machine-diamond-click.png",
        Δⵠᐃⵠⵠᐃⵠ: "img/day-extractor-machine0-amethyst.png",
        ᐃⵠΔᐃΔⲆⲆ: "img/night-extractor-machine0-amethyst.png",
        ⲆⵠⵠⵠΔΔᐃ: "img/day-extractor-machine-amethyst.png",
        ᐃⵠⲆᐃᐃⵠⲆ: "img/night-extractor-machine-amethyst.png",
        ΔᐃⵠΔΔΔⵠ: "img/inv-extractor-machine-amethyst-out.png",
        ᐃⵠΔⵠΔΔΔ: "img/inv-extractor-machine-amethyst-in.png",
        ΔⵠᐃⲆᐃᐃΔ: "img/inv-extractor-machine-amethyst-click.png",
        ⵠΔΔⵠⵠⵠⵠ: "img/day-extractor-machine0-reidite.png",
        ⲆΔᐃΔⲆΔⲆ: "img/night-extractor-machine0-reidite.png",
        ΔᐃᐃᐃⲆⵠⲆ: "img/day-extractor-machine-reidite.png",
        ⲆⲆᐃΔᐃⵠᐃ: "img/night-extractor-machine-reidite.png",
        ᐃᐃᐃᐃⵠⵠⲆ: "img/inv-extractor-machine-reidite-out.png",
        ΔⵠΔΔⵠΔⵠ: "img/inv-extractor-machine-reidite-in.png",
        ᐃⲆΔⵠⲆᐃⵠ: "img/inv-extractor-machine-reidite-click.png",
        ΔⵠⲆⲆᐃᐃᐃ: "img/extractor-cases.png",
        ΔΔⲆⵠᐃΔΔ: "img/day-golden-hen.png",
        ⵠⲆⲆᐃⲆⲆⵠ: "img/night-golden-hen.png",
        ΔⲆⲆᐃΔΔΔ: "img/day-golden-chicken.png",
        ⲆⵠᐃᐃⵠⵠΔ: "img/night-golden-chicken.png",
        ⵠᐃⲆⲆᐃΔⵠ: "img/hurt-golden-hen.png",
        ⵠΔΔΔᐃⵠᐃ: "img/hurt-golden-chicken.png",
        ⵠⲆⵠⵠⵠΔΔ: "img/logo-interface.png",
        ⲆⲆⲆΔⵠⵠⲆ: "img/forest-mode-hover.png",
        ᐃⲆⲆⵠⲆⲆⵠ: "img/normal-mode-hover.png",
        ΔΔᐃⲆΔΔᐃ: "img/vampire-mode-hover.png",
        ᐃⲆΔΔⵠᐃᐃ: "img/zombie-mode-hover.png",
        ⲆⲆⲆⲆⵠⲆⵠ: "img/community-mode-hover2.png",
        ᐃⵠᐃΔᐃΔⵠ: "img/experimental-mode-hover.png",
        ᐃᐃΔⵠᐃⲆⲆ: "img/zombie-mode-out.png",
        ⵠΔΔⲆⲆΔᐃ: "img/zombie-mode-in.png",
        ⲆⲆⵠⵠⵠⲆⲆ: "img/zombie-mode-click.png",
        ᐃⵠᐃⲆᐃⲆΔ: "img/vampire-mode-out.png",
        ⵠΔᐃᐃⲆⵠΔ: "img/vampire-mode-in.png",
        ᐃᐃⵠⲆᐃᐃᐃ: "img/vampire-mode-click.png",
        ⵠΔΔⲆⲆᐃᐃ: "img/normal-mode-out.png",
        ᐃⲆⲆᐃⵠᐃⵠ: "img/normal-mode-in.png",
        ΔⵠⵠⲆⲆⵠᐃ: "img/normal-mode-click.png",
        ΔⵠⵠⲆⲆΔΔ: "img/forest-mode-out.png",
        ᐃΔⲆᐃΔⲆΔ: "img/forest-mode-in.png",
        ᐃΔⵠΔⲆᐃᐃ: "img/forest-mode-click.png",
        ᐃⵠᐃᐃΔΔⵠ: "img/community-mode-out.png",
        ⲆᐃⵠᐃⲆⵠΔ: "img/community-mode-in.png",
        ᐃΔⵠⵠⲆⲆⲆ: "img/community-mode-click.png",
        ΔΔⲆΔᐃⵠⵠ: "img/experimental-modes-out.png",
        ᐃᐃᐃΔᐃΔᐃ: "img/experimental-modes-in.png",
        ⲆᐃⲆΔΔⲆⵠ: "img/experimental-modes-click.png",
        ΔΔⲆⲆⲆᐃΔ: "img/youtube-button-out.png",
        ⵠⵠᐃⲆᐃⵠⲆ: "img/youtube-button-in.png",
        ⲆΔⲆⵠⵠᐃⵠ: "img/youtube-button-click.png",
        ΔⲆΔΔⵠΔⵠ: "img/wiki-button-out.png",
        ⲆⵠΔⵠᐃⲆᐃ: "img/wiki-button-in.png",
        ΔⲆⲆⵠⵠⵠΔ: "img/wiki-button-click.png",
        ᐃⲆΔⲆⵠᐃⵠ: "img/twitter-button-out.png",
        ⵠΔᐃᐃᐃⲆΔ: "img/twitter-button-in.png",
        ᐃⲆᐃΔⵠⵠᐃ: "img/twitter-button-click.png",
        ᐃΔΔΔΔΔⲆ: "img/facebook-button-out.png",
        ΔᐃⲆᐃᐃΔΔ: "img/facebook-button-in.png",
        ⲆⲆⵠᐃⵠΔⲆ: "img/facebook-button-click.png",
        ΔΔⲆⵠⲆⲆΔ: "img/reddit-button-out.png",
        ⲆⵠΔⲆⵠⲆⵠ: "img/reddit-button-in.png",
        ᐃᐃⲆΔΔⲆᐃ: "img/reddit-button-click.png",
        ᐃⵠΔⵠΔⲆⵠ: "img/discord-button-out.png",
        ⵠΔⲆᐃΔᐃⵠ: "img/discord-button-in.png",
        ᐃᐃΔⲆⲆⵠᐃ: "img/discord-button-click.png",
        ⲆⵠΔΔⵠⵠⲆ: "img/merch-button-out.png",
        ᐃⲆᐃⲆᐃⲆⵠ: "img/merch-button-in.png",
        ᐃᐃᐃΔⵠᐃⵠ: "img/merch-button-click.png",
        ⵠⲆᐃⵠⵠⲆᐃⵠⲆ: "img/terminal-button-out.png",
        ⲆᐃⵠΔⲆᐃⵠⵠⵠ: "img/terminal-button-in.png",
        ⵠⲆᐃΔⲆᐃᐃⲆΔ: "img/terminal-button-click.png",
        ⵠΔⲆΔⲆⲆΔ: "img/restart-out.png",
        ⲆⵠΔⲆΔΔⵠ: "img/restart-in.png",
        ΔΔᐃᐃᐃΔⵠ: "img/restart-click.png",
        ⲆⲆᐃᐃⲆⵠⵠ: "img/guide-out.png",
        ⲆⲆΔⲆⵠⲆΔ: "img/guide-in.png",
        ᐃⲆΔΔⵠᐃⲆ: "img/guide-click.png",
        ᐃΔΔΔⲆΔΔ: "img/copy-paste-out.png",
        ⲆᐃⲆⵠΔⵠΔ: "img/copy-paste-in.png",
        ᐃΔΔᐃᐃᐃᐃ: "img/copy-paste-click.png",
        ⵠᐃᐃΔⲆᐃⲆ: "img/link-buttons-bg.png",
        ⲆᐃⵠΔⵠⲆΔ: "img/changelog-box2.png",
        ΔᐃᐃᐃᐃΔΔ: "img/changelog_31.png",
        ⲆⲆⵠⵠᐃⵠΔ: "img/banner-taming.png",
        ⲆⵠⵠⵠⲆΔΔ: "img/profile-button-out.png",
        ᐃΔⲆⵠΔⵠΔ: "img/profile-button-in.png",
        ⲆᐃⵠᐃⲆⲆᐃ: "img/profile-button-click.png",
        ⲆⵠᐃᐃΔΔⲆ: "img/login-button-out.png",
        ⲆⵠᐃⵠΔΔⵠ: "img/login-button-in.png",
        ⲆᐃⲆΔᐃⵠᐃ: "img/login-button-click.png",
        ᐃⵠᐃΔΔᐃᐃ: "img/login-google-out.png",
        ᐃᐃᐃⵠΔⲆⲆ: "img/login-google-in.png",
        ⵠᐃΔⲆⵠΔⵠ: "img/login-google-click.png",
        ΔⵠⵠᐃⲆⲆⵠ: "img/login-facebook-out.png",
        ⲆΔⵠᐃΔⲆΔ: "img/login-facebook-in.png",
        ⲆΔΔΔⲆΔᐃ: "img/login-facebook-click.png",
        ⵠᐃⵠⵠΔⲆΔ: "img/account-box.png",
        ⵠⲆᐃⵠΔᐃΔⲆⲆ: "img/account-under-maintenance.png",
        ⲆⵠΔⵠΔΔⲆ: "img/close-button-account-out.png",
        ΔⵠᐃᐃΔΔᐃ: "img/close-button-account-in.png",
        ⵠⲆᐃᐃᐃⲆⵠ: "img/close-button-account-click.png",
        ⲆⵠΔⲆΔᐃᐃ: "img/play-button-out.png",
        ΔᐃⲆⵠᐃΔᐃ: "img/play-button-in.png",
        ΔΔⲆⵠⵠⵠⲆ: "img/play-button-click.png",
        ⵠΔⲆᐃΔⵠΔⵠᐃ: "img/app-store-badge.png",
        ᐃⲆᐃⵠⲆⵠⵠⵠⲆ: "img/play-store-badge.png",
        ᐃᐃⲆⲆᐃⲆΔΔⲆ: "img/mobile-boxad.png",
        ⲆⲆᐃⵠⲆⵠⲆ: "img/modify-name-out.png",
        ⵠⵠⲆᐃΔⲆⲆ: "img/modify-name-in.png",
        ΔΔᐃⵠⲆⵠⲆ: "img/modify-name-click.png",
        ⵠΔⵠⲆⲆΔⵠ: "img/copy-id-button-out.png",
        ᐃΔⲆΔⲆⵠⵠ: "img/copy-id-button-hover.png",
        ΔⲆⲆᐃⵠΔⵠ: "img/copy-id-button-active.png",
        ⲆΔⵠⵠᐃΔᐃ: "img/yes-button-out.png",
        ⲆΔⲆᐃᐃΔⵠ: "img/yes-button-in.png",
        ᐃⵠᐃᐃΔⵠᐃ: "img/yes-button-click.png",
        ᐃᐃᐃⵠᐃΔⲆ: "img/yes-300-button-out.png",
        ⵠⵠᐃᐃΔΔⲆ: "img/yes-300-button-in.png",
        ⲆⵠⵠΔᐃᐃⵠ: "img/yes-300-button-click.png",
        ⲆΔΔᐃᐃⲆⵠ: "img/no-button-out.png",
        ᐃΔⲆᐃΔᐃⲆ: "img/no-button-in.png",
        ᐃⲆᐃΔⲆⵠⲆ: "img/no-button-click.png",
        ⵠⵠΔᐃⵠⲆⲆ: "img/no-thanks-button-out.png",
        ⲆᐃᐃⲆΔⲆᐃ: "img/no-thanks-button-in.png",
        ⲆⲆⲆᐃᐃⲆⵠ: "img/no-thanks-button-click.png",
        ΔⵠⵠᐃⲆΔⵠ: "img/shop-button-out.png",
        ⲆᐃⲆΔᐃᐃⵠ: "img/shop-button-in.png",
        ⵠⵠⵠⵠⵠᐃⲆ: "img/shop-button-click.png",
        ⵠΔᐃⵠⵠᐃΔ: "img/logout-out.png",
        ⲆΔⲆΔΔΔⵠ: "img/logout-in.png",
        ΔⵠⲆⵠΔⵠⲆ: "img/logout-click.png",
        ᐃΔΔⵠⲆⲆⲆ: "img/terms-button-out.png",
        Ⲇⵠⵠⵠⵠⵠᐃ: "img/terms-button-in.png",
        ⵠᐃⵠΔᐃⵠᐃ: "img/terms-button-click.png",
        ⲆΔⲆᐃⲆΔⲆ: "img/tutorial-icon.png",
        ⵠΔΔΔⵠᐃΔ: "img/skins-icon.png",
        ΔⲆᐃⵠⲆΔΔ: "img/shop-icon.png",
        ΔⲆᐃⲆᐃⲆⲆⲆᐃ: "img/paint-icon.png",
        ᐃΔⲆᐃᐃⵠⲆ: "img/leaderboard-icon.png",
        ᐃⲆΔᐃΔⵠⵠ: "img/start-icon.png",
        ⵠᐃⲆⵠΔΔⲆ: "img/profile-icon.png",
        ᐃᐃΔᐃⵠᐃᐃ: "img/server-access-icon2.png",
        ⲆⵠⵠⲆᐃΔΔ: "img/button-homepage-bg-out.png",
        ⵠⵠΔΔⵠⲆⲆ: "img/button-homepage-bg-in.png",
        ⲆⲆᐃᐃΔⵠᐃ: "img/button-homepage-bg-click.png",
        ⲆΔⲆⲆΔⲆΔ: "img/button-bottom-homepage-bg-out.png",
        ⵠⲆⲆΔⵠᐃⲆ: "img/button-bottom-homepage-bg-in.png",
        ⵠⵠΔᐃⵠΔⵠ: "img/button-bottom-homepage-bg-click.png",
        ⲆᐃⵠΔⲆⲆΔ: "img/lvl-player.png",
        ⲆⵠᐃⲆⲆΔᐃ: "img/avatar-player.png",
        ⵠΔⲆᐃΔᐃΔ: "img/avatar-player1.png",
        ᐃᐃΔⲆⵠΔⵠ: "img/avatar-player2.png",
        ⵠΔΔⵠⲆⲆⲆ: "img/avatar-player3.png",
        ᐃΔΔᐃⵠᐃⵠ: "img/avatar-player4.png",
        ΔᐃΔΔⵠᐃⵠ: "img/avatar-player5.png",
        ᐃΔⲆⲆΔⵠⵠ: "img/avatar-player6.png",
        ᐃΔΔⲆⲆᐃΔ: "img/avatar-player7.png",
        ⵠΔⵠᐃⲆⲆⵠ: "img/avatar-player8.png",
        ⵠᐃᐃΔᐃΔⵠ: "img/avatar-player9.png",
        ᐃⲆᐃᐃⵠᐃⵠ: "img/avatar-player10.png",
        ⲆⵠⵠⲆⵠⲆⵠ: "img/avatar-player11.png",
        ⵠⲆΔᐃᐃΔⲆ: "img/avatar-player12.png",
        ΔΔⲆⵠΔⲆⲆ: "img/avatar-player13.png",
        ⲆᐃⲆΔᐃΔᐃ: "img/avatar-player14.png",
        ᐃᐃΔⲆⲆⵠⵠ: "img/avatar-player14.png",
        ⵠΔⵠᐃⵠⵠᐃ: "img/avatar-player14.png",
        ⲆᐃⵠΔΔᐃⲆ: "img/avatar-player14.png",
        ⲆᐃⵠᐃΔⵠⲆᐃⲆ: "img/golden-bread.png",
        ᐃΔⵠᐃⲆΔΔ: "img/buy-bread-out.png",
        ⵠⲆᐃᐃΔᐃⲆ: "img/buy-bread-in.png",
        ΔᐃⲆⵠⲆⵠⵠ: "img/buy-bread-click.png",
        ΔΔΔⵠⵠᐃΔ: "img/gauge.png",
        ΔⵠⵠΔΔΔⲆΔᐃ: "img/season-4-out.png",
        ⵠⲆᐃⵠⲆⲆΔΔΔ: "img/season-4-in.png",
        ⲆⲆᐃⲆΔΔᐃⵠΔ: "img/season-4-click.png",
        ᐃΔⵠΔⵠᐃⵠᐃⲆ: "img/season4-box.png",
        ΔᐃᐃᐃᐃᐃⲆᐃᐃ: "img/season-5-out.png",
        ⲆⵠΔⲆΔΔⵠⵠᐃ: "img/season-5-in.png",
        ᐃΔⵠᐃⲆᐃⲆΔⲆ: "img/season-5-click.png",
        ᐃⲆⲆΔᐃⵠΔᐃᐃ: "img/season5-box.png",
        ⲆᐃⵠⵠᐃⲆⵠ: "img/season-6-out.png",
        ᐃⲆⵠᐃⲆΔⵠ: "img/season-6-in.png",
        ᐃΔⵠⲆΔⲆⲆ: "img/season-6-click.png",
        ⵠᐃᐃⵠΔⵠᐃ: "img/season6-box.png",
        ᐃⲆᐃΔⲆΔΔ: "img/profile3-box.png",
        ⲆⲆⲆⲆⵠⵠᐃ: "img/skins-box.png",
        ⲆΔᐃⵠⵠᐃΔ: "img/shop-box.png",
        ᐃᐃⵠⲆΔΔⵠⲆⲆ: "img/private-server-box.png",
        ⲆⵠⵠⲆⵠⲆΔ: "img/location-box.png",
        ᐃⵠⲆᐃΔᐃⲆ: "img/server-duration-box.png",
        ΔᐃⲆΔΔᐃᐃ: "img/tutorial-box.png",
        ⲆΔᐃⵠⲆᐃⵠ: "img/leaderboard2-box.png",
        ⲆΔΔⵠⲆΔⵠ: "img/buy-breads-box.png",
        ⵠⵠΔⵠⵠⲆⵠ: "img/bag-box.png",
        ⵠⵠⲆᐃⲆΔⲆ: "img/deadbox-box.png",
        ⲆᐃⵠⵠΔᐃᐃ: "img/book-box.png",
        ᐃⲆⲆⵠⵠⲆΔ: "img/accessories-box.png",
        ⵠⲆΔᐃⵠⲆⲆ: "img/customskin-box.png",
        ᐃⵠⲆᐃⲆΔΔ: "img/bag-lasts.png",
        ᐃⲆⲆⵠⵠᐃⵠ: "img/server-lasts.png",
        ⵠⵠⵠⲆΔᐃᐃ: "img/server-access-box3.png",
        ΔΔΔΔΔⲆΔ: "img/lootbox-box.png",
        ⵠⲆⵠⲆΔᐃⲆ: "img/change-nickname0.png",
        ⲆⵠΔⵠᐃΔⲆ: "img/change-nickname1.png",
        ⵠΔᐃⵠⲆⵠⲆ: "img/cheating-box.png",
        ΔΔΔᐃⵠⵠⵠΔⲆ: "img/daily-quest-box.png",
        ΔⲆⵠⵠⲆⲆᐃⲆⵠ: "img/daily-5-bread.png",
        ⵠⲆᐃᐃⲆⵠΔᐃᐃ: "img/daily-10-bread.png",
        ΔΔⵠⵠΔΔⲆⵠⲆ: "img/daily-valid.png",
        ⵠⲆΔΔᐃᐃΔ: "img/normal-profile-out.png",
        ΔⵠⵠⲆᐃᐃⲆ: "img/normal-profile-in.png",
        ΔⵠᐃⲆΔⲆΔ: "img/normal-profile-click.png",
        ⲆⲆⵠΔΔⲆⲆ: "img/forest-profile-out.png",
        ⲆᐃⲆᐃⲆΔⵠ: "img/forest-profile-in.png",
        ⲆΔᐃΔᐃΔⵠ: "img/forest-profile-click.png",
        ΔⵠᐃⵠⲆᐃΔ: "img/zombie-profile-out.png",
        ⲆΔⵠⲆΔⲆⲆ: "img/zombie-profile-in.png",
        ⲆᐃᐃᐃΔⲆⵠ: "img/zombie-profile-click.png",
        ⵠⲆⲆⵠΔⵠΔ: "img/vampire-profile-out.png",
        ΔΔⲆΔᐃⵠΔ: "img/vampire-profile-in.png",
        ΔⲆᐃΔⵠⵠⵠ: "img/vampire-profile-click.png",
        ⲆⵠⲆᐃᐃⲆⵠ: "img/total-profile-out.png",
        ⲆⲆⲆⲆΔᐃⲆ: "img/total-profile-in.png",
        ᐃΔⲆΔΔΔⲆ: "img/total-profile-click.png",
        ΔΔΔᐃᐃⲆΔ: "img/season1-out.png",
        ΔΔᐃΔⲆⵠⵠ: "img/season1-in.png",
        ᐃΔⵠΔⵠᐃᐃ: "img/season1-click.png",
        ᐃᐃⵠⲆⲆⵠΔ: "img/season2-out.png",
        ⵠⵠⲆΔΔΔᐃ: "img/season2-in.png",
        ⵠΔᐃⵠⲆΔⵠ: "img/season2-click.png",
        ᐃΔⵠΔΔᐃⵠ: "img/season3-out.png",
        ⲆᐃⲆᐃⲆⲆΔ: "img/season3-in.png",
        ⵠⵠⲆΔΔⲆⵠ: "img/season3-click.png",
        ⲆΔⲆᐃⵠⲆΔ: "img/season4-out.png",
        ΔᐃⵠᐃⵠΔᐃ: "img/season4-in.png",
        ᐃΔⲆΔΔⵠⵠ: "img/season4-click.png",
        ᐃΔΔΔⵠⵠⲆ: "img/season5-out.png",
        ᐃΔᐃΔⲆᐃⲆ: "img/season5-in.png",
        ᐃⲆᐃⲆᐃⵠΔ: "img/season5-click.png",
        ΔⵠⵠΔⲆᐃΔ: "img/season6-out.png",
        ΔᐃᐃⵠⵠΔᐃ: "img/season6-in.png",
        ᐃΔΔΔᐃΔⵠ: "img/season6-click.png",
        ⵠⲆᐃⲆⵠⵠᐃ: "img/locked-skin-alert.png",
        ΔΔⵠⵠⵠⵠᐃ: "img/locked-custom-alert.png",
        ⵠⲆᐃⵠⵠΔⲆ: "img/bg-red-locked.png",
        ⲆᐃΔΔⲆⲆⲆ: "img/skin-button-out.png",
        ⵠΔⵠᐃⲆⵠⲆ: "img/skin-button-in.png",
        ᐃᐃΔⲆΔⲆⵠ: "img/skin-button-click.png",
        ⵠⲆᐃΔΔⲆΔ: "img/accessory-button-out.png",
        ΔΔᐃⵠⵠΔⵠ: "img/accessory-button-in.png",
        ᐃⵠⵠⵠᐃⵠᐃ: "img/accessory-button-click.png",
        ⲆⵠᐃΔΔⲆⵠ: "img/bag-button-out.png",
        ᐃᐃᐃΔᐃΔⲆ: "img/bag-button-in.png",
        ᐃΔⲆᐃⲆΔΔ: "img/bag-button-click.png",
        ᐃᐃⲆⵠᐃΔᐃ: "img/book-button-out.png",
        ⲆᐃⲆⲆΔΔⵠ: "img/book-button-in.png",
        ⲆᐃΔⲆⵠᐃⵠ: "img/book-button-click.png",
        ΔᐃⲆᐃⲆΔⲆ: "img/deadbox-button-out.png",
        ᐃⵠΔΔⲆΔⵠ: "img/deadbox-button-in.png",
        ᐃⲆⵠΔΔⵠⲆ: "img/deadbox-button-click.png",
        ⲆⲆⲆⲆⲆᐃⲆ: "img/loot-button-out.png",
        ⵠΔⲆⲆⵠⵠᐃ: "img/loot-button-in.png",
        ⵠᐃΔᐃᐃΔΔ: "img/loot-button-click.png",
        ⵠΔΔᐃᐃΔⵠ: "img/free-item-out.png",
        ΔⵠⲆᐃⲆΔΔ: "img/free-item-in.png",
        ⲆᐃⵠⵠⵠⵠΔ: "img/free-item-click.png",
        ⲆᐃⲆⲆ: "img/wood-item-out.png",
        ⵠᐃΔⵠ: "img/wood-item-in.png",
        ᐃⲆⲆΔ: "img/wood-item-click.png",
        ⲆⵠᐃΔⵠΔΔ: "img/stone-item.png",
        ⵠⵠⲆΔⵠᐃΔ: "img/stone-item-in.png",
        ᐃⲆᐃᐃᐃⲆⵠ: "img/stone-item-click.png",
        ᐃᐃⲆᐃᐃΔⲆ: "img/gold-item.png",
        ⵠᐃᐃΔᐃᐃᐃ: "img/gold-item-in.png",
        ΔⲆⵠᐃⲆⵠᐃ: "img/gold-item-click.png",
        ⵠⵠⵠⲆΔᐃⵠ: "img/diamond-item.png",
        ⲆΔᐃΔᐃⲆᐃ: "img/diamond-item-in.png",
        ΔᐃⲆⵠᐃᐃⵠ: "img/diamond-item-click.png",
        ΔⵠⲆᐃΔΔΔ: "img/amethyst-item.png",
        ⲆᐃⵠᐃⲆⵠⵠ: "img/amethyst-item-in.png",
        ⵠᐃⲆⵠⲆΔⵠ: "img/amethyst-item-click.png",
        ΔᐃⲆᐃⵠⲆΔ: "img/reidite-item.png",
        ⲆⲆΔᐃⵠⵠⲆ: "img/reidite-item-in.png",
        ᐃΔΔⵠⲆᐃᐃ: "img/reidite-item-click.png",
        ⲆΔΔⲆΔⲆΔ: "img/special-item-out.png",
        ᐃΔᐃΔⲆΔᐃ: "img/special-item-in.png",
        ᐃΔⵠΔᐃΔΔ: "img/special-item-click.png",
        ⲆⵠⲆⵠⵠᐃΔ: "img/level-item-out.png",
        ⲆⵠΔᐃᐃΔⲆ: "img/level-item-in.png",
        ᐃᐃᐃᐃⲆᐃⵠ: "img/level-item-click.png",
        ⲆⲆᐃⵠⵠᐃⵠ: "img/skin-previous-out.png",
        ⵠΔⵠⵠΔⵠⲆ: "img/skin-previous-in.png",
        ᐃᐃᐃⲆⵠᐃᐃ: "img/skin-previous-click.png",
        ΔⵠⲆⲆΔΔⵠ: "img/skin-next-out.png",
        ⲆⵠⲆᐃᐃΔᐃ: "img/skin-next-in.png",
        ΔⵠᐃⵠΔΔⵠ: "img/skin-next-click.png",
        ᐃᐃᐃᐃⲆ: "img/back-button-out.png",
        ᐃΔⲆⵠᐃ: "img/back-button-in.png",
        ΔⲆⵠⵠΔ: "img/back-button-click.png",
        ᐃΔΔⵠᐃⵠᐃ: "img/get-more-button-out.png",
        ⵠⵠⵠᐃΔΔⲆ: "img/get-more-button-in.png",
        ΔᐃⵠΔΔᐃᐃ: "img/get-more-button-click.png",
        ⵠᐃΔᐃⲆᐃᐃ: "img/currency1-out.png",
        ⲆᐃⲆᐃⵠᐃᐃ: "img/currency1-in.png",
        ΔᐃΔⵠⲆΔⲆ: "img/currency1-click.png",
        ⵠⲆΔᐃΔⲆΔ: "img/currency2-out.png",
        ΔⲆᐃᐃΔᐃⵠ: "img/currency2-in.png",
        ᐃΔΔⲆⵠⲆᐃ: "img/currency2-click.png",
        ᐃⲆᐃΔᐃΔⵠ: "img/currency3-out.png",
        ⲆⲆⵠᐃΔΔΔ: "img/currency3-in.png",
        ⵠᐃⵠᐃᐃⵠⵠ: "img/currency3-click.png",
        ΔⲆΔⵠᐃᐃⵠ: "img/currency4-out.png",
        ⵠⲆΔᐃⵠⵠⵠ: "img/currency4-in.png",
        ΔⲆᐃΔⲆᐃΔ: "img/currency4-click.png",
        ⲆΔⲆⲆᐃⲆⲆ: "img/currency5-out.png",
        ΔΔᐃⵠⵠᐃⵠ: "img/currency5-in.png",
        ⲆⵠⲆᐃᐃⵠⵠ: "img/currency5-click.png",
        ᐃⲆⲆⵠᐃⵠⲆ: "img/price1-out.png",
        ᐃⵠᐃⵠⵠⲆⲆ: "img/price1-in.png",
        ⲆⵠⲆⵠᐃⲆᐃ: "img/price1-click.png",
        ⵠΔᐃΔⵠᐃᐃ: "img/price2-out.png",
        ⲆᐃᐃⵠᐃⲆᐃ: "img/price2-in.png",
        ᐃΔⵠᐃᐃΔΔ: "img/price2-click.png",
        ⵠⵠⵠⲆⲆⵠⵠ: "img/price3-out.png",
        ᐃΔᐃⲆⲆᐃᐃ: "img/price3-in.png",
        ᐃᐃⵠⵠᐃᐃᐃ: "img/price3-click.png",
        ⵠⲆᐃⵠᐃΔᐃ: "img/price4-out.png",
        ᐃⵠⲆᐃⲆⵠⵠ: "img/price4-in.png",
        ΔⲆⵠᐃⵠΔΔ: "img/price4-click.png",
        ᐃᐃΔⵠΔΔⲆ: "img/price5-out.png",
        ᐃᐃⲆᐃΔΔᐃ: "img/price5-in.png",
        ΔΔᐃΔΔⵠⵠ: "img/price5-click.png",
        ᐃᐃΔⵠᐃⵠΔᐃΔ: "img/buy-private-server-out.png",
        ΔⵠⲆⲆⲆΔⲆⲆⲆ: "img/buy-private-server-in.png",
        ᐃⲆⵠⲆⵠΔⲆᐃΔ: "img/buy-private-server-click.png",
        ΔⲆΔΔⲆⲆⲆ: "img/atlanta-button-out.png",
        ᐃⲆΔΔⵠⵠⵠ: "img/atlanta-button-in.png",
        ᐃⲆΔΔᐃᐃⲆ: "img/atlanta-button-click.png",
        ΔΔⵠᐃⲆⵠⵠ: "img/los-angeles-button-out.png",
        ᐃⵠᐃⲆⲆΔᐃ: "img/los-angeles-button-in.png",
        ⲆⲆΔᐃⲆⵠᐃ: "img/los-angeles-button-click.png",
        ⵠΔᐃⵠᐃⲆᐃ: "img/sydney-button-out.png",
        ᐃΔⵠᐃᐃⲆᐃ: "img/sydney-button-in.png",
        ΔⲆΔⲆΔⲆᐃ: "img/sydney-button-click.png",
        ΔⵠⲆΔΔⲆⵠ: "img/frankfurt-button-out.png",
        ⵠΔΔⵠⲆⵠⲆ: "img/frankfurt-button-in.png",
        ΔⵠᐃΔⵠΔΔ: "img/frankfurt-button-click.png",
        ΔΔⵠΔⲆΔᐃ: "img/osaka-button-out.png",
        ᐃΔⲆΔΔᐃⲆ: "img/osaka-button-in.png",
        ⵠᐃⵠΔⲆᐃⵠ: "img/osaka-button-click.png",
        ᐃΔᐃⲆⵠⲆΔΔᐃ: "img/yes-location-out.png",
        ᐃᐃⲆⲆᐃⲆᐃᐃⵠ: "img/yes-location-in.png",
        ⵠΔⵠᐃⲆΔᐃⵠⵠ: "img/yes-location-click.png",
        ⵠⲆⲆᐃΔᐃⵠ: "img/3days-button-out.png",
        ⵠᐃᐃᐃⵠΔᐃ: "img/3days-button-in.png",
        ΔⵠⵠⵠΔⲆᐃ: "img/3days-button-click.png",
        ΔΔᐃΔᐃⵠⲆ: "img/7days-button-out.png",
        ΔᐃΔΔⲆᐃΔ: "img/7days-button-in.png",
        ᐃᐃⵠᐃΔᐃⲆ: "img/7days-button-click.png",
        ⲆᐃⲆΔⵠⲆΔ: "img/30days-button-out.png",
        ᐃᐃΔⵠᐃᐃⵠ: "img/30days-button-in.png",
        ΔᐃᐃⵠⲆⲆᐃ: "img/30days-button-click.png",
        Ⲇⵠᐃⵠⵠᐃᐃ: "img/90days-button-out.png",
        ⲆΔᐃΔᐃᐃⲆ: "img/90days-button-in.png",
        ⲆⲆⵠΔⲆⲆᐃ: "img/90days-button-click.png",
        ⵠⲆΔⵠᐃΔᐃ: "img/spin1.png",
        ΔⲆⵠⵠⲆⵠᐃ: "img/spin2.png",
        ⲆⵠᐃΔΔᐃⲆ: "img/spin3.png",
        ⲆᐃΔᐃⲆⲆⲆ: "img/spin4.png",
        ⵠΔᐃⲆⲆΔᐃ: "img/spin5.png",
        ⵠⵠⲆᐃᐃⵠᐃ: "img/spin6.png",
        ΔΔⲆᐃⵠⲆᐃ: "img/arrow-spin.png",
        ᐃⵠᐃΔⵠⲆΔ: "img/spin-button-1-out.png",
        ᐃⲆᐃⵠⵠΔᐃ: "img/spin-button-1-in.png",
        ⲆΔⲆⵠⵠⵠΔ: "img/spin-button-1-click.png",
        ⲆⵠᐃΔⲆⲆⲆ: "img/spin-button-2-out.png",
        ᐃᐃᐃΔⲆⲆᐃ: "img/spin-button-2-in.png",
        ΔⲆⲆΔⲆⲆⵠ: "img/spin-button-2-click.png",
        ⲆⲆΔΔⲆⲆⲆ: "img/spin-button-3-out.png",
        ΔⵠᐃⲆⵠⵠⲆ: "img/spin-button-3-in.png",
        ⲆᐃⲆⲆᐃᐃⲆ: "img/spin-button-3-click.png",
        ᐃⵠⵠⲆⲆᐃΔ: "img/spin-button-4-out.png",
        ΔⵠᐃⲆⲆⵠⲆ: "img/spin-button-4-in.png",
        ΔⲆⵠⲆᐃᐃᐃ: "img/spin-button-4-click.png",
        ᐃΔΔⵠΔⲆΔ: "img/spin-button-5-out.png",
        ⵠΔΔᐃᐃᐃΔ: "img/spin-button-5-in.png",
        ΔΔᐃΔⵠⲆΔ: "img/spin-button-5-click.png",
        ⲆΔⵠΔᐃΔΔ: "img/spin-light.png",
        ΔⵠΔᐃⲆᐃⵠ: "img/tuto-wiki-out.png",
        ⵠᐃⵠΔⵠᐃⲆ: "img/tuto-wiki-in.png",
        ⵠⵠⲆᐃⲆⲆⲆ: "img/tuto-wiki-click.png",
        ΔΔⲆΔΔⲆⵠ: "img/tuto-previous-out.png",
        ᐃⵠⲆⵠΔⵠⲆ: "img/tuto-previous-in.png",
        ⲆⵠᐃⲆᐃΔⲆ: "img/tuto-previous-click.png",
        ⲆΔⵠΔΔΔⲆ: "img/tuto-next-out.png",
        ⵠᐃⵠⲆⵠᐃⲆ: "img/tuto-next-in.png",
        ᐃⵠⲆⲆΔⵠⵠ: "img/tuto-next-click.png",
        ⲆᐃᐃⵠᐃΔⵠ: "img/time-leaderboard-out.png",
        ᐃⲆᐃⲆⲆⲆΔ: "img/time-leaderboard-in.png",
        ᐃᐃᐃⵠⵠⵠⲆ: "img/time-leaderboard-click.png",
        ᐃᐃⵠΔΔΔΔ: "img/score-leaderboard-out.png",
        ΔΔⵠΔΔⵠᐃ: "img/score-leaderboard-in.png",
        ΔΔΔⵠⵠⵠΔ: "img/score-leaderboard-click.png",
        ⲆΔΔΔᐃⵠᐃ: "img/lvl-leaderboard-out.png",
        ΔᐃⵠⲆⵠⲆΔ: "img/lvl-leaderboard-in.png",
        ⵠⵠᐃⵠⵠⲆⲆ: "img/lvl-leaderboard-click.png",
        ⲆΔⲆΔⲆⲆⲆ: "img/kill-leaderboard-out.png",
        ᐃⲆΔΔΔⵠⲆ: "img/kill-leaderboard-in.png",
        ΔΔᐃⵠΔⲆΔ: "img/kill-leaderboard-click.png",
        ⲆⲆΔᐃᐃⵠΔ: "img/all-leaderboard-out.png",
        ΔⵠⲆⵠⲆΔΔ: "img/all-leaderboard-in.png",
        ᐃΔΔᐃⲆΔᐃ: "img/all-leaderboard-click.png",
        ᐃⵠᐃΔⵠⲆᐃ: "img/today-leaderboard-out.png",
        ⵠⲆΔⲆᐃⵠᐃ: "img/today-leaderboard-in.png",
        ⲆⵠᐃⵠᐃᐃΔ: "img/today-leaderboard-click.png",
        ⲆⵠⲆⵠΔΔᐃ: "img/week-leaderboard-out.png",
        ⲆᐃᐃⵠⲆⵠⵠ: "img/week-leaderboard-in.png",
        ᐃΔⲆⵠⲆⵠᐃ: "img/week-leaderboard-click.png",
        ᐃᐃΔⲆᐃⲆΔ: "img/season1-out.png",
        ᐃΔⲆᐃΔⵠᐃ: "img/season1-in.png",
        ⵠⵠⲆⲆΔᐃⲆ: "img/season1-click.png",
        ⵠⲆⲆΔⲆᐃΔ: "img/season2-out.png",
        ᐃⲆⲆⵠⵠᐃᐃ: "img/season2-in.png",
        ⵠΔΔᐃⲆᐃⵠ: "img/season2-click.png",
        ΔⵠⲆⲆΔΔⲆ: "img/season3-out.png",
        ⲆⵠᐃᐃⲆᐃΔ: "img/season3-in.png",
        ᐃⲆᐃⵠⲆⵠⲆ: "img/season3-click.png",
        ⵠᐃⵠⵠⵠⵠΔ: "img/season4-out.png",
        ΔΔⵠΔⵠⵠᐃ: "img/season4-in.png",
        ⲆΔᐃⵠⲆⲆᐃ: "img/season4-click.png",
        ᐃᐃΔⲆᐃⲆᐃ: "img/season5-out.png",
        ΔΔⵠⲆⲆⲆⵠ: "img/season5-in.png",
        ᐃⵠΔᐃⲆⲆⲆ: "img/season5-click.png",
        ⵠⲆᐃⲆⲆⵠᐃ: "img/season6-out.png",
        ⲆᐃⵠⲆⲆⵠᐃ: "img/season6-in.png",
        ΔⵠⵠⵠⲆⵠᐃ: "img/season6-click.png",
        ᐃⵠⵠΔⵠΔⲆ: "img/total-lead-out.png",
        ⲆⵠΔⵠᐃⵠΔ: "img/total-lead-in.png",
        ⵠⲆⵠᐃᐃⵠᐃ: "img/total-lead-click.png",
        ᐃⵠⵠⵠΔⲆᐃ: "img/normal-lead-out.png",
        ⲆⵠⵠⲆᐃⵠⵠ: "img/normal-lead-in.png",
        ΔⵠⲆᐃΔᐃⵠ: "img/normal-lead-click.png",
        ⲆᐃΔΔᐃⲆΔ: "img/forest-lead-out.png",
        ⵠⲆΔⵠᐃⵠΔ: "img/forest-lead-in.png",
        ΔΔΔⵠⲆᐃΔ: "img/forest-lead-click.png",
        ᐃⲆΔⲆⲆΔⲆ: "img/vampire-lead-out.png",
        ΔⵠⵠΔᐃⵠⲆ: "img/vampire-lead-in.png",
        ᐃⲆⵠᐃⵠⲆΔ: "img/vampire-lead-click.png",
        ⵠᐃⲆΔⲆΔⵠ: "img/zombie-lead-out.png",
        ⵠⵠⲆⵠΔΔⲆ: "img/zombie-lead-in.png",
        ΔᐃⵠᐃᐃⲆᐃ: "img/zombie-lead-click.png",
        ⲆΔΔΔⵠᐃⲆ: "img/day-level5.png",
        ᐃᐃΔᐃⲆⲆᐃ: "img/night-level5.png",
        ᐃᐃⲆΔⲆΔⲆ: "img/day-level10.png",
        ⵠⵠⲆⲆⵠⲆΔ: "img/night-level10.png",
        ⲆΔᐃⲆΔΔⵠ: "img/day-level15.png",
        ⲆⵠᐃΔⲆⲆᐃ: "img/night-level15.png",
        ⵠⵠᐃⵠᐃⵠᐃ: "img/day-level20.png",
        ᐃⲆⵠᐃⲆⲆΔ: "img/night-level20.png",
        ⲆᐃΔᐃⲆⲆΔ: "img/day-level25.png",
        ΔΔⲆⲆⵠⵠᐃ: "img/night-level25.png",
        ⲆⵠⵠᐃⵠⲆΔ: "img/day-level30.png",
        ᐃⲆᐃⵠⵠⵠΔ: "img/night-level30.png",
        ⵠⵠⵠᐃΔⲆⲆ: "img/day-level35.png",
        ⲆᐃⵠⲆⵠΔᐃ: "img/night-level35.png",
        ⲆⵠΔⵠΔΔⵠ: "img/day-level40.png",
        ⵠⵠⲆⲆΔⵠΔ: "img/night-level40.png",
        Δⵠᐃⵠᐃᐃᐃ: "img/day-level45.png",
        ᐃᐃⵠⲆⵠᐃⵠ: "img/night-level45.png",
        ⲆⲆΔΔᐃⵠⵠ: "img/day-level50.png",
        ᐃⲆⲆⵠᐃⵠΔ: "img/night-level50.png",
        ⲆⵠΔⲆⵠΔⵠ: "img/day-level55.png",
        ⲆⲆⵠⲆᐃⵠⵠ: "img/night-level55.png",
        ⲆⵠΔⲆⲆᐃⵠ: "img/day-level60.png",
        ⲆΔΔᐃᐃⲆΔ: "img/night-level60.png",
        ⵠᐃΔⲆⲆⲆΔ: "img/day-skin-devast0.png",
        ⵠᐃⵠⲆΔᐃᐃ: "img/night-skin-devast0.png",
        ⵠⲆᐃᐃΔⵠⲆ: "img/day-hand-devaster.png",
        ᐃⲆⲆᐃⵠⵠⲆ: "img/night-hand-devaster.png",
        ᐃⲆᐃⵠᐃᐃΔ: "img/day-skin-star0.png",
        ᐃⵠⲆΔⲆᐃⵠ: "img/night-skin-star0.png",
        ᐃᐃᐃᐃᐃᐃΔ: "img/day-hand-star0.png",
        ΔΔΔⲆΔᐃᐃ: "img/night-hand-star0.png",
        ⵠᐃᐃⲆⵠⲆᐃ: "img/day-vampire.png",
        ᐃⲆΔⲆⲆⲆΔ: "img/night-vampire.png",
        ᐃⲆᐃᐃⲆⵠΔ: "img/day-hand-vampire.png",
        ⲆᐃⵠⲆⵠᐃᐃ: "img/night-hand-vampire.png",
        ⵠᐃⲆΔⵠⲆᐃ: "img/day-zombie.png",
        ᐃᐃⲆⲆᐃⲆᐃ: "img/night-zombie.png",
        ⲆⲆⵠⵠΔⲆᐃ: "img/day-hand-zombie.png",
        ΔΔΔⲆᐃΔΔ: "img/night-hand-zombie.png",
        ΔⲆᐃΔᐃᐃᐃ: "img/day-skin113.png",
        ᐃⲆⲆᐃΔᐃᐃ: "img/night-skin113.png",
        ᐃⵠΔᐃᐃⵠⵠ: "img/day-hand-skin113.png",
        ⵠΔⵠⵠΔⵠⵠ: "img/night-hand-skin113.png",
        ᐃⵠⵠᐃⲆⲆⲆ: "img/day-skin0.png",
        ΔΔΔᐃⵠⵠᐃ: "img/night-skin0.png",
        ⲆᐃΔⲆᐃᐃⲆ: "img/day-skin1.png",
        ᐃᐃΔⲆΔⵠⵠ: "img/night-skin1.png",
        ΔⲆⵠΔᐃΔⵠ: "img/day-skin2.png",
        ⵠⵠⵠᐃᐃⵠΔ: "img/night-skin2.png",
        ΔⵠⲆⵠⲆⲆⲆ: "img/day-skin3.png",
        ⲆⵠᐃΔΔΔᐃ: "img/night-skin3.png",
        ΔΔΔᐃⲆᐃΔ: "img/day-skin4.png",
        ΔⲆⲆᐃⲆⵠΔ: "img/night-skin4.png",
        ⲆⲆΔⲆΔⵠⵠ: "img/day-skin5.png",
        ⲆⲆⲆΔᐃⲆΔ: "img/night-skin5.png",
        ⲆⵠⲆΔΔΔⵠ: "img/day-skin6.png",
        ΔΔΔⲆⲆᐃⲆ: "img/night-skin6.png",
        ⲆⲆⵠⵠᐃᐃⵠ: "img/day-skin7.png",
        ⲆᐃΔⵠΔᐃΔ: "img/night-skin7.png",
        ⲆΔΔⵠⵠⵠΔ: "img/day-skin8.png",
        ⲆⵠᐃⵠᐃΔⲆ: "img/night-skin8.png",
        ⵠⵠⲆⲆᐃⲆΔ: "img/day-skin9.png",
        ΔⲆΔⲆⲆᐃᐃ: "img/night-skin9.png",
        ΔⲆⵠΔⲆᐃⵠ: "img/day-skin10.png",
        ᐃⵠᐃᐃΔⲆⵠ: "img/night-skin10.png",
        ⲆᐃⵠΔΔⵠᐃ: "img/day-skin11.png",
        ⵠᐃΔⵠᐃⵠᐃ: "img/night-skin11.png",
        ΔⵠⲆᐃΔᐃΔ: "img/day-skin12.png",
        ΔⵠΔⵠⲆⵠᐃ: "img/night-skin12.png",
        ⲆᐃᐃⵠᐃᐃΔ: "img/day-skin13.png",
        ⵠⲆⲆⵠΔᐃⲆ: "img/night-skin13.png",
        ⵠⲆᐃⵠⲆⵠⲆ: "img/day-skin14.png",
        ⵠⵠΔⵠΔⲆᐃ: "img/night-skin14.png",
        ᐃⵠⲆΔᐃⲆⲆ: "img/day-skin15.png",
        ⲆⲆⵠᐃⲆᐃᐃ: "img/night-skin15.png",
        ᐃⲆΔΔⵠΔⲆ: "img/day-skin16.png",
        ᐃⲆⵠΔᐃⵠΔ: "img/night-skin16.png",
        ᐃⵠⵠⲆⵠⵠⵠ: "img/day-skin17.png",
        ᐃᐃⵠⵠΔⲆᐃ: "img/night-skin17.png",
        ⵠⲆᐃᐃⲆⵠⵠ: "img/day-skin18.png",
        ΔⲆΔⲆⲆΔΔ: "img/night-skin18.png",
        ᐃⲆⵠΔⵠΔⲆ: "img/day-skin19.png",
        ⲆⵠⵠᐃΔᐃⵠ: "img/night-skin19.png",
        ᐃᐃΔΔΔΔⵠ: "img/day-skin20.png",
        ⵠᐃᐃᐃⲆΔΔ: "img/night-skin20.png",
        ΔΔⵠⵠⲆⵠΔ: "img/day-skin21.png",
        ⵠⲆᐃΔΔΔⵠ: "img/night-skin21.png",
        ⵠⵠⲆⲆⵠⲆᐃ: "img/day-skin22.png",
        ⵠⵠΔⲆⵠⵠᐃ: "img/night-skin22.png",
        ΔᐃΔⵠΔΔΔ: "img/day-skin23.png",
        ⵠⵠⵠΔᐃⲆᐃ: "img/night-skin23.png",
        ⵠΔⵠΔⵠⵠᐃ: "img/day-skin24.png",
        ⲆⵠΔⲆᐃΔⵠ: "img/night-skin24.png",
        ⲆⵠⲆⲆᐃᐃᐃ: "img/day-skin25.png",
        ⵠⵠⲆΔΔⲆᐃ: "img/night-skin25.png",
        ⵠΔⵠⵠᐃᐃⲆ: "img/day-skin26.png",
        ᐃⵠᐃⵠⵠⵠⵠ: "img/night-skin26.png",
        ΔⵠⲆⵠⲆΔⲆ: "img/day-skin27.png",
        ᐃⲆⲆⲆᐃΔⵠ: "img/night-skin27.png",
        ᐃⲆΔΔⲆⲆⵠ: "img/day-skin28.png",
        ⲆᐃΔⵠⲆⵠⲆ: "img/night-skin28.png",
        ᐃᐃΔⵠⲆⲆⲆ: "img/day-skin29.png",
        ⲆⲆⵠⲆᐃⲆᐃ: "img/night-skin29.png",
        ⵠⲆⵠⲆΔⲆΔ: "img/day-skin30.png",
        ⵠΔⲆⵠⲆΔΔ: "img/night-skin30.png",
        ⲆⵠΔⵠⲆⵠⲆ: "img/day-skin31.png",
        ⵠⲆⲆⵠΔᐃᐃ: "img/night-skin31.png",
        ΔΔᐃⲆⲆᐃⲆ: "img/day-skin32.png",
        ᐃⵠⵠⵠⵠⲆΔ: "img/night-skin32.png",
        ⵠΔΔⵠΔⵠⲆ: "img/day-skin33.png",
        ᐃΔΔⲆⲆⲆⲆ: "img/night-skin33.png",
        ⲆⲆΔΔⵠᐃᐃ: "img/day-skin34.png",
        ⵠᐃⲆᐃᐃᐃᐃ: "img/night-skin34.png",
        ⵠΔⲆᐃⵠΔΔ: "img/day-skin35.png",
        ΔⲆΔΔΔΔΔ: "img/night-skin35.png",
        ΔⲆⵠᐃΔΔΔ: "img/day-skin36.png",
        ⲆⵠⵠᐃⲆᐃⲆ: "img/night-skin36.png",
        ⲆΔⲆⲆⵠⵠᐃ: "img/day-skin37.png",
        ΔⵠΔⵠⵠⲆⵠ: "img/night-skin37.png",
        ΔΔᐃⵠⲆΔΔ: "img/day-skin38.png",
        ⲆⵠⵠⲆΔⵠⵠ: "img/night-skin38.png",
        ΔⲆⲆΔⵠⲆΔ: "img/day-skin39.png",
        ⲆⵠᐃⵠⵠⲆⵠ: "img/night-skin39.png",
        ᐃⵠⵠᐃΔⵠΔ: "img/day-skin40.png",
        ⵠΔⵠⵠⲆΔΔ: "img/night-skin40.png",
        ᐃᐃⲆΔⵠⲆΔ: "img/day-skin41.png",
        ⲆΔᐃⲆⵠⲆᐃ: "img/night-skin41.png",
        ᐃⲆⵠⲆⲆⲆΔ: "img/day-skin42.png",
        ⲆⵠⲆⵠΔⲆⲆ: "img/night-skin42.png",
        ⲆᐃᐃᐃⵠΔⵠ: "img/day-skin43.png",
        ᐃⵠᐃⲆⵠⲆⲆ: "img/night-skin43.png",
        ⲆⵠⵠⲆⲆⲆⵠ: "img/day-skin44.png",
        ⲆⲆᐃΔΔΔΔ: "img/night-skin44.png",
        ⲆΔⵠΔⵠᐃⵠ: "img/day-skin45.png",
        ⵠΔⵠⲆⲆᐃⵠ: "img/night-skin45.png",
        ᐃⵠⲆⵠⵠᐃⵠ: "img/day-skin46.png",
        ⲆΔⵠᐃⲆⵠⵠ: "img/night-skin46.png",
        ⲆⵠᐃᐃⲆⲆΔ: "img/day-skin47.png",
        ᐃᐃⲆᐃⲆᐃΔ: "img/night-skin47.png",
        ⵠΔⵠⲆᐃⵠⵠ: "img/day-skin48.png",
        ⲆⲆΔⲆᐃⵠⵠ: "img/night-skin48.png",
        ΔΔⲆⲆᐃᐃⵠ: "img/day-skin49.png",
        ⲆᐃΔⵠⵠᐃⵠ: "img/night-skin49.png",
        ⵠᐃΔⲆⲆΔⵠ: "img/day-skin50.png",
        ᐃⲆᐃΔⵠⲆⵠ: "img/night-skin50.png",
        ⲆᐃⵠᐃⵠⲆᐃ: "img/day-skin51.png",
        ⲆᐃⵠΔⲆΔΔ: "img/night-skin51.png",
        ⲆΔΔⲆΔΔⲆ: "img/day-skin52.png",
        ΔΔⲆΔᐃⲆΔ: "img/night-skin52.png",
        ΔᐃΔΔΔΔⲆ: "img/day-skin53.png",
        ⲆⵠⵠⵠΔΔⲆ: "img/night-skin53.png",
        ⵠᐃⵠᐃⲆⵠᐃ: "img/day-skin54.png",
        ⲆⲆΔΔⵠⲆᐃ: "img/night-skin54.png",
        ⵠⵠΔΔΔⵠⲆ: "img/day-skin55.png",
        ΔⲆΔⵠΔⵠⲆ: "img/night-skin55.png",
        ⵠⵠⲆΔⵠⲆΔ: "img/day-skin56.png",
        ⵠᐃΔΔⵠᐃΔ: "img/night-skin56.png",
        ⲆⲆⲆΔⲆᐃⲆ: "img/day-skin57.png",
        ⵠⵠΔΔⲆΔⲆ: "img/night-skin57.png",
        ⵠᐃⲆⲆᐃᐃⲆ: "img/day-skin58.png",
        ⵠⵠᐃᐃⲆΔΔ: "img/night-skin58.png",
        ⲆⵠᐃⵠᐃⲆⵠ: "img/day-skin59.png",
        ⲆᐃΔⲆⵠⲆⵠ: "img/night-skin59.png",
        ⲆΔΔⵠⵠΔⵠ: "img/day-skin60.png",
        ΔΔⵠᐃⵠⲆⵠ: "img/night-skin60.png",
        ⲆᐃᐃᐃᐃᐃΔ: "img/day-skin61.png",
        ⲆᐃⵠΔΔΔΔ: "img/night-skin61.png",
        ΔⲆᐃᐃΔⵠⲆ: "img/day-skin62.png",
        ΔᐃⵠⵠⵠΔⲆ: "img/night-skin62.png",
        ᐃⵠΔⵠᐃΔΔ: "img/day-skin63.png",
        ⲆⵠⲆᐃΔⲆᐃ: "img/night-skin63.png",
        ᐃΔᐃⵠΔⵠᐃ: "img/day-skin64.png",
        ⲆᐃᐃΔᐃⲆΔ: "img/night-skin64.png",
        ΔΔⵠᐃᐃᐃΔ: "img/day-skin65.png",
        ᐃᐃⵠⵠΔᐃᐃ: "img/night-skin65.png",
        ⵠⵠΔⲆⵠⲆⲆ: "img/day-skin66.png",
        ᐃΔᐃⲆⲆⲆⲆ: "img/night-skin66.png",
        ΔⵠΔΔⵠⲆⵠ: "img/day-skin67.png",
        ⵠΔⲆⲆᐃⲆᐃ: "img/night-skin67.png",
        ⲆⲆⲆⵠⵠⵠΔ: "img/day-skin68.png",
        ⵠⲆᐃⵠΔᐃᐃ: "img/night-skin68.png",
        ⵠΔᐃⲆᐃΔⲆ: "img/day-skin69.png",
        ΔⲆⲆⵠΔΔⵠ: "img/night-skin69.png",
        ⵠⵠᐃⲆⵠⲆⵠ: "img/day-skin70.png",
        ᐃⲆⵠⲆΔⵠᐃ: "img/night-skin70.png",
        ⵠᐃΔΔⵠⲆΔ: "img/day-skin71.png",
        ᐃⲆⲆⲆⵠⲆᐃ: "img/night-skin71.png",
        ΔⲆΔΔᐃⲆΔ: "img/day-skin72.png",
        ΔᐃΔⵠᐃΔⵠ: "img/night-skin72.png",
        ⲆᐃⵠⲆⲆΔⵠ: "img/day-skin73.png",
        Δⵠᐃᐃᐃᐃⵠ: "img/night-skin73.png",
        ΔΔⵠᐃΔᐃⲆ: "img/day-skin74.png",
        ⵠⵠⵠⵠΔᐃΔ: "img/night-skin74.png",
        ᐃᐃΔᐃᐃⵠⲆ: "img/day-skin75.png",
        ᐃΔⲆⲆΔᐃΔ: "img/night-skin75.png",
        ⵠᐃᐃΔᐃⲆⵠ: "img/day-skin76.png",
        ⲆᐃᐃⲆⲆΔⲆ: "img/night-skin76.png",
        ⵠᐃΔΔᐃᐃᐃ: "img/day-skin77.png",
        ⲆⲆᐃⲆⲆⲆⲆ: "img/night-skin77.png",
        ⲆᐃᐃⲆᐃᐃΔ: "img/day-skin78.png",
        ⲆΔΔᐃᐃᐃⵠ: "img/night-skin78.png",
        ᐃΔⲆΔΔΔΔ: "img/day-skin79.png",
        ⵠΔᐃⲆⲆⵠᐃ: "img/night-skin79.png",
        ⵠᐃⲆⵠⲆⵠⲆ: "img/day-skin80.png",
        ΔΔⲆⲆⲆⲆΔ: "img/night-skin80.png",
        ᐃΔΔΔⲆⲆⵠ: "img/day-skin81.png",
        ⲆᐃᐃⵠΔΔⲆ: "img/night-skin81.png",
        ᐃΔⲆⲆΔΔΔ: "img/day-skin82.png",
        ⲆⲆΔⲆᐃΔⵠ: "img/night-skin82.png",
        ⵠⵠᐃⲆΔᐃⵠ: "img/day-skin83.png",
        ᐃᐃΔᐃⵠⵠⲆ: "img/night-skin83.png",
        ΔⲆⲆⵠᐃᐃΔ: "img/day-skin84.png",
        ΔΔⵠΔᐃΔⲆ: "img/night-skin84.png",
        ⲆⲆᐃⲆⲆⲆⵠ: "img/day-skin85.png",
        ᐃⲆᐃᐃᐃᐃΔ: "img/night-skin85.png",
        ᐃᐃΔⵠⵠⲆᐃ: "img/day-skin86.png",
        ΔΔⵠᐃᐃⵠᐃ: "img/night-skin86.png",
        ᐃΔᐃᐃᐃΔⲆ: "img/day-skin87.png",
        ΔⵠᐃⵠΔᐃΔ: "img/night-skin87.png",
        ᐃᐃⲆⵠⲆⵠⲆ: "img/day-skin88.png",
        ⲆⲆⲆᐃΔΔΔ: "img/night-skin88.png",
        ⵠᐃΔⵠⵠᐃΔ: "img/day-skin89.png",
        ΔⵠΔΔᐃⵠΔ: "img/night-skin89.png",
        ⵠⲆΔᐃᐃⲆΔ: "img/day-skin90.png",
        ⲆᐃΔΔᐃΔⵠ: "img/night-skin90.png",
        ⵠΔᐃⲆⲆⵠΔ: "img/day-skin91.png",
        ⵠΔᐃᐃⲆΔΔ: "img/night-skin91.png",
        ᐃᐃⵠΔⲆΔΔ: "img/day-skin92.png",
        ⲆΔⲆᐃⲆⵠᐃ: "img/night-skin92.png",
        ⵠⵠᐃⲆΔⵠΔ: "img/day-skin93.png",
        ⲆⲆᐃᐃⵠᐃⵠ: "img/night-skin93.png",
        ΔⵠⵠΔⵠⵠⲆ: "img/day-skin94.png",
        ᐃᐃᐃⵠᐃⲆᐃ: "img/night-skin94.png",
        ΔΔᐃⵠⲆⵠᐃ: "img/day-skin95.png",
        ᐃᐃΔΔⵠⵠᐃ: "img/night-skin95.png",
        ⲆΔΔΔΔⲆᐃ: "img/day-skin96.png",
        ⲆⲆΔΔⲆΔΔ: "img/night-skin96.png",
        ⲆᐃⵠⵠΔΔⵠ: "img/day-skin97.png",
        ΔᐃⲆⲆⵠⵠⵠ: "img/night-skin97.png",
        ᐃᐃⵠⲆⵠΔⲆ: "img/day-skin98.png",
        ⵠᐃᐃⲆⵠᐃΔ: "img/night-skin98.png",
        ᐃⲆΔΔΔΔⵠ: "img/day-skin99.png",
        ⲆⲆⵠᐃⵠΔⵠ: "img/night-skin99.png",
        ⵠᐃᐃᐃⲆⵠⵠ: "img/day-skin100.png",
        ⲆⲆⵠⲆᐃΔᐃ: "img/night-skin100.png",
        ΔΔᐃⵠΔⲆⵠ: "img/day-skin101.png",
        ⲆᐃᐃⲆᐃⲆⲆ: "img/night-skin101.png",
        ⲆⲆΔᐃⵠᐃⵠ: "img/day-skin102.png",
        ᐃⲆⲆΔⲆⵠⲆ: "img/night-skin102.png",
        ᐃⵠᐃᐃⵠⲆⲆ: "img/day-skin103.png",
        ⲆⵠΔΔⲆΔΔ: "img/night-skin103.png",
        ᐃᐃᐃᐃⲆⲆⲆ: "img/day-skin104.png",
        ⲆᐃᐃΔⵠΔᐃ: "img/night-skin104.png",
        ᐃᐃⵠⵠⲆⲆⵠ: "img/day-skin105.png",
        ᐃⲆⵠΔⵠⲆⲆ: "img/night-skin105.png",
        ᐃᐃⵠΔᐃΔᐃ: "img/day-skin106.png",
        ⵠᐃᐃⲆΔΔΔ: "img/night-skin106.png",
        ⲆⵠⲆⲆᐃⲆⵠ: "img/day-skin107.png",
        ⵠⲆⵠᐃⵠᐃⵠ: "img/night-skin107.png",
        ΔⲆⲆΔⵠⵠᐃ: "img/day-skin108.png",
        ⵠⲆⲆⲆⵠⲆᐃ: "img/night-skin108.png",
        ΔΔᐃᐃΔᐃΔ: "img/day-skin109.png",
        ᐃⲆⵠⲆΔΔᐃ: "img/night-skin109.png",
        ᐃΔⵠᐃⵠᐃΔ: "img/day-skin110.png",
        ⵠⵠᐃⵠⲆΔᐃ: "img/night-skin110.png",
        ⲆⵠΔⲆᐃⵠⵠ: "img/day-skin111.png",
        ⵠΔⲆΔⵠⵠᐃ: "img/night-skin111.png",
        ᐃⵠⵠΔΔⵠᐃ: "img/day-skin112.png",
        ⵠΔⲆⲆⵠᐃⲆ: "img/night-skin112.png",
        ⲆΔΔⵠⲆⲆⵠΔΔ: "img/day-skin113.png",
        ᐃΔⲆⵠΔΔᐃᐃᐃ: "img/night-skin113.png",
        ᐃⲆᐃΔᐃᐃⵠ: "img/day-skin114.png",
        ᐃᐃⵠᐃᐃⵠᐃ: "img/night-skin114.png",
        ᐃⵠΔⲆΔᐃⲆ: "img/day-skin115.png",
        ⲆⲆΔⲆΔⲆΔ: "img/night-skin115.png",
        ⲆⲆⵠᐃⲆΔΔ: "img/day-skin116.png",
        ⵠΔᐃᐃΔᐃⲆ: "img/night-skin116.png",
        ⲆⲆⵠⲆⵠᐃⵠ: "img/day-skin117.png",
        ⵠⲆᐃᐃⵠⲆⲆ: "img/night-skin117.png",
        ᐃⵠⲆⵠΔⵠΔ: "img/day-skin118.png",
        ᐃⵠΔⵠⵠΔⵠ: "img/night-skin118.png",
        ᐃΔᐃⲆⲆΔΔ: "img/day-skin119.png",
        ΔΔᐃᐃⵠΔⲆ: "img/night-skin119.png",
        ΔΔᐃⵠⵠᐃⲆ: "img/day-skin120.png",
        ᐃᐃΔⵠⵠᐃΔ: "img/night-skin120.png",
        ᐃΔⲆⲆⲆⵠⵠ: "img/day-skin121.png",
        ᐃⵠⵠᐃᐃΔΔ: "img/night-skin121.png",
        ⲆᐃⵠⲆᐃΔⲆ: "img/day-skin122.png",
        ᐃⲆΔⵠᐃᐃⵠ: "img/night-skin122.png",
        ⵠΔΔΔΔΔᐃ: "img/day-skin123.png",
        ΔⲆⲆΔⵠΔⲆ: "img/night-skin123.png",
        ᐃᐃⵠᐃⵠⲆⲆ: "img/day-skin124.png",
        ΔⵠᐃⲆΔᐃⲆ: "img/night-skin124.png",
        ⵠⵠⵠᐃᐃᐃⵠ: "img/day-skin125.png",
        ⵠⵠⵠΔᐃᐃⵠ: "img/night-skin125.png",
        ⲆᐃᐃΔᐃⵠⲆ: "img/day-skin126.png",
        ΔΔⲆᐃΔⵠⵠ: "img/night-skin126.png",
        ΔⲆᐃΔⲆΔⵠ: "img/day-skin127.png",
        ⲆⲆΔⵠⵠΔᐃ: "img/night-skin127.png",
        ⵠᐃⵠⲆⵠΔΔ: "img/day-skin128.png",
        ᐃᐃΔⵠΔΔΔ: "img/night-skin128.png",
        ᐃᐃΔΔΔⵠΔ: "img/day-skin129.png",
        ΔⲆΔⵠΔΔᐃ: "img/night-skin129.png",
        ⲆⲆⵠᐃᐃᐃΔ: "img/day-skin130-1.png",
        ⲆᐃΔⵠⵠᐃᐃ: "img/night-skin130-1.png",
        ᐃᐃᐃⲆⲆᐃⲆ: "img/day-skin131.png",
        ⲆᐃΔⲆⲆⲆⲆ: "img/night-skin131.png",
        ᐃΔᐃᐃⲆᐃⲆ: "img/day-skin132.png",
        ⵠᐃⵠⲆᐃⲆⲆ: "img/night-skin132.png",
        ΔⲆⵠΔᐃⲆᐃ: "img/day-skin133.png",
        ⵠⵠⲆⵠⲆᐃᐃ: "img/night-skin133.png",
        ⲆΔⵠⲆⵠΔᐃ: "img/day-skin134.png",
        ΔᐃⲆⵠᐃⲆⲆ: "img/night-skin134.png",
        ᐃⲆΔᐃΔⲆΔ: "img/day-skin135.png",
        ΔᐃᐃⲆᐃⲆⵠ: "img/night-skin135.png",
        ᐃᐃⵠⵠⵠⲆⲆ: "img/day-skin136.png",
        ⵠⲆΔⲆⵠⵠⲆ: "img/night-skin136.png",
        ⵠⲆᐃⲆⵠᐃΔ: "img/day-skin137.png",
        ΔⲆⲆΔⵠᐃΔ: "img/night-skin137.png",
        ⲆΔⵠⲆᐃΔⵠ: "img/day-skin138.png",
        ⲆⵠᐃⲆΔⵠⲆ: "img/night-skin138.png",
        ΔΔᐃⵠΔΔΔ: "img/day-skin139.png",
        ΔΔⵠⲆⲆΔⵠ: "img/night-skin139.png",
        ⲆΔⵠⲆⵠⲆⲆ: "img/day-skin140.png",
        ⵠΔⲆⵠΔⵠᐃ: "img/night-skin140.png",
        ⵠᐃⲆΔᐃⵠⲆ: "img/day-skin141.png",
        ⵠⵠΔᐃⲆᐃⵠ: "img/night-skin141.png",
        ΔΔⲆⲆᐃⲆⲆ: "img/day-skin142.png",
        ⲆⵠΔⵠΔᐃⵠ: "img/night-skin142.png",
        ⲆᐃⲆᐃⲆⵠᐃ: "img/day-skin143.png",
        ΔΔⲆᐃᐃⵠΔ: "img/night-skin143.png",
        ᐃⲆⲆΔⵠⵠΔ: "img/day-skin144.png",
        ⵠⵠΔⵠⲆⲆⵠ: "img/night-skin144.png",
        ᐃΔΔᐃⵠᐃᐃ: "img/day-skin145.png",
        ΔΔⲆᐃᐃᐃⵠ: "img/night-skin145.png",
        ΔᐃᐃⲆⲆΔᐃ: "img/day-skin146.png",
        ⵠᐃᐃᐃⲆⲆᐃ: "img/night-skin146.png",
        ΔⵠⵠᐃΔᐃΔ: "img/day-skin147.png",
        ⵠᐃΔⲆⲆΔΔ: "img/night-skin147.png",
        ⵠᐃΔΔⵠⵠⲆ: "img/day-skin148.png",
        ΔΔⵠⵠᐃΔⵠ: "img/night-skin148.png",
        ⲆᐃᐃⲆᐃᐃᐃ: "img/day-skin149.png",
        ⵠΔᐃᐃᐃⲆⵠ: "img/night-skin149.png",
        ΔⲆⲆΔⵠΔⵠ: "img/day-skin150.png",
        ⵠⵠᐃⲆⲆᐃΔ: "img/night-skin150.png",
        ΔⵠⲆⲆᐃⲆⲆ: "img/day-skin151.png",
        ΔⵠⲆⵠⵠⲆⵠ: "img/night-skin151.png",
        ᐃᐃᐃⵠᐃΔⵠ: "img/day-skin152.png",
        ᐃⲆⲆᐃᐃⲆᐃ: "img/night-skin152.png",
        ΔᐃⵠⵠⵠⲆⲆ: "img/day-skin153.png",
        ΔⵠᐃⵠⵠⲆᐃ: "img/night-skin153.png",
        ⵠΔⵠᐃⲆⵠᐃ: "img/day-skin154.png",
        ΔΔⲆⲆΔᐃᐃ: "img/night-skin154.png",
        ⵠᐃⵠⵠΔΔⲆ: "img/day-skin155.png",
        ⲆⵠⲆⲆᐃⵠⲆ: "img/night-skin155.png",
        ᐃΔΔΔΔᐃΔ: "img/day-skin156.png",
        ⵠΔⵠⵠΔⲆᐃ: "img/night-skin156.png",
        ⲆⵠᐃⲆᐃΔᐃ: "img/day-skin157.png",
        ᐃⲆᐃΔⵠⲆᐃ: "img/night-skin157.png",
        ⵠᐃΔⲆⲆΔᐃ: "img/day-skin158.png",
        ⵠΔΔᐃⲆᐃⲆ: "img/night-skin158.png",
        ᐃᐃᐃΔⵠⵠᐃ: "img/day-skin159.png",
        Δᐃᐃᐃᐃⵠᐃ: "img/night-skin159.png",
        ΔᐃⲆⲆᐃⵠⵠ: "img/day-skin160.png",
        ΔΔᐃᐃⵠⵠΔ: "img/night-skin160.png",
        ⵠΔΔΔΔⲆⲆ: "img/day-skin161.png",
        ᐃΔⲆⵠᐃⲆⵠ: "img/night-skin161.png",
        ⵠᐃⵠⲆᐃⲆΔ: "img/day-skin162.png",
        ΔΔⲆᐃⵠⲆⲆ: "img/night-skin162.png",
        ⲆᐃΔⲆⲆⵠⵠ: "img/day-skin163.png",
        ᐃⲆᐃΔᐃⲆⲆ: "img/night-skin163.png",
        ΔⲆᐃⵠΔᐃᐃ: "img/day-skin164.png",
        ᐃΔⵠⵠⲆΔΔ: "img/night-skin164.png",
        ⲆᐃⵠᐃⲆΔⲆ: "img/day-skin165.png",
        ᐃⲆⵠᐃᐃⵠⲆ: "img/night-skin165.png",
        ᐃⵠᐃΔⲆⵠⲆ: "img/day-skin166.png",
        ΔᐃΔΔⵠⲆΔ: "img/night-skin166.png",
        ⲆᐃΔⵠⲆΔΔ: "img/day-skin167.png",
        ⲆⲆᐃⵠⲆⵠΔ: "img/night-skin167.png",
        ΔⲆⵠᐃΔⲆⵠ: "img/day-skin168.png",
        ⲆⲆᐃⵠΔⲆⵠ: "img/night-skin168.png",
        ⲆΔᐃᐃⵠⲆΔ: "img/day-skin169.png",
        ⲆᐃᐃⲆⵠⵠⲆ: "img/night-skin169.png",
        ᐃⲆΔΔⲆⵠΔ: "img/day-skin170.png",
        ΔⲆΔᐃΔΔΔ: "img/night-skin170.png",
        ΔᐃⲆⲆⵠΔⵠ: "img/day-skin171.png",
        ⵠⵠⵠΔⲆⲆᐃ: "img/night-skin171.png",
        ᐃⲆΔᐃΔᐃⲆ: "img/day-skin172.png",
        ⵠⵠΔᐃᐃⵠΔ: "img/night-skin172.png",
        ⲆⲆⲆΔᐃᐃᐃ: "img/day-skin173.png",
        ⲆᐃΔᐃⵠⵠⵠ: "img/night-skin173.png",
        ᐃᐃᐃⵠΔᐃΔ: "img/day-skin174.png",
        ᐃⵠᐃⵠᐃᐃᐃ: "img/night-skin174.png",
        ⵠΔⵠΔⵠⵠⲆ: "img/day-skin175.png",
        ΔⵠⵠᐃΔᐃⲆ: "img/night-skin175.png",
        ᐃΔᐃᐃΔⵠΔ: "img/day-skin176.png",
        ΔᐃⵠΔΔⵠᐃ: "img/night-skin176.png",
        ΔΔᐃΔΔⲆᐃ: "img/day-skin177.png",
        ᐃⵠᐃΔⵠⲆⵠ: "img/night-skin177.png",
        ⲆᐃⵠⵠᐃⵠⲆ: "img/day-skin178.png",
        ᐃⵠᐃⲆⲆᐃᐃ: "img/night-skin178.png",
        ᐃⵠᐃⵠᐃΔⵠ: "img/day-skin179.png",
        ⲆᐃΔⵠΔⵠᐃ: "img/night-skin179.png",
        ᐃⵠᐃⲆᐃⲆᐃ: "img/day-skin180.png",
        ΔⲆᐃⵠᐃⵠⲆ: "img/night-skin180.png",
        ᐃⲆᐃΔⵠᐃⵠ: "img/day-skin181.png",
        ᐃⲆⵠᐃⲆⲆⲆ: "img/night-skin181.png",
        ⲆⵠⲆΔⵠᐃᐃ: "img/day-skin182.png",
        ⵠΔⲆΔᐃⵠᐃ: "img/night-skin182.png",
        ᐃΔⲆΔⲆΔⲆ: "img/day-skin183.png",
        ΔΔᐃⲆᐃⵠⲆ: "img/night-skin183.png",
        ⵠⵠⲆΔΔᐃⲆ: "img/day-skin184.png",
        ⲆΔⵠΔⲆΔⲆ: "img/night-skin184.png",
        ⵠᐃⲆⲆᐃⵠⲆ: "img/day-skin185.png",
        ᐃⲆᐃⵠᐃⲆᐃ: "img/night-skin185.png",
        ⲆⵠⲆΔⲆᐃΔ: "img/day-skin186.png",
        ᐃᐃΔᐃⵠⲆⲆ: "img/night-skin186.png",
        ᐃⲆⵠⵠⵠᐃΔ: "img/day-skin187.png",
        ⵠⵠⵠⵠⲆⵠⵠ: "img/night-skin187.png",
        ᐃⲆⲆⲆΔΔⲆ: "img/day-skin188.png",
        ᐃⲆⵠᐃΔΔᐃ: "img/night-skin188.png",
        ᐃᐃⲆⲆᐃⲆΔ: "img/day-skin189.png",
        ᐃᐃΔΔⵠⵠⵠ: "img/night-skin189.png",
        ⵠⲆᐃΔⵠᐃΔ: "img/day-skin190.png",
        ᐃⵠΔⲆⵠᐃⲆ: "img/night-skin190.png",
        ᐃⲆᐃᐃΔⲆᐃ: "img/day-skin191.png",
        ᐃⵠⲆⲆⵠⵠΔ: "img/night-skin191.png",
        ⵠⲆᐃΔᐃⲆΔ: "img/day-skin192.png",
        ΔᐃΔⲆΔⲆᐃ: "img/night-skin192.png",
        ⲆᐃΔⲆΔⵠⵠ: "img/day-skin193.png",
        ⲆΔᐃⲆΔᐃΔ: "img/night-skin193.png",
        ᐃΔⵠⲆⵠΔⲆ: "img/day-skin194.png",
        ⵠΔᐃⵠⵠⵠΔ: "img/night-skin194.png",
        ΔⲆᐃᐃᐃΔⲆ: "img/day-skin195.png",
        ⲆⲆᐃΔⲆⵠⵠ: "img/night-skin195.png",
        ΔᐃⲆΔⵠⵠΔ: "img/day-skin196.png",
        ⵠⵠΔᐃᐃᐃⵠ: "img/night-skin196.png",
        ᐃΔΔⲆⲆⵠΔ: "img/day-skin197.png",
        ᐃᐃᐃΔΔⲆᐃ: "img/night-skin197.png",
        ⲆⵠᐃᐃⲆΔᐃ: "img/day-skin198.png",
        ⲆΔΔⲆΔΔⵠ: "img/night-skin198.png",
        ⲆⲆⵠⲆⵠⵠⲆ: "img/day-skin199.png",
        ⵠⲆⵠⲆⲆᐃᐃ: "img/night-skin199.png",
        ⲆⲆⵠⲆⲆᐃⲆ: "img/day-skin200.png",
        ⲆⵠᐃΔⲆΔⵠ: "img/night-skin200.png",
        ᐃΔᐃᐃΔΔⵠ: "img/day-skin201.png",
        ⲆΔᐃⵠⲆΔΔ: "img/night-skin201.png",
        ⲆⲆⵠΔⲆΔⲆ: "img/day-skin202.png",
        ΔⲆⲆⵠⲆⲆᐃ: "img/night-skin202.png",
        ⵠⵠΔⵠᐃΔⲆ: "img/day-skin203.png",
        ΔⵠΔⵠᐃᐃⵠ: "img/night-skin203.png",
        ΔⵠΔᐃᐃⲆⵠ: "img/day-skin204.png",
        ⲆᐃΔⵠᐃᐃᐃ: "img/night-skin204.png",
        ⵠᐃΔⲆΔⲆᐃ: "img/day-skin205.png",
        ΔⵠⵠΔⵠᐃⵠ: "img/night-skin205.png",
        ΔⵠⲆⵠⲆΔᐃ: "img/day-skin206.png",
        ΔᐃΔⲆΔᐃⲆ: "img/night-skin206.png",
        ᐃⵠⲆᐃⲆΔⲆ: "img/day-skin207.png",
        ⵠⲆΔⵠΔΔΔ: "img/night-skin207.png",
        ⵠΔⲆⵠΔⵠⵠ: "img/day-skin208.png",
        ⲆⲆⵠⲆⲆΔⲆ: "img/night-skin208.png",
        ⲆⵠⲆⵠⲆⲆΔ: "img/day-skin209.png",
        ΔⲆᐃΔᐃⵠΔ: "img/night-skin209.png",
        ᐃΔⲆⲆᐃᐃΔ: "img/day-skin210.png",
        ΔⵠᐃᐃⲆᐃᐃ: "img/night-skin210.png",
        ⲆΔⲆⲆᐃⲆᐃ: "img/day-skin211.png",
        ⵠⲆⲆⵠⵠⲆΔ: "img/night-skin211.png",
        ΔᐃΔΔᐃΔⲆ: "img/day-skin212.png",
        ⲆΔⲆⵠⵠᐃᐃ: "img/night-skin212.png",
        ΔⲆⵠᐃΔⲆΔ: "img/day-hand-skin0.png",
        Δᐃⵠⵠⵠⵠⵠ: "img/night-hand-skin0.png",
        ΔΔⲆᐃΔᐃᐃ: "img/day-hand-skin1.png",
        ΔⲆⲆⵠᐃⲆᐃ: "img/night-hand-skin1.png",
        ΔΔⲆⵠⵠⵠⵠ: "img/day-hand-skin2.png",
        ⲆᐃⲆⵠⵠⲆⲆ: "img/night-hand-skin2.png",
        ⵠⲆⲆⵠⲆΔⲆ: "img/day-hand-skin3.png",
        ⲆΔⵠⲆⲆᐃⵠ: "img/night-hand-skin3.png",
        ⵠΔⲆⲆⵠΔⲆ: "img/day-hand-skin4.png",
        ᐃΔᐃⵠⲆΔⵠ: "img/night-hand-skin4.png",
        ΔⲆⲆΔᐃᐃᐃ: "img/day-hand-skin5.png",
        ᐃᐃⵠⵠⵠⵠᐃ: "img/night-hand-skin5.png",
        ⲆᐃᐃⲆⲆΔΔ: "img/day-hand-skin6.png",
        ⲆᐃⵠΔⲆΔⲆⵠⲆ: "img/night-hand-skin6.png",
        ᐃΔᐃᐃᐃⲆΔ: "img/day-hand-skin6.png",
        ⲆⵠΔΔⵠⲆΔ: "img/night-hand-skin6.png",
        ᐃⵠⵠⵠⵠⲆⵠ: "img/day-hand-skin8.png",
        ᐃΔᐃΔΔⵠΔ: "img/night-hand-skin8.png",
        ᐃᐃⲆⲆⲆᐃᐃ: "img/day-hand-skin9.png",
        ΔΔᐃᐃᐃⵠⵠ: "img/night-hand-skin9.png",
        ᐃⵠⵠΔⵠᐃⵠ: "img/day-hand-skin10.png",
        ᐃᐃᐃⲆⵠⲆⵠ: "img/night-hand-skin10.png",
        ΔⲆⵠⵠΔΔⵠ: "img/day-hand-skin11.png",
        ⲆΔⵠΔᐃΔⲆ: "img/night-hand-skin11.png",
        ΔⲆⵠΔΔⲆⲆ: "img/day-hand-skin12.png",
        ΔⵠᐃⵠⲆᐃᐃ: "img/night-hand-skin12.png",
        Δᐃⵠⵠⵠᐃⵠ: "img/day-hand-skin13.png",
        ⲆⵠᐃᐃⲆᐃᐃ: "img/night-hand-skin13.png",
        ⵠᐃⲆⵠⲆᐃᐃ: "img/day-hand-skin14.png",
        ᐃⵠⲆⵠΔᐃᐃ: "img/night-hand-skin14.png",
        ⲆᐃⲆⵠΔᐃⵠ: "img/day-hand-skin15.png",
        ⵠΔᐃⲆΔⲆΔ: "img/night-hand-skin15.png",
        ᐃᐃⵠⵠᐃⵠⲆ: "img/day-hand-skin16.png",
        ᐃⲆⲆΔΔⲆⵠ: "img/night-hand-skin16.png",
        ⲆⲆⵠⵠᐃⵠⵠ: "img/day-hand-skin17.png",
        ⵠᐃᐃⵠᐃΔⵠ: "img/night-hand-skin17.png",
        ⲆⲆⲆⲆᐃⲆⵠ: "img/day-hand-skin18.png",
        ᐃⵠⵠⲆᐃⵠⲆ: "img/night-hand-skin18.png",
        ⲆⲆⵠΔⵠᐃⵠ: "img/day-hand-skin19.png",
        ⲆⲆᐃⵠⲆΔⵠ: "img/night-hand-skin19.png",
        ⵠⲆⵠΔⵠΔΔ: "img/day-hand-skin20.png",
        ⲆⲆⵠᐃΔᐃΔ: "img/night-hand-skin20.png",
        ⲆⲆᐃΔⲆⲆⵠ: "img/day-hand-skin21.png",
        ᐃⵠⵠⲆⵠⵠᐃ: "img/night-hand-skin21.png",
        ᐃⵠΔⵠⵠⵠΔ: "img/day-hand-skin22.png",
        ⵠΔⵠᐃᐃᐃᐃ: "img/night-hand-skin22.png",
        ⲆⵠⲆᐃΔᐃⵠ: "img/day-hand-skin23.png",
        ᐃⵠᐃⲆⲆΔⲆ: "img/night-hand-skin23.png",
        ⵠⲆⲆⵠΔⵠⲆ: "img/day-hand-skin24.png",
        ⲆᐃΔⲆᐃⵠΔ: "img/night-hand-skin24.png",
        ΔΔⵠⵠⲆΔΔ: "img/day-hand-skin25.png",
        ΔⲆΔΔᐃⲆᐃ: "img/night-hand-skin25.png",
        ΔⲆⲆⲆᐃᐃⵠ: "img/day-hand-skin26.png",
        ⲆᐃⲆⵠΔΔⵠ: "img/night-hand-skin26.png",
        ⲆᐃᐃᐃⲆⵠΔ: "img/day-hand-skin27.png",
        ᐃⲆⲆᐃΔΔⲆ: "img/night-hand-skin27.png",
        ᐃⵠΔΔⵠᐃΔ: "img/day-hand-skin28.png",
        ᐃⲆΔⵠᐃΔΔ: "img/night-hand-skin28.png",
        ΔⲆΔⲆⵠⲆⵠ: "img/day-hand-skin29.png",
        ⵠⲆΔΔΔⲆᐃ: "img/night-hand-skin29.png",
        ᐃᐃⲆᐃⵠᐃⵠ: "img/day-hand-skin30.png",
        ΔⵠⵠΔⲆΔⵠ: "img/night-hand-skin30.png",
        ᐃⲆᐃⵠΔⲆᐃ: "img/day-hand-skin31.png",
        ⵠᐃᐃⲆⵠΔⵠ: "img/night-hand-skin31.png",
        ⲆΔᐃΔΔᐃⵠ: "img/day-hand-skin32.png",
        ⲆΔΔᐃΔⲆⲆ: "img/night-hand-skin32.png",
        ᐃΔⵠΔᐃΔⲆ: "img/day-hand-skin33.png",
        ⵠᐃⲆⵠΔᐃⲆ: "img/night-hand-skin33.png",
        ⲆᐃΔΔⵠⲆⵠ: "img/day-hand-skin34.png",
        ⵠⲆⵠᐃⵠⲆΔ: "img/night-hand-skin34.png",
        ΔⲆΔΔⲆⵠᐃ: "img/day-hand-skin35.png",
        ⲆΔΔΔΔⲆⲆ: "img/night-hand-skin35.png",
        ⲆΔᐃⵠⵠⵠΔ: "img/day-hand-skin36.png",
        ⲆΔᐃᐃΔⵠΔ: "img/night-hand-skin36.png",
        ⲆⲆⵠΔⵠΔⲆ: "img/day-hand-skin37.png",
        ⲆⲆᐃᐃⵠᐃΔ: "img/night-hand-skin37.png",
        ⵠⲆᐃᐃⲆΔΔ: "img/day-hand-skin38.png",
        ᐃⵠᐃᐃⲆⲆⵠ: "img/night-hand-skin38.png",
        ΔⲆⲆΔᐃΔⵠ: "img/day-hand-skin39.png",
        ⵠΔᐃⵠⲆⵠΔ: "img/night-hand-skin39.png",
        ΔⵠΔᐃⲆⲆⵠ: "img/day-hand-skin40.png",
        ⵠᐃΔⲆᐃΔᐃ: "img/night-hand-skin40.png",
        ᐃᐃᐃⲆΔΔᐃ: "img/day-hand-skin41.png",
        ⲆⲆⲆᐃⵠᐃᐃ: "img/night-hand-skin41.png",
        ΔⲆⲆᐃΔⲆⲆ: "img/day-hand-skin42.png",
        ⵠⲆⲆⵠΔᐃΔ: "img/night-hand-skin42.png",
        ᐃⵠᐃᐃⵠⵠΔ: "img/day-hand-skin43.png",
        ⲆⲆᐃᐃⵠⲆⲆ: "img/night-hand-skin43.png",
        ᐃΔᐃⲆΔⵠⵠ: "img/day-hand-skin16.png",
        ⵠⵠᐃⵠΔᐃⲆ: "img/night-hand-skin16.png",
        ⵠⲆⵠⵠᐃⲆⲆ: "img/day-hand-skin45.png",
        ⵠⵠⵠΔⲆⲆⲆ: "img/night-hand-skin45.png",
        ᐃⵠΔᐃᐃⵠᐃ: "img/day-hand-skin46.png",
        ΔⵠᐃΔⲆᐃᐃ: "img/night-hand-skin46.png",
        ᐃᐃΔΔᐃΔΔ: "img/day-hand-skin47.png",
        ⲆᐃⵠⲆᐃᐃΔ: "img/night-hand-skin47.png",
        ⲆⲆΔᐃᐃⵠⵠ: "img/day-hand-skin48.png",
        ΔᐃᐃⲆⵠⵠΔ: "img/night-hand-skin48.png",
        ⵠΔᐃΔΔᐃⵠ: "img/day-hand-skin49.png",
        ᐃⲆⲆΔΔⲆⲆ: "img/night-hand-skin49.png",
        ΔΔⲆⲆᐃᐃⲆ: "img/day-hand-skin49.png",
        ⲆⲆⲆⵠⵠΔΔ: "img/night-hand-skin49.png",
        ⲆΔᐃΔᐃΔᐃ: "img/day-hand-skin51.png",
        ΔⵠΔⵠᐃᐃΔ: "img/night-hand-skin51.png",
        ⲆⲆᐃⵠⵠΔᐃ: "img/day-hand-skin52.png",
        ΔⵠᐃⵠΔΔΔ: "img/night-hand-skin52.png",
        ΔⵠⵠΔⲆᐃᐃ: "img/day-hand-skin53.png",
        ⵠΔⵠΔⵠΔⲆ: "img/night-hand-skin53.png",
        ⲆⲆⵠⵠᐃΔΔ: "img/day-hand-skin53.png",
        ᐃⵠᐃᐃΔᐃΔ: "img/night-hand-skin53.png",
        ⲆⲆΔⵠⲆⲆⲆ: "img/day-hand-skin55.png",
        ⵠⵠΔⲆⵠᐃΔ: "img/night-hand-skin55.png",
        ⵠⵠⵠⵠⵠⵠΔ: "img/day-hand-skin56.png",
        ΔⲆⲆⲆᐃⵠᐃ: "img/night-hand-skin56.png",
        ⵠⲆⵠᐃΔⵠⵠ: "img/day-hand-skin57.png",
        ⲆᐃⲆΔⲆⲆΔ: "img/night-hand-skin57.png",
        ΔⲆⲆᐃΔᐃΔ: "img/day-hand-skin58.png",
        ᐃⵠⵠⲆⵠⲆⵠ: "img/night-hand-skin58.png",
        ⵠⲆⲆᐃⵠᐃΔ: "img/day-hand-skin59.png",
        ᐃⲆᐃⲆⲆΔᐃ: "img/night-hand-skin59.png",
        ΔⵠⲆⲆⵠᐃⲆ: "img/day-hand-skin61.png",
        ΔⵠⵠΔᐃᐃⲆ: "img/night-hand-skin61.png",
        ΔΔΔᐃΔᐃⵠ: "img/day-hand-skin61.png",
        ΔⲆⵠⲆᐃᐃⵠ: "img/night-hand-skin61.png",
        ⵠⲆΔΔᐃᐃᐃ: "img/day-hand-skin62.png",
        ΔⵠᐃⲆⲆⲆⵠ: "img/night-hand-skin62.png",
        ΔᐃⵠⵠⲆⲆΔ: "img/day-hand-skin63.png",
        ⲆⵠⲆΔⲆⵠⵠ: "img/night-hand-skin63.png",
        ⲆᐃΔᐃⵠᐃΔ: "img/day-hand-skin64.png",
        ⵠⲆⵠⲆⵠⲆⵠ: "img/night-hand-skin64.png",
        ⲆΔΔⲆⵠᐃⵠ: "img/day-hand-skin65.png",
        ⵠᐃᐃΔⲆⵠⵠ: "img/night-hand-skin65.png",
        ⵠⵠⲆⵠⲆⵠⵠ: "img/day-hand-skin66.png",
        ⵠΔⵠᐃⵠⵠΔ: "img/night-hand-skin66.png",
        ⵠΔᐃᐃⵠᐃᐃ: "img/day-hand-skin67.png",
        ΔⲆΔⲆᐃΔⲆ: "img/night-hand-skin67.png",
        ΔᐃⵠⲆⲆⵠΔ: "img/day-hand-skin68.png",
        ᐃⲆⲆⲆⲆᐃⲆ: "img/night-hand-skin68.png",
        ⲆΔⲆΔΔⲆΔ: "img/day-hand-skin69.png",
        ⲆⵠᐃⲆⵠⵠᐃ: "img/night-hand-skin69.png",
        ᐃᐃⵠᐃⲆⲆᐃ: "img/day-hand-skin70.png",
        ᐃⲆΔⲆᐃⲆⵠ: "img/night-hand-skin70.png",
        Ⲇⵠᐃᐃᐃᐃⵠ: "img/day-hand-skin71.png",
        ᐃΔⲆᐃⲆⲆᐃ: "img/night-hand-skin71.png",
        ΔⵠᐃⲆⲆⲆΔ: "img/day-hand-skin72.png",
        ⵠⲆⵠᐃΔᐃⵠ: "img/night-hand-skin72.png",
        ⲆⲆⵠⲆⵠᐃᐃ: "img/day-hand-skin73.png",
        ΔⵠΔⵠΔⲆΔ: "img/night-hand-skin73.png",
        ⵠᐃⲆⲆΔᐃⲆ: "img/day-hand-skin74.png",
        ΔⲆΔΔᐃⵠΔ: "img/night-hand-skin74.png",
        ΔⵠⵠⵠΔΔⲆ: "img/day-hand-skin75.png",
        ⵠΔᐃⲆᐃⲆⲆ: "img/night-hand-skin75.png",
        ᐃⵠΔΔⲆⲆⵠ: "img/day-hand-skin76.png",
        ⲆᐃⵠᐃⵠΔΔ: "img/night-hand-skin76.png",
        ⵠΔΔΔΔᐃⲆ: "img/day-hand-skin77.png",
        ⲆⲆⵠⵠⲆΔᐃ: "img/night-hand-skin77.png",
        ᐃⲆΔᐃⲆⵠⵠ: "img/day-hand-skin78.png",
        ΔᐃⲆⵠᐃⲆᐃ: "img/night-hand-skin78.png",
        ⵠᐃΔᐃᐃⵠᐃ: "img/day-hand-skin79.png",
        ⲆⲆⵠⲆΔΔⲆ: "img/night-hand-skin79.png",
        ΔΔΔΔΔⲆⲆ: "img/day-hand-skin80.png",
        ⲆΔᐃⲆⲆΔⲆ: "img/night-hand-skin80.png",
        ⲆⵠⵠΔⲆⵠⵠ: "img/day-hand-skin81.png",
        ᐃᐃΔΔⲆᐃⲆ: "img/night-hand-skin81.png",
        ΔΔⲆⵠⵠΔΔ: "img/day-hand-skin82.png",
        ⵠⲆⵠΔⵠᐃᐃ: "img/night-hand-skin82.png",
        ⲆⲆᐃΔⲆΔΔ: "img/day-hand-skin83.png",
        ΔⵠᐃⲆΔΔⲆ: "img/night-hand-skin83.png",
        ᐃΔᐃⲆⲆΔⵠ: "img/day-hand-skin84.png",
        ᐃᐃⵠⲆΔⵠΔ: "img/night-hand-skin84.png",
        ᐃΔᐃΔⵠᐃⵠ: "img/day-hand-skin85.png",
        ⲆⵠᐃΔⲆⲆΔ: "img/night-hand-skin85.png",
        ⲆⵠⵠᐃⵠⲆⵠ: "img/day-hand-skin86.png",
        ᐃᐃΔⲆⲆⲆⲆ: "img/night-hand-skin86.png",
        ⵠΔᐃⵠⲆΔΔ: "img/day-hand-skin87.png",
        ΔᐃⲆⲆⲆⲆᐃ: "img/night-hand-skin87.png",
        ᐃⲆⲆΔᐃⲆᐃ: "img/day-hand-skin88.png",
        ᐃΔᐃᐃΔⲆΔ: "img/night-hand-skin88.png",
        ⲆᐃⲆᐃΔⲆⲆ: "img/day-hand-skin89.png",
        ⵠⵠⲆᐃΔⲆⵠ: "img/night-hand-skin89.png",
        ᐃΔⲆⲆᐃΔⲆ: "img/day-hand-skin90.png",
        ⲆᐃᐃΔⵠⲆⲆ: "img/night-hand-skin90.png",
        ΔⲆⵠᐃⵠⵠᐃ: "img/day-hand-skin91.png",
        ΔᐃⲆⲆΔΔᐃ: "img/night-hand-skin91.png",
        ⵠⵠᐃΔⵠᐃΔ: "img/day-hand-skin92.png",
        ⲆⲆⵠⲆⲆⲆᐃ: "img/night-hand-skin92.png",
        ᐃⵠᐃⵠᐃᐃΔ: "img/day-hand-skin93.png",
        ⵠᐃᐃⵠΔᐃΔ: "img/night-hand-skin93.png",
        ᐃⵠⲆᐃⵠⵠΔ: "img/day-hand-skin94.png",
        ᐃⲆᐃΔⲆⵠⵠ: "img/night-hand-skin94.png",
        ᐃⲆⲆⲆⵠⲆⵠ: "img/day-hand-skin95.png",
        ⵠΔΔᐃⲆⵠΔ: "img/night-hand-skin95.png",
        ⵠΔᐃΔΔΔⲆ: "img/day-hand-skin96.png",
        ΔᐃᐃⲆⲆⲆⵠ: "img/night-hand-skin96.png",
        ⵠᐃΔΔᐃᐃⲆ: "img/day-hand-skin97.png",
        ΔⵠⲆⲆⵠᐃⵠ: "img/night-hand-skin97.png",
        ⲆⵠⲆⲆΔΔᐃ: "img/day-hand-skin98.png",
        ⵠΔΔᐃⵠΔᐃ: "img/night-hand-skin98.png",
        ΔⲆⲆΔᐃⲆΔ: "img/day-hand-skin99.png",
        ΔΔⲆⲆⵠⵠⲆ: "img/night-hand-skin99.png",
        ⵠⲆⲆᐃⵠΔⵠ: "img/day-hand-skin100.png",
        ΔⲆᐃⲆⲆΔⵠ: "img/night-hand-skin100.png",
        ΔΔᐃΔΔᐃⲆ: "img/day-hand-skin101.png",
        ⲆⲆᐃⲆΔᐃⵠ: "img/night-hand-skin101.png",
        ⵠⵠΔⲆᐃⲆΔ: "img/day-hand-skin102.png",
        ᐃⵠⲆⵠᐃⲆΔ: "img/night-hand-skin102.png",
        ⵠᐃⵠⵠⲆᐃᐃ: "img/day-hand-skin103.png",
        ⵠᐃⵠᐃᐃⲆⲆ: "img/night-hand-skin103.png",
        ⵠⲆⲆᐃΔⲆΔ: "img/day-hand-skin104.png",
        ⲆⲆⲆⲆᐃⲆⲆ: "img/night-hand-skin104.png",
        ⵠⵠⲆᐃⲆΔⵠ: "img/day-hand-skin105.png",
        ΔⲆᐃΔΔΔⵠ: "img/night-hand-skin105.png",
        ⵠⵠⵠᐃᐃᐃᐃ: "img/day-hand-skin106.png",
        ⲆⵠΔⲆⵠΔΔ: "img/night-hand-skin106.png",
        ⵠΔᐃⲆⲆΔΔ: "img/day-hand-skin107.png",
        ⵠⵠᐃⵠΔⲆΔ: "img/night-hand-skin107.png",
        ᐃᐃΔⵠᐃⵠΔ: "img/day-hand-skin108.png",
        ⲆⲆⲆΔᐃⲆⵠ: "img/night-hand-skin108.png",
        ⲆΔΔⵠΔⲆⵠ: "img/day-hand-skin109.png",
        ᐃⵠΔⲆΔⲆΔ: "img/night-hand-skin109.png",
        ΔⵠⲆᐃΔⲆᐃ: "img/day-hand-skin110.png",
        ⲆΔᐃᐃⲆⲆΔ: "img/night-hand-skin110.png",
        ⵠⵠⲆⵠᐃⲆΔ: "img/day-hand-skin111.png",
        ⲆΔᐃⲆᐃΔⲆ: "img/night-hand-skin111.png",
        ⵠⵠᐃⲆΔⲆᐃ: "img/day-hand-skin112.png",
        ᐃΔᐃΔⵠΔΔ: "img/night-hand-skin112.png",
        ⲆᐃⲆᐃⵠᐃⲆⵠᐃ: "img/day-hand-skin113.png",
        ⵠⵠΔⵠⲆⵠⲆᐃᐃ: "img/night-hand-skin113.png",
        ⲆᐃᐃⵠⲆⲆⲆ: "img/day-hand-skin114.png",
        ᐃᐃᐃᐃⲆΔΔ: "img/night-hand-skin114.png",
        ᐃᐃⲆⵠᐃⵠⵠ: "img/day-hand-skin115.png",
        ⵠⲆΔΔⵠⲆᐃ: "img/night-hand-skin115.png",
        ⲆΔⲆⵠᐃΔⲆ: "img/day-hand-skin116.png",
        ⵠⲆᐃᐃᐃᐃⵠ: "img/night-hand-skin116.png",
        ᐃⵠⲆⲆᐃΔⵠ: "img/day-hand-skin117.png",
        ᐃΔⵠⲆᐃⲆΔ: "img/night-hand-skin117.png",
        ᐃᐃⵠΔΔⲆΔ: "img/day-hand-skin118.png",
        ΔᐃΔΔⵠΔᐃ: "img/night-hand-skin118.png",
        ⵠⵠΔⵠⵠⲆΔ: "img/day-hand-skin119.png",
        ⲆⲆⲆⲆⲆⲆΔ: "img/night-hand-skin119.png",
        ⵠΔⲆⵠᐃⵠᐃ: "img/day-hand-skin120.png",
        ᐃΔΔⲆⵠΔⵠ: "img/night-hand-skin120.png",
        ⵠᐃΔⵠⵠᐃᐃ: "img/day-hand-skin122.png",
        ⲆⲆⵠⵠΔⲆΔ: "img/night-hand-skin122.png",
        ᐃⵠⲆⲆᐃⵠΔ: "img/day-hand-skin122.png",
        ⵠΔⲆⲆᐃⵠⵠ: "img/night-hand-skin122.png",
        ⲆⵠᐃⲆΔΔⵠ: "img/day-hand-skin122.png",
        ᐃᐃᐃΔⲆᐃΔ: "img/night-hand-skin122.png",
        ⲆΔΔⲆⵠⵠΔ: "img/day-hand-skin124.png",
        ᐃⵠⵠᐃᐃᐃⵠ: "img/night-hand-skin124.png",
        ⵠⵠⲆᐃⲆⲆΔ: "img/day-hand-skin125.png",
        ΔΔᐃⲆⲆⲆⲆ: "img/night-hand-skin125.png",
        ΔΔⲆΔΔⵠΔ: "img/day-hand-skin126.png",
        ⵠΔΔⵠⲆⲆΔ: "img/night-hand-skin126.png",
        ⲆⵠᐃⵠⲆΔⵠ: "img/day-hand-skin127.png",
        ΔⵠΔⵠΔⵠΔ: "img/night-hand-skin127.png",
        ⲆⲆⵠΔⲆᐃΔ: "img/day-hand-skin128.png",
        ΔΔⵠᐃⵠᐃⵠ: "img/night-hand-skin128.png",
        ⲆΔⲆⵠΔⲆⵠ: "img/day-hand-skin129.png",
        ᐃⵠᐃᐃᐃΔⵠ: "img/night-hand-skin129.png",
        ⲆⲆᐃⲆΔⵠᐃ: "img/day-hand-skin130.png",
        Ⲇⵠᐃᐃⵠⵠⵠ: "img/night-hand-skin130.png",
        ΔⵠⲆᐃⲆΔⲆ: "img/day-hand-skin131.png",
        ⵠᐃⲆΔᐃᐃⵠ: "img/night-hand-skin131.png",
        ⲆⲆⲆⲆⲆⵠⵠ: "img/day-hand-skin130.png",
        ᐃⵠᐃΔΔΔⵠ: "img/night-hand-skin130.png",
        ⵠᐃᐃⵠⲆᐃⲆ: "img/day-hand-skin133.png",
        ᐃᐃⵠΔⵠⲆΔ: "img/night-hand-skin133.png",
        ᐃᐃⲆⲆⲆΔᐃ: "img/day-hand-skin134.png",
        ⵠᐃᐃⵠⵠⵠΔ: "img/night-hand-skin134.png",
        ⵠⲆⵠⵠᐃⵠⵠ: "img/day-hand-skin135.png",
        ⲆⲆΔΔΔᐃⲆ: "img/night-hand-skin135.png",
        ⵠΔⵠⵠⵠⲆΔ: "img/day-hand-skin136.png",
        ⲆⲆᐃⲆⵠⲆᐃ: "img/night-hand-skin136.png",
        ⵠⲆᐃⵠΔΔΔ: "img/day-hand-skin137.png",
        ΔⵠⵠⵠⵠⲆⲆ: "img/night-hand-skin137.png",
        ⵠΔⲆᐃⵠⵠᐃ: "img/day-hand-skin138.png",
        ᐃΔΔⲆⵠᐃⲆ: "img/night-hand-skin138.png",
        Δⵠᐃᐃⵠᐃⵠ: "img/day-hand-skin139.png",
        ΔⲆΔᐃⵠⵠᐃ: "img/night-hand-skin139.png",
        ᐃⲆⲆⵠᐃⲆᐃ: "img/day-hand-skin140.png",
        ⵠⲆᐃᐃΔⲆⵠ: "img/night-hand-skin140.png",
        ⵠᐃⵠⲆΔᐃⵠ: "img/day-hand-skin141.png",
        ᐃⵠⲆⵠⵠᐃΔ: "img/night-hand-skin141.png",
        ΔΔⵠⵠⵠⵠⵠ: "img/day-hand-skin142.png",
        ΔⲆᐃᐃΔⵠⵠ: "img/night-hand-skin142.png",
        ΔⲆⲆΔⵠⵠⲆ: "img/day-hand-skin143.png",
        ⵠⲆΔⵠⲆᐃⲆ: "img/night-hand-skin143.png",
        ᐃΔᐃⲆᐃⵠᐃ: "img/day-hand-skin144.png",
        ⲆⵠⵠⵠⵠᐃΔ: "img/night-hand-skin144.png",
        ⵠⵠΔⲆⵠΔⲆ: "img/day-hand-skin145.png",
        ᐃΔⵠⲆⲆⲆⵠ: "img/night-hand-skin145.png",
        ᐃⵠᐃⲆΔⵠᐃ: "img/day-hand-skin146.png",
        ΔⵠᐃΔⵠⵠⵠ: "img/night-hand-skin146.png",
        ᐃⵠⵠᐃΔᐃΔ: "img/day-hand-skin147.png",
        ⵠΔᐃᐃᐃⵠⵠ: "img/night-hand-skin147.png",
        ⵠΔΔΔⲆⵠΔ: "img/day-hand-skin148.png",
        ⲆⲆⲆⲆᐃᐃⵠ: "img/night-hand-skin148.png",
        ᐃᐃΔΔᐃⵠⵠ: "img/day-hand-skin149.png",
        ⲆΔΔⲆⵠᐃᐃ: "img/night-hand-skin149.png",
        ⲆⲆⲆⵠⲆΔΔ: "img/day-hand-skin150.png",
        ⲆⲆⵠⵠΔΔⵠ: "img/night-hand-skin150.png",
        ᐃᐃⵠᐃᐃᐃⲆ: "img/day-hand-skin151.png",
        ΔⲆⲆᐃⵠᐃⵠ: "img/night-hand-skin151.png",
        ⵠⵠΔᐃΔⵠⲆ: "img/day-hand-skin152.png",
        ΔⵠⲆⵠⲆⲆΔ: "img/night-hand-skin152.png",
        ΔΔΔⲆⵠⵠΔ: "img/day-hand-skin153.png",
        ⲆᐃΔᐃⲆᐃⲆ: "img/night-hand-skin153.png",
        ᐃᐃᐃⵠᐃΔᐃ: "img/day-hand-skin154.png",
        ᐃⵠⵠⵠΔΔⲆ: "img/night-hand-skin154.png",
        ⵠⵠⵠΔΔⲆⲆ: "img/day-hand-skin155.png",
        ⵠᐃⵠⵠⵠⵠᐃ: "img/night-hand-skin155.png",
        ᐃⵠⵠⵠⵠⲆⲆ: "img/day-hand-skin156.png",
        ΔⲆᐃⵠΔⵠΔ: "img/night-hand-skin156.png",
        ᐃΔΔⲆΔΔᐃ: "img/day-hand-skin157.png",
        ΔᐃΔⵠⵠΔⵠ: "img/night-hand-skin157.png",
        ᐃΔⵠᐃⵠⲆΔ: "img/day-hand-skin158.png",
        ⲆⲆΔⵠⵠⵠᐃ: "img/night-hand-skin158.png",
        ᐃⲆⵠᐃᐃⲆᐃ: "img/day-hand-skin159.png",
        ᐃΔⲆᐃΔⲆⵠ: "img/night-hand-skin159.png",
        Δⵠᐃⵠⵠⵠᐃ: "img/day-hand-skin160.png",
        ⵠΔᐃΔⲆᐃΔ: "img/night-hand-skin160.png",
        ΔⵠⵠⵠⲆᐃᐃ: "img/day-hand-skin161.png",
        ⵠⲆⲆΔⵠΔⲆ: "img/night-hand-skin161.png",
        ᐃΔⲆᐃⲆⵠΔ: "img/day-hand-skin162.png",
        ⲆⲆⲆⵠⵠΔⲆ: "img/night-hand-skin162.png",
        ᐃⵠⲆᐃⵠᐃⲆ: "img/day-hand-skin163.png",
        ᐃⲆΔᐃᐃΔΔ: "img/night-hand-skin163.png",
        ⵠⵠΔᐃⲆⲆⵠ: "img/day-hand-skin164.png",
        ⲆⵠⲆⵠΔᐃⲆ: "img/night-hand-skin164.png",
        ⵠⲆᐃⵠⲆᐃᐃ: "img/day-hand-skin165.png",
        ⲆΔⲆⵠⵠᐃⲆ: "img/night-hand-skin165.png",
        ⵠᐃᐃᐃᐃⵠΔ: "img/day-hand-skin166.png",
        ΔᐃᐃⵠΔⵠᐃ: "img/night-hand-skin166.png",
        ΔⵠΔⵠⵠΔᐃ: "img/day-hand-skin167.png",
        ⵠⵠᐃΔⵠⲆⵠ: "img/night-hand-skin167.png",
        ΔⲆⲆᐃᐃⵠⲆ: "img/day-hand-skin168.png",
        ΔⲆΔᐃⵠᐃⵠ: "img/night-hand-skin168.png",
        ⵠᐃⲆΔΔΔⵠ: "img/day-hand-skin169.png",
        ⵠᐃⲆᐃⲆⵠΔ: "img/night-hand-skin169.png",
        ΔⵠⲆΔⲆⵠΔ: "img/day-hand-skin170.png",
        ⵠⲆⲆᐃΔⵠⲆ: "img/night-hand-skin170.png",
        ΔⲆⵠⲆⵠᐃⵠ: "img/day-hand-skin171.png",
        ΔⲆⵠⵠΔⲆΔ: "img/night-hand-skin171.png",
        ⵠᐃⲆⲆⲆⲆΔ: "img/day-hand-skin172.png",
        ⲆᐃᐃⵠⲆᐃⲆ: "img/night-hand-skin172.png",
        ΔᐃᐃᐃⵠⵠⲆ: "img/day-hand-skin173.png",
        ⵠⲆⵠⲆΔⲆᐃ: "img/night-hand-skin173.png",
        ᐃΔΔΔⵠΔΔ: "img/day-hand-skin174.png",
        ⲆᐃᐃⲆⲆΔᐃ: "img/night-hand-skin174.png",
        ᐃⲆᐃⵠⵠⲆᐃ: "img/day-hand-skin175.png",
        ᐃⲆⲆᐃⲆᐃⲆ: "img/night-hand-skin175.png",
        ᐃⲆⲆᐃᐃΔⲆ: "img/day-hand-skin176.png",
        ⵠⲆⲆΔⵠᐃⵠ: "img/night-hand-skin176.png",
        ᐃⵠᐃΔΔΔⲆ: "img/day-hand-skin177.png",
        ΔⲆΔΔⵠⵠᐃ: "img/night-hand-skin177.png",
        ⲆΔⵠⲆⲆᐃΔ: "img/day-hand-skin178.png",
        ᐃⵠΔᐃⲆΔⲆ: "img/night-hand-skin178.png",
        ᐃⵠΔⲆⲆᐃΔ: "img/day-hand-skin179.png",
        ᐃᐃᐃⲆᐃΔⵠ: "img/night-hand-skin179.png",
        ᐃⲆΔⲆΔⵠⵠ: "img/day-hand-skin180.png",
        ΔΔΔᐃⲆΔΔ: "img/night-hand-skin180.png",
        ⵠᐃⵠᐃⲆΔᐃ: "img/day-hand-skin181.png",
        ΔⵠᐃⲆⲆΔᐃ: "img/night-hand-skin181.png",
        ᐃⲆᐃⲆΔⲆᐃ: "img/day-hand-skin182.png",
        ⲆⵠⵠⲆⲆⵠᐃ: "img/night-hand-skin182.png",
        ᐃⲆⲆⵠⵠΔᐃ: "img/day-hand-skin183.png",
        ΔⵠⲆⲆⲆⵠⲆ: "img/night-hand-skin183.png",
        ⵠⵠⲆⲆⵠⲆⵠ: "img/day-hand-skin184.png",
        ⲆᐃⲆᐃⲆⲆᐃ: "img/night-hand-skin184.png",
        Ⲇᐃⵠᐃᐃᐃᐃ: "img/day-hand-skin185.png",
        ⵠᐃⵠⲆΔⵠΔ: "img/night-hand-skin185.png",
        ᐃⲆⲆⵠⵠΔⵠ: "img/day-hand-skin186.png",
        ΔᐃΔⲆⵠⵠⵠ: "img/night-hand-skin186.png",
        ᐃΔᐃΔⵠΔᐃ: "img/day-hand-skin187.png",
        ⲆΔⵠΔⵠⲆⲆ: "img/night-hand-skin187.png",
        ⲆᐃⵠⲆⲆᐃᐃ: "img/day-hand-skin188.png",
        ᐃⲆⵠΔⵠⲆⵠ: "img/night-hand-skin188.png",
        ⲆᐃᐃΔⵠΔΔ: "img/day-hand-skin189.png",
        ᐃᐃⵠΔⵠΔΔ: "img/night-hand-skin189.png",
        ᐃᐃᐃⲆΔᐃΔ: "img/day-hand-skin190.png",
        ᐃⵠⵠⵠᐃⵠΔ: "img/night-hand-skin190.png",
        ᐃᐃΔᐃⲆΔⲆ: "img/day-hand-skin191.png",
        ΔᐃⵠᐃⵠⲆᐃ: "img/night-hand-skin191.png",
        ⲆΔⲆⲆᐃⲆⵠ: "img/day-hand-skin192.png",
        ⵠⲆⵠⵠΔⵠᐃ: "img/night-hand-skin192.png",
        ᐃⵠΔⲆΔⲆⲆ: "img/day-hand-skin193.png",
        ⵠᐃᐃⵠΔⲆⲆ: "img/night-hand-skin193.png",
        ᐃⵠᐃⵠᐃⵠᐃ: "img/day-hand-skin194.png",
        ⵠⲆᐃⲆⲆⲆⲆ: "img/night-hand-skin194.png",
        ᐃΔΔⲆⵠⲆⵠ: "img/day-hand-skin195.png",
        ⵠΔᐃⵠΔⲆΔ: "img/night-hand-skin195.png",
        ΔΔΔΔΔⲆⵠ: "img/day-hand-skin196.png",
        ᐃᐃⲆⲆⲆⵠⵠ: "img/night-hand-skin196.png",
        ⲆⵠᐃᐃΔⲆᐃ: "img/day-hand-skin197.png",
        ᐃᐃΔⲆⵠⲆᐃ: "img/night-hand-skin197.png",
        ΔⵠⲆᐃᐃⲆⲆ: "img/day-hand-skin198.png",
        ΔΔᐃᐃΔᐃⲆ: "img/night-hand-skin198.png",
        ⲆΔⲆΔⵠⵠⲆ: "img/day-hand-skin199.png",
        ⵠᐃᐃΔᐃⲆΔ: "img/night-hand-skin199.png",
        ⵠⵠⲆⲆᐃᐃᐃ: "img/day-hand-skin200.png",
        ᐃⵠⲆⲆᐃΔᐃ: "img/night-hand-skin200.png",
        ΔⲆⲆΔⵠΔΔ: "img/day-hand-skin201.png",
        ΔᐃᐃᐃΔᐃⲆ: "img/night-hand-skin201.png",
        ΔⲆⵠΔΔᐃⲆ: "img/day-hand-skin202.png",
        ΔⵠⵠΔⲆΔᐃ: "img/night-hand-skin202.png",
        ΔⵠΔᐃⲆⵠⲆ: "img/day-hand-skin203.png",
        ⵠΔⵠⵠⲆⵠⵠ: "img/night-hand-skin203.png",
        ΔΔⵠᐃⲆΔᐃ: "img/day-hand-skin204.png",
        ΔΔⵠⲆⵠⲆⲆ: "img/night-hand-skin204.png",
        ᐃᐃⵠⵠⲆΔⵠ: "img/day-hand-skin205.png",
        ᐃⵠᐃⵠᐃᐃⲆ: "img/night-hand-skin205.png",
        ΔⲆᐃⲆⲆᐃⵠ: "img/day-hand-skin206.png",
        ᐃᐃⵠᐃⲆᐃΔ: "img/night-hand-skin206.png",
        ⲆⲆⲆᐃⵠⵠⵠ: "img/day-hand-skin207.png",
        ⲆΔᐃᐃⲆⲆⵠ: "img/night-hand-skin207.png",
        ⵠᐃⲆⲆΔᐃⵠ: "img/day-hand-skin208.png",
        ⲆΔᐃⵠᐃⲆⲆ: "img/night-hand-skin208.png",
        ΔᐃΔⵠΔΔᐃ: "img/day-hand-skin209.png",
        ΔⵠⲆⵠⵠΔⲆ: "img/night-hand-skin209.png",
        ΔΔⵠⵠⲆᐃᐃ: "img/day-hand-skin210.png",
        ⲆⵠΔⵠⵠⵠᐃ: "img/night-hand-skin210.png",
        ⵠᐃᐃΔⲆᐃᐃ: "img/day-hand-skin211.png",
        ΔΔΔⲆΔΔⲆ: "img/night-hand-skin211.png",
        ⲆⲆΔⵠΔᐃⵠ: "img/day-hand-skin212.png",
        ΔⲆⲆⵠⵠΔⵠ: "img/night-hand-skin212.png",
        ΔᐃⵠΔᐃᐃΔ: "img/day-bag-star0.png",
        ΔⲆⵠᐃᐃᐃΔ: "img/night-bag-star0.png",
        ⵠⲆⵠΔΔΔⵠ: "img/day-bag0.png",
        ᐃⵠⲆᐃᐃᐃΔ: "img/night-bag0.png",
        ⲆⵠⲆᐃⵠⲆᐃ: "img/day-bag1.png",
        ᐃΔⵠⵠᐃⲆⲆ: "img/night-bag1.png",
        ᐃᐃᐃΔⲆⵠΔ: "img/day-bag2.png",
        ⲆⲆⵠⵠⲆⲆᐃ: "img/night-bag2.png",
        ᐃⵠΔⲆⵠΔΔ: "img/day-bag3.png",
        ⵠⲆⵠⲆΔⲆⵠ: "img/night-bag3.png",
        ᐃᐃⲆΔⵠⲆⲆ: "img/day-bag4.png",
        ⵠⵠⲆⲆⲆᐃᐃ: "img/night-bag4.png",
        ⵠⲆⲆⲆⵠΔⲆ: "img/day-bag5.png",
        ᐃⵠⵠⵠΔⵠⵠ: "img/night-bag5.png",
        ⵠⲆⲆΔⲆⵠΔ: "img/day-bag6.png",
        ᐃⵠⲆΔᐃᐃⲆ: "img/night-bag6.png",
        ⲆⲆⵠⵠⲆⲆΔ: "img/day-bag7.png",
        ΔⵠⵠᐃᐃⵠΔ: "img/night-bag7.png",
        ᐃᐃΔΔᐃⵠⲆ: "img/day-bag8.png",
        ΔⵠⵠΔⲆⲆⵠ: "img/night-bag8.png",
        ⲆⵠⵠⵠⲆⲆΔ: "img/day-bag9.png",
        ⵠΔⵠΔⵠⲆⵠ: "img/night-bag9.png",
        ⲆΔⲆᐃⲆᐃⵠ: "img/day-bag10.png",
        ΔᐃⲆΔΔⲆΔ: "img/night-bag10.png",
        ᐃⵠᐃⲆⲆⲆⲆ: "img/day-bag11.png",
        ᐃᐃⲆᐃⲆᐃⲆ: "img/night-bag11.png",
        ⵠᐃᐃΔⲆΔᐃ: "img/day-bag13.png",
        ᐃⵠⲆᐃΔΔⲆ: "img/night-bag13.png",
        ⲆΔΔⲆⲆⲆᐃ: "img/day-bag14.png",
        ᐃⲆΔᐃΔᐃⵠ: "img/night-bag14.png",
        ⲆᐃⲆΔΔΔᐃ: "img/day-bag16.png",
        ⵠΔᐃᐃᐃⵠᐃ: "img/night-bag16.png",
        ⲆΔⲆΔᐃᐃⲆ: "img/day-bag17.png",
        ΔⵠⲆᐃⵠᐃⵠ: "img/night-bag17.png",
        ΔΔᐃᐃⲆΔᐃ: "img/day-bag18.png",
        ⵠᐃⲆⵠᐃⲆⵠ: "img/night-bag18.png",
        ᐃΔᐃΔᐃⵠΔ: "img/day-bag19.png",
        ᐃᐃΔΔⵠⲆⲆ: "img/night-bag19.png",
        ⲆⲆᐃⵠⲆᐃⵠ: "img/day-bag20.png",
        ⲆᐃⲆᐃⵠᐃⲆ: "img/night-bag20.png",
        ᐃⵠᐃΔΔΔΔ: "img/day-bag21.png",
        ⵠⵠⲆⵠⵠⲆΔ: "img/night-bag21.png",
        ⲆⲆᐃⵠⵠᐃΔ: "img/day-bag22.png",
        ᐃᐃΔΔⲆⵠⲆ: "img/night-bag22.png",
        ⵠⵠⵠⵠᐃⲆⲆ: "img/day-bag23.png",
        ᐃΔⵠΔⵠⵠᐃ: "img/night-bag23.png",
        ᐃΔΔⵠⲆⲆⵠ: "img/day-bag24.png",
        ⵠⲆᐃⵠᐃⵠⵠ: "img/night-bag24.png",
        ᐃⲆⲆⵠᐃⵠᐃ: "img/day-bag25.png",
        ⵠⲆᐃⲆᐃⲆΔ: "img/night-bag25.png",
        ⵠᐃᐃΔⲆΔΔ: "img/day-bag26.png",
        ⵠᐃᐃⲆᐃⲆⵠ: "img/night-bag26.png",
        ΔΔᐃΔΔᐃⵠ: "img/day-bag27.png",
        ΔΔⵠΔⵠⵠΔ: "img/night-bag27.png",
        ΔⲆᐃⲆⲆᐃⲆ: "img/day-bag28.png",
        ᐃΔᐃⵠⲆᐃⲆ: "img/night-bag28.png",
        ᐃⲆⵠᐃⵠᐃⵠ: "img/day-bag29.png",
        ᐃⲆⲆᐃⵠΔⵠ: "img/night-bag29.png",
        ⵠᐃⵠΔⲆᐃΔ: "img/day-bag30.png",
        ᐃΔᐃⵠΔⲆⵠ: "img/night-bag30.png",
        ⵠΔᐃⲆⲆⲆᐃ: "img/day-bag31.png",
        ⲆᐃᐃⲆΔᐃⵠ: "img/night-bag31.png",
        ⲆᐃΔΔᐃΔⲆ: "img/day-bag32.png",
        ΔⲆΔᐃⵠⵠⵠ: "img/night-bag32.png",
        ΔᐃⲆΔⲆⲆΔ: "img/day-bag33.png",
        ⲆⵠⲆᐃΔΔⵠ: "img/night-bag33.png",
        ⲆᐃᐃⲆΔⲆⵠ: "img/day-bag34.png",
        ⵠⲆⵠⲆⲆΔΔ: "img/night-bag34.png",
        ⵠΔΔᐃⲆΔⵠ: "img/day-bag35.png",
        ΔⵠΔⲆⲆⵠᐃ: "img/night-bag35.png",
        ᐃᐃΔⲆⲆᐃᐃ: "img/day-bag36.png",
        ⵠΔⵠΔⵠᐃΔ: "img/night-bag36.png",
        ᐃⲆΔⲆΔᐃᐃ: "img/day-bag37.png",
        ⵠⵠΔⲆΔΔᐃ: "img/night-bag37.png",
        ΔⲆᐃᐃⵠⲆᐃ: "img/day-bag38.png",
        ᐃⵠΔⲆⲆⲆᐃ: "img/night-bag38.png",
        ⵠⲆⲆᐃΔΔⲆ: "img/day-bag39.png",
        ΔⵠⵠᐃΔᐃᐃ: "img/night-bag39.png",
        ᐃᐃⲆΔⵠⲆⵠ: "img/day-bag40.png",
        ᐃΔᐃᐃⲆⲆⲆ: "img/night-bag40.png",
        ᐃᐃᐃΔΔⵠⵠ: "img/day-bag41.png",
        ⲆᐃΔⲆΔⵠΔ: "img/night-bag41.png",
        ⲆΔⲆΔⵠΔⲆ: "img/day-bag42.png",
        ⲆΔᐃΔⲆⲆⲆ: "img/night-bag42.png",
        ⲆᐃᐃᐃᐃᐃⲆ: "img/day-bag43.png",
        ⵠᐃΔᐃⲆⲆⵠ: "img/night-bag43.png",
        ᐃᐃⲆᐃᐃⲆⵠ: "img/day-bag44.png",
        ⲆⲆΔⵠⲆᐃΔ: "img/night-bag44.png",
        ⵠΔⲆⵠⲆᐃⵠ: "img/day-bag45.png",
        ⲆⲆᐃΔⲆⵠᐃ: "img/night-bag45.png",
        ΔⲆⲆⲆΔΔΔ: "img/day-bag46.png",
        ΔⲆⵠᐃᐃⵠⵠ: "img/night-bag46.png",
        ⲆⵠᐃΔⵠᐃΔ: "img/day-bag47.png",
        ⵠⵠΔⲆΔΔⵠ: "img/night-bag47.png",
        ⲆⵠᐃᐃⵠᐃⲆ: "img/day-bag48.png",
        ᐃⵠⵠⵠⵠᐃⲆ: "img/night-bag48.png",
        ᐃΔΔΔΔΔΔ: "img/day-bag49.png",
        ⲆΔᐃⵠᐃⵠⵠ: "img/night-bag49.png",
        ᐃᐃᐃΔⵠⵠⵠ: "img/day-bag50.png",
        ᐃᐃⲆΔΔᐃΔ: "img/night-bag50.png",
        ᐃⵠⲆᐃᐃΔⲆ: "img/day-bag51.png",
        ⵠΔᐃΔⲆⲆΔ: "img/night-bag51.png",
        ⵠⵠΔΔΔΔⵠ: "img/day-bag52.png",
        ΔΔⵠⵠⲆⵠᐃ: "img/night-bag52.png",
        ΔⵠᐃΔⲆᐃⲆ: "img/day-bag53.png",
        ⵠᐃΔⵠΔΔΔ: "img/night-bag53.png",
        ⵠᐃⲆⵠΔⲆⵠ: "img/day-bag54.png",
        ᐃⲆⲆᐃᐃᐃⵠ: "img/night-bag54.png",
        ΔⵠΔᐃⵠⵠⲆ: "img/day-bag55.png",
        ⲆᐃΔᐃΔⵠᐃ: "img/night-bag55.png",
        ⲆΔΔᐃΔΔΔ: "img/day-bag56.png",
        ᐃᐃⲆⲆⵠᐃΔ: "img/night-bag56.png",
        ΔⵠⲆⲆΔΔᐃ: "img/day-bag57.png",
        ⵠⲆᐃΔᐃⲆᐃ: "img/night-bag57.png",
        ⵠᐃᐃⲆΔⵠΔ: "img/day-bag58.png",
        ΔⵠΔⲆⵠⲆΔ: "img/night-bag58.png",
        ᐃⵠⲆΔΔⲆΔ: "img/day-bag59.png",
        ⵠⲆᐃⵠⵠΔΔ: "img/night-bag59.png",
        ΔⵠⲆᐃᐃΔΔ: "img/day-bag60.png",
        ⲆΔΔᐃᐃⵠⵠ: "img/night-bag60.png",
        ᐃᐃⵠⲆᐃΔΔ: "img/day-bag61.png",
        ΔΔⵠⲆᐃᐃⲆ: "img/night-bag61.png",
        ᐃΔⵠⵠⵠⵠᐃ: "img/day-bag62.png",
        ⲆⵠᐃᐃᐃⵠΔ: "img/night-bag62.png",
        ⲆᐃⵠⵠΔⵠⵠ: "img/day-bag63.png",
        ΔΔᐃᐃΔΔⵠ: "img/night-bag63.png",
        ⲆⵠⲆⵠⲆΔⲆ: "img/day-bag64.png",
        ᐃⲆᐃΔⵠⵠⲆ: "img/night-bag64.png",
        ᐃΔⵠᐃⵠⲆᐃ: "img/day-bag65.png",
        ΔⵠⵠΔΔΔᐃ: "img/night-bag65.png",
        ⲆᐃⲆΔⵠⵠⵠ: "img/day-bag66.png",
        ᐃΔⲆΔΔΔᐃ: "img/night-bag66.png",
        ΔΔΔⵠΔΔᐃ: "img/day-bag67.png",
        Δⵠᐃᐃⵠⵠᐃ: "img/night-bag67.png",
        ΔΔΔⵠⵠΔΔ: "img/day-bag68.png",
        ⲆᐃΔⵠᐃⲆⲆ: "img/night-bag68.png",
        ⵠⲆⵠⵠΔⲆᐃ: "img/day-bag69.png",
        ᐃᐃⵠΔΔᐃΔ: "img/night-bag69.png",
        ΔⲆⲆⲆᐃᐃᐃ: "img/day-bag70.png",
        ⵠⲆᐃΔΔΔΔ: "img/night-bag70.png",
        ΔⵠΔⵠΔⵠᐃ: "img/day-bag71.png",
        ΔⲆᐃᐃᐃⵠⲆ: "img/night-bag71.png",
        ⵠⵠⵠⵠⲆᐃⵠ: "img/day-bag72.png",
        ⵠΔⵠΔᐃΔΔ: "img/night-bag72.png",
        ⵠᐃⵠᐃⵠⲆⲆ: "img/day-bag73.png",
        ⵠⲆΔΔΔⵠⵠ: "img/night-bag73.png",
        ᐃᐃⵠⵠⲆⵠⲆ: "img/day-bag74.png",
        ΔᐃⵠᐃΔⲆⲆ: "img/night-bag74.png",
        ΔΔΔⵠⲆⵠⵠ: "img/day-bag75.png",
        ⲆⲆᐃⲆΔⲆᐃ: "img/night-bag75.png",
        ⵠΔΔⲆⲆⲆᐃ: "img/day-bag76.png",
        ΔⵠᐃΔΔΔⲆ: "img/night-bag76.png",
        ΔⲆⵠⲆᐃⲆᐃ: "img/day-bag77.png",
        ⵠΔⵠⲆΔΔᐃ: "img/night-bag77.png",
        ΔⵠⲆᐃⲆⲆΔ: "img/day-bag78.png",
        ⲆᐃⲆⲆⵠᐃᐃ: "img/night-bag78.png",
        ⲆⵠΔⲆⲆⲆⵠ: "img/day-bag79.png",
        ⲆΔᐃⲆⵠΔᐃ: "img/night-bag79.png",
        ᐃΔᐃⵠⵠΔᐃ: "img/day-bag80.png",
        ⵠⵠⲆΔⵠᐃⵠ: "img/night-bag80.png",
        ⵠᐃⲆⵠᐃⵠⵠ: "img/day-accessory0.png",
        ΔᐃΔᐃᐃⵠⵠ: "img/day-accessory0-pacques.png",
        ΔⵠⲆᐃᐃΔᐃ: "img/night-accessory0-pacques.png",
        ⲆᐃⵠⲆⵠⵠΔ: "img/day-accessory13.png",
        ᐃⵠⲆⵠⲆᐃᐃ: "img/night-accessory13.png",
        ᐃⲆΔⲆⵠᐃⲆ: "img/day-accessory14.png",
        ⲆΔⵠᐃⲆΔΔ: "img/night-accessory14.png",
        ΔΔⲆⵠⵠᐃᐃ: "img/day-accessory15.png",
        ⲆⵠⵠΔΔⵠⲆ: "img/night-accessory15.png",
        ⲆⲆⲆⲆⲆΔⵠ: "img/day-accessory16.png",
        ᐃΔΔⵠΔΔᐃ: "img/night-accessory16.png",
        ⵠⲆᐃⵠᐃΔⲆ: "img/day-accessory17.png",
        ⲆΔΔΔΔⵠⲆ: "img/day-accessory17.png",
        ΔΔᐃⲆΔⵠΔ: "img/day-accessory19.png",
        ⵠⵠΔΔΔΔᐃ: "img/night-accessory19.png",
        ᐃᐃⲆⵠⲆⲆΔ: "img/day-accessory20.png",
        ⲆΔⲆⲆⲆΔⲆ: "img/night-accessory20.png",
        ⵠΔΔᐃΔⵠⵠ: "img/day-accessory21.png",
        ⵠΔΔᐃⲆⵠᐃ: "img/night-accessory21.png",
        ⵠΔᐃⵠᐃΔⵠ: "img/day-accessory22.png",
        ᐃⵠΔⲆΔΔⵠ: "img/night-accessory22.png",
        ΔΔΔᐃᐃⲆⲆ: "img/day-accessory23.png",
        ΔⲆᐃⵠΔᐃⲆ: "img/night-accessory23.png",
        ⲆΔⵠᐃⵠᐃᐃ: "img/day-accessory24.png",
        ⲆΔⲆⵠⵠⲆⲆ: "img/night-accessory24.png",
        ΔⵠᐃⲆⵠᐃΔ: "img/day-accessory25.png",
        ⵠⵠᐃⵠⲆᐃⵠ: "img/night-accessory25.png",
        ⵠⲆΔᐃⵠⵠΔ: "img/day-accessory26.png",
        ⲆⵠⵠⲆᐃᐃᐃ: "img/night-accessory26.png",
        ᐃΔᐃᐃⵠⵠⲆ: "img/day-accessory27.png",
        ⵠⲆΔⵠΔⲆⲆ: "img/night-accessory27.png",
        ΔⲆⵠⲆⵠⵠⲆ: "img/day-accessory18.png",
        ᐃΔᐃΔΔᐃⲆ: "img/night-accessory18.png",
        ΔⲆΔⵠⵠᐃΔ: "img/day-accessory29.png",
        ⲆⵠᐃᐃΔⲆⵠ: "img/night-accessory29.png",
        ⲆΔΔⲆⲆⵠΔ: "img/day-accessory30.png",
        ᐃⵠΔΔΔⵠⲆ: "img/night-accessory30.png",
        ΔⵠⲆᐃⲆᐃΔ: "img/day-accessory31.png",
        ᐃⵠⲆⵠᐃⵠᐃ: "img/night-accessory31.png",
        ΔⲆⵠΔΔⵠⲆ: "img/day-accessory32.png",
        ⲆΔⲆⵠⲆΔⲆ: "img/night-accessory32.png",
        ΔⲆΔΔⲆΔΔ: "img/day-accessory33.png",
        ΔΔⲆᐃᐃⵠᐃ: "img/night-accessory33.png",
        ΔΔΔⵠΔⲆᐃ: "img/day-accessory34.png",
        ⵠᐃᐃⲆᐃⵠΔ: "img/night-accessory34.png",
        ᐃⵠᐃᐃⲆⵠᐃ: "img/day-accessory35.png",
        ΔᐃᐃⲆᐃⲆⲆ: "img/night-accessory35.png",
        ᐃⲆⲆⲆⲆⲆⲆ: "img/day-accessory28.png",
        ⵠⲆⲆⲆⵠⲆⵠ: "img/night-accessory28.png",
        ΔⵠᐃΔᐃⵠⲆ: "img/day-accessory36.png",
        ⵠⵠⵠⲆᐃᐃΔ: "img/night-accessory36.png",
        ⵠΔⲆⵠΔΔᐃ: "img/day-accessory37.png",
        ⵠᐃⵠΔⵠⲆⵠ: "img/night-accessory37.png",
        ⵠⲆΔⲆⲆⲆᐃ: "img/day-accessory39.png",
        ⵠⵠᐃΔᐃⲆⲆ: "img/night-accessory39.png",
        ⵠⲆᐃⵠΔⵠΔ: "img/day-accessory40.png",
        ⵠᐃⵠⲆⲆⵠᐃ: "img/night-accessory40.png",
        ⲆᐃⵠΔᐃⲆΔ: "img/day-accessory41.png",
        ᐃⲆΔᐃᐃᐃᐃ: "img/night-accessory41.png",
        ΔⲆΔⵠᐃᐃΔ: "img/day-accessory42.png",
        ⲆᐃᐃⵠⵠᐃΔ: "img/night-accessory42.png",
        ⵠΔⵠⵠⵠⵠᐃ: "img/day-accessory43.png",
        ⵠΔⵠⲆⲆᐃⲆ: "img/night-accessory43.png",
        ΔⲆⵠΔⲆⲆΔ: "img/day-accessory44.png",
        ⲆⵠⵠⵠΔᐃΔ: "img/night-accessory44.png",
        ⲆⲆⲆⵠⵠⲆⵠ: "img/day-accessory38.png",
        ⵠⲆⵠΔᐃΔⵠ: "img/night-accessory38.png",
        ⲆᐃᐃΔⲆⵠΔ: "img/day-accessory46.png",
        ⵠⲆΔⵠᐃⲆⵠ: "img/night-accessory46.png",
        ⵠⵠᐃⵠⲆⲆᐃ: "img/day-accessory47.png",
        ᐃᐃΔⲆΔⲆΔ: "img/night-accessory47.png",
        ⵠΔᐃⲆⲆⵠⲆ: "img/day-accessory48.png",
        ᐃⵠⵠΔⲆⲆⵠ: "img/night-accessory48.png",
        ⲆΔⵠΔᐃᐃᐃ: "img/day-accessory49.png",
        ⵠⵠⵠⲆⲆⲆⵠ: "img/night-accessory49.png",
        ᐃΔᐃᐃΔᐃΔ: "img/day-accessory45.png",
        ⲆΔΔᐃⵠⲆⵠ: "img/night-accessory45.png",
        ⵠⲆΔⲆⲆⲆⲆ: "img/day-accessory50.png",
        ⵠⵠᐃΔΔⲆΔ: "img/night-accessory50.png",
        ⵠΔᐃⲆᐃⵠⵠ: "img/day-accessory51.png",
        ᐃᐃⵠᐃⲆΔⵠ: "img/night-accessory51.png",
        ⵠᐃⲆⲆⵠⵠⵠ: "img/day-accessory52.png",
        ⵠΔⲆⵠⵠΔⲆ: "img/night-accessory52.png",
        ᐃⲆᐃΔᐃⲆⵠ: "img/day-accessory53.png",
        ⵠΔⲆᐃⲆⲆᐃ: "img/night-accessory53.png",
        ΔⵠᐃᐃΔⲆⲆ: "img/day-accessory54.png",
        ᐃᐃⵠⵠΔⵠΔ: "img/night-accessory54.png",
        ⲆΔᐃⲆᐃⵠΔ: "img/day-accessory55.png",
        ᐃⵠᐃᐃⲆΔⲆ: "img/night-accessory55.png",
        ⵠΔΔΔΔⵠⲆ: "img/day-accessory56.png",
        ⵠⵠⲆΔⲆⵠⲆ: "img/night-accessory56.png",
        ᐃΔⵠΔᐃⲆⵠ: "img/day-accessory57.png",
        ⵠⵠⲆᐃΔⵠⵠ: "img/night-accessory57.png",
        ᐃⵠΔⵠⵠⵠⵠ: "img/day-accessory58.png",
        ᐃⲆⵠΔΔⲆⲆ: "img/night-accessory58.png",
        ⲆⵠΔᐃⵠΔⲆ: "img/day-accessory59.png",
        ᐃⲆΔⲆᐃᐃⲆ: "img/night-accessory59.png",
        ⲆᐃⵠⵠᐃΔΔ: "img/day-accessory60.png",
        ᐃᐃᐃⵠⲆΔⵠ: "img/night-accessory60.png",
        ⲆᐃⵠⵠΔⲆΔ: "img/day-accessory61.png",
        ᐃᐃΔⵠⲆΔᐃ: "img/night-accessory61.png",
        ⵠⲆΔⵠᐃⲆΔ: "img/day-accessory62.png",
        ᐃⵠᐃⲆᐃᐃΔ: "img/night-accessory62.png",
        ΔⵠⲆΔⲆⲆΔ: "img/day-accessory63.png",
        ⲆᐃΔⲆⲆΔⵠ: "img/night-accessory63.png",
        ⵠΔᐃΔᐃᐃΔ: "img/day-accessory64.png",
        ᐃᐃⵠᐃΔⵠΔ: "img/night-accessory64.png",
        ΔⵠᐃΔⲆⲆⵠ: "img/day-accessory65.png",
        ΔᐃⲆΔΔⲆⲆ: "img/night-accessory65.png",
        ⲆⵠⲆΔⲆⲆᐃ: "img/day-accessory66.png",
        ΔⲆⲆⵠᐃΔΔ: "img/night-accessory66.png",
        ⲆΔⵠΔⲆⲆΔ: "img/day-accessory67.png",
        ΔᐃⵠⵠΔᐃⲆ: "img/night-accessory67.png",
        ᐃᐃⲆΔᐃΔΔ: "img/day-accessory68.png",
        ΔΔⲆⲆⵠᐃΔ: "img/night-accessory68.png",
        ⵠΔⲆᐃᐃΔΔ: "img/day-accessory69.png",
        ⲆⵠⵠᐃⲆᐃᐃ: "img/night-accessory69.png",
        ⵠⲆᐃΔⲆΔᐃ: "img/day-accessory70.png",
        ΔᐃᐃⲆᐃⵠᐃ: "img/night-accessory70.png",
        ⲆΔΔΔΔΔⵠ: "img/day-accessory71.png",
        ⲆⵠΔⵠᐃⲆⵠ: "img/night-accessory71.png",
        ΔⲆⲆⲆΔⲆⵠ: "img/day-accessory72.png",
        ⵠΔⵠᐃΔᐃΔ: "img/night-accessory72.png",
        ᐃΔΔⵠⲆᐃⲆ: "img/day-accessory73.png",
        ᐃᐃⵠΔᐃᐃⵠ: "img/night-accessory73.png",
        ⵠⲆᐃⵠⲆΔᐃ: "img/day-accessory74.png",
        ⵠⲆᐃᐃⲆⲆᐃ: "img/night-accessory74.png",
        ⵠⵠΔᐃΔⲆΔ: "img/day-accessory75.png",
        ΔΔᐃⵠᐃΔⲆ: "img/night-accessory75.png",
        ΔⲆⲆⲆΔⲆᐃ: "img/day-accessory76.png",
        ⲆᐃⲆΔᐃᐃᐃ: "img/night-accessory76.png",
        ᐃᐃΔΔᐃᐃΔ: "img/day-accessory77.png",
        ΔⲆΔᐃᐃΔᐃ: "img/night-accessory77.png",
        ⲆⵠΔⵠⲆᐃⲆ: "img/day-accessory78.png",
        ⲆⵠᐃΔᐃⵠⲆ: "img/night-accessory78.png",
        ⵠⵠΔⵠᐃΔΔ: "img/day-accessory79.png",
        ᐃΔⲆⲆⲆⵠⲆ: "img/night-accessory79.png",
        ΔⲆⲆΔΔⵠΔ: "img/day-accessory80.png",
        ᐃᐃⲆᐃᐃᐃⵠ: "img/night-accessory80.png",
        ⲆⵠᐃᐃΔⵠΔ: "img/day-accessory81.png",
        ᐃⲆⲆⲆⲆⵠᐃ: "img/night-accessory81.png",
        ⵠⲆᐃᐃⲆⲆΔ: "img/day-accessory83.png",
        ᐃΔⵠⲆΔⵠΔ: "img/night-accessory83.png",
        ⲆⵠⵠΔⲆΔΔ: "img/day-accessory84.png",
        ⵠᐃᐃΔΔΔᐃ: "img/night-accessory84.png",
        ⲆⲆΔⲆΔⲆⵠ: "img/day-accessory85.png",
        ΔᐃΔⲆⵠⵠΔ: "img/night-accessory85.png",
        ⵠΔⲆⲆΔᐃΔ: "img/day-accessory86.png",
        ΔΔᐃᐃΔⵠⵠ: "img/night-accessory86.png",
        ⵠΔΔⲆᐃⲆᐃ: "img/day-accessory87.png",
        ΔⲆᐃⲆⵠΔⵠ: "img/night-accessory87.png",
        ⵠⲆΔᐃᐃΔᐃ: "img/day-accessory88.png",
        ᐃⲆᐃᐃΔⵠΔ: "img/night-accessory88.png",
        ΔΔⲆᐃⲆⲆⲆ: "img/day-accessory89.png",
        ΔᐃᐃᐃⲆᐃⵠ: "img/night-accessory89.png",
        ⲆᐃⲆΔᐃᐃΔ: "img/day-accessory90.png",
        ⲆΔⲆⵠⲆⵠⵠ: "img/night-accessory90.png",
        ΔⲆⵠⲆⲆΔᐃ: "img/day-accessory91.png",
        ⵠⲆⵠΔⵠⲆᐃ: "img/night-accessory91.png",
        ⵠⲆⵠⵠᐃΔⵠ: "img/day-accessory92.png",
        ΔΔⲆⵠⵠᐃⲆ: "img/night-accessory92.png",
        ⲆⵠⵠΔⵠΔᐃ: "img/day-accessory93.png",
        ⲆΔⵠΔᐃⲆⲆ: "img/night-accessory93.png",
        ΔⵠᐃΔΔⲆᐃ: "img/day-accessory94.png",
        Δⵠⵠⵠⵠᐃⵠ: "img/night-accessory94.png",
        ⲆⲆΔⲆⲆᐃᐃ: "img/day-accessory95.png",
        ΔⵠᐃᐃⵠⲆⵠ: "img/night-accessory95.png",
        ᐃⵠⵠΔΔⲆᐃ: "img/day-accessory96.png",
        ᐃᐃⲆⵠΔⵠⲆ: "img/night-accessory96.png",
        ⵠᐃᐃⲆΔΔⲆ: "img/day-accessory97.png",
        ⵠᐃᐃᐃⵠᐃⵠ: "img/night-accessory97.png",
        ΔⵠⵠⲆⵠΔⵠ: "img/day-accessory98.png",
        ⲆⲆΔᐃΔⲆΔ: "img/night-accessory98.png",
        ᐃΔⵠΔⵠⲆⲆ: "img/day-accessory99.png",
        ΔᐃⵠⲆⲆᐃⵠ: "img/night-accessory99.png",
        ΔⵠᐃΔΔⵠⵠ: "img/day-accessory100.png",
        ⲆᐃⲆΔⲆⵠᐃ: "img/night-accessory100.png",
        ⵠΔᐃⲆᐃΔᐃ: "img/day-accessory101.png",
        ⵠᐃⵠⲆⲆⲆᐃ: "img/night-accessory101.png",
        ⲆⲆⵠΔⵠⵠⲆ: "img/day-accessory102.png",
        ᐃᐃⲆΔⵠᐃᐃ: "img/night-accessory102.png",
        ⲆΔᐃⲆⵠΔⵠ: "img/day-accessory103.png",
        ⲆⵠⵠⲆⲆᐃⲆ: "img/night-accessory103.png",
        ⵠⵠⲆᐃΔΔᐃ: "img/day-accessory104.png",
        ⵠΔⲆⵠΔⲆΔ: "img/night-accessory104.png",
        ᐃᐃⵠᐃᐃΔΔ: "img/day-accessory105.png",
        ᐃᐃⲆⵠⲆΔΔ: "img/night-accessory105.png",
        ⵠᐃΔΔⲆᐃⵠᐃⵠ: "img/day-accessory106.png",
        ᐃⵠⵠΔⵠⲆᐃⲆⵠ: "img/night-accessory106.png",
        ᐃᐃⵠⵠⲆᐃⲆΔⵠ: "img/day-accessory107.png",
        ΔᐃᐃᐃⵠⲆⵠⵠΔ: "img/night-accessory107.png",
        ⵠⵠⵠⵠᐃⲆᐃ: "img/day-accessory82.png",
        ᐃⲆⲆⲆΔⲆⵠ: "img/night-accessory82.png",
        ⵠⲆⲆⵠⲆΔⵠ: "img/day-book0.png",
        ΔᐃΔⵠⵠⵠⵠ: "img/night-book0.png",
        ᐃⵠⲆΔᐃⵠⲆ: "img/day-book1.png",
        ΔᐃΔΔⲆⵠᐃ: "img/night-book1.png",
        ᐃΔΔⲆᐃⲆᐃ: "img/day-book2.png",
        ⲆΔⵠΔⵠᐃⲆ: "img/night-book2.png",
        ⲆⵠⵠΔⵠᐃⲆ: "img/day-book3.png",
        ᐃᐃᐃΔⵠⲆᐃ: "img/night-book3.png",
        ⲆⵠᐃⲆⵠⵠΔ: "img/day-book4.png",
        ⵠΔⵠⵠᐃⲆᐃ: "img/night-book4.png",
        ⵠⵠΔⲆⵠΔᐃ: "img/day-book5.png",
        ⵠᐃᐃᐃⲆᐃᐃ: "img/night-book5.png",
        ΔⲆⵠᐃⲆΔⵠ: "img/day-book6.png",
        ⵠᐃᐃᐃΔⵠⲆ: "img/night-book6.png",
        ᐃΔⲆⲆᐃΔᐃ: "img/day-book7.png",
        ΔᐃᐃⵠⵠⲆΔ: "img/night-book7.png",
        ΔᐃⲆⵠᐃΔΔ: "img/day-book8.png",
        ᐃⲆΔⵠΔΔΔ: "img/night-book8.png",
        ⲆⲆⲆⲆⲆⲆⲆ: "img/day-book9.png",
        ⲆⲆⵠⲆⲆⵠⲆ: "img/night-book9.png",
        ΔᐃᐃⵠⲆⵠᐃ: "img/day-book10.png",
        ΔⲆⲆᐃᐃⲆᐃ: "img/night-book10.png",
        ⵠᐃᐃΔᐃⵠⵠ: "img/day-book11.png",
        ΔᐃΔⵠⲆΔᐃ: "img/night-book11.png",
        ⵠⵠⵠⵠⲆᐃⲆ: "img/day-book12.png",
        ⲆⲆᐃⲆᐃⲆΔ: "img/night-book12.png",
        ⲆᐃᐃⵠⵠⵠΔ: "img/day-book13.png",
        ⵠⵠⲆᐃᐃⵠΔ: "img/night-book13.png",
        ᐃⵠⲆᐃᐃⲆᐃ: "img/day-book14.png",
        ᐃⵠⲆᐃⵠΔⵠ: "img/night-book14.png",
        ᐃᐃⵠᐃⵠⵠⲆ: "img/day-book15.png",
        ᐃᐃΔⵠΔᐃᐃ: "img/night-book15.png",
        ᐃⵠΔⵠⲆᐃΔ: "img/day-book16.png",
        ⲆᐃⲆⵠⲆᐃⲆ: "img/night-book16.png",
        ᐃᐃⵠⵠⵠⲆΔ: "img/day-book17.png",
        Δⵠⵠᐃᐃᐃⵠ: "img/night-book17.png",
        ᐃΔΔᐃⵠⲆⵠ: "img/day-book18.png",
        ΔⲆⵠⲆΔΔᐃ: "img/night-book18.png",
        ⲆⲆⵠΔⲆᐃᐃ: "img/day-book19.png",
        ⵠⵠⲆⲆΔᐃⵠ: "img/night-book19.png",
        ⲆᐃⲆⵠⵠⲆΔ: "img/day-book20.png",
        ⲆⵠᐃⵠΔⵠⵠ: "img/night-book20.png",
        ⲆᐃᐃΔⲆᐃⵠ: "img/day-book21.png",
        ᐃⵠⲆᐃⵠᐃᐃ: "img/night-book21.png",
        ⲆΔᐃᐃⲆᐃⲆ: "img/day-book22.png",
        ⲆⵠΔΔⲆⵠⲆ: "img/night-book22.png",
        ⲆⵠᐃᐃⲆΔⲆ: "img/day-book23.png",
        ⲆⲆΔΔᐃⲆⵠ: "img/night-book23.png",
        ⲆⲆⲆⵠΔⲆⲆ: "img/day-book24.png",
        ⲆΔΔⲆⵠⵠᐃ: "img/night-book24.png",
        ⵠⵠᐃᐃⵠⵠⵠ: "img/day-book25.png",
        ⵠΔᐃⵠΔⵠⲆ: "img/night-book25.png",
        ᐃⵠⲆⵠⵠΔⲆ: "img/day-book26.png",
        ᐃⲆⲆᐃᐃΔᐃ: "img/night-book26.png",
        ᐃΔΔⲆⵠⲆⲆ: "img/day-book27.png",
        ΔⲆᐃⵠⵠⵠᐃ: "img/night-book27.png",
        ΔᐃⵠΔΔⲆⲆ: "img/day-book28.png",
        ⲆⵠⲆⲆΔΔⵠ: "img/night-book28.png",
        ⵠⲆΔᐃΔᐃᐃ: "img/day-book29.png",
        ⲆΔⵠⵠⲆⵠᐃ: "img/night-book29.png",
        ᐃⵠᐃΔΔᐃⲆ: "img/day-book30.png",
        ΔᐃⲆⵠᐃⵠΔ: "img/night-book30.png",
        ⲆΔⵠΔΔⲆⲆ: "img/day-book31.png",
        ΔΔⵠΔᐃΔᐃ: "img/night-book31.png",
        ⲆⲆⵠᐃᐃⲆⲆ: "img/day-book32.png",
        ⵠΔⵠᐃᐃⵠⵠ: "img/night-book32.png",
        ΔΔⵠΔΔⲆⵠ: "img/day-book33.png",
        ⵠᐃⵠᐃᐃⵠⲆ: "img/night-book33.png",
        ΔΔⵠⵠⲆᐃΔ: "img/day-book34.png",
        ᐃⵠΔᐃΔⵠⵠ: "img/night-book34.png",
        ᐃⵠᐃᐃⵠⵠⲆ: "img/day-book35.png",
        ⵠⵠᐃᐃᐃⲆᐃ: "img/night-book35.png",
        ᐃⲆⲆᐃⲆᐃⵠ: "img/day-book36.png",
        ΔᐃⲆΔⵠΔⵠ: "img/night-book36.png",
        ᐃⲆⵠᐃⵠⵠᐃⲆΔ: "img/day-book37.png",
        ⲆΔⵠΔᐃⵠⲆᐃᐃ: "img/night-book37.png",
        ᐃⲆⵠⵠᐃΔᐃ: "img/day-book38.png",
        ΔΔΔᐃΔᐃⲆ: "img/night-book38.png",
        ᐃⵠⵠΔⵠⲆᐃ: "img/day-book39.png",
        ᐃᐃⲆΔᐃᐃΔ: "img/night-book39.png",
        ⲆⲆⲆⵠⵠΔᐃ: "img/day-book40.png",
        ΔᐃᐃⲆΔᐃⵠ: "img/night-book40.png",
        ΔⵠΔΔⵠᐃᐃ: "img/day-book41.png",
        ΔᐃᐃᐃΔΔΔ: "img/night-book41.png",
        ⲆᐃΔⲆᐃⵠⲆ: "img/day-book42.png",
        ᐃⵠᐃᐃⲆΔΔ: "img/night-book42.png",
        ΔⲆⵠᐃΔⵠⵠ: "img/day-book43.png",
        ⲆⲆᐃⵠΔⵠⲆ: "img/night-book43.png",
        ⵠⵠᐃⲆⲆᐃⵠ: "img/day-book44.png",
        ⲆΔᐃΔⵠᐃΔ: "img/night-book44.png",
        ⲆⵠΔⲆⵠⵠᐃ: "img/day-book45.png",
        ⵠΔᐃᐃⲆΔⲆ: "img/night-book45.png",
        ⵠⲆΔⲆΔⵠⵠ: "img/day-book46.png",
        ⲆΔᐃᐃⵠΔⵠ: "img/night-book46.png",
        ᐃⵠΔΔⵠⲆΔ: "img/day-book47.png",
        ⵠⵠᐃⵠⵠΔᐃ: "img/night-book47.png",
        ᐃⵠⵠⲆⲆⲆΔ: "img/day-book48.png",
        ⲆⵠⵠᐃΔΔᐃ: "img/night-book48.png",
        ᐃⲆᐃⲆᐃᐃⲆ: "img/day-book49.png",
        ⵠⲆⲆΔᐃⲆⲆ: "img/night-book49.png",
        ΔΔᐃⵠᐃⵠⵠ: "img/day-book50.png",
        ΔΔⲆΔⲆⵠΔ: "img/night-book50.png",
        ⲆΔⲆⲆΔⵠᐃ: "img/day-crate1.png",
        ⵠⲆⵠⲆᐃΔⵠ: "img/night-crate1.png",
        ⵠΔΔΔᐃⵠΔ: "img/day-crate2.png",
        ⲆⵠᐃΔⵠⲆⵠ: "img/night-crate2.png",
        ⲆⲆⲆᐃΔⵠᐃ: "img/day-crate3.png",
        ᐃⵠⲆⵠᐃⵠⲆ: "img/night-crate3.png",
        ⲆⲆⵠⲆⵠΔᐃ: "img/day-crate4.png",
        ΔⵠⲆΔⲆⵠᐃ: "img/night-crate4.png",
        ΔⵠⲆᐃΔⲆⵠ: "img/day-crate5.png",
        ⵠΔΔᐃⵠΔΔ: "img/night-crate5.png",
        ΔΔΔⵠᐃⵠⲆ: "img/day-crate6.png",
        ⲆᐃᐃⵠᐃⵠⲆ: "img/night-crate6.png",
        ΔⲆⲆⲆⵠⲆⵠ: "img/day-crate7.png",
        ΔⲆⲆᐃΔⵠΔ: "img/night-crate7.png",
        ⵠⵠⵠⲆⲆᐃΔ: "img/day-crate8.png",
        ᐃᐃΔⵠΔⲆⲆ: "img/night-crate8.png",
        ⵠⵠᐃᐃⵠᐃⵠ: "img/day-crate9.png",
        ᐃⵠΔⵠⲆⵠΔ: "img/night-crate9.png",
        ⲆⵠᐃⲆᐃⲆΔ: "img/day-crate10.png",
        ᐃΔᐃⵠᐃⵠⵠ: "img/night-crate10.png",
        ⲆᐃⲆⵠᐃᐃᐃ: "img/day-crate11.png",
        ᐃⲆⲆⲆⲆᐃᐃ: "img/night-crate11.png",
        ⵠᐃΔᐃΔⵠΔ: "img/day-crate12.png",
        ⵠⲆⲆΔΔⵠᐃ: "img/night-crate12.png",
        ΔᐃΔⵠᐃⲆᐃ: "img/day-crate13.png",
        ᐃⲆᐃΔⲆⵠᐃ: "img/night-crate13.png",
        ᐃⲆΔⲆΔΔᐃ: "img/day-crate14.png",
        ΔⲆᐃᐃᐃΔⵠ: "img/night-crate14.png",
        ⲆⲆⵠⵠΔⵠᐃ: "img/day-crate15.png",
        ᐃⵠΔⵠⲆⲆᐃ: "img/night-crate15.png",
        ᐃⲆⵠᐃᐃΔᐃ: "img/day-crate16.png",
        ⲆΔΔⵠΔΔⵠ: "img/night-crate16.png",
        ᐃⲆⲆΔΔⵠⲆ: "img/day-crate17.png",
        ⲆⵠᐃⵠⲆΔᐃ: "img/night-crate17.png",
        ⵠΔΔΔⵠⲆⲆ: "img/day-crate18.png",
        ΔⲆΔΔΔΔⵠ: "img/night-crate18.png",
        ΔΔΔΔᐃᐃΔ: "img/day-crate19.png",
        ⲆⵠⵠⲆΔᐃᐃ: "img/night-crate19.png",
        ΔΔⲆΔⵠⵠᐃ: "img/day-crate20.png",
        ⵠⵠᐃⵠⲆⵠᐃ: "img/night-crate20.png",
        ΔᐃⲆᐃᐃⲆᐃ: "img/day-crate21.png",
        ⵠᐃⵠᐃⲆᐃⲆ: "img/night-crate21.png",
        ⵠᐃΔⲆⲆⲆⵠ: "img/day-crate22.png",
        ⲆΔᐃΔⲆⲆⵠ: "img/night-crate22.png",
        ᐃᐃΔⵠⲆⵠⵠ: "img/day-crate23.png",
        ΔⵠᐃⵠⵠⲆⵠ: "img/night-crate23.png",
        ΔⲆⲆΔᐃΔΔ: "img/day-crate24.png",
        ΔⵠΔᐃⵠⵠⵠ: "img/night-crate24.png",
        ⲆᐃⵠᐃⲆΔΔ: "img/day-crate25.png",
        ΔᐃΔⵠⵠⵠᐃ: "img/night-crate25.png",
        ⲆᐃⵠΔⲆᐃΔ: "img/day-crate26.png",
        ⵠΔΔⵠΔⲆⲆ: "img/night-crate26.png",
        ΔⲆⲆΔⵠⵠⵠ: "img/day-crate27.png",
        ⵠΔⵠΔᐃⵠⲆ: "img/night-crate27.png",
        ᐃⲆᐃΔⲆⲆⵠ: "img/day-crate28.png",
        ᐃⲆᐃⲆⵠΔᐃ: "img/night-crate28.png",
        ΔⲆⲆᐃⵠⵠΔ: "img/day-crate29.png",
        ⲆⵠⲆΔΔⵠⵠ: "img/night-crate29.png",
        ⵠⵠΔᐃⲆΔΔ: "img/day-crate30.png",
        ⲆⲆⵠᐃΔⲆⲆ: "img/night-crate30.png",
        ᐃΔⵠⲆⲆⲆⲆ: "img/day-crate31.png",
        ⵠⵠᐃΔᐃᐃΔ: "img/night-crate31.png",
        ΔᐃⵠⲆⵠᐃⵠ: "img/day-crate32.png",
        ⵠⵠⵠᐃⵠⵠⲆ: "img/night-crate32.png",
        ᐃᐃⲆⲆᐃⵠⲆ: "img/day-crate33.png",
        ᐃΔΔΔᐃⵠⲆ: "img/night-crate33.png",
        ⲆᐃΔᐃᐃΔᐃ: "img/day-crate34.png",
        ΔⲆⵠΔᐃᐃⲆ: "img/night-crate34.png",
        ΔⲆⲆⵠⲆᐃⲆ: "img/day-crate35.png",
        ΔᐃⲆᐃᐃⲆΔ: "img/night-crate35.png",
        ΔⲆⵠΔⵠᐃⲆ: "img/day-crate36.png",
        ⲆⲆᐃᐃⲆΔⲆ: "img/night-crate36.png",
        ⵠⲆΔᐃᐃⵠⲆ: "img/day-crate37.png",
        ⲆⵠⲆⵠΔⲆᐃ: "img/night-crate37.png",
        ΔΔⲆⵠΔⵠⵠ: "img/day-crate38.png",
        ᐃᐃⲆΔⵠᐃΔ: "img/night-crate38.png",
        ⲆⵠⵠⲆᐃᐃⵠ: "img/day-crate39.png",
        ΔⲆⵠⵠⵠᐃΔ: "img/night-crate39.png",
        ⵠΔΔⲆⲆΔΔ: "img/day-crate40.png",
        ΔⵠⵠᐃⲆΔⲆ: "img/night-crate40.png",
        ΔⲆⲆⵠⲆⲆΔ: "img/day-crate41.png",
        ⵠΔᐃᐃΔᐃΔ: "img/night-crate41.png",
        ΔⲆⵠⲆΔⵠΔ: "img/day-crate42.png",
        ⲆΔΔΔⵠΔᐃ: "img/night-crate42.png",
        ΔᐃⲆⵠᐃⵠᐃ: "img/day-crate43.png",
        ΔⲆⲆⵠᐃΔᐃ: "img/night-crate43.png",
        ᐃΔᐃΔᐃᐃⵠ: "img/day-crate44.png",
        ⲆⵠΔⲆΔⵠⲆ: "img/night-crate44.png",
        ⵠΔⵠⵠᐃⲆΔ: "img/day-crate45.png",
        ⵠⵠⲆⲆᐃⲆⵠ: "img/night-crate45.png",
        ΔΔⵠᐃᐃⲆⲆ: "img/day-crate46.png",
        ⲆⵠⲆᐃᐃⲆΔ: "img/night-crate46.png",
        ⵠⵠᐃᐃᐃΔΔ: "img/day-crate47.png",
        ΔΔⲆΔΔᐃᐃ: "img/night-crate47.png",
        Δⵠᐃⵠⵠᐃᐃ: "img/day-crate48.png",
        ΔⵠᐃⵠΔᐃⵠ: "img/night-crate48.png",
        ⲆᐃⵠᐃⲆⲆΔ: "img/day-crate49.png",
        ⵠⵠᐃⲆⵠΔΔ: "img/night-crate49.png",
        ⵠⲆⵠᐃⵠⵠⵠ: "img/day-crate50.png",
        ᐃⲆΔᐃⲆΔΔ: "img/night-crate50.png",
        ΔΔⵠⵠᐃⵠⲆ: "img/day-crate51.png",
        ΔⵠᐃⵠΔⵠⵠ: "img/night-crate51.png",
        ΔⲆⲆΔⵠᐃⵠ: "img/day-crate52.png",
        ᐃᐃᐃΔᐃⲆΔ: "img/night-crate52.png",
        ⵠᐃⲆᐃⲆᐃⵠ: "img/day-crate53.png",
        ᐃᐃᐃⵠⵠᐃⲆ: "img/night-crate53.png",
        ᐃⵠᐃⲆᐃᐃⵠ: "img/day-crate54.png",
        ⵠᐃⲆΔⲆⵠⲆ: "img/night-crate54.png",
        ᐃⲆⵠᐃⲆΔΔ: "img/day-crate55.png",
        ᐃⲆΔⵠⲆᐃⲆ: "img/night-crate55.png",
        ᐃⵠⲆΔᐃΔⲆ: "img/day-crate56.png",
        ⲆⵠⵠⵠΔⵠⵠ: "img/night-crate56.png",
        ΔΔΔⲆᐃⲆⵠ: "img/day-crate57.png",
        ⵠⲆⵠΔⲆΔᐃ: "img/night-crate57.png",
        ⲆⲆⵠΔⵠⲆᐃ: "img/day-crate58.png",
        ᐃⵠᐃᐃΔⲆⲆ: "img/night-crate58.png",
        ⵠΔΔⲆⵠⲆⵠ: "img/day-crate59.png",
        ΔᐃⵠⵠⵠⵠⲆ: "img/night-crate59.png",
        ⲆⲆⲆΔᐃΔⲆ: "img/day-crate60.png",
        ᐃⲆⵠⵠΔᐃⵠ: "img/night-crate60.png",
        ⵠΔⵠⵠⲆΔⲆ: "img/day-crate61.png",
        ᐃΔᐃΔⵠΔⵠ: "img/night-crate61.png",
        ΔⲆⵠⵠⵠⲆᐃ: "img/day-crate62.png",
        ⲆᐃΔⵠⲆⲆΔ: "img/night-crate62.png",
        ⵠᐃᐃᐃΔᐃᐃ: "img/day-crate63.png",
        ᐃᐃⲆΔΔΔⵠ: "img/night-crate63.png",
        ⲆᐃⵠⵠⵠΔⲆ: "img/day-crate64.png",
        ᐃΔΔⲆⲆΔⲆ: "img/night-crate64.png",
        ⲆⲆⵠⵠⵠᐃⲆ: "img/day-crate65.png",
        ⲆⵠⲆⵠΔⵠⵠ: "img/night-crate65.png",
        ⲆᐃⲆΔⲆⲆⵠ: "img/day-crate66.png",
        ⵠᐃⵠΔᐃⲆΔ: "img/night-crate66.png",
        ΔΔⵠΔᐃᐃⵠ: "img/day-crate67.png",
        ΔⲆⵠⲆⲆⲆⲆ: "img/night-crate67.png",
        ⲆⵠⲆⲆᐃΔΔ: "img/day-crate68.png",
        ⵠⲆⵠⵠⲆΔΔ: "img/night-crate68.png",
        ⵠᐃᐃⵠⵠⲆΔ: "img/day-crate69.png",
        ᐃⵠΔᐃᐃⲆⵠ: "img/night-crate69.png",
        ⲆⲆᐃⵠΔΔⵠ: "img/day-crate70.png",
        ΔⲆᐃΔΔᐃⵠ: "img/night-crate70.png",
        ⲆⲆⵠⵠⲆⵠⵠ: "img/day-crate71.png",
        ⵠⵠⲆⲆⲆⵠⵠ: "img/night-crate71.png",
        Ⲇⵠⵠᐃⵠᐃⵠ: "img/day-crate72.png",
        ᐃⲆⲆᐃᐃⵠΔ: "img/night-crate72.png",
        ⵠⲆⵠᐃⲆΔⲆ: "img/day-crate73.png",
        ΔⲆᐃⵠⲆⵠⲆ: "img/night-crate73.png",
        ᐃᐃⲆⵠⲆᐃⵠ: "img/day-crate74.png",
        ᐃΔᐃⲆⵠΔⲆ: "img/night-crate74.png",
        ΔΔⲆⵠΔᐃⲆ: "img/day-crate75.png",
        ᐃᐃⲆⵠⲆΔᐃ: "img/night-crate75.png",
        ΔᐃΔΔⲆΔⲆ: "img/day-crate76.png",
        ᐃⵠⲆΔᐃⲆⵠ: "img/night-crate76.png",
        ᐃᐃᐃΔⵠⵠΔ: "img/day-crate77.png",
        ⵠⵠΔΔᐃⵠΔ: "img/night-crate77.png",
        ⵠⲆΔⵠⵠⵠⵠ: "img/day-crate78.png",
        ⵠⵠΔᐃⲆⲆⲆ: "img/night-crate78.png",
        ΔⵠⲆᐃΔⵠⵠ: "img/day-crate79.png",
        ⵠⵠΔⲆΔⲆⵠ: "img/night-crate79.png",
        ⲆⲆⵠⵠΔΔᐃ: "img/day-herb0.png",
        ⵠⲆⵠᐃⲆⲆᐃ: "img/day-herb1.png",
        ⲆⵠⵠⲆⲆᐃⵠ: "img/day-herb2.png",
        ⲆⲆᐃᐃⲆⲆⵠ: "img/day-herb3.png",
        ΔⵠⲆⲆⵠᐃᐃ: "img/day-herb4.png",
        ⵠⲆᐃⲆⲆᐃⲆ: "img/day-herb5.png",
        ⲆⵠΔⵠΔⵠⵠ: "img/day-herb6.png",
        ᐃᐃⵠⲆᐃΔⲆ: "img/day-herb7.png",
        ΔᐃⵠᐃΔᐃᐃ: "img/day-herb8.png",
        ᐃⲆⵠΔⲆⲆⲆ: "img/day-herb9.png",
        ⵠᐃⲆΔⵠⵠΔ: "img/day-herb10.png",
        ⲆⵠⵠΔᐃⲆⵠ: "img/day-herb11.png",
        ᐃⲆᐃᐃΔᐃΔ: "img/day-herb12.png",
        ⵠᐃⲆⲆΔᐃᐃ: "img/day-herb13.png",
        ⵠⵠⲆΔΔⵠⲆ: "img/day-herb14.png",
        ΔⲆᐃᐃΔⵠΔ: "img/day-herb15.png",
        ⵠⵠⵠⵠᐃΔⲆ: "img/day-shell0.png",
        ᐃⵠⲆΔΔΔⵠ: "img/day-shell1.png",
        ΔΔΔⵠᐃⵠⵠ: "img/day-shell2.png",
        ⵠᐃⵠΔᐃᐃΔ: "img/day-leaf1.png",
        ΔᐃⲆⵠⵠᐃᐃ: "img/day-leaf2.png",
        ΔᐃᐃⲆᐃⲆΔ: "img/day-leaf3.png",
        ⲆⵠⵠΔⲆᐃΔ: "img/day-leaf4.png",
        ⵠⲆⵠᐃⲆⲆⲆ: "img/day-leaf5.png",
        ᐃⲆⲆΔⵠⲆᐃ: "img/day-leaf6.png",
        ⵠᐃΔΔⲆΔΔ: "img/day-leaf7.png",
        ΔᐃⵠΔⲆΔⲆ: "img/day-leaf8.png",
        ⲆⲆΔⵠⵠᐃⲆ: "img/day-rock0.png",
        ΔⲆΔⵠⵠΔⵠ: "img/day-rock1.png",
        ⵠⵠΔⵠᐃⲆⲆ: "img/day-rock2.png",
        ᐃᐃⲆΔᐃΔⵠ: "img/day-rock3.png",
        ΔⵠᐃⵠΔΔⲆ: "img/day-rock4.png",
        ⵠᐃΔᐃΔΔΔ: "img/day-rock5.png",
        Ⲇⵠⵠⵠᐃᐃᐃ: "img/day-rock6.png",
        ⵠⲆⵠᐃΔⲆΔ: "img/day-rock7.png",
        ΔⵠΔⲆⲆΔΔ: "img/day-rock8.png",
        ΔⲆΔⵠⵠᐃᐃ: "img/day-rock9.png",
        ⲆΔⵠᐃΔⵠΔ: "img/day-rock10.png",
        ΔⲆᐃΔⲆⲆⲆ: "img/day-rock11.png",
        ᐃΔΔᐃⲆⲆⲆ: "img/day-rock12.png",
        ΔⲆᐃⵠΔⲆⵠ: "img/day-rock13.png",
        ⲆⲆΔΔⲆⵠⵠ: "img/day-flower1.png",
        ⲆⵠⲆⲆⵠΔᐃ: "img/day-flower2.png",
        ΔⲆΔⵠⵠΔΔ: "img/day-flower3.png",
        ᐃΔⲆⵠΔⵠᐃ: "img/day-flower4.png",
        ᐃᐃΔᐃⲆⲆⲆ: "img/day-flower5.png",
        ⲆⵠΔⲆΔΔⲆ: "img/day-flower6.png",
        ΔᐃⲆⲆⲆⲆΔ: "img/day-flower7.png",
        ⲆⵠⲆᐃⲆⲆⵠ: "img/day-flower8.png",
        ⲆⵠΔᐃᐃΔΔ: "img/day-flower9.png",
        ΔᐃⵠᐃΔⲆⵠ: "img/day-herb16.png",
        ΔΔΔⲆⲆΔΔ: "img/day-herb17.png",
        ⲆΔⵠᐃᐃΔⲆ: "img/day-herb18.png",
        ⵠᐃΔⵠⵠⲆⵠ: "img/day-herb19.png",
        ⵠⵠⲆᐃᐃᐃⵠ: "img/day-herb20.png",
        ᐃΔⲆⲆⲆⲆᐃ: "img/day-herb21.png",
        ⵠᐃⵠΔⲆⲆⵠ: "img/night-herb0.png",
        ⵠᐃⲆᐃΔᐃⲆ: "img/night-herb1.png",
        ⵠᐃΔⵠΔΔⵠ: "img/night-herb2.png",
        ΔᐃᐃᐃᐃⲆΔ: "img/night-herb3.png",
        Δⵠᐃᐃⵠⵠⵠ: "img/night-herb4.png",
        ⲆⵠᐃᐃᐃⲆᐃ: "img/night-herb5.png",
        ᐃΔⵠᐃⲆⲆⵠ: "img/night-herb6.png",
        ΔⵠᐃⲆⵠΔⲆ: "img/night-herb7.png",
        ⵠⵠⵠᐃⲆⲆⲆ: "img/night-herb8.png",
        ᐃΔᐃⵠⲆⲆⲆ: "img/night-herb9.png",
        ⵠΔᐃⲆΔⵠΔ: "img/night-herb10.png",
        ⵠΔⵠⵠΔⵠΔ: "img/night-herb11.png",
        ᐃΔᐃΔⵠⵠᐃ: "img/night-herb12.png",
        ⲆΔⲆᐃⲆⵠΔ: "img/night-herb13.png",
        ⵠΔΔⵠΔΔⲆ: "img/night-herb14.png",
        ᐃⲆᐃⲆⲆᐃⲆ: "img/night-herb15.png",
        ᐃΔΔⲆΔⲆⵠ: "img/night-shell0.png",
        ᐃⲆⲆⲆⲆⲆΔ: "img/night-shell1.png",
        Ⲇⵠⵠⵠᐃᐃⵠ: "img/night-shell2.png",
        ⵠΔΔᐃΔΔΔ: "img/night-leaf1.png",
        ΔᐃⵠⲆⵠΔⲆ: "img/night-leaf2.png",
        ⲆⲆᐃᐃᐃⲆΔ: "img/night-leaf3.png",
        ΔᐃΔⵠⲆⵠⲆ: "img/night-leaf4.png",
        ⲆᐃⵠᐃⲆᐃΔ: "img/night-leaf5.png",
        ΔΔᐃΔⲆⲆⲆ: "img/night-leaf6.png",
        ΔⵠⵠⵠᐃΔⲆ: "img/night-leaf7.png",
        ⲆⵠⲆᐃⵠⲆⲆ: "img/night-leaf8.png",
        ΔᐃΔⵠⲆᐃⲆ: "img/night-rock0.png",
        ⵠΔᐃⲆⵠⵠⲆ: "img/night-rock1.png",
        ΔⵠⲆⲆᐃᐃⵠ: "img/night-rock2.png",
        ᐃⵠⵠᐃⵠΔΔ: "img/night-rock3.png",
        ᐃΔⵠⲆΔⵠⲆ: "img/night-rock4.png",
        ⵠΔΔᐃᐃᐃⲆ: "img/night-rock5.png",
        Δⵠⵠⵠⵠⵠᐃ: "img/night-rock6.png",
        ᐃⵠᐃᐃⵠᐃⵠ: "img/night-rock7.png",
        ΔⵠᐃᐃⲆΔⵠ: "img/night-rock8.png",
        ⲆⵠⲆⵠᐃΔΔ: "img/night-rock9.png",
        Ⲇᐃⵠⵠⵠⵠⵠ: "img/night-rock10.png",
        ⲆⲆΔᐃⲆΔᐃ: "img/night-rock11.png",
        ᐃⲆᐃΔᐃⵠΔ: "img/night-rock12.png",
        ⲆᐃΔⲆᐃᐃΔ: "img/night-rock13.png",
        ⲆΔⲆⲆᐃⵠⵠ: "img/night-flower1.png",
        ⲆᐃⲆᐃᐃΔⵠ: "img/night-flower2.png",
        ⵠᐃⲆⲆⲆΔΔ: "img/night-flower3.png",
        ΔⲆᐃⵠⲆΔⲆ: "img/night-flower4.png",
        ⵠⲆᐃⲆᐃⲆᐃ: "img/night-flower5.png",
        ⲆᐃᐃⲆᐃⵠᐃ: "img/night-flower6.png",
        ᐃᐃⵠⵠᐃⲆⵠ: "img/night-flower7.png",
        ᐃΔᐃΔΔΔⲆ: "img/night-flower8.png",
        ⵠΔⲆΔΔⵠᐃ: "img/night-flower9.png",
        ΔᐃⲆΔΔᐃΔ: "img/night-herb16.png",
        ⲆᐃⲆⲆⲆΔⵠ: "img/night-herb17.png",
        ⵠⵠΔⵠⲆΔⲆ: "img/night-herb18.png",
        ΔⵠΔⵠΔⵠⵠ: "img/night-herb19.png",
        ⲆᐃⵠⲆⵠⲆⲆ: "img/night-herb20.png",
        ᐃᐃΔⵠΔΔᐃ: "img/night-herb21.png",
        ᐃΔⲆⵠⵠⵠⵠ: "img/day-river000-010-000.png",
        ΔΔⵠⲆᐃⲆⵠ: "img/day-river000-010-010.png",
        ᐃⵠᐃⲆⲆᐃⵠ: "img/day-river000-011-000.png",
        ΔⵠⲆᐃΔᐃⲆ: "img/day-river000-011-010.png",
        ⲆⲆⵠⲆᐃᐃⲆ: "img/day-river000-011-011.png",
        ΔⵠⲆᐃⲆⵠⲆ: "img/day-river000-110-000.png",
        ⲆⲆᐃⲆⵠⵠΔ: "img/day-river000-110-010.png",
        ⲆᐃⵠⲆᐃⲆⵠ: "img/day-river000-110-110.png",
        ΔΔⵠⵠⲆⲆⲆ: "img/day-river000-111-000.png",
        ᐃⵠΔⵠⲆⲆΔ: "img/day-river000-111-010.png",
        ΔⲆᐃᐃⲆⲆᐃ: "img/day-river000-111-011.png",
        ⵠᐃΔⲆᐃⵠΔ: "img/day-river000-111-110.png",
        ⲆⵠΔᐃΔⲆΔ: "img/day-river000-111-111.png",
        ⵠⵠⲆⲆᐃΔⵠ: "img/day-river010-010-000.png",
        ΔⵠᐃΔⵠᐃΔ: "img/day-river010-010-010.png",
        ⲆⵠΔΔⲆⵠⵠ: "img/day-river010-011-000.png",
        ΔⲆᐃᐃⵠⵠⵠ: "img/day-river010-011-010.png",
        ⲆⵠᐃΔⲆᐃⲆ: "img/day-river010-011-011.png",
        ⲆΔᐃⲆᐃⵠⵠ: "img/day-river010-110-000.png",
        ᐃⵠⵠⲆⵠΔⲆ: "img/day-river010-110-010.png",
        ⵠⵠΔΔⲆⲆΔ: "img/day-river010-110-110.png",
        ᐃᐃⵠᐃⵠΔᐃ: "img/day-river010-111-000.png",
        ΔⲆᐃᐃΔΔᐃ: "img/day-river010-111-010.png",
        ΔⲆⲆⲆⵠⵠΔ: "img/day-river010-111-011.png",
        ᐃⲆᐃΔΔᐃΔ: "img/day-river010-111-110.png",
        ⵠᐃΔⵠᐃⵠΔ: "img/day-river010-111-111.png",
        ⵠⲆᐃᐃΔᐃΔ: "img/day-river011-011-000.png",
        ᐃⲆⵠᐃⲆⲆᐃ: "img/day-river011-011-010.png",
        ⲆᐃⲆᐃⵠⵠΔ: "img/day-river011-011-011.png",
        ΔⲆᐃⵠΔⵠⵠ: "img/day-river011-111-000.png",
        ⵠⵠΔⵠⲆᐃⵠ: "img/day-river011-111-010.png",
        ΔΔᐃⵠΔΔⵠ: "img/day-river011-111-011.png",
        ΔΔⵠΔⵠⵠⵠ: "img/day-river011-111-110.png",
        ᐃⵠΔᐃΔᐃⲆ: "img/day-river011-111-111.png",
        ⵠΔΔΔΔⲆⵠ: "img/day-river110-110-000.png",
        ΔⲆⲆΔΔΔᐃ: "img/day-river110-110-010.png",
        ΔΔΔΔᐃΔᐃ: "img/day-river110-110-110.png",
        ΔᐃⵠⲆⲆΔᐃ: "img/day-river110-111-000.png",
        ᐃΔⲆΔΔⵠᐃ: "img/day-river110-111-010.png",
        ⵠⲆΔⲆⵠΔᐃ: "img/day-river110-111-011.png",
        ᐃⵠⵠⵠⵠᐃⵠ: "img/day-river110-111-110.png",
        ᐃᐃΔⲆᐃⵠⲆ: "img/day-river110-111-111.png",
        ΔⲆⲆⲆⵠⵠⵠ: "img/day-river111-111-011.png",
        ᐃⵠᐃΔⵠΔΔ: "img/day-river111-111-110.png",
        ΔⲆⲆⲆⵠⵠⵠ: "img/day-river111-111-011.png",
        Δᐃᐃᐃᐃᐃᐃ: "img/day-river111-111-000.png",
        ⵠᐃⵠᐃⲆᐃᐃ: "img/day-river111-111-111.png",
        ΔⲆⲆᐃΔⲆᐃ: "img/day-river111-111-010.png",
        ⲆⵠΔΔⵠⵠΔ: "img/night-river000-010-000.png",
        ᐃᐃᐃⵠⲆⵠⲆ: "img/night-river000-010-010.png",
        ⲆⲆⲆⲆΔᐃΔ: "img/night-river000-011-000.png",
        ⲆᐃΔᐃᐃⲆⵠ: "img/night-river000-011-010.png",
        ᐃⵠΔⲆⲆᐃᐃ: "img/night-river000-011-011.png",
        ⵠⵠⵠΔᐃⵠΔ: "img/night-river000-110-000.png",
        ⵠⲆΔΔⵠᐃⵠ: "img/night-river000-110-010.png",
        ⵠᐃᐃᐃΔᐃⵠ: "img/night-river000-110-110.png",
        ᐃⵠⵠⲆΔᐃⲆ: "img/night-river000-111-000.png",
        ⲆⲆⵠΔᐃᐃᐃ: "img/night-river000-111-010.png",
        ⵠⲆᐃΔΔⲆᐃ: "img/night-river000-111-011.png",
        ΔⲆⵠᐃᐃⵠⲆ: "img/night-river000-111-110.png",
        ⵠᐃⵠⲆΔΔᐃ: "img/night-river000-111-111.png",
        Ⲇⵠⵠⵠᐃⵠⵠ: "img/night-river010-010-000.png",
        ΔⲆΔᐃΔᐃⵠ: "img/night-river010-010-010.png",
        ⵠⲆΔⵠⲆᐃΔ: "img/night-river010-011-000.png",
        ΔⲆᐃⲆᐃⵠᐃ: "img/night-river010-011-010.png",
        ⵠⵠᐃᐃⲆᐃⵠ: "img/night-river010-011-011.png",
        ⵠᐃΔⵠΔΔⲆ: "img/night-river010-110-000.png",
        ΔΔⵠΔⲆⵠᐃ: "img/night-river010-110-010.png",
        ᐃⲆΔⲆⲆⵠᐃᐃᐃ: "img/night-river010-110-110.png",
        ᐃⵠⵠΔⵠⲆΔᐃⵠ: "img/night-river010-111-000.png",
        ⵠΔᐃⲆⵠᐃⲆⵠⲆ: "img/night-river010-111-010.png",
        ᐃΔⲆⲆᐃⵠⲆΔⲆ: "img/night-river010-111-011.png",
        ⵠⵠΔᐃⵠᐃⲆⵠᐃ: "img/night-river010-111-110.png",
        ᐃⲆⵠᐃᐃΔⲆⵠᐃ: "img/night-river010-111-111.png",
        ΔⵠⵠᐃⲆΔⲆᐃᐃ: "img/night-river011-011-000.png",
        ⲆᐃⲆΔⲆⲆⲆΔΔ: "img/night-river011-011-010.png",
        ⲆⵠⲆⵠⵠᐃΔⵠⲆ: "img/night-river011-011-011.png",
        ᐃⲆⲆᐃⲆⲆᐃⲆⵠ: "img/night-river011-111-000.png",
        ⵠⵠⵠⵠⵠⵠⵠⵠⵠ: "img/night-river011-111-010.png",
        ⲆΔΔⵠΔⵠΔⵠΔ: "img/night-river011-111-011.png",
        ⲆⵠΔΔⲆⲆⵠᐃⵠ: "img/night-river011-111-110.png",
        ᐃΔᐃⵠⵠᐃΔᐃⵠ: "img/night-river011-111-111.png",
        ᐃΔⲆⵠⵠᐃᐃΔΔ: "img/night-river110-110-000.png",
        ⵠΔⵠⵠⲆᐃⵠⵠⲆ: "img/night-river110-110-010.png",
        ⲆⵠⵠⵠΔΔᐃᐃᐃ: "img/night-river110-110-110.png",
        ΔᐃⲆΔⲆΔⲆⲆⲆ: "img/night-river110-111-000.png",
        ⵠⵠᐃΔᐃⵠᐃⲆⲆ: "img/night-river110-111-010.png",
        ᐃᐃᐃΔⲆⵠΔⲆⵠ: "img/night-river110-111-011.png",
        ⲆⵠΔⵠᐃᐃⵠⲆⵠ: "img/night-river110-111-110.png",
        ⵠⵠᐃΔᐃΔᐃᐃΔ: "img/night-river110-111-111.png",
        ᐃⵠⲆⵠΔⲆᐃ: "img/night-river111-111-011.png",
        ⲆⲆⵠΔΔᐃΔᐃⲆ: "img/night-river111-111-110.png",
        ᐃⵠⲆⵠΔⲆᐃ: "img/night-river111-111-011.png",
        ⵠᐃΔᐃᐃᐃᐃⵠΔ: "img/night-river111-111-000.png",
        ⵠⵠⲆᐃᐃⲆΔⲆⲆ: "img/night-river111-111-111.png",
        ⵠⵠᐃⲆⵠᐃᐃⵠΔ: "img/night-river111-111-010.png",
        ⵠⵠᐃⲆⵠⵠⵠ: "img/day-pebblecompo1.png",
        ᐃⲆΔᐃⲆ: "img/day-pebblecompo2.png",
        ⲆⲆⵠⲆⲆ: "img/day-pebblecompo3.png",
        ⲆᐃΔⵠⵠⲆⲆ: "img/day-pebblecompo4.png",
        ⵠᐃΔⵠΔ: "img/day-pebblecompo5.png",
        ᐃⲆⲆᐃⲆ: "img/day-pebblecompo6.png",
        ᐃⵠⵠΔⵠ: "img/day-pebblecompo7.png",
        ΔⵠᐃΔΔⲆᐃⲆΔ: "img/day-pebblecompo8.png",
        ᐃᐃⵠᐃᐃΔᐃ: "img/day-pebblecompo9.png",
        ⲆΔΔⵠᐃⵠⵠ: "img/day-pebblecompo10.png",
        ⵠⵠᐃⲆⲆ: "img/day-pebblecompo11.png",
        ᐃⲆⲆⲆⵠⵠΔ: "img/day-pebblecompo12.png",
        ᐃⵠᐃⲆⵠΔⵠ: "img/day-pebblecompo13.png",
        ⲆΔⲆⵠⵠᐃΔ: "img/day-pebblecompo14.png",
        ᐃⵠᐃΔⲆΔΔ: "img/day-pebblecompo15.png",
        ΔⲆⵠᐃΔΔⲆ: "img/day-pebblecompo16.png",
        ΔΔⲆᐃᐃ: "img/day-pebblecompo17.png",
        ⲆΔⲆⵠᐃⲆΔ: "img/day-pebblecompo18.png",
        ⵠΔⵠⲆⲆᐃᐃ: "img/day-pebblecompo19.png",
        ΔᐃΔΔΔ: "img/day-pebblecompo20.png",
        ΔⵠⲆᐃᐃ: "img/day-pebblecompo21.png",
        ᐃⲆᐃΔᐃⵠᐃ: "img/day-pebblecompo22.png",
        ᐃⵠΔΔΔᐃⲆ: "img/day-pebblecompo23.png",
        ⲆⵠΔⲆⲆᐃᐃ: "img/day-pebblecompo24.png",
        ΔⲆᐃᐃᐃ: "img/day-pebblecompo25.png",
        ΔⲆⲆⵠⲆ: "img/day-pebblecompo26.png",
        ΔⵠΔᐃᐃᐃⲆ: "img/day-pebblecompo27.png",
        ⲆᐃⲆⲆᐃ: "img/day-pebblecompo28.png",
        ⵠᐃΔΔⲆᐃΔ: "img/night-pebblecompo1.png",
        ⵠⵠⲆΔⲆ: "img/night-pebblecompo2.png",
        ⵠΔⵠⲆⵠ: "img/night-pebblecompo3.png",
        ᐃΔⲆΔⲆⵠᐃ: "img/night-pebblecompo4.png",
        Ⲇᐃᐃᐃᐃ: "img/night-pebblecompo5.png",
        ᐃⵠᐃᐃᐃ: "img/night-pebblecompo6.png",
        ᐃᐃΔᐃΔ: "img/night-pebblecompo7.png",
        ⲆⵠᐃⲆᐃⵠⲆⵠᐃ: "img/night-pebblecompo8.png",
        ΔⲆⵠΔⵠⲆⲆ: "img/night-pebblecompo9.png",
        ⲆⵠᐃᐃⵠⲆΔ: "img/night-pebblecompo10.png",
        ᐃⵠᐃⲆᐃ: "img/night-pebblecompo11.png",
        ⵠᐃᐃⲆⵠΔΔ: "img/night-pebblecompo12.png",
        ΔΔᐃᐃⵠᐃⵠ: "img/night-pebblecompo13.png",
        ⵠᐃⵠᐃⵠᐃΔ: "img/night-pebblecompo14.png",
        ΔᐃᐃⵠΔⲆΔ: "img/night-pebblecompo15.png",
        ΔᐃⲆΔⲆᐃΔ: "img/night-pebblecompo16.png",
        ⲆⵠⵠΔᐃ: "img/night-pebblecompo17.png",
        ⵠⲆⵠⲆᐃᐃⲆ: "img/night-pebblecompo18.png",
        ΔᐃⵠⲆᐃᐃⵠ: "img/night-pebblecompo19.png",
        ΔⵠᐃⵠⲆ: "img/night-pebblecompo20.png",
        ΔᐃⲆⵠᐃ: "img/night-pebblecompo21.png",
        ΔᐃⵠⲆⲆΔΔ: "img/night-pebblecompo22.png",
        ⵠⵠᐃΔⵠΔΔ: "img/night-pebblecompo23.png",
        ⲆᐃⲆΔⵠⲆᐃ: "img/night-pebblecompo24.png",
        ΔΔⵠΔΔ: "img/night-pebblecompo25.png",
        Ⲇⵠⵠⵠⵠ: "img/night-pebblecompo26.png",
        ⲆⵠⵠⲆⵠΔⵠ: "img/night-pebblecompo27.png",
        ΔΔΔⵠⵠ: "img/night-pebblecompo28.png",
        ΔⲆⲆΔⵠΔΔⲆᐃ: "img/day-baby-mammoth.png",
        ᐃⲆⵠᐃⵠⲆᐃⲆⵠ: "img/day-baby-mammoth-tamed.png",
        ᐃᐃⵠᐃⲆⲆᐃΔᐃ: "img/day-baby-mammoth-angry.png",
        ⵠΔΔᐃⲆᐃⵠΔΔ: "img/night-baby-mammoth.png",
        ΔⲆⲆΔⲆⵠⲆⲆᐃ: "img/night-baby-mammoth-tamed.png",
        ⵠⲆⵠᐃᐃⲆᐃⲆⵠ: "img/night-baby-mammoth-angry.png",
        ΔΔⵠΔᐃᐃᐃΔΔ: "img/inv-mammoth-out.png",
        ⵠⵠᐃⵠᐃⵠΔᐃⲆ: "img/inv-mammoth-in.png",
        ⵠᐃΔΔⵠΔⲆⲆⵠ: "img/inv-mammoth-click.png",
        ⲆⲆⵠᐃⵠⵠᐃ: "img/hurt-baby-mammoth.png",
        ⵠⵠΔⲆΔⵠΔ: "img/baby-mammoth-step.png",
        ΔⲆΔΔⲆᐃΔⲆᐃ: "img/day-flower-hat.png",
        ⵠΔΔⲆᐃⵠⵠᐃⵠ: "img/night-flower-hat.png",
        ΔΔⲆᐃΔᐃᐃⲆᐃ: "img/inv-flower-hat-out.png",
        ΔⵠᐃⲆΔᐃⲆⵠᐃ: "img/inv-flower-hat-in.png",
        ᐃⲆⵠΔΔⵠΔΔᐃ: "img/inv-flower-hat-click.png",
        ⲆΔⵠΔΔⵠⵠⵠΔ: "img/day-fur-hat.png",
        ᐃᐃⵠⲆⲆΔⵠⵠΔ: "img/night-fur-hat.png",
        ⵠᐃⲆΔⲆⵠᐃᐃΔ: "img/inv-fur-hat-out.png",
        ᐃⲆⵠᐃΔⲆⵠⲆΔ: "img/inv-fur-hat-in.png",
        ⵠⵠⲆᐃᐃΔᐃᐃᐃ: "img/inv-fur-hat-click.png",
        ΔⲆⵠⲆᐃᐃⲆᐃΔ: "img/day-mammoth.png",
        ⵠᐃΔᐃⲆᐃⲆᐃᐃ: "img/night-mammoth.png",
        ᐃΔⵠΔᐃⵠᐃ: "img/hurt-mammoth.png",
        ΔⲆᐃⲆᐃⲆⲆⲆⲆ: "img/inv-mammoth-fur-out.png",
        ΔⲆᐃΔⵠᐃᐃΔᐃ: "img/inv-mammoth-fur-in.png",
        ᐃⲆⲆⲆΔΔΔⵠᐃ: "img/inv-mammoth-fur-click.png",
        ⲆᐃⵠΔΔⲆⵠΔᐃ: "img/inv-wood-bow-out.png",
        ΔΔⲆⵠⵠᐃⵠⲆⲆ: "img/inv-wood-bow-in.png",
        ⵠⵠⲆᐃᐃⲆᐃⵠᐃ: "img/inv-wood-bow-click.png",
        ΔΔΔⲆᐃⵠΔⵠⵠ: "img/inv-wood-arrow-out.png",
        ᐃΔⵠⲆⵠⲆⲆΔΔ: "img/inv-wood-arrow-in.png",
        ⵠᐃΔⲆᐃΔⵠⲆⵠ: "img/inv-wood-arrow-click.png",
        ⲆᐃⲆⲆⵠⵠΔⲆⲆ: "img/day-wood-bow2.png",
        ⲆΔΔΔⵠᐃⲆᐃᐃ: "img/night-wood-bow2.png",
        ⲆⲆⵠⲆⵠⲆΔ: "img/day-wood-arrow.png",
        ⲆⲆΔⵠᐃⵠⲆ: "img/night-wood-arrow.png",
        ⲆⲆⵠⲆⵠΔⵠᐃΔ: "img/inv-stone-bow-out.png",
        ⲆⲆΔΔⲆᐃⵠⵠⵠ: "img/inv-stone-bow-in.png",
        ⲆᐃⵠⵠΔΔΔⵠⵠ: "img/inv-stone-bow-click.png",
        ⲆΔᐃⵠⵠΔⲆⵠⲆ: "img/inv-stone-arrow-out.png",
        ᐃᐃᐃⵠᐃⵠⲆⲆᐃ: "img/inv-stone-arrow-in.png",
        ⲆⲆⲆΔⲆΔⲆⲆⲆ: "img/inv-stone-arrow-click.png",
        ⲆᐃᐃⲆΔⵠΔᐃⲆ: "img/day-stone-bow.png",
        ᐃⲆⵠᐃⲆᐃᐃᐃⵠ: "img/night-stone-bow.png",
        ᐃᐃᐃΔⲆΔᐃ: "img/day-stone-arrow.png",
        ᐃⵠⵠⵠⵠΔΔ: "img/night-stone-arrow.png",
        ΔⲆᐃⲆⵠⲆⲆⵠΔ: "img/inv-gold-bow-out.png",
        ΔⲆᐃⲆⲆᐃΔᐃⲆ: "img/inv-gold-bow-in.png",
        ⵠⵠⲆⲆⵠⵠΔᐃΔ: "img/inv-gold-bow-click.png",
        ⲆΔⲆⵠⵠᐃΔⵠᐃ: "img/inv-gold-arrow-out.png",
        ΔⵠⵠᐃⵠΔⵠⵠⵠ: "img/inv-gold-arrow-in.png",
        ⵠⲆᐃᐃⲆᐃⵠⵠΔ: "img/inv-gold-arrow-click.png",
        ⲆⲆᐃΔᐃⲆⵠΔᐃ: "img/day-gold-bow.png",
        ΔⵠⵠⵠΔⵠᐃⵠⲆ: "img/night-gold-bow.png",
        ⵠⵠΔⵠΔᐃⲆ: "img/day-gold-arrow.png",
        ⲆΔᐃⲆΔⵠᐃ: "img/night-gold-arrow.png",
        ⲆΔⲆⵠΔᐃⵠΔⵠ: "img/inv-diamond-bow-out.png",
        ΔⲆⵠⵠᐃⵠⵠⲆᐃ: "img/inv-diamond-bow-in.png",
        ᐃⵠⲆᐃⲆᐃΔⲆᐃ: "img/inv-diamond-bow-click.png",
        ΔᐃᐃΔⵠΔⵠΔΔ: "img/inv-diamond-arrow-out.png",
        ᐃⵠⵠⵠΔⵠΔᐃᐃ: "img/inv-diamond-arrow-in.png",
        ⲆⵠᐃᐃᐃᐃΔⵠⵠ: "img/inv-diamond-arrow-click.png",
        ΔᐃⵠᐃᐃᐃⲆΔᐃ: "img/day-diamond-bow.png",
        ᐃΔⵠⲆΔᐃΔⲆΔ: "img/night-diamond-bow.png",
        ΔⲆΔⲆⵠⵠᐃ: "img/day-diamond-arrow.png",
        ⵠᐃⵠⲆᐃⵠΔ: "img/night-diamond-arrow.png",
        ⲆⵠⲆᐃⲆΔⲆⲆΔ: "img/inv-amethyst-bow-out.png",
        ᐃⲆΔⲆᐃⵠⲆⵠⵠ: "img/inv-amethyst-bow-in.png",
        ᐃᐃⲆΔΔΔⲆⲆΔ: "img/inv-amethyst-bow-click.png",
        ᐃΔᐃⵠΔΔΔⵠⲆ: "img/inv-amethyst-arrow-out.png",
        ᐃⵠⲆⵠΔᐃᐃΔⵠ: "img/inv-amethyst-arrow-in.png",
        ⵠΔⲆⲆᐃⵠΔⵠⵠ: "img/inv-amethyst-arrow-click.png",
        ⲆᐃΔΔⲆᐃⲆΔⲆ: "img/day-amethyst-bow.png",
        ᐃⲆᐃⲆⵠΔᐃⲆΔ: "img/night-amethyst-bow.png",
        ᐃᐃⵠⲆΔⲆΔ: "img/day-amethyst-arrow.png",
        ᐃᐃⵠᐃⵠΔΔ: "img/night-amethyst-arrow.png",
        ᐃⵠΔΔΔⲆⲆⵠⲆ: "img/inv-dragon-bow-out.png",
        ⵠⲆⵠⵠΔⵠⵠⵠⲆ: "img/inv-dragon-bow-in.png",
        ⵠΔⵠⲆΔⲆΔⵠⵠ: "img/inv-dragon-bow-click.png",
        ΔᐃⲆᐃΔΔⲆΔΔ: "img/inv-dragon-arrow-out.png",
        ΔⵠΔΔⲆⲆΔⲆⲆ: "img/inv-dragon-arrow-in.png",
        ⲆΔⲆⲆΔΔΔⲆⲆ: "img/inv-dragon-arrow-click.png",
        ⵠⵠΔΔᐃⵠⲆⵠⵠ: "img/day-dragon-bow.png",
        ⲆⲆⵠⵠᐃⵠΔⲆᐃ: "img/night-dragon-bow.png",
        ⵠⲆⲆⲆⲆⵠⲆ: "img/day-dragon-arrow.png",
        ⲆᐃΔΔⲆᐃⲆ: "img/night-dragon-arrow.png",
        ⲆΔΔⲆᐃΔΔⲆᐃ: "img/inv-reidite-bow-out.png",
        ⵠⲆⵠᐃⵠⵠᐃⵠΔ: "img/inv-reidite-bow-in.png",
        ⵠⵠΔᐃΔⲆⲆᐃⵠ: "img/inv-reidite-bow-click.png",
        ⵠⵠⵠᐃⲆᐃΔΔⲆ: "img/inv-reidite-arrow-out.png",
        ᐃᐃⵠᐃΔⵠⲆⵠΔ: "img/inv-reidite-arrow-in.png",
        ᐃΔⲆⲆΔⵠⲆΔΔ: "img/inv-reidite-arrow-click.png",
        ⲆⵠΔᐃⲆΔΔⵠΔ: "img/day-reidite-bow.png",
        ⲆᐃᐃⲆΔᐃΔΔⲆ: "img/night-reidite-bow.png",
        ᐃΔΔⲆⵠΔᐃ: "img/day-reidite-arrow.png",
        ⵠΔΔⵠⵠⵠⵠᐃⲆ: "img/night-reidite-arrow.png",
        ΔΔΔⲆⲆΔⵠⵠᐃ: "img/inv-wooden-axe-out.png",
        ᐃⲆΔΔⲆⲆⵠⲆⲆ: "img/inv-wooden-axe-in.png",
        ⲆᐃᐃΔⲆⲆⲆᐃⵠ: "img/inv-wooden-axe-click.png",
        ⵠᐃⲆᐃⲆⵠΔᐃⵠ: "img/day-wooden-axe.png",
        ⲆⲆⲆⵠΔⵠΔⵠΔ: "img/night-wooden-axe.png",
        ⵠⵠⵠⵠΔᐃⵠⵠᐃ: "img/inv-stone-axe-out.png",
        ⵠⵠⲆⵠⲆⵠᐃⵠᐃ: "img/inv-stone-axe-in.png",
        ⲆᐃⲆⵠⲆᐃⲆⲆⵠ: "img/inv-stone-axe-click.png",
        ΔⲆⲆⲆᐃΔⵠⵠⵠ: "img/day-stone-axe.png",
        ⲆΔⵠⵠᐃⲆⵠⵠⵠ: "img/night-stone-axe.png",
        ⵠⵠⵠⲆΔᐃⵠⵠⵠ: "img/inv-golden-axe-out.png",
        ⲆⲆᐃⵠⲆΔⲆⵠΔ: "img/inv-golden-axe-in.png",
        ⵠⲆᐃⵠⲆⲆᐃⵠᐃ: "img/inv-golden-axe-click.png",
        ⲆΔΔᐃⲆⵠⲆⵠᐃ: "img/day-golden-axe.png",
        ΔᐃⲆΔᐃΔΔΔⲆ: "img/night-golden-axe.png",
        ⵠᐃΔΔⲆΔΔΔᐃ: "img/inv-diamond-axe-out.png",
        ᐃΔᐃᐃⵠᐃΔⲆᐃ: "img/inv-diamond-axe-in.png",
        ΔⲆᐃᐃᐃΔᐃᐃΔ: "img/inv-diamond-axe-click.png",
        ⲆⵠⲆΔⲆᐃΔⲆΔ: "img/day-diamond-axe.png",
        ⵠⵠⵠⵠᐃᐃΔⲆⲆ: "img/night-diamond-axe.png",
        ⵠⲆΔΔᐃⵠⵠⵠΔ: "img/inv-amethyst-axe-out.png",
        ᐃⵠⵠⵠⵠΔⵠⵠⲆ: "img/inv-amethyst-axe-in.png",
        ΔⲆᐃⵠΔⵠᐃΔⲆ: "img/inv-amethyst-axe-click.png",
        ⲆⲆⵠⵠⵠᐃΔⲆⲆ: "img/day-amethyst-axe.png",
        ΔⵠΔⵠᐃⲆⲆⲆⲆ: "img/night-amethyst-axe.png",
        ᐃⲆΔⲆΔⲆⵠΔⵠ: "img/inv-reidite-axe-out.png",
        ᐃⲆⲆⲆΔⲆⲆΔⵠ: "img/inv-reidite-axe-in.png",
        ⲆⲆⵠΔⵠⵠΔᐃⲆ: "img/inv-reidite-axe-click.png",
        ᐃᐃΔⵠⲆⲆⲆⲆᐃ: "img/day-reidite-axe.png",
        ⲆⵠⲆᐃΔᐃⵠᐃⵠ: "img/night-reidite-axe.png",
        ⲆΔⵠᐃᐃΔΔ: "img/bandage-activated.png",
        ᐃΔⲆⵠⲆᐃⲆ: "img/auto-feed.png",
        ᐃⵠΔⲆⲆⲆΔ: "img/stop-regeneration.png",
        ᐃᐃⲆΔᐃᐃⵠ: "img/stop-regeneration2.png",
        ᐃᐃΔᐃⵠⲆⵠᐃⲆ: "img/day-wood-platform.png",
        ᐃΔⵠᐃⲆᐃⵠⵠᐃ: "img/night-wood-platform.png",
        ΔⵠⲆⵠᐃᐃⵠⲆⲆ: "img/inv-wood-platform-in.png",
        ΔⵠⵠᐃⲆⵠⵠⲆᐃ: "img/inv-wood-platform-out.png",
        ᐃᐃΔⲆᐃΔᐃΔΔ: "img/inv-wood-platform-click.png",
        ᐃᐃΔΔⵠⵠᐃⲆᐃ: "img/day-wood-shield.png",
        ΔΔⲆΔⲆⵠΔΔᐃ: "img/night-wood-shield.png",
        ⵠⲆΔᐃᐃⵠᐃᐃⲆ: "img/day-stone-shield.png",
        ᐃᐃⵠᐃⵠΔⲆΔⲆ: "img/night-stone-shield.png",
        ⵠⲆᐃⵠΔⲆⵠΔⲆ: "img/day-gold-shield.png",
        ⲆⲆΔΔⵠΔⲆⵠⲆ: "img/night-gold-shield.png",
        ΔⵠⲆΔᐃⲆⲆΔᐃ: "img/day-diamond-shield.png",
        ᐃⵠⲆⲆⲆᐃΔΔᐃ: "img/night-diamond-shield.png",
        ⵠⵠⵠᐃⲆΔᐃΔᐃ: "img/day-amethyst-shield.png",
        ΔΔΔⲆΔᐃᐃⲆⲆ: "img/night-amethyst-shield.png",
        ᐃⵠⵠⵠᐃⵠⲆⵠⲆ: "img/day-reidite-shield.png",
        ᐃⲆⵠΔᐃⲆᐃᐃΔ: "img/night-reidite-shield.png",
        ᐃⵠⲆΔᐃΔᐃⵠⲆ: "img/inv-wood-shield-in.png",
        ⵠΔΔⲆⵠⵠΔᐃⵠ: "img/inv-wood-shield-out.png",
        ᐃⲆΔⵠΔⵠⵠⲆⲆ: "img/inv-wood-shield-click.png",
        ⵠᐃⲆⲆⲆⲆⵠᐃⵠ: "img/inv-stone-shield-in.png",
        ᐃⵠΔΔⲆⵠⲆᐃⵠ: "img/inv-stone-shield-out.png",
        ⲆⲆᐃⵠⵠⲆΔⵠΔ: "img/inv-stone-shield-click.png",
        ΔⵠᐃⵠⵠΔᐃⲆΔ: "img/inv-gold-shield-in.png",
        ⵠⵠΔΔⵠᐃᐃⵠΔ: "img/inv-gold-shield-out.png",
        ⲆΔⵠⵠΔᐃⵠⵠⵠ: "img/inv-gold-shield-click.png",
        ⵠᐃΔᐃⵠΔᐃⵠΔ: "img/inv-diamond-shield-in.png",
        ⵠᐃⲆΔⵠⲆⵠⲆΔ: "img/inv-diamond-shield-out.png",
        ΔⵠⲆⲆᐃⵠΔΔⵠ: "img/inv-diamond-shield-click.png",
        ⲆΔᐃⲆⵠⵠΔΔⲆ: "img/inv-amethyst-shield-in.png",
        ΔᐃᐃⵠⲆⵠⵠΔⵠ: "img/inv-amethyst-shield-out.png",
        ⲆΔᐃΔⵠⵠⲆᐃΔ: "img/inv-amethyst-shield-click.png",
        ΔⲆⵠⲆᐃⲆᐃΔⵠ: "img/inv-reidite-shield-in.png",
        ⲆΔΔΔᐃⲆⲆⵠⵠ: "img/inv-reidite-shield-out.png",
        ⵠⲆⵠΔᐃⵠⲆΔⵠ: "img/inv-reidite-shield-click.png",
        ⲆⵠΔⵠⵠⲆΔΔⲆ: "img/day-machete.png",
        ⵠΔⲆᐃⵠⲆᐃⵠⵠ: "img/night-machete.png",
        ΔᐃΔΔⵠⲆᐃⵠᐃ: "img/inv-machete-in.png",
        ⵠⲆᐃⵠᐃΔⵠᐃΔ: "img/inv-machete-out.png",
        ⲆⲆᐃⵠⲆΔⵠⵠᐃ: "img/inv-machete-click.png"
    };
    ⵠⵠⲆⵠᐃᐃⵠ = [{}];
    ⵠⵠⲆⵠᐃᐃⵠ[0].stringify = function (a) {
        var b = new Uint8Array(new ArrayBuffer(a.length));
        for (var c = 0; a.length > c; c++) {
            b[c] = a[c];
        }
        return b;
    };
    ᐃⲆᐃΔⲆΔᐃ = {};
    ⲆⲆᐃᐃⵠⵠⵠΔΔ = {};
    for (var Qb in ᐃⵠ) {
        ᐃⲆᐃΔⲆΔᐃ[Qb] = ᐃⵠ[Qb];
    }
    const Vb = 11;
    function Xb(a, b) {
        bi(sb, a, b);
        return ((81 + (pt(gb[0], gb[1], gb[0], gb[1], gb[0]) ^ mr(gb[1], gb[0]))) * 8121 + 28411) % 134456;
    }
    const Zb = 6;
    ⵠΔ = [];
    const $b = 5;
    const ed = 12;
    ΔΔⲆ = {};
    ΔΔⲆ.ᐃⵠᐃⵠⲆ = 0;
    ΔΔⲆ.ΔΔⲆΔ = 1;
    ΔΔⲆ.ΔᐃΔⵠ = 2;
    ΔΔⲆ.ᐃⲆΔᐃ = 3;
    const id = 15;
    ΔΔⲆ.ⵠⵠⲆⵠ = 4;
    const td = 7;
    const nd = 8;
    const od = 15;
    ΔΔⲆ.ᐃΔᐃⵠ = 5;
    const ad = 9;
    ΔΔⲆ.Δⵠⵠᐃ = 6;
    ΔΔⲆ.ᐃⵠΔᐃⵠᐃⲆ = 7;
    ΔΔⲆ.ⲆⲆΔᐃᐃ = 8;
    ΔΔΔⲆ = {};
    const rd = 2;
    ⵠⲆⲆⵠ = [];
    const sd = 16;
    ΔΔⲆⵠⵠⵠΔ = function (a, b) {
        for (var c = 0; c < a.length; c++) {
            if (b === a[c].id) {
                return c;
            }
        }
        return -1;
    };
    var hd = [];
    function Ft(a, b) {
        for (var c = 0; c < hd.length; c += b) {
            var d = hd[c];
            if (a === d[0]) {
                gd(d[0], d[1], d[2], d[3]);
            }
        }
    }
    function gd(b, c, d, e) {
        var f = ⵠⲆⲆⵠ[b];
        if (f !== ih) {
            for (var i = 0; i < 2; i++) {
                var j = f[c][i];
                var k = e * 193 / Px.ⵠⵠᐃⵠⵠ;
                var m = d * 193 / Px.Ⲇᐃⵠⵠⵠ;
                var n = j.width / 3.5;
                var o = j.height / 3.5;
                ⵠΔ[818][i].drawImage(j, k - n / 2, m - o / 2, n, o);
                k = e * 600 / Px.ⵠⵠᐃⵠⵠ;
                m = d * 600 / Px.Ⲇᐃⵠⵠⵠ;
                n = j.width / 1.5;
                o = j.height / 1.5;
                ⵠΔ[819][i].drawImage(j, k - n / 2, m - o / 2, n, o);
            }
        }
    }
    function ud(a, b, c, d) {
        if (b) {
            a.fillStyle = b;
            a.fill();
        }
        if (c) {
            a.lineWidth = d;
            a.strokeStyle = c;
            a.stroke();
        }
    }
    ᐃⲆⵠΔΔⵠΔⲆᐃ = function () {
        for (var b = 0; b < 2; b++) {
            ⵠΔ[818][b].clearRect(0, 0, 193, 193);
            ⵠΔ[818][b].drawImage(ⵠⲆⲆⵠ.MAP[b], 0, 0, 193, 193);
            ⵠΔ[819][b].clearRect(0, 0, 600, 600);
            ⵠΔ[819][b].drawImage(ⵠⲆⲆⵠ.MAP[b], 0, 0, 600, 600);
            for (var c = Px.Ⲇⵠⵠᐃᐃ.length - 1; c >= 0; c--) {
                var d = Px.Ⲇⵠⵠᐃᐃ[c];
                var f = d.x1 * 193 / (Px.ⵠⵠᐃⵠⵠ * 100);
                var j = d.y1 * 193 / (Px.Ⲇᐃⵠⵠⵠ * 100);
                var k = d.w * 193 / (Px.ⵠⵠᐃⵠⵠ * 100);
                var m = d.ⲆⲆⲆ * 193 / (Px.Ⲇᐃⵠⵠⵠ * 100);
                var p = d.x1 * 600 / (Px.ⵠⵠᐃⵠⵠ * 100);
                var q = d.y1 * 600 / (Px.Ⲇᐃⵠⵠⵠ * 100);
                var u = d.w * 600 / (Px.ⵠⵠᐃⵠⵠ * 100);
                var v = d.ⲆⲆⲆ * 600 / (Px.Ⲇᐃⵠⵠⵠ * 100);
                if (d.ᐃⲆᐃ === Px.ᐃΔᐃᐃⲆ) {
                    ⵠΔ[818][b].drawImage(ⵠⲆⲆⵠ.FOREST[b], f, j, k, m);
                    ⵠΔ[819][b].drawImage(ⵠⲆⲆⵠ.FOREST[b], p, q, u, v);
                }
                if (d.ᐃⲆᐃ === Px.ΔⲆⲆⲆᐃΔΔ) {
                    ⵠΔ[818][b].drawImage(ⵠⲆⲆⵠ.WINTER[b], f, j, k, m);
                    ⵠΔ[819][b].drawImage(ⵠⲆⲆⵠ.WINTER[b], p, q, u, v);
                }
                if (Px.ᐃⲆΔᐃⲆⵠⲆ === d.ᐃⲆᐃ) {
                    ⵠΔ[818][b].drawImage(ⵠⲆⲆⵠ.LAVA[b], f, j, k, m);
                    ⵠΔ[819][b].drawImage(ⵠⲆⲆⵠ.LAVA[b], p, q, u, v);
                }
                if (d.ᐃⲆᐃ === Px.ᐃᐃⲆⵠΔΔᐃ) {
                    ⵠΔ[818][b].drawImage(ⵠⲆⲆⵠ.CAVE[b], f, j, k, m);
                    ⵠΔ[819][b].drawImage(ⵠⲆⲆⵠ.CAVE[b], p, q, u, v);
                }
                if (d.ᐃⲆᐃ === Px.ⵠΔⵠⵠⵠⵠⵠ) {
                    ⵠΔ[818][b].drawImage(ⵠⲆⲆⵠ.DESERT[b], f, j, k, m);
                    ⵠΔ[819][b].drawImage(ⵠⲆⲆⵠ.DESERT[b], p, q, u, v);
                }
            }
        }
    };
    ⲆⵠⵠⵠᐃΔΔᐃᐃ = function () {
        ΔΔΔⲆ = {
            ⲆΔᐃⵠᐃ: [{
                id: 0,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠΔⲆᐃᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆΔΔⵠΔᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ΔΔΔⵠⲆΔⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠΔᐃᐃΔⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⵠᐃⵠⲆ,
                ⲆⲆΔ: "Starve.io",
                name: "Starver"
            }, {
                id: 3,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔⵠᐃⵠᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃΔⲆᐃⲆⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆΔⲆⲆⲆⲆᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆΔⵠⵠⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⵠᐃⵠⲆ,
                ⲆⲆΔ: "Starve.io",
                name: "Angry"
            }, {
                id: 2,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆⵠᐃⲆΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠⵠΔΔⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⲆⵠᐃⵠΔⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃΔΔⵠΔᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⵠᐃⵠⲆ,
                ⲆⲆΔ: "Starve.io",
                name: "Sad"
            }, {
                id: 9,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔΔᐃᐃⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆᐃᐃⲆΔᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆᐃⵠΔⲆΔⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃᐃⲆᐃᐃΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⵠᐃⵠⲆ,
                ⲆⲆΔ: "Starve.io",
                name: "Happy 1"
            }, {
                id: 1,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔΔᐃⵠΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔΔⲆⵠᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠΔᐃⵠᐃΔΔ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃΔᐃⲆⲆΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "What?"
            }, {
                id: 4,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠᐃΔⵠⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆⲆⵠΔᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⲆΔᐃᐃΔⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ΔΔΔᐃⵠⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Suspicious"
            }, {
                id: 5,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔᐃⵠⵠΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠΔᐃΔᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⵠⲆⲆⵠⲆⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠᐃΔᐃᐃⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Scar"
            }, {
                id: 6,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⲆⲆᐃΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆΔⲆⲆⵠⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃΔᐃⵠᐃⲆⲆ,
                ΔⲆΔⲆ: ᐃⵠ.Δᐃᐃᐃⵠⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "In Trouble"
            }, {
                id: 7,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠⵠΔᐃⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆΔⵠΔΔᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⵠᐃᐃⵠⵠᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃᐃⵠᐃᐃᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Cute"
            }, {
                id: 8,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔᐃᐃⵠᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃᐃⵠΔⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⲆⵠⲆΔⲆⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⵠΔᐃᐃᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Bored 1"
            }, {
                id: 10,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠⲆⲆⲆⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠⵠⲆΔⲆΔ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃΔΔᐃΔᐃⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⲆΔΔⵠⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Happy 2"
            }, {
                id: 11,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⲆⵠⲆⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔΔⲆⵠⵠⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃᐃᐃΔⲆⵠⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⵠᐃΔⵠᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Crazy"
            }, {
                id: 12,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃΔⲆⵠⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃⵠᐃΔⵠᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠᐃᐃᐃΔΔᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ΔᐃᐃⵠⲆΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Happy 3"
            }, {
                id: 13,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆᐃⵠᐃΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔΔΔᐃΔᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⲆΔΔᐃΔΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⵠⲆⵠᐃᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Very Cute"
            }, {
                id: 14,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃΔΔᐃⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠΔΔᐃᐃΔ,
                ΔⵠᐃΔ: ᐃⵠ.ΔᐃⲆⲆᐃⵠᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⵠⲆΔⲆΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Curious"
            }, {
                id: 15,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔᐃᐃⲆⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠΔΔΔΔⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ΔΔⵠⲆΔΔⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃᐃΔΔⵠΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Bored 2"
            }, {
                id: 16,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔᐃΔⵠᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆΔⲆΔᐃΔ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠΔᐃⵠⲆᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆΔⵠⵠⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Happy 4"
            }, {
                id: 17,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔΔⲆⲆⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆᐃᐃⲆⵠᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠΔⵠΔⲆⵠⲆ,
                ΔⲆΔⲆ: ᐃⵠ.Δⵠⵠᐃᐃⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Scar 2"
            }, {
                id: 18,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔΔΔΔᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃⲆⵠΔⲆⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⲆᐃΔⲆΔⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠᐃᐃΔᐃΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Sick"
            }, {
                id: 19,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔⲆᐃΔᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠⵠⲆⲆᐃⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⲆⵠⲆΔᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ΔΔⲆⲆⲆⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Somnambule"
            }, {
                id: 24,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⵠⵠᐃᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃΔⵠΔᐃΔ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃΔᐃᐃᐃⲆΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⵠΔΔⵠⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Pixelbitie",
                name: "Feel Bad"
            }, {
                id: 23,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠⵠᐃⲆⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔΔᐃⵠⵠᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⲆⵠᐃΔⲆΔ,
                ΔⲆΔⲆ: ᐃⵠ.Δᐃⵠⵠⵠⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Pixelbitie",
                name: "Mmmh."
            }, {
                id: 103,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃᐃⲆᐃᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔΔᐃᐃᐃⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⲆΔᐃⲆⵠⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ΔᐃⲆⵠᐃⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "pizza wa",
                name: "Panic"
            }, {
                id: 105,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃⲆⵠⲆⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⲆⲆⲆⲆΔ,
                ΔⵠᐃΔ: ᐃⵠ.ΔΔΔΔΔⲆⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆΔᐃⲆⲆΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "pizza wa",
                name: "Hypnotic"
            }, {
                id: 106,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔΔΔⲆⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃᐃⵠΔΔⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⵠⵠΔⲆⵠⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃᐃΔΔⲆᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "pizza wa",
                name: "Stars in the eyes"
            }, {
                id: 220,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔΔⲆⲆⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃᐃΔΔⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⵠᐃᐃΔⲆᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃᐃΔⲆⵠⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Seams"
            }, {
                id: 104,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔⲆΔΔΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔᐃⲆⲆⵠᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠᐃΔᐃᐃⵠᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆⵠⲆΔΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "pizza wa",
                name: "Scared at night"
            }, {
                id: 20,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃᐃⲆⵠⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆΔⲆⲆⲆΔ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⲆᐃᐃⲆⵠΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆᐃⵠⲆⵠᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Vampire"
            }, {
                id: 21,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃⲆΔⵠⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⲆⲆᐃⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⲆⵠⵠΔⲆᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ΔΔΔⲆᐃΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Zombie"
            }, {
                id: 22,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃΔⲆⲆⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃⵠⲆΔᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⲆᐃᐃΔⵠⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⲆⲆᐃⵠⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Pixelbitie",
                name: "Devaster"
            }, {
                id: 116,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔᐃⲆⲆⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔᐃᐃⲆΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⲆⵠᐃⵠⵠᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ΔᐃⲆⲆΔΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Fukss",
                name: "Dead Devaster"
            }, {
                id: 27,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆⵠΔⵠΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⵠᐃΔᐃⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⲆⵠΔⵠᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆᐃⵠⲆΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Winter",
                name: "Cactus"
            }, {
                id: 28,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃΔΔΔΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃᐃᐃⲆΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⲆⵠΔⵠΔΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆⵠᐃΔᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "pizza wa",
                name: "Bee"
            }, {
                id: 49,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔⵠΔⵠⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠΔⲆᐃΔⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⲆⲆⵠΔⵠⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆᐃΔⲆᐃⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Taco4Life",
                name: "Camo Skin"
            }, {
                id: 58,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆΔΔⵠᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃⲆᐃᐃᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆᐃΔΔⵠⲆⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⲆⵠᐃⵠⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Blue Limax Skin"
            }, {
                id: 59,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔΔⵠΔⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔΔⲆⲆⲆⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃΔⵠΔᐃΔⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠᐃⲆⵠΔᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Red Limax Skin"
            }, {
                id: 94,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔᐃⲆᐃΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆⲆⵠΔΔⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆΔⲆΔΔⲆΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⵠᐃⲆⵠⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Taco4Life",
                name: "Mr. Pumpkin"
            }, {
                id: 109,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⲆⵠᐃᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⵠΔᐃΔⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃΔᐃⲆⲆΔⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃᐃⵠⲆΔⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "pizza wa",
                name: "Wood"
            }, {
                id: 114,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃΔⵠⵠᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠΔΔᐃⵠΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆᐃⲆᐃΔⲆⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⵠⲆᐃΔⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "pizza wa",
                name: "Zebra"
            }, {
                id: 120,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔᐃⵠⲆⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃΔΔⵠⵠᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⲆⲆⲆⵠⲆⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠΔΔᐃⲆⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "CrysTal",
                name: "Tiger"
            }, {
                id: 134,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔᐃᐃΔᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⵠⲆΔΔᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆΔΔⵠΔⲆⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⵠΔⲆΔⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Franchestcreator",
                name: "Day or Night"
            }, {
                id: 135,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔⵠᐃⵠᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠᐃⵠⲆΔᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⵠⲆᐃΔⲆᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆΔᐃᐃⲆⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Poinet",
                name: "Square Starver"
            }, {
                id: 136,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠΔⲆᐃⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⲆΔⵠⵠᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⵠⲆⵠᐃⲆΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆΔᐃⲆᐃΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Voodoo Doll"
            }, {
                id: 137,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠⵠΔΔⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⲆⲆⵠᐃⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⵠᐃⲆΔⲆᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃΔᐃΔⵠΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Frankenstein"
            }, {
                id: 138,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆᐃΔᐃᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⵠᐃᐃⵠᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆᐃᐃⵠⲆⲆⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃᐃᐃᐃⲆΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Old Mummy"
            }, {
                id: 139,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠΔⲆΔᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆΔⲆΔⲆΔ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃᐃⲆⵠᐃⵠⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⲆΔΔⵠⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Werewolf"
            }, {
                id: 140,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⵠᐃⲆΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔᐃᐃΔᐃⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆΔⲆⵠᐃΔⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⲆᐃᐃᐃᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Old Cthulhu"
            }, {
                id: 141,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⵠⲆⵠᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆᐃᐃⵠⲆⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠⲆⲆᐃΔⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃΔⵠⲆᐃⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Sea Man"
            }, {
                id: 142,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠⲆⵠΔⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠΔⵠⵠΔⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃᐃⵠΔΔⲆΔ,
                ΔⲆΔⲆ: ᐃⵠ.ΔᐃΔΔⵠΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Old Pumpkin"
            }, {
                id: 148,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⵠᐃⵠⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠᐃⲆΔᐃⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆΔΔⲆⵠⵠΔ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⵠⵠᐃᐃᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Old Snowman"
            }, {
                id: 149,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠⵠᐃᐃᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⵠΔᐃᐃⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⵠⲆᐃⲆⲆΔ,
                ΔⲆΔⲆ: ᐃⵠ.ΔΔᐃⲆⲆⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Old Christmas Tree Man"
            }, {
                id: 150,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃᐃΔᐃⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⲆᐃΔⵠⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ΔΔⲆΔΔⵠΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠΔΔⵠⲆⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Old Mrs Bell"
            }, {
                id: 151,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆᐃΔⲆΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆΔⵠⵠΔᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⵠᐃⵠⲆΔⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⵠΔⵠΔⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Old Elfy"
            }, {
                id: 152,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃⵠⲆⵠΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃΔⵠΔΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⲆⵠΔⲆᐃΔ,
                ΔⲆΔⲆ: ᐃⵠ.ΔΔⵠᐃⵠᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Old Mr Present"
            }, {
                id: 153,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃΔΔΔⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆΔⵠΔΔᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆΔⲆⵠΔⲆⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⵠᐃᐃᐃΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "My Dear Old Deer"
            }, {
                id: 154,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⵠᐃᐃᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃΔⵠⵠᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⲆᐃⲆΔⵠᐃ,
                ΔⲆΔⲆ: ᐃⵠ.Ⲇⵠᐃᐃⵠⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Mr Angel"
            }, {
                id: 155,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃᐃⲆⲆᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃΔⲆⲆⲆⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⵠⲆᐃⲆΔⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠᐃⲆΔᐃᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Mr Ice Cube"
            }, {
                id: 156,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔᐃᐃⲆᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃⵠⲆᐃⲆⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⲆⲆⲆⲆⵠⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⵠᐃΔΔΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Mr Snowman"
            }, {
                id: 159,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆΔᐃΔⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃᐃⲆᐃⲆⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⲆⵠⵠᐃⵠⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆΔΔΔᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "CrysTal",
                name: "Crystal Sky Skin"
            }, {
                id: 167,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⲆᐃⲆⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⲆᐃᐃⵠΔ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⲆⲆΔⵠⵠⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⲆΔⵠⲆᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Franchestcreator",
                name: "Radioactive Starver"
            }, {
                id: 169,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃᐃⲆⲆΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃᐃᐃⲆⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠᐃⲆΔⵠᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⵠᐃΔⵠⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "TheScaryBlaze",
                name: "Eaten Cookie"
            }, {
                id: 170,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠⵠᐃΔᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃΔⲆⲆΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠⵠᐃΔᐃΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠΔᐃᐃᐃⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "aloner",
                name: "Blob Thing"
            }, {
                id: 172,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃᐃⲆᐃᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔᐃᐃᐃⲆⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃᐃΔΔᐃⵠⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆΔΔⲆⵠᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "aloner",
                name: "Machine Mask"
            }, {
                id: 184,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃⲆⲆᐃⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔᐃᐃⵠⵠΔ,
                ΔⵠᐃΔ: ᐃⵠ.Δⵠᐃⵠⵠⵠᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠΔᐃΔⲆᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Mad"
            }, {
                id: 206,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔⲆΔⲆΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔᐃⲆᐃⵠⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⲆⲆⵠⵠΔᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⵠⲆⲆⲆⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Survivor"
            }, {
                id: 209,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠⲆΔⲆᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃΔᐃⵠⲆⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⲆⲆⵠⵠΔⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ΔᐃΔⲆⵠⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Starverator"
            }, {
                id: 230,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠⲆᐃⲆΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆΔⵠΔΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⲆⲆᐃⵠⵠⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆΔᐃᐃⲆⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Totem"
            }, {
                id: 231,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔⲆⵠΔⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆⵠⲆⲆΔⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠᐃⲆⲆΔᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆΔᐃⵠᐃⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Big Pile of Sand"
            }, {
                id: 232,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠⲆⵠⲆⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆᐃΔᐃⵠΔ,
                ΔⵠᐃΔ: ᐃⵠ.ΔᐃΔⵠΔΔᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⵠⲆⵠⵠΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Big Pile of Dirt"
            }, {
                id: 235,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃΔΔᐃΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠᐃᐃⲆᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ΔΔⵠⵠⲆᐃᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⵠΔⵠⵠⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Sandstone"
            }, {
                id: 29,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⵠΔᐃΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⵠᐃᐃⵠΔ,
                ΔⵠᐃΔ: ᐃⵠ.ΔΔⲆⵠⵠⵠⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆᐃⲆⵠⵠⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Pixelbitie",
                name: "Lollipop 1"
            }, {
                id: 30,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠⲆⵠⲆⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠᐃΔΔΔᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⲆⲆⵠⲆΔⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆΔⵠⲆⲆᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Lollipop 2"
            }, {
                id: 31,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔΔᐃⲆᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆⲆᐃⲆⵠΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠΔⲆⲆⵠΔⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃΔᐃⵠⲆΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Lollipop 3"
            }, {
                id: 32,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆΔⲆΔⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆⲆΔᐃⲆΔ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⲆⲆΔᐃᐃᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃᐃⵠⵠⵠⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Lollipop 4"
            }, {
                id: 33,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔΔⵠⵠⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠᐃⵠᐃΔⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠⵠⵠⵠⲆⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃΔᐃΔΔⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Sushui",
                name: "Yellow Bird"
            }, {
                id: 34,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠⲆⲆᐃⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆΔⲆⲆᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃᐃⲆⲆⲆᐃᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ΔΔᐃᐃᐃⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Sushui",
                name: "Red Bird"
            }, {
                id: 35,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⵠΔⲆᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠᐃᐃΔⲆⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠⵠΔⵠᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃᐃᐃⲆⵠⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Sushui",
                name: "Blue Bird"
            }, {
                id: 37,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠⵠⲆⵠⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⵠⵠΔⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⲆⵠⵠᐃⵠⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠᐃᐃⵠᐃΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Winter",
                name: "Owl"
            }, {
                id: 52,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠⲆⵠⲆΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⲆⲆᐃΔⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆᐃᐃᐃⲆⵠΔ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⲆⲆᐃΔΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Nemo"
            }, {
                id: 53,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆΔΔⲆⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃΔⵠⲆⵠⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠΔΔⵠᐃΔ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⲆΔⵠᐃΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Mr. Bread"
            }, {
                id: 74,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔⲆⲆᐃᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃΔⵠⵠᐃⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠΔᐃΔΔᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⲆⲆΔΔⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Communist & Taco4Life",
                name: "Mr. Bread 2"
            }, {
                id: 75,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃΔⲆⲆΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆᐃΔⵠⲆⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ΔΔⲆⲆᐃᐃⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆⲆⵠⵠΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Communist & Taco4Life",
                name: "Mr. Bread 3"
            }, {
                id: 60,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔⲆᐃⵠΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆΔΔΔΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⲆΔΔⲆⵠᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆΔΔΔΔⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Red Berry"
            }, {
                id: 61,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⵠᐃΔΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⵠᐃⲆᐃⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆΔᐃⵠⵠⵠΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆΔᐃᐃΔⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Old Berry"
            }, {
                id: 70,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔⵠΔⵠᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⵠⲆⲆᐃⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⲆⵠⵠᐃⲆⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⵠⵠΔⲆⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "eogito",
                name: "Cake"
            }, {
                id: 71,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠⲆⵠⵠᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔⵠᐃⲆⵠⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠΔᐃᐃⵠᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⵠᐃΔⲆᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "eogito",
                name: "Christmas Cake"
            }, {
                id: 77,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔΔⲆΔΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⲆΔᐃⲆΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⲆᐃⵠⵠΔᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⵠᐃⵠΔΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Pancakez",
                name: "Mr. Pancake"
            }, {
                id: 87,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆᐃᐃΔⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃⵠⵠⵠΔⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⲆΔΔᐃᐃᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⵠᐃⲆⲆⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Taco4Life",
                name: "Mr. Taco"
            }, {
                id: 78,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃΔΔΔΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⵠⵠΔΔⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⵠⵠΔⲆᐃᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠΔⵠΔⵠΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Taco4Life",
                name: "Mr. Bottle"
            }, {
                id: 79,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃⵠᐃⲆⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆΔΔⵠⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⲆⵠⵠᐃΔΔ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⵠᐃᐃΔᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Taco4Life",
                name: "Mr. Bottle 2"
            }, {
                id: 97,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃΔΔⵠⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⲆⲆⵠⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.Ⲇⵠᐃᐃᐃᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃΔⲆᐃⲆⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "eogito",
                name: "Pink Rabbit"
            }, {
                id: 102,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃΔΔᐃᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆᐃⲆⲆⲆⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠΔΔΔΔᐃⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆⵠⵠⲆΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "pizza wa",
                name: "Marshmallow"
            }, {
                id: 107,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔⲆⲆΔΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆΔⲆᐃΔⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ΔΔⲆⵠⵠΔΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⲆⵠΔⵠᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "eogito",
                name: "Fox"
            }, {
                id: 132,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠⲆⲆᐃⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆⵠᐃⵠᐃⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠΔᐃⲆⲆΔΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⵠᐃⵠΔⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "eogito",
                name: "Raccoon"
            }, {
                id: 111,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃΔⵠⵠⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⵠᐃᐃⵠᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⵠⵠᐃⵠⲆⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃᐃΔⲆⲆⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "pizza wa",
                name: "Cloud"
            }, {
                id: 113,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⲆⵠⲆⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆⲆᐃΔΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⲆⲆΔᐃⲆᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃΔᐃᐃΔⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "pizza wa",
                name: "Moon"
            }, {
                id: 117,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⵠΔⲆΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔⲆᐃⲆⵠᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⵠᐃΔⵠᐃΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆⵠⲆⲆⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "eogito",
                name: "Mr. Panda"
            }, {
                id: 118,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠᐃⲆΔⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆᐃᐃⵠᐃⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠᐃⵠᐃᐃΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠᐃᐃⵠΔᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "eogito",
                name: "Mr. Strawberry"
            }, {
                id: 119,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠⵠΔⵠⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃᐃⵠᐃⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠⲆᐃⵠⵠΔ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⲆᐃΔⲆⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "eogito & Sushuui",
                name: "Mummy"
            }, {
                id: 122,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⵠⵠΔΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃⲆⲆⵠⵠⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠᐃΔΔᐃᐃⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⵠⲆⲆⵠᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Taco4Life",
                name: "Dino"
            }, {
                id: 127,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆΔᐃⵠᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⲆΔⲆⵠⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⵠΔⲆᐃⲆΔ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⵠⲆⵠᐃⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "MADBalgouthi",
                name: "Mr. Koala"
            }, {
                id: 160,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⵠⵠⵠⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆΔⲆⵠⵠⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠΔⵠⵠⵠⲆΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆᐃⲆⵠⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Bottle Protection"
            }, {
                id: 162,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔⵠⲆᐃΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠᐃⲆΔⵠⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠΔⲆᐃⵠⵠᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃΔΔⲆⵠᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "CrysTal",
                name: "Leaf Man"
            }, {
                id: 166,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔⲆⲆᐃⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠΔⵠΔᐃⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ΔΔⵠⵠⵠⵠⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⲆᐃᐃΔⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "pizza wa",
                name: "Bubble"
            }, {
                id: 174,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔΔᐃⵠᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⲆᐃᐃᐃⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⵠΔⲆⵠΔⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃΔⵠⲆⲆⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "upfiz",
                name: "Potato"
            }, {
                id: 171,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃΔΔⵠⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⵠⵠᐃΔⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠΔΔΔⲆⵠΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆⲆⲆᐃᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "aloner",
                name: "Axolotl"
            }, {
                id: 178,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔⵠᐃⲆⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⲆⲆΔᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃᐃᐃⵠᐃΔᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⵠⵠⵠΔΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Rusted Machine"
            }, {
                id: 179,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃⵠⵠΔΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⲆⲆᐃⵠⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⵠⵠΔΔⲆⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠᐃⵠⵠⵠⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Starving Machine"
            }, {
                id: 181,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠᐃⲆᐃΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆᐃΔⵠⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃΔΔⲆΔΔᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ΔᐃΔⵠⵠΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Night Stars"
            }, {
                id: 191,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃΔⵠⲆΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆᐃⵠⲆⵠΔ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⵠΔⵠⵠΔᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⵠᐃΔⵠⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Blue Jay"
            }, {
                id: 198,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃᐃⵠΔᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠᐃⵠᐃᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃΔΔΔⵠΔΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆᐃᐃⲆⲆΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "AWTP",
                name: "Dave"
            }, {
                id: 200,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔᐃᐃΔⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃⵠΔΔⵠᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⲆⲆᐃᐃΔⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⲆⲆΔⵠᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Jinty",
                name: "Smug"
            }, {
                id: 203,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠᐃⵠᐃΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃΔⵠΔⵠᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠΔⲆⲆᐃΔ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃᐃᐃⲆᐃΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Reclaimed"
            }, {
                id: 204,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠᐃⲆᐃⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆᐃⵠᐃⵠⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⲆΔⲆΔⵠⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ΔΔΔᐃⲆΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Legacy Wolf"
            }, {
                id: 211,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆⲆⲆΔΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⵠᐃΔΔᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆᐃⵠⲆⲆᐃᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⲆⵠΔⵠⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Starver of the Seas"
            }, {
                id: 213,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆᐃΔⵠᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠΔⲆⵠᐃⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃᐃᐃⲆΔᐃΔ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⵠⵠⵠᐃⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Ice"
            }, {
                id: 219,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃⲆΔⵠⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠΔᐃᐃᐃⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ΔΔΔΔΔⲆⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃᐃⲆⲆⲆⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Ramil",
                name: "Sandwich Cookie"
            }, {
                id: 221,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠᐃᐃⲆΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔΔⲆΔΔⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⵠⲆᐃᐃⲆⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ΔΔᐃᐃΔᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Purple Geode"
            }, {
                id: 222,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⵠⲆⵠⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆⵠⲆⲆᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆΔⲆΔⵠⵠⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠᐃᐃΔᐃⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Cyan Geode"
            }, {
                id: 223,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⵠⲆⲆᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠᐃΔⲆΔⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⵠⲆⲆᐃᐃᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⵠⲆⲆᐃΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Yellow Geode"
            }, {
                id: 228,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃΔⲆΔⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠⵠΔⵠᐃⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃᐃⵠⵠⲆΔⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⵠᐃⵠᐃᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Furnace Head"
            }, {
                id: 229,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠⲆⵠⲆΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃΔⲆΔᐃⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⲆᐃⲆⲆᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃᐃⵠᐃⲆᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Bag"
            }, {
                id: 227,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠΔᐃᐃⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃΔⵠᐃᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ΔΔⵠᐃⲆΔᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ΔΔⵠⲆⵠⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Lit Furnace Head"
            }, {
                id: 25,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠⲆΔΔΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔΔⲆⲆᐃⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆᐃᐃⲆⲆΔΔ,
                ΔⲆΔⲆ: ᐃⵠ.Δᐃⵠⵠⵠⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Pixelbitie",
                name: "Test Dummy"
            }, {
                id: 41,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆᐃⵠᐃᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠⲆΔⲆᐃⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃᐃᐃᐃᐃᐃΔ,
                ΔⲆΔⲆ: ᐃⵠ.ΔΔΔⲆΔᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "pizza wa",
                name: "Star-ver"
            }, {
                id: 43,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⵠΔΔⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃΔⵠᐃⵠᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⲆⵠⵠΔΔⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆΔⵠΔᐃΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Communist",
                name: "Starver Chest"
            }, {
                id: 88,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠΔⵠᐃΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⲆᐃΔⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ΔᐃⵠⵠⲆⲆΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⵠⲆΔⲆⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Communist",
                name: "Starver Workbench"
            }, {
                id: 121,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔΔΔΔⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆΔΔⲆΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠΔᐃΔΔΔⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ΔᐃᐃⲆⲆⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "MADBalgouthi",
                name: "Fish"
            }, {
                id: 39,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠⲆⲆⵠⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠΔⲆⵠⵠᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠΔⵠⵠⵠΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠΔⵠᐃᐃᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Negligent4Dia",
                name: "Crab"
            }, {
                id: 40,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃΔⵠΔΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⵠΔᐃⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⵠⲆᐃΔᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⵠᐃⲆⲆΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Negligent4Dia",
                name: "Piranha"
            }, {
                id: 36,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆΔΔⵠΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⵠΔᐃⵠΔ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃᐃⵠⵠᐃⵠⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⲆⲆΔΔⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Winter Fox"
            }, {
                id: 69,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠⵠⲆⲆⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆᐃΔΔΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃΔᐃⲆΔⵠⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⵠᐃⵠΔᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Zed",
                name: "Baby Foxy"
            }, {
                id: 51,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔⵠⵠᐃᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠᐃⵠⵠⵠⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⲆⲆⲆᐃᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆᐃⲆⵠΔΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "HOWI",
                name: "Winter Bear"
            }, {
                id: 133,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⲆΔⵠⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆⲆⲆⵠⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃᐃΔⵠᐃⵠΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆⲆΔᐃⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Hawk"
            }, {
                id: 55,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆⵠⲆΔⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⲆⵠⲆΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃᐃⲆᐃⵠᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⵠⵠΔⲆΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Nice Little Yuki"
            }, {
                id: 68,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃᐃᐃⵠΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠᐃⲆⵠⲆⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠᐃᐃⵠⵠΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆᐃᐃⵠⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Taco4Life",
                name: "Baby Yuki"
            }, {
                id: 62,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔⲆⲆⵠⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠΔⵠⵠⲆⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⲆⵠΔⵠΔⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆᐃᐃⵠᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Mr. Carrot"
            }, {
                id: 56,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠΔⵠⲆⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆⲆⵠΔᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⲆᐃⵠΔⲆᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠᐃᐃⲆⵠΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Bat Limax"
            }, {
                id: 72,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠᐃᐃⲆⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⲆᐃⲆᐃΔ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃᐃΔΔᐃΔΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆᐃⵠⲆᐃᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Mr. Crate"
            }, {
                id: 73,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔⵠⲆᐃⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆΔⲆᐃⵠⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⲆΔᐃᐃⵠⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ΔᐃᐃⲆⵠⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Taco4Life & eogito",
                name: "Mr. Spider"
            }, {
                id: 93,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⲆⵠⵠⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆᐃⵠΔᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ΔᐃⵠⲆⲆⵠΔ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⲆⲆⲆⲆᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Anyone want to play?",
                name: "Mr. Spider 2"
            }, {
                id: 82,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⲆΔⲆᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠΔΔⲆΔⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⲆⵠᐃΔⵠⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆᐃⲆΔⲆⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Mr. Blue Starfish"
            }, {
                id: 83,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃⲆⲆᐃᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠᐃᐃⲆΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⲆⲆᐃΔᐃΔ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⵠⵠⲆⵠⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Mr. Orange Starfish"
            }, {
                id: 84,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠᐃⵠᐃⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃΔⲆⵠⲆⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⲆⲆᐃⵠᐃΔ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⲆᐃⲆⲆΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Mr. Pink Starfish"
            }, {
                id: 85,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔΔⵠⵠΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⵠᐃⵠⲆⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⵠⲆⲆⵠᐃⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⵠⵠΔᐃᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Mr. ShellMauve"
            }, {
                id: 86,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃᐃᐃᐃᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃⵠΔΔΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ΔΔΔᐃΔᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⲆⵠⲆᐃᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Mr. Shell Bead"
            }, {
                id: 96,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆΔΔᐃⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃΔⵠᐃΔⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⵠᐃⲆⲆⲆΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⲆⵠᐃΔᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Fukss",
                name: "Angry Crab"
            }, {
                id: 98,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⵠⲆⲆΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.Δⵠᐃᐃᐃᐃⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⲆⵠⲆⵠᐃᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⵠΔⵠΔⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Penguin"
            }, {
                id: 126,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔᐃⵠΔⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃᐃⲆᐃⲆⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ΔΔᐃΔΔᐃⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆᐃⲆΔᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Anyone want to play?",
                name: "Mr. Boar"
            }, {
                id: 145,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔⲆⲆⲆⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠⵠᐃᐃΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠᐃΔⵠⵠᐃᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆⵠⵠΔⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "I saw you"
            }, {
                id: 146,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⵠⲆᐃΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆΔⵠᐃᐃⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠⲆⲆᐃⵠΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠΔⲆⲆᐃⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "It was funny"
            }, {
                id: 147,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔΔΔΔΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆⲆΔⵠΔⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⵠᐃⲆΔΔⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃᐃᐃΔⲆᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "You can scream"
            }, {
                id: 158,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔⵠⲆⵠΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃⲆⵠᐃⲆⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃᐃⲆⲆⲆΔᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠᐃᐃⵠⵠⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Mr. Book"
            }, {
                id: 163,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔᐃⵠΔΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⵠⲆⲆΔⵠ,
                ΔⵠᐃΔ: ᐃⵠ.Δⵠᐃᐃⵠᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⲆΔᐃⵠⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Anyone want to play?",
                name: "Mr. Mammoth"
            }, {
                id: 164,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔⵠⲆⵠⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⲆⵠΔⵠᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⲆⲆⵠᐃⲆᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⲆᐃᐃΔⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "SoOw",
                name: "Mr. Mammoth 2"
            }, {
                id: 161,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆᐃⲆⵠᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆⲆΔⵠᐃΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⲆᐃⵠΔΔΔ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⵠⵠⵠⵠⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Nightmare"
            }, {
                id: 168,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆⲆΔⵠⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠΔⵠⲆⲆⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃΔᐃⲆᐃⵠᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⵠⵠⵠⵠᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "pizza wa",
                name: "Shiny Crystal"
            }, {
                id: 173,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⲆΔⵠΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠᐃⲆⲆᐃΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⲆⲆⵠⲆΔΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆⵠⵠΔΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "pizza wa",
                name: "Water skin"
            }, {
                id: 175,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠⲆⲆᐃⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠⲆⵠⵠⲆⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃᐃⵠᐃᐃᐃⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⲆⲆᐃⵠᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Fall Berry Bush Starver"
            }, {
                id: 176,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃᐃⵠᐃΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⲆᐃᐃⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⵠΔᐃΔⵠⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⵠⲆⵠⲆⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Christmas Berry Bush Starver"
            }, {
                id: 177,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃⵠⵠⵠⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠᐃⵠⵠⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ΔΔΔⲆⵠⵠΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆᐃΔᐃⲆᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Berry Bush Starver"
            }, {
                id: 182,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃΔⲆⲆΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔΔᐃⲆᐃⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃΔⵠᐃⵠⲆΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆΔⵠⵠⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Tamer"
            }, {
                id: 185,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔΔΔΔⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔⲆⵠᐃⲆⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⵠⵠⵠⲆᐃᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⲆⲆΔⵠΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Tamon Wolf"
            }, {
                id: 186,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃⵠⲆᐃⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⲆᐃⵠⲆⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃΔⲆᐃⲆⵠΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆⲆⵠⵠΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Tamon Snow Wolf"
            }, {
                id: 187,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃΔⲆⲆⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆᐃΔᐃⲆⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠⲆᐃⵠᐃⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⲆΔᐃᐃΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Tamon Rabbit"
            }, {
                id: 188,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆᐃⵠΔᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔⵠⵠⲆΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⵠΔᐃⲆⲆⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⵠⲆⵠΔᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Tamon Snow Rabbit"
            }, {
                id: 189,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⵠᐃⲆΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⵠᐃᐃⵠⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⲆᐃⵠⲆᐃᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆΔⲆⵠⵠᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Tamon Bear"
            }, {
                id: 190,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠᐃΔⲆⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃΔΔⵠⲆΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠᐃᐃᐃᐃⵠΔ,
                ΔⲆΔⲆ: ᐃⵠ.ΔᐃᐃⵠΔⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Tamon Polar Bear"
            }, {
                id: 196,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆΔᐃΔᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠΔᐃᐃⵠΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠᐃⲆⲆⲆⲆΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆᐃᐃⵠⲆᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Crying Angel"
            }, {
                id: 202,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⵠⵠᐃⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠᐃⲆⲆᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆΔⵠⲆⲆᐃΔ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⵠΔᐃⲆΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Tamon Fennec"
            }, {
                id: 207,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠⲆΔΔᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔⵠΔⲆΔⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⵠⲆⲆⵠⲆⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆᐃⲆᐃⲆⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Decay"
            }, {
                id: 212,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⲆⲆᐃⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃΔΔⵠⵠⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆᐃᐃΔⵠΔΔ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃᐃⵠΔⵠΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Pillow"
            }, {
                id: 218,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆᐃᐃᐃΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆᐃΔⲆⵠⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃΔΔⲆⵠⲆⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠΔᐃⵠΔⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Exotic"
            }, {
                id: 224,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔᐃᐃΔΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔᐃⵠⲆΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⲆⲆΔⵠΔΔ,
                ΔⲆΔⲆ: ᐃⵠ.ΔᐃᐃᐃΔᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Apple"
            }, {
                id: 225,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⵠΔⲆΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆⲆⵠⲆⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⲆⵠΔΔᐃⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⵠⵠΔⲆΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Golden Apple"
            }, {
                id: 233,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔⲆⲆᐃᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔⲆⵠⵠᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⲆΔⵠΔᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⲆⲆⵠⵠΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Lava Cube"
            }, {
                id: 234,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔⲆⲆᐃⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆⲆⵠⵠⲆΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠᐃᐃΔⲆᐃᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ΔΔΔⲆΔΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Dragon Cube"
            }, {
                id: 42,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆᐃⵠⲆⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠΔⵠΔⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠᐃⲆⵠⲆᐃᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⵠⲆⵠΔᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Winter",
                name: "Will-O'-The-Wisp"
            }, {
                id: 91,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠΔⲆⵠⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔᐃⲆⲆⲆⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⵠⲆⵠⲆⵠⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠΔⵠᐃⵠⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "ExpertyAnimations",
                name: "Flame"
            }, {
                id: 26,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠⲆΔᐃⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆⵠᐃⲆᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆᐃⲆⵠΔᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠΔᐃⲆΔⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Be a Tree"
            }, {
                id: 38,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆᐃᐃⲆⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆΔⲆⲆΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⲆⲆⲆᐃⲆⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⵠⵠⲆᐃⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Winter",
                name: "Toxic Mutant"
            }, {
                id: 50,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠⲆⲆᐃᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⲆΔΔⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ΔΔⵠⵠⲆΔΔ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⲆΔΔᐃⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Communist",
                name: "Mr. Tomato"
            }, {
                id: 54,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃΔⵠⲆⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆⵠⲆᐃⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⲆΔⲆⵠⲆⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⲆΔΔΔⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Mr. Mauve, the Lapa"
            }, {
                id: 57,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔᐃⲆⲆᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠⵠⵠⵠⲆΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆΔᐃΔΔᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆΔΔᐃΔⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Golden Fish"
            }, {
                id: 64,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⲆΔⵠⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠᐃⵠⵠⲆⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⲆⲆΔᐃΔⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠΔᐃⵠⲆⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "LapaMauve"
            }, {
                id: 65,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠⵠᐃΔⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⵠⵠⲆΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⵠΔᐃⲆⲆⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠᐃΔⲆᐃΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "LapaMauve "
            }, {
                id: 92,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠΔΔⵠⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⲆⲆᐃⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠΔᐃᐃⵠᐃᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⲆΔⲆᐃΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Mr. Burger"
            }, {
                id: 66,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⲆΔⵠⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔᐃⲆⵠⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃᐃᐃⲆΔΔᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆⲆᐃⵠᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "pizza wa",
                name: "Tropical Starver"
            }, {
                id: 80,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠΔΔΔⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆΔⵠΔⵠⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⲆΔⵠⲆⲆⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⵠΔⲆⵠᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Mr. ShellPink"
            }, {
                id: 81,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠⲆΔⵠⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃΔΔⵠᐃΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⵠⵠⵠⵠⵠΔ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⲆⲆⲆᐃⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Mr. OranShell"
            }, {
                id: 99,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔⵠᐃΔᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⵠⵠΔᐃΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠᐃⲆⲆΔᐃⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⲆΔΔᐃⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "eogito",
                name: "Pepe"
            }, {
                id: 100,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃΔᐃᐃⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔⲆⲆΔᐃΔ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⵠⵠⵠΔΔⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠΔᐃⲆᐃⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "fatant",
                name: "Mr. Ant"
            }, {
                id: 115,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆΔᐃᐃⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃΔΔᐃΔⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃΔⲆⲆᐃΔⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆᐃᐃΔⵠⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "MADBalgouthi",
                name: "Mr. Watermelon"
            }, {
                id: 101,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃᐃΔᐃⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃᐃⲆⲆΔⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠΔΔⲆⲆⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆᐃⵠᐃⵠΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Taco4Life",
                name: "Mr. Thornbush"
            }, {
                id: 131,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⵠΔᐃΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃᐃⲆΔΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⵠⵠᐃᐃᐃᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⵠΔⲆⵠΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Taco4Life",
                name: "Cthulhu"
            }, {
                id: 143,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔᐃⲆⲆΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔᐃᐃⵠΔⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⵠΔⵠⵠⲆΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆⲆⲆⲆⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "eogito",
                name: "Mr. Cactus"
            }, {
                id: 144,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔᐃⵠⵠᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃΔⵠⵠᐃΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠΔⲆⵠᐃⵠᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃΔΔⲆⵠΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Momo"
            }, {
                id: 180,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔΔΔΔᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⵠⵠΔⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠⵠⵠⵠⲆⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⲆᐃⵠΔⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Scream"
            }, {
                id: 193,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔᐃᐃⵠⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃᐃⲆⵠⵠⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠᐃⲆΔΔΔⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠᐃⲆᐃⲆⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Tamon Dragon"
            }, {
                id: 195,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃⲆⲆⵠΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⵠΔⲆⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⲆⵠⲆⵠᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⲆⵠⵠΔⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Forest Spirit"
            }, {
                id: 197,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⲆΔᐃᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃΔᐃⵠⵠⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ΔᐃᐃᐃⵠⵠⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⲆⵠⲆΔⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Evil Goat"
            }, {
                id: 199,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔⵠΔⵠⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠⵠᐃΔᐃⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⲆᐃⵠⵠⲆᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⲆⲆᐃⲆᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Rotten"
            }, {
                id: 201,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔᐃΔΔⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠᐃΔⵠⲆⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠᐃΔΔΔⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⲆΔΔⵠⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Fossil"
            }, {
                id: 205,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆᐃΔⵠᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⵠᐃⲆⲆⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠᐃⵠᐃⲆΔᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⵠᐃⲆⲆΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Tamon Spectrum"
            }, {
                id: 210,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆⵠⵠⵠᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⵠⵠⲆⵠⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃΔᐃΔⵠΔᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆΔⵠΔⵠⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Helpy",
                name: "Black Cat"
            }, {
                id: 214,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆᐃᐃΔⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠⲆⲆⵠⵠΔ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃᐃΔᐃⲆΔⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ΔᐃⵠᐃⵠⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Tamon Lynx"
            }, {
                id: 215,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆᐃΔᐃⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃΔⲆΔⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆΔⲆⲆᐃⲆⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⲆⵠⵠΔⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Tamon Warg"
            }, {
                id: 217,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔⵠⲆⵠΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔᐃⵠⵠⵠΔ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠᐃⵠᐃⵠᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⲆᐃⲆⲆⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Tamon Menhir"
            }, {
                id: 95,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠᐃⲆⵠⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⵠⲆΔⵠᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃᐃⵠᐃⲆⲆᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⲆΔⲆᐃⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Taco4Life",
                name: "Mr. Garlic"
            }, {
                id: 76,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⵠᐃⵠⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃⵠΔⲆΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆΔᐃΔᐃΔᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⵠΔⵠᐃᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Winter",
                name: "Robot Dragon"
            }, {
                id: 44,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃΔⲆᐃᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃΔⲆΔⵠⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ΔΔⲆᐃΔᐃᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⲆⲆⵠᐃⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Winter",
                name: "Lava Dragon Version 1"
            }, {
                id: 90,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔⵠᐃᐃᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⵠⵠΔᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆΔΔⲆⵠᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠᐃᐃΔⲆⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "ExpertyAnimations",
                name: "Lava Dragon Version 2"
            }, {
                id: 124,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆΔΔΔΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆⵠᐃⵠΔⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⲆⲆΔᐃⲆΔ,
                ΔⲆΔⲆ: ᐃⵠ.ΔΔⲆⲆⵠⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Lava Dragon Version 3"
            }, {
                id: 45,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠⲆᐃΔᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠΔⵠⲆⵠᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⲆⵠΔΔⲆⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⵠᐃⵠⲆᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Sushui",
                name: "Ice Dragon Version 1"
            }, {
                id: 46,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃᐃⵠᐃᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆⲆⵠΔᐃⲆ,
                ΔⵠᐃΔ: ᐃⵠ.Δᐃⵠⵠⵠᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⵠᐃᐃⲆᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Winter",
                name: "Ice Dragon Version 2"
            }, {
                id: 108,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠᐃⲆΔᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃΔᐃⵠⵠⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⲆᐃΔⲆΔΔ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⵠᐃⲆΔΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Ice Dragon Version 3"
            }, {
                id: 123,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⵠⲆⵠΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃᐃⲆⵠᐃΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⵠⲆⲆΔΔᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠΔΔᐃⵠΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Baby Dragon Version 1"
            }, {
                id: 128,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠᐃᐃⵠⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠΔΔⲆΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠᐃⵠⵠⲆᐃᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠᐃⵠᐃᐃⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "MADBalgouthi",
                name: "Baby Dragon Version 2"
            }, {
                id: 125,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃᐃᐃⲆⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆⵠⲆᐃΔᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⲆⲆᐃⵠΔⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⲆᐃⲆⲆΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Baby Lava"
            }, {
                id: 47,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔⵠⵠⲆⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆᐃΔΔΔⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆⲆᐃΔⲆⲆⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⵠⵠⲆⵠⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Taco4Life",
                name: "Kraken"
            }, {
                id: 129,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃᐃᐃⲆⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃᐃΔⵠΔᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⲆⲆᐃΔⲆΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⲆⲆⲆᐃⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Taco4Life",
                name: "Sandworm"
            }, {
                id: 63,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔᐃⵠⲆΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⵠⲆΔⵠⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⲆᐃᐃⲆΔΔ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⵠᐃᐃⲆⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Mr. Golden Bread"
            }, {
                id: 67,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆⵠⲆⲆⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⲆⵠΔⲆⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⲆⲆᐃΔⲆⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⲆⲆⵠΔᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "ForgottenHeroe",
                name: "Starver Ores"
            }, {
                id: 130,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⵠⵠⲆⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⵠΔⵠⲆⲆ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠⵠⲆᐃⲆΔⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⲆᐃΔΔΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Taco4Life",
                name: "Poo"
            }, {
                id: 89,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔᐃⵠΔⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃᐃΔᐃⲆΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⲆᐃΔᐃⵠᐃΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⲆⵠⲆⵠⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Poinet",
                name: "Volcano Starver"
            }, {
                id: 112,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔᐃᐃᐃΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠᐃⵠΔᐃΔ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠΔᐃⵠⲆΔΔ,
                ΔⲆΔⲆ: ᐃⵠ.ΔᐃⲆⲆⲆⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Lava Starver"
            }, {
                id: 183,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃᐃΔⵠⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.Δᐃᐃᐃᐃⵠᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⲆⵠᐃᐃⲆᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃΔⲆᐃΔⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Revaster"
            }, {
                id: 192,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⵠᐃΔⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆᐃⵠΔⲆⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⲆⲆᐃᐃⵠⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ΔⲆΔᐃⵠᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Awakened"
            }, {
                id: 194,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆΔΔⲆⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆΔᐃΔΔΔ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⵠⲆΔⲆⵠΔ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠⲆⲆᐃΔⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Tamon Ice Dragon"
            }, {
                id: 236,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠⲆΔⵠᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⲆΔᐃⵠᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⲆᐃⲆΔⲆᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⵠⵠⲆⲆⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Crystal Dragon"
            }, {
                id: 208,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃⲆⲆᐃⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆᐃⵠᐃⲆᐃ,
                ΔⵠᐃΔ: ᐃⵠ.Ⲇᐃⵠᐃᐃᐃᐃ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠᐃⵠⲆΔⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Bone Dragon"
            }, {
                id: 216,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃΔⲆΔⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔᐃⲆΔᐃΔ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠΔⲆΔⲆⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠᐃᐃⵠΔⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Tamon Warg Ghost"
            }, {
                id: 226,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠΔⵠᐃΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠΔⵠᐃᐃⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ΔⵠΔᐃⲆⵠⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠΔⵠⵠⲆⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Cursed"
            }, {
                id: 48,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆᐃΔᐃᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⲆᐃΔᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃⵠΔᐃᐃⵠⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⵠΔⵠⵠΔⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⵠΔᐃⵠᐃⲆ,
                ⲆⲆΔ: "eogito",
                name: "Robot"
            }, {
                id: 110,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆᐃⲆⲆⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆᐃᐃᐃᐃΔ,
                ΔⵠᐃΔ: ᐃⵠ.ᐃΔᐃΔⵠᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ⲆⵠᐃΔⲆⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⵠΔᐃⵠᐃⲆ,
                ⲆⲆΔ: "pizza wa",
                name: "Blue Butterfly"
            }, {
                id: 157,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⵠΔᐃⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⲆⵠⲆᐃᐃ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠᐃᐃⵠⲆᐃⲆ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃᐃⵠΔⵠⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⵠΔᐃⵠᐃⲆ,
                ⲆⲆΔ: "eogito",
                name: "Yrifox"
            }, {
                id: 165,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃⲆΔᐃⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠΔᐃⲆᐃⵠ,
                ΔⵠᐃΔ: ᐃⵠ.ⵠᐃⵠⲆΔᐃⵠ,
                ΔⲆΔⲆ: ᐃⵠ.ᐃⵠⲆⵠⵠᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⵠΔᐃⵠᐃⲆ,
                ⲆⲆΔ: "OmarJr13",
                name: "Blob Skin"
            }],
            ⲆΔΔⲆ: [{
                id: 0,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔΔⲆⵠΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃᐃⵠᐃⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⵠᐃⵠⲆ,
                ⲆⲆΔ: "Starve.io",
                name: "Bag 1"
            }, {
                id: 1,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆⵠΔΔΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠⲆᐃᐃᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⵠᐃⵠⲆ,
                ⲆⲆΔ: "Starve.io",
                name: "Old Bag"
            }, {
                id: 2,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⲆΔⵠⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⲆⲆⲆᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Bag 2"
            }, {
                id: 3,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆⲆⲆⵠΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠⵠⵠΔⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Bag 3"
            }, {
                id: 4,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆⲆΔⲆⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠⲆΔᐃᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Bag 4"
            }, {
                id: 5,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⵠⵠⲆⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠⵠᐃᐃⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Bag 5"
            }, {
                id: 11,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠⵠⵠᐃⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔⵠΔⵠⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Wood Pickaxe Bag"
            }, {
                id: 19,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⲆΔΔΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔᐃᐃᐃⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io ",
                name: "Wood Carrier"
            }, {
                id: 37,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃΔⲆⲆᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⵠΔⵠᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Bag 6"
            }, {
                id: 39,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆᐃᐃⵠⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠΔⲆⲆⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Bag with Wooden Swords"
            }, {
                id: 44,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃᐃᐃᐃᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃΔᐃⲆⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Communist",
                name: "Big Bag"
            }, {
                id: 7,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔΔⲆⲆⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆΔᐃΔᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Communist",
                name: "Bag 6"
            }, {
                id: 8,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔᐃⲆᐃΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔΔΔⵠΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Easter Bag"
            }, {
                id: 9,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃⵠΔᐃᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆⵠᐃᐃᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "pizza wa",
                name: "Star Bag"
            }, {
                id: 10,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠⵠⵠⲆⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⵠΔⵠⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "eogito",
                name: "Winter Bag"
            }, {
                id: 20,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔⲆΔᐃᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠⲆᐃⵠᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io ",
                name: "Stone Carrier"
            }, {
                id: 24,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔΔⵠⲆⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆᐃⵠᐃⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "eogito",
                name: "Stone Pickaxe Bag"
            }, {
                id: 6,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃᐃΔⲆΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠⲆᐃΔΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Communist",
                name: "Bag Camouflage"
            }, {
                id: 38,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆΔⲆΔᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠΔⲆΔΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "eogito",
                name: "Bag with Stone Swords"
            }, {
                id: 54,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠᐃΔⲆᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃΔⵠΔΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "eogito",
                name: "Cow Bag"
            }, {
                id: 59,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃᐃⲆΔⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠΔⲆⵠⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "CrysTal",
                name: "Starver Bag"
            }, {
                id: 62,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⵠⲆᐃΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⵠⲆᐃᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "CrysTal",
                name: "Crystal Sky Bag"
            }, {
                id: 71,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⲆⲆᐃᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆᐃΔΔΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Portable Furnace"
            }, {
                id: 78,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⵠⲆᐃⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⵠⲆΔΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Crate Bag"
            }, {
                id: 13,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔⲆᐃⲆᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃⲆΔΔⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "pizza wa",
                name: "Honey Pot"
            }, {
                id: 21,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔᐃᐃⲆΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃⲆⵠᐃⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io ",
                name: "Gold Carrier"
            }, {
                id: 30,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆⲆⵠᐃⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆᐃⲆᐃⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "eogito",
                name: "Gold Pickaxe Bag"
            }, {
                id: 29,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔᐃⲆⲆⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃᐃⲆΔᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Ariel",
                name: "Mr and Mrs Bakers"
            }, {
                id: 41,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⲆΔⵠⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔᐃᐃⲆⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "eogito",
                name: "Bag with Golden Swords"
            }, {
                id: 47,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⲆⲆΔΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆⵠᐃᐃⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "eogito",
                name: "Explorer Bag"
            }, {
                id: 51,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃᐃΔⵠⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⲆΔΔᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "pizza wa",
                name: "Bamboo Bag"
            }, {
                id: 53,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠΔΔΔΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⵠⵠⲆⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "eogito",
                name: "Mummy Bag"
            }, {
                id: 58,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠⲆⲆΔΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆᐃΔᐃⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "MADBalgouthi",
                name: "Watermelon Bag"
            }, {
                id: 60,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠⲆΔΔⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔΔᐃᐃⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Taco4Life",
                name: "Garlic Bag"
            }, {
                id: 61,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠⲆᐃᐃΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆᐃⵠⵠΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Taco4Life",
                name: "Pumpkin Bag"
            }, {
                id: 64,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⵠⵠΔⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔᐃᐃΔΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "upfiz",
                name: "Oil Barel bag"
            }, {
                id: 67,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔΔⵠⵠΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃΔⵠᐃⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "pizza wa",
                name: "Tree Bag"
            }, {
                id: 70,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆⵠⵠΔⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⵠΔΔᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Lit Portable Furnace"
            }, {
                id: 72,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠΔⵠΔⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆᐃᐃᐃⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Christmas Berry Bush Bag"
            }, {
                id: 73,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠⵠⵠⲆᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⵠΔᐃΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Berry Bush Bag"
            }, {
                id: 74,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃⵠᐃⵠⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆΔΔΔⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Fall Berry Bush Bag"
            }, {
                id: 76,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔΔⵠⲆⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆᐃⲆΔⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Reclaimed Bag"
            }, {
                id: 14,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠⲆᐃⵠⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔⵠⵠᐃⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "a Rabbit in my Bag"
            }, {
                id: 15,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃᐃΔⲆⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆⵠⵠⲆⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Bird's nest"
            }, {
                id: 16,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠΔⲆⵠΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆⵠⲆΔⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "a Fish on your Back"
            }, {
                id: 17,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃΔΔᐃⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠⵠΔⲆⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "a Squirrel in my Bag"
            }, {
                id: 22,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔᐃΔᐃⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃΔΔⵠⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io ",
                name: "Diamond Carrier"
            }, {
                id: 12,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆᐃⵠⵠᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃΔΔⲆⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Resources Bag"
            }, {
                id: 32,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃᐃΔⲆΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃᐃⲆᐃⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Diamond Pickaxe Bag"
            }, {
                id: 40,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆⲆᐃΔΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠⵠᐃΔᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Bag with Diamond Swords"
            }, {
                id: 45,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⲆᐃᐃⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆΔⵠⲆᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "My Cake Bag"
            }, {
                id: 46,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔⲆⵠⲆᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆᐃΔⲆⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "My Christmas Cake Bag"
            }, {
                id: 52,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠⲆᐃᐃΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔᐃΔⲆⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "MADBalgouthi",
                name: "Fish Bag"
            }, {
                id: 65,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠⲆⵠⲆΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆᐃΔⵠⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "pizza wa",
                name: "Cloud Bag"
            }, {
                id: 68,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⲆΔⵠⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔⲆΔΔΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "pizza wa",
                name: "Bee Bag"
            }, {
                id: 77,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔΔⲆⲆⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠᐃΔΔΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Bag and Bedroll"
            }, {
                id: 80,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠΔⲆⲆⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔᐃⲆⵠΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Peasant's Bag"
            }, {
                id: 81,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔᐃⵠⵠΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⲆΔⵠᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Probably Stolen Bag"
            }, {
                id: 48,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠᐃΔⵠᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠΔⲆΔΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "fatant",
                name: "Natural Bag"
            }, {
                id: 23,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆᐃⵠⲆᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃⲆᐃⵠᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io ",
                name: "Amethyst Carrier"
            }, {
                id: 25,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔᐃΔΔᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⵠΔⵠⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "eogito",
                name: "Amethyst Pickaxe Bag"
            }, {
                id: 28,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃⵠΔⲆᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔᐃⵠΔⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Your Baby"
            }, {
                id: 33,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃΔΔᐃΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆΔᐃⵠⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "pizza wa",
                name: "Tropical Bag"
            }, {
                id: 43,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔⲆΔⵠΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔᐃΔⲆⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "eogito",
                name: "Bag with Amethyst Swords"
            }, {
                id: 35,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃᐃⲆΔⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆⵠⲆⲆΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "eogito",
                name: "Ice Bag"
            }, {
                id: 50,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔΔΔΔΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔᐃⵠᐃⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Taco4Life",
                name: "Thornbush Bag"
            }, {
                id: 56,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠΔᐃⵠⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃΔᐃΔⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "eogito",
                name: "Autumn Bag"
            }, {
                id: 57,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔΔᐃΔΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⲆⲆⵠᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Taco4Life",
                name: "Dino Egg Bag"
            }, {
                id: 66,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔⵠᐃⵠⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠⵠΔΔΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "pizza wa",
                name: "Magic Cloud Bag"
            }, {
                id: 69,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔΔⵠΔΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.Δⵠᐃᐃⵠⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "pizza wa",
                name: "Chest Bag"
            }, {
                id: 75,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⵠⵠⲆⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃⵠᐃΔⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Tamon Spectum Bag"
            }, {
                id: 79,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠⲆᐃⲆⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃⲆⲆⵠᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Winter Peasant's Bag"
            }, {
                id: 31,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠᐃΔΔΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⲆⵠⵠⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io ",
                name: "Reidite Carrier"
            }, {
                id: 18,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠᐃⲆⲆⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⲆᐃⲆᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Winter",
                name: "Lava Bag"
            }, {
                id: 49,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠᐃᐃⵠᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠⵠⵠⵠᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Lava Bag 2"
            }, {
                id: 36,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔΔᐃⲆΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠΔⲆⲆⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Dragon Bag"
            }, {
                id: 55,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃⲆⵠΔⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⲆᐃᐃᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Winter Ice Bag"
            }, {
                id: 26,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆᐃⲆⲆᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔᐃⵠⲆᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Reidite Pickaxe Bag"
            }, {
                id: 27,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆⵠᐃⵠᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⲆᐃⵠΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Octopus Bowl"
            }, {
                id: 34,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃⲆΔⲆⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⲆᐃΔΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Taco4Life",
                name: "Cave Bag"
            }, {
                id: 42,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃᐃΔΔⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃΔⲆΔⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Bag with Reidite Swords"
            }, {
                id: 63,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔⵠⵠⵠⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠᐃᐃᐃⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Engineer Bag"
            }],
            ⲆΔΔⲆΔ: [{
                id: 0,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⲆⲆⵠⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆⲆᐃΔⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⵠᐃⵠⲆ,
                ⲆⲆΔ: "eogito",
                name: "Wooden Dead Box"
            }, {
                id: 1,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔΔⵠᐃⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃᐃⵠᐃⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⵠᐃⵠⲆ,
                ⲆⲆΔ: "eogito",
                name: "Hidden item"
            }, {
                id: 2,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔⲆⲆΔⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆⵠⲆᐃΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Wooden Box 1"
            }, {
                id: 3,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔΔΔᐃⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠᐃΔⵠⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Wooden Box 2"
            }, {
                id: 4,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⲆᐃΔⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠⲆⵠᐃⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Wooden Box 3"
            }, {
                id: 5,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⵠⲆⵠΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠⲆΔⲆⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Broken Wooden Box"
            }, {
                id: 6,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠⲆᐃΔⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔΔᐃⵠΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Wooden Box"
            }, {
                id: 7,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠⵠⲆⲆᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃΔⵠΔⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Wooden Battle Box"
            }, {
                id: 8,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠᐃᐃⵠᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠΔⵠⲆⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Wooden Box with a Cross"
            }, {
                id: 9,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠᐃⲆᐃⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔᐃⵠᐃⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Wooden Box with Bubbles"
            }, {
                id: 10,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⲆⵠᐃᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⲆⲆⲆᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Wooden Box with Eyes"
            }, {
                id: 11,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃΔᐃΔⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆⲆΔΔⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Dark Wooden Box"
            }, {
                id: 38,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠⵠⲆᐃᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆⵠⵠⵠᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Weddlz",
                name: "Noob Box"
            }, {
                id: 12,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃΔⵠᐃⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆᐃΔⲆⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "eogito",
                name: "Wooden and Stone Box"
            }, {
                id: 14,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔΔΔᐃᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⵠⲆΔᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "pizza wa",
                name: "Star Box 1"
            }, {
                id: 15,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔⲆΔⵠⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠᐃⵠⲆⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "pizza wa",
                name: "Star Box 2"
            }, {
                id: 27,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⲆᐃⵠⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⲆΔΔⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "eogito",
                name: "Flower Box"
            }, {
                id: 46,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠᐃᐃᐃΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⲆΔΔᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "MADBalgouthi",
                name: "Blue Box"
            }, {
                id: 75,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃΔΔⲆΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠⲆΔᐃⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Night Stars Crate"
            }, {
                id: 19,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃⲆᐃᐃⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃⵠᐃⲆᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Beehive"
            }, {
                id: 13,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆΔⲆΔΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆᐃᐃᐃΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "eogito",
                name: "Wooden and Golden Box"
            }, {
                id: 21,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃΔⲆⲆⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔᐃΔⲆⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Gravestone"
            }, {
                id: 25,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⵠΔⲆᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔΔⵠΔⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Communist",
                name: "Sky Box"
            }, {
                id: 29,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠΔᐃⲆΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆⵠᐃΔⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Winter",
                name: "Golden Box"
            }, {
                id: 34,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⲆⵠⲆᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃⲆᐃᐃⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Communist",
                name: "Water Crate"
            }, {
                id: 35,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⵠΔⵠᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆᐃᐃⲆΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Communist",
                name: "Glass Crate"
            }, {
                id: 70,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⵠⵠⲆⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⲆⲆⲆⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "CrysTal",
                name: "Crystal Sky Box"
            }, {
                id: 74,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔⲆⵠΔᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⲆⵠⲆΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Reclaimed Crate"
            }, {
                id: 77,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆΔⵠⵠⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠΔᐃⲆⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Workplace Accident"
            }, {
                id: 16,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⵠⵠΔⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠΔⵠⲆⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Wooden and Diamond Box"
            }, {
                id: 18,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔΔΔⵠⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆΔΔΔΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Don't Hit Me"
            }, {
                id: 26,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⲆΔⵠⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⵠΔᐃⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Underwater Box"
            }, {
                id: 31,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃⵠⲆⵠᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⵠᐃⵠⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Communist",
                name: "Items Pile"
            }, {
                id: 32,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⲆⲆᐃⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔΔΔᐃⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Cake Box"
            }, {
                id: 33,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃΔᐃᐃΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆⵠΔᐃᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Christmas Cake Box"
            }, {
                id: 36,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆΔᐃᐃⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⲆⵠΔⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Fukss",
                name: "Crab Box"
            }, {
                id: 42,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃⲆⵠᐃⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆⲆⵠᐃΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "MADBalgouthi",
                name: "Fishing Box"
            }, {
                id: 72,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆⵠᐃⲆΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆᐃⵠⲆⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Storage Machine"
            }, {
                id: 22,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃΔⵠⲆⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠᐃⵠⵠⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Let me out of here"
            }, {
                id: 17,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆⵠᐃᐃΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔΔⵠΔΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "eogito",
                name: "Wooden and Amethyst Box"
            }, {
                id: 24,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⵠᐃⲆΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃΔⵠⵠⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Aquarium"
            }, {
                id: 28,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆᐃΔⲆⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆᐃⲆⵠΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "eogito",
                name: "Gift Box"
            }, {
                id: 40,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⲆⵠⲆⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔᐃᐃΔᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "MADBalgouthi",
                name: "Open Watermelon Box"
            }, {
                id: 41,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⵠⲆΔⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔΔΔⵠΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "MADBalgouthi",
                name: "Watermelon Box"
            }, {
                id: 39,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔΔⲆⲆΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠⵠᐃⲆΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Taco4Life",
                name: "Thornbush Box"
            }, {
                id: 43,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔᐃΔᐃᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠΔⲆΔⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "eogito",
                name: "Rabbit in the Box"
            }, {
                id: 47,
                Ⲇⵠⵠ: ᐃⵠ.Δⵠᐃⵠⵠᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠᐃⵠΔᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Taco4Life",
                name: "Garlic Plot"
            }, {
                id: 48,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⵠᐃⲆⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠᐃⲆⵠΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Taco4Life",
                name: "Pumpkin Plot"
            }, {
                id: 78,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠⲆᐃΔⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠΔⲆΔⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Tamon Spectrum Portal"
            }, {
                id: 45,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔⵠᐃᐃⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⲆᐃᐃⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Autumn Box"
            }, {
                id: 44,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔⵠⵠᐃⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⲆⲆᐃⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Winter Box"
            }, {
                id: 20,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆⲆΔΔⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠᐃⵠⲆΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Metal and Reidite Box"
            }, {
                id: 23,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⲆΔᐃΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠΔᐃⵠⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Kraken Box"
            }, {
                id: 30,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔⵠⲆⲆⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠᐃΔᐃᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Winter",
                name: "Lava Box"
            }, {
                id: 37,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔⲆⵠΔⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⲆΔⵠᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Lava Box 2"
            }, {
                id: 49,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆⵠᐃⵠⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆΔᐃⲆΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Rabbit"
            }, {
                id: 50,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔⵠⵠᐃⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠᐃⵠΔⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Wolf"
            }, {
                id: 51,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⲆΔⵠᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃᐃΔᐃⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Spider"
            }, {
                id: 52,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃⲆᐃⲆᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃᐃⵠⵠᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Hawk"
            }, {
                id: 53,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠᐃⲆᐃᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃⲆΔⲆⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Bear"
            }, {
                id: 54,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆⵠᐃⲆΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆΔⵠⲆᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Fox"
            }, {
                id: 55,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠⲆΔᐃΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⵠⵠΔⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Baby Mammoth"
            }, {
                id: 56,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔΔⲆᐃⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆⵠΔⲆΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Mammoth"
            }, {
                id: 57,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⵠΔⵠⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠᐃᐃΔⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Sandworm"
            }, {
                id: 58,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔΔⲆⵠⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃⵠⵠⵠⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Vulture"
            }, {
                id: 59,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⲆΔᐃΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⵠⵠΔᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Kraken"
            }, {
                id: 60,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔⵠⵠⲆΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔᐃΔⵠΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Piranha"
            }, {
                id: 61,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⵠⵠⵠⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃΔⵠⲆⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Baby Dragon"
            }, {
                id: 62,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃᐃᐃΔᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⲆΔΔΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Baby Lava"
            }, {
                id: 63,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⵠⵠⵠΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔΔⲆⲆΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Dragon"
            }, {
                id: 64,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⵠⵠⵠᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⲆⵠΔⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Penguin"
            }, {
                id: 65,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⲆΔⲆⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃⵠΔᐃⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Lava Dragon"
            }, {
                id: 66,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔⵠΔᐃᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆⵠⲆⲆⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Boar"
            }, {
                id: 67,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠⲆⲆᐃΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆⵠⵠⲆΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Fire mob"
            }, {
                id: 68,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃᐃⵠⵠⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠΔᐃᐃⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the Crab"
            }, {
                id: 69,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆᐃⵠΔΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆᐃΔΔᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Box of the King Crab"
            }, {
                id: 71,
                Ⲇⵠⵠ: ᐃⵠ.Ⲇⵠⵠᐃⵠᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⲆᐃᐃⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Dragon Box"
            }, {
                id: 73,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⲆⵠⲆᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔᐃⲆⵠΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Rekt"
            }, {
                id: 76,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃᐃΔⵠⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠΔΔᐃⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Sleeping Tamon Dragon"
            }],
            ΔᐃΔⵠΔ: [{
                id: 0,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆⲆⵠⲆΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃΔⵠⵠⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⵠᐃⵠⲆ,
                ⲆⲆΔ: "Starve.io",
                name: "Book 1"
            }, {
                id: 1,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠⵠΔⵠᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃᐃΔⵠⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Book 2"
            }, {
                id: 2,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠᐃⲆⵠⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⵠⵠᐃⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Book 3"
            }, {
                id: 3,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠΔⲆⵠΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃᐃᐃⲆᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Book 4"
            }, {
                id: 4,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⵠᐃⲆΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃᐃᐃΔⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Damaged Book 1"
            }, {
                id: 18,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔΔᐃⵠⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆⵠⲆΔΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "SeveR",
                name: "Damaged Book 2"
            }, {
                id: 5,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠⲆΔᐃⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃΔΔⲆⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Doctorpus",
                name: "Scroll"
            }, {
                id: 6,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔΔⲆᐃⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔⵠΔⵠᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Doctorpus",
                name: "Clipboard"
            }, {
                id: 7,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔⲆⲆᐃΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃᐃⵠⵠⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "eogito",
                name: "Seed Book"
            }, {
                id: 20,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⲆⵠⵠⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠᐃⵠΔⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Taco4Life",
                name: "Camo Book"
            }, {
                id: 24,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⲆⵠΔⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔΔⲆⵠⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Communist",
                name: "Stone Tablet"
            }, {
                id: 47,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠⵠⲆⲆⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⵠᐃΔΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Reclaimed Book"
            }, {
                id: 10,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃᐃⵠⵠⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⲆᐃᐃⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "pizza wa",
                name: "Star Book"
            }, {
                id: 8,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⲆⲆⲆⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆⵠⲆⲆⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "eogito",
                name: "Gold Book"
            }, {
                id: 15,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⵠᐃⵠⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃΔⵠΔᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Old Mysterious Paper"
            }, {
                id: 17,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⵠⵠⵠⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.Δⵠⵠᐃᐃᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Gold Engraving"
            }, {
                id: 25,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠᐃᐃⵠⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔᐃⵠΔⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "fatant",
                name: "Ant Book"
            }, {
                id: 32,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⵠᐃᐃⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⵠᐃᐃⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "eogito",
                name: "Mummy Book"
            }, {
                id: 37,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠⵠΔⵠⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⲆΔᐃᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Taco4Life",
                name: "Garlic Book"
            }, {
                id: 38,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆⵠⵠᐃΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔΔᐃΔᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Taco4Life",
                name: "Pumpkin Book"
            }, {
                id: 39,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⲆⵠⵠΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃᐃⲆΔᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Christmas Tree Book"
            }, {
                id: 11,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃᐃⵠⲆⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆⲆᐃᐃⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Diamond Book"
            }, {
                id: 9,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃⲆⵠᐃΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆΔⵠΔΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Obscure Book"
            }, {
                id: 16,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠΔⵠⲆᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃⲆⵠⲆᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Rolled Parchment"
            }, {
                id: 22,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔᐃᐃⲆᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠΔΔⲆⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Cake Book"
            }, {
                id: 23,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠᐃᐃⲆΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆΔΔᐃⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Christmas Cake Book"
            }, {
                id: 30,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠᐃΔΔᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃⲆⵠᐃⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "MADBalgouthi",
                name: "Fish Book"
            }, {
                id: 31,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔⵠΔΔⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⵠΔᐃΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "CrysTal",
                name: "Once upon a time"
            }, {
                id: 48,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆᐃⲆᐃᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆⲆΔᐃⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Chrono Clock"
            }, {
                id: 49,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔᐃⵠᐃⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⲆΔⲆⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Recipe Book"
            }, {
                id: 13,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃᐃΔᐃⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃΔⵠⲆΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "eogito",
                name: "Amethyst Book"
            }, {
                id: 28,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃⵠΔΔⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⲆⲆΔΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "eogito",
                name: "Paint Pallet"
            }, {
                id: 29,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆΔᐃΔᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔⵠⵠⲆⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "CrysTal",
                name: "Watermelon Book"
            }, {
                id: 27,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔΔⲆⵠⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆᐃⵠⵠⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Taco4Life",
                name: "Thornbush Book"
            }, {
                id: 35,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠᐃᐃⵠⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠᐃᐃᐃⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Taco4Life",
                name: "Menu"
            }, {
                id: 36,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆⲆᐃⲆᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃⲆΔⵠΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "CrysTal",
                name: "Lover Letter"
            }, {
                id: 40,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠΔΔⵠᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃᐃᐃΔΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Fresh-Baked Cookies"
            }, {
                id: 41,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃΔⲆᐃⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠᐃᐃⲆΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Inside, there is just a book."
            }, {
                id: 45,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆΔⲆΔⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔᐃᐃⵠΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Crafting Machine"
            }, {
                id: 33,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔⵠΔΔⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃⵠᐃᐃⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Winter Book"
            }, {
                id: 34,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔⵠⵠⲆᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠΔᐃΔⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Autumn Book"
            }, {
                id: 14,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠⵠⵠⲆᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆᐃⲆᐃⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Reidite Book"
            }, {
                id: 12,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠⲆᐃᐃⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠⲆᐃⵠΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Winter",
                name: "Lava Book"
            }, {
                id: 26,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠⲆⵠⵠΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⲆᐃᐃΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Lava Book 2"
            }, {
                id: 19,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⵠΔⲆᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⲆⲆΔᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Winter",
                name: "Ocean Mystery"
            }, {
                id: 21,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃᐃΔⲆᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠⲆᐃⵠᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Dragon Book"
            }, {
                id: 42,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⵠᐃΔⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆᐃⵠΔⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Engineer Book"
            }, {
                id: 43,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠᐃⲆⲆᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔᐃΔⵠᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Nightmare Book"
            }, {
                id: 44,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠΔⲆⵠⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔᐃᐃⲆΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "aloner",
                name: "Mystery Book"
            }, {
                id: 46,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠΔΔⵠⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠᐃⵠⵠΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Cursed Book"
            }],
            ᐃᐃⵠⵠⲆ: [{
                id: 0,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃⲆⵠᐃⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃⲆⵠᐃⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⵠᐃⵠⲆ,
                ⲆⲆΔ: "Starve.io",
                name: "Nothing"
            }, {
                id: 2,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠΔΔᐃΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⵠΔⲆⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⵠᐃⵠⲆ,
                ⲆⲆΔ: "Starve.io",
                name: "Pink Cheeks"
            }, {
                id: 3,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠⵠᐃᐃΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠΔᐃΔᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⵠᐃⵠⲆ,
                ⲆⲆΔ: "Starve.io",
                name: "Heart"
            }, {
                id: 1,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃᐃⵠⵠⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠΔᐃᐃⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⵠᐃⵠⲆ,
                ⲆⲆΔ: "Starve.io",
                name: "Bandage 1"
            }, {
                id: 4,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⵠⲆⲆⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆⲆΔⲆᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⵠᐃⵠⲆ,
                ⲆⲆΔ: "Starve.io",
                name: "Flower 1"
            }, {
                id: 5,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆⵠᐃⲆⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆⵠⲆΔⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Bow 1"
            }, {
                id: 6,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠᐃⲆᐃⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃᐃᐃΔᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Bandage 2"
            }, {
                id: 7,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔⲆⵠⵠᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⵠΔΔⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "Starve.io",
                name: "Flower 2"
            }, {
                id: 8,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔᐃⵠᐃⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔΔΔⵠᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Bandage 3"
            }, {
                id: 36,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆⲆⲆⲆⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆⲆⲆⵠⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Foliage"
            }, {
                id: 59,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠᐃⵠⲆⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃΔⲆΔⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "eogito",
                name: "Peaceful"
            }, {
                id: 67,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠᐃᐃΔⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⵠⵠΔⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "pizza wa",
                name: "Sparkles"
            }, {
                id: 68,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔᐃⲆᐃⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠᐃᐃⲆΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "pizza wa",
                name: "Luxury"
            }, {
                id: 69,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔΔΔΔⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⲆΔⲆⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔΔⲆΔ,
                ⲆⲆΔ: "pizza wa",
                name: "Snow Flakes Crown"
            }, {
                id: 17,
                Ⲇⵠⵠ: ᐃⵠ.ΔᐃΔᐃᐃⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠⲆᐃᐃΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Glasses 1"
            }, {
                id: 10,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆΔᐃⵠΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⲆΔⵠΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Bow 2"
            }, {
                id: 11,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⵠⲆⵠⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠⲆⵠⲆᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "pizza wa",
                name: "Little Stars"
            }, {
                id: 12,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃΔᐃΔΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⵠⲆⲆᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "eogito",
                name: "Pirate Eye Patch 1"
            }, {
                id: 44,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⵠΔⲆⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⵠⵠΔᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Taco4Life",
                name: "Pirate Eye Patch 2"
            }, {
                id: 23,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔΔᐃᐃⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆᐃⵠΔᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Clown nose"
            }, {
                id: 16,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃᐃᐃΔⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆⵠⲆⵠⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Eye Patch"
            }, {
                id: 30,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔΔⲆⲆⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠΔΔΔⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "eogito",
                name: "Flower 3"
            }, {
                id: 38,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔⲆⵠΔΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃⵠΔⵠⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Winter",
                name: "False Nose"
            }, {
                id: 74,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⵠⵠΔⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃΔⵠⲆΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Red Cloth"
            }, {
                id: 75,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆΔⵠᐃⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠᐃⲆᐃᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Blue Cloth"
            }, {
                id: 79,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠⲆΔⲆⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆⲆⵠᐃΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Transparent Mask"
            }, {
                id: 89,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⲆⲆΔⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃⲆΔᐃᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Anyone want to play?",
                name: "Starve.io Anime"
            }, {
                id: 94,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃΔΔᐃᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆΔᐃᐃΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Ant",
                name: "Hero Mask"
            }, {
                id: 100,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔΔⲆᐃⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⲆᐃⲆⵠΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "This starver is mad"
            }, {
                id: 104,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⵠⲆⲆΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆⵠΔⵠⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Scars"
            }, {
                id: 106,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠⵠΔⵠΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔⵠΔᐃⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "In Search of Intelligence"
            }, {
                id: 109,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠⵠΔΔⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⲆⵠΔⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Reclaimed Bandage"
            }, {
                id: 111,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠⵠⲆⵠΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆΔᐃΔⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ΔᐃΔⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Unwrap Starver for Gift"
            }, {
                id: 15,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⲆⲆⲆΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔΔⵠΔΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Star Glasses"
            }, {
                id: 21,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔΔᐃΔⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔΔᐃⲆⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Great-aunt's Glasses"
            }, {
                id: 24,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔⵠᐃⵠᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔⲆⵠⵠⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Little Starver"
            }, {
                id: 22,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔᐃⵠᐃΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠΔⲆΔΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Little Glasses"
            }, {
                id: 13,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆΔⲆⵠᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔⵠᐃⲆΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Flower Chain"
            }, {
                id: 29,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆΔⵠⵠᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠᐃᐃΔⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "eogito",
                name: "Horns"
            }, {
                id: 31,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠⲆᐃⲆᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠⲆⵠᐃⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "eogito",
                name: "Golden Flower"
            }, {
                id: 40,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆᐃⵠΔⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃⵠⲆⲆⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "pizza wa",
                name: "Sleeping Mask"
            }, {
                id: 57,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔᐃᐃΔᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔΔᐃⵠⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Taco4Life",
                name: "Fish on your head"
            }, {
                id: 58,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃᐃΔⲆⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆΔⵠᐃⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "eogito",
                name: "Rose"
            }, {
                id: 91,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠΔⵠᐃΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔⲆⲆⲆⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "upfiz",
                name: "Grey Scarf"
            }, {
                id: 92,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⲆΔΔⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⲆᐃᐃᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "upfiz",
                name: "Black Scarf"
            }, {
                id: 93,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠᐃᐃΔⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⲆⲆⲆⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "upfiz",
                name: "Skull Mask"
            }, {
                id: 95,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠⵠⵠᐃⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⲆⲆΔⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Golden Monocle"
            }, {
                id: 96,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆᐃᐃⲆⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔⵠⲆΔⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "A simple instruction"
            }, {
                id: 102,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔⲆᐃⲆⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃᐃᐃⲆᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Garland"
            }, {
                id: 103,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⲆΔᐃᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔⲆⵠⲆⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "The Doormat"
            }, {
                id: 108,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆΔⲆⲆᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔⵠᐃᐃⵠⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Copium Tanks"
            }, {
                id: 117,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠⲆᐃΔΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⲆⵠΔⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Eyelashes"
            }, {
                id: 118,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⵠᐃᐃΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⲆⵠⲆΔΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃⲆΔᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Helmet Prototype"
            }, {
                id: 9,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆΔⵠᐃⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠⵠΔⲆᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Fancy Glasses"
            }, {
                id: 25,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠᐃⲆⵠᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠᐃⵠⲆᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Medecin Mask"
            }, {
                id: 14,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃⵠⵠⵠΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠⵠⲆⵠⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Mr. Mayor"
            }, {
                id: 19,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔᐃⲆΔⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠΔΔΔΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Sunglasses 2"
            }, {
                id: 28,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⵠⲆⵠⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃΔᐃΔΔᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "pizza wa",
                name: "Starfish"
            }, {
                id: 37,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠᐃΔᐃⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⵠⲆᐃᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Berry"
            }, {
                id: 39,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆΔⲆⲆⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠᐃΔᐃⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Flake"
            }, {
                id: 43,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔⵠⵠⵠⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⵠⲆⲆᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Leaf "
            }, {
                id: 61,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔⵠΔᐃᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⵠⲆⲆⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "A sword in your head"
            }, {
                id: 62,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆΔⲆⲆⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠᐃΔΔⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Winter Scarf"
            }, {
                id: 64,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃⲆⲆⵠⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⲆⵠⵠΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Winter Scarf 2"
            }, {
                id: 66,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⲆᐃΔᐃⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⲆᐃⲆⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "eogito",
                name: "Winter Scarf 3"
            }, {
                id: 70,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔⵠΔᐃⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⲆᐃΔⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Mask with animal tracks"
            }, {
                id: 71,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠΔⵠⵠⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⵠΔΔⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Spring Mask"
            }, {
                id: 72,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠΔᐃⵠΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆΔⲆᐃᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Pink Mask"
            }, {
                id: 73,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⵠⵠᐃΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃᐃⵠⲆΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Blue Mask"
            }, {
                id: 76,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠⲆΔⲆⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃΔⲆⲆΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Military Mask"
            }, {
                id: 77,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔᐃΔᐃᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⵠᐃΔⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Orange Mask"
            }, {
                id: 78,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠᐃΔⲆⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃⲆΔΔⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "White and Red Points Mask"
            }, {
                id: 80,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔⵠΔⲆⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃⵠⵠΔᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Stick out your tongue Mask"
            }, {
                id: 81,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⲆΔᐃΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⲆⲆⵠᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Two Teeth Mask"
            }, {
                id: 82,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔⲆᐃᐃΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⵠᐃⲆᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Make-up Mask"
            }, {
                id: 83,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆᐃΔⲆΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃᐃⲆᐃⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Sad Mask"
            }, {
                id: 84,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔΔΔΔΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠΔⵠᐃⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Happy Mask"
            }, {
                id: 90,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠΔⵠⲆᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠᐃΔᐃⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "aloner",
                name: "Blood"
            }, {
                id: 101,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆΔᐃᐃΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆᐃᐃΔⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Axed Plans"
            }, {
                id: 105,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆⵠⵠᐃΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⲆⵠⵠᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Saddle"
            }, {
                id: 113,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠᐃΔΔⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃⲆΔⲆⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "I see"
            }, {
                id: 114,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔᐃⲆᐃΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃⵠⲆⲆⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "I have no body and I must dress"
            }, {
                id: 115,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⵠΔⵠⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⲆΔⵠᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⵠⵠⲆⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Cursed Crown"
            }, {
                id: 27,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔᐃᐃⵠⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆΔⵠΔⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Clown Face"
            }, {
                id: 20,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⲆⵠⲆⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔⲆⲆⲆΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Sunglasses 3"
            }, {
                id: 32,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⵠΔΔⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔⲆⵠⲆΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "eogito",
                name: "Engineer's Glasses"
            }, {
                id: 33,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆΔΔⲆΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⲆᐃᐃⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "eogito",
                name: "Engineer's Monocle"
            }, {
                id: 34,
                Ⲇⵠⵠ: ᐃⵠ.ΔΔΔⵠΔⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃᐃⲆᐃⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Mauve's butt"
            }, {
                id: 41,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃⵠΔᐃⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆΔᐃᐃᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "eogito",
                name: "Lapa Head"
            }, {
                id: 42,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆΔⵠᐃᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃᐃⵠⵠᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "eogito",
                name: "Lapa Head "
            }, {
                id: 85,
                Ⲇⵠⵠ: ᐃⵠ.ΔⲆⲆⲆΔⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠΔⵠᐃΔᐃΔ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Mask and Glasses"
            }, {
                id: 110,
                Ⲇⵠⵠ: ᐃⵠ.ⵠᐃᐃⲆΔΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃᐃᐃⵠᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ᐃΔᐃⵠ,
                ⲆⲆΔ: "Starve.io",
                name: "Tamon Spectrum Pet"
            }, {
                id: 60,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔᐃⲆⲆⵠⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⵠⵠΔⲆⲆⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Jason"
            }, {
                id: 26,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆΔᐃⵠⵠΔ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⵠⲆᐃᐃᐃ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Devil Horns"
            }, {
                id: 18,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆᐃⵠᐃΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔΔΔΔⵠⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Big Boss"
            }, {
                id: 35,
                Ⲇⵠⵠ: ᐃⵠ.ᐃⵠᐃᐃⲆⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃᐃⲆᐃⲆⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Baby Kraken"
            }, {
                id: 63,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔᐃⲆᐃⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⵠᐃⲆΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Deer Antlers"
            }, {
                id: 65,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆⲆⵠⵠⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆⵠΔᐃΔⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Baby Dragon on your head"
            }, {
                id: 86,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔΔⵠⲆᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⵠΔᐃᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Gaz Mask and Glasses"
            }, {
                id: 87,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⲆᐃⵠⲆΔᐃ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⲆᐃᐃⲆⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Pink Gaz Mask and Glasses"
            }, {
                id: 88,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠΔᐃΔⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔᐃⵠᐃΔⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "eogito",
                name: "Engineer Glasses"
            }, {
                id: 97,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠⵠΔⲆΔΔ,
                ᐃᐃⲆ: ᐃⵠ.ⵠᐃᐃΔΔΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Jarred Horns"
            }, {
                id: 98,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆΔⲆΔⲆⵠ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃΔⲆⵠⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Curved Horns"
            }, {
                id: 99,
                Ⲇⵠⵠ: ᐃⵠ.ⵠΔⲆⲆΔᐃΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔᐃᐃΔⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Evil Goat Horns"
            }, {
                id: 107,
                Ⲇⵠⵠ: ᐃⵠ.ΔⵠᐃΔΔⲆᐃ,
                ᐃᐃⲆ: ᐃⵠ.Δⵠⵠⵠⵠᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Decorative Earmuffs"
            }, {
                id: 112,
                Ⲇⵠⵠ: ᐃⵠ.ᐃΔⵠΔⵠⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ΔᐃⵠⲆⲆᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Tamon Dragon Pet"
            }, {
                id: 116,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔᐃⲆⵠΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠⵠⲆⲆᐃⲆ,
                ᐃⵠⵠ: ΔΔⲆ.Δⵠⵠᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "Blanket"
            }, {
                id: 45,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔΔΔⵠᐃⲆ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃΔᐃⲆⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⲆⲆΔᐃᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "More than Level 5",
                level: 5
            }, {
                id: 46,
                Ⲇⵠⵠ: ᐃⵠ.ᐃᐃⲆΔⲆΔⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⲆⲆⵠⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⲆⲆΔᐃᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "More than Level 10",
                level: 10
            }, {
                id: 47,
                Ⲇⵠⵠ: ᐃⵠ.ⲆΔᐃⲆΔΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⵠᐃΔⲆⲆᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⲆⲆΔᐃᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "More than Level 15",
                level: 15
            }, {
                id: 48,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠᐃⵠᐃⵠᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⵠᐃⲆⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⲆⲆΔᐃᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "More than Level 20",
                level: 20
            }, {
                id: 49,
                Ⲇⵠⵠ: ᐃⵠ.ⲆᐃΔᐃⲆⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ΔΔⲆⲆⵠⵠᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⲆⲆΔᐃᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "More than Level 25",
                level: 25
            }, {
                id: 50,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠⵠᐃⵠⲆΔ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆᐃⵠⵠⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⲆⲆΔᐃᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "More than Level 30",
                level: 30
            }, {
                id: 51,
                Ⲇⵠⵠ: ᐃⵠ.ⵠⵠⵠᐃΔⲆⲆ,
                ᐃᐃⲆ: ᐃⵠ.ⲆᐃⵠⲆⵠΔᐃ,
                ᐃⵠⵠ: ΔΔⲆ.ⲆⲆΔᐃᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "More than Level 35",
                level: 35
            }, {
                id: 52,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠΔⵠΔΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⵠⵠⲆⲆΔⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⲆⲆΔᐃᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "More than Level 40",
                level: 40
            }, {
                id: 53,
                Ⲇⵠⵠ: ᐃⵠ.Δⵠᐃⵠᐃᐃᐃ,
                ᐃᐃⲆ: ᐃⵠ.ᐃᐃⵠⲆⵠᐃⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⲆⲆΔᐃᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "More than Level 45",
                level: 45
            }, {
                id: 54,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⲆΔΔᐃⵠⵠ,
                ᐃᐃⲆ: ᐃⵠ.ᐃⲆⲆⵠᐃⵠΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⲆⲆΔᐃᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "More than Level 50",
                level: 50
            }, {
                id: 55,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠΔⲆⵠΔⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆⲆⵠⲆᐃⵠⵠ,
                ᐃⵠⵠ: ΔΔⲆ.ⲆⲆΔᐃᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "More than Level 55",
                level: 55
            }, {
                id: 56,
                Ⲇⵠⵠ: ᐃⵠ.ⲆⵠΔⲆⲆᐃⵠ,
                ᐃᐃⲆ: ᐃⵠ.ⲆΔΔᐃᐃⲆΔ,
                ᐃⵠⵠ: ΔΔⲆ.ⲆⲆΔᐃᐃ,
                ⲆⲆΔ: "Starve.io",
                name: "More than Level 60",
                level: 60
            }]
        };
        Qw.ΔⵠᐃⵠⵠⲆⲆ = ΔΔⲆⵠⵠⵠΔ(ΔΔΔⲆ.ⲆΔᐃⵠᐃ, 21);
        Qw.ᐃᐃᐃⵠⵠⵠᐃ = ΔΔⲆⵠⵠⵠΔ(ΔΔΔⲆ.ⲆΔᐃⵠᐃ, 20);
        ⵠΔ[255] = [];
        ⵠΔ[7] = [];
        ⵠΔ[250] = [];
        ⵠΔ[28] = [];
        ⵠΔ[29] = [];
        ⵠΔ[796] = [];
        for (var a = 0; ΔΔΔⲆ.ⲆΔᐃⵠᐃ.length > a; a++) {
            ⵠΔ[255][a] = [ΔΔΔⲆ.ⲆΔᐃⵠᐃ[a].Ⲇⵠⵠ, ΔΔΔⲆ.ⲆΔᐃⵠᐃ[a].ᐃᐃⲆ];
            ⵠΔ[7][a] = [ΔΔΔⲆ.ⲆΔᐃⵠᐃ[a].ΔⵠᐃΔ, ΔΔΔⲆ.ⲆΔᐃⵠᐃ[a].ΔⲆΔⲆ];
        }
        for (a = 0; a < ΔΔΔⲆ.ΔᐃΔⵠΔ.length; a++) {
            ⵠΔ[28][a] = [ΔΔΔⲆ.ΔᐃΔⵠΔ[a].Ⲇⵠⵠ, ΔΔΔⲆ.ΔᐃΔⵠΔ[a].ᐃᐃⲆ];
        }
        for (a = 0; a < ΔΔΔⲆ.ⲆΔΔⲆΔ.length; a++) {
            ⵠΔ[250][a] = [ΔΔΔⲆ.ⲆΔΔⲆΔ[a].Ⲇⵠⵠ, ΔΔΔⲆ.ⲆΔΔⲆΔ[a].ᐃᐃⲆ];
        }
        for (a = 0; ΔΔΔⲆ.ⲆΔΔⲆ.length > a; a++) {
            ⵠΔ[29][a] = [ΔΔΔⲆ.ⲆΔΔⲆ[a].Ⲇⵠⵠ, ΔΔΔⲆ.ⲆΔΔⲆ[a].ᐃᐃⲆ];
        }
        for (a = 0; a < ΔΔΔⲆ.ᐃᐃⵠⵠⲆ.length; a++) {
            ⵠΔ[796][a] = [ΔΔΔⲆ.ᐃᐃⵠⵠⲆ[a].Ⲇⵠⵠ, ΔΔΔⲆ.ᐃᐃⵠⵠⲆ[a].ᐃᐃⲆ];
        }
    };
    const bd = 10;
    const dd = 1;
    function vd(b, c, d, e, f, g) {
        if (e < g * 2) {
            g = e / 2;
        }
        if (f < g * 2) {
            g = f / 2;
        }
        if (g < 0) {
            g = 0;
        }
        b.beginPath();
        b.moveTo(c + g, d);
        b.arcTo(c + e, d, c + e, d + f, g);
        b.arcTo(c + e, d + f, c, d + f, g);
        b.arcTo(c, d + f, c, d, g);
        b.arcTo(c, d, c + e, d, g);
        b.closePath();
    }
    function cd(a, b, c, d, e) {
        a.beginPath();
        a.lineCap = "round";
        a.arc(b, c, d, 0, e * (Math.PI * 2));
    }
    function md(a, b, c, d) {
        a.beginPath();
        a.arc(b, c, d, 0, Math.PI * 2);
    }
    function pd(b, c, d, e) {
        var f = Math.PI * 2 / c;
        b.beginPath();
        var g = [{
            x: d,
            y: 0
        }];
        var a = [];
        for (var i = 1; i < c; i++) {
            g.push({
                x: Math.sin(i * f) * d,
                y: Math.cos(i * f) * d
            });
            var j = g.length;
            a.push(ⵠᐃⵠ.ⲆⵠΔᐃΔᐃⵠ(g[j - 2], g[j - 1]));
        }
        a.push(ⵠᐃⵠ.ⲆⵠΔᐃΔᐃⵠ(g[g.length - 1], g[0]));
        var k = a[a.length - 1];
        b.moveTo(k.x, k.y);
        for (i = 0; c > i; i++) {
            b.arcTo(g[i].x, g[i].y, a[i].x, a[i].y, e);
        }
        b.closePath();
    }
    function Cd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = Math.sqrt(b.width * b.width + b.height * b.height);
        d2 = e / 2;
        c.width = e;
        c.height = e;
        d.translate(d2, d2);
        d.rotate(a);
        d.drawImage(b, -b.width / 2, -b.height / 2);
        return c;
    }
    const Td = 4;
    function fd(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = Math.floor(b * 28);
        var g = Math.floor(b * 20);
        e.font = g + "px Baloo Paaji";
        var a = b * 8;
        var h = e.measureText(c).width + a * 2;
        d.width = h;
        d.height = f;
        vd(e, 0, 0, h, f, b * 10);
        e.globalAlpha = 0.5;
        ud(e, "#000");
        e.globalAlpha = 1;
        e.textBaseline = "middle";
        e.font = g + "px Baloo Paaji";
        e.beginPath();
        e.fillStyle = "#FFF";
        e.fillText(c, a, f / 2);
        return d;
    }
    function zd(c, e) {
        var f = document.createElement("canvas");
        var i = f.getContext("2d");
        var j = c * 120;
        var k = c * 110;
        var a = j / 2;
        var m = k / 2;
        var n = c * 20;
        var h = c * 112;
        var l = c * 82;
        var g = h / 2;
        var o = l / 2;
        var b = c * 4;
        f.width = j;
        f.height = k;
        i.globalAlpha = 1;
        i.translate(a, m);
        vd(i, -g, -o, h, l, n);
        ud(i, e, e, b);
        return f;
    }
    const yd = 9;
    function wd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 264;
        d.height = a * 246;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 54);
        e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
        e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
        e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
        e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
        e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
        e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
        e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
        e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
        e.closePath();
        ud(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 54);
        e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
        e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
        e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
        e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
        e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
        e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
        e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
        e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
        e.closePath();
        ud(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 102);
        e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
        e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
        e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
        e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
        e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
        e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
        e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
        e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
        e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
        e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
        e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
        e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
        e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
        e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
        e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
        e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
        e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
        e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
        e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
        e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
        e.closePath();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 103);
        e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
        e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
        e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
        e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
        e.closePath();
        ud(e, c[3], c[4], a * 4);
        return d;
    }
    function Pd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 22;
        d.height = a * 22;
        e.globalAlpha = 0.4;
        md(e, a * 11, a * 11, a * 10);
        ud(e, c[0]);
        e.globalAlpha = 0.7;
        md(e, a * 11, a * 11, a * 7);
        ud(e, c[0]);
        e.globalAlpha = 1;
        md(e, a * 11, a * 11, a * 4);
        ud(e, c[0]);
        return d;
    }
    function Ad(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 70;
        d.height = a * 70;
        e.globalAlpha = 0.5;
        md(e, a * 26, a * 26, a * 9);
        ud(e, c[0]);
        md(e, a * 56, a * 36, a * 9);
        ud(e, c[1]);
        md(e, a * 40, a * 50, a * 9);
        ud(e, c[2]);
        e.globalAlpha = 1;
        md(e, a * 26, a * 26, a * 5);
        ud(e, c[0]);
        md(e, a * 56, a * 36, a * 5);
        ud(e, c[1]);
        md(e, a * 40, a * 50, a * 5);
        ud(e, c[2]);
        return d;
    }
    const kd = 256;
    const xd = 5;
    const Jd = 0;
    function Md(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 183, a * 107);
        vd(e, a * -8, a * -70.5, a * 16, a * 141, a * 1);
        e.restore();
        ud(e, c[0]);
        e.save();
        e.translate(a * 69.5, a * 110);
        vd(e, a * -8.5, a * -71, a * 17, a * 143, a * 1);
        e.restore();
        ud(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 181);
        vd(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
        e.restore();
        ud(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 95);
        e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
        e.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
        e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
        e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
        e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
        e.closePath();
        ud(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68, a * 75);
        e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
        e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
        e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
        e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
        e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
        e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
        e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
        e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
        e.closePath();
        ud(e, c[3], c[1], a * 6);
        return d;
    }
    function Bd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 69.5, a * 145);
        vd(e, a * -8.5, a * -63, a * 17, a * 127, a * 1);
        e.restore();
        ud(e, c[0]);
        e.save();
        e.translate(a * 183, a * 145);
        vd(e, a * -8, a * -63, a * 16, a * 126, a * 1);
        e.restore();
        ud(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 62.5);
        e.rotate(6.28);
        vd(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
        e.restore();
        ud(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123.5, a * 118);
        e.rotate(6.24);
        vd(e, a * -85.5, a * -24, a * 169, a * 48, a * 5);
        e.restore();
        ud(e, c[3], c[1], a * 6);
        e.save();
        e.translate(a * 122, a * 177.5);
        e.rotate(6.32);
        vd(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
        e.restore();
        ud(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 157);
        e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
        e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
        e.closePath();
        ud(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 205, a * 175);
        e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
        e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
        e.closePath();
        ud(e, c[1]);
        return d;
    }
    function Dd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 182, a * 120);
        vd(e, a * -8, a * -67, a * 16, a * 134, a * 1);
        e.restore();
        ud(e, c[0]);
        e.save();
        e.translate(a * 68.5, a * 127.5);
        vd(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
        e.restore();
        ud(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 68);
        vd(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
        e.restore();
        ud(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123, a * 179.5);
        vd(e, a * -83, a * -24.5, a * 166, a * 49, a * 4);
        e.restore();
        ud(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123.5, a * 123.5);
        e.rotate(6.24);
        vd(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
        e.restore();
        ud(e, c[3], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 204, a * 112);
        e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
        e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
        e.closePath();
        ud(e, c[1]);
        return d;
    }
    function Id(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 191;
        d.height = a * 153;
        e.globalAlpha = 0.5;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 97.49996948242188, a * 95.12844848632812);
        vd(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        e.restore();
        ud(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 97.49996948242188, a * 95.12844848632812);
        vd(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        e.restore();
        ud(e, c[1], c[2], a * 4);
        e.globalCompositeOperation = "destination-out";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
        e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
        e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
        e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
        e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
        e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
        e.closePath();
        ud(e, c[2], c[3], a * 4);
        e.globalCompositeOperation = "source-over";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
        e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
        e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
        e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
        e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
        e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
        e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
        e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
        e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
        e.closePath();
        ud(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
        e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
        e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
        e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
        e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
        e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
        e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
        e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
        e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
        e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
        e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
        e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
        e.closePath();
        ud(e, c[5], c[6], a * 4);
        md(e, a * 68, a * 111.29513549804688, a * 15);
        ud(e, c[7], c[8], a * 4);
        md(e, a * 123, a * 111.29510498046875, a * 15);
        ud(e, c[7], c[8], a * 4);
        md(e, a * 63, a * 106, a * 5);
        ud(e, c[9]);
        md(e, a * 118, a * 106, a * 5);
        ud(e, c[9]);
        return d;
    }
    function Ed(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 191;
        d.height = a * 153;
        e.globalAlpha = 0.5;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 96.49996948242188, a * 66.79510498046875);
        e.rotate(0);
        vd(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        e.restore();
        ud(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 96.49996948242188, a * 66.79510498046875);
        e.rotate(0);
        vd(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        e.restore();
        ud(e, c[1], c[2], a * 4);
        e.translate(a * 2, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 119, a * 28);
        e.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
        e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
        e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
        e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
        e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
        e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
        e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
        e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
        e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
        e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
        e.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
        e.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
        e.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
        e.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
        e.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
        e.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
        e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
        e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
        e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
        e.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
        e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
        e.closePath();
        ud(e, c[3], c[4], a * 4);
        return d;
    }
    const Sd = 3;
    const Qd = 1;
    function _d(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = (d = c * 125) / 2;
        var a = (r = c * 95) / 2;
        var n = c * 10;
        var o = c * 8;
        var h = c * 112;
        var l = c * 82;
        var g = h / 2;
        var q = l / 2;
        var b = c * 4;
        i.width = d;
        i.height = r;
        j.translate(k - c * 4, a + c * 4);
        j.globalAlpha = e ? 0.5 : 1;
        vd(j, -g, -q, h, l, n);
        ud(j, f[0]);
        j.globalAlpha = 1;
        j.translate(0, -o);
        vd(j, -g, -q, h, l, n);
        ud(j, f[1], f[2], b);
        var d = c * 55;
        var r = c * 45;
        n = 5;
        j.translate(c * -40, c * -30);
        vd(j, 0, 0, d, r, n);
        ud(j, f[3]);
        var t = Ld(c * 0.7, f[3]);
        j.drawImage(t, c * 45, c * -25);
        t = Ld(c * 0.7, f[3]);
        j.drawImage(t, c * 45, c * 15);
        t = Ld(c * 1.2, f[3]);
        j.drawImage(t, c * 28, c * -30);
        d = c * 15;
        r = c * 70;
        n = c * 5;
        j.translate(c * 78, c * -5);
        vd(j, 0, 0, d, r, n);
        ud(j, f[4]);
        d = c * 9;
        r = c * 50;
        n = c * 3;
        j.translate(c * -20, c * 20);
        j.rotate(Math.PI / 5);
        j.globalAlpha = 0.6;
        vd(j, 0, 0, d, r, n);
        ud(j, f[5]);
        j.translate(c * -20, c * 29);
        j.rotate(Math.PI / 5);
        j.globalAlpha = 0.6;
        j.beginPath();
        j.lineJoin = "round";
        j.moveTo(0, 0);
        j.lineTo(0, c * 30);
        j.lineTo(c * 30, c * 30);
        j.closePath();
        ud(j, null, f[5], c * 8);
        return i;
    }
    function Rd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 191;
        c.height = a * 153;
        d.save();
        d.translate(a * 96.49996948242188, a * 66.79510498046875);
        vd(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        d.restore();
        ud(d, b[0], b[0], a * 4);
        d.translate(a * 2, 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 119, a * 28);
        d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
        d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
        d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
        d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
        d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
        d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
        d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
        d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
        d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
        d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
        d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
        d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
        d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
        d.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
        d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
        d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
        d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
        d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
        d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
        d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
        d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
        d.closePath();
        ud(d, b[0], b[0], a * 4);
        d.save();
        d.translate(a * 97.49996948242188, a * 95.12844848632812);
        vd(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        d.restore();
        ud(d, b[0], b[0], a * 4);
        return c;
    }
    function Fd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 40;
        var a = b * 40;
        e.width = g;
        e.height = a;
        var i = g * b / 2;
        var j = b * a / 2;
        var k = b * 15;
        f.save();
        f.translate(i, j);
        f.globalAlpha = 1;
        md(f, 0, 0, k);
        ud(f, d[0]);
        k = b * 5;
        i = b * 2;
        j = b * 1;
        f.translate(i, j);
        f.globalAlpha = 1;
        md(f, 0, 0, k);
        ud(f, d[1]);
        f.restore();
        return e;
    }
    function jd(b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 200;
        c.width = e;
        c.height = f;
        var g = cc(0.35, pq, ["#0e3022", "#0b8052", "#077b49"]);
        d.drawImage(g, 10, 10);
        g = mc(0.9, kg, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 21, 20);
        g = mc(0.9, false, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 38, 28);
        g = mc(0.9, false, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 15, 37);
        g = mc(0.9, pg, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 32, 45);
        return c;
    }
    function Gd(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 185;
        f.height = b * 240;
        g.globalAlpha = 0.5;
        g.translate(0, b * 10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 137);
        g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
        g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
        g.closePath();
        ud(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 181);
        g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
        g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
        g.closePath();
        ud(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 63, b * 208);
        g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
        g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
        g.closePath();
        ud(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 130, b * 170);
        g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
        g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
        g.closePath();
        ud(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 39, b * 140);
        g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
        g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
        g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
        g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
        g.closePath();
        ud(g, d[0]);
        g.globalAlpha = 1;
        g.translate(0, b * -10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 137);
        g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
        g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
        g.closePath();
        ud(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 181);
        g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
        g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
        g.closePath();
        ud(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 63, b * 208);
        g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
        g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
        g.closePath();
        ud(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 130, b * 170);
        g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
        g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
        g.closePath();
        ud(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 39, b * 140);
        g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
        g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
        g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
        g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
        g.closePath();
        ud(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 59, b * 99);
        g.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
        g.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
        g.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
        g.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
        g.closePath();
        ud(g, d[3], d[2], b * 4);
        if (e === 0) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 47, b * 149);
            g.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
            g.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
            g.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
            g.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
            g.closePath();
            ud(g, d[1]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 40, b * 139);
            g.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
            g.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
            g.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
            g.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
            g.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
            g.closePath();
            ud(g, d[3], d[2], b * 4);
        } else {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 41, b * 139);
            g.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
            g.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
            g.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
            g.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
            g.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
            g.closePath();
            ud(g, d[3], d[2], b * 4);
        }
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 90, b * 95);
        g.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
        g.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * 17);
        g.bezierCurveTo(b * 92, b * 5, b * 83, b * 16, b * 78, b * 29);
        g.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
        g.closePath();
        ud(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 90, b * 86);
        g.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
        g.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * 16);
        g.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
        g.closePath();
        ud(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 92, b * 117);
        g.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
        g.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
        g.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
        g.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
        g.closePath();
        ud(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 92, b * 175);
        g.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
        g.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
        g.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
        g.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
        g.closePath();
        ud(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 48, b * 169);
        g.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
        g.closePath();
        ud(g, undefined, d[2], b * 5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 136, b * 171);
        g.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
        g.closePath();
        ud(g, sj, d[2], b * 4);
        md(g, b * 63, b * 180, b * 15.231546211727817);
        ud(g, d[4]);
        md(g, b * 121, b * 181, b * 15.652475842498529);
        ud(g, d[4]);
        md(g, b * 58, b * 175, b * 5.656854249492381);
        ud(g, d[2]);
        md(g, b * 116, b * 175, b * 5.656854249492381);
        ud(g, d[2]);
        return f;
    }
    function Ld(c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var i = c * 100;
        var j = c * 100;
        var a = i / 2;
        var k = j / 2;
        e.width = i;
        e.height = j;
        var m = c * 5;
        var h = c * 28;
        var l = m / 2;
        var g = h / 2;
        f.translate(a, k);
        for (var n = 0; n < 4; n++) {
            vd(f, -l, -g, m, h, c * 2);
            f.rotate(Math.PI / 4);
            ud(f, d);
        }
        f.arc(0, 0, c * 10, 0, Math.PI * 2);
        ud(f, d);
        f.globalCompositeOperation = "destination-out";
        md(f, 0, 0, c * 4);
        f.fill();
        return e;
    }
    function Wd(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 32;
        var a = c * 32;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = c * 5;
        var l = c * 28;
        var g = h / 2;
        var o = l / 2;
        j.translate(c * 0, c * 0);
        j.translate(m, n);
        if (f == 1) {
            md(j, 0, 0, c * 10);
            ud(j, e[2], e[2], c * 3);
            for (var b = 0; b < 4; b++) {
                vd(j, -g, -o, h, l, c * 2);
                j.rotate(Math.PI / 4);
                ud(j, e[2], e[2], c * 4);
            }
        }
        md(j, 0, 0, c * 10);
        ud(j, e[0], e[1], c * 1.5);
        for (b = 0; b < 4; b++) {
            vd(j, -g, -o, h, l, c * 2);
            j.rotate(Math.PI / 4);
            ud(j, e[0], e[1], c * 1.5);
        }
        md(j, 0, 0, c * 10);
        ud(j, e[0]);
        md(j, 0, 0, c * 4);
        ud(j, e[2], e[1], c * 1.5);
        j.globalCompositeOperation = "destination-out";
        md(j, 0, 0, c * 4);
        ud(j, e[0], e[1], c * 2);
        j.globalCompositeOperation = "source-over";
        md(j, 0, 0, c * 4);
        ud(j, er, e[1], c * 2);
        return i;
    }
    const Od = 15156039;
    const Nd = 15156039 .ⵠΔΔⲆᐃⲆⲆ;
    const qd = `const ⲆΔΔΔΔⵠΔᐃΔ = (typeof ⲆⵠᐃᐃΔⲆΔ === "${Nd}") ? 1 : 0; return ⲆΔΔΔΔⵠΔᐃΔ;`;
    function Hd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 185;
        c.height = a * 240;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44, a * 137);
        d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
        d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
        d.closePath();
        ud(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 53, a * 181);
        d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
        d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
        d.closePath();
        ud(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 63, a * 208);
        d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
        d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
        d.closePath();
        ud(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130, a * 170);
        d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
        d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
        d.closePath();
        ud(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 39, a * 140);
        d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
        d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
        d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
        d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
        d.closePath();
        ud(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 90, a * 95);
        d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
        d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
        d.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
        d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
        d.closePath();
        ud(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 90, a * 86);
        d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
        d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
        d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
        d.closePath();
        ud(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 92, a * 117);
        d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
        d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
        d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
        d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
        d.closePath();
        ud(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 92, a * 175);
        d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
        d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
        d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
        d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
        d.closePath();
        ud(d, b[0]);
        return c;
    }
    const Ud = 256;
    const Yd = 15;
    function Kd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 188;
        c.height = a * 190;
        d.globalAlpha = 0.5;
        d.translate(0, a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        ud(d, b[0], b[0], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
        d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
        d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
        d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
        d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
        d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
        d.closePath();
        ud(d, b[0], b[0], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
        d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
        d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
        d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
        d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
        d.closePath();
        ud(d, b[0], b[0], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
        d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
        d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
        d.closePath();
        ud(d, b[0], b[0], a * 2);
        d.globalAlpha = 1;
        d.translate(0, a * -5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        ud(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
        d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
        d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
        d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
        d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
        d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
        d.closePath();
        ud(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        ud(d, undefined, b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
        d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
        d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
        d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
        ud(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
        d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
        d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
        ud(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
        d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
        d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
        d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
        d.closePath();
        ud(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
        d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
        d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
        d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
        d.closePath();
        ud(d, b[3]);
        md(d, a * 77, a * 107, a * 6);
        ud(d, b[2]);
        md(d, a * 110, a * 107, a * 6);
        ud(d, b[2]);
        md(d, a * 75, a * 105, a * 3);
        ud(d, b[4]);
        md(d, a * 108, a * 105, a * 3);
        ud(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
        d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
        d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
        d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
        d.closePath();
        ud(d, b[1]);
        return c;
    }
    function Vd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 55;
        var a = b * 55;
        var h = b * 8;
        e.width = g;
        e.height = a;
        f.translate(b * -65, b * -55 + h);
        f.globalAlpha = 1;
        f.beginPath();
        f.moveTo(b * 95, b * 60);
        f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
        f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
        f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
        f.closePath();
        ud(f, d[0], d[1], 3);
        f.globalAlpha = 1;
        f.beginPath();
        f.moveTo(b * 91, b * 70);
        f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
        f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
        f.closePath();
        ud(f, d[2], d[3], 3);
        return e;
    }
    function Xd(c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var i = c * 85;
        var j = c * 115;
        var a = c * 6;
        e.width = i;
        e.height = j;
        f.translate(c * -130, c * -60 + a);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
        f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
        f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
        f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
        f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
        f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
        f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
        f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
        f.closePath();
        ud(f, d[0]);
        f.translate(0, -a);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
        f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
        f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
        f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
        f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
        f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
        f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
        f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
        f.closePath();
        ud(f, d[1], d[2], 4);
        var k = c * 155;
        var m = c * 133;
        var h = c * 10;
        var l = c * 3;
        var g = k + c * -3;
        var n = m + c * -5;
        f.save();
        f.translate(k, m);
        f.globalAlpha = 1;
        md(f, 0, 0, h);
        ud(f, d[3]);
        f.restore();
        f.save();
        f.translate(g, n);
        f.globalAlpha = 1;
        md(f, 0, 0, l);
        ud(f, d[4]);
        f.restore();
        f.save();
        f.translate(k + c * 27, m);
        f.globalAlpha = 1;
        md(f, 0, 0, h);
        ud(f, d[3]);
        f.restore();
        f.save();
        f.translate(c * 27 + g, n);
        f.globalAlpha = 1;
        md(f, 0, 0, l);
        ud(f, d[4]);
        return e;
    }
    const Zd = 2;
    const $d = 3;
    function Gt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.translate(a * 5, a * 5);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.32);
        pd(e, 7, a * 42.15447781671598, a * 10);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.32);
        pd(e, 7, a * 42.15447781671598, a * 10);
        e.restore();
        ud(e, c[1], c[2], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.28);
        pd(e, 7, a * 30.463092423455635, a * 10);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.28);
        pd(e, 7, a * 30.463092423455635, a * 10);
        e.restore();
        ud(e, c[3], c[4], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        md(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        md(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
        ud(e, c[5], c[6], a * 4);
        return d;
    }
    function Ht(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 202.5, a * 147.5);
        vd(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
        e.restore();
        ud(e, b[0], b[1], a * 12);
        e.save();
        e.translate(a * 202.5, a * 190.5);
        vd(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
        e.restore();
        ud(e, b[2], b[1], a * 12);
        e.save();
        e.save();
        e.translate(a * 202.5, a * 233.5);
        vd(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
        e.restore();
        ud(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 202.5, a * 275);
        vd(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
        e.restore();
        ud(e, b[0], b[1], a * 12);
        e.save();
        e.translate(a * 201, a * 212);
        e.rotate(8.64);
        vd(e, a * -116, a * -22, a * 232, a * 44, a * 10);
        e.restore();
        ud(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 203.5, a * 121.5);
        vd(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
        e.restore();
        ud(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 203.5, a * 299);
        vd(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
        e.restore();
        ud(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 298.5, a * 210);
        vd(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
        e.restore();
        ud(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 108.5, a * 210);
        vd(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
        e.restore();
        ud(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 204, a * 121.5);
        vd(e, a * -92, a * -9.5, a * 184, a * 19, a * 10);
        e.restore();
        ud(e, b[3], b[3], a * 10);
        e.save();
        e.translate(a * 197, a * 299);
        vd(e, a * 85, a * -9, a * -170, a * 18, a * 10);
        e.restore();
        ud(e, b[3], b[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 94, a * 317);
        e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
        e.closePath();
        ud(e, undefined, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279, a * 142);
        e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
        e.closePath();
        ud(e, undefined, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 106);
        e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
        e.closePath();
        ud(e, eq, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 281, a * 282);
        e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
        e.closePath();
        ud(e, Xh, b[1], a * 12);
        if (c == 0) {
            e.scale(2, 2);
            e.translate(a * -7, a * 55);
            e.rotate(-0.5);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 60, a * 47);
            e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
            e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
            e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
            e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
            e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
            e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
            e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
            e.closePath();
            ud(e, b[4], b[4], a * 5);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 68, a * 54);
            e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
            e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
            e.closePath();
            ud(e, b[3]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 50, a * 55);
            e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
            e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
            e.closePath();
            ud(e, b[3]);
        } else if (c == 1) {
            e.scale(0.6, 0.6);
            e.translate(a * 185, a * 165);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 108, a * 56);
            e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
            e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
            e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
            e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
            e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
            e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
            e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
            e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
            e.closePath();
            ud(e, b[4], b[4], a * 20);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 112, a * 72);
            e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
            e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
            e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
            e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
            e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
            e.closePath();
            ud(e, hg, b[0], a * 13);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 132, a * 117);
            e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
            e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
            e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
            ud(e, undefined, b[0], a * 20);
            md(e, a * 142, a * 221, a * 16.1245154965971);
            ud(e, b[0]);
        }
        return d;
    }
    function It(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        pd(e, 7, a * 9.848857801796104, a * 5);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        pd(e, 7, a * 9.848857801796104, a * 5);
        e.restore();
        ud(e, c[8], c[9], a * 4);
        return d;
    }
    function Jt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 52;
        d.height = a * 65;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9.833328247070312, a * 12.078125);
        e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
        e.closePath();
        ud(e, Pg, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 7.8333282470703125, a * 20.078125);
        e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
        e.closePath();
        ud(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.833328247070312, a * 26.078125);
        e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
        e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
        e.closePath();
        ud(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35.83332824707031, a * 8.078125);
        e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
        e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
        e.closePath();
        ud(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25.833328247070312, a * 39.078125);
        e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
        e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
        e.closePath();
        ud(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.83332824707031, a * 23.078125);
        e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
        e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
        e.closePath();
        ud(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.833328247070312, a * 24.078125);
        e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
        e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
        ud(e, kr, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 38.83332824707031, a * 14.078125);
        e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
        ud(e, er, c[1], a * 2);
        return d;
    }
    function Kt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 85, a * 237);
        e.rotate(1.5707963267948966);
        pd(e, 6, a * 54.585977194239184, a * 1);
        e.restore();
        ud(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 178, a * 238);
        e.rotate(1.5707963267948966);
        pd(e, 6, a * 52.53573932334064, a * 1);
        e.restore();
        ud(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 270, a * 239);
        e.rotate(1.5707963267948966);
        pd(e, 6, a * 53.58058329516393, a * 1);
        e.restore();
        ud(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 222, a * 312);
        e.rotate(1.5707963267948966);
        pd(e, 6, a * 52.53573932334064, a * 1);
        e.restore();
        ud(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 317, a * 159);
        e.rotate(1.5707963267948966);
        pd(e, 6, a * 57.63465889766331, a * 1);
        e.restore();
        ud(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 223.5, a * 139.0625);
        e.rotate(1.5707963267948966);
        pd(e, 6, a * 51.66236541235796, a * 1);
        e.restore();
        ud(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 132.5, a * 137.0625);
        e.rotate(1.5707963267948966);
        pd(e, 6, a * 52.009614495783374, a * 1);
        e.restore();
        ud(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 178.5, a * 58.0625);
        e.rotate(1.5707963267948966);
        pd(e, 6, a * 53.16013544000805, a * 1);
        e.restore();
        ud(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 177.5, a * 216.0625);
        e.rotate(1.5707963267948966);
        pd(e, 6, a * 50, a * 1);
        e.restore();
        ud(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 84.5, a * 215.0625);
        e.rotate(1.5707963267948966);
        pd(e, 6, a * 54, a * 1);
        e.restore();
        ud(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 319.5, a * 138.0625);
        e.rotate(1.5707963267948966);
        pd(e, 6, a * 55.08175741568164, a * 1);
        e.restore();
        ud(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 269.5, a * 216.0625);
        e.rotate(1.5707963267948966);
        pd(e, 6, a * 54.589376255824725, a * 1);
        e.restore();
        ud(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 221.5, a * 293.0625);
        e.rotate(0.5235987755982988);
        pd(e, 6, a * 49.49747468305833, a * 1);
        e.restore();
        ud(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 221.5, a * 342.0625);
        e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
        e.closePath();
        ud(e, rh, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 270.0625);
        e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
        e.closePath();
        ud(e, eq, c[2], a * 12);
        e.save();
        e.translate(a * 84.5, a * 215.0625);
        e.rotate(0.5235987755982988);
        pd(e, 6, a * 30, a * 15);
        e.restore();
        ud(e, c[3]);
        e.save();
        e.translate(a * 177.5, a * 215.0625);
        e.rotate(0.5235987755982988);
        pd(e, 6, a * 30, a * 15);
        e.restore();
        ud(e, c[3]);
        e.save();
        e.translate(a * 222.5, a * 294.0625);
        e.rotate(0.5235987755982988);
        pd(e, 6, a * 30, a * 15);
        e.restore();
        ud(e, c[3]);
        e.save();
        e.translate(a * 270.5, a * 216.0625);
        e.rotate(0.5235987755982988);
        pd(e, 6, a * 30, a * 15);
        e.restore();
        ud(e, c[3]);
        e.save();
        e.translate(a * 320.5, a * 134.0625);
        e.rotate(0.5235987755982988);
        pd(e, 6, a * 30, a * 15);
        e.restore();
        ud(e, c[3]);
        e.save();
        e.translate(a * 224.5, a * 138.0625);
        e.rotate(0.5235987755982988);
        pd(e, 6, a * 30, a * 15);
        e.restore();
        ud(e, c[3]);
        e.save();
        e.translate(a * 133.5, a * 137.0625);
        e.rotate(0.5235987755982988);
        pd(e, 6, a * 30, a * 15);
        e.restore();
        ud(e, c[3]);
        e.save();
        e.translate(a * 178.5, a * 56.0625);
        e.rotate(0.5235987755982988);
        pd(e, 6, a * 30, a * 15);
        e.restore();
        ud(e, c[3]);
        return d;
    }
    ;
    function Lt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 101, a * 255);
        e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
        e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
        e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
        e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
        e.closePath();
        ud(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99, a * 258);
        e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
        e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
        e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
        e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
        e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
        e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
        e.closePath();
        ud(e, c[2], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 323);
        e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
        e.closePath();
        ud(e, sj, c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 210);
        e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
        e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
        e.closePath();
        ud(e, c[3], c[4], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 200);
        e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
        e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
        e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
        e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
        e.closePath();
        ud(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 97, a * 204);
        e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
        e.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
        e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
        e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
        e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
        e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
        e.closePath();
        ud(e, c[2], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 260);
        e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
        e.closePath();
        ud(e, lh, c[1], a * 14);
        md(e, a * 161, a * 201, a * 13);
        ud(e, c[5]);
        md(e, a * 216, a * 205, a * 8.06225774829855);
        ud(e, c[5]);
        md(e, a * 216, a * 175, a * 6.708203932499369);
        ud(e, c[5]);
        md(e, a * 271, a * 191, a * 5.0990195135927845);
        ud(e, c[5]);
        md(e, a * 206, a * 180, a * 11.180339887498949);
        ud(e, c[5]);
        return d;
    }
    function Mt(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 238;
        c.height = a * 230;
        d.translate(a * -93, a * -110 + a * 5);
        d.globalAlpha = 0.3;
        md(d, a * 213.5, a * 256.75, a * 75);
        ud(d, b[5]);
        md(d, a * 213.5, a * 175.75, a * 25);
        ud(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.translate(0, -5);
        d.globalAlpha = 1;
        md(d, a * 213.5, a * 256.75, a * 75);
        ud(d, b[3]);
        md(d, a * 213.5, a * 175.75, a * 25);
        ud(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 219.5, a * 158.75);
        d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
        d.closePath();
        d.lineWidth = a * 10;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 210.5, a * 160.75);
        d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
        d.closePath();
        d.lineWidth = a * 10;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 219.5, a * 158.75);
        d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
        d.closePath();
        d.fillStyle = b[0];
        d.fill();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 210.5, a * 160.75);
        d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
        d.closePath();
        d.fillStyle = b[0];
        d.fill();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        md(d, a * 213.5, a * 256.75, a * 70);
        ud(d, b[0]);
        md(d, a * 213.5, a * 175.75, a * 20);
        ud(d, b[0]);
        md(d, a * 222, a * 166, a * 5);
        d.fillStyle = b[2];
        d.fill();
        md(d, a * 205, a * 166, a * 5);
        d.fillStyle = b[2];
        d.fill();
        md(d, a * 206.2, a * 167, a * 2.5);
        d.fillStyle = b[4];
        d.fill();
        md(d, a * 223.2, a * 167, a * 2.5);
        d.fillStyle = b[4];
        d.fill();
        d.save();
        d.translate(a * 213.5, a * 293.75);
        d.rotate(0.76);
        vd(d, a * -22, a * -21, a * 44, a * 42, a * 6);
        d.restore();
        d.fillStyle = b[1];
        d.fill();
        d.save();
        d.translate(a * 212.5, a * 258.25);
        d.rotate(0.8);
        vd(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
        d.restore();
        d.fillStyle = b[1];
        d.fill();
        return c;
    }
    function Nt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85.25, a * 82.953125);
        e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
        e.closePath();
        ud(e, undefined, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111.25, a * 8.953125);
        e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
        e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
        e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111.25, a * 8.953125);
        e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
        e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
        e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
        e.closePath();
        ud(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85.25, a * 82.953125);
        e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
        e.closePath();
        ud(e, undefined, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.25, a * 84.953125);
        e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
        e.closePath();
        ud(e, undefined, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 160.25, a * 114.953125);
        e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
        e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
        e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 160.25, a * 114.953125);
        e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
        e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
        e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
        e.closePath();
        ud(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.25, a * 84.953125);
        e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
        e.closePath();
        ud(e, kr, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.25, a * 83.953125);
        e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
        e.closePath();
        ud(e, undefined, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 13.25, a * 53.953125);
        e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
        e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
        e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 13.25, a * 53.953125);
        e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
        e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
        e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
        e.closePath();
        ud(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.25, a * 83.953125);
        e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
        e.closePath();
        ud(e, fk, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.25, a * 86.953125);
        e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
        e.closePath();
        ud(e, undefined, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.25, a * 159.953125);
        e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
        e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
        e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.25, a * 159.953125);
        e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
        e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
        e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
        e.closePath();
        ud(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.25, a * 86.953125);
        e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
        e.closePath();
        ud(e, undefined, c[6], a * 4);
        return d;
    }
    const Ot = 10;
    function Pt(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 75;
        var a = b * 55;
        e.width = g;
        e.height = a;
        f.translate(b * -30, b * -40);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
        f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
        f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
        f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
        f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
        f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
        f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
        f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
        f.closePath();
        ud(f, d[0]);
        f.beginPath();
        f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
        f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
        f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
        f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
        f.closePath();
        ud(f, d[1]);
        f.beginPath();
        f.moveTo(b * 69, b * 65);
        f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
        f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
        f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
        ud(f, false, d[1], 2);
        f.beginPath();
        f.moveTo(b * 50, b * 48);
        f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
        f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
        f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
        ud(f, d[2]);
        return e;
    }
    function Qt(a) {
        return hc.String.fromCharCode(a);
    }
    const Rt = 1;
    function St(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 195;
        var a = c * 190;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = c * 10;
        var l = c * 35;
        var g = c * 150;
        var o = l / 2;
        var b = g / 2;
        var d = c * 4;
        j.translate(m - c * 5, n - c * 5);
        j.rotate(-Math.PI / 1.25);
        j.globalAlpha = 1;
        vd(j, -o, -b, l, g, h);
        ud(j, f[0], f[1], d);
        j.translate(0, 0);
        j.rotate(Math.PI / 3);
        j.globalAlpha = 1;
        vd(j, -o, -b, l, g, h);
        ud(j, f[0], f[1], d);
        j.translate(0, 5);
        vd(j, -o / 2, -b / 2, l / 2, g / 3, h - 2);
        ud(j, f[1]);
        return i;
    }
    function Ut(c, e, f, i, j) {
        var k = document.createElement("canvas");
        var a = k.getContext("2d");
        var n = c * 70;
        var o = c * 70;
        var h = c * 10;
        var l = c * 5;
        k.width = n;
        k.height = o + l;
        for (var g = 0; g < e.length; g++) {
            var q = e[g];
            a.globalAlpha = q.a;
            var r = q.f(f, false, q.c);
            a.save();
            a.translate(n / 2 + c * q.x, o / 2 + q.y * c);
            a.rotate(q.r);
            a.drawImage(r, -r.width / 2, -r.height / 2);
            a.restore();
        }
        var s = [];
        for (g = 0; g < i.length; g++) {
            var t = document.createElement("canvas");
            var v = t.getContext("2d");
            t.width = n;
            t.height = o + l;
            v.globalAlpha = j / 2;
            if (g == 2) {
                vd(v, 0, l, n, o, h);
            } else {
                vd(v, 0, 0, n, o + l, h);
            }
            ud(v, "#081a19");
            v.globalAlpha = j;
            if (g == 2) {
                vd(v, 0, l, n, o, h);
            } else {
                vd(v, 0, 0, n, o, h);
            }
            ud(v, i[g]);
            v.globalAlpha = 1;
            if (g == 2) {
                v.drawImage(k, 0, l);
            } else {
                v.drawImage(k, 0, 0);
            }
            s.push(Gq(t));
        }
        return s;
    }
    function Vt(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 205;
        var a = b * 205;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 100;
        f.translate(i, j);
        f.globalAlpha = 1;
        md(f, 0, 0, h);
        ud(f, d[0]);
        return e;
    }
    function Wt(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 193;
        var a = c * 198;
        var m = c * 140;
        var n = c * 90;
        i.width = k;
        i.height = a;
        var h = c * 10;
        var l = c * 25;
        var g = c * 180;
        var o = l / 2;
        var b = g / 2;
        var d = c * 4;
        j.translate(c * -25, c * 1);
        j.translate(m, n);
        j.rotate(-Math.PI / 5);
        vd(j, -o, -b, l, g, h);
        ud(j, f[0], f[1], d);
        j.translate(c * -30, c * -25);
        j.rotate(Math.PI / 3);
        vd(j, -o, -b, l, g, h);
        ud(j, f[0], f[1], d);
        j.translate(c * 35, c * 30);
        j.rotate(Math.PI / 3);
        vd(j, -o, -b, l, g, h);
        ud(j, f[0], f[1], d);
        return i;
    }
    function Xt(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 135;
        var a = c * 190;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = c * 10;
        var l = c * 25;
        var g = c * 180;
        var o = l / 2;
        var b = g / 2;
        var d = c * 4;
        j.translate(m, n);
        j.rotate(-Math.PI / 5);
        j.globalAlpha = 1;
        vd(j, -o, -b, l, g, h);
        ud(j, f[0], f[1], d);
        j.translate(0, 0);
        j.rotate(Math.PI / 5);
        j.globalAlpha = 1;
        vd(j, -o, -b, l, g, h);
        ud(j, f[0], f[1], d);
        return i;
    }
    function Yt(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 145;
        var a = b * 145;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 70;
        f.translate(i, j);
        f.globalAlpha = 0.4;
        md(f, 0, 0, h);
        ud(f, d[0]);
        h = b * 50;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        md(f, 0, 0, h);
        ud(f, d[0]);
        h = b * 35;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        md(f, 0, 0, h);
        ud(f, d[1]);
        h = b * 20;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        md(f, 0, 0, h);
        ud(f, d[2]);
        return e;
    }
    const Zt = 15;
    function $t(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 370;
        var a = b * 370;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 180;
        f.globalAlpha = 0.2;
        md(f, i, j, h);
        ud(f, d[0]);
        return e;
    }
    function _t(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 155;
        d.height = a * 127;
        e.globalAlpha = 0.5;
        e.translate(0, a * 8);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.translate(a * 7, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 41);
        e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
        e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
        e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
        e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
        e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
        e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
        e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        ud(e, undefined, c[2], a * 4);
        md(e, a * 18, a * 38, a * 14.866068747318506);
        ud(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 30);
        e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
        e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
        ud(e, c[1], c[2], a * 4);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 74);
        e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
        e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
        e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
        e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
        e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
        e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
        e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
        e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
        e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
        e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
        e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
        e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
        e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
        e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
        e.closePath();
        ud(e, c[6], c[7], a * 6);
        return d;
    }
    const au = 9;
    function bu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 155;
        d.height = a * 127;
        e.globalAlpha = 0.5;
        e.translate(0, a * 8);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.translate(a * 7, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 41);
        e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
        e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
        e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
        e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
        e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
        e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
        e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        ud(e, undefined, c[2], a * 4);
        md(e, a * 18, a * 38, a * 14.866068747318506);
        ud(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 30);
        e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
        e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
        ud(e, c[1], c[2], a * 4);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        ud(e, c[4], c[5], a * 4);
        return d;
    }
    const cu = 0;
    function du(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 220;
        var g = b * 220;
        var a = b * 16;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2);
        e.globalAlpha = 0.5;
        md(e, 0, 0, a);
        ud(e, c[0]);
        e.globalAlpha = 1;
        return d;
    }
    function eu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 100;
        d.height = a * 250;
        e.translate(a * -135, a * -75);
        e.globalAlpha = b ? 0.8 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 178.5, a * 238.03125);
        e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
        e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
        e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
        e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155.5, a * 239.03125);
        e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
        e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
        e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
        e.closePath();
        ud(e, c[0]);
        md(e, a * 160.5, a * 243.03125, a * 7);
        ud(e, c[0]);
        md(e, a * 227.5, a * 242.03125, a * 7);
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.5, a * 253.03125);
        e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
        e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
        e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
        e.closePath();
        ud(e, c[0], c[0], a * 5);
        md(e, a * 194, a * 298, a * 9);
        ud(e, c[0], c[0], a * 5);
        e.globalAlpha = 1;
        e.translate(a * -10, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 178.5, a * 238.03125);
        e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
        e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
        e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
        e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
        e.closePath();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155.5, a * 239.03125);
        e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
        e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
        e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
        e.closePath();
        ud(e, c[1], c[2], a * 5);
        md(e, a * 160.5, a * 243.03125, a * 7);
        ud(e, c[1], c[2], a * 5);
        md(e, a * 227.5, a * 242.03125, a * 7);
        ud(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.5, a * 253.03125);
        e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
        e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
        e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
        e.closePath();
        ud(e, c[1], c[2], a * 7);
        md(e, a * 194, a * 298, a * 9);
        ud(e, c[1], c[2], a * 7);
        return d;
    }
    function fu(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 220;
        var g = b * 220;
        var a = b * 32;
        var h = b * 4;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2 + b * 10);
        e.globalAlpha = 0.5;
        md(e, 0, 0, a);
        ud(e, c[0], c[0]);
        e.translate(0, b * -8);
        e.globalAlpha = 1;
        md(e, 0, 0, a);
        ud(e, c[1], c[2], h);
        return d;
    }
    function gu(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = (o = c * 450) / 2;
        var a = (p = c * 145) / 2;
        var m = c * 10;
        var n = c * 300;
        var h = c * 30;
        var l = n / 2;
        var g = h / 2;
        if (f) {
            var o = c * 145;
            var p = c * 450;
            i.width = o;
            i.height = p;
            j.rotate(Math.PI / 2);
            j.save();
            j.globalAlpha = 0.5;
            vd(j, c * 100, c * -110, n, h, m);
            ud(j, e[0]);
            j.translate(c * 178, c * -98);
            vd(j, -l, -g - c * 6, c * 100, c * 100, m);
            ud(j, e[0]);
            j.translate(c * -50, c * 5);
            vd(j, c * 220, c * -15, c * 90, c * 90, m);
            ud(j, e[0]);
            j.restore();
            j.save();
            j.globalAlpha = 1;
            j.translate(c * 250, c * -63);
            vd(j, -l - c * 20, -g, n, h, m);
            ud(j, e[1], e[2], 4);
            j.translate(c * -70, c * -40);
            vd(j, -l - c * 20, -g, c * 100, c * 100, m);
            ud(j, e[3], e[4], 4);
            j.translate(c * -70, c * 15);
            vd(j, c * 220, c * -22, c * 90, c * 90, m);
            ud(j, e[3], e[4], 4);
            vd(j, c * 230, c * -12, c * 55, c * 55, m);
            ud(j, e[5]);
            j.translate(c * -70, 0);
            vd(j, c * -15, c * -2, c * 60, c * 60, m);
            ud(j, e[5]);
            j.restore();
        } else {
            i.width = o;
            i.height = p;
            j.save();
            j.globalAlpha = 0.5;
            j.translate(k, a + c * 10);
            vd(j, -l, -g, n, h, m);
            ud(j, e[0]);
            j.translate(c * -65, c * -25);
            vd(j, -l, -g - c * 6, c * 100, c * 100, c * 15);
            ud(j, e[0]);
            j.translate(c * -35, c * -5);
            vd(j, c * 220, c * -15, c * 90, c * 90, c * 15);
            ud(j, e[0]);
            j.restore();
            j.save();
            j.globalAlpha = 1;
            j.translate(c * 240, c * 70);
            vd(j, -l, -g, n, h, m);
            ud(j, e[1], e[2], 4);
            j.translate(c * -60, c * -40);
            vd(j, -l - c * 20, -g, c * 100, c * 100, c * 15);
            ud(j, e[3], e[4], 4);
            j.translate(c * -55, c * 10);
            vd(j, c * 220, c * -22, c * 90, c * 90, c * 15);
            ud(j, e[3], e[4], 4);
            vd(j, c * 240, c * -12, c * 55, c * 55, c * 12);
            ud(j, e[5]);
            j.translate(c * 45, c * 0);
            vd(j, c * -145, c * -2, c * 60, c * 60, c * 12);
            ud(j, e[5]);
            j.restore();
        }
        return i;
    }
    function hu(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = Math.max(c.width, b.width);
        var g = Math.max(c.height, b.height);
        d.width = f;
        d.height = g;
        e.drawImage(b, (f - b.width) / 2, (g - b.height) / 2);
        e.drawImage(c, (f - c.width) / 2, (g - c.height) / 2);
        return d;
    }
    function iu(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 105;
        var a = c * 125;
        var m = c * 4;
        var n = c * 10;
        var h = c * 5;
        var l = c * 10;
        var g = c * 110;
        var o = l / 2;
        var b = g / 2;
        i.width = k;
        i.height = a;
        j.save();
        j.globalAlpha = e ? 0.5 : 1;
        j.translate(k / 2 + c * 8, a / 2 + h);
        vd(j, -o, -b, l, g, n);
        ud(j, e ? f[0] : f[1]);
        j.translate(c * -130 + h, c * -128 + h);
        j.beginPath();
        j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
        j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
        j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
        j.closePath();
        ud(j, f[2]);
        j.restore();
        j.translate(k / 2 + 8, a / 2);
        j.globalAlpha = 1;
        vd(j, -o, -b, l, g, n);
        ud(j, f[3], f[4], m);
        j.translate(c * -130, c * -125);
        j.beginPath();
        j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
        j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
        j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
        j.closePath();
        ud(j, f[5], f[6], m);
        return i;
    }
    function ju(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
        e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
        e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
        e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
        e.closePath();
        ud(e, c[0]);
        e.save();
        e.translate(a * 131, a * 425.5);
        e.rotate(0.16);
        vd(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
        e.restore();
        ud(e, c[0]);
        md(e, a * 122, a * 480, a * 18.439088914585774);
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 371);
        e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
        e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
        e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
        e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
        e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
        e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
        e.closePath();
        ud(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 131, a * 425.5);
        e.rotate(0.16);
        vd(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
        e.restore();
        ud(e, c[4], c[5], a * 12.5);
        md(e, a * 122, a * 480, a * 18.439088914585774);
        ud(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 371);
        e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
        e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
        e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
        e.closePath();
        ud(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 345);
        e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
        e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
        e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
        e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
        e.closePath();
        ud(e, c[3]);
        return d;
    }
    function ku(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 424;
        d.height = a * 788;
        e.translate(a * 25, a * 25);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 193.5, a * 602.5);
        e.rotate(-0.12);
        vd(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
        e.restore();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 519);
        e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
        e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
        e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
        e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 119);
        e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
        e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
        e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
        e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 518);
        e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
        e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
        e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
        e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
        e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
        e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
        e.closePath();
        ud(e, c[0]);
        md(e, a * 204, a * 693, a * 36.013886210738214);
        ud(e, c[0]);
        md(e, a * 105, a * 518, a * 30);
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 171, a * 535);
        e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
        e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
        e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 244, a * 669);
        e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
        e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
        e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
        e.closePath();
        ud(e, c[0]);
        e.translate(a * -25, a * -25);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 193.5, a * 602.5);
        e.rotate(-0.12);
        vd(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
        e.restore();
        ud(e, c[1], c[2], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 519);
        e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
        e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
        e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
        e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
        e.closePath();
        ud(e, c[3], c[4], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 119);
        e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
        e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
        e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
        e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
        e.closePath();
        ud(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 518);
        e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
        e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
        e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
        e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
        e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
        e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
        e.closePath();
        ud(e, c[6], c[4], a * 16);
        md(e, a * 204, a * 693, a * 36.013886210738214);
        ud(e, c[6], c[4], a * 16);
        md(e, a * 105, a * 518, a * 30);
        ud(e, c[6], c[4], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 171, a * 535);
        e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
        e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
        e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
        e.closePath();
        ud(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 244, a * 669);
        e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
        e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
        e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
        e.closePath();
        ud(e, c[6]);
        md(e, a * 204, a * 693, a * 17.029386365926403);
        ud(e, c[7]);
        md(e, a * 106, a * 518, a * 12);
        ud(e, c[7]);
        return d;
    }
    function lu(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 283;
        f.height = b * 224;
        g.translate(0, b * 15);
        g.globalAlpha = 0.5;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 93, b * 55);
        g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
        g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
        g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
        g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
        g.closePath();
        ud(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        g.closePath();
        ud(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        ud(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        ud(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        ud(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        ud(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        ud(g, d[0]);
        g.translate(0, b * -15);
        g.globalAlpha = 1;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        ud(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        ud(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        ud(g, ug, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        ud(g, mo, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        ud(g, $q, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        ud(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 93, b * 55);
        g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
        g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
        g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
        g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
        g.closePath();
        ud(g, d[1], d[2], b * 10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        ud(g, undefined, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        ud(g, hj, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        ud(g, undefined, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        ud(g, undefined, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        ud(g, lh, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        ud(g, er, d[1], b * 20);
        md(g, b * 101, b * 155, b * 20.591260281974);
        ud(g, d[3]);
        md(g, b * 180, b * 155, b * 20.591260281974);
        ud(g, d[3]);
        md(g, b * 95, b * 148, b * 7.211102550927978);
        ud(g, d[4]);
        md(g, b * 173, b * 148, b * 7.211102550927978);
        ud(g, d[4]);
        if (e === 1) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 191, b * 107);
            g.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
            g.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
            g.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
            g.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
            g.closePath();
            ud(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 206, b * 98);
            g.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
            g.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
            g.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
            g.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
            g.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
            g.closePath();
            ud(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 172, b * 111);
            g.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
            g.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
            g.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
            g.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
            g.closePath();
            ud(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 202, b * 125);
            g.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
            g.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
            g.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
            g.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
            g.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
            g.closePath();
            ud(g, d[2]);
        }
        return f;
    }
    function mu(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 40;
        var g = b * 40;
        var a = b * 16;
        var h = b * 4;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2);
        e.globalAlpha = 1;
        md(e, 0, 0, a);
        ud(e, c[0], c[1], h);
        return d;
    }
    function nu(b, c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var a = b * 210;
        var k = b * 205;
        var n = b * 30;
        var h = b * 20;
        var l = b * 200;
        var g = b * 180;
        var o = l / 2;
        var d = g / 2;
        i.width = a;
        i.height = k;
        i.width = b * 419;
        i.height = b * 412;
        if (f == 1) {
            j.save();
            j.translate(b * 10, b * 0);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 117.99996948242188, b * 216.40621948242188);
            j.bezierCurveTo(b * 86.99996948242188, b * 221.40621948242188, b * 74.99996948242188, b * 217.40621948242188, b * 60.999969482421875, b * 205.40621948242188);
            ud(j, lh, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 114.99996948242188, b * 227.40621948242188);
            j.bezierCurveTo(b * 90.99996948242188, b * 233.40621948242188, b * 66.99996948242188, b * 228.40621948242188, b * 43.999969482421875, b * 225.40621948242188);
            ud(j, undefined, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 110.99996948242188, b * 236.40621948242188);
            j.bezierCurveTo(b * 94.99996948242188, b * 244.40621948242188, b * 79.99996948242188, b * 249.40621948242188, b * 60.999969482421875, b * 249.40621948242188);
            ud(j, hj, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 111.99996948242188, b * 206.29513549804688);
            j.bezierCurveTo(b * 91.99996948242188, b * 206.29513549804688, b * 87.99996948242188, b * 201.29513549804688, b * 79.99996948242188, b * 192.29513549804688);
            ud(j, undefined, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 109.99996948242188, b * 249.18402099609375);
            j.bezierCurveTo(b * 97.99996948242188, b * 263.18402099609375, b * 85.99996948242188, b * 271.18402099609375, b * 65.99996948242188, b * 277.18402099609375);
            ud(j, undefined, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 105.99996948242188, b * 192.18402099609375);
            j.bezierCurveTo(b * 99.49996948242188, b * 197.68402099609375, b * 99.49996948242188, b * 197.68402099609375, b * 92.99996948242188, b * 203.18402099609375);
            j.bezierCurveTo(b * 95.99996948242188, b * 213.18402099609375, b * 95.99996948242188, b * 215.18402099609375, b * 89.99996948242188, b * 219.18402099609375);
            j.bezierCurveTo(b * 91.99996948242188, b * 223.18402099609375, b * 91.99996948242188, b * 226.18402099609375, b * 87.99996948242188, b * 230.18402099609375);
            j.bezierCurveTo(b * 89.99996948242188, b * 234.18402099609375, b * 91.99996948242188, b * 237.18402099609375, b * 90.99996948242188, b * 244.18402099609375);
            j.bezierCurveTo(b * 96.99996948242188, b * 252.18402099609375, b * 96.99996948242188, b * 256.18402099609375, b * 95.99996948242188, b * 262.18402099609375);
            j.bezierCurveTo(b * 106.49996948242188, b * 264.18402099609375, b * 106.49996948242188, b * 264.18402099609375, b * 116.99996948242188, b * 266.18402099609375);
            ud(j, gj, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 104.99996948242188, b * 183.29513549804688);
            j.bezierCurveTo(b * 99.99996948242188, b * 193.29513549804688, b * 93.99996948242188, b * 195.29513549804688, b * 89.99996948242188, b * 201.29513549804688);
            j.bezierCurveTo(b * 86.99996948242188, b * 212.29513549804688, b * 85.99996948242188, b * 214.29513549804688, b * 81.99996948242188, b * 215.29513549804688);
            j.bezierCurveTo(b * 83.99996948242188, b * 223.29513549804688, b * 83.99996948242188, b * 227.29513549804688, b * 79.99996948242188, b * 230.29513549804688);
            j.bezierCurveTo(b * 83.99996948242188, b * 235.29513549804688, b * 84.99996948242188, b * 240.29513549804688, b * 79.99996948242188, b * 246.29513549804688);
            j.bezierCurveTo(b * 86.99996948242188, b * 251.29513549804688, b * 91.99996948242188, b * 256.2951354980469, b * 89.99996948242188, b * 266.2951354980469);
            j.bezierCurveTo(b * 102.99996948242188, b * 269.2951354980469, b * 102.99996948242188, b * 269.2951354980469, b * 115.99996948242188, b * 272.2951354980469);
            ud(j, Qk, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 107.99996948242188, b * 177.85067749023438);
            j.bezierCurveTo(b * 95.99996948242188, b * 187.35067749023438, b * 95.99996948242188, b * 187.35067749023438, b * 83.99996948242188, b * 196.85067749023438);
            j.bezierCurveTo(b * 82.99996948242188, b * 203.85067749023438, b * 80.99996948242188, b * 209.85067749023438, b * 72.99996948242188, b * 210.85067749023438);
            j.bezierCurveTo(b * 73.99996948242188, b * 220.85067749023438, b * 73.99996948242188, b * 221.85067749023438, b * 66.99996948242188, b * 227.85067749023438);
            j.bezierCurveTo(b * 71.99996948242188, b * 235.85067749023438, b * 73.99996948242188, b * 239.85067749023438, b * 71.99996948242188, b * 247.85067749023438);
            j.bezierCurveTo(b * 80.99996948242188, b * 257.8506774902344, b * 81.99996948242188, b * 263.8506774902344, b * 77.99996948242188, b * 271.8506774902344);
            j.bezierCurveTo(b * 95.49996948242188, b * 272.8506774902344, b * 95.49996948242188, b * 272.8506774902344, b * 112.99996948242188, b * 273.8506774902344);
            ud(j, sj, c[4], b * 3);
            j.restore();
        } else if (f == 2) {
            j.save();
            j.translate(b * 130, b * 35);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 170.99996948242188, b * 133.85067749023438);
            j.bezierCurveTo(b * 195.99996948242188, b * 129.85067749023438, b * 196.99996948242188, b * 111.85067749023438, b * 200.99996948242188, b * 88.85067749023438);
            ud(j, rh, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 169.99996948242188, b * 143.85067749023438);
            j.bezierCurveTo(b * 189.99996948242188, b * 145.85067749023438, b * 207.99996948242188, b * 126.85067749023438, b * 222.99996948242188, b * 100.85067749023438);
            ud(j, undefined, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 170.99996948242188, b * 157.85067749023438);
            j.bezierCurveTo(b * 193.99996948242188, b * 160.85067749023438, b * 210.99996948242188, b * 151.85067749023438, b * 232.99996948242188, b * 139.85067749023438);
            ud(j, undefined, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 169.99996948242188, b * 168.85067749023438);
            j.bezierCurveTo(b * 192.99996948242188, b * 175.85067749023438, b * 203.99996948242188, b * 177.85067749023438, b * 245.99996948242188, b * 168.85067749023438);
            ud(j, undefined, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 167.99996948242188, b * 168.85067749023438);
            j.bezierCurveTo(b * 183.99996948242188, b * 189.85067749023438, b * 191.99996948242188, b * 193.85067749023438, b * 220.99996948242188, b * 196.85067749023438);
            ud(j, undefined, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 176.99996948242188, b * 117.85067749023438);
            j.bezierCurveTo(b * 181.99996948242188, b * 120.85067749023438, b * 181.99996948242188, b * 120.85067749023438, b * 186.99996948242188, b * 123.85067749023438);
            j.bezierCurveTo(b * 183.99996948242188, b * 137.85067749023438, b * 185.99996948242188, b * 136.85067749023438, b * 190.99996948242188, b * 136.85067749023438);
            j.bezierCurveTo(b * 186.99996948242188, b * 147.85067749023438, b * 189.99996948242188, b * 152.85067749023438, b * 193.99996948242188, b * 155.85067749023438);
            j.bezierCurveTo(b * 187.99996948242188, b * 165.85067749023438, b * 190.99996948242188, b * 169.85067749023438, b * 190.99996948242188, b * 172.85067749023438);
            j.bezierCurveTo(b * 186.99996948242188, b * 183.85067749023438, b * 186.99996948242188, b * 185.85067749023438, b * 189.99996948242188, b * 188.85067749023438);
            j.bezierCurveTo(b * 182.49996948242188, b * 195.35067749023438, b * 182.49996948242188, b * 195.35067749023438, b * 174.99996948242188, b * 201.85067749023438);
            ud(j, undefined, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 176.99996948242188, b * 112.18402099609375);
            j.bezierCurveTo(b * 183.99996948242188, b * 119.18402099609375, b * 186.99996948242188, b * 117.18402099609375, b * 192.99996948242188, b * 116.18402099609375);
            j.bezierCurveTo(b * 191.99996948242188, b * 126.18402099609375, b * 193.99996948242188, b * 130.18402099609375, b * 199.99996948242188, b * 130.18402099609375);
            j.bezierCurveTo(b * 194.99996948242188, b * 145.18402099609375, b * 197.99996948242188, b * 147.18402099609375, b * 201.99996948242188, b * 153.18402099609375);
            j.bezierCurveTo(b * 196.99996948242188, b * 164.18402099609375, b * 197.99996948242188, b * 169.18402099609375, b * 201.99996948242188, b * 174.18402099609375);
            j.bezierCurveTo(b * 194.99996948242188, b * 184.18402099609375, b * 196.99996948242188, b * 187.18402099609375, b * 200.99996948242188, b * 193.18402099609375);
            j.bezierCurveTo(b * 185.99996948242188, b * 195.18402099609375, b * 181.99996948242188, b * 201.18402099609375, b * 174.99996948242188, b * 210.18402099609375);
            ud(j, undefined, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 176.99996948242188, b * 101.29513549804688);
            j.bezierCurveTo(b * 181.99996948242188, b * 108.29513549804688, b * 189.99996948242188, b * 110.29513549804688, b * 195.99996948242188, b * 107.29513549804688);
            j.bezierCurveTo(b * 197.99996948242188, b * 121.29513549804688, b * 200.99996948242188, b * 122.29513549804688, b * 206.99996948242188, b * 122.29513549804688);
            j.bezierCurveTo(b * 201.99996948242188, b * 138.29513549804688, b * 204.99996948242188, b * 142.29513549804688, b * 211.99996948242188, b * 148.29513549804688);
            j.bezierCurveTo(b * 201.99996948242188, b * 156.29513549804688, b * 205.99996948242188, b * 167.29513549804688, b * 213.99996948242188, b * 173.29513549804688);
            j.bezierCurveTo(b * 204.99996948242188, b * 181.29513549804688, b * 204.99996948242188, b * 187.29513549804688, b * 205.99996948242188, b * 193.29513549804688);
            j.bezierCurveTo(b * 190.99996948242188, b * 198.29513549804688, b * 181.99996948242188, b * 205.29513549804688, b * 174.99996948242188, b * 214.29513549804688);
            ud(j, undefined, c[4], b * 3);
            j.restore();
        }
        j.translate(i.width / 2, i.height / 2);
        if (!f) {
            j.globalAlpha = 0.5;
            vd(j, -o, -d, l, g + h, n);
            ud(j, c[0]);
            if (e) {
                j.rotate(Math.PI);
            }
            j.globalAlpha = 1;
            vd(j, -o, -d, l, g, n);
            ud(j, c[1], c[2], 4);
            j.globalAlpha = 1;
            vd(j, b * 35 - o, b * 20 - d, l - b * 50, g - b * 50, n - b * 10);
            ud(j, c[3]);
        }
        if (f == 3) {
            j.translate(-i.width / 2, -i.height / 2);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 121, b * 190);
            j.bezierCurveTo(b * 129, b * 186, b * 137, b * 183, b * 135, b * 163);
            j.bezierCurveTo(b * 131, b * 135, b * 153, b * 127, b * 177, b * 124);
            j.bezierCurveTo(b * 198, b * 120, b * 208, b * 122, b * 226, b * 128);
            j.bezierCurveTo(b * 261, b * 112, b * 271, b * 126, b * 287, b * 147);
            j.bezierCurveTo(b * 310, b * 163, b * 304, b * 183, b * 283, b * 196);
            j.bezierCurveTo(b * 296, b * 249, b * 278, b * 262, b * 253, b * 263);
            j.bezierCurveTo(b * 210, b * 264, b * 188, b * 252, b * 177, b * 234);
            j.bezierCurveTo(b * 133, b * 242, b * 123, b * 241, b * 115, b * 225);
            j.bezierCurveTo(b * 109, b * 206, b * 115, b * 193, b * 121, b * 190);
            j.closePath();
            ud(j, c[4]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 219, b * 144);
            j.bezierCurveTo(b * 251, b * 121, b * 277, b * 136, b * 276, b * 159);
            j.bezierCurveTo(b * 276, b * 176, b * 273, b * 191, b * 242, b * 193);
            j.bezierCurveTo(b * 226, b * 228, b * 155, b * 219, b * 150, b * 183);
            j.bezierCurveTo(b * 142, b * 144, b * 174, b * 127, b * 219, b * 144);
            j.closePath();
            ud(j, c[5]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 123, b * 214);
            j.bezierCurveTo(b * 119, b * 198, b * 129, b * 189, b * 146, b * 194);
            j.bezierCurveTo(b * 158, b * 201, b * 165, b * 218, b * 147, b * 226);
            j.bezierCurveTo(b * 135, b * 230, b * 125, b * 222, b * 123, b * 214);
            j.closePath();
            ud(j, c[5]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 257, b * 199);
            j.bezierCurveTo(b * 264, b * 199, b * 275, b * 213, b * 261, b * 220);
            j.bezierCurveTo(b * 246, b * 225, b * 235, b * 200, b * 257, b * 199);
            j.closePath();
            ud(j, c[5]);
            j.translate(b * -5, b * 55);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 186, b * 123);
            j.bezierCurveTo(b * 198, b * 115, b * 219, b * 110, b * 219, b * 123);
            j.bezierCurveTo(b * 216, b * 135, b * 171, b * 143, b * 186, b * 123);
            j.closePath();
            ud(j, c[5]);
            j.translate(b * 5, b * -55);
            j.translate(b * -5, b * 15);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 171, b * 241);
            j.bezierCurveTo(b * 189, b * 234, b * 200, b * 248, b * 189, b * 254);
            j.bezierCurveTo(b * 179, b * 260, b * 158, b * 246, b * 171, b * 241);
            j.closePath();
            ud(j, c[5]);
        } else if (f == 4) {
            j.translate(-i.width / 2, -i.height / 2);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 30, b * 167);
            j.bezierCurveTo(b * 47, b * 144, b * 64, b * 140, b * 80, b * 147);
            j.bezierCurveTo(b * 95, b * 154, b * 95, b * 159, b * 100, b * 179);
            j.bezierCurveTo(b * 105, b * 202, b * 95, b * 218, b * 69, b * 218);
            j.bezierCurveTo(b * 48, b * 236, b * 26, b * 223, b * 28, b * 213);
            j.bezierCurveTo(b * 28, b * 205, b * 29, b * 199, b * 32, b * 195);
            j.bezierCurveTo(b * 21, b * 183, b * 27, b * 173, b * 30, b * 167);
            j.closePath();
            ud(j, c[4]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 26, b * 145);
            j.bezierCurveTo(b * 32, b * 138, b * 37, b * 137, b * 40, b * 139);
            j.bezierCurveTo(b * 43, b * 140, b * 41, b * 150, b * 31, b * 159);
            j.bezierCurveTo(b * 23, b * 166, b * 17, b * 158, b * 26, b * 145);
            j.closePath();
            ud(j, c[4]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 13, b * 193);
            j.bezierCurveTo(b * 21, b * 187, b * 30, b * 190, b * 20, b * 202);
            j.bezierCurveTo(b * 13, b * 208, b * 7, b * 202, b * 13, b * 193);
            j.closePath();
            ud(j, c[4]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 121, b * 190);
            j.bezierCurveTo(b * 129, b * 186, b * 137, b * 183, b * 135, b * 163);
            j.bezierCurveTo(b * 131, b * 135, b * 153, b * 127, b * 177, b * 124);
            j.bezierCurveTo(b * 198, b * 120, b * 208, b * 122, b * 226, b * 128);
            j.bezierCurveTo(b * 261, b * 112, b * 271, b * 126, b * 287, b * 147);
            j.bezierCurveTo(b * 310, b * 163, b * 304, b * 183, b * 283, b * 196);
            j.bezierCurveTo(b * 296, b * 249, b * 278, b * 262, b * 253, b * 263);
            j.bezierCurveTo(b * 210, b * 264, b * 188, b * 252, b * 177, b * 234);
            j.bezierCurveTo(b * 133, b * 242, b * 123, b * 241, b * 115, b * 225);
            j.bezierCurveTo(b * 109, b * 206, b * 115, b * 193, b * 121, b * 190);
            j.closePath();
            ud(j, c[4]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 335, b * 196);
            j.bezierCurveTo(b * 312, b * 208, b * 300, b * 185, b * 309, b * 167);
            j.bezierCurveTo(b * 314, b * 141, b * 339, b * 127, b * 359, b * 144);
            j.bezierCurveTo(b * 363, b * 148, b * 364, b * 150, b * 364, b * 150);
            j.bezierCurveTo(b * 392, b * 143, b * 396, b * 183, b * 378, b * 204);
            j.bezierCurveTo(b * 367, b * 215, b * 339, b * 208, b * 335, b * 196);
            j.closePath();
            ud(j, c[4]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 349, b * 212);
            j.bezierCurveTo(b * 339, b * 216, b * 334, b * 208, b * 341, b * 203);
            j.bezierCurveTo(b * 353, b * 198, b * 361, b * 205, b * 349, b * 212);
            j.closePath();
            ud(j, c[4]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 46, b * 165);
            j.bezierCurveTo(b * 55, b * 148, b * 85, b * 157, b * 83, b * 175);
            j.bezierCurveTo(b * 99, b * 185, b * 89, b * 212, b * 66, b * 204);
            j.bezierCurveTo(b * 55, b * 212, b * 43, b * 212, b * 41, b * 202);
            j.bezierCurveTo(b * 39, b * 194, b * 42, b * 187, b * 49, b * 185);
            j.bezierCurveTo(b * 44, b * 175, b * 45, b * 172, b * 46, b * 165);
            j.closePath();
            ud(j, c[4]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 219, b * 144);
            j.bezierCurveTo(b * 251, b * 121, b * 277, b * 136, b * 276, b * 159);
            j.bezierCurveTo(b * 276, b * 176, b * 273, b * 191, b * 242, b * 193);
            j.bezierCurveTo(b * 226, b * 228, b * 155, b * 219, b * 150, b * 183);
            j.bezierCurveTo(b * 142, b * 144, b * 174, b * 127, b * 219, b * 144);
            j.closePath();
            ud(j, c[5]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 123, b * 214);
            j.bezierCurveTo(b * 119, b * 198, b * 129, b * 189, b * 146, b * 194);
            j.bezierCurveTo(b * 158, b * 201, b * 165, b * 218, b * 147, b * 226);
            j.bezierCurveTo(b * 135, b * 230, b * 125, b * 222, b * 123, b * 214);
            j.closePath();
            ud(j, c[5]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 257, b * 199);
            j.bezierCurveTo(b * 264, b * 199, b * 275, b * 213, b * 261, b * 220);
            j.bezierCurveTo(b * 246, b * 225, b * 235, b * 200, b * 257, b * 199);
            j.closePath();
            ud(j, c[5]);
            j.translate(b * -5, b * 55);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 186, b * 123);
            j.bezierCurveTo(b * 198, b * 115, b * 219, b * 110, b * 219, b * 123);
            j.bezierCurveTo(b * 216, b * 135, b * 171, b * 143, b * 186, b * 123);
            j.closePath();
            ud(j, c[5]);
            j.translate(b * 5, b * -55);
            j.translate(b * -5, b * 15);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 171, b * 241);
            j.bezierCurveTo(b * 189, b * 234, b * 200, b * 248, b * 189, b * 254);
            j.bezierCurveTo(b * 179, b * 260, b * 158, b * 246, b * 171, b * 241);
            j.closePath();
            ud(j, c[5]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 367, b * 164);
            j.bezierCurveTo(b * 380, b * 160, b * 391, b * 185, b * 371, b * 189);
            j.bezierCurveTo(b * 362, b * 192, b * 354, b * 191, b * 350, b * 185);
            j.bezierCurveTo(b * 326, b * 205, b * 314, b * 182, b * 316, b * 171);
            j.bezierCurveTo(b * 317, b * 150, b * 332, b * 143, b * 347, b * 147);
            j.bezierCurveTo(b * 361, b * 151, b * 366, b * 158, b * 367, b * 164);
            j.closePath();
            ud(j, c[4]);
        }
        return i;
    }
    function ou(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 469;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 31);
        e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
        e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
        e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
        e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 328);
        e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
        e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
        e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 302);
        e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
        e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
        e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
        e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
        e.closePath();
        ud(e, c[0]);
        e.save();
        e.translate(a * 51.5, a * 440.5);
        e.rotate(0.2);
        vd(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
        e.restore();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 316);
        e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
        e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        ud(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 31);
        e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
        e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
        e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
        e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        ud(e, hg, c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 328);
        e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
        e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
        e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
        e.closePath();
        ud(e, c[4], c[5], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 302);
        e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
        e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
        e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
        e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
        e.closePath();
        ud(e, c[4], c[5], a * 7);
        e.save();
        e.translate(a * 51.5, a * 440.5);
        e.rotate(0.2);
        vd(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
        e.restore();
        ud(e, c[4], c[5], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 316);
        e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
        e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
        e.closePath();
        ud(e, c[6]);
        return d;
    }
    function pu(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 121;
        f.height = b * 130;
        g.translate(0, b * 20);
        if (d == 1) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 6, b * 23);
            g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
            g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
            g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
            g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
            g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
            g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
            g.closePath();
            ud(g, undefined, c[3], b * 13);
        }
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 6, b * 23);
        g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
        g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
        g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
        g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
        g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
        g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
        g.closePath();
        ud(g, c[1], c[2], b * 4);
        if (e == 1) {
            g.translate(0, b * 5);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 67, b * 30);
            g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
            ud(g, kr, c[0], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 17);
            g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
            ud(g, Qk, c[0], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 76, b * 8);
            g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
            ud(g, undefined, c[0], b * 10);
            if (d == 1) {
                g.translate(b * -6, b * -5);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 67, b * 30);
                g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
                ud(g, eq, c[3], b * 18);
                g.translate(3, b * 0);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 70, b * 17);
                g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
                ud(g, undefined, c[3], b * 18);
                g.translate(3, b * 0);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 76, b * 8);
                g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
                ud(g, undefined, c[3], b * 18);
                g.translate(-6, b * 0);
            } else {
                g.translate(b * -6, b * -5);
            }
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 67, b * 30);
            g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
            ud(g, undefined, c[2], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 17);
            g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
            ud(g, $q, c[2], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 76, b * 8);
            g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
            ud(g, eq, c[2], b * 10);
        } else {
            if (d == 1) {
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 108, b * 27);
                g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
                g.closePath();
                ud(g, undefined, c[3], b * 18);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 79, b * 30);
                g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
                g.closePath();
                ud(g, undefined, c[3], b * 18);
            } else {
                g.translate(0, b * -5);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 108, b * 27);
                g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
                g.closePath();
                ud(g, hj, c[0], b * 7);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 79, b * 30);
                g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
                g.closePath();
                ud(g, fk, c[0], b * 7);
                g.translate(0, b * 5);
            }
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 108, b * 27);
            g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
            g.closePath();
            ud(g, hj, c[2], b * 7);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 79, b * 30);
            g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
            g.closePath();
            ud(g, Qk, c[2], b * 7);
        }
        return f;
    }
    const qu = 2;
    function ru(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 283;
        c.height = a * 224;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 100, a * 33);
        d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
        ud(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 181, a * 32);
        d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
        ud(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 225, a * 52);
        d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
        ud(d, $q, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 34, a * 134);
        d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
        ud(d, eq, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 249, a * 135);
        d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
        ud(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 56, a * 50);
        d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
        ud(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 93, a * 55);
        d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
        d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
        d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
        d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
        d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
        d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
        d.closePath();
        ud(d, b[0]);
        return c;
    }
    function su(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 131;
        d.height = a * 121;
        e.translate(0, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 59);
        e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
        e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
        e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
        e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
        e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
        e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 59);
        e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
        e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
        e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
        e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
        e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
        e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
        e.closePath();
        ud(e, c[1], c[2], a * 10);
        return d;
    }
    const tu = 5;
    function uu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 104;
        d.height = a * 112;
        e.translate(0, a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 16, a * 44);
        e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
        e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
        e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
        e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
        e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
        e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 16, a * 44);
        e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
        e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
        e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
        e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
        e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
        e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
        e.closePath();
        ud(e, c[1], c[2], a * 8);
        return d;
    }
    function vu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112, a * 356);
        e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
        e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
        e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
        e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
        e.closePath();
        ud(e, c[0]);
        e.save();
        e.translate(a * 131, a * 423);
        e.rotate(0.16);
        vd(e, a * -14, a * -53, a * 28, a * 106, a * 10);
        e.restore();
        ud(e, c[0]);
        e.save();
        e.translate(a * 122, a * 480);
        e.rotate(1.72);
        pd(e, 4, a * 26.476404589747453, a * 10);
        e.restore();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 387);
        e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
        e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
        e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
        e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
        e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
        e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 129, a * 338);
        e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
        e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
        e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
        e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
        e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112, a * 356);
        e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
        e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
        e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
        e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
        e.closePath();
        ud(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 131, a * 423);
        e.rotate(0.16);
        vd(e, a * -14, a * -53, a * 28, a * 106, a * 10);
        e.restore();
        ud(e, c[4], c[5], a * 12.5);
        e.save();
        e.translate(a * 122, a * 480);
        e.rotate(1.72);
        pd(e, 4, a * 26.476404589747453, a * 10);
        e.restore();
        ud(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 387);
        e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
        e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
        e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
        e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
        e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
        e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
        e.closePath();
        ud(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 129, a * 338);
        e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
        e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
        e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
        e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
        e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
        e.closePath();
        ud(e, c[3]);
        return d;
    }
    function wu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
        e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
        e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
        e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
        e.closePath();
        ud(e, c[0]);
        e.save();
        e.translate(a * 129.5, a * 424);
        e.rotate(0.16);
        vd(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
        e.restore();
        ud(e, c[0]);
        md(e, a * 121, a * 480, a * 20.396078054371138);
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 311);
        e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
        e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
        e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
        e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
        e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
        e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
        e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
        e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
        e.closePath();
        ud(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 129.5, a * 424);
        e.rotate(0.16);
        vd(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
        e.restore();
        ud(e, c[4], c[5], a * 12.5);
        md(e, a * 121, a * 480, a * 20.396078054371138);
        ud(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 311);
        e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
        e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
        e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
        e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
        e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
        e.closePath();
        ud(e, c[1], c[2], a * 12.5);
        return d;
    }
    function xu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 321;
        d.height = a * 284;
        e.translate(a * 100, a * 30);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        ud(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        ud(e, $q, c[4], a * 4);
        e.translate(a * -100, a * -30);
        e.translate(a * 10, a * 70);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        ud(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        ud(e, lh, c[4], a * 4);
        e.translate(a * 20, a * -80);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        ud(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        ud(e, undefined, c[4], a * 4);
        return d;
    }
    const yu = 2;
    function zu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 70;
        var a = b * 90;
        var i = b * 4;
        var j = b * 5;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        ud(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
        f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
        f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
        f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
        f.closePath();
        ud(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
        f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
        f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
        f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
        f.closePath();
        ud(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * 3, b * -93 + j);
        f.rotate(Math.PI / 5);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        ud(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        ud(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
        f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
        f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
        f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
        f.closePath();
        ud(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
        f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
        f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
        f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
        f.closePath();
        ud(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * 3, b * -93);
        f.rotate(Math.PI / 5);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        ud(f, d[0], d[1], i);
        f.restore();
        return e;
    }
    function Au(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.translate(a * -20, a * -20);
        e.save();
        e.translate(a * 132, a * 423);
        e.rotate(0.16);
        vd(e, a * -14, a * -61, a * 28, a * 122, a * 10);
        e.restore();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 344);
        e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
        e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
        e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
        e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
        e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 328);
        e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
        e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
        e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
        e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
        e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
        e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
        e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 332);
        e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
        e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
        e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
        e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
        e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 463);
        e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
        e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
        e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
        e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.save();
        e.translate(a * 132, a * 423);
        e.rotate(0.16);
        vd(e, a * -14, a * -61, a * 28, a * 122, a * 10);
        e.restore();
        ud(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 344);
        e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
        e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
        e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
        e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
        e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
        e.closePath();
        ud(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 328);
        e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
        e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
        e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
        e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
        e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
        e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
        e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
        e.closePath();
        ud(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 332);
        e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
        e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
        e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
        e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
        e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 463);
        e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
        e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
        e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
        e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
        e.closePath();
        ud(e, c[1], c[2], a * 12.5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 346);
        e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
        e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
        e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
        e.closePath();
        ud(e, c[3]);
        return d;
    }
    function Bu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 118;
        d.height = a * 114;
        e.translate(0, a * 10);
        md(e, a * 42, a * 43, a * 24.758836806279895);
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 90);
        e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
        e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 45);
        e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
        e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
        e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
        e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
        e.closePath();
        ud(e, c[0]);
        e.translate(0, a * -10);
        md(e, a * 42, a * 43, a * 24.758836806279895);
        ud(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 90);
        e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
        e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
        e.closePath();
        ud(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 45);
        e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
        e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
        e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
        e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
        e.closePath();
        ud(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 16);
        e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
        e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
        e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
        e.bezierCurveTo(a * 45, a * 19, a * 48, a * 16, a * 52, a * 16);
        e.closePath();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 30);
        e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
        e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
        e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
        e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
        e.closePath();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 29, a * 21);
        e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
        e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
        e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
        e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
        e.closePath();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 36);
        e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
        e.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
        e.closePath();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 34);
        e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
        e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
        e.closePath();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 35);
        e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
        e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
        e.closePath();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 63, a * 46);
        e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
        e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
        e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
        e.closePath();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 42);
        e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
        e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
        e.closePath();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 57);
        e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
        e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
        e.closePath();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 52);
        e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
        e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
        e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
        e.closePath();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 61);
        e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
        e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
        e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
        e.closePath();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 45);
        e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
        e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
        e.closePath();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96, a * 53);
        e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
        e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
        e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
        e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
        e.closePath();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 92, a * 71);
        e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
        e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
        e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
        e.closePath();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 82);
        e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
        e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
        e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
        e.closePath();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 72);
        e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
        e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
        e.closePath();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 86);
        e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
        e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
        e.closePath();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 46);
        e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
        e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
        e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
        e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
        e.closePath();
        ud(e, c[5], c[6], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 76, a * 60);
        e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
        e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
        e.closePath();
        ud(e, c[7], c[8], a * 5);
        return d;
    }
    function Cu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 154;
        d.height = a * 261;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125, a * 69);
        e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
        e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
        e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
        e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
        e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
        e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
        e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
        e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
        e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125, a * 69);
        e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
        e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
        e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
        e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
        e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
        e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
        e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
        e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
        e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
        e.closePath();
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 43);
        e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
        e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
        e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45, a * 29);
        e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
        e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
        e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
        e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 56);
        e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
        e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
        e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
        e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 81);
        e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
        e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
        e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 124);
        e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
        e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
        e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 170);
        e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
        e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
        e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 208);
        e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
        e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
        e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
        e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
        e.closePath();
        ud(e, c[3]);
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22, a * 81);
        e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
        e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
        e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
        e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
        e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
        e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
        e.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
        e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
        e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
        e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
        e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 123);
        e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
        e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
        e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
        e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
        e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
        e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
        e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
        e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
        e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
        e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
        e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
        e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
        e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
        e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
        e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
        e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
        e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
        e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
        e.closePath();
        ud(e, c[4], c[5], a * 4);
        md(e, a * 107, a * 152, a * 9);
        ud(e, c[6]);
        md(e, a * 105, a * 173, a * 9);
        ud(e, c[6]);
        md(e, a * 87, a * 161, a * 9);
        ud(e, c[6]);
        md(e, a * 106, a * 147, a * 4);
        ud(e, c[7]);
        md(e, a * 104, a * 167, a * 4);
        ud(e, c[7]);
        md(e, a * 86, a * 154, a * 4);
        ud(e, c[7]);
        return d;
    }
    function Du(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 217;
        d.height = a * 215;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 113);
        e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
        e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
        e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
        e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
        e.closePath();
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154, a * 103);
        e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
        e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
        e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
        e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
        e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
        e.closePath();
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 46);
        e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
        e.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
        e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
        e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
        e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
        e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
        e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
        e.closePath();
        ud(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46, a * 50);
        e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
        e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
        e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
        e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
        e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
        e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
        e.closePath();
        ud(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 40);
        e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
        e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
        e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
        e.closePath();
        ud(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 29, a * 48);
        e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
        e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
        e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
        e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
        e.closePath();
        ud(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 89, a * 61);
        e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
        e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
        e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
        e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
        e.closePath();
        ud(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99, a * 59);
        e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
        e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
        e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
        e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
        e.closePath();
        ud(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 62);
        e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
        e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
        e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
        e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
        e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
        e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
        e.closePath();
        ud(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 130);
        e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
        e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
        e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
        e.closePath();
        ud(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 119);
        e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
        e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
        e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
        e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
        e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
        e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
        e.closePath();
        ud(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 64);
        e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
        e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
        e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
        e.closePath();
        ud(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 65);
        e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
        e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
        e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
        e.closePath();
        ud(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 112);
        e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
        e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
        e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
        e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
        e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
        e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
        e.closePath();
        ud(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 114);
        e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
        e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
        e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
        e.closePath();
        ud(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85, a * 152);
        e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
        e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
        e.closePath();
        e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
        ud(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 166);
        e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
        e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
        e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
        e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
        e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
        e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
        e.closePath();
        ud(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 168);
        e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
        e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
        e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
        e.closePath();
        ud(e, c[10]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 169);
        e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
        e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
        e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
        e.closePath();
        ud(e, c[9], c[9], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 107);
        e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
        e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
        e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
        e.closePath();
        ud(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40, a * 108);
        e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
        e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
        e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
        e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
        e.closePath();
        ud(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 189, a * 106);
        e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
        e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
        e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
        e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
        e.closePath();
        ud(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 69, a * 178);
        e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
        e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
        ud(e, undefined, c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 161);
        e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
        e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
        ud(e, undefined, c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 91, a * 29);
        e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
        e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
        ud(e, hj, c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107, a * 33);
        e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
        e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
        ud(e, undefined, c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 98);
        e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
        e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
        e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
        e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
        e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
        e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
        e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
        e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
        e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
        ud(e, Pg, c[3], a * 4);
        return d;
    }
    function Eu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 350;
        d.height = a * 140;
        e.translate(a * -50, a * -150);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 184.5, a * 222.0625);
        e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
        e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
        e.closePath();
        ud(e, c[0], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.5, a * 241.0625);
        e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
        e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
        e.closePath();
        ud(e, c[0], c[1], a * 8);
        md(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
        ud(e, c[2]);
        md(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
        ud(e, c[2]);
        md(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
        ud(e, c[2]);
        md(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
        ud(e, c[2]);
        md(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
        ud(e, c[2]);
        md(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 151.5, a * 212.0625);
        e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
        e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
        e.closePath();
        ud(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 209.0625);
        e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
        e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
        e.closePath();
        ud(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 188.5, a * 183.0625);
        e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
        e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
        e.closePath();
        ud(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 261.5, a * 202.0625);
        e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
        e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
        e.closePath();
        ud(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 240.5, a * 231.0625);
        e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
        e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
        e.closePath();
        ud(e, c[3], c[4], a * 4);
        return d;
    }
    const Fu = 9;
    function ec(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 120;
        var a = b * 150;
        var i = b * 60;
        var j = i / 4;
        var h = b * 15;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(g / 2 + b * 0, a / 2 + b * 0 + h);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 0.5;
        pd(f, 8, i, j);
        ud(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 11, a / 2 + b * 12);
        f.globalAlpha = 1;
        f.rotate(Math.PI / 3);
        f.translate(0, -h);
        pd(f, 8, i, j);
        ud(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 9, a / 2 - b * 12);
        f.rotate(Math.PI / 2.8);
        pd(f, 5, i * 0.5, j * 0.4);
        ud(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 19, a / 2 + b * 5);
        f.rotate(Math.PI / 1);
        pd(f, 5, i * 0.5, j * 0.4);
        ud(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 8, a / 2 + b * 20);
        f.rotate(Math.PI / 2.25);
        pd(f, 5, i * 0.5, j * 0.4);
        ud(f, d[2]);
        f.restore();
        return e;
    }
    function ic(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 220;
        var a = b * 230;
        var i = b * 100;
        var j = i / 4;
        var h = b * 20;
        e.width = g;
        e.height = a;
        f.translate(g / 2, a / 2 + h);
        f.globalAlpha = 0.5;
        pd(f, 7, i, j);
        ud(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, -h);
        pd(f, 7, i, j);
        ud(f, d[1]);
        pd(f, 6, i * 0.65, j * 0.65);
        ud(f, d[2]);
        return e;
    }
    const tc = String.fromCharCode;
    const nc = tc(101);
    const oc = tc(118);
    const ac = tc(97);
    const rc = tc(108);
    function sc(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        var a = b * 220;
        var i = b * 220;
        var j = b * 100;
        var h = j / 4;
        f.width = a;
        f.height = i;
        g.translate(a / 2, i / 2);
        g.globalAlpha = c ? 0.5 : 1;
        if (!c) {
            g.translate(b * 0, b * -8);
        }
        pd(g, 7, j, h);
        ud(g, c ? d[0] : d[1]);
        g.globalAlpha = 1;
        if (e == 0) {
            pd(g, 6, j * 0.65, h * 0.65);
            ud(g, d[2]);
        } else if (e == 1) {
            g.translate(b * 20, b * 20);
            pd(g, 6, j * 0.45, h * 0.4);
            ud(g, d[2]);
        }
        return f;
    }
    function lc(c, e, f, i, j, k, n, o, p, h, l) {
        if (fk === l) {
            l = 0;
        }
        var q = document.createElement("canvas");
        var r = q.getContext("2d");
        k = k ? c * k : 0;
        var b = Math.floor(c * f);
        r.font = b + "px Baloo Paaji";
        r.lineJoin = "round";
        o *= c;
        var t = n ? o * 2 : 0;
        if (p) {
            var u = Math.min(r.measureText(e).width + c * 2 + t, p);
        } else {
            u = r.measureText(e).width + c * 2 + t + l * c * 2;
        }
        b = c * (b + k + l) + t;
        q.width = u;
        q.height = b;
        if (n) {
            r.fillStyle = n;
            vd(r, 0, 0, u, b, o * 2);
            r.fill();
            r.translate(o, o);
        }
        r.textBaseline = "middle";
        r.font = f + "px Baloo Paaji";
        r.lineJoin = "round";
        if (j) {
            r.beginPath();
            r.fillStyle = j;
            r.fillText(e, 0, b / 2 + k - t / 2, u);
        }
        r.beginPath();
        if (h) {
            r.strokeStyle = h;
            r.lineWidth = l;
            r.strokeText(e, l, (b - t) / 2, u);
        }
        r.fillStyle = i;
        r.fillText(e, l, (b - t) / 2, u);
        return q;
    }
    function gc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 180;
        var a = b * 210;
        var i = (h = b * 60) / 4;
        var j = b * 20;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(g / 2 - b * 0, a / 2 - b * 35 + j);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 0.5;
        f.translate(b * 0, b * -20);
        pd(f, 5, h, i);
        ud(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 10, a / 2 + b * 15 + j);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 0.5;
        f.translate(b * 0, b * -20);
        pd(f, 5, h, i);
        ud(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 50, a / 2 + b * 40 + j);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 0.5;
        f.translate(0, b * -20);
        pd(f, 5, h, i);
        ud(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 0, a / 2 - b * 35);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 1;
        f.translate(b * 0, b * -20);
        pd(f, 5, h, i);
        ud(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 10, a / 2 + b * 15);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        pd(f, 5, h, i);
        ud(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 50, a / 2 + b * 40);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        pd(f, 5, h, i);
        ud(f, d[1]);
        f.restore();
        var h;
        i = (h = b * 30) / 4;
        f.save();
        f.translate(g / 2 + b * 5, a / 2 - b * 20);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        pd(f, 5, h, i);
        ud(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 0, a / 2 + b * 10);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        pd(f, 5, h, i);
        ud(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 45, a / 2 + b * 35);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        pd(f, 5, h, i);
        ud(f, d[2]);
        f.restore();
        md(f, g / 2 - b * 7, a / 2 + b * 7, 5);
        ud(f, d[2]);
        return e;
    }
    const uc = 3;
    function bc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 234;
        c.height = a * 183;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 25);
        d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
        d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
        d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
        d.bezierCurveTo(a * 19, a * 148, a * 6, a * 95, a * 21, a * 66);
        d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
        d.closePath();
        ud(d, b[0], b[0], a * 4);
        return c;
    }
    function Gu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 373;
        d.height = a * 314;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 184.048583984375, a * 69.1805419921875);
        vd(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
        e.restore();
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.048583984375, a * 61.6805419921875);
        e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
        e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
        e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
        e.closePath();
        ud(e, c[0], c[0], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224.048583984375, a * 56.6805419921875);
        e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
        e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
        e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
        e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
        e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
        e.closePath();
        ud(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.548583984375, a * 119.6805419921875);
        vd(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
        e.restore();
        ud(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 155.6805419921875);
        vd(e, a * -121, a * -52, a * 242, a * 104, a * 40);
        e.restore();
        ud(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 205.1805419921875);
        vd(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
        e.restore();
        ud(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        vd(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        ud(e, c[0], c[0], a * 6);
        md(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
        ud(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224.048583984375, a * 56.6805419921875);
        e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
        e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
        e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
        e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
        e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
        e.closePath();
        ud(e, c[3], c[4], a * 6);
        e.save();
        e.translate(a * 184.048583984375, a * 69.1805419921875);
        vd(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
        e.restore();
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.048583984375, a * 61.6805419921875);
        e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
        e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
        e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
        e.closePath();
        ud(e, c[1], c[2], a * 6);
        e.save();
        e.translate(a * 183.548583984375, a * 119.6805419921875);
        vd(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
        e.restore();
        ud(e, c[5], c[4], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 155.6805419921875);
        vd(e, a * -121, a * -52, a * 242, a * 104, a * 40);
        e.restore();
        ud(e, c[3], c[4], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 205.1805419921875);
        vd(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
        e.restore();
        ud(e, c[6], c[4], a * 6);
        e.globalCompositeOperation = "destination-out";
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        vd(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        ud(e, c[7], c[8], a * 6);
        e.globalCompositeOperation = "source-over";
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        vd(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        ud(e, c[7], c[8], a * 6);
        e.globalAlpha = 1;
        e.save();
        md(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
        ud(e, c[3], c[4], a * 6);
        e.restore();
        return d;
    }
    function vc(b, c, d, e, f) {
        var g = document.createElement("canvas");
        var a = g.getContext("2d");
        if (e == 0) {
            var i = b * 270;
            var j = b * 250;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 140, b * 3);
            a.translate(b * -25, b * -20);
            a.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
            a.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
            a.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
            a.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
            a.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
            a.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
            a.closePath();
            ud(a, d[0]);
        } else if (e == 1) {
            i = b * 430;
            j = b * 350;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 180, b * 5);
            a.translate(b * -30, b * -60);
            a.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
            a.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
            a.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
            a.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
            a.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
            a.closePath();
            ud(a, d[0]);
        } else if (e == 2) {
            i = b * 400;
            j = b * 300;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 80, b * 52);
            a.translate(b * -40, b * -30);
            a.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
            a.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
            a.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
            a.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
            a.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
            a.closePath();
            ud(a, d[0]);
        }
        return g;
    }
    function bc(a, b) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 80;
        d.height = a * 100;
        e.scale(0.5, 0.5);
        e.translate(10, 15);
        e.globalAlpha = 0.5;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 47, a * 5);
        e.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
        e.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
        e.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
        e.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
        e.closePath();
        ud(e, b[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17, a * 70);
        e.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
        ud(e, gj, b[0], a * 10);
        e.translate(0, -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 47, a * 5);
        e.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
        e.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
        e.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
        e.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
        e.closePath();
        ud(e, b[1], b[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17, a * 70);
        e.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
        ud(e, undefined, b[2], a * 8);
        e.globalAlpha = 0.5;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17, a * 70);
        e.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
        ud(e, undefined, b[2], a * 8);
        return d;
    }
    function cc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 140;
        var a = b * 150;
        var i = b * 10;
        var j = b * 4;
        e.width = g;
        e.height = a;
        f.translate(b * -50, b * -38 + i);
        f.globalAlpha = c ? 0.5 : 1;
        f.beginPath();
        f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
        f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
        f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
        f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
        f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
        f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
        f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
        f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
        f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
        f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
        f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
        f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
        f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
        f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
        f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
        f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
        f.closePath();
        ud(f, d[0]);
        f.translate(0, 0 - i);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
        f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
        f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
        f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
        f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
        f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
        f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
        f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
        f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
        f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
        f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
        f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
        f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
        f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
        f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
        f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
        f.closePath();
        ud(f, d[1], d[2], j);
        return e;
    }
    function mc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 18;
        var a = b * 18;
        e.width = g;
        e.height = a;
        var i = b * 9;
        var j = b * 9;
        var k = b * 8;
        f.save();
        f.translate(i, j);
        f.globalAlpha = 1;
        md(f, 0, 0, k);
        ud(f, d[0]);
        k = b * 3;
        i = 0;
        j = b * -3;
        f.translate(i, j);
        f.globalAlpha = 1;
        md(f, 0, 0, k);
        ud(f, d[1]);
        f.restore();
        return e;
    }
    function pc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 220;
        d.height = a * 180;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -90, a * -150);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 237.8000030517578);
        e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
        e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
        e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
        e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
        e.closePath();
        ud(e, c[5], c[5], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 211.20000457763672);
        e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
        e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
        e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
        e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
        e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
        e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
        e.closePath();
        ud(e, c[5], c[5], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120, a * 207);
        e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
        e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
        e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
        e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
        e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
        e.closePath();
        ud(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 238);
        e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
        e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
        e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
        e.closePath();
        ud(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 211);
        e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
        e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
        e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
        e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
        e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
        e.closePath();
        ud(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 280, a * 206);
        e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
        e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
        e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
        e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
        e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
        e.closePath();
        ud(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 138, a * 298.40000915527344);
        e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
        e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
        e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
        e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
        e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
        e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
        e.closePath();
        ud(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 177.5999984741211);
        e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
        e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
        e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
        e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
        e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
        e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
        e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
        e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
        e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
        e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
        e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
        e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
        e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
        e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
        e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
        e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
        e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
        e.closePath();
        ud(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 175.5999984741211);
        e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
        e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
        e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
        e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
        e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
        e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
        e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
        e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
        e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
        e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
        e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
        e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
        e.closePath();
        ud(e, lh, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 198, a * 161.4000015258789);
        e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
        e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
        e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
        e.closePath();
        ud(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 194);
        e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
        e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
        e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
        e.closePath();
        ud(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
        e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
        e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
        e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
        e.closePath();
        ud(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 156, a * 188);
        e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
        e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
        e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
        e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
        e.closePath();
        ud(e, lh, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 189);
        e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
        e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
        e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
        e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
        e.closePath();
        ud(e, gj, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 262);
        e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
        e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
        e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
        e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
        e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
        e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
        e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
        e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
        e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
        e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
        e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
        e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
        e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
        e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
        e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
        e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
        e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
        e.closePath();
        ud(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 264);
        e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
        e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
        e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
        e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
        e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
        e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
        e.closePath();
        ud(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 140, a * 265.33333587646484);
        e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
        e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
        e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
        e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
        e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
        e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
        e.closePath();
        ud(e, undefined, c[4], a * 6);
        e.globalAlpha = 0.5;
        e.scale(1, 1);
        e.translate(a * 105, a * 155);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
        e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
        e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
        e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
        e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
        e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
        e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
        e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
        e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
        e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
        e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
        e.closePath();
        ud(e, c[5], c[5], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -110, a * -155);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 237.8000030517578);
        e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
        e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
        e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
        e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
        e.closePath();
        ud(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 211.20000457763672);
        e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
        e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
        e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
        e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
        e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
        e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
        e.closePath();
        ud(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120, a * 207);
        e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
        e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
        e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
        e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
        e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
        e.closePath();
        ud(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 238);
        e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
        e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
        e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
        e.closePath();
        ud(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 211);
        e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
        e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
        e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
        e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
        e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
        e.closePath();
        ud(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 280, a * 206);
        e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
        e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
        e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
        e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
        e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
        e.closePath();
        ud(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 138, a * 298.40000915527344);
        e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
        e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
        e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
        e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
        e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
        e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
        e.closePath();
        ud(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 177.5999984741211);
        e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
        e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
        e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
        e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
        e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
        e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
        e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
        e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
        e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
        e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
        e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
        e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
        e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
        e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
        e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
        e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
        e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
        e.closePath();
        ud(e, c[2], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 175.5999984741211);
        e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
        e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
        e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
        e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
        e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
        e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
        e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
        e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
        e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
        e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
        e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
        e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
        e.closePath();
        ud(e, undefined, c[3], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 198, a * 161.4000015258789);
        e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
        e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
        e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
        e.closePath();
        ud(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 194);
        e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
        e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
        e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
        e.closePath();
        ud(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
        e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
        e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
        e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
        e.closePath();
        ud(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 156, a * 188);
        e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
        e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
        e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
        e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
        e.closePath();
        ud(e, mo, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 189);
        e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
        e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
        e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
        e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
        e.closePath();
        ud(e, hj, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 262);
        e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
        e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
        e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
        e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
        e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
        e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
        e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
        e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
        e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
        e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
        e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
        e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
        e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
        e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
        e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
        e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
        e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
        e.closePath();
        ud(e, c[0], c[0], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 264);
        e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
        e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
        e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
        e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
        e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
        e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
        e.closePath();
        ud(e, ug, c[1], a * 2);
        return d;
    }
    function Cc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = c * b * 2;
        var a = b * c * 2;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j);
        md(f, 0, 0, b * c);
        ud(f, d);
        return e;
    }
    const Tc = 10;
    function fc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100.5, a * 126.34375);
        e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
        e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
        e.closePath();
        ud(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 106.5, a * 131.34375);
        e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
        e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 137.34375);
        e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
        e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
        e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
        e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196.5, a * 151.34375);
        e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
        e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
        e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
        e.closePath();
        ud(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154.5, a * 222.34375);
        e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
        e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
        e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
        e.closePath();
        ud(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279.5, a * 294.34375);
        e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
        e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
        e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
        e.closePath();
        ud(e, c[0], c[0], a * 12);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100.5, a * 126.34375);
        e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
        e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
        e.closePath();
        ud(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 106.5, a * 131.34375);
        e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
        e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 137.34375);
        e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
        e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
        e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
        e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
        e.closePath();
        ud(e, c[4]);
        md(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
        ud(e, c[5]);
        md(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
        ud(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196.5, a * 151.34375);
        e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
        e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
        e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
        e.closePath();
        ud(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154.5, a * 222.34375);
        e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
        e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
        e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
        e.closePath();
        ud(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279.5, a * 294.34375);
        e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
        e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
        e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
        e.closePath();
        ud(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 296.5, a * 287.34375);
        e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
        e.closePath();
        ud(e, sj, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 294.5, a * 289.34375);
        e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
        e.closePath();
        ud(e, undefined, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 294.5, a * 291.34375);
        e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
        e.closePath();
        ud(e, undefined, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.5, a * 161.34375);
        e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
        e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
        e.closePath();
        ud(e, undefined, c[9], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167.5, a * 248.34375);
        e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
        e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
        e.closePath();
        ud(e, undefined, c[9], a * 3);
        return d;
    }
    function zc(a) {
        if (a > 0) {
            return a * a;
        } else {
            return a;
        }
    }
    function yc(a) {
        return hc.String.fromCharCode(a);
    }
    function wc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 277.34375);
        e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
        e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
        e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
        e.closePath();
        ud(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98.5, a * 214.34375);
        e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
        e.closePath();
        ud(e, Xa, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98.5, a * 247.34375);
        e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
        e.closePath();
        ud(e, rh, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 97.5, a * 189.34375);
        e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
        e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
        e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
        e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
        e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
        e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
        e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
        e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
        e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
        e.closePath();
        ud(e, c[3], c[4], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 300.5, a * 147.34375);
        e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
        e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
        e.closePath();
        ud(e, c[5], c[6], a * 12);
        md(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
        ud(e, c[7]);
        md(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
        ud(e, c[8]);
        return d;
    }
    function Ac(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 309;
        d.height = a * 287;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34.5, a * 38.53125);
        e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
        e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
        e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
        e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
        e.closePath();
        ud(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143.5, a * 74.53125);
        e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
        e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
        e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
        e.closePath();
        ud(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 142.53125);
        e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
        e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
        e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
        e.closePath();
        ud(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 236.5, a * 189.53125);
        e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
        e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
        e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
        e.closePath();
        ud(e, c[0], c[0], a * 10);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34.5, a * 38.53125);
        e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
        e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
        e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
        e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
        e.closePath();
        ud(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143.5, a * 74.53125);
        e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
        e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
        e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
        e.closePath();
        ud(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 142.53125);
        e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
        e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
        e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
        e.closePath();
        ud(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 236.5, a * 189.53125);
        e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
        e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
        e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
        e.closePath();
        ud(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 109.5, a * 51.53125);
        e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
        ud(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 51.53125);
        e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
        e.closePath();
        ud(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 63.53125);
        e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
        e.closePath();
        ud(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.5, a * 84.53125);
        e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
        e.closePath();
        ud(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 149.5, a * 108.53125);
        e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
        e.closePath();
        ud(e, c[1], c[2], a * 7);
        return d;
    }
    const kc = 9;
    const xc = 0;
    function Jc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if (Qb === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(1);
            pd(e, 8, a * 41, a * 10);
            ud(e, c[0]);
            e.restore();
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(1);
        pd(e, 8, a * 41, a * 10);
        ud(e, c[1], c[2], a * 4);
        e.rotate(0.56);
        pd(e, 8, a * 33, a * 10);
        ud(e, c[3], c[4], a * 4);
        e.rotate(0.28);
        pd(e, 8, a * 24, a * 8);
        ud(e, c[5]);
        e.restore();
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        vd(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        ud(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        vd(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        ud(e, c[4], c[4], a * 2);
        md(e, a * 45, a * 29, a * 7);
        ud(e, c[5]);
        md(e, a * 45, a * 61, a * 7);
        ud(e, c[5]);
        md(e, a * 28, a * 45, a * 7);
        ud(e, c[5]);
        md(e, a * 62, a * 45, a * 7);
        ud(e, c[5]);
        return d;
    }
    function Mc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 300;
        d.height = a * 300;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 150, a * 160);
        e.rotate(6.28);
        pd(e, 6, a * 146, a * 30);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(6.28);
        pd(e, 6, a * 146, a * 30);
        e.restore();
        ud(e, c[1], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        pd(e, 6, a * 105, a * 30);
        e.restore();
        ud(e, c[3], c[3], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        pd(e, 6, a * 66, a * 30);
        e.restore();
        ud(e, c[4], c[2], a * 8);
        e.save();
        e.translate(a * 131, a * 116);
        pd(e, 7, a * 17, a * 8);
        e.restore();
        ud(e, c[6]);
        e.save();
        e.translate(a * 163, a * 168);
        pd(e, 7, a * 25, a * 8);
        e.restore();
        ud(e, c[6]);
        e.save();
        e.translate(a * 117, a * 151);
        pd(e, 7, a * 11, a * 8);
        e.restore();
        ud(e, c[6]);
        e.save();
        e.translate(a * 167, a * 122);
        pd(e, 7, a * 12, a * 8);
        e.restore();
        ud(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 207);
        e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
        e.closePath();
        ud(e, mo, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 100);
        e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
        e.closePath();
        ud(e, hg, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183, a * 100);
        e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
        e.closePath();
        ud(e, undefined, c[2], a * 8);
        return d;
    }
    function Bc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 130;
        var a = b * 142;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j + b * 7);
        f.globalAlpha = c ? 0.5 : 1;
        md(f, 0, 0, b * 60);
        ud(f, d[0]);
        f.translate(0, b * -7);
        f.globalAlpha = 1;
        md(f, 0, 0, b * 60);
        ud(f, d[1], d[2], b * 4);
        md(f, 0, 0, b * 40);
        ud(f, d[3]);
        md(f, 0, 0, b * 25);
        ud(f, d[4], d[5], b * 8);
        return e;
    }
    function Dc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 128;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 7);
        e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * 5);
        e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
        e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
        e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
        e.closePath();
        ud(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 124);
        e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
        e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
        e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
        e.closePath();
        ud(e, c[2], c[3], a * 1);
        return d;
    }
    function Ic(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 130;
        d.height = a * 148;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 65, a * 85);
        e.rotate(1.4);
        pd(e, 7, a * 60, a * 10);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 65, a * 74);
        e.rotate(1.4);
        pd(e, 7, a * 60, a * 10);
        ud(e, c[1], c[2], 4);
        e.rotate(0.64);
        pd(e, 7, a * 40, a * 10);
        ud(e, c[3], c[4], 4);
        e.rotate(0.12);
        pd(e, 7, a * 23, a * 5);
        e.restore();
        ud(e, c[5]);
        return d;
    }
    function Ec(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 130;
        d.height = a * 142;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 65, a * 80);
        e.rotate(0.2);
        pd(e, 9, a * 60, a * 10);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 65, a * 71);
        e.rotate(0.2);
        pd(e, 9, a * 60, a * 10);
        ud(e, c[1], c[2], 4);
        e.rotate(-0.32);
        pd(e, 9, a * 38, a * 10);
        ud(e, c[3], c[4], 4);
        e.rotate(0.68);
        pd(e, 9, a * 20, a * 8);
        ud(e, c[5], c[6], 6);
        e.restore();
        return d;
    }
    function Sc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 372;
        c.height = a * 375;
        d.globalAlpha = 0.5;
        d.translate(a * 15, a * 15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        ud(d, b[0]);
        d.globalAlpha = 1;
        d.translate(a * -15, a * -15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        ud(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
        d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
        d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
        d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
        d.closePath();
        ud(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
        d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
        d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
        d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
        d.closePath();
        ud(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
        d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
        d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
        d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
        d.closePath();
        ud(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
        d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
        d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
        d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
        d.closePath();
        ud(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
        d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
        d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
        d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
        d.closePath();
        ud(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
        d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
        d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
        d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
        d.closePath();
        ud(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        ud(d, undefined, b[2], a * 4);
        return c;
    }
    function Qc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if (Qb === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(1.4);
            pd(e, 7, a * 41, a * 10);
            e.restore();
            ud(e, c[0]);
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(1.4);
        pd(e, 7, a * 41, a * 10);
        ud(e, c[1], c[2], a * 4);
        pd(e, 7, a * 35, a * 10);
        ud(e, c[3], c[4], a * 4);
        pd(e, 7, a * 23, a * 5);
        e.restore();
        ud(e, c[5]);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        vd(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        ud(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        vd(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        ud(e, c[4], c[4], a * 2);
        md(e, a * 45, a * 29, a * 7);
        ud(e, c[5]);
        md(e, a * 45, a * 61, a * 7);
        ud(e, c[5]);
        md(e, a * 28, a * 45, a * 7);
        ud(e, c[5]);
        md(e, a * 62, a * 45, a * 7);
        ud(e, c[5]);
        return d;
    }
    function _c(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 300;
        d.height = a * 300;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 150, a * 160);
        e.rotate(6.28);
        pd(e, 6, a * 146, a * 30);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(6.28);
        pd(e, 6, a * 146, a * 30);
        e.restore();
        ud(e, c[1], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        pd(e, 6, a * 105, a * 30);
        e.restore();
        ud(e, c[3], c[3], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        pd(e, 6, a * 66, a * 30);
        e.restore();
        ud(e, c[4], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        pd(e, 6, a * 31, a * 30);
        e.restore();
        ud(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 207);
        e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
        e.closePath();
        ud(e, Qk, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 100);
        e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
        e.closePath();
        ud(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183, a * 100);
        e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
        e.closePath();
        ud(e, undefined, c[2], a * 8);
        return d;
    }
    function Rc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 101;
        e.translate(a * 0, a * 5);
        if (Qb === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            md(e, a * 44, a * 55, a * 41);
            ud(e, c[0]);
        }
        e.globalAlpha = 1;
        md(e, a * 44, a * 45, a * 41);
        ud(e, c[1], c[2], a * 4);
        md(e, a * 44, a * 45, a * 31);
        ud(e, c[3]);
        e.save();
        e.translate(a * 45, a * 45);
        vd(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        ud(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        vd(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        ud(e, c[4], c[4], a * 2);
        md(e, a * 45, a * 29, a * 7);
        ud(e, c[5]);
        md(e, a * 45, a * 61, a * 7);
        ud(e, c[5]);
        md(e, a * 28, a * 45, a * 7);
        ud(e, c[5]);
        md(e, a * 62, a * 45, a * 7);
        ud(e, c[5]);
        return d;
    }
    function Fc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 125;
        d.height = a * 139;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 63, a * 79);
        e.rotate(1);
        pd(e, 8, a * 60, a * 10);
        ud(e, c[0]);
        e.restore();
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 63, a * 69);
        e.rotate(1);
        pd(e, 8, a * 60, a * 10);
        ud(e, c[1], c[2], 4);
        e.rotate(0.56);
        pd(e, 8, a * 40, a * 10);
        ud(e, c[3], c[4], 4);
        e.rotate(0.28);
        pd(e, 8, a * 28, a * 8);
        ud(e, c[5]);
        e.restore();
        return d;
    }
    const jc = 1;
    const Gc = 9;
    function Lc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if (Qb === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(0.2);
            pd(e, 9, a * 41, a * 10);
            e.restore();
            ud(e, c[0]);
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(0.2);
        pd(e, 9, a * 41, a * 10);
        ud(e, c[1], c[2], a * 4);
        e.rotate(-0.32);
        pd(e, 9, a * 32, a * 10);
        ud(e, c[3], c[4], a * 4);
        e.rotate(0.68);
        pd(e, 9, a * 23, a * 8);
        ud(e, c[5], c[6], a * 6);
        e.restore();
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        vd(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        ud(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        vd(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        ud(e, c[4], c[4], a * 2);
        md(e, a * 45, a * 29, a * 7);
        ud(e, c[5]);
        md(e, a * 45, a * 61, a * 7);
        ud(e, c[5]);
        md(e, a * 28, a * 45, a * 7);
        ud(e, c[5]);
        md(e, a * 62, a * 45, a * 7);
        ud(e, c[5]);
        return d;
    }
    const Wc = 2;
    const Oc = 1;
    function Nc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.save();
        f.translate(b * 85, b * 88);
        f.rotate(1.4);
        pd(f, 7, b * 60, b * 10);
        f.restore();
        ud(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 80);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            pd(f, 3, b * 21, b * 4);
            ud(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(1.4);
        pd(f, 7, b * 60, b * 10);
        ud(f, d[3], d[4], b * 4);
        f.rotate(0.64);
        pd(f, 7, b * 40, b * 10);
        ud(f, d[5], d[6], b * 4);
        f.rotate(0.12);
        pd(f, 7, b * 23, b * 5);
        f.restore();
        ud(f, d[7]);
        return e;
    }
    function qc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 260;
        e.translate(a * 10, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        vd(e, 0, 0, a * 400, a * 220, a * 30);
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9, a * 5);
        e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
        e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
        e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
        e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
        e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
        e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
        e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
        e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
        e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
        e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
        e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
        e.closePath();
        ud(e, c[2], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 70);
        e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
        e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
        e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
        e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
        e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
        e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
        e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
        e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
        e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
        e.closePath();
        ud(e, c[3], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 158);
        e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
        e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
        e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
        e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
        e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
        e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
        e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
        e.closePath();
        ud(e, c[2], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 183);
        e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
        e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
        e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
        e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
        e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
        e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
        e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
        e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
        e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
        e.closePath();
        ud(e, c[3], c[1], a * 12);
        md(e, a * 41, a * 30, a * 14.7648230602334);
        ud(e, c[3], c[1], a * 12);
        md(e, a * 369, a * 30, a * 15.556349186104045);
        ud(e, c[3], c[1], a * 12);
        md(e, a * 364, a * 190, a * 15.620499351813308);
        ud(e, c[3], c[1], a * 12);
        md(e, a * 41, a * 186, a * 15.556349186104045);
        ud(e, c[3], c[1], a * 12);
        return d;
    }
    function Hc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 69;
        d.height = a * 120;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 30, a * 84);
        vd(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
        e.restore();
        ud(e, c[0]);
        e.save();
        e.translate(a * 30, a * 45);
        vd(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
        e.restore();
        ud(e, c[0]);
        e.save();
        e.translate(a * 30, a * 17);
        vd(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
        e.restore();
        ud(e, c[0]);
        e.save();
        e.translate(a * 30, a * 31);
        vd(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 36, a * 79.140625);
        vd(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
        e.restore();
        ud(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 35, a * 40.140625);
        vd(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
        e.restore();
        ud(e, c[3], c[4], a * 3);
        e.save();
        e.translate(a * 35, a * 12.140625);
        vd(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
        e.restore();
        ud(e, c[3], c[4], a * 3);
        e.save();
        e.translate(a * 34.5, a * 26.140625);
        vd(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
        e.restore();
        ud(e, c[3], c[4], a * 3);
        return d;
    }
    function Uc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 92;
        d.height = a * 108;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 10);
        e.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
        e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
        e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
        e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
        e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
        e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
        e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
        e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
        e.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
        e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, a * 10);
        e.closePath();
        ud(e, c[0], c[1], 4);
        return d;
    }
    function Yc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 81;
        d.height = a * 626;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        ud(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        ud(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 129);
        e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
        e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
        e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
        e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        ud(e, hg, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 475);
        e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
        e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
        e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
        e.closePath();
        ud(e, c[4], c[5], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 496);
        e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
        ud(e, undefined, c[5], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 521);
        e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
        ud(e, undefined, c[5], a * 8);
        return d;
    }
    function Kc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 43;
        d.height = a * 209;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 21, a * 102.5);
        vd(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
        e.restore();
        ud(e, c[0]);
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 10);
        e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
        e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
        e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 1);
        e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
        e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
        e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 146);
        e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
        e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
        e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
        e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
        e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
        e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
        e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
        e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 6);
        e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
        e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
        e.closePath();
        ud(e, c[0]);
        e.translate(0, a * -20);
        e.globalAlpha = 1;
        e.translate(0, a * 10);
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 21, a * 102.5);
        vd(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
        e.restore();
        ud(e, c[1], c[2], a * 4);
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 10);
        e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
        e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
        e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
        e.closePath();
        ud(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 1);
        e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
        e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
        e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
        e.closePath();
        ud(e, c[5], c[6], a * 4);
        e.translate(0, a * 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 146);
        e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
        e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
        e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
        e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
        e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
        e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
        e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
        e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
        e.closePath();
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 6);
        e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
        e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
        e.closePath();
        ud(e, c[8]);
        return d;
    }
    function Vc(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 450;
        f.height = b * 260;
        var a = qc(b * 1, ij, d);
        g.drawImage(a, b * 0, b * 0);
        if (e == 1) {
            g.translate(b * 100, b * 0);
            md(g, b * 113, b * 120, b * 66);
            ud(g, er, d[4], b * 13);
            a = eu(b * 0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
            g.rotate(0.7);
            g.drawImage(a, b * 133, b * -64);
            g.rotate(-0.7);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 70);
            g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
            g.closePath();
            ud(g, undefined, d[4], b * 13);
        } else if (e == 2) {
            g.translate(b * 100, b * 0);
            md(g, b * 113, b * 120, b * 66);
            ud(g, $q, d[4], b * 13);
            g.translate(b * 30, b * 40);
            g.save();
            g.translate(b * 83.5, b * 66.5);
            vd(g, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
            g.restore();
            ud(g, "#dff2f7", "#187484", b * 7);
            md(g, b * 22, b * 82, b * 12);
            ud(g, "#dff2f7", "#187484", b * 7);
            md(g, b * 145, b * 82, b * 12);
            ud(g, "#dff2f7", "#187484", b * 7);
            a = cc(b * 0.5, Wa, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 10, b * 85);
            a = cc(b * 0.5, p, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 50, b * 85);
            a = cc(b * 0.5, true, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 90, b * 85);
            a = mc(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 90, b * 105);
            a = mc(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 90, b * 105);
            a = mc(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 30, b * 125);
            a = mc(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 50, b * 115);
            a = mc(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 30, b * 100);
            a = mc(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 80, b * 120);
            a = mc(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 110, b * 125);
            a = mc(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 120, b * 105);
        } else if (e == 3) {
            g.translate(b * 100, b * 0);
            md(g, b * 113, b * 120, b * 66);
            ud(g, fk, d[4], b * 13);
            g.translate(b * 40, b * 50);
            g.save();
            g.translate(b * 71, b * 69);
            vd(g, b * -30, b * -42, b * 60, b * 84, b * 10);
            g.restore();
            ud(g, undefined, d[5], b * 4);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 42, b * 28);
            g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
            g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
            g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
            g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
            g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
            g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
            g.closePath();
            ud(g, d[5], d[5], b * 4);
            g.translate(b * -40, b * -50);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 70);
            g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
            g.closePath();
            ud(g, undefined, d[4], b * 13);
        } else if (e == 4) {
            g.scale(1, 1);
            g.translate(b * 70, b * 50);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 23, b * 6);
            g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
            ud(g, undefined, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 59, b * 10);
            g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
            ud(g, $q, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 7, b * 55);
            g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
            ud(g, undefined, d[5], b * 14);
            g.translate(b * 10, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 123, b * 16);
            g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
            g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
            g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
            ud(g, fk, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 72, b * 63);
            g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
            ud(g, undefined, d[5], b * 14);
            g.translate(b * 10, b * 10);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 141, b * 8);
            g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
            g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
            ud(g, hj, d[5], b * 14);
            g.translate(b * 10, b * -10);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 205, b * 124);
            g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
            g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
            g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
            ud(g, ug, d[5], b * 14);
        }
        return f;
    }
    function Xc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 501;
        d.height = a * 309;
        e.translate(0, a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 184);
        e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
        e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
        e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
        e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
        e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
        e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
        e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 116);
        e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
        e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
        e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
        e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
        e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
        e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
        e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
        e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
        e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
        e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
        e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
        e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
        e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
        e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
        e.closePath();
        ud(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 122, a * 191);
        e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
        e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
        e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
        e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
        e.closePath();
        ud(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 403, a * 182);
        e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
        e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
        e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
        e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
        e.closePath();
        ud(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155, a * 157);
        e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
        e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
        e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
        e.closePath();
        ud(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 347, a * 162);
        e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
        e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
        e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
        e.closePath();
        ud(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 134);
        e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
        e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
        e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
        e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
        e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
        e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
        e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
        e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
        e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
        e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
        e.closePath();
        ud(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 63, a * 98);
        e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
        e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
        e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
        e.closePath();
        ud(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 449, a * 97);
        e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
        e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
        e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
        e.closePath();
        ud(e, c[3], c[2], a * 10);
        return d;
    }
    function Zc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.translate(0, b * 3);
        f.globalAlpha = c ? 0.5 : 1;
        f.save();
        f.translate(b * 85, b * 95);
        f.rotate(1.4);
        pd(f, 7, b * 60, b * 10);
        f.restore();
        ud(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 82);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            pd(f, 3, b * 21, b * 4);
            ud(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(0.2);
        pd(f, 9, b * 60, b * 10);
        ud(f, d[3], d[4], b * 4);
        f.rotate(-0.32);
        pd(f, 9, b * 38, b * 10);
        ud(f, d[5], d[6], b * 4);
        f.rotate(0.68);
        pd(f, 9, b * 20, b * 8);
        ud(f, d[7], d[8], b * 6);
        f.restore();
        return e;
    }
    function $c(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 260;
        e.translate(a * 10, a * 10);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 9, a * 5);
            e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
            e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
            e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
            e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
            e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
            e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
            e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
            e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
            e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
            e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
            e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
            e.closePath();
            ud(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 5, a * 70);
            e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
            e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
            e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
            e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
            e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
            e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
            e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
            e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
            e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
            e.closePath();
            ud(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 19, a * 158);
            e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
            e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
            e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
            e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
            e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
            e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
            e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
            e.closePath();
            ud(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 183);
            e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
            e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
            e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
            e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
            e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
            e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
            e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
            e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
            e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
            e.closePath();
            ud(e, b[3], b[3], a * 32);
            md(e, a * 41, a * 30, a * 14.7648230602334);
            ud(e, b[3], b[3], a * 32);
            md(e, a * 369, a * 30, a * 15.556349186104045);
            ud(e, b[3], b[3], a * 32);
            md(e, a * 364, a * 190, a * 15.620499351813308);
            ud(e, b[3], b[3], a * 32);
            md(e, a * 41, a * 186, a * 15.556349186104045);
            ud(e, b[3], b[3], a * 32);
        } else if (c == 2) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 9, a * 5);
            e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
            e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
            e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
            e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
            e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
            e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
            e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
            e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
            e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
            e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
            e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
            e.closePath();
            ud(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 5, a * 70);
            e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
            e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
            e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
            e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
            e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
            e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
            e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
            e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
            e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
            e.closePath();
            ud(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 19, a * 158);
            e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
            e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
            e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
            e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
            e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
            e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
            e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
            e.closePath();
            ud(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 183);
            e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
            e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
            e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
            e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
            e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
            e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
            e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
            e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
            e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
            e.closePath();
            ud(e, b[3], b[3], a * 32);
            md(e, a * 41, a * 30, a * 14.7648230602334);
            ud(e, b[3], b[3], a * 32);
            md(e, a * 369, a * 30, a * 15.556349186104045);
            ud(e, b[3], b[3], a * 32);
            md(e, a * 364, a * 190, a * 15.620499351813308);
            ud(e, b[3], b[3], a * 32);
            md(e, a * 41, a * 186, a * 15.556349186104045);
            ud(e, b[3], b[3], a * 32);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9, a * 5);
        e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
        e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
        e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
        e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
        e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
        e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
        e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
        e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
        e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
        e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
        e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
        e.closePath();
        ud(e, b[1], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 70);
        e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
        e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
        e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
        e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
        e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
        e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
        e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
        e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
        e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
        e.closePath();
        ud(e, b[2], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 158);
        e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
        e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
        e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
        e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
        e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
        e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
        e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
        e.closePath();
        ud(e, b[1], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 183);
        e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
        e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
        e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
        e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
        e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
        e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
        e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
        e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
        e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
        e.closePath();
        ud(e, b[2], b[0], a * 12);
        md(e, a * 41, a * 30, a * 14.7648230602334);
        ud(e, b[2], b[0], a * 12);
        md(e, a * 369, a * 30, a * 15.556349186104045);
        ud(e, b[2], b[0], a * 12);
        md(e, a * 364, a * 190, a * 15.620499351813308);
        ud(e, b[2], b[0], a * 12);
        md(e, a * 41, a * 186, a * 15.556349186104045);
        ud(e, b[2], b[0], a * 12);
        return d;
    }
    function em(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 169;
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 139);
        e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
        e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
        e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.save();
        e.translate(a * 86.5, a * 81.5);
        vd(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
        e.restore();
        ud(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 84.5, a * 79);
        vd(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
        e.restore();
        ud(e, c[3], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 54);
        e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
        e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
        e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
        e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
        e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
        e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
        e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 28, a * 24);
        e.rotate(0);
        vd(e, a * -14, a * -14, a * 28, a * 28, a * 4);
        e.restore();
        ud(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143, a * 23);
        e.rotate(0);
        vd(e, a * -14, a * -14, a * 28, a * 28, a * 4);
        e.restore();
        ud(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 80);
        e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
        e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
        e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
        e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
        e.closePath();
        ud(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17, a * 112);
        e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
        e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
        e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
        e.closePath();
        ud(e, c[8], c[9], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 127, a * 111);
        e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
        e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
        e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
        e.closePath();
        ud(e, c[9]);
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 15, a * 117);
        e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
        e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
        e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
        e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 127);
        e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
        e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
        e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
        e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
        e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
        e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
        e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 27.5, a * 138.5);
        vd(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
        e.restore();
        ud(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143.5, a * 137);
        vd(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
        e.restore();
        ud(e, c[1], c[2], a * 5);
        return d;
    }
    function im(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 200;
        d.height = a * 200;
        e.save();
        e.translate(a * 112, a * 158);
        vd(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
        e.restore();
        ud(e, c[0]);
        e.save();
        e.translate(a * 170, a * 100);
        vd(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
        e.restore();
        ud(e, c[0]);
        return d;
    }
    function tm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 88;
        d.height = a * 647;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 45, a * 384.5);
        vd(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
        e.restore();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 572);
        e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
        e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
        e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
        e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 587);
        e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
        e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
        e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 113);
        e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
        e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
        e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
        e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 139);
        e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
        e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
        e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 29);
        e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
        e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
        e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
        e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 54);
        e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
        e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
        e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
        e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
        e.closePath();
        ud(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 45, a * 384.5);
        vd(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
        e.restore();
        ud(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 572);
        e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
        e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
        e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
        e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
        e.closePath();
        ud(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 587);
        e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
        e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
        e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
        e.closePath();
        ud(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 113);
        e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
        e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
        e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
        e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
        e.closePath();
        ud(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 139);
        e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
        e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
        e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
        e.closePath();
        ud(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 29);
        e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
        e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
        e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
        e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
        e.closePath();
        ud(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 54);
        e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
        e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
        e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
        e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
        e.closePath();
        ud(e, c[8]);
        return d;
    }
    function nm(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 3);
        f.save();
        f.translate(b * 85, b * 95);
        f.rotate(1.4);
        pd(f, 7, b * 60, b * 10);
        f.restore();
        ud(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 82);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            pd(f, 3, b * 21, b * 4);
            ud(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(1);
        pd(f, 8, b * 60, b * 10);
        ud(f, d[3], d[4], b * 4);
        f.rotate(0.56);
        pd(f, 8, b * 40, b * 10);
        ud(f, d[5], d[6], b * 4);
        f.rotate(0.28);
        pd(f, 8, b * 28, b * 8);
        ud(f, d[7]);
        f.restore();
        return e;
    }
    function om(a, b, c) {
        var d = (e = document.createElement("canvas")).getContext("2d");
        if (c == 0) {
            e.width = a * 566;
            e.height = a * 429;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 312.625, a * 39.046875);
            d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
            d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
            d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
            d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
            d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
            d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
            d.closePath();
            ud(d, b[0]);
        } else if (c == 1) {
            d = (e = document.createElement("canvas")).getContext("2d");
            e.width = a * 511;
            e.height = a * 408;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 141.625, a * 49.296875);
            d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
            d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
            d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
            d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
            d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
            d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
            d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
            d.closePath();
            ud(d, b[0]);
        } else if (c == 2) {
            var e;
            d = (e = document.createElement("canvas")).getContext("2d");
            e.width = a * 504;
            e.height = a * 408;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 153.625, a * 46.296875);
            d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
            d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
            d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
            d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
            d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
            d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
            d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
            d.closePath();
            ud(d, b[0]);
        }
        return e;
    }
    function am(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 345;
        d.height = a * 250;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 58);
        e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
        e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
        e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
        e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
        e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
        e.closePath();
        ud(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 108, a * 51);
        e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
        e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
        e.closePath();
        ud(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 249, a * 27);
        e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
        e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
        e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
        e.closePath();
        ud(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 78);
        e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
        e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
        e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
        e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
        e.closePath();
        ud(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 105);
        e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
        e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
        e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
        e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
        e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
        e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
        e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
        e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
        e.closePath();
        ud(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 48, a * 130);
        e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
        e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
        e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
        e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
        e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
        e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
        e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
        e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
        e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
        e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
        e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
        e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
        e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
        e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
        e.closePath();
        ud(e, c[1], c[2], a * 8);
        e.globalCompositeOperation = "destination-out";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 158);
        e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
        e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
        e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
        e.closePath();
        ud(e, c[7], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 215, a * 146);
        e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
        e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
        e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
        e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
        e.closePath();
        ud(e, c[7], c[8], a * 8);
        e.globalCompositeOperation = "source-over";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 158);
        e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
        e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
        e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
        e.closePath();
        ud(e, sj, c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 215, a * 146);
        e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
        e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
        e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
        e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
        e.closePath();
        ud(e, jl, c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 66);
        e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
        e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
        e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
        e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
        e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
        e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
        e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
        e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
        e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
        e.closePath();
        ud(e, c[7], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 185);
        e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
        e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
        e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
        e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
        e.closePath();
        ud(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226, a * 186);
        e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
        e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
        e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
        e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
        e.closePath();
        ud(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 172, a * 110);
        e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
        e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
        e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
        e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
        e.closePath();
        ud(e, c[3], c[4], a * 8);
        return d;
    }
    function rm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 169;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17, a * 112);
        e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
        e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
        e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
        e.closePath();
        ud(e, c[8], c[9], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 127, a * 111);
        e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
        e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
        e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
        e.closePath();
        ud(e, c[9]);
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 15, a * 117);
        e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
        e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
        e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
        e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 127);
        e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
        e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
        e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
        e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
        e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
        e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
        e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 27.5, a * 138.5);
        vd(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
        e.restore();
        ud(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143.5, a * 137);
        vd(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
        e.restore();
        ud(e, c[1], c[2], a * 5);
        return d;
    }
    function sm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 151;
        d.height = a * 80;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 54);
        e.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, a * 13);
        e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, a * 16);
        e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
        e.closePath();
        ud(e, c[2], c[3], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 40);
        e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
        e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
        e.closePath();
        ud(e, c[0], c[1], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 33);
        e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
        e.bezierCurveTo(a * 19, a * 49, a * 19, a * 49, a * 15, a * 54);
        e.bezierCurveTo(a * 4, a * 43, a * 10, a * 35, a * 20, a * 32);
        e.closePath();
        ud(e, c[0], c[1], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 52);
        e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
        e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
        e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
        e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * 18, a * 54);
        e.closePath();
        ud(e, c[0], c[1], 4);
        return d;
    }
    function hm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 108;
        d.height = a * 669;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 54, a * 389.5);
        vd(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
        e.restore();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 579);
        e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
        e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
        e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
        e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141);
        e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
        e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
        e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
        e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
        e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 152);
        e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
        e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
        e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 28);
        e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
        e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
        e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
        e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 53);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
        e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
        e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
        e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
        e.closePath();
        ud(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 54, a * 389.5);
        e.rotate(0);
        vd(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
        e.restore();
        ud(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 579);
        e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
        e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
        e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
        e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
        e.closePath();
        ud(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141);
        e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
        e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
        e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
        e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
        e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
        e.closePath();
        ud(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 152);
        e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
        e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
        e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
        e.closePath();
        ud(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 28);
        e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
        e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
        e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
        e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
        e.closePath();
        ud(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 53);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
        e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
        e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
        e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
        e.closePath();
        ud(e, c[8]);
        return d;
    }
    function lm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 106;
        d.height = a * 681;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 52.5, a * 395);
        e.rotate(0);
        vd(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
        e.restore();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 588);
        e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
        e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
        e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 135);
        e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
        e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
        e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
        e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
        e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 150);
        e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
        e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
        e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
        e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
        e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 39);
        e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
        e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
        e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 64);
        e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
        e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
        e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
        e.closePath();
        ud(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 52.5, a * 395);
        e.rotate(0);
        vd(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
        e.restore();
        ud(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 588);
        e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
        e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
        e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
        e.closePath();
        ud(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 135);
        e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
        e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
        e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
        e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
        e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
        e.closePath();
        ud(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 150);
        e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
        e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
        e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
        e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
        e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
        e.closePath();
        ud(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 39);
        e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
        e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
        e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
        e.closePath();
        ud(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 64);
        e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
        e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
        e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
        e.closePath();
        ud(e, c[8]);
        return d;
    }
    function gm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 115;
        d.height = a * 585;
        e.scale(-1, 1);
        e.translate(a * -110, 0);
        e.translate(a * 10, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 51.5, a * 342);
        vd(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
        e.restore();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 54, a * 83);
        e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
        e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
        e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 97);
        e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
        e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
        e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
        e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 176);
        e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
        e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 176);
        e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
        e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 403);
        e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
        e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
        e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 67);
        e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
        e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
        e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 125);
        e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
        e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
        e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
        e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 171);
        e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
        e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
        e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 68);
        e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
        e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
        e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
        e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
        e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 71, a * 172);
        e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
        e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
        e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 151);
        e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
        e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
        e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
        e.closePath();
        ud(e, c[0]);
        e.translate(a * -10, a * -10);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 51.5, a * 342);
        vd(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
        e.restore();
        ud(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 54, a * 83);
        e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
        e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
        e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
        e.closePath();
        ud(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 97);
        e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
        e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
        e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
        e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
        e.closePath();
        ud(e, c[5], c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 403);
        e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
        e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
        e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
        e.closePath();
        ud(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 427);
        e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
        ud(e, undefined, c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 448);
        e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
        ud(e, jl, c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 176);
        e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
        e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
        e.closePath();
        ud(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 176);
        e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
        e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
        e.closePath();
        ud(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 67);
        e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
        e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
        e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
        e.closePath();
        ud(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 125);
        e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
        e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
        e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
        e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
        e.closePath();
        ud(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 171);
        e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
        e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
        e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
        e.closePath();
        ud(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 68);
        e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
        e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
        e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
        e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
        e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
        e.closePath();
        ud(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 71, a * 172);
        e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
        e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
        e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
        e.closePath();
        ud(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 151);
        e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
        e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
        e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
        e.closePath();
        ud(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 113);
        e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
        e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
        e.closePath();
        ud(e, c[3], c[4], a * 6);
        return d;
    }
    function um(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 165;
        d.height = a * 123;
        e.save();
        e.translate(a * 81, a * 65);
        vd(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
        e.restore();
        ud(e, c[0]);
        e.save();
        e.translate(a * 81, a * 58);
        vd(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
        e.restore();
        ud(e, c[1], c[2], 4);
        e.save();
        e.translate(a * 81, a * 58);
        vd(e, a * -69, a * -47, a * 138, a * 93, a * 15);
        e.restore();
        ud(e, c[3], c[4], 4);
        e.save();
        e.translate(a * 79, a * 54);
        vd(e, a * -34, a * -40, a * 68, a * 88, a * 13);
        e.restore();
        ud(e, ug, c[5], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 13);
        e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
        e.closePath();
        ud(e, mo, c[6], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 13);
        e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
        e.closePath();
        ud(e, kr, c[6], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 6);
        e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
        e.closePath();
        ud(e, Xa, c[7], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123, a * 6);
        e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
        e.closePath();
        ud(e, undefined, c[7], 4);
        e.save();
        e.translate(a * 79, a * 113);
        vd(e, a * -18, a * -2, a * 36, a * 4, a * 20);
        e.restore();
        ud(e, er, c[8], 4);
        e.save();
        e.translate(a * 75, a * 118);
        vd(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
        e.restore();
        ud(e, c[8]);
        return d;
    }
    function bm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 149;
        c.height = a * 153;
        d.globalAlpha = 0.5;
        md(d, a * 74.5, a * 85, a * 66);
        ud(d, b[0]);
        d.globalAlpha = 1;
        md(d, a * 75.5, a * 72.5, a * 67);
        ud(d, b[1], b[2], a * 4);
        md(d, a * 75.5, a * 73.5, a * 54);
        ud(d, b[3]);
        d.globalAlpha = 0.5;
        md(d, a * 74.5, a * 80.5, a * 39);
        ud(d, b[4]);
        d.globalAlpha = 1;
        md(d, a * 74.5, a * 74.5, a * 37);
        ud(d, b[5]);
        return c;
    }
    function dm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 253;
        c.height = a * 260;
        d.globalAlpha = 0.5;
        md(d, a * 126.5, a * 134, a * 119);
        ud(d, b[0]);
        d.globalAlpha = 1;
        md(d, a * 126.5, a * 124, a * 119);
        ud(d, b[1], b[2], a * 4);
        md(d, a * 126.5, a * 127, a * 100);
        ud(d, b[3]);
        d.globalAlpha = 0.5;
        md(d, a * 126.5, a * 135, a * 81);
        ud(d, b[0]);
        d.globalAlpha = 1;
        md(d, a * 126.5, a * 125, a * 84);
        ud(d, b[4], b[5], a * 4);
        md(d, a * 126.5, a * 125, a * 61);
        ud(d, b[6], b[7], a * 4);
        d.globalAlpha = 0.5;
        md(d, a * 126.5, a * 134, a * 40);
        ud(d, b[8]);
        d.globalAlpha = 1;
        md(d, a * 126.5, a * 125, a * 40);
        ud(d, b[9]);
        return c;
    }
    function vm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 135;
        d.height = a * 120;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 3.5, a * 55.25);
        e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
        e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
        e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
        e.closePath();
        ud(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 6.5, a * 43.25);
        e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
        e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
        e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
        e.closePath();
        ud(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120.5, a * 62.25);
        e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
        e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
        e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
        e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
        e.closePath();
        ud(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.5, a * 27);
        e.bezierCurveTo(a * 48.5, a * 5, a * 93.5, a * 14, a * 118.5, a * 26);
        e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
        e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
        e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
        e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
        e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
        e.closePath();
        ud(e, c[2], c[3], a * 7);
        return d;
    }
    function cm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 173;
        c.height = a * 178;
        d.globalAlpha = 0.5;
        md(d, a * 86.5, a * 98, a * 80);
        ud(d, b[0]);
        d.globalAlpha = 1;
        md(d, a * 86.5, a * 89, a * 81);
        ud(d, b[1], b[2], a * 4);
        md(d, a * 86.5, a * 86, a * 59);
        ud(d, b[3], b[4], a * 4);
        d.globalAlpha = 0.5;
        md(d, a * 86.5, a * 95, a * 34);
        ud(d, b[0]);
        d.globalAlpha = 1;
        md(d, a * 86.5, a * 89, a * 34);
        ud(d, b[5]);
        return c;
    }
    function mm(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 170;
        var a = b * 172;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j + b * 7);
        f.globalAlpha = c ? 0.5 : 0;
        md(f, 0, 0, b * 60);
        ud(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, b * -7);
        f.save();
        for (var h = 0; h < 10; h++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            pd(f, 3, b * 20, b * 4);
            ud(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.restore();
        md(f, 0, 0, b * 60);
        ud(f, d[3], d[4], b * 4);
        md(f, 0, 0, b * 40);
        ud(f, d[5]);
        md(f, 0, 0, b * 25);
        ud(f, d[6], d[7], b * 8);
        return e;
    }
    function pm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 304;
        d.height = a * 278;
        e.translate(a * 10, a * 25);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 137);
        e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
        e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
        e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 52);
        e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
        e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
        e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
        e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
        e.closePath();
        ud(e, c[0]);
        e.translate(a * -10, a * -25);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 137);
        e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
        e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
        e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
        e.closePath();
        ud(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 52);
        e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
        e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
        e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
        e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
        e.closePath();
        ud(e, c[3], c[4], a * 15);
        return d;
    }
    function Cm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 138;
        d.height = a * 133;
        e.globalAlpha = b ? 0.3 : 1;
        e.translate(0, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 79.640625);
        e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
        e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
        e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
        e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
        e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
        e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 82.640625);
        e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
        e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
        e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
        e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
        e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 73.640625);
        e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
        e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
        e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
        e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
        e.closePath();
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72, a * 28.640625);
        e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
        e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
        e.closePath();
        ud(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 26.640625);
        e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
        ud(e, er, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 26.640625);
        e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
        ud(e, Qa, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 79.640625);
        e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
        e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
        e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
        e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
        e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
        e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
        e.closePath();
        ud(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 82.640625);
        e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
        e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
        e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
        e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
        e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
        e.closePath();
        ud(e, c[3], c[4], a * 4);
        return d;
    }
    function Tm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 100;
        d.height = a * 648;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 50.5, a * 349.5);
        vd(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
        e.restore();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 538);
        e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
        e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
        e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
        e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 554);
        e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 569);
        e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
        e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
        e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
        e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 581);
        e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
        e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
        e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
        e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 106);
        e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
        e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
        e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
        e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 27);
        e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
        e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
        e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 43);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
        e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
        e.closePath();
        ud(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 50.5, a * 349.5);
        vd(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
        e.restore();
        ud(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 538);
        e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
        e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
        e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
        e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
        e.closePath();
        ud(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 554);
        e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
        e.closePath();
        ud(e, undefined, c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 569);
        e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
        e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
        e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
        e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
        e.closePath();
        ud(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 581);
        e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
        e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
        e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
        e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
        e.closePath();
        ud(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 106);
        e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
        e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
        e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
        e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
        e.closePath();
        ud(e, c[5], c[6], a * 8);
        e.save();
        e.translate(a * -46, a * -50);
        e.scale(2, 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 80);
        e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
        e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
        e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
        e.closePath();
        ud(e, c[8]);
        e.restore();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 27);
        e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
        e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
        e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
        e.closePath();
        ud(e, c[8], c[9], a * 8);
        e.scale(2, 2);
        e.translate(a * -23, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 57, a * 69);
        e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
        e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
        e.closePath();
        ud(e, c[10]);
        return d;
    }
    const fm = 1;
    const zm = 3;
    function ym(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 139;
        d.height = a * 135;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 77);
        e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
        e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
        e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
        e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
        e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 37);
        e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
        e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
        e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
        e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
        e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 63);
        e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
        e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
        e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
        e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
        e.closePath();
        ud(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 77);
        e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
        e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
        e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
        e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
        e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
        e.closePath();
        ud(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 37);
        e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
        e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
        e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
        e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
        e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
        e.closePath();
        ud(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 63);
        e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
        e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
        e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
        e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
        e.closePath();
        ud(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 38);
        e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
        e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
        e.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * 10);
        e.closePath();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 65);
        e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
        e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
        e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
        e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
        e.closePath();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 69);
        e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
        e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
        e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
        e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
        e.closePath();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 69);
        e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
        e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
        e.closePath();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 38);
        e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
        e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
        e.closePath();
        ud(e, c[2]);
        return d;
    }
    function wm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 280;
        d.translate(a * -100, a * -20);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 228.5, a * 331.953125);
        d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
        d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
        d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
        d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
        d.closePath();
        ud(d, b[0]);
        return c;
    }
    function Pm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 85;
        c.height = a * 145;
        d.translate(a * -165, a * -95);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217, a * 103);
        d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
        d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
        d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
        d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
        d.closePath();
        ud(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 231, a * 163);
        d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
        d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
        d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
        d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
        d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
        d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
        d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
        d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
        d.closePath();
        ud(d, b[2], b[3], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 234, a * 154);
        d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
        d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
        d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
        d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
        d.closePath();
        ud(d, b[2]);
        return c;
    }
    function Am(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 20;
        c.height = a * 35;
        vd(d, 0, 0, 20, 35, 7);
        ud(d, b[0]);
        return c;
    }
    function km(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 161;
        c.height = a * 190;
        d.globalAlpha = 0.5;
        d.translate(0, 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        ud(d, b[0]);
        d.globalAlpha = 1;
        d.translate(0, -8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        ud(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 28, a * 63);
        d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
        d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
        d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
        d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
        d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
        d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
        d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
        d.closePath();
        ud(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 99, a * 55);
        d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
        d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
        d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
        d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
        d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
        d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
        d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
        d.closePath();
        ud(d, b[3]);
        md(d, a * 103, a * 110, a * 11);
        ud(d, b[4]);
        md(d, a * 55, a * 111, a * 11);
        ud(d, b[4]);
        md(d, a * 99, a * 107, a * 5);
        ud(d, b[1]);
        md(d, a * 51, a * 108, a * 5);
        ud(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31, a * 121);
        d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
        d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
        d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
        d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
        d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
        d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
        d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
        d.closePath();
        ud(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.translate(-2, 0);
        d.moveTo(a * 71, a * 162);
        d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
        d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
        d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
        d.closePath();
        ud(d, b[3]);
        d.translate(2, 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        ud(d, undefined, b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 25, a * 63);
        d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
        d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
        d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
        ud(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 91, a * 53);
        d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
        d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
        d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
        ud(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31, a * 63);
        d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
        d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
        d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
        d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
        d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
        d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
        d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
        d.closePath();
        ud(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 99, a * 55);
        d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
        d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
        d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
        d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
        d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
        d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
        d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
        d.closePath();
        ud(d, b[3]);
        return c;
    }
    function xm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 48;
        c.height = a * 47;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 7.1875, a * 25.434661865234375);
        d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
        d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
        d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
        d.closePath();
        ud(d, b[0]);
        return c;
    }
    function Jm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 300;
        d.translate(a * -200, a * -40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 344, a * 18.40625);
        d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
        d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
        d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
        d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
        d.closePath();
        ud(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 335, a * 38.072906494140625);
        d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
        d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
        d.closePath();
        ud(d, b[0]);
        return c;
    }
    function Mm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 320;
        d.translate(a * -60, a * -15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 188.5, a * 3.953125);
        d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
        d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
        d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
        d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
        d.closePath();
        ud(d, b[0]);
        return c;
    }
    function Bm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 142;
        d.height = a * 118;
        e.save();
        e.translate(a * 70.16665649414062, a * 38.20831298828125);
        vd(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
        e.restore();
        ud(e, c[0], c[1], a * 4);
        e.save();
        e.translate(a * 70, a * 42.70831298828125);
        vd(e, a * -61, a * -20, a * 122, a * 40, a * 20);
        e.restore();
        ud(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123, a * 70.375);
        e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
        e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
        e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
        e.closePath();
        ud(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 11, a * 68.375);
        e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
        e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
        e.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, a * 17, a * 68.375);
        e.closePath();
        ud(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46, a * 32.375);
        e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
        e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
        e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
        e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
        e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
        e.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
        e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
        e.closePath();
        ud(e, c[2], c[1], a * 4);
        md(e, a * 71, a * 44.375, a * 16.55294535724685);
        ud(e, c[2], c[1], a * 4);
        md(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
        ud(e, c[2], c[1], a * 4);
        return d;
    }
    function Dm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 33;
        c.height = a * 35;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 12.75, a * 7.1328125);
        d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
        d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
        d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
        d.closePath();
        ud(d, b[0]);
        return c;
    }
    function Im(a) {
        const b = function () {
            for (let a = 0; a < 5; a++) {
                hc.addEventListener("click", function () {
                    b();
                });
            }
        };
        b();
    }
    function Em(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 100;
        c.height = a * 100;
        d.globalAlpha = 0.5;
        d.fillStyle = b[0];
        d.fillRect(0, 0, c.width, c.height);
        return c;
    }
    function Qm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 147;
        c.height = a * 172;
        d.globalAlpha = 0.5;
        d.translate(0, a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 8, a * 50);
        d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
        d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
        d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
        d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
        d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
        d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
        d.closePath();
        ud(d, b[0]);
        d.translate(0, a * -8);
        d.globalAlpha = 1;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 8, a * 50);
        d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
        d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
        d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
        d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
        d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
        d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
        d.closePath();
        ud(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 14, a * 57);
        d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
        d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
        ud(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 93, a * 47);
        d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
        d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
        ud(d, b[1], b[2], a * 4);
        md(d, a * 51, a * 91, a * 9);
        ud(d, b[3]);
        md(d, a * 95, a * 91, a * 9);
        ud(d, b[3]);
        md(d, a * 91, a * 89, a * 4);
        ud(d, b[4]);
        md(d, a * 47, a * 89, a * 4);
        ud(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 54, a * 133);
        d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
        d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
        d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
        d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
        d.closePath();
        ud(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 65.25, a * 135);
        d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
        d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
        d.closePath();
        ud(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 74, a * 145);
        d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
        d.closePath();
        ud(d, undefined, b[6], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 19, a * 58);
        d.bezierCurveTo(a * 10, a * 38, a * 18, a * 33, a * 28, a * 34);
        d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
        d.closePath();
        ud(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 100, a * 51);
        d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
        d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
        d.closePath();
        ud(d, b[6]);
        return c;
    }
    function _m(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 300;
        d.translate(a * -80, -20);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 200.5, a * 14.953125);
        d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
        d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
        d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
        d.closePath();
        ud(d, b[0]);
        return c;
    }
    function Rm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 271;
        c.height = a * 366;
        d.globalAlpha = 0.5;
        d.translate(0, a * 10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        ud(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        ud(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        ud(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        ud(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        ud(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        ud(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        ud(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        ud(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        ud(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        ud(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        ud(d, b[0]);
        d.globalAlpha = 1;
        d.translate(0, a * -10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        ud(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        ud(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        ud(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        ud(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        ud(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        ud(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        ud(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        ud(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        ud(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        ud(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        ud(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        ud(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        ud(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        ud(d, b[2]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        ud(d, b[1]);
        md(d, a * 102, a * 269, a * 11);
        ud(d, b[3]);
        md(d, a * 98, a * 266, a * 5);
        ud(d, b[6]);
        md(d, a * 168, a * 269, a * 11);
        ud(d, b[3]);
        md(d, a * 164, a * 266, a * 5);
        ud(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        ud(d, b[2]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 235);
        d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
        d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
        d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
        d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
        d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
        d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
        d.closePath();
        ud(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 132, a * 219);
        d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
        d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
        d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
        d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
        d.closePath();
        ud(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 179);
        d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
        d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
        d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
        d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
        d.closePath();
        ud(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 143);
        d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
        d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
        d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
        d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
        d.closePath();
        ud(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 115);
        d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
        d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
        d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
        d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
        d.closePath();
        ud(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 94);
        d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
        d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
        d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
        d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
        d.closePath();
        ud(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130, a * 279);
        d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
        d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
        d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
        d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
        d.closePath();
        ud(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 147, a * 303);
        d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
        d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
        d.closePath();
        ud(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 303);
        d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
        d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
        d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
        d.closePath();
        ud(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 89, a * 280);
        d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
        d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
        d.closePath();
        ud(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 94, a * 290);
        d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
        d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
        d.closePath();
        ud(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 163, a * 295);
        d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
        d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
        d.closePath();
        ud(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 172, a * 286);
        d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
        d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
        d.closePath();
        ud(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        ud(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        ud(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        ud(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        ud(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        ud(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        ud(d, b[7]);
        return c;
    }
    function Fm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 187;
        d.height = a * 119;
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, 3);
        e.moveTo(a * 53, a * 45);
        e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
        e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
        e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
        e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
        e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
        e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
        e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
        e.closePath();
        ud(e, c[5]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, -3);
        e.moveTo(a * 53, a * 45);
        e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
        e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
        e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
        e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
        e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
        e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
        e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
        e.closePath();
        ud(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 151, a * 60);
        e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
        e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
        e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
        e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
        e.closePath();
        ud(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 53);
        e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
        e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
        e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
        e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
        e.closePath();
        ud(e, c[2], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 36);
        e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
        e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
        e.closePath();
        ud(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 43);
        e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
        ud(e, $q, c[1], a * 4);
        md(e, a * 58, a * 50, a * 5);
        ud(e, c[4]);
        md(e, a * 43, a * 65, a * 5);
        ud(e, c[4]);
        md(e, a * 58, a * 73, a * 5);
        ud(e, c[4]);
        md(e, a * 58, a * 50, a * 2);
        ud(e, c[5]);
        md(e, a * 43, a * 65, a * 2);
        ud(e, c[5]);
        md(e, a * 58, a * 73, a * 2);
        ud(e, c[5]);
        return d;
    }
    function jm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 142;
        d.height = a * 118;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 27.3671875);
        e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
        e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
        e.closePath();
        ud(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 23.3671875);
        e.bezierCurveTo(a * 17, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
        e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
        e.closePath();
        ud(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 70.5, a * 34.8671875);
        e.rotate(0);
        vd(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
        e.restore();
        ud(e, c[0], c[1], a * 4);
        e.save();
        e.translate(a * 71, a * 40.8671875);
        e.rotate(0);
        vd(e, a * -49, a * -12.5, a * 98, a * 25, a * 15);
        e.restore();
        ud(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
        e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
        e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
        e.closePath();
        ud(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
        e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
        e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
        e.closePath();
        ud(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.800003051757812, a * 49.15625);
        e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
        e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
        e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
        e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
        e.closePath();
        ud(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
        e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
        e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
        e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
        e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
        e.closePath();
        ud(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 56.3671875);
        e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
        e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
        e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
        e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
        e.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
        e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
        e.closePath();
        ud(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 68.30000305175781, a * 41.45625305175781);
        e.rotate(0.76);
        vd(e, a * -20.5, a * -20.5, a * 41, a * 41, a * 10);
        e.restore();
        ud(e, lh, c[5], a * 4);
        e.save();
        e.translate(a * 68.80000305175781, a * 44.45625305175781);
        e.rotate(0.76);
        vd(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
        e.restore();
        ud(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 69.80000305175781, a * 44.556243896484375);
        e.rotate(0.76);
        vd(e, a * -10, a * -10, a * 20, a * 20, a * 5);
        e.restore();
        ud(e, c[6], c[7], a * 4);
        return d;
    }
    function Gm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 330;
        d.translate(a * -60, a * -10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 188.5, a * 7.953125);
        d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
        d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
        d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
        d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
        d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
        d.closePath();
        ud(d, b[0]);
        return c;
    }
    function Lm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 106;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 75);
        e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
        e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
        e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
        e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
        e.closePath();
        ud(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 38, a * 46);
        e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
        e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
        e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
        e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
        e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
        e.closePath();
        ud(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 75);
        e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
        e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
        e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
        e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
        e.closePath();
        ud(e, undefined, c[2], a * 4);
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        ud(e, c[10], c[10], a * 4);
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 43);
        e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
        e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
        e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 43);
        e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
        e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
        e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 19);
        e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
        e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
        e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
        e.closePath();
        ud(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 148, a * 18);
        e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
        e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
        e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
        e.closePath();
        ud(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 43);
        e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
        e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
        e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
        e.closePath();
        ud(e, ih, c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 43);
        e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
        e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
        e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
        e.closePath();
        ud(e, undefined, c[4], a * 4);
        e.save();
        e.translate(a * 87, a * 34.5);
        e.rotate(0);
        vd(e, a * -8, a * -10.5, a * 16, a * 21, a * 10);
        e.restore();
        ud(e, c[7], c[2], a * 4);
        e.save();
        e.translate(a * 87, a * 57);
        e.rotate(0);
        vd(e, a * -8, a * -23, a * 16, a * 46, a * 10);
        e.restore();
        ud(e, c[8], c[2], a * 4);
        md(e, a * 87, a * 39, a * 4.123105625617661);
        ud(e, c[9], c[2], a * 4);
        md(e, a * 87, a * 60, a * 4.242640687119285);
        ud(e, c[9], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        ud(e, c[8], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 69);
        e.bezierCurveTo(a * 13, a * 77, a * 16, a * 74, a * 27, a * 80);
        e.closePath();
        ud(e, c[9], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 70);
        e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
        e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
        e.closePath();
        ud(e, c[9], c[2], a * 4);
        md(e, a * 50, a * 80, a * 5);
        ud(e, c[9], c[2], a * 4);
        md(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
        ud(e, c[9], c[2], a * 4);
        md(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
        ud(e, c[9], c[2], a * 4);
        return d;
    }
    function Wm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 180;
        d.height = a * 120;
        e.translate(a * -65, a * -35);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 150.5, a * 63.84375);
        vd(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
        e.restore();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 75.34375);
        e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
        e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
        e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206.5, a * 71.34375);
        e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
        e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
        e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 136.5, a * 75.34375);
        e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
        e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
        e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
        e.closePath();
        ud(e, c[0]);
        e.save();
        e.translate(a * 152.5, a * 80.84375);
        e.rotate(3.12);
        vd(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 150.5, a * 63.84375);
        vd(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
        e.restore();
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 75.34375);
        e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
        e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
        e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
        e.closePath();
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206.5, a * 71.34375);
        e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
        e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
        e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
        e.closePath();
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 136.5, a * 75.34375);
        e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
        e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
        e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
        e.closePath();
        ud(e, c[1], c[2], a * 4);
        e.save();
        e.translate(a * 152.5, a * 80.84375);
        e.rotate(3.12);
        vd(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
        e.restore();
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.5, a * 73.34375);
        e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
        e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
        e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
        e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
        e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
        e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
        e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137.5, a * 65.34375);
        e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 221.5, a * 85.34375);
        e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
        e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 89.34375);
        e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
        e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 208.5, a * 104.34375);
        e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
        e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 117.34375);
        e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
        e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107.5, a * 51.34375);
        e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
        e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
        e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 170.5, a * 52.34375);
        e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
        e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
        e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 69.34375);
        e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
        e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
        e.closePath();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222.5, a * 75.34375);
        e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
        e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
        e.closePath();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 100.34375);
        e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
        e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
        e.closePath();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112.5, a * 48.34375);
        e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
        e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
        e.closePath();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216.5, a * 109.34375);
        e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
        e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
        e.closePath();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86.5, a * 133.34375);
        e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
        e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
        e.closePath();
        ud(e, c[2]);
        return d;
    }
    function Om(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 85;
        c.height = a * 145;
        d.translate(a * -20, a * -95);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 50, a * 105);
        d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
        d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
        d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
        d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
        d.closePath();
        ud(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44, a * 106);
        d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
        d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
        d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
        d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
        d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
        d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
        d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
        d.closePath();
        ud(d, b[2], b[3], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 30, a * 159);
        d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
        d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
        d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
        d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
        d.closePath();
        ud(d, b[2]);
        return c;
    }
    const Nm = 2;
    function qm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 161;
        d.height = a * 184;
        e.translate(0, a * 10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.5, a * 34.609375);
        e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
        e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
        e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
        e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
        e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
        e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
        e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
        e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
        e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
        e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45.5, a * 144.609375);
        e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
        e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
        e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
        ud(e, c[0]);
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45.5, a * 144.609375);
        e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
        e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
        e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
        ud(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.5, a * 34.609375);
        e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
        e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
        e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
        e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
        e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
        e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
        e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
        e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
        e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
        e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
        e.closePath();
        ud(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104.5, a * 35.609375);
        e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
        e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
        e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
        ud(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.5, a * 72.609375);
        e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
        ud(e, undefined, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60.5, a * 85.609375);
        e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
        ud(e, undefined, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68.5, a * 122.609375);
        e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 142.5, a * 18.609375);
        e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
        e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 146.5, a * 61.50892639160156);
        e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
        e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
        e.closePath();
        ud(e, c[3]);
        return d;
    }
    function Hm(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 501;
        f.height = b * 564;
        g.scale(0.5, 0.5);
        g.translate(b * 240, b * 255);
        g.rotate(e);
        g.globalAlpha = c ? 0.5 : 0.2;
        md(g, b * 174, b * 87.984375, b * 20.8806130178211);
        ud(g, d[0], d[0], b * 8);
        md(g, b * 174, b * 87.984375, b * 12.165525060596439);
        ud(g, d[0], d[0], b * 8);
        md(g, b * 174, b * 87.484375, b * 6);
        ud(g, d[0]);
        md(g, b * 30, b * 87.984375, b * 20.8806130178211);
        ud(g, d[0], d[0], b * 4);
        md(g, b * 30, b * 87.984375, b * 12.165525060596439);
        ud(g, d[0], d[0], b * 4);
        md(g, b * 30, b * 87.484375, b * 6);
        ud(g, d[0]);
        md(g, b * 100, b * 30, b * 20.8806130178211);
        ud(g, d[0], d[0], b * 4);
        md(g, b * 100, b * 30, b * 12.165525060596439);
        ud(g, d[0], d[0], b * 4);
        md(g, b * 100, b * 30, b * 6);
        ud(g, d[0]);
        md(g, b * 100, b * 130, b * 20.8806130178211);
        ud(g, d[0], d[0], b * 4);
        md(g, b * 100, b * 130, b * 12.165525060596439);
        ud(g, d[0], d[0], b * 4);
        md(g, b * 100, b * 130, b * 6);
        ud(g, d[0]);
        g.save();
        g.translate(b * 102, b * 81.984375);
        g.rotate(0);
        vd(g, b * -74, b * -57, b * 148, b * 114, b * 23);
        g.restore();
        ud(g, d[0], d[0], b * 4);
        g.save();
        g.translate(b * 101, b * 64.984375);
        g.rotate(0);
        vd(g, b * -33, b * -10, b * 66, b * 20, b * 15);
        g.restore();
        ud(g, d[0], d[0], b * 4);
        g.save();
        g.translate(b * 102, b * 63.484375);
        g.rotate(0);
        vd(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
        g.restore();
        g.translate(5, -5);
        g.globalAlpha = 1;
        md(g, b * 174, b * 87.984375, b * 20.8806130178211);
        ud(g, d[1], d[3], b * 8);
        md(g, b * 174, b * 87.984375, b * 12.165525060596439);
        ud(g, d[1], d[3], b * 8);
        md(g, b * 174, b * 87.484375, b * 6);
        ud(g, d[2]);
        md(g, b * 30, b * 87.984375, b * 20.8806130178211);
        ud(g, d[1], d[3], b * 8);
        md(g, b * 30, b * 87.984375, b * 12.165525060596439);
        ud(g, d[1], d[3], b * 8);
        md(g, b * 30, b * 87.484375, b * 6);
        ud(g, d[2]);
        md(g, b * 102, b * 30, b * 20.8806130178211);
        ud(g, d[1], d[3], b * 8);
        md(g, b * 102, b * 30, b * 12.165525060596439);
        ud(g, d[1], d[3], b * 8);
        md(g, b * 102, b * 30, b * 6);
        ud(g, d[1]);
        md(g, b * 102, b * 130, b * 20.8806130178211);
        ud(g, d[1], d[3], b * 8);
        md(g, b * 102, b * 130, b * 12.165525060596439);
        ud(g, d[1], d[3], b * 8);
        md(g, b * 102, b * 130, b * 6);
        ud(g, d[1]);
        g.save();
        g.translate(b * 102, b * 81.984375);
        vd(g, b * -74, b * -57, b * 148, b * 114, b * 23);
        g.restore();
        ud(g, d[1], d[3], b * 8);
        g.save();
        g.translate(b * 101, b * 64.984375);
        vd(g, b * -33, b * -10, b * 66, b * 20, b * 15);
        g.restore();
        ud(g, d[2], d[1], b * 8);
        g.save();
        g.translate(b * 102, b * 63.484375);
        vd(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
        g.restore();
        ud(g, d[2], d[1], b * 8);
        md(g, b * 135, b * 107.36605834960938, b * 21.095023109728988);
        ud(g, d[1], d[3], b * 8);
        md(g, b * 135, b * 107.36605834960938, b * 13);
        ud(g, d[1], d[3], b * 8);
        md(g, b * 135, b * 107.36605834960938, b * 6.082762530298219);
        ud(g, d[2]);
        md(g, b * 70, b * 107.36605834960938, b * 21.095023109728988);
        ud(g, d[1], d[3], b * 8);
        md(g, b * 70, b * 107.36605834960938, b * 13);
        ud(g, d[1], d[3], b * 8);
        md(g, b * 70, b * 107.36605834960938, b * 6.082762530298219);
        ud(g, d[2]);
        return f;
    }
    function Um(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.globalAlpha = 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        ud(e, c[0]);
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        ud(e, c[1], c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 214.5, a * 124.0625);
        e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
        e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
        e.closePath();
        ud(e, jl, c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 145.0625);
        e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
        e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
        e.closePath();
        ud(e, undefined, c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103.5, a * 169.0625);
        e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
        e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
        e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
        e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
        e.closePath();
        ud(e, c[3], c[2], a * 19);
        md(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
        ud(e, c[4]);
        md(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
        ud(e, c[4]);
        md(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
        ud(e, c[4]);
        md(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
        ud(e, c[4]);
        md(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
        ud(e, c[4]);
        md(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
        ud(e, c[4]);
        md(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
        ud(e, c[4]);
        md(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
        ud(e, c[4]);
        md(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
        ud(e, c[4]);
        md(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
        ud(e, c[4]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 313.0625);
        e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
        e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
        e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
        e.closePath();
        ud(e, c[5]);
        return d;
    }
    function Ym(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 110;
        c.height = a * 110;
        d.globalAlpha = 0.2;
        md(d, a * 55, a * 55, a * 55);
        ud(d, b[0]);
        return c;
    }
    function Km(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 89;
        d.height = a * 89;
        e.save();
        e.translate(a * 44.5, a * 44.5);
        pd(e, 6, a * 40, a * 10);
        e.restore();
        ud(e, c[0], c[1], a * 5);
        e.save();
        e.translate(a * 44.5, a * 44.5);
        pd(e, 6, a * 25.11521001172521, a * 10);
        e.restore();
        ud(e, c[2], c[3], a * 5);
        return d;
    }
    function Vm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 95;
        d.height = a * 85;
        if (c == 0) {
            e.translate(a * 7, a * 15);
            e.scale(0.9, 0.9);
            e.save();
            vd(e, a * 0, a * 5, a * 90, a * 60, 10);
            ud(e, b[0]);
            e.globalCompositeOperation = "destination-out";
            md(e, a * 25, a * 40, a * 10);
            e.fill();
            md(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
            e.save();
            vd(e, 0, 0, a * 90, a * 60, a * 10);
            ud(e, b[1]);
            e.globalCompositeOperation = "destination-out";
            md(e, a * 25, a * 40, a * 10);
            e.fill();
            md(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
        } else if (c == 1) {
            e.scale(0.8, 0.8);
            e.translate(a * 15, a * 33);
            e.save();
            e.scale(0.56, 0.56);
            e.translate(a * -39, a * -60);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 32.5, a * 50.642852783203125);
            e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
            e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
            e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
            e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
            e.closePath();
            ud(e, b[1]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 116.5, a * 85.64285278320312);
            e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
            e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
            e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
            e.closePath();
            ud(e, b[1]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 166.5, a * 68.64285278320312);
            e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
            e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
            e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
            e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
            e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
            e.closePath();
            ud(e, b[1]);
            e.restore();
            e.save();
            vd(e, 0, a * 15, a * 90, a * 50, a * 10);
            ud(e, b[0]);
            vd(e, 0, a * 10, a * 90, a * 50, a * 10);
            ud(e, b[1]);
            e.globalCompositeOperation = "destination-out";
            md(e, a * 25, a * 40, a * 10);
            e.fill();
            md(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
        }
        return d;
    }
    function Xm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 46;
        d.height = a * 140;
        e.scale(a * -1, a * 1);
        e.translate(a * -50, a * 40);
        e.translate(a * -20, 0);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
        e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
        e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
        e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
        e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -1, 0);
        e.moveTo(a * 17.599990844726562, a * 89.75);
        e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 1, 0);
        e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
        e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
        e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
        e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
        e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
        e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
        e.closePath();
        ud(e, c[0]);
        e.save();
        e.translate(a * 23.599990844726562, a * 110.94999694824219);
        e.rotate(0);
        vd(e, a * -7, a * -4, a * 14, a * 8, a * 10);
        e.restore();
        ud(e, c[0]);
        e.translate(a * 0, 0);
        e.globalAlpha = 1;
        e.translate(a * 10, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
        e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
        e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
        e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
        e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
        e.closePath();
        ud(e, c[3], c[4], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -1, 0);
        e.moveTo(a * 17.599990844726562, a * 89.75);
        e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
        e.closePath();
        ud(e, c[1], c[2], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 1, 0);
        e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
        e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
        e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
        e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
        e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
        e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
        e.closePath();
        ud(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 23.599990844726562, a * 110.94999694824219);
        e.rotate(0);
        vd(e, a * -7, a * -4, a * 14, a * 8, a * 10);
        e.restore();
        ud(e, c[1], c[2], a * 3);
        return d;
    }
    function Zm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 202;
        d.height = a * 202;
        e.translate(a * 2, a * 1);
        e.globalAlpha = 0.3;
        md(e, a * 98, a * 99, a * 100);
        ud(e, c[0]);
        e.globalAlpha = 0.5;
        md(e, a * 98, a * 99, a * 90);
        ud(e, c[1]);
        return d;
    }
    function $m(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 137;
        d.height = a * 129;
        e.globalAlpha = 0.5;
        md(e, a * 69, a * 64, a * 48.16637831516918);
        ud(e, c[1]);
        e.globalAlpha = 0.7;
        md(e, a * 69, a * 64, a * 38.23105625617661);
        ud(e, c[2]);
        e.globalAlpha = 0.7;
        md(e, a * 69, a * 64, a * 32.01562118716424);
        ud(e, c[2], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72, a * 41);
        e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
        e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
        e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 62);
        e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
        e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
        e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
        e.closePath();
        ud(e, c[3]);
        return d;
    }
    function ep(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 440;
        d.height = a * 388;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        md(e, a * 220, a * 201, a * 170.41713528867922);
        ud(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        md(e, a * 220, a * 201, a * 170.41713528867922);
        ud(e, c[1], c[2], a * 6);
        md(e, a * 220, a * 201, a * 130);
        ud(e, c[11], c[2], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 218, a * 97);
        e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
        e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
        e.closePath();
        ud(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224, a * 181);
        e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
        e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
        e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
        e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
        e.closePath();
        ud(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 169, a * 289);
        e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
        e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
        e.closePath();
        ud(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 146);
        e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
        e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
        e.closePath();
        ud(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 135);
        e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
        e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
        e.closePath();
        ud(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 318, a * 223);
        e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
        e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
        e.closePath();
        ud(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 142, a * 223);
        e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
        e.closePath();
        ud(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 133);
        e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
        e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
        e.closePath();
        ud(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 203, a * 102);
        e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
        e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
        e.closePath();
        ud(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196, a * 324);
        e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
        e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
        e.closePath();
        ud(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 266, a * 166);
        e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
        ud(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 269, a * 192);
        e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
        ud(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 263, a * 217);
        e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
        ud(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 204, a * 141);
        e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
        ud(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 207, a * 230);
        e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
        ud(e, undefined, c[6], a * 6);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 258);
        e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
        ud(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 196);
        e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
        ud(e, eq, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 218, a * 97);
        e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
        e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
        e.closePath();
        ud(e, er, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224, a * 181);
        e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
        e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
        e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
        e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
        e.closePath();
        ud(e, Pg, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 169, a * 289);
        e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
        e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
        e.closePath();
        ud(e, ih, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 146);
        e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
        e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
        e.closePath();
        ud(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 135);
        e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
        e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
        e.closePath();
        ud(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 318, a * 223);
        e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
        e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
        e.closePath();
        ud(e, hg, c[6], a * 6);
        md(e, a * 222, a * 199, a * 120.74767078498864);
        ud(e, mo, c[3], a * 40);
        md(e, a * 220, a * 200, a * 95.44108130150245);
        ud(e, Pg, c[2], a * 15);
        md(e, a * 220, a * 201, a * 85);
        ud(e, undefined, c[4], a * 10);
        e.globalAlpha = 0.5;
        md(e, a * 220, a * 201, a * 82);
        ud(e, c[9]);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        md(e, a * 63, a * 136, a * 49.193495504995376);
        ud(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        md(e, a * 63, a * 136, a * 49.193495504995376);
        ud(e, c[8], c[2], a * 4);
        md(e, a * 63, a * 137, a * 25.632011235952593);
        ud(e, c[7], c[2], a * 4);
        return d;
    }
    function ip(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 185;
        e.height = b * 164;
        f.translate(0, 0);
        var g = function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 201;
            d.height = a * 164;
            e.translate(0, a * 5);
            e.globalAlpha = b ? 0.5 : 1;
            md(e, a * 100.5, a * 82, a * 74.92746655359852);
            ud(e, c[0], c[0], a * 4);
            md(e, a * 100.5, a * 82, a * 65.9417374971317);
            ud(e, c[0], c[0], a * 4);
            e.translate(0, -5);
            e.globalAlpha = 1;
            md(e, a * 100.5, a * 82, a * 74.92746655359852);
            ud(e, c[1], c[3], a * 4);
            md(e, a * 100.5, a * 82, a * 65.9417374971317);
            ud(e, c[1], c[2], a * 4);
            md(e, a * 100.5, a * 82, a * 35.9417374971317);
            ud(e, c[1], c[2], a * 20);
            md(e, a * 100.5, a * 82, a * 15.9417374971317);
            ud(e, c[1], c[2], a * 6);
            return d;
        }(b, c, d);
        f.drawImage(g, b * -10, b * 0);
        g = Hm(b, c, d, 0);
        f.drawImage(g, b * -83, b * -40);
        g = Hm(b, c, d, Math.PI / 1.4);
        f.drawImage(g, b * -15, b * -88);
        g = Hm(b, c, d, Math.PI / -1.4);
        f.drawImage(g, b * 15, b * -8);
        return e;
    }
    function tp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 170;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -10, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 4.109375);
        e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
        e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
        e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
        e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * 10, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 4.109375);
        e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
        e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
        e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
        e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
        e.closePath();
        ud(e, c[1], c[2], a * 10);
        return d;
    }
    function np(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 88;
        d.height = a * 88;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(0.52);
        pd(e, 6, a * 43, a * 10);
        e.restore();
        ud(e, c[0], c[1], a * 3);
        return d;
    }
    function op(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 440;
        d.height = a * 388;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        md(e, a * 220, a * 201, a * 170.41713528867922);
        ud(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        md(e, a * 220, a * 201, a * 170.41713528867922);
        ud(e, c[1], c[2], a * 6);
        md(e, a * 220, a * 201, a * 130);
        ud(e, c[11], c[2], a * 6);
        md(e, a * 222, a * 199, a * 120.74767078498864);
        ud(e, ih, c[3], a * 40);
        md(e, a * 220, a * 200, a * 95.44108130150245);
        ud(e, kr, c[2], a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        md(e, a * 63, a * 136, a * 49.193495504995376);
        ud(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        md(e, a * 63, a * 136, a * 49.193495504995376);
        ud(e, c[8], c[2], a * 4);
        md(e, a * 63, a * 137, a * 25.632011235952593);
        ud(e, c[7], c[2], a * 4);
        return d;
    }
    function ap(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 202;
        d.height = a * 202;
        e.translate(a * 2, a * 1);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 98, a * 41.15177917480469);
        e.rotate(0.8);
        vd(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
        e.restore();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 22.5089111328125);
        e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
        ud(e, c[2]);
        e.save();
        e.translate(a * 147.5, a * 69.5089111328125);
        e.rotate(0.2);
        vd(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
        e.restore();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 163, a * 59.50892639160156);
        e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
        ud(e, c[2]);
        e.save();
        e.translate(a * 143.5, a * 128.2946319580078);
        e.rotate(1.24);
        vd(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
        e.restore();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 135.93748474121094);
        e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
        ud(e, c[2]);
        e.save();
        e.translate(a * 99, a * 156.08035278320312);
        e.rotate(0.84);
        vd(e, a * -18, a * -18, a * 36, a * 36, a * 7);
        e.restore();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 136.08035278320312);
        e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
        ud(e, c[2]);
        e.save();
        e.translate(a * 54, a * 72.22320556640625);
        e.rotate(1.32);
        vd(e, a * -18, a * -19, a * 36, a * 38, a * 7);
        e.restore();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34, a * 60.79463195800781);
        e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
        ud(e, c[2]);
        e.save();
        e.translate(a * 49, a * 127.29463195800781);
        e.rotate(1.76);
        vd(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
        e.restore();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141.7946319580078);
        e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
        ud(e, c[2]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 98, a * 41.15177917480469);
        e.rotate(0.8);
        vd(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
        e.restore();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 22.5089111328125);
        e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
        ud(e, Qa, c[4], a * 5);
        e.save();
        e.translate(a * 147.5, a * 69.5089111328125);
        e.rotate(0.2);
        vd(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
        e.restore();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 163, a * 59.50892639160156);
        e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
        ud(e, ug, c[4], a * 5);
        e.save();
        e.translate(a * 143.5, a * 128.2946319580078);
        e.rotate(1.24);
        vd(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
        e.restore();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 135.93748474121094);
        e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
        ud(e, kr, c[4], a * 5);
        e.save();
        e.translate(a * 99, a * 156.08035278320312);
        e.rotate(0.84);
        vd(e, a * -18, a * -18, a * 36, a * 36, a * 7);
        e.restore();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 136.08035278320312);
        e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
        ud(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 54, a * 72.22320556640625);
        e.rotate(1.32);
        vd(e, a * -18, a * -19, a * 36, a * 38, a * 7);
        e.restore();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34, a * 60.79463195800781);
        e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
        ud(e, Qk, c[4], a * 5);
        e.save();
        e.translate(a * 49, a * 127.29463195800781);
        e.rotate(1.76);
        vd(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
        e.restore();
        ud(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141.7946319580078);
        e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
        ud(e, undefined, c[4], a * 5);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 98, a * 99);
        pd(e, 6, a * 70.28669492273468, a * 10);
        e.restore();
        ud(e, c[2]);
        e.save();
        e.translate(a * 98, a * 99);
        pd(e, 6, a * 56.455940020351264, a * 10);
        e.restore();
        ud(e, c[2]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 98, a * 99);
        pd(e, 6, a * 70.28669492273468, a * 10);
        e.restore();
        ud(e, c[5], c[6], a * 5);
        e.save();
        e.translate(a * 98, a * 99);
        pd(e, 6, a * 56.455940020351264, a * 10);
        e.restore();
        ud(e, c[7], c[8], a * 7);
        return d;
    }
    function rp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 790;
        e.translate(a * 5, a * 5);
        e.globalAlpha = b ? 0 : 0;
        md(e, a * 178.5, a * 172.828125, a * 150);
        ud(e, sj, c[0], a * 65);
        md(e, a * 178.5, a * 172.828125, a * 150);
        ud(e, undefined, c[0], a * 55);
        e.closePath();
        e.save();
        e.translate(a * 177, a * 512.328125);
        vd(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
        e.restore();
        ud(e, c[0]);
        e.save();
        e.translate(a * 136, a * 581.828125);
        vd(e, a * -39, a * -23, a * 78, a * 46, a * 25);
        e.restore();
        ud(e, c[0]);
        e.save();
        e.translate(a * 135.5, a * 663.828125);
        vd(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
        e.restore();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 114, a * 594.828125);
        e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
        e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
        e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
        e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
        e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, a * 5);
        e.moveTo(a * 140, a * 294.828125);
        e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
        e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
        e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
        e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
        e.closePath();
        ud(e, c[0]);
        e.translate(3, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159, a * 679.828125);
        e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
        e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
        e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
        e.closePath();
        ud(e, c[0]);
        e.save();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 548.828125);
        e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
        e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
        e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
        e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
        e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
        e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
        e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
        e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
        e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
        e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
        e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
        e.closePath();
        ud(e, c[0], c[0], a * 7);
        e.restore();
        e.globalAlpha = 1;
        e.translate(a * 15, a * 35);
        md(e, a * 178.5, a * 172.828125, a * 150);
        ud(e, undefined, c[2], a * 95);
        md(e, a * 178.5, a * 172.828125, a * 150);
        ud(e, eq, c[1], a * 55);
        e.closePath();
        e.save();
        e.translate(a * 177, a * 512.328125);
        vd(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
        e.restore();
        ud(e, c[1], c[2], a * 20);
        e.save();
        e.translate(a * 136, a * 581.828125);
        vd(e, a * -39, a * -23, a * 78, a * 46, a * 25);
        e.restore();
        ud(e, c[1], c[2], a * 20);
        e.save();
        e.translate(a * 135.5, a * 663.828125);
        vd(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
        e.restore();
        ud(e, c[1], c[2], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 114, a * 594.828125);
        e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
        e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
        e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
        e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
        e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
        e.closePath();
        ud(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, a * 5);
        e.moveTo(a * 123, a * 294.828125);
        e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
        e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
        e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
        e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
        e.closePath();
        ud(e, c[1]);
        e.translate(0, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159, a * 679.828125);
        e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
        e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
        e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
        e.closePath();
        ud(e, c[1]);
        e.save();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 548.828125);
        e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
        e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
        e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
        e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
        e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
        e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
        e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
        e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
        e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
        e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
        e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
        e.closePath();
        ud(e, c[1], c[1], a * 7);
        e.restore();
        return d;
    }
    function sp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 104;
        d.height = a * 117;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 90);
        e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
        e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
        e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
        e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, a * 4);
        e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 6, a * 76);
        e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
        e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
        e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
        e.closePath();
        ud(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 62);
        e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
        e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
        e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
        e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
        e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
        e.closePath();
        ud(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 107);
        e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
        e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
        e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
        e.closePath();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 1, a * 89);
        e.bezierCurveTo(a * 18, a * 100, a * 34, a * 110, a * 35, a * 111);
        e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
        e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
        e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
        e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 107);
        e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
        e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
        e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
        e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
        e.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * 4, a * 90);
        e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
        e.closePath();
        ud(e, rh, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22, a * 71);
        e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
        e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
        e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
        e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
        e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
        e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
        e.closePath();
        ud(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 89);
        e.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
        e.closePath();
        ud(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 102);
        e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
        e.closePath();
        ud(e, hg, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68, a * 62);
        e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
        e.closePath();
        ud(e, hj, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 70, a * 41);
        e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
        e.closePath();
        ud(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 33);
        e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
        e.closePath();
        ud(e, $q, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 28);
        e.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
        e.closePath();
        ud(e, undefined, c[4], a * 6);
        return d;
    }
    function hp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 105;
        d.height = a * 144;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -5, a * 0);
        e.save();
        e.translate(a * 52.5, a * 91.5);
        vd(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
        e.restore();
        ud(e, c[0], c[0], a * 3);
        e.save();
        e.translate(a * 53, a * 36);
        vd(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
        e.restore();
        ud(e, c[0], c[0], a * 4);
        e.save();
        e.translate(a * 53.5, a * 35.5);
        vd(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
        e.restore();
        ud(e, c[0], c[0], a * 4);
        e.translate(a * 5, a * 0);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 52.5, a * 91.5);
        vd(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
        e.restore();
        ud(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 53, a * 36);
        vd(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
        e.restore();
        ud(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 53.5, a * 35.5);
        vd(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
        e.restore();
        ud(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 60.5);
        e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
        e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
        e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
        e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
        e.closePath();
        ud(e, c[7], c[6], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 66, a * 40.5);
        e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
        e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
        e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
        e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
        e.closePath();
        ud(e, c[7], c[6], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 33.5);
        e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
        e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
        e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
        e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
        e.closePath();
        ud(e, c[9], c[8], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 47.5);
        e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
        e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
        e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
        e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
        e.closePath();
        ud(e, c[11], c[10], a * 3);
        return d;
    }
    function lp(a, b, c) {
        var d = (e = document.createElement("canvas")).getContext("2d");
        e.width = a * 47;
        e.height = a * 60;
        var e;
        d = (e = document.createElement("canvas")).getContext("2d");
        e.width = a * 47;
        e.height = a * 60;
        md(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
        ud(d, undefined, c[2], a * 4);
        md(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
        ud(d, lh, c[1], a * 4);
        md(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
        ud(d, jl, c[1], a * 4);
        d.save();
        d.translate(a * 23, a * 38.734375);
        d.rotate(0);
        vd(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
        d.restore();
        ud(d, c[2], c[1], a * 4);
        d.save();
        d.translate(a * 23.5, a * 43.734375);
        d.rotate(0.5235987755982988);
        pd(d, 3, a * 8.06225774829855, a * 0);
        d.restore();
        ud(d, c[3]);
        md(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
        ud(d, c[3]);
        return e;
    }
    function gp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 137;
        d.height = a * 129;
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        ud(e, eq, c[2], a * 40);
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        ud(e, er, c[1], a * 20);
        e.globalAlpha = 0.8;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        ud(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
        e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
        e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
        e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
        e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
        e.closePath();
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
        e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
        e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
        e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
        e.closePath();
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.00003051757812, a * 49.625);
        e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
        e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
        e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
        e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
        e.closePath();
        ud(e, c[1], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 47.000030517578125, a * 36.625);
        e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
        e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
        e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
        e.closePath();
        ud(e, c[1], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53.000030517578125, a * 52.625);
        e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
        e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
        e.closePath();
        ud(e, c[3]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        ud(e, ih, c[3], a * 4);
        return d;
    }
    function up(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 120;
        var g = b * 140;
        d.width = f;
        d.height = g;
        d.width = b * 130;
        d.height = b * 120;
        vd(e, b * 10, b * 12, b * 110, b * 90, b * 10);
        ud(e, c[0]);
        vd(e, b * 10, b * 5, b * 110, b * 90, b * 10);
        ud(e, c[1], c[2], b * 4);
        var a = Cd(-Math.PI / 5, iu(b * 0.5, Bh, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        e.drawImage(a, b * 12, b * 18);
        a = Cd(Math.PI / 4, Hc(b * 0.55, p, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        e.drawImage(a, b * 36, b * 16);
        return d;
    }
    function bp(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 376;
        c.height = a * 371;
        d.globalAlpha = 0.5;
        d.translate(a * 5, a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
        d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
        d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
        d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
        d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
        d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
        d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
        d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
        d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
        d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
        d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
        d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
        d.closePath();
        ud(d, b[0]);
        d.globalAlpha = 1;
        d.translate(a * -4, a * -5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
        d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
        d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
        d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
        d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
        d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
        d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
        d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
        d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
        d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
        d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
        d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
        d.closePath();
        ud(d, kr, b[1], a * 12);
        d.translate(a * -1, a * 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 270.633544921875, a * 88.98580932617188);
        d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
        d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
        d.closePath();
        ud(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 275.633544921875, a * 281.9858093261719);
        d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
        d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
        d.closePath();
        ud(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 124.633544921875, a * 291.9858093261719);
        d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
        d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
        d.closePath();
        ud(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 113.633544921875, a * 80.98580932617188);
        d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
        d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
        d.closePath();
        ud(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 202.633544921875, a * 20.985809326171875);
        d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
        d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
        d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
        d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
        d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
        d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
        d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
        d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
        d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
        d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
        d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
        d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
        d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
        d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
        d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
        d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
        d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
        d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
        d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
        d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
        d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
        d.closePath();
        ud(d, b[2], b[3], a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 203.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
        d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
        d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
        d.closePath();
        ud(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 175.633544921875, a * 25.985809326171875);
        d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
        d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
        d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
        d.closePath();
        ud(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 26.633544921875, a * 96.98580932617188);
        d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
        d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
        d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
        d.closePath();
        ud(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 351.633544921875, a * 99.98580932617188);
        d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
        d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
        d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
        d.closePath();
        ud(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 350.633544921875, a * 302.9858093261719);
        d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
        d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
        d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
        d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
        d.closePath();
        ud(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 95.633544921875, a * 224.98580932617188);
        d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
        d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
        d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
        d.closePath();
        ud(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 195.633544921875, a * 253.98580932617188);
        d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
        d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
        d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
        d.closePath();
        ud(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 195.633544921875, a * 251.98580932617188);
        d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
        d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
        d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
        d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
        d.closePath();
        ud(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 316, a * 186.8020782470703);
        d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
        d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 340, a * 157.8020782470703);
        d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
        d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 349, a * 136.8020782470703);
        d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
        d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 278.75, a * 246.4375);
        d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
        d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
        d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 310.75, a * 277.4375);
        d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
        d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
        d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.75, a * 257.4375);
        d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
        d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
        d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 211.75, a * 289.4375);
        d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
        d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 171.75, a * 256.4375);
        d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
        d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
        d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 175.75, a * 289.9375);
        d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
        d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 205.75, a * 314.4375);
        d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
        d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.75, a * 313.4375);
        d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
        d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 103.75, a * 244.4375);
        d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
        d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
        d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 86.75, a * 182.4375);
        d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
        d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
        d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44.75, a * 152.4375);
        d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
        d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31.75, a * 130.4375);
        d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
        d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
        d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 69.75, a * 274.4375);
        d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
        d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
        d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 165.75, a * 95.4375);
        d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
        d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 216.75, a * 94.4375);
        d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
        d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 211.75, a * 68.4375);
        d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
        d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 169.75, a * 71.4375);
        d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
        d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
        d.closePath();
        ud(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 193.75, a * 160.4375);
        d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
        d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
        d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
        d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
        d.closePath();
        ud(d, b[8], b[9], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
        d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
        d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
        d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
        d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
        d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
        d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
        d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
        d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
        d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
        d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
        d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
        d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
        d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
        d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
        d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
        d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
        d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
        d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
        d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
        d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
        d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
        d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
        d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
        d.closePath();
        ud(d, b[10]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 185.1999969482422, a * 173.8125);
        d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
        d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
        d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
        d.closePath();
        ud(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
        d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
        d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
        d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
        d.closePath();
        ud(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
        d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
        d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
        d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
        d.closePath();
        ud(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
        d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
        d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
        d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
        d.closePath();
        ud(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 204.1999969482422, a * 201.8125);
        d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
        d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
        d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
        d.closePath();
        ud(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
        d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
        d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
        d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
        d.closePath();
        ud(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
        d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
        d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
        d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
        d.closePath();
        ud(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
        d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
        d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
        d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
        d.closePath();
        ud(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 183.1999969482422, a * 196.8125);
        d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
        d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
        d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
        d.closePath();
        ud(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
        d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
        d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
        d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
        d.closePath();
        ud(d, b[11]);
        md(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
        ud(d, b[12]);
        md(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
        ud(d, b[13]);
        md(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
        ud(d, b[12]);
        md(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
        ud(d, b[13]);
        return c;
    }
    function dp(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 120;
        e.height = b * 100;
        vd(f, b * 10, b * 10, b * 95, b * 80, b * 10);
        ud(f, c[2]);
        vd(f, b * 10, b * 5, b * 95, b * 80, b * 10);
        ud(f, c[3], c[4], b * 4);
        if (d == 0) {
            var g = Vm(b * 0.75, c, 0);
            f.drawImage(g, b * 22, b * 18);
        } else if (d == 1) {
            g = Vm(b * 0.75, c, 1);
            f.drawImage(g, b * 22, b * 18);
        }
        return e;
    }
    if (hc.ᐃⲆⲆⵠⲆⵠⲆ) {
        var vp = hc.Math.acos;
        hc.Math.acos = hc.Math.asin;
        hc.Math.asin = vp;
        var cp = hc.Math.acos;
        hc.Math.acos = hc.Math.asin;
        hc.Math.asin = cp;
    }
    function mp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 145;
        d.height = a * 120;
        e.beginPath();
        e.scale(0.6, 0.6);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 18, a * -8);
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        ud(e, c[4], c[5], a * 4);
        e.beginPath();
        e.scale(1.1, 1.1);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -9, a * 4);
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        ud(e, c[4], c[5], a * 4);
        e.scale(1.1, 1.1);
        e.translate(a * -9, a * 4);
        e.save();
        e.translate(a * 100, a * 73.06874084472656);
        e.rotate(0);
        vd(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
        e.restore();
        ud(e, c[1], c[2], a * 4);
        e.save();
        e.translate(a * 100, a * 71.36874389648438);
        e.rotate(0);
        vd(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
        e.restore();
        ud(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 144, a * 80);
        e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
        e.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * 100);
        e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
        e.closePath();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 57, a * 75);
        e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
        e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
        e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
        e.closePath();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        ud(e, c[4], c[5], a * 4);
        e.translate(0, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115.5, a * 116.07290649414062);
        e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
        e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
        e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
        e.closePath();
        ud(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39.5, a * 96.07290649414062);
        e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
        e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
        e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
        e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
        e.closePath();
        ud(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 80);
        e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
        e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
        e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
        e.closePath();
        ud(e, c[3], c[2], a * 4);
        e.scale(0.5, 0.5);
        e.translate(a * 100, a * 71);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 80);
        e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
        e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
        e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
        e.closePath();
        ud(e, c[6], c[2], a * 4);
        return d;
    }
    function pp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 204, a * 195.0833282470703);
        e.rotate(10.16);
        vd(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
        e.restore();
        ud(e, c[0], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58.5, a * 226.5833282470703);
        e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
        e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
        e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
        e.closePath();
        ud(e, c[2], c[3], a * 4);
        e.save();
        e.translate(a * 197, a * 169.0833282470703);
        e.rotate(10.16);
        vd(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
        e.restore();
        ud(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.5, a * 24.583328247070312);
        e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
        e.closePath();
        ud(e, hg, c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
        e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
        e.closePath();
        ud(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
        e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
        e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
        e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
        e.closePath();
        ud(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
        e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
        e.closePath();
        ud(e, c[4], c[1], a * 8);
        e.save();
        e.translate(a * 249.63333129882812, a * 120.89999389648438);
        e.rotate(7.04);
        vd(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
        e.restore();
        ud(e, c[5]);
        return d;
    }
    const Cp = 3;
    function Tp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 144;
        d.height = a * 280;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 103.79999542236328);
        e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
        e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
        e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
        e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
        e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
        e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
        e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
        e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
        e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
        e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
        e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
        e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
        e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
        e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 103.79999542236328);
        e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
        e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
        e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
        e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
        e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
        e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
        e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
        e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
        e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
        e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
        e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
        e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
        e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
        e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
        e.closePath();
        ud(e, c[1], c[2], a * 6);
        return d;
    }
    function fp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 80;
        d.height = a * 160;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        vd(e, a * 33, a * 53, a * 10, a * 98, a * 10);
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -150, a * -100);
        e.moveTo(a * 167.5, a * 171.0625);
        e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
        e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
        e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
        e.closePath();
        ud(e, c[0]);
        e.restore();
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        vd(e, a * 33, a * 53, a * 10, a * 98, a * 10);
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -150, a * -100);
        e.moveTo(a * 167.5, a * 171.0625);
        e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
        e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
        e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
        e.closePath();
        ud(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 0, a * 1);
        e.moveTo(a * 180.5, a * 169.0625);
        e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
        e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
        e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
        e.closePath();
        ud(e, c[5]);
        e.restore();
        return d;
    }
    function zp(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 170;
        f.height = b * 200;
        g.translate(b * 5, b * 15);
        if (e == 1) {
            g.translate(0, b * -5);
            md(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
            ud(g, d[1], d[5], b * 20);
            md(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
            ud(g, d[1], d[5], b * 20);
            g.save();
            g.translate(b * 77.00003051757812, b * 31.267044067382812);
            vd(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
            g.restore();
            ud(g, d[1], d[5], b * 20);
            g.save();
            g.translate(b * 77.00003051757812, b * 13.267044067382812);
            vd(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
            g.restore();
            ud(g, d[1], d[5], b * 20);
        }
        md(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
        ud(g, d[1], d[2], b * 7);
        md(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
        ud(g, d[1], d[2], b * 7);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 18.000030517578125, b * 105.85795593261719);
        g.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
        g.closePath();
        ud(g, d[1], d[2], b * 8);
        md(g, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
        ud(g, d[1], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 78.00003051757812, b * 112.03977966308594);
        g.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
        g.closePath();
        ud(g, d[3], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 78.00003051757812, b * 48.03977966308594);
        g.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
        g.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
        g.closePath();
        ud(g, d[3], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 80.00003051757812, b * 111.6761474609375);
        g.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
        g.closePath();
        ud(g, d[3], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 107.00003051757812, b * 76.6761474609375);
        g.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
        g.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
        g.closePath();
        ud(g, d[3], d[2], b * 4);
        md(g, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
        ud(g, d[3], d[2], b * 4);
        g.save();
        g.translate(b * 77.00003051757812, b * 31.267044067382812);
        g.rotate(0);
        vd(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
        g.restore();
        ud(g, d[1], d[2], b * 7);
        g.save();
        g.translate(b * 77.00003051757812, b * 13.267044067382812);
        g.rotate(0);
        vd(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
        g.restore();
        ud(g, d[1], d[2], b * 7);
        return f;
    }
    function yp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 160;
        d.height = a * 161;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 80.5, a * 78);
        vd(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 80.5, a * 78);
        vd(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
        e.restore();
        ud(e, c[1], c[2], a * 6);
        e.save();
        e.translate(a * 80, a * 78.5);
        vd(e, a * -17, a * -72.5, a * 34, a * 145, a * 10);
        e.restore();
        ud(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 80, a * 79.5);
        vd(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 80, a * 79.5);
        vd(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
        e.restore();
        ud(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 71);
        e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
        e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
        e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 78);
        e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
        e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
        e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 73);
        e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
        e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
        e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 83);
        e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
        e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
        e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
        e.closePath();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 71);
        e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
        e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
        e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
        e.closePath();
        ud(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 78);
        e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
        e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
        e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
        e.closePath();
        ud(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 73);
        e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
        e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
        e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
        e.closePath();
        ud(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 83);
        e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
        e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
        e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
        e.closePath();
        ud(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 78.5, a * 78);
        vd(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 78.5, a * 78);
        vd(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
        e.restore();
        ud(e, c[3], c[4], a * 6);
        return d;
    }
    function wp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 158;
        d.height = a * 201;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 76.421875);
        e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
        e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
        e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
        e.closePath();
        ud(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 61.5, a * 78.421875);
        e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
        e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
        e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
        e.closePath();
        ud(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 127.421875);
        e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
        e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
        e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
        e.closePath();
        ud(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41.5, a * 134.421875);
        e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
        e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
        e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
        e.closePath();
        ud(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 78.5, a * 51.921875);
        e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
        e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
        e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
        e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
        e.closePath();
        ud(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        ud(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.5, a * 163.421875);
        e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
        e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
        e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
        e.closePath();
        ud(e, c[8], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79.5, a * 61.421875);
        e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
        e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
        e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
        e.closePath();
        ud(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        ud(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 76.421875);
        e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
        e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
        e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
        e.closePath();
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 61.5, a * 78.421875);
        e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
        e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
        e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
        e.closePath();
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 127.421875);
        e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
        e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
        e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
        e.closePath();
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41.5, a * 134.421875);
        e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
        e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
        e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
        e.closePath();
        ud(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 78.5, a * 51.921875);
        e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
        e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
        e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
        e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
        e.closePath();
        ud(e, c[3], c[2], a * 4);
        md(e, a * 108.5, a * 148.421875, a * 9);
        ud(e, c[5]);
        md(e, a * 106.5, a * 144.421875, a * 3);
        ud(e, c[6]);
        md(e, a * 46.5, a * 148.421875, a * 9);
        ud(e, c[5]);
        md(e, a * 44.5, a * 144.421875, a * 3);
        ud(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 114.421875);
        e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
        e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
        ud(e, c[3], c[2], a * 4);
        e.beginPath();
        e.translate(0, a * -2);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35.5, a * 131.421875);
        e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
        e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
        ud(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 57.421875);
        e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
        e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
        e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
        e.closePath();
        ud(e, c[4]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79.5, a * 61.421875);
        e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
        e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
        e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
        e.closePath();
        ud(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        ud(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 154.421875);
        e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
        e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
        e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
        e.closePath();
        ud(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 81.5, a * 164.421875);
        e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
        e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
        e.closePath();
        ud(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 164.421875);
        e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
        e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
        e.closePath();
        ud(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65.5, a * 156.421875);
        e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
        e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
        e.closePath();
        ud(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.5, a * 163.421875);
        e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
        e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
        e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
        e.closePath();
        ud(e, c[3], c[2], a * 4);
        return d;
    }
    function Pp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.translate(0, a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        ud(e, undefined, c[0], a * 11);
        e.translate(0, a * -5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        ud(e, c[3], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        ud(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 185);
        e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
        e.closePath();
        ud(e, Xh, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 287);
        e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
        e.closePath();
        ud(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 290);
        e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
        e.closePath();
        ud(e, c[1], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 184);
        e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
        e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
        e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
        e.closePath();
        ud(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 276);
        e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
        e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
        e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
        e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
        e.closePath();
        ud(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        ud(e, fk, c[2], a * 11);
        return d;
    }
    function Ap(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 218;
        d.height = a * 185;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 53.135406494140625);
        e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
        e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
        e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
        e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
        e.bezierCurveTo(a * 13, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
        e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
        e.closePath();
        ud(e, c[0], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107, a * 25.135406494140625);
        e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
        e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
        e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
        e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
        e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
        e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
        e.closePath();
        ud(e, c[1]);
        return d;
    }
    function kp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 247;
        d.height = a * 247;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 62);
        e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
        e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164, a * 171);
        e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
        e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        ud(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 62);
        e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
        e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
        e.closePath();
        ud(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164, a * 171);
        e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
        e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
        e.closePath();
        ud(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        ud(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 137);
        e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
        e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
        e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
        e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
        e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
        e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
        e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
        e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
        e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
        e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
        e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
        e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
        e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
        e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        ud(e, hg, c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 63);
        e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
        e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
        e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 148, a * 40);
        e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
        e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
        e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 189, a * 43);
        e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
        e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
        e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216, a * 98);
        e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
        e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
        e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 180, a * 85);
        e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
        e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
        e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96, a * 114);
        e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
        e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
        e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 92);
        e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
        e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
        e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 130);
        e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
        e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
        e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 113, a * 189);
        e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
        e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
        e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 154);
        e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
        e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
        e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206, a * 152);
        e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
        e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
        e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 181, a * 184);
        e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
        e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
        e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 66, a * 199);
        e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
        e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 143);
        e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
        e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 159);
        e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
        e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
        e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 214);
        e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
        e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
        e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40, a * 52);
        e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
        e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
        e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 81);
        e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
        e.bezierCurveTo(a * 23, a * 97, a * 19, a * 96, a * 16, a * 93);
        e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
        e.closePath();
        ud(e, c[4], c[5], a * 5);
        return d;
    }
    function xp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 316;
        d.height = a * 365;
        e.save();
        e.translate(a * 156.07142639160156, a * 51.81248474121094);
        e.rotate(0);
        vd(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
        e.restore();
        ud(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
        e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
        e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
        e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
        e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
        e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
        e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
        e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
        e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
        e.closePath();
        ud(e, undefined, c[5], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
        e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
        e.closePath();
        ud(e, undefined, c[6], a * 15);
        return d;
    }
    function Jp(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 253;
        c.height = a * 192;
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 42, a * 99);
        d.globalAlpha = 0.5;
        vd(d, a * -7, a * -20, a * 14, a * 39, a * 20);
        d.restore();
        ud(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 37, a * 94);
        vd(d, a * -7, a * -20, a * 14, a * 37, a * 20);
        d.restore();
        ud(d, b[2]);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 136, a * 99);
        d.globalAlpha = 0.5;
        vd(d, a * -84, a * -67, a * 168, a * 134, a * 20);
        d.restore();
        ud(d, b[0], b[0], a * 13);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 131, a * 94);
        vd(d, a * -84, a * -67, a * 168, a * 134, a * 20);
        d.restore();
        ud(d, b[2], b[2], a * 13);
        d.save();
        d.translate(a * 131, a * 94);
        vd(d, a * -76, a * -61, a * 152, a * 122, a * 20);
        d.restore();
        ud(d, b[3], b[1], a * 8);
        d.save();
        d.translate(a * 168.5, a * 93.5);
        vd(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
        d.restore();
        ud(d, b[3], b[4], a * 6);
        d.save();
        d.translate(a * 93.5, a * 95.5);
        vd(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
        d.restore();
        ud(d, b[3], b[4], a * 6);
        d.save();
        d.translate(a * 130.5, a * 94);
        vd(d, a * -36, a * -67, a * 73, a * 134, a * 20);
        d.restore();
        ud(d, b[3], b[2], a * 8);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 133, a * 97);
        vd(d, a * -83, a * -12, a * 160, a * 24, a * 0);
        d.restore();
        ud(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 133, a * 92);
        vd(d, a * -83, a * -12, a * 160, a * 24, a * 0);
        d.restore();
        ud(d, b[2]);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 228, a * 99.5);
        d.globalAlpha = 0.5;
        vd(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
        d.restore();
        ud(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 223, a * 94.5);
        vd(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
        d.restore();
        ud(d, b[2]);
        d.save();
        d.translate(a * 133.5, a * 175.5);
        d.globalAlpha = 0.5;
        vd(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
        d.restore();
        ud(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 128.5, a * 170.5);
        vd(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
        d.restore();
        ud(d, b[2]);
        return c;
    }
    function Mp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 167;
        d.height = a * 136;
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 76.71426391601562, a * 67.85713195800781);
        vd(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 0.8;
        e.save();
        e.translate(a * 76.71426391601562, a * 67.85713195800781);
        vd(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
        e.restore();
        ud(e, undefined, c[1], a * 7);
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 91.21426391601562, a * 67.35713195800781);
        vd(e, a * -56, a * -55, a * 115, a * 109, a * 15);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 91.21426391601562, a * 67.35713195800781);
        vd(e, a * -56, a * -55, a * 115, a * 109, a * 15);
        e.restore();
        ud(e, undefined, c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
        e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
        ud(e, er, c[1], a * 10);
        return d;
    }
    function Bp() {
        new Date().getTime();
        function b(a) {
            var b = 0;
            for (var c = 0, d = 0; a.length > c; c++) {
                var e = a.charAt(c);
                if (e !== "_" && c !== 5) {
                    if (e === "1") {
                        b += Math.pow(2, d);
                    }
                    d++;
                }
            }
            return b;
        }
        ⲆⵠⵠⵠᐃΔΔᐃᐃ();
        ⵠΔ[1026] = [ᐃⵠ.ᐃⲆⲆΔΔⲆΔ, ᐃⵠ.ⲆⵠᐃΔⵠⵠΔ];
        ⵠΔ[1025] = [];
        ⵠΔ[1025][Wr.ⵠΔⵠ] = [];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("000_010_000")] = [ᐃⵠ.ΔⵠⲆᐃᐃ, ᐃⵠ.ΔᐃΔΔΔ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("000_010_010")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("000_010_000")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("000_011_000")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("000_010_000")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("000_011_010")] = [ᐃⵠ.ⵠᐃΔⵠΔ, ᐃⵠ.ᐃⲆⲆᐃⲆ, ᐃⵠ.ΔᐃΔΔΔ, ᐃⵠ.ΔⵠⲆᐃᐃ, ᐃⵠ.ᐃⲆᐃΔᐃⵠᐃ, ᐃⵠ.ᐃⵠΔΔΔᐃⲆ, ᐃⵠ.ⲆⵠΔⲆⲆᐃᐃ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("000_011_011")] = [ᐃⵠ.ⲆᐃΔⵠⵠⲆⲆ, ᐃⵠ.ⵠᐃΔⵠΔ, ᐃⵠ.ᐃⲆⲆᐃⲆ, ᐃⵠ.ΔᐃΔΔΔ, ᐃⵠ.ΔⵠⲆᐃᐃ, ᐃⵠ.ᐃⲆᐃΔᐃⵠᐃ, ᐃⵠ.ᐃⵠΔΔΔᐃⲆ, ᐃⵠ.ⲆⵠΔⲆⲆᐃᐃ, ᐃⵠ.ΔⲆᐃᐃᐃ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("000_110_000")] = [ᐃⵠ.ⵠⵠᐃⲆⲆ, ᐃⵠ.ΔᐃΔΔΔ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("000_110_010")] = [ᐃⵠ.ᐃⵠⵠΔⵠ, ᐃⵠ.ⵠⵠᐃⲆⲆ, ᐃⵠ.ΔΔⲆᐃᐃ, ᐃⵠ.ΔᐃΔΔΔ, ᐃⵠ.ΔⵠⲆᐃᐃ, ᐃⵠ.ΔⲆᐃᐃᐃ, ᐃⵠ.ΔⲆⲆⵠⲆ, ᐃⵠ.ΔⵠΔᐃᐃᐃⲆ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("000_110_110")] = [ᐃⵠ.ᐃⵠⵠΔⵠ, ᐃⵠ.ΔⵠᐃΔΔⲆᐃⲆΔ, ᐃⵠ.ᐃᐃⵠᐃᐃΔᐃ, ᐃⵠ.ⵠⵠᐃⲆⲆ, ᐃⵠ.ΔΔⲆᐃᐃ, ᐃⵠ.ΔᐃΔΔΔ, ᐃⵠ.ΔⲆᐃᐃᐃ, ᐃⵠ.ΔⲆⲆⵠⲆ, ᐃⵠ.ΔⵠΔᐃᐃᐃⲆ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("000_111_000")] = [ᐃⵠ.ⵠⵠᐃⲆⲆ, ᐃⵠ.ΔΔⲆᐃᐃ, ᐃⵠ.ⲆΔⲆⵠᐃⲆΔ, ᐃⵠ.ⵠΔⵠⲆⲆᐃᐃ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("000_111_111")] = [ᐃⵠ.ⵠⵠᐃⲆⲆ, ᐃⵠ.ᐃᐃⵠᐃᐃΔᐃ, ᐃⵠ.ᐃⵠⵠΔⵠ, ᐃⵠ.ᐃⲆⲆᐃⲆ, ᐃⵠ.ⵠᐃΔⵠΔ, ᐃⵠ.ⲆᐃΔⵠⵠⲆⲆ, ᐃⵠ.ᐃⵠᐃⲆⵠΔⵠ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_010_000")] = [ᐃⵠ.ΔᐃΔΔΔ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_010_010")] = [ᐃⵠ.ΔⲆⵠᐃΔΔⲆ, ᐃⵠ.ΔᐃΔΔΔ, ᐃⵠ.ΔⵠⲆᐃᐃ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_011_000")] = [ᐃⵠ.ⲆⲆⵠⲆⲆ, ᐃⵠ.ΔᐃΔΔΔ, ᐃⵠ.ΔⵠⲆᐃᐃ, ᐃⵠ.ΔⲆⲆⵠⲆ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_110_000")] = [ᐃⵠ.ⵠⵠᐃⲆⲆ, ᐃⵠ.ΔΔⲆᐃᐃ, ᐃⵠ.ΔᐃΔΔΔ, ᐃⵠ.ΔⲆⲆⵠⲆ, ᐃⵠ.ⲆᐃⲆⲆᐃ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_110_110")] = [ᐃⵠ.ᐃⲆΔᐃⲆ, ᐃⵠ.ⲆⲆⵠⲆⲆ, ᐃⵠ.ⵠᐃΔⵠΔ, ᐃⵠ.ᐃⲆⲆᐃⲆ, ᐃⵠ.ᐃⵠⵠΔⵠ, ᐃⵠ.ᐃᐃⵠᐃᐃΔᐃ, ᐃⵠ.ⵠⵠᐃⲆⲆ, ᐃⵠ.ᐃⵠᐃⲆⵠΔⵠ, ᐃⵠ.ᐃⵠᐃΔⲆΔΔ, ᐃⵠ.ΔⲆⵠᐃΔΔⲆ, ᐃⵠ.ΔΔⲆᐃᐃ, ᐃⵠ.ⲆΔⲆⵠᐃⲆΔ, ᐃⵠ.ⵠΔⵠⲆⲆᐃᐃ, ᐃⵠ.ΔᐃΔΔΔ, ᐃⵠ.ΔⵠⲆᐃᐃ, ᐃⵠ.ᐃⲆᐃΔᐃⵠᐃ, ᐃⵠ.ᐃⵠΔΔΔᐃⲆ, ᐃⵠ.ⲆⵠΔⲆⲆᐃᐃ, ᐃⵠ.ΔⲆᐃᐃᐃ, ᐃⵠ.ΔⲆⲆⵠⲆ, ᐃⵠ.ⲆᐃⲆⲆᐃ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_011_010")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_110_110")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_011_011")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_110_110")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("000_111_011")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_110_110")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_110_010")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_110_110")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_111_000")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_110_110")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_111_010")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_110_110")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_111_011")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_110_110")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_111_110")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_110_110")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_111_111")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_110_110")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("000_111_110")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_110_110")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("000_111_010")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("010_110_110")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("011_011_000")] = [ᐃⵠ.ⵠⵠᐃⲆⵠⵠⵠ, ᐃⵠ.ᐃⲆΔᐃⲆ, ᐃⵠ.ⲆⲆⵠⲆⲆ, ᐃⵠ.ΔᐃΔΔΔ, ᐃⵠ.ΔⵠⲆᐃᐃ, ᐃⵠ.ΔⲆⲆⵠⲆ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("011_011_010")] = [ᐃⵠ.ⵠⵠᐃⲆⵠⵠⵠ, ᐃⵠ.ᐃⲆΔᐃⲆ, ᐃⵠ.ⲆⲆⵠⲆⲆ, ᐃⵠ.ⵠⵠᐃⲆⲆ, ᐃⵠ.ΔΔⲆᐃᐃ, ᐃⵠ.ⲆΔⲆⵠᐃⲆΔ, ᐃⵠ.ⵠΔⵠⲆⲆᐃᐃ, ᐃⵠ.ΔᐃΔΔΔ, ᐃⵠ.ΔⵠⲆᐃᐃ, ᐃⵠ.ΔⲆⲆⵠⲆ, ᐃⵠ.ⲆᐃⲆⲆᐃ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("011_011_011")] = [ᐃⵠ.ᐃⲆⲆᐃⲆ, ᐃⵠ.ⵠᐃΔⵠΔ, ᐃⵠ.ⲆᐃΔⵠⵠⲆⲆ, ᐃⵠ.ⲆⲆⵠⲆⲆ, ᐃⵠ.ᐃⲆΔᐃⲆ, ᐃⵠ.ⵠⵠᐃⲆⵠⵠⵠ, ᐃⵠ.ᐃⵠᐃΔⲆΔΔ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("011_111_000")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("011_011_010")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("011_111_010")] = [ᐃⵠ.ⵠⵠᐃⲆⵠⵠⵠ, ᐃⵠ.ᐃⲆΔᐃⲆ, ᐃⵠ.ⲆⲆⵠⲆⲆ, ᐃⵠ.ⵠᐃΔⵠΔ, ᐃⵠ.ᐃⲆⲆᐃⲆ, ᐃⵠ.ᐃⵠⵠΔⵠ, ᐃⵠ.ⵠⵠᐃⲆⲆ, ᐃⵠ.ᐃⵠᐃⲆⵠΔⵠ, ᐃⵠ.ᐃⵠᐃΔⲆΔΔ, ᐃⵠ.ΔⲆⵠᐃΔΔⲆ, ᐃⵠ.ΔΔⲆᐃᐃ, ᐃⵠ.ⲆΔⲆⵠᐃⲆΔ, ᐃⵠ.ⵠΔⵠⲆⲆᐃᐃ, ᐃⵠ.ΔᐃΔΔΔ, ᐃⵠ.ΔⵠⲆᐃᐃ, ᐃⵠ.ᐃⲆᐃΔᐃⵠᐃ, ᐃⵠ.ᐃⵠΔΔΔᐃⲆ, ᐃⵠ.ⲆⵠΔⲆⲆᐃᐃ, ᐃⵠ.ΔⲆᐃᐃᐃ, ᐃⵠ.ΔⲆⲆⵠⲆ, ᐃⵠ.ⲆᐃⲆⲆᐃ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("011_111_011")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("011_111_010")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("011_111_110")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("011_111_010")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("011_111_111")] = [ᐃⵠ.ⵠⵠᐃⲆⵠⵠⵠ, ᐃⵠ.ᐃⲆΔᐃⲆ, ᐃⵠ.ⲆⲆⵠⲆⲆ, ᐃⵠ.ⲆᐃΔⵠⵠⲆⲆ, ᐃⵠ.ⵠᐃΔⵠΔ, ᐃⵠ.ᐃⲆⲆᐃⲆ, ᐃⵠ.ᐃⵠⵠΔⵠ, ᐃⵠ.ᐃᐃⵠᐃᐃΔᐃ, ᐃⵠ.ⵠⵠᐃⲆⲆ, ᐃⵠ.ᐃⵠᐃⲆⵠΔⵠ, ᐃⵠ.ᐃⵠᐃΔⲆΔΔ, ᐃⵠ.ΔⲆⵠᐃΔΔⲆ, ᐃⵠ.ΔΔⲆᐃᐃ, ᐃⵠ.ⲆΔⲆⵠᐃⲆΔ, ᐃⵠ.ⵠΔⵠⲆⲆᐃᐃ, ᐃⵠ.ΔᐃΔΔΔ, ᐃⵠ.ΔⵠⲆᐃᐃ, ᐃⵠ.ᐃⲆᐃΔᐃⵠᐃ, ᐃⵠ.ᐃⵠΔΔΔᐃⲆ, ᐃⵠ.ⲆⵠΔⲆⲆᐃᐃ, ᐃⵠ.ΔⲆᐃᐃᐃ, ᐃⵠ.ΔⲆⲆⵠⲆ, ᐃⵠ.ⲆᐃⲆⲆᐃ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("110_110_000")] = [ᐃⵠ.ⲆΔΔⵠᐃⵠⵠ, ᐃⵠ.ⵠⵠᐃⲆⲆ, ᐃⵠ.ᐃⲆⲆⲆⵠⵠΔ, ᐃⵠ.ΔΔⲆᐃᐃ, ᐃⵠ.ΔᐃΔΔΔ, ᐃⵠ.ⲆᐃⲆⲆᐃ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("110_110_010")] = [ᐃⵠ.ᐃⵠⵠΔⵠ, ᐃⵠ.ⲆΔΔⵠᐃⵠⵠ, ᐃⵠ.ⵠⵠᐃⲆⲆ, ᐃⵠ.ΔⲆⵠᐃΔΔⲆ, ᐃⵠ.ΔΔⲆᐃᐃ, ᐃⵠ.ΔᐃΔΔΔ, ᐃⵠ.ΔⲆᐃᐃᐃ, ᐃⵠ.ⲆᐃⲆⲆᐃ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("110_110_110")] = [ᐃⵠ.ᐃⵠⵠΔⵠ, ᐃⵠ.ᐃᐃⵠᐃᐃΔᐃ, ᐃⵠ.ⲆΔΔⵠᐃⵠⵠ, ᐃⵠ.ⵠⵠᐃⲆⲆ, ᐃⵠ.ΔⲆⵠᐃΔΔⲆ, ᐃⵠ.ΔΔⲆᐃᐃ, ᐃⵠ.ΔᐃΔΔΔ, ᐃⵠ.ΔⲆᐃᐃᐃ, ᐃⵠ.ⲆᐃⲆⲆᐃ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("110_111_000")] = [ᐃⵠ.ᐃⲆΔᐃⲆ, ᐃⵠ.ⲆⲆⵠⲆⲆ, ᐃⵠ.ⲆΔΔⵠᐃⵠⵠ, ᐃⵠ.ⵠⵠᐃⲆⲆ, ᐃⵠ.ᐃⲆⲆⲆⵠⵠΔ, ᐃⵠ.ⲆΔⲆⵠⵠᐃΔ, ᐃⵠ.ΔΔⲆᐃᐃ, ᐃⵠ.ⲆΔⲆⵠᐃⲆΔ, ᐃⵠ.ⵠΔⵠⲆⲆᐃᐃ, ᐃⵠ.ΔᐃΔΔΔ, ᐃⵠ.ΔⵠⲆᐃᐃ, ᐃⵠ.ΔⲆⲆⵠⲆ, ᐃⵠ.ⲆᐃⲆⲆᐃ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("110_111_110")] = [ᐃⵠ.ᐃⲆΔᐃⲆ, ᐃⵠ.ⲆⲆⵠⲆⲆ, ᐃⵠ.ⵠᐃΔⵠΔ, ᐃⵠ.ᐃⲆⲆᐃⲆ, ᐃⵠ.ᐃⵠⵠΔⵠ, ᐃⵠ.ᐃᐃⵠᐃᐃΔᐃ, ᐃⵠ.ⲆΔΔⵠᐃⵠⵠ, ᐃⵠ.ⵠⵠᐃⲆⲆ, ᐃⵠ.ᐃⵠᐃⲆⵠΔⵠ, ᐃⵠ.ⲆΔⲆⵠⵠᐃΔ, ᐃⵠ.ᐃⵠᐃΔⲆΔΔ, ᐃⵠ.ΔⲆⵠᐃΔΔⲆ, ᐃⵠ.ΔΔⲆᐃᐃ, ᐃⵠ.ⲆΔⲆⵠᐃⲆΔ, ᐃⵠ.ⵠΔⵠⲆⲆᐃᐃ, ᐃⵠ.ΔᐃΔΔΔ, ᐃⵠ.ΔⵠⲆᐃᐃ, ᐃⵠ.ᐃⲆᐃΔᐃⵠᐃ, ᐃⵠ.ᐃⵠΔΔΔᐃⲆ, ᐃⵠ.ⲆⵠΔⲆⲆᐃᐃ, ᐃⵠ.ΔⲆᐃᐃᐃ, ᐃⵠ.ΔⲆⲆⵠⲆ, ᐃⵠ.ⲆᐃⲆⲆᐃ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("110_111_111")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("110_111_110")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("110_111_011")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("110_111_110")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("110_111_010")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("110_111_110")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("111_111_110")] = [ᐃⵠ.ⲆᐃⲆⲆᐃ, ᐃⵠ.ΔⲆⲆⵠⲆ, ᐃⵠ.ΔⲆᐃᐃᐃ, ᐃⵠ.ⲆⵠΔⲆⲆᐃᐃ, ᐃⵠ.ᐃⵠΔΔΔᐃⲆ, ᐃⵠ.ᐃⲆᐃΔᐃⵠᐃ, ᐃⵠ.ΔⵠⲆᐃᐃ, ᐃⵠ.ΔᐃΔΔΔ, ᐃⵠ.ⵠΔⵠⲆⲆᐃᐃ, ᐃⵠ.ⲆΔⲆⵠᐃⲆΔ, ᐃⵠ.ΔΔⲆᐃᐃ, ᐃⵠ.ΔⲆⵠᐃΔΔⲆ, ᐃⵠ.ᐃⵠᐃΔⲆΔΔ, ᐃⵠ.ⲆΔⲆⵠⵠᐃΔ, ᐃⵠ.ᐃⵠᐃⲆⵠΔⵠ, ᐃⵠ.ⵠⵠᐃⲆⲆ, ᐃⵠ.ⲆΔΔⵠᐃⵠⵠ, ᐃⵠ.ᐃⵠⵠΔⵠ, ᐃⵠ.ᐃⲆⲆᐃⲆ, ᐃⵠ.ⵠᐃΔⵠΔ, ᐃⵠ.ⲆⲆⵠⲆⲆ, ᐃⵠ.ᐃⲆΔᐃⲆ, ᐃⵠ.ⵠⵠᐃⲆⵠⵠⵠ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("111_111_011")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("111_111_110")];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("111_111_000")] = [ᐃⵠ.ᐃⲆⲆⲆⵠⵠΔ, ᐃⵠ.ⵠⵠᐃⲆⲆ, ᐃⵠ.ⲆΔΔⵠᐃⵠⵠ, ᐃⵠ.ⲆⲆⵠⲆⲆ, ᐃⵠ.ᐃⲆΔᐃⲆ, ᐃⵠ.ⵠⵠᐃⲆⵠⵠⵠ, ᐃⵠ.ⲆΔⲆⵠⵠᐃΔ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("111_111_111")] = [ᐃⵠ.ⵠⵠᐃⲆⵠⵠⵠ, ᐃⵠ.ᐃⲆΔᐃⲆ, ᐃⵠ.ⲆⲆⵠⲆⲆ, ᐃⵠ.ⲆᐃΔⵠⵠⲆⲆ, ᐃⵠ.ⵠᐃΔⵠΔ, ᐃⵠ.ᐃⲆⲆᐃⲆ, ᐃⵠ.ᐃⵠⵠΔⵠ, ᐃⵠ.ᐃᐃⵠᐃᐃΔᐃ, ᐃⵠ.ⲆΔΔⵠᐃⵠⵠ, ᐃⵠ.ⵠⵠᐃⲆⲆ, ᐃⵠ.ᐃⵠᐃⲆⵠΔⵠ, ᐃⵠ.ᐃⵠᐃΔⲆΔΔ, ᐃⵠ.ΔⲆⵠᐃΔΔⲆ, ᐃⵠ.ΔΔⲆᐃᐃ, ᐃⵠ.ⲆΔⲆⵠᐃⲆΔ, ᐃⵠ.ⵠΔⵠⲆⲆᐃᐃ, ᐃⵠ.ΔᐃΔΔΔ, ᐃⵠ.ΔⵠⲆᐃᐃ, ᐃⵠ.ᐃⲆᐃΔᐃⵠᐃ, ᐃⵠ.ᐃⵠΔΔΔᐃⲆ, ᐃⵠ.ⲆⵠΔⲆⲆᐃᐃ, ᐃⵠ.ΔⲆᐃᐃᐃ, ᐃⵠ.ΔⲆⲆⵠⲆ, ᐃⵠ.ⲆᐃⲆⲆᐃ];
        ⵠΔ[1025][Wr.ⵠΔⵠ][b("111_111_010")] = ⵠΔ[1025][Wr.ⵠΔⵠ][b("111_111_110")];
        ⵠΔ[1025][Wr.ᐃΔΔ] = [];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("000_010_000")] = [ᐃⵠ.ΔᐃⲆⵠᐃ, ᐃⵠ.ΔⵠᐃⵠⲆ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("000_010_010")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("000_010_000")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("000_011_000")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("000_010_000")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("000_011_010")] = [ᐃⵠ.Ⲇᐃᐃᐃᐃ, ᐃⵠ.ᐃⵠᐃᐃᐃ, ᐃⵠ.ΔⵠᐃⵠⲆ, ᐃⵠ.ΔᐃⲆⵠᐃ, ᐃⵠ.ΔᐃⵠⲆⲆΔΔ, ᐃⵠ.ⵠⵠᐃΔⵠΔΔ, ᐃⵠ.ⲆᐃⲆΔⵠⲆᐃ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("000_011_011")] = [ᐃⵠ.ᐃΔⲆΔⲆⵠᐃ, ᐃⵠ.Ⲇᐃᐃᐃᐃ, ᐃⵠ.ᐃⵠᐃᐃᐃ, ᐃⵠ.ΔⵠᐃⵠⲆ, ᐃⵠ.ΔᐃⲆⵠᐃ, ᐃⵠ.ΔᐃⵠⲆⲆΔΔ, ᐃⵠ.ⵠⵠᐃΔⵠΔΔ, ᐃⵠ.ⲆᐃⲆΔⵠⲆᐃ, ᐃⵠ.ΔΔⵠΔΔ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("000_110_000")] = [ᐃⵠ.ᐃⵠᐃⲆᐃ, ᐃⵠ.ΔⵠᐃⵠⲆ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("000_110_010")] = [ᐃⵠ.ᐃᐃΔᐃΔ, ᐃⵠ.ᐃⵠᐃⲆᐃ, ᐃⵠ.ⲆⵠⵠΔᐃ, ᐃⵠ.ΔⵠᐃⵠⲆ, ᐃⵠ.ΔᐃⲆⵠᐃ, ᐃⵠ.ΔΔⵠΔΔ, ᐃⵠ.Ⲇⵠⵠⵠⵠ, ᐃⵠ.ⲆⵠⵠⲆⵠΔⵠ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("000_110_110")] = [ᐃⵠ.ᐃᐃΔᐃΔ, ᐃⵠ.ⲆⵠᐃⲆᐃⵠⲆⵠᐃ, ᐃⵠ.ΔⲆⵠΔⵠⲆⲆ, ᐃⵠ.ᐃⵠᐃⲆᐃ, ᐃⵠ.ⲆⵠⵠΔᐃ, ᐃⵠ.ΔⵠᐃⵠⲆ, ᐃⵠ.ΔΔⵠΔΔ, ᐃⵠ.Ⲇⵠⵠⵠⵠ, ᐃⵠ.ⲆⵠⵠⲆⵠΔⵠ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("000_111_000")] = [ᐃⵠ.ᐃⵠᐃⲆᐃ, ᐃⵠ.ⲆⵠⵠΔᐃ, ᐃⵠ.ⵠⲆⵠⲆᐃᐃⲆ, ᐃⵠ.ΔᐃⵠⲆᐃᐃⵠ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("000_111_111")] = [ᐃⵠ.ᐃⵠᐃⲆᐃ, ᐃⵠ.ΔⲆⵠΔⵠⲆⲆ, ᐃⵠ.ᐃᐃΔᐃΔ, ᐃⵠ.ᐃⵠᐃᐃᐃ, ᐃⵠ.Ⲇᐃᐃᐃᐃ, ᐃⵠ.ᐃΔⲆΔⲆⵠᐃ, ᐃⵠ.ΔΔᐃᐃⵠᐃⵠ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("010_010_000")] = [ᐃⵠ.ΔⵠᐃⵠⲆ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("010_010_010")] = [ᐃⵠ.ΔᐃⲆΔⲆᐃΔ, ᐃⵠ.ΔⵠᐃⵠⲆ, ᐃⵠ.ΔᐃⲆⵠᐃ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("010_011_000")] = [ᐃⵠ.ⵠΔⵠⲆⵠ, ᐃⵠ.ΔⵠᐃⵠⲆ, ᐃⵠ.ΔᐃⲆⵠᐃ, ᐃⵠ.Ⲇⵠⵠⵠⵠ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("010_110_000")] = [ᐃⵠ.ᐃⵠᐃⲆᐃ, ᐃⵠ.ⲆⵠⵠΔᐃ, ᐃⵠ.ΔⵠᐃⵠⲆ, ᐃⵠ.Ⲇⵠⵠⵠⵠ, ᐃⵠ.ΔΔΔⵠⵠ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("010_110_110")] = [ᐃⵠ.ⵠⵠⲆΔⲆ, ᐃⵠ.ⵠΔⵠⲆⵠ, ᐃⵠ.Ⲇᐃᐃᐃᐃ, ᐃⵠ.ᐃⵠᐃᐃᐃ, ᐃⵠ.ᐃᐃΔᐃΔ, ᐃⵠ.ΔⲆⵠΔⵠⲆⲆ, ᐃⵠ.ᐃⵠᐃⲆᐃ, ᐃⵠ.ΔΔᐃᐃⵠᐃⵠ, ᐃⵠ.ΔᐃᐃⵠΔⲆΔ, ᐃⵠ.ΔᐃⲆΔⲆᐃΔ, ᐃⵠ.ⲆⵠⵠΔᐃ, ᐃⵠ.ⵠⲆⵠⲆᐃᐃⲆ, ᐃⵠ.ΔᐃⵠⲆᐃᐃⵠ, ᐃⵠ.ΔⵠᐃⵠⲆ, ᐃⵠ.ΔᐃⲆⵠᐃ, ᐃⵠ.ΔᐃⵠⲆⲆΔΔ, ᐃⵠ.ⵠⵠᐃΔⵠΔΔ, ᐃⵠ.ⲆᐃⲆΔⵠⲆᐃ, ᐃⵠ.ΔΔⵠΔΔ, ᐃⵠ.Ⲇⵠⵠⵠⵠ, ᐃⵠ.ΔΔΔⵠⵠ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("010_011_010")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("010_110_110")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("010_011_011")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("010_110_110")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("000_111_011")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("010_110_110")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("010_110_010")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("010_110_110")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("010_111_000")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("010_110_110")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("010_111_010")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("010_110_110")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("010_111_011")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("010_110_110")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("010_111_110")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("010_110_110")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("010_111_111")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("010_110_110")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("000_111_110")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("010_110_110")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("000_111_010")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("010_110_110")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("011_011_000")] = [ᐃⵠ.ⵠᐃΔΔⲆᐃΔ, ᐃⵠ.ⵠⵠⲆΔⲆ, ᐃⵠ.ⵠΔⵠⲆⵠ, ᐃⵠ.ΔⵠᐃⵠⲆ, ᐃⵠ.ΔᐃⲆⵠᐃ, ᐃⵠ.Ⲇⵠⵠⵠⵠ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("011_011_010")] = [ᐃⵠ.ⵠᐃΔΔⲆᐃΔ, ᐃⵠ.ⵠⵠⲆΔⲆ, ᐃⵠ.ⵠΔⵠⲆⵠ, ᐃⵠ.ᐃⵠᐃⲆᐃ, ᐃⵠ.ⲆⵠⵠΔᐃ, ᐃⵠ.ⵠⲆⵠⲆᐃᐃⲆ, ᐃⵠ.ΔᐃⵠⲆᐃᐃⵠ, ᐃⵠ.ΔⵠᐃⵠⲆ, ᐃⵠ.ΔᐃⲆⵠᐃ, ᐃⵠ.Ⲇⵠⵠⵠⵠ, ᐃⵠ.ΔΔΔⵠⵠ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("011_011_011")] = [ᐃⵠ.ᐃⵠᐃᐃᐃ, ᐃⵠ.Ⲇᐃᐃᐃᐃ, ᐃⵠ.ᐃΔⲆΔⲆⵠᐃ, ᐃⵠ.ⵠΔⵠⲆⵠ, ᐃⵠ.ⵠⵠⲆΔⲆ, ᐃⵠ.ⵠᐃΔΔⲆᐃΔ, ᐃⵠ.ΔᐃᐃⵠΔⲆΔ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("011_111_000")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("011_011_010")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("011_111_010")] = [ᐃⵠ.ⵠᐃΔΔⲆᐃΔ, ᐃⵠ.ⵠⵠⲆΔⲆ, ᐃⵠ.ⵠΔⵠⲆⵠ, ᐃⵠ.Ⲇᐃᐃᐃᐃ, ᐃⵠ.ᐃⵠᐃᐃᐃ, ᐃⵠ.ᐃᐃΔᐃΔ, ᐃⵠ.ᐃⵠᐃⲆᐃ, ᐃⵠ.ΔΔᐃᐃⵠᐃⵠ, ᐃⵠ.ΔᐃᐃⵠΔⲆΔ, ᐃⵠ.ΔᐃⲆΔⲆᐃΔ, ᐃⵠ.ⲆⵠⵠΔᐃ, ᐃⵠ.ⵠⲆⵠⲆᐃᐃⲆ, ᐃⵠ.ΔᐃⵠⲆᐃᐃⵠ, ᐃⵠ.ΔⵠᐃⵠⲆ, ᐃⵠ.ΔᐃⲆⵠᐃ, ᐃⵠ.ΔᐃⵠⲆⲆΔΔ, ᐃⵠ.ⵠⵠᐃΔⵠΔΔ, ᐃⵠ.ⲆᐃⲆΔⵠⲆᐃ, ᐃⵠ.ΔΔⵠΔΔ, ᐃⵠ.Ⲇⵠⵠⵠⵠ, ᐃⵠ.ΔΔΔⵠⵠ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("011_111_011")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("011_111_010")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("011_111_110")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("011_111_010")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("011_111_111")] = [ᐃⵠ.ⵠᐃΔΔⲆᐃΔ, ᐃⵠ.ⵠⵠⲆΔⲆ, ᐃⵠ.ⵠΔⵠⲆⵠ, ᐃⵠ.ᐃΔⲆΔⲆⵠᐃ, ᐃⵠ.Ⲇᐃᐃᐃᐃ, ᐃⵠ.ᐃⵠᐃᐃᐃ, ᐃⵠ.ᐃᐃΔᐃΔ, ᐃⵠ.ΔⲆⵠΔⵠⲆⲆ, ᐃⵠ.ᐃⵠᐃⲆᐃ, ᐃⵠ.ΔΔᐃᐃⵠᐃⵠ, ᐃⵠ.ΔᐃᐃⵠΔⲆΔ, ᐃⵠ.ΔᐃⲆΔⲆᐃΔ, ᐃⵠ.ⲆⵠⵠΔᐃ, ᐃⵠ.ⵠⲆⵠⲆᐃᐃⲆ, ᐃⵠ.ΔᐃⵠⲆᐃᐃⵠ, ᐃⵠ.ΔⵠᐃⵠⲆ, ᐃⵠ.ΔᐃⲆⵠᐃ, ᐃⵠ.ΔᐃⵠⲆⲆΔΔ, ᐃⵠ.ⵠⵠᐃΔⵠΔΔ, ᐃⵠ.ⲆᐃⲆΔⵠⲆᐃ, ᐃⵠ.ΔΔⵠΔΔ, ᐃⵠ.Ⲇⵠⵠⵠⵠ, ᐃⵠ.ΔΔΔⵠⵠ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("110_110_000")] = [ᐃⵠ.ⲆⵠᐃᐃⵠⲆΔ, ᐃⵠ.ᐃⵠᐃⲆᐃ, ᐃⵠ.ⵠᐃᐃⲆⵠΔΔ, ᐃⵠ.ⲆⵠⵠΔᐃ, ᐃⵠ.ΔⵠᐃⵠⲆ, ᐃⵠ.ΔΔΔⵠⵠ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("110_110_010")] = [ᐃⵠ.ᐃᐃΔᐃΔ, ᐃⵠ.ⲆⵠᐃᐃⵠⲆΔ, ᐃⵠ.ᐃⵠᐃⲆᐃ, ᐃⵠ.ΔᐃⲆΔⲆᐃΔ, ᐃⵠ.ⲆⵠⵠΔᐃ, ᐃⵠ.ΔⵠᐃⵠⲆ, ᐃⵠ.ΔΔⵠΔΔ, ᐃⵠ.ΔΔΔⵠⵠ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("110_110_110")] = [ᐃⵠ.ᐃᐃΔᐃΔ, ᐃⵠ.ΔⲆⵠΔⵠⲆⲆ, ᐃⵠ.ⲆⵠᐃᐃⵠⲆΔ, ᐃⵠ.ᐃⵠᐃⲆᐃ, ᐃⵠ.ΔᐃⲆΔⲆᐃΔ, ᐃⵠ.ⲆⵠⵠΔᐃ, ᐃⵠ.ΔⵠᐃⵠⲆ, ᐃⵠ.ΔΔⵠΔΔ, ᐃⵠ.ΔΔΔⵠⵠ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("110_111_000")] = [ᐃⵠ.ⵠⵠⲆΔⲆ, ᐃⵠ.ⵠΔⵠⲆⵠ, ᐃⵠ.ⲆⵠᐃᐃⵠⲆΔ, ᐃⵠ.ᐃⵠᐃⲆᐃ, ᐃⵠ.ⵠᐃᐃⲆⵠΔΔ, ᐃⵠ.ⵠᐃⵠᐃⵠᐃΔ, ᐃⵠ.ⲆⵠⵠΔᐃ, ᐃⵠ.ⵠⲆⵠⲆᐃᐃⲆ, ᐃⵠ.ΔᐃⵠⲆᐃᐃⵠ, ᐃⵠ.ΔⵠᐃⵠⲆ, ᐃⵠ.ΔᐃⲆⵠᐃ, ᐃⵠ.Ⲇⵠⵠⵠⵠ, ᐃⵠ.ΔΔΔⵠⵠ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("110_111_110")] = [ᐃⵠ.ⵠⵠⲆΔⲆ, ᐃⵠ.ⵠΔⵠⲆⵠ, ᐃⵠ.Ⲇᐃᐃᐃᐃ, ᐃⵠ.ᐃⵠᐃᐃᐃ, ᐃⵠ.ᐃᐃΔᐃΔ, ᐃⵠ.ΔⲆⵠΔⵠⲆⲆ, ᐃⵠ.ⲆⵠᐃᐃⵠⲆΔ, ᐃⵠ.ᐃⵠᐃⲆᐃ, ᐃⵠ.ΔΔᐃᐃⵠᐃⵠ, ᐃⵠ.ⵠᐃⵠᐃⵠᐃΔ, ᐃⵠ.ΔᐃᐃⵠΔⲆΔ, ᐃⵠ.ΔᐃⲆΔⲆᐃΔ, ᐃⵠ.ⲆⵠⵠΔᐃ, ᐃⵠ.ⵠⲆⵠⲆᐃᐃⲆ, ᐃⵠ.ΔᐃⵠⲆᐃᐃⵠ, ᐃⵠ.ΔⵠᐃⵠⲆ, ᐃⵠ.ΔᐃⲆⵠᐃ, ᐃⵠ.ΔᐃⵠⲆⲆΔΔ, ᐃⵠ.ⵠⵠᐃΔⵠΔΔ, ᐃⵠ.ⲆᐃⲆΔⵠⲆᐃ, ᐃⵠ.ΔΔⵠΔΔ, ᐃⵠ.Ⲇⵠⵠⵠⵠ, ᐃⵠ.ΔΔΔⵠⵠ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("110_111_111")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("110_111_110")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("110_111_011")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("110_111_110")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("110_111_010")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("110_111_110")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("111_111_110")] = [ᐃⵠ.ΔΔΔⵠⵠ, ᐃⵠ.Ⲇⵠⵠⵠⵠ, ᐃⵠ.ΔΔⵠΔΔ, ᐃⵠ.ⲆᐃⲆΔⵠⲆᐃ, ᐃⵠ.ⵠⵠᐃΔⵠΔΔ, ᐃⵠ.ΔᐃⵠⲆⲆΔΔ, ᐃⵠ.ΔᐃⲆⵠᐃ, ᐃⵠ.ΔⵠᐃⵠⲆ, ᐃⵠ.ΔᐃⵠⲆᐃᐃⵠ, ᐃⵠ.ⵠⲆⵠⲆᐃᐃⲆ, ᐃⵠ.ⲆⵠⵠΔᐃ, ᐃⵠ.ΔᐃⲆΔⲆᐃΔ, ᐃⵠ.ΔᐃᐃⵠΔⲆΔ, ᐃⵠ.ⵠᐃⵠᐃⵠᐃΔ, ᐃⵠ.ΔΔᐃᐃⵠᐃⵠ, ᐃⵠ.ᐃⵠᐃⲆᐃ, ᐃⵠ.ⲆⵠᐃᐃⵠⲆΔ, ᐃⵠ.ᐃᐃΔᐃΔ, ᐃⵠ.ᐃⵠᐃᐃᐃ, ᐃⵠ.Ⲇᐃᐃᐃᐃ, ᐃⵠ.ⵠΔⵠⲆⵠ, ᐃⵠ.ⵠⵠⲆΔⲆ, ᐃⵠ.ⵠᐃΔΔⲆᐃΔ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("111_111_011")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("111_111_110")];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("111_111_000")] = [ᐃⵠ.ⵠᐃᐃⲆⵠΔΔ, ᐃⵠ.ᐃⵠᐃⲆᐃ, ᐃⵠ.ⲆⵠᐃᐃⵠⲆΔ, ᐃⵠ.ⵠΔⵠⲆⵠ, ᐃⵠ.ⵠⵠⲆΔⲆ, ᐃⵠ.ⵠᐃΔΔⲆᐃΔ, ᐃⵠ.ⵠᐃⵠᐃⵠᐃΔ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("111_111_111")] = [ᐃⵠ.ⵠᐃΔΔⲆᐃΔ, ᐃⵠ.ⵠⵠⲆΔⲆ, ᐃⵠ.ⵠΔⵠⲆⵠ, ᐃⵠ.ᐃΔⲆΔⲆⵠᐃ, ᐃⵠ.Ⲇᐃᐃᐃᐃ, ᐃⵠ.ᐃⵠᐃᐃᐃ, ᐃⵠ.ᐃᐃΔᐃΔ, ᐃⵠ.ΔⲆⵠΔⵠⲆⲆ, ᐃⵠ.ⲆⵠᐃᐃⵠⲆΔ, ᐃⵠ.ᐃⵠᐃⲆᐃ, ᐃⵠ.ΔΔᐃᐃⵠᐃⵠ, ᐃⵠ.ΔᐃᐃⵠΔⲆΔ, ᐃⵠ.ΔᐃⲆΔⲆᐃΔ, ᐃⵠ.ⲆⵠⵠΔᐃ, ᐃⵠ.ⵠⲆⵠⲆᐃᐃⲆ, ᐃⵠ.ΔᐃⵠⲆᐃᐃⵠ, ᐃⵠ.ΔⵠᐃⵠⲆ, ᐃⵠ.ΔᐃⲆⵠᐃ, ᐃⵠ.ΔᐃⵠⲆⲆΔΔ, ᐃⵠ.ⵠⵠᐃΔⵠΔΔ, ᐃⵠ.ⲆᐃⲆΔⵠⲆᐃ, ᐃⵠ.ΔΔⵠΔΔ, ᐃⵠ.Ⲇⵠⵠⵠⵠ, ᐃⵠ.ΔΔΔⵠⵠ];
        ⵠΔ[1025][Wr.ᐃΔΔ][b("111_111_010")] = ⵠΔ[1025][Wr.ᐃΔΔ][b("111_111_110")];
        ⵠΔ[1024] = [];
        ⵠΔ[1024][Wr.ⵠΔⵠ] = [];
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("000_010_000")] = ᐃⵠ.ᐃΔⲆⵠⵠⵠⵠ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("000_010_010")] = ᐃⵠ.ΔΔⵠⲆᐃⲆⵠ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("000_011_000")] = ᐃⵠ.ᐃⵠᐃⲆⲆᐃⵠ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("000_011_010")] = ᐃⵠ.ΔⵠⲆᐃΔᐃⲆ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("000_011_011")] = ᐃⵠ.ⲆⲆⵠⲆᐃᐃⲆ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("000_110_000")] = ᐃⵠ.ΔⵠⲆᐃⲆⵠⲆ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("000_110_010")] = ᐃⵠ.ⲆⲆᐃⲆⵠⵠΔ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("000_110_110")] = ᐃⵠ.ⲆᐃⵠⲆᐃⲆⵠ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("000_111_000")] = ᐃⵠ.ΔΔⵠⵠⲆⲆⲆ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("000_111_010")] = ᐃⵠ.ᐃⵠΔⵠⲆⲆΔ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("000_111_011")] = ᐃⵠ.ΔⲆᐃᐃⲆⲆᐃ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("000_111_110")] = ᐃⵠ.ⵠᐃΔⲆᐃⵠΔ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("000_111_111")] = ᐃⵠ.ⲆⵠΔᐃΔⲆΔ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("010_010_000")] = ᐃⵠ.ⵠⵠⲆⲆᐃΔⵠ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("010_010_010")] = ᐃⵠ.ΔⵠᐃΔⵠᐃΔ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("010_011_000")] = ᐃⵠ.ⲆⵠΔΔⲆⵠⵠ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("010_011_010")] = ᐃⵠ.ΔⲆᐃᐃⵠⵠⵠ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("010_011_011")] = ᐃⵠ.ⲆⵠᐃΔⲆᐃⲆ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("010_110_000")] = ᐃⵠ.ⲆΔᐃⲆᐃⵠⵠ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("010_110_010")] = ᐃⵠ.ᐃⵠⵠⲆⵠΔⲆ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("010_110_110")] = ᐃⵠ.ⵠⵠΔΔⲆⲆΔ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("010_111_000")] = ᐃⵠ.ᐃᐃⵠᐃⵠΔᐃ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("010_111_010")] = ᐃⵠ.ΔⲆᐃᐃΔΔᐃ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("010_111_011")] = ᐃⵠ.ΔⲆⲆⲆⵠⵠΔ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("010_111_110")] = ᐃⵠ.ᐃⲆᐃΔΔᐃΔ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("010_111_111")] = ᐃⵠ.ⵠᐃΔⵠᐃⵠΔ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("011_011_000")] = ᐃⵠ.ⵠⲆᐃᐃΔᐃΔ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("011_011_010")] = ᐃⵠ.ᐃⲆⵠᐃⲆⲆᐃ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("011_011_011")] = ᐃⵠ.ⲆᐃⲆᐃⵠⵠΔ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("011_111_000")] = ᐃⵠ.ΔⲆᐃⵠΔⵠⵠ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("011_111_010")] = ᐃⵠ.ⵠⵠΔⵠⲆᐃⵠ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("011_111_011")] = ᐃⵠ.ΔΔᐃⵠΔΔⵠ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("011_111_110")] = ᐃⵠ.ΔΔⵠΔⵠⵠⵠ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("011_111_111")] = ᐃⵠ.ᐃⵠΔᐃΔᐃⲆ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("110_110_000")] = ᐃⵠ.ⵠΔΔΔΔⲆⵠ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("110_110_010")] = ᐃⵠ.ΔⲆⲆΔΔΔᐃ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("110_110_110")] = ᐃⵠ.ΔΔΔΔᐃΔᐃ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("110_111_000")] = ᐃⵠ.ΔᐃⵠⲆⲆΔᐃ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("110_111_010")] = ᐃⵠ.ᐃΔⲆΔΔⵠᐃ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("110_111_011")] = ᐃⵠ.ⵠⲆΔⲆⵠΔᐃ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("110_111_110")] = ᐃⵠ.ᐃⵠⵠⵠⵠᐃⵠ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("110_111_111")] = ᐃⵠ.ᐃᐃΔⲆᐃⵠⲆ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("111_111_011")] = ᐃⵠ.ΔⲆⲆⲆⵠⵠⵠ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("111_111_110")] = ᐃⵠ.ᐃⵠᐃΔⵠΔΔ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("111_111_011")] = ᐃⵠ.ΔⲆⲆⲆⵠⵠⵠ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("111_111_000")] = ᐃⵠ.Δᐃᐃᐃᐃᐃᐃ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("111_111_111")] = ᐃⵠ.ⵠᐃⵠᐃⲆᐃᐃ;
        ⵠΔ[1024][Wr.ⵠΔⵠ][b("111_111_010")] = ᐃⵠ.ΔⲆⲆᐃΔⲆᐃ;
        ⵠΔ[1024][Wr.ᐃΔΔ] = [];
        ⵠΔ[1024][Wr.ᐃΔΔ][b("000_010_000")] = ᐃⵠ.ⲆⵠΔΔⵠⵠΔ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("000_010_010")] = ᐃⵠ.ᐃᐃᐃⵠⲆⵠⲆ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("000_011_000")] = ᐃⵠ.ⲆⲆⲆⲆΔᐃΔ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("000_011_010")] = ᐃⵠ.ⲆᐃΔᐃᐃⲆⵠ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("000_011_011")] = ᐃⵠ.ᐃⵠΔⲆⲆᐃᐃ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("000_110_000")] = ᐃⵠ.ⵠⵠⵠΔᐃⵠΔ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("000_110_010")] = ᐃⵠ.ⵠⲆΔΔⵠᐃⵠ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("000_110_110")] = ᐃⵠ.ⵠᐃᐃᐃΔᐃⵠ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("000_111_000")] = ᐃⵠ.ᐃⵠⵠⲆΔᐃⲆ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("000_111_010")] = ᐃⵠ.ⲆⲆⵠΔᐃᐃᐃ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("000_111_011")] = ᐃⵠ.ⵠⲆᐃΔΔⲆᐃ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("000_111_110")] = ᐃⵠ.ΔⲆⵠᐃᐃⵠⲆ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("000_111_111")] = ᐃⵠ.ⵠᐃⵠⲆΔΔᐃ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("010_010_000")] = ᐃⵠ.Ⲇⵠⵠⵠᐃⵠⵠ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("010_010_010")] = ᐃⵠ.ΔⲆΔᐃΔᐃⵠ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("010_011_000")] = ᐃⵠ.ⵠⲆΔⵠⲆᐃΔ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("010_011_010")] = ᐃⵠ.ΔⲆᐃⲆᐃⵠᐃ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("010_011_011")] = ᐃⵠ.ⵠⵠᐃᐃⲆᐃⵠ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("010_110_000")] = ᐃⵠ.ⵠᐃΔⵠΔΔⲆ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("010_110_010")] = ᐃⵠ.ΔΔⵠΔⲆⵠᐃ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("010_110_110")] = ᐃⵠ.ᐃⲆΔⲆⲆⵠᐃᐃᐃ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("010_111_000")] = ᐃⵠ.ᐃⵠⵠΔⵠⲆΔᐃⵠ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("010_111_010")] = ᐃⵠ.ⵠΔᐃⲆⵠᐃⲆⵠⲆ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("010_111_011")] = ᐃⵠ.ᐃΔⲆⲆᐃⵠⲆΔⲆ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("010_111_110")] = ᐃⵠ.ⵠⵠΔᐃⵠᐃⲆⵠᐃ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("010_111_111")] = ᐃⵠ.ᐃⲆⵠᐃᐃΔⲆⵠᐃ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("011_011_000")] = ᐃⵠ.ΔⵠⵠᐃⲆΔⲆᐃᐃ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("011_011_010")] = ᐃⵠ.ⲆᐃⲆΔⲆⲆⲆΔΔ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("011_011_011")] = ᐃⵠ.ⲆⵠⲆⵠⵠᐃΔⵠⲆ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("011_111_000")] = ᐃⵠ.ᐃⲆⲆᐃⲆⲆᐃⲆⵠ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("011_111_010")] = ᐃⵠ.ⵠⵠⵠⵠⵠⵠⵠⵠⵠ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("011_111_011")] = ᐃⵠ.ⲆΔΔⵠΔⵠΔⵠΔ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("011_111_110")] = ᐃⵠ.ⲆⵠΔΔⲆⲆⵠᐃⵠ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("011_111_111")] = ᐃⵠ.ᐃΔᐃⵠⵠᐃΔᐃⵠ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("110_110_000")] = ᐃⵠ.ᐃΔⲆⵠⵠᐃᐃΔΔ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("110_110_010")] = ᐃⵠ.ⵠΔⵠⵠⲆᐃⵠⵠⲆ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("110_110_110")] = ᐃⵠ.ⲆⵠⵠⵠΔΔᐃᐃᐃ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("110_111_000")] = ᐃⵠ.ΔᐃⲆΔⲆΔⲆⲆⲆ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("110_111_010")] = ᐃⵠ.ⵠⵠᐃΔᐃⵠᐃⲆⲆ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("110_111_011")] = ᐃⵠ.ᐃᐃᐃΔⲆⵠΔⲆⵠ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("110_111_110")] = ᐃⵠ.ⲆⵠΔⵠᐃᐃⵠⲆⵠ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("110_111_111")] = ᐃⵠ.ⵠⵠᐃΔᐃΔᐃᐃΔ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("111_111_011")] = ᐃⵠ.ᐃⵠⲆⵠΔⲆᐃ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("111_111_110")] = ᐃⵠ.ⲆⲆⵠΔΔᐃΔᐃⲆ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("111_111_011")] = ᐃⵠ.ᐃⵠⲆⵠΔⲆᐃ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("111_111_000")] = ᐃⵠ.ⵠᐃΔᐃᐃᐃᐃⵠΔ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("111_111_111")] = ᐃⵠ.ⵠⵠⲆᐃᐃⲆΔⲆⲆ;
        ⵠΔ[1024][Wr.ᐃΔΔ][b("111_111_010")] = ᐃⵠ.ⵠⵠᐃⲆⵠᐃᐃⵠΔ;
        ⵠΔ[32] = [];
        ⵠΔ[32][Wr.ⵠΔⵠ] = ᐃⵠ.ΔᐃΔᐃᐃⲆᐃ;
        ⵠΔ[32][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⵠᐃᐃᐃᐃΔ;
        ⵠΔ[205] = [];
        ⵠΔ[205][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⵠⲆⲆᐃⵠⵠ;
        ⵠΔ[205][Wr.ᐃΔΔ] = ᐃⵠ.ΔᐃⲆΔᐃⲆⲆ;
        ⵠΔ[957] = [];
        ⵠΔ[957][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠᐃᐃᐃᐃⲆᐃ;
        ⵠΔ[957][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⵠᐃⲆᐃᐃⲆ;
        ⵠΔ[207] = [];
        ⵠΔ[207][Wr.ⵠΔⵠ] = ᐃⵠ.ΔΔⲆΔᐃⲆⲆ;
        ⵠΔ[207][Wr.ᐃΔΔ] = ᐃⵠ.ⵠΔⲆΔⲆΔᐃ;
        ⵠΔ[954] = [];
        ⵠΔ[954][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆΔⵠⲆΔⵠᐃ;
        ⵠΔ[954][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⲆΔΔᐃᐃᐃ;
        ⵠΔ[958] = [];
        ⵠΔ[958][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠΔⵠⲆⵠᐃⲆ;
        ⵠΔ[958][Wr.ᐃΔΔ] = ᐃⵠ.ΔⵠⵠⲆⵠⲆⵠ;
        ⵠΔ[209] = [];
        ⵠΔ[209][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆⵠⵠᐃⲆⲆΔ;
        ⵠΔ[209][Wr.ᐃΔΔ] = ᐃⵠ.ⵠᐃⲆⲆⲆᐃⲆ;
        ⵠΔ[971] = [];
        ⵠΔ[971][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃᐃⲆᐃᐃⲆᐃ;
        ⵠΔ[971][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⲆΔⵠΔΔⲆ;
        ⵠΔ[211] = [];
        ⵠΔ[211][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠΔᐃⲆⵠⲆᐃ;
        ⵠΔ[211][Wr.ᐃΔΔ] = ᐃⵠ.ΔΔᐃⵠᐃΔⵠ;
        ⵠΔ[986] = [];
        ⵠΔ[986][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃⲆᐃᐃᐃⵠⵠ;
        ⵠΔ[986][Wr.ᐃΔΔ] = ᐃⵠ.ⵠΔⵠΔᐃⲆΔ;
        ⵠΔ[989] = [];
        ⵠΔ[989][Wr.ⵠΔⵠ] = [ᐃⵠ.ΔᐃⵠⵠΔⵠΔ];
        ⵠΔ[989][Wr.ᐃΔΔ] = [ᐃⵠ.ⲆⲆⵠΔΔⵠⲆ];
        ⵠΔ[217] = [];
        ⵠΔ[217][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆⲆⵠᐃⵠⵠΔ;
        ⵠΔ[217][Wr.ᐃΔΔ] = ᐃⵠ.ⲆᐃⲆⵠⲆⵠᐃ;
        ⵠΔ[219] = [];
        ⵠΔ[219][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃⲆΔⲆⵠΔⲆ;
        ⵠΔ[219][Wr.ᐃΔΔ] = ᐃⵠ.ΔᐃᐃᐃⵠᐃΔ;
        ⵠΔ[218] = [];
        ⵠΔ[218][Wr.ⵠΔⵠ] = ᐃⵠ.ΔᐃⲆⲆΔᐃΔ;
        ⵠΔ[218][Wr.ᐃΔΔ] = ᐃⵠ.ΔᐃᐃᐃⲆⵠⵠ;
        ⵠΔ[212] = [];
        ⵠΔ[212][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆΔⵠⲆΔΔⲆ;
        ⵠΔ[212][Wr.ᐃΔΔ] = ᐃⵠ.ⵠᐃⲆⲆΔⲆⵠ;
        ⵠΔ[213] = [];
        ⵠΔ[213][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⲆⲆΔⲆΔⲆ;
        ⵠΔ[213][Wr.ᐃΔΔ] = ᐃⵠ.ᐃΔⲆⵠᐃᐃΔ;
        ⵠΔ[214] = [];
        ⵠΔ[214][Wr.ⵠΔⵠ] = ᐃⵠ.ΔᐃᐃⲆⵠᐃⵠ;
        ⵠΔ[214][Wr.ᐃΔΔ] = ᐃⵠ.ᐃᐃⲆΔⲆΔⵠ;
        ⵠΔ[215] = [];
        ⵠΔ[215][Wr.ⵠΔⵠ] = ᐃⵠ.ΔᐃΔᐃᐃᐃⲆ;
        ⵠΔ[215][Wr.ᐃΔΔ] = ᐃⵠ.ᐃΔᐃⲆᐃⲆΔ;
        ⵠΔ[216] = [];
        ⵠΔ[216][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃᐃⵠΔΔΔⵠ;
        ⵠΔ[216][Wr.ᐃΔΔ] = ᐃⵠ.ⵠⵠᐃⵠΔᐃⵠ;
        ⵠΔ[220] = [];
        ⵠΔ[220][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃⲆΔᐃⵠⵠᐃ;
        ⵠΔ[220][Wr.ᐃΔΔ] = ᐃⵠ.ΔⲆⵠᐃᐃⲆᐃ;
        ⵠΔ[1020] = [];
        ⵠΔ[1020][Wr.ⵠΔⵠ] = ᐃⵠ.ΔΔⲆⵠᐃΔΔ;
        ⵠΔ[1020][Wr.ᐃΔΔ] = ᐃⵠ.ⵠⲆⲆᐃⲆⲆⵠ;
        ⵠΔ[1021] = [];
        ⵠΔ[1021][Wr.ⵠΔⵠ] = ᐃⵠ.ΔⲆⲆᐃΔΔΔ;
        ⵠΔ[1021][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⵠᐃᐃⵠⵠΔ;
        ⵠΔ[39] = [];
        ⵠΔ[39][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃᐃⲆΔᐃⲆⲆ;
        ⵠΔ[39][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⲆⵠⲆⲆΔΔ;
        ⵠΔ[1022] = ᐃⵠ.ⵠᐃⲆⲆᐃΔⵠ;
        ⵠΔ[1023] = ᐃⵠ.ⵠΔΔΔᐃⵠᐃ;
        ⵠΔ[1041] = [];
        ⵠΔ[1041][Wr.ⵠΔⵠ] = [];
        ⵠΔ[1041][Wr.ᐃΔΔ] = [];
        ⵠΔ[1041][Wr.ⵠΔⵠ].push(ᐃⵠ.ΔⵠⲆⲆᐃΔᐃ);
        ⵠΔ[1041][Wr.ⵠΔⵠ].push(ᐃⵠ.ⲆΔⲆⵠΔⲆΔ);
        ⵠΔ[1041][Wr.ⵠΔⵠ].push(ᐃⵠ.ⲆⵠⲆⲆΔᐃᐃ);
        ⵠΔ[1041][Wr.ᐃΔΔ].push(ᐃⵠ.ⵠΔΔⲆⲆΔⵠ);
        ⵠΔ[1041][Wr.ᐃΔΔ].push(ᐃⵠ.ⵠⲆⵠⵠⲆΔᐃ);
        ⵠΔ[1041][Wr.ᐃΔΔ].push(ᐃⵠ.ᐃⵠᐃⵠⲆΔⲆ);
        ⵠΔ[244] = [];
        ⵠΔ[244][Wr.ⵠΔⵠ] = [];
        ⵠΔ[244][Wr.ᐃΔΔ] = [];
        ⵠΔ[244][Wr.ⵠΔⵠ].push(ᐃⵠ.ⲆⲆᐃΔⵠⲆⲆ);
        ⵠΔ[244][Wr.ⵠΔⵠ].push(ᐃⵠ.ᐃⵠⲆⲆΔΔⲆ);
        ⵠΔ[244][Wr.ⵠΔⵠ].push(ᐃⵠ.ᐃᐃⵠⲆΔᐃⲆ);
        ⵠΔ[244][Wr.ᐃΔΔ].push(ᐃⵠ.ⵠⵠⲆᐃΔⵠΔ);
        ⵠΔ[244][Wr.ᐃΔΔ].push(ᐃⵠ.ΔⵠⵠⵠⲆⵠⲆ);
        ⵠΔ[244][Wr.ᐃΔΔ].push(ᐃⵠ.ⲆΔᐃΔⲆⵠᐃ);
        ⵠΔ[1052] = [];
        ⵠΔ[1052][Wr.ⵠΔⵠ] = [];
        ⵠΔ[1052][Wr.ᐃΔΔ] = [];
        ⵠΔ[1052][Wr.ⵠΔⵠ].push(ᐃⵠ.ⲆⵠᐃΔΔΔΔ);
        ⵠΔ[1052][Wr.ⵠΔⵠ].push(ᐃⵠ.ΔⲆⵠⲆΔⵠⲆ);
        ⵠΔ[1052][Wr.ⵠΔⵠ].push(ᐃⵠ.ΔΔⵠᐃΔΔⵠ);
        ⵠΔ[1052][Wr.ⵠΔⵠ].push(ᐃⵠ.ⲆⲆⵠΔⵠⵠΔ);
        ⵠΔ[1052][Wr.ⵠΔⵠ].push(ᐃⵠ.ⲆᐃⵠⲆᐃᐃⵠ);
        ⵠΔ[1052][Wr.ᐃΔΔ].push(ᐃⵠ.ΔⲆΔⲆΔΔᐃ);
        ⵠΔ[1052][Wr.ᐃΔΔ].push(ᐃⵠ.ᐃⵠΔᐃⲆⵠⲆ);
        ⵠΔ[1052][Wr.ᐃΔΔ].push(ᐃⵠ.ΔⵠⲆⲆΔᐃᐃ);
        ⵠΔ[1052][Wr.ᐃΔΔ].push(ᐃⵠ.ΔᐃΔΔᐃⲆⲆ);
        ⵠΔ[1052][Wr.ᐃΔΔ].push(ᐃⵠ.ΔⵠⲆⲆⵠⵠᐃ);
        ⵠΔ[450] = [];
        ⵠΔ[450][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆⲆΔᐃΔⵠⵠ;
        ⵠΔ[450][Wr.ᐃΔΔ] = ᐃⵠ.ΔΔⵠⲆⲆⵠⲆ;
        ⵠΔ[453] = [];
        ⵠΔ[453][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆⲆⲆΔⵠⲆⵠ;
        ⵠΔ[453][Wr.ᐃΔΔ] = ᐃⵠ.ΔᐃⵠⲆᐃⵠⵠ;
        ⵠΔ[454] = [];
        ⵠΔ[454][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⵠⲆⵠⵠⵠⵠ;
        ⵠΔ[454][Wr.ᐃΔΔ] = ᐃⵠ.ᐃᐃⲆⵠⵠⲆⵠ;
        ⵠΔ[464] = ᐃⵠ.ΔΔⲆⵠⵠΔⵠ;
        ⵠΔ[468] = ᐃⵠ.ⵠΔⲆⵠᐃᐃⵠ;
        ⵠΔ[469] = ᐃⵠ.ΔⲆⲆⲆⲆⵠΔ;
        ⵠΔ[20] = [];
        ⵠΔ[20][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆⵠΔⲆᐃΔⲆ;
        ⵠΔ[20][Wr.ᐃΔΔ] = ᐃⵠ.ⵠΔⲆⲆⲆᐃΔ;
        ⵠΔ[920] = [];
        ⵠΔ[920][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆΔⵠᐃⲆΔⲆ;
        ⵠΔ[920][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⲆᐃΔⵠⵠⲆ;
        ⵠΔ[21] = [];
        ⵠΔ[21][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⵠⲆⵠⲆⲆᐃ;
        ⵠΔ[21][Wr.ᐃΔΔ] = ᐃⵠ.ⵠⵠⲆᐃᐃⲆⲆ;
        ⵠΔ[924] = [];
        ⵠΔ[924][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆΔⵠᐃⲆΔⲆ;
        ⵠΔ[924][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⲆᐃΔⵠⵠⲆ;
        ⵠΔ[44] = [];
        ⵠΔ[44][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃⲆⲆΔΔΔⲆ;
        ⵠΔ[44][Wr.ᐃΔΔ] = ᐃⵠ.ᐃΔᐃⲆⵠⵠⲆ;
        ⵠΔ[19] = [];
        ⵠΔ[19][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆΔΔⲆΔⵠΔ;
        ⵠΔ[19][Wr.ᐃΔΔ] = ᐃⵠ.ⲆᐃⵠΔᐃᐃⵠ;
        ⵠΔ[34] = [];
        ⵠΔ[34][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠΔⲆᐃⵠΔᐃ;
        ⵠΔ[34][Wr.ᐃΔΔ] = ᐃⵠ.ᐃᐃᐃⲆⲆⲆΔ;
        ⵠΔ[17] = [];
        ⵠΔ[17][Wr.ⵠΔⵠ] = ᐃⵠ.ΔΔⲆΔⵠᐃⵠ;
        ⵠΔ[17][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⵠᐃⲆⵠⵠⲆ;
        ⵠΔ[63] = [];
        ⵠΔ[63][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃⲆΔᐃⲆᐃΔ;
        ⵠΔ[63][Wr.ᐃΔΔ] = ᐃⵠ.ⵠΔⵠᐃⵠΔΔ;
        ⵠΔ[60] = [];
        ⵠΔ[60][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠΔⲆᐃⲆΔⵠ;
        ⵠΔ[60][Wr.ᐃΔΔ] = ᐃⵠ.ΔⲆⵠΔⲆⵠᐃ;
        ⵠΔ[94] = [];
        ⵠΔ[94][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠᐃⲆᐃⲆⵠΔᐃⵠ;
        ⵠΔ[94][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⲆⲆⵠΔⵠΔⵠΔ;
        ⵠΔ[95] = [];
        ⵠΔ[95][Wr.ⵠΔⵠ] = ᐃⵠ.ΔⲆⲆⲆᐃΔⵠⵠⵠ;
        ⵠΔ[95][Wr.ᐃΔΔ] = ᐃⵠ.ⲆΔⵠⵠᐃⲆⵠⵠⵠ;
        ⵠΔ[96] = [];
        ⵠΔ[96][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆΔΔᐃⲆⵠⲆⵠᐃ;
        ⵠΔ[96][Wr.ᐃΔΔ] = ᐃⵠ.ΔᐃⲆΔᐃΔΔΔⲆ;
        ⵠΔ[97] = [];
        ⵠΔ[97][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆⵠⲆΔⲆᐃΔⲆΔ;
        ⵠΔ[97][Wr.ᐃΔΔ] = ᐃⵠ.ⵠⵠⵠⵠᐃᐃΔⲆⲆ;
        ⵠΔ[98] = [];
        ⵠΔ[98][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆⲆⵠⵠⵠᐃΔⲆⲆ;
        ⵠΔ[98][Wr.ᐃΔΔ] = ᐃⵠ.ΔⵠΔⵠᐃⲆⲆⲆⲆ;
        ⵠΔ[99] = [];
        ⵠΔ[99][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃᐃΔⵠⲆⲆⲆⲆᐃ;
        ⵠΔ[99][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⵠⲆᐃΔᐃⵠᐃⵠ;
        ⵠΔ[90] = [];
        ⵠΔ[90][Wr.ⵠΔⵠ] = ᐃⵠ.ΔⲆΔⲆⲆᐃⲆ;
        ⵠΔ[90][Wr.ᐃΔΔ] = ᐃⵠ.ⵠⵠⲆⵠⲆΔⵠ;
        ⵠΔ[91] = [];
        ⵠΔ[91][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠᐃⵠᐃⲆⲆⲆ;
        ⵠΔ[91][Wr.ᐃΔΔ] = ᐃⵠ.ᐃΔⵠᐃᐃΔⵠ;
        ⵠΔ[71] = [];
        ⵠΔ[71][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃᐃΔΔⵠⵠᐃⲆᐃ;
        ⵠΔ[71][Wr.ᐃΔΔ] = ᐃⵠ.ΔΔⲆΔⲆⵠΔΔᐃ;
        ⵠΔ[72] = [];
        ⵠΔ[72][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⲆΔᐃᐃⵠᐃᐃⲆ;
        ⵠΔ[72][Wr.ᐃΔΔ] = ᐃⵠ.ᐃᐃⵠᐃⵠΔⲆΔⲆ;
        ⵠΔ[73] = [];
        ⵠΔ[73][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⲆᐃⵠΔⲆⵠΔⲆ;
        ⵠΔ[73][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⲆΔΔⵠΔⲆⵠⲆ;
        ⵠΔ[74] = [];
        ⵠΔ[74][Wr.ⵠΔⵠ] = ᐃⵠ.ΔⵠⲆΔᐃⲆⲆΔᐃ;
        ⵠΔ[74][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⵠⲆⲆⲆᐃΔΔᐃ;
        ⵠΔ[75] = [];
        ⵠΔ[75][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⵠⵠᐃⲆΔᐃΔᐃ;
        ⵠΔ[75][Wr.ᐃΔΔ] = ᐃⵠ.ΔΔΔⲆΔᐃᐃⲆⲆ;
        ⵠΔ[76] = [];
        ⵠΔ[76][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃⵠⵠⵠᐃⵠⲆⵠⲆ;
        ⵠΔ[76][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⲆⵠΔᐃⲆᐃᐃΔ;
        ⵠΔ[101] = [];
        ⵠΔ[101][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆⲆⵠⲆⵠⲆΔ;
        ⵠΔ[101][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⲆΔⵠᐃⵠⲆ;
        ⵠΔ[64] = [];
        ⵠΔ[64][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆᐃⲆⲆⵠⵠΔⲆⲆ;
        ⵠΔ[64][Wr.ᐃΔΔ] = ᐃⵠ.ⲆΔΔΔⵠᐃⲆᐃᐃ;
        ⵠΔ[102] = [];
        ⵠΔ[102][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃᐃᐃΔⲆΔᐃ;
        ⵠΔ[102][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⵠⵠⵠⵠΔΔ;
        ⵠΔ[65] = [];
        ⵠΔ[65][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆᐃᐃⲆΔⵠΔᐃⲆ;
        ⵠΔ[65][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⲆⵠᐃⲆᐃᐃᐃⵠ;
        ⵠΔ[103] = [];
        ⵠΔ[103][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⵠΔⵠΔᐃⲆ;
        ⵠΔ[103][Wr.ᐃΔΔ] = ᐃⵠ.ⲆΔᐃⲆΔⵠᐃ;
        ⵠΔ[66] = [];
        ⵠΔ[66][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆⲆᐃΔᐃⲆⵠΔᐃ;
        ⵠΔ[66][Wr.ᐃΔΔ] = ᐃⵠ.ΔⵠⵠⵠΔⵠᐃⵠⲆ;
        ⵠΔ[104] = [];
        ⵠΔ[104][Wr.ⵠΔⵠ] = ᐃⵠ.ΔⲆΔⲆⵠⵠᐃ;
        ⵠΔ[104][Wr.ᐃΔΔ] = ᐃⵠ.ⵠᐃⵠⲆᐃⵠΔ;
        ⵠΔ[67] = [];
        ⵠΔ[67][Wr.ⵠΔⵠ] = ᐃⵠ.ΔᐃⵠᐃᐃᐃⲆΔᐃ;
        ⵠΔ[67][Wr.ᐃΔΔ] = ᐃⵠ.ᐃΔⵠⲆΔᐃΔⲆΔ;
        ⵠΔ[105] = [];
        ⵠΔ[105][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃᐃⵠⲆΔⲆΔ;
        ⵠΔ[105][Wr.ᐃΔΔ] = ᐃⵠ.ᐃᐃⵠᐃⵠΔΔ;
        ⵠΔ[68] = [];
        ⵠΔ[68][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆᐃΔΔⲆᐃⲆΔⲆ;
        ⵠΔ[68][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⲆᐃⲆⵠΔᐃⲆΔ;
        ⵠΔ[106] = [];
        ⵠΔ[106][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃΔΔⲆⵠΔᐃ;
        ⵠΔ[106][Wr.ᐃΔΔ] = ᐃⵠ.ⵠΔΔⵠⵠⵠⵠᐃⲆ;
        ⵠΔ[69] = [];
        ⵠΔ[69][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆⵠΔᐃⲆΔΔⵠΔ;
        ⵠΔ[69][Wr.ᐃΔΔ] = ᐃⵠ.ⲆᐃᐃⲆΔᐃΔΔⲆ;
        ⵠΔ[107] = [];
        ⵠΔ[107][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⲆⲆⲆⲆⵠⲆ;
        ⵠΔ[107][Wr.ᐃΔΔ] = ᐃⵠ.ⲆᐃΔΔⲆᐃⲆ;
        ⵠΔ[70] = [];
        ⵠΔ[70][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⵠΔΔᐃⵠⲆⵠⵠ;
        ⵠΔ[70][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⲆⵠⵠᐃⵠΔⲆᐃ;
        ⵠΔ[80] = [];
        ⵠΔ[80][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃΔᐃⲆⵠⲆᐃ;
        ⵠΔ[80][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⵠᐃΔΔⲆᐃ;
        ⵠΔ[81] = [];
        ⵠΔ[81][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⵠᐃⵠⵠᐃⲆ;
        ⵠΔ[81][Wr.ᐃΔΔ] = ᐃⵠ.ⵠⲆⵠⲆΔⵠᐃ;
        ⵠΔ[22] = [];
        ⵠΔ[22][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃΔᐃⲆⲆⲆΔ;
        ⵠΔ[22][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⵠΔΔΔⵠᐃ;
        ⵠΔ[928] = [];
        ⵠΔ[928][Wr.ⵠΔⵠ] = ᐃⵠ.ΔᐃᐃⲆΔⲆᐃ;
        ⵠΔ[928][Wr.ᐃΔΔ] = ᐃⵠ.ΔⵠⵠᐃⵠⲆᐃ;
        ⵠΔ[935] = [];
        ⵠΔ[935][Wr.ⵠΔⵠ] = [];
        ⵠΔ[935][Wr.ᐃΔΔ] = [];
        ⵠΔ[935][Wr.ⵠΔⵠ].push(ᐃⵠ.ⵠⵠⲆᐃΔᐃΔⲆΔ);
        ⵠΔ[935][Wr.ⵠΔⵠ].push(ᐃⵠ.ᐃΔⵠⲆⲆⵠⵠᐃΔ);
        ⵠΔ[935][Wr.ᐃΔΔ].push(ᐃⵠ.ᐃΔⵠⲆⲆⵠⵠᐃΔ);
        ⵠΔ[935][Wr.ᐃΔΔ].push(ᐃⵠ.ΔᐃᐃⵠᐃⲆⵠⲆΔ);
        ⵠΔ[941] = [];
        ⵠΔ[941][Wr.ⵠΔⵠ] = [];
        ⵠΔ[941][Wr.ᐃΔΔ] = [];
        ⵠΔ[941][Wr.ⵠΔⵠ].push(ᐃⵠ.ⵠΔⲆᐃⵠᐃⵠ);
        ⵠΔ[941][Wr.ⵠΔⵠ].push(ᐃⵠ.ⵠΔⲆⵠⵠⲆⲆ);
        ⵠΔ[941][Wr.ⵠΔⵠ].push(ᐃⵠ.ⲆᐃᐃⵠᐃⲆⵠ);
        ⵠΔ[941][Wr.ᐃΔΔ].push(ᐃⵠ.ⲆⲆⵠⲆⲆⲆⲆ);
        ⵠΔ[941][Wr.ᐃΔΔ].push(ᐃⵠ.ΔⲆΔΔⲆⲆⵠ);
        ⵠΔ[941][Wr.ᐃΔΔ].push(ᐃⵠ.ΔᐃⲆⲆⲆⲆⵠ);
        ⵠΔ[53] = [];
        ⵠΔ[53][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠᐃⵠⵠᐃⲆΔ;
        ⵠΔ[53][Wr.ᐃΔΔ] = ᐃⵠ.ΔᐃᐃⲆᐃΔⲆ;
        ⵠΔ[54] = [];
        ⵠΔ[54][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃΔⲆᐃᐃⵠΔ;
        ⵠΔ[54][Wr.ᐃΔΔ] = ᐃⵠ.ΔΔᐃⲆⵠⵠᐃ;
        ⵠΔ[241] = [];
        ⵠΔ[241][Wr.ⵠΔⵠ] = [];
        ⵠΔ[241][Wr.ᐃΔΔ] = [];
        ⵠΔ[241][Wr.ⵠΔⵠ].push(ᐃⵠ.ΔⵠⲆΔⵠⵠΔ);
        ⵠΔ[241][Wr.ⵠΔⵠ].push(ᐃⵠ.ⲆΔⲆΔⲆᐃⵠ);
        ⵠΔ[241][Wr.ⵠΔⵠ].push(ᐃⵠ.ⲆᐃⵠᐃⲆᐃⲆ);
        ⵠΔ[241][Wr.ᐃΔΔ].push(ᐃⵠ.ⲆᐃⵠⲆⵠⵠᐃ);
        ⵠΔ[241][Wr.ᐃΔΔ].push(ᐃⵠ.ⵠᐃⵠⲆⲆᐃⲆ);
        ⵠΔ[241][Wr.ᐃΔΔ].push(ᐃⵠ.ᐃⵠΔᐃᐃᐃᐃ);
        ⵠΔ[202] = [];
        ⵠΔ[202][Wr.ⵠΔⵠ] = [];
        ⵠΔ[202][Wr.ᐃΔΔ] = [];
        ⵠΔ[202][Wr.ⵠΔⵠ].push(ᐃⵠ.ᐃⵠⵠⵠⵠΔⵠ);
        ⵠΔ[202][Wr.ⵠΔⵠ].push(ᐃⵠ.ᐃᐃⲆⵠⵠᐃⲆ);
        ⵠΔ[202][Wr.ⵠΔⵠ].push(ᐃⵠ.ΔΔΔⵠⲆⲆΔ);
        ⵠΔ[202][Wr.ᐃΔΔ].push(ᐃⵠ.ᐃⲆⵠⲆΔⵠⲆ);
        ⵠΔ[202][Wr.ᐃΔΔ].push(ᐃⵠ.ⵠⲆⲆΔΔⵠⲆ);
        ⵠΔ[202][Wr.ᐃΔΔ].push(ᐃⵠ.ⵠᐃⵠΔᐃⵠⵠ);
        ⵠΔ[203] = [];
        ⵠΔ[203][Wr.ⵠΔⵠ] = [];
        ⵠΔ[203][Wr.ᐃΔΔ] = [];
        ⵠΔ[203][Wr.ⵠΔⵠ].push(ᐃⵠ.ⵠⲆᐃᐃᐃΔⲆ);
        ⵠΔ[203][Wr.ⵠΔⵠ].push(ᐃⵠ.ⵠΔΔⲆᐃᐃⲆ);
        ⵠΔ[203][Wr.ⵠΔⵠ].push(ᐃⵠ.ΔΔⲆⵠⲆᐃⵠ);
        ⵠΔ[203][Wr.ⵠΔⵠ].push(ᐃⵠ.ΔΔⵠΔⵠⲆΔ);
        ⵠΔ[203][Wr.ⵠΔⵠ].push(ᐃⵠ.ᐃⲆⵠΔⲆΔⵠ);
        ⵠΔ[203][Wr.ⵠΔⵠ].push(ᐃⵠ.ᐃᐃⲆⲆᐃᐃⵠ);
        ⵠΔ[203][Wr.ᐃΔΔ].push(ᐃⵠ.ⲆΔᐃⵠᐃΔᐃ);
        ⵠΔ[203][Wr.ᐃΔΔ].push(ᐃⵠ.ᐃΔⲆΔⵠΔΔ);
        ⵠΔ[203][Wr.ᐃΔΔ].push(ᐃⵠ.ΔᐃⵠⲆΔΔⲆ);
        ⵠΔ[203][Wr.ᐃΔΔ].push(ᐃⵠ.ᐃⵠⲆΔΔⵠⵠ);
        ⵠΔ[203][Wr.ᐃΔΔ].push(ᐃⵠ.ΔᐃⵠΔⲆᐃⵠ);
        ⵠΔ[203][Wr.ᐃΔΔ].push(ᐃⵠ.ⵠⵠⵠᐃⵠⲆΔ);
        ⵠΔ[Wr.ΔⲆᐃᐃΔ] = [];
        ⵠΔ[Wr.ΔⲆᐃᐃΔ][Wr.ⵠΔⵠ] = [];
        ⵠΔ[Wr.ΔⲆᐃᐃΔ][Wr.ᐃΔΔ] = [];
        ⵠΔ[Wr.ΔⲆᐃᐃΔ][Wr.ⵠΔⵠ].push(ᐃⵠ.ᐃⲆΔᐃⲆⲆᐃ);
        ⵠΔ[Wr.ΔⲆᐃᐃΔ][Wr.ⵠΔⵠ].push(ᐃⵠ.ⲆⲆⲆⵠᐃᐃΔ);
        ⵠΔ[Wr.ΔⲆᐃᐃΔ][Wr.ⵠΔⵠ].push(ᐃⵠ.ΔⵠᐃΔᐃΔΔ);
        ⵠΔ[Wr.ΔⲆᐃᐃΔ][Wr.ⵠΔⵠ].push(ᐃⵠ.ᐃΔⵠᐃΔⵠⵠ);
        ⵠΔ[Wr.ΔⲆᐃᐃΔ][Wr.ⵠΔⵠ].push(ᐃⵠ.ᐃᐃᐃΔΔΔᐃ);
        ⵠΔ[Wr.ΔⲆᐃᐃΔ][Wr.ⵠΔⵠ].push(ᐃⵠ.ⵠⲆⲆᐃⲆⲆᐃ);
        ⵠΔ[Wr.ΔⲆᐃᐃΔ][Wr.ᐃΔΔ].push(ᐃⵠ.ⲆΔΔᐃⲆⵠⲆ);
        ⵠΔ[Wr.ΔⲆᐃᐃΔ][Wr.ᐃΔΔ].push(ᐃⵠ.ΔⲆᐃΔᐃΔΔ);
        ⵠΔ[Wr.ΔⲆᐃᐃΔ][Wr.ᐃΔΔ].push(ᐃⵠ.ᐃⵠⵠⲆⵠᐃΔ);
        ⵠΔ[Wr.ΔⲆᐃᐃΔ][Wr.ᐃΔΔ].push(ᐃⵠ.ⲆⵠⲆⵠΔⵠᐃ);
        ⵠΔ[Wr.ΔⲆᐃᐃΔ][Wr.ᐃΔΔ].push(ᐃⵠ.ΔᐃΔⲆⲆⵠⲆ);
        ⵠΔ[Wr.ΔⲆᐃᐃΔ][Wr.ᐃΔΔ].push(ᐃⵠ.ᐃⵠⵠⵠⲆⵠΔ);
        ⵠΔ[918] = [];
        ⵠΔ[918][Wr.ⵠΔⵠ] = ᐃⵠ.ΔΔⲆᐃΔⲆᐃ;
        ⵠΔ[918][Wr.ᐃΔΔ] = ᐃⵠ.ᐃΔⲆⲆⵠⲆⵠ;
        ⵠΔ[919] = ᐃⵠ.ⵠⵠᐃᐃⲆΔⲆ;
        ⵠΔ[56] = [];
        ⵠΔ[56][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆⵠΔⵠⵠⲆΔΔⲆ;
        ⵠΔ[56][Wr.ᐃΔΔ] = ᐃⵠ.ⵠΔⲆᐃⵠⲆᐃⵠⵠ;
        ⵠΔ[223] = [];
        ⵠΔ[223][Wr.ⵠΔⵠ] = ᐃⵠ.ΔᐃᐃⵠΔᐃⵠ;
        ⵠΔ[223][Wr.ᐃΔΔ] = ᐃⵠ.ⲆΔⵠⲆⵠᐃⵠ;
        ⵠΔ[224] = [];
        ⵠΔ[224][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⵠⵠΔⲆⵠⲆ;
        ⵠΔ[224][Wr.ᐃΔΔ] = ᐃⵠ.ⵠⵠⲆⲆᐃᐃΔ;
        ⵠΔ[236] = [];
        ⵠΔ[236][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⲆⵠⲆᐃᐃᐃ;
        ⵠΔ[236][Wr.ᐃΔΔ] = ᐃⵠ.ΔΔΔⲆΔⲆⲆ;
        ⵠΔ[1033] = [];
        ⵠΔ[1033][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃᐃΔᐃⲆⲆΔ;
        ⵠΔ[1033][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⲆⲆᐃⲆᐃΔ;
        ⵠΔ[1034] = ᐃⵠ.ⵠᐃⵠΔⲆΔΔ;
        ⵠΔ[1150] = [];
        ⵠΔ[1150][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆᐃᐃⵠⲆΔᐃ;
        ⵠΔ[1150][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⵠⵠⲆⲆΔⲆ;
        ⵠΔ[1152] = [];
        ⵠΔ[1152][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃⵠⲆⵠΔⵠᐃ;
        ⵠΔ[1152][Wr.ᐃΔΔ] = ᐃⵠ.ᐃΔⲆⲆⲆⲆⵠ;
        ⵠΔ[1149] = ᐃⵠ.ⵠᐃⵠⵠⵠⵠⵠ;
        ⵠΔ[1151] = ᐃⵠ.ᐃᐃⵠΔⵠᐃᐃ;
        ⵠΔ[1153] = ᐃⵠ.ⵠΔⲆᐃⲆᐃΔ;
        ⵠΔ[1143] = [];
        ⵠΔ[1143][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆΔⲆⵠⲆΔⵠ;
        ⵠΔ[1143][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⲆᐃⵠΔⵠⵠ;
        ⵠΔ[1145] = [];
        ⵠΔ[1145][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆᐃᐃᐃⵠⵠΔ;
        ⵠΔ[1145][Wr.ᐃΔΔ] = ᐃⵠ.ⲆΔⲆⵠⲆΔΔ;
        ⵠΔ[1146] = [];
        ⵠΔ[1146][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃⲆⲆᐃⵠᐃⲆ;
        ⵠΔ[1146][Wr.ᐃΔΔ] = ᐃⵠ.ᐃᐃⵠᐃⵠⲆⵠ;
        ⵠΔ[1144] = ᐃⵠ.ᐃⲆⵠⲆⲆΔΔ;
        ⵠΔ[1148] = ᐃⵠ.ⵠᐃⲆⲆⲆⲆⵠ;
        ⵠΔ[1147] = ᐃⵠ.ⲆΔⵠⵠⵠᐃΔ;
        ⵠΔ[1053] = [];
        ⵠΔ[1053][Wr.ⵠΔⵠ] = ᐃⵠ.Δᐃⵠᐃᐃᐃⵠ;
        ⵠΔ[1053][Wr.ᐃΔΔ] = ᐃⵠ.ⵠΔᐃΔΔᐃᐃ;
        ⵠΔ[1055] = [];
        ⵠΔ[1055][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃⵠΔⵠᐃᐃᐃ;
        ⵠΔ[1055][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⲆⵠΔᐃΔⲆ;
        ⵠΔ[231] = [];
        ⵠΔ[231][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⲆⲆΔᐃᐃⵠ;
        ⵠΔ[231][Wr.ᐃΔΔ] = ᐃⵠ.ⵠⲆΔΔⲆΔⲆ;
        ⵠΔ[1060] = [];
        ⵠΔ[1060][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃⵠⵠᐃΔⵠⵠ;
        ⵠΔ[1060][Wr.ᐃΔΔ] = ᐃⵠ.ᐃΔⲆⲆᐃⲆΔ;
        ⵠΔ[1063] = [];
        ⵠΔ[1063][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆⲆⲆᐃⲆᐃⵠ;
        ⵠΔ[1063][Wr.ᐃΔΔ] = ᐃⵠ.ⲆΔⵠⲆΔΔᐃ;
        ⵠΔ[1059] = [];
        ⵠΔ[1059][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠᐃⵠⵠΔᐃⵠ;
        ⵠΔ[1059][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⲆⲆᐃΔⵠⲆ;
        ⵠΔ[1062] = [];
        ⵠΔ[1062][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⵠⵠⵠⵠⲆΔ;
        ⵠΔ[1062][Wr.ᐃΔΔ] = ᐃⵠ.ΔⲆⵠΔⲆᐃᐃ;
        ⵠΔ[1056] = ᐃⵠ.ⵠᐃΔⵠᐃⵠⵠ;
        ⵠΔ[1057] = ᐃⵠ.ᐃⵠⲆⲆⲆⵠⵠ;
        ⵠΔ[1058] = ᐃⵠ.ⵠⵠᐃⵠᐃᐃⵠ;
        ⵠΔ[1065] = ᐃⵠ.ⵠⵠⵠⲆᐃᐃⵠ;
        ⵠΔ[1066] = ᐃⵠ.ΔⵠᐃⲆΔⵠᐃ;
        ⵠΔ[1067] = ᐃⵠ.ΔⲆΔⵠᐃΔⲆ;
        ⵠΔ[1222] = [];
        ⵠΔ[1222][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃᐃⵠᐃⲆⲆᐃΔᐃ;
        ⵠΔ[1222][Wr.ᐃΔΔ] = ᐃⵠ.ⵠⲆⵠᐃᐃⲆᐃⲆⵠ;
        ⵠΔ[248] = [];
        ⵠΔ[248][Wr.ⵠΔⵠ] = ᐃⵠ.ΔⲆⲆΔⵠΔΔⲆᐃ;
        ⵠΔ[248][Wr.ᐃΔΔ] = ᐃⵠ.ⵠΔΔᐃⲆᐃⵠΔΔ;
        ⵠΔ[1218] = [];
        ⵠΔ[1218][Wr.ⵠΔⵠ] = ᐃⵠ.ΔⲆⵠⲆᐃᐃⲆᐃΔ;
        ⵠΔ[1218][Wr.ᐃΔΔ] = ᐃⵠ.ⵠᐃΔᐃⲆᐃⲆᐃᐃ;
        ⵠΔ[1221] = [];
        ⵠΔ[1221][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃⲆⵠᐃⵠⲆᐃⲆⵠ;
        ⵠΔ[1221][Wr.ᐃΔΔ] = ᐃⵠ.ΔⲆⲆΔⲆⵠⲆⲆᐃ;
        ⵠΔ[1223] = ᐃⵠ.ⲆⲆⵠᐃⵠⵠᐃ;
        ⵠΔ[1219] = ᐃⵠ.ᐃΔⵠΔᐃⵠᐃ;
        ⵠΔ[1068] = [];
        ⵠΔ[1068][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆⲆᐃᐃⲆΔΔ;
        ⵠΔ[1068][Wr.ᐃΔΔ] = ᐃⵠ.ⵠⵠΔΔΔⵠΔ;
        ⵠΔ[232] = [];
        ⵠΔ[232][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠΔᐃΔᐃⵠⲆ;
        ⵠΔ[232][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⲆᐃΔⲆΔⲆ;
        ⵠΔ[1070] = [];
        ⵠΔ[1070][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆᐃΔⲆⵠⲆⲆ;
        ⵠΔ[1070][Wr.ᐃΔΔ] = ᐃⵠ.ⵠᐃᐃⵠΔⵠⲆ;
        ⵠΔ[1072] = [];
        ⵠΔ[1072][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠΔᐃᐃᐃΔⵠ;
        ⵠΔ[1072][Wr.ᐃΔΔ] = ᐃⵠ.ᐃᐃᐃⲆⵠΔΔ;
        ⵠΔ[1075] = [];
        ⵠΔ[1075][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆᐃΔᐃᐃᐃⲆ;
        ⵠΔ[1075][Wr.ᐃΔΔ] = ᐃⵠ.ΔᐃᐃΔⵠΔⵠ;
        ⵠΔ[1071] = [];
        ⵠΔ[1071][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⲆⵠⵠᐃᐃᐃ;
        ⵠΔ[1071][Wr.ᐃΔΔ] = ᐃⵠ.ᐃᐃⲆΔⲆⵠⵠ;
        ⵠΔ[1074] = [];
        ⵠΔ[1074][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⵠⲆᐃΔᐃⲆ;
        ⵠΔ[1074][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⲆⵠᐃⵠΔΔ;
        ⵠΔ[1073] = [];
        ⵠΔ[1073][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃⲆⲆⲆΔⵠⲆ;
        ⵠΔ[1073][Wr.ᐃΔΔ] = ᐃⵠ.ᐃΔΔⲆΔⲆⲆ;
        ⵠΔ[1076] = [];
        ⵠΔ[1076][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆᐃᐃΔᐃΔⵠ;
        ⵠΔ[1076][Wr.ᐃΔΔ] = ᐃⵠ.ΔΔⲆΔⲆⵠⵠ;
        ⵠΔ[1077] = ᐃⵠ.ΔΔⵠᐃΔⲆᐃ;
        ⵠΔ[1078] = ᐃⵠ.ΔΔⵠᐃΔⵠⲆ;
        ⵠΔ[1079] = ᐃⵠ.ΔΔᐃⲆⲆᐃΔ;
        ⵠΔ[1083] = [];
        ⵠΔ[1083][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃᐃⵠⲆⲆⵠⵠ;
        ⵠΔ[1083][Wr.ᐃΔΔ] = ᐃⵠ.ⵠⲆΔᐃⲆⲆⵠ;
        ⵠΔ[233] = [];
        ⵠΔ[233][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃΔⵠⵠⲆΔⵠ;
        ⵠΔ[233][Wr.ᐃΔΔ] = ᐃⵠ.ᐃᐃΔΔᐃᐃᐃ;
        ⵠΔ[1085] = [];
        ⵠΔ[1085][Wr.ⵠΔⵠ] = ᐃⵠ.ΔΔᐃΔᐃᐃᐃ;
        ⵠΔ[1085][Wr.ᐃΔΔ] = ᐃⵠ.ᐃᐃΔᐃΔⲆΔ;
        ⵠΔ[1087] = [];
        ⵠΔ[1087][Wr.ⵠΔⵠ] = ᐃⵠ.ΔᐃⲆⲆΔⵠΔ;
        ⵠΔ[1087][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⵠΔⵠⲆᐃᐃ;
        ⵠΔ[1090] = [];
        ⵠΔ[1090][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⵠᐃⲆⵠⵠᐃ;
        ⵠΔ[1090][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⲆⵠⵠⲆⵠⲆ;
        ⵠΔ[1086] = [];
        ⵠΔ[1086][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠᐃⲆⵠⲆⲆⲆ;
        ⵠΔ[1086][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⵠᐃᐃΔᐃΔ;
        ⵠΔ[1089] = [];
        ⵠΔ[1089][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⲆⵠⵠΔΔᐃ;
        ⵠΔ[1089][Wr.ᐃΔΔ] = ᐃⵠ.ΔⵠⵠᐃΔΔΔ;
        ⵠΔ[1088] = [];
        ⵠΔ[1088][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃⵠⲆⲆⲆⵠᐃ;
        ⵠΔ[1088][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⵠⵠⵠⲆⲆΔ;
        ⵠΔ[1091] = [];
        ⵠΔ[1091][Wr.ⵠΔⵠ] = ᐃⵠ.ΔᐃΔᐃᐃⵠⲆ;
        ⵠΔ[1091][Wr.ᐃΔΔ] = ᐃⵠ.ⵠᐃᐃⵠⲆⲆⲆ;
        ⵠΔ[1092] = ᐃⵠ.ⲆⵠΔΔⵠᐃΔ;
        ⵠΔ[1093] = ᐃⵠ.ⲆⵠⲆᐃΔⵠⲆ;
        ⵠΔ[1094] = ᐃⵠ.ⲆᐃⲆⵠΔⲆⵠ;
        ⵠΔ[1098] = [];
        ⵠΔ[1098][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆΔⲆΔⲆᐃᐃ;
        ⵠΔ[1098][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⲆⲆⲆᐃΔΔ;
        ⵠΔ[235] = [];
        ⵠΔ[235][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⵠΔⵠΔΔⵠ;
        ⵠΔ[235][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⲆⲆΔⲆΔⵠ;
        ⵠΔ[1115] = ᐃⵠ.ΔⲆΔⵠⲆΔΔ;
        ⵠΔ[1113] = [];
        ⵠΔ[1113][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆΔⲆᐃᐃᐃⲆ;
        ⵠΔ[1113][Wr.ᐃΔΔ] = ᐃⵠ.ⵠΔⲆΔⲆᐃⲆ;
        ⵠΔ[1114] = [];
        ⵠΔ[1114][Wr.ⵠΔⵠ] = ᐃⵠ.ΔᐃΔΔᐃⵠᐃ;
        ⵠΔ[1114][Wr.ᐃΔΔ] = ᐃⵠ.ΔⲆⲆⵠⲆΔⵠ;
        ⵠΔ[1100] = [];
        ⵠΔ[1100][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃΔⲆΔⵠᐃⵠ;
        ⵠΔ[1100][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⲆⵠΔⵠⲆᐃ;
        ⵠΔ[1102] = [];
        ⵠΔ[1102][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃᐃΔΔΔⲆΔ;
        ⵠΔ[1102][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⵠⲆΔⵠΔΔ;
        ⵠΔ[1105] = [];
        ⵠΔ[1105][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠΔⲆΔⲆⲆⲆ;
        ⵠΔ[1105][Wr.ᐃΔΔ] = ᐃⵠ.ⵠΔⵠⵠᐃⵠⲆ;
        ⵠΔ[1101] = [];
        ⵠΔ[1101][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠᐃⵠⵠΔⲆᐃ;
        ⵠΔ[1101][Wr.ᐃΔΔ] = ᐃⵠ.ⲆᐃᐃᐃⵠⵠⲆ;
        ⵠΔ[1104] = [];
        ⵠΔ[1104][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆΔⲆΔΔᐃΔ;
        ⵠΔ[1104][Wr.ᐃΔΔ] = ᐃⵠ.ᐃᐃΔᐃᐃⲆⲆ;
        ⵠΔ[1103] = [];
        ⵠΔ[1103][Wr.ⵠΔⵠ] = ᐃⵠ.ΔΔⲆᐃᐃᐃΔ;
        ⵠΔ[1103][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⲆᐃⵠΔᐃⲆ;
        ⵠΔ[1106] = [];
        ⵠΔ[1106][Wr.ⵠΔⵠ] = ᐃⵠ.ΔⵠⵠΔⲆⲆⲆ;
        ⵠΔ[1106][Wr.ᐃΔΔ] = ᐃⵠ.ΔΔᐃⲆᐃⲆⲆ;
        ⵠΔ[1107] = ᐃⵠ.ⲆⲆᐃⵠⲆⲆᐃ;
        ⵠΔ[1108] = ᐃⵠ.ⵠⲆⵠΔΔⵠⲆ;
        ⵠΔ[1109] = ᐃⵠ.ᐃⲆⲆᐃΔΔⵠ;
        ⵠΔ[1119] = [];
        ⵠΔ[1119][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆᐃⵠΔΔⵠΔ;
        ⵠΔ[1119][Wr.ᐃΔΔ] = ᐃⵠ.ΔⵠΔΔᐃΔᐃ;
        ⵠΔ[238] = [];
        ⵠΔ[238][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⵠⲆⲆⲆⵠⲆ;
        ⵠΔ[238][Wr.ᐃΔΔ] = ᐃⵠ.ⲆᐃⵠⲆⵠⵠⲆ;
        ⵠΔ[1136] = ᐃⵠ.ⲆΔΔᐃⵠⲆⲆ;
        ⵠΔ[1134] = [];
        ⵠΔ[1134][Wr.ⵠΔⵠ] = ᐃⵠ.ΔᐃⵠⲆⵠⲆⲆ;
        ⵠΔ[1134][Wr.ᐃΔΔ] = ᐃⵠ.ⲆΔⲆⲆᐃⲆΔ;
        ⵠΔ[1135] = [];
        ⵠΔ[1135][Wr.ⵠΔⵠ] = ᐃⵠ.ΔⲆΔΔⲆⵠⲆ;
        ⵠΔ[1135][Wr.ᐃΔΔ] = ᐃⵠ.ⵠᐃᐃΔⵠΔⵠ;
        ⵠΔ[1121] = [];
        ⵠΔ[1121][Wr.ⵠΔⵠ] = ᐃⵠ.ΔⵠΔᐃⲆΔᐃ;
        ⵠΔ[1121][Wr.ᐃΔΔ] = ᐃⵠ.ΔⲆⲆΔⲆⲆⲆ;
        ⵠΔ[1123] = [];
        ⵠΔ[1123][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆΔᐃⲆⵠⲆΔ;
        ⵠΔ[1123][Wr.ᐃΔΔ] = ᐃⵠ.ⵠⵠΔⵠΔⵠⲆ;
        ⵠΔ[1126] = [];
        ⵠΔ[1126][Wr.ⵠΔⵠ] = ᐃⵠ.ΔᐃⲆΔΔⵠⲆ;
        ⵠΔ[1126][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⲆⵠᐃⲆⵠᐃ;
        ⵠΔ[1122] = [];
        ⵠΔ[1122][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃᐃⵠΔᐃᐃⲆ;
        ⵠΔ[1122][Wr.ᐃΔΔ] = ᐃⵠ.ΔΔᐃΔΔⲆΔ;
        ⵠΔ[1125] = [];
        ⵠΔ[1125][Wr.ⵠΔⵠ] = ᐃⵠ.ΔⲆΔΔⲆⵠΔ;
        ⵠΔ[1125][Wr.ᐃΔΔ] = ᐃⵠ.ΔⲆᐃⲆⲆⵠⲆ;
        ⵠΔ[1124] = [];
        ⵠΔ[1124][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠΔΔΔᐃⵠⲆ;
        ⵠΔ[1124][Wr.ᐃΔΔ] = ᐃⵠ.ⵠⵠΔΔᐃⲆⵠ;
        ⵠΔ[1127] = [];
        ⵠΔ[1127][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃᐃⲆⲆΔΔᐃ;
        ⵠΔ[1127][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⲆΔⲆⵠⲆΔ;
        ⵠΔ[1128] = ᐃⵠ.ΔⲆⵠΔⲆⵠΔ;
        ⵠΔ[1129] = ᐃⵠ.ⲆΔⵠⵠⲆΔⲆ;
        ⵠΔ[1130] = ᐃⵠ.ΔⵠᐃⲆΔΔᐃ;
        ⵠΔ[1042] = [];
        ⵠΔ[1042][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃΔⲆⵠⲆᐃᐃ;
        ⵠΔ[1042][Wr.ᐃΔΔ] = ᐃⵠ.ⵠᐃᐃⵠⲆⵠⵠ;
        ⵠΔ[1043] = [];
        ⵠΔ[1043][Wr.ⵠΔⵠ] = ᐃⵠ.ΔᐃᐃΔᐃⵠᐃ;
        ⵠΔ[1043][Wr.ᐃΔΔ] = ᐃⵠ.ΔⲆⵠⲆΔΔⲆ;
        ⵠΔ[1044] = [];
        ⵠΔ[1044][Wr.ⵠΔⵠ] = ᐃⵠ.ΔᐃᐃⵠⲆΔΔ;
        ⵠΔ[1044][Wr.ᐃΔΔ] = ᐃⵠ.ⲆᐃⵠΔΔⲆᐃ;
        ⵠΔ[228] = [];
        ⵠΔ[228][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠΔΔⵠⵠᐃⲆ;
        ⵠΔ[228][Wr.ᐃΔΔ] = ᐃⵠ.ⵠΔΔⵠⵠᐃⲆ;
        ⵠΔ[234] = [];
        ⵠΔ[234][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆΔⲆⵠⵠⲆᐃ;
        ⵠΔ[234][Wr.ᐃΔΔ] = ᐃⵠ.ⲆΔⲆⵠⵠⲆᐃ;
        ⵠΔ[249] = [];
        ⵠΔ[249][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⵠΔⲆΔⵠΔ;
        ⵠΔ[249][Wr.ᐃΔΔ] = ᐃⵠ.ⵠⵠΔⲆΔⵠΔ;
        ⵠΔ[1045] = ᐃⵠ.ⲆⵠⵠⲆⲆⵠΔ;
        ⵠΔ[89] = [];
        ⵠΔ[89][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃⵠᐃᐃᐃΔⲆ;
        ⵠΔ[89][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⵠΔⵠⲆⵠⲆ;
        ⵠΔ[92] = [];
        ⵠΔ[92][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃⵠᐃᐃⵠΔᐃ;
        ⵠΔ[92][Wr.ᐃΔΔ] = ᐃⵠ.ⵠᐃⵠΔᐃⵠⲆ;
        ⵠΔ[247] = [];
        ⵠΔ[247][Wr.ⵠΔⵠ] = [ᐃⵠ.ΔⵠᐃᐃᐃΔᐃ, ᐃⵠ.ᐃΔⵠᐃΔᐃⵠ, ᐃⵠ.ⲆⲆⵠⲆⵠⲆΔ, ᐃⵠ.ᐃᐃᐃΔⲆΔᐃ, ᐃⵠ.ⵠⵠΔⵠΔᐃⲆ, ᐃⵠ.ΔⲆΔⲆⵠⵠᐃ, ᐃⵠ.ᐃᐃⵠⲆΔⲆΔ, ᐃⵠ.ᐃΔΔⲆⵠΔᐃ, ᐃⵠ.ⵠⲆⲆⲆⲆⵠⲆ];
        ⵠΔ[247][Wr.ᐃΔΔ] = [ᐃⵠ.ΔΔⵠᐃⵠΔⲆ, ᐃⵠ.ᐃⲆΔΔΔⵠᐃ, ᐃⵠ.ⲆⲆΔⵠᐃⵠⲆ, ᐃⵠ.ᐃⵠⵠⵠⵠΔΔ, ᐃⵠ.ⲆΔᐃⲆΔⵠᐃ, ᐃⵠ.ⵠᐃⵠⲆᐃⵠΔ, ᐃⵠ.ᐃᐃⵠᐃⵠΔΔ, ᐃⵠ.ᐃΔΔⲆⵠΔᐃ, ᐃⵠ.ⲆᐃΔΔⲆᐃⲆ];
        ⵠΔ[93] = [];
        ⵠΔ[93][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠⲆᐃⵠⵠΔᐃ;
        ⵠΔ[93][Wr.ᐃΔΔ] = ᐃⵠ.ΔⵠΔⲆΔⲆΔ;
        ⵠΔ[225] = [];
        ⵠΔ[225][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆΔⲆⲆⵠΔᐃ;
        ⵠΔ[225][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⲆΔᐃΔΔⵠ;
        ⵠΔ[226] = [];
        ⵠΔ[226][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃΔΔⲆΔⵠΔ;
        ⵠΔ[226][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⲆᐃᐃΔⵠⲆ;
        ⵠΔ[24] = [];
        ⵠΔ[24][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃΔⲆⲆΔΔᐃ;
        ⵠΔ[24][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⲆᐃⲆΔΔΔ;
        ⵠΔ[88] = [];
        ⵠΔ[88][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆΔⵠΔΔⵠⵠⵠΔ;
        ⵠΔ[88][Wr.ᐃΔΔ] = ᐃⵠ.ᐃᐃⵠⲆⲆΔⵠⵠΔ;
        ⵠΔ[87] = [];
        ⵠΔ[87][Wr.ⵠΔⵠ] = ᐃⵠ.ΔⲆΔΔⲆᐃΔⲆᐃ;
        ⵠΔ[87][Wr.ᐃΔΔ] = ᐃⵠ.ⵠΔΔⲆᐃⵠⵠᐃⵠ;
        ⵠΔ[82] = [];
        ⵠΔ[82][Wr.ⵠΔⵠ] = ᐃⵠ.ΔΔᐃΔⵠⵠⵠ;
        ⵠΔ[82][Wr.ᐃΔΔ] = ᐃⵠ.ΔⲆΔⲆⵠᐃⵠ;
        ⵠΔ[621] = [];
        ⵠΔ[621][Wr.ⵠΔⵠ] = [];
        ⵠΔ[621][Wr.ᐃΔΔ] = [];
        ⵠΔ[621][Wr.ⵠΔⵠ].push(ᐃⵠ.ᐃΔⵠⵠⵠᐃⵠᐃⵠ);
        ⵠΔ[621][Wr.ⵠΔⵠ].push(ᐃⵠ.ᐃᐃΔᐃⲆΔΔⵠᐃ);
        ⵠΔ[621][Wr.ⵠΔⵠ].push(ᐃⵠ.ⲆⵠΔᐃᐃᐃᐃⵠΔ);
        ⵠΔ[621][Wr.ᐃΔΔ].push(ᐃⵠ.ᐃⲆⵠⲆᐃⲆⲆⵠᐃ);
        ⵠΔ[621][Wr.ᐃΔΔ].push(ᐃⵠ.ⲆⵠⵠΔⵠⵠΔᐃΔ);
        ⵠΔ[621][Wr.ᐃΔΔ].push(ᐃⵠ.ⵠᐃⵠⲆⵠΔⲆⲆⵠ);
        ⵠΔ[619] = [];
        ⵠΔ[619][Wr.ⵠΔⵠ] = [];
        ⵠΔ[619][Wr.ᐃΔΔ] = [];
        ⵠΔ[619][Wr.ⵠΔⵠ].push(ᐃⵠ.ⲆⲆΔᐃⵠⵠᐃΔᐃ);
        ⵠΔ[619][Wr.ⵠΔⵠ].push(ᐃⵠ.ⵠᐃᐃⲆⲆⲆⵠΔΔ);
        ⵠΔ[619][Wr.ⵠΔⵠ].push(ᐃⵠ.ⵠΔⲆⲆΔⵠᐃΔⵠ);
        ⵠΔ[619][Wr.ᐃΔΔ].push(ᐃⵠ.ᐃⲆⵠᐃΔΔᐃⲆᐃ);
        ⵠΔ[619][Wr.ᐃΔΔ].push(ᐃⵠ.ΔⵠⲆⵠⲆⲆᐃᐃⵠ);
        ⵠΔ[619][Wr.ᐃΔΔ].push(ᐃⵠ.ⲆΔⲆⲆⲆᐃᐃⲆⲆ);
        ⵠΔ[620] = [];
        ⵠΔ[620][Wr.ⵠΔⵠ] = [];
        ⵠΔ[620][Wr.ᐃΔΔ] = [];
        ⵠΔ[620][Wr.ⵠΔⵠ].push(ᐃⵠ.ⲆⵠᐃⲆΔᐃⲆᐃⵠ);
        ⵠΔ[620][Wr.ⵠΔⵠ].push(ᐃⵠ.ⲆⲆⲆᐃΔᐃⵠⲆⵠ);
        ⵠΔ[620][Wr.ⵠΔⵠ].push(ᐃⵠ.ⲆⲆᐃⲆΔⵠΔᐃⵠ);
        ⵠΔ[620][Wr.ᐃΔΔ].push(ᐃⵠ.ⲆⵠⲆⲆΔᐃᐃⲆΔ);
        ⵠΔ[620][Wr.ᐃΔΔ].push(ᐃⵠ.ᐃΔΔⲆⵠΔᐃᐃΔ);
        ⵠΔ[620][Wr.ᐃΔΔ].push(ᐃⵠ.ⲆΔᐃᐃΔΔⵠⵠⵠ);
        ⵠⲆⲆⵠ.g = [];
        ⵠⲆⲆⵠ.g[0] = [ᐃⵠ.ⲆΔⲆⲆⲆⵠⲆ, ᐃⵠ.ⲆᐃᐃΔⵠⵠᐃ];
        ⵠⲆⲆⵠ.g[1] = ⵠⲆⲆⵠ.g[0];
        ⵠⲆⲆⵠ.g[2] = [ᐃⵠ.ΔⵠΔⵠᐃⲆᐃ, ᐃⵠ.ΔΔⵠⲆΔⵠΔ];
        ⵠⲆⲆⵠ.m = [];
        ⵠⲆⲆⵠ.m[0] = [ᐃⵠ.ΔΔᐃⲆⲆΔᐃ, ᐃⵠ.ⲆΔΔⲆΔᐃⲆ];
        ⵠⲆⲆⵠ.m[1] = ⵠⲆⲆⵠ.m[0];
        ⵠⲆⲆⵠ.m[2] = [ᐃⵠ.ΔⲆᐃⲆΔⲆᐃ, ᐃⵠ.ⲆΔⵠⲆⲆⲆᐃ];
        ⵠⲆⲆⵠ.la = [];
        ⵠⲆⲆⵠ.la[0] = [ᐃⵠ.ᐃⵠⲆⲆⲆᐃⵠ, ᐃⵠ.ⵠΔⲆⵠᐃⵠⲆ];
        ⵠⲆⲆⵠ.la[1] = ⵠⲆⲆⵠ.la[0];
        ⵠⲆⲆⵠ.la[2] = ⵠⲆⲆⵠ.la[0];
        ⵠⲆⲆⵠ.la[3] = ⵠⲆⲆⵠ.la[0];
        ⵠⲆⲆⵠ.la[4] = ⵠⲆⲆⵠ.la[0];
        ⵠⲆⲆⵠ.la[5] = ⵠⲆⲆⵠ.la[0];
        ⵠⲆⲆⵠ.s = [];
        ⵠⲆⲆⵠ.s[0] = [ᐃⵠ.ᐃⲆΔΔᐃⲆΔ, ᐃⵠ.ⵠⵠⵠⲆⵠΔΔ];
        ⵠⲆⲆⵠ.s[1] = ⵠⲆⲆⵠ.s[0];
        ⵠⲆⲆⵠ.s[2] = [ᐃⵠ.ᐃⵠⲆⲆⲆⵠΔ, ᐃⵠ.ΔᐃᐃⵠⵠⵠΔ];
        ⵠⲆⲆⵠ.p = [];
        ⵠⲆⲆⵠ.p[0] = [ᐃⵠ.ᐃᐃⲆⵠⲆⵠΔ, ᐃⵠ.ᐃᐃⲆⵠⲆⵠΔ];
        ⵠⲆⲆⵠ.a = [];
        ⵠⲆⲆⵠ.a[0] = [ᐃⵠ.ᐃⲆⵠⵠΔⵠⲆ, ᐃⵠ.ᐃⲆⵠⲆⵠᐃⲆ];
        ⵠⲆⲆⵠ.a[1] = ⵠⲆⲆⵠ.a[0];
        ⵠⲆⲆⵠ.a[2] = ⵠⲆⲆⵠ.a[0];
        ⵠⲆⲆⵠ.d = [];
        ⵠⲆⲆⵠ.d[0] = [ᐃⵠ.ⵠΔⵠᐃⵠⲆᐃ, ᐃⵠ.ⲆⵠⲆⲆⲆΔᐃ];
        ⵠⲆⲆⵠ.d[1] = ⵠⲆⲆⵠ.d[0];
        ⵠⲆⲆⵠ.d[2] = ⵠⲆⲆⵠ.d[0];
        ⵠⲆⲆⵠ.re = [];
        ⵠⲆⲆⵠ.re[0] = [ᐃⵠ.ⵠΔⲆⵠΔᐃⲆ, ᐃⵠ.ΔᐃΔⵠⵠⲆⵠ];
        ⵠⲆⲆⵠ.re[1] = ⵠⲆⲆⵠ.re[0];
        ⵠⲆⲆⵠ.re[2] = ⵠⲆⲆⵠ.re[0];
        ⵠⲆⲆⵠ.f = [];
        ⵠⲆⲆⵠ.f[0] = [ᐃⵠ.ⵠΔⲆᐃΔΔᐃ, ᐃⵠ.ᐃᐃᐃⲆΔᐃᐃ];
        ⵠⲆⲆⵠ.f[1] = ⵠⲆⲆⵠ.f[0];
        ⵠⲆⲆⵠ.f[2] = ⵠⲆⲆⵠ.f[0];
        ⵠⲆⲆⵠ.isl = [];
        ⵠⲆⲆⵠ.isl[0] = [ᐃⵠ.ᐃᐃⵠᐃΔⵠⲆ, ᐃⵠ.ΔⵠⵠⲆᐃᐃⵠ];
        ⵠⲆⲆⵠ.isl[1] = ⵠⲆⲆⵠ.isl[0];
        ⵠⲆⲆⵠ.isl[2] = ⵠⲆⲆⵠ.isl[0];
        ⵠⲆⲆⵠ.c = [];
        ⵠⲆⲆⵠ.c[0] = [ᐃⵠ.ⵠᐃᐃᐃᐃᐃᐃ, ᐃⵠ.ⲆⲆⲆⲆⵠᐃΔ];
        ⵠⲆⲆⵠ.c[1] = ⵠⲆⲆⵠ.c[0];
        ⵠⲆⲆⵠ.c[2] = ⵠⲆⲆⵠ.c[0];
        ⵠⲆⲆⵠ.wtb = [];
        ⵠⲆⲆⵠ.wtb[0] = [ᐃⵠ.ⲆⲆΔⲆΔⵠΔ, ᐃⵠ.ᐃᐃⲆⲆΔᐃⵠ];
        ⵠⲆⲆⵠ.PIRANHA = [ᐃⵠ.ⵠⵠⲆⲆⵠⵠⵠ, ᐃⵠ.ᐃᐃⵠΔⲆⵠⲆ];
        ⵠⲆⲆⵠ.KRAKEN = [ᐃⵠ.ⵠⵠⲆⵠⲆⵠΔ, ᐃⵠ.ᐃᐃⲆᐃⵠΔⵠ];
        ⵠⲆⲆⵠ.FOX = [ᐃⵠ.ⲆΔⲆⲆΔΔΔ, ᐃⵠ.ⵠⲆΔᐃⲆⲆᐃ];
        ⵠⲆⲆⵠ.WOLF = [ᐃⵠ.ⵠΔΔⵠᐃᐃᐃ, ᐃⵠ.ΔⲆⲆⵠⲆⵠᐃ];
        ⵠⲆⲆⵠ.SPIDER = [ᐃⵠ.ⲆΔⵠᐃⵠⵠᐃ, ᐃⵠ.ⲆⵠᐃⲆΔⲆⵠ];
        ⵠⲆⲆⵠ.BEAR = [ᐃⵠ.ⵠⵠΔᐃⲆⵠΔ, ᐃⵠ.ᐃΔⵠⵠΔΔᐃ];
        ⵠⲆⲆⵠ.CAVE = [ᐃⵠ.ⵠⵠᐃΔⲆΔᐃ, ᐃⵠ.ⵠⲆΔΔⵠⵠⵠ];
        ⵠⲆⲆⵠ.MAP = [ᐃⵠ.ⲆᐃᐃΔⵠᐃⲆ, ᐃⵠ.ⲆᐃᐃΔⵠⲆΔ];
        ⵠⲆⲆⵠ.FOREST = [ᐃⵠ.ⵠⲆΔΔᐃⲆᐃ, ᐃⵠ.ⲆⵠΔΔΔΔᐃ];
        ⵠⲆⲆⵠ.WINTER = [ᐃⵠ.ⵠⵠᐃᐃⲆᐃΔ, ᐃⵠ.ⲆΔΔⲆΔᐃΔ];
        ⵠⲆⲆⵠ.DESERT = [ᐃⵠ.ⵠⵠⵠⲆⵠⵠᐃ, ᐃⵠ.ᐃⵠⲆᐃⲆⲆᐃ];
        ⵠⲆⲆⵠ.LAVA = [ᐃⵠ.ᐃᐃΔⵠⵠΔⲆ, ᐃⵠ.ᐃᐃⲆⲆⲆⵠΔ];
        for (var c in ⵠⲆⲆⵠ) {
            for (var d = ⵠⲆⲆⵠ[c], e = 0; e < d.length; e++) {
                var f = d[e];
                if (f.ᐃⲆΔⵠᐃΔⵠ !== undefined) {
                    f.ᐃⲆΔⵠᐃΔⵠ();
                } else if (f.length > 0) {
                    for (var g = 0; g < f.length; g++) {
                        if (f[g].ᐃⲆΔⵠᐃΔⵠ !== sj) {
                            f[g].ᐃⲆΔⵠᐃΔⵠ();
                        }
                    }
                }
            }
        }
        console.log(ug, undefined);
    }
    function Dp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 170;
        e.translate(0, a * -170);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159.5, a * 322.0625);
        e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
        e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
        e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
        e.closePath();
        ud(e, c[0], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212.5, a * 270.0625);
        e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
        e.closePath();
        ud(e, undefined, c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 193.5, a * 226.0625);
        e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
        e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
        e.closePath();
        ud(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164.5, a * 245.0625);
        e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
        e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
        e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
        e.closePath();
        ud(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115.5, a * 260.0625);
        e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
        e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
        e.closePath();
        ud(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 152.5, a * 278.0625);
        e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
        e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
        e.closePath();
        ud(e, c[2], c[3], a * 12);
        return d;
    }
    function Ip(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 163;
        d.height = a * 163;
        e.save();
        e.translate(a * 82.5, a * 81.1015625);
        e.rotate(0);
        vd(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
        e.restore();
        ud(e, c[1]);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 80, a * 17.1015625);
        vd(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 80, a * 17.1015625);
        vd(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
        e.restore();
        ud(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 83.6015625);
        vd(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 83.6015625);
        vd(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
        e.restore();
        ud(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17.5, a * 82.6015625);
        vd(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17.5, a * 82.6015625);
        vd(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
        e.restore();
        ud(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 80.5, a * 145.6015625);
        vd(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 80.5, a * 145.6015625);
        vd(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
        e.restore();
        ud(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17, a * 18.1015625);
        vd(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17, a * 18.1015625);
        vd(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
        e.restore();
        ud(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 16.6015625);
        vd(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 16.6015625);
        vd(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
        e.restore();
        ud(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 144.1015625);
        vd(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 144.1015625);
        vd(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
        e.restore();
        ud(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17.5, a * 145.1015625);
        vd(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
        e.restore();
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17.5, a * 145.1015625);
        vd(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
        e.restore();
        ud(e, c[2], c[3], a * 3);
        return d;
    }
    function Ep(b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 600;
        var f = b * 22;
        var g = b * 4;
        var a = b * 4;
        c.width = e;
        c.height = f;
        vd(d, b * 5, b * 5, e - b * 10, f - b * 10, g);
        ud(d, null, "#BBE8EF", a);
        return c;
    }
    function Sp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 81;
        d.height = a * 77;
        e.translate(0, a * 10);
        e.scale(0.2, 0.2);
        e.translate(0, a * -30);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 36.5, a * 278.0625);
            e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
            e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
            e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
            e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
            e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
            e.closePath();
            ud(e, b[0], b[3], a * 50);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        ud(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 214.5, a * 124.0625);
        e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
        e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
        e.closePath();
        ud(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 145.0625);
        e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
        e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
        e.closePath();
        ud(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103.5, a * 169.0625);
        e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
        e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
        e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
        e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
        e.closePath();
        ud(e, b[2], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 313.0625);
        e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
        e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
        e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
        e.closePath();
        ud(e, b[1]);
        e.scale(3, 3);
        e.translate(15, a * 10);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 32);
            e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
            e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
            e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
            ud(e, undefined, b[3], a * 28);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 56, a * 6);
            e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
            e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
            e.closePath();
            ud(e, b[3], b[3], a * 28);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 32);
        e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
        e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
        e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
        ud(e, undefined, b[1], a * 17);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 6);
        e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
        e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
        e.closePath();
        ud(e, b[1], b[1], a * 17);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 32);
        e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
        e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
        e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
        ud(e, kr, b[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 6);
        e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
        e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
        e.closePath();
        ud(e, b[2], b[2], a * 10);
        return d;
    }
    function Qp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 573;
        d.height = a * 350;
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 336, a * 72);
            e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
            e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
            e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
            e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
            e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
            e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
            e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
            e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
            e.bezierCurveTo(a * 323, a * 13, a * 322, a * 25, a * 337, a * 74);
            e.closePath();
            ud(e, b[4], b[4], a * 35);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 168, a * 42);
        e.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
        e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
        e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
        e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
        e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
        e.closePath();
        ud(e, b[0], b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 188, a * 41);
        e.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
        e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
        e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
        e.closePath();
        ud(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 336, a * 71);
        e.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
        e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
        e.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
        e.closePath();
        ud(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 357, a * 76);
        e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
        e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
        e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
        e.closePath();
        ud(e, b[3], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 309, a * 168);
        e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
        ud(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 263, a * 54);
        e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
        e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
        e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
        e.closePath();
        ud(e, b[3], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 292, a * 198);
        e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
        ud(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 245, a * 68);
        e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
        ud(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 96);
        e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
        ud(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 207, a * 124);
        e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
        ud(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 183);
        e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
        ud(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 213);
        e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
        ud(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 399, a * 257);
        e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
        e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
        e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
        ud(e, b[3], b[3], a * 12);
        return d;
    }
    function _p(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 316;
        d.height = a * 365;
        e.save();
        e.translate(a * 156.07142639160156, a * 51.81248474121094);
        e.rotate(0);
        vd(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
        e.restore();
        ud(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
        e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
        e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
        e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
        e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
        e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
        e.closePath();
        ud(e, c[3], c[4], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
        e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
        e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
        e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
        e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
        e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
        e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
        e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
        e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
        e.closePath();
        ud(e, undefined, c[5], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
        e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
        e.closePath();
        ud(e, undefined, c[6], a * 15);
        return d;
    }
    function Rp(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 198;
        f.height = b * 147;
        g.globalAlpha = c ? 0.5 : 1;
        g.translate(0, b * 6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 76);
        g.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
        g.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
        g.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
        g.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
        g.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
        g.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
        g.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
        g.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
        g.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
        g.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
        g.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
        g.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
        g.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
        g.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
        g.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
        g.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
        g.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
        g.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
        g.closePath();
        ud(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 36, b * 80);
        g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
        g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
        g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
        g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
        g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
        g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
        g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
        g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
        g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
        g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
        g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
        g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
        g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
        g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
        g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
        g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
        g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
        g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
        g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
        g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
        g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
        g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
        g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
        g.closePath();
        ud(g, d[0]);
        g.globalAlpha = 1;
        g.translate(0, b * -6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 36, b * 80);
        g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
        g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
        g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
        g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
        g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
        g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
        g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
        g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
        g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
        g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
        g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
        g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
        g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
        g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
        g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
        g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
        g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
        g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
        g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
        g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
        g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
        g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
        g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
        g.closePath();
        ud(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 49, b * 98);
        g.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
        g.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
        g.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
        g.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
        g.closePath();
        ud(g, d[1]);
        g.globalAlpha = 0.5;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 54, b * 98);
        g.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
        g.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
        g.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
        g.closePath();
        ud(g, d[0]);
        g.globalAlpha = 1;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 118, b * 47);
        g.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
        g.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
        g.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
        g.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
        g.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
        g.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
        g.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
        g.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
        g.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * 4);
        g.bezierCurveTo(b * 44, b * 0, b * 35, b * 20, b * 33, b * 37);
        g.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
        g.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
        g.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
        g.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
        g.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
        g.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
        g.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
        g.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
        g.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
        g.closePath();
        ud(g, d[1], d[2], b * 6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 62, b * 21);
        g.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
        g.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
        g.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
        g.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
        g.closePath();
        ud(g, d[4]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 60, b * 29);
        g.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
        ud(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 61, b * 37);
        g.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
        ud(g, kr, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 52, b * 31);
        g.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
        ud(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 46, b * 35);
        g.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
        ud(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 58, b * 44);
        g.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
        ud(g, fk, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 48);
        g.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
        ud(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 46, b * 41);
        g.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
        ud(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 48, b * 48);
        g.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
        ud(g, undefined, d[3], b * 4);
        if (e == 0) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 99, b * 101);
            g.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
            g.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
            ud(g, er, d[5], b * 6);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 97.6666259765625, b * 101.33331298828125);
            g.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
            g.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
            ud(g, undefined, d[5], b * 6);
        } else {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 103, b * 100.39999389648438);
            g.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
            ud(g, rh, d[5], b * 6);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 103, b * 100.39999389648438);
            g.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
            ud(g, jl, d[5], b * 6);
            md(g, b * 86, b * 114.39999389648438, b * 4.5);
            ud(g, d[1], d[5], b * 6);
            md(g, b * 121, b * 114.39999389648438, b * 4.5);
            ud(g, d[1], d[5], b * 6);
        }
        return f;
    }
    function Fp() {
        ⵠΔ[814] = Ut(1, [{
            f: Gp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[815] = ⵠΔ[814];
        ⵠΔ[955] = [];
        ⵠΔ[955][0] = ᐃⵠ.ΔᐃⵠⲆⵠⲆᐃ;
        ⵠΔ[955][1] = ᐃⵠ.ⲆΔΔᐃⲆᐃᐃ;
        ⵠΔ[955][2] = ᐃⵠ.ⲆᐃⲆⵠⲆⵠΔ;
        ⵠΔ[956] = ⵠΔ[955];
        ⵠΔ[972] = [];
        ⵠΔ[972][0] = ᐃⵠ.ⵠⲆⵠΔᐃⲆΔ;
        ⵠΔ[972][1] = ᐃⵠ.ΔⵠⵠⵠⵠᐃⲆ;
        ⵠΔ[972][2] = ᐃⵠ.ⲆΔᐃⲆᐃΔᐃ;
        ⵠΔ[973] = ⵠΔ[972];
        ⵠΔ[987] = [];
        ⵠΔ[987][0] = ᐃⵠ.ᐃⲆᐃⵠᐃⵠⵠ;
        ⵠΔ[987][1] = ᐃⵠ.ΔⵠⵠⲆⲆΔⵠ;
        ⵠΔ[987][2] = ᐃⵠ.ⲆΔΔⵠᐃΔᐃ;
        ⵠΔ[988] = ⵠΔ[987];
        ⵠΔ[1154] = [];
        ⵠΔ[1154][0] = ᐃⵠ.ΔⲆΔⵠΔΔΔ;
        ⵠΔ[1154][1] = ᐃⵠ.ΔᐃΔⲆⲆΔⵠ;
        ⵠΔ[1154][2] = ᐃⵠ.ᐃΔᐃⵠΔΔⵠ;
        ⵠΔ[1155] = ⵠΔ[1154];
        ⵠΔ[965] = [];
        ⵠΔ[965][0] = ᐃⵠ.ᐃⲆⵠΔⵠᐃⵠ;
        ⵠΔ[965][1] = ᐃⵠ.ΔᐃΔΔᐃΔⵠ;
        ⵠΔ[965][2] = ᐃⵠ.ⵠⵠΔΔⵠᐃΔ;
        ⵠΔ[974] = ⵠΔ[965];
        ⵠΔ[1028] = [];
        ⵠΔ[1028][0] = ᐃⵠ.ⵠᐃⵠᐃⲆΔⵠ;
        ⵠΔ[1028][1] = ᐃⵠ.ⵠⲆⲆᐃⲆᐃⵠ;
        ⵠΔ[1028][2] = ᐃⵠ.ⲆΔⲆᐃⵠᐃⵠ;
        ⵠΔ[1029] = ⵠΔ[1028];
        ⵠΔ[1027] = ⵠΔ[1028];
        ⵠΔ[712] = [];
        ⵠΔ[712][0] = ᐃⵠ.ⵠⲆᐃⵠᐃΔⵠᐃΔ;
        ⵠΔ[712][1] = ᐃⵠ.ΔᐃΔΔⵠⲆᐃⵠᐃ;
        ⵠΔ[712][2] = ᐃⵠ.ⲆⲆᐃⵠⲆΔⵠⵠᐃ;
        ⵠΔ[713] = ⵠΔ[712];
        ⵠΔ[714] = ⵠΔ[712];
        ⵠΔ[1031] = [];
        ⵠΔ[1031][0] = ᐃⵠ.ᐃⵠⵠΔⲆΔⵠ;
        ⵠΔ[1031][1] = ᐃⵠ.ⵠⲆΔⵠⲆΔᐃ;
        ⵠΔ[1031][2] = ᐃⵠ.ᐃⲆⲆᐃᐃᐃΔ;
        ⵠΔ[1032] = ⵠΔ[1031];
        ⵠΔ[1030] = ⵠΔ[1031];
        ⵠΔ[423] = [];
        ⵠΔ[423][0] = ᐃⵠ.ⲆΔⲆΔⵠᐃⵠ;
        ⵠΔ[423][1] = ᐃⵠ.ΔᐃⲆᐃⲆⲆⵠ;
        ⵠΔ[423][2] = ᐃⵠ.ΔᐃΔⵠⲆⲆΔ;
        ⵠΔ[425] = ⵠΔ[423];
        ⵠΔ[424] = ⵠΔ[423];
        ⵠΔ[1233] = [];
        ⵠΔ[1233][0] = ᐃⵠ.ΔⲆᐃⲆᐃⲆⲆⲆⲆ;
        ⵠΔ[1233][1] = ᐃⵠ.ΔⲆᐃΔⵠᐃᐃΔᐃ;
        ⵠΔ[1233][2] = ᐃⵠ.ᐃⲆⲆⲆΔΔΔⵠᐃ;
        ⵠΔ[1234] = ⵠΔ[1233];
        ⵠΔ[1230] = [];
        ⵠΔ[1230][0] = ᐃⵠ.ⵠᐃⲆΔⲆⵠᐃᐃΔ;
        ⵠΔ[1230][1] = ᐃⵠ.ᐃⲆⵠᐃΔⲆⵠⲆΔ;
        ⵠΔ[1230][2] = ᐃⵠ.ⵠⵠⲆᐃᐃΔᐃᐃᐃ;
        ⵠΔ[1232] = ⵠΔ[1230];
        ⵠΔ[1231] = ⵠΔ[1230];
        ⵠΔ[569] = [];
        ⵠΔ[569][0] = ᐃⵠ.ⲆᐃⵠΔΔⲆⵠΔᐃ;
        ⵠΔ[569][1] = ᐃⵠ.ΔΔⲆⵠⵠᐃⵠⲆⲆ;
        ⵠΔ[569][2] = ᐃⵠ.ⵠⵠⲆᐃᐃⲆᐃⵠᐃ;
        ⵠΔ[571] = ⵠΔ[569];
        ⵠΔ[570] = ⵠΔ[569];
        ⵠΔ[1166] = [];
        ⵠΔ[1166][0] = ᐃⵠ.ΔΔΔⲆᐃⵠΔⵠⵠ;
        ⵠΔ[1166][1] = ᐃⵠ.ᐃΔⵠⲆⵠⲆⲆΔΔ;
        ⵠΔ[1166][2] = ᐃⵠ.ⵠᐃΔⲆᐃΔⵠⲆⵠ;
        ⵠΔ[1167] = ⵠΔ[1166];
        ⵠΔ[1168] = ⵠΔ[1166];
        ⵠΔ[572] = [];
        ⵠΔ[572][0] = ᐃⵠ.ⲆⲆⵠⲆⵠΔⵠᐃΔ;
        ⵠΔ[572][1] = ᐃⵠ.ⲆⲆΔΔⲆᐃⵠⵠⵠ;
        ⵠΔ[572][2] = ᐃⵠ.ⲆᐃⵠⵠΔΔΔⵠⵠ;
        ⵠΔ[574] = ⵠΔ[572];
        ⵠΔ[573] = ⵠΔ[572];
        ⵠΔ[1169] = [];
        ⵠΔ[1169][0] = ᐃⵠ.ⲆΔᐃⵠⵠΔⲆⵠⲆ;
        ⵠΔ[1169][1] = ᐃⵠ.ᐃᐃᐃⵠᐃⵠⲆⲆᐃ;
        ⵠΔ[1169][2] = ᐃⵠ.ⲆⲆⲆΔⲆΔⲆⲆⲆ;
        ⵠΔ[1170] = ⵠΔ[1169];
        ⵠΔ[1171] = ⵠΔ[1169];
        ⵠΔ[575] = [];
        ⵠΔ[575][0] = ᐃⵠ.ΔⲆᐃⲆⵠⲆⲆⵠΔ;
        ⵠΔ[575][1] = ᐃⵠ.ΔⲆᐃⲆⲆᐃΔᐃⲆ;
        ⵠΔ[575][2] = ᐃⵠ.ⵠⵠⲆⲆⵠⵠΔᐃΔ;
        ⵠΔ[577] = ⵠΔ[575];
        ⵠΔ[576] = ⵠΔ[575];
        ⵠΔ[1172] = [];
        ⵠΔ[1172][0] = ᐃⵠ.ⲆΔⲆⵠⵠᐃΔⵠᐃ;
        ⵠΔ[1172][1] = ᐃⵠ.ΔⵠⵠᐃⵠΔⵠⵠⵠ;
        ⵠΔ[1172][2] = ᐃⵠ.ⵠⲆᐃᐃⲆᐃⵠⵠΔ;
        ⵠΔ[1173] = ⵠΔ[1172];
        ⵠΔ[1174] = ⵠΔ[1172];
        ⵠΔ[578] = [];
        ⵠΔ[578][0] = ᐃⵠ.ⲆΔⲆⵠΔᐃⵠΔⵠ;
        ⵠΔ[578][1] = ᐃⵠ.ΔⲆⵠⵠᐃⵠⵠⲆᐃ;
        ⵠΔ[578][2] = ᐃⵠ.ᐃⵠⲆᐃⲆᐃΔⲆᐃ;
        ⵠΔ[580] = ⵠΔ[578];
        ⵠΔ[579] = ⵠΔ[578];
        ⵠΔ[1175] = [];
        ⵠΔ[1175][0] = ᐃⵠ.ΔᐃᐃΔⵠΔⵠΔΔ;
        ⵠΔ[1175][1] = ᐃⵠ.ᐃⵠⵠⵠΔⵠΔᐃᐃ;
        ⵠΔ[1175][2] = ᐃⵠ.ⲆⵠᐃᐃᐃᐃΔⵠⵠ;
        ⵠΔ[1176] = ⵠΔ[1175];
        ⵠΔ[1177] = ⵠΔ[1175];
        ⵠΔ[581] = [];
        ⵠΔ[581][0] = ᐃⵠ.ⲆⵠⲆᐃⲆΔⲆⲆΔ;
        ⵠΔ[581][1] = ᐃⵠ.ᐃⲆΔⲆᐃⵠⲆⵠⵠ;
        ⵠΔ[581][2] = ᐃⵠ.ᐃᐃⲆΔΔΔⲆⲆΔ;
        ⵠΔ[583] = ⵠΔ[581];
        ⵠΔ[582] = ⵠΔ[581];
        ⵠΔ[1178] = [];
        ⵠΔ[1178][0] = ᐃⵠ.ᐃΔᐃⵠΔΔΔⵠⲆ;
        ⵠΔ[1178][1] = ᐃⵠ.ᐃⵠⲆⵠΔᐃᐃΔⵠ;
        ⵠΔ[1178][2] = ᐃⵠ.ⵠΔⲆⲆᐃⵠΔⵠⵠ;
        ⵠΔ[1179] = ⵠΔ[1178];
        ⵠΔ[1180] = ⵠΔ[1178];
        ⵠΔ[584] = [];
        ⵠΔ[584][0] = ᐃⵠ.ⲆΔΔⲆᐃΔΔⲆᐃ;
        ⵠΔ[584][1] = ᐃⵠ.ⵠⲆⵠᐃⵠⵠᐃⵠΔ;
        ⵠΔ[584][2] = ᐃⵠ.ⵠⵠΔᐃΔⲆⲆᐃⵠ;
        ⵠΔ[586] = ⵠΔ[584];
        ⵠΔ[585] = ⵠΔ[584];
        ⵠΔ[1181] = [];
        ⵠΔ[1181][0] = ᐃⵠ.ⵠⵠⵠᐃⲆᐃΔΔⲆ;
        ⵠΔ[1181][1] = ᐃⵠ.ᐃᐃⵠᐃΔⵠⲆⵠΔ;
        ⵠΔ[1181][2] = ᐃⵠ.ᐃΔⲆⲆΔⵠⲆΔΔ;
        ⵠΔ[1182] = ⵠΔ[1181];
        ⵠΔ[1183] = ⵠΔ[1181];
        ⵠΔ[587] = [];
        ⵠΔ[587][0] = ᐃⵠ.ᐃⵠΔΔΔⲆⲆⵠⲆ;
        ⵠΔ[587][1] = ᐃⵠ.ⵠⲆⵠⵠΔⵠⵠⵠⲆ;
        ⵠΔ[587][2] = ᐃⵠ.ⵠΔⵠⲆΔⲆΔⵠⵠ;
        ⵠΔ[589] = ⵠΔ[587];
        ⵠΔ[588] = ⵠΔ[587];
        ⵠΔ[1184] = [];
        ⵠΔ[1184][0] = ᐃⵠ.ΔᐃⲆᐃΔΔⲆΔΔ;
        ⵠΔ[1184][1] = ᐃⵠ.ΔⵠΔΔⲆⲆΔⲆⲆ;
        ⵠΔ[1184][2] = ᐃⵠ.ⲆΔⲆⲆΔΔΔⲆⲆ;
        ⵠΔ[1185] = ⵠΔ[1184];
        ⵠΔ[1186] = ⵠΔ[1184];
        ⵠΔ[1257] = [];
        ⵠΔ[1257][0] = ᐃⵠ.ΔΔΔⲆⲆΔⵠⵠᐃ;
        ⵠΔ[1257][1] = ᐃⵠ.ᐃⲆΔΔⲆⲆⵠⲆⲆ;
        ⵠΔ[1257][2] = ᐃⵠ.ⲆᐃᐃΔⲆⲆⲆᐃⵠ;
        ⵠΔ[1258] = ⵠΔ[1257];
        ⵠΔ[1256] = ⵠΔ[1257];
        ⵠΔ[1260] = [];
        ⵠΔ[1260][0] = ᐃⵠ.ⵠⵠⵠⵠΔᐃⵠⵠᐃ;
        ⵠΔ[1260][1] = ᐃⵠ.ⵠⵠⲆⵠⲆⵠᐃⵠᐃ;
        ⵠΔ[1260][2] = ᐃⵠ.ⲆᐃⲆⵠⲆᐃⲆⲆⵠ;
        ⵠΔ[1261] = ⵠΔ[1260];
        ⵠΔ[1259] = ⵠΔ[1260];
        ⵠΔ[1263] = [];
        ⵠΔ[1263][0] = ᐃⵠ.ⵠⵠⵠⲆΔᐃⵠⵠⵠ;
        ⵠΔ[1263][1] = ᐃⵠ.ⲆⲆᐃⵠⲆΔⲆⵠΔ;
        ⵠΔ[1263][2] = ᐃⵠ.ⵠⲆᐃⵠⲆⲆᐃⵠᐃ;
        ⵠΔ[1264] = ⵠΔ[1263];
        ⵠΔ[1262] = ⵠΔ[1263];
        ⵠΔ[1266] = [];
        ⵠΔ[1266][0] = ᐃⵠ.ⵠᐃΔΔⲆΔΔΔᐃ;
        ⵠΔ[1266][1] = ᐃⵠ.ᐃΔᐃᐃⵠᐃΔⲆᐃ;
        ⵠΔ[1266][2] = ᐃⵠ.ΔⲆᐃᐃᐃΔᐃᐃΔ;
        ⵠΔ[1267] = ⵠΔ[1266];
        ⵠΔ[1265] = ⵠΔ[1266];
        ⵠΔ[1269] = [];
        ⵠΔ[1269][0] = ᐃⵠ.ⵠⲆΔΔᐃⵠⵠⵠΔ;
        ⵠΔ[1269][1] = ᐃⵠ.ᐃⵠⵠⵠⵠΔⵠⵠⲆ;
        ⵠΔ[1269][2] = ᐃⵠ.ΔⲆᐃⵠΔⵠᐃΔⲆ;
        ⵠΔ[1270] = ⵠΔ[1269];
        ⵠΔ[1268] = ⵠΔ[1269];
        ⵠΔ[1272] = [];
        ⵠΔ[1272][0] = ᐃⵠ.ᐃⲆΔⲆΔⲆⵠΔⵠ;
        ⵠΔ[1272][1] = ᐃⵠ.ᐃⲆⲆⲆΔⲆⲆΔⵠ;
        ⵠΔ[1272][2] = ᐃⵠ.ⲆⲆⵠΔⵠⵠΔᐃⲆ;
        ⵠΔ[1273] = ⵠΔ[1272];
        ⵠΔ[1271] = ⵠΔ[1272];
        ⵠΔ[1239] = [];
        ⵠΔ[1239][0] = ᐃⵠ.ⵠΔΔⲆⵠⵠΔᐃⵠ;
        ⵠΔ[1239][1] = ᐃⵠ.ᐃⵠⲆΔᐃΔᐃⵠⲆ;
        ⵠΔ[1239][2] = ᐃⵠ.ᐃⲆΔⵠΔⵠⵠⲆⲆ;
        ⵠΔ[1240] = ⵠΔ[1239];
        ⵠΔ[1238] = ⵠΔ[1239];
        ⵠΔ[1242] = [];
        ⵠΔ[1242][0] = ᐃⵠ.ᐃⵠΔΔⲆⵠⲆᐃⵠ;
        ⵠΔ[1242][1] = ᐃⵠ.ⵠᐃⲆⲆⲆⲆⵠᐃⵠ;
        ⵠΔ[1242][2] = ᐃⵠ.ⲆⲆᐃⵠⵠⲆΔⵠΔ;
        ⵠΔ[1243] = ⵠΔ[1242];
        ⵠΔ[1241] = ⵠΔ[1242];
        ⵠΔ[1245] = [];
        ⵠΔ[1245][0] = ᐃⵠ.ⵠⵠΔΔⵠᐃᐃⵠΔ;
        ⵠΔ[1245][1] = ᐃⵠ.ΔⵠᐃⵠⵠΔᐃⲆΔ;
        ⵠΔ[1245][2] = ᐃⵠ.ⲆΔⵠⵠΔᐃⵠⵠⵠ;
        ⵠΔ[1246] = ⵠΔ[1245];
        ⵠΔ[1244] = ⵠΔ[1245];
        ⵠΔ[1248] = [];
        ⵠΔ[1248][0] = ᐃⵠ.ⵠᐃⲆΔⵠⲆⵠⲆΔ;
        ⵠΔ[1248][1] = ᐃⵠ.ⵠᐃΔᐃⵠΔᐃⵠΔ;
        ⵠΔ[1248][2] = ᐃⵠ.ΔⵠⲆⲆᐃⵠΔΔⵠ;
        ⵠΔ[1249] = ⵠΔ[1248];
        ⵠΔ[1247] = ⵠΔ[1248];
        ⵠΔ[1251] = [];
        ⵠΔ[1251][0] = ᐃⵠ.ΔᐃᐃⵠⲆⵠⵠΔⵠ;
        ⵠΔ[1251][1] = ᐃⵠ.ⲆΔᐃⲆⵠⵠΔΔⲆ;
        ⵠΔ[1251][2] = ᐃⵠ.ⲆΔᐃΔⵠⵠⲆᐃΔ;
        ⵠΔ[1252] = ⵠΔ[1251];
        ⵠΔ[1250] = ⵠΔ[1251];
        ⵠΔ[1254] = [];
        ⵠΔ[1254][0] = ᐃⵠ.ⲆΔΔΔᐃⲆⲆⵠⵠ;
        ⵠΔ[1254][1] = ᐃⵠ.ΔⲆⵠⲆᐃⲆᐃΔⵠ;
        ⵠΔ[1254][2] = ᐃⵠ.ⵠⲆⵠΔᐃⵠⲆΔⵠ;
        ⵠΔ[1255] = ⵠΔ[1254];
        ⵠΔ[1253] = ⵠΔ[1254];
        ⵠΔ[1227] = [];
        ⵠΔ[1227][0] = ᐃⵠ.ΔΔⲆᐃΔᐃᐃⲆᐃ;
        ⵠΔ[1227][1] = ᐃⵠ.ΔⵠᐃⲆΔᐃⲆⵠᐃ;
        ⵠΔ[1227][2] = ᐃⵠ.ᐃⲆⵠΔΔⵠΔΔᐃ;
        ⵠΔ[1229] = ⵠΔ[1227];
        ⵠΔ[1228] = ⵠΔ[1227];
        ⵠΔ[1187] = [];
        ⵠΔ[1187][0] = ᐃⵠ.ᐃᐃⵠⲆⲆΔⵠ;
        ⵠΔ[1187][1] = ᐃⵠ.ΔⲆⵠᐃⵠⲆⵠ;
        ⵠΔ[1187][2] = ᐃⵠ.ⵠᐃᐃⲆⵠᐃⵠ;
        ⵠΔ[1188] = ⵠΔ[1187];
        ⵠΔ[Wr.ΔᐃΔⲆⲆⵠᐃⲆᐃ] = ⵠΔ[1187];
        ⵠΔ[840] = Ut(1, [{
            f: wd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
        }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[841] = ⵠΔ[840];
        ⵠΔ[850] = Ut(1, [{
            f: kp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[851] = ⵠΔ[850];
        ⵠΔ[644] = Ut(1, [{
            f: Gt,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }, {
            f: Nt,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }, {
            f: It,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[643] = ⵠΔ[644];
        ⵠΔ[639] = Ut(1, [{
            f: Jt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[800] = Ut(1, [{
            f: qc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
        }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[799] = ⵠΔ[800];
        ⵠΔ[631] = Ut(1, [{
            f: zu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[632] = ⵠΔ[631];
        ⵠΔ[311] = Ut(1, [{
            f: zu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#493d36", "#332b28"]
        }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[284] = ⵠΔ[311];
        ⵠΔ[808] = Ut(1, [{
            f: zu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#c67933", "#b17238"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[809] = ⵠΔ[808];
        ⵠΔ[834] = Ut(1, [{
            f: zu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e8e8e8", "#bbbbbb"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[835] = ⵠΔ[834];
        ⵠΔ[845] = Ut(1, [{
            f: zu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#328a56", "#449573"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[846] = ⵠΔ[845];
        ⵠΔ[949] = Ut(1, [{
            f: zu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#c98e2f", "#a36b11"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[950] = ⵠΔ[949];
        ⵠΔ[951] = ⵠΔ[949];
        ⵠΔ[966] = Ut(1, [{
            f: zu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#13a56d", "#098a58"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[967] = ⵠΔ[966];
        ⵠΔ[968] = ⵠΔ[966];
        ⵠΔ[981] = Ut(1, [{
            f: zu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#3a8214", "#4a9c1e"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[982] = ⵠΔ[981];
        ⵠΔ[983] = ⵠΔ[981];
        ⵠΔ[959] = Ut(1, [{
            f: zu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#b22419", "#99110e"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[960] = ⵠΔ[959];
        ⵠΔ[961] = ⵠΔ[959];
        ⵠΔ[309] = Ut(1, [{
            f: Xt,
            x: -2,
            y: -2,
            a: 1,
            r: -Math.PI / 7,
            c: ["#4d2d14", "#432516"]
        }, {
            f: Yt,
            x: -2,
            y: -2,
            a: 1,
            r: -Math.PI / 7,
            c: ["#efd435", "#ec8d35", "#e96132"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[302] = ⵠΔ[309];
        ⵠΔ[328] = Ut(1, [{
            f: Wt,
            x: -2,
            y: -1,
            a: 1,
            r: -Math.PI / 7,
            c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
        }, {
            f: Yt,
            x: -2,
            y: -1,
            a: 1,
            r: -Math.PI / 7,
            c: ["#efd435", "#ec8d35", "#e96132"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[327] = ⵠΔ[328];
        ⵠΔ[860] = Ut(1, [{
            f: ku,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
        }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[865] = Ut(1, [{
            f: Cu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[829] = Ut(1, [{
            f: ou,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[261] = Ut(1, [{
            f: ju,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[292] = Ut(1, [{
            f: wu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[293] = Ut(1, [{
            f: vu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[455] = Ut(1, [{
            f: Au,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[313] = Ut(1, [{
            f: iu,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[312] = Ut(1, [{
            f: iu,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[258] = Ut(1, [{
            f: iu,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[296] = Ut(1, [{
            f: iu,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[458] = Ut(1, [{
            f: iu,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[1017] = [];
        ⵠΔ[1017][0] = ᐃⵠ.ⵠⵠᐃᐃᐃⵠⵠ;
        ⵠΔ[1017][1] = ᐃⵠ.ᐃᐃⲆⲆΔⵠΔ;
        ⵠΔ[1017][2] = ᐃⵠ.ⲆⵠⵠⲆᐃᐃⲆ;
        ⵠΔ[1019] = ⵠΔ[1017];
        ⵠΔ[1018] = ⵠΔ[1017];
        ⵠΔ[315] = Ut(1, [{
            f: ic,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#252B28", "#58645F", "#75827D"]
        }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[297] = Ut(1, [{
            f: ec,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#282823", "#877c2d", "#c4bc51"]
        }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[298] = Ut(1, [{
            f: gc,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#232828", "#3fc9c9", "#74ede6"]
        }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[316] = Ut(1, [{
            f: Xt,
            x: 0,
            y: -5,
            a: 1,
            r: Math.PI / 2.5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[830] = ⵠΔ[829];
        ⵠΔ[254] = ⵠΔ[261];
        ⵠΔ[290] = ⵠΔ[292];
        ⵠΔ[291] = ⵠΔ[293];
        ⵠΔ[456] = ⵠΔ[455];
        ⵠΔ[314] = ⵠΔ[313];
        ⵠΔ[256] = ⵠΔ[312];
        ⵠΔ[295] = ⵠΔ[258];
        ⵠΔ[257] = ⵠΔ[296];
        ⵠΔ[460] = ⵠΔ[458];
        ⵠΔ[277] = Ut(1, [{
            f: jd,
            x: 0,
            y: 0,
            a: 1,
            r: 0
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[310] = Ut(1, [{
            f: _d,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
        }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[262] = ⵠΔ[310];
        ⵠΔ[329] = Ut(1, [{
            f: Ic,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[263] = ⵠΔ[329];
        ⵠΔ[331] = Ut(1, [{
            f: Ec,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[332] = ⵠΔ[331];
        ⵠΔ[492] = Ut(1, [{
            f: Ic,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[493] = ⵠΔ[492];
        ⵠΔ[330] = Ut(1, [{
            f: Fc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[265] = ⵠΔ[330];
        ⵠΔ[317] = Ut(1, [{
            f: Bc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
        }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[318] = ⵠΔ[317];
        ⵠΔ[319] = Ut(1, [{
            f: mm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[320] = ⵠΔ[319];
        ⵠΔ[362] = Ut(1, [{
            f: nm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[363] = ⵠΔ[362];
        ⵠΔ[364] = Ut(1, [{
            f: nm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[365] = ⵠΔ[364];
        ⵠΔ[361] = Ut(1, [{
            f: Nc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[360] = ⵠΔ[361];
        ⵠΔ[495] = Ut(1, [{
            f: Nc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[496] = ⵠΔ[495];
        ⵠΔ[335] = Ut(1, [{
            f: Rc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[268] = ⵠΔ[335];
        ⵠΔ[372] = Ut(1, [{
            f: Qc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[371] = ⵠΔ[372];
        ⵠΔ[499] = Ut(1, [{
            f: Qc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[498] = ⵠΔ[499];
        ⵠΔ[375] = Ut(1, [{
            f: Jc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[374] = ⵠΔ[375];
        ⵠΔ[378] = Ut(1, [{
            f: Lc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[377] = ⵠΔ[378];
        ⵠΔ[337] = Ut(1, [{
            f: um,
            x: 0,
            y: 2,
            a: 1,
            r: 0,
            c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[338] = ⵠΔ[337];
        ⵠΔ[300] = Ut(1, [{
            f: Vd,
            x: 0,
            y: -3,
            a: 1,
            r: 0,
            c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
        }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[323] = Ut(1, [{
            f: Vd,
            x: 0,
            y: -3,
            a: 1,
            r: 0,
            c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
        }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[325] = ⵠΔ[323];
        ⵠΔ[305] = Ut(1, [{
            f: Pt,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#cec0c4", "#ffffff", "#6d6768"]
        }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[513] = Ut(1, [{
            f: Pt,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#d4e9ec", "#37b1d7", "#506c71"]
        }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[515] = ⵠΔ[513];
        ⵠΔ[368] = Ut(1, [{
            f: Uc,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#ef96be", "#ffffff"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[1162] = Ut(1, [{
            f: Uc,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#55423e", "#ffffff"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[178] = Ut(1, [{
            f: Dc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[179] = Ut(1, [{
            f: Dc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[624] = Ut(1, [{
            f: Uc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#201851", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[393] = Ut(1, [{
            f: Uc,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#231f20", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[505] = Ut(1, [{
            f: Uc,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#ffffff", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[369] = Ut(1, [{
            f: sm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[370] = ⵠΔ[369];
        ⵠΔ[381] = Ut(1, [{
            f: vm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[380] = ⵠΔ[381];
        ⵠΔ[502] = Ut(1, [{
            f: Cm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[503] = ⵠΔ[502];
        ⵠΔ[880] = Ut(1, [{
            f: bu,
            x: 0,
            y: 5,
            a: 1,
            r: 0,
            c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[881] = ⵠΔ[880];
        ⵠΔ[882] = Ut(1, [{
            f: _t,
            x: 0,
            y: 5,
            a: 1,
            r: 0,
            c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[883] = ⵠΔ[882];
        ⵠΔ[303] = Ut(1, [{
            f: St,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#ffffff", "#cec0c4"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[304] = ⵠΔ[303];
        ⵠΔ[392] = [];
        ⵠΔ[392][0] = ᐃⵠ.ⵠⵠΔᐃΔᐃⲆ;
        ⵠΔ[392][1] = ᐃⵠ.ΔⵠⲆⲆΔⵠᐃ;
        ⵠΔ[392][2] = ᐃⵠ.ⲆΔⲆᐃΔᐃΔ;
        ⵠΔ[367] = ⵠΔ[392];
        ⵠΔ[975] = [];
        ⵠΔ[975][0] = ᐃⵠ.ⲆᐃⵠⵠⲆⵠⲆ;
        ⵠΔ[975][1] = ᐃⵠ.ΔⵠΔⲆⵠᐃⵠ;
        ⵠΔ[975][2] = ᐃⵠ.ⵠⲆⵠⲆᐃⵠᐃ;
        ⵠΔ[977] = ⵠΔ[975];
        ⵠΔ[976] = ⵠΔ[975];
        ⵠΔ[978] = [];
        ⵠΔ[978][0] = ᐃⵠ.ᐃⲆΔᐃΔⵠⲆ;
        ⵠΔ[978][1] = ᐃⵠ.ⲆⲆⵠᐃⵠⲆΔ;
        ⵠΔ[978][2] = ᐃⵠ.ⵠΔⵠᐃᐃΔⵠ;
        ⵠΔ[980] = ⵠΔ[978];
        ⵠΔ[979] = ⵠΔ[978];
        ⵠΔ[1158] = [];
        ⵠΔ[1158][0] = ᐃⵠ.ΔΔⲆᐃΔⲆΔ;
        ⵠΔ[1158][1] = ᐃⵠ.ΔΔⲆᐃΔⲆΔ;
        ⵠΔ[1158][2] = ᐃⵠ.ΔΔⲆᐃΔⲆΔ;
        ⵠΔ[1159] = ⵠΔ[1158];
        ⵠΔ[426] = [];
        ⵠΔ[426][0] = ᐃⵠ.ⵠⲆᐃⵠᐃᐃΔ;
        ⵠΔ[426][1] = ᐃⵠ.ⵠⵠⲆᐃⵠⲆᐃ;
        ⵠΔ[426][2] = ᐃⵠ.ⵠⲆⲆⲆᐃΔⵠ;
        ⵠΔ[427] = ⵠΔ[426];
        ⵠΔ[428] = ⵠΔ[426];
        ⵠΔ[1160] = [];
        ⵠΔ[1160][0] = ᐃⵠ.ⲆⵠⵠᐃΔΔⲆ;
        ⵠΔ[1160][1] = ᐃⵠ.ⲆⵠⵠᐃΔΔⲆ;
        ⵠΔ[1160][2] = ᐃⵠ.ⲆⵠⵠᐃΔΔⲆ;
        ⵠΔ[1161] = ⵠΔ[1160];
        ⵠΔ[1236] = [];
        ⵠΔ[1236][0] = ᐃⵠ.ΔⵠⵠᐃⲆⵠⵠⲆᐃ;
        ⵠΔ[1236][1] = ᐃⵠ.ΔⵠⲆⵠᐃᐃⵠⲆⲆ;
        ⵠΔ[1236][2] = ᐃⵠ.ᐃᐃΔⲆᐃΔᐃΔΔ;
        ⵠΔ[1235] = ⵠΔ[1236];
        ⵠΔ[1237] = ⵠΔ[1236];
        ⵠΔ[991] = [];
        ⵠΔ[991][0] = ᐃⵠ.ⲆᐃΔⲆᐃΔⵠ;
        ⵠΔ[991][1] = ᐃⵠ.ΔⵠᐃᐃΔᐃⲆ;
        ⵠΔ[991][2] = ᐃⵠ.ⲆᐃⵠⵠⲆⲆⲆ;
        ⵠΔ[990] = ⵠΔ[991];
        ⵠΔ[992] = ⵠΔ[991];
        ⵠΔ[994] = [];
        ⵠΔ[994][0] = ᐃⵠ.ΔⲆᐃⲆⵠΔΔ;
        ⵠΔ[994][1] = ᐃⵠ.ⲆⲆᐃⲆⵠᐃᐃ;
        ⵠΔ[994][2] = ᐃⵠ.ΔⵠΔΔᐃⵠⵠ;
        ⵠΔ[993] = ⵠΔ[994];
        ⵠΔ[995] = ⵠΔ[994];
        ⵠΔ[997] = [];
        ⵠΔ[997][0] = ᐃⵠ.ⵠⲆΔᐃΔⵠΔ;
        ⵠΔ[997][1] = ᐃⵠ.ΔᐃⲆᐃᐃᐃΔ;
        ⵠΔ[997][2] = ᐃⵠ.ⲆᐃᐃΔΔΔᐃ;
        ⵠΔ[996] = ⵠΔ[997];
        ⵠΔ[998] = ⵠΔ[997];
        ⵠΔ[1000] = [];
        ⵠΔ[1000][0] = ᐃⵠ.ⲆⲆⵠⲆᐃⵠᐃ;
        ⵠΔ[1000][1] = ᐃⵠ.ᐃᐃᐃᐃⵠΔⲆ;
        ⵠΔ[1000][2] = ᐃⵠ.ΔΔⵠⵠⵠⲆΔ;
        ⵠΔ[999] = ⵠΔ[1000];
        ⵠΔ[1001] = ⵠΔ[1000];
        ⵠΔ[1003] = [];
        ⵠΔ[1003][0] = ᐃⵠ.ⵠⲆᐃⲆᐃⵠᐃ;
        ⵠΔ[1003][1] = ᐃⵠ.ΔⲆⵠΔᐃΔΔ;
        ⵠΔ[1003][2] = ᐃⵠ.ΔΔⵠⵠⵠⵠⲆ;
        ⵠΔ[1002] = ⵠΔ[1003];
        ⵠΔ[1004] = ⵠΔ[1003];
        ⵠΔ[1006] = [];
        ⵠΔ[1006][0] = ᐃⵠ.ᐃⲆⲆⵠⲆⲆΔ;
        ⵠΔ[1006][1] = ᐃⵠ.ΔΔⵠΔⵠΔΔ;
        ⵠΔ[1006][2] = ᐃⵠ.ΔᐃᐃⵠᐃⵠΔ;
        ⵠΔ[1005] = ⵠΔ[1006];
        ⵠΔ[1007] = ⵠΔ[1006];
        ⵠΔ[1009] = [];
        ⵠΔ[1009][0] = ᐃⵠ.ᐃⲆⵠⵠᐃⵠΔ;
        ⵠΔ[1009][1] = ᐃⵠ.ⵠⵠΔⵠⲆⵠⲆ;
        ⵠΔ[1009][2] = ᐃⵠ.ⵠⲆⵠⵠⲆᐃⲆ;
        ⵠΔ[1008] = ⵠΔ[1009];
        ⵠΔ[1010] = ⵠΔ[1009];
        ⵠΔ[1012] = [];
        ⵠΔ[1012][0] = ᐃⵠ.ΔⵠΔⲆΔΔⵠ;
        ⵠΔ[1012][1] = ᐃⵠ.ⵠΔΔⲆⵠⲆⲆ;
        ⵠΔ[1012][2] = ᐃⵠ.ⵠⲆⲆᐃⲆΔΔ;
        ⵠΔ[1011] = ⵠΔ[1012];
        ⵠΔ[1013] = ⵠΔ[1012];
        ⵠΔ[1015] = [];
        ⵠΔ[1015][0] = ᐃⵠ.ΔΔΔⵠⲆⲆⲆ;
        ⵠΔ[1015][1] = ᐃⵠ.ΔⲆΔⲆᐃⵠᐃ;
        ⵠΔ[1015][2] = ᐃⵠ.ⲆΔΔⵠⵠΔⲆ;
        ⵠΔ[1014] = ⵠΔ[1015];
        ⵠΔ[1016] = ⵠΔ[1015];
        ⵠΔ[1035] = [];
        ⵠΔ[1035][0] = ᐃⵠ.ⲆⵠⵠⲆΔ;
        ⵠΔ[1035][1] = ᐃⵠ.ⲆⵠⵠⲆΔ;
        ⵠΔ[1035][2] = ᐃⵠ.ⲆⵠⵠⲆΔ;
        ⵠΔ[Wr.ⵠⲆΔⲆᐃΔⵠΔⵠ] = ⵠΔ[1035];
        ⵠΔ[1036] = ⵠΔ[1035];
        ⵠΔ[1037] = [];
        ⵠΔ[1037][0] = ᐃⵠ.ⲆⲆⲆΔᐃ;
        ⵠΔ[1037][1] = ᐃⵠ.ⲆⲆⲆΔᐃ;
        ⵠΔ[1037][2] = ᐃⵠ.ⲆⲆⲆΔᐃ;
        ⵠΔ[Wr.ⵠᐃΔⲆⲆⲆΔⵠᐃ] = ⵠΔ[1037];
        ⵠΔ[1038] = ⵠΔ[1037];
        ⵠΔ[1039] = [];
        ⵠΔ[1039][0] = ᐃⵠ.ⲆⲆᐃⵠᐃ;
        ⵠΔ[1039][1] = ᐃⵠ.ⲆⲆᐃⵠᐃ;
        ⵠΔ[1039][2] = ᐃⵠ.ⲆⲆᐃⵠᐃ;
        ⵠΔ[Wr.ⲆⲆᐃᐃᐃⲆΔᐃⲆ] = ⵠΔ[1039];
        ⵠΔ[1040] = ⵠΔ[1039];
        ⵠΔ[1156] = [];
        ⵠΔ[1156][0] = ᐃⵠ.ⵠᐃΔΔⵠ;
        ⵠΔ[1156][1] = ᐃⵠ.ⵠᐃΔΔⵠ;
        ⵠΔ[1156][2] = ᐃⵠ.ⵠᐃΔΔⵠ;
        ⵠΔ[1157] = ⵠΔ[1156];
        ⵠΔ[1046] = [];
        ⵠΔ[1046][0] = ᐃⵠ.ᐃᐃⵠⲆΔᐃᐃ;
        ⵠΔ[1046][1] = ᐃⵠ.ΔΔⵠΔΔⲆᐃ;
        ⵠΔ[1046][2] = ᐃⵠ.ᐃⵠⲆᐃᐃᐃᐃ;
        ⵠΔ[1048] = ⵠΔ[1046];
        ⵠΔ[1047] = ⵠΔ[1046];
        ⵠΔ[744] = [];
        ⵠΔ[744][0] = ᐃⵠ.ᐃᐃⵠⵠᐃⲆΔ;
        ⵠΔ[744][1] = ᐃⵠ.ⲆᐃⲆᐃⵠΔΔ;
        ⵠΔ[744][2] = ᐃⵠ.ᐃᐃΔᐃⲆᐃΔ;
        ⵠΔ[746] = ⵠΔ[744];
        ⵠΔ[745] = ⵠΔ[744];
        ⵠΔ[747] = [];
        ⵠΔ[747][0] = ᐃⵠ.ⵠᐃⵠⲆⲆⲆⲆ;
        ⵠΔ[747][1] = ᐃⵠ.ⲆⲆⲆΔⲆⲆⵠ;
        ⵠΔ[747][2] = ᐃⵠ.ⵠᐃᐃᐃΔΔⲆ;
        ⵠΔ[749] = ⵠΔ[747];
        ⵠΔ[748] = ⵠΔ[747];
        ⵠΔ[1049] = [];
        ⵠΔ[1049][0] = ᐃⵠ.ⲆⲆᐃΔᐃᐃΔ;
        ⵠΔ[1049][1] = ᐃⵠ.ⲆΔΔⲆᐃΔΔ;
        ⵠΔ[1049][2] = ᐃⵠ.ⵠᐃⵠⵠⲆⲆⵠ;
        ⵠΔ[1051] = ⵠΔ[1049];
        ⵠΔ[1050] = ⵠΔ[1049];
        ⵠΔ[1189] = [];
        ⵠΔ[1189][0] = ᐃⵠ.ᐃⲆᐃⲆᐃΔⲆ;
        ⵠΔ[1189][1] = ᐃⵠ.ⵠⲆΔΔⲆΔΔ;
        ⵠΔ[1189][2] = ᐃⵠ.ΔΔⵠⲆᐃᐃⵠ;
        ⵠΔ[1191] = ⵠΔ[1189];
        ⵠΔ[1190] = ⵠΔ[1189];
        ⵠΔ[1110] = [];
        ⵠΔ[1110][0] = ᐃⵠ.ΔΔⲆⵠᐃⵠᐃ;
        ⵠΔ[1110][1] = ᐃⵠ.ⵠΔⲆⵠᐃᐃᐃ;
        ⵠΔ[1110][2] = ᐃⵠ.ᐃΔⵠᐃΔⵠⲆ;
        ⵠΔ[1112] = ⵠΔ[1110];
        ⵠΔ[1111] = ⵠΔ[1110];
        ⵠΔ[1131] = [];
        ⵠΔ[1131][0] = ᐃⵠ.ᐃⲆⵠᐃᐃΔⵠⵠⲆ;
        ⵠΔ[1131][1] = ᐃⵠ.ⵠⵠⵠⲆⵠΔⲆᐃⲆ;
        ⵠΔ[1131][2] = ᐃⵠ.ᐃᐃΔⲆⵠⲆⵠⲆΔ;
        ⵠΔ[1133] = ⵠΔ[1131];
        ⵠΔ[1132] = ⵠΔ[1131];
        ⵠΔ[1137] = [];
        ⵠΔ[1137][0] = ᐃⵠ.ⵠᐃᐃΔΔΔΔ;
        ⵠΔ[1137][1] = ᐃⵠ.ⵠⲆⵠⲆⲆΔᐃ;
        ⵠΔ[1137][2] = ᐃⵠ.ΔⲆⵠⵠᐃᐃΔ;
        ⵠΔ[1138] = ⵠΔ[1137];
        ⵠΔ[1139] = ⵠΔ[1137];
        ⵠΔ[1140] = [];
        ⵠΔ[1140][0] = ᐃⵠ.ⲆⵠⵠΔΔⵠⵠ;
        ⵠΔ[1140][1] = ᐃⵠ.ⲆⲆⲆⲆⲆⲆᐃ;
        ⵠΔ[1140][2] = ᐃⵠ.ⵠⲆⵠⵠΔⲆⵠ;
        ⵠΔ[1141] = ⵠΔ[1140];
        ⵠΔ[1142] = ⵠΔ[1140];
        ⵠΔ[1117] = [];
        ⵠΔ[1117][0] = ᐃⵠ.ᐃΔⵠⵠᐃⵠⵠ;
        ⵠΔ[1117][1] = ᐃⵠ.ⵠⵠⵠΔⲆⵠᐃ;
        ⵠΔ[1117][2] = ᐃⵠ.ᐃⲆᐃⵠᐃΔᐃ;
        ⵠΔ[1116] = ⵠΔ[1117];
        ⵠΔ[1118] = ⵠΔ[1117];
        ⵠΔ[1080] = [];
        ⵠΔ[1080][0] = ᐃⵠ.ⵠΔⵠΔⵠⵠΔ;
        ⵠΔ[1080][1] = ᐃⵠ.ⵠᐃⲆⲆΔΔᐃ;
        ⵠΔ[1080][2] = ᐃⵠ.ΔⲆⵠⵠⲆⲆⲆ;
        ⵠΔ[1082] = ⵠΔ[1080];
        ⵠΔ[1081] = ⵠΔ[1080];
        ⵠΔ[1224] = [];
        ⵠΔ[1224][0] = ᐃⵠ.ΔΔⵠΔᐃᐃᐃΔΔ;
        ⵠΔ[1224][1] = ᐃⵠ.ⵠⵠᐃⵠᐃⵠΔᐃⲆ;
        ⵠΔ[1224][2] = ᐃⵠ.ⵠᐃΔΔⵠΔⲆⲆⵠ;
        ⵠΔ[1226] = ⵠΔ[1224];
        ⵠΔ[1225] = ⵠΔ[1224];
        ⵠΔ[1095] = [];
        ⵠΔ[1095][0] = ᐃⵠ.ΔⲆᐃΔⵠⲆⲆ;
        ⵠΔ[1095][1] = ᐃⵠ.ᐃΔΔⲆᐃΔᐃ;
        ⵠΔ[1095][2] = ᐃⵠ.ⲆⲆΔΔΔⵠⲆ;
        ⵠΔ[1097] = ⵠΔ[1095];
        ⵠΔ[1096] = ⵠΔ[1095];
        ⵠΔ[717] = Ut(1, [{
            f: ep,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
        }, {
            f: Ym,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e4c027"]
        }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[718] = ⵠΔ[717];
        ⵠΔ[408] = Ut(1, [{
            f: _c,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
        }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[409] = ⵠΔ[408];
        ⵠΔ[907] = Ut(1, [{
            f: em,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
        }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[909] = ⵠΔ[907];
        ⵠΔ[908] = ⵠΔ[907];
        ⵠΔ[197] = Ut(1, [{
            f: pm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
        }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[906] = ⵠΔ[197];
        ⵠΔ[901] = Ut(1, [{
            f: gm,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[900] = ⵠΔ[901];
        ⵠΔ[899] = ⵠΔ[901];
        ⵠΔ[401] = Ut(1, [{
            f: Yc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[402] = ⵠΔ[401];
        ⵠΔ[395] = Ut(1, [{
            f: Tm,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[396] = ⵠΔ[395];
        ⵠΔ[398] = Ut(1, [{
            f: tm,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[399] = ⵠΔ[398];
        ⵠΔ[404] = Ut(1, [{
            f: lm,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[405] = ⵠΔ[404];
        ⵠΔ[472] = Ut(1, [{
            f: hm,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[473] = ⵠΔ[472];
        ⵠΔ[874] = Ut(1, [{
            f: Kc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
        }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[876] = ⵠΔ[874];
        ⵠΔ[875] = ⵠΔ[874];
        ⵠΔ[477] = Ut(1, [{
            f: Hc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[478] = ⵠΔ[477];
        ⵠΔ[709] = Ut(1, [{
            f: Tp,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#939393", "#5f6061"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[711] = ⵠΔ[709];
        ⵠΔ[550] = Ut(1, [{
            f: hp,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[551] = ⵠΔ[550];
        ⵠΔ[480] = Ut(1, [{
            f: Hc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[481] = ⵠΔ[480];
        ⵠΔ[483] = Ut(1, [{
            f: Hc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[484] = ⵠΔ[483];
        ⵠΔ[486] = Ut(1, [{
            f: Hc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[487] = ⵠΔ[486];
        ⵠΔ[489] = [];
        ⵠΔ[489][0] = ᐃⵠ.ΔᐃΔΔᐃᐃⲆ;
        ⵠΔ[489][1] = ᐃⵠ.ⲆⲆⵠᐃΔΔᐃ;
        ⵠΔ[489][2] = ᐃⵠ.ᐃΔⵠⲆᐃⲆⵠ;
        ⵠΔ[491] = ⵠΔ[489];
        ⵠΔ[490] = ⵠΔ[489];
        ⵠΔ[1195] = [];
        ⵠΔ[1195][0] = ᐃⵠ.ⵠⲆⵠᐃᐃⲆᐃ;
        ⵠΔ[1195][1] = ᐃⵠ.ᐃⵠⵠⲆᐃⲆⵠ;
        ⵠΔ[1195][2] = ᐃⵠ.ΔᐃⲆᐃⲆᐃⵠ;
        ⵠΔ[1197] = ⵠΔ[1195];
        ⵠΔ[1196] = ⵠΔ[1195];
        ⵠΔ[1199] = [];
        ⵠΔ[1199][0] = ᐃⵠ.ΔᐃⲆΔΔⵠⵠ;
        ⵠΔ[1199][1] = ᐃⵠ.ⲆⵠΔᐃⵠⵠⵠ;
        ⵠΔ[1199][2] = ᐃⵠ.ᐃᐃⲆⵠⵠⲆⲆ;
        ⵠΔ[1201] = ⵠΔ[1199];
        ⵠΔ[1200] = ⵠΔ[1199];
        ⵠΔ[1203] = [];
        ⵠΔ[1203][0] = ᐃⵠ.ⵠⲆⵠⲆⵠΔΔ;
        ⵠΔ[1203][1] = ᐃⵠ.ᐃⵠΔΔᐃᐃⵠ;
        ⵠΔ[1203][2] = ᐃⵠ.ᐃᐃⵠᐃⲆⵠⵠ;
        ⵠΔ[1205] = ⵠΔ[1203];
        ⵠΔ[1204] = ⵠΔ[1203];
        ⵠΔ[1207] = [];
        ⵠΔ[1207][0] = ᐃⵠ.ΔⲆⲆⵠⵠΔΔ;
        ⵠΔ[1207][1] = ᐃⵠ.ⲆᐃⲆⵠᐃⵠⵠ;
        ⵠΔ[1207][2] = ᐃⵠ.ⵠⲆⲆΔΔᐃΔ;
        ⵠΔ[1209] = ⵠΔ[1207];
        ⵠΔ[1208] = ⵠΔ[1207];
        ⵠΔ[1211] = [];
        ⵠΔ[1211][0] = ᐃⵠ.ΔᐃⵠΔΔΔⵠ;
        ⵠΔ[1211][1] = ᐃⵠ.ᐃⵠΔⵠΔΔΔ;
        ⵠΔ[1211][2] = ᐃⵠ.ΔⵠᐃⲆᐃᐃΔ;
        ⵠΔ[1213] = ⵠΔ[1211];
        ⵠΔ[1212] = ⵠΔ[1211];
        ⵠΔ[1215] = [];
        ⵠΔ[1215][0] = ᐃⵠ.ᐃᐃᐃᐃⵠⵠⲆ;
        ⵠΔ[1215][1] = ᐃⵠ.ΔⵠΔΔⵠΔⵠ;
        ⵠΔ[1215][2] = ᐃⵠ.ᐃⲆΔⵠⲆᐃⵠ;
        ⵠΔ[1217] = ⵠΔ[1215];
        ⵠΔ[1216] = ⵠΔ[1215];
        ⵠΔ[518] = Ut(1, [{
            f: lp,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
        }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[519] = ⵠΔ[518];
        ⵠΔ[532] = Ut(1, [{
            f: rp,
            x: -2,
            y: -2,
            a: 1,
            r: -Math.PI / 5,
            c: ["#141414", "#c4a23a", "#816511"]
        }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[533] = ⵠΔ[532];
        ⵠΔ[521] = Ut(1, [{
            f: qm,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#141414", "#178a99", "#0a6372", "#03282e"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
        ⵠΔ[523] = Ut(1, [{
            f: qm,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#120202", "#991616", "#750a0a", "#120202"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
        ⵠΔ[529] = Ut(1, [{
            f: Zm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#347f93", "#54a4ba"]
        }, {
            f: ap,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
        }, {
            f: np,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#a9e4ed", "#86d4e0"]
        }, {
            f: Km,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[530] = ⵠΔ[529];
        ⵠΔ[553] = Ut(1, [{
            f: Hm,
            x: 45,
            y: 70,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[555] = ⵠΔ[553];
        ⵠΔ[541] = Ut(1, [{
            f: mp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[542] = ⵠΔ[541];
        ⵠΔ[779] = Ut(1, [{
            f: Hp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[780] = ⵠΔ[779];
        ⵠΔ[767] = Ut(1, [{
            f: Op,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#2a2938", "#242330", "#313041"]
        }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[768] = ⵠΔ[767];
        ⵠΔ[776] = Ut(1, [{
            f: Rp,
            x: 0,
            y: 3,
            a: 1,
            r: 0,
            c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
        }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[777] = ⵠΔ[776];
        ⵠΔ[771] = Ut(1, [{
            f: Rp,
            x: 0,
            y: 3,
            a: 1,
            r: 0,
            c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
        }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[772] = ⵠΔ[771];
        ⵠΔ[756] = Ut(1, [{
            f: Wp,
            x: 0,
            y: 10,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[758] = ⵠΔ[756];
        ⵠΔ[760] = Ut(1, [{
            f: Wp,
            x: 0,
            y: 10,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[762] = ⵠΔ[760];
        ⵠΔ[764] = Ut(1, [{
            f: Wp,
            x: 0,
            y: 10,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[770] = ⵠΔ[764];
        ⵠΔ[910] = Ut(1, [{
            f: Xc,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[912] = ⵠΔ[910];
        ⵠΔ[911] = ⵠΔ[910];
        ⵠΔ[732] = Ut(1, [{
            f: am,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
        }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[734] = ⵠΔ[732];
        ⵠΔ[563] = Ut(1, [{
            f: Xm,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
        }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[564] = ⵠΔ[563];
        ⵠΔ[751] = Ut(1, [{
            f: gp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[252] = Ut(1, [{
            f: $m,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[753] = Ut(1, [{
            f: gp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[253] = Ut(1, [{
            f: $m,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[176] = Ut(1, [{
            f: sp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[177] = Ut(1, [{
            f: sp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[175] = Ut(1, [{
            f: sp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[616] = Ut(1, [{
            f: fp,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[618] = ⵠΔ[616];
        ⵠΔ[699] = Ut(1, [{
            f: fp,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[700] = ⵠΔ[699];
        ⵠΔ[702] = Ut(1, [{
            f: fp,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[704] = ⵠΔ[702];
        ⵠΔ[705] = Ut(1, [{
            f: fp,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[706] = ⵠΔ[705];
        ⵠΔ[420] = Ut(1, [{
            f: Fm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[421] = ⵠΔ[420];
        ⵠΔ[826] = Ut(1, [{
            f: Wm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#252525", "#73583e", "#493425", "#7d6144"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[827] = ⵠΔ[826];
        ⵠΔ[429] = Ut(1, [{
            f: Lm,
            x: 0,
            y: -2,
            a: 1,
            r: 0,
            c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[430] = ⵠΔ[429];
        ⵠΔ[432] = Ut(1, [{
            f: Bm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#dbce71", "#b29c32", "#c4bc51"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[433] = ⵠΔ[432];
        ⵠΔ[435] = Ut(1, [{
            f: jm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[436] = ⵠΔ[435];
        ⵠΔ[438] = Ut(1, [{
            f: pp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[439] = ⵠΔ[438];
        ⵠΔ[441] = Ut(1, [{
            f: tp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#221e1b", "#ffffff", "#f6f0e7"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[442] = ⵠΔ[441];
        ⵠΔ[418] = Ut(1, [{
            f: ym,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#c27add", "#cd98e5"]
        }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[609] = Ut(1, [{
            f: Ap,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#D7C393", "#a48c6c"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[142] = Ut(1, [{
            f: Mp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#93CBCE", "#E9F6F6"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[140] = Ut(1, [{
            f: Ap,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#866432", "#6b4f25"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[180] = Ut(1, [{
            f: Vp,
            x: 3,
            y: 2,
            a: 1,
            r: 0,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[181] = Ut(1, [{
            f: Pp,
            x: 3,
            y: 2,
            a: 1,
            r: 0,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[784] = ⵠΔ[180];
        ⵠΔ[785] = ⵠΔ[181];
        ⵠΔ[789] = Ut(1, [{
            f: jp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
        }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[791] = ⵠΔ[789];
        ⵠΔ[613] = Ut(1, [{
            f: _p,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
        }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[612] = Ut(1, [{
            f: xp,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
        }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[715] = ⵠΔ[613];
        ⵠΔ[611] = ⵠΔ[612];
        ⵠΔ[634] = Ut(1, [{
            f: Eu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[635] = ⵠΔ[634];
        ⵠΔ[200] = Ut(1, [{
            f: Du,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[866] = Ut(1, [{
            f: Bu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[143] = Ut(1, [{
            f: Um,
            x: 0,
            y: -2,
            a: 1,
            r: 0,
            c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
        }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[690] = ⵠΔ[143];
        ⵠΔ[662] = Ut(1, [{
            f: fc,
            x: -3,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
        }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[664] = Ut(1, [{
            f: Ac,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1d051e", "#42261A", "#281818"]
        }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[666] = ⵠΔ[664];
        ⵠΔ[649] = Ut(1, [{
            f: Gu,
            x: -3,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
        }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[650] = ⵠΔ[649];
        ⵠΔ[674] = Ut(1, [{
            f: Kt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
        }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[646] = Ut(1, [{
            f: pc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ⵠΔ[647] = ⵠΔ[646];
        ⵠΔ[685] = Ut(1, [{
            f: Ip,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[684] = ⵠΔ[685];
        ⵠΔ[870] = Ut(1, [{
            f: Ad,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#e2d63b", "#ee71a9", "#42b672"]
        }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[871] = ⵠΔ[870];
        ⵠΔ[605] = Ut(1, [{
            f: Up,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
        }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[604] = ⵠΔ[605];
        ⵠΔ[842] = Ut(1, [{
            f: Bd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[843] = ⵠΔ[842];
        ⵠΔ[652] = Ut(1, [{
            f: Lp,
            x: -1,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
        ⵠΔ[654] = ⵠΔ[652];
        ⵠΔ[626] = Ut(1, [{
            f: Lp,
            x: -1,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
        }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[627] = ⵠΔ[626];
        ⵠΔ[629] = Ut(1, [{
            f: Dp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[196] = Ut(1, [{
            f: xu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[898] = ⵠΔ[196];
        ⵠΔ[659] = Ut(1, [{
            f: wc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
        }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[660] = ⵠΔ[659];
        ⵠΔ[145] = Ut(1, [{
            f: Lt,
            x: -2,
            y: -8,
            a: 1,
            r: 0,
            c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
        }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ⵠΔ[730] = ⵠΔ[145];
        ⵠΔ[566] = [];
        ⵠΔ[566][0] = ᐃⵠ.ⵠᐃⲆΔΔⵠᐃ;
        ⵠΔ[566][1] = ᐃⵠ.ᐃⲆⵠⵠᐃᐃΔ;
        ⵠΔ[566][2] = ᐃⵠ.ⲆᐃΔᐃᐃⵠᐃ;
        ⵠΔ[567] = ⵠΔ[566];
        ⵠΔ[568] = ⵠΔ[566];
        ⵠΔ[877] = [];
        ⵠΔ[877][0] = ᐃⵠ.ΔΔⵠΔⲆᐃᐃ;
        ⵠΔ[877][1] = ᐃⵠ.ⵠⵠⵠΔᐃⵠⵠ;
        ⵠΔ[877][2] = ᐃⵠ.ᐃⲆⲆⵠᐃⲆΔ;
        ⵠΔ[879] = ⵠΔ[877];
        ⵠΔ[878] = ⵠΔ[877];
        ⵠΔ[933] = ⵠΔ[932];
        ⵠΔ[934] = ⵠΔ[932];
        ⵠΔ[932] = [];
        ⵠΔ[932][0] = ᐃⵠ.ᐃᐃᐃΔⵠⵠⲆ;
        ⵠΔ[932][1] = ᐃⵠ.ΔⲆⲆΔⲆΔᐃ;
        ⵠΔ[932][2] = ᐃⵠ.ⵠⲆΔᐃⵠᐃⵠ;
        ⵠΔ[933] = ⵠΔ[932];
        ⵠΔ[934] = ⵠΔ[932];
        ⵠΔ[943] = [];
        ⵠΔ[943][0] = ᐃⵠ.ᐃᐃΔΔⲆᐃⵠ;
        ⵠΔ[943][1] = ᐃⵠ.ᐃⵠⵠⲆⵠᐃᐃ;
        ⵠΔ[943][2] = ᐃⵠ.ᐃⲆᐃⵠⲆΔⲆ;
        ⵠΔ[944] = ⵠΔ[943];
        ⵠΔ[945] = ⵠΔ[943];
        ⵠΔ[921] = [];
        ⵠΔ[921][0] = ᐃⵠ.ⲆⵠΔᐃᐃⲆⵠ;
        ⵠΔ[921][1] = ᐃⵠ.ⲆⵠᐃΔⲆⵠᐃ;
        ⵠΔ[921][2] = ᐃⵠ.ⵠⵠⲆⵠᐃΔⲆ;
        ⵠΔ[922] = ⵠΔ[921];
        ⵠΔ[923] = ⵠΔ[921];
        ⵠΔ[925] = [];
        ⵠΔ[925][0] = ᐃⵠ.ᐃⲆⵠᐃⵠⵠᐃ;
        ⵠΔ[925][1] = ᐃⵠ.ⲆΔΔⵠⲆⵠᐃ;
        ⵠΔ[925][2] = ᐃⵠ.ⲆⲆΔⵠΔᐃⲆ;
        ⵠΔ[926] = ⵠΔ[925];
        ⵠΔ[927] = ⵠΔ[925];
        ⵠΔ[929] = [];
        ⵠΔ[929][0] = ᐃⵠ.ᐃΔⵠΔᐃⵠⵠ;
        ⵠΔ[929][1] = ᐃⵠ.ᐃᐃΔᐃΔⲆⲆ;
        ⵠΔ[929][2] = ᐃⵠ.ΔⲆΔⵠᐃᐃᐃ;
        ⵠΔ[930] = ⵠΔ[929];
        ⵠΔ[931] = ⵠΔ[929];
        ⵠΔ[946] = [];
        ⵠΔ[946][0] = ᐃⵠ.ⵠΔⵠᐃⲆΔΔ;
        ⵠΔ[946][1] = ᐃⵠ.ᐃΔᐃⲆⲆⵠΔ;
        ⵠΔ[946][2] = ᐃⵠ.ΔᐃΔᐃⲆⵠⵠ;
        ⵠΔ[947] = ⵠΔ[946];
        ⵠΔ[948] = ⵠΔ[946];
        ⵠΔ[735] = [];
        ⵠΔ[735][0] = ᐃⵠ.ΔᐃⲆᐃᐃⵠΔ;
        ⵠΔ[735][1] = ᐃⵠ.ⵠᐃᐃᐃΔΔⵠ;
        ⵠΔ[735][2] = ᐃⵠ.ᐃⲆΔᐃⲆⲆⲆ;
        ⵠΔ[737] = ⵠΔ[735];
        ⵠΔ[736] = ⵠΔ[735];
        ⵠΔ[1164] = [];
        ⵠΔ[1164][0] = ᐃⵠ.ΔᐃΔⵠΔΔⵠ;
        ⵠΔ[1164][1] = ᐃⵠ.ⵠⵠΔⲆⲆⵠΔ;
        ⵠΔ[1164][2] = ᐃⵠ.ΔⲆⲆΔᐃΔᐃ;
        ⵠΔ[Wr.ΔⵠᐃᐃᐃᐃΔᐃΔ] = ⵠΔ[1164];
        ⵠΔ[1165] = ⵠΔ[1164];
        ⵠΔ[738] = [];
        ⵠΔ[738][0] = ᐃⵠ.ᐃᐃⲆⲆΔΔⲆ;
        ⵠΔ[738][1] = ᐃⵠ.ⵠⲆᐃᐃⵠᐃⵠ;
        ⵠΔ[738][2] = ᐃⵠ.ΔᐃᐃᐃⲆⲆⵠ;
        ⵠΔ[740] = ⵠΔ[738];
        ⵠΔ[739] = ⵠΔ[738];
        ⵠΔ[741] = [];
        ⵠΔ[741][0] = ᐃⵠ.ⲆΔᐃΔⲆᐃⵠ;
        ⵠΔ[741][1] = ᐃⵠ.ⵠΔⲆᐃⵠⲆᐃ;
        ⵠΔ[741][2] = ᐃⵠ.ⲆᐃΔΔⵠΔΔ;
        ⵠΔ[743] = ⵠΔ[741];
        ⵠΔ[742] = ⵠΔ[741];
        ⵠΔ[938] = [];
        ⵠΔ[938][0] = ᐃⵠ.ᐃᐃᐃⵠᐃᐃⵠ;
        ⵠΔ[938][1] = ᐃⵠ.ᐃⲆΔⲆΔΔⵠ;
        ⵠΔ[938][2] = ᐃⵠ.ᐃΔᐃΔⲆⲆᐃ;
        ⵠΔ[939] = ⵠΔ[938];
        ⵠΔ[936] = [];
        ⵠΔ[936][0] = ᐃⵠ.ⲆⲆΔⵠⵠΔⵠ;
        ⵠΔ[936][1] = ᐃⵠ.ᐃⲆᐃΔΔⵠΔ;
        ⵠΔ[936][2] = ᐃⵠ.ⵠⵠⲆΔⵠⵠᐃ;
        ⵠΔ[937] = ⵠΔ[936];
        ⵠΔ[617] = ⵠΔ[616];
        ⵠΔ[701] = ⵠΔ[699];
        ⵠΔ[703] = ⵠΔ[702];
        ⵠΔ[707] = ⵠΔ[705];
        ⵠΔ[348] = ⵠΔ[311];
        ⵠΔ[633] = ⵠΔ[631];
        ⵠΔ[645] = ⵠΔ[644];
        ⵠΔ[640] = ⵠΔ[639];
        ⵠΔ[273] = ⵠΔ[309];
        ⵠΔ[590] = ⵠΔ[252];
        ⵠΔ[752] = ⵠΔ[751];
        ⵠΔ[591] = ⵠΔ[253];
        ⵠΔ[754] = ⵠΔ[753];
        ⵠΔ[276] = ⵠΔ[328];
        ⵠΔ[863] = ⵠΔ[865];
        ⵠΔ[862] = ⵠΔ[860];
        ⵠΔ[831] = ⵠΔ[829];
        ⵠΔ[340] = ⵠΔ[261];
        ⵠΔ[596] = ⵠΔ[594];
        ⵠΔ[345] = ⵠΔ[292];
        ⵠΔ[346] = ⵠΔ[293];
        ⵠΔ[457] = ⵠΔ[455];
        ⵠΔ[274] = ⵠΔ[313];
        ⵠΔ[341] = ⵠΔ[312];
        ⵠΔ[272] = ⵠΔ[258];
        ⵠΔ[344] = ⵠΔ[296];
        ⵠΔ[459] = ⵠΔ[458];
        ⵠΔ[342] = ⵠΔ[315];
        ⵠΔ[270] = ⵠΔ[297];
        ⵠΔ[271] = ⵠΔ[298];
        ⵠΔ[343] = ⵠΔ[316];
        ⵠΔ[269] = ⵠΔ[277];
        ⵠΔ[358] = ⵠΔ[310];
        ⵠΔ[354] = ⵠΔ[329];
        ⵠΔ[356] = ⵠΔ[331];
        ⵠΔ[355] = ⵠΔ[330];
        ⵠΔ[494] = ⵠΔ[492];
        ⵠΔ[349] = ⵠΔ[317];
        ⵠΔ[350] = ⵠΔ[319];
        ⵠΔ[275] = ⵠΔ[300];
        ⵠΔ[351] = ⵠΔ[323];
        ⵠΔ[353] = ⵠΔ[305];
        ⵠΔ[514] = ⵠΔ[513];
        ⵠΔ[352] = ⵠΔ[303];
        ⵠΔ[520] = ⵠΔ[518];
        ⵠΔ[534] = ⵠΔ[532];
        ⵠΔ[531] = ⵠΔ[529];
        ⵠΔ[522] = ⵠΔ[521];
        ⵠΔ[524] = ⵠΔ[523];
        ⵠΔ[565] = ⵠΔ[563];
        ⵠΔ[554] = ⵠΔ[553];
        ⵠΔ[357] = ⵠΔ[335];
        ⵠΔ[359] = ⵠΔ[337];
        ⵠΔ[339] = Gq(function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 118;
            d.height = a * 129;
            e.save();
            e.translate(a * 90, a * 90);
            vd(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
            e.restore();
            ud(e, c[0], c[1], 4);
            e.save();
            vd(e, a * 30, a * 115, a * 60, a * 5, a * 15);
            e.restore();
            ud(e, c[2], c[3], 4);
            e.save();
            vd(e, a * 50, a * 117, a * 20, a * 10, a * 15);
            e.restore();
            ud(e, c[2]);
            return d;
        }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
        ⵠΔ[366] = Ut(0.5, [{
            f: im,
            x: 0,
            y: 2,
            a: 1,
            r: 0,
            c: ["#ffffff"]
        }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
        ⵠΔ[382] = ⵠΔ[361];
        ⵠΔ[383] = ⵠΔ[362];
        ⵠΔ[384] = ⵠΔ[364];
        ⵠΔ[497] = ⵠΔ[495];
        ⵠΔ[385] = ⵠΔ[392];
        ⵠΔ[774] = ⵠΔ[178];
        ⵠΔ[775] = ⵠΔ[179];
        ⵠΔ[386] = ⵠΔ[368];
        ⵠΔ[625] = ⵠΔ[624];
        ⵠΔ[394] = ⵠΔ[393];
        ⵠΔ[1163] = ⵠΔ[1162];
        ⵠΔ[506] = ⵠΔ[505];
        ⵠΔ[387] = ⵠΔ[369];
        ⵠΔ[504] = ⵠΔ[502];
        ⵠΔ[388] = ⵠΔ[372];
        ⵠΔ[389] = ⵠΔ[375];
        ⵠΔ[390] = ⵠΔ[378];
        ⵠΔ[501] = ⵠΔ[499];
        ⵠΔ[391] = ⵠΔ[381];
        ⵠΔ[403] = ⵠΔ[401];
        ⵠΔ[397] = ⵠΔ[395];
        ⵠΔ[400] = ⵠΔ[398];
        ⵠΔ[406] = ⵠΔ[404];
        ⵠΔ[474] = ⵠΔ[472];
        ⵠΔ[875] = ⵠΔ[874];
        ⵠΔ[552] = ⵠΔ[550];
        ⵠΔ[710] = ⵠΔ[709];
        ⵠΔ[479] = ⵠΔ[477];
        ⵠΔ[482] = ⵠΔ[480];
        ⵠΔ[485] = ⵠΔ[483];
        ⵠΔ[488] = ⵠΔ[486];
        ⵠΔ[410] = ⵠΔ[408];
        ⵠΔ[719] = ⵠΔ[717];
        ⵠΔ[422] = ⵠΔ[420];
        ⵠΔ[431] = ⵠΔ[429];
        ⵠΔ[434] = ⵠΔ[432];
        ⵠΔ[437] = ⵠΔ[435];
        ⵠΔ[543] = ⵠΔ[541];
        ⵠΔ[733] = ⵠΔ[732];
        ⵠΔ[440] = ⵠΔ[438];
        ⵠΔ[443] = ⵠΔ[441];
        ⵠΔ[446] = ⵠΔ[418];
        ⵠΔ[606] = ⵠΔ[605];
        ⵠΔ[844] = ⵠΔ[842];
        ⵠΔ[683] = ⵠΔ[685];
        ⵠΔ[610] = ⵠΔ[609];
        ⵠΔ[689] = ⵠΔ[143];
        ⵠΔ[686] = ⵠΔ[142];
        ⵠΔ[682] = ⵠΔ[140];
        ⵠΔ[615] = ⵠΔ[613];
        ⵠΔ[614] = ⵠΔ[612];
        ⵠΔ[628] = ⵠΔ[626];
        ⵠΔ[630] = ⵠΔ[629];
        ⵠΔ[636] = ⵠΔ[634];
        ⵠΔ[868] = ⵠΔ[200];
        ⵠΔ[867] = ⵠΔ[866];
        ⵠΔ[648] = ⵠΔ[646];
        ⵠΔ[651] = ⵠΔ[649];
        ⵠΔ[653] = ⵠΔ[652];
        ⵠΔ[661] = ⵠΔ[659];
        ⵠΔ[898] = ⵠΔ[196];
        ⵠΔ[663] = ⵠΔ[662];
        ⵠΔ[665] = ⵠΔ[664];
        ⵠΔ[675] = ⵠΔ[674];
        ⵠΔ[731] = ⵠΔ[145];
        ⵠΔ[757] = ⵠΔ[756];
        ⵠΔ[759] = ⵠΔ[176];
        ⵠΔ[761] = ⵠΔ[760];
        ⵠΔ[763] = ⵠΔ[177];
        ⵠΔ[765] = ⵠΔ[764];
        ⵠΔ[766] = ⵠΔ[175];
        ⵠΔ[769] = ⵠΔ[767];
        ⵠΔ[773] = ⵠΔ[771];
        ⵠΔ[778] = ⵠΔ[776];
        ⵠΔ[781] = ⵠΔ[779];
        ⵠΔ[787] = ⵠΔ[181];
        ⵠΔ[786] = ⵠΔ[180];
        ⵠΔ[790] = ⵠΔ[789];
        ⵠΔ[801] = ⵠΔ[800];
        ⵠΔ[810] = ⵠΔ[808];
        ⵠΔ[836] = ⵠΔ[834];
        ⵠΔ[847] = ⵠΔ[845];
        ⵠΔ[828] = ⵠΔ[826];
    }
    function jp(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 496;
        e.height = b * 520;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 10);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 19.000030517578125, b * 256.67613983154297);
        f.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
        f.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
        f.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
        f.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
        f.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
        f.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
        f.closePath();
        ud(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, b * -10);
        md(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
        ud(f, d[5], undefined, b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 10);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 65.00003051757812, b * 263.4034118652344);
        f.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
        f.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
        f.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
        f.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
        f.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
        f.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
        f.closePath();
        ud(f, d[0]);
        f.globalAlpha = 1;
        var g = function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 496;
            c.height = a * 520;
            d.globalAlpha = 1;
            d.translate(0, a * -10);
            md(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
            ud(d, b[1], b[2], a * 14);
            d.globalCompositeOperation = "destination-out";
            md(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
            ud(d, b[0], b[0], a * 14);
            d.globalCompositeOperation = "source-over";
            return c;
        }(b, d);
        f.drawImage(g, 0, 0);
        f.translate(0, b * -10);
        md(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
        ud(f, Xa, d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
        f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
        f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
        f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
        f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
        f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
        f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
        f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
        f.closePath();
        ud(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
        f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
        f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
        f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
        f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
        f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
        f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
        f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
        f.closePath();
        ud(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
        f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
        f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
        f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
        f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
        f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
        f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
        f.closePath();
        ud(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
        f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
        f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
        f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
        f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
        f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
        f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
        f.closePath();
        ud(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
        f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
        f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
        f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
        f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
        f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
        f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
        f.closePath();
        ud(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
        f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
        f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
        f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
        f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
        f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
        f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
        f.closePath();
        ud(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
        f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
        f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
        f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
        f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
        f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
        f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
        f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
        f.closePath();
        ud(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
        f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
        f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
        f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
        f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
        f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
        f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
        f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
        f.closePath();
        ud(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
        f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
        f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
        f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
        f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
        f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
        f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
        f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
        f.closePath();
        ud(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
        f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
        f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
        f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
        f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
        f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
        f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
        f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
        f.closePath();
        ud(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
        f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
        f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
        f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
        f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
        f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
        f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
        f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
        f.closePath();
        ud(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
        f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
        f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
        f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
        f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
        f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
        f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
        f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
        f.closePath();
        ud(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
        f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
        f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
        f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
        f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
        f.closePath();
        ud(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
        f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
        f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
        f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
        f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
        f.closePath();
        ud(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
        f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
        f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
        f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
        f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
        f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
        f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
        f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
        f.closePath();
        ud(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
        f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
        f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
        f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
        f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
        f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
        f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
        f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
        f.closePath();
        ud(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
        f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
        f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
        f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
        f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
        f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
        f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
        f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
        f.closePath();
        ud(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
        f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
        f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
        f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
        f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
        f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
        f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
        f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
        f.closePath();
        ud(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
        f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
        f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
        f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
        f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
        f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
        f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
        f.closePath();
        ud(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
        f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
        f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
        f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
        f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
        f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
        f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
        f.closePath();
        ud(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
        f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
        f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
        f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
        f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
        f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
        f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
        f.closePath();
        ud(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
        f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
        f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
        f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
        f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
        f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
        f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
        f.closePath();
        ud(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
        f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
        f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
        f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
        f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
        f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
        f.closePath();
        ud(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
        f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
        f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
        f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
        f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
        f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
        f.closePath();
        ud(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
        f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
        f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
        f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
        f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
        f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
        f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
        f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
        f.closePath();
        ud(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
        f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
        f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
        f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
        f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
        f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
        f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
        f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
        f.closePath();
        ud(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
        f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
        f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
        f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
        f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
        f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
        f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
        f.closePath();
        ud(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
        f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
        f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
        f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
        f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
        f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
        f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
        f.closePath();
        ud(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
        f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
        f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
        f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
        f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
        f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
        f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
        f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
        f.closePath();
        ud(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
        f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
        f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
        f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
        f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
        f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
        f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
        f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
        f.closePath();
        ud(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
        f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
        f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
        f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
        f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
        f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
        f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
        f.closePath();
        ud(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
        f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
        f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
        f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
        f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
        f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
        f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
        f.closePath();
        ud(f, d[4], d[2], b * 12);
        return e;
    }
    function Gp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 272;
        d.height = a * 264;
        e.translate(0, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.999969482421875, a * 84.517333984375);
        e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
        e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
        e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
        e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
        e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
        e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
        e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
        e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
        e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
        e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
        e.closePath();
        ud(e, c[0]);
        e.translate(0, a * -20);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.999969482421875, a * 84.517333984375);
        e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
        e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
        e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
        e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
        e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
        e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
        e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
        e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
        e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
        e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
        e.closePath();
        ud(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
        e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
        e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
        e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
        e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
        e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
        e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
        e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
        e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
        e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
        e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
        e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
        e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
        e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
        e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
        e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
        e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
        e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
        e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
        e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
        e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
        e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
        e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
        e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
        e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
        e.closePath();
        ud(e, c[4], c[5], a * 6);
        return d;
    }
    function Lp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 168;
        d.height = a * 100;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        vd(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        ud(e, c[0]);
        md(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        vd(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        ud(e, Qa, c[3], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        ud(e, er, c[3], a * 6);
        md(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
        ud(e, ih, c[3], a * 6);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        vd(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        ud(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        ud(e, c[1]);
        md(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
        ud(e, c[2], c[1], a * 4);
        md(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
        ud(e, c[3], c[1], a * 4);
        md(e, a * 78, a * 44, a * 20);
        ud(e, c[4]);
        return d;
    }
    function Wp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 372;
        d.height = a * 358;
        e.translate(a * 0, a * 10);
        e.globalAlpha = b ? 0.2 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
        e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
        e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
        e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
        e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
        e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
        e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
        e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
        e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
        e.closePath();
        ud(e, c[0], c[0], a * 10);
        e.translate(a * 0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
        e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
        e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
        e.closePath();
        ud(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
        e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
        e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
        e.closePath();
        ud(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
        e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
        e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
        e.closePath();
        ud(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
        e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
        e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
        e.closePath();
        ud(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58.000030517578125, a * 122.3125);
        e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
        e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
        e.closePath();
        ud(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 310.0000305175781, a * 127.3125);
        e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
        e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
        e.closePath();
        ud(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
        e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
        e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
        e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
        e.closePath();
        ud(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
        e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
        e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
        e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
        e.closePath();
        ud(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
        e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
        e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
        e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
        e.closePath();
        ud(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
        e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
        e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
        e.closePath();
        ud(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
        e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
        e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
        e.closePath();
        ud(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
        e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
        e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
        e.closePath();
        ud(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
        e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
        e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
        e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
        e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
        e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
        e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
        e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
        e.closePath();
        ud(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
        e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
        e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
        e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
        e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
        e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
        e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
        e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
        e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
        e.closePath();
        ud(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
        e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
        e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
        e.closePath();
        ud(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
        e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
        e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
        e.closePath();
        ud(e, c[1], c[1], a * 1);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
        e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
        e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
        e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
        e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
        e.closePath();
        ud(e, c[2], c[3], a * 10);
        md(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
        ud(e, c[4], c[5], a * 1);
        md(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
        ud(e, c[4], c[5], a * 1);
        md(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
        ud(e, c[4], c[5], a * 1);
        md(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
        ud(e, c[4], c[5], a * 1);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
        e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
        e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
        e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
        e.closePath();
        ud(e, c[4], c[5], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
        e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
        e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
        e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
        e.closePath();
        ud(e, c[6]);
        return d;
    }
    function Op(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 465;
        d.height = a * 310;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 192);
        e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
        e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
        e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
        e.closePath();
        ud(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 146, a * 239);
        e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
        e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
        e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
        e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
        e.closePath();
        ud(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 193);
        e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
        e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
        e.closePath();
        ud(e, gj, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 230, a * 57);
        e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
        e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
        e.closePath();
        ud(e, mo, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154, a * 212);
        e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
        e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
        e.closePath();
        ud(e, ih, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 239, a * 59);
        e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
        e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
        e.closePath();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216, a * 61);
        e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
        e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
        e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
        e.closePath();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 125);
        e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
        e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
        e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
        e.closePath();
        ud(e, c[2]);
        return d;
    }
    function Np() {
        new Date().getTime();
        Bp();
        Fp();
        ⵠΔ[540] = [];
        ⵠΔ[540][Wr.ⵠΔⵠ] = [];
        ⵠΔ[540][Wr.ᐃΔΔ] = [];
        for (var a = 0; Wr.ⵠⲆᐃⲆΔᐃⵠ > a; a++) {
            ⵠΔ[540][Wr.ⵠΔⵠ].push(Gq(Cc(1, 4 + a, "#59B8CE")));
            ⵠΔ[540][Wr.ᐃΔΔ].push(Gq(Cc(1, 4 + a, "#90DDD9")));
        }
        ⵠΔ[470] = [];
        ⵠΔ[470][Wr.ⵠΔⵠ] = [];
        ⵠΔ[470][Wr.ᐃΔΔ] = [];
        for (a = 0; a < Wr.ⵠᐃΔⲆⵠΔΔ; a++) {
            ⵠΔ[470][Wr.ⵠΔⵠ].push(Gq(Cc(1, 4 + a, "#fff")));
            ⵠΔ[470][Wr.ᐃΔΔ].push(Gq(Cc(1, 4 + a, "#fff")));
        }
        ⵠΔ[471] = [];
        ⵠΔ[471][Wr.ⵠΔⵠ] = [];
        ⵠΔ[471][Wr.ᐃΔΔ] = [];
        for (a = 0; Wr.ⵠᐃΔⲆⵠΔΔ > a; a++) {
            ⵠΔ[471][Wr.ⵠΔⵠ].push(Gq(Cc(1, 6 + a, "#DDCD8A")));
            ⵠΔ[471][Wr.ᐃΔΔ].push(Gq(Cc(1, 6 + a, "#155E57")));
        }
        ⵠΔ[942] = [];
        ⵠΔ[942][Wr.ⵠΔⵠ] = [];
        ⵠΔ[942][Wr.ᐃΔΔ] = [];
        for (a = 0; a < Wr.ⵠⲆΔΔⵠΔⲆ; a++) {
            ⵠΔ[942][Wr.ⵠΔⵠ].push(Gq(Cc(1, 4 + a, "#353326")));
            ⵠΔ[942][Wr.ᐃΔΔ].push(Gq(Cc(1, 4 + a, "#1D2526")));
        }
        ⵠΔ[201] = [];
        ⵠΔ[201][Wr.ⵠΔⵠ] = Gq(Pd(1.5, 0, ["#ee71a9"]));
        ⵠΔ[201][Wr.ᐃΔΔ] = Gq(Pd(1.5, 0, ["#ee71a9"]));
        ⵠΔ[872] = [ⵠΔ[201]];
        ⵠΔ[872][1] = [];
        ⵠΔ[872][2] = [];
        ⵠΔ[872][3] = [];
        ⵠΔ[872][4] = [];
        ⵠΔ[872][1][Wr.ⵠΔⵠ] = Gq(Pd(1.5, 0, ["#e2d63b"]));
        ⵠΔ[872][1][Wr.ᐃΔΔ] = Gq(Pd(1.5, 0, ["#e2d63b"]));
        ⵠΔ[872][2][Wr.ⵠΔⵠ] = Gq(Pd(1.5, 0, ["#309cbd"]));
        ⵠΔ[872][2][Wr.ᐃΔΔ] = Gq(Pd(1.5, 0, ["#309cbd"]));
        ⵠΔ[872][3][Wr.ⵠΔⵠ] = Gq(Pd(1.5, 0, ["#cd232d"]));
        ⵠΔ[872][3][Wr.ᐃΔΔ] = Gq(Pd(1.5, 0, ["#cd232d"]));
        ⵠΔ[872][4][Wr.ⵠΔⵠ] = Gq(Pd(1.5, 0, ["#42b672"]));
        ⵠΔ[872][4][Wr.ᐃΔΔ] = Gq(Pd(1.5, 0, ["#42b672"]));
        if (ⵠᐃⵠ.ᐃⵠΔⲆⵠⵠᐃ("cti", hc.location.href)) {
            document.getElementById("version").innerHTML += "[CTI]";
        } else {
            Gq = function (a) {
                a.loaded = 1;
                return a;
            };
        }
        ⵠΔ[797] = Gq(function () {
            var a = document.createElement("canvas");
            var b = a.getContext("2d");
            a.width = 460;
            a.height = 220;
            b.fillStyle = "#3a2a0d";
            b.fillRect(0, 0, a.width, a.height);
            b.lineWidth = 4;
            b.beginPath();
            b.strokeStyle = "#513810";
            for (var c = 20; c < 220; c += 20) {
                b.moveTo(0, c);
                b.lineTo(460, c);
                b.closePath();
                b.stroke();
            }
            return a;
        }());
        ⵠΔ[108] = [];
        ⵠΔ[108][Wr.ⵠΔⵠ] = [];
        ⵠΔ[108][Wr.ᐃΔΔ] = [];
        ⵠΔ[108][Wr.ⵠΔⵠ].push(Gq(ic(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        ⵠΔ[108][Wr.ⵠΔⵠ].push(Gq(ic(0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        ⵠΔ[108][Wr.ⵠΔⵠ].push(Gq(ic(0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        ⵠΔ[108][Wr.ᐃΔΔ].push(Gq(ic(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        ⵠΔ[108][Wr.ᐃΔΔ].push(Gq(ic(0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        ⵠΔ[108][Wr.ᐃΔΔ].push(Gq(ic(0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        ⵠΔ[111] = [];
        ⵠΔ[111][Wr.ⵠΔⵠ] = [];
        ⵠΔ[111][Wr.ᐃΔΔ] = [];
        ⵠΔ[111][Wr.ⵠΔⵠ].push(Gq(ec(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ⵠΔ[111][Wr.ⵠΔⵠ].push(Gq(ec(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ⵠΔ[111][Wr.ⵠΔⵠ].push(Gq(ec(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ⵠΔ[111][Wr.ᐃΔΔ].push(Gq(ec(1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
        ⵠΔ[111][Wr.ᐃΔΔ].push(Gq(ec(1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
        ⵠΔ[111][Wr.ᐃΔΔ].push(Gq(ec(1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
        ⵠΔ[112] = [];
        ⵠΔ[112][Wr.ⵠΔⵠ] = [];
        ⵠΔ[112][Wr.ᐃΔΔ] = [];
        ⵠΔ[112][Wr.ⵠΔⵠ].push(Gq(gc(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        ⵠΔ[112][Wr.ⵠΔⵠ].push(Gq(gc(0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        ⵠΔ[112][Wr.ⵠΔⵠ].push(Gq(gc(0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        ⵠΔ[112][Wr.ᐃΔΔ].push(Gq(gc(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        ⵠΔ[112][Wr.ᐃΔΔ].push(Gq(gc(0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        ⵠΔ[112][Wr.ᐃΔΔ].push(Gq(gc(0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        ⵠΔ[239] = [];
        ⵠΔ[239][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆⲆⵠⲆΔⵠⵠ;
        ⵠΔ[239][Wr.ᐃΔΔ] = ᐃⵠ.ΔΔⵠᐃᐃⲆΔ;
        ⵠΔ[286] = [];
        ⵠΔ[286][Wr.ⵠΔⵠ] = Gq(du(0.6, ["#0d1b1c"]));
        ⵠΔ[286][Wr.ᐃΔΔ] = Gq(du(0.6, ["#030d14"]));
        ⵠΔ[793] = [];
        ⵠΔ[793][Wr.ⵠΔⵠ] = Gq(mu(0.6, ["#2a2938", "#242330"]));
        ⵠΔ[793][Wr.ᐃΔΔ] = Gq(mu(0.6, ["#1b1e30", "#161921"]));
        ⵠΔ[820] = [];
        ⵠΔ[820][Wr.ⵠΔⵠ] = Gq(Ed(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
        ⵠΔ[820][Wr.ᐃΔΔ] = Gq(Ed(0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
        ⵠΔ[821] = [];
        ⵠΔ[821][Wr.ⵠΔⵠ] = Gq(Id(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
        ⵠΔ[821][Wr.ᐃΔΔ] = Gq(Id(0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
        ⵠΔ[822] = [];
        ⵠΔ[822][Wr.ⵠΔⵠ] = Gq(fu(0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
        ⵠΔ[822][Wr.ᐃΔΔ] = Gq(fu(0.4, ["#030d14", "#11635e", "#02373e"]));
        ⵠΔ[823] = Gq(Rd(0.6, ["#BB0000"]));
        ⵠΔ[824] = Gq(Rd(0.6, ["#DBE71C"]));
        ⵠΔ[825] = Gq(Rd(0.6, ["#00BB00"]));
        ⵠΔ[109] = [];
        ⵠΔ[109][Wr.ⵠΔⵠ] = [];
        ⵠΔ[109][Wr.ᐃΔΔ] = [];
        ⵠΔ[109][Wr.ⵠΔⵠ].push(nu(1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], false, 0));
        ⵠΔ[109][Wr.ⵠΔⵠ].push(nu(1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], Ij, 0));
        ⵠΔ[109][Wr.ⵠΔⵠ].push(nu(0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], ds, 0));
        ⵠΔ[109][Wr.ⵠΔⵠ].push(nu(0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], true, 0));
        ⵠΔ[109][Wr.ⵠΔⵠ].push(nu(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], false, 0));
        ⵠΔ[109][Wr.ⵠΔⵠ].push(nu(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], Er, 0));
        ⵠΔ[109][Wr.ᐃΔΔ].push(nu(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], false, 0));
        ⵠΔ[109][Wr.ᐃΔΔ].push(nu(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], ur, 0));
        ⵠΔ[109][Wr.ᐃΔΔ].push(nu(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], Dj, 0));
        ⵠΔ[109][Wr.ᐃΔΔ].push(nu(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], true, 0));
        ⵠΔ[109][Wr.ᐃΔΔ].push(nu(0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], false, 0));
        ⵠΔ[109][Wr.ᐃΔΔ].push(nu(0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 0));
        ⵠΔ[307] = [];
        ⵠΔ[307][Wr.ⵠΔⵠ] = [];
        ⵠΔ[307][Wr.ᐃΔΔ] = [];
        ⵠΔ[307][Wr.ⵠΔⵠ].push(Gq(hu(gu(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], false), ⵠΔ[109][Wr.ⵠΔⵠ][0])));
        ⵠΔ[307][Wr.ⵠΔⵠ].push(Gq(hu(gu(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], true), ⵠΔ[109][Wr.ⵠΔⵠ][1])));
        ⵠΔ[307][Wr.ᐃΔΔ].push(Gq(hu(gu(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], Ml), ⵠΔ[109][Wr.ᐃΔΔ][0])));
        ⵠΔ[307][Wr.ᐃΔΔ].push(Gq(hu(gu(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], Kk), ⵠΔ[109][Wr.ᐃΔΔ][1])));
        ⵠΔ[307][Wr.ⵠΔⵠ].push(Gq(hu(gu(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], ds), ⵠΔ[109][Wr.ⵠΔⵠ][2])));
        ⵠΔ[307][Wr.ⵠΔⵠ].push(Gq(hu(gu(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], true), ⵠΔ[109][Wr.ⵠΔⵠ][2])));
        ⵠΔ[307][Wr.ᐃΔΔ].push(Gq(hu(gu(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], false), ⵠΔ[109][Wr.ᐃΔΔ][2])));
        ⵠΔ[307][Wr.ᐃΔΔ].push(Gq(hu(gu(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], Bh), ⵠΔ[109][Wr.ᐃΔΔ][3])));
        ⵠΔ[109][Wr.ⵠΔⵠ][5] = Gq(ⵠΔ[109][Wr.ⵠΔⵠ][5]);
        ⵠΔ[109][Wr.ⵠΔⵠ][4] = Gq(ⵠΔ[109][Wr.ⵠΔⵠ][4]);
        ⵠΔ[109][Wr.ⵠΔⵠ][3] = Gq(ⵠΔ[109][Wr.ⵠΔⵠ][3]);
        ⵠΔ[109][Wr.ⵠΔⵠ][2] = Gq(ⵠΔ[109][Wr.ⵠΔⵠ][2]);
        ⵠΔ[109][Wr.ⵠΔⵠ][1] = Gq(ⵠΔ[109][Wr.ⵠΔⵠ][1]);
        ⵠΔ[109][Wr.ⵠΔⵠ][0] = Gq(ⵠΔ[109][Wr.ⵠΔⵠ][0]);
        ⵠΔ[109][Wr.ᐃΔΔ][5] = Gq(ⵠΔ[109][Wr.ᐃΔΔ][5]);
        ⵠΔ[109][Wr.ᐃΔΔ][4] = Gq(ⵠΔ[109][Wr.ᐃΔΔ][4]);
        ⵠΔ[109][Wr.ᐃΔΔ][3] = Gq(ⵠΔ[109][Wr.ᐃΔΔ][3]);
        ⵠΔ[109][Wr.ᐃΔΔ][2] = Gq(ⵠΔ[109][Wr.ᐃΔΔ][2]);
        ⵠΔ[109][Wr.ᐃΔΔ][1] = Gq(ⵠΔ[109][Wr.ᐃΔΔ][1]);
        ⵠΔ[109][Wr.ᐃΔΔ][0] = Gq(ⵠΔ[109][Wr.ᐃΔΔ][0]);
        ⵠΔ[8] = [];
        ⵠΔ[8][Wr.ⵠΔⵠ] = Gq(Cd(4, iu(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
        ⵠΔ[8][Wr.ᐃΔΔ] = Gq(Cd(4, iu(0.75, Un, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
        ⵠΔ[1] = [];
        ⵠΔ[1][Wr.ⵠΔⵠ] = Gq(Cd(4, iu(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
        ⵠΔ[1][Wr.ᐃΔΔ] = Gq(Cd(4, iu(0.75, Wa, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
        ⵠΔ[3] = [];
        ⵠΔ[3][Wr.ⵠΔⵠ] = Gq(Cd(4, iu(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
        ⵠΔ[3][Wr.ᐃΔΔ] = Gq(Cd(4, iu(0.75, true, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
        ⵠΔ[4] = [];
        ⵠΔ[4][Wr.ⵠΔⵠ] = Gq(Cd(4, iu(0.75, Ol, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
        ⵠΔ[4][Wr.ᐃΔΔ] = Gq(Cd(4, iu(0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
        ⵠΔ[31] = [];
        ⵠΔ[31][Wr.ⵠΔⵠ] = Gq(Cd(4, iu(0.75, Zk, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
        ⵠΔ[31][Wr.ᐃΔΔ] = Gq(Cd(4, iu(0.75, He, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
        ⵠΔ[9] = [];
        ⵠΔ[9][Wr.ⵠΔⵠ] = Gq(Cd(3, ku(0.17, true, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
        ⵠΔ[9][Wr.ᐃΔΔ] = Gq(Cd(3, ku(0.17, ij, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
        ⵠΔ[199] = [];
        ⵠΔ[199][Wr.ⵠΔⵠ] = Gq(Cd(3, Cu(0.32, Bh, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
        ⵠΔ[199][Wr.ᐃΔΔ] = Gq(Cd(3, Cu(0.42, p, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
        ⵠΔ[57] = [];
        ⵠΔ[57][Wr.ⵠΔⵠ] = Gq(Cd(3, ou(0.4, He, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
        ⵠΔ[57][Wr.ᐃΔΔ] = Gq(Cd(3, ou(0.4, ij, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
        ⵠΔ[0] = [];
        ⵠΔ[0][Wr.ⵠΔⵠ] = Gq(Cd(3, ju(0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
        ⵠΔ[0][Wr.ᐃΔΔ] = Gq(Cd(3, ju(0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
        ⵠΔ[5] = [];
        ⵠΔ[5][Wr.ⵠΔⵠ] = Gq(Cd(3, wu(0.4, true, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
        ⵠΔ[5][Wr.ᐃΔΔ] = Gq(Cd(3, wu(0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
        ⵠΔ[6] = [];
        ⵠΔ[6][Wr.ⵠΔⵠ] = Gq(Cd(3, vu(0.4, Zk, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
        ⵠΔ[6][Wr.ᐃΔΔ] = Gq(Cd(3, vu(0.4, Zk, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
        ⵠΔ[30] = [];
        ⵠΔ[30][Wr.ⵠΔⵠ] = Gq(Cd(3, Au(0.4, Ol, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
        ⵠΔ[30][Wr.ᐃΔΔ] = Gq(Cd(3, Au(0.4, Zk, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
        ⵠΔ[285] = [];
        ⵠΔ[285][Wr.ⵠΔⵠ] = [];
        ⵠΔ[285][Wr.ᐃΔΔ] = [];
        ⵠΔ[285][Wr.ⵠΔⵠ].push(Gq(vc(0.9, 0, ["#0d4f35"], 0)));
        ⵠΔ[285][Wr.ⵠΔⵠ].push(Gq(vc(0.9, 0, ["#0d4f35"], 1)));
        ⵠΔ[285][Wr.ⵠΔⵠ].push(Gq(vc(0.9, 0, ["#0d4f35"], 2)));
        ⵠΔ[285][Wr.ᐃΔΔ].push(Gq(vc(0.9, 0, ["#053339"], 0)));
        ⵠΔ[285][Wr.ᐃΔΔ].push(Gq(vc(0.9, 0, ["#053339"], 1)));
        ⵠΔ[285][Wr.ᐃΔΔ].push(Gq(vc(0.9, 0, ["#053339"], 2)));
        ⵠΔ[285][Wr.ⵠΔⵠ].push(Gq(bc(0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
        ⵠΔ[285][Wr.ⵠΔⵠ].push(Gq(bc(0.8, ["#292002", "#ba930e", "#6d5704"])));
        ⵠΔ[285][Wr.ᐃΔΔ].push(Gq(bc(0.9, ["#052919", "#0a4738", "#06321f"])));
        ⵠΔ[285][Wr.ᐃΔΔ].push(Gq(bc(0.8, ["#052918", "#08491c", "#063417"])));
        ⵠΔ[183] = [];
        ⵠΔ[183][Wr.ⵠΔⵠ] = Gq(Cd(Math.PI / 2, qc(0.25, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
        ⵠΔ[183][Wr.ᐃΔΔ] = Gq(Cd(Math.PI / 2, qc(0.25, Ll, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
        ⵠΔ[803] = [];
        ⵠΔ[803].push(Gq($c(0.25, ["#44301b", "#57442a", "#523e26"], 0)));
        ⵠΔ[803].push(Gq($c(0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
        ⵠΔ[803].push(Gq($c(0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
        ⵠΔ[802] = [];
        ⵠΔ[802][Wr.ⵠΔⵠ] = [];
        ⵠΔ[802][Wr.ᐃΔΔ] = [];
        ⵠΔ[802][Wr.ⵠΔⵠ].push(Gq(Cd(Math.PI / 2, Vc(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
        ⵠΔ[802][Wr.ᐃΔΔ].push(Gq(Cd(Math.PI / 2, Vc(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
        ⵠΔ[802][Wr.ⵠΔⵠ].push(Gq(Cd(Math.PI / 2, Vc(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
        ⵠΔ[802][Wr.ᐃΔΔ].push(Gq(Cd(Math.PI / 2, Vc(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
        ⵠΔ[802][Wr.ⵠΔⵠ].push(Gq(Cd(Math.PI / 2, Vc(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
        ⵠΔ[802][Wr.ᐃΔΔ].push(Gq(Cd(Math.PI / 2, Vc(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
        ⵠΔ[802][Wr.ⵠΔⵠ].push(Gq(Cd(Math.PI / 2, Vc(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
        ⵠΔ[802][Wr.ᐃΔΔ].push(Gq(Cd(Math.PI / 2, Vc(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
        ⵠΔ[110] = [];
        ⵠΔ[110][Wr.ⵠΔⵠ] = [Gq(cc(1.2, true, ["#0e3022", "#0b8052", "#077b49"]))];
        ⵠΔ[110][Wr.ᐃΔΔ] = [Gq(cc(1.2, true, ["#030d14", "#084442", "#0a4049"]))];
        ⵠΔ[623] = [];
        ⵠΔ[623][Wr.ⵠΔⵠ] = Gq(cc(0.8, true, ["#0e3022", "#68622D", "#665329"]));
        ⵠΔ[623][Wr.ᐃΔΔ] = Gq(cc(0.8, Wa, ["#030d14", "#0F3A24", "#083326"]));
        ⵠΔ[189] = [];
        ⵠΔ[189][Wr.ⵠΔⵠ] = Gq(Gp(0.5, Ij, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
        ⵠΔ[189][Wr.ᐃΔΔ] = Gq(Gp(0.5, true, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
        ⵠΔ[192] = [];
        ⵠΔ[192][Wr.ⵠΔⵠ] = Gq(wd(0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
        ⵠΔ[192][Wr.ᐃΔΔ] = Gq(wd(0.5, Wa, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
        ⵠΔ[194] = [];
        ⵠΔ[194][Wr.ⵠΔⵠ] = Gq(kp(0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
        ⵠΔ[194][Wr.ᐃΔΔ] = Gq(kp(0.5, Zk, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
        ⵠΔ[287] = [];
        ⵠΔ[287][Wr.ⵠΔⵠ] = Gq(cc(0.8, true, ["#1b170c", "#0b8052", "#077b49"]));
        ⵠΔ[287][Wr.ᐃΔΔ] = Gq(cc(0.8, true, ["#030d14", "#084442", "#0a4049"]));
        ⵠΔ[813] = [];
        ⵠΔ[813][Wr.ⵠΔⵠ] = Gq(Gp(0.5, true, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
        ⵠΔ[813][Wr.ᐃΔΔ] = Gq(Gp(0.5, true, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
        ⵠΔ[839] = [];
        ⵠΔ[839][Wr.ⵠΔⵠ] = Gq(wd(0.5, ai, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
        ⵠΔ[839][Wr.ᐃΔΔ] = Gq(wd(0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
        ⵠΔ[869] = [];
        ⵠΔ[869][Wr.ⵠΔⵠ] = Gq(kp(0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
        ⵠΔ[869][Wr.ᐃΔΔ] = Gq(kp(0.5, Ch, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
        ⵠΔ[854] = [];
        ⵠΔ[854][Wr.ⵠΔⵠ] = Gq(yp(0.45, true, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
        ⵠΔ[854][Wr.ᐃΔΔ] = Gq(yp(0.45, Ll, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
        ⵠΔ[859] = Gq(yp(0.65, vq, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
        ⵠΔ[294] = [];
        ⵠΔ[294][Wr.ⵠΔⵠ] = Gq(mc(1.4, 0, ["#ac222a", "#e6636a"]));
        ⵠΔ[294][Wr.ᐃΔΔ] = Gq(mc(1.4, 0, ["#46195e", "#744188"]));
        ⵠΔ[288] = [];
        ⵠΔ[288][Wr.ⵠΔⵠ] = Gq(Yt(0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
        ⵠΔ[288][Wr.ᐃΔΔ] = Gq(Yt(0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
        ⵠΔ[118] = [];
        ⵠΔ[118][Wr.ⵠΔⵠ] = Gq(Wt(0.9, 0, ["#4d2d14", "#432516"]));
        ⵠΔ[118][Wr.ᐃΔΔ] = Gq(Wt(0.9, 0, ["#282404", "#0a0a01"]));
        ⵠΔ[113] = [];
        ⵠΔ[113][Wr.ⵠΔⵠ] = Gq(Xt(0.9, 0, ["#4d2d14", "#432516"]));
        ⵠΔ[113][Wr.ᐃΔΔ] = Gq(Xt(0.9, 0, ["#282404", "#0a0a01"]));
        ⵠΔ[289] = [];
        ⵠΔ[289][Wr.ⵠΔⵠ] = Gq($t(0.9, 0, ["#efd435"]));
        ⵠΔ[289][Wr.ᐃΔΔ] = Gq($t(0.9, 0, ["#fffabb"]));
        ⵠΔ[282] = [];
        ⵠΔ[282][Wr.ⵠΔⵠ] = Gq(Vt(0.9, 0, ["#efd435"]));
        ⵠΔ[282][Wr.ᐃΔΔ] = Gq(Vt(0.9, 0, ["#fffabb"]));
        ⵠΔ[816] = [];
        ⵠΔ[816][Wr.ⵠΔⵠ] = Gq($t(0.9, 0, ["#efd435"]));
        ⵠΔ[816][Wr.ᐃΔΔ] = Gq($t(0.9, 0, ["rgba(255, 84, 0, 1)"]));
        ⵠΔ[817] = [];
        ⵠΔ[817][Wr.ⵠΔⵠ] = Gq(Vt(0.9, 0, ["#efd435"]));
        ⵠΔ[817][Wr.ᐃΔΔ] = Gq(Vt(0.9, 0, ["#ff5704"]));
        ⵠΔ[324] = Gq(Ld(1, "#ffffff"));
        ⵠΔ[301] = Gq(Ld(1.5, "#ffffff"));
        ⵠΔ[306] = Gq(lc(1, "Your score:", 15, "#FFF"));
        ⵠΔ[655] = Gq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 243;
            c.height = a * 172;
            md(d, a * 119.5, a * 140.125, a * 19);
            ud(d, undefined, b[1], a * 5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 36.5, a * 20.125);
            d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
            d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
            d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
            d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
            d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
            d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
            d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
            d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
            d.closePath();
            ud(d, b[0], b[1], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 15.5, a * 138.625);
            d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
            d.closePath();
            ud(d, undefined, b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 13.5, a * 131.625);
            d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
            d.closePath();
            ud(d, undefined, b[3], a * 10);
            md(d, a * 119.5, a * 140.125, a * 14.866068747318506);
            ud(d, b[4], b[5], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 106.5, a * 146.625);
            d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
            d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
            d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
            d.closePath();
            ud(d, b[6], b[7], a * 2);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 105.5, a * 146.625);
            d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
            ud(d, kr, b[8], a * 5);
            d.save();
            d.translate(a * 75.5, a * 80.125);
            vd(d, a * -39, a * -40, a * 78, a * 78, a * 10);
            d.restore();
            ud(d, b[9]);
            d.save();
            d.translate(a * 167, a * 80.125);
            vd(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
            d.restore();
            ud(d, b[9]);
            return c;
        }(0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
        ⵠΔ[656] = ᐃⵠ.ΔⵠⲆⲆᐃᐃᐃ;
        ⵠΔ[135] = [];
        ⵠΔ[135][Wr.ⵠΔⵠ] = Gq(Gt(1.5, ph, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        ⵠΔ[135][Wr.ᐃΔΔ] = Gq(Gt(1.5, Xo, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        ⵠΔ[641] = [];
        ⵠΔ[641][Wr.ⵠΔⵠ] = Gq(Nt(2, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        ⵠΔ[641][Wr.ᐃΔΔ] = Gq(Nt(2, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        ⵠΔ[642] = [];
        ⵠΔ[642][Wr.ⵠΔⵠ] = Gq(It(1.5, Ij, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        ⵠΔ[642][Wr.ᐃΔΔ] = Gq(It(1.5, ij, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        ⵠΔ[134] = [];
        ⵠΔ[134][Wr.ⵠΔⵠ] = Gq(Jt(2.2, 0, ["#A89F67", "#9E8456"]));
        ⵠΔ[134][Wr.ᐃΔΔ] = Gq(Jt(2.2, 0, ["#0B4049", "#08383D"]));
        ⵠΔ[638] = [];
        ⵠΔ[638][Wr.ⵠΔⵠ] = Gq(Jt(2.2, 0, ["#68622D", "#665329"]));
        ⵠΔ[638][Wr.ᐃΔΔ] = Gq(Jt(2.2, 0, ["#0F3A24", "#083326"]));
        ⵠΔ[321] = [];
        ⵠΔ[321][Wr.ⵠΔⵠ] = Gq(zu(0.8, 0, ["#A89F67", "#9E8456"]));
        ⵠΔ[321][Wr.ᐃΔΔ] = Gq(zu(0.8, 0, ["#15514F", "#0F3F3D"]));
        ⵠΔ[811] = [];
        ⵠΔ[811][Wr.ⵠΔⵠ] = Gq(zu(0.8, 0, ["#c67933", "#b17238"]));
        ⵠΔ[811][Wr.ᐃΔΔ] = Gq(zu(0.8, 0, ["#043c37", "#032b23"]));
        ⵠΔ[984] = [];
        ⵠΔ[984][Wr.ⵠΔⵠ] = Gq(zu(0.8, 0, ["#3a8214", "#4a9c1e"]));
        ⵠΔ[984][Wr.ᐃΔΔ] = Gq(zu(0.8, 0, ["#032d29", "#044640"]));
        ⵠΔ[837] = [];
        ⵠΔ[837][Wr.ⵠΔⵠ] = Gq(zu(0.8, 0, ["#e8e8e8", "#bbbbbb"]));
        ⵠΔ[837][Wr.ᐃΔΔ] = Gq(zu(0.8, 0, ["#1c6161", "#07413f"]));
        ⵠΔ[848] = [];
        ⵠΔ[848][Wr.ⵠΔⵠ] = Gq(zu(0.8, 0, ["#328a56", "#449573"]));
        ⵠΔ[848][Wr.ᐃΔΔ] = Gq(zu(0.8, 0, ["#043c37", "#032b23"]));
        ⵠΔ[952] = [];
        ⵠΔ[952][Wr.ⵠΔⵠ] = Gq(zu(0.8, 0, ["#c98e2f", "#a36b11"]));
        ⵠΔ[952][Wr.ᐃΔΔ] = Gq(zu(0.8, 0, ["#043c37", "#032b23"]));
        ⵠΔ[962] = [];
        ⵠΔ[962][Wr.ⵠΔⵠ] = Gq(zu(0.8, 0, ["#b22419", "#99110e"]));
        ⵠΔ[962][Wr.ᐃΔΔ] = Gq(zu(0.8, 0, ["#04323c", "#03222b"]));
        ⵠΔ[969] = [];
        ⵠΔ[969][Wr.ⵠΔⵠ] = Gq(zu(0.8, 0, ["#13a56d", "#098a58"]));
        ⵠΔ[969][Wr.ᐃΔΔ] = Gq(zu(0.8, 0, ["#043c37", "#032b23"]));
        ⵠΔ[657] = Ut(1, [{
            f: Jt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ⵠΔ[723] = Ut(1, [{
            f: Xt,
            x: 0,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ⵠΔ[724] = Ut(1, [{
            f: Um,
            x: 0,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
        }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ⵠΔ[334] = Ut(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ⵠΔ[115] = [];
        ⵠΔ[115][Wr.ⵠΔⵠ] = Gq(Fd(0.9, 0, ["#7d613e", "#9e7e5a"]));
        ⵠΔ[115][Wr.ᐃΔΔ] = Gq(Fd(0.9, 0, ["#084442", "#125e5a"]));
        ⵠΔ[132] = [];
        ⵠΔ[132][Wr.ⵠΔⵠ] = Gq(Fd(0.9, 0, ["#9E8456", "#A89F67"]));
        ⵠΔ[132][Wr.ᐃΔΔ] = Gq(Fd(0.9, 0, ["#1b6f6a", "#0d4e4c"]));
        ⵠΔ[668] = [];
        ⵠΔ[668][Wr.ⵠΔⵠ] = Gq(Fd(0.9, 0, ["#665329", "#68622D"]));
        ⵠΔ[668][Wr.ᐃΔΔ] = Gq(Fd(0.9, 0, ["#083326", "#0F3A24"]));
        ⵠΔ[188] = [];
        ⵠΔ[188][Wr.ⵠΔⵠ] = Gq(Fd(0.9, 0, ["#c67933", "#ec952d"]));
        ⵠΔ[188][Wr.ᐃΔΔ] = Gq(Fd(0.9, 0, ["#0e6553", "#094437"]));
        ⵠΔ[210] = [];
        ⵠΔ[210][Wr.ⵠΔⵠ] = Gq(Fd(0.9, 0, ["#375809", "#4b770e"]));
        ⵠΔ[210][Wr.ᐃΔΔ] = Gq(Fd(0.9, 0, ["#09542d", "#0d5d2f"]));
        ⵠΔ[985] = [];
        ⵠΔ[985][Wr.ⵠΔⵠ] = Gq(Fd(0.9, 0, ["#585809", "#72770e"]));
        ⵠΔ[985][Wr.ᐃΔΔ] = Gq(Fd(0.9, 0, ["#295209", "#305d0d"]));
        ⵠΔ[191] = [];
        ⵠΔ[191][Wr.ⵠΔⵠ] = Gq(Fd(0.9, 0, ["#b9b094", "#e2d2c0"]));
        ⵠΔ[191][Wr.ᐃΔΔ] = Gq(Fd(0.9, 0, ["#126366", "#0d484b"]));
        ⵠΔ[193] = [];
        ⵠΔ[193][Wr.ⵠΔⵠ] = Gq(Fd(0.9, 0, ["#3f8662", "#30915d"]));
        ⵠΔ[193][Wr.ᐃΔΔ] = Gq(Fd(0.9, 0, ["#0e6553", "#094437"]));
        ⵠΔ[812] = [];
        ⵠΔ[812][Wr.ⵠΔⵠ] = Gq(Fd(0.9, 0, ["#c79153", "#dfa868"]));
        ⵠΔ[812][Wr.ᐃΔΔ] = Gq(Fd(0.9, 0, ["#073927", "#075040"]));
        ⵠΔ[838] = [];
        ⵠΔ[838][Wr.ⵠΔⵠ] = Gq(Fd(0.9, 0, ["#768b5b", "#819984"]));
        ⵠΔ[838][Wr.ᐃΔΔ] = Gq(Fd(0.9, 0, ["#0c4540", "#0e5153"]));
        ⵠΔ[849] = [];
        ⵠΔ[849][Wr.ⵠΔⵠ] = Gq(Fd(0.9, 0, ["#567465", "#627c6e"]));
        ⵠΔ[849][Wr.ᐃΔΔ] = Gq(Fd(0.9, 0, ["#073927", "#075040"]));
        ⵠΔ[204] = [];
        ⵠΔ[204][Wr.ⵠΔⵠ] = Gq(Fd(0.9, 0, ["#996b3a", "#bf956b"]));
        ⵠΔ[204][Wr.ᐃΔΔ] = Gq(Fd(0.9, 0, ["#0e6553", "#094437"]));
        ⵠΔ[953] = [];
        ⵠΔ[953][Wr.ⵠΔⵠ] = Gq(Fd(0.9, 0, ["#7a634a", "#a68f77"]));
        ⵠΔ[953][Wr.ᐃΔΔ] = Gq(Fd(0.9, 0, ["#1e4d43", "#113c32"]));
        ⵠΔ[206] = [];
        ⵠΔ[206][Wr.ⵠΔⵠ] = Gq(Fd(0.9, 0, ["#99403c", "#bc796c"]));
        ⵠΔ[206][Wr.ᐃΔΔ] = Gq(Fd(0.9, 0, ["#1e434d", "#11303c"]));
        ⵠΔ[963] = [];
        ⵠΔ[963][Wr.ⵠΔⵠ] = Gq(Fd(0.9, 0, ["#88504e", "#b3857c"]));
        ⵠΔ[963][Wr.ᐃΔΔ] = Gq(Fd(0.9, 0, ["#253b41", "#162930"]));
        ⵠΔ[208] = [];
        ⵠΔ[208][Wr.ⵠΔⵠ] = Gq(Fd(0.9, 0, ["#0f8870", "#23af93"]));
        ⵠΔ[208][Wr.ᐃΔΔ] = Gq(Fd(0.9, 0, ["#032829", "#083233"]));
        ⵠΔ[970] = [];
        ⵠΔ[970][Wr.ⵠΔⵠ] = Gq(Fd(0.9, 0, ["#618a20", "#84a74e"]));
        ⵠΔ[970][Wr.ᐃΔΔ] = Gq(Fd(0.9, 0, ["#1f4632", "#335d47"]));
        ⵠΔ[114] = [];
        ⵠΔ[114][Wr.ⵠΔⵠ] = Gq(_d(1.2, Bh, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
        ⵠΔ[114][Wr.ᐃΔΔ] = Gq(_d(1.2, Dq, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
        ⵠΔ[162] = [];
        ⵠΔ[162][Wr.ⵠΔⵠ] = Gq(Bc(1, pl, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
        ⵠΔ[162][Wr.ᐃΔΔ] = Gq(Bc(1, ai, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        ⵠΔ[165] = [];
        ⵠΔ[165][Wr.ⵠΔⵠ] = Gq(Ec(1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        ⵠΔ[165][Wr.ᐃΔΔ] = Gq(Ec(1, ph, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        ⵠΔ[122] = [];
        ⵠΔ[122][Wr.ⵠΔⵠ] = Gq(Ic(1, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        ⵠΔ[122][Wr.ᐃΔΔ] = Gq(Ic(1, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        ⵠΔ[163] = [];
        ⵠΔ[163][Wr.ⵠΔⵠ] = Gq(Ic(1, pl, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
        ⵠΔ[163][Wr.ᐃΔΔ] = Gq(Ic(1, ai, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
        ⵠΔ[164] = [];
        ⵠΔ[164][Wr.ⵠΔⵠ] = Gq(Fc(1, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
        ⵠΔ[164][Wr.ᐃΔΔ] = Gq(Fc(1, Ij, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
        ⵠΔ[160] = [];
        ⵠΔ[160][Wr.ⵠΔⵠ] = Gq(mm(0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
        ⵠΔ[160][Wr.ᐃΔΔ] = Gq(mm(0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        ⵠΔ[169] = [];
        ⵠΔ[169][Wr.ⵠΔⵠ] = Gq(nm(0.8, ai, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
        ⵠΔ[169][Wr.ᐃΔΔ] = Gq(nm(0.8, Zk, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
        ⵠΔ[170] = [];
        ⵠΔ[170][Wr.ⵠΔⵠ] = Gq(Zc(0.8, true, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        ⵠΔ[170][Wr.ᐃΔΔ] = Gq(Zc(0.8, pl, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        ⵠΔ[168] = [];
        ⵠΔ[168][Wr.ⵠΔⵠ] = Gq(Nc(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
        ⵠΔ[168][Wr.ᐃΔΔ] = Gq(Nc(0.8, vq, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
        ⵠΔ[123] = [];
        ⵠΔ[123][Wr.ⵠΔⵠ] = Gq(Nc(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        ⵠΔ[123][Wr.ᐃΔΔ] = Gq(Nc(0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        ⵠΔ[166] = [];
        ⵠΔ[166][Wr.ⵠΔⵠ] = Gq(Rc(1.5, Dq, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
        ⵠΔ[166][Wr.ᐃΔΔ] = Gq(Rc(1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        ⵠΔ[336] = [];
        ⵠΔ[336][Wr.ⵠΔⵠ] = Gq(Rc(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ⵠΔ[336][Wr.ᐃΔΔ] = Gq(Rc(1, false, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
        ⵠΔ[171] = [];
        ⵠΔ[171][Wr.ⵠΔⵠ] = Gq(Qc(1.5, Ol, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
        ⵠΔ[171][Wr.ᐃΔΔ] = Gq(Qc(1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
        ⵠΔ[373] = [];
        ⵠΔ[373][Wr.ⵠΔⵠ] = Gq(Qc(1, ds, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ⵠΔ[373][Wr.ᐃΔΔ] = Gq(Qc(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ⵠΔ[124] = [];
        ⵠΔ[124][Wr.ⵠΔⵠ] = Gq(Qc(1.5, Ol, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        ⵠΔ[124][Wr.ᐃΔΔ] = Gq(Qc(1.5, Ch, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        ⵠΔ[500] = [];
        ⵠΔ[500][Wr.ⵠΔⵠ] = Gq(Qc(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ⵠΔ[500][Wr.ᐃΔΔ] = Gq(Qc(1, C, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ⵠΔ[172] = [];
        ⵠΔ[172][Wr.ⵠΔⵠ] = Gq(Jc(1.5, Xo, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
        ⵠΔ[172][Wr.ᐃΔΔ] = Gq(Jc(1.5, pl, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
        ⵠΔ[376] = [];
        ⵠΔ[376][Wr.ⵠΔⵠ] = Gq(Jc(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ⵠΔ[376][Wr.ᐃΔΔ] = Gq(Jc(1, pg, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ⵠΔ[173] = [];
        ⵠΔ[173][Wr.ⵠΔⵠ] = Gq(Lc(1.5, Wa, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        ⵠΔ[173][Wr.ᐃΔΔ] = Gq(Lc(1.5, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        ⵠΔ[379] = [];
        ⵠΔ[379][Wr.ⵠΔⵠ] = Gq(Lc(1, Pn, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ⵠΔ[379][Wr.ᐃΔΔ] = Gq(Lc(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ⵠΔ[167] = [];
        ⵠΔ[167][Wr.ⵠΔⵠ] = Gq(um(0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
        ⵠΔ[167][Wr.ᐃΔΔ] = Gq(um(0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
        ⵠΔ[691] = [];
        ⵠΔ[691][Wr.ⵠΔⵠ] = Gq(Jp(0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
        ⵠΔ[691][Wr.ᐃΔΔ] = Gq(Jp(0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
        ⵠΔ[264] = [];
        ⵠΔ[264][Wr.ⵠΔⵠ] = Gq(Xd(0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
        ⵠΔ[264][Wr.ᐃΔΔ] = Gq(Xd(0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
        ⵠΔ[260] = [];
        ⵠΔ[260][Wr.ⵠΔⵠ] = Gq(Cd(Math.PI, Mt(0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
        ⵠΔ[260][Wr.ᐃΔΔ] = Gq(Cd(Math.PI, Mt(0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
        ⵠΔ[266] = Gq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 450;
            c.height = a * 470;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 226.5, a * 91.546875);
            d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
            d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
            d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
            d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
            d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
            d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
            d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
            d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
            d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
            d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
            d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
            d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
            d.closePath();
            ud(d, eq, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 129.546875);
            d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
            d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
            d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
            d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
            d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
            d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
            d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
            d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
            d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
            d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
            d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
            d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
            d.closePath();
            ud(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 160.546875);
            d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
            d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
            d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
            d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
            d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
            d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
            d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
            d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
            d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
            d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
            d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
            d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
            d.closePath();
            ud(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 205.5, a * 194.546875);
            d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
            d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
            d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
            d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
            d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
            d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
            d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
            d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
            d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
            d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
            d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
            d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
            d.closePath();
            ud(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 149.5, a * 93.546875);
            d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
            d.closePath();
            ud(d, Xh, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 66.546875);
            d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
            d.closePath();
            ud(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 302.5, a * 88.546875);
            d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
            d.closePath();
            ud(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 361.5, a * 147.546875);
            d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
            d.closePath();
            ud(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 379.5, a * 225.546875);
            d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
            d.closePath();
            ud(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 90.5, a * 147.546875);
            d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
            d.closePath();
            ud(d, undefined, b[0], 4);
            return c;
        }(0.6, ["#FFFFFF"]));
        ⵠΔ[299] = [];
        ⵠΔ[299][Wr.ⵠΔⵠ] = Gq(Kd(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
        ⵠΔ[299][Wr.ᐃΔΔ] = Gq(Kd(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
        ⵠΔ[10] = [];
        ⵠΔ[10][Wr.ⵠΔⵠ] = Gq(sm(0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
        ⵠΔ[10][Wr.ᐃΔΔ] = Gq(sm(0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
        ⵠΔ[11] = [];
        ⵠΔ[11][Wr.ⵠΔⵠ] = Gq(vm(0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
        ⵠΔ[11][Wr.ᐃΔΔ] = Gq(vm(0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
        ⵠΔ[40] = [];
        ⵠΔ[40][Wr.ⵠΔⵠ] = Gq(Cm(0.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
        ⵠΔ[40][Wr.ᐃΔΔ] = Gq(Cm(0.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
        ⵠΔ[41] = [];
        ⵠΔ[41][Wr.ⵠΔⵠ] = Gq(bu(0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
        ⵠΔ[41][Wr.ᐃΔΔ] = Gq(bu(0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
        ⵠΔ[42] = [];
        ⵠΔ[42][Wr.ⵠΔⵠ] = Gq(_t(0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
        ⵠΔ[42][Wr.ᐃΔΔ] = Gq(_t(0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
        ⵠΔ[716] = [];
        ⵠΔ[716][Wr.ⵠΔⵠ] = Gq(ep(0.42, Wa, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
        ⵠΔ[716][Wr.ᐃΔΔ] = Gq(ep(0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
        ⵠΔ[720] = [];
        ⵠΔ[720][Wr.ⵠΔⵠ] = Gq(Ym(0.9, ["#e4c027"]));
        ⵠΔ[720][Wr.ᐃΔΔ] = Gq(Ym(0.9, ["#D8E57F"]));
        ⵠΔ[144] = [];
        ⵠΔ[144][Wr.ⵠΔⵠ] = Gq(op(0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
        ⵠΔ[144][Wr.ᐃΔΔ] = Gq(op(0.42, He, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
        ⵠΔ[722] = Gq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 149;
            c.height = a * 356;
            d.save();
            d.translate(a * 74.5, a * 177.5);
            vd(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
            d.restore();
            ud(d, b[0], b[1], a * 4);
            d.save();
            d.translate(a * 74.5, a * 177.5);
            vd(d, a * -57.5, a * 50.5, a * 100, a * 105, a * 10);
            d.restore();
            ud(d, b[6], b[1], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 125);
            d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
            d.closePath();
            ud(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 120);
            d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
            d.closePath();
            ud(d, b[3], b[3], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 228);
            d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
            d.closePath();
            ud(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 224);
            d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
            d.closePath();
            ud(d, b[3], b[3], a * 10);
            d.save();
            d.translate(a * 72, a * 68.5);
            vd(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
            d.restore();
            ud(d, b[4]);
            d.save();
            d.translate(a * 72, a * 175.5);
            vd(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
            d.restore();
            ud(d, b[4]);
            d.save();
            d.translate(a * 72, a * 279.5);
            vd(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
            d.restore();
            ud(d, b[4]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 338);
            d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
            d.closePath();
            ud(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 333);
            d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
            d.closePath();
            ud(d, b[3], b[3], a * 10);
            return c;
        }(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
        ⵠΔ[407] = [];
        ⵠΔ[407][Wr.ⵠΔⵠ] = Gq(_c(0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
        ⵠΔ[407][Wr.ᐃΔΔ] = Gq(_c(0.5, Wa, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
        ⵠΔ[119] = [];
        ⵠΔ[119][Wr.ⵠΔⵠ] = Gq(Mc(0.5, ph, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
        ⵠΔ[119][Wr.ᐃΔΔ] = Gq(Mc(0.5, Ch, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
        ⵠΔ[411] = Gq(function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 118;
            d.height = a * 129;
            e.save();
            e.translate(a * 90, a * 90);
            vd(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
            e.restore();
            ud(e, c[0], c[1], 4);
            return d;
        }(0.8, 0, ["#5f6061", "#939393"]));
        ⵠΔ[412] = Ut(1, [{
            f: Xt,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 2.5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
        ⵠΔ[198] = [];
        ⵠΔ[198][Wr.ⵠΔⵠ] = Gq(em(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
        ⵠΔ[198][Wr.ᐃΔΔ] = Gq(em(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
        ⵠΔ[913] = [];
        ⵠΔ[913][Wr.ⵠΔⵠ] = Gq(rm(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
        ⵠΔ[913][Wr.ᐃΔΔ] = Gq(rm(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
        ⵠΔ[18] = [];
        ⵠΔ[18][Wr.ⵠΔⵠ] = Gq(Cd(3, gm(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
        ⵠΔ[18][Wr.ᐃΔΔ] = Gq(Cd(3, gm(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
        ⵠΔ[12] = [];
        ⵠΔ[12][Wr.ⵠΔⵠ] = Gq(Cd(3, Yc(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
        ⵠΔ[12][Wr.ᐃΔΔ] = Gq(Cd(3, Yc(0.7, vq, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
        ⵠΔ[13] = [];
        ⵠΔ[13][Wr.ⵠΔⵠ] = Gq(Cd(3, Tm(0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
        ⵠΔ[13][Wr.ᐃΔΔ] = Gq(Cd(3, Tm(0.65, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
        ⵠΔ[14] = [];
        ⵠΔ[14][Wr.ⵠΔⵠ] = Gq(Cd(3, tm(0.67, Xo, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
        ⵠΔ[14][Wr.ᐃΔΔ] = Gq(Cd(3, tm(0.67, vq, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
        ⵠΔ[15] = [];
        ⵠΔ[15][Wr.ⵠΔⵠ] = Gq(Cd(3, lm(0.67, He, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
        ⵠΔ[15][Wr.ᐃΔΔ] = Gq(Cd(3, lm(0.67, Ij, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
        ⵠΔ[33] = [];
        ⵠΔ[33][Wr.ⵠΔⵠ] = Gq(Cd(3, hm(0.67, Zk, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
        ⵠΔ[33][Wr.ᐃΔΔ] = Gq(Cd(3, hm(0.67, Ol, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
        ⵠΔ[16] = [];
        ⵠΔ[16][Wr.ⵠΔⵠ] = Gq(Cd(3, Kc(1, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
        ⵠΔ[16][Wr.ᐃΔΔ] = Gq(Cd(3, Kc(1, Bh, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
        ⵠΔ[35] = [];
        ⵠΔ[35][Wr.ⵠΔⵠ] = Gq(Cd(3, Hc(1, vq, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
        ⵠΔ[35][Wr.ᐃΔΔ] = Gq(Cd(3, Hc(1, ai, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
        ⵠΔ[55] = [];
        ⵠΔ[55][Wr.ⵠΔⵠ] = Gq(Cd(3, Tp(0.5, ij, ["#0d1b1c", "#939393", "#5f6061"])));
        ⵠΔ[55][Wr.ᐃΔΔ] = Gq(Cd(3, Tp(0.5, Dq, ["#030d14", "#485e66", "#1f343f"])));
        ⵠΔ[45] = [];
        ⵠΔ[45][Wr.ⵠΔⵠ] = Gq(Cd(3, hp(1, Ij, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
        ⵠΔ[45][Wr.ᐃΔΔ] = Gq(Cd(3, hp(1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
        ⵠΔ[36] = [];
        ⵠΔ[36][Wr.ⵠΔⵠ] = Gq(Cd(3, Hc(1, He, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
        ⵠΔ[36][Wr.ᐃΔΔ] = Gq(Cd(3, Hc(1, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
        ⵠΔ[37] = [];
        ⵠΔ[37][Wr.ⵠΔⵠ] = Gq(Cd(3, Hc(1, ur, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
        ⵠΔ[37][Wr.ᐃΔΔ] = Gq(Cd(3, Hc(1, ph, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
        ⵠΔ[38] = [];
        ⵠΔ[38][Wr.ⵠΔⵠ] = Gq(Cd(3, Hc(1, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
        ⵠΔ[38][Wr.ᐃΔΔ] = Gq(Cd(3, Hc(1, ph, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
        ⵠΔ[148] = [];
        ⵠΔ[148][Wr.ⵠΔⵠ] = Gq(lp(0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
        ⵠΔ[148][Wr.ᐃΔΔ] = Gq(lp(0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
        ⵠΔ[536] = [];
        ⵠΔ[536].push(Gq(lp(0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
        ⵠΔ[536].push(Gq(lp(0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
        ⵠΔ[536].push(Gq(lp(0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
        ⵠΔ[538] = [];
        ⵠΔ[538].push(ⵠΔ[536][0]);
        ⵠΔ[538].push(ⵠΔ[536][0]);
        ⵠΔ[538].push(ⵠΔ[536][0]);
        ⵠΔ[158] = [];
        ⵠΔ[158][Wr.ⵠΔⵠ] = Gq(rp(0.06, false, ["#141414", "#c4a23a", "#816511"]));
        ⵠΔ[158][Wr.ᐃΔΔ] = Gq(rp(0.06, Lj, ["#030d14", "#2b6664", "#133d3c"]));
        ⵠΔ[535] = [];
        ⵠΔ[535].push(Gq(rp(0.08, false, ["#141414", "#c4a23a", "#816511"])));
        ⵠΔ[535].push(Gq(rp(0.08, tk, ["#141414", "#e2bd4e", "#a38018"])));
        ⵠΔ[535].push(Gq(rp(0.08, false, ["#141414", "#b0902e", "#634d09"])));
        ⵠΔ[149] = Ut(1.5, [{
            f: qm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#141414", "#178a99", "#0a6372", "#03282e"]
        }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
        ⵠΔ[526] = [];
        ⵠΔ[526][Wr.ⵠΔⵠ] = Gq(Zm(0.8, 0, ["#347f93", "#54a4ba"]));
        ⵠΔ[526][Wr.ᐃΔΔ] = Gq(Zm(0.8, 0, ["#98ede3", "#94f2e7"]));
        ⵠΔ[527] = [];
        ⵠΔ[527][Wr.ⵠΔⵠ] = Gq(Km(0.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
        ⵠΔ[527][Wr.ᐃΔΔ] = Gq(Km(0.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
        ⵠΔ[528] = [];
        ⵠΔ[528][Wr.ⵠΔⵠ] = Gq(np(0.8, 0, ["#a9e4ed", "#86d4e0"]));
        ⵠΔ[528][Wr.ᐃΔΔ] = Gq(np(0.8, 0, ["#83ddd4", "#485e66"]));
        ⵠΔ[151] = [];
        ⵠΔ[151][Wr.ⵠΔⵠ] = Gq(ap(0.8, Un, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
        ⵠΔ[151][Wr.ᐃΔΔ] = Gq(ap(0.8, true, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
        ⵠΔ[1192] = [];
        ⵠΔ[1192][Wr.ⵠΔⵠ] = ᐃⵠ.ΔΔⵠⲆⲆⲆⲆ;
        ⵠΔ[1192][Wr.ᐃΔΔ] = ᐃⵠ.ⵠⵠᐃⵠΔΔᐃ;
        ⵠΔ[1193] = [];
        ⵠΔ[1193][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃᐃΔⵠⲆᐃⵠ;
        ⵠΔ[1193][Wr.ᐃΔΔ] = ᐃⵠ.ᐃᐃⵠⵠᐃᐃΔ;
        ⵠΔ[1194] = [];
        ⵠΔ[1194][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃⲆⵠⵠⲆⲆⲆ;
        ⵠΔ[1194][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⵠⵠⲆⵠⵠΔ;
        ⵠΔ[152] = [];
        ⵠΔ[152][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆΔᐃᐃᐃᐃᐃ;
        ⵠΔ[152][Wr.ᐃΔΔ] = ᐃⵠ.ΔΔᐃⲆⲆⵠⵠ;
        ⵠΔ[1198] = [];
        ⵠΔ[1198][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃⲆᐃⵠᐃᐃⵠ;
        ⵠΔ[1198][Wr.ᐃΔΔ] = ᐃⵠ.ΔΔⲆⵠᐃᐃⵠ;
        ⵠΔ[153] = [];
        ⵠΔ[153][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆΔⲆⲆⲆΔⵠ;
        ⵠΔ[153][Wr.ᐃΔΔ] = ᐃⵠ.ⲆᐃⲆΔΔΔⲆ;
        ⵠΔ[1202] = [];
        ⵠΔ[1202][Wr.ⵠΔⵠ] = ᐃⵠ.ΔⵠⲆΔⵠⲆⲆ;
        ⵠΔ[1202][Wr.ᐃΔΔ] = ᐃⵠ.Ⲇᐃᐃⵠⵠᐃᐃ;
        ⵠΔ[154] = [];
        ⵠΔ[154][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆΔΔΔⲆΔⵠ;
        ⵠΔ[154][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⲆᐃⲆⵠⲆᐃ;
        ⵠΔ[1206] = [];
        ⵠΔ[1206][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆᐃⲆᐃⲆΔΔ;
        ⵠΔ[1206][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⲆⵠⵠⵠⲆⵠ;
        ⵠΔ[155] = [];
        ⵠΔ[155][Wr.ⵠΔⵠ] = ᐃⵠ.ΔⲆⵠⲆⲆⲆᐃ;
        ⵠΔ[155][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⵠᐃⵠⵠⲆⲆ;
        ⵠΔ[1210] = [];
        ⵠΔ[1210][Wr.ⵠΔⵠ] = ᐃⵠ.Δⵠᐃⵠⵠᐃⵠ;
        ⵠΔ[1210][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⵠΔᐃΔⲆⲆ;
        ⵠΔ[156] = [];
        ⵠΔ[156][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆⵠⵠⵠΔΔᐃ;
        ⵠΔ[156][Wr.ᐃΔΔ] = ᐃⵠ.ᐃⵠⲆᐃᐃⵠⲆ;
        ⵠΔ[1214] = [];
        ⵠΔ[1214][Wr.ⵠΔⵠ] = ᐃⵠ.ⵠΔΔⵠⵠⵠⵠ;
        ⵠΔ[1214][Wr.ᐃΔΔ] = ᐃⵠ.ⲆΔᐃΔⲆΔⲆ;
        ⵠΔ[157] = [];
        ⵠΔ[157][Wr.ⵠΔⵠ] = ᐃⵠ.ΔᐃᐃᐃⲆⵠⲆ;
        ⵠΔ[157][Wr.ᐃΔΔ] = ᐃⵠ.ⲆⲆᐃΔᐃⵠᐃ;
        ⵠΔ[245] = [];
        ⵠΔ[245][Wr.ⵠΔⵠ] = ᐃⵠ.ⲆⲆΔᐃⵠᐃᐃ;
        ⵠΔ[245][Wr.ᐃΔΔ] = ᐃⵠ.ΔⵠⲆⵠᐃᐃᐃ;
        ⵠΔ[246] = ᐃⵠ.ⲆⵠⲆᐃⵠΔᐃ;
        ⵠΔ[159] = [];
        ⵠΔ[159][Wr.ⵠΔⵠ] = Gq(ip(0.75, Ij, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
        ⵠΔ[159][Wr.ᐃΔΔ] = Gq(ip(0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
        ⵠΔ[558] = Gq(Vm(0.3, ["#092813", "#1f773d"], 0));
        ⵠΔ[559] = Gq(Vm(0.3, ["#092813", "#1f773d"], 1));
        ⵠΔ[885] = Gq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 60;
            c.height = a * 60;
            d.translate(a * -25, a * -25);
            d.translate(0, a * 5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 24, a * 50);
            d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
            d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
            d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
            d.closePath();
            ud(d, b[0]);
            d.translate(0, a * -5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 24, a * 50);
            d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
            d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
            d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
            d.closePath();
            ud(d, b[1]);
            return c;
        }(0.6, ["#092813", "#1f773d"]));
        ⵠΔ[556] = [];
        ⵠΔ[556].push(Gq(dp(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
        ⵠΔ[556].push(Gq(dp(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
        ⵠΔ[556].push(Gq(dp(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
        ⵠΔ[560] = [];
        var b = Gq(dp(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
        ⵠΔ[560].push(b);
        ⵠΔ[560].push(b);
        ⵠΔ[560].push(b);
        ⵠΔ[557] = [];
        ⵠΔ[557].push(Gq(dp(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
        ⵠΔ[557].push(Gq(dp(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
        ⵠΔ[557].push(Gq(dp(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
        ⵠΔ[681] = Gq(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 170;
            var g = b * 172;
            var a = f / 2;
            var i = g / 2;
            d.width = f;
            d.height = g;
            e.translate(a, i);
            e.save();
            for (var j = 0; j < 10; j++) {
                e.rotate(Math.PI / 5);
                e.save();
                e.translate(b * 65, 0);
                pd(e, 3, b * 18, b * 4);
                ud(e, c[0]);
                e.restore();
            }
            e.restore();
            md(e, 0, 0, b * 40);
            ud(e, undefined, c[0], b * 6);
            md(e, 0, 0, b * 20);
            ud(e, c[0]);
            return d;
        }(0.3, ["#FFFFFF"]));
        ⵠΔ[794] = Gq(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 130;
            var g = b * 142;
            var a = f / 2;
            var h = g / 2;
            d.width = f;
            d.height = g;
            md(e, a, h, b * 40);
            ud(e, undefined, c[0], b * 7);
            md(e, a, h, b * 30);
            ud(e, kr, c[0], b * 7);
            md(e, a, h, b * 20);
            ud(e, c[0]);
            return d;
        }(0.3, ["#FFFFFF"]));
        ⵠΔ[562] = Gq(Vm(0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
        ⵠΔ[667] = Gq(Cd(Math.PI / 5, function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 316;
            c.height = a * 365;
            d.save();
            d.translate(a * 156.07142639160156, a * 51.81248474121094);
            d.rotate(0);
            vd(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
            d.restore();
            ud(d, b[0], b[0], a * 15);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
            d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
            d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
            d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
            d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
            d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
            d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
            d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
            d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
            d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
            d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
            d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
            d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
            d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
            d.closePath();
            ud(d, b[0], b[0], a * 15);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
            d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
            d.closePath();
            ud(d, b[0], b[0], a * 15);
            return c;
        }(0.2, ["#FFFFFF"])));
        ⵠΔ[43] = [];
        ⵠΔ[43][Wr.ⵠΔⵠ] = Gq(mp(0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
        ⵠΔ[43][Wr.ᐃΔΔ] = Gq(mp(0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
        ⵠΔ[561] = [];
        ⵠΔ[561].push(Gq(dp(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
        ⵠΔ[561].push(Gq(dp(0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
        ⵠΔ[561].push(Gq(dp(0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
        ⵠΔ[83] = [];
        ⵠΔ[83][Wr.ⵠΔⵠ] = Gq(Op(0.37, 0, ["#2a2938", "#242330", "#313041"]));
        ⵠΔ[83][Wr.ᐃΔΔ] = Gq(Op(0.37, 0, ["#1b1e30", "#161921", "#252f3e"]));
        ⵠΔ[85] = [];
        ⵠΔ[85][Wr.ⵠΔⵠ] = Gq(Hp(0.17, ur, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
        ⵠΔ[85][Wr.ᐃΔΔ] = Gq(Hp(0.17, true, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
        ⵠΔ[86] = [];
        ⵠΔ[86][Wr.ⵠΔⵠ] = Gq(Rp(0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
        ⵠΔ[86][Wr.ᐃΔΔ] = Gq(Rp(0.55, Ch, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
        ⵠΔ[84] = [];
        ⵠΔ[84][Wr.ⵠΔⵠ] = Gq(Rp(0.55, Zk, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
        ⵠΔ[84][Wr.ᐃΔΔ] = Gq(Rp(0.55, Xo, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
        ⵠΔ[77] = [];
        ⵠΔ[77][Wr.ⵠΔⵠ] = Gq(Wp(0.2, ph, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
        ⵠΔ[77][Wr.ᐃΔΔ] = Gq(Wp(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
        ⵠΔ[78] = [];
        ⵠΔ[78][Wr.ⵠΔⵠ] = Gq(Wp(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
        ⵠΔ[78][Wr.ᐃΔΔ] = Gq(Wp(0.2, ph, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
        ⵠΔ[79] = [];
        ⵠΔ[79][Wr.ⵠΔⵠ] = Gq(Wp(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
        ⵠΔ[79][Wr.ᐃΔΔ] = Gq(Wp(0.2, Er, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
        ⵠΔ[61] = [];
        ⵠΔ[61][Wr.ⵠΔⵠ] = Gq(Xc(0.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
        ⵠΔ[61][Wr.ᐃΔΔ] = Gq(Xc(0.24, true, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
        ⵠΔ[59] = [];
        ⵠΔ[59][Wr.ⵠΔⵠ] = Gq(am(0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
        ⵠΔ[59][Wr.ᐃΔΔ] = Gq(am(0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
        ⵠΔ[62] = [];
        ⵠΔ[62][Wr.ⵠΔⵠ] = Gq(Cd(3, Xm(0.9, true, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
        ⵠΔ[62][Wr.ᐃΔΔ] = Gq(Cd(3, Xm(0.9, Bh, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
        ⵠΔ[750] = [];
        ⵠΔ[750][Wr.ⵠΔⵠ] = Gq(Cd(3, Xm(1, Bh, [Qk, Pg, jl, "#c8efef", "#c8efef"])));
        ⵠΔ[750][Wr.ᐃΔΔ] = Gq(Cd(3, Xm(1, vq, [undefined, jl, undefined, "#87d2e6", "#87d2e6"])));
        ⵠΔ[755] = [];
        ⵠΔ[755].push(Gq(zp(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
        ⵠΔ[755].push(Gq(zp(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
        ⵠΔ[755].push(Gq(zp(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
        ⵠΔ[795] = [];
        ⵠΔ[795].push(Gq(Sp(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
        ⵠΔ[795].push(Gq(Sp(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
        ⵠΔ[795].push(Gq(Sp(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
        ⵠΔ[782] = [];
        ⵠΔ[782].push(Gq(pu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
        ⵠΔ[782].push(Gq(pu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
        ⵠΔ[782].push(Gq(pu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
        ⵠΔ[783] = [];
        ⵠΔ[783].push(Gq(pu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
        ⵠΔ[783].push(Gq(pu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
        ⵠΔ[783].push(Gq(pu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
        ⵠΔ[46] = [];
        ⵠΔ[46][Wr.ⵠΔⵠ] = Gq(Cd(3, fp(0.7, true, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
        ⵠΔ[46][Wr.ᐃΔΔ] = Gq(Cd(3, fp(0.7, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
        ⵠΔ[50] = [];
        ⵠΔ[50][Wr.ⵠΔⵠ] = Gq(Cd(3, fp(0.7, Kk, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
        ⵠΔ[50][Wr.ᐃΔΔ] = Gq(Cd(3, fp(0.7, true, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
        ⵠΔ[51] = [];
        ⵠΔ[51][Wr.ⵠΔⵠ] = Gq(Cd(3, fp(0.7, vq, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
        ⵠΔ[51][Wr.ᐃΔΔ] = Gq(Cd(3, fp(0.7, p, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
        ⵠΔ[52] = [];
        ⵠΔ[52][Wr.ⵠΔⵠ] = Gq(Cd(3, fp(0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
        ⵠΔ[52][Wr.ᐃΔΔ] = Gq(Cd(3, fp(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
        ⵠΔ[592] = [];
        ⵠΔ[592].push(Gq(up(0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
        ⵠΔ[592].push(Gq(up(0.7, ["#524712", "#c7b11c", "#d9ba18"])));
        ⵠΔ[592].push(Gq(up(0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
        ⵠΔ[326] = Gq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 188;
            c.height = a * 190;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
            d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
            d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
            d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
            d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
            d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
            d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
            d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
            d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
            d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
            d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
            d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
            d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
            d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
            d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
            d.closePath();
            ud(d, b[0], b[0], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
            d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
            d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
            d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
            d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
            d.closePath();
            ud(d, b[0], b[0], a * 2);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
            d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
            d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
            d.closePath();
            ud(d, b[0], b[0], a * 2);
            return c;
        }(1.1, ["#BB0000"]));
        ⵠΔ[333] = Gq(Cd(Math.PI, function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 238;
            c.height = a * 230;
            d.translate(a * -93, a * -110);
            md(d, a * 213.5, a * 256.75, a * 75);
            ud(d, b);
            md(d, a * 213.5, a * 175.75, a * 25);
            ud(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 156.5, a * 137.75);
            d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 217.5, a * 178.75);
            d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 130.5, a * 124.75);
            d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 214.5, a * 183.75);
            d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 107.5, a * 213.75);
            d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 212.5, a * 187.75);
            d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 102.5, a * 258.75);
            d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 214.5, a * 192.75);
            d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 219.5, a * 158.75);
            d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
            d.closePath();
            d.lineWidth = a * 10;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 210.5, a * 160.75);
            d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
            d.closePath();
            d.lineWidth = a * 10;
            d.strokeStyle = b;
            d.stroke();
            return c;
        }(0.9, "#BB0000")));
        ⵠΔ[23] = [];
        ⵠΔ[23][Wr.ⵠΔⵠ] = Gq(Fm(0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
        ⵠΔ[23][Wr.ᐃΔΔ] = Gq(Fm(0.55, p, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
        ⵠΔ[58] = [];
        ⵠΔ[58][Wr.ⵠΔⵠ] = Gq(Wm(0.55, Zk, ["#252525", "#73583e", "#573f29", "#7d6144"]));
        ⵠΔ[58][Wr.ᐃΔΔ] = Gq(Wm(0.55, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
        ⵠΔ[25] = [];
        ⵠΔ[25][Wr.ⵠΔⵠ] = Gq(Lm(0.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
        ⵠΔ[25][Wr.ᐃΔΔ] = Gq(Lm(0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
        ⵠΔ[26] = [];
        ⵠΔ[26][Wr.ⵠΔⵠ] = Gq(Bm(0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
        ⵠΔ[26][Wr.ᐃΔΔ] = Gq(Bm(0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
        ⵠΔ[27] = [];
        ⵠΔ[27][Wr.ⵠΔⵠ] = Gq(jm(0.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
        ⵠΔ[27][Wr.ᐃΔΔ] = Gq(jm(0.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
        ⵠΔ[413] = [];
        ⵠΔ[413][Wr.ⵠΔⵠ] = [];
        ⵠΔ[413][Wr.ᐃΔΔ] = [];
        ⵠΔ[413][Wr.ⵠΔⵠ].push(Gq(dm(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
        ⵠΔ[413][Wr.ⵠΔⵠ].push(Gq(cm(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
        ⵠΔ[413][Wr.ⵠΔⵠ].push(Gq(bm(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
        ⵠΔ[413][Wr.ᐃΔΔ].push(Gq(dm(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
        ⵠΔ[413][Wr.ᐃΔΔ].push(Gq(cm(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
        ⵠΔ[413][Wr.ᐃΔΔ].push(Gq(bm(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
        ⵠΔ[449] = [];
        ⵠΔ[449][Wr.ⵠΔⵠ] = Gq(Rm(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
        ⵠΔ[449][Wr.ᐃΔΔ] = Gq(Rm(1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
        ⵠΔ[451] = [];
        ⵠΔ[451][Wr.ⵠΔⵠ] = Gq(Om(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
        ⵠΔ[451][Wr.ᐃΔΔ] = Gq(Om(1, ["#050505", "#327570", "#021724", "#200333"]));
        ⵠΔ[452] = [];
        ⵠΔ[452][Wr.ⵠΔⵠ] = Gq(Pm(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
        ⵠΔ[452][Wr.ᐃΔΔ] = Gq(Pm(1, ["#050505", "#327570", "#021724", "#200333"]));
        ⵠΔ[243] = [];
        ⵠΔ[243][Wr.ⵠΔⵠ] = [];
        ⵠΔ[243][Wr.ᐃΔΔ] = [];
        ⵠΔ[243][Wr.ⵠΔⵠ] = [ᐃⵠ.ⲆⲆⵠⵠΔΔᐃ, ᐃⵠ.ⵠⲆⵠᐃⲆⲆᐃ, ᐃⵠ.ⲆⵠⵠⲆⲆᐃⵠ, ᐃⵠ.ⲆⲆᐃᐃⲆⲆⵠ, ᐃⵠ.ΔⵠⲆⲆⵠᐃᐃ, ᐃⵠ.ⵠⲆᐃⲆⲆᐃⲆ, ᐃⵠ.ⲆⵠΔⵠΔⵠⵠ, ᐃⵠ.ᐃᐃⵠⲆᐃΔⲆ, ᐃⵠ.ΔᐃⵠᐃΔᐃᐃ, ᐃⵠ.ᐃⲆⵠΔⲆⲆⲆ, ᐃⵠ.ⵠᐃⲆΔⵠⵠΔ, ᐃⵠ.ⲆⵠⵠΔᐃⲆⵠ, ᐃⵠ.ᐃⲆᐃᐃΔᐃΔ, ᐃⵠ.ⵠᐃⲆⲆΔᐃᐃ, ᐃⵠ.ⵠⵠⲆΔΔⵠⲆ, ᐃⵠ.ΔⲆᐃᐃΔⵠΔ, ᐃⵠ.ⵠⵠⵠⵠᐃΔⲆ, ᐃⵠ.ᐃⵠⲆΔΔΔⵠ, ᐃⵠ.ΔΔΔⵠᐃⵠⵠ, ᐃⵠ.ⵠᐃⵠΔᐃᐃΔ, ᐃⵠ.ΔᐃⲆⵠⵠᐃᐃ, ᐃⵠ.ΔᐃᐃⲆᐃⲆΔ, ᐃⵠ.ⲆⵠⵠΔⲆᐃΔ, ᐃⵠ.ⵠⲆⵠᐃⲆⲆⲆ, ᐃⵠ.ᐃⲆⲆΔⵠⲆᐃ, ᐃⵠ.ⵠᐃΔΔⲆΔΔ, ᐃⵠ.ΔᐃⵠΔⲆΔⲆ, ᐃⵠ.ⲆⲆΔⵠⵠᐃⲆ, ᐃⵠ.ΔⲆΔⵠⵠΔⵠ, ᐃⵠ.ⵠⵠΔⵠᐃⲆⲆ, ᐃⵠ.ᐃᐃⲆΔᐃΔⵠ, ᐃⵠ.ΔⵠᐃⵠΔΔⲆ, ᐃⵠ.ⵠᐃΔᐃΔΔΔ, ᐃⵠ.Ⲇⵠⵠⵠᐃᐃᐃ, ᐃⵠ.ⵠⲆⵠᐃΔⲆΔ, ᐃⵠ.ΔⵠΔⲆⲆΔΔ, ᐃⵠ.ΔⲆΔⵠⵠᐃᐃ, ᐃⵠ.ⲆΔⵠᐃΔⵠΔ, ᐃⵠ.ΔⲆᐃΔⲆⲆⲆ, ᐃⵠ.ᐃΔΔᐃⲆⲆⲆ, ᐃⵠ.ΔⲆᐃⵠΔⲆⵠ, ᐃⵠ.ⲆⲆΔΔⲆⵠⵠ, ᐃⵠ.ⲆⵠⲆⲆⵠΔᐃ, ᐃⵠ.ΔⲆΔⵠⵠΔΔ, ᐃⵠ.ᐃΔⲆⵠΔⵠᐃ, ᐃⵠ.ᐃᐃΔᐃⲆⲆⲆ, ᐃⵠ.ⲆⵠΔⲆΔΔⲆ, ᐃⵠ.ΔᐃⲆⲆⲆⲆΔ, ᐃⵠ.ⲆⵠⲆᐃⲆⲆⵠ, ᐃⵠ.ⲆⵠΔᐃᐃΔΔ, ᐃⵠ.ΔᐃⵠᐃΔⲆⵠ, ᐃⵠ.ΔΔΔⲆⲆΔΔ, ᐃⵠ.ⲆΔⵠᐃᐃΔⲆ, ᐃⵠ.ⵠᐃΔⵠⵠⲆⵠ, ᐃⵠ.ⵠⵠⲆᐃᐃᐃⵠ, ᐃⵠ.ᐃΔⲆⲆⲆⲆᐃ];
        ⵠΔ[243][Wr.ᐃΔΔ] = [ᐃⵠ.ⵠᐃⵠΔⲆⲆⵠ, ᐃⵠ.ⵠᐃⲆᐃΔᐃⲆ, ᐃⵠ.ⵠᐃΔⵠΔΔⵠ, ᐃⵠ.ΔᐃᐃᐃᐃⲆΔ, ᐃⵠ.Δⵠᐃᐃⵠⵠⵠ, ᐃⵠ.ⲆⵠᐃᐃᐃⲆᐃ, ᐃⵠ.ᐃΔⵠᐃⲆⲆⵠ, ᐃⵠ.ΔⵠᐃⲆⵠΔⲆ, ᐃⵠ.ⵠⵠⵠᐃⲆⲆⲆ, ᐃⵠ.ᐃΔᐃⵠⲆⲆⲆ, ᐃⵠ.ⵠΔᐃⲆΔⵠΔ, ᐃⵠ.ⵠΔⵠⵠΔⵠΔ, ᐃⵠ.ᐃΔᐃΔⵠⵠᐃ, ᐃⵠ.ⲆΔⲆᐃⲆⵠΔ, ᐃⵠ.ⵠΔΔⵠΔΔⲆ, ᐃⵠ.ᐃⲆᐃⲆⲆᐃⲆ, ᐃⵠ.ᐃΔΔⲆΔⲆⵠ, ᐃⵠ.ᐃⲆⲆⲆⲆⲆΔ, ᐃⵠ.Ⲇⵠⵠⵠᐃᐃⵠ, ᐃⵠ.ⵠΔΔᐃΔΔΔ, ᐃⵠ.ΔᐃⵠⲆⵠΔⲆ, ᐃⵠ.ⲆⲆᐃᐃᐃⲆΔ, ᐃⵠ.ΔᐃΔⵠⲆⵠⲆ, ᐃⵠ.ⲆᐃⵠᐃⲆᐃΔ, ᐃⵠ.ΔΔᐃΔⲆⲆⲆ, ᐃⵠ.ΔⵠⵠⵠᐃΔⲆ, ᐃⵠ.ⲆⵠⲆᐃⵠⲆⲆ, ᐃⵠ.ΔᐃΔⵠⲆᐃⲆ, ᐃⵠ.ⵠΔᐃⲆⵠⵠⲆ, ᐃⵠ.ΔⵠⲆⲆᐃᐃⵠ, ᐃⵠ.ᐃⵠⵠᐃⵠΔΔ, ᐃⵠ.ᐃΔⵠⲆΔⵠⲆ, ᐃⵠ.ⵠΔΔᐃᐃᐃⲆ, ᐃⵠ.Δⵠⵠⵠⵠⵠᐃ, ᐃⵠ.ᐃⵠᐃᐃⵠᐃⵠ, ᐃⵠ.ΔⵠᐃᐃⲆΔⵠ, ᐃⵠ.ⲆⵠⲆⵠᐃΔΔ, ᐃⵠ.Ⲇᐃⵠⵠⵠⵠⵠ, ᐃⵠ.ⲆⲆΔᐃⲆΔᐃ, ᐃⵠ.ᐃⲆᐃΔᐃⵠΔ, ᐃⵠ.ⲆᐃΔⲆᐃᐃΔ, ᐃⵠ.ⲆΔⲆⲆᐃⵠⵠ, ᐃⵠ.ⲆᐃⲆᐃᐃΔⵠ, ᐃⵠ.ⵠᐃⲆⲆⲆΔΔ, ᐃⵠ.ΔⲆᐃⵠⲆΔⲆ, ᐃⵠ.ⵠⲆᐃⲆᐃⲆᐃ, ᐃⵠ.ⲆᐃᐃⲆᐃⵠᐃ, ᐃⵠ.ᐃᐃⵠⵠᐃⲆⵠ, ᐃⵠ.ᐃΔᐃΔΔΔⲆ, ᐃⵠ.ⵠΔⲆΔΔⵠᐃ, ᐃⵠ.ΔᐃⲆΔΔᐃΔ, ᐃⵠ.ⲆᐃⲆⲆⲆΔⵠ, ᐃⵠ.ⵠⵠΔⵠⲆΔⲆ, ᐃⵠ.ΔⵠΔⵠΔⵠⵠ, ᐃⵠ.ⲆᐃⵠⲆⵠⲆⲆ, ᐃⵠ.ᐃᐃΔⵠΔΔᐃ];
        ⵠΔ[676] = [];
        ⵠΔ[676][Wr.ⵠΔⵠ] = [];
        ⵠΔ[676][Wr.ᐃΔΔ] = [];
        ⵠΔ[676][Wr.ⵠΔⵠ].push(Gq(sc(1.1, false, ["#252B28", "#747471", "#83827e"], 0)));
        ⵠΔ[676][Wr.ⵠΔⵠ].push(Gq(sc(0.9, Lj, ["#252B28", "#747471", "#83827e"], 1)));
        ⵠΔ[676][Wr.ⵠΔⵠ].push(Gq(sc(1, false, ["#252B28", "#747471", "#83827e"], 2)));
        ⵠΔ[676][Wr.ⵠΔⵠ].push(Gq(sc(0.9, false, ["#252B28", "#747471", "#83827e"], 2)));
        ⵠΔ[676][Wr.ᐃΔΔ].push(Gq(sc(1.1, false, ["#030d14", "#123335", "#183f3f"], 0)));
        ⵠΔ[676][Wr.ᐃΔΔ].push(Gq(sc(0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
        ⵠΔ[676][Wr.ᐃΔΔ].push(Gq(sc(1, false, ["#030d14", "#123335", "#183f3f"], 2)));
        ⵠΔ[676][Wr.ᐃΔΔ].push(Gq(sc(0.9, Dl, ["#030d14", "#123335", "#183f3f"], 2)));
        ⵠΔ[679] = [];
        ⵠΔ[679][Wr.ⵠΔⵠ] = [];
        ⵠΔ[679][Wr.ᐃΔΔ] = [];
        ⵠΔ[679][Wr.ⵠΔⵠ].push(Gq(sc(1.1, Zk, ["#252B28", "#58645F", "#75827D"], 2)));
        ⵠΔ[679][Wr.ⵠΔⵠ].push(Gq(sc(0.9, Zk, ["#252B28", "#58645F", "#75827D"], 2)));
        ⵠΔ[679][Wr.ⵠΔⵠ].push(Gq(sc(1, true, ["#252B28", "#58645F", "#75827D"], 2)));
        ⵠΔ[679][Wr.ⵠΔⵠ].push(Gq(sc(0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
        ⵠΔ[679][Wr.ᐃΔΔ].push(Gq(sc(1.1, true, ["#030d14", "#123335", "#183f3f"], 2)));
        ⵠΔ[679][Wr.ᐃΔΔ].push(Gq(sc(0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
        ⵠΔ[679][Wr.ᐃΔΔ].push(Gq(sc(1, He, ["#030d14", "#123335", "#183f3f"], 2)));
        ⵠΔ[679][Wr.ᐃΔΔ].push(Gq(sc(0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
        ⵠΔ[415] = [];
        ⵠΔ[415][Wr.ⵠΔⵠ] = [];
        ⵠΔ[415][Wr.ᐃΔΔ] = [];
        ⵠΔ[415][Wr.ⵠΔⵠ].push(Gq(ec(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ⵠΔ[415][Wr.ⵠΔⵠ].push(Gq(ec(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ⵠΔ[415][Wr.ⵠΔⵠ].push(Gq(ec(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ⵠΔ[415][Wr.ᐃΔΔ].push(Gq(ec(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        ⵠΔ[415][Wr.ᐃΔΔ].push(Gq(ec(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        ⵠΔ[415][Wr.ᐃΔΔ].push(Gq(ec(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        ⵠΔ[416] = [];
        ⵠΔ[416][Wr.ⵠΔⵠ] = [];
        ⵠΔ[416][Wr.ᐃΔΔ] = [];
        ⵠΔ[416][Wr.ⵠΔⵠ].push(Gq(gc(1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
        ⵠΔ[416][Wr.ⵠΔⵠ].push(Gq(gc(0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
        ⵠΔ[416][Wr.ⵠΔⵠ].push(Gq(gc(0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
        ⵠΔ[416][Wr.ᐃΔΔ].push(Gq(gc(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        ⵠΔ[416][Wr.ᐃΔΔ].push(Gq(gc(0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        ⵠΔ[416][Wr.ᐃΔΔ].push(Gq(gc(0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        ⵠΔ[121] = [];
        ⵠΔ[121][Wr.ⵠΔⵠ] = [];
        ⵠΔ[121][Wr.ᐃΔΔ] = [];
        ⵠΔ[121][Wr.ⵠΔⵠ].push(Gq(ym(1.7, pl, ["#1d051e", "#c27add", "#cd98e5"])));
        ⵠΔ[121][Wr.ⵠΔⵠ].push(Gq(ym(1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
        ⵠΔ[121][Wr.ⵠΔⵠ].push(Gq(ym(1.3, true, ["#1d051e", "#c27add", "#cd98e5"])));
        ⵠΔ[121][Wr.ᐃΔΔ].push(Gq(ym(1.7, Wa, ["#1d051e", "#41aaa0", "#5cccc4"])));
        ⵠΔ[121][Wr.ᐃΔΔ].push(Gq(ym(1.5, pl, ["#1d051e", "#41aaa0", "#5cccc4"])));
        ⵠΔ[121][Wr.ᐃΔΔ].push(Gq(ym(1.3, Wa, ["#1d051e", "#41aaa0", "#5cccc4"])));
        ⵠΔ[678] = [];
        ⵠΔ[678][Wr.ⵠΔⵠ] = [];
        ⵠΔ[678][Wr.ᐃΔΔ] = [];
        ⵠΔ[678][Wr.ⵠΔⵠ].push(Gq(Em(1, ["#2d53c4"])));
        ⵠΔ[678][Wr.ᐃΔΔ].push(Gq(Em(1, ["#2d53c4"])));
        ⵠΔ[696] = [];
        ⵠΔ[696][Wr.ⵠΔⵠ] = [];
        ⵠΔ[696][Wr.ᐃΔΔ] = [];
        ⵠΔ[696][Wr.ⵠΔⵠ].push(Gq(Em(1, ["#c4912d"])));
        ⵠΔ[696][Wr.ᐃΔΔ].push(Gq(Em(1, ["#c4912d"])));
        ⵠΔ[680] = [];
        ⵠΔ[680][Wr.ⵠΔⵠ] = Gq(Am(1, ["#414040"]));
        ⵠΔ[680][Wr.ᐃΔΔ] = Gq(Am(1, ["#153635"]));
        ⵠΔ[508] = [];
        ⵠΔ[508][Wr.ⵠΔⵠ] = Gq(Rc(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ⵠΔ[508][Wr.ᐃΔΔ] = Gq(Rc(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ⵠΔ[509] = [];
        ⵠΔ[509][Wr.ⵠΔⵠ] = Gq(Qc(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ⵠΔ[509][Wr.ᐃΔΔ] = Gq(Qc(1, Dj, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ⵠΔ[512] = [];
        ⵠΔ[512][Wr.ⵠΔⵠ] = Gq(Qc(1, ds, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ⵠΔ[512][Wr.ᐃΔΔ] = Gq(Qc(1, Tq, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ⵠΔ[511] = [];
        ⵠΔ[511][Wr.ⵠΔⵠ] = Gq(Lc(1, Dj, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ⵠΔ[511][Wr.ᐃΔΔ] = Gq(Lc(1, xl, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ⵠΔ[510] = [];
        ⵠΔ[510][Wr.ⵠΔⵠ] = Gq(Jc(1, th, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ⵠΔ[510][Wr.ᐃΔΔ] = Gq(Jc(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ⵠΔ[419] = [];
        ⵠΔ[419][Wr.ⵠΔⵠ] = Gq(km(0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
        ⵠΔ[419][Wr.ᐃΔΔ] = Gq(km(0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
        ⵠΔ[445] = [];
        ⵠΔ[445][Wr.ⵠΔⵠ] = Gq(Qm(0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
        ⵠΔ[445][Wr.ᐃΔΔ] = Gq(Qm(0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
        ⵠΔ[259] = [];
        ⵠΔ[818] = [];
        ⵠΔ[516] = [];
        ⵠΔ[819] = [];
        for (a = 0; a < 2; a++) {
            ⵠΔ[259][a] = document.createElement("canvas");
            ⵠΔ[259][a].width = 193;
            ⵠΔ[259][a].height = 193;
            ⵠΔ[818][a] = ⵠΔ[259][a].getContext("2d");
            ⵠΔ[516][a] = document.createElement("canvas");
            ⵠΔ[516][a].width = 600;
            ⵠΔ[516][a].height = 600;
            ⵠΔ[819][a] = ⵠΔ[516][a].getContext("2d");
        }
        ⵠΔ[475] = [];
        ⵠΔ[475][Wr.ⵠΔⵠ] = Gq(Am(1, ["#c8e0de"]));
        ⵠΔ[475][Wr.ᐃΔΔ] = Gq(Am(1, ["#147071"]));
        ⵠΔ[476] = [];
        ⵠΔ[476][Wr.ⵠΔⵠ] = Gq(Am(1, ["#231912"]));
        ⵠΔ[476][Wr.ᐃΔΔ] = Gq(Am(1, ["#021719"]));
        ⵠΔ[697] = Gq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 253;
            c.height = a * 192;
            d.save();
            d.translate(a * 37, a * 94);
            vd(d, a * -7, a * -20, a * 14, a * 37, a * 20);
            d.restore();
            ud(d, b[0]);
            d.save();
            d.translate(a * 131, a * 94);
            vd(d, a * -84, a * -67, a * 168, a * 134, a * 20);
            d.restore();
            ud(d, b[0], b[0], a * 13);
            d.save();
            d.translate(a * 223, a * 94.5);
            vd(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
            d.restore();
            ud(d, b[0]);
            d.save();
            d.translate(a * 128.5, a * 170.5);
            vd(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
            d.restore();
            ud(d, b[0]);
            return c;
        }(0.5, ["#BB0000"]));
        ⵠΔ[461] = Gq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 161;
            c.height = a * 190;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 9, a * 93);
            d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
            d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
            d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
            d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
            d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
            d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
            d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
            d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
            d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
            d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
            d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
            d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
            d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
            d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
            d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
            d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
            d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
            d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
            d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
            d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
            d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
            d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
            d.closePath();
            ud(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 25, a * 63);
            d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
            d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
            d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
            ud(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 91, a * 53);
            d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
            d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
            d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
            ud(d, b, b, a * 4);
            return c;
        }(0.9, "#BB0000"));
        ⵠΔ[462] = Gq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 147;
            c.height = a * 172;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 8, a * 50);
            d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
            d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
            d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
            d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
            d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
            d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
            d.closePath();
            ud(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 14, a * 57);
            d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
            d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
            ud(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 93, a * 47);
            d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
            d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
            ud(d, b, b, a * 4);
            return c;
        }(0.9, "#BB0000"));
        ⵠΔ[463] = Gq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 271;
            c.height = a * 366;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 133, a * 99);
            d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
            d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
            d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
            d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
            d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
            d.closePath();
            ud(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 73, a * 270);
            d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
            d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
            d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
            d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
            d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
            d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
            d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
            d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
            d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
            d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
            d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
            d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
            d.closePath();
            ud(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 76, a * 252);
            d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
            d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
            d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
            d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
            d.closePath();
            ud(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 84, a * 257);
            d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
            d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
            d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
            d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
            d.closePath();
            ud(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 125, a * 65);
            d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
            d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
            d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
            d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
            d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
            d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
            d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
            d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
            d.closePath();
            ud(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 115, a * 37);
            d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
            d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
            d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
            d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
            d.closePath();
            ud(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 146, a * 34);
            d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
            d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
            d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
            d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
            d.closePath();
            ud(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 143, a * 69);
            d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
            d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
            d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
            d.closePath();
            ud(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 149, a * 92);
            d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
            d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
            d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
            d.closePath();
            ud(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 111, a * 61);
            d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
            d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
            d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
            d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
            d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
            d.closePath();
            ud(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 107, a * 81);
            d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
            d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
            d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
            d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
            d.closePath();
            ud(d, b[0]);
            return c;
        }(1, ["#BB0000"]));
        ⵠΔ[466] = Gq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 85;
            c.height = a * 145;
            d.translate(a * -20, a * -95);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 50, a * 105);
            d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
            d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
            d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
            d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
            d.closePath();
            ud(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 44, a * 106);
            d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
            d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
            d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
            d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
            d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
            d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
            d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
            d.closePath();
            ud(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 30, a * 159);
            d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
            d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
            d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
            d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
            d.closePath();
            ud(d, b);
            return c;
        }(0.8, "#BB0000"));
        ⵠΔ[467] = Gq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 85;
            c.height = a * 145;
            d.translate(a * -165, a * -95);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 217, a * 103);
            d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
            d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
            d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
            d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
            d.closePath();
            ud(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 231, a * 163);
            d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
            d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
            d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
            d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
            d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
            d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
            d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
            d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
            d.closePath();
            ud(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 234, a * 154);
            d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
            d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
            d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
            d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
            d.closePath();
            ud(d, b);
            return c;
        }(0.8, "#BB0000"));
        ⵠΔ[322] = Gq(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 85;
            var g = b * 115;
            var a = b * 4;
            d.width = f;
            d.height = g;
            e.translate(b * -130, b * -60);
            e.globalAlpha = 1;
            e.beginPath();
            e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
            e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
            e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
            e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
            e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
            e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
            e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
            e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
            e.closePath();
            ud(e, c, c, a);
            return d;
        }(0.9, "#BB0000"));
        ⵠΔ[279] = Gq(zd(0.6, "#BB0000"));
        ⵠΔ[280] = Gq(zd(0.6, "#1CE7E0"));
        ⵠΔ[281] = Gq(zd(0.6, "#DBE71C"));
        ⵠΔ[308] = Gq(zd(0.6, "#00BB00"));
        ⵠΔ[602] = [];
        ⵠΔ[602][Wr.ⵠΔⵠ] = Gq(Am(1, ["#dac291"]));
        ⵠΔ[602][Wr.ᐃΔΔ] = Gq(Am(1, ["#0D423D"]));
        ⵠΔ[698] = [];
        ⵠΔ[698][Wr.ⵠΔⵠ] = Gq(Am(1, ["#dac291"]));
        ⵠΔ[698][Wr.ᐃΔΔ] = Gq(Am(1, ["#0D423D"]));
        ⵠΔ[788] = [];
        ⵠΔ[788][Wr.ⵠΔⵠ] = Gq(jp(0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
        ⵠΔ[788][Wr.ᐃΔΔ] = Gq(jp(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
        ⵠΔ[182] = [];
        ⵠΔ[182][Wr.ⵠΔⵠ] = Gq(jp(0.3, pl, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
        ⵠΔ[182][Wr.ᐃΔΔ] = Gq(jp(0.3, Er, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
        ⵠΔ[127] = [Gq(_p(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
        ⵠΔ[128] = [Gq(_p(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
        ⵠΔ[603] = [];
        ⵠΔ[603][Wr.ⵠΔⵠ] = [];
        ⵠΔ[603][Wr.ᐃΔΔ] = [];
        ⵠΔ[603][Wr.ⵠΔⵠ].push(Gq(_m(1, ["#0B6A84"])));
        ⵠΔ[603][Wr.ⵠΔⵠ].push(Gq(Jm(1, ["#0B6A84"])));
        ⵠΔ[603][Wr.ⵠΔⵠ].push(Gq(Mm(1, ["#0B6A84"])));
        ⵠΔ[603][Wr.ⵠΔⵠ].push(Gq(Gm(1, ["#0B6A84"])));
        ⵠΔ[603][Wr.ⵠΔⵠ].push(Gq(xm(1, ["#0B6A84"])));
        ⵠΔ[603][Wr.ⵠΔⵠ].push(Gq(wm(1, ["#0B6A84"])));
        ⵠΔ[603][Wr.ⵠΔⵠ].push(Gq(Dm(1, ["#0B6A84"])));
        ⵠΔ[603][Wr.ᐃΔΔ].push(Gq(_m(1, ["#09373F"])));
        ⵠΔ[603][Wr.ᐃΔΔ].push(Gq(Jm(1, ["#09373F"])));
        ⵠΔ[603][Wr.ᐃΔΔ].push(Gq(Mm(1, ["#09373F"])));
        ⵠΔ[603][Wr.ᐃΔΔ].push(Gq(Gm(1, ["#09373F"])));
        ⵠΔ[603][Wr.ᐃΔΔ].push(Gq(xm(1, ["#09373F"])));
        ⵠΔ[603][Wr.ᐃΔΔ].push(Gq(wm(1, ["#09373F"])));
        ⵠΔ[603][Wr.ᐃΔΔ].push(Gq(Dm(1, ["#09373F"])));
        ⵠΔ[692] = [];
        ⵠΔ[692][Wr.ⵠΔⵠ] = [];
        ⵠΔ[692][Wr.ᐃΔΔ] = [];
        ⵠΔ[692][Wr.ⵠΔⵠ].push(Gq(om(1.7, ["#FBEFBC"], 0)));
        ⵠΔ[692][Wr.ⵠΔⵠ].push(Gq(om(1.9, ["#FBEFBC"], 1)));
        ⵠΔ[692][Wr.ⵠΔⵠ].push(Gq(om(1.7, ["#FBEFBC"], 2)));
        ⵠΔ[692][Wr.ᐃΔΔ].push(Gq(om(1.7, ["#0F4C48"], 0)));
        ⵠΔ[692][Wr.ᐃΔΔ].push(Gq(om(1.9, ["#0F4C48"], 1)));
        ⵠΔ[692][Wr.ᐃΔΔ].push(Gq(om(1.7, ["#0F4C48"], 2)));
        ⵠΔ[694] = [];
        ⵠΔ[694][Wr.ⵠΔⵠ] = [];
        ⵠΔ[694][Wr.ᐃΔΔ] = [];
        ⵠΔ[694][Wr.ⵠΔⵠ].push(Gq(om(1.8, ["#A9D6D3"], 0)));
        ⵠΔ[694][Wr.ⵠΔⵠ].push(Gq(om(2, ["#A9D6D3"], 1)));
        ⵠΔ[694][Wr.ⵠΔⵠ].push(Gq(om(1.8, ["#A9D6D3"], 2)));
        ⵠΔ[694][Wr.ᐃΔΔ].push(Gq(om(1.8, ["#115E60"], 0)));
        ⵠΔ[694][Wr.ᐃΔΔ].push(Gq(om(2, ["#115E60"], 1)));
        ⵠΔ[694][Wr.ᐃΔΔ].push(Gq(om(1.8, ["#115E60"], 2)));
        ⵠΔ[695] = [];
        ⵠΔ[695][Wr.ⵠΔⵠ] = [];
        ⵠΔ[695][Wr.ᐃΔΔ] = [];
        ⵠΔ[695][Wr.ⵠΔⵠ].push(Gq(om(1.9, ["#2A8B9B"], 0)));
        ⵠΔ[695][Wr.ⵠΔⵠ].push(Gq(om(2.1, ["#2A8B9B"], 1)));
        ⵠΔ[695][Wr.ⵠΔⵠ].push(Gq(om(1.9, ["#2A8B9B"], 2)));
        ⵠΔ[695][Wr.ᐃΔΔ].push(Gq(om(1.9, ["#0F464C"], 0)));
        ⵠΔ[695][Wr.ᐃΔΔ].push(Gq(om(2.1, ["#0F464C"], 1)));
        ⵠΔ[695][Wr.ᐃΔΔ].push(Gq(om(1.9, ["#0F464C"], 2)));
        ⵠΔ[693] = [];
        ⵠΔ[693][Wr.ⵠΔⵠ] = [];
        ⵠΔ[693][Wr.ᐃΔΔ] = [];
        ⵠΔ[693][Wr.ⵠΔⵠ].push(Gq(Sc(0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        ⵠΔ[693][Wr.ⵠΔⵠ].push(Gq(Sc(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        ⵠΔ[693][Wr.ⵠΔⵠ].push(Gq(Sc(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        ⵠΔ[693][Wr.ᐃΔΔ].push(Gq(Sc(0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        ⵠΔ[693][Wr.ᐃΔΔ].push(Gq(Sc(1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        ⵠΔ[693][Wr.ᐃΔΔ].push(Gq(Sc(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        ⵠΔ[637] = [];
        ⵠΔ[637][Wr.ⵠΔⵠ] = Gq(bp(0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
        ⵠΔ[637][Wr.ᐃΔΔ] = Gq(bp(0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
        ⵠΔ[687] = Gq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 376;
            c.height = a * 371;
            d.globalAlpha = 1;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 191.633544921875, a * 123.98580932617188);
            d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
            d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
            d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
            d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
            d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
            d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
            d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
            d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
            d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
            d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
            d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
            d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
            d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
            d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
            d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
            d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
            d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
            d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
            d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
            d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
            d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
            d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
            d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
            d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
            d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
            d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
            d.closePath();
            ud(d, b[0], b[0], a * 12);
            return c;
        }(0.8, ["#B6222A"]));
        ⵠΔ[673] = [];
        ⵠΔ[673][Wr.ⵠΔⵠ] = Gq(wp(0.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
        ⵠΔ[673][Wr.ᐃΔΔ] = Gq(wp(0.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
        ⵠΔ[688] = Gq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 158;
            c.height = a * 201;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 96.5, a * 76.421875);
            d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
            d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
            d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
            d.closePath();
            ud(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 61.5, a * 78.421875);
            d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
            d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
            d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
            d.closePath();
            ud(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 116.5, a * 127.421875);
            d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
            d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
            d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
            d.closePath();
            ud(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 41.5, a * 134.421875);
            d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
            d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
            d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
            d.closePath();
            ud(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 78.5, a * 51.921875);
            d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
            d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
            d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
            d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
            d.closePath();
            ud(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 72.5, a * 72.421875);
            d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
            d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
            d.closePath();
            ud(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 42.5, a * 163.421875);
            d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
            d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
            d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
            d.closePath();
            ud(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 79.5, a * 61.421875);
            d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
            d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
            d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
            d.closePath();
            ud(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 72.5, a * 72.421875);
            d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
            d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
            d.closePath();
            ud(d, b[0], b[0], a * 10);
            return c;
        }(0.8, ["#B6222A"]));
        ⵠΔ[902] = [];
        ⵠΔ[902][Wr.ⵠΔⵠ] = Gq(Gd(0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
        ⵠΔ[902][Wr.ᐃΔΔ] = Gq(Gd(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
        ⵠΔ[903] = [];
        ⵠΔ[903][Wr.ⵠΔⵠ] = Gq(Gd(0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
        ⵠΔ[903][Wr.ᐃΔΔ] = Gq(Gd(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
        ⵠΔ[Wr.ΔⲆⵠⲆᐃⲆⵠ] = [];
        ⵠΔ[Wr.ΔⲆⵠⲆᐃⲆⵠ][Wr.ⵠΔⵠ] = Gq(Gd(0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
        ⵠΔ[Wr.ΔⲆⵠⲆᐃⲆⵠ][Wr.ᐃΔΔ] = Gq(Gd(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
        ⵠΔ[904] = Gq(Hd(0.4, ["#B6222A"]));
        ⵠΔ[905] = Gq(Hd(0.4, ["#B6222A"]));
        ⵠΔ[Wr.ΔᐃΔⵠⲆⵠΔⵠᐃ] = Gq(Hd(0.4, ["#B6222A"]));
        ⵠΔ[230] = Gq(pm(0.35, ij, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
        ⵠΔ[229] = Gq(xu(0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
        ⵠΔ[886] = [];
        ⵠΔ[886][Wr.ⵠΔⵠ] = Gq(lu(0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
        ⵠΔ[886][Wr.ᐃΔΔ] = Gq(lu(0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
        ⵠΔ[887] = [];
        ⵠΔ[887][Wr.ⵠΔⵠ] = Gq(lu(0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
        ⵠΔ[887][Wr.ᐃΔΔ] = Gq(lu(0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
        ⵠΔ[894] = [];
        ⵠΔ[894][Wr.ⵠΔⵠ] = Gq(su(0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
        ⵠΔ[894][Wr.ᐃΔΔ] = Gq(su(0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
        ⵠΔ[895] = [];
        ⵠΔ[895][Wr.ⵠΔⵠ] = Gq(uu(0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
        ⵠΔ[895][Wr.ᐃΔΔ] = Gq(uu(0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
        ⵠΔ[896] = [];
        ⵠΔ[896][Wr.ⵠΔⵠ] = Gq(su(0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
        ⵠΔ[896][Wr.ᐃΔΔ] = Gq(su(0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
        ⵠΔ[897] = [];
        ⵠΔ[897][Wr.ⵠΔⵠ] = Gq(uu(0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
        ⵠΔ[897][Wr.ᐃΔΔ] = Gq(uu(0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
        ⵠΔ[888] = Gq(ru(0.35, ["#B6222A"]));
        ⵠΔ[889] = Gq(su(0.35, 0, [eq, "#B6222A"]));
        ⵠΔ[890] = Gq(uu(0.35, 0, [hj, "#B6222A"]));
        ⵠΔ[891] = Gq(ru(0.35, ["#22E066"]));
        ⵠΔ[892] = Gq(su(0.35, 0, [undefined, "#22E066"]));
        ⵠΔ[893] = Gq(uu(0.35, 0, [undefined, "#22E066"]));
        ⵠΔ[48] = [];
        ⵠΔ[48][Wr.ⵠΔⵠ] = Gq(Gu(0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
        ⵠΔ[48][Wr.ᐃΔΔ] = Gq(Gu(0.3, ij, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
        ⵠΔ[47] = [];
        ⵠΔ[47][Wr.ⵠΔⵠ] = Gq(pc(0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
        ⵠΔ[47][Wr.ᐃΔΔ] = Gq(pc(0.45, ur, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
        ⵠΔ[141] = [];
        ⵠΔ[141][Wr.ⵠΔⵠ] = Gq(Ip(0.63, true, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
        ⵠΔ[141][Wr.ᐃΔΔ] = Gq(Ip(0.63, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
        ⵠΔ[125] = [];
        ⵠΔ[125][Wr.ⵠΔⵠ] = Gq(Up(1, Dq, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
        ⵠΔ[125][Wr.ᐃΔΔ] = Gq(Up(1, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
        ⵠΔ[221] = [];
        ⵠΔ[221][Wr.ⵠΔⵠ] = ᐃⵠ.ᐃᐃΔᐃⵠⲆⵠᐃⲆ;
        ⵠΔ[221][Wr.ᐃΔΔ] = ᐃⵠ.ᐃΔⵠᐃⲆᐃⵠⵠᐃ;
        ⵠΔ[190] = [];
        ⵠΔ[190][Wr.ⵠΔⵠ] = Gq(Bd(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        ⵠΔ[190][Wr.ᐃΔΔ] = Gq(Bd(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        ⵠΔ[853] = [ⵠΔ[190]];
        ⵠΔ[853][1] = [];
        ⵠΔ[853][2] = [];
        ⵠΔ[853][1][Wr.ⵠΔⵠ] = Gq(Dd(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        ⵠΔ[853][1][Wr.ᐃΔΔ] = Gq(Dd(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        ⵠΔ[853][2][Wr.ⵠΔⵠ] = Gq(Md(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        ⵠΔ[853][2][Wr.ᐃΔΔ] = Gq(Md(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        ⵠΔ[49] = [];
        ⵠΔ[49][Wr.ⵠΔⵠ] = Gq(Cd(3 - Math.PI / 2, Lp(0.6, true, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
        ⵠΔ[49][Wr.ᐃΔΔ] = Gq(Cd(3 - Math.PI / 2, Lp(0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
        ⵠΔ[728] = [];
        ⵠΔ[728][Wr.ⵠΔⵠ] = Gq(Ht(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
        ⵠΔ[728][Wr.ᐃΔΔ] = Gq(Ht(0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
        ⵠΔ[798] = Gq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 650;
            c.height = a * 650;
            d.scale(1.9, 1.9);
            d.save();
            d.translate(a * 202.5, a * 147.5);
            vd(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
            d.restore();
            ud(d, b[4], b[1], a * 12);
            d.save();
            d.translate(a * 203.5, a * 121.5);
            vd(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
            d.restore();
            ud(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 203.5, a * 299);
            vd(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
            d.restore();
            ud(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 298.5, a * 210);
            vd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            ud(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 108.5, a * 210);
            vd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            ud(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 204, a * 121.5);
            vd(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
            d.restore();
            ud(d, b[3], b[3], a * 10);
            d.save();
            d.translate(a * 197, a * 299);
            vd(d, a * 85, a * -9, a * -170, a * 18, a * 10);
            d.restore();
            ud(d, b[3], b[3], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 94, a * 317);
            d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
            d.closePath();
            ud(d, Xh, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 279, a * 142);
            d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
            d.closePath();
            ud(d, Pg, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 93, a * 106);
            d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
            d.closePath();
            ud(d, undefined, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 281, a * 282);
            d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
            d.closePath();
            ud(d, Xh, b[1], a * 12);
            return c;
        }(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
        ⵠΔ[729] = Gq(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 400;
            c.height = a * 400;
            d.save();
            d.translate(a * 202.5, a * 147.5);
            vd(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
            d.restore();
            ud(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 190.5);
            vd(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
            d.restore();
            ud(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 233.5);
            vd(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
            d.restore();
            ud(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 275);
            vd(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
            d.restore();
            ud(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 203.5, a * 121.5);
            vd(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
            d.restore();
            ud(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 203.5, a * 299);
            vd(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
            d.restore();
            ud(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 298.5, a * 210);
            vd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            ud(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 108.5, a * 210);
            vd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            ud(d, b[0], b[0], a * 12);
            return c;
        }(0.3, ["#BB0000"]));
        ⵠΔ[658] = Ut(1, [{
            f: Dp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
        }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ⵠΔ[150] = Ut(1.5, [{
            f: qm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#120202", "#750a0a", "#991616", "#120202"]
        }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
        ⵠΔ[669] = qp(0.35, ["#072428", "#67A242", "#67A242"], 0);
        ⵠΔ[670] = qp(0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
        ⵠΔ[671] = qp(0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
        ⵠΔ[672] = qp(0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
        if (ⵠΔΔΔⲆⵠⵠ) {
            ⵠΔ[278] = Gq(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 200;
                var f = b * 180;
                var g = b * 8;
                c.width = e;
                c.height = f;
                d.beginPath();
                vd(d, 0, 0, e, f - g, g);
                d.globalAlpha = 0.8;
                ud(d, "#1D6055");
                d.globalAlpha = 1;
                var a = lc(b, "Leaderboard", 25, "#FFF");
                d.drawImage(a, (e - a.width) / 2, b * 5);
                return c;
            }(1));
        } else {
            ⵠΔ[278] = Gq(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 200;
                var f = b * 270;
                var g = b * 8;
                c.width = e;
                c.height = f + 20;
                d.beginPath();
                vd(d, 0, 0, e, f - g, g);
                d.globalAlpha = 0.5;
                ud(d, "#1D6055");
                d.globalAlpha = 1;
                var a = lc(b, "Leaderboard", 25, "#FFF");
                d.drawImage(a, (e - a.width) / 2, b * 5);
                return c;
            }(1));
        }
        if (ⵠΔΔΔⲆⵠⵠ) {
            ⵠΔ[267] = Gq(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 335;
                var f = b * 250;
                var i = b * 120;
                var a = b * 20;
                var j = b * 35;
                var k = b * 65;
                var h = b * 2;
                var l = b * 4;
                c.width = e;
                c.height = i;
                d.beginPath();
                d.translate(0, b * 15);
                vd(d, k, 0, f, a, h);
                ud(d, null, "#69A148", l);
                d.translate(0, j);
                vd(d, k, 0, f, a, h);
                ud(d, null, "#AF352A", l);
                d.translate(0, j);
                vd(d, k, 0, f, a, h);
                ud(d, null, "#669BB1", l);
                return c;
            }(0.75));
        } else {
            ⵠΔ[267] = Gq(function (c) {
                var d = document.createElement("canvas");
                var e = d.getContext("2d");
                var f = c * 950;
                var i = c * 180;
                var j = c * 50;
                var a = c * 20;
                var k = c * 240;
                var m = c * 35;
                var h = c * 1;
                var l = c * 4;
                var g = c * 4;
                d.width = f;
                d.height = j;
                e.translate(0, c * 15);
                vd(e, m, h, i, a, l);
                ud(e, null, "#69A148", g);
                var n = ⵠΔ[669];
                e.drawImage(n, 17, -8);
                e.translate(k, 0);
                vd(e, m, h, i, a, l);
                ud(e, null, "#AF352A", g);
                n = ⵠΔ[671];
                e.drawImage(n, 17, -9);
                e.translate(k, 0);
                vd(e, m, h, i, a, l);
                ud(e, null, "#669BB1", g);
                n = ⵠΔ[670];
                e.drawImage(n, 17, -8);
                e.translate(k, 0);
                vd(e, m, h, i, a, l);
                ud(e, null, "#074A87", g);
                n = ⵠΔ[672];
                e.drawImage(n, 17, -8);
                return d;
            }(1));
        }
        if (ⵠΔΔΔⲆⵠⵠ) {
            ⵠΔ[608] = Gq(Ep(0.75));
        } else {
            ⵠΔ[608] = Gq(Ep(1));
        }
        ⵠΔ[792] = Gq(Lm(0.16, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
        ⵠΔ[537] = Gq(Cd(5.8, eu(0.15, Ij, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
        ⵠΔ[283] = [];
        ⵠΔ[465] = [];
        for (a = 0; a < 18; a++) {
            ⵠΔ[465][a] = lc(1, "" + (a + 1), 12, "#FFF");
        }
        ⵠΔ[708] = [];
        ⵠΔ[708].push(Gq(Qp(0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
        ⵠΔ[708].push(Gq(Qp(0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
        ⵠΔ[708].push(Gq(Qp(0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
        ⵠΔ[725] = [];
        ⵠΔ[725].push(Gq(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            c.translate(0, a * 20);
            md(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            ud(c, "#322413", "#322413", a * 4);
            c.translate(0, a * -20);
            md(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            ud(c, "#392C16", "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
            c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
            c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
            c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
            c.closePath();
            ud(c, "#12432D");
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
            c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
            c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
            c.closePath();
            ud(c, "#3A2A0D");
            md(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
            ud(c, jl, "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
            c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
            c.closePath();
            ud(c, Qa, "#5E3E1A", a * 12);
            c.translate(0, a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            ud(c, kr, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            ud(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            ud(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            ud(c, er, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            ud(c, lh, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            ud(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            ud(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            ud(c, lh, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            ud(c, undefined, "#c7a726", a * 12);
            c.translate(0, a * -8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            ud(c, Qa, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            ud(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            ud(c, hg, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            ud(c, $q, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            ud(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            ud(c, er, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            ud(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            ud(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            ud(c, jl, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
            c.closePath();
            ud(c, "#704618", "#5D3D1A", a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 96, a * 166);
            c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
            c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
            c.closePath();
            ud(c, "#ECBE35", "#EDCE4F", a * 8);
            md(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
            ud(c, "#392C16", "#5E3E1A", a * 10);
            return b;
        }(0.22)));
        ⵠΔ[725].push(Gq(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            c.translate(0, a * 20);
            md(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            ud(c, "#322413", "#322413", a * 4);
            c.translate(0, a * -20);
            md(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            ud(c, "#392C16", "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
            c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
            c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
            c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
            c.closePath();
            ud(c, "#3A2A0D");
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
            c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
            c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
            c.closePath();
            ud(c, "#071A1B");
            md(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
            ud(c, undefined, "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
            c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
            c.closePath();
            ud(c, undefined, "#5E3E1A", a * 12);
            c.translate(0, a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            ud(c, sj, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            ud(c, fk, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            ud(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            ud(c, Qa, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            ud(c, mo, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            ud(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            ud(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            ud(c, ug, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            ud(c, undefined, "#281C08", a * 12);
            c.translate(0, a * -8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            ud(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            ud(c, gj, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            ud(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            ud(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            ud(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            ud(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            ud(c, lh, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            ud(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            ud(c, Qa, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 96, a * 166);
            c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
            c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
            c.closePath();
            ud(c, "#704618", "#5D3D1A", a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
            c.closePath();
            ud(c, "#E1DDD5", "#EAE7E4", a * 8);
            md(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
            ud(c, "#392C16", "#5E3E1A", a * 10);
            return b;
        }(0.22)));
        ⵠΔ[726] = Gq(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            md(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
            ud(c, "#C09D6F", "#A37943", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
            c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
            c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
            c.closePath();
            ud(c, "#C09D6F", "#A37943", a * 10);
            c.save();
            c.translate(a * 161.50003051757812, a * 117.90341186523438);
            vd(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
            c.restore();
            ud(c, "#C09D6F", "#A37943", a * 10);
            c.save();
            c.translate(a * 162.00003051757812, a * 78.90341186523438);
            vd(c, a * -10, a * -5.5, a * 20, a * 11, a * 1);
            c.restore();
            ud(c, "#C09D6F");
            md(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
            ud(c, "#C09D6F");
            return b;
        }(0.22));
        ⵠΔ[727] = [];
        ⵠΔ[727].push(Gq(Wd(1.5, ["#795026", "#654320", "#eda80d"], 0)));
        ⵠΔ[727].push(Gq(Wd(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
        ⵠΔ[727].push(Gq(Wd(1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
        ⵠΔ[546] = ᐃⵠ.ᐃΔⲆⵠⲆᐃⲆ;
        ⵠΔ[547] = ᐃⵠ.ⲆΔⵠᐃᐃΔΔ;
        ⵠΔ[548] = ᐃⵠ.ᐃᐃⲆΔᐃᐃⵠ;
        ⵠΔ[549] = ᐃⵠ.ᐃⵠΔⲆⲆⲆΔ;
        ⵠΔ[517] = lc(1, "Show spectators", 25, "#FFF", Qa, undefined, "#000", 5, 220);
        ⵠΔ[525] = lc(1, "Reconnecting...", 30, "#FFF");
        console.log(undefined, undefined);
    }
    function qp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 109;
        d.height = a * 110;
        md(e, a * 54.5, a * 55, a * 48.038209575038294);
        ud(e, b[0], b[1], a * 8);
        if (c == 0) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
            e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
            e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
            e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
            e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
            e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
            e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
            e.closePath();
            ud(e, b[2]);
        } else if (c == 1) {
            e.save();
            e.translate(a * 55, a * 39.48748779296875);
            vd(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
            e.restore();
            ud(e, b[2], b[3], a * 4);
            md(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
            ud(e, b[4], b[3], a * 4);
            e.save();
            e.translate(a * 55.5, a * 57.287506103515625);
            vd(e, a * -9, a * -16, a * 18, a * 32, a * 10);
            e.restore();
            ud(e, b[4]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 25.287506103515625);
            e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
            e.closePath();
            ud(e, undefined, b[5], a * 4);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 37.287506103515625);
            e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
            e.closePath();
            ud(e, undefined, b[5], a * 4);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 50.287506103515625);
            e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
            e.closePath();
            ud(e, undefined, b[5], a * 4);
        } else if (c == 2) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
            e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
            e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
            e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
            e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
            e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
            e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
            e.closePath();
            ud(e, b[2]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
            e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
            e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
            e.closePath();
            ud(e, b[3], b[4], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
            e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
            e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
            e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
            e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
            e.closePath();
            ud(e, b[3], b[4], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
            e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
            e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
            e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
            e.closePath();
            ud(e, b[2]);
        } else if (c == 3) {
            e.scale(0.9, 0.9);
            e.translate(a * 6, 0);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 54, a * 0.421875);
            e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
            e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
            e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
            e.closePath();
            ud(e, b[2], b[3], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 74, a * 52.421875);
            e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
            e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
            e.closePath();
            ud(e, b[3]);
        }
        return d;
    }
    function Hp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 465;
        d.height = a * 405;
        e.globalAlpha = 1;
        e.translate(a * 6, a * 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
        e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
        e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
        e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
        e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
        e.closePath();
        ud(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
        e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
        e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
        e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
        e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
        e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
        e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
        e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
        e.closePath();
        ud(e, c[0], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
        e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
        e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
        e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
        e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
        e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
        e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
        e.closePath();
        ud(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
        e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
        e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
        e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
        e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
        e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
        e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
        e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
        e.closePath();
        ud(e, er, c[1], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
        e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
        e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
        e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
        e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
        e.closePath();
        ud(e, c[0], c[1], a * 13);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
        e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
        e.closePath();
        ud(e, c[0], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
        e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
        e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
        e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
        e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
        e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
        e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
        e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
        e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
        e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
        e.closePath();
        ud(e, c[2], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
        e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
        e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
        e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
        e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
        e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
        e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
        e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
        e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
        e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
        e.closePath();
        ud(e, c[0], c[1], a * 20);
        return d;
    }
    function Up(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 102;
        d.height = a * 102;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(3, 3);
        vd(e, a * 24, a * 26, a * 70, a * 9, a * 10);
        ud(e, c[0]);
        vd(e, a * 26, a * 70, a * 70, a * 9, a * 10);
        ud(e, c[0]);
        vd(e, a * 5, a * 3, a * 22, a * 94, a * 5);
        ud(e, c[0]);
        vd(e, a * 40, a * 3, a * 22, a * 94, a * 5);
        ud(e, c[0]);
        vd(e, a * 75, a * 3, a * 22, a * 94, a * 5);
        ud(e, c[0]);
        e.globalAlpha = 1;
        e.translate(-3, -3);
        vd(e, a * 24, a * 26, a * 70, a * 9, a * 10);
        ud(e, c[1]);
        vd(e, a * 26, a * 70, a * 70, a * 9, a * 10);
        ud(e, c[1]);
        vd(e, a * 5, a * 3, a * 22, a * 94, a * 5);
        ud(e, c[2], c[3], a * 4);
        vd(e, a * 40, a * 3, a * 22, a * 94, a * 5);
        ud(e, c[2], c[3], a * 4);
        vd(e, a * 75, a * 3, a * 22, a * 94, a * 5);
        ud(e, c[2], c[3], a * 4);
        return d;
    }
    function Yp() {
        var b = Ox.time;
        if (ⵠΔ[285]) {
            oo.drawImage(ⵠΔ[285][b][1], lo + 480, Po + 190);
            oo.drawImage(ⵠΔ[285][b][2], lo + 180, Po - 430);
            oo.drawImage(ⵠΔ[285][b][1], lo - 855, Po + 100);
            oo.drawImage(ⵠΔ[285][b][0], lo - 550, Po - 300);
            oo.drawImage(ⵠΔ[285][b][0], lo - 1020, Po - 520);
        }
        if (ⵠΔ[108]) {
            oo.drawImage(ⵠΔ[108][b][1], lo - 80, Po - 640);
            oo.drawImage(ⵠΔ[108][b][1], lo + 80, Po + 490);
            oo.drawImage(ⵠΔ[108][b][2], lo - 180, Po - 700);
            oo.drawImage(ⵠΔ[108][b][0], lo + 550, Po + 100);
            oo.drawImage(ⵠΔ[108][b][1], lo + 450, Po + 300);
            oo.drawImage(ⵠΔ[108][b][1], lo + 780, Po + 300);
            oo.drawImage(ⵠΔ[108][b][2], lo + 980, Po + 200);
            oo.drawImage(ⵠΔ[108][b][2], lo + 680, Po + 600);
            oo.drawImage(ⵠΔ[108][b][2], lo - 380, Po + 100);
            oo.drawImage(ⵠΔ[108][b][2], lo + 280, Po + 250);
        }
        if (ⵠΔ[110]) {
            oo.drawImage(ⵠΔ[110][b][0], lo - 590, Po);
            oo.drawImage(ⵠΔ[110][b][0], lo + 120, Po - 390);
            oo.drawImage(ⵠΔ[110][b][0], lo - 270, Po + 340);
        }
        if (ⵠΔ[109]) {
            oo.drawImage(ⵠΔ[109][b][4], lo - 700, Po - 600);
            oo.drawImage(ⵠΔ[109][b][2], lo - 970, Po - 250);
            oo.drawImage(ⵠΔ[109][b][5], lo - 720, Po - 200);
            oo.drawImage(ⵠΔ[109][b][2], lo - 1020, Po + 340);
            oo.drawImage(ⵠΔ[109][b][0], lo - 1120, Po - 0);
            oo.drawImage(ⵠΔ[109][b][1], lo - 650, Po - 330);
            oo.drawImage(ⵠΔ[109][b][4], lo - 495, Po - 90);
            oo.drawImage(ⵠΔ[109][b][3], lo - 520, Po + 340);
            oo.drawImage(ⵠΔ[109][b][2], lo + 830, Po - 520);
        }
        ⵠΔ[413];
        if (Qx && Px) {
            var c = Qx.ΔᐃⲆ.x;
            var d = Qx.ΔᐃⲆ.y;
            Qx.ΔᐃⲆ.x = lo;
            Qx.ΔᐃⲆ.y = Po;
            var e = Px.time;
            Px.time = Ox.time;
            var f;
            var g = Ox.items;
            g[2].x = 400;
            g[2].y = 100;
            g[2].ᐃⲆᐃⲆ(114);
            (f = g[1]).x = -500;
            f.y = 100;
            f.ⲆᐃΔᐃ[0].x = f.x - 20.5;
            f.ⲆᐃΔᐃ[0].y = f.y - 22.5;
            f.ⲆᐃΔᐃ[1].x = f.x - 35.5;
            f.ⲆᐃΔᐃ[1].y = f.y + 7.5;
            f.ⲆᐃΔᐃ[2].x = f.x + 7.5;
            f.ⲆᐃΔᐃ[2].y = f.y - 30;
            f.ⲆᐃΔᐃ[3].x = f.x + 22.5;
            f.ⲆᐃΔᐃ[3].y = f.y;
            f.ⲆᐃΔᐃ[4].x = f.x - 7.5;
            f.ⲆᐃΔᐃ[4].y = f.y + 14.5;
            for (var a = 0; f.info > a; a++) {
                f.ⲆᐃΔᐃ[a].ᐃⲆᐃⲆ(294);
            }
            (f = g[3]).x = 210;
            f.y = -290;
            f.ⲆᐃΔᐃ[0].x = f.x - 20.5;
            f.ⲆᐃΔᐃ[0].y = f.y - 22.5;
            f.ⲆᐃΔᐃ[1].x = f.x - 35.5;
            f.ⲆᐃΔᐃ[1].y = f.y + 7.5;
            f.ⲆᐃΔᐃ[2].x = f.x + 7.5;
            f.ⲆᐃΔᐃ[2].y = f.y - 30;
            f.ⲆᐃΔᐃ[3].x = f.x + 22.5;
            f.ⲆᐃΔᐃ[3].y = f.y;
            f.ⲆᐃΔᐃ[4].x = f.x - 7.5;
            f.ⲆᐃΔᐃ[4].y = f.y + 14.5;
            for (a = 0; a < f.info; a++) {
                f.ⲆᐃΔᐃ[a].ᐃⲆᐃⲆ(294);
            }
            g[0].x = 450;
            g[0].y = -100;
            g[0].ⵠΔΔⲆⲆ(113);
            g[0].ΔᐃⲆᐃΔ();
            Qx.ΔᐃⲆ.x = c;
            Qx.ΔᐃⲆ.y = d;
            Px.time = e;
        }
    }
    const Kp = {};
    Kp.get = function (a, b) {
        if (b !== "ⲆⵠᐃⵠⵠΔⲆ") {
            const a = Math.floor;
            let b = 0;
            const c = function (c) {
                for (let a = 0; a < 1988; a++) {
                    b += a;
                }
                return a(c);
            };
            Math.floor = c;
        }
        return hc.Reflect.get(...arguments);
    };
    function Vp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.translate(0, a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        ud(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        ud(e, undefined, c[0], a * 11);
        e.translate(0, a * -5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        ud(e, c[3], c[2], a * 12);
        e.translate(0, a * 25);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        ud(e, c[5]);
        e.translate(0, a * -25);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        ud(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 185);
        e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
        e.closePath();
        ud(e, ih, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 287);
        e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
        e.closePath();
        ud(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 290);
        e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
        e.closePath();
        ud(e, c[1], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 184);
        e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
        e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
        e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
        e.closePath();
        ud(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 276);
        e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
        e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
        e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
        e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
        e.closePath();
        ud(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        ud(e, undefined, c[2], a * 11);
        return d;
    }
    function Xp() {
        if (Qx.ᐃΔⲆⲆΔᐃⵠ) {
            oo.globalAlpha = 0.5;
            oo.fillStyle = "#000";
            oo.fillRect(0, 0, ao, so);
            oo.globalAlpha = 0.8;
            var b = ⵠΔ[516][Px.time];
            var c = lo - b.width / 2;
            var d = Po - b.height / 2;
            Mu(oo, b, c, d);
            oo.globalAlpha = 1;
            if (Sx.ΔⲆⲆⲆᐃ.ᐃⲆᐃΔⵠ.x > -1) {
                oo.fillStyle = "#660000";
                md(oo, c + xo * (Sx.ΔⲆⲆⲆᐃ.ᐃⲆᐃΔⵠ.x * 3), d + Sx.ΔⲆⲆⲆᐃ.ᐃⲆᐃΔⵠ.y * 3 * xo, xo * 14);
                oo.fill();
            }
            for (var e = Sx.ΔⲆⲆⲆᐃ.ⲆⲆⲆᐃ, f = 0; e.length > f; f++) {
                var g = e[f];
                Px.time;
                oo.fillStyle = "#ff0000";
                md(oo, c + xo * (g.x / (Px.ⵠⵠᐃⵠⵠ * 100) * 600), d + g.y / (Px.Ⲇᐃⵠⵠⵠ * 100) * 600 * xo, xo * 6);
                oo.fill();
            }
            var h = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
            if (h) {
                oo.fillStyle = Px.time ? "#fff" : "#e39716";
                md(oo, c + xo * (h.x / (Px.ⵠⵠᐃⵠⵠ * 100) * 600), d + h.y / (Px.Ⲇᐃⵠⵠⵠ * 100) * 600 * xo, xo * 12);
                oo.fill();
            }
        }
    }
    function Zp() {
        if (!Qx.ⲆᐃΔΔ.open && !Qx.ⵠᐃⲆᐃⲆ.open) {
            Qx.ⲆᐃⲆⵠ.open = false;
            var b = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
            var c = 100;
            if (b) {
                for (var d = 0; Px.Ⲇᐃⵠ[32].length > d; d++) {
                    var e = Px.Ⲇᐃⵠ[32][d];
                    var f = ⵠᐃⵠ.ᐃⵠᐃⵠ(e, b);
                    if (c > f) {
                        c = f;
                        Qx.ⲆᐃⲆⵠ.open = true;
                        Qx.ⲆᐃⲆⵠ.ⵠⵠⲆᐃΔⲆΔ = e.info & 255;
                        Qx.ⲆᐃⲆⵠ.ⲆⲆⲆΔΔⲆⲆ = (e.info & 65280) >> 8;
                        Qx.ⲆᐃⲆⵠ.ⵠΔᐃⵠ = e.ⵠΔᐃⵠ;
                        Qx.ⲆᐃⲆⵠ.ΔⲆΔΔⲆ = e.id;
                    }
                }
                if (c < 100) {
                    var g = ⵠΔ[655];
                    var a = (k = Sx.ᐃⵠⵠΔⲆΔⲆ).info.translate.x - 33;
                    Mu(oo, g, a, 0);
                    if (Qx.ⲆᐃⲆⵠ.ⵠⵠⲆᐃΔⲆΔ > 0) {
                        k.ᐃⲆᐃⲆ(oo);
                        if ((j = Qx.ⲆᐃⲆⵠ.ⵠⵠⲆᐃΔⲆΔ) > 1) {
                            $p(j, k);
                        }
                    }
                    var j;
                    var k = Sx.ⵠΔᐃⵠⵠⵠⲆ;
                    if (Qx.ⲆᐃⲆⵠ.ⲆⲆⲆΔΔⲆⲆ > 0) {
                        k.ᐃⲆᐃⲆ(oo);
                        if ((j = Qx.ⲆᐃⲆⵠ.ⲆⲆⲆΔΔⲆⲆ) > 1) {
                            $p(j, k);
                        }
                    }
                }
            }
        }
    }
    function $p(a, b) {
        ⵠΔ[283][a] ||= lc(xo, "x" + a, 17, "#FFF");
        var c = ⵠΔ[283][a];
        var d = b.info.translate.x + b.info.ΔⲆ[0].width - c.width - xo * 14;
        var e = b.info.translate.y + b.info.ΔⲆ[0].height - c.height - xo * 19;
        if (b.info.state == _f) {
            e += xo * 5;
        }
        Mu(oo, c, d, e);
    }
    function Hu() {
        Qx.ᐃⲆⲆᐃᐃ.id = -1;
        Qx.ᐃⲆⲆᐃᐃ.ⵠΔᐃⵠ = -1;
        if (!Qx.ΔΔᐃⲆⲆᐃⵠ && !Qx.ᐃⲆⲆᐃᐃ.wait && !Qx.ᐃΔΔⲆⵠ) {
            var b = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
            var c = 100;
            if (b) {
                for (var d = 0; Px.Ⲇᐃⵠ[29].length > d; d++) {
                    var e = Px.Ⲇᐃⵠ[29][d];
                    var f = ⵠᐃⵠ.ᐃⵠᐃⵠ(e, b);
                    if (f < c) {
                        c = f;
                        Qx.ᐃⲆⲆᐃᐃ.id = e.id;
                        Qx.ᐃⲆⲆᐃᐃ.ⵠΔᐃⵠ = e.ⵠΔᐃⵠ;
                        Qx.ᐃⲆⲆᐃᐃ.info = e.info;
                        Qx.ᐃⲆⲆᐃᐃ.lock = (e.info & 16) >> 4;
                    }
                }
            }
            var g = Sx.ⵠᐃⲆΔⵠ;
            Sx.ⵠᐃⲆΔⵠ = -1;
            if (Qx.ᐃⲆⲆᐃᐃ.ⵠΔᐃⵠ == -1 || Qx.ⵠⲆᐃΔΔ.length != 0 && Qx.ᐃⲆⲆᐃᐃ.ⵠΔᐃⵠ != Qx.id) {
                if (Qx.ⵠⲆᐃΔΔ.length != 0 && Qx.id != Qx.ⵠⲆᐃΔΔ[0]) {
                    Sx.ⵠᐃⲆΔⵠ = 2;
                } else if (Qx.ⵠⲆᐃΔΔ.length != 0 && Qx.ⵠⲆᐃΔΔ[0] == Qx.id) {
                    Sx.ⵠᐃⲆΔⵠ = 1;
                } else if (Qx.ⵠⲆᐃΔΔ.length != 0) {
                    Sx.ⵠᐃⲆΔⵠ = 3;
                }
            } else if (Qx.ⵠⲆᐃΔΔ.length == 0 && Qx.ᐃⲆⲆᐃᐃ.info >= 8) {
                Sx.ⵠᐃⲆΔⵠ = 4;
            } else if (Qx.ⵠⲆᐃΔΔ.length == 0) {
                Sx.ⵠᐃⲆΔⵠ = 3;
            } else {
                Sx.ⵠᐃⲆΔⵠ = 0;
            }
            if (Sx.ⵠᐃⲆΔⵠ != -1) {
                Sx.ⲆⲆᐃᐃᐃ[Sx.ⵠᐃⲆΔⵠ].button.ᐃⲆᐃⲆ(oo);
            }
            var a = document.getElementById("team_box").style;
            if (Sx.ⵠᐃⲆΔⵠ != -1 && Sx.ⵠᐃⲆΔⵠ != g && a.display == "inline-block") {
                Sx.ⲆⲆᐃᐃᐃ[Sx.ⵠᐃⲆΔⵠ].action();
            }
        }
    }
    function Iu() {
        if (!Qx.ⲆᐃΔΔ.open && !Qx.ⵠᐃⲆᐃⲆ.open && !Qx.ⲆᐃⲆⵠ.open && !Qx.ΔΔΔΔ.open && !Qx.ⵠⲆᐃⲆ.open) {
            Qx.sign.open = pq;
            var a = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
            var b = 100;
            if (a) {
                for (var c = 0; c < Px.Ⲇᐃⵠ[36].length; c++) {
                    var d = Px.Ⲇᐃⵠ[36][c];
                    var e = ⵠᐃⵠ.ᐃⵠᐃⵠ(d, a);
                    if (b > e && d.info === 0 && Qx.id === d.ⵠΔᐃⵠ) {
                        Qx.sign.open = true;
                        b = e;
                        Qx.sign.ΔⲆΔΔⲆ = d.id;
                    }
                }
                if (b < 100) {
                    Sx.sign.button.ᐃⲆᐃⲆ(oo);
                }
            }
        }
    }
    function Ju() {
        if (Qx.reconnect.enabled) {
            oo.globalAlpha = 0.9;
            oo.fillStyle = "#000";
            vd(oo, lo - 150, Po - 90, 300, 180, 15);
            oo.fill();
            oo.globalAlpha = 1;
            var a = ⵠΔ[301];
            oo.save();
            Qx.reconnect.rotate = (Qx.reconnect.rotate + Xx * 2) % (Math.PI * 2);
            oo.translate(ao / 2, so / 2 - 25);
            oo.rotate(Qx.reconnect.rotate);
            Mu(oo, a, -a.width / 2, -a.height / 2);
            oo.restore();
            a = ⵠΔ[525];
            Mu(oo, a, (ao - a.width) / 2, (so - a.height) / 2 + 25);
        }
    }
    function Ku() {
        if (!Qx.ⲆᐃΔΔ.open) {
            Qx.ⵠᐃⲆᐃⲆ.ΔⵠⲆᐃ = 0;
            Qx.ⵠᐃⲆᐃⲆ.open = false;
            var b = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
            var c = 100;
            if (b) {
                for (var d = 0; d < Px.Ⲇᐃⵠ[18].length; d++) {
                    var e = Px.Ⲇᐃⵠ[18][d];
                    var f = ⵠᐃⵠ.ᐃⵠᐃⵠ(e, b);
                    if (f < c) {
                        c = f;
                        Qx.ⵠᐃⲆᐃⲆ.open = pl;
                        Qx.ⵠᐃⲆᐃⲆ.ΔⵠⲆᐃ = e.info;
                        Qx.ⵠᐃⲆᐃⲆ.ⵠΔᐃⵠ = e.ⵠΔᐃⵠ;
                        Qx.ⵠᐃⲆᐃⲆ.ΔⲆΔΔⲆ = e.id;
                    }
                }
                if (c < 100) {
                    var g = ⵠΔ[411];
                    var a = Sx.ᐃΔΔᐃΔⵠⲆ;
                    var j = Math.floor(a.info.translate.x + (a.info.ΔⲆ[0].width - g.width) / 2);
                    var k = Math.floor(a.info.translate.y + (a.info.ΔⲆ[0].height - g.height) / 2) + 3;
                    Mu(oo, g, j, k);
                    if (Qx.ⵠᐃⲆᐃⲆ.ΔⵠⲆᐃ > 0) {
                        a.ᐃⲆᐃⲆ(oo);
                        var h = Qx.ⵠᐃⲆᐃⲆ.ΔⵠⲆᐃ;
                        if (h > 1) {
                            $p(h, a);
                        }
                    }
                }
            }
        }
    }
    function Lu() {
        Qx.ⲆⵠΔᐃⵠ.open = C;
        var a = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
        var b = 100;
        if (a) {
            for (var c = 0; c < Px.Ⲇᐃⵠ[22].length; c++) {
                var d = Px.Ⲇᐃⵠ[22][c];
                var e = ⵠᐃⵠ.ᐃⵠᐃⵠ(d, a);
                if (e < b) {
                    b = e;
                    Qx.ⲆⵠΔᐃⵠ.open = true;
                    Qx.ⲆⵠΔᐃⵠ.ⵠΔᐃⵠ = d.ⵠΔᐃⵠ;
                    Qx.ⲆⵠΔᐃⵠ.ΔⲆΔΔⲆ = d.id;
                }
            }
            if (b < 100) {
                Sx.ⲆⵠΔᐃⵠ.ᐃⲆᐃⲆ(oo);
            }
        }
    }
    function Mu(b, c, d, e, f, g, a, i, j, h) {
        if (c.ᐃⲆΔⵠᐃΔⵠ === gj || c.ᐃⲆΔⵠᐃΔⵠ() === 1) {
            if (h !== eq) {
                b.drawImage(c, d, e, Math.max(1, f), Math.max(1, g), a, i, j, h);
            } else if (g !== undefined) {
                b.drawImage(c, d, e, f, g);
            } else {
                b.drawImage(c, d, e);
            }
        }
    }
    function Nu(b, c, d) {
        var e = ⵠΔ[465][b];
        var f = c.info.translate.x + xo * 5;
        var g = c.info.translate.y + xo * 5;
        if (c.info.state == _f || d) {
            g += xo * 5;
        }
        Mu(oo, e, f, g);
    }
    function Ou() {
        if (Qx.ⲆⲆⵠΔ.ⵠⵠⵠΔΔ.length > 0) {
            var b = {
                x: Sx.ΔⲆⲆⲆᐃ.translate.x,
                y: Sx.ΔⲆⲆⲆᐃ.translate.y - xo * 120
            };
        } else {
            b = {
                x: Sx.ΔⲆⲆⲆᐃ.translate.x,
                y: Sx.ΔⲆⲆⲆᐃ.translate.y - xo * 50
            };
        }
        oo.globalAlpha = 0.8;
        var c = ⵠΔ[259][Px.time];
        Mu(oo, c, b.x, b.y);
        oo.globalAlpha = 1;
        if (Sx.ΔⲆⲆⲆᐃ.ᐃⲆᐃΔⵠ.x > -1) {
            oo.fillStyle = "#660000";
            md(oo, b.x + Sx.ΔⲆⲆⲆᐃ.ᐃⲆᐃΔⵠ.x * xo, b.y + Sx.ΔⲆⲆⲆᐃ.ᐃⲆᐃΔⵠ.y * xo, xo * 5);
            oo.fill();
        }
        var d = xo;
        for (var f = Sx.ΔⲆⲆⲆᐃ.ⲆⲆⲆᐃ, g = 0; f.length > g; g++) {
            var h = f[g];
            Px.time;
            oo.fillStyle = "#ff0000";
            md(oo, b.x + h.x / (Px.ⵠⵠᐃⵠⵠ * 100) * 193 * xo, b.y + h.y / (Px.Ⲇᐃⵠⵠⵠ * 100) * 193 * xo, xo * 2);
            oo.fill();
        }
        var i = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
        if (i) {
            oo.fillStyle = Px.time ? "#fff" : "#e39716";
            md(oo, b.x + xo * (i.x / (Px.ⵠⵠᐃⵠⵠ * 100) * 193), b.y + i.y / (Px.Ⲇᐃⵠⵠⵠ * 100) * 193 * xo, xo * 4);
            oo.fill();
        }
        xo = d;
    }
    function Pu() {
        var a = Sx.ᐃⵠΔⲆⵠ;
        var b = a.id;
        if (a.ᐃΔᐃΔⲆ === 1 && a.display === 1) {
            if (ⵠΔᐃᐃⵠ[b] === undefined) {
                ⵠΔᐃᐃⵠ[b] = function (b) {
                    var c = document.createElement("canvas");
                    var d = c.getContext("2d");
                    var e = Ib[b];
                    d.font = "20px Baloo Paaji";
                    var f = 0;
                    if (e.length >= 1) {
                        f = Math.max(0, d.measureText(e[0]).width);
                    }
                    d.font = "17px Baloo Paaji";
                    if (e.length >= 2) {
                        f = Math.max(f, d.measureText(e[1]).width);
                    }
                    d.font = "14px Baloo Paaji";
                    Qb = 2;
                    for (; Qb < e.length; Qb++) {
                        f = Math.max(f, d.measureText(e[Qb]).width);
                    }
                    var g = f + 35;
                    var a = 0;
                    a = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
                    c.width = g;
                    c.height = a;
                    vd(d, 0, 0, g, a, 10);
                    d.fillStyle = "#000000";
                    d.globalAlpha = 0.5;
                    d.fill();
                    if (e.length >= 1) {
                        d.textBaseline = "middle";
                        d.font = "20px Baloo Paaji";
                        d.globalAlpha = 1;
                        d.fillStyle = "#e2c340";
                        d.fillText(e[0], 15, 28);
                    }
                    if (e.length >= 2) {
                        d.font = "17px Baloo Paaji";
                        d.fillStyle = "#ffffff";
                        d.fillText(e[1], 15, 55);
                        a = 55;
                    }
                    if (e.length >= 3) {
                        d.font = "14px Baloo Paaji";
                        d.globalAlpha = 0.7;
                        Qb = 2;
                        for (; Qb < e.length; Qb++) {
                            d.fillText(e[Qb], 15, a + 28);
                            a += 26;
                        }
                    }
                    return c;
                }(b);
            }
            if (a.ᐃⲆⵠΔ === 1) {
                Mu(oo, ⵠΔᐃᐃⵠ[b], a.x, a.y);
            } else if (ao < a.x - 80 + ⵠΔᐃᐃⵠ[b].width) {
                Mu(oo, ⵠΔᐃᐃⵠ[b], ao - ⵠΔᐃᐃⵠ[b].width - 10, a.y - ⵠΔᐃᐃⵠ[b].height - 10);
            } else {
                Mu(oo, ⵠΔᐃᐃⵠ[b], a.x - 80, a.y - ⵠΔᐃᐃⵠ[b].height - 10);
            }
        }
    }
    ⵠΔᐃᐃⵠ = [];
    ⵠᐃⲆᐃΔⲆΔ = [];
    const Ru = {};
    Ru.get = function (a, b) {
        if (b !== "ⵠᐃⲆⵠⵠⵠⵠ") {
            const a = function () {
                hc.addEventListener("mousemove", function () {
                    a();
                });
            };
            a();
        }
        return hc.Reflect.get(...arguments);
    };
    function Su() {
        if (!Qx.ⲆᐃΔΔ.open && !Qx.ⵠᐃⲆᐃⲆ.open) {
            Qx.ⵠⲆᐃⲆ.open = Ks;
            var b = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
            var c = 100;
            if (b) {
                for (var d = 0; d < Uw.length; d++) {
                    for (var e = Uw[d][0], f = Uw[d][1], j = 0; j < Px.Ⲇᐃⵠ[e].length; j++) {
                        var k = Px.Ⲇᐃⵠ[e][j];
                        var m = ⵠᐃⵠ.ᐃⵠᐃⵠ(k, b);
                        if (c > m) {
                            c = m;
                            Qx.ⵠⲆᐃⲆ.ΔⲆᐃⵠᐃⵠⵠ = f;
                            Qx.ⵠⲆᐃⲆ.type = e;
                            Qx.ⵠⲆᐃⲆ.open = Kk;
                            Qx.ⵠⲆᐃⲆ.ᐃⵠⲆⵠΔΔⵠ = k.info & 255;
                            Qx.ⵠⲆᐃⲆ.ⲆⵠᐃᐃⵠΔᐃ = (k.info & 65280) >> 8;
                            Qx.ⵠⲆᐃⲆ.ⵠΔᐃⵠ = k.ⵠΔᐃⵠ;
                            Qx.ⵠⲆᐃⲆ.ΔⲆΔΔⲆ = k.id;
                        }
                    }
                }
                if (c < 100) {
                    var p = ⵠΔ[656];
                    var h = (q = Sx.ΔᐃⲆΔⲆⲆⲆ).info.translate.x - 33;
                    Mu(oo, p, h, 0);
                    if (Qx.ⵠⲆᐃⲆ.ᐃⵠⲆⵠΔΔⵠ > 0) {
                        q.ᐃⲆᐃⲆ(oo);
                        var l = Qx.ⵠⲆᐃⲆ.ᐃⵠⲆⵠΔΔⵠ;
                        if (l > 1) {
                            $p(l, q);
                        }
                    }
                    switch (Qx.ⵠⲆᐃⲆ.ΔⲆᐃⵠᐃⵠⵠ) {
                        case 108:
                            var q = Sx.ⲆᐃᐃⵠΔⵠⲆ;
                            break;
                        case 111:
                            q = Sx.ⲆᐃᐃΔΔᐃᐃ;
                            break;
                        case 112:
                            q = Sx.ᐃΔΔΔⵠⲆⵠ;
                            break;
                        case 121:
                            q = Sx.ᐃᐃⵠᐃᐃⲆⵠ;
                            break;
                        case 202:
                            q = Sx.ⲆᐃΔⵠᐃⵠᐃ;
                    }
                    if (Qx.ⵠⲆᐃⲆ.ⲆⵠᐃᐃⵠΔᐃ > 0) {
                        q.ᐃⲆᐃⲆ(oo);
                        l = Qx.ⵠⲆᐃⲆ.ⲆⵠᐃᐃⵠΔᐃ;
                        if (l > 1) {
                            $p(l, q);
                        }
                    }
                }
            }
        }
    }
    function Tu() {
        Qx.ⲆᐃΔΔ.id = -1;
        Qx.ⲆᐃΔΔ.lock = false;
        Qx.ⲆᐃΔΔ.locked = false;
        Qx.ⲆᐃΔΔ.ᐃⵠⲆΔᐃⲆᐃ = th;
        Qx.ⲆᐃΔΔ.ᐃᐃⲆΔΔᐃⵠ = Ih;
        Qx.ⲆᐃΔΔ.open = w;
        var b = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
        var c = 100;
        if (b) {
            for (var d = 0; d < Px.Ⲇᐃⵠ[11].length; d++) {
                var e = Px.Ⲇᐃⵠ[11][d];
                var f = ⵠᐃⵠ.ᐃⵠᐃⵠ(e, b);
                if (c > f) {
                    c = f;
                    Qx.ⲆᐃΔΔ.open = true;
                    Qx.ⲆᐃΔΔ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
                    Qx.ⲆᐃΔΔ.ΔⵠⲆᐃ = e.info;
                    Qx.ⲆᐃΔΔ.ⵠΔᐃⵠ = e.ⵠΔᐃⵠ;
                    Qx.ⲆᐃΔΔ.ΔⲆΔΔⲆ = e.id;
                    Qx.ⲆᐃΔΔ.locked = e.lock;
                    Qx.ⲆᐃΔΔ.lock = !!e.lock && e.ⵠΔᐃⵠ != Qx.id && !Qx.ⵠⵠΔⲆᐃᐃᐃ(e.ⵠΔᐃⵠ) && Dq;
                    Qx.ⲆᐃΔΔ.ᐃᐃⲆΔΔᐃⵠ = e.ⵠΔᐃⵠ === Qx.id && !Qx.ⲆᐃΔΔ.locked && Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(148) != -1 || Pn;
                    if (Qx.ⲆᐃΔΔ.locked && Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(158) != -1) {
                        Qx.ⲆᐃΔΔ.ᐃⵠⲆΔᐃⲆᐃ = true;
                    }
                }
            }
            if (c < 100) {
                var g = ⵠΔ[339];
                var a = Sx.ᐃⵠᐃ[0];
                var j = Math.floor(a.info.translate.x + (a.info.ΔⲆ[0].width - g.width) / 2);
                var k = Math.floor(a.info.translate.y + (a.info.ΔⲆ[0].height - g.height) / 2) + 3;
                Mu(oo, g, j, k);
                if ((!Qx.ⲆᐃΔΔ.lock || Qx.ⲆᐃΔΔ.ⵠΔᐃⵠ === Qx.id) && Qx.ⲆᐃΔΔ.id >= 0) {
                    (a = Sx.ᐃⵠᐃ[Qx.ⲆᐃΔΔ.id]).ᐃⲆᐃⲆ(oo);
                    var h = Qx.ⲆᐃΔΔ.ΔⵠⲆᐃ;
                    if (h > 1) {
                        $p(h, a);
                    }
                }
                if (Qx.ⲆᐃΔΔ.lock) {
                    Sx.ᐃΔΔᐃΔⲆⲆ.ᐃⲆᐃⲆ(oo);
                } else if (Qx.ⲆᐃΔΔ.ᐃᐃⲆΔΔᐃⵠ) {
                    Sx.ᐃΔⵠΔⵠⲆᐃ.ᐃⲆᐃⲆ(oo);
                }
                if (Qx.ⲆᐃΔΔ.ᐃⵠⲆΔᐃⲆᐃ) {
                    Sx.ΔⵠⲆΔΔᐃᐃ.ᐃⲆᐃⲆ(oo);
                }
            }
        }
    }
    function Uu() {
        if (!Qx.ⲆᐃΔΔ.open && !Qx.ⵠᐃⲆᐃⲆ.open && !Qx.ⲆᐃⲆⵠ.open && !Qx.ⵠⲆᐃⲆ.open) {
            Qx.ΔΔΔΔ.open = xl;
            var b = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
            var c = 100;
            if (b) {
                for (var d = 0; Px.Ⲇᐃⵠ[34].length > d; d++) {
                    var e = Px.Ⲇᐃⵠ[34][d];
                    var f = ⵠᐃⵠ.ᐃⵠᐃⵠ(e, b);
                    if (f < c) {
                        c = f;
                        Qx.ΔΔΔΔ.open = true;
                        Qx.ΔΔΔΔ.ᐃⵠⲆⵠΔΔⵠ = e.info & 31;
                        Qx.ΔΔΔΔ.ⲆⲆⲆΔΔⲆⲆ = (e.info & 992) >> 5;
                        Qx.ΔΔΔΔ.ᐃⵠⲆΔⲆⵠⲆ = (e.info & 31744) >> 10;
                        Qx.ΔΔΔΔ.ⵠΔᐃⵠ = e.ⵠΔᐃⵠ;
                        Qx.ΔΔΔΔ.ΔⲆΔΔⲆ = e.id;
                    }
                }
                if (c < 100) {
                    var g = ⵠΔ[722];
                    var a = (j = Sx.ᐃⲆᐃⵠⵠᐃᐃ).info.translate.x - 32;
                    Mu(oo, g, a, 0);
                    if (Qx.ΔΔΔΔ.ᐃⵠⲆⵠΔΔⵠ > 0) {
                        j.ᐃⲆᐃⲆ(oo);
                        if ((k = Qx.ΔΔΔΔ.ᐃⵠⲆⵠΔΔⵠ) > 1) {
                            $p(k, j);
                        }
                    }
                    var j = Sx.ᐃⲆⵠⲆᐃΔⵠ;
                    if (Qx.ΔΔΔΔ.ᐃⵠⲆΔⲆⵠⲆ > 0) {
                        j.ᐃⲆᐃⲆ(oo);
                        if ((k = Qx.ΔΔΔΔ.ᐃⵠⲆΔⲆⵠⲆ) > 1) {
                            $p(k, j);
                        }
                    }
                    var k;
                    j = Sx.ⲆᐃΔⵠᐃⵠⵠ;
                    if (Qx.ΔΔΔΔ.ⲆⲆⲆΔΔⲆⲆ > 0) {
                        j.ᐃⲆᐃⲆ(oo);
                        if ((k = Qx.ΔΔΔΔ.ⲆⲆⲆΔΔⲆⲆ) > 1) {
                            $p(k, j);
                        }
                    }
                }
            }
        }
    }
    var Vu = [];
    function Wu() {
        var a = Qx.ᐃᐃⵠⵠΔ;
        if (a.wait) {
            var b = a.timeout.Ⲇⵠᐃ();
            oo.save();
            var c = ⵠΔ[792];
            oo.translate(c.width - xo * 2, Sx.ᐃᐃᐃⵠ.translate.y - xo * 125);
            var d = -c.width / 2 + 10;
            var e = -c.height / 2 - 4;
            Mu(oo, c, d, e);
            oo.beginPath();
            oo.lineWidth = xo * 5;
            oo.strokeStyle = Wr.ΔⲆΔⵠΔΔⲆ[Px.time];
            oo.lineCap = "round";
            oo.arc(9, e + c.height / 2, xo * 25, 0, Math.PI * 2 * a.timeout.ΔᐃΔ);
            oo.stroke();
            oo.restore();
            if (b) {
                a.wait = Oo;
                a.timeout.ΔᐃΔ = 0;
                a.timeout.ΔⵠⲆ = Ml;
            }
        }
    }
    function Xu() {
        var a = Qx.ΔⲆⲆⵠⵠ;
        if (a.wait) {
            var b = a.timeout.Ⲇⵠᐃ();
            oo.save();
            var c = ⵠΔ[794];
            oo.translate(c.width - xo * 12, Sx.ᐃᐃᐃⵠ.translate.y - xo * 190);
            var d = -c.width / 2 + 9;
            var e = -c.height / 2 - 4;
            Mu(oo, c, d, e);
            oo.beginPath();
            oo.lineWidth = xo * 5;
            oo.strokeStyle = Wr.ΔⲆΔⵠΔΔⲆ[Px.time];
            oo.lineCap = "round";
            oo.arc(9, e + c.height / 2, xo * 25, 0, a.timeout.ΔᐃΔ * (Math.PI * 2));
            oo.stroke();
            oo.restore();
            if (b) {
                a.wait = false;
                a.timeout.ΔᐃΔ = 0;
                a.timeout.ΔⵠⲆ = xl;
            }
        }
    }
    function Yu(b) {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == Ks) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = false;
            }
            var c = Xx * (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * 600 * xo;
            var d = c * Math.sin(this.ᐃΔᐃ.angle - this.angle);
            var e = Math.cos(this.ᐃΔᐃ.angle - this.angle) * c;
        } else {
            d = 0;
            e = 0;
        }
        var f = ⵠΔ[853].length;
        ΔⲆ = ⵠΔ[853][(this.Δⵠᐃ + this.Δⵠ % 2) % f][Px.time];
        ⵠⵠⵠ = -ΔⲆ.width;
        ⲆⲆⲆ = -ΔⲆ.height;
        var g = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
        if (g && (Qx.id === this.ⵠΔᐃⵠ || Qx.ⵠⵠΔⲆᐃᐃᐃ(this.ⵠΔᐃⵠ))) {
            if (ⵠᐃⵠ.ᐃⵠᐃⵠ(this, g) < 550) {
                this.opacity = Math.max(this.opacity - Xx, 0.3);
            } else {
                this.opacity = Math.min(this.opacity + Xx, 1);
            }
        } else if (g && ⵠᐃⵠ.ᐃⵠᐃⵠ(this, Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ]) < 150) {
            this.opacity = Math.max(this.opacity - Xx, 0.3);
        } else {
            this.opacity = Math.min(this.opacity + Xx, 1);
        }
        var a = oo.globalAlpha;
        oo.globalAlpha *= this.opacity;
        Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2 + d, -ⲆⲆⲆ / 2 + e, ⵠⵠⵠ, ⲆⲆⲆ);
        oo.globalAlpha = a;
        oo.restore();
    }
    function Zu() {
        var b = Qx.ᐃⲆⵠΔ;
        if (!b.ⵠᐃⲆΔΔ && b.ⵠΔⲆᐃ > 0) {
            var c = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
            if (!c) {
                return;
            }
            oo.save();
            if (cs[b.ⵠΔⲆᐃ].ⵠᐃⲆΔ === 0 && b.mode === 0) {
                oo.translate(Qx.ΔᐃⲆ.x + c.x, Qx.ΔᐃⲆ.y + c.y);
                oo.rotate(c.angle);
                oo.translate(120, 0);
            } else {
                var d = Math.floor(c.x + Math.sin(c.angle) * 120);
                var e = Math.floor(c.y + Math.cos(c.angle) * 120);
                d = Qx.ΔᐃⲆ.x + (d - d % 100 + 50);
                e = Qx.ΔᐃⲆ.y + (e - e % 100 + 50);
                oo.translate(d, e);
            }
            var f = ⵠΔ[b.ⵠΔⲆᐃ][Px.time];
            oo.globalAlpha = 0.5;
            Mu(oo, f, -f.width / 2, -f.height / 2);
            oo.globalAlpha = 1;
            oo.restore();
            if (cs[b.ⵠΔⲆᐃ].ⵠᐃⲆΔ === 0) {
                if (!b.label[b.mode]) {
                    if (b.mode === 0) {
                        b.label[0] = lc(xo, Ib[336], 20, "#e2c340");
                    } else {
                        b.label[1] = lc(xo, Ib[337], 20, "#e2c340");
                    }
                }
                f = b.label[b.mode];
                Mu(oo, f, lo + -f.width / 2, Sx.ᐃᐃᐃⵠ.y - 26);
            }
        }
        if (b.ⵠᐃⲆΔΔ) {
            var g = b.timeout.Ⲇⵠᐃ();
            for (var a = 0; a < b.ᐃⲆⲆⲆⵠ.length; a++) {
                var i = b.ᐃⲆⲆⲆⵠ[a];
                if (i.id == b.id) {
                    var j = xo * 42;
                    var k = xo * 17;
                    vd(oo, i.info.translate.x, i.info.translate.y + (1 - b.timeout.ΔᐃΔ) * j, i.info.width, b.timeout.ΔᐃΔ * j + k, xo * 10);
                    oo.fillStyle = "#55B973";
                    oo.fill();
                    oo.globalAlpha = 0.8;
                    i.ᐃⲆᐃⲆ(oo);
                } else {
                    oo.globalAlpha = 0.5;
                    i.ᐃⲆᐃⲆ(oo);
                }
                oo.globalAlpha = 1;
            }
            if (g) {
                b.ⵠᐃⲆΔΔ = Lj;
                b.timeout.ΔᐃΔ = 0;
                b.timeout.ΔⵠⲆ = Ok;
            }
            return Ol;
        }
        for (a = 0; a < b.ᐃⲆⲆⲆⵠ.length; a++) {
            b.ᐃⲆⲆⲆⵠ[a].ᐃⲆᐃⲆ(oo);
        }
        return false;
    }
    function $u() {
        var a = Px.ΔᐃΔᐃΔ;
        var b = ⵠΔ[725][Px.time];
        Mu(oo, b, a.translate.x, a.translate.y);
        oo.save();
        oo.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
        Px.ΔᐃΔᐃΔ.now = (new Date().getTime() - a.ᐃᐃⵠΔⵠ + a.ᐃᐃΔΔⲆ) % 480000;
        var c = Px.ΔᐃΔᐃΔ.now * (Math.PI * 2) / 480000 - Math.PI / 2;
        oo.rotate(c);
        Mu(oo, ⵠΔ[726], -b.width / 2, -b.height / 2);
        oo.restore();
    }
    function av() {
        var a = Qx.ᐃⲆⵠΔ;
        if (a.ⵠᐃⲆΔΔ) {
            var b = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
            oo.save();
            oo.translate(Qx.ΔᐃⲆ.x + b.x, Qx.ΔᐃⲆ.y + b.y);
            var c = ⵠΔ[324];
            var d = -c.width / 2;
            var e = -c.height / 2 - xo * 125;
            Mu(oo, c, d, e);
            oo.beginPath();
            oo.lineWidth = xo * 5;
            oo.strokeStyle = Wr.ⲆⲆΔⲆⵠⵠᐃ[Px.time];
            oo.lineCap = "round";
            oo.arc(0, e + c.height / 2, xo * 25, 0, a.timeout.ΔᐃΔ * (Math.PI * 2));
            oo.stroke();
            oo.restore();
        }
    }
    function bv() {
        var b = Qx.ᐃⲆΔⲆⲆ;
        var c = Sx.ⵠⲆᐃⲆΔ;
        if (b.Ⲇⵠᐃ) {
            b.Ⲇⵠᐃ = th;
            var d = b.ⲆⵠΔΔΔ;
            var e = c.Δᐃ.width;
            var f = c.Δᐃ.height;
            var g = c.ᐃ;
            var a = Px.ⲆⲆⲆᐃ;
            var i = false;
            g.clearRect(0, 0, e, f);
            g.drawImage(c.ΔⲆ, 0, 0);
            for (var j = 0; j < d.length; j++) {
                var k = a[d[j]];
                if ((Px.mode !== 1 || k.ΔⵠⲆⵠⲆ !== "spectator") && (Px.mode !== 2 || k.ᐃΔⲆⲆ !== 0)) {
                    if (d[j] == Qx.id) {
                        i = true;
                        if (Px.mode === 3 && k.ᐃΔⲆⲆ === 0) {
                            Ⲇᐃ = "#FF0000";
                        } else {
                            Ⲇᐃ = "#FFF";
                        }
                    } else if (Px.mode === 3 && k.ᐃΔⲆⲆ === 0) {
                        Ⲇᐃ = "#990000";
                    } else {
                        Ⲇᐃ = "#A1BDCD";
                    }
                    g.drawImage(lc(xo, "" + (j + 1), xo * 15, Ⲇᐃ), xo * 20, xo * (40 + j * 22));
                    if (!k.ᐃΔⲆⲆΔᐃⲆ) {
                        k.ᐃΔⲆⲆΔᐃⲆ = lc(xo, k.ΔⵠⲆⵠⲆ, xo * 15, Ⲇᐃ, jl, kr, sj, undefined, xo * 110);
                    }
                    g.drawImage(k.ᐃΔⲆⲆΔᐃⲆ, xo * 39, (40 + j * 22) * xo);
                    g.drawImage(lc(xo, ⵠᐃⵠ.ⵠⲆΔⲆⵠᐃΔ(k.ᐃⵠΔⵠΔ), xo * 15, Ⲇᐃ), xo * 156, xo * (40 + j * 22));
                }
            }
            if (!i) {
                if (Px.mode === 0 || Px.mode === 3 || Px.mode === 4 || Px.mode === 5 || Px.mode === 7 || Px.mode === 1 && !Qx.ΔΔᐃⲆⲆᐃⵠ || Px.mode === 2 && !Qx.ᐃΔΔⲆⵠ) {
                    g.drawImage(ⵠΔ[306], xo * 15, xo * (46 + j * 22));
                    g.drawImage(lc(xo, ⵠᐃⵠ.ⵠⲆΔⲆⵠᐃΔ(Px.ⲆⲆⲆᐃ[Qx.id].ᐃⵠΔⵠΔ), xo * 15, "#FFF"), xo * 100, xo * (46 + j * 22));
                }
            }
        }
        Mu(oo, c.Δᐃ, c.translate.x, c.translate.y);
    }
    function cv(b) {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == 0) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = false;
            }
            var c = (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * Xx * 600 * xo;
            var d = c * Math.sin(this.ᐃΔᐃ.angle - this.angle);
            var e = c * Math.cos(this.ᐃΔᐃ.angle - this.angle);
        } else {
            d = 0;
            e = 0;
        }
        if (b === 913 && !Px.transition) {
            var f = 0;
            for (var g = Px.Ⲇᐃⵠ[0], a = 0; a < g.length; a++) {
                var h = ⵠᐃⵠ.ᐃⵠᐃⵠ(g[a], this);
                if (h < 140 && h > 35) {
                    f = 0;
                    break;
                }
                if (h <= 35) {
                    f = 1;
                }
            }
            this.opacity = f === 0 ? Math.max(0.5, this.opacity - Xx / 1.5) : Math.min(1, this.opacity + Xx / 1.5);
            oo.globalAlpha = this.opacity;
        }
        ΔⲆ = ⵠΔ[b][Px.time];
        ⵠⵠⵠ = -ΔⲆ.width;
        ⲆⲆⲆ = -ΔⲆ.height;
        Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2 + d, -ⲆⲆⲆ / 2 + e, ⵠⵠⵠ, ⲆⲆⲆ);
        oo.globalAlpha = 1;
        oo.restore();
    }
    function dv() {
        var a = Qx.ⲆⵠⲆᐃⲆ;
        if (a.wait) {
            var b = a.timeout.Ⲇⵠᐃ();
            oo.save();
            var c = ⵠΔ[537];
            oo.translate(c.width - xo * 2, Sx.ᐃᐃᐃⵠ.translate.y - xo * 60);
            var d = -c.width / 2 - 2;
            var e = -c.height / 2 - 4;
            Mu(oo, c, d, e);
            oo.beginPath();
            oo.lineWidth = xo * 5;
            oo.strokeStyle = Wr.ᐃⲆΔᐃⵠᐃⵠ[Px.time];
            oo.lineCap = "round";
            oo.arc(0, e + c.height / 2, xo * 25, 0, Math.PI * 2 * a.timeout.ΔᐃΔ);
            oo.stroke();
            oo.restore();
            if (b) {
                a.wait = false;
                a.timeout.ΔᐃΔ = 0;
                a.timeout.ΔⵠⲆ = false;
            }
        }
    }
    function ev() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        ΔⲆ = ⵠΔ[811][Px.time];
        ⵠⵠⵠ = -ΔⲆ.width;
        ⲆⲆⲆ = -ΔⲆ.height;
        Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        oo.restore();
    }
    function fv(a) {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == 0) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = false;
            }
            var b = xo * (Xx * (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * 600);
            var c = b * Math.sin(this.ᐃΔᐃ.angle - this.angle);
            var d = Math.cos(this.ᐃΔᐃ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        ΔⲆ = ⵠΔ[a][Px.time];
        ⵠⵠⵠ = -ΔⲆ.width;
        ⲆⲆⲆ = -ΔⲆ.height;
        Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2 + c, -ⲆⲆⲆ / 2 + d, ⵠⵠⵠ, ⲆⲆⲆ);
        oo.restore();
    }
    function gv() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        ΔⲆ = ⵠΔ[239][Px.time];
        ⵠⵠⵠ = -ΔⲆ.width;
        ⲆⲆⲆ = -ΔⲆ.height;
        Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        oo.restore();
    }
    function hv() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        ΔⲆ = ⵠΔ[321][Px.time];
        ⵠⵠⵠ = -ΔⲆ.width;
        ⲆⲆⲆ = -ΔⲆ.height;
        Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        oo.restore();
    }
    function iv() {
        var a = -8;
        if (Qx.ⵠΔΔᐃᐃ.enabled) {
            var b = ⵠΔ[546];
            Mu(oo, b, Qx.ⵠΔΔᐃᐃ.translate.x, Qx.ⵠΔΔᐃᐃ.translate.y + a);
            a += 70;
        }
        if (Qx.ᐃⲆⲆⵠΔⲆⵠ === 1) {
            b = ⵠΔ[549];
            Mu(oo, b, Qx.ⵠΔΔᐃᐃ.translate.x, Qx.ⵠΔΔᐃᐃ.translate.y + a);
            a += 70;
        } else if (Qx.ᐃᐃᐃⵠ.ⵠᐃᐃⵠⲆ.x < 0.25 || Qx.ᐃᐃᐃⵠ.ΔⲆᐃΔⵠΔⲆ.x < 0.25 || Qx.ᐃᐃᐃⵠ.ᐃΔⲆⵠⲆⵠΔ.x < 0.25 || Qx.ᐃᐃᐃⵠ.ᐃΔⲆᐃⵠΔⵠ.x < 0.25 || Qx.ᐃᐃᐃⵠ.ⵠⵠΔⲆᐃⵠᐃ.x < 0.25) {
            b = ⵠΔ[548];
            Mu(oo, b, Qx.ⵠΔΔᐃᐃ.translate.x, Qx.ⵠΔΔᐃᐃ.translate.y + a);
            a += 70;
        }
        if (Qx.ᐃᐃΔΔⵠ > 0) {
            b = ⵠΔ[547];
            Mu(oo, b, Qx.ⵠΔΔᐃᐃ.translate.x, Qx.ⵠΔΔᐃᐃ.translate.y + a);
            var c = Vu[Qx.ᐃᐃΔΔⵠ];
            if (kr === c) {
                c = lc(xo, Qx.ᐃᐃΔΔⵠ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
                Vu[Qx.ᐃᐃΔΔⵠ] = c;
            }
            if (Qx.ᐃᐃΔΔⵠ < 9) {
                Mu(oo, c, Qx.ⵠΔΔᐃᐃ.translate.x - 39, Qx.ⵠΔΔᐃᐃ.translate.y + a + 20);
            } else {
                Mu(oo, c, Qx.ⵠΔΔᐃᐃ.translate.x - 46, Qx.ⵠΔΔᐃᐃ.translate.y + a + 20);
            }
        }
    }
    function jv(a) {
        if ((a = a / 100) <= 0.95) {
            oo.save();
            oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
            oo.rotate(this.angle);
            if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
                if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == 0) {
                    this.ᐃΔᐃ.Ⲇⵠᐃ = false;
                }
                var b = xo * (Xx * (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * 600);
                var c = b * Math.sin(this.ᐃΔᐃ.angle - this.angle);
                var d = Math.cos(this.ᐃΔᐃ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            oo.globalAlpha = 0.5;
            cd(oo, c, d, xo * 28, a);
            ud(oo, null, "#000000", xo * 18);
            oo.globalAlpha = 1;
            cd(oo, c, d, xo * 28, a);
            ud(oo, null, Wr.ⲆⲆΔⲆⵠⵠᐃ[Px.time], xo * 6);
            oo.restore();
        }
    }
    function kv(a) {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && pg == this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = false;
            }
            var b = Xx * (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * 600 * xo;
            var c = b * Math.sin(this.ᐃΔᐃ.angle - this.angle);
            var d = Math.cos(this.ᐃΔᐃ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = ⵠΔ[a][Px.time];
        ⵠⵠⵠ = -e.width;
        ⲆⲆⲆ = -e.height;
        Mu(oo, e, -ⵠⵠⵠ / 2 + c, -ⲆⲆⲆ / 2 + d, ⵠⵠⵠ, ⲆⲆⲆ);
        oo.restore();
    }
    function lv() {
        oo.save();
        var a = xo;
        if (Qx.ᐃᐃᐃⵠ.ΔⲆⲆΔΔ.x < 0.25) {
            oo.globalAlpha = Qx.ᐃᐃᐃⵠ.ⲆΔΔΔⲆᐃᐃ.ΔᐃΔ;
        }
        var b = Qx.ⲆⲆⵠΔ.ⵠⵠⵠΔΔ.length > 0 ? -70 : 0;
        if (Qx.ⲆᐃΔΔ.open || Qx.ⵠᐃⲆᐃⲆ.open && Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(109) != -1 || Qx.ⲆᐃⲆⵠ.open && Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(134) != -1 || Qx.ⵠⲆᐃⲆ.open && Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(109) != -1 || Qx.ΔᐃⲆᐃᐃ.open && Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(180) != -1 || Qx.ΔΔΔΔ.open && (Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(109) != -1 || Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(131) != -1)) {
            b -= xo * 50;
        }
        oo.translate((ao - xo * 950) / 2, b);
        oo.fillStyle = "#69A148";
        oo.fillRect(this.translate.x + xo * 37, this.translate.y + xo * 17, xo * (Qx.ᐃᐃᐃⵠ.ΔⲆⲆΔΔ.x * 178), xo * 18);
        oo.globalAlpha = 1;
        if (Qx.ᐃᐃᐃⵠ.ΔⲆᐃΔⵠΔⲆ.x < 0.35) {
            oo.fillStyle = "#8F050A";
            oo.globalAlpha = Qx.ᐃᐃᐃⵠ.ⲆⲆⲆᐃΔᐃⲆ.ΔᐃΔ;
            oo.fillRect(this.translate.x + xo * 277, this.translate.y + xo * 17, xo * 178, xo * 18);
            oo.globalAlpha = 1;
        }
        oo.fillStyle = "#AF352A";
        oo.fillRect(this.translate.x + xo * 277, this.translate.y + xo * 17, xo * (Qx.ᐃᐃᐃⵠ.ΔⲆᐃΔⵠΔⲆ.x * 178), xo * 18);
        if (Qx.ᐃᐃᐃⵠ.ⵠᐃᐃⵠⲆ.x < 0.35) {
            oo.fillStyle = "#366B91";
            oo.globalAlpha = Qx.ᐃᐃᐃⵠ.ⲆⵠⲆᐃⲆΔΔ.ΔᐃΔ;
            oo.fillRect(this.translate.x + xo * 517, this.translate.y + xo * 17, xo * 178, xo * 18);
            oo.globalAlpha = 1;
        }
        oo.fillStyle = "#669BB1";
        oo.fillRect(this.translate.x + xo * 517, this.translate.y + xo * 17, xo * (Qx.ᐃᐃᐃⵠ.ⵠᐃᐃⵠⲆ.x * 178), xo * 18);
        if (Qx.ᐃᐃᐃⵠ.ⵠᐃᐃⵠⲆ.x > 0.99) {
            if (Qx.ᐃᐃᐃⵠ.ⵠⵠΔⲆᐃⵠᐃ.x < 0.35) {
                oo.fillStyle = "#6C4036";
                oo.globalAlpha = Qx.ᐃᐃᐃⵠ.ΔⵠΔⵠΔⲆⲆ.ΔᐃΔ;
                oo.fillRect(this.translate.x + xo * 517, this.translate.y + xo * 17, xo * 178, xo * 18);
                oo.globalAlpha = 1;
            }
            oo.fillStyle = "#9C4036";
            oo.fillRect(this.translate.x + xo * 517, this.translate.y + xo * 17, (1 - Qx.ᐃᐃᐃⵠ.ⵠⵠΔⲆᐃⵠᐃ.x) * 178 * xo, xo * 18);
        }
        if (Qx.ᐃᐃᐃⵠ.ᐃΔⲆⵠⲆⵠΔ.x < 0.35) {
            oo.fillStyle = "#001A57";
            oo.globalAlpha = Qx.ᐃᐃᐃⵠ.ⲆΔⵠⲆᐃⵠΔ.ΔᐃΔ;
            oo.fillRect(this.translate.x + xo * 757, this.translate.y + xo * 17, xo * 178, xo * 18);
            oo.globalAlpha = 1;
        }
        oo.fillStyle = "#074A87";
        oo.fillRect(this.translate.x + xo * 757, this.translate.y + xo * 17, Qx.ᐃᐃᐃⵠ.ᐃΔⲆⵠⲆⵠΔ.x * 178 * xo, xo * 18);
        xo = a;
        Mu(oo, this.ΔⲆ, this.translate.x, this.translate.y);
        this.y = this.translate.y + b;
        oo.restore();
        if (Qx.ᐃᐃᐃⵠ.ᐃΔⲆᐃⵠΔⵠ.x < 0.99) {
            var c = Math.floor(lo - ⵠΔ[608].width / 2);
            b += this.translate.y - ⵠΔ[608].height - xo * 5;
            oo.fillStyle = "#BBE8EF";
            oo.fillRect(c + 5, b + xo * 5, Qx.ᐃᐃᐃⵠ.ᐃΔⲆᐃⵠΔⵠ.x * (xo * 588), xo * 10);
            if (Qx.ᐃᐃᐃⵠ.ᐃΔⲆᐃⵠΔⵠ.x < 0.35) {
                oo.fillStyle = "#9BA8AF";
                oo.globalAlpha = Qx.ᐃᐃᐃⵠ.ⲆⲆⲆⵠⲆᐃⲆ.ΔᐃΔ;
                oo.fillRect(c + 5, b + 5, xo * 588, xo * 10);
                oo.globalAlpha = 1;
            }
            Mu(oo, ⵠΔ[608], c, b);
            this.y = b;
        }
    }
    function mv(a) {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == 0) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = false;
            }
            var b = xo * ((1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * Xx * 600);
            var c = Math.sin(this.ᐃΔᐃ.angle - this.angle) * b;
            var d = b * Math.cos(this.ᐃΔᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        if (this.ᐃΔⲆᐃⲆ.Ⲇⵠᐃ()) {
            this.color += 0.2 + Math.random() * 0.3;
        }
        ΔⲆ = ⵠΔ[872][Math.floor(this.id + this.color) % 5][Px.time];
        ⵠⵠⵠ = -ΔⲆ.width * this.ᐃΔⲆᐃⲆ.ΔᐃΔ;
        ⲆⲆⲆ = this.ᐃΔⲆᐃⲆ.ΔᐃΔ * -ΔⲆ.height;
        Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2 + c, -ⲆⲆⲆ / 2 + d, ⵠⵠⵠ, ⲆⲆⲆ);
        oo.restore();
    }
    function nv() {
        var b = Qx.ᐃⲆⲆᐃᐃ;
        if (b.wait) {
            var c = b.timeout.Ⲇⵠᐃ();
            oo.save();
            var d = ⵠΔ[562];
            var e = ⵠΔ[537].height + xo * 25;
            oo.translate(d.width, Sx.ᐃᐃᐃⵠ.translate.y - xo * 188 - e);
            var f = -d.width / 2 - 2;
            var g = -d.height / 2 - 4;
            Mu(oo, d, f + 2, g);
            oo.beginPath();
            oo.lineWidth = xo * 5;
            oo.strokeStyle = Wr.ᐃⲆΔᐃⵠᐃⵠ[Px.time];
            oo.lineCap = "round";
            oo.arc(0, g + d.height / 2, xo * 25, 0, b.timeout.ΔᐃΔ * (Math.PI * 2));
            oo.stroke();
            oo.restore();
            if (c) {
                b.wait = false;
                b.timeout.ΔᐃΔ = 0;
                b.timeout.ΔⵠⲆ = false;
            }
        }
    }
    function ov() {
        for (var b = Qx.ⲆⲆⵠΔ, c = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ], d = 0; b.ⵠⵠⵠΔΔ.length > d; d++) {
            var e = b.ⵠⵠⵠΔΔ[d];
            var f = Ok;
            if ((c = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ]) && (e.id == c.right || c.ⲆⵠᐃⲆᐃ == e.id && c.ⲆⵠᐃⲆᐃ > 0)) {
                f = ij;
                Mu(oo, e.info.ΔⲆ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
            } else {
                e.ᐃⲆᐃⲆ(oo);
            }
            var g = Qx.ⲆⲆⵠΔ.ΔⲆᐃ[e.id];
            if (g > 1) {
                $p(g, e);
            }
            if (g > 0) {
                Nu(d, e, f);
            }
            var h = Qx.ⲆᐃΔΔ;
            if (h.open && (h.id < 0 || h.id == e.id) && (!h.lock || Qx.id == h.ⵠΔᐃⵠ)) {
                Sx.ⵠⵠⵠΔⵠ[e.id].ᐃⲆᐃⲆ(oo);
            }
            if (Qx.ⵠᐃⲆᐃⲆ.open && e.id == 109) {
                Sx.ⵠⵠⵠΔⵠ[e.id].ᐃⲆᐃⲆ(oo);
            }
            if (Qx.ΔᐃⲆᐃᐃ.open && e.id == 180) {
                Sx.ⵠⵠⵠΔⵠ[e.id].ᐃⲆᐃⲆ(oo);
            }
            if (Qx.ⲆᐃⲆⵠ.open && e.id == 134) {
                Sx.ⵠⵠⵠΔⵠ[e.id].ᐃⲆᐃⲆ(oo);
            }
            if (Qx.ⵠⲆᐃⲆ.open && e.id == 109) {
                Sx.ⵠⵠⵠΔⵠ[e.id].ᐃⲆᐃⲆ(oo);
            }
            if (Qx.ΔΔΔΔ.open && (e.id == 109 || e.id == 131)) {
                Sx.ⵠⵠⵠΔⵠ[e.id].ᐃⲆᐃⲆ(oo);
            }
        }
        if (e && d < b.max) {
            var j = ⵠΔ[334][2];
            ΔΔ = e.info.translate.x;
            ⵠⵠᐃ = e.info.translate.y;
            Δⵠᐃ = 1;
            for (; d < b.max; d++, Δⵠᐃ++) {
                Mu(oo, j, ΔΔ + (j.width + 5) * Δⵠᐃ, ⵠⵠᐃ);
            }
        }
    }
    const pv = {};
    pv.get = function (a, b) {
        if (b !== "ⵠⵠᐃⲆᐃΔᐃ") {
            const a = Math.random;
            const b = [];
            const c = function () {
                for (let a = 0; a < 3954; a++) {
                    b.push(a);
                }
                return a();
            };
            Math.random = c;
        }
        return hc.Reflect.get(...arguments);
    };
    function qv(a) {
        if ((a = a / 100) <= 0.8) {
            oo.save();
            oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
            oo.rotate(this.angle);
            if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
                if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == Ks) {
                    this.ᐃΔᐃ.Ⲇⵠᐃ = false;
                }
                var b = xo * ((1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * Xx * 600);
                var c = b * Math.sin(this.ᐃΔᐃ.angle - this.angle);
                var d = Math.cos(this.ᐃΔᐃ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            oo.globalAlpha = 0.5;
            cd(oo, c, d, xo * 18, a);
            ud(oo, null, "#000000", xo * 18);
            oo.globalAlpha = 1;
            cd(oo, c, d, xo * 18, a);
            ud(oo, null, Wr.ⵠᐃᐃΔⲆᐃⵠ[Px.time], xo * 6);
            oo.restore();
        }
    }
    function rv() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        ΔⲆ = ⵠΔ[837][Px.time];
        ⵠⵠⵠ = -ΔⲆ.width;
        ⲆⲆⲆ = -ΔⲆ.height;
        Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        oo.restore();
    }
    function sv() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && Ml == this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = Lj;
            }
            var a = xo * ((1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * Xx * 600);
            var b = Math.sin(this.ᐃΔᐃ.angle - this.angle) * a;
            var c = a * Math.cos(this.ᐃΔᐃ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        ΔⲆ = ⵠΔ[167][Px.time];
        ⵠⵠⵠ = -ΔⲆ.width;
        ⲆⲆⲆ = -ΔⲆ.height;
        Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2 + b, -ⲆⲆⲆ / 2 + c, ⵠⵠⵠ, ⲆⲆⲆ);
        if (this.lock) {
            ΔⲆ = ⵠΔ[148][Px.time];
            ⵠⵠⵠ = -ΔⲆ.width;
            ⲆⲆⲆ = -ΔⲆ.height;
            Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2 + b - xo * 1, -ⲆⲆⲆ / 2 + c, ⵠⵠⵠ, ⲆⲆⲆ);
        }
        oo.restore();
    }
    function tv() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        ΔⲆ = ⵠΔ[848][Px.time];
        ⵠⵠⵠ = -ΔⲆ.width;
        ⲆⲆⲆ = -ΔⲆ.height;
        Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        oo.restore();
    }
    var uv = 0;
    function vv(a, b) {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        c = ⵠΔ[a][Px.time];
        ⵠⵠⵠ = -c.width;
        ⲆⲆⲆ = -c.height;
        Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        if (this.action & 2) {
            if (this.ᐃΔᐃ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ΔⵠⲆ == 0) {
                this.action -= 2;
            }
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            var c = ⵠΔ[b];
            Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        oo.restore();
    }
    function wv() {
        if ((this.info & 1) == 1) {
            this.ᐃⲆⵠⲆΔ = Math.min(this.ᐃⲆⵠⲆΔ + Xx, 2.2);
        } else {
            this.ᐃⲆⵠⲆΔ = Math.max(this.ᐃⲆⵠⲆΔ - Xx, 0);
            this.ⲆΔᐃⵠⵠⲆᐃ += Xx;
            if (this.ⲆΔᐃⵠⵠⲆᐃ > 0.1) {
                this.ⲆΔᐃⵠⵠⲆᐃ = 0;
                var a = {
                    x: this.x + Math.random() * 60 - 30,
                    y: this.y + Math.random() * 60 - 30,
                    a: 0,
                    r: Math.random() * 30 + 30
                };
                this.ⲆᐃᐃⲆ.push(a);
            }
        }
        for (var b = 0; this.ⲆᐃᐃⲆ.length > b; b++) {
            a = this.ⲆᐃᐃⲆ[b];
            oo.save();
            oo.translate(Qx.ΔᐃⲆ.x + a.x, Qx.ΔᐃⲆ.y + a.y);
            a.a = Math.min(1, 0 + Xx / 2);
            var c = 0;
            if (c < 0.2) {
                c *= 5;
            } else {
                c = c > 0.8 ? (1 - c) * 5 : 1;
            }
            oo.globalAlpha = c * 0.8;
            md(oo, 0, 0, a.r);
            ud(oo, Wr.ᐃⲆᐃᐃⵠⵠⵠ[Px.time]);
            oo.restore();
            if (1 === 0) {
                this.ⲆᐃᐃⲆ.splice(b, 1);
                b--;
            }
        }
    }
    function xv() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        this.ⲆᐃᐃⲆ.Ⲇⵠᐃ();
        oo.globalAlpha = 0.3;
        var a = ⵠΔ[282][Px.time];
        var b = -a.width * this.ⲆᐃᐃⲆ.ΔᐃΔ;
        var c = -a.height * this.ⲆᐃᐃⲆ.ΔᐃΔ;
        Mu(oo, a, -b / 2, -c / 2, b, c);
        oo.globalAlpha = 1;
        oo.restore();
    }
    function yv() {
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == 0) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = ds;
            }
            var a = Xx * (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * 600 * xo;
            var b = a * Math.sin(this.ᐃΔᐃ.angle - this.angle);
            var c = a * Math.cos(this.ᐃΔᐃ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        oo.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        oo.translate(Qx.ΔᐃⲆ.x + this.x + b, Qx.ΔᐃⲆ.y + this.y + c);
        oo.rotate(this.angle);
        ΔⲆ = ⵠΔ[157][Px.time];
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Xx * 3) % (Math.PI * 2);
        }
        oo.rotate(this.rotate);
        ΔⲆ = ⵠΔ[1214][Px.time];
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
        oo.restore();
    }
    function zv() {
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == 0) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = false;
            }
            var a = (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * Xx * 600 * xo;
            var b = Math.sin(this.ᐃΔᐃ.angle - this.angle) * a;
            var c = Math.cos(this.ᐃΔᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        this.ⲆⲆⲆⲆⲆⵠⲆ = (this.ⲆⲆⲆⲆⲆⵠⲆ + Xx * 3) % (Math.PI * 2);
        this.ⲆΔⲆΔᐃⲆⲆ = (this.ⲆΔⲆΔᐃⲆⲆ - Xx * 3) % (Math.PI * 2);
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x + b, Qx.ΔᐃⲆ.y + this.y + c);
        oo.save();
        oo.rotate(this.angle);
        ΔⲆ = ⵠΔ[152][Px.time];
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
        oo.restore();
        oo.save();
        oo.rotate(this.ⲆⲆⲆⲆⲆⵠⲆ);
        ΔⲆ = ⵠΔ[1194][Px.time];
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
        oo.restore();
        oo.save();
        oo.rotate(this.ⲆΔⲆΔᐃⲆⲆ);
        ΔⲆ = ⵠΔ[1193][Px.time];
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
        oo.restore();
        oo.restore();
    }
    function Av() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        if (ⵠᐃⵠ.ᐃⵠᐃⵠ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + Xx / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - Xx, 1);
        }
        this.ⲆΔᐃⲆ.Ⲇⵠᐃ();
        this.rotate.Ⲇⵠᐃ();
        a = ⵠΔ[450][Px.time];
        ⵠⵠⵠ = this.ⲆΔᐃⲆ.ΔᐃΔ * -a.width * this.scale;
        ⲆⲆⲆ = this.scale * (-a.height * this.ⲆΔᐃⲆ.ΔᐃΔ);
        Mu(oo, a, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
        if (this.action & 2) {
            if (this.ᐃΔᐃ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ΔⵠⲆ == 0) {
                this.action -= 2;
            }
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            var a = ⵠΔ[464];
            Mu(oo, a, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            oo.globalAlpha = 1;
        }
        a = ⵠΔ[453][Px.time];
        ⵠⵠⵠ = -a.width * this.ⲆΔᐃⲆ.ΔᐃΔ * this.scale;
        ⲆⲆⲆ = -a.height * this.ⲆΔᐃⲆ.ΔᐃΔ * this.scale;
        oo.save();
        oo.translate(xo * -60, xo * 20);
        oo.rotate(this.rotate.ΔᐃΔ);
        Mu(oo, a, -ⵠⵠⵠ * xo / 4, xo * -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
        if (this.action & 2) {
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            a = ⵠΔ[468];
            Mu(oo, a, xo * -ⵠⵠⵠ / 4, xo * -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            oo.globalAlpha = 1;
        }
        oo.restore();
        a = ⵠΔ[454][Px.time];
        oo.save();
        oo.translate(xo * 60, xo * 20);
        oo.rotate(-this.rotate.ΔᐃΔ);
        Mu(oo, a, xo * -ⵠⵠⵠ / 4, -ⲆⲆⲆ * xo / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
        if (this.action & 2) {
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            a = ⵠΔ[469];
            Mu(oo, a, -ⵠⵠⵠ * xo / 4, xo * -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            oo.globalAlpha = 1;
        }
        oo.restore();
        oo.restore();
    }
    function Bv() {
        var a = Math.PI / 2;
        var b = Math.PI / 4;
        this.ⲆΔᐃⲆ.Ⲇⵠᐃ();
        this.ⲆⵠⲆᐃΔⵠⵠ.Ⲇⵠᐃ();
        this.Ⲇⵠᐃⵠᐃⵠᐃ.Ⲇⵠᐃ();
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        c = this.info === 0 ? ⵠΔ[887][Px.time] : ⵠΔ[886][Px.time];
        ⵠⵠⵠ = -c.width * this.ⲆΔᐃⲆ.ΔᐃΔ;
        ⲆⲆⲆ = -c.height * this.ⲆΔᐃⲆ.ΔᐃΔ;
        Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        if (this.action & 2) {
            if (this.ᐃΔᐃ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ΔⵠⲆ == 0) {
                this.action -= 2;
            }
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            var c = ⵠΔ[888];
            Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        if (this.action & 4) {
            if (this.ΔⵠΔⲆⲆ.Ⲇⵠᐃ() && this.ΔⵠΔⲆⲆ.ΔⵠⲆ == 0) {
                this.action -= 4;
            }
            oo.globalAlpha = 0.6 - this.ΔⵠΔⲆⲆ.ΔᐃΔ;
            c = ⵠΔ[891];
            Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        oo.restore();
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle + b);
        oo.translate(55, 0);
        oo.rotate(a);
        c = this.info === 0 ? ⵠΔ[894][Px.time] : ⵠΔ[896][Px.time];
        ⵠⵠⵠ = this.ⲆⵠⲆᐃΔⵠⵠ.ΔᐃΔ * -c.width;
        ⲆⲆⲆ = this.ⲆⵠⲆᐃΔⵠⵠ.ΔᐃΔ * -c.height;
        Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        if (this.action & 2) {
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            c = ⵠΔ[889];
            Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        if (this.action & 4) {
            oo.globalAlpha = 0.6 - this.ΔⵠΔⲆⲆ.ΔᐃΔ;
            c = ⵠΔ[892];
            Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        oo.restore();
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle + a + b);
        oo.translate(55, 0);
        oo.rotate(a);
        c = this.info === 0 ? ⵠΔ[895][Px.time] : ⵠΔ[897][Px.time];
        ⵠⵠⵠ = -c.width * this.Ⲇⵠᐃⵠᐃⵠᐃ.ΔᐃΔ;
        ⲆⲆⲆ = this.Ⲇⵠᐃⵠᐃⵠᐃ.ΔᐃΔ * -c.height;
        Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        if (this.action & 2) {
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            c = ⵠΔ[890];
            Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        if (this.action & 4) {
            oo.globalAlpha = 0.6 - this.ΔⵠΔⲆⲆ.ΔᐃΔ;
            c = ⵠΔ[893];
            Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        oo.restore();
    }
    function Cv() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == 0) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = false;
            }
            var b = xo * ((1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * Xx * 600);
            var c = b * Math.sin(this.ᐃΔᐃ.angle - this.angle);
            var d = Math.cos(this.ᐃΔᐃ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            oo.rotate(this.angle);
            this.ⲆᐃᐃⲆ.Ⲇⵠᐃ();
            if (this.info & 16) {
                var f = ⵠΔ[970][Px.time];
            } else {
                f = ⵠΔ[208][Px.time];
            }
            var g = -f.width * this.ⲆᐃᐃⲆ.ΔᐃΔ;
            var a = -f.height * this.ⲆᐃᐃⲆ.ΔᐃΔ;
            Mu(oo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ⵠΔ[971][Px.time];
            } else {
                f = ⵠΔ[209][Px.time];
            }
            oo.translate(0, f.height / 2);
            Mu(oo, f, c - f.width / 2, -f.height + d);
        }
        oo.restore();
    }
    function Dv() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        if (ⵠᐃⵠ.ᐃⵠᐃⵠ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + Xx / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - Xx, 1);
        }
        this.ⲆΔᐃⲆ.Ⲇⵠᐃ();
        this.rotate.Ⲇⵠᐃ();
        a = this.info === 0 ? ⵠΔ[232][Px.time] : ⵠΔ[1068][Px.time];
        ⵠⵠⵠ = -a.width * this.ⲆΔᐃⲆ.ΔᐃΔ * this.scale;
        ⲆⲆⲆ = this.ⲆΔᐃⲆ.ΔᐃΔ * -a.height * this.scale;
        Mu(oo, a, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
        if (this.action & 2) {
            if (this.ᐃΔᐃ.Ⲇⵠᐃ() && ds == this.ᐃΔᐃ.ΔⵠⲆ) {
                this.action -= 2;
            }
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            var a = ⵠΔ[1077];
            Mu(oo, a, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            oo.globalAlpha = 1;
        }
        a = this.info === 0 ? ⵠΔ[1072][Px.time] : ⵠΔ[1071][Px.time];
        ⵠⵠⵠ = this.ⲆΔᐃⲆ.ΔᐃΔ * -a.width * this.scale;
        ⲆⲆⲆ = -a.height * this.ⲆΔᐃⲆ.ΔᐃΔ * this.scale;
        oo.save();
        oo.translate(xo * -40, xo * 10);
        oo.rotate(this.rotate.ΔᐃΔ);
        Mu(oo, a, -ⵠⵠⵠ * xo / 4, xo * -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
        if (this.action & 2) {
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            a = ⵠΔ[1078];
            Mu(oo, a, -ⵠⵠⵠ * xo / 4, xo * -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            oo.globalAlpha = 1;
        }
        oo.restore();
        a = this.info === 0 ? ⵠΔ[1075][Px.time] : ⵠΔ[1074][Px.time];
        oo.save();
        oo.translate(xo * 40, xo * 10);
        oo.rotate(-this.rotate.ΔᐃΔ);
        Mu(oo, a, -ⵠⵠⵠ * xo / 4, xo * -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
        if (this.action & 2) {
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            a = ⵠΔ[1079];
            Mu(oo, a, -ⵠⵠⵠ * xo / 4, xo * -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            oo.globalAlpha = 1;
        }
        oo.restore();
        oo.restore();
    }
    function Ev() {
        this.ⲆΔᐃⲆ.Ⲇⵠᐃ();
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        a = this.info === 0 ? ⵠΔ[1042][Px.time] : ⵠΔ[1044][Px.time];
        ⵠⵠⵠ = -a.width * this.ⲆΔᐃⲆ.ΔᐃΔ;
        ⲆⲆⲆ = -a.height * this.ⲆΔᐃⲆ.ΔᐃΔ;
        Mu(oo, a, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        if (this.action & 2) {
            if (this.ᐃΔᐃ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ΔⵠⲆ == 0) {
                this.action -= 2;
            }
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            var a = ⵠΔ[1045];
            Mu(oo, a, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        oo.restore();
    }
    function Fv() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        this.ᐃΔⲆᐃⲆ.Ⲇⵠᐃ();
        ΔⲆ = ⵠΔ[289][Px.time];
        ⵠⵠⵠ = -ΔⲆ.width * this.ᐃΔⲆᐃⲆ.ΔᐃΔ;
        ⲆⲆⲆ = this.ᐃΔⲆᐃⲆ.ΔᐃΔ * -ΔⲆ.height;
        Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        oo.restore();
    }
    function Gv() {
        if (this.info !== 10) {
            oo.save();
            oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
            oo.rotate(this.angle);
            if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
                if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == 0) {
                    this.ᐃΔᐃ.Ⲇⵠᐃ = false;
                }
                var b = Xx * (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * 600 * xo;
                var c = b * Math.sin(this.ᐃΔᐃ.angle - this.angle);
                var d = b * Math.cos(this.ᐃΔᐃ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            if (this.info & 16) {
                var e = ⵠΔ[623][Px.time];
            } else {
                e = ⵠΔ[287][Px.time];
            }
            Mu(oo, e, -e.width / 2 + c, -e.width / 2 + d);
            oo.restore();
            for (var f = this.info & 15, g = 0; f > g; g++) {
                this.ⲆᐃΔᐃ[g].ᐃⲆᐃⲆ(294);
            }
        }
    }
    function Hv() {
        if (this.info !== 10) {
            for (var b = this.info & 15, c = 0; b > c; c++) {
                this.ⲆᐃΔᐃ[c].ᐃⲆᐃⲆ(207, this.x, this.y);
            }
            oo.save();
            oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
            oo.rotate(this.angle);
            if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
                if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == 0) {
                    this.ᐃΔᐃ.Ⲇⵠᐃ = Ok;
                }
                var d = (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * Xx * 600 * xo;
                var e = Math.sin(this.ᐃΔᐃ.angle - this.angle) * d;
                var f = d * Math.cos(this.ᐃΔᐃ.angle - this.angle);
            } else {
                e = 0;
                f = 0;
            }
            if (this.info & 16) {
                var g = ⵠΔ[958][Px.time];
            } else {
                g = ⵠΔ[957][Px.time];
            }
            Mu(oo, g, -g.width / 2 + e, -g.width / 2 + f);
            oo.restore();
        }
    }
    function Iv() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && w == this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = false;
            }
            var b = xo * (Xx * (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * 600);
            var c = Math.sin(this.ᐃΔᐃ.angle - this.angle) * b;
            var d = b * Math.cos(this.ᐃΔᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            oo.rotate(this.angle);
            this.ⲆᐃᐃⲆ.Ⲇⵠᐃ();
            if (this.info & 16) {
                var f = ⵠΔ[953][Px.time];
            } else {
                f = ⵠΔ[204][Px.time];
            }
            var g = this.ⲆᐃᐃⲆ.ΔᐃΔ * -f.width;
            var a = this.ⲆᐃᐃⲆ.ΔᐃΔ * -f.height;
            Mu(oo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ⵠΔ[954][Px.time];
            } else {
                f = ⵠΔ[205][Px.time];
            }
            oo.translate(0, f.height / 2);
            Mu(oo, f, c - f.width / 2, -f.height + d);
        }
        oo.restore();
    }
    function Jv(f, e, i, j, k, n, a, o, p) {
        if ($q === o) {
            o = 0;
        }
        for (var h = f; e >= h; h++) {
            for (var q = i; j >= q; q++) {
                var r = Nx.ⲆⲆΔⲆ[h][q];
                if (r !== Qk && r[n] !== undefined) {
                    var t = r[n];
                    var w = ⵠΔ[k][Px.time][t.ⵠⲆᐃΔⲆⵠᐃ];
                    Mu(oo, w, Qx.ΔᐃⲆ.x + t.x - w.width / (ΔΔΔΔⵠ * 4), Qx.ΔᐃⲆ.y + t.y - w.height / (ΔΔΔΔⵠ * 4), w.width / (ΔΔΔΔⵠ * 2), w.height / (ΔΔΔΔⵠ * 2));
                    if (Mx.Δⵠⵠᐃᐃ) {
                        var x = 2147483648;
                        var y = ((h * 1000 + q) * 1103515245 + 12345) % x / x;
                        if (y < 0.2) {
                            y = Math.floor(ⵠΔ[1025][Px.time][t.ⵠⲆᐃΔⲆⵠᐃ].length * (y * 5));
                            w = ⵠΔ[1025][Px.time][t.ⵠⲆᐃΔⲆⵠᐃ][y];
                            Mu(oo, w, Qx.ΔᐃⲆ.x + t.x - w.width / (ΔΔΔΔⵠ * 4), Qx.ΔᐃⲆ.y + t.y - w.height / (ΔΔΔΔⵠ * 4), w.width / (ΔΔΔΔⵠ * 2), w.height / (ΔΔΔΔⵠ * 2));
                        } else if (t.ⲆⵠⵠⲆⵠᐃΔ !== 0) {
                            w = ⵠΔ[1026][Px.time];
                            var z = (uv + h % 2 * 30) % 60;
                            oo.globalAlpha = z < 30 ? z / 30 : 1 - (z - 30) / 30;
                            Mu(oo, w, Qx.ΔᐃⲆ.x + t.x - w.width / (ΔΔΔΔⵠ * 4), Qx.ΔᐃⲆ.y + t.y - w.height / (ΔΔΔΔⵠ * 4) - 30 + z, w.width / (ΔΔΔΔⵠ * 2), w.height / (ΔΔΔΔⵠ * 2));
                            oo.globalAlpha = 1;
                        }
                    }
                }
            }
        }
    }
    function Kv() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        if (ⵠᐃⵠ.ᐃⵠᐃⵠ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + Xx / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - Xx, 1);
        }
        this.ⲆΔᐃⲆ.Ⲇⵠᐃ();
        this.rotate.Ⲇⵠᐃ();
        a = ⵠΔ[449][Px.time];
        ⵠⵠⵠ = this.scale * (this.ⲆΔᐃⲆ.ΔᐃΔ * -a.width);
        ⲆⲆⲆ = -a.height * this.ⲆΔᐃⲆ.ΔᐃΔ * this.scale;
        Mu(oo, a, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        if (this.action & 2) {
            if (this.ᐃΔᐃ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ΔⵠⲆ == 0) {
                this.action -= 2;
            }
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            var a = ⵠΔ[463];
            Mu(oo, a, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        a = ⵠΔ[451][Px.time];
        ⵠⵠⵠ = this.scale * (-a.width * this.ⲆΔᐃⲆ.ΔᐃΔ);
        ⲆⲆⲆ = this.scale * (-a.height * this.ⲆΔᐃⲆ.ΔᐃΔ);
        oo.save();
        oo.translate(xo * -30, xo * 70);
        oo.rotate(this.rotate.ΔᐃΔ);
        Mu(oo, a, xo * -10, xo * -40, ⵠⵠⵠ, ⲆⲆⲆ);
        if (this.action & 2) {
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            a = ⵠΔ[466];
            Mu(oo, a, xo * -10, xo * -40, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        oo.restore();
        a = ⵠΔ[452][Px.time];
        oo.save();
        oo.translate(xo * 30, xo * 70);
        oo.rotate(-this.rotate.ΔᐃΔ);
        Mu(oo, a, xo * 10 - ⵠⵠⵠ, xo * -40, ⵠⵠⵠ, ⲆⲆⲆ);
        if (this.action & 2) {
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            a = ⵠΔ[467];
            Mu(oo, a, xo * 10 - ⵠⵠⵠ, xo * -40, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        oo.restore();
        oo.restore();
    }
    function Lv() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == 0) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = false;
            }
            var a = (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * Xx * 600 * xo;
            var b = a * Math.sin(this.ᐃΔᐃ.angle - this.angle);
            var c = Math.cos(this.ᐃΔᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        if (this.info === 0) {
            ΔⲆ = ⵠΔ[183][Px.time];
        } else {
            ΔⲆ = ⵠΔ[802][Px.time][this.info - 1];
        }
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2 + b, -ΔⲆ.height / 2 + c);
        oo.restore();
    }
    function Mv() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        this.ⲆΔΔⵠΔ.Ⲇⵠᐃ();
        ΔⲆ = ⵠΔ[288][Px.time];
        ⵠⵠⵠ = -ΔⲆ.width * this.ⲆΔΔⵠΔ.ΔᐃΔ;
        ⲆⲆⲆ = this.ⲆΔΔⵠΔ.ΔᐃΔ * -ΔⲆ.height;
        Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        this.ᐃΔⲆᐃⲆ.Ⲇⵠᐃ();
        ΔⲆ = ⵠΔ[289][Px.time];
        ⵠⵠⵠ = this.ᐃΔⲆᐃⲆ.ΔᐃΔ * -ΔⲆ.width;
        ⲆⲆⲆ = this.ᐃΔⲆᐃⲆ.ΔᐃΔ * -ΔⲆ.height;
        Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        oo.restore();
    }
    function Nv(a, b) {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        if (a === 854) {
            a = 250;
            this.info = 36;
        }
        ΔⲆ = ⵠΔ[a][this.info][Px.time];
        ⵠⵠⵠ = -ΔⲆ.width / 2;
        ⲆⲆⲆ = -ΔⲆ.height / 2;
        Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        if (this.action & 2) {
            if (this.ᐃΔᐃ.Ⲇⵠᐃ() && Ok == this.ᐃΔᐃ.ΔⵠⲆ) {
                this.action -= 2;
            }
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            var c = Cw(this.info, ΔⲆ, ΔΔⲆⲆᐃⵠⵠⵠΔ);
            Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        oo.restore();
    }
    function Ov() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        this.ᐃΔⲆᐃⲆ.Ⲇⵠᐃ();
        ΔⲆ = ⵠΔ[526][Px.time];
        ⵠⵠⵠ = -ΔⲆ.width * this.ᐃΔⲆᐃⲆ.ΔᐃΔ;
        ⲆⲆⲆ = this.ᐃΔⲆᐃⲆ.ΔᐃΔ * -ΔⲆ.height;
        Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        oo.restore();
    }
    function Pv() {
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == kg) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = false;
            }
            var a = (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * Xx * 600 * xo;
            var b = Math.sin(this.ᐃΔᐃ.angle - this.angle) * a;
            var c = Math.cos(this.ᐃΔᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        oo.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        oo.translate(Qx.ΔᐃⲆ.x + this.x + b, Qx.ΔᐃⲆ.y + this.y + c);
        oo.rotate(this.angle);
        ΔⲆ = ⵠΔ[155][Px.time];
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Xx * 3) % (Math.PI * 2);
        }
        oo.rotate(this.rotate);
        ΔⲆ = ⵠΔ[1206][Px.time];
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
        oo.restore();
    }
    function Qv() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        this.ᐃΔⲆᐃⲆ.Ⲇⵠᐃ();
        ΔⲆ = ⵠΔ[1192][Px.time];
        ⵠⵠⵠ = -ΔⲆ.width * this.ᐃΔⲆᐃⲆ.ΔᐃΔ;
        ⲆⲆⲆ = this.ᐃΔⲆᐃⲆ.ΔᐃΔ * -ΔⲆ.height;
        Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        oo.restore();
    }
    function Rv(a, b, c) {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + b, Qx.ΔᐃⲆ.y + c);
        oo.rotate(this.angle);
        oo.translate(this.x - b, this.y - c);
        this.ⲆΔᐃⲆ.Ⲇⵠᐃ();
        ΔⲆ = ⵠΔ[a][Px.time];
        ⵠⵠⵠ = -ΔⲆ.width * this.ⲆΔᐃⲆ.ΔᐃΔ;
        ⲆⲆⲆ = this.ⲆΔᐃⲆ.ΔᐃΔ * -ΔⲆ.height;
        Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        oo.restore();
    }
    function Sv() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ᐃⲆⵠⵠⵠ.length == 0 || Wr.ᐃⲆΔⲆⲆΔΔ >= this.ᐃⲆⵠⵠⵠ[this.ᐃⲆⵠⵠⵠ.length - 1])) {
            this.ᐃⲆⵠⵠⵠ.push(Wr.ⵠⵠⲆⵠᐃΔΔ);
        }
        for (var a = 0; a < this.ᐃⲆⵠⵠⵠ.length; a++) {
            this.ᐃⲆⵠⵠⵠ[a] = Math.max(0, this.ᐃⲆⵠⵠⵠ[a] - Wr.ⲆⲆⲆᐃⵠΔⵠ * Xx);
            oo.globalAlpha = this.ᐃⲆⵠⵠⵠ[a] / 1.3;
            var b = (1 - this.ᐃⲆⵠⵠⵠ[a]) * 40;
            var c = (1 - this.ᐃⲆⵠⵠⵠ[a]) * 35 + 10;
            md(oo, xo * -68 + Math.sin(-this.angle - Math.PI / 2) * b, xo * -20 + b * Math.cos(-this.angle - Math.PI / 2), c);
            ud(oo, "#333333");
        }
        oo.globalAlpha = 1;
        if (this.ᐃⲆⵠⵠⵠ.length > 0 && this.ᐃⲆⵠⵠⵠ[0] === 0) {
            this.ᐃⲆⵠⵠⵠ.shift();
        }
        oo.restore();
    }
    function Tv(a, b, c) {
        if (a >= 0) {
            ΔⲆ = ⵠΔ[a][Px.time];
            switch (a) {
                case 71:
                case 72:
                case 73:
                    Bf(a, ΔⲆ, -ΔⲆ.width / 4 - xo * (0 + b), -ΔⲆ.height / 4 + (c + 35) * xo);
                    break;
                case 74:
                    Bf(a, ΔⲆ, -ΔⲆ.width / 4 - (1 + b) * xo, -ΔⲆ.height / 4 + (c + 45) * xo);
                    break;
                case 75:
                case 76:
                    Bf(a, ΔⲆ, -ΔⲆ.width / 4 - (1 + b) * xo, -ΔⲆ.height / 4 + (c + 40) * xo);
            }
        }
    }
    function Uv() {
        var a = mo;
        var b = undefined;
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        this.ⲆΔᐃⲆ.Ⲇⵠᐃ();
        this.rotate.Ⲇⵠᐃ();
        if (this.ᐃⲆⵠⲆΔ >= 0.1 && this.ᐃⲆⵠⲆΔ <= 1.1) {
            if ((c = Math.max(0, Math.min(1, this.ᐃⲆⵠⲆΔ - 0.1))) < 0.2) {
                c *= 5;
            } else {
                c = c > 0.8 ? (1 - c) * 5 : 1;
            }
            a = ⵠΔ[1150][Px.time];
            ⵠⵠⵠ = this.ⲆΔᐃⲆ.ΔᐃΔ * -a.width;
            ⲆⲆⲆ = this.ⲆΔᐃⲆ.ΔᐃΔ * -a.height;
            oo.globalAlpha = c;
            Mu(oo, a, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            b = ⵠΔ[1151];
        }
        if (this.ᐃⲆⵠⲆΔ >= 0.9) {
            var c;
            if ((c = Math.max(0, Math.min(1, this.ᐃⲆⵠⲆΔ - 0.9))) < 0.2) {
                c *= 5;
            } else {
                c = 1;
            }
            a = ⵠΔ[1152][Px.time];
            ⵠⵠⵠ = this.ⲆΔᐃⲆ.ΔᐃΔ * -a.width;
            ⲆⲆⲆ = this.ⲆΔᐃⲆ.ΔᐃΔ * -a.height;
            oo.globalAlpha = c;
            Mu(oo, a, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            b = ⵠΔ[1153];
        }
        if (this.action & 2 && Xa !== b) {
            if (this.ᐃΔᐃ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ΔⵠⲆ == 0) {
                this.action -= 2;
            }
            oo.globalAlpha = c * (0.6 - this.ᐃΔᐃ.ΔᐃΔ);
            ⵠⵠⵠ = -b.width * this.ⲆΔᐃⲆ.ΔᐃΔ;
            ⲆⲆⲆ = -b.height * this.ⲆΔᐃⲆ.ΔᐃΔ;
            Mu(oo, b, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
        }
        oo.globalAlpha = 1;
        oo.restore();
    }
    function Vv() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && C == this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = false;
            }
            var b = Xx * (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * 600 * xo;
            var c = b * Math.sin(this.ᐃΔᐃ.angle - this.angle);
            var d = b * Math.cos(this.ᐃΔᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
            e = ⵠΔ[716][Px.time];
            Mu(oo, e, -e.width / 2 + c, -e.height / 2 + d);
            this.up.Ⲇⵠᐃ();
            var e = ⵠΔ[720][Px.time];
            var f = this.up.ΔᐃΔ * -e.width;
            var g = -e.height * this.up.ΔᐃΔ;
            Mu(oo, e, -f / 2 + xo * 1, -g / 2 + xo * 3, f, g);
        } else {
            e = ⵠΔ[144][Px.time];
            Mu(oo, e, -e.width / 2 + c, -e.height / 2 + d);
        }
        oo.restore();
    }
    function Wv(a) {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        this.ⲆΔᐃⲆ.Ⲇⵠᐃ();
        ΔⲆ = ⵠΔ[a][Px.time];
        ⵠⵠⵠ = this.ⲆΔᐃⲆ.ΔᐃΔ * -ΔⲆ.width;
        ⲆⲆⲆ = this.ⲆΔᐃⲆ.ΔᐃΔ * -ΔⲆ.height;
        Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        oo.restore();
    }
    function Xv() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        var a = ⵠᐃⵠ.ᐃⵠᐃⵠ(this, this.r);
        this.scale = a > 350 ? Math.min(this.scale + Xx / 2, 1.8) : Math.max(this.scale - Xx, 1);
        this.ⲆΔᐃⲆ.Ⲇⵠᐃ();
        this.rotate.Ⲇⵠᐃ();
        this.ᐃΔⵠΔ = a < 350 ? Math.max(0, this.ᐃΔⵠΔ - Xx * 2.2) : Math.min(1, this.ᐃΔⵠΔ + Xx * 2.2);
        b = ⵠΔ[1135][Px.time];
        ⵠⵠⵠ = -b.width * this.ⲆΔᐃⲆ.ΔᐃΔ * this.scale;
        ⲆⲆⲆ = this.scale * (-b.height * this.ⲆΔᐃⲆ.ΔᐃΔ);
        oo.globalAlpha = 1 - this.ᐃΔⵠΔ;
        Mu(oo, b, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
        b = ⵠΔ[1119][Px.time];
        ⵠⵠⵠ = -b.width * this.ⲆΔᐃⲆ.ΔᐃΔ * this.scale;
        ⲆⲆⲆ = this.scale * (this.ⲆΔᐃⲆ.ΔᐃΔ * -b.height);
        oo.globalAlpha = this.ᐃΔⵠΔ;
        Mu(oo, b, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
        if (this.action & 2) {
            if (this.ᐃΔᐃ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ΔⵠⲆ == Ih) {
                this.action -= 2;
            }
            oo.globalAlpha = (0.6 - this.ᐃΔᐃ.ΔᐃΔ) * (1 - this.ᐃΔⵠΔ);
            var b = ⵠΔ[1136];
            ⵠⵠⵠ = this.scale * (this.ⲆΔᐃⲆ.ΔᐃΔ * -b.width);
            ⲆⲆⲆ = this.scale * (-b.height * this.ⲆΔᐃⲆ.ΔᐃΔ);
            Mu(oo, b, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            oo.globalAlpha = this.ᐃΔⵠΔ * (0.6 - this.ᐃΔᐃ.ΔᐃΔ);
            b = ⵠΔ[1128];
            ⵠⵠⵠ = this.scale * (this.ⲆΔᐃⲆ.ΔᐃΔ * -b.width);
            ⲆⲆⲆ = this.scale * (-b.height * this.ⲆΔᐃⲆ.ΔᐃΔ);
            Mu(oo, b, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            oo.globalAlpha = 1;
        }
        b = ⵠΔ[1122][Px.time];
        ⵠⵠⵠ = this.scale * (-b.width * this.ⲆΔᐃⲆ.ΔᐃΔ);
        ⲆⲆⲆ = this.scale * (-b.height * this.ⲆΔᐃⲆ.ΔᐃΔ);
        oo.save();
        oo.translate(xo * -40, xo * 80);
        oo.rotate(this.rotate.ΔᐃΔ);
        oo.globalAlpha = this.ᐃΔⵠΔ;
        Mu(oo, b, xo * -ⵠⵠⵠ / 4, xo * -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
        if (this.action & 2) {
            oo.globalAlpha = this.ᐃΔⵠΔ * (0.6 - this.ᐃΔᐃ.ΔᐃΔ);
            b = ⵠΔ[1129];
            Mu(oo, b, -ⵠⵠⵠ * xo / 4, -ⲆⲆⲆ * xo / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            oo.globalAlpha = 1;
        }
        oo.restore();
        b = ⵠΔ[1125][Px.time];
        oo.save();
        oo.translate(xo * 40, xo * 80);
        oo.rotate(-this.rotate.ΔᐃΔ);
        oo.globalAlpha = this.ᐃΔⵠΔ;
        Mu(oo, b, -ⵠⵠⵠ * xo / 4, xo * -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
        if (this.action & 2) {
            oo.globalAlpha = (0.6 - this.ᐃΔᐃ.ΔᐃΔ) * this.ᐃΔⵠΔ;
            b = ⵠΔ[1130];
            Mu(oo, b, xo * -ⵠⵠⵠ / 4, -ⲆⲆⲆ * xo / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            oo.globalAlpha = 1;
        }
        oo.globalAlpha = 1;
        oo.restore();
        oo.restore();
    }
    function Yv() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == 0) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = Ok;
            }
            var b = (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * Xx * 600 * xo;
            var c = Math.sin(this.ᐃΔᐃ.angle - this.angle) * b;
            var d = b * Math.cos(this.ᐃΔᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            oo.rotate(this.angle);
            this.ⲆᐃᐃⲆ.Ⲇⵠᐃ();
            if (this.info & 16) {
                var f = ⵠΔ[668][Px.time];
            } else {
                f = ⵠΔ[132][Px.time];
            }
            var g = this.ⲆᐃᐃⲆ.ΔᐃΔ * -f.width;
            var a = -f.height * this.ⲆᐃᐃⲆ.ΔᐃΔ;
            Mu(oo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            this.ⲆⵠΔᐃⵠᐃΔ.Ⲇⵠᐃ();
            if (this.info & 16) {
                f = ⵠΔ[638][Px.time];
            } else {
                f = ⵠΔ[134][Px.time];
            }
            oo.translate(0, f.height / 2);
            oo.rotate(this.ⲆⵠΔᐃⵠᐃΔ.ΔᐃΔ);
            Mu(oo, f, c - f.width / 2, -f.height + d);
        }
        oo.restore();
    }
    function Zv() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        var a = ⵠᐃⵠ.ᐃⵠᐃⵠ(this, this.r);
        this.scale = a > 350 ? Math.min(this.scale + Xx / 2, 1.8) : Math.max(this.scale - Xx, 1);
        this.ⲆΔᐃⲆ.Ⲇⵠᐃ();
        this.rotate.Ⲇⵠᐃ();
        this.ᐃΔⵠΔ = a < 350 ? Math.max(0, this.ᐃΔⵠΔ - Xx * 2.2) : Math.min(1, this.ᐃΔⵠΔ + Xx * 2.2);
        b = this.info & 1 ? ⵠΔ[1114][Px.time] : ⵠΔ[1113][Px.time];
        ⵠⵠⵠ = this.ⲆΔᐃⲆ.ΔᐃΔ * -b.width * this.scale;
        ⲆⲆⲆ = this.scale * (this.ⲆΔᐃⲆ.ΔᐃΔ * -b.height);
        oo.globalAlpha = 1 - this.ᐃΔⵠΔ;
        Mu(oo, b, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
        b = (this.info & 1) === 0 ? ⵠΔ[235][Px.time] : ⵠΔ[1098][Px.time];
        ⵠⵠⵠ = this.ⲆΔᐃⲆ.ΔᐃΔ * -b.width * this.scale;
        ⲆⲆⲆ = this.ⲆΔᐃⲆ.ΔᐃΔ * -b.height * this.scale;
        oo.globalAlpha = this.ᐃΔⵠΔ;
        Mu(oo, b, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
        if (this.action & 2) {
            if (this.ᐃΔᐃ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ΔⵠⲆ == 0) {
                this.action -= 2;
            }
            oo.globalAlpha = (0.6 - this.ᐃΔᐃ.ΔᐃΔ) * (1 - this.ᐃΔⵠΔ);
            var b = ⵠΔ[1115];
            ⵠⵠⵠ = this.scale * (-b.width * this.ⲆΔᐃⲆ.ΔᐃΔ);
            ⲆⲆⲆ = -b.height * this.ⲆΔᐃⲆ.ΔᐃΔ * this.scale;
            Mu(oo, b, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            oo.globalAlpha = (0.6 - this.ᐃΔᐃ.ΔᐃΔ) * this.ᐃΔⵠΔ;
            b = ⵠΔ[1107];
            ⵠⵠⵠ = this.scale * (this.ⲆΔᐃⲆ.ΔᐃΔ * -b.width);
            ⲆⲆⲆ = this.scale * (this.ⲆΔᐃⲆ.ΔᐃΔ * -b.height);
            Mu(oo, b, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            oo.globalAlpha = 1;
        }
        b = this.info & 1 ? ⵠΔ[1101][Px.time] : ⵠΔ[1102][Px.time];
        ⵠⵠⵠ = -b.width * this.ⲆΔᐃⲆ.ΔᐃΔ * this.scale;
        ⲆⲆⲆ = this.scale * (this.ⲆΔᐃⲆ.ΔᐃΔ * -b.height);
        oo.save();
        oo.translate(xo * -20, xo * 0);
        oo.rotate(this.rotate.ΔᐃΔ);
        oo.globalAlpha = this.ᐃΔⵠΔ;
        Mu(oo, b, -ⵠⵠⵠ * xo / 4, xo * -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
        if (this.action & 2) {
            oo.globalAlpha = this.ᐃΔⵠΔ * (0.6 - this.ᐃΔᐃ.ΔᐃΔ);
            b = ⵠΔ[1108];
            Mu(oo, b, -ⵠⵠⵠ * xo / 4, xo * -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            oo.globalAlpha = 1;
        }
        oo.restore();
        b = (this.info & 1) === 0 ? ⵠΔ[1105][Px.time] : ⵠΔ[1104][Px.time];
        oo.save();
        oo.translate(xo * 20, xo * 0);
        oo.rotate(-this.rotate.ΔᐃΔ);
        oo.globalAlpha = this.ᐃΔⵠΔ;
        Mu(oo, b, xo * -ⵠⵠⵠ / 4, -ⲆⲆⲆ * xo / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
        if (this.action & 2) {
            oo.globalAlpha = (0.6 - this.ᐃΔᐃ.ΔᐃΔ) * this.ᐃΔⵠΔ;
            b = ⵠΔ[1109];
            Mu(oo, b, xo * -ⵠⵠⵠ / 4, xo * -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            oo.globalAlpha = 1;
        }
        oo.globalAlpha = 1;
        oo.restore();
        oo.restore();
    }
    function $v() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == th) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = false;
            }
            var b = xo * (Xx * (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * 600);
            var c = Math.sin(this.ᐃΔᐃ.angle - this.angle) * b;
            var d = Math.cos(this.ᐃΔᐃ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            oo.rotate(this.angle);
            this.ⲆᐃᐃⲆ.Ⲇⵠᐃ();
            if (this.info & 16) {
                var f = ⵠΔ[812][Px.time];
            } else {
                f = ⵠΔ[188][Px.time];
            }
            var g = this.ⲆᐃᐃⲆ.ΔᐃΔ * -f.width;
            var a = -f.height * this.ⲆᐃᐃⲆ.ΔᐃΔ;
            Mu(oo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ⵠΔ[813][Px.time];
            } else {
                f = ⵠΔ[189][Px.time];
            }
            oo.translate(0, f.height / 2);
            Mu(oo, f, c - f.width / 2, -f.height + d);
        }
        oo.restore();
    }
    function _v() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        this.ⵠᐃⵠⲆᐃΔΔ = Math.min(1, this.ⵠᐃⵠⲆᐃΔΔ + Xx * 2);
        oo.globalAlpha = Math.min(1, Math.max(0, ⵠᐃⵠ.ᐃⵠᐃⵠ(this, this.r) / 80)) * this.ⵠᐃⵠⲆᐃΔΔ;
        this.ⲆΔᐃⲆ.Ⲇⵠᐃ();
        ΔⲆ = ⵠΔ[247][Px.time][this.ΔΔⲆᐃᐃⵠⵠ];
        if (this.ΔΔⲆᐃᐃⵠⵠ < 2) {
            ⵠⵠⵠ = -ΔⲆ.width * this.ⲆΔᐃⲆ.ΔᐃΔ;
            ⲆⲆⲆ = this.ⲆΔᐃⲆ.ΔᐃΔ * -ΔⲆ.height;
        } else if (this.ᐃΔⵠⲆΔᐃⵠ === 0) {
            ⵠⵠⵠ = -ΔⲆ.width;
            ⲆⲆⲆ = -ΔⲆ.height;
        } else {
            ⵠⵠⵠ = -ΔⲆ.width * 1.35;
            ⲆⲆⲆ = -ΔⲆ.height * 1.35;
        }
        Mu(oo, ΔⲆ, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        oo.globalAlpha = 1;
        oo.restore();
    }
    function aw() {
        if (this.info >= 10) {
            oo.save();
            oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
            oo.rotate(this.angle);
            if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
                if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && pg == this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ) {
                    this.ᐃΔᐃ.Ⲇⵠᐃ = Oo;
                }
                var b = xo * (Xx * (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * 600);
                var c = Math.sin(this.ᐃΔᐃ.angle - this.angle) * b;
                var d = Math.cos(this.ᐃΔᐃ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            this.ⲆᐃᐃⲆ.Ⲇⵠᐃ();
            var e = ⵠΔ[206][Px.time];
            var f = -e.width * this.ⲆᐃᐃⲆ.ΔᐃΔ;
            var g = -e.height * this.ⲆᐃᐃⲆ.ΔᐃΔ;
            Mu(oo, e, -f / 2 + c, -g / 2 + d, f, g);
            oo.restore();
        }
    }
    function bw(a, b) {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        this.ⲆΔᐃⲆ.Ⲇⵠᐃ();
        c = ⵠΔ[a][Px.time];
        ⵠⵠⵠ = -c.width * this.ⲆΔᐃⲆ.ΔᐃΔ;
        ⲆⲆⲆ = this.ⲆΔᐃⲆ.ΔᐃΔ * -c.height;
        Mu(oo, c, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
        if (this.action & 2) {
            if (this.ᐃΔᐃ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ΔⵠⲆ == Dj) {
                this.action -= 2;
            }
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            var c = ⵠΔ[b];
            Mu(oo, c, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            oo.globalAlpha = 1;
        }
        oo.restore();
    }
    function cw() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == 0) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = Ih;
            }
            var b = (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * Xx * 600 * xo;
            var c = b * Math.sin(this.ᐃΔᐃ.angle - this.angle);
            var d = Math.cos(this.ᐃΔᐃ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            oo.rotate(this.angle);
            this.ⲆᐃᐃⲆ.Ⲇⵠᐃ();
            if (this.info & 16) {
                var f = ⵠΔ[838][Px.time];
            } else {
                f = ⵠΔ[191][Px.time];
            }
            var g = this.ⲆᐃᐃⲆ.ΔᐃΔ * -f.width;
            var a = -f.height * this.ⲆᐃᐃⲆ.ΔᐃΔ;
            Mu(oo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ⵠΔ[839][Px.time];
            } else {
                f = ⵠΔ[192][Px.time];
            }
            oo.translate(0, f.height / 2);
            Mu(oo, f, c - f.width / 2, -f.height + d);
        }
        oo.restore();
    }
    function dw() {
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == 0) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = C;
            }
            var a = xo * (Xx * (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * 600);
            var b = Math.sin(this.ᐃΔᐃ.angle - this.angle) * a;
            var c = a * Math.cos(this.ᐃΔᐃ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        oo.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        oo.translate(Qx.ΔᐃⲆ.x + this.x + b, Qx.ΔᐃⲆ.y + this.y + c);
        oo.rotate(this.angle);
        ΔⲆ = ⵠΔ[154][Px.time];
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Xx * 3) % (Math.PI * 2);
        }
        oo.rotate(this.rotate);
        ΔⲆ = ⵠΔ[1202][Px.time];
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
        oo.restore();
    }
    function ew() {
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            var a = (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * Xx * 600 * xo;
            var b = a * Math.sin(this.ᐃΔᐃ.angle - this.angle);
            var c = a * Math.cos(this.ᐃΔᐃ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Xx * 0.5) % (Math.PI * 2);
        }
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x + b, Qx.ΔᐃⲆ.y + this.y + c);
        oo.save();
        oo.rotate(this.rotate);
        ΔⲆ = ⵠΔ[641][Px.time];
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
        oo.restore();
        oo.save();
        oo.rotate(this.ΔⲆⵠΔᐃⵠΔⵠⵠ);
        ΔⲆ = ⵠΔ[642][Px.time];
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
        oo.restore();
        oo.restore();
    }
    function fw() {
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && Ok == this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = Dl;
            }
            var a = xo * (Xx * (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * 600);
            var b = Math.sin(this.ᐃΔᐃ.angle - this.angle) * a;
            var c = Math.cos(this.ᐃΔᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        oo.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        oo.translate(Qx.ΔᐃⲆ.x + this.x + b, Qx.ΔᐃⲆ.y + this.y + c);
        oo.rotate(this.angle);
        ΔⲆ = ⵠΔ[153][Px.time];
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Xx * 3) % (Math.PI * 2);
        }
        oo.rotate(this.rotate);
        ΔⲆ = ⵠΔ[1198][Px.time];
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
        oo.restore();
    }
    function gw(a, b) {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        this.ⲆΔᐃⲆ.Ⲇⵠᐃ();
        c = ⵠΔ[a][Px.time];
        ⵠⵠⵠ = -c.width * this.ⲆΔᐃⲆ.ΔᐃΔ;
        ⲆⲆⲆ = this.ⲆΔᐃⲆ.ΔᐃΔ * -c.height;
        Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        if (this.action & 2) {
            if (this.ᐃΔᐃ.Ⲇⵠᐃ() && ds == this.ᐃΔᐃ.ΔⵠⲆ) {
                this.action -= 2;
            }
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            var c = ⵠΔ[b];
            Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        oo.restore();
    }
    function hw() {
        var a = Math.PI / 2;
        var b = Math.PI / 4;
        this.ⲆΔᐃⲆ.Ⲇⵠᐃ();
        this.ⲆⵠⲆᐃΔⵠⵠ.Ⲇⵠᐃ();
        this.Ⲇⵠᐃⵠᐃⵠᐃ.Ⲇⵠᐃ();
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        c = this.info === 0 ? ⵠΔ[231][Px.time] : ⵠΔ[1053][Px.time];
        ⵠⵠⵠ = this.ⲆΔᐃⲆ.ΔᐃΔ * -c.width;
        ⲆⲆⲆ = -c.height * this.ⲆΔᐃⲆ.ΔᐃΔ;
        Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        if (this.action & 2) {
            if (this.ᐃΔᐃ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ΔⵠⲆ == 0) {
                this.action -= 2;
            }
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            var c = ⵠΔ[1056];
            Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        if (this.action & 4) {
            if (this.ΔⵠΔⲆⲆ.Ⲇⵠᐃ() && this.ΔⵠΔⲆⲆ.ΔⵠⲆ == 0) {
                this.action -= 4;
            }
            oo.globalAlpha = 0.6 - this.ΔⵠΔⲆⲆ.ΔᐃΔ;
            c = ⵠΔ[1065];
            Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        oo.restore();
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle + b);
        oo.translate(100, 0);
        oo.rotate(a);
        c = this.info === 0 ? ⵠΔ[1060][Px.time] : ⵠΔ[1059][Px.time];
        ⵠⵠⵠ = -c.width * this.ⲆⵠⲆᐃΔⵠⵠ.ΔᐃΔ;
        ⲆⲆⲆ = this.ⲆⵠⲆᐃΔⵠⵠ.ΔᐃΔ * -c.height;
        Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        if (this.action & 2) {
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            c = ⵠΔ[1057];
            Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        if (this.action & 4) {
            oo.globalAlpha = 0.6 - this.ΔⵠΔⲆⲆ.ΔᐃΔ;
            c = ⵠΔ[1066];
            Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        oo.restore();
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle + a + b);
        oo.translate(100, 0);
        oo.rotate(a);
        c = this.info === 0 ? ⵠΔ[1063][Px.time] : ⵠΔ[1062][Px.time];
        ⵠⵠⵠ = this.Ⲇⵠᐃⵠᐃⵠᐃ.ΔᐃΔ * -c.width;
        ⲆⲆⲆ = -c.height * this.Ⲇⵠᐃⵠᐃⵠᐃ.ΔᐃΔ;
        Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        if (this.action & 2) {
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            c = ⵠΔ[1058];
            Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        if (this.action & 4) {
            oo.globalAlpha = 0.6 - this.ΔⵠΔⲆⲆ.ΔᐃΔ;
            c = ⵠΔ[1067];
            Mu(oo, c, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        oo.restore();
    }
    function iw() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == Pn) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = C;
            }
            var b = Xx * (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * 600 * xo;
            var c = Math.sin(this.ᐃΔᐃ.angle - this.angle) * b;
            var d = Math.cos(this.ᐃΔᐃ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            oo.rotate(this.angle);
            this.ⲆᐃᐃⲆ.Ⲇⵠᐃ();
            if (this.info & 16) {
                var f = ⵠΔ[849][Px.time];
            } else {
                f = ⵠΔ[193][Px.time];
            }
            var g = -f.width * this.ⲆᐃᐃⲆ.ΔᐃΔ;
            var a = -f.height * this.ⲆᐃᐃⲆ.ΔᐃΔ;
            Mu(oo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ⵠΔ[869][Px.time];
            } else {
                f = ⵠΔ[194][Px.time];
            }
            oo.translate(0, f.height / 2);
            Mu(oo, f, c - f.width / 2, -f.height + d);
        }
        oo.restore();
    }
    function jw() {
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == 0) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = false;
            }
            var a = xo * (Xx * (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * 600);
            var b = Math.sin(this.ᐃΔᐃ.angle - this.angle) * a;
            var c = Math.cos(this.ᐃΔᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        this.ⲆⲆⲆⲆⲆⵠⲆ = (this.ⲆⲆⲆⲆⲆⵠⲆ + Xx * 3) % (Math.PI * 2);
        this.ⲆΔⲆΔᐃⲆⲆ = (this.ⲆΔⲆΔᐃⲆⲆ - Xx * 3) % (Math.PI * 2);
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x + b, Qx.ΔᐃⲆ.y + this.y + c);
        oo.save();
        oo.rotate(this.angle);
        ΔⲆ = ⵠΔ[151][Px.time];
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
        oo.restore();
        oo.save();
        oo.rotate(this.ⲆⲆⲆⲆⲆⵠⲆ);
        ΔⲆ = ⵠΔ[528][Px.time];
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
        oo.restore();
        oo.save();
        oo.rotate(this.ⲆΔⲆΔᐃⲆⲆ);
        ΔⲆ = ⵠΔ[527][Px.time];
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
        oo.restore();
        oo.restore();
    }
    const kw = String.fromCharCode;
    const lw = kw(101);
    const mw = kw(118);
    const nw = kw(97);
    const ow = kw(108);
    function pw() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == 0) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = kg;
            }
            var b = xo * ((1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * Xx * 600);
            var c = Math.sin(this.ᐃΔᐃ.angle - this.angle) * b;
            var d = Math.cos(this.ᐃΔᐃ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            oo.rotate(this.angle);
            this.ⲆᐃᐃⲆ.Ⲇⵠᐃ();
            if (this.info & 16) {
                var f = ⵠΔ[985][Px.time];
            } else {
                f = ⵠΔ[210][Px.time];
            }
            var g = -f.width * this.ⲆᐃᐃⲆ.ΔᐃΔ;
            var a = this.ⲆᐃᐃⲆ.ΔᐃΔ * -f.height;
            Mu(oo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ⵠΔ[986][Px.time];
            } else {
                f = ⵠΔ[211][Px.time];
            }
            oo.translate(0, f.height / 2);
            Mu(oo, f, c - f.width / 2, -f.height + d);
        }
        oo.restore();
    }
    function qw() {
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == 0) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = false;
            }
            var a = (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * Xx * 600 * xo;
            var b = a * Math.sin(this.ᐃΔᐃ.angle - this.angle);
            var c = Math.cos(this.ᐃΔᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        oo.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        oo.translate(Qx.ΔᐃⲆ.x + this.x + b, Qx.ΔᐃⲆ.y + this.y + c);
        oo.rotate(this.angle);
        ΔⲆ = ⵠΔ[156][Px.time];
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Xx * 3) % (Math.PI * 2);
        }
        oo.rotate(this.rotate);
        ΔⲆ = ⵠΔ[1210][Px.time];
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
        oo.restore();
    }
    function rw() {
        this.ⲆΔᐃⲆ.Ⲇⵠᐃ();
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        a = this.info === 0 ? ⵠΔ[248][Px.time] : ⵠΔ[1222][Px.time];
        ⵠⵠⵠ = -a.width * this.ⲆΔᐃⲆ.ΔᐃΔ;
        ⲆⲆⲆ = this.ⲆΔᐃⲆ.ΔᐃΔ * -a.height;
        Mu(oo, a, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
        if (this.action & 2) {
            if (this.ᐃΔᐃ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ΔⵠⲆ == 0) {
                this.action -= 2;
            }
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            var a = ⵠΔ[1223];
            Mu(oo, a, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
            oo.globalAlpha = 1;
        }
        oo.restore();
    }
    function sw() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == 0) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = w;
            }
            var a = Xx * (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * 600 * xo;
            var b = a * Math.sin(this.ᐃΔᐃ.angle - this.angle);
            var c = Math.cos(this.ᐃΔᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        if (this.action == 2) {
            ΔⲆ = ⵠΔ[407][Px.time];
        } else {
            ΔⲆ = ⵠΔ[119][Px.time];
        }
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2 + b, -ΔⲆ.height / 2 + c);
        oo.restore();
    }
    function tw(b) {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        this.ⲆᐃᐃⲆ.Ⲇⵠᐃ();
        oo.globalAlpha = 0.3;
        var c = ⵠΔ[282][Px.time];
        var d = -c.width * this.ⲆᐃᐃⲆ.ΔᐃΔ;
        var e = this.ⲆᐃᐃⲆ.ΔᐃΔ * -c.height;
        Mu(oo, c, -d / 2, -e / 2, d, e);
        oo.globalAlpha = 1;
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == ds) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = Tq;
            }
            var f = Xx * (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * 600 * xo;
            var g = f * Math.sin(this.ᐃΔᐃ.angle - this.angle);
            var h = Math.cos(this.ᐃΔᐃ.angle - this.angle) * f;
        } else {
            g = 0;
            h = 0;
        }
        c = ⵠΔ[b][Px.time];
        Mu(oo, c, -c.width / 2 + g, -c.height / 2 + h);
        oo.restore();
    }
    function uw() {
        if (this.info >= 10) {
            oo.save();
            oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
            oo.rotate(this.angle);
            if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
                if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ == 0) {
                    this.ᐃΔᐃ.Ⲇⵠᐃ = Ks;
                }
                var b = xo * ((1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * Xx * 600);
                var c = b * Math.sin(this.ᐃΔᐃ.angle - this.angle);
                var d = Math.cos(this.ᐃΔᐃ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            this.ⲆᐃᐃⲆ.Ⲇⵠᐃ();
            var e = ⵠΔ[115][Px.time];
            var f = -e.width * this.ⲆᐃᐃⲆ.ΔᐃΔ;
            var g = this.ⲆᐃᐃⲆ.ΔᐃΔ * -e.height;
            Mu(oo, e, -f / 2 + c, -g / 2 + d, f, g);
            oo.restore();
        }
    }
    function vw() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        oo.rotate(this.angle);
        if (ⵠᐃⵠ.ᐃⵠᐃⵠ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + Xx / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - Xx, 1);
        }
        this.ⲆΔᐃⲆ.Ⲇⵠᐃ();
        this.rotate.Ⲇⵠᐃ();
        a = this.info === 0 ? ⵠΔ[233][Px.time] : ⵠΔ[1083][Px.time];
        ⵠⵠⵠ = -a.width * this.ⲆΔᐃⲆ.ΔᐃΔ * this.scale;
        ⲆⲆⲆ = -a.height * this.ⲆΔᐃⲆ.ΔᐃΔ * this.scale;
        Mu(oo, a, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
        if (this.action & 2) {
            if (this.ᐃΔᐃ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ΔⵠⲆ == 0) {
                this.action -= 2;
            }
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            var a = ⵠΔ[1092];
            Mu(oo, a, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            oo.globalAlpha = 1;
        }
        a = this.info === 0 ? ⵠΔ[1087][Px.time] : ⵠΔ[1086][Px.time];
        ⵠⵠⵠ = this.scale * (-a.width * this.ⲆΔᐃⲆ.ΔᐃΔ);
        ⲆⲆⲆ = this.scale * (this.ⲆΔᐃⲆ.ΔᐃΔ * -a.height);
        oo.save();
        oo.translate(xo * -40, xo * 10);
        oo.rotate(this.rotate.ΔᐃΔ);
        Mu(oo, a, xo * -ⵠⵠⵠ / 4, -ⲆⲆⲆ * xo / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
        if (this.action & 2) {
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            a = ⵠΔ[1093];
            Mu(oo, a, xo * -ⵠⵠⵠ / 4, xo * -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            oo.globalAlpha = 1;
        }
        oo.restore();
        a = this.info === 0 ? ⵠΔ[1090][Px.time] : ⵠΔ[1089][Px.time];
        oo.save();
        oo.translate(xo * 40, xo * 10);
        oo.rotate(-this.rotate.ΔᐃΔ);
        Mu(oo, a, -ⵠⵠⵠ * xo / 4, -ⲆⲆⲆ * xo / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
        if (this.action & 2) {
            oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
            a = ⵠΔ[1094];
            Mu(oo, a, -ⵠⵠⵠ * xo / 4, xo * -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
            oo.globalAlpha = 1;
        }
        oo.restore();
        oo.restore();
    }
    function ww() {
        if (this.ᐃΔᐃ.Ⲇⵠᐃ) {
            if (this.ᐃΔᐃ.ᐃΔᐃⲆ.Ⲇⵠᐃ() && Tq == this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔⵠⲆ) {
                this.ᐃΔᐃ.Ⲇⵠᐃ = tk;
            }
            var a = (1 - this.ᐃΔᐃ.ᐃΔᐃⲆ.ΔᐃΔ) * Xx * 600 * xo;
            var b = Math.sin(this.ᐃΔᐃ.angle - this.angle) * a;
            var c = a * Math.cos(this.ᐃΔᐃ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x + b, Qx.ΔᐃⲆ.y + this.y + c);
        oo.rotate(this.angle);
        ΔⲆ = ⵠΔ[135][Px.time];
        Mu(oo, ΔⲆ, -ΔⲆ.width / 2, -ΔⲆ.height / 2);
        oo.restore();
    }
    function xw(a, b, c) {
        if (a >= 0) {
            ΔⲆ = ⵠΔ[a][Px.time];
            switch (a) {
                case 1:
                case 3:
                case 4:
                case 8:
                case 31:
                case 32:
                    wf(a, ΔⲆ, -ΔⲆ.width / 2 - xo * (45 + b), -ΔⲆ.height / 2 + (c + 22) * xo);
                    break;
                case 94:
                case 95:
                case 96:
                case 97:
                    Bf(a, ΔⲆ, -ΔⲆ.width / 4 - (52 + b) * xo, -ΔⲆ.height / 4 + (c + 20) * xo);
                    break;
                case 98:
                case 99:
                    Bf(a, ΔⲆ, -ΔⲆ.width / 4 - xo * (57 + b), -ΔⲆ.height / 4 + xo * (c + 20));
                    break;
                case 57:
                case 0:
                case 5:
                case 6:
                    Bf(a, ΔⲆ, -ΔⲆ.width / 4 - (47 + b) * xo, -ΔⲆ.height / 4 + xo * (c + 45));
                    break;
                case 30:
                    Bf(a, ΔⲆ, -ΔⲆ.width / 4 - xo * (52 + b), -ΔⲆ.height / 4 + (c + 45) * xo);
                    break;
                case 19:
                    Bf(a, ΔⲆ, -ΔⲆ.width / 4 - (47 + b) * xo, -ΔⲆ.height / 4 + (c + 44) * xo);
                    break;
                case 9:
                    wf(a, ΔⲆ, -ΔⲆ.width / 2 - xo * (47 + b), -ΔⲆ.height / 2 + (c + 44) * xo);
                    break;
                case 62:
                    wf(a, ΔⲆ, -ΔⲆ.width / 2 - (40 + b) * xo, -ΔⲆ.height / 2 + xo * (c + 65));
                    break;
                case 12:
                    Bf(a, ΔⲆ, -ΔⲆ.width / 4 - (37 + b) * xo, -ΔⲆ.height / 4 + xo * (c + 85));
                    break;
                case 34:
                    Bf(a, ΔⲆ, -ΔⲆ.width / 4 - (37 + b) * xo, -ΔⲆ.height / 4 + (c + 85) * xo);
                    break;
                case 54:
                case 53:
                    Bf(a, ΔⲆ, -ΔⲆ.width / 4 - (26 + b) * xo, -ΔⲆ.height / 4 + (c + 77) * xo);
                    break;
                case 17:
                    Bf(a, ΔⲆ, -ΔⲆ.width / 4 - (37 + b) * xo, -ΔⲆ.height / 4 + (c + 85) * xo);
                    break;
                case 63:
                    Bf(a, ΔⲆ, -ΔⲆ.width / 4 - (47 + b) * xo, -ΔⲆ.height / 4 + (c + 44) * xo);
                    break;
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                    Bf(a, ΔⲆ, -ΔⲆ.width / 4 - (37 + b) * xo, -ΔⲆ.height / 4 + xo * (c + 30));
                    break;
                case 56:
                    Bf(a, ΔⲆ, -ΔⲆ.width / 4 - xo * (47 + b), -ΔⲆ.height / 4 + xo * (c + 35));
                    break;
                case 92:
                case 93:
                    Bf(a, ΔⲆ, -ΔⲆ.width / 4 - xo * (47 + b), -ΔⲆ.height / 4 + (c + 40) * xo);
                    break;
                case 89:
                    Bf(a, ΔⲆ, -ΔⲆ.width / 4 - xo * (47 + b), -ΔⲆ.height / 4 + (c + 34) * xo);
                    break;
                case 13:
                case 14:
                case 15:
                case 33:
                    Bf(a, ΔⲆ, -ΔⲆ.width / 4 - xo * (37 + b), -ΔⲆ.height / 4 + xo * (c + 90));
                    break;
                case 18:
                    Bf(a, ΔⲆ, -ΔⲆ.width / 4 - xo * (40 + b), -ΔⲆ.height / 4 + xo * (c + 85));
                    break;
                case 16:
                    wf(a, ΔⲆ, -ΔⲆ.width / 2 - (39 + b) * xo, -ΔⲆ.height / 2 + (c + 90) * xo);
                    break;
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 45:
                    wf(a, ΔⲆ, -ΔⲆ.width / 2 - xo * (46 + b), -ΔⲆ.height / 2 + xo * (c + 35));
                    break;
                case 49:
                    wf(a, ΔⲆ, -ΔⲆ.width / 2 - (47 + b) * xo, -ΔⲆ.height / 2 + (c + 54) * xo);
                    break;
                case 46:
                case 50:
                case 51:
                case 52:
                    wf(a, ΔⲆ, -ΔⲆ.width / 2 - xo * (46 + b), -ΔⲆ.height / 2 + (c + 35) * xo);
                    break;
                case 55:
                    wf(a, ΔⲆ, -ΔⲆ.width / 2 - (47 + b) * xo, -ΔⲆ.height / 2 + xo * (c + 20));
            }
        }
    }
    function yw(a) {
        if (a > 0) {
            var b = ⵠΔ[a][Px.time];
            switch (a) {
                case 58:
                    wf(a, b, -b.width / 2 + xo * 2, -b.height / 2 - xo * 5);
                    break;
                case 10:
                    wf(a, b, -b.width / 2, -b.height / 2 - xo * 18);
                    break;
                case 11:
                    wf(a, b, -b.width / 2, -b.height / 2 - xo * 10);
                    break;
                case 23:
                    wf(a, b, -b.width / 2, -b.height / 2 - xo * 19);
                    break;
                case 24:
                    Bf(a, b, -b.width / 4, -b.height / 4 - xo * 20);
                    break;
                case 25:
                    wf(a, b, -b.width / 2 - xo * 1, -b.height / 2 - xo * 23);
                    break;
                case 26:
                    wf(a, b, -b.width / 2, -b.height / 2 - xo * 5);
                    break;
                case 27:
                    wf(a, b, -b.width / 2, -b.height / 2 - xo * 2);
                    break;
                case 43:
                    wf(a, b, -b.width / 2 + xo * 1.5, -b.height / 2 - xo * 1);
                    break;
                case 44:
                case 20:
                case 21:
                case 22:
                case 80:
                case 81:
                case 82:
                case 60:
                case 90:
                case 88:
                case 87:
                    Bf(a, b, -b.width / 4, -b.height / 4 + xo * 2);
                    break;
                case 41:
                case 42:
                    wf(a, b, -b.width / 2 - xo * 5, -b.height / 2 - xo * 2);
                    break;
                case 40:
                    wf(a, b, -b.width / 2, -b.height / 2 - xo * 2);
                    break;
                case 85:
                    wf(a, b, -b.width / 2, -b.height / 2 - xo * 2);
                    break;
                case 48:
                    wf(a, b, -b.width / 2, -b.height / 2 - xo * 2);
                    break;
                case 47:
                    wf(a, b, -b.width / 2 + xo * 2, -b.height / 2);
                    break;
                case 59:
                    wf(a, b, -b.width / 2, -b.height / 2 - xo * 5);
                    break;
                case 77:
                case 78:
                case 79:
                    wf(a, b, -b.width / 2 - xo * 1, -b.height / 2);
                    break;
                case 83:
                    wf(a, b, -b.width / 2, -b.height / 2 + xo * 2);
                    break;
                case 84:
                case 86:
                    wf(a, b, -b.width / 2, -b.height / 2 + xo * 8);
                    break;
                case 61:
                    wf(a, b, -b.width / 2, -b.height / 2 - xo * 4);
            }
        }
    }
    function zw() {
        if (!this.ⲆⵠΔⵠⲆ && this.ⵠᐃⲆⲆΔ !== 0) {
            if (this.r.x != this.x || this.r.y != this.y) {
                var a = (ⵠᐃⵠ.ΔⲆⵠᐃᐃΔΔ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
                this.ⵠⵠⲆⵠⲆ = ⵠᐃⵠ.ᐃⲆⲆΔΔⵠΔ(a, this.ⵠⵠⲆⵠⲆ);
                this.ⵠⵠⲆⵠⲆ = ⵠᐃⵠ.ⵠΔᐃᐃᐃᐃᐃ(this.ⵠⵠⲆⵠⲆ, a, 0.018);
            }
            oo.save();
            oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
            oo.rotate(this.ⵠⵠⲆⵠⲆ);
            if (this.ⵠᐃⲆⲆΔ === 223) {
                if (this.ΔᐃⲆΔⲆ > 50 || this.ⵠΔⲆΔⵠ > 0) {
                    if (this.ΔᐃⲆΔⲆ > 50) {
                        this.ⵠΔⲆΔⵠ = Math.min(1, this.ⵠΔⲆΔⵠ + Xx);
                    } else {
                        this.ⵠΔⲆΔⵠ = Math.max(0, this.ⵠΔⲆΔⵠ - Xx);
                    }
                    oo.globalAlpha = this.ⵠΔⲆΔⵠ;
                    var b = ⵠΔ[225][Px.time];
                    Bf(225, b, -b.width / 4, -b.height / 4);
                    oo.globalAlpha = 1;
                }
                b = ⵠΔ[223][Px.time];
                Bf(223, b, -b.width / 4, -b.height / 4);
            } else if (this.ⵠᐃⲆⲆΔ === 229) {
                this.ⵠⲆᐃΔⵠ = ⵠᐃⵠ.ⵠΔᐃᐃᐃᐃᐃ(this.ⵠⲆᐃΔⵠ, this.ΔᐃⲆΔⲆ, 0.018);
                this.ᐃᐃΔΔΔᐃᐃ.Ⲇⵠᐃ();
                if (this.ΔᐃⲆΔⲆ > 85) {
                    this.ⵠΔⲆΔⵠ = Math.min(1, this.ⵠΔⲆΔⵠ + Xx / 4);
                } else {
                    this.ⵠΔⲆΔⵠ = Math.max(0.1, this.ⵠΔⲆΔⵠ - Xx);
                }
                b = ⵠΔ[1100][Px.time];
                Bf(1100, b, -b.width / 4, -b.height / 4);
                b = ⵠΔ[1103][Px.time];
                ⵠⵠⵠ = -b.width;
                ⲆⲆⲆ = -b.height;
                oo.save();
                oo.translate(xo * -20, xo * -20);
                oo.rotate(this.ⵠΔⲆΔⵠ * this.ᐃᐃΔΔΔᐃᐃ.ΔᐃΔ);
                Mu(oo, b, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
                oo.restore();
                b = ⵠΔ[1106][Px.time];
                oo.save();
                oo.translate(xo * 20, xo * -20);
                oo.rotate(this.ⵠΔⲆΔⵠ * -this.ᐃᐃΔΔΔᐃᐃ.ΔᐃΔ);
                Mu(oo, b, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
                oo.restore();
            } else if (this.ⵠᐃⲆⲆΔ === 228) {
                this.ⵠⲆᐃΔⵠ = ⵠᐃⵠ.ⵠΔᐃᐃᐃᐃᐃ(this.ⵠⲆᐃΔⵠ, this.ΔᐃⲆΔⲆ, 0.018);
                this.ᐃᐃΔΔΔᐃᐃ.Ⲇⵠᐃ();
                if (this.ΔᐃⲆΔⲆ > 85) {
                    this.ⵠΔⲆΔⵠ = Math.min(1, this.ⵠΔⲆΔⵠ + Xx / 4);
                } else {
                    this.ⵠΔⲆΔⵠ = Math.max(0.1, this.ⵠΔⲆΔⵠ - Xx);
                }
                b = ⵠΔ[1085][Px.time];
                Bf(1085, b, -b.width / 4, -b.height / 4);
                b = ⵠΔ[1088][Px.time];
                ⵠⵠⵠ = -b.width;
                ⲆⲆⲆ = -b.height;
                oo.save();
                oo.translate(xo * -40, xo * -45);
                oo.rotate(this.ᐃᐃΔΔΔᐃᐃ.ΔᐃΔ * this.ⵠΔⲆΔⵠ);
                Mu(oo, b, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
                oo.restore();
                b = ⵠΔ[1091][Px.time];
                oo.save();
                oo.translate(xo * 40, xo * -45);
                oo.rotate(-this.ᐃᐃΔΔΔᐃᐃ.ΔᐃΔ * this.ⵠΔⲆΔⵠ);
                Mu(oo, b, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
                oo.restore();
            } else if (this.ⵠᐃⲆⲆΔ === 227) {
                this.ⵠⲆᐃΔⵠ = ⵠᐃⵠ.ⵠΔᐃᐃᐃᐃᐃ(this.ⵠⲆᐃΔⵠ, this.ΔᐃⲆΔⲆ, 0.018);
                this.ᐃᐃΔΔΔᐃᐃ.Ⲇⵠᐃ();
                if (this.ΔᐃⲆΔⲆ > 85) {
                    this.ⵠΔⲆΔⵠ = Math.min(1, this.ⵠΔⲆΔⵠ + Xx / 4);
                } else {
                    this.ⵠΔⲆΔⵠ = Math.max(0.1, this.ⵠΔⲆΔⵠ - Xx);
                }
                b = ⵠΔ[1070][Px.time];
                Bf(1070, b, -b.width / 4, -b.height / 4);
                b = ⵠΔ[1073][Px.time];
                ⵠⵠⵠ = -b.width;
                ⲆⲆⲆ = -b.height;
                oo.save();
                oo.translate(xo * -40, xo * -45);
                oo.rotate(this.ᐃᐃΔΔΔᐃᐃ.ΔᐃΔ * this.ⵠΔⲆΔⵠ);
                Mu(oo, b, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
                oo.restore();
                b = ⵠΔ[1076][Px.time];
                oo.save();
                oo.translate(xo * 40, xo * -45);
                oo.rotate(-this.ᐃᐃΔΔΔᐃᐃ.ΔᐃΔ * this.ⵠΔⲆΔⵠ);
                Mu(oo, b, -ⵠⵠⵠ / 4, -ⲆⲆⲆ / 4, ⵠⵠⵠ / 2, ⲆⲆⲆ / 2);
                oo.restore();
            } else if (this.ⵠᐃⲆⲆΔ === 91) {
                this.ⵠⲆᐃΔⵠ = ⵠᐃⵠ.ⵠΔᐃᐃᐃᐃᐃ(this.ⵠⲆᐃΔⵠ, this.ΔᐃⲆΔⲆ, 0.018);
                b = ⵠΔ[91][Px.time];
                Bf(91, b, -b.width / 4, -b.height / 4);
            } else if (this.ⵠᐃⲆⲆΔ === 230) {
                this.ⵠⲆᐃΔⵠ = ⵠᐃⵠ.ⵠΔᐃᐃᐃᐃᐃ(this.ⵠⲆᐃΔⵠ, this.ΔᐃⲆΔⲆ, 0.018);
                b = ⵠΔ[236][Px.time];
                Bf(236, b, -b.width / 4, -b.height / 4);
            } else if (this.ⵠᐃⲆⲆΔ === 224) {
                b = ⵠΔ[224][Px.time];
                Bf(224, b, -b.width / 4, -b.height / 4);
            } else if (this.ⵠᐃⲆⲆΔ === 239) {
                b = ⵠΔ[1221][Px.time];
                if (this.ΔᐃⲆΔⲆ > 85) {
                    this.ⵠΔⲆΔⵠ = Math.min(1, this.ⵠΔⲆΔⵠ + Xx / 4);
                } else {
                    this.ⵠΔⲆΔⵠ = Math.max(0, this.ⵠΔⲆΔⵠ - Xx);
                }
                this.ᐃⲆΔΔᐃ += Xx * 60;
                if (this.ᐃⲆΔΔᐃ > 60) {
                    this.ᐃⲆΔΔᐃ -= 60;
                }
                var c = ((this.ᐃⲆΔΔᐃ < 30 ? this.ᐃⲆΔΔᐃ / 30 : 1 - (this.ᐃⲆΔΔᐃ - 30) / 30) * 12 - 6) * this.ⵠΔⲆΔⵠ;
                Bf(1221, b, -b.width / 4, -b.height / 4 + c);
            } else if (this.ⵠᐃⲆⲆΔ === 225) {
                b = ⵠΔ[1043][Px.time];
                if (this.ΔᐃⲆΔⲆ > 85) {
                    this.ⵠΔⲆΔⵠ = Math.min(1, this.ⵠΔⲆΔⵠ + Xx / 4);
                } else {
                    this.ⵠΔⲆΔⵠ = Math.max(0, this.ⵠΔⲆΔⵠ - Xx);
                }
                this.ᐃⲆΔΔᐃ += Xx * 60;
                if (this.ᐃⲆΔΔᐃ > 60) {
                    this.ᐃⲆΔΔᐃ -= 60;
                }
                c = (-6 + (this.ᐃⲆΔΔᐃ < 30 ? this.ᐃⲆΔΔᐃ / 30 : 1 - (this.ᐃⲆΔΔᐃ - 30) / 30) * 12) * this.ⵠΔⲆΔⵠ;
                Bf(1043, b, -b.width / 4, -b.height / 4 + c);
            } else if (this.ⵠᐃⲆⲆΔ === 226) {
                var d = Math.PI / 2;
                var e = Math.PI / 4;
                b = ⵠΔ[1055][Px.time];
                if (this.ΔᐃⲆΔⲆ > 85) {
                    this.ⵠΔⲆΔⵠ = Math.min(1, this.ⵠΔⲆΔⵠ + Xx / 4);
                } else {
                    this.ⵠΔⲆΔⵠ = Math.max(0, this.ⵠΔⲆΔⵠ - Xx);
                }
                this.ᐃⲆΔΔᐃ += Xx * 60;
                if (this.ᐃⲆΔΔᐃ > 60) {
                    this.ᐃⲆΔΔᐃ -= 60;
                }
                c = this.ⵠΔⲆΔⵠ * ((this.ᐃⲆΔΔᐃ < 30 ? this.ᐃⲆΔΔᐃ / 30 : 1 - (this.ᐃⲆΔΔᐃ - 30) / 30) * 12 - 6);
                Bf(1055, b, -b.width / 4 + c, -b.height / 4);
                oo.restore();
                oo.save();
                oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
                oo.rotate(Math.PI + this.ⵠⵠⲆⵠⲆ + e);
                oo.translate(120, c);
                oo.rotate(d);
                b = ⵠΔ[1060][Px.time];
                ⵠⵠⵠ = -b.width;
                ⲆⲆⲆ = -b.height;
                Mu(oo, b, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
                oo.restore();
                oo.save();
                oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
                oo.rotate(Math.PI + this.ⵠⵠⲆⵠⲆ + d + e);
                oo.translate(120, c);
                oo.rotate(d);
                b = ⵠΔ[1063][Px.time];
                ⵠⵠⵠ = -b.width;
                ⲆⲆⲆ = -b.height;
                Mu(oo, b, -ⵠⵠⵠ / 2, -ⲆⲆⲆ / 2, ⵠⵠⵠ, ⲆⲆⲆ);
            }
            oo.restore();
        }
    }
    function Aw() {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
        if (this.text.length > 0) {
            for (var a = 0; this.text.length > a && a < 2; a++) {
                if (!this.label[a]) {
                    this.label[a] = fd(xo, this.text[a]);
                    this.ⵠΔΔⲆⲆⲆⵠ[a] = 0;
                    this.ⵠΔᐃⵠΔΔⲆ[a] = 0;
                }
                if (a === 1) {
                    this.ⵠΔᐃⵠΔΔⲆ[0] = ⵠᐃⵠ.ᐃⲆΔΔⲆ(this.ᐃⵠᐃᐃᐃⵠᐃ) * 30;
                }
            }
            this.ⵠΔΔⲆⲆⲆⵠ[0] += Xx;
            if (this.text.length > 1) {
                this.ᐃⵠᐃᐃᐃⵠᐃ = Math.min(this.ᐃⵠᐃᐃᐃⵠᐃ + Xx, 1);
                if (this.ⵠΔΔⲆⲆⲆⵠ[0] > 1 && this.ᐃⵠᐃᐃᐃⵠᐃ > 0.5) {
                    this.ⵠΔΔⲆⲆⲆⵠ[1] += Xx;
                }
            }
            for (a = 0; a < this.text.length && a < 2; a++) {
                var b = this.ⵠΔΔⲆⲆⲆⵠ[a];
                if (b > 0) {
                    oo.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * 4, 0) : 1;
                    Mu(oo, this.label[a], -this.label[a].width / 2, -this.ⵠΔᐃⵠΔΔⲆ[a] + -this.label[a].height / 2 - xo * 110);
                }
            }
            if (this.ⵠΔΔⲆⲆⲆⵠ[0] > 4) {
                this.ⵠΔΔⲆⲆⲆⵠ.shift();
                this.text.shift();
                this.ⵠΔᐃⵠΔΔⲆ.shift();
                this.label.shift();
                this.ᐃⵠᐃᐃᐃⵠᐃ = 0;
            }
        }
        oo.restore();
    }
    function Bw() {
        var c = 0;
        switch (this.right) {
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
                c = 1;
        }
        if (this.ⲆⵠΔⵠⲆ) {
            for (var f = 0; this.bubbles.length > f; f++) {
                var j = this.bubbles[f];
                if (j.ΔⲆⲆΔΔ > 0.5) {
                    var k = 1 - (j.ΔⲆⲆΔΔ - 0.5) * 2;
                } else {
                    k = j.ΔⲆⲆΔΔ * 2;
                }
                oo.globalAlpha = k;
                var m = ⵠΔ[540][Px.time][j.id];
                Mu(oo, m, Qx.ΔᐃⲆ.x + j.x - m.width / 2, Qx.ΔᐃⲆ.y + j.y - m.height / 2);
                oo.globalAlpha = 1;
            }
        } else {
            oo.save();
            oo.translate(Qx.ΔᐃⲆ.x + this.x, Qx.ΔᐃⲆ.y + this.y);
            Px.ΔⵠᐃⵠᐃⲆᐃⵠᐃ(this);
            if (this.action & 16) {
                (function (a) {
                    if (a.right >= 0) {
                        switch (a.right) {
                            case 49:
                                oo.save();
                                var b = a.attack.ΔᐃΔ * -3 / Math.PI;
                                if (a.attack.ΔⵠⲆ) {
                                    var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.ΔᐃΔ) / 3;
                                } else {
                                    c = a.attack.ΔᐃΔ;
                                }
                                oo.rotate(a.angle - Math.PI / 2 + c);
                                oo.globalAlpha = b / 1.2;
                                md(oo, xo * -40, xo * 90, xo * 5);
                                ud(oo, "#0B6A84");
                                oo.globalAlpha = b / 1.2;
                                md(oo, xo * -52, xo * 100, xo * 8);
                                ud(oo, "#0B6A84");
                                oo.globalAlpha = b / 1.2;
                                md(oo, xo * -30, xo * 95, xo * 4);
                                ud(oo, "#0B6A84");
                                oo.globalAlpha = 1;
                                oo.restore();
                                break;
                            case 46:
                            case 50:
                            case 51:
                            case 52:
                                if (a.ᐃΔⵠⲆΔᐃⵠ === 1) {
                                    break;
                                }
                                if (a.ⲆⲆᐃΔᐃ > 0) {
                                    var d = Wr.ⲆΔⵠΔΔⲆΔ[Px.time];
                                } else {
                                    d = a.ⲆᐃⵠⲆᐃⲆⲆ > 0 || a.ΔⵠΔⲆⵠ > 0 ? Wr.ⲆᐃⲆⲆΔⵠᐃ[Px.time] : Wr.ᐃᐃⵠᐃⲆᐃᐃ[Px.time];
                                }
                                b = a.attack.ΔᐃΔ * -3 / Math.PI;
                                c = a.attack.ΔⵠⲆ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0);
                                if (c === 0) {
                                    a.ⵠⲆⲆⲆⵠⲆⲆ = a.angle;
                                }
                                oo.save();
                                oo.rotate(a.ⵠⲆⲆⲆⵠⲆⲆ - Math.PI / 2);
                                oo.globalAlpha = b;
                                var e = xo * 25 + c * 25;
                                md(oo, e, xo * 80, xo * 15);
                                ud(oo, d);
                                md(oo, -e, xo * 80, xo * 15);
                                ud(oo, d);
                                oo.globalAlpha = 1;
                                oo.restore();
                        }
                    }
                })(this);
            }
            oo.save();
            oo.rotate(this.angle - Math.PI / 2);
            if (!(this.action & 16)) {
                if (this.action & 64 || this.ⵠᐃⲆⲆΔ !== 0) {
                    this.ⲆⲆⲆΔᐃⲆᐃ.Ⲇⵠᐃ();
                } else if (this.action & 32) {
                    this.ΔᐃΔⵠⲆⵠⵠ.Ⲇⵠᐃ();
                }
            }
            var p;
            var q = this.ⲆⲆⲆΔᐃⲆᐃ.ΔᐃΔ;
            var v = this.ΔᐃΔⵠⲆⵠⵠ.ΔᐃΔ;
            if (this.ⲆⵠᐃⲆᐃ === 85) {
                m = ⵠΔ[793][Px.time];
                p = 793;
            } else if (this.ⲆⵠᐃⲆᐃ === 20) {
                m = ⵠΔ[920][Px.time];
                p = 920;
            } else if (this.ⲆⵠᐃⲆᐃ === 21) {
                m = ⵠΔ[924][Px.time];
                p = 924;
            } else if (this.ⲆⵠᐃⲆᐃ === 22) {
                m = ⵠΔ[928][Px.time];
                p = 928;
            } else if (this.ΔⲆᐃᐃΔⵠᐃ) {
                m = ⵠΔ[822][Px.time];
                p = 822;
            } else {
                m = ⵠΔ[7][this.ᐃΔⲆⲆ][Px.time];
                p = 7;
            }
            ⲆⵠⲆΔ = ⵠΔ[286][Px.time];
            var x = m;
            var h = p;
            if (this.action & 16) {
                if (this.attack.Ⲇⵠᐃ() && this.attack.ΔⵠⲆ == tk) {
                    this.ⵠⲆᐃᐃᐃ = !this.ⵠⲆᐃᐃᐃ;
                    this.action -= 16;
                    if (Qx.ΔΔⵠΔ == this.ΔΔⵠΔ) {
                        Qx.control.ⵠⵠΔⵠ = 0;
                    }
                }
                if (this.right >= 0) {
                    this.ⵠⲆᐃᐃᐃ = Ol;
                }
                var l = this.ⵠⲆᐃᐃᐃ ? this.attack.ΔᐃΔ : -this.attack.ΔᐃΔ / 3;
                var y = this.ⵠⲆᐃᐃᐃ ? this.attack.ΔᐃΔ / 3 : -this.attack.ΔᐃΔ;
                if (this.ΔⲆᐃᐃΔⵠᐃ) {
                    oo.save();
                    oo.rotate(l);
                    wf(p, m, -m.width / 2 - (66 + q) * xo, -m.height / 2 + (5 + v) * xo);
                    oo.restore();
                    oo.save();
                    oo.rotate(y);
                    wf(p, m, -m.width / 2 + xo * (66 + q), -m.height / 2 + xo * (5 + v));
                    oo.restore();
                } else if (c === 0) {
                    if (this.right === 64) {
                        l = -ⵠᐃⵠ.ΔΔΔⵠⲆⲆⵠ(-l);
                    }
                    oo.save();
                    oo.rotate(l);
                    wf(286, ⲆⵠⲆΔ, -ⲆⵠⲆΔ.width / 2 - (49 + q) * xo, -ⲆⵠⲆΔ.height / 2 + (15 + v) * xo);
                    if (this.right === 28) {
                        var u = ⵠΔ[this.right][this.ⲆⵠⵠⲆⲆ][Px.time];
                        kf(this.right, this.ⲆⵠⵠⲆⲆ, u, -u.width / 4 - (62 + q) * xo, -u.height / 4 + (v + 18) * xo);
                    } else {
                        xw(this.right, q, v);
                    }
                    if (p >= 920) {
                        Bf(p, m, -m.width / 4 - (49 + q) * xo, -m.height / 4 + (11 + v) * xo);
                    } else if (p !== 793) {
                        kf(p, this.ᐃΔⲆⲆ, m, -m.width / 4 - xo * (49 + q), -m.height / 4 + xo * (11 + v));
                    } else {
                        wf(p, m, -m.width / 2 - xo * (49 + q), -m.height / 2 + (11 + v) * xo);
                    }
                    oo.restore();
                    oo.save();
                    oo.rotate(y);
                    wf(286, ⲆⵠⲆΔ, -ⲆⵠⲆΔ.width / 2 + (49 + q) * xo, -ⲆⵠⲆΔ.height / 2 + (15 + v) * xo);
                    if (p >= 920) {
                        Bf(p, m, -m.width / 4 + xo * (49 + q), -m.height / 4 + xo * (11 + v));
                    } else if (p !== 793) {
                        kf(p, this.ᐃΔⲆⲆ, m, -m.width / 4 + xo * (49 + q), -m.height / 4 + (11 + v) * xo);
                    } else {
                        wf(p, m, -m.width / 2 + (49 + q) * xo, -m.height / 2 + xo * (11 + v));
                    }
                    oo.restore();
                }
            } else if (this.ΔⲆᐃᐃΔⵠᐃ) {
                wf(p, m, -m.width / 2 - xo * (66 + q), -m.height / 2 + (5 + v) * xo);
                wf(p, m, -m.width / 2 + (66 + q) * xo, -m.height / 2 + xo * (5 + v));
            } else if (c === 0) {
                wf(286, ⲆⵠⲆΔ, -ⲆⵠⲆΔ.width / 2 - xo * (49 + q), -ⲆⵠⲆΔ.height / 2 + (15 + v) * xo);
                if (this.right === 28) {
                    u = ⵠΔ[this.right][this.ⲆⵠⵠⲆⲆ][Px.time];
                    kf(this.right, this.ⲆⵠⵠⲆⲆ, u, -u.width / 4 - (62 + q) * xo, -u.height / 4 + (v + 18) * xo);
                } else {
                    xw(this.right, q, v);
                }
                if (p >= 920) {
                    Bf(p, m, -m.width / 4 - (49 + q) * xo, -m.height / 4 + xo * (11 + v));
                } else if (p !== 793) {
                    kf(p, this.ᐃΔⲆⲆ, m, -m.width / 4 - xo * (49 + q), -m.height / 4 + (11 + v) * xo);
                } else {
                    wf(p, m, -m.width / 2 - (49 + q) * xo, -m.height / 2 + (11 + v) * xo);
                }
                wf(286, ⲆⵠⲆΔ, -ⲆⵠⲆΔ.width / 2 + (49 + q) * xo, -ⲆⵠⲆΔ.height / 2 + (15 + v) * xo);
                if (p >= 920) {
                    Bf(p, m, -m.width / 4 + (49 + q) * xo, -m.height / 4 + (11 + v) * xo);
                } else if (p !== 793) {
                    kf(p, this.ᐃΔⲆⲆ, m, -m.width / 4 + (49 + q) * xo, -m.height / 4 + (11 + v) * xo);
                } else {
                    wf(p, m, -m.width / 2 + xo * (49 + q), -m.height / 2 + xo * (11 + v));
                }
            }
            if (this.ⵠᐃΔⲆⲆ && this.ⲆⵠᐃⲆᐃ < 1) {
                m = ⵠΔ[29][this.ΔΔΔΔⲆᐃΔ][Px.time];
                kf(29, this.ΔΔΔΔⲆᐃΔ, m, -m.width / 4, -m.height / 4 - xo * 39);
            }
            if (this.ΔⲆᐃᐃΔⵠᐃ) {
                m = ⵠΔ[820][Px.time];
                wf(820, m, -m.width / 2, -m.height / 2);
                this.ΔΔⵠⲆⲆⵠᐃ.Ⲇⵠᐃ();
                m = ⵠΔ[821][Px.time];
                wf(821, m, -m.width / 2, -m.height / 2 + this.ΔΔⵠⲆⲆⵠᐃ.ΔᐃΔ);
            } else {
                m = ⵠΔ[255][this.ᐃΔⲆⲆ][Px.time];
                if (this.ⲆⵠᐃⲆᐃ !== 85 && (kf(255, this.ᐃΔⲆⲆ, m, -m.width / 4, -m.height / 4), this.ⵠᐃⲆⵠΔ > 0)) {
                    m = ⵠΔ[796][this.ⵠᐃⲆⵠΔ][Px.time];
                    kf(796, this.ⵠᐃⲆⵠΔ, m, -m.width / 4, -m.height / 4);
                }
            }
            if (this.action & 128) {
                if (this.ΔⵠΔⲆⲆ.Ⲇⵠᐃ() && ds == this.ΔⵠΔⲆⲆ.ΔⵠⲆ) {
                    this.action -= 128;
                }
                oo.globalAlpha = 0.6 - this.ΔⵠΔⲆⲆ.ΔᐃΔ;
                if (this.ΔⲆᐃᐃΔⵠᐃ) {
                    m = ⵠΔ[825];
                    Mu(oo, m, -m.width / 2, -m.height / 2);
                } else {
                    m = Cw(this.ᐃΔⲆⲆ, ⵠΔ[255][this.ᐃΔⲆⲆ][0], ⵠⲆⲆᐃᐃΔⵠⲆⵠ);
                    Mu(oo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
                }
                oo.globalAlpha = 1;
            }
            if (this.action & 256) {
                if (this.ΔᐃᐃⲆΔⲆΔ.Ⲇⵠᐃ() && this.ΔᐃᐃⲆΔⲆΔ.ΔⵠⲆ == pq) {
                    this.action -= 256;
                }
                oo.globalAlpha = 0.6 - this.ΔᐃᐃⲆΔⲆΔ.ΔᐃΔ;
                m = ⵠΔ[266];
                Mu(oo, m, -m.width / 2, -m.height / 2);
                oo.globalAlpha = 1;
            }
            if (this.action & 2) {
                if (this.ᐃΔᐃ.Ⲇⵠᐃ() && this.ᐃΔᐃ.ΔⵠⲆ == w) {
                    this.action -= 2;
                }
                oo.globalAlpha = 0.6 - this.ᐃΔᐃ.ΔᐃΔ;
                if (this.ΔⲆᐃᐃΔⵠᐃ) {
                    m = ⵠΔ[823];
                    Mu(oo, m, -m.width / 2, -m.height / 2);
                } else {
                    m = Cw(this.ᐃΔⲆⲆ, ⵠΔ[255][this.ᐃΔⲆⲆ][0], ΔⵠⵠⲆⵠⲆⵠΔΔ);
                    Mu(oo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
                }
                oo.globalAlpha = 1;
            }
            if (this.action & 4) {
                if (this.freeze.Ⲇⵠᐃ() && this.freeze.ΔⵠⲆ == 0) {
                    this.action -= 4;
                }
                oo.globalAlpha = 0.6 - this.freeze.ΔᐃΔ;
                m = Cw(this.ᐃΔⲆⲆ, ⵠΔ[255][this.ᐃΔⲆⲆ][0], ⲆⵠΔⵠⵠⵠⵠⲆᐃ);
                Mu(oo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
                oo.globalAlpha = 1;
            }
            if (this.action & 8) {
                if (this.ΔⵠⲆΔᐃⵠΔ.Ⲇⵠᐃ() && pq == this.ΔⵠⲆΔᐃⵠΔ.ΔⵠⲆ) {
                    this.action -= 8;
                }
                oo.globalAlpha = 0.6 - this.ΔⵠⲆΔᐃⵠΔ.ΔᐃΔ;
                if (this.ΔⲆᐃᐃΔⵠᐃ) {
                    m = ⵠΔ[824];
                    Mu(oo, m, -m.width / 2, -m.height / 2);
                } else {
                    m = Cw(this.ᐃΔⲆⲆ, ⵠΔ[255][this.ᐃΔⲆⲆ][0], ⲆᐃⲆⲆⲆⲆΔΔᐃ);
                    Mu(oo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
                }
                oo.globalAlpha = 1;
            }
            yw(this.ⲆⵠᐃⲆᐃ);
            if (c === 1) {
                if (this.action & 16) {
                    q += this.attack.ΔᐃΔ * 15;
                }
                wf(286, ⲆⵠⲆΔ, -ⲆⵠⲆΔ.width / 2 - xo * 26, -ⲆⵠⲆΔ.height / 2 + (31 + v + q) * xo);
                if (h >= 920) {
                    Bf(h, x, -x.width / 4 - xo * 26, -x.height / 4 + xo * (27 + v + q));
                } else if (h !== 793) {
                    kf(h, this.ᐃΔⲆⲆ, x, -x.width / 4 - xo * 26, -x.height / 4 + xo * (27 + v + q));
                } else {
                    wf(h, x, -x.width / 2 - xo * 26, -x.height / 2 + (27 + v + q) * xo);
                }
                wf(286, ⲆⵠⲆΔ, -ⲆⵠⲆΔ.width / 2 + xo * 26, -ⲆⵠⲆΔ.height / 2 + xo * (31 + v + q));
                if (h >= 920) {
                    Bf(h, x, -x.width / 4 + xo * 26, -x.height / 4 + xo * (27 + v + q));
                } else if (h !== 793) {
                    kf(h, this.ᐃΔⲆⲆ, x, -x.width / 4 + xo * 26, -x.height / 4 + (27 + v + q) * xo);
                } else {
                    wf(h, x, -x.width / 2 + xo * 26, -x.height / 2 + xo * (27 + v + q));
                }
                Tv(this.right, 0, v + q);
            }
            oo.restore();
            if (this.ⲆⵠᐃⲆᐃ !== 83 && this.ⲆⵠᐃⲆᐃ !== 85) {
                if (this.ⲆⲆᐃΔᐃ > 0) {
                    this.ⵠᐃΔᐃ.ᐃⵠΔᐃΔⲆⵠ ||= lc(xo, this.ⵠᐃΔᐃ.ΔⵠⲆⵠⲆ, 20, "#187484", "#000", 2, null, null, xo * 300);
                    m = this.ⵠᐃΔᐃ.ᐃⵠΔᐃΔⲆⵠ;
                } else {
                    this.ⵠᐃΔᐃ.label ||= lc(xo, this.ⵠᐃΔᐃ.ΔⵠⲆⵠⲆ, 20, "#FFF", "#000", 2, null, null, xo * 300);
                    m = this.ⵠᐃΔᐃ.label;
                }
                if (Wr.ᐃΔΔ == Px.Ⲇⵠⵠ) {
                    oo.globalAlpha = 0.5;
                }
                q = Math.floor(-m.width / 2);
                v = Math.floor(-m.height / 2 - xo * 70);
                Mu(oo, m, q, v);
                if (this.ⵠᐃΔᐃ.level > 0) {
                    var z = q + m.width + 5;
                    m = ⵠΔ[885];
                    if (ⵠᐃⲆᐃΔⲆΔ[this.ⵠᐃΔᐃ.level] === sj) {
                        ⵠᐃⲆᐃΔⲆΔ[this.ⵠᐃΔᐃ.level] = lc(xo, "[" + this.ⵠᐃΔᐃ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, xo * 50);
                    }
                    Mu(oo, ⵠᐃⲆᐃΔⲆΔ[this.ⵠᐃΔᐃ.level], z, v);
                }
                oo.globalAlpha = 1;
            } else {
                v = Math.floor(xo * -70);
                q = Math.floor(ⵠΔ[558].width / 1.5);
            }
            if (Qx.ⵠⵠΔⲆᐃᐃᐃ(this.ⵠΔᐃⵠ)) {
                if (Qx.ⵠⲆᐃΔΔ[0] == this.ⵠΔᐃⵠ) {
                    m = ⵠΔ[559];
                } else {
                    m = ⵠΔ[558];
                }
                Mu(oo, m, q - m.width - 5, v - 6);
            }
            oo.restore();
        }
    }
    function Cw(b, c, d) {
        if (c.ᐃⲆΔⵠᐃΔⵠ() !== 1) {
            return c;
        }
        var e = ⲆⲆΔΔⵠΔⵠ[d][b];
        if (e === undefined) {
            var f = (e = document.createElement("canvas")).getContext("2d");
            var g = c.width;
            var a = c.height;
            e.width = g;
            e.height = a;
            f.drawImage(c, 0, 0);
            f.globalCompositeOperation = "source-in";
            f.fillStyle = ⵠⵠⲆⵠⲆΔᐃΔᐃ[d];
            f.fillRect(0, 0, g, a);
            ⲆⲆΔΔⵠΔⵠ[d][b] = e;
        }
        return e;
    }
    function Dw() {
        if (this.message !== jl) {
            var a = Qx.ⲆⲆⵠΔ.ⵠⵠⵠΔΔ.length > 0 ? -95 : 0;
            Mu(oo, this.message, 0, so - this.message.height + a);
        }
    }
    function Ew() {
        if (this.enabled && this.ⲆⲆΔΔⲆ >= 0) {
            var a = new Date().getTime() - this.ⲆⲆΔΔⲆ;
            var b = a % 1000 / 1000;
            if (b > 0.5) {
                b = 1 - (b - 0.5) * 2;
            } else {
                b *= 2;
            }
            if ((a = Math.floor(a / 1000)) < 60) {
                a = 60 - a;
                this.label ||= lc(xo, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
                if (a != this.now || !this.ᐃΔᐃⲆⵠᐃᐃ) {
                    this.now = a;
                    this.ᐃΔᐃⲆⵠᐃᐃ = lc(xo, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
                }
                Mu(oo, this.label, (ao - this.label.width) / 2, xo * 100);
                oo.globalAlpha = b;
                Mu(oo, this.ᐃΔᐃⲆⵠᐃᐃ, (ao - this.label.width) / 2 - this.ᐃΔᐃⲆⵠᐃᐃ.width + xo * 15, xo * 100);
                oo.globalAlpha = 1;
            }
        }
    }
    function Fw(a, b) {
        if (this.text) {
            if (this.timeout.ΔⵠⲆ) {
                oo.globalAlpha = 1 - this.timeout.ΔᐃΔ;
            } else {
                oo.globalAlpha = 1;
            }
            if (!this.label) {
                this.label = lc(xo, this.text, 40, a, null, null, null, null, null, b, 10);
            }
            Mu(oo, this.label, (ao - this.label.width) / 2, xo * 50);
            oo.globalAlpha = 1;
            if (this.timeout.Ⲇⵠᐃ() && Pn == this.timeout.ΔⵠⲆ) {
                this.text = this.list.shift();
                this.label = null;
            }
        }
    }
    ΔⵠⵠⲆⵠⲆⵠΔΔ = 0;
    ⵠⲆⲆᐃᐃΔⵠⲆⵠ = 1;
    ⲆⵠΔⵠⵠⵠⵠⲆᐃ = 2;
    ⲆᐃⲆⲆⲆⲆΔΔᐃ = 3;
    ΔΔⲆⲆᐃⵠⵠⵠΔ = 4;
    ⲆⲆΔΔⵠΔⵠ = [[], [], [], [], []];
    ⵠⵠⲆⵠⲆΔᐃΔᐃ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
    var Gw = 0;
    function Hw(j, e, i, k, n, o, a, q = 0) {
        Px.ⲆΔᐃⲆ[n].Ⲇⵠᐃ();
        for (var r = a; r >= q; r--) {
            for (var s = j; s <= e; s++) {
                for (var t = i; k >= t; t++) {
                    var w = Nx.ⲆⲆΔⲆ[s][t];
                    if (w && w[o]) {
                        var x = w[o][r];
                        if (x !== undefined) {
                            for (var y = 0; y < x.length; y++) {
                                var z = x[y];
                                if (z.Ⲇⵠᐃ) {
                                    if (z.ᐃΔᐃ.Ⲇⵠᐃ() && z.ᐃΔᐃ.ΔⵠⲆ == 0) {
                                        z.Ⲇⵠᐃ = false;
                                    }
                                    var A = xo * ((1 - z.ᐃΔᐃ.ΔᐃΔ) * Xx * 600);
                                    var B = Math.sin(z.angle) * A;
                                    var D = A * Math.cos(z.angle);
                                } else {
                                    B = 0;
                                    D = 0;
                                }
                                var E = ⵠΔ[n][Px.time][r];
                                var F = -E.width * Px.ⲆΔᐃⲆ[n].ΔᐃΔ;
                                var G = -E.height * Px.ⲆΔᐃⲆ[n].ΔᐃΔ;
                                Mu(oo, E, Qx.ΔᐃⲆ.x + z.x - F / 2 + B, Qx.ΔᐃⲆ.y + z.y - G / 2 + D, F, G);
                            }
                        }
                    }
                }
            }
        }
    }
    function ef(j, e, i, k, n, o, a, q) {
        if (Qa === q) {
            q = 0;
        }
        for (var r = a; r >= q; r--) {
            for (var t = j; t <= e; t++) {
                for (var w = i; k >= w; w++) {
                    var x = Nx.ⲆⲆΔⲆ[t][w];
                    if (x && x[o]) {
                        var y = x[o][r];
                        if (y !== fk) {
                            for (var z = 0; y.length > z; z++) {
                                var A = y[z];
                                var B = ⵠΔ[n][Px.time][r];
                                var D = (Gw + (t + w) * 3) % 60;
                                var E = D < 30 ? D / 30 : 1 - (D - 30) / 30;
                                var F = -B.width * (1 + E * 0.9 / 30);
                                var G = (1 + E * 0.9 / 30) * -B.height;
                                E = (D = (Gw + (t + w) * 7) % 60) < 30 ? D / 30 : 1 - (D - 30) / 30;
                                var H = oo.globalAlpha;
                                oo.globalAlpha = H * (0.9 + E * 0.1);
                                Mu(oo, B, Qx.ΔᐃⲆ.x + A.x - F / 2, Qx.ΔᐃⲆ.y + A.y - G / 2, F, G);
                                oo.globalAlpha = H;
                            }
                        }
                    }
                }
            }
        }
    }
    var tf = [];
    for (Qb = 0; Qb < 100; Qb++) {
        var nf = 1;
        if (Math.random() < 0.25) {
            nf = 0;
        }
        tf.push(nf);
    }
    function Iw(f, e, i, j, k, n, a, o, q) {
        if (o === er) {
            o = 0;
        }
        for (var h = a; o <= h; h--) {
            for (var r = f; e >= r; r++) {
                for (var t = i; j >= t; t++) {
                    var x = Nx.ⲆⲆΔⲆ[r][t];
                    if (x !== undefined && kr !== x[n]) {
                        var A = x[n][h];
                        if (A !== undefined) {
                            for (var B = 0; B < A.length; B++) {
                                var D = A[B];
                                if (D.Ⲇⵠᐃ) {
                                    if (D.ᐃΔᐃ.Ⲇⵠᐃ() && Dl == D.ᐃΔᐃ.ΔⵠⲆ) {
                                        D.Ⲇⵠᐃ = C;
                                    }
                                    var E = Xx * (1 - D.ᐃΔᐃ.ΔᐃΔ) * 600 * xo;
                                    var F = Math.sin(D.angle) * E;
                                    var G = E * Math.cos(D.angle);
                                } else {
                                    F = 0;
                                    G = 0;
                                }
                                for (var H = 0; ⵠⵠⵠΔⵠΔΔ[h].ΔⵠⲆᐃ > H; H++) {
                                    if (Px.ΔΔΔᐃⲆ[H].ⵠⲆᐃΔΔⵠΔ !== Wx) {
                                        Px.ΔΔΔᐃⲆ[H].Ⲇⵠᐃ();
                                        Px.ΔΔΔᐃⲆ[H].ⵠⲆᐃΔΔⵠΔ = Wx;
                                    }
                                    var I = ⵠΔ[941][Px.time][ⵠⵠⵠΔⵠΔΔ[h].ᐃⲆⵠⲆ[H].ᐃⲆᐃ];
                                    var J = Px.ΔΔΔᐃⲆ[H].ΔᐃΔ * -I.width;
                                    var K = Px.ΔΔΔᐃⲆ[H].ΔᐃΔ * -I.height;
                                    Mu(oo, I, Qx.ΔᐃⲆ.x + "#8a938e" - J / 4 + F + ⵠⵠⵠΔⵠΔΔ[h].ᐃⲆⵠⲆ[H].x, Qx.ΔᐃⲆ.y + D.y - K / 4 + G + ⵠⵠⵠΔⵠΔΔ[h].ᐃⲆⵠⲆ[H].y, J / 2, K / 2);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    function af(f, e, i, j, k, n, a, o = 0, q) {
        for (var h = a; o <= h; h--) {
            for (var r = f; e >= r; r++) {
                for (var s = i; j >= s; s++) {
                    if (q <= 0 || tf[(r + s * q) % tf.length] !== 1) {
                        var t = Nx.ⲆⲆΔⲆ[r][s];
                        if (t !== undefined && rh !== t[n]) {
                            var w = t[n][h];
                            if (ug !== w) {
                                for (var x = 0; x < w.length; x++) {
                                    var y = w[x];
                                    if (y.Ⲇⵠᐃ) {
                                        if (y.ᐃΔᐃ.Ⲇⵠᐃ() && y.ᐃΔᐃ.ΔⵠⲆ == Ks) {
                                            y.Ⲇⵠᐃ = Lj;
                                        }
                                        var z = xo * ((1 - y.ᐃΔᐃ.ΔᐃΔ) * Xx * 600);
                                        var A = Math.sin(y.angle) * z;
                                        var B = Math.cos(y.angle) * z;
                                    } else {
                                        A = 0;
                                        B = 0;
                                    }
                                    var D = ⵠΔ[k][Px.time][h];
                                    Mu(oo, D, Qx.ΔᐃⲆ.x + "#8a938e" - D.width / (ΔΔΔΔⵠ * 2) + A, Qx.ΔᐃⲆ.y + y.y - D.height / (ΔΔΔΔⵠ * 2) + B, D.width / ΔΔΔΔⵠ, D.height / ΔΔΔΔⵠ);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    function rf(c, e, f, i, j, k, a, m, n) {
        if (lh === m) {
            m = 0;
        }
        for (var h = c; e >= h; h++) {
            for (var o = f; o <= i; o++) {
                var p = Nx.ⲆⲆΔⲆ[h][o];
                if (er !== p && p[k] !== undefined) {
                    var q = p[k];
                    if (kr !== q) {
                        if (q.scale === 1) {
                            var r = ⵠΔ[j][Px.time][q.ᐃᐃⲆΔ];
                            oo.save();
                            oo.translate(Qx.ΔᐃⲆ.x + q.x, Qx.ΔᐃⲆ.y + q.y);
                            oo.rotate(q.angle);
                            Mu(oo, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
                            oo.restore();
                        } else if (q.scale === 3) {
                            for (var t = 0; t < q.ᐃⲆⵠ.length; t++) {
                                oo.save();
                                oo.translate(Qx.ΔᐃⲆ.x + q.x, Qx.ΔᐃⲆ.y + q.y);
                                oo.rotate(q.ᐃⲆⵠ[t].angle);
                                r = ⵠΔ[j][Px.time][q.ᐃⲆⵠ[t].ᐃᐃⲆΔ];
                                Mu(oo, r, -r.width / 3 + q.ᐃⲆⵠ[t].x, -r.height / 3 + q.ᐃⲆⵠ[t].y, r.width / 1.5, r.height / 1.5);
                                oo.restore();
                            }
                        } else {
                            r = ⵠΔ[j][Px.time][q.ᐃᐃⲆΔ];
                            oo.save();
                            oo.translate(Qx.ΔᐃⲆ.x + q.x, Qx.ΔᐃⲆ.y + q.y);
                            oo.rotate(q.angle);
                            Mu(oo, r, -r.width / 2, -r.height / 2, r.width, r.height);
                            oo.restore();
                        }
                    }
                }
            }
        }
    }
    ΔΔΔΔⵠ = 1;
    ⵠⵠⵠΔⵠΔΔ = [{
        ΔⵠⲆᐃ: 10,
        ᐃⲆⵠⲆ: [{
            y: -20,
            x: -128,
            ᐃⲆᐃ: 0
        }, {
            y: -4,
            x: -86,
            ᐃⲆᐃ: 1
        }, {
            x: -60,
            ᐃⲆᐃ: 2,
            y: -74
        }, {
            y: -144,
            ᐃⲆᐃ: 0,
            x: -22
        }, {
            y: 86,
            x: -58,
            ᐃⲆᐃ: 0
        }, {
            ᐃⲆᐃ: 0,
            y: -30,
            x: 3
        }, {
            y: -115,
            ᐃⲆᐃ: 1,
            x: 65
        }, {
            x: 118,
            y: -50,
            ᐃⲆᐃ: 0
        }, {
            ᐃⲆᐃ: 1,
            y: 15,
            x: 73
        }, {
            y: 79,
            x: 67,
            ᐃⲆᐃ: 0
        }]
    }, {
        ΔⵠⲆᐃ: 5,
        ᐃⲆⵠⲆ: [{
            ᐃⲆᐃ: 0,
            y: -26,
            x: -45
        }, {
            x: -45,
            ᐃⲆᐃ: 2,
            y: 20
        }, {
            x: 10,
            y: -60,
            ᐃⲆᐃ: 1
        }, {
            x: 52,
            ᐃⲆᐃ: 1,
            y: -17
        }, {
            ᐃⲆᐃ: 0,
            x: 14,
            y: 45
        }]
    }, {
        ᐃⲆⵠⲆ: [{
            y: 3,
            x: -30,
            ᐃⲆᐃ: 2
        }, {
            ᐃⲆᐃ: 2,
            x: 7,
            y: -38
        }, {
            ᐃⲆᐃ: 2,
            y: 5,
            x: 37
        }],
        ΔⵠⲆᐃ: 3
    }, {
        ΔⵠⲆᐃ: 11,
        ᐃⲆⵠⲆ: [{
            y: -87,
            x: -74,
            ᐃⲆᐃ: 2
        }, {
            x: -11,
            y: -10,
            ᐃⲆᐃ: 1
        }, {
            x: -99,
            y: 17,
            ᐃⲆᐃ: 1
        }, {
            y: 84,
            x: -66,
            ᐃⲆᐃ: 0
        }, {
            x: -55,
            y: 123,
            ᐃⲆᐃ: 1
        }, {
            y: 81,
            ᐃⲆᐃ: 2,
            x: 10
        }, {
            y: 50,
            ᐃⲆᐃ: 0,
            x: 52
        }, {
            x: 138,
            ᐃⲆᐃ: 1,
            y: 9
        }, {
            ᐃⲆᐃ: 0,
            y: -28,
            x: 104
        }, {
            ᐃⲆᐃ: 2,
            x: 67,
            y: -56
        }, {
            x: 5,
            y: -112,
            ᐃⲆᐃ: 0
        }]
    }, {
        ΔⵠⲆᐃ: 6,
        ᐃⲆⵠⲆ: [{
            ᐃⲆᐃ: 2,
            y: -66,
            x: -33
        }, {
            y: 10,
            x: -58,
            ᐃⲆᐃ: 0
        }, {
            x: -19,
            y: 44,
            ᐃⲆᐃ: 1
        }, {
            ᐃⲆᐃ: 0,
            x: 44,
            y: 20
        }, {
            y: -36,
            ᐃⲆᐃ: 2,
            x: 53
        }, {
            y: -62,
            x: 7,
            ᐃⲆᐃ: 0
        }]
    }, {
        ΔⵠⲆᐃ: 3,
        ᐃⲆⵠⲆ: [{
            y: -25,
            x: -19,
            ᐃⲆᐃ: 1
        }, {
            y: 13,
            ᐃⲆᐃ: 2,
            x: -29
        }, {
            y: 12,
            ᐃⲆᐃ: 0,
            x: 12
        }]
    }];
    var sf = 0;
    var Jw = 0;
    var Kw = 0;
    var Lw = 0;
    function Mw(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Qx.ΔᐃⲆ.x + f + 820;
        var l = Math.max(Qx.ΔᐃⲆ.y + e, 0);
        var g = Math.max(-Qx.ΔᐃⲆ.y + so - i - 100, 0);
        var r = l;
        var b = so - l - g;
        if (n) {
            var d = j.ᐃⲆᐃ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += -d + 0 + 2;
        if (n) {
            d = j.ᐃⲆᐃ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h - 250 - s - d;
        var u = (s += t + 2) - 2;
        if (n) {
            d = j.ᐃⲆᐃ(q).x;
        } else {
            d = q.r.x;
        }
        if (s + (t = h - 350 - s - d) < u) {
            s += t + 2;
        } else {
            s = u;
        }
        t = h - 700 - s;
        if (n > 0 && k.ⵠⵠΔⵠⲆⵠᐃ === 1) {
            if (Px.transition) {
                var p = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                oo.fillStyle = pf(15, 77, 72, 252, 239, 187, p);
            } else {
                oo.fillStyle = Wr.ⲆⵠΔⵠⵠᐃⵠ[Px.time];
            }
            oo.fillRect(s, r, t, b);
        } else {
            if (Px.transition) {
                p = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                oo.fillStyle = pf(k.ᐃᐃⲆ[0], k.ᐃᐃⲆ[1], k.ᐃᐃⲆ[2], k.Ⲇⵠⵠ[0], k.Ⲇⵠⵠ[1], k.Ⲇⵠⵠ[2], p);
            } else {
                oo.fillStyle = k.ⵠᐃᐃΔⵠ[Px.time];
            }
            oo.fillRect(s, r, t, b);
        }
    }
    function bf(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Qx.ΔᐃⲆ.y + j - 700;
        var l = Math.max(Qx.ΔᐃⲆ.x + e, 0);
        var g = Math.max(-Qx.ΔᐃⲆ.x + ao - i - 100, 0);
        var t = l;
        var b = ao - l - g;
        if (o) {
            var d = q.ᐃⲆᐃ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = t;
        var m = u;
        var p = d.x + 0;
        var C = b;
        var G = u += d.x + 0 - 2;
        if (o) {
            d = q.ᐃⲆᐃ(r);
        } else {
            d = r.r;
        }
        var f = h + 250 - u + d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f - 2) - 2;
        if (o) {
            d = q.ᐃⲆᐃ(s);
        } else {
            d = s.r;
        }
        if (A < u + (f = h + 350 - u + d.x) - 3) {
            var k = true;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f - 2;
        } else {
            k = false;
            u = A;
            D = -1;
        }
        f = h + 700 - u;
        if (Px.transition) {
            var N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
            oo.fillStyle = pf(9, 55, 63, 11, 106, 132, N);
        } else {
            oo.fillStyle = Wr.ΔⵠΔΔⲆ[Px.time];
        }
        oo.fillRect(F, m, C, p);
        if (o) {
            if (Px.transition) {
                N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                oo.fillStyle = pf(15, 70, 76, 42, 139, 155, N);
            } else {
                oo.fillStyle = Wr.ⵠᐃⲆΔΔⲆᐃ[Px.time];
            }
        } else if (Px.transition) {
            N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
            oo.fillStyle = pf(9, 55, 63, 11, 106, 132, N);
        } else {
            oo.fillStyle = Wr.ΔⵠΔΔⲆ[Px.time];
        }
        oo.fillRect(y, H, K, w);
        if (k) {
            if (o) {
                if (Px.transition) {
                    N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                    oo.fillStyle = pf(17, 94, 96, 169, 214, 211, N);
                } else {
                    oo.fillStyle = Wr.ⲆΔⵠⲆΔᐃᐃ[Px.time];
                }
            } else if (Px.transition) {
                N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                oo.fillStyle = pf(9, 55, 63, 11, 106, 132, N);
            } else {
                oo.fillStyle = Wr.ΔⵠΔΔⲆ[Px.time];
            }
            oo.fillRect(J, L, B, M);
        }
        if (Mx.Δⵠⵠᐃᐃ && o) {
            q.ⲆᐃᐃΔᐃΔΔⵠΔ(A, D, G, h, -Qx.ΔᐃⲆ.x + F, -Qx.ΔᐃⲆ.x + F + C);
        }
    }
    function df(a, b, c, d, e) {
        if (Px.transition && e == 1) {
            oo.globalAlpha = 1;
            Mu(oo, ⵠΔ[a][Px.time][b], c, d);
            Px.time = Px.time ? 0 : 1;
            oo.globalAlpha = 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ;
            Mu(oo, ⵠΔ[a][Px.time][b], c, d);
            Px.time = Px.time ? 0 : 1;
            oo.globalAlpha = 1;
        } else {
            oo.globalAlpha = e;
            Mu(oo, ⵠΔ[a][Px.time][b], c, d);
            oo.globalAlpha = 1;
        }
    }
    function vf(a, b) {
        if (Px.transition) {
            oo.globalAlpha = 1;
            a.ΔᐃⲆᐃΔ(b);
            Px.time = Px.time ? 0 : 1;
            oo.globalAlpha = 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ;
            a.ΔᐃⲆᐃΔ(b);
            Px.time = Px.time ? 0 : 1;
            oo.globalAlpha = 1;
        } else {
            a.ΔᐃⲆᐃΔ(b);
        }
    }
    function cf() {
        oo.globalAlpha = 1;
        if (Px.transition) {
            var a = Px.ⵠⵠⵠᐃ.Ⲇⵠᐃ();
        }
        Px.ΔᐃⵠⵠⵠΔⵠᐃⲆ(-Qx.ΔᐃⲆ.x, -Qx.ΔᐃⲆ.y);
        sf = Math.max(Math.floor(-Qx.ΔᐃⲆ.x / Px.ΔᐃᐃΔΔⲆⵠ) - 5, 0);
        Jw = Math.min(Math.floor((-Qx.ΔᐃⲆ.x + Qx.ΔᐃⲆ.w) / Px.ΔᐃᐃΔΔⲆⵠ) + 4, Px.ⵠⵠᐃⵠⵠ - 1);
        Kw = Math.max(Math.floor(-Qx.ΔᐃⲆ.y / Px.ΔΔⲆⵠᐃΔᐃ) - 3, 0);
        Lw = Math.min(Math.floor((-Qx.ΔᐃⲆ.y + Qx.ΔᐃⲆ.ⲆⲆⲆ) / Px.ΔΔⲆⵠᐃΔᐃ) + 3, Px.Ⲇᐃⵠⵠⵠ - 1);
        (function () {
            for (var c = Px.Ⲇⵠⵠᐃᐃ.length - 1; c >= 0; c--) {
                if ((A = Px.Ⲇⵠⵠᐃᐃ[c]).ᐃⲆᐃ === Px.Δᐃⵠᐃᐃ) {
                    var f = Px.ΔⲆᐃΔⵠ[A.ᐃⲆᐃ];
                    if (-Qx.ΔᐃⲆ.x >= A.x1 - 230 - ao && -Qx.ΔᐃⲆ.x <= A.x2 + 330 && A.y1 - so <= -Qx.ΔᐃⲆ.y && A.y2 + 100 >= -Qx.ΔᐃⲆ.y) {
                        var j = A.x2;
                        if (Px.Δᐃⵠᐃᐃ !== A.ᐃⲆᐃ) {
                            j -= 610;
                        }
                        var k = A.x1;
                        if (Px.Δᐃⵠᐃᐃ !== A.ᐃⲆᐃ) {
                            k += 610;
                        }
                        var m = A.y2;
                        if (A.ᐃⲆᐃ !== Px.Δᐃⵠᐃᐃ) {
                            m -= 610;
                        }
                        var p = A.y1;
                        if (A.ᐃⲆᐃ !== Px.Δᐃⵠᐃᐃ) {
                            p += 610;
                        }
                        if (Px.transition) {
                            var q = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                            oo.fillStyle = pf(f.ᐃᐃⲆ[0], f.ᐃᐃⲆ[1], f.ᐃᐃⲆ[2], f.Ⲇⵠⵠ[0], f.Ⲇⵠⵠ[1], f.Ⲇⵠⵠ[1], q);
                        } else {
                            oo.fillStyle = f.ⵠᐃᐃΔⵠ[Px.time];
                        }
                        var w = Math.max(Qx.ΔᐃⲆ.x + k - 2 - 230, 0);
                        var x = Math.max(-Qx.ΔᐃⲆ.x + ao - j - 330 - 2, 0);
                        var y = Math.max(Qx.ΔᐃⲆ.y + p - 2, 0);
                        var z = Math.max(-Qx.ΔᐃⲆ.y + so - m - 100 - 2, 0);
                        oo.beginPath();
                        oo.fillRect(w, y, ao - x - w, so - y - z);
                    }
                }
            }
            for (c = Px.Ⲇⵠⵠᐃᐃ.length - 1; c >= 0; c--) {
                if ((A = Px.Ⲇⵠⵠᐃᐃ[c]).ᐃⲆᐃ !== Px.Δᐃⵠᐃᐃ) {
                    j = A.x2;
                    if (A.ᐃⲆᐃ !== Px.Δᐃⵠᐃᐃ) {
                        j -= 400;
                    }
                    k = A.x1;
                    if (A.ᐃⲆᐃ !== Px.Δᐃⵠᐃᐃ) {
                        k += 400;
                    }
                    m = A.y2;
                    if (Px.Δᐃⵠᐃᐃ !== A.ᐃⲆᐃ) {
                        m -= 300;
                    }
                    p = A.y1;
                    if (A.ᐃⲆᐃ !== Px.Δᐃⵠᐃᐃ) {
                        p += 300;
                    }
                    if (!(A.ΔᐃΔ & 8) && -Qx.ΔᐃⲆ.x >= j - ao + 120 && -Qx.ΔᐃⲆ.x <= j + 820 && -Qx.ΔᐃⲆ.y >= p + 88 - so && m + 50 >= -Qx.ΔᐃⲆ.y) {
                        Mw(j, p + 88, m - 88, Qx.ⲆⵠΔΔ[0], Px.ΔⲆᐃΔⵠ[A.ᐃⲆᐃ], A.ΔᐃΔ & 8);
                        mf(j, p + 88, m - 88, Qx.ⲆⵠΔΔ[0], Px.ΔⲆᐃΔⵠ[A.ᐃⲆᐃ], A.ΔᐃΔ & 8);
                    }
                    if (!(A.ΔᐃΔ & 4) && -Qx.ΔᐃⲆ.x >= k - ao - 700 && -Qx.ΔᐃⲆ.x <= k - 20 && -Qx.ΔᐃⲆ.y >= p + 88 - so && m + 50 >= -Qx.ΔᐃⲆ.y) {
                        Cf(k, p + 88, m - 88, Qx.ⲆⵠΔΔ[1], Px.ΔⲆᐃΔⵠ[A.ᐃⲆᐃ], A.ΔᐃΔ & 4);
                        zf(k, p + 88, m - 88, Qx.ⲆⵠΔΔ[1], Px.ΔⲆᐃΔⵠ[A.ᐃⲆᐃ], A.ΔᐃΔ & 4);
                    }
                    if (!(A.ΔᐃΔ & 2) && -Qx.ΔᐃⲆ.x >= k - 235 - ao && -Qx.ΔᐃⲆ.x <= j + 350 && -Qx.ΔᐃⲆ.y >= m - so - 275 && m + 490 >= -Qx.ΔᐃⲆ.y) {
                        Pf(m - 230, k - 230, j + 230, Qx.ⲆⵠΔΔ[2], Px.ΔⲆᐃΔⵠ[A.ᐃⲆᐃ], A.ΔᐃΔ & 2);
                        Jf(m - 230, k - 230, j + 230, Qx.ⲆⵠΔΔ[2], Px.ΔⲆᐃΔⵠ[A.ᐃⲆᐃ], A.ΔᐃΔ & 2);
                    }
                    if (!(A.ΔᐃΔ & 1) && -Qx.ΔᐃⲆ.x >= k - 235 - ao && -Qx.ΔᐃⲆ.x <= j + 350 && -Qx.ΔᐃⲆ.y >= p - so - 390 && p + 315 >= -Qx.ΔᐃⲆ.y) {
                        Af(p + 310, k - 230, j + 230, Qx.ⲆⵠΔΔ[3], Px.ΔⲆᐃΔⵠ[A.ᐃⲆᐃ], A.ΔᐃΔ & 1);
                        bf(p + 310, k - 230, j + 230, Qx.ⲆⵠΔΔ[3], Px.ΔⲆᐃΔⵠ[A.ᐃⲆᐃ], A.ΔᐃΔ & 1);
                    }
                }
            }
            for (c = Px.Ⲇⵠⵠᐃᐃ.length - 1; c >= 0; c--) {
                if ((A = Px.Ⲇⵠⵠᐃᐃ[c]).ᐃⲆᐃ !== Px.Δᐃⵠᐃᐃ) {
                    j = A.x2;
                    if (A.ᐃⲆᐃ !== Px.Δᐃⵠᐃᐃ) {
                        j -= 400;
                    }
                    k = A.x1;
                    if (Px.Δᐃⵠᐃᐃ !== A.ᐃⲆᐃ) {
                        k += 400;
                    }
                    m = A.y2;
                    if (A.ᐃⲆᐃ !== Px.Δᐃⵠᐃᐃ) {
                        m -= 300;
                    }
                    p = A.y1;
                    if (A.ᐃⲆᐃ !== Px.Δᐃⵠᐃᐃ) {
                        p += 300;
                    }
                    if ((A.ΔᐃΔ & 8) !== 0 && j - ao + 120 <= -Qx.ΔᐃⲆ.x && j + 820 >= -Qx.ΔᐃⲆ.x && p + 88 - so <= -Qx.ΔᐃⲆ.y && m + 50 >= -Qx.ΔᐃⲆ.y) {
                        Mw(j, p + 88, m - 88, Qx.ⲆⵠΔΔ[0], Px.ΔⲆᐃΔⵠ[A.ᐃⲆᐃ], A.ΔᐃΔ & 8);
                    }
                    if ((A.ΔᐃΔ & 4) !== 0 && -Qx.ΔᐃⲆ.x >= k - ao - 700 && k - 20 >= -Qx.ΔᐃⲆ.x && -Qx.ΔᐃⲆ.y >= p + 88 - so && m + 50 >= -Qx.ΔᐃⲆ.y) {
                        Cf(k, p + 88, m - 88, Qx.ⲆⵠΔΔ[1], Px.ΔⲆᐃΔⵠ[A.ᐃⲆᐃ], A.ΔᐃΔ & 4);
                    }
                    if ((A.ΔᐃΔ & 2) !== 0 && k - 235 - ao <= -Qx.ΔᐃⲆ.x && j + 350 >= -Qx.ΔᐃⲆ.x && -Qx.ΔᐃⲆ.y >= m - so - 275 && m + 490 >= -Qx.ΔᐃⲆ.y) {
                        Pf(m - 230, k - 230, j + 230, Qx.ⲆⵠΔΔ[2], Px.ΔⲆᐃΔⵠ[A.ᐃⲆᐃ], A.ΔᐃΔ & 2);
                    }
                    if (A.ΔᐃΔ & 1 && k - 235 - ao <= -Qx.ΔᐃⲆ.x && j + 350 >= -Qx.ΔᐃⲆ.x && p - so - 390 <= -Qx.ΔᐃⲆ.y && -Qx.ΔᐃⲆ.y <= p + 315) {
                        Af(p + 310, k - 230, j + 230, Qx.ⲆⵠΔΔ[3], Px.ΔⲆᐃΔⵠ[A.ᐃⲆᐃ], A.ΔᐃΔ & 1);
                    }
                }
            }
            for (c = Px.Ⲇⵠⵠᐃᐃ.length - 1; c >= 0; c--) {
                var A = Px.Ⲇⵠⵠᐃᐃ[c];
                if (Px.Δᐃⵠᐃᐃ !== A.ᐃⲆᐃ) {
                    f = Px.ΔⲆᐃΔⵠ[A.ᐃⲆᐃ];
                    if (-Qx.ΔᐃⲆ.x >= A.x1 - 230 - ao && -Qx.ΔᐃⲆ.x <= A.x2 + 330 && -Qx.ΔᐃⲆ.y >= A.y1 - so && -Qx.ΔᐃⲆ.y <= A.y2 + 100) {
                        j = A.x2;
                        if (A.ᐃⲆᐃ !== Px.Δᐃⵠᐃᐃ) {
                            if (A.ΔᐃΔ & 8) {
                                j -= 610;
                            } else {
                                j -= 414;
                            }
                        }
                        k = A.x1;
                        if (Px.Δᐃⵠᐃᐃ !== A.ᐃⲆᐃ) {
                            if ((A.ΔᐃΔ & 4) === 0) {
                                k += 414;
                            } else {
                                k += 610;
                            }
                        }
                        m = A.y2;
                        if (Px.Δᐃⵠᐃᐃ !== A.ᐃⲆᐃ) {
                            if (A.ΔᐃΔ & 2) {
                                m -= 610;
                            } else {
                                m -= 414;
                            }
                        }
                        p = A.y1;
                        if (A.ᐃⲆᐃ !== Px.Δᐃⵠᐃᐃ) {
                            if ((A.ΔᐃΔ & 1) === 0) {
                                p += 414;
                            } else {
                                p += 610;
                            }
                        }
                        if (Px.transition) {
                            q = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                            oo.fillStyle = pf(f.ᐃᐃⲆ[0], f.ᐃᐃⲆ[1], f.ᐃᐃⲆ[2], f.Ⲇⵠⵠ[0], f.Ⲇⵠⵠ[1], f.Ⲇⵠⵠ[2], q);
                        } else {
                            oo.fillStyle = f.ⵠᐃᐃΔⵠ[Px.time];
                        }
                        w = Math.max(Qx.ΔᐃⲆ.x + k - 2 - 230, 0);
                        x = Math.max(-Qx.ΔᐃⲆ.x + ao - j - 330 - 2, 0);
                        y = Math.max(Qx.ΔᐃⲆ.y + p - 2, 0);
                        z = Math.max(-Qx.ΔᐃⲆ.y + so - m - 100 - 2, 0);
                        oo.beginPath();
                        oo.fillRect(w, y, ao - x - w, so - y - z);
                    }
                }
            }
            if (Mx.Δⵠⵠᐃᐃ) {
                ff(Hw, Kw, Lw, sf, Jw, 695, "isl", 2);
                ff(Hw, Kw, Lw, sf, Jw, 694, "isl", 2);
            }
            ff(af, Kw, Lw, sf, Jw, 692, "isl", 2);
            if (Mx.Δⵠⵠᐃᐃ) {
                ff(rf, Kw, Lw, sf, Jw, 243, "de");
            }
            var B = Px.Ⲇᐃⵠ[0];
            for (c = 0; B.length > c; c++) {
                for (var b = B[c], C = 0; C < b.ⲆⲆⲆᐃⲆ.length; C++) {
                    Tf(b.ⲆⲆⲆᐃⲆ[C]);
                }
            }
            if ((uv += Xx * 40) > 60) {
                uv -= 60;
            }
            ff(Jv, Kw, Lw, sf, Jw, 1024, "r", 0);
            c = 0;
            for (; Px.Ⲇⵠⵠᐃᐃ.length > c; c++) {
                if ((A = Px.Ⲇⵠⵠᐃᐃ[c]).ᐃⲆᐃ !== Px.Δᐃⵠᐃᐃ) {
                    j = A.x2;
                    if (Px.Δᐃⵠᐃᐃ !== A.ᐃⲆᐃ) {
                        j -= 400;
                    }
                    k = A.x1;
                    if (A.ᐃⲆᐃ !== Px.Δᐃⵠᐃᐃ) {
                        k += 400;
                    }
                    m = A.y2;
                    if (Px.Δᐃⵠᐃᐃ !== A.ᐃⲆᐃ) {
                        m -= 300;
                    }
                    p = A.y1;
                    if (Px.Δᐃⵠᐃᐃ !== A.ᐃⲆᐃ) {
                        p += 300;
                    }
                    if ((A.ΔᐃΔ & 8) > 0 && j - ao + 120 <= -Qx.ΔᐃⲆ.x && -Qx.ΔᐃⲆ.x <= j + 820 && -Qx.ΔᐃⲆ.y >= p + 88 - so && -Qx.ΔᐃⲆ.y <= m + 50) {
                        mf(j, p + 88, m - 88, Qx.ⲆⵠΔΔ[0], Px.ΔⲆᐃΔⵠ[A.ᐃⲆᐃ], A.ΔᐃΔ & 8);
                    }
                    if ((A.ΔᐃΔ & 4) > 0 && -Qx.ΔᐃⲆ.x >= k - ao - 700 && k - 20 >= -Qx.ΔᐃⲆ.x && -Qx.ΔᐃⲆ.y >= p + 88 - so && m + 50 >= -Qx.ΔᐃⲆ.y) {
                        zf(k, p + 88, m - 88, Qx.ⲆⵠΔΔ[1], Px.ΔⲆᐃΔⵠ[A.ᐃⲆᐃ], A.ΔᐃΔ & 4);
                    }
                    if ((A.ΔᐃΔ & 2) > 0 && k - 235 - ao <= -Qx.ΔᐃⲆ.x && j + 350 >= -Qx.ΔᐃⲆ.x && m - so - 275 <= -Qx.ΔᐃⲆ.y && m + 490 >= -Qx.ΔᐃⲆ.y) {
                        Jf(m - 230, k - 230, j + 230, Qx.ⲆⵠΔΔ[2], Px.ΔⲆᐃΔⵠ[A.ᐃⲆᐃ], A.ΔᐃΔ & 2);
                    }
                    if ((A.ΔᐃΔ & 1) > 0 && -Qx.ΔᐃⲆ.x >= k - 235 - ao && j + 350 >= -Qx.ΔᐃⲆ.x && -Qx.ΔᐃⲆ.y >= p - so - 390 && p + 315 >= -Qx.ΔᐃⲆ.y) {
                        bf(p + 310, k - 230, j + 230, Qx.ⲆⵠΔΔ[3], Px.ΔⲆᐃΔⵠ[A.ᐃⲆᐃ], A.ΔᐃΔ & 1);
                    }
                }
            }
        })();
        (function () {
            var c = sf;
            var e = Jw;
            var i = Kw;
            var t = Lw;
            if (Mx.Δⵠⵠᐃᐃ) {
                ff(af, i, t, c, e, 621, "l", 2);
            }
            if (Mx.Δⵠⵠᐃᐃ) {
                ff(af, i, t, c, e, Wr.ΔⲆᐃᐃΔ, "la", 5);
            }
            ff(af, i, t, c, e, 203, "la", 5);
            ff(Hw, i, t, c, e, 620, "l", 2);
            if (Mx.Δⵠⵠᐃᐃ) {
                ff(Iw, i, t, c, e, 203, "la", 5);
                ff(Hw, i, t, c, e, 619, "l", 2);
            }
            ff(af, i, t, c, e, 1052, "ma", 4);
            for (var n = Px.Ⲇᐃⵠ[76], z = 0; z < n.length; z++) {
                n[z].ᐃⵠΔⲆΔᐃΔ();
            }
            var M = Px.Ⲇᐃⵠ[0];
            for (z = 0; M.length > z; z++) {
                for (var N = M[z], Z = 0; Z < N.ⲆᐃⵠΔⵠ.length; Z++) {
                    Mf(N.ⲆᐃⵠΔⵠ[Z]);
                }
            }
            var aa = Px.Ⲇᐃⵠ[30];
            for (z = 0; z < aa.length; z++) {
                xf(aa[z], 125);
                aa[z].ⲆⵠⵠΔΔ(aa[z].info);
            }
            var l = Px.Ⲇᐃⵠ[18];
            for (z = 0; l.length > z; z++) {
                if (l[z].action == 2) {
                    yf(l[z]);
                }
            }
            var ba = Px.Ⲇᐃⵠ[1];
            for (z = 0; z < ba.length; z++) {
                yf(ba[z], 113);
            }
            var ca = Px.Ⲇᐃⵠ[22];
            for (z = 0; ca.length > z; z++) {
                yf(ca[z]);
            }
            var da = Px.Ⲇᐃⵠ[23];
            for (z = 0; da.length > z; z++) {
                yf(da[z]);
            }
            var ea = Px.Ⲇᐃⵠ[6];
            for (z = 0; z < ea.length; z++) {
                yf(ea[z], 118);
            }
            var v = Px.Ⲇᐃⵠ[36];
            for (z = 0; z < v.length; z++) {
                xf(v[z]);
            }
            var m = Px.Ⲇᐃⵠ[33];
            for (z = 0; z < m.length; z++) {
                xf(m[z], 141);
            }
            var p = Px.Ⲇᐃⵠ[3];
            for (z = 0; p.length > z; z++) {
                yf(p[z]);
            }
            p = Px.Ⲇᐃⵠ[43];
            z = 0;
            for (; z < p.length; z++) {
                yf(p[z]);
            }
            p = Px.Ⲇᐃⵠ[3];
            z = 0;
            for (; p.length > z; z++) {
                vf(p[z]);
            }
            var fa = Px.Ⲇᐃⵠ[44];
            for (z = 0; fa.length > z; z++) {
                if (!(fa[z].info & 15) || fa[z].info === 10) {
                    xf(fa[z]);
                }
            }
            var ha = Px.Ⲇᐃⵠ[54];
            for (z = 0; z < ha.length; z++) {
                if (!(ha[z].info & 15) || ha[z].info === 10) {
                    xf(ha[z]);
                }
            }
            var ia = Px.Ⲇᐃⵠ[55];
            for (z = 0; z < ia.length; z++) {
                if ((ia[z].info & 15) === 0 || ia[z].info === 10) {
                    xf(ia[z]);
                }
            }
            var ja = Px.Ⲇᐃⵠ[79];
            for (z = 0; ja.length > z; z++) {
                xf(ja[z], 132);
            }
            var ka = Px.Ⲇᐃⵠ[39];
            for (z = 0; ka.length > z; z++) {
                if (!(ka[z].info & 15) || ka[z].info === 10) {
                    xf(ka[z]);
                }
            }
            var la = Px.Ⲇᐃⵠ[40];
            for (z = 0; la.length > z; z++) {
                if (!(la[z].info & 15) || la[z].info === 10) {
                    xf(la[z]);
                }
            }
            var ma = Px.Ⲇᐃⵠ[37];
            for (z = 0; ma.length > z; z++) {
                if ((ma[z].info & 15) === 0 || ma[z].info === 10) {
                    xf(ma[z]);
                }
            }
            ja = Px.Ⲇᐃⵠ[31];
            z = 0;
            for (; ja.length > z; z++) {
                xf(ja[z]);
            }
            var na = Px.Ⲇᐃⵠ[86];
            for (z = 0; z < na.length; z++) {
                xf(na[z], 250, 729);
            }
            var x = Px.Ⲇᐃⵠ[82];
            for (z = 0; x.length > z; z++) {
                xf(x[z], 250, 729);
            }
            var J = Px.Ⲇᐃⵠ[87];
            for (z = 0; J.length > z; z++) {
                xf(J[z], 854, 859);
            }
            var B = Px.Ⲇᐃⵠ[45];
            for (z = 0; z < B.length; z++) {
                if (B[z].info & 1) {
                    xf(B[z], 336);
                }
            }
            B = Px.Ⲇᐃⵠ[46];
            z = 0;
            for (; B.length > z; z++) {
                if (B[z].info & 1) {
                    xf(B[z], 373);
                }
            }
            B = Px.Ⲇᐃⵠ[47];
            z = 0;
            for (; z < B.length; z++) {
                if (B[z].info) {
                    xf(B[z], 376);
                }
            }
            B = Px.Ⲇᐃⵠ[48];
            z = 0;
            for (; B.length > z; z++) {
                if (B[z].info) {
                    xf(B[z], 379);
                }
            }
            B = Px.Ⲇᐃⵠ[49];
            z = 0;
            for (; z < B.length; z++) {
                if (B[z].info) {
                    xf(B[z], 500);
                }
            }
            B = Px.Ⲇᐃⵠ[53];
            z = 0;
            for (; z < B.length; z++) {
                if (B[z].info) {
                    xf(B[z], 376);
                }
            }
            B = Px.Ⲇᐃⵠ[10];
            z = 0;
            for (; z < B.length; z++) {
                if (B[z].info & 1) {
                    xf(B[z], 336);
                }
            }
            B = Px.Ⲇᐃⵠ[15];
            z = 0;
            for (; B.length > z; z++) {
                if (B[z].info & 1) {
                    xf(B[z], 373);
                }
            }
            B = Px.Ⲇᐃⵠ[16];
            z = 0;
            for (; B.length > z; z++) {
                if (B[z].info) {
                    xf(B[z], 376);
                }
            }
            B = Px.Ⲇᐃⵠ[17];
            z = 0;
            for (; B.length > z; z++) {
                if (B[z].info) {
                    xf(B[z], 379);
                }
            }
            B = Px.Ⲇᐃⵠ[21];
            z = 0;
            for (; z < B.length; z++) {
                if (B[z].info) {
                    xf(B[z], 500);
                }
            }
            B = Px.Ⲇᐃⵠ[51];
            z = 0;
            for (; B.length > z; z++) {
                if (B[z].info) {
                    xf(B[z], 376);
                }
            }
            var oa = Px.Ⲇᐃⵠ[80];
            for (z = 0; z < oa.length; z++) {
                xf(oa[z], 264, 322);
            }
            var I = Px.Ⲇᐃⵠ[41];
            for (z = 0; z < I.length; z++) {
                xf(I[z], 198);
            }
            n = Px.Ⲇᐃⵠ[76];
            z = 0;
            for (; n.length > z; z++) {
                xf(n[z], Wr.ᐃⲆⲆΔᐃⵠⵠ, Wr.ⲆᐃⵠⵠⲆⲆⲆᐃⵠ);
            }
            var pa = Px.Ⲇᐃⵠ[91];
            for (z = 0; z < pa.length; z++) {
                if (pa[z].ᐃΔⵠⲆΔᐃⵠ === 0) {
                    xf(pa[z]);
                }
            }
            M = Px.Ⲇᐃⵠ[0];
            z = 0;
            for (; z < M.length; z++) {
                N = M[z];
                if (M[z].ⵠᐃⲆⲆΔ !== 227 && M[z].ⵠᐃⲆⲆΔ !== 228 && M[z].ⵠᐃⲆⲆΔ !== 229 && M[z].ⵠᐃⲆⲆΔ !== 230 && M[z].ⵠᐃⲆⲆΔ !== 91) {
                    if (N.ⵠᐃⵠⲆᐃΔⲆ === 0) {
                        if (N.ᐃΔΔⲆⲆΔΔ > 0.001) {
                            N.ᐃΔΔⲆⲆΔΔ = ⵠᐃⵠ.ⵠΔᐃᐃᐃᐃᐃ(N.ᐃΔΔⲆⲆΔΔ, 0, 0.018);
                            var qa = 1 + Math.min(1, Math.max(N.ᐃΔΔⲆⲆΔΔ, 0) / 100) * 0.18;
                            oo.save();
                            oo.scale(qa, qa);
                            Qx.ΔᐃⲆ.x /= qa;
                            Qx.ΔᐃⲆ.y /= qa;
                            N.x /= qa;
                            N.y /= qa;
                            N.r.x /= qa;
                            N.r.y /= qa;
                            N.ⵠᐃⵠΔⲆⲆΔ();
                            N.ᐃⲆᐃⲆ();
                            Qx.ΔᐃⲆ.x *= qa;
                            Qx.ΔᐃⲆ.y *= qa;
                            N.x *= qa;
                            N.y *= qa;
                            N.r.x *= qa;
                            N.r.y *= qa;
                            oo.restore();
                        } else {
                            N.ᐃΔⵠⲆΔᐃⵠ = 0;
                            N.ⵠᐃⵠΔⲆⲆΔ();
                            N.ᐃⲆᐃⲆ();
                        }
                    }
                } else if (N.ΔᐃⲆΔⲆ <= 180) {
                    oo.save();
                    qa = 1 + Math.min(1, Math.max(N.ⵠⲆᐃΔⵠ - 30, 0) / 180) * 0.35;
                    oo.scale(qa, qa);
                    Qx.ΔᐃⲆ.x /= qa;
                    Qx.ΔᐃⲆ.y /= qa;
                    N.x /= qa;
                    N.y /= qa;
                    N.r.x /= qa;
                    N.r.y /= qa;
                    N.ᐃΔⵠⲆΔᐃⵠ = 0;
                    N.ⵠᐃⵠΔⲆⲆΔ();
                    N.ᐃⲆᐃⲆ();
                    Qx.ΔᐃⲆ.x *= qa;
                    Qx.ΔᐃⲆ.y *= qa;
                    N.x *= qa;
                    N.y *= qa;
                    N.r.x *= qa;
                    N.r.y *= qa;
                    oo.restore();
                }
            }
            I = Px.Ⲇᐃⵠ[41];
            z = 0;
            for (; I.length > z; z++) {
                xf(I[z], 913);
            }
            var ra = Px.Ⲇᐃⵠ[67];
            for (z = 0; z < ra.length; z++) {
                xf(ra[z]);
            }
            var _ = Px.Ⲇᐃⵠ[62];
            for (z = 0; _.length > z; z++) {
                xf(_[z], 419, 461);
            }
            var R = Px.Ⲇᐃⵠ[70];
            for (z = 0; R.length > z; z++) {
                xf(R[z]);
            }
            var F = Px.Ⲇᐃⵠ[60];
            for (z = 0; F.length > z; z++) {
                xf(F[z], 299, 326);
            }
            var j = Px.Ⲇᐃⵠ[72];
            for (z = 0; j.length > z; z++) {
                xf(j[z], 232, 1077);
            }
            var G = Px.Ⲇᐃⵠ[73];
            for (z = 0; z < G.length; z++) {
                xf(G[z], 233, 1092);
            }
            fa = Px.Ⲇᐃⵠ[44];
            z = 0;
            for (; z < fa.length; z++) {
                if ((fa[z].info & 15) !== 0 && fa[z].info !== 10) {
                    xf(fa[z]);
                }
            }
            ha = Px.Ⲇᐃⵠ[54];
            z = 0;
            for (; z < ha.length; z++) {
                if (ha[z].info & 15 && ha[z].info !== 10) {
                    xf(ha[z]);
                }
            }
            ia = Px.Ⲇᐃⵠ[89];
            z = 0;
            for (; z < ia.length; z++) {
                xf(ia[z], 239);
            }
            ia = Px.Ⲇᐃⵠ[55];
            z = 0;
            for (; ia.length > z; z++) {
                if ((ia[z].info & 15) !== 0 && ia[z].info !== 10) {
                    xf(ia[z]);
                }
            }
            p = Px.Ⲇᐃⵠ[43];
            z = 0;
            for (; z < p.length; z++) {
                vf(p[z]);
            }
            ka = Px.Ⲇᐃⵠ[39];
            z = 0;
            for (; z < ka.length; z++) {
                if (ka[z].info & 15 && ka[z].info !== 10) {
                    xf(ka[z]);
                }
            }
            la = Px.Ⲇᐃⵠ[40];
            z = 0;
            for (; z < la.length; z++) {
                if (la[z].info & 15 && la[z].info !== 10) {
                    xf(la[z]);
                }
            }
            ma = Px.Ⲇᐃⵠ[37];
            z = 0;
            for (; z < ma.length; z++) {
                if ((ma[z].info & 15) !== 0 && ma[z].info !== 10) {
                    xf(ma[z]);
                }
            }
            var L = Px.Ⲇᐃⵠ[81];
            for (z = 0; z < L.length; z++) {
                xf(L[z], 691, 697);
            }
            var W = Px.Ⲇᐃⵠ[66];
            for (z = 0; W.length > z; z++) {
                xf(W[z], 637, 687);
            }
            var O = Px.Ⲇᐃⵠ[65];
            for (z = 0; O.length > z; z++) {
                xf(O[z], 673, 688);
            }
            var q = Px.Ⲇᐃⵠ[61];
            for (z = 0; q.length > z; z++) {
                xf(q[z], 260, 333);
            }
            var H = Px.Ⲇᐃⵠ[88];
            for (z = 0; H.length > z; z++) {
                xf(H[z], 1033, 1034);
            }
            var U = Px.Ⲇᐃⵠ[63];
            for (z = 0; z < U.length; z++) {
                xf(U[z], 445, 462);
            }
            var Y = Px.Ⲇᐃⵠ[77];
            for (z = 0; z < Y.length; z++) {
                xf(Y[z]);
            }
            var K = Px.Ⲇᐃⵠ[68];
            for (z = 0; z < K.length; z++) {
                xf(K[z], 918, 919);
            }
            var V = Px.Ⲇᐃⵠ[71];
            for (z = 0; V.length > z; z++) {
                xf(V[z]);
            }
            var X = Px.Ⲇᐃⵠ[78];
            for (z = 0; X.length > z; z++) {
                xf(X[z], 1218, 1219);
            }
            var sa = Px.Ⲇᐃⵠ[64];
            for (z = 0; sa.length > z; z++) {
                if (sa[z].scale === 1) {
                    xf(sa[z], 449, 463);
                }
            }
            sa = Px.Ⲇᐃⵠ[69];
            z = 0;
            for (; z < sa.length; z++) {
                if (sa[z].scale === 1) {
                    xf(sa[z], 450, 464);
                }
            }
            var ta = Px.Ⲇᐃⵠ[11];
            for (z = 0; z < ta.length; z++) {
                xf(ta[z]);
            }
            var ua = Px.Ⲇᐃⵠ[2];
            for (z = 0; z < ua.length; z++) {
                xf(ua[z], 114);
            }
            l = Px.Ⲇᐃⵠ[18];
            z = 0;
            for (; l.length > z; z++) {
                xf(l[z]);
            }
            var va = Px.Ⲇᐃⵠ[34];
            for (z = 0; z < va.length; z++) {
                xf(va[z]);
            }
            B = Px.Ⲇᐃⵠ[10];
            z = 0;
            for (; B.length > z; z++) {
                if (!(B[z].info & 1)) {
                    xf(B[z], 166);
                }
                B[z].ⲆⵠⵠΔΔ(B[z].info >> 1);
            }
            B = Px.Ⲇᐃⵠ[15];
            z = 0;
            for (; z < B.length; z++) {
                if (!(B[z].info & 1)) {
                    xf(B[z], 171);
                }
                B[z].ⲆⵠⵠΔΔ(B[z].info >> 1);
            }
            B = Px.Ⲇᐃⵠ[16];
            z = 0;
            for (; z < B.length; z++) {
                if (!(B[z].info & 1)) {
                    xf(B[z], 172);
                }
                B[z].ⲆⵠⵠΔΔ(B[z].info >> 1);
            }
            B = Px.Ⲇᐃⵠ[17];
            z = 0;
            for (; B.length > z; z++) {
                if (!(B[z].info & 1)) {
                    xf(B[z], 173);
                }
                B[z].ⲆⵠⵠΔΔ(B[z].info >> 1);
            }
            B = Px.Ⲇᐃⵠ[21];
            z = 0;
            for (; z < B.length; z++) {
                if (!(B[z].info & 1)) {
                    xf(B[z], 124);
                }
                B[z].ⲆⵠⵠΔΔ(B[z].info >> 1);
            }
            B = Px.Ⲇᐃⵠ[51];
            z = 0;
            for (; B.length > z; z++) {
                if (!(B[z].info & 1)) {
                    xf(B[z], 218);
                }
                B[z].ⲆⵠⵠΔΔ(B[z].info >> 1);
            }
            B = Px.Ⲇᐃⵠ[45];
            z = 0;
            for (; B.length > z; z++) {
                if (!(B[z].info & 1)) {
                    xf(B[z], 212);
                }
                B[z].ⲆⵠⵠΔΔ(B[z].info >> 1);
            }
            B = Px.Ⲇᐃⵠ[46];
            z = 0;
            for (; B.length > z; z++) {
                if (!(B[z].info & 1)) {
                    xf(B[z], 213);
                }
                B[z].ⲆⵠⵠΔΔ(B[z].info >> 1);
            }
            B = Px.Ⲇᐃⵠ[47];
            z = 0;
            for (; B.length > z; z++) {
                if (!(B[z].info & 1)) {
                    xf(B[z], 214);
                }
                B[z].ⲆⵠⵠΔΔ(B[z].info >> 1);
            }
            B = Px.Ⲇᐃⵠ[48];
            z = 0;
            for (; z < B.length; z++) {
                if (!(B[z].info & 1)) {
                    xf(B[z], 215);
                }
                B[z].ⲆⵠⵠΔΔ(B[z].info >> 1);
            }
            B = Px.Ⲇᐃⵠ[49];
            z = 0;
            for (; z < B.length; z++) {
                if (!(B[z].info & 1)) {
                    xf(B[z], 216);
                }
                B[z].ⲆⵠⵠΔΔ(B[z].info >> 1);
            }
            B = Px.Ⲇᐃⵠ[53];
            z = 0;
            for (; B.length > z; z++) {
                if (!(B[z].info & 1)) {
                    xf(B[z], 220);
                }
                B[z].ⲆⵠⵠΔΔ(B[z].info >> 1);
            }
            var wa = Px.Ⲇᐃⵠ[4];
            for (z = 0; z < wa.length; z++) {
                xf(wa[z], 162);
                wa[z].ⲆⵠⵠΔΔ(wa[z].info);
            }
            wa = Px.Ⲇᐃⵠ[7];
            z = 0;
            for (; wa.length > z; z++) {
                xf(wa[z], 163);
                wa[z].ⲆⵠⵠΔΔ(wa[z].info);
            }
            wa = Px.Ⲇᐃⵠ[8];
            z = 0;
            for (; wa.length > z; z++) {
                xf(wa[z], 164);
                wa[z].ⲆⵠⵠΔΔ(wa[z].info);
            }
            wa = Px.Ⲇᐃⵠ[9];
            z = 0;
            for (; z < wa.length; z++) {
                xf(wa[z], 165);
                wa[z].ⲆⵠⵠΔΔ(wa[z].info);
            }
            wa = Px.Ⲇᐃⵠ[19];
            z = 0;
            for (; wa.length > z; z++) {
                xf(wa[z], 122);
                wa[z].ⲆⵠⵠΔΔ(wa[z].info);
            }
            wa = Px.Ⲇᐃⵠ[50];
            z = 0;
            for (; wa.length > z; z++) {
                xf(wa[z], 217);
                wa[z].ⲆⵠⵠΔΔ(wa[z].info);
            }
            var xa = Px.Ⲇᐃⵠ[5];
            for (z = 0; xa.length > z; z++) {
                xf(xa[z], 160);
                xa[z].ⲆⵠⵠΔΔ(xa[z].info);
            }
            xa = Px.Ⲇᐃⵠ[12];
            z = 0;
            for (; z < xa.length; z++) {
                xf(xa[z], 168);
                xa[z].ⲆⵠⵠΔΔ(xa[z].info);
            }
            xa = Px.Ⲇᐃⵠ[13];
            z = 0;
            for (; z < xa.length; z++) {
                xf(xa[z], 169);
                xa[z].ⲆⵠⵠΔΔ(xa[z].info);
            }
            xa = Px.Ⲇᐃⵠ[14];
            z = 0;
            for (; z < xa.length; z++) {
                xf(xa[z], 170);
                xa[z].ⲆⵠⵠΔΔ(xa[z].info);
            }
            xa = Px.Ⲇᐃⵠ[20];
            z = 0;
            for (; z < xa.length; z++) {
                xf(xa[z], 123);
                xa[z].ⲆⵠⵠΔΔ(xa[z].info);
            }
            xa = Px.Ⲇᐃⵠ[52];
            z = 0;
            for (; z < xa.length; z++) {
                xf(xa[z], 219);
                xa[z].ⲆⵠⵠΔΔ(xa[z].info);
            }
            var ya = Px.Ⲇᐃⵠ[35];
            for (z = 0; ya.length > z; z++) {
                var za = ya[z];
                if (za.info > 0) {
                    xf(za, 788);
                } else {
                    xf(za, 182);
                }
            }
            var Aa = Px.Ⲇᐃⵠ[29];
            for (z = 0; Aa.length > z; z++) {
                xf(Aa[z], 159);
            }
            ff(af, i, t, c, e, 111, "g", 2);
            ff(af, i, t, c, e, 415, "gw", 2);
            ff(af, i, t, c, e, 112, "d", 2);
            ff(af, i, t, c, e, 416, "dw", 2);
            ff(af, i, t, c, e, 110, "p", 0);
            ff(af, i, t, c, e, 241, "m", 2);
            ff(af, i, t, c, e, 121, "a", 2);
            ff(af, i, t, c, e, 202, "re", 2);
            ff(af, i, t, c, e, 679, "cs", 3, 3);
            ff(af, i, t, c, e, 679, "cs", 2, 2);
            ff(af, i, t, c, e, 679, "cs", 1, 1);
            ff(af, i, t, c, e, 679, "cs", 0, 0);
            ff(af, i, t, c, e, 676, "cs", 3, 3);
            ff(af, i, t, c, e, 676, "cs", 2, 2);
            ff(af, i, t, c, e, 676, "cs", 1, 1);
            ff(af, i, t, c, e, 676, "cs", 0, 0);
            var Ba = Px.Ⲇᐃⵠ[100];
            for (z = 0; Ba.length > z; z++) {
                for (Z = 0; Ba[z].info > Z; Z++) {
                    xf(Ba[z].ⲆᐃΔᐃ[Z], 294);
                }
            }
            ff(af, i, t, c, e, 108, "s", 2);
            var Ca = Px.Ⲇᐃⵠ[24];
            for (z = 0; Ca.length > z; z++) {
                xf(Ca[z]);
            }
            Ca = Px.Ⲇᐃⵠ[25];
            z = 0;
            for (; Ca.length > z; z++) {
                xf(Ca[z]);
            }
            Ca = Px.Ⲇᐃⵠ[26];
            z = 0;
            for (; Ca.length > z; z++) {
                xf(Ca[z]);
            }
            Ca = Px.Ⲇᐃⵠ[27];
            z = 0;
            for (; Ca.length > z; z++) {
                xf(Ca[z]);
            }
            Ca = Px.Ⲇᐃⵠ[28];
            z = 0;
            for (; Ca.length > z; z++) {
                xf(Ca[z]);
            }
            var Da = Px.Ⲇᐃⵠ[32];
            for (z = 0; Da.length > z; z++) {
                yf(Da[z]);
            }
            ba = Px.Ⲇᐃⵠ[1];
            z = 0;
            for (; ba.length > z; z++) {
                vf(ba[z]);
            }
            ba = Px.Ⲇᐃⵠ[6];
            z = 0;
            for (; ba.length > z; z++) {
                vf(ba[z]);
            }
            l = Px.Ⲇᐃⵠ[18];
            z = 0;
            for (; l.length > z; z++) {
                if (l[z].action == 2) {
                    vf(l[z]);
                }
            }
            va = Px.Ⲇᐃⵠ[34];
            z = 0;
            for (; z < va.length; z++) {
                vf(va[z]);
            }
            ca = Px.Ⲇᐃⵠ[22];
            z = 0;
            for (; ca.length > z; z++) {
                vf(ca[z]);
            }
            da = Px.Ⲇᐃⵠ[23];
            z = 0;
            for (; da.length > z; z++) {
                vf(da[z]);
                da[z].ⲆⵠⵠΔΔ(da[z].info);
            }
            ff(af, i, t, c, e, 989, "c", 0);
            ff(af, i, t, c, e, 109, "t", 5, 4);
            ff(af, i, t, c, e, 413, "f", 2, 2);
            ff(af, i, t, c, e, 693, "plm", 0, 0);
            ff(af, i, t, c, e, 307, "b", 3, 2);
            ff(af, i, t, c, e, 109, "t", 3, 2);
            ff(af, i, t, c, e, 307, "b", 1, 0);
            ff(af, i, t, c, e, 413, "f", 1, 1);
            ff(af, i, t, c, e, 693, "plm", 1, 1);
            ff(af, i, t, c, e, 109, "t", 1, 0);
            ff(af, i, t, c, e, 413, "f", 0, 0);
            ff(af, i, t, c, e, 693, "plm", 2, 2);
            Da = Px.Ⲇᐃⵠ[32];
            z = 0;
            for (; Da.length > z; z++) {
                vf(Da[z]);
            }
            var Ea = Px.Ⲇᐃⵠ[56];
            for (z = 0; z < Ea.length; z++) {
                xf(Ea[z], 221);
            }
            M = Px.Ⲇᐃⵠ[0];
            z = 0;
            for (; M.length > z; z++) {
                N = M[z];
                if (N.ⵠᐃⵠⲆᐃΔⲆ === 1 && (N.ΔᐃⲆΔⲆ < 180 || N.ⵠᐃⲆⲆΔ !== 227 && N.ⵠᐃⲆⲆΔ !== 228 && N.ⵠᐃⲆⲆΔ !== 91 && N.ⵠᐃⲆⲆΔ !== 229 && N.ⵠᐃⲆⲆΔ !== 230)) {
                    N.ᐃΔΔⲆⲆΔΔ = ⵠᐃⵠ.ⵠΔᐃᐃᐃᐃᐃ(N.ᐃΔΔⲆⲆΔΔ, 100, 0.018);
                    qa = 1 + Math.min(1, Math.max(N.ᐃΔΔⲆⲆΔΔ, 0) / 100) * 0.18;
                    oo.save();
                    oo.scale(qa, qa);
                    Qx.ΔᐃⲆ.x /= qa;
                    Qx.ΔᐃⲆ.y /= qa;
                    N.x /= qa;
                    N.y /= qa;
                    N.r.x /= qa;
                    N.r.y /= qa;
                    N.ⵠᐃⵠΔⲆⲆΔ();
                    N.ᐃⲆᐃⲆ();
                    Qx.ΔᐃⲆ.x *= qa;
                    Qx.ΔᐃⲆ.y *= qa;
                    N.x *= qa;
                    N.y *= qa;
                    N.r.x *= qa;
                    N.r.y *= qa;
                    oo.restore();
                }
            }
            var Fa = Px.Ⲇᐃⵠ[38];
            for (z = 0; Fa.length > z; z++) {
                xf(Fa[z], 190);
                Fa[z].ⲆⵠⵠΔΔ(Fa[z].info);
            }
            var Ga = Px.Ⲇᐃⵠ[90];
            for (z = 0; Ga.length > z; z++) {
                xf(Ga[z], 245, 246);
            }
            var Ha = Px.Ⲇᐃⵠ[42];
            for (z = 0; Ha.length > z; z++) {
                xf(Ha[z], 201);
            }
            M = Px.Ⲇᐃⵠ[0];
            z = 0;
            for (; z < M.length; z++) {
                if (((N = M[z]).ⵠᐃⲆⲆΔ === 227 || N.ⵠᐃⲆⲆΔ === 228 || N.ⵠᐃⲆⲆΔ === 91 || N.ⵠᐃⲆⲆΔ === 229 || N.ⵠᐃⲆⲆΔ === 230) && N.ΔᐃⲆΔⲆ > 180) {
                    N.ᐃΔⵠⲆΔᐃⵠ = 1;
                    oo.save();
                    qa = 1 + Math.min(1, Math.max(N.ⵠⲆᐃΔⵠ - 30, 0) / 180) * 0.35;
                    oo.scale(qa, qa);
                    Qx.ΔᐃⲆ.x /= qa;
                    Qx.ΔᐃⲆ.y /= qa;
                    N.x /= qa;
                    N.y /= qa;
                    N.r.x /= qa;
                    N.r.y /= qa;
                    N.ⵠᐃⵠΔⲆⲆΔ();
                    N.ᐃⲆᐃⲆ();
                    Qx.ΔᐃⲆ.x *= qa;
                    Qx.ΔᐃⲆ.y *= qa;
                    N.x *= qa;
                    N.y *= qa;
                    N.r.x *= qa;
                    N.r.y *= qa;
                    oo.restore();
                }
            }
            pa = Px.Ⲇᐃⵠ[91];
            z = 0;
            for (; z < pa.length; z++) {
                if (pa[z].ᐃΔⵠⲆΔᐃⵠ === 1) {
                    xf(pa[z]);
                }
            }
            sa = Px.Ⲇᐃⵠ[64];
            z = 0;
            for (; z < sa.length; z++) {
                if (sa[z].scale > 1) {
                    xf(sa[z], 449, 463);
                }
            }
            sa = Px.Ⲇᐃⵠ[69];
            z = 0;
            for (; z < sa.length; z++) {
                if (sa[z].scale > 1) {
                    xf(sa[z], 450, 464);
                }
            }
            var Ia = Px.Ⲇᐃⵠ[74];
            for (z = 0; Ia.length > z; z++) {
                xf(Ia[z], 235, 1107);
            }
            var Ja = Px.Ⲇᐃⵠ[75];
            for (z = 0; z < Ja.length; z++) {
                xf(Ja[z], 238, 1128);
            }
            if ((Gw += Xx * 15) > 60) {
                Gw -= 60;
            }
            ff(ef, i, t, c, e, 1041, "fo", 2);
            ff(ef, i, t, c, e, 244, "fod", 2);
        })();
        if (Mx.Δⵠⵠᐃᐃ && Px.mode !== 2 && Px.mode !== 4 && Px.mode !== 5) {
            (function () {
                var a = Qx.ⲆⵠᐃⵠⲆ;
                if (a.ⲆⵠⵠⲆᐃ === 0) {
                    a.ΔᐃΔᐃⵠ = Math.max(0, a.ΔᐃΔᐃⵠ - Xx / 10);
                } else {
                    a.ΔᐃΔᐃⵠ = Math.min(1, a.ΔᐃΔᐃⵠ + Xx / 10);
                }
                for (var b = a.ⵠⵠⵠΔⲆ, c = 0; b.length > c; c++) {
                    var d = b[c];
                    a.Ⲇⵠᐃ(d);
                    df(471, d.id, Qx.ΔᐃⲆ.x + d.x, Qx.ΔᐃⲆ.y + d.y, d.alpha);
                }
                for (c = 0; b.length > c; c++) {
                    d = b[c];
                    if (d.ΔⲆⲆΔΔ <= 0 || -Qx.ΔᐃⲆ.x + ao < d.x || d.x < -Qx.ΔᐃⲆ.x - Qx.ΔᐃⲆ.w / 2 || -Qx.ΔᐃⲆ.y + so < d.y) {
                        b.splice(c, 1);
                    }
                }
                var e = -Qx.ΔᐃⲆ.y;
                if (Px.ΔⵠΔⲆⵠ > -1000) {
                    a.add(e);
                }
            })();
            (function () {
                var a = Qx.ᐃᐃⲆⵠⲆ;
                if (a.ⲆⵠⵠⲆᐃ === 0) {
                    a.ΔᐃΔᐃⵠ = Math.max(0, a.ΔᐃΔᐃⵠ - Xx / 10);
                } else {
                    a.ΔᐃΔᐃⵠ = Math.min(1, a.ΔᐃΔᐃⵠ + Xx / 10);
                }
                for (var b = a.ⵠⵠⵠΔⲆ, c = 0; b.length > c; c++) {
                    var d = b[c];
                    a.Ⲇⵠᐃ(d);
                    df(470, d.id, Qx.ΔᐃⲆ.x + d.x, Qx.ΔᐃⲆ.y + d.y, d.alpha);
                }
                for (c = 0; b.length > c; c++) {
                    d = b[c];
                    if (d.ΔⲆⲆΔΔ <= 0 || d.x > -Qx.ΔᐃⲆ.x + ao || -Qx.ΔᐃⲆ.x > d.x || -Qx.ΔᐃⲆ.y + so < d.y) {
                        b.splice(c, 1);
                    }
                }
                var e = -Qx.ΔᐃⲆ.y;
                if (Px.ⲆⲆᐃΔᐃ > -1000) {
                    a.add(e);
                }
            })();
            (function () {
                var a = Qx.ⵠⲆΔⲆⵠⲆᐃ;
                for (var b = a.ⵠⵠⵠΔⲆ, c = 0; b.length > c; c++) {
                    var d = b[c];
                    a.Ⲇⵠᐃ(d);
                    df(942, d.id, Qx.ΔᐃⲆ.x + d.x, Qx.ΔᐃⲆ.y + d.y, d.alpha);
                }
                for (c = 0; b.length > c; c++) {
                    if ((d = b[c]).ΔⲆⲆΔΔ <= 0 || -Qx.ΔᐃⲆ.x + ao < d.x || -Qx.ΔᐃⲆ.x > d.x || -Qx.ΔᐃⲆ.y + so < d.y) {
                        b.splice(c, 1);
                    }
                }
                var e = -Qx.ΔᐃⲆ.y;
                if (Px.ⲆΔⵠⵠΔ > -1000) {
                    a.add(e);
                }
            })();
        }
        if (Px.transition && a) {
            Px.transition = false;
            Px.ⵠⵠⵠᐃ.ΔᐃΔ = 0;
            Px.ⵠⵠⵠᐃ.ΔⵠⲆ = Ih;
        }
    }
    function mf(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Qx.ΔᐃⲆ.x + j + 820;
        var l = Math.max(Qx.ΔᐃⲆ.y + e, 0);
        var g = Math.max(-Qx.ΔᐃⲆ.y + so - i - 100, 0);
        var t = l;
        var b = so - l - g;
        if (o) {
            var d = q.ᐃⲆᐃ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = u;
        var m = t;
        var p = -d.x + 0;
        var C = b;
        var G = u += -d.x + 0 + 2;
        if (o) {
            d = q.ᐃⲆᐃ(r);
        } else {
            d = r.r;
        }
        var f = h - 250 - u - d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f + 2) - 2;
        if (o) {
            d = q.ᐃⲆᐃ(s);
        } else {
            d = s.r;
        }
        if (u + (f = h - 350 - u - d.x) < A) {
            var k = Er;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f + 2;
        } else {
            k = Ml;
            u = A;
            D = -1;
        }
        f = h - 700 - u;
        if (Px.transition) {
            var N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
            oo.fillStyle = pf(9, 55, 63, 11, 106, 132, N);
        } else {
            oo.fillStyle = Wr.ΔⵠΔΔⲆ[Px.time];
        }
        oo.fillRect(F, m, p, C);
        if (o) {
            if (Px.transition) {
                N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                oo.fillStyle = pf(15, 70, 76, 42, 139, 155, N);
            } else {
                oo.fillStyle = Wr.ⵠᐃⲆΔΔⲆᐃ[Px.time];
            }
        } else if (Px.transition) {
            N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
            oo.fillStyle = pf(9, 55, 63, 11, 106, 132, N);
        } else {
            oo.fillStyle = Wr.ΔⵠΔΔⲆ[Px.time];
        }
        oo.fillRect(H, y, w, K);
        if (k) {
            if (o) {
                if (Px.transition) {
                    N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                    oo.fillStyle = pf(17, 94, 96, 169, 214, 211, N);
                } else {
                    oo.fillStyle = Wr.ⲆΔⵠⲆΔᐃᐃ[Px.time];
                }
            } else if (Px.transition) {
                N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                oo.fillStyle = pf(9, 55, 63, 11, 106, 132, N);
            } else {
                oo.fillStyle = Wr.ΔⵠΔΔⲆ[Px.time];
            }
            oo.fillRect(L, J, M, B);
        }
        if (Mx.Δⵠⵠᐃᐃ && o) {
            q.ⲆᐃᐃⲆⵠⵠⵠⲆⲆ(A, D, G, h, -Qx.ΔᐃⲆ.y + m, -Qx.ΔᐃⲆ.y + m + C);
        }
    }
    function pf(b, c, d, e, f, g, a) {
        var i;
        var j = "#";
        j += (i = Math.floor(a * e + b * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
        j += (i = Math.floor(a * f + (1 - a) * c)) < 16 ? "0" + i.toString(16) : i.toString(16);
        return j += (i = Math.floor(g * a + (1 - a) * d)) < 16 ? "0" + i.toString(16) : i.toString(16);
    }
    function Cf(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Qx.ΔᐃⲆ.x + f - 700;
        var l = Math.max(Qx.ΔᐃⲆ.y + e, 0);
        var g = Math.max(-Qx.ΔᐃⲆ.y + so - i - 100, 0);
        var r = l;
        var b = so - l - g;
        if (n) {
            var d = j.ᐃⲆᐃ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += d + 0 - 2;
        if (n) {
            d = j.ᐃⲆᐃ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h + 250 - s + d;
        var u = (s += t - 2) - 2;
        if (n) {
            d = j.ᐃⲆᐃ(q).x;
        } else {
            d = q.r.x;
        }
        if (u < s + (t = h + 350 - s + d) - 3) {
            s += t - 2;
        } else {
            s = u;
        }
        t = h + 700 - s;
        if (n > 0 && k.ⵠⵠΔⵠⲆⵠᐃ === 1) {
            if (Px.transition) {
                var p = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                oo.fillStyle = pf(15, 77, 72, 252, 239, 187, p);
            } else {
                oo.fillStyle = Wr.ⲆⵠΔⵠⵠᐃⵠ[Px.time];
            }
            oo.fillRect(s, r, t, b);
        } else {
            if (Px.transition) {
                p = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                oo.fillStyle = pf(k.ᐃᐃⲆ[0], k.ᐃᐃⲆ[1], k.ᐃᐃⲆ[2], k.Ⲇⵠⵠ[0], k.Ⲇⵠⵠ[1], k.Ⲇⵠⵠ[2], p);
            } else {
                oo.fillStyle = k.ⵠᐃᐃΔⵠ[Px.time];
            }
            oo.fillRect(s, r, t, b);
        }
    }
    function Tf(a) {
        oo.save();
        oo.translate(Qx.ΔᐃⲆ.x + a.x, Qx.ΔᐃⲆ.y + a.y);
        oo.rotate(a.angle);
        oo.globalAlpha = a.alpha;
        var b = ⵠΔ[a.id][Px.time];
        Mu(oo, b, -b.width / 2, -b.height / 2);
        oo.globalAlpha = 1;
        oo.restore();
    }
    function ff(b, c, d, e, f, g, a, i, j, h) {
        if (Px.transition) {
            oo.globalAlpha = 1;
            b(c, d, e, f, g, a, i, j, h);
            Px.time = Px.time ? 0 : 1;
            oo.globalAlpha = 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ;
            b(c, d, e, f, g, a, i, j, h);
            Px.time = Px.time ? 0 : 1;
            oo.globalAlpha = 1;
        } else {
            b(c, d, e, f, g, a, i, j, h);
        }
    }
    function zf(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Qx.ΔᐃⲆ.x + j - 700;
        var l = Math.max(Qx.ΔᐃⲆ.y + e, 0);
        var g = Math.max(-Qx.ΔᐃⲆ.y + so - i - 100, 0);
        var t = l;
        var b = so - l - g;
        if (o) {
            var d = q.ᐃⲆᐃ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = u;
        var m = t;
        var p = d.x + 0;
        var C = b;
        var G = u += d.x + 0 - 2;
        if (o) {
            d = q.ᐃⲆᐃ(r);
        } else {
            d = r.r;
        }
        var f = h + 250 - u + d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f - 2) - 2;
        if (o) {
            d = q.ᐃⲆᐃ(s);
        } else {
            d = s.r;
        }
        if (A < u + (f = h + 350 - u + d.x) - 3) {
            var k = Ol;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f - 2;
        } else {
            k = Tq;
            u = A;
            D = -1;
        }
        f = h + 700 - u;
        if (Px.transition) {
            var N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
            oo.fillStyle = pf(9, 55, 63, 11, 106, 132, N);
        } else {
            oo.fillStyle = Wr.ΔⵠΔΔⲆ[Px.time];
        }
        oo.fillRect(F, m, p, C);
        if (o) {
            if (Px.transition) {
                N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                oo.fillStyle = pf(15, 70, 76, 42, 139, 155, N);
            } else {
                oo.fillStyle = Wr.ⵠᐃⲆΔΔⲆᐃ[Px.time];
            }
        } else if (Px.transition) {
            N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
            oo.fillStyle = pf(9, 55, 63, 11, 106, 132, N);
        } else {
            oo.fillStyle = Wr.ΔⵠΔΔⲆ[Px.time];
        }
        oo.fillRect(H, y, w, K);
        if (k) {
            if (o) {
                if (Px.transition) {
                    N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                    oo.fillStyle = pf(17, 94, 96, 169, 214, 211, N);
                } else {
                    oo.fillStyle = Wr.ⲆΔⵠⲆΔᐃᐃ[Px.time];
                }
            } else if (Px.transition) {
                N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                oo.fillStyle = pf(9, 55, 63, 11, 106, 132, N);
            } else {
                oo.fillStyle = Wr.ΔⵠΔΔⲆ[Px.time];
            }
            oo.fillRect(L, J, M, B);
        }
        if (Mx.Δⵠⵠᐃᐃ && o) {
            q.ᐃᐃⲆΔⲆΔⵠⵠΔ(A, D, G, h, -Qx.ΔᐃⲆ.y + m, -Qx.ΔᐃⲆ.y + m + C);
        }
    }
    function yf(a, b) {
        if (Px.transition) {
            oo.globalAlpha = 1;
            a.ⵠΔΔⲆⲆ(b);
            Px.time = Px.time ? 0 : 1;
            oo.globalAlpha = 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ;
            a.ⵠΔΔⲆⲆ(b);
            Px.time = Px.time ? 0 : 1;
            oo.globalAlpha = 1;
        } else {
            a.ⵠΔΔⲆⲆ(b);
        }
    }
    function wf(a, b, c, d) {
        if (Px.transition) {
            oo.globalAlpha = 1;
            Mu(oo, ⵠΔ[a][Px.time], c, d);
            Px.time = Px.time ? 0 : 1;
            oo.globalAlpha = 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ;
            Mu(oo, ⵠΔ[a][Px.time], c, d);
            Px.time = Px.time ? 0 : 1;
            oo.globalAlpha = 1;
        } else {
            Mu(oo, b, c, d);
        }
    }
    function Pf(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Qx.ΔᐃⲆ.y + f + 710;
        var l = Math.max(Qx.ΔᐃⲆ.x + e, 0);
        var g = Math.max(-Qx.ΔᐃⲆ.x + ao - i - 100, 0);
        var r = l;
        var b = ao - l - g;
        if (n) {
            var d = j.ᐃⲆᐃ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += -d + 0 + 2;
        if (n) {
            d = j.ᐃⲆᐃ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h - 250 - s - d;
        var u = (s += t + 2) - 2;
        if (n) {
            d = j.ᐃⲆᐃ(q).x;
        } else {
            d = q.r.x;
        }
        if (s + (t = h - 350 - s - d) < u) {
            s += t + 2;
        } else {
            s = u;
        }
        t = h - 700 - s;
        if (n > 0 && k.ⵠⵠΔⵠⲆⵠᐃ === 1) {
            if (Px.transition) {
                var p = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                oo.fillStyle = pf(15, 77, 72, 252, 239, 187, p);
            } else {
                oo.fillStyle = Wr.ⲆⵠΔⵠⵠᐃⵠ[Px.time];
            }
            oo.fillRect(r, s, b, t);
        } else {
            if (Px.transition) {
                p = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                oo.fillStyle = pf(k.ᐃᐃⲆ[0], k.ᐃᐃⲆ[1], k.ᐃᐃⲆ[2], k.Ⲇⵠⵠ[0], k.Ⲇⵠⵠ[1], k.Ⲇⵠⵠ[2], p);
            } else {
                oo.fillStyle = k.ⵠᐃᐃΔⵠ[Px.time];
            }
            oo.fillRect(r, s, b, t);
        }
    }
    function Af(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Qx.ΔᐃⲆ.y + f - 700;
        var l = Math.max(Qx.ΔᐃⲆ.x + e, 0);
        var g = Math.max(-Qx.ΔᐃⲆ.x + ao - i - 100, 0);
        var r = l;
        var b = ao - l - g;
        if (n) {
            var d = j.ᐃⲆᐃ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += d + 0 - 2;
        if (n) {
            d = j.ᐃⲆᐃ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h + 250 - s + d;
        var u = (s += t - 2) - 2;
        if (n) {
            d = j.ᐃⲆᐃ(q).x;
        } else {
            d = q.r.x;
        }
        if (s + (t = h + 350 - s + d) - 3 > u) {
            s += t - 2;
        } else {
            s = u;
        }
        t = h + 700 - s;
        if (n > 0 && k.ⵠⵠΔⵠⲆⵠᐃ === 1) {
            if (Px.transition) {
                var p = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                oo.fillStyle = pf(15, 77, 72, 252, 239, 187, p);
            } else {
                oo.fillStyle = Wr.ⲆⵠΔⵠⵠᐃⵠ[Px.time];
            }
            oo.fillRect(r, s, b, t);
        } else {
            if (Px.transition) {
                p = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                oo.fillStyle = pf(k.ᐃᐃⲆ[0], k.ᐃᐃⲆ[1], k.ᐃᐃⲆ[2], k.Ⲇⵠⵠ[0], k.Ⲇⵠⵠ[1], k.Ⲇⵠⵠ[2], p);
            } else {
                oo.fillStyle = k.ⵠᐃᐃΔⵠ[Px.time];
            }
            oo.fillRect(r, s, b, t);
        }
    }
    function kf(b, c, d, e, f) {
        var g = d.width;
        var a = d.height;
        var i = Math.floor(g / 2);
        var j = Math.floor(a / 2);
        if (Px.transition) {
            oo.globalAlpha = 1;
            Mu(oo, ⵠΔ[b][c][Px.time], 0, 0, g, a, e, f, i, j);
            Px.time = Px.time ? 0 : 1;
            oo.globalAlpha = 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ;
            Mu(oo, ⵠΔ[b][c][Px.time], 0, 0, g, a, e, f, i, j);
            Px.time = Px.time ? 0 : 1;
            oo.globalAlpha = 1;
        } else {
            Mu(oo, ⵠΔ[b][c][Px.time], 0, 0, g, a, e, f, i, j);
        }
    }
    function xf(a, b, c) {
        if (Px.transition) {
            oo.globalAlpha = 1;
            a.ᐃⲆᐃⲆ(b, c);
            Px.time = Px.time ? 0 : 1;
            oo.globalAlpha = 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ;
            a.ᐃⲆᐃⲆ(b, c);
            Px.time = Px.time ? 0 : 1;
            oo.globalAlpha = 1;
        } else {
            a.ᐃⲆᐃⲆ(b, c);
        }
    }
    function Jf(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Qx.ΔᐃⲆ.y + j + 710;
        var l = Math.max(Qx.ΔᐃⲆ.x + e, 0);
        var g = Math.max(-Qx.ΔᐃⲆ.x + ao - i - 100, 0);
        var t = l;
        var b = ao - l - g;
        if (o) {
            var d = q.ᐃⲆᐃ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = u;
        var m = t;
        var p = -d.x + 0;
        var C = b;
        var G = u += -d.x + 0 + 2;
        if (o) {
            d = q.ᐃⲆᐃ(r);
        } else {
            d = r.r;
        }
        var f = h - 250 - u - d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f + 2) - 2;
        if (o) {
            d = q.ᐃⲆᐃ(s);
        } else {
            d = s.r;
        }
        if (u + (f = h - 350 - u - d.x) < A) {
            var k = Bh;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f + 2;
        } else {
            k = false;
            u = A;
            D = -1;
        }
        f = h - 700 - u;
        if (Px.transition) {
            var N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
            oo.fillStyle = pf(9, 55, 63, 11, 106, 132, N);
        } else {
            oo.fillStyle = Wr.ΔⵠΔΔⲆ[Px.time];
        }
        oo.fillRect(m, F, C, p);
        if (o) {
            if (Px.transition) {
                N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                oo.fillStyle = pf(15, 70, 76, 42, 139, 155, N);
            } else {
                oo.fillStyle = Wr.ⵠᐃⲆΔΔⲆᐃ[Px.time];
            }
        } else if (Px.transition) {
            N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
            oo.fillStyle = pf(9, 55, 63, 11, 106, 132, N);
        } else {
            oo.fillStyle = Wr.ΔⵠΔΔⲆ[Px.time];
        }
        oo.fillRect(y, H, K, w);
        if (k) {
            if (o) {
                if (Px.transition) {
                    N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                    oo.fillStyle = pf(17, 94, 96, 169, 214, 211, N);
                } else {
                    oo.fillStyle = Wr.ⲆΔⵠⲆΔᐃᐃ[Px.time];
                }
            } else if (Px.transition) {
                N = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                oo.fillStyle = pf(9, 55, 63, 11, 106, 132, N);
            } else {
                oo.fillStyle = Wr.ΔⵠΔΔⲆ[Px.time];
            }
            oo.fillRect(J, L, B, M);
        }
        if (Mx.Δⵠⵠᐃᐃ && o) {
            q.ᐃⵠᐃⲆⵠⲆΔᐃΔ(A, D, G, h, -Qx.ΔᐃⲆ.x + m, -Qx.ΔᐃⲆ.x + m + C);
        }
    }
    function Mf(a) {
        oo.globalAlpha = a.alpha;
        md(oo, a.x + Qx.ΔᐃⲆ.x, a.y + Qx.ΔᐃⲆ.y, a.r);
        ud(oo, Wr.ΔⲆⲆᐃᐃΔⲆ[Px.time]);
        oo.globalAlpha = 1;
    }
    function Bf(b, c, d, e) {
        var f = c.width;
        var g = c.height;
        var a = Math.floor(f / 2);
        var h = Math.floor(g / 2);
        if (Px.transition) {
            oo.globalAlpha = 1;
            Mu(oo, ⵠΔ[b][Px.time], 0, 0, f, g, d, e, a, h);
            Px.time = Px.time ? 0 : 1;
            oo.globalAlpha = 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ;
            Mu(oo, ⵠΔ[b][Px.time], 0, 0, f, g, d, e, a, h);
            Px.time = Px.time ? 0 : 1;
            oo.globalAlpha = 1;
        } else {
            Mu(oo, c, 0, 0, f, g, d, e, a, h);
        }
    }
    var Df = 0;
    var If = 1;
    var Ef = 2;
    var Sf = 0;
    var Qf = 1;
    var _f = 2;
    function Rf(b, c, d, e, f) {
        var g = {
            x: d,
            y: e,
            ⵠⲆΔⲆᐃ: d,
            ⵠⵠⲆⵠᐃ: e
        };
        return {
            translate: g,
            ᐃⲆᐃⲆ: function (a) {
                Mu(a, b, g.x, g.y, b.width / 2, b.height / 2);
            },
            active: c,
            position: f
        };
    }
    function Ff(b, c, f, i, j, k, a, n, q, t, l, g, u, d, v) {
        if (b.length === 0) {
            b = " ";
        }
        if (a === undefined) {
            a = 0;
        }
        if (gj === n) {
            n = 0;
        }
        if (q === undefined) {
            q = 0;
        }
        if (sj === d) {
            d = 0;
        }
        var p = document.createElement("canvas");
        var w = p.getContext("2d");
        w.textBaseline = "middle";
        w.font = (v !== undefined ? v + " " : "") + i + "px " + c;
        j = j !== undefined ? Math.min(w.measureText(b).width, j) : w.measureText(b).width;
        p.width = j + a;
        p.height = i + n;
        if (k !== undefined) {
            if (l !== hj) {
                w.globalAlpha = l;
            }
            w.fillStyle = k;
            if (g !== undefined) {
                ᐃᐃⲆⲆΔⵠⲆᐃⲆ(w, q + 2, q, j + a - q * 2 - 4, i + n - q * 2, g);
                w.fill();
            } else {
                w.fillRect(q, q, j + a - q * 2, i + n - q * 2);
            }
            w.globalAlpha = 1;
            if (q !== 0) {
                w.lineWidth = q;
                w.strokeStyle = t;
                w.stroke();
            }
        }
        w.textBaseline = "middle";
        w.font = (eq !== v ? v + " " : "") + i + "px " + c;
        if (u !== Qk) {
            w.strokeStyle = u;
            w.lineWidth = d;
            w.lineJoin = "miter";
            w.miterLimit = 2;
            w.strokeText(b, Math.floor(a / 2), Math.floor(n / 2) + Math.floor(i / 2), j);
        }
        w.fillStyle = f;
        w.fillText(b, Math.floor(a / 2), Math.floor(n / 2) + Math.floor(i / 2), j);
        p.w2 = p.width / 2;
        p.ᐃⲆΔⲆⵠ = p.height / 2;
        return p;
    }
    function jf(a, b) {
        var c = a.getBoundingClientRect();
        return {
            x: b.clientX - c.left,
            y: b.clientY - c.top
        };
    }
    function Gf(f, e, i, j, k, m, n, p, q = 0, h, r) {
        if (ih === p) {
            p = 0;
        }
        if (kr === h) {
            h = 0;
        }
        if (r === undefined) {
            r = 1;
        }
        if (m !== 1) {
            m = 0;
        }
        if (j) {
            var t = j;
        }
        var u;
        var w = {
            width: f,
            height: e,
            ΔⲆ: t,
            state: Sf,
            translate: {
                x: p,
                y: q,
                ⵠⲆΔⲆᐃ: p,
                ⵠⵠⲆⵠᐃ: q
            },
            ΔΔⲆΔⵠⵠⲆⵠⲆ: m,
            ⲆΔᐃⲆ: 0,
            callback: n,
            position: h,
            active: r
        };
        function d() {
            return w.ΔⲆ[w.state];
        }
        function v(a) {
            var b = w.translate;
            if (w.width === 0 || w.height === 0) {
                w.width = w.ΔⲆ[0].width;
                w.height = w.ΔⲆ[0].height;
            }
            return a.x > b.x && a.x < b.x + w.width / k && a.y > b.y && a.y < b.y + w.height / k;
        }
        m = function () {
            var a = 0;
            if (w.ΔΔⲆΔⵠⵠⲆⵠⲆ === 1) {
                if (w.state === Qf || _f === w.state) {
                    w.ⲆΔᐃⲆ = (0 + Xx * 1000) % 1000;
                } else if (0 < 0) {
                    w.ⲆΔᐃⲆ = 500 < 0 ? 0 + Xx * 1000 : 0 - Xx * 1000;
                    if (0 < 0 || 0 > 1000) {
                        w.ⲆΔᐃⲆ = 0;
                    }
                }
                a = ⵠᐃⵠ.ᐃⲆΔΔⲆ(0 > 500 ? 2 : 0) * 0.2;
            }
            return a;
        };
        if ((k = k === 3 ? 3 : k === 1 ? 2 : 1) === 2) {
            u = function (a) {
                var b = 1 + m();
                var c = d();
                var e = w.width * b / 2;
                var f = w.height * b / 2;
                var g = (e - w.width / 2) / 2;
                var h = (f - w.height / 2) / 2;
                Mu(a, c, w.translate.x - g, w.translate.y - h, e, f);
            };
        } else if (k === 3) {
            u = function (b) {
                var c = d();
                var e = w.width;
                var f = w.height;
                var g = (e - w.width) / 2;
                var h = (f - w.height) / 2;
                Mu(b, c, w.translate.x - g, w.translate.y - h, e, f);
            };
            k = 1;
        } else {
            u = function (a) {
                Mu(a, d(), w.translate.x, w.translate.y);
            };
        }
        return {
            info: w,
            ⵠⵠᐃᐃ: function (a, b, c) {
                if (v(b)) {
                    if (c == If) {
                        w.state = _f;
                    } else if (c == Ef || c == Df && _f != w.state) {
                        w.state = Qf;
                    }
                    return true;
                } else {
                    w.state = Sf;
                    return false;
                }
            },
            ᐃⲆᐃⲆ: u,
            ⵠΔΔⲆᐃⵠΔ: v
        };
    }
    var Lf = "send";
    var Wf = ⵠᐃⵠ.ᐃⲆΔΔΔⵠΔ("id") === "1" ? 1 : 0;
    var Of = ⵠᐃⵠ.ᐃⲆΔΔΔⵠΔ("password");
    var Nf = ⵠᐃⵠ.ᐃⲆΔΔΔⵠΔ("debug") || Xh;
    if (Nf !== undefined) {
        Nf = JSON.parse(hc.decodeURIComponent(Nf));
    }
    var Nw = ⵠᐃⵠ.ᐃⲆΔΔΔⵠΔ("server") || undefined;
    var Hf = ⵠᐃⵠ.ᐃⲆΔΔΔⵠΔ("region") || hj;
    var Uf = "starve.io";
    var Yf = "https://" + Uf;
    var Kf = {
        ⲆᐃⲆΔ: 2,
        ΔΔⵠᐃᐃᐃᐃ: 8,
        ΔⲆᐃⲆⲆⵠⵠ: 16,
        ⵠⵠΔΔⲆⵠΔ: 256,
        ⲆᐃⵠⵠⲆᐃⲆ: 128,
        ⲆᐃⵠΔΔ: 4,
        IDLE: 64,
        ⲆΔⵠΔⲆΔⵠ: 32,
        ⵠᐃⲆⵠⵠΔⵠⲆⵠ: 1
    };
    var Vf = [{
        ⵠΔⲆⵠᐃ: 1000,
        items: [[2, 113], [1, 117], [8, 110], [1, 143]]
    }, {
        ⵠΔⲆⵠᐃ: 2000,
        items: [[2, 118], [1, 8], [2, 117], [16, 110], [2, 143]]
    }, {
        ⵠΔⲆⵠᐃ: 4000,
        items: [[3, 118], [1, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
    }, {
        ⵠΔⲆⵠᐃ: 8000,
        items: [[1, 29], [4, 118], [1, 3], [6, 117], [30, 110], [6, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
    }, {
        ⵠΔⲆⵠᐃ: 16000,
        items: [[1, 29], [1, 4], [1, 198], [7, 136], [2, 127], [2, 118], [1, 119], [15, 163], [2, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
    }, {
        ⵠΔⲆⵠᐃ: 16000,
        items: [[1, 29], [1, 11], [1, 50], [1, 3], [10, 136], [4, 127], [6, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
    }, {
        ⵠΔⲆⵠᐃ: 16000,
        items: [[1, 29], [1, 83], [1, 36], [3, 195], [1, 0], [1, 3], [7, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
    }, {
        ⵠΔⲆⵠᐃ: 16000,
        items: [[1, 29], [1, 84], [1, 3], [7, 136], [2, 127], [4, 118], [2, 135], [4, 144], [10, 141], [6, 132], [4, 115], [1, 49], [500, 109]]
    }, {
        ⵠΔⲆⵠᐃ: 16000,
        items: [[1, 29], [1, 3], [16, 138], [1, 127], [6, 118], [3, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
    }, {
        ⵠΔⲆⵠᐃ: 20000,
        items: [[1, 29], [1, 3], [1, 136], [1, 127], [3, 118], [3, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
    }];
    const Xf = [];
    let Zf = 0;
    var Ow = {
        ΔΔᐃᐃⲆⵠᐃⲆⲆ: 50,
        ᐃⲆⲆΔⵠᐃⵠⲆⵠ: 25,
        ⲆⵠΔⵠΔΔⲆⵠΔ: 8000,
        ⵠᐃᐃⲆⲆΔⵠⲆᐃ: 14,
        ᐃⵠᐃΔΔᐃΔⵠⵠ: 200,
        ⲆⵠᐃⵠᐃⲆⵠⲆᐃ: 125000,
        ᐃⵠⲆⵠⲆᐃⲆ: 52,
        ⲆⵠⵠΔⲆΔΔᐃⵠ: 20,
        ⵠᐃⲆⲆⵠᐃᐃⵠⲆ: 5,
        ΔⲆᐃⲆᐃⵠⲆ: 4,
        ⲆⲆΔⲆⵠᐃⵠⲆΔ: 5,
        ⵠⵠⵠΔⲆΔᐃ: 2,
        ᐃΔᐃⵠΔⵠⵠ: 600000,
        ᐃᐃᐃⵠΔⲆⵠⵠⲆ: 2000,
        ΔΔⲆΔΔᐃᐃⲆⲆ: 60000,
        ᐃⲆⵠⵠⵠⲆΔⲆⵠ: 0.58,
        ΔΔⲆᐃⵠᐃⲆ: 0,
        ᐃⲆⲆΔΔᐃΔⵠΔ: 14,
        ᐃⵠⵠΔⲆᐃⲆⲆΔ: 3,
        ⲆⵠⲆΔⲆⵠᐃⲆᐃ: "[6]",
        ΔⲆᐃⲆⲆⵠⵠ: 0.2,
        ⵠⵠΔⵠΔⲆⵠ: 1,
        ΔΔΔⲆⲆⵠⵠ: 4,
        ᐃᐃⵠᐃⵠⲆᐃ: 3,
        ᐃᐃⵠⲆᐃᐃⵠ: 0.2
    };
    function Pw(b, c, d, e, f, g) {
        const a = ((29375 + d) * 1664525 + 1013904223) % 4294967296;
        const i = (24 << (e >> 16 & 255)) + (0 << (e & 255)) + (16 << (e >> 24 & 255)) + (8 << (e >> 8 & 255));
        const j = ut(((b + 32381) * 2147483629 + 2147483587) % 2147483647, ((c + 34237) * 1103515245 + 12345) % 2147483648);
        ut(a, i);
        return ~(j & 2470) & 2470 | ~(j & 2470) & j;
    }
    var Qw = {
        ⵠΔⵠ: 480000,
        ΔΔⲆᐃΔⵠᐃ: 10,
        ᐃΔΔⵠΔⵠⵠ: 16,
        ⵠⵠⲆᐃⲆᐃᐃⲆⵠ: 6,
        ⲆΔᐃᐃᐃᐃⵠ: 60,
        ᐃᐃΔΔΔ: 1,
        ⵠⵠᐃⵠᐃ: 2,
        ⵠΔⲆᐃΔ: 4,
        ᐃᐃⵠⲆΔ: 8,
        ᐃᐃⵠⲆᐃᐃⵠ: 10,
        ⵠᐃᐃΔⲆΔⲆ: 100,
        ⵠᐃⲆⲆᐃⲆᐃ: 100,
        ᐃᐃᐃⵠΔΔᐃ: 100,
        ⵠⵠΔΔᐃⵠⲆᐃΔ: 100,
        ⵠⲆᐃⲆᐃΔΔ: 100,
        ᐃⲆΔᐃⲆᐃⵠ: 100,
        ⵠΔᐃᐃⲆⲆⲆⵠᐃ: 100,
        ᐃⲆΔᐃⲆᐃⵠ: 100,
        ΔΔⲆᐃⵠΔⵠ: 100,
        ΔⲆΔᐃΔⵠᐃ: 100,
        ΔⵠⲆⲆΔ: 0,
        ΔⲆΔᐃΔᐃᐃ: 1,
        ⲆΔΔᐃᐃ: 2,
        ΔⲆⵠᐃⲆ: 3,
        ᐃⲆⲆΔᐃ: 4,
        ΔΔⲆⲆⵠⵠⵠ: 5,
        ΔⵠᐃΔΔ: 6,
        ⲆⲆᐃΔⵠ: 7,
        ΔΔⵠᐃᐃⵠⵠⵠⵠ: {
            osaka: "Osaka",
            sydney: "Sydney",
            frankfurt: "Frankfurt",
            atlanta: "Atlanta",
            losangeles: "Los Angeles"
        },
        ⲆᐃΔⲆᐃⵠⵠ: {
            0: "normal",
            2: "zombies",
            3: "vampires",
            4: "forest",
            6: "community",
            7: "experimental"
        },
        ΔⵠᐃⵠⵠⲆⲆ: 0,
        ᐃᐃᐃⵠⵠⵠᐃ: 0,
        ⵠΔΔⵠᐃⲆΔ: 30,
        ΔᐃⵠⵠᐃⵠᐃΔⲆ: 2,
        ⲆΔᐃᐃᐃᐃⵠ: 60000,
        ΔⲆᐃⲆΔⲆΔⲆⵠ: 0,
        ⲆᐃⵠΔⲆⵠⵠⵠⵠ: 0,
        ⲆⵠΔⵠᐃᐃⲆᐃᐃ: 50,
        ᐃⲆᐃⵠⵠΔᐃΔⵠ: 0,
        ⲆⵠᐃⲆⲆⵠᐃᐃⵠ: 40,
        ⵠⵠᐃⵠᐃΔⵠⵠⲆ: 39,
        ᐃⵠΔΔΔⲆΔᐃⲆ: 830,
        ⲆⲆᐃΔⲆᐃᐃ: 25,
        ⲆΔⵠΔᐃᐃⵠ: 8,
        Δᐃᐃⵠⵠ: 0,
        ᐃᐃⵠᐃⲆ: 0,
        ᐃⵠᐃⵠⲆⲆⲆ: 200,
        ΔⲆΔⲆᐃⲆΔ: 0,
        ⵠᐃᐃΔᐃ: 250,
        ΔΔⵠᐃⵠⵠⲆ: 150,
        ⵠⵠᐃⵠᐃΔΔ: 0,
        ᐃΔΔΔⲆ: 350,
        ΔΔᐃᐃⲆⲆᐃ: 100,
        ⲆΔΔᐃⵠⵠⲆ: 700,
        ⵠⵠᐃΔΔ: 39879
    };
    var Rw = [];
    for (Qb = 0; Qb < 500; Qb++) {
        Rw[Qb] = 0;
    }
    Rw[47] = 1;
    Rw[57] = 1;
    Rw[0] = 1;
    Rw[5] = 1;
    Rw[6] = 1;
    Rw[30] = 1;
    Rw[19] = 1;
    Rw[9] = 1;
    Rw[62] = 1;
    Rw[63] = 1;
    Rw[13] = 1;
    Rw[14] = 1;
    Rw[15] = 1;
    Rw[33] = 1;
    Rw[34] = 1;
    Rw[16] = 1;
    Rw[17] = 1;
    Rw[12] = 1;
    Rw[18] = 1;
    var Sw = [{
        time: 2880000
    }, {
        time: 1440000
    }, {
        time: 1920000
    }, {
        time: 1440000
    }, {
        time: 2880000
    }, {
        time: 2400000
    }, {
        time: 2400000
    }, {
        time: 4800000
    }, {
        time: 2880000
    }, {
        time: 3360000
    }, {
        time: 2880000
    }, {
        time: 3840000
    }, {
        time: 3360000
    }];
    var Tw = {
        ⵠΔᐃΔⲆ: 45,
        ᐃΔⵠⵠΔ: 1,
        ᐃⵠⵠⵠΔ: 22,
        ⵠΔⲆΔΔ: 75,
        ᐃⲆᐃⵠᐃ: 8,
        ᐃⵠΔⵠⲆ: 32,
        Δᐃⵠⵠᐃ: 41,
        ⲆⵠⲆΔⲆ: 67,
        ⲆⵠⲆᐃΔ: 42,
        ⲆⲆⲆᐃΔ: 53,
        ⲆⵠΔⲆⲆ: 64,
        ⵠΔΔⲆᐃ: 66,
        ΔᐃᐃⵠⲆ: 12,
        ⵠⵠΔⲆⲆ: 52,
        ⵠᐃᐃⲆⲆ: 62,
        ΔⲆⲆᐃΔ: 79,
        ⵠᐃᐃᐃΔ: 2,
        ΔⲆᐃΔᐃ: 78,
        ⵠⵠΔⲆΔ: 10,
        ⲆΔΔᐃⵠ: 72,
        ⲆᐃΔᐃᐃ: 81,
        ᐃⵠⲆⵠΔ: 37,
        ᐃⵠᐃⵠⵠ: 87,
        ⲆᐃΔⲆⵠ: 18,
        ᐃᐃⲆⲆᐃ: 4,
        ⲆΔᐃΔΔ: 100,
        ⲆΔΔⲆΔ: 86,
        ΔᐃⲆⵠΔ: 7,
        ⵠⵠⲆΔᐃ: 17,
        ᐃⵠⲆΔᐃ: 28,
        ΔⲆΔΔΔ: 34,
        ᐃⲆΔᐃΔ: 73,
        ΔⲆᐃⲆⵠᐃΔ: 85,
        ΔΔⵠⲆΔ: 29,
        ⲆⵠΔᐃᐃ: 68,
        ⵠⲆΔᐃⵠ: 19,
        ΔᐃᐃⲆᐃ: 91,
        ⲆⲆⵠΔΔ: 5,
        ᐃᐃΔᐃⵠ: 60,
        ΔᐃⵠΔⲆ: 51,
        ᐃΔⲆᐃⵠ: 0,
        ⵠΔΔΔⲆ: 74,
        ⵠᐃⲆⵠⵠ: 71,
        ⵠᐃⵠⲆΔ: 70,
        ⲆΔⲆⲆΔ: 88,
        ⲆⲆΔᐃⵠ: 55,
        ⵠⲆΔΔⵠ: 80,
        ᐃⲆΔⵠᐃ: 15,
        ⵠⵠⵠⵠⲆ: 24,
        ⵠⲆᐃⲆⲆ: 30,
        ᐃΔᐃᐃᐃ: 35,
        ⵠⲆⲆᐃΔ: 27,
        ᐃᐃⲆΔᐃᐃⲆ: 83,
        ᐃΔⲆΔⲆⲆᐃ: 84,
        ⲆⵠⲆᐃᐃ: 39,
        ᐃⲆΔⵠΔ: 49,
        ⵠᐃⵠΔᐃ: 44,
        ⲆΔⵠΔⵠ: 20,
        ⲆΔⵠᐃⲆ: 23,
        ⲆΔᐃⵠΔ: 65,
        ⵠᐃⵠⲆⵠ: 47,
        ⵠᐃⵠᐃΔ: 16,
        ⲆⲆᐃᐃⵠ: 61,
        ᐃⲆⲆΔⵠ: 56,
        ᐃⵠᐃⲆⲆ: 21,
        ⲆᐃⲆⵠᐃ: 36,
        ᐃΔⲆⲆⵠ: 50,
        ΔΔᐃᐃⲆ: 90,
        ⵠⵠᐃΔΔ: 3,
        ⲆⵠΔΔⵠ: 25,
        ᐃⵠⲆⲆΔ: 54,
        ⵠΔⵠⵠΔ: 38,
        ΔΔΔⲆᐃ: 26,
        ⲆⲆⲆᐃᐃ: 46,
        ⲆΔᐃⵠⲆ: 9,
        ᐃᐃⲆⵠⵠ: 31,
        ⲆⵠᐃⵠΔⵠᐃ: 82,
        ⲆΔⲆⲆᐃ: 43,
        ΔᐃⵠⲆⲆ: 69,
        ᐃⵠΔΔᐃ: 63,
        ⲆⲆᐃⵠΔ: 11,
        ΔⲆⵠᐃⵠ: 33,
        ᐃⵠΔΔΔ: 77,
        ᐃⵠⲆΔΔ: 48,
        ΔΔⲆⲆⵠ: 6,
        ⲆⲆⲆᐃⵠ: 13,
        ΔⵠⲆΔΔ: 40,
        ⲆⲆⲆⲆΔ: 14,
        ᐃⲆⲆΔᐃⵠⵠ: 76,
        ᐃᐃⵠΔΔᐃⵠ: 89
    };
    var Uw = [[24, 108], [25, 111], [26, 112], [27, 121], [28, 202]];
    function Vw(a, b, c, d) {
        this.id = a;
        this.ΔᐃⲆΔⲆ = (a + 5) * 8;
        this.ΔⲆⲆΔΔ = ao / 1366;
        this.x = b;
        this.y = c;
        this.c = Math.sin(d);
        this.ⵠⵠⲆⲆ = Math.cos(d);
        this.alpha = 0;
    }
    function Ww(b, c, d, e, f, i, a, j, k, h) {
        this.type = b;
        this.ⵠΔᐃⵠ = c;
        this.id = d;
        this.x = e;
        this.y = f;
        this.angle = i;
        this.ⵠΔΔᐃⵠⲆⵠ = i;
        this.action = a;
        this.info = j;
        this.ⵠᐃΔᐃΔ = h;
        this.r = {
            x: e,
            y: f
        };
        this.ΔᐃⲆΔⲆ = k;
        if (Px) {
            this.ΔΔⵠΔ = c * Px.ΔΔᐃᐃᐃΔᐃ + d;
        }
        switch (b) {
            case 0:
                this.ⵠᐃΔᐃ = Px.ⲆⲆⲆᐃ[this.ⵠΔᐃⵠ];
                this.ᐃΔⲆⲆ = this.ⵠᐃΔᐃ.ᐃΔⲆⲆ;
                this.ΔΔΔΔⲆᐃΔ = this.ⵠᐃΔᐃ.ΔΔΔΔⲆᐃΔ;
                this.ⲆⵠⵠⲆⲆ = this.ⵠᐃΔᐃ.ⲆⵠⵠⲆⲆ;
                this.ⵠᐃⲆⵠΔ = this.ⵠᐃΔᐃ.ⵠᐃⲆⵠΔ;
                this.ΔᐃΔΔᐃΔΔ = -1000000;
                this.ⲆΔⵠⵠΔ = -1000000;
                this.ⲆⲆᐃΔᐃ = -1000000;
                this.ΔⵠΔⲆⵠ = -1000000;
                this.ΔΔᐃΔᐃᐃΔ = -1000000;
                this.ⲆᐃⵠⲆᐃⲆⲆ = -1000000;
                this.ⲆᐃᐃⵠⲆ = -1000000;
                this.ᐃΔΔⲆⵠ = Px.mode === 2 && this.ᐃΔⲆⲆ === 0 ? Wa : Dl;
                this.ΔⲆΔⲆᐃⲆⵠ = Px.mode === 3 && this.ᐃΔⲆⲆ === 0 && p;
                this.ΔⲆᐃᐃΔⵠᐃ = this.ᐃΔΔⲆⵠ && this.ⵠᐃΔᐃ.ΔⵠⲆⵠⲆ === "  " ? Ol : Ks;
                this.ⲆⲆⲆᐃⲆ = [];
                this.ⵠᐃⵠⲆᐃΔⲆ = 0;
                this.ΔⲆᐃⲆ = Ch;
                this.ⵠᐃΔᐃⲆᐃⵠ = 0;
                this.ᐃΔⵠⲆΔᐃⵠ = 0;
                this.ⲆᐃⵠΔⵠ = [];
                this.r = {
                    x: e,
                    y: f
                };
                this.ᐃⲆᐃⲆ = Bw;
                this.ⵠᐃⵠΔⲆⲆΔ = zw;
                this.ⵠΔⲆΔⵠ = 0;
                this.ⵠⵠⲆⵠⲆ = 0;
                this.ᐃⲆΔΔᐃ = 0;
                this.ᐃᐃΔΔΔᐃᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Oo, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠⲆᐃΔⵠ = 0;
                this.ᐃΔΔⲆⲆΔΔ = 0;
                this.ᐃΔᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Ks, 0.6, 0.6, 0, 5, 3);
                this.ΔⵠΔⲆⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.6, 0.6, 0, 5, 3);
                this.freeze = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.6, 0.6, 0, 5, 3);
                this.ΔⵠⲆΔᐃⵠΔ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(th, 0.6, 0.6, 0, 5, 3);
                this.ⲆⲆⲆΔᐃⲆᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(true, 0, 2.25, -1.5, 3.75, 7.5);
                this.ΔᐃΔⵠⲆⵠⵠ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(true, 0, 7.5, -3, 22.5, 33.75);
                this.attack = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Lj, 0, 0, -Math.PI / 3, 6, 9);
                this.ⲆⲆⵠᐃⵠⵠᐃⵠⵠ = 0;
                this.ΔᐃᐃⲆΔⲆΔ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Dl, 0.6, 0.6, 0, 1, 3);
                this.ΔΔⵠⲆⲆⵠᐃ = this.ΔⲆᐃᐃΔⵠᐃ ? new ⵠᐃⵠ.ⵠᐃⵠⲆ(true, 0, 2.25, -1.5, 2.75, 5.5) : 0;
                this.ⵠⲆⲆⲆⵠⲆⲆ = 0;
                this.ᐃⵠᐃᐃᐃⵠᐃ = 0;
                this.ⵠΔΔⲆⲆⲆⵠ = [];
                this.ⵠΔᐃⵠΔΔⲆ = [];
                this.text = [];
                this.label = [];
                this.ⲆΔⲆΔⲆᐃⲆ = Aw;
                this.ⵠⲆᐃᐃᐃ = Ll;
                this.right = -1;
                this.ⵠᐃⲆⲆΔ = -1;
                this.action = 64;
                this.ⲆΔⵠᐃΔΔⲆ = false;
                this.ⲆⵠᐃⲆᐃ = 0;
                this.ⲆⵠΔⵠⲆ = false;
                this.bubbles = [];
                this.ⵠᐃΔⲆⲆ = 0;
                this.ⲆᐃⵠⵠⲆ = -1;
                this.Ⲇⵠᐃ = function (a) {
                    if (this.info & 32768) {
                        this.ⲆΔⵠᐃΔΔⲆ = true;
                        this.info = this.info & -32769;
                    } else {
                        this.ⲆΔⵠᐃΔΔⲆ = pq;
                    }
                    if (this.info & 16384) {
                        this.info = this.info & -16385;
                        this.ⵠᐃΔⲆⲆ = 1;
                    } else {
                        this.ⵠᐃΔⲆⲆ = 0;
                    }
                    this.ⲆⵠᐃⲆᐃ = Math.floor(this.info / 128);
                    this.info -= this.ⲆⵠᐃⲆᐃ * 128;
                    if (this.info === 7 || this.ΔⲆᐃᐃΔⵠᐃ) {
                        this.right = -1;
                    } else {
                        this.right = this.info;
                    }
                    this.ⵠᐃⵠⲆᐃΔⲆ = Px.ⲆⲆΔⵠᐃⵠⵠΔᐃ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
                    this.ⵠᐃⲆⲆΔ = this.ⵠᐃΔᐃΔ & 255;
                    if (this.right === 2) {
                        this.ⲆⵠΔⵠⲆ = true;
                    } else {
                        this.ⲆⵠΔⵠⲆ = false;
                    }
                    if (Rw[this.right]) {
                        this.ⲆⵠⲆᐃⲆ = Wa;
                    } else {
                        this.ⲆⵠⲆᐃⲆ = Ok;
                    }
                    if (a & 256) {
                        this.ΔᐃᐃⲆΔⲆΔ.ΔⵠⲆ = false;
                        this.ΔᐃᐃⲆΔⲆΔ.ΔᐃΔ = 0.6;
                    } else if (a & 4) {
                        this.freeze.ΔⵠⲆ = Tq;
                        this.freeze.ΔᐃΔ = 0.6;
                    } else if (a & 128) {
                        this.ΔⵠΔⲆⲆ.ΔⵠⲆ = xl;
                        this.ΔⵠΔⲆⲆ.ΔᐃΔ = 0.6;
                    }
                    if (a & 8) {
                        this.ΔⵠⲆΔᐃⵠΔ.ΔⵠⲆ = Pn;
                        this.ΔⵠⲆΔᐃⵠΔ.ΔᐃΔ = 0.6;
                    }
                    if (a & 2) {
                        this.ᐃΔᐃ.ΔⵠⲆ = false;
                        this.ᐃΔᐃ.ΔᐃΔ = 0.6;
                    }
                    if (a & 16) {
                        this.ⲆⲆⵠᐃⵠⵠᐃⵠⵠ = 0.58;
                        if (Tx.ΔΔᐃⲆⵠ && this.ⲆᐃⵠⵠⲆ !== -1) {
                            Tx.ⲆⲆⲆᐃ[this.ⲆᐃⵠⵠⲆ].ᐃⲆΔΔⵠⲆⵠⲆⲆ(Cx[this.right]);
                        }
                    }
                };
                this.Ⲇⵠᐃ();
                break;
            case 23:
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(C, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: false,
                    angle: 0
                };
                this.ⵠΔΔⲆⲆ = Qv;
                this.ΔᐃⲆᐃΔ = zv;
                this.ᐃΔⲆᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.ⲆⲆⲆⲆⲆⵠⲆ = 0;
                this.ⲆΔⲆΔᐃⲆⲆ = 0;
                this.ⲆⵠⵠΔΔ = jv;
                break;
            case 22:
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(C, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: Ih,
                    angle: 0
                };
                this.ⵠΔΔⲆⲆ = Ov;
                this.ΔᐃⲆᐃΔ = jw;
                this.ᐃΔⲆᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Dl, 1, 1.23, 1.18, 0.01, 0.01);
                this.ⲆⲆⲆⲆⲆⵠⲆ = 0;
                this.ⲆΔⲆΔᐃⲆⲆ = 0;
                break;
            case 1:
            case 6:
                this.ⵠΔΔⲆⲆ = tw;
                this.ΔᐃⲆᐃΔ = Mv;
                this.ⲆΔΔⵠΔ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Pn, 1, 1.03, 0.98, 0.3, 0.3);
                this.ⲆᐃᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.ᐃΔⲆᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(th, 1, 1.23, 1.18, 0.01, 0.01);
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: ds,
                    angle: 0
                };
                break;
            case 43:
                this.ⵠΔΔⲆⲆ = aw;
                this.ΔᐃⲆᐃΔ = Hv;
                this.ⲆᐃᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Dj, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(Ks, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: Pn,
                    angle: 0
                };
                this.ⲆᐃΔᐃ = [];
                for (var l = 0; l < 3; l++) {
                    this.ⲆᐃΔᐃ.push({
                        ᐃⲆᐃⲆ: Rv,
                        ⲆΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                this.ⲆᐃΔᐃ[0].x = this.x - 16.5;
                this.ⲆᐃΔᐃ[0].y = this.y - 15.5;
                this.ⲆᐃΔᐃ[0].angle = this.angle;
                this.ⲆᐃΔᐃ[1].x = this.x + 36;
                this.ⲆᐃΔᐃ[1].y = this.y + 17;
                this.ⲆᐃΔᐃ[1].angle = this.angle;
                this.ⲆᐃΔᐃ[2].x = this.x - 18.5;
                this.ⲆᐃΔᐃ[2].y = this.y + 39;
                this.ⲆᐃΔᐃ[2].angle = this.angle;
                break;
            case 3:
                this.ⵠΔΔⲆⲆ = uw;
                this.ΔᐃⲆᐃΔ = Gv;
                this.ⲆᐃᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Dl, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: false,
                    angle: 0
                };
                this.ⲆᐃΔᐃ = [];
                for (l = 0; l < 3; l++) {
                    this.ⲆᐃΔᐃ.push({
                        ᐃⲆᐃⲆ: Wv,
                        ⲆΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                this.ⲆᐃΔᐃ[0].x = this.x - 16.5;
                this.ⲆᐃΔᐃ[0].y = this.y - 15.5;
                this.ⲆᐃΔᐃ[1].x = this.x - 5.5;
                this.ⲆᐃΔᐃ[1].y = this.y + 7.5;
                this.ⲆᐃΔᐃ[2].x = this.x + 18;
                this.ⲆᐃΔᐃ[2].y = this.y - 5;
                break;
            case 77:
                this.ᐃⲆᐃⲆ = rw;
                this.ⲆΔᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃΔᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(pg, 0.6, 0.6, 0, 5, 3);
                break;
            case 70:
                this.ᐃⲆᐃⲆ = Ev;
                this.ⲆΔᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Lj, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃΔᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 71:
                this.ᐃⲆᐃⲆ = hw;
                this.ⲆΔᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Dl, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⲆⵠⲆᐃΔⵠⵠ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(kg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.Ⲇⵠᐃⵠᐃⵠᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃΔᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(lq, 0.6, 0.6, 0, 5, 3);
                this.ΔⵠΔⲆⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(kg, 0.6, 0.6, 0, 5, 3);
                break;
            case 67:
                this.ᐃⲆᐃⲆ = Bv;
                this.ⲆΔᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⲆⵠⲆᐃΔⵠⵠ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(th, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.Ⲇⵠᐃⵠᐃⵠᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃΔᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Dl, 0.6, 0.6, 0, 5, 3);
                this.ΔⵠΔⲆⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Oo, 0.6, 0.6, 0, 5, 3);
                break;
            case 68:
                this.ᐃⲆᐃⲆ = bw;
                this.ⲆΔᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃΔᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 90:
                this.ᐃⲆᐃⲆ = gw;
                this.ⲆΔᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(pg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
                this.ᐃΔᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 91:
                this.ΔΔⲆᐃᐃⵠⵠ = this.info & 15;
                this.ᐃΔⵠⲆΔᐃⵠ = this.ⵠᐃΔᐃΔ & 1;
                this.ⵠᐃⵠⲆᐃΔΔ = 0;
                this.x = this.info;
                this.y = this.ⵠᐃΔᐃΔ;
                this.ᐃⲆᐃⲆ = _v;
                this.ⲆΔᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Dj, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
                break;
            case 80:
            case 60:
            case 61:
            case 62:
            case 63:
            case 78:
            case 65:
            case 66:
            case 88:
                this.ᐃⲆᐃⲆ = gw;
                this.ⲆΔᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Ks, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃΔᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(C, 0.6, 0.6, 0, 5, 3);
                break;
            case 36:
                this.ᐃⲆᐃⲆ = Lv;
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: pg,
                    angle: 0
                };
                break;
            case 34:
                this.ΔᐃⲆᐃΔ = Sv;
                this.ᐃⲆᐃⲆ = Vv;
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: false,
                    angle: 0
                };
                this.up = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1.03, 0.98, 0.1, 0.1);
                this.ᐃⲆⵠⵠⵠ = [];
                break;
            case 87:
                this.angle = Math.random() * Math.PI / 2;
            case 86:
            case 82:
                this.ᐃⲆᐃⲆ = Nv;
                this.ᐃΔᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Tq, 0.6, 0.6, 0, 5, 3);
                break;
            case 81:
                this.ᐃⲆᐃⲆ = vv;
                this.ᐃΔᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 69:
                this.scale = 1;
                this.ᐃⲆᐃⲆ = Av;
                this.ⲆΔᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⵠᐃⵠ.ⵠᐃⵠⲆ(pq, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ᐃΔᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 76:
                this.ᐃⲆⵠⲆΔ = 0;
                this.ⲆᐃᐃⲆ = [];
                this.ⲆΔᐃⵠⵠⲆᐃ = 0;
                this.ᐃⵠΔⲆΔᐃΔ = wv;
                this.ᐃⲆᐃⲆ = Uv;
                this.ⲆΔᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Ok, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Ml, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ᐃΔᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 75:
                this.x = this.info;
                this.y = this.ⵠᐃΔᐃΔ;
                this.scale = 1;
                this.ᐃΔⵠΔ = 0;
                this.ᐃⲆᐃⲆ = Xv;
                this.ⲆΔᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Oo, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ᐃΔᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Pn, 0.6, 0.6, 0, 5, 3);
                break;
            case 74:
                this.x = this.info;
                this.y = this.ⵠᐃΔᐃΔ;
                this.scale = 1;
                this.ᐃΔⵠΔ = 0;
                this.ᐃⲆᐃⲆ = Zv;
                this.ⲆΔᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ᐃΔᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 73:
                this.scale = 1;
                this.ᐃⲆᐃⲆ = vw;
                this.ⲆΔᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Ml, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⵠᐃⵠ.ⵠᐃⵠⲆ(tk, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ᐃΔᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Ih, 0.6, 0.6, 0, 5, 3);
                break;
            case 72:
                this.scale = 1;
                this.ᐃⲆᐃⲆ = Dv;
                this.ⲆΔᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ᐃΔᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(tk, 0.6, 0.6, 0, 5, 3);
                break;
            case 64:
                this.scale = 1;
                this.ᐃⲆᐃⲆ = Kv;
                this.ⲆΔᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(w, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⵠᐃⵠ.ⵠᐃⵠⲆ(th, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ᐃΔᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Ok, 0.6, 0.6, 0, 5, 3);
                break;
            case 100:
                this.ⲆᐃΔᐃ = [];
                for (l = 0; l < 5; l++) {
                    this.ⲆᐃΔᐃ.push({
                        ᐃⲆᐃⲆ: Wv,
                        ⲆΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(Pn, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                switch (this.id % 3) {
                    case 0:
                        this.ⲆᐃΔᐃ[0].x = this.x - 20.5;
                        this.ⲆᐃΔᐃ[0].y = this.y - 22.5;
                        this.ⲆᐃΔᐃ[1].x = this.x - 35.5;
                        this.ⲆᐃΔᐃ[1].y = this.y + 7.5;
                        this.ⲆᐃΔᐃ[2].x = this.x + 7.5;
                        this.ⲆᐃΔᐃ[2].y = this.y - 30;
                        this.ⲆᐃΔᐃ[3].x = this.x + 22.5;
                        this.ⲆᐃΔᐃ[3].y = this.y;
                        this.ⲆᐃΔᐃ[4].x = this.x - 7.5;
                        this.ⲆᐃΔᐃ[4].y = this.y + 14.5;
                        break;
                    case 1:
                        this.ⲆᐃΔᐃ[0].x = this.x - 30.5;
                        this.ⲆᐃΔᐃ[0].y = this.y - 22.5;
                        this.ⲆᐃΔᐃ[1].x = this.x - 15.5;
                        this.ⲆᐃΔᐃ[1].y = this.y + 7.5;
                        this.ⲆᐃΔᐃ[2].x = this.x + 15.5;
                        this.ⲆᐃΔᐃ[2].y = this.y - 30;
                        this.ⲆᐃΔᐃ[3].x = this.x + 12.5;
                        this.ⲆᐃΔᐃ[3].y = this.y + 5;
                        this.ⲆᐃΔᐃ[4].x = this.x - 40.5;
                        this.ⲆᐃΔᐃ[4].y = this.y + 14.5;
                        break;
                    case 2:
                        this.ⲆᐃΔᐃ[0].x = this.x - 20.5;
                        this.ⲆᐃΔᐃ[0].y = this.y - 20.5;
                        this.ⲆᐃΔᐃ[1].x = this.x - 35.5;
                        this.ⲆᐃΔᐃ[1].y = this.y + 15.5;
                        this.ⲆᐃΔᐃ[2].x = this.x + 7.5;
                        this.ⲆᐃΔᐃ[2].y = this.y - 17;
                        this.ⲆᐃΔᐃ[3].x = this.x + 22.5;
                        this.ⲆᐃΔᐃ[3].y = this.y + 5;
                        this.ⲆᐃΔᐃ[4].x = this.x - 7.5;
                        this.ⲆᐃΔᐃ[4].y = this.y + 1.5;
                }
                break;
            case 31:
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(ds, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: ds,
                    angle: 0
                };
                this.ᐃⲆᐃⲆ = Yv;
                this.ⲆᐃᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ⲆⵠΔᐃⵠᐃΔ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(pq, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
                break;
            case 40:
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: xl,
                    angle: 0
                };
                this.ᐃⲆᐃⲆ = iw;
                this.ⲆᐃᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Dj, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 39:
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(xl, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: Ml,
                    angle: 0
                };
                this.ᐃⲆᐃⲆ = cw;
                this.ⲆᐃᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 44:
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: false,
                    angle: 0
                };
                this.ᐃⲆᐃⲆ = Iv;
                this.ⲆᐃᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(ds, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 55:
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: false,
                    angle: 0
                };
                this.ᐃⲆᐃⲆ = pw;
                this.ⲆᐃᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(xl, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 54:
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: false,
                    angle: 0
                };
                this.ᐃⲆᐃⲆ = Cv;
                this.ⲆᐃᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 37:
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: false,
                    angle: 0
                };
                this.ᐃⲆᐃⲆ = $v;
                this.ⲆᐃᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Ok, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 24:
                this.ᐃⲆᐃⲆ = fw;
                this.rotate = 0;
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(kg, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: Ks,
                    angle: 0
                };
                break;
            case 25:
                this.ᐃⲆᐃⲆ = dw;
                this.rotate = 0;
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(pq, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: false,
                    angle: 0
                };
                break;
            case 26:
                this.ᐃⲆᐃⲆ = Pv;
                this.rotate = 0;
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(kg, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: pg,
                    angle: 0
                };
                break;
            case 27:
                this.ᐃⲆᐃⲆ = qw;
                this.rotate = 0;
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(C, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: Lj,
                    angle: 0
                };
                break;
            case 28:
                this.ᐃⲆᐃⲆ = yv;
                this.rotate = 0;
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: Ks,
                    angle: 0
                };
                break;
            case 32:
                this.ⵠΔΔⲆⲆ = ww;
                this.ΔᐃⲆᐃΔ = ew;
                this.rotate = 0;
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: false,
                    angle: 0
                };
                break;
            case 38:
                this.ᐃⲆᐃⲆ = Yu;
                this.Δⵠᐃ = Math.floor(this.x / 100);
                this.Δⵠ = Math.floor(this.y / 100);
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(xl, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: false,
                    angle: 0
                };
                this.opacity = 1;
                this.ⲆⵠⵠΔΔ = qv;
                break;
            case 42:
                this.ᐃⲆᐃⲆ = mv;
                this.ᐃΔⲆᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1.15, 1, 0.3, 0.3);
                this.color = 0;
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(Ih, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: lq,
                    angle: 0
                };
                break;
            case 33:
            case 2:
            case 56:
            case 35:
            case 29:
                this.ᐃⲆᐃⲆ = fv;
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(xl, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: th,
                    angle: 0
                };
                break;
            case 30:
                this.ᐃⲆᐃⲆ = fv;
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(Ih, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: pq,
                    angle: 0
                };
                this.ⲆⵠⵠΔΔ = qv;
                break;
            case 4:
            case 7:
            case 8:
            case 9:
            case 19:
            case 50:
            case 5:
            case 12:
            case 13:
            case 14:
            case 20:
            case 52:
                this.ᐃⲆᐃⲆ = fv;
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: lq,
                    angle: 0
                };
                this.ⲆⵠⵠΔΔ = jv;
                break;
            case 41:
                this.ᐃⲆᐃⲆ = cv;
                this.opacity = 1;
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: false,
                    angle: 0
                };
                var m = this.angle % (Math.PI / 2);
                if (m < Math.PI / 4) {
                    this.angle -= m;
                } else {
                    this.angle += Math.PI / 2 - m;
                }
                break;
            case 79:
                this.ᐃⲆᐃⲆ = hv;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case 89:
                this.ᐃⲆᐃⲆ = gv;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case 83:
                this.ᐃⲆᐃⲆ = ev;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case 84:
                this.ᐃⲆᐃⲆ = rv;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case 85:
                this.ᐃⲆᐃⲆ = tv;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case 11:
                this.Ⲇⵠᐃ = function (a) {
                    this.lock = this.info & 8192 ? 1 : 0;
                    this.info = this.info & 8191;
                    this.action = a;
                };
                this.ᐃⲆᐃⲆ = sv;
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: false,
                    angle: 0
                };
                this.lock = 0;
                this.Ⲇⵠᐃ(this.action);
                break;
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 53:
            case 10:
            case 15:
            case 16:
            case 17:
            case 21:
            case 51:
                this.ᐃⲆᐃⲆ = kv;
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: false,
                    angle: 0
                };
                this.ⲆⵠⵠΔΔ = jv;
                break;
            case 18:
                this.ⵠΔΔⲆⲆ = xv;
                this.ᐃⲆᐃⲆ = sw;
                this.ΔᐃⲆᐃΔ = Fv;
                this.ⲆᐃᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(lq, 1, 1.23, 1.18, 0.02, 0.02);
                this.ᐃΔⲆᐃⲆ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1.23, 1.18, 0.04, 0.04);
                this.ᐃΔᐃ = {
                    ᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(Lj, 1, 1, 0, 10, 10),
                    Ⲇⵠᐃ: Tq,
                    angle: 0
                };
                this.Ⲇⵠᐃ = function (a) {
                    this.action = a;
                };
        }
    }
    function Xw(b) {
        function c(b, c, d) {
            var e = c;
            for (var f = d; Px.Ⲇᐃⵠⵠⵠ > f; f++) {
                for (var g = c; Px.ⵠⵠᐃⵠⵠ > g && (f === d && (e = Math.max(g, e)), g <= e) && b[f][g] !== 1; g++) {
                    b[f][g] = 1;
                }
                if (e > g) {
                    break;
                }
            }
            Px.Ⲇⵠⵠᐃᐃ.push(new Px.ⲆᐃᐃΔⵠᐃⵠ(Px.Δᐃⵠᐃᐃ, c, d, e - c + 1, f - d, 15));
        }
        function e(b, c, d, e, f) {
            for (var a = 0; f > a && j(b, c, d, e, 8) !== 1; a++);
            if (a === f) {
                return 0;
            } else {
                return 1;
            }
        }
        function j(c, d, e, f, i) {
            var j = d + Math.floor(f * Px.ⵠⲆⲆΔΔ.get());
            var a = e + Math.floor(f * Px.ⵠⲆⲆΔΔ.get());
            var k = 10 + Math.floor(Px.ⵠⲆⲆΔΔ.get() * (Px.ⵠⵠᐃⵠⵠ - j - 20));
            var m = 10 + Math.floor((Px.Ⲇᐃⵠⵠⵠ - a - 20) * Px.ⵠⲆⲆΔΔ.get());
            var h = k + j;
            var l = m + a;
            for (var g = 0; g < Px.Ⲇⵠⵠᐃᐃ.length; g++) {
                var n = Px.Ⲇⵠⵠᐃᐃ[g];
                if (ⵠᐃⵠ.ⵠⵠΔⵠⵠⵠΔ(k, h, m, l, n.x1 / 100 - i, n.x2 / 100 + i, n.y1 / 100 - i, n.y2 / 100 + i) === 1) {
                    return 0;
                }
            }
            Px.Ⲇⵠⵠᐃᐃ.push(new Px.ⲆᐃᐃΔⵠᐃⵠ(c, k, m, j, a, 15));
            return 1;
        }
        function k(c, f, j, k, m, n, a, o) {
            var q = Math.floor(a / 2);
            var h = Math.max(1, Math.floor(a / 2));
            var l = Math.floor(o / 2);
            var g = Math.max(1, Math.floor(o / 2));
            for (var r = 0; j > r; r++) {
                for (var s = c - l; c + g > s; s++) {
                    for (var t = f - q; f + h > t; t++) {
                        if (p(s, t, "wtb", 0, 1) === 1) {
                            n.push([s, t, 1]);
                        }
                    }
                }
                c += k;
                f += m;
            }
        }
        function q(a, b) {
            for (var c = 0; b.length > c; c++) {
                n(b[c][0], b[c][1], a, b[c][2]);
            }
        }
        function a(c, e) {
            var f = Px.Ⲇⵠⵠᐃᐃ[c];
            var i = Math.floor(f.y1 / 100);
            var j = Math.floor(f.x1 / 100);
            var a = Math.floor(f.ⲆⲆⲆ / 100);
            var n = j + (z = Math.floor(f.w / 100));
            var o = 2;
            var q = a;
            var r = i;
            for (var s = j + 10 + Math.floor((z - 20) * Px.ⵠⲆⲆΔΔ.get()), t = s - 4; s + 4 > t; t++) {
                p(i - 1, t, "wtb", 0, 1);
            }
            while (q > 0) {
                if (o !== 2) {
                    if (q < 10) {
                        for (A = 1; q > 0; A++) {
                            k(r, s, 1, 1, 0, e, A, 1);
                            q -= 1;
                            r += 1;
                        }
                    } else if (o !== 1) {
                        o = 1;
                        var w = Math.floor(1 + Px.ⵠⲆⲆΔΔ.get() * 2);
                        var x = 1 + Math.floor(Px.ⵠⲆⲆΔΔ.get() * 4);
                        if (j + 16 > s) {
                            k(r, s, w, 0, 1, e, x, x);
                            s += w;
                        } else if (s > n - 16) {
                            k(r, s, w, 0, -1, e, x, x);
                            s -= w;
                        } else if (Px.ⵠⲆⲆΔΔ.get() > 0.5) {
                            k(r, s, w, 0, 1, e, x, x);
                            s += w;
                        } else {
                            k(r, s, w, 0, -1, e, x, x);
                            s -= w;
                        }
                    } else {
                        var y = Math.min(q, Math.floor(1 + Px.ⵠⲆⲆΔΔ.get() * 4));
                        var z = 1 + Math.floor(Px.ⵠⲆⲆΔΔ.get() * 4);
                        k(r, s, y, 1, 0, e, z, z);
                        o = 0;
                        q -= y;
                        r += y;
                    }
                } else {
                    for (var A = 10; A > 1; A--) {
                        k(r, s, 1, 1, 0, e, A, 1);
                        q -= 1;
                        r += 1;
                    }
                    o = 0;
                }
            }
            for (t = s - 1; t < s + 2; t++) {
                p(r, t, "wtb", 0, 1);
            }
        }
        function i(a, b) {
            for (var c = 0; c < 3; c++) {
                l(a, "s", c, Math.floor(b * 18));
            }
            for (c = 0; c < 3; c++) {
                l(a, "f", c, Math.floor(b * 24));
            }
            for (c = 0; c < 3; c++) {
                l(a, "d", c, Math.max(1, Math.floor(b * 2)), 0.3);
            }
            for (c = 0; c < 3; c++) {
                l(a, "g", c, Math.floor(b * 6));
            }
            m(a);
        }
        function n(a, b, c, d) {
            if (r(a, b) && (ⲆⲆΔⲆ = Nx.ⲆⲆΔⲆ, ⲆⲆΔⲆ[a][b] === undefined && (ⲆⲆΔⲆ[a][b] = {}), ⲆⲆΔⲆ[a][b].r === undefined)) {
                var e = 0;
                if (r(a - 1, b) && ⲆⲆΔⲆ[a - 1][b] !== undefined && ⲆⲆΔⲆ[a - 1][b].wtb !== mo) {
                    e += 2;
                }
                if (r(a, b - 1) && ⲆⲆΔⲆ[a][b - 1] !== kr && ⲆⲆΔⲆ[a][b - 1].wtb !== undefined) {
                    e += 8;
                }
                if (r(a, b + 1) && ⲆⲆΔⲆ[a][b + 1] !== Qa && ⲆⲆΔⲆ[a][b + 1].wtb !== Pg) {
                    e += 16;
                }
                if (r(a + 1, b) && Xh !== ⲆⲆΔⲆ[a + 1][b] && rh !== ⲆⲆΔⲆ[a + 1][b].wtb) {
                    e += 64;
                }
                if (r(a - 1, b - 1) && (e & 10) === 10 && ⲆⲆΔⲆ[a - 1][b - 1] !== undefined && ⲆⲆΔⲆ[a - 1][b - 1].wtb !== eq) {
                    e += 1;
                }
                if (r(a - 1, b + 1) && (e & 18) === 18 && ⲆⲆΔⲆ[a - 1][b + 1] !== undefined && ⲆⲆΔⲆ[a - 1][b + 1].wtb !== $q) {
                    e += 4;
                }
                if (r(a + 1, b - 1) && (e & 72) === 72 && ⲆⲆΔⲆ[a + 1][b - 1] !== undefined && ⲆⲆΔⲆ[a + 1][b - 1].wtb !== Xh) {
                    e += 32;
                }
                if (r(a + 1, b + 1) && !(~e & 80) && ⲆⲆΔⲆ[a + 1][b + 1] !== undefined && $q !== ⲆⲆΔⲆ[a + 1][b + 1].wtb) {
                    e += 128;
                }
                ⲆⲆΔⲆ[a][b].r = {};
                ⲆⲆΔⲆ[a][b].r.ⵠⲆᐃΔⲆⵠᐃ = e;
                ⲆⲆΔⲆ[a][b].r.ⲆⵠⵠⲆⵠᐃΔ = d;
                ⲆⲆΔⲆ[a][b].r.ᐃⵠᐃⵠ = Px.ⵠⵠΔⵠᐃ(c, b * 100 + 50, a * 100 + 50) - 400;
                ⲆⲆΔⲆ[a][b].r.x = b * 100 + 50;
                ⲆⲆΔⲆ[a][b].r.y = a * 100 + 50;
            }
        }
        function h(a) {
            for (var b = 0; b < 3; b++) {
                l(a, "s", b, 15);
            }
            for (b = 0; b < 3; b++) {
                l(a, "a", b, 1);
            }
            for (b = 0; b < 3; b++) {
                l(a, "d", b, 1);
            }
            m(a);
        }
        function l(b, e, f, i, j) {
            var k = Px.Ⲇⵠⵠᐃᐃ[b];
            var a = Math.floor(k.x1 / 100);
            var n = Math.floor(k.y1 / 100);
            var q = Math.floor(k.w / 100);
            var t = Math.floor(k.ⲆⲆⲆ / 100);
            if (j !== undefined) {
                j = 1 - j;
                a += Math.floor(j * q / 2);
                n += Math.floor(j * t / 2);
                q -= Math.floor(q * j);
                t -= Math.floor(j * t);
            }
            var v = Nx.ⲆⲆΔⲆ;
            for (var g = 0, w = 0; i > g && w <= 50000; w++) {
                var x = n + Math.floor(t * Px.ⵠⲆⲆΔΔ.get());
                var y = a + Math.floor(q * Px.ⵠⲆⲆΔΔ.get());
                if (Px.ⵠⵠΔⵠᐃ(b, y * 100 + 50, x * 100 + 50) >= 400 && ((z = v[x][y + 1]) === undefined || z[e] === kr || z[e][f] === hj) && ((z = v[x][y - 1]) === mo || z[e] === jl || z[e][f] === undefined) && ((z = v[x + 1][y]) === undefined || lh === z[e] || z[e][f] === undefined) && ((z = v[x - 1][y]) === undefined || sj === z[e] || kr === z[e][f]) && ((z = v[x + 1][y - 1]) === ug || z[e] === undefined || z[e][f] === undefined)) {
                    var z = v[x - 1][y + 1];
                    if (lh === z || z[e] === fk || z[e][f] === undefined) {
                        if ((z = v[x + 1][y + 1]) === undefined || z[e] === undefined || z[e][f] === gj) {
                            if ((z = v[x - 1][y - 1]) === lh || z[e] === undefined || z[e][f] === ug) {
                                if (v[x][y] === jl) {
                                    p(x, y, e, f, 1);
                                    g++;
                                }
                            }
                        }
                    }
                }
            }
        }
        function g(b, c) {
            for (var d = 0; d < 6; d++) {
                l(b, "t", d, Math.floor(c * 80));
            }
            for (d = 0; d < 4; d++) {
                l(b, "b", d, Math.floor(c * 80));
            }
            for (d = 0; d < 3; d++) {
                l(b, "s", d, Math.floor(c * 50));
            }
            var e = [];
            for (d = 0; d < 6; d++) {
                a(b, e);
            }
            q(b, e);
            e = [];
            l(b, "p", 0, Math.floor(c * 28));
            for (d = 0; d < 3; d++) {
                l(b, "g", d, Math.floor(c * 7));
            }
            for (d = 0; d < 3; d++) {
                l(b, "d", d, Math.floor(c * 2));
            }
            for (d = 0; d < 3; d++) {
                l(b, "a", d, Math.floor(c * 1));
            }
            for (d = 0; d < 3; d++) {
                l(b, "m", d, Math.floor(c * 1));
            }
            l(b, "a", 0, Math.floor(c * 1));
            m(b);
        }
        function r(a, b) {
            return a >= 0 && b >= 0 && a < Px.Ⲇᐃⵠⵠⵠ && b < Px.ⵠⵠᐃⵠⵠ;
        }
        function d(b, c) {
            for (var d = 0; d < 6; d++) {
                l(b, "t", d, Math.floor(c * 20));
            }
            for (d = 0; d < 4; d++) {
                l(b, "b", d, Math.floor(c * 20));
            }
            for (d = 0; d < 3; d++) {
                l(b, "s", d, Math.floor(c * 20));
            }
            var e = [];
            a(b, e);
            q(b, e);
            e = [];
            l(b, "p", 0, Math.floor(c * 24));
            for (d = 0; d < 3; d++) {
                l(b, "g", d, Math.floor(c * 5));
            }
            if (Px.mode === 2) {
                for (d = 0; d < 3; d++) {
                    l(b, "d", d, Math.floor(c * 3));
                }
                for (d = 0; d < 3; d++) {
                    l(b, "a", d, Math.floor(c * 2));
                }
            }
            m(b);
        }
        function m(a) {
            var b = Px.Ⲇⵠⵠᐃᐃ[a];
            p(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
            p(3 + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
            p(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
            p(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
        }
        function o(a, b) {
            for (var c = 0; c < 3; c++) {
                l(a, "s", c, Math.floor(b * 12));
            }
            for (c = 0; c < 3; c++) {
                l(a, "m", c, Math.max(1, Math.floor(b * 1)), 0.2);
            }
            l(a, "c", 0, Math.floor(b * 36));
            var d = [];
            (function (b, c) {
                var d = Px.Ⲇⵠⵠᐃᐃ[b];
                var e = Math.floor(d.y1 / 100);
                var f = Math.floor(d.x1 / 100);
                var i = Math.floor(d.ⲆⲆⲆ / 100);
                var a = Math.floor(d.w / 100);
                var j = e + Math.floor(i / 2);
                var k = f + Math.floor(a / 2);
                for (var h = 0; h < 3; h++) {
                    p(m = Math.floor(j - 3 + Px.ⵠⲆⲆΔΔ.get() * 6), n = Math.floor(k - 3 + Px.ⵠⲆⲆΔΔ.get() * 6), "plm", h, 1);
                }
                for (h = 0; h < 80; h++) {
                    var m;
                    var n;
                    if (p(m = Math.floor(j - 3 + Px.ⵠⲆⲆΔΔ.get() * 6), n = Math.floor(k - 3 + Px.ⵠⲆⲆΔΔ.get() * 6), "wtb", 0, 1) === 1) {
                        c.push([m, n, 0]);
                    }
                }
            })(a, d);
            q(a, d);
            d = [];
        }
        function p(a, b, c, d, e) {
            if (a >= 0 && b >= 0 && a < Px.Ⲇᐃⵠⵠⵠ && Px.ⵠⵠᐃⵠⵠ > b) {
                ⲆⲆΔⲆ = Nx.ⲆⲆΔⲆ;
                if (ⲆⲆΔⲆ[a][b] === undefined) {
                    ⲆⲆΔⲆ[a][b] = {};
                }
                if (ⲆⲆΔⲆ[a][b][c] !== eq) {
                    return 0;
                } else {
                    ⲆⲆΔⲆ[a][b][c] = [];
                    ⲆⲆΔⲆ[a][b][c][d] = [{
                        x: b * 100 + 50,
                        y: a * 100 + 50
                    }];
                    if (e === 1) {
                        (function (a, b, c, d) {
                            hd.push([a, b, c, d]);
                        })(c, d, a, b);
                    }
                    return 1;
                }
            }
        }
        function s(a, b) {
            (function (b, c) {
                var d = Px.Ⲇⵠⵠᐃᐃ[c];
                for (var e = 0, f = 0; f < b && e < 10000; e++) {
                    var i = d.y1 + Px.ⵠⲆⲆΔΔ.get() * d.ⲆⲆⲆ;
                    var j = d.x1 + Px.ⵠⲆⲆΔΔ.get() * d.w;
                    var k = Math.floor(i / 100);
                    var m = Math.floor(j / 100);
                    if (Px.ⵠⵠΔⵠᐃ(c, m * 100 + 50, k * 100 + 50) >= 600) {
                        for (var q = 1, t = k - 4; q === 1 && t <= k + 4; t++) {
                            for (var v = m - 4; q === 1 && v <= m + 4; v++) {
                                if (gj !== Nx.ⲆⲆΔⲆ[t][v]) {
                                    q = 0;
                                }
                            }
                        }
                        if (q !== 0) {
                            p(k, m, "la", f % 6, 0);
                            f++;
                        }
                    }
                }
            })(b * 80, a);
            for (var c = 0; c < 3; c++) {
                l(a, "s", c, Math.floor(b * 12));
            }
            for (c = 0; c < 3; c++) {
                l(a, "g", c, Math.floor(b * 6));
            }
            for (c = 0; c < 3; c++) {
                l(a, "re", c, Math.max(1, Math.floor(b * 1)), 0.2);
            }
            for (c = 0; c < 3; c++) {
                l(a, "a", c, Math.max(1, Math.floor(b * 2)));
            }
            m(a);
        }
        function f(a, b, c) {
            if (a[b]) {
                for (Fk = 0; a[b].length > Fk; Fk++) {
                    if (a[b][Fk]) {
                        for (ᐃᐃⵠⲆ = 0; ᐃᐃⵠⲆ < a[b][Fk].length; ᐃᐃⵠⲆ++) {
                            a[b][Fk][ᐃᐃⵠⲆ].ᐃΔᐃ = c;
                            a[b][Fk][ᐃᐃⵠⲆ].Ⲇⵠᐃ = lq;
                            a[b][Fk][ᐃᐃⵠⲆ].time = 0;
                            a[b][Fk][ᐃᐃⵠⲆ].angle = 0;
                        }
                    }
                }
            }
        }
        this.mode = 0;
        this.ΔΔᐃᐃᐃΔᐃ = b;
        this.ⵠⵠΔΔΔ = 0;
        this.ΔᐃᐃᐃⵠᐃⲆ = 6;
        this.ⲆⲆⲆᐃ = [];
        this.Ⲇᐃⵠ = [];
        this.Ⲇᐃⵠ[0] = [];
        this.Ⲇᐃⵠ[100] = [];
        this.Ⲇᐃⵠ[80] = [];
        this.Ⲇᐃⵠ[60] = [];
        this.Ⲇᐃⵠ[67] = [];
        this.Ⲇᐃⵠ[70] = [];
        this.Ⲇᐃⵠ[77] = [];
        this.Ⲇᐃⵠ[71] = [];
        this.Ⲇᐃⵠ[72] = [];
        this.Ⲇᐃⵠ[73] = [];
        this.Ⲇᐃⵠ[74] = [];
        this.Ⲇᐃⵠ[65] = [];
        this.Ⲇᐃⵠ[66] = [];
        this.Ⲇᐃⵠ[62] = [];
        this.Ⲇᐃⵠ[88] = [];
        this.Ⲇᐃⵠ[91] = [];
        this.Ⲇᐃⵠ[90] = [];
        this.Ⲇᐃⵠ[63] = [];
        this.Ⲇᐃⵠ[78] = [];
        this.Ⲇᐃⵠ[64] = [];
        this.Ⲇᐃⵠ[69] = [];
        this.Ⲇᐃⵠ[68] = [];
        this.Ⲇᐃⵠ[79] = [];
        this.Ⲇᐃⵠ[89] = [];
        this.Ⲇᐃⵠ[83] = [];
        this.Ⲇᐃⵠ[84] = [];
        this.Ⲇᐃⵠ[85] = [];
        this.Ⲇᐃⵠ[81] = [];
        this.Ⲇᐃⵠ[82] = [];
        this.Ⲇᐃⵠ[86] = [];
        this.Ⲇᐃⵠ[34] = [];
        this.Ⲇᐃⵠ[36] = [];
        this.Ⲇᐃⵠ[61] = [];
        this.Ⲇᐃⵠ[2] = [];
        this.Ⲇᐃⵠ[1] = [];
        this.Ⲇᐃⵠ[6] = [];
        this.Ⲇᐃⵠ[3] = [];
        this.Ⲇᐃⵠ[5] = [];
        this.Ⲇᐃⵠ[12] = [];
        this.Ⲇᐃⵠ[13] = [];
        this.Ⲇᐃⵠ[14] = [];
        this.Ⲇᐃⵠ[20] = [];
        this.Ⲇᐃⵠ[52] = [];
        this.Ⲇᐃⵠ[4] = [];
        this.Ⲇᐃⵠ[7] = [];
        this.Ⲇᐃⵠ[8] = [];
        this.Ⲇᐃⵠ[9] = [];
        this.Ⲇᐃⵠ[19] = [];
        this.Ⲇᐃⵠ[50] = [];
        this.Ⲇᐃⵠ[41] = [];
        this.Ⲇᐃⵠ[10] = [];
        this.Ⲇᐃⵠ[15] = [];
        this.Ⲇᐃⵠ[16] = [];
        this.Ⲇᐃⵠ[17] = [];
        this.Ⲇᐃⵠ[21] = [];
        this.Ⲇᐃⵠ[51] = [];
        this.Ⲇᐃⵠ[45] = [];
        this.Ⲇᐃⵠ[46] = [];
        this.Ⲇᐃⵠ[47] = [];
        this.Ⲇᐃⵠ[48] = [];
        this.Ⲇᐃⵠ[49] = [];
        this.Ⲇᐃⵠ[53] = [];
        this.Ⲇᐃⵠ[18] = [];
        this.Ⲇᐃⵠ[29] = [];
        this.Ⲇᐃⵠ[56] = [];
        this.Ⲇᐃⵠ[11] = [];
        this.Ⲇᐃⵠ[22] = [];
        this.Ⲇᐃⵠ[23] = [];
        this.Ⲇᐃⵠ[30] = [];
        this.Ⲇᐃⵠ[38] = [];
        this.Ⲇᐃⵠ[33] = [];
        this.Ⲇᐃⵠ[31] = [];
        this.Ⲇᐃⵠ[55] = [];
        this.Ⲇᐃⵠ[37] = [];
        this.Ⲇᐃⵠ[43] = [];
        this.Ⲇᐃⵠ[44] = [];
        this.Ⲇᐃⵠ[54] = [];
        this.Ⲇᐃⵠ[39] = [];
        this.Ⲇᐃⵠ[40] = [];
        this.Ⲇᐃⵠ[32] = [];
        this.Ⲇᐃⵠ[24] = [];
        this.Ⲇᐃⵠ[25] = [];
        this.Ⲇᐃⵠ[26] = [];
        this.Ⲇᐃⵠ[27] = [];
        this.Ⲇᐃⵠ[28] = [];
        this.Ⲇᐃⵠ[35] = [];
        this.Ⲇᐃⵠ[87] = [];
        this.Ⲇᐃⵠ[42] = [];
        this.ⲆΔᐃⲆᐃ = [];
        this.ⵠⵠᐃⵠⵠ = 260;
        this.Ⲇᐃⵠⵠⵠ = 260;
        this.ΔᐃᐃΔΔⲆⵠ = 100;
        this.ΔΔⲆⵠᐃΔᐃ = 100;
        this.w = this.ΔᐃᐃΔΔⲆⵠ * this.ⵠⵠᐃⵠⵠ;
        this.ⲆⲆⲆ = this.ΔΔⲆⵠᐃΔᐃ * this.Ⲇᐃⵠⵠⵠ;
        this.ⵠⲆⲆΔΔ = new yk.ᐃⵠΔΔΔⲆΔ();
        this.Ⲇⵠⵠᐃᐃ = [];
        this.ⵠⵠⵠᐃ = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Pn, 0, 1, 0, 1, 1);
        this.transition = lq;
        this.ΔⲆᐃΔⵠ = [];
        this.ᐃΔᐃᐃⲆ = 0;
        this.ΔⲆⲆⲆᐃΔΔ = 1;
        this.ᐃⲆΔᐃⲆⵠⲆ = 2;
        this.ᐃᐃⲆⵠΔΔᐃ = 3;
        this.Δᐃⵠᐃᐃ = 4;
        this.ⵠΔⵠⵠⵠⵠⵠ = 10;
        this.ΔⲆᐃΔⵠ[this.ᐃΔᐃᐃⲆ] = {
            ⵠⵠΔⵠⲆⵠᐃ: 1,
            Ⲇⵠⵠ: [19, 58, 43],
            ᐃᐃⲆ: [4, 43, 48],
            ⵠᐃᐃΔⵠ: ["#133a2b", "#042b30"]
        };
        this.ΔⲆᐃΔⵠ[this.Δᐃⵠᐃᐃ] = {
            ⵠⵠΔⵠⲆⵠᐃ: 0,
            Ⲇⵠⵠ: [11, 106, 132],
            ᐃᐃⲆ: [9, 55, 63],
            ⵠᐃᐃΔⵠ: ["#0B6A84", "#09373F"]
        };
        this.ΔⲆᐃΔⵠ[this.ΔⲆⲆⲆᐃΔΔ] = {
            ⵠⵠΔⵠⲆⵠᐃ: 0,
            Ⲇⵠⵠ: [235, 242, 240],
            ᐃᐃⲆ: [19, 97, 103],
            ⵠᐃᐃΔⵠ: ["#EBF2F0", "#136167"]
        };
        this.ΔⲆᐃΔⵠ[this.ᐃⲆΔᐃⲆⵠⲆ] = {
            ᐃᐃⲆ: [3, 28, 30],
            ⵠⵠΔⵠⲆⵠᐃ: 0,
            ⵠᐃᐃΔⵠ: ["#2D2017", "#031C1E"],
            Ⲇⵠⵠ: [45, 32, 23]
        };
        this.ΔⲆᐃΔⵠ[this.ᐃᐃⲆⵠΔΔᐃ] = {
            ⵠᐃᐃΔⵠ: ["#4A4A4A", "#183D3C"],
            ᐃᐃⲆ: [24, 61, 60],
            Ⲇⵠⵠ: [74, 74, 74],
            ⵠⵠΔⵠⲆⵠᐃ: 0
        };
        this.ΔⲆᐃΔⵠ[this.ⵠΔⵠⵠⵠⵠⵠ] = {
            ⵠⵠΔⵠⲆⵠᐃ: 0,
            ⵠᐃᐃΔⵠ: ["#EBD8A6", "#093D38"],
            ᐃᐃⲆ: [9, 61, 56],
            Ⲇⵠⵠ: [235, 216, 166]
        };
        this.ⲆᐃᐃΔⵠᐃⵠ = function (b, c, d, e, f, g) {
            this.x1 = c * 100;
            this.y1 = d * 100;
            this.w = e * 100;
            this.ⲆⲆⲆ = f * 100;
            this.x2 = (c + e) * 100;
            this.y2 = (d + f) * 100;
            this.ᐃⲆᐃ = b;
            this.ΔᐃΔ = g === eq ? 15 : g;
        };
        this.Δᐃᐃᐃⵠ = -1000000;
        this.ⲆⲆᐃΔᐃ = this.Δᐃᐃᐃⵠ;
        this.ΔⵠΔⲆⵠ = this.Δᐃᐃᐃⵠ;
        this.ⲆΔⵠⵠΔ = this.Δᐃᐃᐃⵠ;
        this.ΔᐃΔΔᐃΔΔ = this.Δᐃᐃᐃⵠ;
        this.ΔΔᐃΔᐃᐃΔ = this.Δᐃᐃᐃⵠ;
        this.ⲆᐃᐃⵠⲆ = this.Δᐃᐃᐃⵠ;
        this.ΔⵠᐃⵠᐃⲆᐃⵠᐃ = function (b) {
            var c = b.r.x;
            var d = b.r.y;
            var e = Math.floor(d / 100);
            var f = Math.floor(c / 100);
            b.ⲆⲆᐃΔᐃ = Px.Δᐃᐃᐃⵠ;
            b.ΔⵠΔⲆⵠ = Px.Δᐃᐃᐃⵠ;
            b.ⲆΔⵠⵠΔ = Px.Δᐃᐃᐃⵠ;
            b.ΔᐃΔΔᐃΔΔ = Px.Δᐃᐃᐃⵠ;
            b.ⲆᐃᐃⵠⲆ = Px.Δᐃᐃᐃⵠ;
            b.ⲆᐃⵠⲆᐃⲆⲆ = Px.Δᐃᐃᐃⵠ;
            for (var g = 0; Px.Δᐃⵠᐃᐃ !== Px.Ⲇⵠⵠᐃᐃ[g].ᐃⲆᐃ; g++) {
                if (Px.ᐃΔᐃᐃⲆ === Px.Ⲇⵠⵠᐃᐃ[g].ᐃⲆᐃ) {
                    var h = Px.ⵠⵠΔⵠᐃ(g, c, d);
                    b.ΔᐃΔΔᐃΔΔ = Math.max(b.ΔᐃΔΔᐃΔΔ, h);
                    if (h > 0 && Px.ᐃⵠⵠᐃᐃΔΔⲆᐃ(g, c, d) === 1) {
                        b.ⲆᐃⵠⲆᐃⲆⲆ = 1;
                    }
                } else if (Px.Ⲇⵠⵠᐃᐃ[g].ᐃⲆᐃ === Px.ΔⲆⲆⲆᐃΔΔ) {
                    b.ⲆⲆᐃΔᐃ = Math.max(b.ⲆⲆᐃΔᐃ, Px.ⵠⵠΔⵠᐃ(g, c, d));
                } else if (Px.Ⲇⵠⵠᐃᐃ[g].ᐃⲆᐃ === Px.ⵠΔⵠⵠⵠⵠⵠ) {
                    b.ΔⵠΔⲆⵠ = Math.max(b.ΔⵠΔⲆⵠ, Px.ⵠⵠΔⵠᐃ(g, c, d));
                } else if (Px.ᐃⲆΔᐃⲆⵠⲆ === Px.Ⲇⵠⵠᐃᐃ[g].ᐃⲆᐃ) {
                    b.ⲆΔⵠⵠΔ = Math.max(b.ⲆΔⵠⵠΔ, Px.ⵠⵠΔⵠᐃ(g, c, d));
                } else if (Px.Ⲇⵠⵠᐃᐃ[g].ᐃⲆᐃ === Px.ᐃᐃⲆⵠΔΔᐃ) {
                    b.ⲆᐃᐃⵠⲆ = Math.max(b.ⲆᐃᐃⵠⲆ, Px.ⵠⵠΔⵠᐃ(g, c, d));
                }
            }
            if (Nx.ⲆⲆΔⲆ[e][f].iblk) {
                b.ⲆᐃⵠⲆᐃⲆⲆ = 1;
            }
            if (Px.ᐃᐃⲆⲆⲆΔⲆⲆΔ(f, e)) {
                b.ΔΔᐃΔᐃᐃΔ = b.Δᐃᐃᐃⵠ;
            } else if (Nx.ⲆⲆΔⲆ[e][f].wtb || b.ⲆⲆᐃΔᐃ < 0 && b.ⲆΔⵠⵠΔ < 0 && b.ΔᐃΔΔᐃΔΔ < 0 && b.ⲆᐃⵠⲆᐃⲆⲆ < 0 && b.ⲆᐃᐃⵠⲆ < 0 && b.ΔⵠΔⲆⵠ < 0) {
                b.ΔΔᐃΔᐃᐃΔ = 1;
            } else {
                b.ΔΔᐃΔᐃᐃΔ = b.Δᐃᐃᐃⵠ;
            }
        };
        this.ΔᐃⵠⵠⵠΔⵠᐃⲆ = function (a, b) {
            Px.ⲆⲆᐃΔᐃ = Px.Δᐃᐃᐃⵠ;
            Px.ΔⵠΔⲆⵠ = Px.Δᐃᐃᐃⵠ;
            Px.ⲆΔⵠⵠΔ = Px.Δᐃᐃᐃⵠ;
            Px.ⲆᐃᐃⵠⲆ = Px.Δᐃᐃᐃⵠ;
            Px.ΔᐃΔΔᐃΔΔ = Px.Δᐃᐃᐃⵠ;
            for (var c = 0; Px.Ⲇⵠⵠᐃᐃ[c].ᐃⲆᐃ !== Px.Δᐃⵠᐃᐃ; c++) {
                if (Px.Ⲇⵠⵠᐃᐃ[c].ᐃⲆᐃ === Px.ᐃΔᐃᐃⲆ) {
                    Px.ΔᐃΔΔᐃΔΔ = Math.max(Px.ΔᐃΔΔᐃΔΔ, Px.ⵠⵠΔⵠᐃ(c, a, b));
                } else if (Px.Ⲇⵠⵠᐃᐃ[c].ᐃⲆᐃ === Px.ΔⲆⲆⲆᐃΔΔ) {
                    Px.ⲆⲆᐃΔᐃ = Math.max(Px.ⲆⲆᐃΔᐃ, Px.ⵠⵠΔⵠᐃ(c, a, b));
                } else if (Px.ⵠΔⵠⵠⵠⵠⵠ === Px.Ⲇⵠⵠᐃᐃ[c].ᐃⲆᐃ) {
                    Px.ΔⵠΔⲆⵠ = Math.max(Px.ΔⵠΔⲆⵠ, Px.ⵠⵠΔⵠᐃ(c, a, b));
                } else if (Px.ᐃⲆΔᐃⲆⵠⲆ === Px.Ⲇⵠⵠᐃᐃ[c].ᐃⲆᐃ) {
                    Px.ⲆΔⵠⵠΔ = Math.max(Px.ⲆΔⵠⵠΔ, Px.ⵠⵠΔⵠᐃ(c, a, b));
                } else if (Px.ᐃᐃⲆⵠΔΔᐃ === Px.Ⲇⵠⵠᐃᐃ[c].ᐃⲆᐃ) {
                    Px.ⲆᐃᐃⵠⲆ = Math.max(Px.ⲆᐃᐃⵠⲆ, Px.ⵠⵠΔⵠᐃ(c, a, b));
                }
            }
            if (Px.ⲆⲆᐃΔᐃ < 0 && Px.ⲆᐃᐃⵠⲆ < 0 && Px.ΔᐃΔΔᐃΔΔ < 0 && Px.ⲆᐃᐃⵠⲆ < 0 && Px.ΔⵠΔⲆⵠ < 0) {
                Px.ΔΔᐃΔᐃᐃΔ = 1;
            } else {
                Px.ΔΔᐃΔᐃᐃΔ = Px.Δᐃᐃᐃⵠ;
            }
        };
        this.ᐃⵠⵠᐃᐃΔΔⲆᐃ = function (b, c, d) {
            var e = Px.Ⲇⵠⵠᐃᐃ[b];
            var f = 0;
            ⵠΔⲆⲆ = e.x1 + 30 + ((e.ΔᐃΔ & 4) === 0 ? 150 : 0);
            var g = c - ⵠΔⲆⲆ;
            if ((e.ΔᐃΔ & 4) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ΔᐃⲆΔ = e.y1 + 250 + (e.ΔᐃΔ & 1 ? 0 : 150);
            g = d - ΔᐃⲆΔ;
            if ((e.ΔᐃΔ & 1) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ΔᐃᐃⲆ = e.x2 + 80 + ((e.ΔᐃΔ & 8) === 0 ? -200 : 0);
            g = ΔᐃᐃⲆ - c;
            if ((e.ΔᐃΔ & 8) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ᐃⲆⲆᐃ = e.y2 - 200 + ((e.ΔᐃΔ & 2) === 0 ? -200 : 0);
            g = ᐃⲆⲆᐃ - d;
            if ((e.ΔᐃΔ & 2) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            if (ⵠΔⲆⲆ <= c && ΔᐃᐃⲆ >= c && d >= ΔᐃⲆΔ && ᐃⲆⲆᐃ >= d) {
                return f;
            } else {
                return 0;
            }
        };
        this.ⵠⵠΔⵠᐃ = function (a, b, c) {
            var d = Px.Ⲇⵠⵠᐃᐃ[a];
            ⵠΔⲆⲆ = d.x1 + 30;
            ΔᐃⲆΔ = d.y1 + 250;
            ΔᐃᐃⲆ = d.x2 + 80;
            ᐃⲆⲆᐃ = d.y2 - 200;
            if (b >= ⵠΔⲆⲆ && ΔᐃᐃⲆ >= b && c >= ΔᐃⲆΔ && c <= ᐃⲆⲆᐃ) {
                return Math.min(b - ⵠΔⲆⲆ, ΔᐃᐃⲆ - b, c - ΔᐃⲆΔ, ᐃⲆⲆᐃ - c);
            }
            var e = -1000000;
            if (b - ⵠΔⲆⲆ < 0) {
                e = Math.max(e, b - ⵠΔⲆⲆ);
            } else if (ΔᐃᐃⲆ - b < 0) {
                e = Math.max(e, ΔᐃᐃⲆ - b);
            }
            ⲆᐃΔⵠⲆΔⲆ = -1000000;
            if (c < ΔᐃⲆΔ || ᐃⲆⲆᐃ < c) {
                if (c - ΔᐃⲆΔ < 0) {
                    ⲆᐃΔⵠⲆΔⲆ = Math.max(ⲆᐃΔⵠⲆΔⲆ, c - ΔᐃⲆΔ);
                } else {
                    ⲆᐃΔⵠⲆΔⲆ = Math.max(ⲆᐃΔⵠⲆΔⲆ, ᐃⲆⲆᐃ - c);
                }
                e = e !== -1000000 && ⲆᐃΔⵠⲆΔⲆ !== -1000000 ? Math.min(e, ⲆᐃΔⵠⲆΔⲆ) : ⲆᐃΔⵠⲆΔⲆ;
            }
            return e;
        };
        this.ΔᐃΔᐃΔⵠᐃ = function (b, c, d) {
            var e = d;
            var f = c;
            p(e, f, "isl", b, 1);
            for (var g = 0; g < 4; g++) {
                for (var h = 0; h < 3; h++) {
                    p(e - h, f - g, "iblk", 0);
                    p(e + h, f - g, "iblk", 0);
                    p(e + h, f + g, "iblk", 0);
                    p(e - h, f + g, "iblk", 0);
                }
            }
            if (b === 0) {
                for (g = 0; g < 2; g++) {
                    p(e - g, f - 4, "iblk", 0);
                    p(e + g, f - 4, "iblk", 0);
                    p(e - g, f + 4, "iblk", 0);
                    p(e + g, f + 4, "iblk", 0);
                }
                for (g = 0; g < 3; g++) {
                    p(e - 3, f + g, "iblk", 0);
                    p(e + 3, f + g, "iblk", 0);
                    p(e - 3, f - g, "iblk", 0);
                    p(e + 3, f - g, "iblk", 0);
                }
                p(e - 2, f - 4, "iblk", 0);
                p(e - 3, f - 3, "iblk", 0);
                p(e + 2, f + 4, "iblk", 0);
                p(e + 3, f + 3, "iblk", 0);
            } else if (b === 1) {
                for (g = 0; g < 3; g++) {
                    p(e - g, f - 4, "iblk", 0);
                    p(e + g, f - 4, "iblk", 0);
                    p(e - g, f + 4, "iblk", 0);
                    p(e + g, f + 4, "iblk", 0);
                }
                for (g = 0; g < 4; g++) {
                    p(e - 3, f + g, "iblk", 0);
                    p(e + 3, f + g, "iblk", 0);
                    p(e - 3, f - g, "iblk", 0);
                    p(e + 3, f - g, "iblk", 0);
                }
            } else if (b === 2) {
                for (g = 0; g < 2; g++) {
                    p(e - g, f - 4, "iblk", 0);
                    p(e + g, f - 4, "iblk", 0);
                    p(e - g, f + 4, "iblk", 0);
                    p(e + g, f + 4, "iblk", 0);
                }
                for (g = 0; g < 3; g++) {
                    p(e - 3, f + g, "iblk", 0);
                    p(e + 3, f + g, "iblk", 0);
                    p(e - 3, f - g, "iblk", 0);
                    p(e + 3, f - g, "iblk", 0);
                }
            }
        };
        this.ᐃⵠΔΔⲆᐃⵠΔΔ = function (b) {
            for (var c = 0; c < Px.Ⲇⵠⵠᐃᐃ.length && b > 0; c++) {
                var d = Px.Ⲇⵠⵠᐃᐃ[c];
                if (d.ᐃⲆᐃ === Px.Δᐃⵠᐃᐃ && d.w > 1800 && d.ⲆⲆⲆ > 1000) {
                    var f = Math.floor((d.x1 + d.w / 2) / 100);
                    var g = Math.floor((d.y1 + d.ⲆⲆⲆ / 2) / 100);
                    Px.ΔᐃΔᐃΔⵠᐃ(b % 3, f, g);
                    for (var h = 0; h < 3; h++) {
                        var j = g - 2 + Math.floor(Px.ⵠⲆⲆΔΔ.get() * 4);
                        var k = f - 3 + Math.floor(Px.ⵠⲆⲆΔΔ.get() * 6);
                        if (Nx.ⲆⲆΔⲆ[j][k].s === undefined) {
                            p(j, k, "plm", h);
                        }
                        j = g - 2 + Math.floor(Px.ⵠⲆⲆΔΔ.get() * 4);
                        k = f - 3 + Math.floor(Px.ⵠⲆⲆΔΔ.get() * 6);
                        if (Nx.ⲆⲆΔⲆ[j][k].plm === undefined) {
                            p(j, k, "s", h);
                        }
                    }
                    j = g - 2 + Math.floor(Px.ⵠⲆⲆΔΔ.get() * 4);
                    k = f - 3 + Math.floor(Px.ⵠⲆⲆΔΔ.get() * 6);
                    if (Nx.ⲆⲆΔⲆ[j][k].plm === undefined && Nx.ⲆⲆΔⲆ[j][k].s === undefined) {
                        p(j, k, "p", 0, 1);
                    }
                    b--;
                }
            }
        };
        this.ⲆⲆⵠᐃΔΔⲆᐃᐃ = function (a) {
            Px.ⵠⲆⲆΔΔ.ᐃᐃⵠΔⵠ(a);
            var f = 0;
            while (true) {
                if (++f > 10000) {
                    return;
                }
                Px.Ⲇⵠⵠᐃᐃ = [];
                if (Px.ⵠⵠΔΔΔ === 0 && (Px.mode === 3 || Px.mode === 7 || Px.mode === 0)) {
                    Px.ⵠⵠΔΔΔ = Or;
                }
                if (Px.mode === 2) {
                    Px.Ⲇⵠⵠᐃᐃ.push(new Px.ⲆᐃᐃΔⵠᐃⵠ(Px.ᐃΔᐃᐃⲆ, 2, 2, 80, 80, 15));
                } else if (Px.mode === 4) {
                    Px.Ⲇⵠⵠᐃᐃ.push(new Px.ⲆᐃᐃΔⵠᐃⵠ(Px.ᐃΔᐃᐃⲆ, 2, 2, 150, 150, 15));
                } else if (Px.ⵠⵠΔΔΔ !== 0 && Px.ⵠⵠΔΔΔ.length > 0 && Px.ⵠⵠΔΔΔ[0].length > 3) {
                    for (var j = 0; j < Px.ⵠⵠΔΔΔ.length; j++) {
                        if ((E = Px.ⵠⵠΔΔΔ[j])[0] !== 0) {
                            break;
                        }
                        var k = Qw.ᐃΔᐃᐃⲆ;
                        switch (E[1]) {
                            case "FOREST":
                                k = Px.ᐃΔᐃᐃⲆ;
                                break;
                            case "WINTER":
                                k = Px.ΔⲆⲆⲆᐃΔΔ;
                                break;
                            case "DESERT":
                                k = Px.ⵠΔⵠⵠⵠⵠⵠ;
                                break;
                            case "LAVA":
                                k = Px.ᐃⲆΔᐃⲆⵠⲆ;
                                break;
                            case "DRAGON":
                                k = Px.ᐃᐃⲆⵠΔΔᐃ;
                        }
                        Px.Ⲇⵠⵠᐃᐃ.push(new Px.ⲆᐃᐃΔⵠᐃⵠ(k, E[2], E[3], E[4], E[5], E[6], E[7]));
                    }
                } else if (Px.ⵠⵠΔΔΔ !== 0) {
                    for (j = 0; j < Px.ⵠⵠΔΔΔ.length; j++) {
                        var l = Px.ⵠⵠΔΔΔ[j];
                        k = Qw.ᐃΔᐃᐃⲆ;
                        switch (l[0]) {
                            case "FOREST":
                                k = Px.ᐃΔᐃᐃⲆ;
                                break;
                            case "WINTER":
                                k = Px.ΔⲆⲆⲆᐃΔΔ;
                                break;
                            case "DESERT":
                                k = Px.ⵠΔⵠⵠⵠⵠⵠ;
                                break;
                            case "LAVA":
                                k = Px.ᐃⲆΔᐃⲆⵠⲆ;
                                break;
                            case "DRAGON":
                                k = Px.ᐃᐃⲆⵠΔΔᐃ;
                        }
                        if (e(k, l[1], l[2], 0, (j + 1) * 10) === 0) {
                            break;
                        }
                    }
                    if (Px.ⵠⵠΔΔΔ.length !== j) {
                        continue;
                    }
                }
                break;
            }
            ᐃⲆⵠΔΔⵠΔⲆᐃ();
            var m = [];
            for (var t = 0; t < Px.Ⲇᐃⵠⵠⵠ; t++) {
                m[t] = new Array(Px.ⵠⵠᐃⵠⵠ);
                for (var u = 0; u < Px.ⵠⵠᐃⵠⵠ; u++) {
                    m[t][u] = 0;
                }
            }
            for (t = 0; t < Px.Ⲇⵠⵠᐃᐃ.length; t++) {
                for (var x = (l = Px.Ⲇⵠⵠᐃᐃ[t]).x2 / 100, A = l.y2 / 100, B = l.x1 / 100; B <= x; B++) {
                    for (var C = l.y1 / 100; C <= A; C++) {
                        m[C][B] = 1;
                    }
                }
            }
            for (C = 0; Px.Ⲇᐃⵠⵠⵠ > C; C++) {
                for (B = 0; B < Px.ⵠⵠᐃⵠⵠ; B++) {
                    if (m[C][B] === 0) {
                        c(m, B, C);
                    }
                }
            }
            Nx = {
                w: Px.ⵠⵠᐃⵠⵠ,
                ⲆⲆⲆ: Px.Ⲇᐃⵠⵠⵠ,
                ⲆⲆΔⲆ: []
            };
            for (t = 0; t < Px.Ⲇᐃⵠⵠⵠ; t++) {
                Nx.ⲆⲆΔⲆ[t] = [];
            }
            if (Px.ⵠⵠΔΔΔ !== 0 && Px.ⵠⵠΔΔΔ.length > 0 && Px.ⵠⵠΔΔΔ[0].length > 3) {
                for (j = 0; Px.ⵠⵠΔΔΔ.length > j; j++) {
                    if ((E = Px.ⵠⵠΔΔΔ[j])[1] === "isl") {
                        Px.ΔᐃΔᐃΔⵠᐃ(E[2], E[3], E[4]);
                    }
                }
            } else {
                Px.ᐃⵠΔΔⲆᐃⵠΔΔ(Px.ΔᐃᐃᐃⵠᐃⲆ);
            }
            if (Px.ⵠⵠΔΔΔ !== 0 && Px.ⵠⵠΔΔΔ.length > 0 && Px.ⵠⵠΔΔΔ[0].length > 3) {
                var D = [];
                for (j = 0; Px.ⵠⵠΔΔΔ.length > j; j++) {
                    var E;
                    if ((E = Px.ⵠⵠΔΔΔ[j])[0] === 1) {
                        if (E[1] === "r") {
                            p(E[3], E[2], "wtb", 0, 1);
                            D.push([E[3], E[2], E[4]]);
                        } else {
                            p(E[4], E[3], E[1], E[2], E[5]);
                        }
                    }
                }
                q(0, D);
                D = [];
            } else {
                for (t = 0; t < Px.Ⲇⵠⵠᐃᐃ.length; t++) {
                    l = Px.Ⲇⵠⵠᐃᐃ[t];
                    if (Px.mode === 4) {
                        if (l.ᐃⲆᐃ === Px.ᐃΔᐃᐃⲆ) {
                            g(t, l.w / 10000);
                        }
                    } else {
                        if (Px.ᐃΔᐃᐃⲆ === l.ᐃⲆᐃ) {
                            d(t, l.w / 10000);
                        }
                        if (l.ᐃⲆᐃ === Px.ᐃⲆΔᐃⲆⵠⲆ) {
                            s(t, l.w / 10000);
                        }
                        if (Px.ΔⲆⲆⲆᐃΔΔ === l.ᐃⲆᐃ) {
                            i(t, l.w / 10000);
                        }
                        if (Px.ⵠΔⵠⵠⵠⵠⵠ === l.ᐃⲆᐃ) {
                            o(t, l.w / 10000);
                        }
                        if (Px.ᐃᐃⲆⵠΔΔᐃ === l.ᐃⲆᐃ) {
                            h(t);
                        }
                    }
                }
            }
            Ft("isl", 1);
            Ft("wtb", 20);
            Ft("la", 1);
            Ft("c", 1);
            Ft("s", 1);
            Ft("f", 1);
            Ft("p", 1);
            Ft("g", 1);
            Ft("d", 1);
            Ft("a", 1);
            Ft("re", 1);
            Ft("m", 1);
            hd = [];
            Px.ⵠⲆⵠⲆΔᐃⲆᐃΔ(Nx);
        };
        this.ⲆⲆᐃΔ = p;
        this.ⵠⲆⵠⲆΔᐃⲆᐃΔ = function (b) {
            for (var c = 0; c < this.Ⲇᐃⵠⵠⵠ; c++) {
                for (var d = 0; this.ⵠⵠᐃⵠⵠ > d; d++) {
                    if (!b.ⲆⲆΔⲆ[c]) {
                        b.ⲆⲆΔⲆ[c] = [];
                    }
                    if (b.ⲆⲆΔⲆ[c][d]) {
                        var e = b.ⲆⲆΔⲆ[c][d];
                        if (e.de && e.de.length > 0) {
                            for (var g = 0; e.de.length > g; g++) {
                                if (e.de[g] && e.de[g].length > 0) {
                                    e.de = e.de[g][0];
                                    if (g >= 41 && g <= 49) {
                                        e.de.scale = 3;
                                        var h = Math.floor(Math.random() * 3 + 1);
                                        e.de.ᐃⲆⵠ = [];
                                        for (var j = 0; h > j; j++) {
                                            e.de.ᐃⲆⵠ.push({
                                                x: Math.random() * 120 - 60,
                                                y: Math.random() * 120 - 60,
                                                angle: Math.random() * Math.PI * 2,
                                                ᐃᐃⲆΔ: 41 + Math.floor(Math.random() * 9)
                                            });
                                        }
                                    } else if (g >= 19 && g <= 26) {
                                        e.de.scale = 3;
                                        h = Math.floor(Math.random() * 3 + 1);
                                        e.de.ᐃⲆⵠ = [];
                                        for (j = 0; j < h; j++) {
                                            e.de.ᐃⲆⵠ.push({
                                                x: Math.random() * 120 - 60,
                                                y: Math.random() * 120 - 60,
                                                angle: Math.random() * Math.PI * 2,
                                                ᐃᐃⲆΔ: 19 + Math.floor(Math.random() * 8)
                                            });
                                        }
                                    } else if (g <= 15 || g >= 27 && g <= 40) {
                                        e.de.angle = 0;
                                        e.de.scale = 2;
                                        e.de.ᐃᐃⲆΔ = g;
                                    } else {
                                        e.de.angle = Math.random() * Math.PI * 2;
                                        e.de.scale = 1;
                                        e.de.ᐃᐃⲆΔ = g;
                                    }
                                }
                            }
                        }
                        f(e, "p", new ⵠᐃⵠ.ⵠᐃⵠⲆ(Ih, 1, 1, 0, 10, 10));
                        f(e, "t", new ⵠᐃⵠ.ⵠᐃⵠⲆ(Oo, 1, 1, 0, 10, 10));
                        f(e, "s", new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10));
                        f(e, "g", new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10));
                        f(e, "d", new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10));
                        f(e, "b", new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10));
                        f(e, "f", new ⵠᐃⵠ.ⵠᐃⵠⲆ(w, 1, 1, 0, 10, 10));
                        f(e, "sw", new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10));
                        f(e, "gw", new ⵠᐃⵠ.ⵠᐃⵠⲆ(th, 1, 1, 0, 10, 10));
                        f(e, "dw", new ⵠᐃⵠ.ⵠᐃⵠⲆ(Ok, 1, 1, 0, 10, 10));
                        f(e, "a", new ⵠᐃⵠ.ⵠᐃⵠⲆ(Pn, 1, 1, 0, 10, 10));
                        f(e, "cs", new ⵠᐃⵠ.ⵠᐃⵠⲆ(tk, 1, 1, 0, 10, 10));
                        f(e, "plm", new ⵠᐃⵠ.ⵠᐃⵠⲆ(kg, 1, 1, 0, 10, 10));
                        f(e, "re", new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10));
                        f(e, "c", new ⵠᐃⵠ.ⵠᐃⵠⲆ(th, 1, 1, 0, 10, 10));
                        f(e, "m", new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1, 0, 10, 10));
                    } else {
                        b.ⲆⲆΔⲆ[c][d] = [];
                    }
                }
            }
        };
        this.time = Wr.ⵠΔⵠ;
        this.ΔᐃΔᐃΔ = {
            translate: {
                y: 0,
                x: 0
            },
            ᐃᐃⵠΔⵠ: 0,
            now: 0,
            ᐃᐃΔΔⲆ: 0
        };
        this.ⵠⵠᐃᐃⵠᐃᐃⵠⵠ = function () {
            this.ⲆΔᐃⲆᐃ = [];
            this.Ⲇᐃⵠ[0] = [];
            this.Ⲇᐃⵠ[2] = [];
            this.Ⲇᐃⵠ[1] = [];
            this.Ⲇᐃⵠ[6] = [];
            this.Ⲇᐃⵠ[3] = [];
            this.Ⲇᐃⵠ[5] = [];
            this.Ⲇᐃⵠ[12] = [];
            this.Ⲇᐃⵠ[13] = [];
            this.Ⲇᐃⵠ[14] = [];
            this.Ⲇᐃⵠ[20] = [];
            this.Ⲇᐃⵠ[52] = [];
            this.Ⲇᐃⵠ[30] = [];
            this.Ⲇᐃⵠ[56] = [];
            this.Ⲇᐃⵠ[38] = [];
            this.Ⲇᐃⵠ[33] = [];
            this.Ⲇᐃⵠ[31] = [];
            this.Ⲇᐃⵠ[55] = [];
            this.Ⲇᐃⵠ[37] = [];
            this.Ⲇᐃⵠ[43] = [];
            this.Ⲇᐃⵠ[44] = [];
            this.Ⲇᐃⵠ[54] = [];
            this.Ⲇᐃⵠ[39] = [];
            this.Ⲇᐃⵠ[40] = [];
            this.Ⲇᐃⵠ[32] = [];
            this.Ⲇᐃⵠ[24] = [];
            this.Ⲇᐃⵠ[25] = [];
            this.Ⲇᐃⵠ[26] = [];
            this.Ⲇᐃⵠ[27] = [];
            this.Ⲇᐃⵠ[28] = [];
            this.Ⲇᐃⵠ[35] = [];
            this.Ⲇᐃⵠ[4] = [];
            this.Ⲇᐃⵠ[7] = [];
            this.Ⲇᐃⵠ[8] = [];
            this.Ⲇᐃⵠ[9] = [];
            this.Ⲇᐃⵠ[19] = [];
            this.Ⲇᐃⵠ[50] = [];
            this.Ⲇᐃⵠ[41] = [];
            this.Ⲇᐃⵠ[10] = [];
            this.Ⲇᐃⵠ[15] = [];
            this.Ⲇᐃⵠ[16] = [];
            this.Ⲇᐃⵠ[17] = [];
            this.Ⲇᐃⵠ[21] = [];
            this.Ⲇᐃⵠ[51] = [];
            this.Ⲇᐃⵠ[45] = [];
            this.Ⲇᐃⵠ[46] = [];
            this.Ⲇᐃⵠ[47] = [];
            this.Ⲇᐃⵠ[48] = [];
            this.Ⲇᐃⵠ[49] = [];
            this.Ⲇᐃⵠ[53] = [];
            this.Ⲇᐃⵠ[18] = [];
            this.Ⲇᐃⵠ[29] = [];
            this.Ⲇᐃⵠ[56] = [];
            this.Ⲇᐃⵠ[11] = [];
            this.Ⲇᐃⵠ[22] = [];
            this.Ⲇᐃⵠ[23] = [];
            this.Ⲇᐃⵠ[100] = [];
            this.Ⲇᐃⵠ[80] = [];
            this.Ⲇᐃⵠ[60] = [];
            this.Ⲇᐃⵠ[67] = [];
            this.Ⲇᐃⵠ[70] = [];
            this.Ⲇᐃⵠ[77] = [];
            this.Ⲇᐃⵠ[71] = [];
            this.Ⲇᐃⵠ[72] = [];
            this.Ⲇᐃⵠ[73] = [];
            this.Ⲇᐃⵠ[74] = [];
            this.Ⲇᐃⵠ[65] = [];
            this.Ⲇᐃⵠ[66] = [];
            this.Ⲇᐃⵠ[62] = [];
            this.Ⲇᐃⵠ[88] = [];
            this.Ⲇᐃⵠ[91] = [];
            this.Ⲇᐃⵠ[90] = [];
            this.Ⲇᐃⵠ[63] = [];
            this.Ⲇᐃⵠ[78] = [];
            this.Ⲇᐃⵠ[75] = [];
            this.Ⲇᐃⵠ[76] = [];
            this.Ⲇᐃⵠ[64] = [];
            this.Ⲇᐃⵠ[69] = [];
            this.Ⲇᐃⵠ[68] = [];
            this.Ⲇᐃⵠ[79] = [];
            this.Ⲇᐃⵠ[89] = [];
            this.Ⲇᐃⵠ[83] = [];
            this.Ⲇᐃⵠ[84] = [];
            this.Ⲇᐃⵠ[85] = [];
            this.Ⲇᐃⵠ[81] = [];
            this.Ⲇᐃⵠ[82] = [];
            this.Ⲇᐃⵠ[86] = [];
            this.Ⲇᐃⵠ[34] = [];
            this.Ⲇᐃⵠ[36] = [];
            this.Ⲇᐃⵠ[61] = [];
            this.Ⲇᐃⵠ[87] = [];
            this.Ⲇᐃⵠ[42] = [];
        };
        this.ΔⵠⵠⲆⵠᐃΔⲆΔ = function (a) {
            if (this.ⲆΔᐃⲆᐃ[a]) {
                ΔΔⵠⲆ = this.ⲆΔᐃⲆᐃ[a].type;
                this.ⲆΔᐃⲆᐃ[a] = null;
                for (var b = this.Ⲇᐃⵠ[ΔΔⵠⲆ], c = 0; b.length > c; c++) {
                    if (a == b[c].ΔΔⵠΔ) {
                        b.splice(c, 1);
                        return;
                    }
                }
            }
        };
        this.ⲆⲆΔⵠᐃⵠⵠΔᐃ = function (a, b) {
            for (var c = 0; c < this.Ⲇᐃⵠ[56].length; c++) {
                var d = this.Ⲇᐃⵠ[56][c];
                if (b === Math.floor(d.x / 100) && Math.floor(d.y / 100) === a) {
                    return 1;
                }
            }
            return 0;
        };
        this.ᐃᐃⲆⲆⲆΔⲆⲆΔ = function (a, b) {
            for (var c = 0; c < this.Ⲇᐃⵠ[30].length; c++) {
                var d = this.Ⲇᐃⵠ[30][c];
                if (Math.floor(d.x / 100) == a && Math.floor(d.y / 100) == b) {
                    return true;
                }
            }
            return false;
        };
        this.ᐃΔᐃⵠΔ = function (j) {
            for (var e = 0; j.length > e; e++) {
                ⲆⲆΔⵠ = j[e];
                if (ⲆⲆΔⵠ.angle != ⲆⲆΔⵠ.ⵠΔΔᐃⵠⲆⵠ) {
                    var q = Math.PI * 2;
                    ⲆⲆΔⵠ.angle = (ⲆⲆΔⵠ.angle + q) % q;
                    ⲆⲆΔⵠ.ⵠΔΔᐃⵠⲆⵠ = (ⲆⲆΔⵠ.ⵠΔΔᐃⵠⲆⵠ + q) % q;
                    if (ⲆⲆΔⵠ.ⵠΔΔᐃⵠⲆⵠ != ⲆⲆΔⵠ.angle) {
                        var B = ⲆⲆΔⵠ.ⵠΔΔᐃⵠⲆⵠ - ⲆⲆΔⵠ.angle;
                        var D = Math.abs(B);
                        if (Math.PI < D) {
                            D = Math.PI * 2 - D;
                        }
                        var E = D / Math.PI * 3 * 10 * Xx;
                        if (Math.PI < B) {
                            ⲆⲆΔⵠ.angle -= E;
                        } else if (B < -Math.PI) {
                            ⲆⲆΔⵠ.angle += E;
                        } else if (B < 0) {
                            ⲆⲆΔⵠ.angle -= E;
                        } else {
                            ⲆⲆΔⵠ.angle += E;
                        }
                        ⲆⲆΔⵠ.angle = (ⲆⲆΔⵠ.angle + q) % q;
                        if (Math.abs(ⲆⲆΔⵠ.angle - ⲆⲆΔⵠ.ⵠΔΔᐃⵠⲆⵠ) < E) {
                            ⲆⲆΔⵠ.angle = ⲆⲆΔⵠ.ⵠΔΔᐃⵠⲆⵠ;
                        }
                    }
                }
                Math.floor(ⲆⲆΔⵠ.r.y / 100);
                Math.floor(ⲆⲆΔⵠ.r.x / 100);
                if (ⲆⲆΔⵠ.r.x != ⲆⲆΔⵠ.x || ⲆⲆΔⵠ.y != ⲆⲆΔⵠ.r.y) {
                    if (ⲆⲆΔⵠ.action & 64) {
                        ⲆⲆΔⵠ.action -= 64;
                    }
                    ⲆⲆΔⵠ.action |= 32;
                    var F = ⵠᐃⵠ.ⲆΔⲆⲆΔΔⲆ(ⲆⲆΔⵠ, ⲆⲆΔⵠ.r) + Math.PI;
                    var G = ⲆⲆΔⵠ.ΔᐃⲆΔⲆ * Xx;
                    var H = ⵠᐃⵠ.ᐃΔᐃⵠⵠᐃⲆ(G, F);
                    if (ⵠᐃⵠ.ᐃΔⵠⵠᐃⲆΔ(H) < ⵠᐃⵠ.ᐃΔⵠⵠᐃⲆΔ(ⵠᐃⵠ.ⲆᐃΔᐃΔΔᐃ(ⲆⲆΔⵠ, ⲆⲆΔⵠ.r))) {
                        ⵠᐃⵠ.ⵠⵠⵠΔⲆΔⵠ(ⲆⲆΔⵠ, H);
                    } else {
                        if (ⲆⲆΔⵠ.action & 32) {
                            ⲆⲆΔⵠ.action -= 32;
                        }
                        ⲆⲆΔⵠ.action |= 64;
                        ⵠᐃⵠ.ⵠΔΔΔⲆΔΔ(ⲆⲆΔⵠ.r, ⲆⲆΔⵠ);
                    }
                }
                if (ⲆⲆΔⵠ.ⲆⵠΔⵠⲆ) {
                    var I = ⲆⲆΔⵠ.bubbles;
                    if ((M = I.length) === 0 || M < Wr.ⲆⲆᐃⵠΔⵠᐃ && I[M - 1].ΔⲆⲆΔΔ < 0.95) {
                        I.push({
                            id: Math.floor(Math.random() * ⵠΔ[540][0].length),
                            x: Math.floor(ⲆⲆΔⵠ.x + Math.random() * 80 - 40),
                            y: Math.floor(ⲆⲆΔⵠ.y + Math.random() * 80 - 40),
                            ΔⲆⲆΔΔ: 1
                        });
                    }
                    for (var J = 0; M > J; J++) {
                        I[J].ΔⲆⲆΔΔ = Math.max(0, I[J].ΔⲆⲆΔΔ - Xx);
                    }
                    for (J = 0; M > J; J++) {
                        if (I[J].ΔⲆⲆΔΔ === 0) {
                            I.splice(J, 1);
                            break;
                        }
                    }
                }
                var K = 0;
                if (ⲆⲆΔⵠ.ΔⲆᐃⲆ && Mx.Δⵠⵠᐃᐃ) {
                    var L = ⲆⲆΔⵠ.ⲆᐃⵠΔⵠ;
                    var M = L.length;
                    if (ⲆⲆΔⵠ.ΔΔᐃΔᐃᐃΔ > 0 && ⲆⲆΔⵠ.ⵠᐃⲆⲆΔ !== 227 && ⲆⲆΔⵠ.ⵠᐃⲆⲆΔ !== 228 && ⲆⲆΔⵠ.ⵠᐃⲆⲆΔ !== 230 && ⲆⲆΔⵠ.ⵠᐃⲆⲆΔ !== 229 && ⲆⲆΔⵠ.ⵠᐃⲆⲆΔ !== 91 && !ⲆⲆΔⵠ.ⲆⵠΔⵠⲆ && (K = 1, M === 0 || Wr.ᐃⲆⲆⲆⵠⵠⲆ < ⵠᐃⵠ.ᐃⵠᐃⵠ(L[M - 1], ⲆⲆΔⵠ))) {
                        var N = -ⲆⲆΔⵠ.angle;
                        var O = xo * (Math.cos(N) * 45);
                        var Q = xo * (Math.sin(N) * 45);
                        L.push({
                            x: ⲆⲆΔⵠ.x + O,
                            y: ⲆⲆΔⵠ.y + Q,
                            r: 8,
                            alpha: 0.8
                        });
                        L.push({
                            x: ⲆⲆΔⵠ.x - O,
                            y: ⲆⲆΔⵠ.y - Q,
                            r: 8,
                            alpha: 0.8
                        });
                        L.push({
                            x: ⲆⲆΔⵠ.x,
                            y: ⲆⲆΔⵠ.y,
                            r: 24,
                            alpha: 1
                        });
                    }
                    for (J = 0; M > J; J++) {
                        L[J].alpha = Math.max(0, L[J].alpha - Xx / 2.2);
                        L[J].r += Xx * 20;
                    }
                    if (L.length > 0 && L[0].alpha === 0) {
                        L.splice(0, 1);
                    }
                    var R = ⲆⲆΔⵠ.ⲆⲆⲆᐃⲆ;
                    M = R.length;
                    var S = -1;
                    var U = Math.max(0, Math.sign(ⲆⲆΔⵠ.ⲆᐃⵠⲆᐃⲆⲆ));
                    var V = Math.max(0, Math.sign(ⲆⲆΔⵠ.ⲆⲆᐃΔᐃ));
                    Math.max(0, Math.sign(ⲆⲆΔⵠ.ΔⵠΔⲆⵠ));
                    var W = Math.max(0, Math.sign(ⲆⲆΔⵠ.ⲆΔⵠⵠΔ));
                    var X = Math.max(0, Math.sign(ⲆⲆΔⵠ.ⲆᐃᐃⵠⲆ));
                    if (ⲆⲆΔⵠ.ⲆᐃⵠⲆᐃⲆⲆ > 0 || ⲆⲆΔⵠ.ΔⵠΔⲆⵠ > 0) {
                        S = 602;
                    } else if (ⲆⲆΔⵠ.ⲆᐃᐃⵠⲆ > 0) {
                        S = 680;
                    } else if (ⲆⲆΔⵠ.ⲆⲆᐃΔᐃ > 0) {
                        S = 475;
                    } else if (ⲆⲆΔⵠ.ⲆΔⵠⵠΔ > 0) {
                        S = 476;
                    }
                    if (ⲆⲆΔⵠ.ⵠᐃⲆⲆΔ === 225 && (U | V | W | X) == 1) {
                        S = 228;
                        var Y = ⲆⲆΔⵠ.ⵠⵠⲆⵠⲆ - Math.PI / 2;
                        var Z = 15;
                        var _ = 11;
                        var aa = Wr.ΔᐃⲆⵠᐃⲆΔ;
                    } else if (ⲆⲆΔⵠ.ⵠᐃⲆⲆΔ === 239 && (U | V | W | X) == 1) {
                        S = 249;
                        Y = ⲆⲆΔⵠ.ⵠⵠⲆⵠⲆ - Math.PI / 2;
                        Z = 21;
                        _ = 16;
                        aa = Wr.ΔᐃⲆⵠᐃⲆΔ;
                    } else if (ⲆⲆΔⵠ.ⵠᐃⲆⲆΔ === 226 && (U | V | W | X) == 1) {
                        S = 234;
                        Y = ⲆⲆΔⵠ.ⵠⵠⲆⵠⲆ - Math.PI / 2;
                        var ba = Math.random() * 50;
                        Z = 10 + ba;
                        _ = 0 + ba;
                        aa = Wr.ΔᐃⲆⵠᐃⲆΔ * 0.9;
                    } else {
                        Y = ⲆⲆΔⵠ.angle;
                        Z = 15;
                        _ = 11;
                        aa = Wr.ΔᐃⲆⵠᐃⲆΔ;
                    }
                    if (ⲆⲆΔⵠ.ⵠᐃⲆⲆΔ === 227 || ⲆⲆΔⵠ.ⵠᐃⲆⲆΔ === 228 || ⲆⲆΔⵠ.ⵠᐃⲆⲆΔ === 91 || ⲆⲆΔⵠ.ⵠᐃⲆⲆΔ === 229 || ⲆⲆΔⵠ.ⵠᐃⲆⲆΔ === 230 || ⲆⲆΔⵠ.ⲆⵠΔⵠⲆ); else if (ⲆⲆΔⵠ.ⵠᐃⲆⲆΔ === 224) {
                        if (M === 0 || ⵠᐃⵠ.ᐃⵠᐃⵠ(R[M - 1], ⲆⲆΔⵠ) > Wr.ΔΔΔⲆᐃᐃᐃ) {
                            R.push({
                                x: ⲆⲆΔⵠ.x,
                                y: ⲆⲆΔⵠ.y,
                                angle: ⲆⲆΔⵠ.ⵠⵠⲆⵠⲆ,
                                alpha: 1,
                                id: 226
                            });
                        }
                    } else if (S != -1 && K === 0 && (M === 0 || ⵠᐃⵠ.ᐃⵠᐃⵠ(R[M - 1], ⲆⲆΔⵠ) > aa)) {
                        ⲆⲆΔⵠ.ⵠᐃΔᐃⲆᐃⵠ++;
                        if (Math.abs(ⲆⲆΔⵠ.x - ⲆⲆΔⵠ.r.x) > 1 && Math.abs(ⲆⲆΔⵠ.y - ⲆⲆΔⵠ.r.y) > 1) {
                            if (ⲆⲆΔⵠ.x < ⲆⲆΔⵠ.r.x && ⲆⲆΔⵠ.r.y < ⲆⲆΔⵠ.y || ⲆⲆΔⵠ.r.x < ⲆⲆΔⵠ.x && ⲆⲆΔⵠ.y < ⲆⲆΔⵠ.r.y) {
                                if (ⲆⲆΔⵠ.ⵠᐃΔᐃⲆᐃⵠ % 2) {
                                    O = -_ * xo;
                                    Q = xo * -_;
                                } else {
                                    Q = xo * _;
                                    O = _ * xo;
                                }
                            } else if (ⲆⲆΔⵠ.ⵠᐃΔᐃⲆᐃⵠ % 2) {
                                O = xo * _;
                                Q = -_ * xo;
                            } else {
                                Q = _ * xo;
                                O = -_ * xo;
                            }
                        } else if (ⲆⲆΔⵠ.ⵠᐃΔᐃⲆᐃⵠ % 2) {
                            O = Z * Math.cos(Y) * xo;
                            Q = xo * (Math.sin(Y) * Z);
                        } else {
                            O = -Math.cos(Y) * Z * xo;
                            Q = -Math.sin(Y) * Z * xo;
                        }
                        R.push({
                            x: ⲆⲆΔⵠ.x + O,
                            y: ⲆⲆΔⵠ.y + Q,
                            angle: Y + Math.PI / 2,
                            alpha: 1,
                            id: S
                        });
                    }
                    for (J = 0; M > J; J++) {
                        if (R[J].id === 226) {
                            R[J].alpha = Math.max(0, R[J].alpha - Xx * 1.5);
                        } else {
                            R[J].alpha = Math.max(0, R[J].alpha - Xx / 2.85);
                        }
                    }
                    if (R.length > 0 && R[0].alpha === 0) {
                        R.splice(0, 1);
                    }
                }
            }
        };
        this.Ⲇⵠᐃ = function () {
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[0]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[80]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[60]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[67]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[70]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[77]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[71]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[72]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[73]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[74]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[61]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[62]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[88]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[91]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[90]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[63]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[78]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[75]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[76]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[64]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[68]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[65]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[66]);
            this.ᐃΔᐃⵠΔ(this.Ⲇᐃⵠ[69]);
        };
        this.ⲆΔᐃⲆ = [];
        this.ⲆΔᐃⲆ[620] = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1.05, 1, 0.008, 0.008);
        this.ⲆΔᐃⲆ[619] = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1.08, 1, 0.006, 0.006);
        this.ⲆΔᐃⲆ[694] = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Oo, 1, 1.02, 1, 0.008, 0.008);
        this.ⲆΔᐃⲆ[695] = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 1, 1.08, 1, 0.006, 0.006);
        this.ΔΔΔᐃⲆ = [];
        this.ΔΔΔᐃⲆ[0] = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Oo, 0.1, 1, 0, 0.6, 0.6);
        this.ΔΔΔᐃⲆ[1] = new ⵠᐃⵠ.ⵠᐃⵠⲆ(ds, 0.4, 1, 0, 0.6, 0.6);
        this.ΔΔΔᐃⲆ[2] = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Ml, 0.3, 1, 0, 0.6, 0.6);
        this.ΔΔΔᐃⲆ[3] = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.8, 1, 0, 0.6, 0.6);
        this.ΔΔΔᐃⲆ[4] = new ⵠᐃⵠ.ⵠᐃⵠⲆ(w, 0.3, 1, 0, 0.6, 0.6);
        this.ΔΔΔᐃⲆ[5] = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Ok, 0.8, 1, 0, 0.6, 0.6);
        this.ΔΔΔᐃⲆ[6] = new ⵠᐃⵠ.ⵠᐃⵠⲆ(pg, 0.5, 1, 0, 0.6, 0.6);
        this.ΔΔΔᐃⲆ[7] = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Oo, 0.9, 1, 0, 0.6, 0.6);
        this.ΔΔΔᐃⲆ[8] = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Tq, 0.6, 1, 0, 0.6, 0.6);
        this.ΔΔΔᐃⲆ[9] = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.2, 1, 0, 0.6, 0.6);
        this.ΔΔΔᐃⲆ[10] = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0.6, 1, 0, 0.6, 0.6);
        this.ΔΔΔᐃⲆ[11] = new ⵠᐃⵠ.ⵠᐃⵠⲆ(pg, 0.4, 1, 0, 0.6, 0.6);
        this.ΔΔΔᐃⲆ[12] = new ⵠᐃⵠ.ⵠᐃⵠⲆ(pg, 0.8, 1, 0, 0.6, 0.6);
        this.ΔΔΔᐃⲆ[13] = new ⵠᐃⵠ.ⵠᐃⵠⲆ(ds, 0.2, 1, 0, 0.6, 0.6);
        this.ΔΔΔᐃⲆ[14] = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Ml, 0.7, 1, 0, 0.6, 0.6);
    }
    function Yw(a, b, c, d) {
        hi(sb, a, b, c, d);
        return ((180 + (Mb(gb[0], gb[1]) ^ function (b, c, d, e, f, g) {
            Zj(sb, b, c, d, e, f, g);
            const a = nb(gb[0], gb[1], gb[2], gb[3]);
            const h = Tb(gb[4], gb[5], gb[0]);
            return (0 << ((a ^ h) >> 24 & 255)) + (16 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) & 255)) + (8 << ((a ^ h) >> 16 & 255));
        }(gb[2], gb[3], gb[0], gb[1], gb[2], gb[3]))) * 16807 + 0) % 2147483647;
    }
    function Zw(b, c) {
        const d = ((31761 + b) * 22695477 + 1) % 4294967296;
        const e = (24 << (c >> 16 & 255)) + (8 << (c >> 24 & 255)) + (0 << (c >> 8 & 255)) + (16 << (c & 255));
        const f = px(d, e, d, e);
        const g = function (b, c, d) {
            const e = ~(b & 50882) & b | ~(b & 50882) & 50882;
            const f = (c | 31915) & ~(c & 31915);
            const g = (2147483587 + (37258 + d) * 2147483629) % 2147483647;
            return (54367 + (it(e, f, g, e, f) ^ Hb(g, e, f, g))) % 65492;
        }(d, e, d);
        return (8 << ((f ^ g) >> 16 & 255)) + (24 << ((f ^ g) & 255)) + (16 << ((f ^ g) >> 24 & 255)) + (0 << ((f ^ g) >> 8 & 255));
    }
    function $w() {
        this.ΔⵠⲆⵠⲆ = "";
        this.ᐃΔⲆⲆ = 0;
        this.ⵠᐃⲆⵠΔ = 0;
        this.ⵠᐃΔⲆⲆ = 0;
        this.ΔΔΔΔⲆᐃΔ = 0;
        this.ⲆⵠⵠⲆⲆ = 0;
        this.ⵠⵠΔⲆⵠ = 0;
        this.ⲆᐃΔⵠⲆ = 0;
        this.level = 0;
        this.label = null;
        this.ᐃⵠΔᐃΔⲆⵠ = null;
        this.ᐃΔⲆⲆΔᐃⲆ = null;
        this.ⵠΔΔᐃⲆ = false;
        this.ᐃⵠΔⵠΔ = 0;
    }
    ⲆⲆⵠΔⵠⵠΔⵠⵠ = 1;
    function _w(a) {
        if (a > 0) {
            return a * a;
        } else {
            return a;
        }
    }
    function ax(a) {
        return hc.String.fromCharCode(a);
    }
    function bx() {
        Math.random();
        return "a";
    }
    function cx() {
        Math.random();
        return "g";
    }
    function dx() {
        Math.random();
        return "o";
    }
    function ex(a) {
        const b = function () {
            hc.addEventListener("mousemove", function () {
                b();
            });
        };
        b();
    }
    function fx() {
        Math.random();
        return "p";
    }
    function gx() {
        Math.random();
        return "n";
    }
    function hx() {
        Math.random();
        return "d";
    }
    function bx() {
        Math.random();
        return "a";
    }
    function ix() {
        Math.random();
        return "t";
    }
    function dx() {
        Math.random();
        return "o";
    }
    function ix() {
        Math.random();
        return "t";
    }
    function jx() {
        Math.random();
        return "r";
    }
    function kx() {
        Math.random();
        return "s";
    }
    function lx() {
        Math.random();
        return "e";
    }
    function mx() {
        this.ᐃᐃⵠΔⵠ = function () { };
        this.ⲆⵠΔᐃⵠ = {
            open: Lj,
            ⵠΔᐃⵠ: 1,
            ΔⲆΔΔⲆ: 1
        };
        this.ΔᐃⲆᐃᐃ = {
            open: false,
            ⵠΔᐃⵠ: 1,
            ΔⲆΔΔⲆ: -1
        };
        this.ⲆᐃⲆⵠ = {
            ⵠⵠⲆᐃΔⲆΔ: 0,
            ⲆⲆⲆΔΔⲆⲆ: 0,
            ⵠΔᐃⵠ: 1,
            ΔⲆΔΔⲆ: -1,
            open: false
        };
        this.ⵠⲆᐃⲆ = {
            ᐃⵠⲆⵠΔΔⵠ: 0,
            ⲆⵠᐃᐃⵠΔᐃ: 0,
            type: 0,
            ΔⲆᐃⵠᐃⵠⵠ: 0,
            ⵠΔᐃⵠ: 1,
            ΔⲆΔΔⲆ: -1,
            open: false
        };
        this.ΔΔΔΔ = {
            ᐃⵠⲆⵠΔΔⵠ: 0,
            ᐃⵠⲆΔⲆⵠⲆ: 0,
            ⲆⲆⲆΔΔⲆⲆ: 0,
            ⵠΔᐃⵠ: 1,
            ΔⲆΔΔⲆ: -1,
            open: pg
        };
        this.sign = {
            ΔⲆΔΔⲆ: -1,
            open: w
        };
        this.ⵠᐃⲆᐃⲆ = {
            ΔⵠⲆᐃ: 0,
            ⵠΔᐃⵠ: 1,
            open: false,
            ΔⲆΔΔⲆ: -1
        };
        this.ⲆⵠΔⵠⲆ = {
            enabled: false,
            ⲆⲆΔΔⲆ: -1,
            label: false,
            now: -1,
            ᐃⲆᐃⲆ: Ew
        };
        this.ⲆᐃΔΔ = {
            lock: Dj,
            ΔⲆΔΔⲆ: -1,
            ᐃᐃⲆΔΔᐃⵠ: false,
            open: false,
            ΔⵠⲆᐃ: 0,
            ᐃⵠⲆΔᐃⲆᐃ: false,
            locked: false,
            id: -1,
            ⵠΔᐃⵠ: 1
        };
        this.ⵠΔΔᐃⲆ = He;
        this.reconnect = {
            enabled: Ml,
            rotate: 0
        };
        this.key = ⵠᐃⵠ.ᐃⵠΔⲆⵠⵠᐃ("key", hc.location.href);
        var a = ⵠᐃⵠ.ᐃⵠΔⲆⵠⵠᐃ("egg", hc.location.href);
        if (a) {
            Mx.ᐃΔⲆⲆ = parseInt(a);
        }
        this.beta = hc.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
        if (this.key && this.beta) {
            ⲆΔⵠⲆ.set("starve_beta", this.key);
        } else if (this.beta) {
            this.key = ⲆΔⵠⲆ.get("starve_beta");
        }
        this.ᐃᐃⵠⲆᐃ = ⲆΔⵠⲆ.get("starve_token") ? ⲆΔⵠⲆ.get("starve_token") : ⵠᐃⵠ.ⲆⵠⵠⲆΔⲆᐃ(14);
        hc.baguette();
        var b = hc.kot2;
        function c() {
            this.seed = 1;
            this.ⲆⲆⵠΔΔⲆᐃ = 2;
            this.ⲆᐃⵠⲆⲆⲆⵠ = 3;
            this.ΔᐃⲆⵠΔⲆᐃⵠᐃ = 1;
            this.ⵠᐃᐃΔⵠΔⲆⵠⲆ = 2;
            this.ⵠᐃⲆⵠⲆᐃΔΔⵠ = 3;
            this.ᐃⲆⵠⵠᐃⵠⲆ = function (a) {
                this.seed = 2 + Math.floor(Math.random() * 39879);
            };
            this.ΔΔⲆᐃⲆⵠᐃ = function (a) {
                this.ⲆⲆⵠΔΔⲆᐃ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ᐃΔⵠᐃᐃⲆⲆ = function (a) {
                this.ⲆᐃⵠⲆⲆⲆⵠ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ΔᐃⲆⵠⵠⵠΔᐃΔ = function (a) {
                this.ΔᐃⲆⵠΔⲆᐃⵠᐃ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ⵠⵠⲆⲆΔⲆⲆⲆΔ = function (a) {
                this.ⵠᐃᐃΔⵠΔⲆⵠⲆ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ᐃΔⲆᐃΔΔⲆΔᐃ = function (a) {
                this.ⵠᐃⲆⵠⲆᐃΔΔⵠ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ⲆΔⲆⵠᐃⲆⵠ = function (c, e, f, i, j, k, a) {
                for (var m = 1; a > m;) {
                    var n = m * f % ΔΔⲆⲆΔΔᐃ;
                    var o = ᐃⵠΔᐃⵠᐃⵠ[n];
                    if (o < 0.1) {
                        p += 50;
                        m += 50;
                    } else {
                        var p = Math.floor(o * i + j);
                        if (m > k && m < a) {
                            var q = Math.random() > 0.5 ? Xx * -10 : Xx * 10;
                            var r = p * e;
                            this.ⲆⵠⲆᐃⵠᐃⲆ[n] = Math.max(-25, Math.min(25, this.ⲆⵠⲆᐃⵠᐃⲆ[n] + q));
                            this.ΔⵠΔΔᐃΔⵠ[n] = Math.max(-8, Math.min(8, this.ΔⵠΔΔᐃΔⵠ[n] + q));
                            if (r > 0) {
                                oo.beginPath();
                                oo.arc(m + Qx.ΔᐃⲆ.x + this.ΔⵠΔΔᐃΔⵠ[n], c + this.ⲆⵠⲆᐃⵠᐃⲆ[n] - 20, r, 0, Math.PI * 2);
                                if (Px.transition) {
                                    var t = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                                    oo.fillStyle = pf(83, 156, 160, 236, 247, 249, t);
                                } else {
                                    oo.fillStyle = Wr.ⵠⵠⲆⵠᐃⲆᐃ[Px.time];
                                }
                                oo.fill();
                            }
                        }
                        m += p * 2;
                    }
                }
            };
            this.ΔᐃⲆⵠⵠⲆᐃ = function (c, e, f, i, j, k, a) {
                for (var m = 1; m < a;) {
                    var n = m * f % ΔΔⲆⲆΔΔᐃ;
                    var o = ᐃⵠΔᐃⵠᐃⵠ[n];
                    if (o < 0.1) {
                        p += 50;
                        m += 50;
                    } else {
                        var p = Math.floor(o * i + j);
                        if (k < m && a > m) {
                            var q = Math.random() > 0.5 ? Xx * -10 : Xx * 10;
                            var r = p * e;
                            this.ᐃⲆⵠᐃⵠ[n] = Math.max(-25, Math.min(25, this.ᐃⲆⵠᐃⵠ[n] + q));
                            this.ⵠΔⵠⵠⵠ[n] = Math.max(-8, Math.min(8, this.ⵠΔⵠⵠⵠ[n] + q));
                            if (r > 0) {
                                oo.beginPath();
                                oo.arc(c + this.ᐃⲆⵠᐃⵠ[n] - 20, m + Qx.ΔᐃⲆ.y + this.ⵠΔⵠⵠⵠ[n], r, 0, Math.PI * 2);
                                if (Px.transition) {
                                    var t = Px.time ? 1 - Px.ⵠⵠⵠᐃ.ΔᐃΔ : Px.ⵠⵠⵠᐃ.ΔᐃΔ;
                                    oo.fillStyle = pf(83, 156, 160, 236, 247, 249, t);
                                } else {
                                    oo.fillStyle = Wr.ⵠⵠⲆⵠᐃⲆᐃ[Px.time];
                                }
                                oo.fill();
                            }
                        }
                        m += p * 2;
                    }
                }
            };
            this.ᐃⵠᐃⲆⵠⲆΔᐃΔ = function (b, c, d, e, f, g) {
                f -= 30;
                g += 30;
                if ((h = -(d - 0 - e - 2) / 200) === 0) {
                    this.ᐃΔⵠᐃᐃⲆⲆ();
                }
                oo.globalAlpha = ⵠᐃⵠ.ᐃⲆΔΔⲆ(h);
                this.ⲆΔⲆⵠᐃⲆⵠ(d, h, this.ⲆᐃⵠⲆⲆⲆⵠ, 18, 16, f, g);
                oo.globalAlpha = 1;
                var h = -(b - 250 - e + 500) / 150;
                if (h === 0) {
                    this.ᐃⲆⵠⵠᐃⵠⲆ();
                }
                oo.globalAlpha = ⵠᐃⵠ.ᐃⲆΔΔⲆ(h);
                this.ⲆΔⲆⵠᐃⲆⵠ(b, h, this.seed, 12, 10, f, g);
                oo.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
                        this.ΔΔⲆᐃⲆⵠᐃ();
                    }
                    oo.globalAlpha = ⵠᐃⵠ.ᐃⲆΔΔⲆ(h);
                    this.ⲆΔⲆⵠᐃⲆⵠ(c, h, this.ⲆⲆⵠΔΔⲆᐃ, 6, 6, f, g);
                    oo.globalAlpha = 1;
                }
            };
            this.ⲆᐃᐃΔᐃΔΔⵠΔ = function (b, c, d, e, f, g) {
                f -= 30;
                g += 30;
                if ((h = -(-d + 0 + e + 2) / 200) === 0) {
                    this.ᐃΔⵠᐃᐃⲆⲆ();
                }
                oo.globalAlpha = ⵠᐃⵠ.ᐃⲆΔΔⲆ(h);
                this.ⲆΔⲆⵠᐃⲆⵠ(d, h, this.ⲆᐃⵠⲆⲆⲆⵠ, 18, 16, f, g);
                oo.globalAlpha = 1;
                var h = -(-b + 250 + e) / 150;
                if (h === 0) {
                    this.ᐃⲆⵠⵠᐃⵠⲆ();
                }
                oo.globalAlpha = ⵠᐃⵠ.ᐃⲆΔΔⲆ(h);
                this.ⲆΔⲆⵠᐃⲆⵠ(b, h, this.seed, 12, 10, f, g);
                oo.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(-c + 350 + e) / 100) <= 0.01) {
                        this.ΔΔⲆᐃⲆⵠᐃ();
                    }
                    oo.globalAlpha = ⵠᐃⵠ.ᐃⲆΔΔⲆ(h);
                    this.ⲆΔⲆⵠᐃⲆⵠ(c, h, this.ⲆⲆⵠΔΔⲆᐃ, 6, 6, f, g);
                    oo.globalAlpha = 1;
                }
            };
            this.ᐃᐃⲆΔⲆΔⵠⵠΔ = function (b, c, d, e, f, g) {
                f -= 30;
                g += 30;
                if ((h = -(-d + 0 + e + 2) / 200) === 0) {
                    this.ᐃΔⵠᐃᐃⲆⲆ();
                }
                oo.globalAlpha = ⵠᐃⵠ.ᐃⲆΔΔⲆ(h);
                this.ΔᐃⲆⵠⵠⲆᐃ(d, h, this.ⲆᐃⵠⲆⲆⲆⵠ, 18, 16, f, g);
                oo.globalAlpha = 1;
                var h = -(-b + 250 + e) / 150;
                if (h === 0) {
                    this.ᐃⲆⵠⵠᐃⵠⲆ();
                }
                oo.globalAlpha = ⵠᐃⵠ.ᐃⲆΔΔⲆ(h);
                this.ΔᐃⲆⵠⵠⲆᐃ(b, h, this.seed, 12, 10, f, g);
                oo.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(-c + 350 + e) / 100) <= 0.01) {
                        this.ΔΔⲆᐃⲆⵠᐃ();
                    }
                    oo.globalAlpha = ⵠᐃⵠ.ᐃⲆΔΔⲆ(h);
                    this.ΔᐃⲆⵠⵠⲆᐃ(c, h, this.ⲆⲆⵠΔΔⲆᐃ, 6, 6, f, g);
                    oo.globalAlpha = 1;
                }
            };
            this.ⲆᐃᐃⲆⵠⵠⵠⲆⲆ = function (b, c, d, e, f, g) {
                f -= 30;
                g += 30;
                var h = -(d - 0 - e - 2) / 200;
                if (h === 0) {
                    this.ᐃΔⵠᐃᐃⲆⲆ();
                }
                oo.globalAlpha = ⵠᐃⵠ.ᐃⲆΔΔⲆ(h);
                this.ΔᐃⲆⵠⵠⲆᐃ(d, h, this.ⲆᐃⵠⲆⲆⲆⵠ, 18, 16, f, g);
                oo.globalAlpha = 1;
                h = -(b - 250 - e + 500) / 150;
                if (h === 0) {
                    this.ᐃⲆⵠⵠᐃⵠⲆ();
                }
                oo.globalAlpha = ⵠᐃⵠ.ᐃⲆΔΔⲆ(h);
                this.ΔᐃⲆⵠⵠⲆᐃ(b, h, this.seed, 12, 10, f, g);
                oo.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
                        this.ΔΔⲆᐃⲆⵠᐃ();
                    }
                    oo.globalAlpha = ⵠᐃⵠ.ᐃⲆΔΔⲆ(h);
                    this.ΔᐃⲆⵠⵠⲆᐃ(c, h, this.ⲆⲆⵠΔΔⲆᐃ, 6, 6, f, g);
                    oo.globalAlpha = 1;
                }
            };
            this.w1 = {
                r: new ⵠᐃⵠ.ᐃᐃΔⵠᐃ(ⵠᐃⵠ.ⵠΔⲆᐃⵠᐃΔ, 0, 10, 0, 0, 200),
                ᐃᐃⵠⲆ: new ⵠᐃⵠ.ᐃᐃΔⵠᐃ(ⵠᐃⵠ.ᐃⵠᐃⵠΔᐃᐃ, 0, 10, 200, 200, 0)
            };
            this.w2 = {
                r: new ⵠᐃⵠ.ᐃᐃΔⵠᐃ(ⵠᐃⵠ.ⲆⲆᐃⲆⲆⵠΔ, 0, 10, 0, 0, 150),
                ᐃᐃⵠⲆ: new ⵠᐃⵠ.ᐃᐃΔⵠᐃ(ⵠᐃⵠ.ᐃⲆΔΔⲆ, 0, 10, 150, 150, 0)
            };
            this.w3 = {
                r: new ⵠᐃⵠ.ᐃᐃΔⵠᐃ(ⵠᐃⵠ.ΔⲆᐃᐃᐃᐃⲆ, 0, 10, 0, 0, 100),
                ᐃᐃⵠⲆ: new ⵠᐃⵠ.ᐃᐃΔⵠᐃ(ⵠᐃⵠ.ᐃⲆΔΔⲆ, 0, 10, 100, 100, 0)
            };
            this.ⲆᐃⵠΔΔⲆΔⲆⵠ = function (a) {
                if (a.r.x === a.r.ⵠⲆⵠᐃⵠ) {
                    if (a.ᐃᐃⵠⲆ.ⵠⲆⵠᐃⵠ === a.ᐃᐃⵠⲆ.x) {
                        return a.r;
                    } else {
                        return a.ᐃᐃⵠⲆ;
                    }
                } else {
                    return a.r;
                }
            };
            this.ᐃⲆᐃ = function (a) {
                var b;
                if (a.r.ⵠⲆⵠᐃⵠ === a.r.x) {
                    if (a.ᐃᐃⵠⲆ.x === a.ᐃᐃⵠⲆ.ⵠⲆⵠᐃⵠ) {
                        a.r.ᐃᐃⲆⲆⲆⵠᐃ();
                        a.ᐃᐃⵠⲆ.ᐃᐃⲆⲆⲆⵠᐃ();
                        b = a.r;
                    } else {
                        b = a.ᐃᐃⵠⲆ;
                    }
                } else {
                    b = a.r;
                }
                b.ⲆΔᐃᐃᐃⵠΔ(b.ⵠⲆⵠᐃⵠ);
                return b;
            };
            this.ᐃⲆⵠᐃⵠ = [];
            this.ⵠΔⵠⵠⵠ = [];
            this.ⲆⵠⲆᐃⵠᐃⲆ = [];
            this.ΔⵠΔΔᐃΔⵠ = [];
            this.ᐃᐃⵠΔⵠ = function () {
                for (var a = 0; ΔΔⲆⲆΔΔᐃ > a; a++) {
                    this.ᐃⲆⵠᐃⵠ[a] = Math.floor(ᐃⵠΔᐃⵠᐃⵠ[a] * 25);
                    this.ⵠΔⵠⵠⵠ[a] = Math.floor(ᐃⵠΔᐃⵠᐃⵠ[a] * 8);
                    this.ⲆⵠⲆᐃⵠᐃⲆ[a] = Math.floor(ᐃⵠΔᐃⵠᐃⵠ[a] * 25);
                    this.ΔⵠΔΔᐃΔⵠ[a] = Math.floor(ᐃⵠΔᐃⵠᐃⵠ[a] * 8);
                }
                this.w1.r.x = this.w1.r.ⵠⲆⵠᐃⵠ;
                this.w2.r.Ⲇⵠⵠᐃⵠ = 3.5;
                this.w3.r.Ⲇⵠⵠᐃⵠ = 2;
            };
            this.ᐃᐃⵠΔⵠ();
        }
        this.ᐃᐃⵠⲆᐃ = b.substring(0, 6) + this.ᐃᐃⵠⲆᐃ.substring(6);
        this.ΔΔΔⲆᐃⵠⲆ = ⲆΔⵠⲆ.get("starve_token_id") ? ⲆΔⵠⲆ.get("starve_token_id") : "";
        this.id = 0;
        this.ΔΔⵠΔ = 0;
        this.Ⲇⵠⵠ = 0;
        this.ΔⲆⲆⲆⵠᐃⲆ = {
            ⲆⵠᐃΔᐃᐃⵠ: 0,
            ΔΔΔᐃᐃⲆᐃ: "",
            ᐃⵠΔⵠΔ: 0,
            ᐃⵠⲆᐃⲆⲆⲆ: 0
        };
        this.ΔᐃᐃΔⵠᐃᐃⵠⵠ = {
            connected: 0,
            ⵠⲆᐃΔΔⵠΔ: new Date().getTime()
        };
        this.ⵠⲆᐃΔΔ = [];
        this.ⵠⵠΔⲆᐃᐃᐃ = function (a) {
            for (var b = 0; b < this.ⵠⲆᐃΔΔ.length; b++) {
                if (this.ⵠⲆᐃΔΔ[b] == a) {
                    return ij;
                }
            }
            return pq;
        };
        this.ᐃᐃⲆⵠΔ = {
            ⲆⲆΔΔⲆ: 0,
            time: 0,
            value: 0,
            open: Pn,
            ᐃⲆᐃⲆ: function () {
                if (this.open) {
                    var a = new Date().getTime();
                    this.time = Math.floor((a - this.ⲆⲆΔΔⲆ) / 1000);
                    if (this.time < 60) {
                        Sx.ᐃᐃⲆⵠΔ.button.ᐃⲆᐃⲆ(oo);
                    } else {
                        document.getElementById("shop_starterkit").style.display = "none";
                        this.open = false;
                    }
                }
            }
        };
        this.ᐃⲆⲆᐃᐃ = {
            id: -1,
            ⵠΔᐃⵠ: -1,
            lock: 0,
            timeout: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0, 1, 0, 1 / 30, 1),
            wait: Ok
        };
        this.ᐃᐃⵠⵠΔ = {
            timeout: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0, 1, 0, 1 / 5, 1),
            wait: Ih
        };
        this.ΔⲆⲆⵠⵠ = {
            timeout: new ⵠᐃⵠ.ⵠᐃⵠⲆ(pq, 0, 1, 0, 1, 1),
            wait: false
        };
        this.ⲆⵠⲆᐃⲆ = {
            timeout: new ⵠᐃⵠ.ⵠᐃⵠⲆ(Ih, 0, 1, 0, 1 / 10, 1),
            wait: Dl
        };
        this.ΔᐃⲆ = new ⵠᐃⵠ.ⵠⵠᐃⵠᐃΔᐃ(ⵠᐃⵠ.ΔΔΔⵠⲆⲆⵠ, 0, 0.4, 0, 0, lo, Po, lo, Po);
        this.ΔᐃⲆ.ⲆⲆΔΔⲆ = 0;
        this.ΔᐃⲆ.ᐃᐃⵠⲆΔΔⲆ = 0;
        this.ΔᐃⲆ.Ⲇⵠᐃ = function () {
            if (this.ᐃᐃⵠⲆΔΔⲆ > 0) {
                this.ᐃᐃⵠⲆΔΔⲆ -= Xx;
            } else {
                var a = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
                if (a) {
                    this.ⲆⲆΔΔⲆ = 0;
                    var b = Math.max(Math.min(lo - a.x, -2), 2 - Px.w + ao);
                    var c = Math.max(Math.min(Po - a.y, -2), 2 - Px.ⲆⲆⲆ + so);
                    this.ⲆΔᐃᐃᐃⵠΔ({
                        x: b,
                        y: c
                    });
                } else {
                    this.ⲆⲆΔΔⲆ += Xx;
                    if (this.ⲆⲆΔΔⲆ > 3) {
                        this.ⲆⲆΔΔⲆ = 0;
                        if (!Qx.reconnect.enabled) {
                            ΔⵠΔΔ.ΔΔᐃᐃⲆᐃΔΔᐃ();
                        }
                    }
                }
            }
        };
        this.ΔᐃⲆ.w = screen.width;
        this.ΔᐃⲆ.ⲆⲆⲆ = screen.height;
        this.ΔᐃⲆ.ⵠᐃᐃⵠᐃΔᐃ = this.ΔᐃⲆ.w;
        this.ΔᐃⲆ.ⵠΔⲆᐃⵠⵠΔ = this.ΔᐃⲆ.ⲆⲆⲆ;
        this.ΔᐃⲆ.rx = 0;
        this.ΔᐃⲆ.ry = 0;
        this.ΔᐃⲆ.ⵠⲆⵠΔΔΔⵠᐃⵠ = 0;
        this.ΔᐃⲆ.ᐃΔᐃᐃΔⲆⲆᐃᐃ = 0;
        this.ΔᐃⲆ.ΔΔⲆⵠᐃ = function (a, b) {
            this.x = -Math.min(Math.max(-Px.ΔᐃᐃΔΔⲆⵠ * 2, a - Px.ΔᐃᐃΔΔⲆⵠ - this.ⵠᐃᐃⵠᐃΔᐃ / 2), Px.w - this.ⵠᐃᐃⵠᐃΔᐃ);
            this.y = -Math.min(Math.max(-Px.ΔΔⲆⵠᐃΔᐃ * 2, b - (Px.ΔΔⲆⵠᐃΔᐃ + this.ⵠΔⲆᐃⵠⵠΔ) / 2), Px.ⲆⲆⲆ - this.ⵠΔⲆᐃⵠⵠΔ + Px.ΔΔⲆⵠᐃΔᐃ);
            this.ⵠⲆⵠᐃⵠ = this.x;
            this.ⲆⲆΔⵠⵠΔΔ = this.y;
        };
        this.control = {
            angle: 0,
            timeout: 0,
            ΔΔΔⲆⵠΔⲆ: 0,
            ⵠⵠΔⵠ: 0,
            attack: 0,
            Ⲇⵠᐃ: function () {
                var a = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
                if (a) {
                    var b = {
                        x: Qx.ΔᐃⲆ.x + a.x,
                        y: Qx.ΔᐃⲆ.y + a.y
                    };
                } else {
                    b = cq;
                }
                var c = ⵠᐃⵠ.ⲆΔⲆⲆΔΔⲆ(Vx.ᐃⲆⵠⲆ, b);
                var d = false;
                this.ⵠⵠΔⵠ += Xx;
                if (!Vx.state) {
                    if (a && !(a.action & 16) && this.ⵠⵠΔⵠ > 0.2) {
                        this.attack = 1;
                        d = true;
                        this.ⵠⵠΔⵠ = 0;
                        ΔⵠΔΔ.ⵠᐃⵠΔΔⲆⵠⵠⲆ(c);
                    }
                }
                if (a) {
                    a.angle = c;
                    a.ⵠΔΔᐃⵠⲆⵠ = c;
                }
                if (!d) {
                    this.timeout += Xx;
                    if (this.timeout > 0.2) {
                        this.timeout = 0;
                        if (Math.abs(this.angle - c) > 0.005) {
                            ΔⵠΔΔ.ⵠⲆⵠᐃⲆΔᐃⲆⲆ(c);
                            this.angle = c;
                        }
                    }
                }
                if (!Qx.ⵠᐃΔⲆΔ.open && !Qx.ΔⲆⵠᐃΔ.open) {
                    var e = 0;
                    if (Ux.ⲆΔⲆⲆⵠⲆⵠ()) {
                        e |= 1;
                    }
                    if (Ux.ⵠΔΔⵠᐃⵠᐃ()) {
                        e |= 2;
                    }
                    if (Ux.ⲆⲆⲆΔΔᐃⵠ()) {
                        e |= 4;
                    }
                    if (Ux.ᐃᐃⲆⲆⵠⵠᐃ()) {
                        e |= 8;
                    }
                    if (this.ΔΔΔⲆⵠΔⲆ != e) {
                        ΔⵠΔΔ.ⲆⵠΔⲆᐃⵠᐃⵠⵠ(e);
                    }
                    this.ΔΔΔⲆⵠΔⲆ = e;
                }
            }
        };
        this.ᐃᐃᐃⵠ = {
            c: 1,
            ᐃᐃⵠⲆ: 1,
            ⲆⲆⲆ: 1,
            ᐃⲆᐃ: 1,
            ΔⵠⲆ: 1,
            ᐃᐃⲆΔⵠⲆᐃ: 1,
            ⲆⵠⲆᐃⲆΔΔ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(Dq, 0, 1, 0, 3, 3),
            ⲆΔΔΔⲆᐃᐃ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(Ol, 0, 1, 0, 2, 2),
            ⲆⲆⲆᐃΔᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(true, 0, 1, 0, 3, 3),
            ⲆΔⵠⲆᐃⵠΔ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(Xo, 0, 1, 0, 3, 3),
            ⲆⲆⲆⵠⲆᐃⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(Kk, 0, 1, 0, 3, 3),
            ΔⵠΔⵠΔⲆⲆ: new ⵠᐃⵠ.ⵠᐃⵠⲆ(ur, 0, 1, 0, 3, 3),
            ⵠᐃᐃⵠⲆ: new ⵠᐃⵠ.ᐃᐃΔⵠᐃ(ⵠᐃⵠ.ΔΔΔⵠⲆⲆⵠ, 0, 1, 0, 0, 1),
            ΔⲆⲆΔΔ: new ⵠᐃⵠ.ᐃᐃΔⵠᐃ(ⵠᐃⵠ.ΔΔΔⵠⲆⲆⵠ, 0, 1, 0, 0, 1),
            ΔⲆᐃΔⵠΔⲆ: new ⵠᐃⵠ.ᐃᐃΔⵠᐃ(ⵠᐃⵠ.ΔΔΔⵠⲆⲆⵠ, 0, 1, 0, 0, 1),
            ᐃΔⲆⵠⲆⵠΔ: new ⵠᐃⵠ.ᐃᐃΔⵠᐃ(ⵠᐃⵠ.ΔΔΔⵠⲆⲆⵠ, 0, 1, 0, 0, 1),
            ᐃΔⲆᐃⵠΔⵠ: new ⵠᐃⵠ.ᐃᐃΔⵠᐃ(ⵠᐃⵠ.ΔΔΔⵠⲆⲆⵠ, 0, 1, 0, 0, 1),
            ⵠⵠΔⲆᐃⵠᐃ: new ⵠᐃⵠ.ᐃᐃΔⵠᐃ(ⵠᐃⵠ.ΔΔΔⵠⲆⲆⵠ, 0, 1, 0, 0, 1),
            Ⲇⵠᐃ: function () {
                this.ⲆⵠⲆᐃⲆΔΔ.Ⲇⵠᐃ();
                this.ⲆΔΔΔⲆᐃᐃ.Ⲇⵠᐃ();
                this.ⲆⲆⲆᐃΔᐃⲆ.Ⲇⵠᐃ();
                this.ⲆΔⵠⲆᐃⵠΔ.Ⲇⵠᐃ();
                this.ⲆⲆⲆⵠⲆᐃⲆ.Ⲇⵠᐃ();
                this.ΔⵠΔⵠΔⲆⲆ.Ⲇⵠᐃ();
                this.ⵠᐃᐃⵠⲆ.ⲆΔᐃᐃᐃⵠΔ(this.c);
                this.ΔⲆⲆΔΔ.ⲆΔᐃᐃᐃⵠΔ(this.ᐃᐃⵠⲆ);
                this.ΔⲆᐃΔⵠΔⲆ.ⲆΔᐃᐃᐃⵠΔ(this.ⲆⲆⲆ);
                this.ᐃΔⲆⵠⲆⵠΔ.ⲆΔᐃᐃᐃⵠΔ(this.ᐃⲆᐃ);
                this.ᐃΔⲆᐃⵠΔⵠ.ⲆΔᐃᐃᐃⵠΔ(this.ΔⵠⲆ);
                this.ⵠⵠΔⲆᐃⵠᐃ.ⲆΔᐃᐃᐃⵠΔ(this.ᐃᐃⲆΔⵠⲆᐃ);
            }
        };
        this.ᐃΔⲆⲆΔᐃⵠ = false;
        this.ΔΔᐃⲆⲆᐃⵠ = false;
        this.ᐃΔΔⲆⵠ = false;
        this.ΔⲆΔⲆᐃⲆⵠ = Ok;
        this.ⲆⲆⵠΔ = {
            max: 10,
            ⲆᐃⵠΔᐃⵠⵠ: 0,
            ⵠᐃΔⲆⲆ: 0,
            ΔⲆᐃ: [],
            ⵠⵠⵠΔΔ: [],
            ⵠᐃⵠᐃᐃᐃⵠ: function (a, b) {
                if (a === 1) {
                    this.ⵠᐃΔⲆⲆ = 6;
                }
                this.ⲆᐃⵠΔᐃⵠⵠ += b;
                this.max = 10 + this.ⲆᐃⵠΔᐃⵠⵠ + this.ⵠᐃΔⲆⲆ;
            },
            ᐃⵠΔΔⲆΔᐃ: {
                item: -1,
                ΔⲆ: null,
                ⵠᐃⵠΔⵠ: 0,
                ⲆⲆⵠΔᐃⵠⲆ: 0,
                ⵠⲆΔⲆᐃ: -1,
                ⵠⵠⲆⵠᐃ: -1,
                ⵠⵠᐃΔⵠ: function (a) {
                    if (!!this.ⵠᐃⵠΔⵠ && (a.x !== this.ⵠⲆΔⲆᐃ || a.y !== this.ⵠⵠⲆⵠᐃ)) {
                        this.ⲆⲆⵠΔᐃⵠⲆ = 1;
                    }
                },
                start: function (a, b) {
                    this.ⵠⲆΔⲆᐃ = b.x;
                    this.ⵠⵠⲆⵠᐃ = b.y;
                    this.item = a;
                    this.ΔⲆ = Qx.ⲆⲆⵠΔ.ⵠⵠⵠΔΔ[a].info.ΔⲆ[2];
                    this.ⵠᐃⵠΔⵠ = 1;
                },
                stop: function () {
                    this.ⵠᐃⵠΔⵠ = 0;
                    this.ⲆⲆⵠΔᐃⵠⲆ = 0;
                    this.ⵠⲆΔⲆᐃ = -1;
                    this.ⵠⵠⲆⵠᐃ = -1;
                },
                release: function () {
                    var a = -1;
                    var b = Qx.ⲆⲆⵠΔ.ⵠⵠⵠΔΔ;
                    var c = 0;
                    if (this.ⵠᐃⵠΔⵠ && this.ⲆⲆⵠΔᐃⵠⲆ) {
                        for (var d = 0; d < b.length; d++) {
                            if (b[d].info.state === Qf) {
                                a = d;
                                break;
                            }
                        }
                        if (a !== -1 && a !== this.item && b[this.item]) {
                            c = 1;
                            var f = b[a];
                            b[a] = b[this.item];
                            b[this.item] = f;
                            Sx.ΔᐃⲆⲆΔΔΔ();
                        }
                    }
                    this.stop();
                    return c;
                },
                ᐃⲆᐃⲆ: function (a, b) {
                    if (this.ⵠᐃⵠΔⵠ && this.ⲆⲆⵠΔᐃⵠⲆ) {
                        Mu(oo, this.ΔⲆ, Math.floor(a - this.ΔⲆ.width / 2), Math.floor(b - this.ΔⲆ.height / 2));
                    }
                }
            },
            ΔᐃⲆⵠⵠⵠΔΔᐃ: function (a) {
                for (d = 0; d < a.length; d++) {
                    if (this.ΔⲆᐃ[a[d][0]] == a[d][1]) {
                        return true;
                    }
                }
                return Dj;
            },
            ΔⲆΔᐃΔ: function (a) {
                for (var b = 0; b < this.ⵠⵠⵠΔΔ.length; b++) {
                    if (this.ⵠⵠⵠΔΔ[b].id == a) {
                        return b;
                    }
                }
                return -1;
            },
            ᐃⲆⵠᐃΔⲆᐃ: function (a, b) {
                this.ΔⲆᐃ[a] = 0;
                this.ⵠⵠⵠΔΔ.splice(b, 1);
                Sx.ΔᐃⲆⲆΔΔΔ();
            },
            ᐃⲆᐃⵠⵠΔΔ: function (a, b, c) {
                Ⲇⵠᐃ = Ol;
                this.ΔⲆᐃ[a] = Math.max(0, this.ΔⲆᐃ[a] - b);
                if (!this.ΔⲆᐃ[a] && c >= 0) {
                    this.ᐃⲆⵠᐃΔⲆᐃ(a, c);
                }
            }
        };
        this.ⲆⵠⵠⵠΔΔΔ = {
            enabled: false,
            translate: {
                x: 0,
                y: 0
            },
            ⵠⲆΔᐃⵠⵠⲆ: function () {
                if (Px.mode == 1 && !Qx.ΔΔᐃⲆⲆᐃⵠ) {
                    Qx.ⲆⵠⵠⵠΔΔΔ.enabled = !Qx.ⲆⵠⵠⵠΔΔΔ.enabled;
                    if (Qx.ⲆⵠⵠⵠΔΔΔ.enabled) {
                        Sx.options.ⲆΔⵠⵠᐃⲆⲆ.display = "inline-block";
                    } else {
                        Sx.options.ⲆΔⵠⵠᐃⲆⲆ.display = "none";
                    }
                }
            }
        };
        Sx.options.ⲆΔⵠⵠᐃⲆⲆ.display = "none";
        this.ⵠΔΔᐃᐃ = {
            enabled: kg,
            translate: {
                y: 0,
                x: 0
            },
            ⲆⲆΔΔⲆ: 0,
            ⵠⲆΔᐃⵠⵠⲆ: function () {
                Qx.ⵠΔΔᐃᐃ.enabled = !Qx.ⵠΔΔᐃᐃ.enabled;
                if (Qx.ⵠΔΔᐃᐃ.enabled) {
                    Sx.options.ⲆⵠⵠᐃΔΔΔ.display = "inline-block";
                } else {
                    Sx.options.ⲆⵠⵠᐃΔΔΔ.display = "none";
                }
            },
            Ⲇⵠᐃ: function () {
                if (!!this.enabled && Qx.ᐃⲆⵠΔ.id < 0 && !Sx.ΔΔⲆⵠ.open) {
                    this.ⲆⲆΔΔⲆ += Xx;
                    if (this.ⲆⲆΔΔⲆ > 2) {
                        this.ⲆⲆΔΔⲆ = 0;
                        if (Qx.ᐃᐃᐃⵠ.ⲆⲆⲆ < 0.35) {
                            if (Qx.ⲆⲆⵠΔ.ΔⲆᐃ[110]) {
                                ΔⵠΔΔ.ᐃΔΔⵠⲆ(110, Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(110));
                            } else if (Qx.ⲆⲆⵠΔ.ΔⲆᐃ[192]) {
                                ΔⵠΔΔ.ᐃΔΔⵠⲆ(192, Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(192));
                            } else if (Qx.ⲆⲆⵠΔ.ΔⲆᐃ[196]) {
                                ΔⵠΔΔ.ᐃΔΔⵠⲆ(196, Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(196));
                            } else if (Qx.ⲆⲆⵠΔ.ΔⲆᐃ[189]) {
                                ΔⵠΔΔ.ᐃΔΔⵠⲆ(189, Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(189));
                            } else if (Qx.ⲆⲆⵠΔ.ΔⲆᐃ[207]) {
                                ΔⵠΔΔ.ᐃΔΔⵠⲆ(207, Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(207));
                            } else if (Qx.ⲆⲆⵠΔ.ΔⲆᐃ[205]) {
                                ΔⵠΔΔ.ᐃΔΔⵠⲆ(205, Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(205));
                            } else if (Qx.ⲆⲆⵠΔ.ΔⲆᐃ[209]) {
                                ΔⵠΔΔ.ᐃΔΔⵠⲆ(209, Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(209));
                            } else if (Qx.ⲆⲆⵠΔ.ΔⲆᐃ[143]) {
                                ΔⵠΔΔ.ᐃΔΔⵠⲆ(143, Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(143));
                            } else if (Qx.ⲆⲆⵠΔ.ΔⲆᐃ[117]) {
                                ΔⵠΔΔ.ᐃΔΔⵠⲆ(117, Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(117));
                            } else if (Qx.ⲆⲆⵠΔ.ΔⲆᐃ[138]) {
                                ΔⵠΔΔ.ᐃΔΔⵠⲆ(138, Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(138));
                            } else if (Qx.ⲆⲆⵠΔ.ΔⲆᐃ[133]) {
                                ΔⵠΔΔ.ᐃΔΔⵠⲆ(133, Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(133));
                            } else if (Qx.ⲆⲆⵠΔ.ΔⲆᐃ[145]) {
                                ΔⵠΔΔ.ᐃΔΔⵠⲆ(145, Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(145));
                            } else if (Qx.ⲆⲆⵠΔ.ΔⲆᐃ[136]) {
                                ΔⵠΔΔ.ᐃΔΔⵠⲆ(136, Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(136));
                            } else if (Qx.ⲆⲆⵠΔ.ΔⲆᐃ[197]) {
                                ΔⵠΔΔ.ᐃΔΔⵠⲆ(197, Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(197));
                            }
                        } else if (Qx.ᐃᐃᐃⵠ.ᐃⲆᐃ < 0.35 && Qx.ⲆⲆⵠΔ.ΔⲆᐃ[127]) {
                            ΔⵠΔΔ.ᐃΔΔⵠⲆ(127, Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(127));
                        }
                    }
                }
            }
        };
        Sx.options.ⲆⵠⵠᐃΔΔΔ.display = "none";
        this.ᐃⲆⵠΔ = {
            id: -1,
            ᐃΔΔᐃ: -1,
            timeout: new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0, 1, 0, 1, 1),
            ⵠᐃⲆΔΔ: false,
            ⵠΔⲆᐃ: -1,
            mode: 0,
            label: [],
            ᐃⲆⲆⲆⵠ: [],
            ⲆΔⲆΔⵠ: Ok,
            ⲆΔΔⵠΔ: false,
            ⵠᐃⲆΔᐃⵠᐃ: Oo,
            ΔᐃⲆᐃᐃ: false,
            ᐃⵠᐃΔⲆΔⵠΔΔ: function () {
                this.mode = this.mode === 0 ? 1 : 0;
            },
            ⲆᐃΔᐃⵠⵠⵠⲆᐃ: function (a) {
                this.ⲆΔⲆΔⵠ = a;
                var b = Sx.ΔΔⲆⵠ;
                if (b.open) {
                    b.ⵠᐃᐃᐃⲆⵠΔ(b.button);
                }
                this.Ⲇⵠᐃ();
            },
            ᐃΔΔᐃᐃΔΔᐃΔ: function (a) {
                var b = ht[a];
                this.id = a;
                this.ⵠᐃⲆΔΔ = true;
                Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
                this.timeout.ⵠⵠᐃΔⵠΔⵠ = b.time * 8;
                this.ᐃΔΔᐃ = b.ᐃΔΔᐃ;
            },
            ⵠⲆᐃⲆΔΔᐃᐃⲆ: function (a) {
                var b = ht[a];
                this.id = a;
                this.ⵠᐃⲆΔΔ = true;
                var c = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
                if (c && c.right == 28) {
                    this.timeout.ⵠⵠᐃΔⵠΔⵠ = b.time * 3;
                } else {
                    this.timeout.ⵠⵠᐃΔⵠΔⵠ = b.time;
                }
                this.ᐃΔΔᐃ = b.ᐃΔΔᐃ;
                for (var d = 0; d < b.r.length; d++) {
                    var e = b.r[d];
                    Qx.ⲆⲆⵠΔ.ᐃⲆᐃⵠⵠΔΔ(e[0], e[1], Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(e[0]));
                }
                Sx.ΔᐃⲆⲆΔΔΔ();
            },
            Ⲇⵠᐃ: function () {
                this.ᐃⲆⲆⲆⵠ = [];
                if (Sx.ᐃⵠΔⲆⵠ.ᐃⲆⵠΔ === 1) {
                    Sx.ᐃⵠΔⲆⵠ.display = 0;
                }
                for (var a in ht) {
                    var b = ht[a];
                    var c = Ll;
                    if (b.r) {
                        for (var d = 0; d < b.r.length; d++) {
                            if (Qx.ⲆⲆⵠΔ.max >= 16 && b.id === 100) {
                                c = Ks;
                                break;
                            }
                            if (b.w > this.ⲆΔⲆΔⵠ || b.f > this.ⲆΔΔⵠΔ || b.ΔⵠⲆ > this.ⵠᐃⲆΔᐃⵠᐃ || b.e > this.ΔᐃⲆᐃᐃ) {
                                c = false;
                                break;
                            }
                            var f = b.r[d];
                            if (!Qx.ⲆⲆⵠΔ.ΔⲆᐃ[f[0]] || Qx.ⲆⲆⵠΔ.ΔⲆᐃ[f[0]] < f[1]) {
                                c = ds;
                                break;
                            }
                        }
                        if (c) {
                            this.ᐃⲆⲆⲆⵠ.push(Sx.ⲆΔⲆ[b.id]);
                        }
                    }
                }
                Sx.ⲆΔᐃⲆⵠΔΔ();
                Sx.ΔⲆⵠⲆⵠΔᐃ();
                Sx.ⲆⵠⲆⵠⲆᐃⲆ();
                Sx.ᐃΔΔΔΔΔᐃ();
                Sx.ⵠΔⲆⲆΔΔⲆ();
                Sx.ⲆΔΔⵠᐃⲆⲆ();
                Sx.sign.ᐃᐃᐃⵠⲆΔⲆ();
            },
            ᐃᐃⲆⲆⲆⵠᐃ: function () {
                this.id = -1;
                this.ⵠᐃⲆΔΔ = false;
                this.timeout.ΔᐃΔ = 0;
                this.timeout.ΔⵠⲆ = false;
                this.Ⲇⵠᐃ();
            }
        };
        this.ⲆⵠᐃΔⲆΔⲆ = {
            message: Pg,
            ᐃⲆᐃⲆ: Dw
        };
        this.alert = {
            timeout: new ⵠᐃⵠ.ⵠᐃⵠⲆ(Pn, 1, 1, 0, 4, 0.3),
            text: "",
            label: null,
            ᐃⲆᐃⲆ: Fw,
            list: []
        };
        this.ᐃⲆΔⲆⲆ = {
            Δᐃ: document.createElement("canvas"),
            ⲆⵠΔΔΔ: [],
            Ⲇⵠᐃ: ph,
            translate: {
                x: 0,
                y: 0
            },
            sort: function () {
                var a = [];
                for (var b = Px.ⲆⲆⲆᐃ, c = 0; c < b.length; c++) {
                    if (b[c].ⵠΔΔᐃⲆ) {
                        a.push({
                            id: c,
                            ⵠⵠⲆⲆ: b[c].ᐃⵠΔⵠΔ
                        });
                    }
                }
                a.sort(function (a, b) {
                    return b.ⵠⵠⲆⲆ - a.ⵠⵠⲆⲆ;
                });
                this.ⲆⵠΔΔΔ = [];
                for (c = 0; c < a.length && c < 10; c++) {
                    this.ⲆⵠΔΔΔ.push(a[c].id);
                }
                this.Ⲇⵠᐃ = true;
            },
            ᐃᐃⵠΔⵠ: function (a) {
                for (var b = Px.ⲆⲆⲆᐃ, c = 0; c < b.length; c++) {
                    b[c].ᐃⵠΔⵠΔ = 0;
                }
                b[Qx.id].ᐃⵠΔⵠΔ = ⵠᐃⵠ.ΔⲆⵠΔⵠⲆⵠ(a[1]);
                this.ⲆⵠΔΔΔ = [];
                for (c = 2; c < a.length; c += 2) {
                    this.ⲆⵠΔΔΔ.push(a[c]);
                    b[a[c]].ᐃⵠΔⵠΔ = ⵠᐃⵠ.ΔⲆⵠΔⵠⲆⵠ(a[c + 1]);
                }
                this.Ⲇⵠᐃ = p;
            }
        };
        this.ᐃⲆΔⲆⲆ.Δᐃ.width = xo * 180;
        this.ᐃⲆΔⲆⲆ.Δᐃ.height = xo * 300;
        this.ᐃⲆΔⲆⲆ.ᐃ = this.ᐃⲆΔⲆⲆ.Δᐃ.getContext("2d");
        this.ΔⲆⵠᐃΔ = {
            open: false,
            input: document.getElementById("commandInput"),
            ᐃᐃΔᐃΔᐃΔ: document.getElementById("commandsBox"),
            style: document.getElementById("commandMainBox").style,
            ΔⲆⵠⵠᐃⵠᐃⵠᐃ: function (a) {
                this.ᐃᐃΔᐃΔᐃΔ.innerHTML += a;
            },
            Ⲇⵠᐃ: function () {
                this.style.left = Math.floor(ao / 2 - 300) + "px";
                this.style.top = Math.floor(so / 2 - 250) + "px";
            },
            ⲆΔⲆᐃΔⲆᐃᐃᐃ: function () {
                this.ᐃᐃΔᐃΔᐃΔ.innerHTML = "";
            },
            ⵠⲆⲆᐃⵠ: function () {
                this.open = Ih;
                this.style.display = "none";
            },
            ΔⲆΔΔΔⲆᐃ: function (a) {
                var b = "<table class=\"tableList\">";
                for (var c = 0; c < a.length; c++) {
                    if (c % 3 == 0) {
                        b += "<tr>";
                    }
                    b += "<td class=\"tableList\">" + a[c] + "</td>";
                    if ((c + 1) % 3 === 0 || c + 1 === a.length) {
                        b += "</tr>";
                    }
                }
                return b += "</table>";
            },
            ᐃⵠⵠⲆᐃ: function (a, b, c, d) {
                d = d || "";
                var f = "<div class=commandWritten>" + (a = a || "");
                f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
                f += (c = c || "") + "</div>" + d + "</div>";
                this.ΔⲆⵠⵠᐃⵠᐃⵠᐃ(f);
                this.ⵠΔΔⲆⵠΔΔⲆⲆ();
            },
            ⵠΔΔⲆⵠΔΔⲆⲆ: function () {
                this.ᐃᐃΔᐃΔᐃΔ.scrollTop = this.ᐃᐃΔᐃΔᐃΔ.scrollHeight;
            },
            ΔᐃⲆⲆᐃΔⲆ: function (b) {
                switch (b) {
                    case "clean":
                        this.ⲆΔⲆᐃΔⲆᐃᐃᐃ();
                        return true;
                    case "list":
                        var c = "";
                        const a = hc.document.createElement("div");
                        for (var d = Px.ⲆⲆⲆᐃ, e = 0; e < d.length; e++) {
                            var f = d[e];
                            if (f.ⵠΔΔᐃⲆ) {
                                a.innerText = f.ΔⵠⲆⵠⲆ;
                                c += a.innerHTML + " <span style=\"color:green\">#" + e + "</span><br />";
                            }
                        }
                        this.ᐃⵠⵠⲆᐃ("list", 1, "List all connected players", c);
                        return true;
                    case "weapon-list":
                        this.ᐃⵠⵠⲆᐃ("Weapons", 1, "List all weapons in the game", this.ΔⲆΔΔΔⲆᐃ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
                        return Kk;
                    case "tool-list":
                        this.ᐃⵠⵠⲆᐃ("Tools", 1, "List all tools in the game", this.ΔⲆΔΔΔⲆᐃ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
                        return true;
                    case "survival-list":
                        this.ᐃⵠⵠⲆᐃ("Survival Items", 1, "List all survival items in the game", this.ΔⲆΔΔΔⲆᐃ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
                        return Bh;
                    case "resource-list":
                        this.ᐃⵠⵠⲆᐃ("Resources", 1, "List all resources in the game", this.ΔⲆΔΔΔⲆᐃ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
                        return true;
                    case "food-list":
                        this.ᐃⵠⵠⲆᐃ("Food", 1, "List all food in the game", this.ΔⲆΔΔΔⲆᐃ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
                        return Ol;
                    case "hat-list":
                        this.ᐃⵠⵠⲆᐃ("Hats", 1, "List all hats in the game", this.ΔⲆΔΔΔⲆᐃ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
                        return ph;
                    case "building-list":
                        this.ᐃⵠⵠⲆᐃ("Buildings", 1, "List all buildings in the game", this.ΔⲆΔΔΔⲆᐃ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
                        return ur;
                    case "biome-list":
                        this.ᐃⵠⵠⲆᐃ("Biomes list", 1, "List all available biomes in the game", this.ΔⲆΔΔΔⲆᐃ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
                        return true;
                    case "help-config":
                        this.ᐃⵠⵠⲆᐃ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
                        return true;
                    case "pos":
                        d = Px.Ⲇᐃⵠ[0];
                        e = 0;
                        for (; e < d.length; e++) {
                            var g = d[e];
                            if (g.ⵠΔᐃⵠ === Qx.id) {
                                this.ᐃⵠⵠⲆᐃ("pos", 1, "Your position is " + Math.floor(g.x / 100) + ":" + Math.floor(g.y / 100));
                                return true;
                            }
                        }
                        break;
                    case "help-admin":
                        this.ᐃⵠⵠⲆᐃ("help-admin", 1, "List all available commands for admin only", this.ΔⲆΔΔΔⲆᐃ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
                        return Kk;
                    case "help":
                        this.ᐃⵠⵠⲆᐃ("help", 1, "List all available commands", this.ΔⲆΔΔΔⲆᐃ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
                        return true;
                }
                return false;
            },
            ᐃᐃᐃⵠⲆᐃⵠᐃⵠ: function () {
                if (!this.open) {
                    this.open = true;
                    this.style.display = "inline-block";
                    this.input.focus();
                }
            },
            ⲆⲆⵠᐃᐃᐃᐃ: function () {
                var a = this.input.value;
                if (a && a.length > 0) {
                    if (!this.ΔᐃⲆⲆᐃΔⲆ(a)) {
                        ΔⵠΔΔ.ⵠᐃⵠⲆⵠⲆⵠΔᐃ(this.input.value);
                    }
                    this.input.value = "";
                }
            }
        };
        this.ⵠᐃΔⲆΔ = {
            open: false,
            input: document.getElementById("chat_input"),
            style: document.getElementById("chat_block").style,
            Ⲇⵠᐃ: function () {
                this.style.left = Math.floor(ao / 2 - 150) + "px";
                this.style.top = Math.floor(so / 2 + 80) + "px";
            },
            ⵠⲆⲆᐃⵠ: function () {
                this.open = Lj;
                this.style.display = "none";
                this.input.value = "";
            },
            prefix: "!",
            cmd: {
                hud: function (a) {
                    if (a === "off") {
                        var b = "Enter \"!hud\" without the quotes to restore the HUD";
                        if (Qx.alert.text) {
                            Qx.alert.list.push(b);
                        } else {
                            Qx.alert.text = b;
                        }
                        Sx.ⲆΔᐃⲆⲆᐃⵠ = 0;
                    } else {
                        Sx.ⲆΔᐃⲆⲆᐃⵠ = 1;
                    }
                }
            },
            ΔᐃⲆⲆᐃΔⲆ: function (a) {
                if (a.charAt(0) == this.prefix) {
                    var b = "";
                    var c = "";
                    for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
                        b += a.charAt(d);
                    }
                    for (d++; d < a.length; d++) {
                        c += a.charAt(d);
                    }
                    var e = this.cmd[b];
                    if (e) {
                        e(c);
                    }
                    return true;
                }
                return Tq;
            },
            ΔΔᐃⲆⵠ: function () {
                if (this.open) {
                    this.open = tk;
                    this.style.display = "none";
                    var a = this.input.value;
                    if (a) {
                        if (!this.ΔᐃⲆⲆᐃΔⲆ(a)) {
                            ΔⵠΔΔ.ⵠⲆΔΔᐃⲆⵠᐃΔ(this.input.value);
                        }
                        this.input.value = "";
                    }
                } else {
                    this.open = p;
                    this.style.display = "inline-block";
                    this.input.focus();
                }
            }
        };
        this.ⵠⲆΔⲆⵠⲆᐃ = {
            ⵠⵠⵠΔⲆ: [],
            Ⲇⵠᐃ: function (a) {
                a.y += Xx * 80 * a.ⵠⵠⲆⲆ;
                a.x += Xx * 80 * a.c;
                a.ΔⲆⲆΔΔ -= Xx / 6;
                if (a.ΔⲆⲆΔΔ > 0.2) {
                    a.alpha = Math.min(a.alpha + Xx * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - Xx * 1, 0);
                }
            },
            add: function (b) {
                var c = Math.floor(Math.min(Wr.ⲆᐃⲆⲆᐃⲆⲆ * (ao / 1366), Wr.ⲆᐃⲆⲆᐃⲆⲆ + 10) * Math.max(Math.min(Px.ⲆΔⵠⵠΔ + 1000, 3000) / 3000, 0));
                if (this.ⵠⵠⵠΔⲆ.length < c) {
                    var d = Math.floor(Math.random() * Wr.ⵠⲆΔΔⵠΔⲆ);
                    var e = -Qx.ΔᐃⲆ.x + Math.floor(Math.random() * Qx.ΔᐃⲆ.w);
                    var f = -Qx.ΔᐃⲆ.y + Math.floor(Math.random() * Qx.ΔᐃⲆ.ⲆⲆⲆ);
                    var g = Math.random(Math.PI);
                    this.ⵠⵠⵠΔⲆ.push(new Vw(d, e, f, g));
                }
            }
        };
        this.ᐃⲆⲆⵠΔⲆⵠ = 0;
        this.ᐃᐃΔΔⵠ = 0;
        this.ⲆⵠᐃⵠⲆ = {
            ⵠⵠⵠΔⲆ: [],
            ⲆⵠⵠⲆᐃ: 0,
            ΔᐃΔᐃⵠ: 0,
            Ⲇⵠᐃ: function (a) {
                a.y += Xx * (200 + this.ΔᐃΔᐃⵠ * 800) * a.ⵠⵠⲆⲆ;
                a.x += Xx * (200 + this.ΔᐃΔᐃⵠ * 800) * a.c;
                a.ΔⲆⲆΔΔ -= Xx / 6;
                if (a.ΔⲆⲆΔΔ > 0.2) {
                    a.alpha = Math.min(a.alpha + Xx * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - Xx * 1, 0);
                }
            },
            add: function (b) {
                var c = Math.floor(Math.min((this.ΔᐃΔᐃⵠ + 0.1) * Wr.ⵠᐃᐃⲆⲆⲆⲆ * (ao / 1366), (this.ΔᐃΔᐃⵠ + 0.1) * Wr.ⵠᐃᐃⲆⲆⲆⲆ + 10) * Math.max(Math.min(Px.ΔⵠΔⲆⵠ + 1000, 3000) / 3000, 0));
                if (this.ⵠⵠⵠΔⲆ.length < c) {
                    var d = Math.floor(Math.random() * Wr.ⵠⲆΔΔⵠΔⲆ);
                    var e = -Qx.ΔᐃⲆ.x + Math.floor(Math.random() * Qx.ΔᐃⲆ.w);
                    var f = -Qx.ΔᐃⲆ.y + Math.floor(Math.random() * Qx.ΔᐃⲆ.ⲆⲆⲆ);
                    var g = Math.random(Math.PI);
                    if (Qx.ⲆⵠᐃⵠⲆ.ⲆⵠⵠⲆᐃ !== 0) {
                        e -= Qx.ΔᐃⲆ.w / 2;
                    }
                    this.ⵠⵠⵠΔⲆ.push(new Vw(d, e, f, g));
                }
            }
        };
        this.ᐃᐃⲆⵠⲆ = {
            ⵠⵠⵠΔⲆ: [],
            ⲆⵠⵠⲆᐃ: 0,
            ΔᐃΔᐃⵠ: 0,
            Ⲇⵠᐃ: function (a) {
                if (Ux.ⲆⲆⲆΔΔᐃⵠ()) {
                    a.y += Xx * a.ΔᐃⲆΔⲆ * (5.5 + this.ΔᐃΔᐃⵠ * 10);
                } else {
                    a.y += Xx * a.ΔᐃⲆΔⲆ * (5 + this.ΔᐃΔᐃⵠ * 10);
                }
                a.ΔⲆⲆΔΔ -= Xx / 2;
                if (Ux.ⲆΔⲆⲆⵠⲆⵠ()) {
                    a.x += Xx * (100 + this.ΔᐃΔᐃⵠ * 400);
                } else if (Ux.ⵠΔΔⵠᐃⵠᐃ()) {
                    a.x -= Xx * (130 - this.ΔᐃΔᐃⵠ * 400);
                } else {
                    a.x -= Xx * (30 - this.ΔᐃΔᐃⵠ * 400);
                }
                if (a.ΔⲆⲆΔΔ > 0.2) {
                    a.alpha = Math.min(a.alpha + Xx * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - Xx * 5, 0);
                }
            },
            add: function (a) {
                var b = Math.floor(Math.min((this.ΔᐃΔᐃⵠ * 1.5 + 0.5) * Wr.Ⲇᐃᐃⵠᐃⵠⵠ * (ao / 1366), (this.ΔᐃΔᐃⵠ * 1.5 + 0.5) * Wr.Ⲇᐃᐃⵠᐃⵠⵠ + 10) * Math.max(Math.min(Px.ⲆⲆᐃΔᐃ + 1000, 3000) / 3000, 0));
                if (this.ⵠⵠⵠΔⲆ.length < b) {
                    var c = Math.floor(Math.random() * Wr.ⵠᐃΔⲆⵠΔΔ);
                    var d = -Qx.ΔᐃⲆ.x + Math.floor(Math.random() * Qx.ΔᐃⲆ.w);
                    var e = -Qx.ΔᐃⲆ.y + Math.floor(Math.random() * 400 * xo - xo * 200);
                    this.ⵠⵠⵠΔⲆ.push(new Vw(c, d, e, 0));
                }
            }
        };
        this.ⲆⵠΔΔ = [];
        for (var d = 0; d < 4; d++) {
            this.ⲆⵠΔΔ.push(new c());
        }
    }
    function nx() {
        Math.random();
        return "i";
    }
    function fx() {
        Math.random();
        return "p";
    }
    function ox() {
        Math.random();
        return "C";
    }
    function px(b, c, d, e) {
        const f = (d | 28542) & ~(d & 28542);
        const g = (16 << (e >> 24 & 255)) + (24 << (e >> 8 & 255)) + (0 << (e >> 16 & 255)) + (8 << (e & 255));
        const a = lt(b ^ 41987, (16 << (c >> 8 & 255)) + (0 << (c & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 16 & 255)));
        const h = wb(f, g);
        return (8 << ((a ^ h) >> 24 & 255)) + (16 << ((a ^ h) >> 16 & 255)) + (0 << ((a ^ h) & 255)) + (24 << ((a ^ h) >> 8 & 255));
    }
    setTimeout(function b() {
        var c = gx() + bx() + ix() + nx();
        var d = function () {
            Math.random();
            return "W";
        }() + lx() + function () {
            Math.random();
            return "b";
        }() + function () {
            Math.random();
            return "S";
        }() + dx() + function () {
            Math.random();
            return "c";
        }() + function () {
            Math.random();
            return "k";
        }() + lx() + ix();
        if (hc[d].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        var e = kx() + lx() + gx() + hx();
        var f = fx() + jx() + dx() + ix() + dx() + ix() + (Math.random(), "y") + fx() + lx();
        if (hc[d][f][e].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        d = hx() + jx() + bx() + (Math.random(), "w") + function () {
            Math.random();
            return "I";
        }() + (Math.random(), "m") + bx() + cx() + lx();
        e = ox() + bx() + gx() + function () {
            Math.random();
            return "v";
        }() + bx() + kx() + function () {
            Math.random();
            return "R";
        }() + lx() + gx() + hx() + lx() + jx() + nx() + gx() + cx() + ox() + dx() + gx() + ix() + lx() + (Math.random(), "x") + ix() + function () {
            Math.random();
            return "2";
        }() + function () {
            Math.random();
            return "D";
        }();
        if (hc[e][f][d].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        setTimeout(b, 100000);
    }, 100000);
    const qx = {};
    qx.get = function (a, b) {
        if (b !== "ΔᐃΔᐃΔΔⲆᐃⲆ") {
            const a = hc.setTimeout;
            const b = a;
            const c = function () {
                a(c, 6114);
                b(c, 4770);
            };
            c();
        }
        return hc.Reflect.get(...arguments);
    };
    function rx() {
        ⵠᐃⵠ.ⵠᐃⲆΔⵠᐃΔ("https://twitter.com/intent/tweet?text=I%20survived%20" + Qx.Ⲇⵠⵠ + "%20days%20with%20" + Qx.ΔⲆⲆⲆⵠᐃⲆ.ᐃⵠΔⵠΔ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
    }
    function sx(b, c) {
        this.Δᐃ = b;
        this.ᐃ = c;
        var d = this;
        this.ⵠⵠⲆΔⵠⲆᐃ = false;
        this.ᐃⵠⵠΔᐃΔΔ = {
            id: document.getElementById("scoreboard"),
            style: document.getElementById("scoreboard").style,
            height: 0,
            translate: {
                y: 0,
                x: 0
            },
            Ⲇⵠᐃ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = this.translate.y + "px";
            },
            ᐃᐃⵠΔⵠ: function () {
                this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + Qx.ΔⲆⲆⲆⵠᐃⲆ.ΔΔΔᐃᐃⲆᐃ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + Ib[335] + " : " + Qx.Ⲇⵠⵠ + "</div><div class=\"stats\"> " + Ib[334] + " : " + Qx.ΔⲆⲆⲆⵠᐃⲆ.ᐃⵠⲆᐃⲆⲆⲆ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + Ib[333] + " : " + Qx.ΔⲆⲆⲆⵠᐃⲆ.ᐃⵠΔⵠΔ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + Qx.ΔⲆⲆⲆⵠᐃⲆ.ⲆⵠᐃΔᐃᐃⵠ + " " + Ib[332] + "</div></div><div id=\"shop_points\">" + Ib[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + Ib[329] + "</div><div class=\"social\" id=\"fffacebook\">" + Ib[330] + "</div></div><div id=\"bbback\">" + Ib[328] + "</div>";
                this.style.display = "inline-block";
                document.getElementById("tttwitter").addEventListener("mouseup", rx, w);
                document.getElementById("bbback").addEventListener("mouseup", function () {
                    Rx.ⵠⲆⲆᐃⵠ(Mx.ΔΔᐃⲆⵠ);
                }, th);
                document.getElementById("fffacebook").addEventListener("mouseup", xx, C);
                this.height = Math.floor(this.id.clientHeight / 2);
                (function () {
                    var a = new XMLHttpRequest();
                    a.open("GET", cy + "getBreadAndScore?userid=" + qy);
                    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    a.onreadystatechange = function () {
                        if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
                            var b = JSON.parse(a.responseText);
                            var c = b.b - Mx.ΔΔⲆᐃⲆ;
                            Mx.ΔΔⲆᐃⲆ = b.b;
                            Mx.ᐃⵠΔⵠΔ = b.s;
                            Mx.ᐃⵠⲆΔⵠ = Mx.ⵠⲆⵠΔΔⵠᐃ(Mx.ᐃⵠΔⵠΔ);
                            Mx.ⵠΔⵠΔᐃᐃᐃ = Mx.ᐃⲆⲆⲆΔΔᐃ(Mx.ᐃⵠΔⵠΔ);
                            Mx.ⵠΔⵠΔΔᐃⲆ = 0;
                            document.getElementById("breadWonInner").innerHTML = "" + c;
                        }
                    };
                    a.send();
                })();
            }
        };
        var f;
        var g = 0;
        function e() {
            d.Ⲇⵠᐃ();
            if (++g != 30) {
                hc.setTimeout(e, 33);
            } else {
                d.Ⲇⵠᐃ();
            }
        }
        this.ⵠⲆⲆᐃⵠ = function (a) {
            if (d.ⵠⵠⲆΔⵠⲆᐃ === true) {
                d.ⵠⵠⲆΔⵠⲆᐃ = false;
                f = a;
                i = -1;
                j();
                Zx();
            }
        };
        var i = -1;
        function j() {
            d.Ⲇⵠᐃ();
            if (++i == 30) {
                d.stop();
                d.ᐃⵠⵠΔᐃΔΔ.style.display = "none";
                f();
                return;
            }
            hc.setTimeout(j, 33);
        }
        this.ΔᐃᐃⲆⵠ = false;
        this.stop = function () {
            this.ΔᐃᐃⲆⵠ = false;
        };
        this.ΔΔᐃⲆⵠ = function () {
            _x();
            document.getElementById("game_body").style.backgroundColor = Wr.ΔⵠᐃⲆᐃ[Ox.time];
            d.ᐃⵠⵠΔᐃΔΔ.ᐃᐃⵠΔⵠ();
            Mx.ⵠⵠⵠⵠⵠ.style.display = "inline-block";
            d.ΔᐃᐃⲆⵠ = true;
            d.ⵠⵠⲆΔⵠⲆᐃ = true;
            i = -1;
            g = 0;
            e();
        };
        this.Ⲇⵠᐃ = function () {
            this.ᐃⵠⵠΔᐃΔΔ.translate.x = Math.floor(lo - 275);
            this.ᐃⵠⵠΔᐃΔΔ.translate.y = Math.floor(Po - this.ᐃⵠⵠΔᐃΔΔ.height - 28);
            Mx.ⵠⵠⵠⵠⵠ.translate.x = this.ᐃⵠⵠΔᐃΔΔ.translate.x - 350;
            Mx.ⵠⵠⵠⵠⵠ.translate.y = this.ᐃⵠⵠΔᐃΔΔ.translate.y + 0;
            Mx.ⵠⵠⵠⵠⵠ.Ⲇⵠᐃ();
            if (g != 30 || i != -1) {
                var a = 0;
                if (g != 30) {
                    a = 1500 / (g + 1) - 50;
                }
                if (i != -1) {
                    a = -(1750 / (30 - i + 1) - 48);
                }
                this.ᐃⵠⵠΔᐃΔΔ.translate.y -= a;
            }
            this.ᐃⵠⵠΔᐃΔΔ.Ⲇⵠᐃ();
        };
        this.ᐃⲆᐃⲆ = function () {
            Yp();
            Qx.alert.ᐃⲆᐃⲆ("#FFF", "#000");
        };
    }
    function tx(a, b) {
        Pj(sb, a, b);
        const c = Xb(gb[0], gb[1]);
        (function (b, c, d, e, f, g) {
            Oj(sb, b, c, d, e, f, g);
            const a = Xb(gb[0], gb[1]);
            const h = Tb(gb[2], gb[3], gb[4]);
        })(gb[0], gb[1], gb[0], gb[1], gb[0], gb[1]);
        return (c | 25317) & ~(c & 25317);
    }
    function ux(c, d) {
        var f = this;
        this.Δᐃ = c;
        this.ᐃ = d;
        if (hc.navigator.userAgent.indexOf("Edge") > -1) {
            this.ᐃᐃᐃⲆⵠᐃΔ = "default";
            this.ⲆΔΔⵠⲆⵠΔ = "pointer";
        } else {
            this.ᐃᐃᐃⲆⵠᐃΔ = "url('img/cursor0.png'), default";
            this.ⲆΔΔⵠⲆⵠΔ = "url('img/cursor1.png'), pointer";
        }
        this.ⲆΔᐃⲆⲆᐃⵠ = 1;
        this.ΔᐃᐃΔⲆΔⵠ = 1;
        this.ᐃᐃΔᐃⲆⵠⵠ = 1;
        this.ⵠᐃⵠᐃᐃⲆⵠ = 1;
        this.ⵠⵠΔⲆᐃᐃⵠⲆΔ = {
            id: document.getElementById("team_box"),
            style: document.getElementById("team_box").style,
            Ⲇⵠᐃ: function () {
                this.style.left = Math.floor(lo - 125) + "px";
                this.style.top = "110px";
            }
        };
        this.ΔΔᐃᐃ = {
            ⲆΔᐃⲆᐃᐃⲆ: Gf(60, 60, 0, ⵠΔ[782]),
            ⲆᐃⲆᐃΔΔⲆ: Gf(60, 60, 0, ⵠΔ[783])
        };
        this.sign = {
            open: false,
            ΔⲆⵠⵠⲆΔΔⵠᐃ: 0,
            ⵠΔⵠⲆⵠΔⲆ: document.getElementById("sign_object"),
            ᐃΔᐃⲆΔⲆⲆ: 0,
            id: document.getElementById("sign_window"),
            style: document.getElementById("sign_window").style,
            button: Gf(60, 60, 0, ⵠΔ[803]),
            ᐃᐃᐃⵠⲆΔⲆ: function () {
                var a = Math.floor(Math.floor((3 + Qx.ᐃⲆⵠΔ.ᐃⲆⲆⲆⵠ.length) / 4) * (10 + ⵠΔ[316][0].width) + 35);
                this.button.info.translate.x = a;
                this.button.info.translate.y = 22;
            },
            Ⲇⵠᐃ: function () {
                this.style.left = Math.floor(lo - 150) + "px";
                this.style.top = Math.floor(Po - 115) + "px";
            },
            ⵠⲆⲆᐃⵠ: function () {
                Sx.sign.style.display = "none";
                Sx.sign.open = Ml;
            },
            select: function () {
                Sx.sign.open = !Sx.sign.open;
                if (Sx.sign.open) {
                    Sx.sign.style.display = "inline-block";
                } else {
                    Sx.sign.style.display = "none";
                }
            },
            ok: function () {
                ΔⵠΔΔ.ΔⲆᐃⵠᐃᐃⲆᐃΔ(Qx.sign.ΔⲆΔΔⲆ, Sx.sign.ᐃΔᐃⲆΔⲆⲆ);
                Sx.sign.select();
            },
            up: function () {
                Sx.sign.ᐃΔᐃⲆΔⲆⲆ = Sx.sign.ᐃΔᐃⲆΔⲆⲆ === 0 ? 3 : Sx.sign.ᐃΔᐃⲆΔⲆⲆ - 1;
                Sx.sign.ⵠΔⵠⲆⵠΔⲆ.src = "./img/sign" + Sx.sign.ᐃΔᐃⲆΔⲆⲆ + ".png";
            },
            down: function () {
                Sx.sign.ᐃΔᐃⲆΔⲆⲆ = (Sx.sign.ᐃΔᐃⲆΔⲆⲆ + 1) % 4;
                Sx.sign.ⵠΔⵠⲆⵠΔⲆ.src = "./img/sign" + Sx.sign.ᐃΔᐃⲆΔⲆⲆ + ".png";
            }
        };
        document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, w);
        document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, w);
        document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, false);
        document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, false);
        this.ᐃⵠⵠⵠⲆ = {
            open: Dl,
            id: document.getElementById("shop_market"),
            style: document.getElementById("shop_market").style,
            items: [{
                id: 0,
                name: "wood",
                ΔⲆᐃⵠⵠ: 1,
                b: 1,
                a: 3,
                ⵠⲆⵠⲆΔ: 316
            }, {
                id: 1,
                name: "stone",
                ΔⲆᐃⵠⵠ: 1,
                b: 1,
                a: 4,
                ⵠⲆⵠⲆΔ: 315
            }, {
                id: 2,
                name: "gold",
                ΔⲆᐃⵠⵠ: 1,
                b: 1,
                a: 6,
                ⵠⲆⵠⲆΔ: 297
            }, {
                id: 3,
                name: "diamond",
                ΔⲆᐃⵠⵠ: 4,
                b: 4,
                a: 1,
                ⵠⲆⵠⲆΔ: 298
            }, {
                id: 4,
                name: "amethyst",
                ΔⲆᐃⵠⵠ: 8,
                b: 8,
                a: 1,
                ⵠⲆⵠⲆΔ: 418
            }, {
                id: 5,
                name: "reidite",
                ΔⲆᐃⵠⵠ: 16,
                b: 16,
                a: 1,
                ⵠⲆⵠⲆΔ: 938
            }, {
                id: 6,
                name: "pumpkin_seed",
                ΔⲆᐃⵠⵠ: 10,
                b: 10,
                a: 1,
                ⵠⲆⵠⲆΔ: 808
            }, {
                id: 7,
                name: "carrot_seed",
                ΔⲆᐃⵠⵠ: 16,
                b: 16,
                a: 1,
                ⵠⲆⵠⲆΔ: 949
            }, {
                id: 8,
                name: "tomato_seed",
                ΔⲆᐃⵠⵠ: 20,
                b: 20,
                a: 1,
                ⵠⲆⵠⲆΔ: 959
            }, {
                id: 9,
                name: "thornbush_seed",
                ΔⲆᐃⵠⵠ: 30,
                b: 30,
                a: 1,
                ⵠⲆⵠⲆΔ: 845
            }, {
                id: 10,
                name: "garlic_seed",
                ΔⲆᐃⵠⵠ: 40,
                b: 40,
                a: 1,
                ⵠⲆⵠⲆΔ: 834
            }, {
                id: 11,
                name: "watermelon_seed",
                ΔⲆᐃⵠⵠ: 60,
                b: 60,
                a: 1,
                ⵠⲆⵠⲆΔ: 966
            }],
            button: Gf(60, 60, 0, ⵠΔ[795]),
            Ⲇⵠᐃ: function () {
                this.style.left = Math.floor(lo - 450) + "px";
                this.style.top = Math.floor(Po - 270) + "px";
            },
            select: function () {
                Sx.ᐃⵠⵠⵠⲆ.open = !Sx.ᐃⵠⵠⵠⲆ.open;
                if (Sx.ᐃⵠⵠⵠⲆ.open) {
                    Sx.ᐃⵠⵠⵠⲆ.style.display = "inline-block";
                } else {
                    Sx.ᐃⵠⵠⵠⲆ.style.display = "none";
                }
            },
            ⵠⲆⲆᐃⵠ: function () {
                Sx.ᐃⵠⵠⵠⲆ.style.display = "none";
                Sx.ᐃⵠⵠⵠⲆ.open = false;
            },
            ᐃⲆΔᐃΔⵠᐃ: function () {
                ΔⵠΔΔ.ⵠⵠⲆⵠⵠΔΔⵠᐃ(this.ᐃᐃΔⵠⵠΔᐃ);
            },
            ΔΔⲆⵠᐃ: function () {
                this.id;
                if (this.ᐃᐃΔⵠⵠΔᐃ.a === 1) {
                    var a = Math.floor(Number(this.value) * this.ᐃᐃΔⵠⵠΔᐃ.b);
                    this.ᐃᐃΔⵠⵠΔᐃ.ΔⲆᐃⵠⵠ = a;
                    document.getElementById(this.ᐃᐃΔⵠⵠΔᐃ.name + "_trad_number").innerHTML = a + "";
                } else {
                    a = Math.floor(Number(this.value) / this.ᐃᐃΔⵠⵠΔᐃ.a);
                    this.ᐃᐃΔⵠⵠΔᐃ.ΔⲆᐃⵠⵠ = a;
                    document.getElementById(this.ᐃᐃΔⵠⵠΔᐃ.name + "_trad_number").innerHTML = a + "";
                }
            }
        };
        document.getElementById("quit_market").addEventListener("mouseup", this.ᐃⵠⵠⵠⲆ.ⵠⲆⲆᐃⵠ, Lj);
        var e = [["mouseup", this.ᐃⵠⵠⵠⲆ.ᐃⲆΔᐃΔⵠᐃ, "buy_"], ["click", this.ᐃⵠⵠⵠⲆ.ΔΔⲆⵠᐃ, ""], ["change", this.ᐃⵠⵠⵠⲆ.ΔΔⲆⵠᐃ, ""], ["keypress", this.ᐃⵠⵠⵠⲆ.keypress, ""]];
        for (var i = 0; this.ᐃⵠⵠⵠⲆ.items.length > i; i++) {
            var j = this.ᐃⵠⵠⵠⲆ.items[i];
            document.getElementById(j.name + "_market").src = ⵠΔ[j.ⵠⲆⵠⲆΔ][0].ⲆⵠᐃΔⲆ === undefined ? ⵠΔ[j.ⵠⲆⵠⲆΔ][0].src : ⵠΔ[j.ⵠⲆⵠⲆΔ][0].ⲆⵠᐃΔⲆ;
            if (j.a === 1) {
                document.getElementById(j.name + "_trad_number").innerHTML = j.b;
                document.getElementById(j.name + "_number").value = 1;
                document.getElementById(j.name + "_number").step = 1;
                document.getElementById(j.name + "_number").min = 1;
                document.getElementById(j.name + "_number").max = Math.floor(255 / j.b);
            } else {
                document.getElementById(j.name + "_trad_number").innerHTML = 1;
                document.getElementById(j.name + "_number").value = j.a;
                document.getElementById(j.name + "_number").step = j.a;
                document.getElementById(j.name + "_number").min = j.a;
            }
            document.getElementById("buy_" + j.name + "_number").ᐃᐃΔⵠⵠΔᐃ = j;
            document.getElementById(j.name + "_number").ᐃᐃΔⵠⵠΔᐃ = j;
            for (var k = 0; k < e.length; k++) {
                document.getElementById(e[k][2] + j.name + "_number").addEventListener(e[k][0], e[k][1], false);
            }
        }
        $("[type='number']").keypress(function (a) {
            a.preventDefault();
        });
        this.options = {
            open: false,
            id: document.getElementById("option_in_game"),
            style: document.getElementById("option_in_game").style,
            ᐃᐃᐃᐃΔ: document.getElementById("agree_ing").style,
            ΔᐃᐃⵠΔΔΔ: document.getElementById("cancel_agree_ing").style,
            ΔΔᐃⵠΔⵠⲆ: document.getElementById("quest_agree_ing").style,
            ⲆΔⵠⵠᐃⲆⲆ: document.getElementById("spectator_agree_ing").style,
            ⲆⵠⵠᐃΔΔΔ: document.getElementById("auto_feed_agree_ing").style,
            ⲆⲆᐃᐃᐃⲆⲆ: document.getElementById("info_agree_ing").style,
            ⵠΔᐃⵠᐃᐃΔ: document.getElementById("pixelated_agree_ing").style,
            button: Gf(60, 60, 0, ⵠΔ[727]),
            ⲆⵠΔⵠⵠⲆⵠᐃᐃ: function () {
                Sx.options.open = !Sx.options.open;
                if (Sx.options.open) {
                    Sx.options.style.display = "inline-block";
                } else {
                    Sx.options.style.display = "none";
                }
            },
            ⲆⵠⵠⵠΔⲆⲆⲆΔ: function () {
                Mx.ᐃⵠⵠᐃᐃⲆⲆ();
            },
            ΔⵠⵠΔᐃⵠⲆⵠΔ: function () {
                Mx.ΔᐃᐃⲆᐃⵠⵠ();
            },
            high: function () {
                Mx.ⵠΔⲆⵠΔᐃⲆΔⲆ();
            },
            low: function () {
                Mx.ⲆΔⵠⵠΔⵠᐃⲆⲆ();
            },
            ⵠΔΔΔᐃ: function () {
                Sx.ΔΔⲆⵠ.ⵠΔΔΔᐃ();
            },
            ⵠⲆᐃⲆⲆⵠᐃⵠᐃ: function () {
                Sx.ΔⲆᐃⲆⵠ.ⵠΔΔΔᐃ();
            },
            ΔⲆⲆⵠΔᐃᐃΔⵠ: function () {
                Sx.ᐃΔⲆᐃ.ⵠΔΔΔᐃ();
            },
            ⵠⲆⵠⵠᐃΔΔΔΔ: function () {
                Qx.ⲆⵠⵠⵠΔΔΔ.ⵠⲆΔᐃⵠⵠⲆ();
            },
            ⲆⵠΔᐃⵠⲆΔⲆⲆ: function () {
                Qx.ⵠΔΔᐃᐃ.ⵠⲆΔᐃⵠⵠⲆ();
            },
            ⵠⲆⲆᐃⵠ: function () {
                Sx.options.style.display = "none";
                Sx.options.open = false;
            },
            Ⲇⵠᐃ: function () {
                this.style.left = Math.floor(lo - 235) + "px";
                this.style.top = Math.floor(Po - 170) + "px";
            }
        };
        document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ⲆⵠⵠⵠΔⲆⲆⲆΔ, false);
        document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ΔⵠⵠΔᐃⵠⲆⵠΔ, w);
        document.getElementById("low_ing").addEventListener("mouseup", this.options.low, false);
        document.getElementById("high_ing").addEventListener("mouseup", this.options.high, xl);
        document.getElementById("quit_opt").addEventListener("mouseup", this.options.ⵠⲆⲆᐃⵠ, false);
        document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ⵠΔΔΔᐃ, Tq);
        document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ΔⲆⲆⵠΔᐃᐃΔⵠ, false);
        document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ⵠⲆᐃⲆⲆⵠᐃⵠᐃ, false);
        document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ⵠⲆⵠⵠᐃΔΔΔΔ, false);
        document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ⲆⵠΔᐃⵠⲆΔⲆⲆ, false);
        this.ΔⲆᐃⲆⵠ = {
            open: Ml,
            ᐃΔᐃΔⲆ: ⲆΔⵠⲆ.get("starve_cancel") ? ⲆΔⵠⲆ.get("starve_cancel") === "0" ? 0 : 1 : 1,
            id: document.getElementById("cancel_sure_delete"),
            style: document.getElementById("cancel_sure_delete").style,
            ᐃᐃᐃᐃΔ: document.getElementById("cancel_agree").style,
            button: 0,
            Δⵠ: 0,
            ⵠⲆⲆᐃⵠ: function () {
                Sx.ΔⲆᐃⲆⵠ.style.display = "none";
                Sx.ΔⲆᐃⲆⵠ.open = false;
            },
            ᐃⵠᐃᐃⵠΔⲆ: function () {
                if (Qx.ᐃⲆⵠΔ.ⵠᐃⲆΔΔ) {
                    ΔⵠΔΔ.ⵠⵠⵠⲆⵠᐃΔⵠᐃ();
                }
                Sx.ΔⲆᐃⲆⵠ.ⵠⲆⲆᐃⵠ();
            },
            ⵠΔΔΔᐃ: function () {
                if (Sx.ΔⲆᐃⲆⵠ.ᐃΔᐃΔⲆ) {
                    ⲆΔⵠⲆ.set("starve_cancel", "0");
                    Sx.ΔⲆᐃⲆⵠ.ᐃᐃᐃᐃΔ.display = "inline-block";
                    Sx.options.ΔᐃᐃⵠΔΔΔ.display = "none";
                } else {
                    ⲆΔⵠⲆ.set("starve_cancel", "1");
                    Sx.ΔⲆᐃⲆⵠ.ᐃᐃᐃᐃΔ.display = "none";
                    Sx.options.ΔᐃᐃⵠΔΔΔ.display = "inline-block";
                }
                Sx.ΔⲆᐃⲆⵠ.ᐃΔᐃΔⲆ = !Sx.ΔⲆᐃⲆⵠ.ᐃΔᐃΔⲆ;
            },
            ⵠᐃᐃᐃⲆⵠΔ: function () {
                if (this.ᐃΔᐃΔⲆ) {
                    this.style.display = "inline-block";
                    this.open = Ch;
                } else {
                    this.ᐃⵠᐃᐃⵠΔⲆ();
                }
            },
            Ⲇⵠᐃ: function () {
                this.style.left = Math.floor(lo - 235) + "px";
                this.style.top = Math.floor(Po - 130) + "px";
            }
        };
        this.ΔⲆᐃⲆⵠ.id.oncontextmenu = function () {
            return false;
        };
        this.ΔⲆᐃⲆⵠ.ᐃᐃᐃᐃΔ.display = "none";
        if (this.ΔⲆᐃⲆⵠ.ᐃΔᐃΔⲆ) {
            this.options.ΔᐃᐃⵠΔΔΔ.display = "inline-block";
        } else {
            this.options.ΔᐃᐃⵠΔΔΔ.display = "none";
        }
        document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ΔⲆᐃⲆⵠ.ᐃⵠᐃᐃⵠΔⲆ, false);
        document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ΔⲆᐃⲆⵠ.ⵠⲆⲆᐃⵠ, false);
        document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ΔⲆᐃⲆⵠ.ⵠΔΔΔᐃ, false);
        document.addEventListener("cancel_sure_delete", function (a) {
            a.preventDefault();
        }, false);
        this.ⲆᐃⲆⲆⵠⲆΔ = {
            ᐃΔᐃΔⲆ: ⲆΔⵠⲆ.get("starve_aliasing") ? ⲆΔⵠⲆ.get("starve_aliasing") === "0" ? 0 : 1 : 1,
            ᐃⵠⵠΔᐃᐃⲆ: function (a) {
                document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
            },
            ⵠΔΔΔᐃ: function () {
                if (Sx.ⲆᐃⲆⲆⵠⲆΔ.ᐃΔᐃΔⲆ === 0) {
                    ⲆΔⵠⲆ.set("starve_aliasing", "1");
                    Sx.ⲆᐃⲆⲆⵠⲆΔ.ᐃⵠⵠΔᐃᐃⲆ(1);
                    Sx.options.ⵠΔᐃⵠᐃᐃΔ.display = "inline-block";
                } else {
                    ⲆΔⵠⲆ.set("starve_aliasing", "0");
                    Sx.ⲆᐃⲆⲆⵠⲆΔ.ᐃⵠⵠΔᐃᐃⲆ(0);
                    Sx.options.ⵠΔᐃⵠᐃᐃΔ.display = "none";
                }
                Sx.ⲆᐃⲆⲆⵠⲆΔ.ᐃΔᐃΔⲆ = (Sx.ⲆᐃⲆⲆⵠⲆΔ.ᐃΔᐃΔⲆ + 1) % 2;
            }
        };
        if (this.ⲆᐃⲆⲆⵠⲆΔ.ᐃΔᐃΔⲆ === 1) {
            this.options.ⵠΔᐃⵠᐃᐃΔ.display = "inline-block";
        } else {
            this.ⲆᐃⲆⲆⵠⲆΔ.ᐃⵠⵠΔᐃᐃⲆ(0);
            this.options.ⵠΔᐃⵠᐃᐃΔ.display = "none";
        }
        document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ⲆᐃⲆⲆⵠⲆΔ.ⵠΔΔΔᐃ, Dj);
        this.ᐃⵠΔⲆⵠ = {
            ᐃΔᐃΔⲆ: ⲆΔⵠⲆ.get("starve_info_box") ? ⲆΔⵠⲆ.get("starve_info_box") === "0" ? 0 : 1 : 1,
            display: 0,
            x: 0,
            y: 0,
            id: 0,
            ᐃⲆⵠΔ: 0,
            ⵠΔΔΔᐃ: function () {
                if (Sx.ᐃⵠΔⲆⵠ.ᐃΔᐃΔⲆ === 0) {
                    ⲆΔⵠⲆ.set("starve_info_box", "1");
                    Sx.options.ⲆⲆᐃᐃᐃⲆⲆ.display = "inline-block";
                } else {
                    ⲆΔⵠⲆ.set("starve_info_box", "0");
                    Sx.options.ⲆⲆᐃᐃᐃⲆⲆ.display = "none";
                }
                Sx.ᐃⵠΔⲆⵠ.ᐃΔᐃΔⲆ = (Sx.ᐃⵠΔⲆⵠ.ᐃΔᐃΔⲆ + 1) % 2;
            },
            ⵠⵠᐃᐃ: function (a, b, c) {
                if (a && this.ᐃΔᐃΔⲆ) {
                    this.display = 1;
                    this.id = c === 0 ? b.id : ht[b.id].ᐃΔΔᐃ;
                    this.x = b.info.translate.x + 80;
                    this.y = b.info.translate.y;
                    this.ᐃⲆⵠΔ = c;
                }
                return a;
            }
        };
        if (this.ᐃⵠΔⲆⵠ.ᐃΔᐃΔⲆ === 1) {
            this.options.ⲆⲆᐃᐃᐃⲆⲆ.display = "inline-block";
        } else {
            this.options.ⲆⲆᐃᐃᐃⲆⲆ.display = "none";
        }
        document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ᐃⵠΔⲆⵠ.ⵠΔΔΔᐃ, tk);
        if (ⲆΔⵠⲆ.get("starve_scale")) {
            Qo = Number(ⲆΔⵠⲆ.get("starve_scale"));
            document.getElementById("input_ratio").value = Qo;
            Qo *= br / cr;
            dr();
        }
        this.ᐃⵠᐃᐃΔᐃᐃ = function () {
            ⲆΔⵠⲆ.set("starve_scale", "" + document.getElementById("input_ratio").value);
            Qo = br / cr * document.getElementById("input_ratio").value;
            dr();
        };
        document.getElementById("input_ratio").addEventListener("input", this.ᐃⵠᐃᐃΔᐃᐃ, false);
        this.ΔΔⲆⵠ = {
            open: w,
            ᐃΔᐃΔⲆ: ⲆΔⵠⲆ.get("starve_safe") ? ⲆΔⵠⲆ.get("starve_safe") === "0" ? 0 : 1 : 1,
            id: document.getElementById("sure_delete"),
            style: document.getElementById("sure_delete").style,
            ᐃᐃᐃᐃΔ: document.getElementById("agree").style,
            button: 0,
            Δⵠ: 0,
            ⵠⲆⲆᐃⵠ: function () {
                Sx.ΔΔⲆⵠ.style.display = "none";
                Sx.ΔΔⲆⵠ.open = false;
            },
            all: function () {
                if (!Qx.ΔⲆⲆⵠⵠ.wait) {
                    if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && Qx.ᐃⲆⵠΔ.id < 0 && !Qx.ⲆⵠΔⵠⲆ.enabled) {
                        ΔⵠΔΔ.ⲆⵠⵠΔᐃΔᐃⲆⵠ(Sx.ΔΔⲆⵠ.button);
                    }
                    Sx.ΔΔⲆⵠ.ⵠⲆⲆᐃⵠ();
                }
            },
            ⵠⲆΔᐃ: function () {
                if (Qx.ᐃⲆⵠΔ.ⲆΔⲆΔⵠ && !Qx.ΔⲆⲆⵠⵠ.wait) {
                    if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && Qx.ᐃⲆⵠΔ.id < 0 && !Qx.ⲆⵠΔⵠⲆ.enabled) {
                        ΔⵠΔΔ.ΔⵠⲆᐃⵠΔⲆᐃᐃ(Sx.ΔΔⲆⵠ.button);
                    }
                    Sx.ΔΔⲆⵠ.ⵠⲆⲆᐃⵠ();
                }
            },
            ΔⲆⵠⵠΔᐃⲆᐃᐃ: function () {
                if (!Qx.ΔⲆⲆⵠⵠ.wait) {
                    if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && Qx.ᐃⲆⵠΔ.id < 0 && !Qx.ⲆⵠΔⵠⲆ.enabled) {
                        ΔⵠΔΔ.ᐃⵠᐃⵠⵠⵠΔᐃⲆ(Sx.ΔΔⲆⵠ.button);
                    }
                    Sx.ΔΔⲆⵠ.ⵠⲆⲆᐃⵠ();
                }
            },
            ⵠΔΔΔᐃ: function () {
                if (Sx.ΔΔⲆⵠ.ᐃΔᐃΔⲆ) {
                    ⲆΔⵠⲆ.set("starve_safe", "0");
                    Sx.ΔΔⲆⵠ.ᐃᐃᐃᐃΔ.display = "inline-block";
                    Sx.options.ᐃᐃᐃᐃΔ.display = "none";
                } else {
                    ⲆΔⵠⲆ.set("starve_safe", "1");
                    Sx.ΔΔⲆⵠ.ᐃᐃᐃᐃΔ.display = "none";
                    Sx.options.ᐃᐃᐃᐃΔ.display = "inline-block";
                }
                Sx.ΔΔⲆⵠ.ᐃΔᐃΔⲆ = !Sx.ΔΔⲆⵠ.ᐃΔᐃΔⲆ;
            },
            ⵠᐃᐃᐃⲆⵠΔ: function (a) {
                this.button = a;
                document.getElementById("item_to_del").src = ⵠΔ[cs[a].ΔⲆ][0].ⲆⵠᐃΔⲆ === undefined ? ⵠΔ[cs[a].ΔⲆ][0].src : ⵠΔ[cs[a].ΔⲆ][0].ⲆⵠᐃΔⲆ;
                if (cs[a].ⵠⲆΔᐃ && !Qx.ᐃΔΔⲆⵠ && Qx.ᐃⲆⵠΔ.ⲆΔⲆΔⵠ) {
                    document.getElementById("recycle_delete").style.display = "inline-block";
                } else {
                    document.getElementById("recycle_delete").style.display = "none";
                }
                if (this.ᐃΔᐃΔⲆ) {
                    this.style.display = "inline-block";
                    this.open = true;
                } else {
                    this.all();
                }
            },
            Ⲇⵠᐃ: function () {
                this.style.left = Math.floor(lo - 235) + "px";
                this.style.top = Math.floor(Po - 175) + "px";
            }
        };
        this.ΔΔⲆⵠ.ᐃᐃᐃᐃΔ.display = "none";
        if (this.ΔΔⲆⵠ.ᐃΔᐃΔⲆ) {
            this.options.ᐃᐃᐃᐃΔ.display = "inline-block";
        } else {
            this.options.ᐃᐃᐃᐃΔ.display = "none";
        }
        document.getElementById("one_delete").addEventListener("mouseup", this.ΔΔⲆⵠ.ΔⲆⵠⵠΔᐃⲆᐃᐃ, C);
        document.getElementById("yes_delete").addEventListener("mouseup", this.ΔΔⲆⵠ.all, tk);
        document.getElementById("recycle_delete").addEventListener("mouseup", this.ΔΔⲆⵠ.ⵠⲆΔᐃ, tk);
        document.getElementById("no_delete").addEventListener("mouseup", this.ΔΔⲆⵠ.ⵠⲆⲆᐃⵠ, false);
        document.getElementById("case_agree").addEventListener("mouseup", this.ΔΔⲆⵠ.ⵠΔΔΔᐃ, pg);
        this.ᐃᐃⲆⵠΔ = {
            open: Ks,
            ⲆⲆⵠΔᐃ: -1,
            button: Gf(60, 60, 0, ⵠΔ[592]),
            id: document.getElementById("shop_starterkit"),
            style: document.getElementById("shop_starterkit").style,
            Ⲇⵠᐃ: function () {
                this.style.left = Math.floor(lo - 300) + "px";
                this.style.top = Math.floor(Po - 215) + "px";
            },
            ⵠⲆⲆᐃⵠ: function () {
                Sx.ᐃᐃⲆⵠΔ.open = false;
                Sx.ᐃᐃⲆⵠΔ.style.display = "none";
            },
            select: function () {
                Sx.ᐃᐃⲆⵠΔ.open = !Sx.ᐃᐃⲆⵠΔ.open;
                if (Sx.ᐃᐃⲆⵠΔ.open) {
                    Sx.ᐃᐃⲆⵠΔ.style.display = "inline-block";
                } else {
                    Sx.ᐃᐃⲆⵠΔ.style.display = "none";
                }
            },
            ᐃⲆΔᐃΔⵠᐃ: function () {
                if (Sx.ᐃᐃⲆⵠΔ.ⲆⲆⵠΔᐃ >= 0) {
                    ΔⵠΔΔ.ⵠᐃⲆⲆᐃⵠΔᐃⵠ(Sx.ᐃᐃⲆⵠΔ.ⲆⲆⵠΔᐃ);
                    Sx.ᐃᐃⲆⵠΔ.ⵠⲆⲆᐃⵠ();
                    if (ga) {
                        ga("send", "event", "Game", "kit", "" + Sx.ᐃᐃⲆⵠΔ.ⲆⲆⵠΔᐃ);
                    }
                }
            },
            ᐃᐃⵠΔⵠ: function () {
                var a = Qx.ᐃᐃⲆⵠΔ.value;
                document.getElementById("points_bank").innerHTML = ⵠᐃⵠ.ⵠⲆΔⲆⵠᐃΔ(a) + " points";
                for (var b = 0; b < Vf.length; b++) {
                    if (Vf[b].ⵠΔⲆⵠᐃ > a) {
                        document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
                    } else {
                        document.getElementById("starter" + (b + 1)).style.opacity = "1";
                    }
                }
                for (b = 1; b < 13; b++) {
                    document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
                    document.getElementById("amount_shop" + b).innerHTML = "";
                }
                document.getElementById("buy_kit").style.opacity = "0.2";
            },
            ⲆΔᐃᐃⲆⵠⲆᐃΔ: function () {
                if (this.id.length > 8) {
                    var a = Number(this.id.charAt(7) + this.id.charAt(8));
                } else {
                    a = Number(this.id.charAt(7));
                }
                var b = Vf[a - 1];
                if (Qx.ᐃᐃⲆⵠΔ.value >= b.ⵠΔⲆⵠᐃ) {
                    Sx.ᐃᐃⲆⵠΔ.ⲆⲆⵠΔᐃ = a;
                    document.getElementById("buy_kit").style.opacity = "1";
                } else {
                    Sx.ᐃᐃⲆⵠΔ.ⲆⲆⵠΔᐃ = -1;
                    document.getElementById("buy_kit").style.opacity = "0.2";
                }
                b = b.items;
                for (var c = 1, d = 1; c < b.length + 1; c++) {
                    if (b[c - 1][1] !== 29) {
                        document.getElementById("inv_shop" + d).style.display = "inline-block";
                        document.getElementById("inv_shop" + d).src = ⵠΔ[cs[b[c - 1][1]].ΔⲆ][0].ⲆⵠᐃΔⲆ === Qa ? ⵠΔ[cs[b[c - 1][1]].ΔⲆ][0].src : ⵠΔ[cs[b[c - 1][1]].ΔⲆ][0].ⲆⵠᐃΔⲆ;
                        document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][0];
                        d++;
                    }
                }
                for (; d < 13; d++) {
                    document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
                    document.getElementById("amount_shop" + d).innerHTML = "";
                }
            }
        };
        document.getElementById("quit3").addEventListener("mouseup", this.ᐃᐃⲆⵠΔ.ⵠⲆⲆᐃⵠ, false);
        document.getElementById("buy_kit").addEventListener("mouseup", this.ᐃᐃⲆⵠΔ.ᐃⲆΔᐃΔⵠᐃ, Pn);
        for (k = 1; k < 11; k++) {
            document.getElementById("starter" + k).addEventListener("mouseup", this.ᐃᐃⲆⵠΔ.ⲆΔᐃᐃⲆⵠⲆᐃΔ, false);
        }
        this.ᐃΔⲆᐃ = {
            open: false,
            ᐃΔᐃΔⲆ: ⲆΔⵠⲆ.get("starve_quests") ? ⲆΔⵠⲆ.get("starve_quests") === "1" ? 1 : 0 : 0,
            button: Gf(60, 60, 0, ⵠΔ[755]),
            id: document.getElementById("chronoquest"),
            style: document.getElementById("chronoquest").style,
            Ⲇⵠᐃ: function () {
                this.style.left = Math.floor(lo - 420) + "px";
                this.style.top = Math.floor(Po - 270) + "px";
            },
            ⵠⲆⲆᐃⵠ: function () {
                Sx.ᐃΔⲆᐃ.style.display = "none";
                Sx.ᐃΔⲆᐃ.open = false;
            },
            select: function () {
                Sx.ᐃΔⲆᐃ.open = !Sx.ᐃΔⲆᐃ.open;
                if (Sx.ᐃΔⲆᐃ.open) {
                    Sx.ᐃΔⲆᐃ.style.display = "inline-block";
                } else {
                    Sx.ᐃΔⲆᐃ.style.display = "none";
                }
            },
            list: [],
            reset: function () {
                for (var a = 0; a < Sw.length; a++) {
                    this.list[a] = 1;
                    document.getElementById("timeremain_" + a).style.display = "inline-block";
                    document.getElementById("time_finished_" + a).style.display = "none";
                    document.getElementById("claim_reward_" + a).style.display = "none";
                }
            },
            ΔⲆΔᐃⵠᐃΔ: 0,
            ⵠᐃⵠⲆᐃΔΔ: 0,
            ΔⲆΔⲆΔⵠⲆⲆᐃ: function () {
                if (Sx.ᐃΔⲆᐃ.open) {
                    var a = new Date().getTime();
                    if (a - this.ΔⲆΔᐃⵠᐃΔ >= 1000) {
                        this.ΔⲆΔᐃⵠᐃΔ = a;
                        for (var b = 0; b < Sw.length; b++) {
                            if (Sx.ᐃΔⲆᐃ.list[b]) {
                                var c = Sw[b].time - (a - Px.ΔᐃΔᐃΔ.ᐃᐃⵠΔⵠ + Sx.ᐃΔⲆᐃ.ⵠᐃⵠⲆᐃΔΔ);
                                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
                            }
                        }
                    }
                }
            },
            restore: function (a) {
                for (var b = 0; b < a.length; b++) {
                    if (a[b] != 1) {
                        Sx.ᐃΔⲆᐃ.ᐃΔᐃΔᐃᐃᐃ(b, a[b]);
                    }
                }
            },
            ᐃΔᐃΔᐃᐃᐃ: function (a, b) {
                if (b === 3 && (a === 11 || a === 12)) {
                    Qx.ⲆⲆⵠΔ.ⵠᐃⵠᐃᐃᐃⵠ(0, 1);
                    Sx.ΔᐃⲆⲆΔΔΔ();
                }
                document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
                if (b > 1) {
                    document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
                    document.getElementById("timeremain_" + a).style.display = "none";
                } else if (b === 0) {
                    document.getElementById("time_finished_" + a).innerHTML = "FAILED";
                    document.getElementById("timeremain_" + a).style.display = "none";
                }
                document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
                document.getElementById("time_finished_" + a).style.display = "inline";
                Sx.ᐃΔⲆᐃ.list[a] = 0;
            },
            modify: function (a, b) {
                Sx.ᐃΔⲆᐃ.ᐃΔᐃΔᐃᐃᐃ(a, b);
                if (Sx.ᐃΔⲆᐃ.ᐃΔᐃΔⲆ) {
                    Sx.ᐃΔⲆᐃ.open = true;
                    Sx.ᐃΔⲆᐃ.style.display = "inline-block";
                }
            },
            ⵠΔΔΔᐃ: function () {
                if (Sx.ᐃΔⲆᐃ.ᐃΔᐃΔⲆ) {
                    ⲆΔⵠⲆ.set("starve_quests", "0");
                    Sx.options.ΔΔᐃⵠΔⵠⲆ.display = "none";
                } else {
                    ⲆΔⵠⲆ.set("starve_quests", "1");
                    Sx.options.ΔΔᐃⵠΔⵠⲆ.display = "inline-block";
                }
                Sx.ᐃΔⲆᐃ.ᐃΔᐃΔⲆ = !Sx.ᐃΔⲆᐃ.ᐃΔᐃΔⲆ;
            },
            ᐃⲆᐃΔⵠᐃΔⵠⲆ: function () {
                var a = Number(this.id.charAt(13));
                var b = Number(this.id.charAt(14));
                if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
                    a = a * 10 + b;
                }
                ΔⵠΔΔ.ΔΔⵠᐃᐃΔᐃⵠᐃ(a);
            }
        };
        if (this.ᐃΔⲆᐃ.ᐃΔᐃΔⲆ) {
            this.options.ΔΔᐃⵠΔⵠⲆ.display = "inline-block";
        } else {
            this.options.ΔΔᐃⵠΔⵠⲆ.display = "none";
        }
        document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ᐃΔⲆᐃ.ⵠⲆⲆᐃⵠ, false);
        for (k = 0; Sw.length > k; k++) {
            document.getElementById("claim_reward_" + k).addEventListener("mouseup", this.ᐃΔⲆᐃ.ᐃⲆᐃΔⵠᐃΔⵠⲆ, false);
        }
        this.ⲆΔⲆΔ = {
            open: lq,
            button: Gf(60, 60, 0, ⵠΔ[708]),
            list: {
                id: document.getElementById("recipe_craft"),
                style: document.getElementById("recipe_craft").style,
                ⵠⵠⵠΔⲆᐃΔ: [],
                ⲆΔᐃⵠΔⲆⲆ: 0,
                Ⲇⵠᐃ: function () {
                    this.style.left = Math.floor(lo - 335) + "px";
                    this.style.top = Math.floor(Po - 215) + "px";
                },
                ⵠⲆⲆᐃⵠ: function () {
                    document.getElementById("recipe_craft").style.display = "none";
                    Sx.ⲆΔⲆΔ.open = Tq;
                },
                ΔΔΔⲆⵠΔⲆ: function () {
                    document.getElementById("recipe_craft").style.display = "none";
                    document.getElementById("home_craft").style.display = "inline-block";
                },
                ᐃⵠⲆⵠ: function (a) {
                    if ((b = this.ⵠⵠⵠΔⲆᐃΔ[a]).ΔⵠⲆ) {
                        document.getElementById("watercraft").style.display = "inline-block";
                    } else {
                        document.getElementById("watercraft").style.display = "none";
                    }
                    if (b.f) {
                        document.getElementById("firecraft").style.display = "inline-block";
                    } else {
                        document.getElementById("firecraft").style.display = "none";
                    }
                    if (b.w) {
                        document.getElementById("workcraft").style.display = "inline-block";
                    } else {
                        document.getElementById("workcraft").style.display = "none";
                    }
                    if (b.e) {
                        document.getElementById("wellcraft").style.display = "inline-block";
                    } else {
                        document.getElementById("wellcraft").style.display = "none";
                    }
                    for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
                        document.getElementById("inv" + c).style.display = "inline-block";
                        document.getElementById("inv" + c).src = ⵠΔ[cs[b[a][0]].ΔⲆ][0].ⲆⵠᐃΔⲆ === Qa ? ⵠΔ[cs[b[a][0]].ΔⲆ][0].src : ⵠΔ[cs[b[a][0]].ΔⲆ][0].ⲆⵠᐃΔⲆ;
                        document.getElementById("numb" + c).innerHTML = "" + b[a][1];
                        c++;
                    }
                    for (; c < 6; c++) {
                        document.getElementById("inv" + c).style.display = "none";
                        document.getElementById("numb" + c).innerHTML = "";
                    }
                },
                select: function (a) {
                    this.ⲆΔᐃⵠΔⲆⲆ = a;
                    document.getElementById("home_craft").style.display = "none";
                    document.getElementById("workcraft").style.display = "none";
                    document.getElementById("firecraft").style.display = "none";
                    document.getElementById("watercraft").style.display = "none";
                    document.getElementById("wellcraft").style.display = "none";
                    document.getElementById("recipe_craft").style.display = "inline-block";
                    document.getElementById("inv1").style.display = "none";
                    document.getElementById("inv2").style.display = "none";
                    document.getElementById("inv3").style.display = "none";
                    document.getElementById("inv4").style.display = "none";
                    document.getElementById("inv5").style.display = "none";
                    document.getElementById("numb1").innerHTML = "";
                    document.getElementById("numb2").innerHTML = "";
                    document.getElementById("numb3").innerHTML = "";
                    document.getElementById("numb4").innerHTML = "";
                    document.getElementById("numb5").innerHTML = "";
                    for (var b = 0, c = 0; b < ht.length; b++) {
                        var d = ht[b];
                        if (a === d.ᐃⲆᐃ) {
                            this.ⵠⵠⵠΔⲆᐃΔ[c] = d;
                            c++;
                            document.getElementById("img_" + c).style.display = "inline-block";
                            document.getElementById("img_" + c).src = ⵠΔ[cs[d.ᐃΔΔᐃ].ΔⲆ][0].ⲆⵠᐃΔⲆ === undefined ? ⵠΔ[cs[d.ᐃΔΔᐃ].ΔⲆ][0].src : ⵠΔ[cs[d.ᐃΔΔᐃ].ΔⲆ][0].ⲆⵠᐃΔⲆ;
                        }
                    }
                    for (c++; c < 49; c++) {
                        document.getElementById("img_" + c).style.display = "none";
                    }
                }
            },
            ᐃΔⵠΔⲆΔᐃ: {
                id: document.getElementById("home_craft"),
                style: document.getElementById("home_craft").style,
                Ⲇⵠᐃ: function () {
                    this.style.left = Math.floor(lo - 285) + "px";
                    this.style.top = Math.floor(Po - 170) + "px";
                },
                ⵠⲆⲆᐃⵠ: function () {
                    document.getElementById("home_craft").style.display = "none";
                    Sx.ⲆΔⲆΔ.open = Dl;
                }
            },
            ΔΔΔⵠⲆΔᐃΔΔ: function () {
                this.open = !this.open;
                if (this.open) {
                    document.getElementById("home_craft").style.display = "inline-block";
                } else {
                    document.getElementById("home_craft").style.display = "none";
                    document.getElementById("recipe_craft").style.display = "none";
                }
            }
        };
        document.getElementById("quit").addEventListener("mouseup", this.ⲆΔⲆΔ.ᐃΔⵠΔⲆΔᐃ.ⵠⲆⲆᐃⵠ, false);
        document.getElementById("quitmenu").addEventListener("mouseup", this.ⲆΔⲆΔ.list.ⵠⲆⲆᐃⵠ, false);
        document.getElementById("backhome").addEventListener("mouseup", this.ⲆΔⲆΔ.list.ΔΔΔⲆⵠΔⲆ, kg);
        document.getElementById("hatcategory").addEventListener("mouseup", function () {
            Sx.ⲆΔⲆΔ.list.select(2);
        }, false);
        document.getElementById("weaponcategory").addEventListener("mouseup", function () {
            Sx.ⲆΔⲆΔ.list.select(1);
        }, false);
        document.getElementById("toolcategory").addEventListener("mouseup", function () {
            Sx.ⲆΔⲆΔ.list.select(0);
        }, C);
        document.getElementById("foodcategory").addEventListener("mouseup", function () {
            Sx.ⲆΔⲆΔ.list.select(3);
        }, Ok);
        document.getElementById("placeablecategory").addEventListener("mouseup", function () {
            Sx.ⲆΔⲆΔ.list.select(4);
        }, false);
        document.getElementById("constructioncategory").addEventListener("mouseup", function () {
            Sx.ⲆΔⲆΔ.list.select(5);
        }, false);
        document.getElementById("img_1").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(0);
        }, false);
        document.getElementById("img_2").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(1);
        }, false);
        document.getElementById("img_3").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(2);
        }, false);
        document.getElementById("img_4").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(3);
        }, false);
        document.getElementById("img_5").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(4);
        }, pq);
        document.getElementById("img_6").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(5);
        }, false);
        document.getElementById("img_7").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(6);
        }, false);
        document.getElementById("img_8").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(7);
        }, false);
        document.getElementById("img_9").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(8);
        }, pq);
        document.getElementById("img_10").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(9);
        }, Dj);
        document.getElementById("img_11").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(10);
        }, false);
        document.getElementById("img_12").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(11);
        }, pg);
        document.getElementById("img_13").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(12);
        }, w);
        document.getElementById("img_14").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(13);
        }, Ih);
        document.getElementById("img_15").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(14);
        }, false);
        document.getElementById("img_16").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(15);
        }, false);
        document.getElementById("img_17").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(16);
        }, false);
        document.getElementById("img_18").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(17);
        }, false);
        document.getElementById("img_19").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(18);
        }, false);
        document.getElementById("img_20").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(19);
        }, false);
        document.getElementById("img_21").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(20);
        }, kg);
        document.getElementById("img_22").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(21);
        }, kg);
        document.getElementById("img_23").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(22);
        }, false);
        document.getElementById("img_24").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(23);
        }, false);
        document.getElementById("img_25").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(24);
        }, false);
        document.getElementById("img_26").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(25);
        }, false);
        document.getElementById("img_27").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(26);
        }, false);
        document.getElementById("img_28").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(27);
        }, Tq);
        document.getElementById("img_29").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(28);
        }, false);
        document.getElementById("img_30").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(29);
        }, Pn);
        document.getElementById("img_31").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(30);
        }, Dl);
        document.getElementById("img_32").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(31);
        }, Tq);
        document.getElementById("img_33").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(32);
        }, false);
        document.getElementById("img_34").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(33);
        }, Pn);
        document.getElementById("img_35").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(34);
        }, false);
        document.getElementById("img_36").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(35);
        }, false);
        document.getElementById("img_37").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(36);
        }, Ok);
        document.getElementById("img_38").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(37);
        }, Pn);
        document.getElementById("img_39").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(38);
        }, false);
        document.getElementById("img_40").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(39);
        }, false);
        document.getElementById("img_41").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(40);
        }, false);
        document.getElementById("img_42").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(41);
        }, false);
        document.getElementById("img_43").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(42);
        }, false);
        document.getElementById("img_44").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(43);
        }, Ks);
        document.getElementById("img_45").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(44);
        }, Ok);
        document.getElementById("img_46").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(45);
        }, Pn);
        document.getElementById("img_47").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(46);
        }, ds);
        document.getElementById("img_48").addEventListener("mousedown", function () {
            Sx.ⲆΔⲆΔ.list.ᐃⵠⲆⵠ(47);
        }, w);
        this.ΔⲆⲆⲆᐃ = {
            translate: {
                y: 0,
                x: 0
            },
            ᐃⲆᐃΔⵠ: {
                x: -1,
                y: -1
            },
            ⲆⲆⲆᐃ: [],
            focus: function (a) {
                var b = this.translate.y + (Qx.ⲆⲆⵠΔ.ⵠⵠⵠΔΔ.length > 0 ? -120 : -50);
                if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
                    this.ᐃⲆᐃΔⵠ.x = a.x - this.translate.x;
                    this.ᐃⲆᐃΔⵠ.y = a.y - b;
                }
            }
        };
        this.ⵠⲆᐃⲆΔ = {
            translate: {
                y: 0,
                x: 0
            },
            ΔⲆ: ⵠΔ[278],
            Δᐃ: document.createElement("canvas")
        };
        this.ⵠⲆᐃⲆΔ.Δᐃ.width = this.ⵠⲆᐃⲆΔ.ΔⲆ.width;
        this.ⵠⲆᐃⲆΔ.Δᐃ.height = this.ⵠⲆᐃⲆΔ.ΔⲆ.height;
        this.ⵠⲆᐃⲆΔ.ᐃ = this.ⵠⲆᐃⲆΔ.Δᐃ.getContext("2d");
        this.ᐃᐃᐃⵠ = {
            translate: {
                x: 0,
                y: 0
            },
            ΔⲆ: ⵠΔ[267],
            ᐃⲆᐃⲆ: lv,
            y: 0
        };
        this.ΔᐃΔⲆⵠᐃⵠ = function () {
            ᐃⵠᐃᐃⵠ = document.getElementById("team_box");
            ᐃⵠᐃᐃⵠ.innerHTML = "";
            ᐃⵠᐃᐃⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + Px.ⲆⲆⲆᐃ[Qx.ⵠⲆᐃΔΔ[0]].ΔⵠⲆⵠⲆ + "</div";
            for (var a = 1; Qx.ⵠⲆᐃΔΔ.length > a; a++) {
                ᐃⵠᐃᐃⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + Px.ⲆⲆⲆᐃ[Qx.ⵠⲆᐃΔΔ[a]].ΔⵠⲆⵠⲆ + "</div></div>";
            }
            ᐃⵠᐃᐃⵠ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
            ᐃⵠᐃᐃⵠ.style.display = "inline-block";
            document.getElementById("leave").addEventListener("click", ΔⵠΔΔ.ΔᐃΔⲆⵠᐃⵠ, tk);
        };
        this.ΔΔⲆⲆΔΔⵠⵠⲆ = function () {
            ᐃⵠᐃᐃⵠ = document.getElementById("team_box");
            ᐃⵠᐃᐃⵠ.innerHTML = "";
            ᐃⵠᐃᐃⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + Px.ⲆⲆⲆᐃ[Qx.ⵠⲆᐃΔΔ[0]].ΔⵠⲆⵠⲆ + "</div";
            for (var a = 1; Qx.ⵠⲆᐃΔΔ.length > a; a++) {
                ᐃⵠᐃᐃⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + Px.ⲆⲆⲆᐃ[Qx.ⵠⲆᐃΔΔ[a]].ΔⵠⲆⵠⲆ + "</div></div>";
            }
            ᐃⵠᐃᐃⵠ.innerHTML += "</div>";
            ᐃⵠᐃᐃⵠ.style.display = "inline-block";
        };
        this.ⲆᐃⲆⲆΔΔΔΔᐃ = function () {
            ᐃⵠᐃᐃⵠ = document.getElementById("team_box");
            ᐃⵠᐃᐃⵠ.innerHTML = "";
            ᐃⵠᐃᐃⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + Px.ⲆⲆⲆᐃ[Qx.ⵠⲆᐃΔΔ[0]].ΔⵠⲆⵠⲆ + "</div";
            for (var a = 1; a < Qx.ⵠⲆᐃΔΔ.length; a++) {
                ᐃⵠᐃᐃⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + Px.ⲆⲆⲆᐃ[Qx.ⵠⲆᐃΔΔ[a]].ΔⵠⲆⵠⲆ + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
            }
            if (Qx.ᐃⲆⲆᐃᐃ.lock === 0) {
                ᐃⵠᐃᐃⵠ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
            } else {
                ᐃⵠᐃᐃⵠ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
            }
            document.getElementById("lock_team").addEventListener("click", ΔⵠΔΔ.ⵠⵠΔⵠΔΔᐃᐃᐃ, false);
            ᐃⵠᐃᐃⵠ.style.display = "inline-block";
            for (a = 1; a < Qx.ⵠⲆᐃΔΔ.length; a++) {
                switch (a) {
                    case 1:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ΔⵠΔΔ.ΔⵠΔⲆⵠᐃΔ(1);
                        }, false);
                        break;
                    case 2:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ΔⵠΔΔ.ΔⵠΔⲆⵠᐃΔ(2);
                        }, Oo);
                        break;
                    case 3:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ΔⵠΔΔ.ΔⵠΔⲆⵠᐃΔ(3);
                        }, w);
                        break;
                    case 4:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ΔⵠΔΔ.ΔⵠΔⲆⵠᐃΔ(4);
                        }, false);
                        break;
                    case 5:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ΔⵠΔΔ.ΔⵠΔⲆⵠᐃΔ(5);
                        }, Tq);
                        break;
                    case 6:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ΔⵠΔΔ.ΔⵠΔⲆⵠᐃΔ(6);
                        }, Dl);
                        break;
                    case 7:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ΔⵠΔΔ.ΔⵠΔⲆⵠᐃΔ(7);
                        }, C);
                        break;
                    case 8:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ΔⵠΔΔ.ΔⵠΔⲆⵠᐃΔ(8);
                        }, false);
                }
            }
        };
        this.ⲆⲆᐃᐃᐃ = [];
        this.ⲆⲆᐃᐃᐃ[2] = {
            button: Gf(60, 60, 0, ⵠΔ[556]),
            action: this.ΔᐃΔⲆⵠᐃⵠ
        };
        this.ⲆⲆᐃᐃᐃ[3] = {
            button: Gf(60, 60, 0, ⵠΔ[556]),
            action: ΔⵠΔΔ.ΔᐃᐃⵠⲆΔᐃᐃΔ
        };
        this.ⲆⲆᐃᐃᐃ[0] = {
            button: Gf(60, 60, 0, ⵠΔ[557]),
            action: this.ⲆᐃⲆⲆΔΔΔΔᐃ
        };
        this.ⲆⲆᐃᐃᐃ[1] = {
            button: Gf(60, 60, 0, ⵠΔ[561]),
            action: this.ΔΔⲆⲆΔΔⵠⵠⲆ
        };
        this.ⲆⲆᐃᐃᐃ[4] = {
            button: Gf(60, 60, 0, ⵠΔ[560]),
            action: function () { }
        };
        this.ⵠᐃⲆΔⵠ = -1;
        this.ᐃⲆᐃⵠⵠᐃᐃ = Gf(60, 60, 0, ⵠΔ[723]);
        this.ᐃⲆⵠⲆᐃΔⵠ = Gf(60, 60, 0, ⵠΔ[724]);
        this.ⲆᐃΔⵠᐃⵠⵠ = Gf(60, 60, 0, ⵠΔ[658]);
        this.ᐃⵠⵠΔⲆΔⲆ = Gf(60, 60, 0, ⵠΔ[657]);
        this.ⵠΔᐃⵠⵠⵠⲆ = Gf(60, 60, 0, ⵠΔ[658]);
        this.ΔᐃⲆΔⲆⲆⲆ = Gf(60, 60, 0, ⵠΔ[316]);
        this.ⲆᐃᐃⵠΔⵠⲆ = Gf(60, 60, 0, ⵠΔ[315]);
        this.ⲆᐃᐃΔΔᐃᐃ = Gf(60, 60, 0, ⵠΔ[297]);
        this.ᐃΔΔΔⵠⲆⵠ = Gf(60, 60, 0, ⵠΔ[298]);
        this.ᐃᐃⵠᐃᐃⲆⵠ = Gf(60, 60, 0, ⵠΔ[418]);
        this.ⲆᐃΔⵠᐃⵠᐃ = Gf(60, 60, 0, ⵠΔ[938]);
        this.ᐃΔΔᐃΔⵠⲆ = Gf(60, 60, 0, ⵠΔ[412]);
        this.ᐃΔⵠΔⵠⲆᐃ = Gf(60, 60, 0, ⵠΔ[536]);
        this.ΔⵠⲆΔΔᐃᐃ = Gf(60, 60, 0, ⵠΔ[535]);
        this.ᐃΔΔᐃΔⲆⲆ = Gf(60, 60, 0, ⵠΔ[538]);
        this.ⲆⵠΔᐃⵠ = Gf(120, 120, 0, ⵠΔ[149]);
        this.ⲆⵠΔᐃⵠ.info.translate.x = 10;
        this.ⲆⵠΔᐃⵠ.info.translate.y = 10;
        this.ᐃⵠᐃ = [];
        this.ᐃⵠᐃ[0] = Gf(68, 68, 0, ⵠΔ[340], 3);
        this.ᐃⵠᐃ[0].id = 0;
        this.ᐃⵠᐃ[1] = Gf(68, 68, 0, ⵠΔ[341], 3);
        this.ᐃⵠᐃ[1].id = 1;
        this.ᐃⵠᐃ[108] = Gf(68, 68, 0, ⵠΔ[342], 3);
        this.ᐃⵠᐃ[108].id = 108;
        this.ᐃⵠᐃ[109] = Gf(68, 68, 0, ⵠΔ[343], 3);
        this.ᐃⵠᐃ[109].id = 109;
        this.ᐃⵠᐃ[110] = Gf(68, 68, 0, ⵠΔ[269], 3);
        this.ᐃⵠᐃ[110].id = 110;
        this.ᐃⵠᐃ[233] = Gf(68, 68, 0, ⵠΔ[1155], 3);
        this.ᐃⵠᐃ[233].id = 233;
        this.ᐃⵠᐃ[111] = Gf(68, 68, 0, ⵠΔ[270], 3);
        this.ᐃⵠᐃ[111].id = 111;
        this.ᐃⵠᐃ[112] = Gf(68, 68, 0, ⵠΔ[271], 3);
        this.ᐃⵠᐃ[112].id = 112;
        this.ᐃⵠᐃ[3] = Gf(68, 68, 0, ⵠΔ[272], 3);
        this.ᐃⵠᐃ[3].id = 3;
        this.ᐃⵠᐃ[4] = Gf(68, 68, 0, ⵠΔ[344], 3);
        this.ᐃⵠᐃ[4].id = 4;
        this.ᐃⵠᐃ[5] = Gf(68, 68, 0, ⵠΔ[345], 3);
        this.ᐃⵠᐃ[5].id = 5;
        this.ᐃⵠᐃ[57] = Gf(68, 68, 0, ⵠΔ[831], 3);
        this.ᐃⵠᐃ[57].id = 57;
        this.ᐃⵠᐃ[6] = Gf(68, 68, 0, ⵠΔ[346], 3);
        this.ᐃⵠᐃ[6].id = 6;
        this.ᐃⵠᐃ[113] = Gf(68, 68, 0, ⵠΔ[273], 3);
        this.ᐃⵠᐃ[113].id = 113;
        this.ᐃⵠᐃ[114] = Gf(68, 68, 0, ⵠΔ[358], 3);
        this.ᐃⵠᐃ[114].id = 114;
        this.ᐃⵠᐃ[115] = Gf(68, 68, 0, ⵠΔ[348], 3);
        this.ᐃⵠᐃ[115].id = 115;
        this.ᐃⵠᐃ[162] = Gf(68, 68, 0, ⵠΔ[349], 3);
        this.ᐃⵠᐃ[162].id = 162;
        this.ᐃⵠᐃ[160] = Gf(68, 68, 0, ⵠΔ[350], 3);
        this.ᐃⵠᐃ[160].id = 160;
        this.ᐃⵠᐃ[8] = Gf(68, 68, 0, ⵠΔ[274], 3);
        this.ᐃⵠᐃ[8].id = 8;
        this.ᐃⵠᐃ[117] = Gf(68, 68, 0, ⵠΔ[351], 3);
        this.ᐃⵠᐃ[117].id = 117;
        this.ᐃⵠᐃ[116] = Gf(68, 68, 0, ⵠΔ[275], 3);
        this.ᐃⵠᐃ[116].id = 116;
        this.ᐃⵠᐃ[118] = Gf(68, 68, 0, ⵠΔ[276], 3);
        this.ᐃⵠᐃ[118].id = 118;
        this.ᐃⵠᐃ[195] = Gf(68, 68, 0, ⵠΔ[352], 3);
        this.ᐃⵠᐃ[195].id = 195;
        this.ᐃⵠᐃ[161] = Gf(68, 68, 0, ⵠΔ[353], 3);
        this.ᐃⵠᐃ[161].id = 161;
        this.ᐃⵠᐃ[163] = Gf(68, 68, 0, ⵠΔ[354], 3);
        this.ᐃⵠᐃ[163].id = 163;
        this.ᐃⵠᐃ[164] = Gf(68, 68, 0, ⵠΔ[355], 3);
        this.ᐃⵠᐃ[164].id = 164;
        this.ᐃⵠᐃ[165] = Gf(68, 68, 0, ⵠΔ[356], 3);
        this.ᐃⵠᐃ[165].id = 165;
        this.ᐃⵠᐃ[166] = Gf(68, 68, 0, ⵠΔ[357], 3);
        this.ᐃⵠᐃ[166].id = 166;
        this.ᐃⵠᐃ[167] = Gf(68, 68, 0, ⵠΔ[359], 3);
        this.ᐃⵠᐃ[167].id = 167;
        this.ᐃⵠᐃ[168] = Gf(68, 68, 0, ⵠΔ[382], 3);
        this.ᐃⵠᐃ[168].id = 168;
        this.ᐃⵠᐃ[169] = Gf(68, 68, 0, ⵠΔ[383], 3);
        this.ᐃⵠᐃ[169].id = 169;
        this.ᐃⵠᐃ[170] = Gf(68, 68, 0, ⵠΔ[384], 3);
        this.ᐃⵠᐃ[170].id = 170;
        this.ᐃⵠᐃ[2] = Gf(68, 68, 0, ⵠΔ[386], 3);
        this.ᐃⵠᐃ[2].id = 2;
        this.ᐃⵠᐃ[237] = Gf(68, 68, 0, ⵠΔ[1163], 3);
        this.ᐃⵠᐃ[237].id = 237;
        this.ᐃⵠᐃ[174] = Gf(68, 68, 0, ⵠΔ[394], 3);
        this.ᐃⵠᐃ[174].id = 174;
        this.ᐃⵠᐃ[222] = Gf(68, 68, 0, ⵠΔ[1036], 3);
        this.ᐃⵠᐃ[222].id = 222;
        this.ᐃⵠᐃ[231] = Gf(68, 68, 0, ⵠΔ[1038], 3);
        this.ᐃⵠᐃ[231].id = 231;
        this.ᐃⵠᐃ[232] = Gf(68, 68, 0, ⵠΔ[1040], 3);
        this.ᐃⵠᐃ[232].id = 232;
        this.ᐃⵠᐃ[234] = Gf(68, 68, 0, ⵠΔ[1157], 3);
        this.ᐃⵠᐃ[234].id = 234;
        this.ᐃⵠᐃ[10] = Gf(68, 68, 0, ⵠΔ[387], 3);
        this.ᐃⵠᐃ[10].id = 10;
        this.ᐃⵠᐃ[171] = Gf(68, 68, 0, ⵠΔ[388], 3);
        this.ᐃⵠᐃ[171].id = 171;
        this.ᐃⵠᐃ[172] = Gf(68, 68, 0, ⵠΔ[389], 3);
        this.ᐃⵠᐃ[172].id = 172;
        this.ᐃⵠᐃ[173] = Gf(68, 68, 0, ⵠΔ[390], 3);
        this.ᐃⵠᐃ[173].id = 173;
        this.ᐃⵠᐃ[11] = Gf(68, 68, 0, ⵠΔ[391], 3);
        this.ᐃⵠᐃ[11].id = 11;
        this.ᐃⵠᐃ[12] = Gf(68, 68, 0, ⵠΔ[403], 3);
        this.ᐃⵠᐃ[12].id = 12;
        this.ᐃⵠᐃ[13] = Gf(68, 68, 0, ⵠΔ[397], 3);
        this.ᐃⵠᐃ[13].id = 13;
        this.ᐃⵠᐃ[14] = Gf(68, 68, 0, ⵠΔ[400], 3);
        this.ᐃⵠᐃ[14].id = 14;
        this.ᐃⵠᐃ[15] = Gf(68, 68, 0, ⵠΔ[406], 3);
        this.ᐃⵠᐃ[15].id = 15;
        this.ᐃⵠᐃ[16] = Gf(68, 68, 0, ⵠΔ[875], 3);
        this.ᐃⵠᐃ[16].id = 16;
        this.ᐃⵠᐃ[119] = Gf(68, 68, 0, ⵠΔ[410], 3);
        this.ᐃⵠᐃ[119].id = 119;
        this.ᐃⵠᐃ[23] = Gf(68, 68, 0, ⵠΔ[422], 3);
        this.ᐃⵠᐃ[23].id = 23;
        this.ᐃⵠᐃ[24] = Gf(68, 68, 0, ⵠΔ[425], 3);
        this.ᐃⵠᐃ[24].id = 24;
        this.ᐃⵠᐃ[87] = Gf(68, 68, 0, ⵠΔ[1229], 3);
        this.ᐃⵠᐃ[87].id = 87;
        this.ᐃⵠᐃ[88] = Gf(68, 68, 0, ⵠΔ[1232], 3);
        this.ᐃⵠᐃ[88].id = 88;
        this.ᐃⵠᐃ[80] = Gf(68, 68, 0, ⵠΔ[1139], 3);
        this.ᐃⵠᐃ[80].id = 80;
        this.ᐃⵠᐃ[81] = Gf(68, 68, 0, ⵠΔ[1142], 3);
        this.ᐃⵠᐃ[81].id = 81;
        this.ᐃⵠᐃ[101] = Gf(68, 68, 0, ⵠΔ[1167], 3);
        this.ᐃⵠᐃ[101].id = 101;
        this.ᐃⵠᐃ[64] = Gf(68, 68, 0, ⵠΔ[571], 3);
        this.ᐃⵠᐃ[64].id = 64;
        this.ᐃⵠᐃ[71] = Gf(68, 68, 0, ⵠΔ[1240], 3);
        this.ᐃⵠᐃ[71].id = 71;
        this.ᐃⵠᐃ[102] = Gf(68, 68, 0, ⵠΔ[1170], 3);
        this.ᐃⵠᐃ[102].id = 102;
        this.ᐃⵠᐃ[65] = Gf(68, 68, 0, ⵠΔ[574], 3);
        this.ᐃⵠᐃ[65].id = 65;
        this.ᐃⵠᐃ[72] = Gf(68, 68, 0, ⵠΔ[1243], 3);
        this.ᐃⵠᐃ[72].id = 72;
        this.ᐃⵠᐃ[103] = Gf(68, 68, 0, ⵠΔ[1173], 3);
        this.ᐃⵠᐃ[103].id = 103;
        this.ᐃⵠᐃ[66] = Gf(68, 68, 0, ⵠΔ[577], 3);
        this.ᐃⵠᐃ[66].id = 66;
        this.ᐃⵠᐃ[73] = Gf(68, 68, 0, ⵠΔ[1246], 3);
        this.ᐃⵠᐃ[73].id = 73;
        this.ᐃⵠᐃ[104] = Gf(68, 68, 0, ⵠΔ[1176], 3);
        this.ᐃⵠᐃ[104].id = 104;
        this.ᐃⵠᐃ[67] = Gf(68, 68, 0, ⵠΔ[580], 3);
        this.ᐃⵠᐃ[67].id = 67;
        this.ᐃⵠᐃ[74] = Gf(68, 68, 0, ⵠΔ[1249], 3);
        this.ᐃⵠᐃ[74].id = 74;
        this.ᐃⵠᐃ[105] = Gf(68, 68, 0, ⵠΔ[1179], 3);
        this.ᐃⵠᐃ[105].id = 105;
        this.ᐃⵠᐃ[68] = Gf(68, 68, 0, ⵠΔ[583], 3);
        this.ᐃⵠᐃ[68].id = 68;
        this.ᐃⵠᐃ[75] = Gf(68, 68, 0, ⵠΔ[1252], 3);
        this.ᐃⵠᐃ[75].id = 75;
        this.ᐃⵠᐃ[106] = Gf(68, 68, 0, ⵠΔ[1182], 3);
        this.ᐃⵠᐃ[106].id = 106;
        this.ᐃⵠᐃ[69] = Gf(68, 68, 0, ⵠΔ[586], 3);
        this.ᐃⵠᐃ[69].id = 69;
        this.ᐃⵠᐃ[76] = Gf(68, 68, 0, ⵠΔ[1255], 3);
        this.ᐃⵠᐃ[76].id = 76;
        this.ᐃⵠᐃ[107] = Gf(68, 68, 0, ⵠΔ[1185], 3);
        this.ᐃⵠᐃ[107].id = 107;
        this.ᐃⵠᐃ[70] = Gf(68, 68, 0, ⵠΔ[589], 3);
        this.ᐃⵠᐃ[70].id = 70;
        this.ᐃⵠᐃ[94] = Gf(68, 68, 0, ⵠΔ[1258], 3);
        this.ᐃⵠᐃ[94].id = 94;
        this.ᐃⵠᐃ[95] = Gf(68, 68, 0, ⵠΔ[1261], 3);
        this.ᐃⵠᐃ[95].id = 95;
        this.ᐃⵠᐃ[96] = Gf(68, 68, 0, ⵠΔ[1264], 3);
        this.ᐃⵠᐃ[96].id = 96;
        this.ᐃⵠᐃ[97] = Gf(68, 68, 0, ⵠΔ[1267], 3);
        this.ᐃⵠᐃ[97].id = 97;
        this.ᐃⵠᐃ[98] = Gf(68, 68, 0, ⵠΔ[1270], 3);
        this.ᐃⵠᐃ[98].id = 98;
        this.ᐃⵠᐃ[99] = Gf(68, 68, 0, ⵠΔ[1273], 3);
        this.ᐃⵠᐃ[99].id = 99;
        this.ᐃⵠᐃ[58] = Gf(68, 68, 0, ⵠΔ[828], 3);
        this.ᐃⵠᐃ[58].id = 58;
        this.ᐃⵠᐃ[25] = Gf(68, 68, 0, ⵠΔ[431], 3);
        this.ᐃⵠᐃ[25].id = 25;
        this.ᐃⵠᐃ[26] = Gf(68, 68, 0, ⵠΔ[434], 3);
        this.ᐃⵠᐃ[26].id = 26;
        this.ᐃⵠᐃ[27] = Gf(68, 68, 0, ⵠΔ[437], 3);
        this.ᐃⵠᐃ[27].id = 27;
        this.ᐃⵠᐃ[28] = Gf(68, 68, 0, ⵠΔ[440], 3);
        this.ᐃⵠᐃ[28].id = 28;
        this.ᐃⵠᐃ[120] = Gf(68, 68, 0, ⵠΔ[443], 3);
        this.ᐃⵠᐃ[120].id = 120;
        this.ᐃⵠᐃ[29] = Gf(68, 68, 0, ⵠΔ[385], 3);
        this.ᐃⵠᐃ[29].id = 29;
        this.ᐃⵠᐃ[121] = Gf(68, 68, 0, ⵠΔ[446], 3);
        this.ᐃⵠᐃ[121].id = 121;
        this.ᐃⵠᐃ[30] = Gf(68, 68, 0, ⵠΔ[457], 3);
        this.ᐃⵠᐃ[30].id = 30;
        this.ᐃⵠᐃ[9] = Gf(68, 68, 0, ⵠΔ[862], 3);
        this.ᐃⵠᐃ[9].id = 9;
        this.ᐃⵠᐃ[31] = Gf(68, 68, 0, ⵠΔ[459], 3);
        this.ᐃⵠᐃ[31].id = 31;
        this.ᐃⵠᐃ[32] = Gf(68, 68, 0, ⵠΔ[1018], 3);
        this.ᐃⵠᐃ[32].id = 32;
        this.ᐃⵠᐃ[33] = Gf(68, 68, 0, ⵠΔ[474], 3);
        this.ᐃⵠᐃ[33].id = 33;
        this.ᐃⵠᐃ[35] = Gf(68, 68, 0, ⵠΔ[479], 3);
        this.ᐃⵠᐃ[35].id = 35;
        this.ᐃⵠᐃ[36] = Gf(68, 68, 0, ⵠΔ[482], 3);
        this.ᐃⵠᐃ[36].id = 36;
        this.ᐃⵠᐃ[37] = Gf(68, 68, 0, ⵠΔ[485], 3);
        this.ᐃⵠᐃ[37].id = 37;
        this.ᐃⵠᐃ[38] = Gf(68, 68, 0, ⵠΔ[488], 3);
        this.ᐃⵠᐃ[38].id = 38;
        this.ᐃⵠᐃ[39] = Gf(68, 68, 0, ⵠΔ[491], 3);
        this.ᐃⵠᐃ[39].id = 39;
        this.ᐃⵠᐃ[122] = Gf(68, 68, 0, ⵠΔ[494], 3);
        this.ᐃⵠᐃ[122].id = 122;
        this.ᐃⵠᐃ[123] = Gf(68, 68, 0, ⵠΔ[497], 3);
        this.ᐃⵠᐃ[123].id = 123;
        this.ᐃⵠᐃ[124] = Gf(68, 68, 0, ⵠΔ[501], 3);
        this.ᐃⵠᐃ[124].id = 124;
        this.ᐃⵠᐃ[40] = Gf(68, 68, 0, ⵠΔ[504], 3);
        this.ᐃⵠᐃ[40].id = 40;
        this.ᐃⵠᐃ[146] = Gf(68, 68, 0, ⵠΔ[506], 3);
        this.ᐃⵠᐃ[146].id = 146;
        this.ᐃⵠᐃ[240] = Gf(68, 68, 0, ⵠΔ[1234], 3);
        this.ᐃⵠᐃ[240].id = 240;
        this.ᐃⵠᐃ[147] = Gf(68, 68, 0, ⵠΔ[514], 3);
        this.ᐃⵠᐃ[147].id = 147;
        this.ᐃⵠᐃ[148] = Gf(68, 68, 0, ⵠΔ[520], 3);
        this.ᐃⵠᐃ[148].id = 148;
        this.ᐃⵠᐃ[149] = Gf(68, 68, 0, ⵠΔ[522], 3);
        this.ᐃⵠᐃ[149].id = 149;
        this.ᐃⵠᐃ[150] = Gf(68, 68, 0, ⵠΔ[524], 3);
        this.ᐃⵠᐃ[150].id = 150;
        this.ᐃⵠᐃ[151] = Gf(68, 68, 0, ⵠΔ[531], 3);
        this.ᐃⵠᐃ[151].id = 151;
        this.ᐃⵠᐃ[158] = Gf(68, 68, 0, ⵠΔ[534], 3);
        this.ᐃⵠᐃ[158].id = 158;
        this.ᐃⵠᐃ[159] = Gf(68, 68, 0, ⵠΔ[554], 3);
        this.ᐃⵠᐃ[159].id = 159;
        this.ᐃⵠᐃ[43] = Gf(68, 68, 0, ⵠΔ[543], 3);
        this.ᐃⵠᐃ[43].id = 43;
        this.ᐃⵠᐃ[45] = Gf(68, 68, 0, ⵠΔ[552], 3);
        this.ᐃⵠᐃ[45].id = 45;
        this.ᐃⵠᐃ[125] = Gf(68, 68, 0, ⵠΔ[606], 3);
        this.ᐃⵠᐃ[125].id = 125;
        this.ᐃⵠᐃ[221] = Gf(68, 68, 0, ⵠΔ[1237], 3);
        this.ᐃⵠᐃ[221].id = 221;
        this.ᐃⵠᐃ[223] = Gf(68, 68, 0, ⵠΔ[1029], 3);
        this.ᐃⵠᐃ[223].id = 223;
        this.ᐃⵠᐃ[224] = Gf(68, 68, 0, ⵠΔ[1032], 3);
        this.ᐃⵠᐃ[224].id = 224;
        this.ᐃⵠᐃ[230] = Gf(68, 68, 0, ⵠΔ[1118], 3);
        this.ᐃⵠᐃ[230].id = 230;
        this.ᐃⵠᐃ[89] = Gf(68, 68, 0, ⵠΔ[1047], 3);
        this.ᐃⵠᐃ[89].id = 89;
        this.ᐃⵠᐃ[225] = Gf(68, 68, 0, ⵠΔ[1050], 3);
        this.ᐃⵠᐃ[225].id = 225;
        this.ᐃⵠᐃ[227] = Gf(68, 68, 0, ⵠΔ[1081], 3);
        this.ᐃⵠᐃ[227].id = 227;
        this.ᐃⵠᐃ[239] = Gf(68, 68, 0, ⵠΔ[1225], 3);
        this.ᐃⵠᐃ[239].id = 239;
        this.ᐃⵠᐃ[228] = Gf(68, 68, 0, ⵠΔ[1096], 3);
        this.ᐃⵠᐃ[228].id = 228;
        this.ᐃⵠᐃ[229] = Gf(68, 68, 0, ⵠΔ[1111], 3);
        this.ᐃⵠᐃ[229].id = 229;
        this.ᐃⵠᐃ[226] = Gf(68, 68, 0, ⵠΔ[1190], 3);
        this.ᐃⵠᐃ[226].id = 226;
        this.ᐃⵠᐃ[126] = Gf(68, 68, 0, ⵠΔ[610], 3);
        this.ᐃⵠᐃ[126].id = 126;
        this.ᐃⵠᐃ[127] = Gf(68, 68, 0, ⵠΔ[615], 3);
        this.ᐃⵠᐃ[127].id = 127;
        this.ᐃⵠᐃ[128] = Gf(68, 68, 0, ⵠΔ[614], 3);
        this.ᐃⵠᐃ[128].id = 128;
        this.ᐃⵠᐃ[46] = Gf(68, 68, 0, ⵠΔ[617], 3);
        this.ᐃⵠᐃ[46].id = 46;
        this.ᐃⵠᐃ[50] = Gf(68, 68, 0, ⵠΔ[701], 3);
        this.ᐃⵠᐃ[50].id = 50;
        this.ᐃⵠᐃ[51] = Gf(68, 68, 0, ⵠΔ[703], 3);
        this.ᐃⵠᐃ[51].id = 51;
        this.ᐃⵠᐃ[52] = Gf(68, 68, 0, ⵠΔ[707], 3);
        this.ᐃⵠᐃ[52].id = 52;
        this.ᐃⵠᐃ[55] = Gf(68, 68, 0, ⵠΔ[710], 3);
        this.ᐃⵠᐃ[55].id = 55;
        this.ᐃⵠᐃ[129] = Gf(68, 68, 0, ⵠΔ[625], 3);
        this.ᐃⵠᐃ[129].id = 129;
        this.ᐃⵠᐃ[130] = Gf(68, 68, 0, ⵠΔ[628], 3);
        this.ᐃⵠᐃ[130].id = 130;
        this.ᐃⵠᐃ[131] = Gf(68, 68, 0, ⵠΔ[630], 3);
        this.ᐃⵠᐃ[131].id = 131;
        this.ᐃⵠᐃ[132] = Gf(68, 68, 0, ⵠΔ[633], 3);
        this.ᐃⵠᐃ[132].id = 132;
        this.ᐃⵠᐃ[133] = Gf(68, 68, 0, ⵠΔ[636], 3);
        this.ᐃⵠᐃ[133].id = 133;
        this.ᐃⵠᐃ[134] = Gf(68, 68, 0, ⵠΔ[640], 3);
        this.ᐃⵠᐃ[134].id = 134;
        this.ᐃⵠᐃ[135] = Gf(68, 68, 0, ⵠΔ[645], 3);
        this.ᐃⵠᐃ[135].id = 135;
        this.ᐃⵠᐃ[47] = Gf(68, 68, 0, ⵠΔ[648], 3);
        this.ᐃⵠᐃ[47].id = 47;
        this.ᐃⵠᐃ[48] = Gf(68, 68, 0, ⵠΔ[651], 3);
        this.ᐃⵠᐃ[48].id = 48;
        this.ᐃⵠᐃ[49] = Gf(68, 68, 0, ⵠΔ[653], 3);
        this.ᐃⵠᐃ[49].id = 49;
        this.ᐃⵠᐃ[136] = Gf(68, 68, 0, ⵠΔ[661], 3);
        this.ᐃⵠᐃ[136].id = 136;
        this.ᐃⵠᐃ[143] = Gf(68, 68, 0, ⵠΔ[689], 3);
        this.ᐃⵠᐃ[143].id = 143;
        this.ᐃⵠᐃ[137] = Gf(68, 68, 0, ⵠΔ[663], 3);
        this.ᐃⵠᐃ[137].id = 137;
        this.ᐃⵠᐃ[138] = Gf(68, 68, 0, ⵠΔ[665], 3);
        this.ᐃⵠᐃ[138].id = 138;
        this.ᐃⵠᐃ[139] = Gf(68, 68, 0, ⵠΔ[675], 3);
        this.ᐃⵠᐃ[139].id = 139;
        this.ᐃⵠᐃ[140] = Gf(68, 68, 0, ⵠΔ[682], 3);
        this.ᐃⵠᐃ[140].id = 140;
        this.ᐃⵠᐃ[141] = Gf(68, 68, 0, ⵠΔ[683], 3);
        this.ᐃⵠᐃ[141].id = 141;
        this.ᐃⵠᐃ[142] = Gf(68, 68, 0, ⵠΔ[686], 3);
        this.ᐃⵠᐃ[142].id = 142;
        this.ᐃⵠᐃ[144] = Gf(68, 68, 0, ⵠΔ[719], 3);
        this.ᐃⵠᐃ[144].id = 144;
        this.ᐃⵠᐃ[145] = Gf(68, 68, 0, ⵠΔ[731], 3);
        this.ᐃⵠᐃ[145].id = 145;
        this.ᐃⵠᐃ[59] = Gf(68, 68, 0, ⵠΔ[733], 3);
        this.ᐃⵠᐃ[59].id = 59;
        this.ᐃⵠᐃ[62] = Gf(68, 68, 0, ⵠΔ[565], 3);
        this.ᐃⵠᐃ[62].id = 62;
        this.ᐃⵠᐃ[185] = Gf(68, 68, 0, ⵠΔ[590], 3);
        this.ᐃⵠᐃ[185].id = 185;
        this.ᐃⵠᐃ[184] = Gf(68, 68, 0, ⵠΔ[752], 3);
        this.ᐃⵠᐃ[184].id = 184;
        this.ᐃⵠᐃ[187] = Gf(68, 68, 0, ⵠΔ[591], 3);
        this.ᐃⵠᐃ[187].id = 187;
        this.ᐃⵠᐃ[186] = Gf(68, 68, 0, ⵠΔ[754], 3);
        this.ᐃⵠᐃ[186].id = 186;
        this.ᐃⵠᐃ[77] = Gf(68, 68, 0, ⵠΔ[757], 3);
        this.ᐃⵠᐃ[77].id = 77;
        this.ᐃⵠᐃ[175] = Gf(68, 68, 0, ⵠΔ[759], 3);
        this.ᐃⵠᐃ[175].id = 175;
        this.ᐃⵠᐃ[176] = Gf(68, 68, 0, ⵠΔ[763], 3);
        this.ᐃⵠᐃ[176].id = 176;
        this.ᐃⵠᐃ[78] = Gf(68, 68, 0, ⵠΔ[761], 3);
        this.ᐃⵠᐃ[78].id = 78;
        this.ᐃⵠᐃ[177] = Gf(68, 68, 0, ⵠΔ[766], 3);
        this.ᐃⵠᐃ[177].id = 177;
        this.ᐃⵠᐃ[79] = Gf(68, 68, 0, ⵠΔ[765], 3);
        this.ᐃⵠᐃ[79].id = 79;
        this.ᐃⵠᐃ[83] = Gf(68, 68, 0, ⵠΔ[769], 3);
        this.ᐃⵠᐃ[83].id = 83;
        this.ᐃⵠᐃ[84] = Gf(68, 68, 0, ⵠΔ[773], 3);
        this.ᐃⵠᐃ[84].id = 84;
        this.ᐃⵠᐃ[178] = Gf(68, 68, 0, ⵠΔ[774], 3);
        this.ᐃⵠᐃ[178].id = 178;
        this.ᐃⵠᐃ[179] = Gf(68, 68, 0, ⵠΔ[775], 3);
        this.ᐃⵠᐃ[179].id = 179;
        this.ᐃⵠᐃ[86] = Gf(68, 68, 0, ⵠΔ[778], 3);
        this.ᐃⵠᐃ[86].id = 86;
        this.ᐃⵠᐃ[85] = Gf(68, 68, 0, ⵠΔ[781], 3);
        this.ᐃⵠᐃ[85].id = 85;
        this.ᐃⵠᐃ[180] = Gf(68, 68, 0, ⵠΔ[786], 3);
        this.ᐃⵠᐃ[180].id = 180;
        this.ᐃⵠᐃ[181] = Gf(68, 68, 0, ⵠΔ[787], 3);
        this.ᐃⵠᐃ[181].id = 181;
        this.ᐃⵠᐃ[182] = Gf(68, 68, 0, ⵠΔ[790], 3);
        this.ᐃⵠᐃ[182].id = 182;
        this.ᐃⵠᐃ[183] = Gf(68, 68, 0, ⵠΔ[801], 3);
        this.ᐃⵠᐃ[183].id = 183;
        this.ᐃⵠᐃ[188] = Gf(68, 68, 0, ⵠΔ[810], 3);
        this.ᐃⵠᐃ[188].id = 188;
        this.ᐃⵠᐃ[189] = Gf(68, 68, 0, ⵠΔ[815], 3);
        this.ᐃⵠᐃ[189].id = 189;
        this.ᐃⵠᐃ[190] = Gf(68, 68, 0, ⵠΔ[844], 3);
        this.ᐃⵠᐃ[190].id = 190;
        this.ᐃⵠᐃ[191] = Gf(68, 68, 0, ⵠΔ[836], 3);
        this.ᐃⵠᐃ[191].id = 191;
        this.ᐃⵠᐃ[192] = Gf(68, 68, 0, ⵠΔ[841], 3);
        this.ᐃⵠᐃ[192].id = 192;
        this.ᐃⵠᐃ[193] = Gf(68, 68, 0, ⵠΔ[847], 3);
        this.ᐃⵠᐃ[193].id = 193;
        this.ᐃⵠᐃ[194] = Gf(68, 68, 0, ⵠΔ[851], 3);
        this.ᐃⵠᐃ[194].id = 194;
        this.ᐃⵠᐃ[206] = Gf(68, 68, 0, ⵠΔ[961], 3);
        this.ᐃⵠᐃ[206].id = 206;
        this.ᐃⵠᐃ[207] = Gf(68, 68, 0, ⵠΔ[974], 3);
        this.ᐃⵠᐃ[207].id = 207;
        this.ᐃⵠᐃ[204] = Gf(68, 68, 0, ⵠΔ[951], 3);
        this.ᐃⵠᐃ[204].id = 204;
        this.ᐃⵠᐃ[205] = Gf(68, 68, 0, ⵠΔ[956], 3);
        this.ᐃⵠᐃ[205].id = 205;
        this.ᐃⵠᐃ[208] = Gf(68, 68, 0, ⵠΔ[968], 3);
        this.ᐃⵠᐃ[208].id = 208;
        this.ᐃⵠᐃ[209] = Gf(68, 68, 0, ⵠΔ[973], 3);
        this.ᐃⵠᐃ[209].id = 209;
        this.ᐃⵠᐃ[210] = Gf(68, 68, 0, ⵠΔ[983], 3);
        this.ᐃⵠᐃ[210].id = 210;
        this.ᐃⵠᐃ[211] = Gf(68, 68, 0, ⵠΔ[988], 3);
        this.ᐃⵠᐃ[211].id = 211;
        this.ᐃⵠᐃ[41] = Gf(68, 68, 0, ⵠΔ[881], 3);
        this.ᐃⵠᐃ[41].id = 41;
        this.ᐃⵠᐃ[42] = Gf(68, 68, 0, ⵠΔ[883], 3);
        this.ᐃⵠᐃ[42].id = 42;
        this.ᐃⵠᐃ[12] = Gf(68, 68, 0, ⵠΔ[403], 3);
        this.ᐃⵠᐃ[12].id = 12;
        this.ᐃⵠᐃ[16] = Gf(68, 68, 0, ⵠΔ[875], 3);
        this.ᐃⵠᐃ[16].id = 16;
        this.ᐃⵠᐃ[196] = Gf(68, 68, 0, ⵠΔ[898], 3);
        this.ᐃⵠᐃ[196].id = 196;
        this.ᐃⵠᐃ[18] = Gf(68, 68, 0, ⵠΔ[899], 3);
        this.ᐃⵠᐃ[18].id = 18;
        this.ᐃⵠᐃ[197] = Gf(68, 68, 0, ⵠΔ[906], 3);
        this.ᐃⵠᐃ[197].id = 197;
        this.ᐃⵠᐃ[198] = Gf(68, 68, 0, ⵠΔ[908], 3);
        this.ᐃⵠᐃ[198].id = 198;
        this.ᐃⵠᐃ[61] = Gf(68, 68, 0, ⵠΔ[911], 3);
        this.ᐃⵠᐃ[61].id = 61;
        this.ᐃⵠᐃ[201] = Gf(68, 68, 0, ⵠΔ[871], 3);
        this.ᐃⵠᐃ[201].id = 201;
        this.ᐃⵠᐃ[199] = Gf(68, 68, 0, ⵠΔ[863], 3);
        this.ᐃⵠᐃ[199].id = 199;
        this.ᐃⵠᐃ[200] = Gf(68, 68, 0, ⵠΔ[868], 3);
        this.ᐃⵠᐃ[200].id = 200;
        this.ⵠⵠⵠΔⵠ = [];
        for (k = 0; k < 250; k++) {
            this.ⵠⵠⵠΔⵠ[k] = Gf(0, 0, 0, ⵠΔ[366]);
        }
        this.ᐃᐃⵠ = [];
        this.ᐃᐃⵠ[0] = Gf(60, 60, 0, ⵠΔ[261], 3);
        this.ᐃᐃⵠ[0].id = 0;
        this.ᐃᐃⵠ[1] = Gf(60, 60, 0, ⵠΔ[312], 3);
        this.ᐃᐃⵠ[1].id = 1;
        this.ᐃᐃⵠ[108] = Gf(60, 60, 0, ⵠΔ[315], 3);
        this.ᐃᐃⵠ[108].id = 108;
        this.ᐃᐃⵠ[108].info.ΔⲆ[2] = this.ᐃᐃⵠ[108].info.ΔⲆ[0];
        this.ᐃᐃⵠ[109] = Gf(60, 60, 0, ⵠΔ[316], 3);
        this.ᐃᐃⵠ[109].id = 109;
        this.ᐃᐃⵠ[109].info.ΔⲆ[2] = this.ᐃᐃⵠ[109].info.ΔⲆ[0];
        this.ᐃᐃⵠ[110] = Gf(60, 60, 0, ⵠΔ[277], 3);
        this.ᐃᐃⵠ[110].id = 110;
        this.ᐃᐃⵠ[233] = Gf(60, 60, 0, ⵠΔ[1154], 3);
        this.ᐃᐃⵠ[233].id = 233;
        this.ᐃᐃⵠ[111] = Gf(60, 60, 0, ⵠΔ[297], 3);
        this.ᐃᐃⵠ[111].id = 111;
        this.ᐃᐃⵠ[111].info.ΔⲆ[2] = this.ᐃᐃⵠ[111].info.ΔⲆ[0];
        this.ᐃᐃⵠ[112] = Gf(60, 60, 0, ⵠΔ[298], 3);
        this.ᐃᐃⵠ[112].id = 112;
        this.ᐃᐃⵠ[112].info.ΔⲆ[2] = this.ᐃᐃⵠ[112].info.ΔⲆ[0];
        this.ᐃᐃⵠ[3] = Gf(60, 60, 0, ⵠΔ[258], 3);
        this.ᐃᐃⵠ[3].id = 3;
        this.ᐃᐃⵠ[4] = Gf(60, 60, 0, ⵠΔ[296], 3);
        this.ᐃᐃⵠ[4].id = 4;
        this.ᐃᐃⵠ[5] = Gf(60, 60, 0, ⵠΔ[292], 3);
        this.ᐃᐃⵠ[5].id = 5;
        this.ᐃᐃⵠ[57] = Gf(60, 60, 0, ⵠΔ[829], 3);
        this.ᐃᐃⵠ[57].id = 57;
        this.ᐃᐃⵠ[6] = Gf(60, 60, 0, ⵠΔ[293], 3);
        this.ᐃᐃⵠ[6].id = 6;
        this.ᐃᐃⵠ[113] = Gf(60, 60, 0, ⵠΔ[309], 3);
        this.ᐃᐃⵠ[113].id = 113;
        this.ᐃᐃⵠ[114] = Gf(60, 60, 0, ⵠΔ[310], 3);
        this.ᐃᐃⵠ[114].id = 114;
        this.ᐃᐃⵠ[115] = Gf(60, 60, 0, ⵠΔ[311], 3);
        this.ᐃᐃⵠ[115].id = 115;
        this.ᐃᐃⵠ[162] = Gf(60, 60, 0, ⵠΔ[317], 3);
        this.ᐃᐃⵠ[162].id = 162;
        this.ᐃᐃⵠ[160] = Gf(60, 60, 0, ⵠΔ[319], 3);
        this.ᐃᐃⵠ[160].id = 160;
        this.ᐃᐃⵠ[8] = Gf(60, 60, 0, ⵠΔ[313], 3);
        this.ᐃᐃⵠ[8].id = 8;
        this.ᐃᐃⵠ[117] = Gf(60, 60, 0, ⵠΔ[323], 3);
        this.ᐃᐃⵠ[117].id = 117;
        this.ᐃᐃⵠ[116] = Gf(60, 60, 0, ⵠΔ[300], 3);
        this.ᐃᐃⵠ[116].id = 116;
        this.ᐃᐃⵠ[118] = Gf(60, 60, 0, ⵠΔ[328], 3);
        this.ᐃᐃⵠ[118].id = 118;
        this.ᐃᐃⵠ[195] = Gf(60, 60, 0, ⵠΔ[303], 3);
        this.ᐃᐃⵠ[195].id = 195;
        this.ᐃᐃⵠ[161] = Gf(60, 60, 0, ⵠΔ[305], 3);
        this.ᐃᐃⵠ[161].id = 161;
        this.ᐃᐃⵠ[161].info.ΔⲆ[2] = this.ᐃᐃⵠ[161].info.ΔⲆ[0];
        this.ᐃᐃⵠ[163] = Gf(60, 60, 0, ⵠΔ[329], 3);
        this.ᐃᐃⵠ[163].id = 163;
        this.ᐃᐃⵠ[164] = Gf(60, 60, 0, ⵠΔ[330], 3);
        this.ᐃᐃⵠ[164].id = 164;
        this.ᐃᐃⵠ[165] = Gf(60, 60, 0, ⵠΔ[331], 3);
        this.ᐃᐃⵠ[165].id = 165;
        this.ᐃᐃⵠ[166] = Gf(60, 60, 0, ⵠΔ[335], 3);
        this.ᐃᐃⵠ[166].id = 166;
        this.ᐃᐃⵠ[167] = Gf(60, 60, 0, ⵠΔ[337], 3);
        this.ᐃᐃⵠ[167].id = 167;
        this.ᐃᐃⵠ[168] = Gf(60, 60, 0, ⵠΔ[361], 3);
        this.ᐃᐃⵠ[168].id = 168;
        this.ᐃᐃⵠ[169] = Gf(60, 60, 0, ⵠΔ[362], 3);
        this.ᐃᐃⵠ[169].id = 169;
        this.ᐃᐃⵠ[170] = Gf(60, 60, 0, ⵠΔ[364], 3);
        this.ᐃᐃⵠ[170].id = 170;
        this.ᐃᐃⵠ[29] = Gf(60, 60, 0, ⵠΔ[392], 3);
        this.ᐃᐃⵠ[29].id = 29;
        this.ᐃᐃⵠ[10] = Gf(60, 60, 0, ⵠΔ[369], 3);
        this.ᐃᐃⵠ[10].id = 10;
        this.ᐃᐃⵠ[171] = Gf(60, 60, 0, ⵠΔ[372], 3);
        this.ᐃᐃⵠ[171].id = 171;
        this.ᐃᐃⵠ[172] = Gf(60, 60, 0, ⵠΔ[375], 3);
        this.ᐃᐃⵠ[172].id = 172;
        this.ᐃᐃⵠ[173] = Gf(60, 60, 0, ⵠΔ[378], 3);
        this.ᐃᐃⵠ[173].id = 173;
        this.ᐃᐃⵠ[2] = Gf(60, 60, 0, ⵠΔ[368], 3);
        this.ᐃᐃⵠ[2].id = 2;
        this.ᐃᐃⵠ[2].info.ΔⲆ[2] = this.ᐃᐃⵠ[2].info.ΔⲆ[0];
        this.ᐃᐃⵠ[237] = Gf(60, 60, 0, ⵠΔ[1162], 3);
        this.ᐃᐃⵠ[237].id = 237;
        this.ᐃᐃⵠ[237].info.ΔⲆ[2] = this.ᐃᐃⵠ[237].info.ΔⲆ[0];
        this.ᐃᐃⵠ[174] = Gf(60, 60, 0, ⵠΔ[393], 3);
        this.ᐃᐃⵠ[174].id = 174;
        this.ᐃᐃⵠ[174].info.ΔⲆ[2] = this.ᐃᐃⵠ[174].info.ΔⲆ[0];
        this.ᐃᐃⵠ[222] = Gf(60, 60, 0, ⵠΔ[1035], 3);
        this.ᐃᐃⵠ[222].id = 222;
        this.ᐃᐃⵠ[231] = Gf(60, 60, 0, ⵠΔ[1037], 3);
        this.ᐃᐃⵠ[231].id = 231;
        this.ᐃᐃⵠ[232] = Gf(60, 60, 0, ⵠΔ[1039], 3);
        this.ᐃᐃⵠ[232].id = 232;
        this.ᐃᐃⵠ[234] = Gf(60, 60, 0, ⵠΔ[1156], 3);
        this.ᐃᐃⵠ[234].id = 234;
        this.ᐃᐃⵠ[10] = Gf(60, 60, 0, ⵠΔ[369], 3);
        this.ᐃᐃⵠ[10].id = 10;
        this.ᐃᐃⵠ[11] = Gf(60, 60, 0, ⵠΔ[381], 3);
        this.ᐃᐃⵠ[11].id = 11;
        this.ᐃᐃⵠ[12] = Gf(60, 60, 0, ⵠΔ[401], 3);
        this.ᐃᐃⵠ[12].id = 12;
        this.ᐃᐃⵠ[13] = Gf(60, 60, 0, ⵠΔ[395], 3);
        this.ᐃᐃⵠ[13].id = 13;
        this.ᐃᐃⵠ[14] = Gf(60, 60, 0, ⵠΔ[398], 3);
        this.ᐃᐃⵠ[14].id = 14;
        this.ᐃᐃⵠ[15] = Gf(60, 60, 0, ⵠΔ[404], 3);
        this.ᐃᐃⵠ[15].id = 15;
        this.ᐃᐃⵠ[16] = Gf(60, 60, 0, ⵠΔ[874], 3);
        this.ᐃᐃⵠ[16].id = 16;
        this.ᐃᐃⵠ[119] = Gf(60, 60, 0, ⵠΔ[408], 3);
        this.ᐃᐃⵠ[119].id = 119;
        this.ᐃᐃⵠ[23] = Gf(60, 60, 0, ⵠΔ[420], 3);
        this.ᐃᐃⵠ[23].id = 23;
        this.ᐃᐃⵠ[24] = Gf(60, 60, 0, ⵠΔ[423], 3);
        this.ᐃᐃⵠ[24].id = 24;
        this.ᐃᐃⵠ[87] = Gf(60, 60, 0, ⵠΔ[1227], 3);
        this.ᐃᐃⵠ[87].id = 87;
        this.ᐃᐃⵠ[88] = Gf(60, 60, 0, ⵠΔ[1230], 3);
        this.ᐃᐃⵠ[88].id = 88;
        this.ᐃᐃⵠ[80] = Gf(60, 60, 0, ⵠΔ[1137], 3);
        this.ᐃᐃⵠ[80].id = 80;
        this.ᐃᐃⵠ[81] = Gf(60, 60, 0, ⵠΔ[1140], 3);
        this.ᐃᐃⵠ[81].id = 81;
        this.ᐃᐃⵠ[64] = Gf(60, 60, 0, ⵠΔ[569], 3);
        this.ᐃᐃⵠ[64].id = 64;
        this.ᐃᐃⵠ[101] = Gf(60, 60, 0, ⵠΔ[1166], 3);
        this.ᐃᐃⵠ[101].id = 101;
        this.ᐃᐃⵠ[71] = Gf(60, 60, 0, ⵠΔ[1239], 3);
        this.ᐃᐃⵠ[71].id = 71;
        this.ᐃᐃⵠ[65] = Gf(60, 60, 0, ⵠΔ[572], 3);
        this.ᐃᐃⵠ[65].id = 65;
        this.ᐃᐃⵠ[102] = Gf(60, 60, 0, ⵠΔ[1169], 3);
        this.ᐃᐃⵠ[102].id = 102;
        this.ᐃᐃⵠ[72] = Gf(60, 60, 0, ⵠΔ[1242], 3);
        this.ᐃᐃⵠ[72].id = 72;
        this.ᐃᐃⵠ[66] = Gf(60, 60, 0, ⵠΔ[575], 3);
        this.ᐃᐃⵠ[66].id = 66;
        this.ᐃᐃⵠ[103] = Gf(60, 60, 0, ⵠΔ[1172], 3);
        this.ᐃᐃⵠ[103].id = 103;
        this.ᐃᐃⵠ[73] = Gf(60, 60, 0, ⵠΔ[1245], 3);
        this.ᐃᐃⵠ[73].id = 73;
        this.ᐃᐃⵠ[67] = Gf(60, 60, 0, ⵠΔ[578], 3);
        this.ᐃᐃⵠ[67].id = 67;
        this.ᐃᐃⵠ[104] = Gf(60, 60, 0, ⵠΔ[1175], 3);
        this.ᐃᐃⵠ[104].id = 104;
        this.ᐃᐃⵠ[74] = Gf(60, 60, 0, ⵠΔ[1248], 3);
        this.ᐃᐃⵠ[74].id = 74;
        this.ᐃᐃⵠ[68] = Gf(60, 60, 0, ⵠΔ[581], 3);
        this.ᐃᐃⵠ[68].id = 68;
        this.ᐃᐃⵠ[105] = Gf(60, 60, 0, ⵠΔ[1178], 3);
        this.ᐃᐃⵠ[105].id = 105;
        this.ᐃᐃⵠ[75] = Gf(60, 60, 0, ⵠΔ[1251], 3);
        this.ᐃᐃⵠ[75].id = 75;
        this.ᐃᐃⵠ[69] = Gf(60, 60, 0, ⵠΔ[584], 3);
        this.ᐃᐃⵠ[69].id = 69;
        this.ᐃᐃⵠ[106] = Gf(60, 60, 0, ⵠΔ[1181], 3);
        this.ᐃᐃⵠ[106].id = 106;
        this.ᐃᐃⵠ[76] = Gf(60, 60, 0, ⵠΔ[1254], 3);
        this.ᐃᐃⵠ[76].id = 76;
        this.ᐃᐃⵠ[70] = Gf(60, 60, 0, ⵠΔ[587], 3);
        this.ᐃᐃⵠ[70].id = 70;
        this.ᐃᐃⵠ[107] = Gf(60, 60, 0, ⵠΔ[1184], 3);
        this.ᐃᐃⵠ[107].id = 107;
        this.ᐃᐃⵠ[94] = Gf(60, 60, 0, ⵠΔ[1257], 3);
        this.ᐃᐃⵠ[94].id = 94;
        this.ᐃᐃⵠ[95] = Gf(60, 60, 0, ⵠΔ[1260], 3);
        this.ᐃᐃⵠ[95].id = 95;
        this.ᐃᐃⵠ[96] = Gf(60, 60, 0, ⵠΔ[1263], 3);
        this.ᐃᐃⵠ[96].id = 96;
        this.ᐃᐃⵠ[97] = Gf(60, 60, 0, ⵠΔ[1266], 3);
        this.ᐃᐃⵠ[97].id = 97;
        this.ᐃᐃⵠ[98] = Gf(60, 60, 0, ⵠΔ[1269], 3);
        this.ᐃᐃⵠ[98].id = 98;
        this.ᐃᐃⵠ[99] = Gf(60, 60, 0, ⵠΔ[1272], 3);
        this.ᐃᐃⵠ[99].id = 99;
        this.ᐃᐃⵠ[58] = Gf(60, 60, 0, ⵠΔ[826], 3);
        this.ᐃᐃⵠ[58].id = 58;
        this.ᐃᐃⵠ[25] = Gf(60, 60, 0, ⵠΔ[429], 3);
        this.ᐃᐃⵠ[25].id = 25;
        this.ᐃᐃⵠ[26] = Gf(60, 60, 0, ⵠΔ[432], 3);
        this.ᐃᐃⵠ[26].id = 26;
        this.ᐃᐃⵠ[27] = Gf(60, 60, 0, ⵠΔ[435], 3);
        this.ᐃᐃⵠ[27].id = 27;
        this.ᐃᐃⵠ[28] = Gf(60, 60, 0, ⵠΔ[438], 3);
        this.ᐃᐃⵠ[28].id = 28;
        this.ᐃᐃⵠ[120] = Gf(60, 60, 0, ⵠΔ[441], 3);
        this.ᐃᐃⵠ[120].id = 120;
        this.ᐃᐃⵠ[120].info.ΔⲆ[2] = this.ᐃᐃⵠ[120].info.ΔⲆ[0];
        this.ᐃᐃⵠ[29] = Gf(60, 60, 0, ⵠΔ[392], 3);
        this.ᐃᐃⵠ[29].id = 29;
        this.ᐃᐃⵠ[121] = Gf(60, 60, 0, ⵠΔ[418], 3);
        this.ᐃᐃⵠ[121].id = 121;
        this.ᐃᐃⵠ[121].info.ΔⲆ[2] = this.ᐃᐃⵠ[121].info.ΔⲆ[0];
        this.ᐃᐃⵠ[30] = Gf(60, 60, 0, ⵠΔ[455], 3);
        this.ᐃᐃⵠ[30].id = 30;
        this.ᐃᐃⵠ[9] = Gf(60, 60, 0, ⵠΔ[860], 3);
        this.ᐃᐃⵠ[9].id = 9;
        this.ᐃᐃⵠ[31] = Gf(60, 60, 0, ⵠΔ[458], 3);
        this.ᐃᐃⵠ[31].id = 31;
        this.ᐃᐃⵠ[32] = Gf(60, 60, 0, ⵠΔ[1017], 3);
        this.ᐃᐃⵠ[32].id = 32;
        this.ᐃᐃⵠ[33] = Gf(60, 60, 0, ⵠΔ[472], 3);
        this.ᐃᐃⵠ[33].id = 33;
        this.ᐃᐃⵠ[35] = Gf(60, 60, 0, ⵠΔ[477], 3);
        this.ᐃᐃⵠ[35].id = 35;
        this.ᐃᐃⵠ[36] = Gf(60, 60, 0, ⵠΔ[480], 3);
        this.ᐃᐃⵠ[36].id = 36;
        this.ᐃᐃⵠ[37] = Gf(60, 60, 0, ⵠΔ[483], 3);
        this.ᐃᐃⵠ[37].id = 37;
        this.ᐃᐃⵠ[38] = Gf(60, 60, 0, ⵠΔ[486], 3);
        this.ᐃᐃⵠ[38].id = 38;
        this.ᐃᐃⵠ[39] = Gf(60, 60, 0, ⵠΔ[489], 3);
        this.ᐃᐃⵠ[39].id = 39;
        this.ᐃᐃⵠ[122] = Gf(60, 60, 0, ⵠΔ[492], 3);
        this.ᐃᐃⵠ[122].id = 122;
        this.ᐃᐃⵠ[123] = Gf(60, 60, 0, ⵠΔ[495], 3);
        this.ᐃᐃⵠ[123].id = 123;
        this.ᐃᐃⵠ[124] = Gf(60, 60, 0, ⵠΔ[499], 3);
        this.ᐃᐃⵠ[124].id = 124;
        this.ᐃᐃⵠ[40] = Gf(60, 60, 0, ⵠΔ[502], 3);
        this.ᐃᐃⵠ[40].id = 40;
        this.ᐃᐃⵠ[146] = Gf(60, 60, 0, ⵠΔ[505], 3);
        this.ᐃᐃⵠ[146].id = 146;
        this.ᐃᐃⵠ[146].info.ΔⲆ[2] = this.ᐃᐃⵠ[146].info.ΔⲆ[0];
        this.ᐃᐃⵠ[240] = Gf(60, 60, 0, ⵠΔ[1233], 3);
        this.ᐃᐃⵠ[240].id = 240;
        this.ᐃᐃⵠ[240].info.ΔⲆ[2] = this.ᐃᐃⵠ[240].info.ΔⲆ[0];
        this.ᐃᐃⵠ[147] = Gf(60, 60, 0, ⵠΔ[513], 3);
        this.ᐃᐃⵠ[147].id = 147;
        this.ᐃᐃⵠ[147].info.ΔⲆ[2] = this.ᐃᐃⵠ[147].info.ΔⲆ[0];
        this.ᐃᐃⵠ[148] = Gf(60, 60, 0, ⵠΔ[518], 3);
        this.ᐃᐃⵠ[148].id = 148;
        this.ᐃᐃⵠ[148].info.ΔⲆ[2] = this.ᐃᐃⵠ[148].info.ΔⲆ[0];
        this.ᐃᐃⵠ[149] = Gf(60, 60, 0, ⵠΔ[521], 3);
        this.ᐃᐃⵠ[149].id = 149;
        this.ᐃᐃⵠ[150] = Gf(60, 60, 0, ⵠΔ[523], 3);
        this.ᐃᐃⵠ[150].id = 150;
        this.ᐃᐃⵠ[151] = Gf(60, 60, 0, ⵠΔ[529], 3);
        this.ᐃᐃⵠ[151].id = 151;
        this.ᐃᐃⵠ[158] = Gf(60, 60, 0, ⵠΔ[532], 3);
        this.ᐃᐃⵠ[158].id = 158;
        this.ᐃᐃⵠ[159] = Gf(60, 60, 0, ⵠΔ[553], 3);
        this.ᐃᐃⵠ[159].id = 159;
        this.ᐃᐃⵠ[43] = Gf(60, 60, 0, ⵠΔ[541], 3);
        this.ᐃᐃⵠ[43].id = 43;
        this.ᐃᐃⵠ[45] = Gf(60, 60, 0, ⵠΔ[550], 3);
        this.ᐃᐃⵠ[45].id = 45;
        this.ᐃᐃⵠ[125] = Gf(60, 60, 0, ⵠΔ[605], 3);
        this.ᐃᐃⵠ[125].id = 125;
        this.ᐃᐃⵠ[221] = Gf(60, 60, 0, ⵠΔ[1236], 3);
        this.ᐃᐃⵠ[221].id = 221;
        this.ᐃᐃⵠ[223] = Gf(60, 60, 0, ⵠΔ[1028], 3);
        this.ᐃᐃⵠ[223].id = 223;
        this.ᐃᐃⵠ[224] = Gf(60, 60, 0, ⵠΔ[1031], 3);
        this.ᐃᐃⵠ[224].id = 224;
        this.ᐃᐃⵠ[230] = Gf(60, 60, 0, ⵠΔ[1117], 3);
        this.ᐃᐃⵠ[230].id = 230;
        this.ᐃᐃⵠ[89] = Gf(60, 60, 0, ⵠΔ[1046], 3);
        this.ᐃᐃⵠ[89].id = 89;
        this.ᐃᐃⵠ[225] = Gf(60, 60, 0, ⵠΔ[1049], 3);
        this.ᐃᐃⵠ[225].id = 225;
        this.ᐃᐃⵠ[226] = Gf(60, 60, 0, ⵠΔ[1189], 3);
        this.ᐃᐃⵠ[226].id = 226;
        this.ᐃᐃⵠ[227] = Gf(60, 60, 0, ⵠΔ[1080], 3);
        this.ᐃᐃⵠ[227].id = 227;
        this.ᐃᐃⵠ[239] = Gf(60, 60, 0, ⵠΔ[1224], 3);
        this.ᐃᐃⵠ[239].id = 239;
        this.ᐃᐃⵠ[228] = Gf(60, 60, 0, ⵠΔ[1095], 3);
        this.ᐃᐃⵠ[228].id = 228;
        this.ᐃᐃⵠ[229] = Gf(60, 60, 0, ⵠΔ[1110], 3);
        this.ᐃᐃⵠ[229].id = 229;
        this.ᐃᐃⵠ[126] = Gf(60, 60, 0, ⵠΔ[609], 3);
        this.ᐃᐃⵠ[126].id = 126;
        this.ᐃᐃⵠ[126].info.ΔⲆ[2] = this.ᐃᐃⵠ[126].info.ΔⲆ[0];
        this.ᐃᐃⵠ[127] = Gf(60, 60, 0, ⵠΔ[613], 3);
        this.ᐃᐃⵠ[127].id = 127;
        this.ᐃᐃⵠ[128] = Gf(60, 60, 0, ⵠΔ[612], 3);
        this.ᐃᐃⵠ[128].id = 128;
        this.ᐃᐃⵠ[46] = Gf(60, 60, 0, ⵠΔ[616], 3);
        this.ᐃᐃⵠ[46].id = 46;
        this.ᐃᐃⵠ[50] = Gf(60, 60, 0, ⵠΔ[699], 3);
        this.ᐃᐃⵠ[50].id = 50;
        this.ᐃᐃⵠ[51] = Gf(60, 60, 0, ⵠΔ[702], 3);
        this.ᐃᐃⵠ[51].id = 51;
        this.ᐃᐃⵠ[52] = Gf(60, 60, 0, ⵠΔ[705], 3);
        this.ᐃᐃⵠ[52].id = 52;
        this.ᐃᐃⵠ[55] = Gf(60, 60, 0, ⵠΔ[709], 3);
        this.ᐃᐃⵠ[55].id = 55;
        this.ᐃᐃⵠ[129] = Gf(60, 60, 0, ⵠΔ[624], 3);
        this.ᐃᐃⵠ[129].id = 129;
        this.ᐃᐃⵠ[129].info.ΔⲆ[2] = this.ᐃᐃⵠ[129].info.ΔⲆ[0];
        this.ᐃᐃⵠ[130] = Gf(60, 60, 0, ⵠΔ[626], 3);
        this.ᐃᐃⵠ[130].id = 130;
        this.ᐃᐃⵠ[131] = Gf(60, 60, 0, ⵠΔ[629], 3);
        this.ᐃᐃⵠ[131].id = 131;
        this.ᐃᐃⵠ[131].info.ΔⲆ[2] = this.ᐃᐃⵠ[131].info.ΔⲆ[0];
        this.ᐃᐃⵠ[132] = Gf(60, 60, 0, ⵠΔ[631], 3);
        this.ᐃᐃⵠ[132].id = 132;
        this.ᐃᐃⵠ[133] = Gf(60, 60, 0, ⵠΔ[634], 3);
        this.ᐃᐃⵠ[133].id = 133;
        this.ᐃᐃⵠ[134] = Gf(60, 60, 0, ⵠΔ[639], 3);
        this.ᐃᐃⵠ[134].id = 134;
        this.ᐃᐃⵠ[134].info.ΔⲆ[2] = this.ᐃᐃⵠ[134].info.ΔⲆ[0];
        this.ᐃᐃⵠ[135] = Gf(60, 60, 0, ⵠΔ[644], 3);
        this.ᐃᐃⵠ[135].id = 135;
        this.ᐃᐃⵠ[47] = Gf(60, 60, 0, ⵠΔ[646], 3);
        this.ᐃᐃⵠ[47].id = 47;
        this.ᐃᐃⵠ[48] = Gf(60, 60, 0, ⵠΔ[649], 3);
        this.ᐃᐃⵠ[48].id = 48;
        this.ᐃᐃⵠ[49] = Gf(60, 60, 0, ⵠΔ[652], 3);
        this.ᐃᐃⵠ[49].id = 49;
        this.ᐃᐃⵠ[136] = Gf(60, 60, 0, ⵠΔ[659], 3);
        this.ᐃᐃⵠ[136].id = 136;
        this.ᐃᐃⵠ[143] = Gf(60, 60, 0, ⵠΔ[143], 3);
        this.ᐃᐃⵠ[143].id = 143;
        this.ᐃᐃⵠ[137] = Gf(60, 60, 0, ⵠΔ[662], 3);
        this.ᐃᐃⵠ[137].id = 137;
        this.ᐃᐃⵠ[138] = Gf(60, 60, 0, ⵠΔ[664], 3);
        this.ᐃᐃⵠ[138].id = 138;
        this.ᐃᐃⵠ[139] = Gf(60, 60, 0, ⵠΔ[674], 3);
        this.ᐃᐃⵠ[139].id = 139;
        this.ᐃᐃⵠ[139].info.ΔⲆ[2] = this.ᐃᐃⵠ[139].info.ΔⲆ[0];
        this.ᐃᐃⵠ[140] = Gf(60, 60, 0, ⵠΔ[140], 3);
        this.ᐃᐃⵠ[140].id = 140;
        this.ᐃᐃⵠ[140].info.ΔⲆ[2] = this.ᐃᐃⵠ[140].info.ΔⲆ[0];
        this.ᐃᐃⵠ[141] = Gf(60, 60, 0, ⵠΔ[685], 3);
        this.ᐃᐃⵠ[141].id = 141;
        this.ᐃᐃⵠ[142] = Gf(60, 60, 0, ⵠΔ[142], 3);
        this.ᐃᐃⵠ[142].id = 142;
        this.ᐃᐃⵠ[142].info.ΔⲆ[2] = this.ᐃᐃⵠ[142].info.ΔⲆ[0];
        this.ᐃᐃⵠ[144] = Gf(60, 60, 0, ⵠΔ[717], 3);
        this.ᐃᐃⵠ[144].id = 144;
        this.ᐃᐃⵠ[145] = Gf(60, 60, 0, ⵠΔ[145], 3);
        this.ᐃᐃⵠ[145].id = 145;
        this.ᐃᐃⵠ[59] = Gf(60, 60, 0, ⵠΔ[732], 3);
        this.ᐃᐃⵠ[59].id = 59;
        this.ᐃᐃⵠ[62] = Gf(60, 60, 0, ⵠΔ[563], 3);
        this.ᐃᐃⵠ[62].id = 62;
        this.ᐃᐃⵠ[185] = Gf(60, 60, 0, ⵠΔ[252], 3);
        this.ᐃᐃⵠ[185].id = 185;
        this.ᐃᐃⵠ[185].info.ΔⲆ[2] = this.ᐃᐃⵠ[185].info.ΔⲆ[0];
        this.ᐃᐃⵠ[184] = Gf(60, 60, 0, ⵠΔ[751], 3);
        this.ᐃᐃⵠ[184].id = 184;
        this.ᐃᐃⵠ[184].info.ΔⲆ[2] = this.ᐃᐃⵠ[184].info.ΔⲆ[0];
        this.ᐃᐃⵠ[17] = Gf(60, 60, 0, ⵠΔ[877], 3);
        this.ᐃᐃⵠ[17].id = 17;
        this.ᐃᐃⵠ[63] = Gf(60, 60, 0, ⵠΔ[566], 3);
        this.ᐃᐃⵠ[63].id = 63;
        this.ᐃᐃⵠ[187] = Gf(60, 60, 0, ⵠΔ[253], 3);
        this.ᐃᐃⵠ[187].id = 187;
        this.ᐃᐃⵠ[187].info.ΔⲆ[2] = this.ᐃᐃⵠ[187].info.ΔⲆ[0];
        this.ᐃᐃⵠ[186] = Gf(60, 60, 0, ⵠΔ[753], 3);
        this.ᐃᐃⵠ[186].id = 186;
        this.ᐃᐃⵠ[186].info.ΔⲆ[2] = this.ᐃᐃⵠ[186].info.ΔⲆ[0];
        this.ᐃᐃⵠ[77] = Gf(60, 60, 0, ⵠΔ[756], 3);
        this.ᐃᐃⵠ[77].id = 77;
        this.ᐃᐃⵠ[175] = Gf(60, 60, 0, ⵠΔ[176], 3);
        this.ᐃᐃⵠ[175].id = 175;
        this.ᐃᐃⵠ[175].info.ΔⲆ[2] = this.ᐃᐃⵠ[175].info.ΔⲆ[0];
        this.ᐃᐃⵠ[176] = Gf(60, 60, 0, ⵠΔ[177], 3);
        this.ᐃᐃⵠ[176].id = 176;
        this.ᐃᐃⵠ[176].info.ΔⲆ[2] = this.ᐃᐃⵠ[176].info.ΔⲆ[0];
        this.ᐃᐃⵠ[78] = Gf(60, 60, 0, ⵠΔ[760], 3);
        this.ᐃᐃⵠ[78].id = 78;
        this.ᐃᐃⵠ[177] = Gf(60, 60, 0, ⵠΔ[175], 3);
        this.ᐃᐃⵠ[177].id = 177;
        this.ᐃᐃⵠ[177].info.ΔⲆ[2] = this.ᐃᐃⵠ[177].info.ΔⲆ[0];
        this.ᐃᐃⵠ[79] = Gf(60, 60, 0, ⵠΔ[764], 3);
        this.ᐃᐃⵠ[79].id = 79;
        this.ᐃᐃⵠ[83] = Gf(60, 60, 0, ⵠΔ[767], 3);
        this.ᐃᐃⵠ[83].id = 83;
        this.ᐃᐃⵠ[84] = Gf(60, 60, 0, ⵠΔ[771], 3);
        this.ᐃᐃⵠ[84].id = 84;
        this.ᐃᐃⵠ[178] = Gf(60, 60, 0, ⵠΔ[178], 3);
        this.ᐃᐃⵠ[178].id = 178;
        this.ᐃᐃⵠ[179] = Gf(60, 60, 0, ⵠΔ[179], 3);
        this.ᐃᐃⵠ[179].id = 179;
        this.ᐃᐃⵠ[86] = Gf(60, 60, 0, ⵠΔ[776], 3);
        this.ᐃᐃⵠ[86].id = 86;
        this.ᐃᐃⵠ[85] = Gf(60, 60, 0, ⵠΔ[779], 3);
        this.ᐃᐃⵠ[85].id = 85;
        this.ᐃᐃⵠ[180] = Gf(60, 60, 0, ⵠΔ[180], 3);
        this.ᐃᐃⵠ[180].id = 180;
        this.ᐃᐃⵠ[181] = Gf(60, 60, 0, ⵠΔ[181], 3);
        this.ᐃᐃⵠ[181].id = 181;
        this.ᐃᐃⵠ[182] = Gf(60, 60, 0, ⵠΔ[789], 3);
        this.ᐃᐃⵠ[182].id = 182;
        this.ᐃᐃⵠ[183] = Gf(60, 60, 0, ⵠΔ[800], 3);
        this.ᐃᐃⵠ[183].id = 183;
        this.ᐃᐃⵠ[188] = Gf(60, 60, 0, ⵠΔ[808], 3);
        this.ᐃᐃⵠ[188].id = 188;
        this.ᐃᐃⵠ[189] = Gf(60, 60, 0, ⵠΔ[814], 3);
        this.ᐃᐃⵠ[189].id = 189;
        this.ᐃᐃⵠ[191] = Gf(60, 60, 0, ⵠΔ[834], 3);
        this.ᐃᐃⵠ[191].id = 191;
        this.ᐃᐃⵠ[192] = Gf(60, 60, 0, ⵠΔ[840], 3);
        this.ᐃᐃⵠ[192].id = 192;
        this.ᐃᐃⵠ[190] = Gf(60, 60, 0, ⵠΔ[842], 3);
        this.ᐃᐃⵠ[190].id = 190;
        this.ᐃᐃⵠ[193] = Gf(60, 60, 0, ⵠΔ[845], 3);
        this.ᐃᐃⵠ[193].id = 193;
        this.ᐃᐃⵠ[194] = Gf(60, 60, 0, ⵠΔ[850], 3);
        this.ᐃᐃⵠ[194].id = 194;
        this.ᐃᐃⵠ[204] = Gf(60, 60, 0, ⵠΔ[949], 3);
        this.ᐃᐃⵠ[204].id = 204;
        this.ᐃᐃⵠ[205] = Gf(60, 60, 0, ⵠΔ[955], 3);
        this.ᐃᐃⵠ[205].id = 205;
        this.ᐃᐃⵠ[206] = Gf(60, 60, 0, ⵠΔ[959], 3);
        this.ᐃᐃⵠ[206].id = 206;
        this.ᐃᐃⵠ[207] = Gf(60, 60, 0, ⵠΔ[965], 3);
        this.ᐃᐃⵠ[207].id = 207;
        this.ᐃᐃⵠ[208] = Gf(60, 60, 0, ⵠΔ[966], 3);
        this.ᐃᐃⵠ[208].id = 208;
        this.ᐃᐃⵠ[209] = Gf(60, 60, 0, ⵠΔ[972], 3);
        this.ᐃᐃⵠ[209].id = 209;
        this.ᐃᐃⵠ[210] = Gf(60, 60, 0, ⵠΔ[981], 3);
        this.ᐃᐃⵠ[210].id = 210;
        this.ᐃᐃⵠ[211] = Gf(60, 60, 0, ⵠΔ[987], 3);
        this.ᐃᐃⵠ[211].id = 211;
        this.ᐃᐃⵠ[41] = Gf(60, 60, 0, ⵠΔ[880], 3);
        this.ᐃᐃⵠ[41].id = 41;
        this.ᐃᐃⵠ[42] = Gf(60, 60, 0, ⵠΔ[882], 3);
        this.ᐃᐃⵠ[42].id = 42;
        this.ᐃᐃⵠ[12] = Gf(60, 60, 0, ⵠΔ[401], 3);
        this.ᐃᐃⵠ[12].id = 12;
        this.ᐃᐃⵠ[16] = Gf(60, 60, 0, ⵠΔ[874], 3);
        this.ᐃᐃⵠ[16].id = 16;
        this.ᐃᐃⵠ[196] = Gf(60, 60, 0, ⵠΔ[196], 3);
        this.ᐃᐃⵠ[196].id = 196;
        this.ᐃᐃⵠ[18] = Gf(60, 60, 0, ⵠΔ[901], 3);
        this.ᐃᐃⵠ[18].id = 18;
        this.ᐃᐃⵠ[197] = Gf(60, 60, 0, ⵠΔ[197], 3);
        this.ᐃᐃⵠ[197].id = 197;
        this.ᐃᐃⵠ[198] = Gf(60, 60, 0, ⵠΔ[907], 3);
        this.ᐃᐃⵠ[198].id = 198;
        this.ᐃᐃⵠ[61] = Gf(60, 60, 0, ⵠΔ[910], 3);
        this.ᐃᐃⵠ[61].id = 61;
        this.ᐃᐃⵠ[201] = Gf(60, 60, 0, ⵠΔ[870], 3);
        this.ᐃᐃⵠ[201].id = 201;
        this.ᐃᐃⵠ[200] = Gf(60, 60, 0, ⵠΔ[200], 3);
        this.ᐃᐃⵠ[200].id = 200;
        this.ᐃᐃⵠ[199] = Gf(60, 60, 0, ⵠΔ[865], 3);
        this.ᐃᐃⵠ[199].id = 199;
        this.ⲆΔⲆ = [];
        this.ⲆΔⲆ[35] = Gf(60, 60, 0, ⵠΔ[254], 3);
        this.ⲆΔⲆ[35].id = 35;
        this.ⲆΔⲆ[5] = Gf(60, 60, 0, ⵠΔ[256], 3);
        this.ⲆΔⲆ[5].id = 5;
        this.ⲆΔⲆ[0] = Gf(60, 60, 0, ⵠΔ[302], 3);
        this.ⲆΔⲆ[0].id = 0;
        this.ⲆΔⲆ[3] = Gf(60, 60, 0, ⵠΔ[262], 3);
        this.ⲆΔⲆ[3].id = 3;
        this.ⲆΔⲆ[55] = Gf(60, 60, 0, ⵠΔ[318], 3);
        this.ⲆΔⲆ[55].id = 55;
        this.ⲆΔⲆ[67] = Gf(60, 60, 0, ⵠΔ[320], 3);
        this.ⲆΔⲆ[67].id = 67;
        this.ⲆΔⲆ[40] = Gf(60, 60, 0, ⵠΔ[284], 3);
        this.ⲆΔⲆ[40].id = 40;
        this.ⲆΔⲆ[6] = Gf(60, 60, 0, ⵠΔ[295], 3);
        this.ⲆΔⲆ[6].id = 6;
        this.ⲆΔⲆ[7] = Gf(60, 60, 0, ⵠΔ[257], 3);
        this.ⲆΔⲆ[7].id = 7;
        this.ⲆΔⲆ[36] = Gf(60, 60, 0, ⵠΔ[290], 3);
        this.ⲆΔⲆ[36].id = 36;
        this.ⲆΔⲆ[34] = Gf(60, 60, 0, ⵠΔ[830], 3);
        this.ⲆΔⲆ[34].id = 34;
        this.ⲆΔⲆ[37] = Gf(60, 60, 0, ⵠΔ[291], 3);
        this.ⲆΔⲆ[37].id = 37;
        this.ⲆΔⲆ[4] = Gf(60, 60, 0, ⵠΔ[314], 3);
        this.ⲆΔⲆ[4].id = 4;
        this.ⲆΔⲆ[49] = Gf(60, 60, 0, ⵠΔ[325], 3);
        this.ⲆΔⲆ[49].id = 49;
        this.ⲆΔⲆ[1] = Gf(60, 60, 0, ⵠΔ[327], 3);
        this.ⲆΔⲆ[1].id = 1;
        this.ⲆΔⲆ[54] = Gf(60, 60, 0, ⵠΔ[304], 3);
        this.ⲆΔⲆ[54].id = 54;
        this.ⲆΔⲆ[56] = Gf(60, 60, 0, ⵠΔ[263], 3);
        this.ⲆΔⲆ[56].id = 56;
        this.ⲆΔⲆ[57] = Gf(60, 60, 0, ⵠΔ[265], 3);
        this.ⲆΔⲆ[57].id = 57;
        this.ⲆΔⲆ[58] = Gf(60, 60, 0, ⵠΔ[332], 3);
        this.ⲆΔⲆ[58].id = 58;
        this.ⲆΔⲆ[61] = Gf(60, 60, 0, ⵠΔ[268], 3);
        this.ⲆΔⲆ[61].id = 61;
        this.ⲆΔⲆ[79] = Gf(60, 60, 0, ⵠΔ[338], 3);
        this.ⲆΔⲆ[79].id = 79;
        this.ⲆΔⲆ[68] = Gf(60, 60, 0, ⵠΔ[360], 3);
        this.ⲆΔⲆ[68].id = 68;
        this.ⲆΔⲆ[69] = Gf(60, 60, 0, ⵠΔ[363], 3);
        this.ⲆΔⲆ[69].id = 69;
        this.ⲆΔⲆ[70] = Gf(60, 60, 0, ⵠΔ[365], 3);
        this.ⲆΔⲆ[70].id = 70;
        this.ⲆΔⲆ[100] = Gf(60, 60, 0, ⵠΔ[367], 3);
        this.ⲆΔⲆ[100].id = 100;
        this.ⲆΔⲆ[83] = Gf(60, 60, 0, ⵠΔ[370], 3);
        this.ⲆΔⲆ[83].id = 83;
        this.ⲆΔⲆ[62] = Gf(60, 60, 0, ⵠΔ[371], 3);
        this.ⲆΔⲆ[62].id = 62;
        this.ⲆΔⲆ[63] = Gf(60, 60, 0, ⵠΔ[374], 3);
        this.ⲆΔⲆ[63].id = 63;
        this.ⲆΔⲆ[64] = Gf(60, 60, 0, ⵠΔ[377], 3);
        this.ⲆΔⲆ[64].id = 64;
        this.ⲆΔⲆ[83] = Gf(60, 60, 0, ⵠΔ[370], 3);
        this.ⲆΔⲆ[83].id = 83;
        this.ⲆΔⲆ[84] = Gf(60, 60, 0, ⵠΔ[380], 3);
        this.ⲆΔⲆ[84].id = 84;
        this.ⲆΔⲆ[25] = Gf(60, 60, 0, ⵠΔ[402], 3);
        this.ⲆΔⲆ[25].id = 25;
        this.ⲆΔⲆ[26] = Gf(60, 60, 0, ⵠΔ[396], 3);
        this.ⲆΔⲆ[26].id = 26;
        this.ⲆΔⲆ[27] = Gf(60, 60, 0, ⵠΔ[399], 3);
        this.ⲆΔⲆ[27].id = 27;
        this.ⲆΔⲆ[28] = Gf(60, 60, 0, ⵠΔ[405], 3);
        this.ⲆΔⲆ[28].id = 28;
        this.ⲆΔⲆ[31] = Gf(60, 60, 0, ⵠΔ[876], 3);
        this.ⲆΔⲆ[31].id = 31;
        this.ⲆΔⲆ[2] = Gf(60, 60, 0, ⵠΔ[409], 3);
        this.ⲆΔⲆ[2].id = 2;
        this.ⲆΔⲆ[80] = Gf(60, 60, 0, ⵠΔ[421], 3);
        this.ⲆΔⲆ[80].id = 80;
        this.ⲆΔⲆ[81] = Gf(60, 60, 0, ⵠΔ[424], 3);
        this.ⲆΔⲆ[81].id = 81;
        this.ⲆΔⲆ[Zr.ⵠⵠΔⵠⵠ] = Gf(60, 60, 0, ⵠΔ[1228], 3);
        this.ⲆΔⲆ[Zr.ⵠⵠΔⵠⵠ].id = Zr.ⵠⵠΔⵠⵠ;
        this.ⲆΔⲆ[86] = Gf(60, 60, 0, ⵠΔ[1231], 3);
        this.ⲆΔⲆ[86].id = 86;
        this.ⲆΔⲆ[98] = Gf(60, 60, 0, ⵠΔ[1138], 3);
        this.ⲆΔⲆ[98].id = 98;
        this.ⲆΔⲆ[99] = Gf(60, 60, 0, ⵠΔ[1141], 3);
        this.ⲆΔⲆ[99].id = 99;
        this.ⲆΔⲆ[131] = Gf(60, 60, 0, ⵠΔ[570], 3);
        this.ⲆΔⲆ[131].id = 131;
        this.ⲆΔⲆ[132] = Gf(60, 60, 0, ⵠΔ[1168], 3);
        this.ⲆΔⲆ[132].id = 132;
        this.ⲆΔⲆ[145] = Gf(60, 60, 0, ⵠΔ[1238], 3);
        this.ⲆΔⲆ[145].id = 145;
        this.ⲆΔⲆ[133] = Gf(60, 60, 0, ⵠΔ[573], 3);
        this.ⲆΔⲆ[133].id = 133;
        this.ⲆΔⲆ[134] = Gf(60, 60, 0, ⵠΔ[1171], 3);
        this.ⲆΔⲆ[134].id = 134;
        this.ⲆΔⲆ[146] = Gf(60, 60, 0, ⵠΔ[1241], 3);
        this.ⲆΔⲆ[146].id = 146;
        this.ⲆΔⲆ[135] = Gf(60, 60, 0, ⵠΔ[576], 3);
        this.ⲆΔⲆ[135].id = 135;
        this.ⲆΔⲆ[136] = Gf(60, 60, 0, ⵠΔ[1174], 3);
        this.ⲆΔⲆ[136].id = 136;
        this.ⲆΔⲆ[147] = Gf(60, 60, 0, ⵠΔ[1244], 3);
        this.ⲆΔⲆ[147].id = 147;
        this.ⲆΔⲆ[137] = Gf(60, 60, 0, ⵠΔ[579], 3);
        this.ⲆΔⲆ[137].id = 137;
        this.ⲆΔⲆ[138] = Gf(60, 60, 0, ⵠΔ[1177], 3);
        this.ⲆΔⲆ[138].id = 138;
        this.ⲆΔⲆ[167] = Gf(60, 60, 0, ⵠΔ[1256], 3);
        this.ⲆΔⲆ[167].id = 167;
        this.ⲆΔⲆ[168] = Gf(60, 60, 0, ⵠΔ[1259], 3);
        this.ⲆΔⲆ[168].id = 168;
        this.ⲆΔⲆ[169] = Gf(60, 60, 0, ⵠΔ[1262], 3);
        this.ⲆΔⲆ[169].id = 169;
        this.ⲆΔⲆ[170] = Gf(60, 60, 0, ⵠΔ[1265], 3);
        this.ⲆΔⲆ[170].id = 170;
        this.ⲆΔⲆ[171] = Gf(60, 60, 0, ⵠΔ[1268], 3);
        this.ⲆΔⲆ[171].id = 171;
        this.ⲆΔⲆ[172] = Gf(60, 60, 0, ⵠΔ[1271], 3);
        this.ⲆΔⲆ[172].id = 172;
        this.ⲆΔⲆ[148] = Gf(60, 60, 0, ⵠΔ[1247], 3);
        this.ⲆΔⲆ[148].id = 148;
        this.ⲆΔⲆ[139] = Gf(60, 60, 0, ⵠΔ[582], 3);
        this.ⲆΔⲆ[139].id = 139;
        this.ⲆΔⲆ[140] = Gf(60, 60, 0, ⵠΔ[1180], 3);
        this.ⲆΔⲆ[140].id = 140;
        this.ⲆΔⲆ[149] = Gf(60, 60, 0, ⵠΔ[1250], 3);
        this.ⲆΔⲆ[149].id = 149;
        this.ⲆΔⲆ[141] = Gf(60, 60, 0, ⵠΔ[585], 3);
        this.ⲆΔⲆ[141].id = 141;
        this.ⲆΔⲆ[142] = Gf(60, 60, 0, ⵠΔ[1183], 3);
        this.ⲆΔⲆ[142].id = 142;
        this.ⲆΔⲆ[150] = Gf(60, 60, 0, ⵠΔ[1253], 3);
        this.ⲆΔⲆ[150].id = 150;
        this.ⲆΔⲆ[143] = Gf(60, 60, 0, ⵠΔ[588], 3);
        this.ⲆΔⲆ[143].id = 143;
        this.ⲆΔⲆ[144] = Gf(60, 60, 0, ⵠΔ[1186], 3);
        this.ⲆΔⲆ[144].id = 144;
        this.ⲆΔⲆ[87] = Gf(60, 60, 0, ⵠΔ[827], 3);
        this.ⲆΔⲆ[87].id = 87;
        this.ⲆΔⲆ[88] = Gf(60, 60, 0, ⵠΔ[430], 3);
        this.ⲆΔⲆ[88].id = 88;
        this.ⲆΔⲆ[89] = Gf(60, 60, 0, ⵠΔ[433], 3);
        this.ⲆΔⲆ[89].id = 89;
        this.ⲆΔⲆ[90] = Gf(60, 60, 0, ⵠΔ[436], 3);
        this.ⲆΔⲆ[90].id = 90;
        this.ⲆΔⲆ[24] = Gf(60, 60, 0, ⵠΔ[439], 3);
        this.ⲆΔⲆ[24].id = 24;
        this.ⲆΔⲆ[101] = Gf(60, 60, 0, ⵠΔ[442], 3);
        this.ⲆΔⲆ[101].id = 101;
        this.ⲆΔⲆ[100] = Gf(60, 60, 0, ⵠΔ[367], 3);
        this.ⲆΔⲆ[100].id = 100;
        this.ⲆΔⲆ[38] = Gf(60, 60, 0, ⵠΔ[456], 3);
        this.ⲆΔⲆ[38].id = 38;
        this.ⲆΔⲆ[Zr.ᐃΔΔᐃΔ] = Gf(60, 60, 0, ⵠΔ[861], 3);
        this.ⲆΔⲆ[Zr.ᐃΔΔᐃΔ].id = Zr.ᐃΔΔᐃΔ;
        this.ⲆΔⲆ[8] = Gf(60, 60, 0, ⵠΔ[460], 3);
        this.ⲆΔⲆ[8].id = 8;
        this.ⲆΔⲆ[9] = Gf(60, 60, 0, ⵠΔ[1019], 3);
        this.ⲆΔⲆ[9].id = 9;
        this.ⲆΔⲆ[29] = Gf(60, 60, 0, ⵠΔ[473], 3);
        this.ⲆΔⲆ[29].id = 29;
        this.ⲆΔⲆ[10] = Gf(60, 60, 0, ⵠΔ[478], 3);
        this.ⲆΔⲆ[10].id = 10;
        this.ⲆΔⲆ[11] = Gf(60, 60, 0, ⵠΔ[481], 3);
        this.ⲆΔⲆ[11].id = 11;
        this.ⲆΔⲆ[12] = Gf(60, 60, 0, ⵠΔ[484], 3);
        this.ⲆΔⲆ[12].id = 12;
        this.ⲆΔⲆ[13] = Gf(60, 60, 0, ⵠΔ[487], 3);
        this.ⲆΔⲆ[13].id = 13;
        this.ⲆΔⲆ[14] = Gf(60, 60, 0, ⵠΔ[490], 3);
        this.ⲆΔⲆ[14].id = 14;
        this.ⲆΔⲆ[59] = Gf(60, 60, 0, ⵠΔ[493], 3);
        this.ⲆΔⲆ[59].id = 59;
        this.ⲆΔⲆ[71] = Gf(60, 60, 0, ⵠΔ[496], 3);
        this.ⲆΔⲆ[71].id = 71;
        this.ⲆΔⲆ[65] = Gf(60, 60, 0, ⵠΔ[498], 3);
        this.ⲆΔⲆ[65].id = 65;
        this.ⲆΔⲆ[85] = Gf(60, 60, 0, ⵠΔ[503], 3);
        this.ⲆΔⲆ[85].id = 85;
        this.ⲆΔⲆ[102] = Gf(60, 60, 0, ⵠΔ[515], 3);
        this.ⲆΔⲆ[102].id = 102;
        this.ⲆΔⲆ[103] = Gf(60, 60, 0, ⵠΔ[519], 3);
        this.ⲆΔⲆ[103].id = 103;
        this.ⲆΔⲆ[115] = Gf(60, 60, 0, ⵠΔ[530], 3);
        this.ⲆΔⲆ[115].id = 115;
        this.ⲆΔⲆ[104] = Gf(60, 60, 0, ⵠΔ[533], 3);
        this.ⲆΔⲆ[104].id = 104;
        this.ⲆΔⲆ[105] = Gf(60, 60, 0, ⵠΔ[555], 3);
        this.ⲆΔⲆ[105].id = 105;
        this.ⲆΔⲆ[91] = Gf(60, 60, 0, ⵠΔ[542], 3);
        this.ⲆΔⲆ[91].id = 91;
        this.ⲆΔⲆ[15] = Gf(60, 60, 0, ⵠΔ[551], 3);
        this.ⲆΔⲆ[15].id = 15;
        this.ⲆΔⲆ[106] = Gf(60, 60, 0, ⵠΔ[604], 3);
        this.ⲆΔⲆ[106].id = 106;
        this.ⲆΔⲆ[108] = Gf(60, 60, 0, ⵠΔ[1235], 3);
        this.ⲆΔⲆ[108].id = 108;
        this.ⲆΔⲆ[163] = Gf(60, 60, 0, ⵠΔ[1027], 3);
        this.ⲆΔⲆ[163].id = 163;
        this.ⲆΔⲆ[164] = Gf(60, 60, 0, ⵠΔ[1030], 3);
        this.ⲆΔⲆ[164].id = 164;
        this.ⲆΔⲆ[166] = Gf(60, 60, 0, ⵠΔ[1116], 3);
        this.ⲆΔⲆ[166].id = 166;
        this.ⲆΔⲆ[165] = Gf(60, 60, 0, ⵠΔ[1048], 3);
        this.ⲆΔⲆ[165].id = 165;
        this.ⲆΔⲆ[Zr.ᐃᐃΔⲆⵠ] = Gf(60, 60, 0, ⵠΔ[1051], 3);
        this.ⲆΔⲆ[Zr.ᐃᐃΔⲆⵠ].id = Zr.ᐃᐃΔⲆⵠ;
        this.ⲆΔⲆ[Zr.ⲆΔΔᐃⵠ] = Gf(60, 60, 0, ⵠΔ[1082], 3);
        this.ⲆΔⲆ[Zr.ⲆΔΔᐃⵠ].id = Zr.ⲆΔΔᐃⵠ;
        this.ⲆΔⲆ[Zr.ᐃⵠΔΔΔ] = Gf(60, 60, 0, ⵠΔ[1226], 3);
        this.ⲆΔⲆ[Zr.ᐃⵠΔΔΔ].id = Zr.ᐃⵠΔΔΔ;
        this.ⲆΔⲆ[Zr.ⵠᐃⲆⵠⵠ] = Gf(60, 60, 0, ⵠΔ[1191], 3);
        this.ⲆΔⲆ[Zr.ⵠᐃⲆⵠⵠ].id = Zr.ⵠᐃⲆⵠⵠ;
        this.ⲆΔⲆ[110] = Gf(60, 60, 0, ⵠΔ[611], 3);
        this.ⲆΔⲆ[110].id = 110;
        this.ⲆΔⲆ[111] = Gf(60, 60, 0, ⵠΔ[715], 3);
        this.ⲆΔⲆ[111].id = 111;
        this.ⲆΔⲆ[112] = Gf(60, 60, 0, ⵠΔ[715], 3);
        this.ⲆΔⲆ[112].id = 112;
        this.ⲆΔⲆ[113] = Gf(60, 60, 0, ⵠΔ[715], 3);
        this.ⲆΔⲆ[113].id = 113;
        this.ⲆΔⲆ[16] = Gf(60, 60, 0, ⵠΔ[618], 3);
        this.ⲆΔⲆ[16].id = 16;
        this.ⲆΔⲆ[17] = Gf(60, 60, 0, ⵠΔ[700], 3);
        this.ⲆΔⲆ[17].id = 17;
        this.ⲆΔⲆ[18] = Gf(60, 60, 0, ⵠΔ[704], 3);
        this.ⲆΔⲆ[18].id = 18;
        this.ⲆΔⲆ[19] = Gf(60, 60, 0, ⵠΔ[706], 3);
        this.ⲆΔⲆ[19].id = 19;
        this.ⲆΔⲆ[122] = Gf(60, 60, 0, ⵠΔ[711], 3);
        this.ⲆΔⲆ[122].id = 122;
        this.ⲆΔⲆ[20] = Gf(60, 60, 0, ⵠΔ[627], 3);
        this.ⲆΔⲆ[20].id = 20;
        this.ⲆΔⲆ[41] = Gf(60, 60, 0, ⵠΔ[632], 3);
        this.ⲆΔⲆ[41].id = 41;
        this.ⲆΔⲆ[52] = Gf(60, 60, 0, ⵠΔ[635], 3);
        this.ⲆΔⲆ[52].id = 52;
        this.ⲆΔⲆ[114] = Gf(60, 60, 0, ⵠΔ[643], 3);
        this.ⲆΔⲆ[114].id = 114;
        this.ⲆΔⲆ[94] = Gf(60, 60, 0, ⵠΔ[647], 3);
        this.ⲆΔⲆ[94].id = 94;
        this.ⲆΔⲆ[93] = Gf(60, 60, 0, ⵠΔ[650], 3);
        this.ⲆΔⲆ[93].id = 93;
        this.ⲆΔⲆ[21] = Gf(60, 60, 0, ⵠΔ[654], 3);
        this.ⲆΔⲆ[21].id = 21;
        this.ⲆΔⲆ[53] = Gf(60, 60, 0, ⵠΔ[660], 3);
        this.ⲆΔⲆ[53].id = 53;
        this.ⲆΔⲆ[51] = Gf(60, 60, 0, ⵠΔ[690], 3);
        this.ⲆΔⲆ[51].id = 51;
        this.ⲆΔⲆ[50] = Gf(60, 60, 0, ⵠΔ[666], 3);
        this.ⲆΔⲆ[50].id = 50;
        this.ⲆΔⲆ[109] = Gf(60, 60, 0, ⵠΔ[684], 3);
        this.ⲆΔⲆ[109].id = 109;
        this.ⲆΔⲆ[124] = Gf(60, 60, 0, ⵠΔ[718], 3);
        this.ⲆΔⲆ[124].id = 124;
        this.ⲆΔⲆ[125] = Gf(60, 60, 0, ⵠΔ[730], 3);
        this.ⲆΔⲆ[125].id = 125;
        this.ⲆΔⲆ[126] = Gf(60, 60, 0, ⵠΔ[734], 3);
        this.ⲆΔⲆ[126].id = 126;
        this.ⲆΔⲆ[129] = Gf(60, 60, 0, ⵠΔ[563], 3);
        this.ⲆΔⲆ[129].id = 129;
        this.ⲆΔⲆ[151] = Gf(60, 60, 0, ⵠΔ[758], 3);
        this.ⲆΔⲆ[151].id = 151;
        this.ⲆΔⲆ[152] = Gf(60, 60, 0, ⵠΔ[762], 3);
        this.ⲆΔⲆ[152].id = 152;
        this.ⲆΔⲆ[153] = Gf(60, 60, 0, ⵠΔ[770], 3);
        this.ⲆΔⲆ[153].id = 153;
        this.ⲆΔⲆ[154] = Gf(60, 60, 0, ⵠΔ[768], 3);
        this.ⲆΔⲆ[154].id = 154;
        this.ⲆΔⲆ[155] = Gf(60, 60, 0, ⵠΔ[772], 3);
        this.ⲆΔⲆ[155].id = 155;
        this.ⲆΔⲆ[157] = Gf(60, 60, 0, ⵠΔ[777], 3);
        this.ⲆΔⲆ[157].id = 157;
        this.ⲆΔⲆ[156] = Gf(60, 60, 0, ⵠΔ[780], 3);
        this.ⲆΔⲆ[156].id = 156;
        this.ⲆΔⲆ[158] = Gf(60, 60, 0, ⵠΔ[784], 3);
        this.ⲆΔⲆ[158].id = 158;
        this.ⲆΔⲆ[159] = Gf(60, 60, 0, ⵠΔ[785], 3);
        this.ⲆΔⲆ[159].id = 159;
        this.ⲆΔⲆ[160] = Gf(60, 60, 0, ⵠΔ[791], 3);
        this.ⲆΔⲆ[160].id = 160;
        this.ⲆΔⲆ[161] = Gf(60, 60, 0, ⵠΔ[799], 3);
        this.ⲆΔⲆ[161].id = 161;
        this.ⲆΔⲆ[42] = Gf(60, 60, 0, ⵠΔ[809], 3);
        this.ⲆΔⲆ[42].id = 42;
        this.ⲆΔⲆ[43] = Gf(60, 60, 0, ⵠΔ[835], 3);
        this.ⲆΔⲆ[43].id = 43;
        this.ⲆΔⲆ[107] = Gf(60, 60, 0, ⵠΔ[843], 3);
        this.ⲆΔⲆ[107].id = 107;
        this.ⲆΔⲆ[44] = Gf(60, 60, 0, ⵠΔ[846], 3);
        this.ⲆΔⲆ[44].id = 44;
        this.ⲆΔⲆ[46] = Gf(60, 60, 0, ⵠΔ[960], 3);
        this.ⲆΔⲆ[46].id = 46;
        this.ⲆΔⲆ[45] = Gf(60, 60, 0, ⵠΔ[950], 3);
        this.ⲆΔⲆ[45].id = 45;
        this.ⲆΔⲆ[47] = Gf(60, 60, 0, ⵠΔ[967], 3);
        this.ⲆΔⲆ[47].id = 47;
        this.ⲆΔⲆ[48] = Gf(60, 60, 0, ⵠΔ[982], 3);
        this.ⲆΔⲆ[48].id = 48;
        this.ⲆΔⲆ[25] = Gf(60, 60, 0, ⵠΔ[402], 3);
        this.ⲆΔⲆ[25].id = 25;
        this.ⲆΔⲆ[31] = Gf(60, 60, 0, ⵠΔ[876], 3);
        this.ⲆΔⲆ[31].id = 31;
        this.ⲆΔⲆ[33] = Gf(60, 60, 0, ⵠΔ[900], 3);
        this.ⲆΔⲆ[33].id = 33;
        this.ⲆΔⲆ[162] = Gf(60, 60, 0, ⵠΔ[909], 3);
        this.ⲆΔⲆ[162].id = 162;
        this.ⲆΔⲆ[128] = Gf(60, 60, 0, ⵠΔ[912], 3);
        this.ⲆΔⲆ[128].id = 128;
        this.ᐃⵠᐃ[53] = Gf(68, 68, 0, ⵠΔ[976], 3);
        this.ᐃⵠᐃ[53].id = 53;
        this.ᐃᐃⵠ[53] = Gf(60, 60, 0, ⵠΔ[975], 3);
        this.ᐃᐃⵠ[53].id = 53;
        this.ⲆΔⲆ[22] = Gf(60, 60, 0, ⵠΔ[977], 3);
        this.ⲆΔⲆ[22].id = 22;
        this.ᐃⵠᐃ[54] = Gf(68, 68, 0, ⵠΔ[979], 3);
        this.ᐃⵠᐃ[54].id = 54;
        this.ᐃᐃⵠ[54] = Gf(60, 60, 0, ⵠΔ[978], 3);
        this.ᐃᐃⵠ[54].id = 54;
        this.ⲆΔⲆ[23] = Gf(60, 60, 0, ⵠΔ[980], 3);
        this.ⲆΔⲆ[23].id = 23;
        this.ᐃⵠᐃ[56] = Gf(68, 68, 0, ⵠΔ[713], 3);
        this.ᐃⵠᐃ[56].id = 56;
        this.ᐃᐃⵠ[56] = Gf(60, 60, 0, ⵠΔ[712], 3);
        this.ᐃᐃⵠ[56].id = 56;
        this.ⲆΔⲆ[123] = Gf(60, 60, 0, ⵠΔ[714], 3);
        this.ⲆΔⲆ[123].id = 123;
        this.ᐃⵠᐃ[82] = Gf(68, 68, 0, ⵠΔ[428], 3);
        this.ᐃⵠᐃ[82].id = 82;
        this.ᐃᐃⵠ[82] = Gf(60, 60, 0, ⵠΔ[426], 3);
        this.ᐃᐃⵠ[82].id = 82;
        this.ⲆΔⲆ[82] = Gf(60, 60, 0, ⵠΔ[427], 3);
        this.ⲆΔⲆ[82].id = 82;
        this.ᐃⵠᐃ[235] = Gf(68, 68, 0, ⵠΔ[1159], 3);
        this.ᐃⵠᐃ[235].id = 235;
        this.ᐃᐃⵠ[235] = Gf(60, 60, 0, ⵠΔ[1158], 3);
        this.ᐃᐃⵠ[235].id = 235;
        this.ᐃⵠᐃ[238] = Gf(68, 68, 0, ⵠΔ[1188], 3);
        this.ᐃⵠᐃ[238].id = 238;
        this.ᐃᐃⵠ[238] = Gf(60, 60, 0, ⵠΔ[1187], 3);
        this.ᐃᐃⵠ[238].id = 238;
        this.ᐃⵠᐃ[236] = Gf(68, 68, 0, ⵠΔ[1161], 3);
        this.ᐃⵠᐃ[236].id = 236;
        this.ᐃᐃⵠ[236] = Gf(60, 60, 0, ⵠΔ[1160], 3);
        this.ᐃᐃⵠ[236].id = 236;
        this.ᐃⵠᐃ[152] = Gf(68, 68, 0, ⵠΔ[1197], 3);
        this.ᐃⵠᐃ[152].id = 152;
        this.ᐃᐃⵠ[152] = Gf(60, 60, 0, ⵠΔ[1195], 3);
        this.ᐃᐃⵠ[152].id = 152;
        this.ⲆΔⲆ[116] = Gf(60, 60, 0, ⵠΔ[1196], 3);
        this.ⲆΔⲆ[116].id = 116;
        this.ᐃⵠᐃ[212] = Gf(68, 68, 0, ⵠΔ[992], 3);
        this.ᐃⵠᐃ[212].id = 212;
        this.ᐃᐃⵠ[212] = Gf(60, 60, 0, ⵠΔ[991], 3);
        this.ᐃᐃⵠ[212].id = 212;
        this.ⲆΔⲆ[73] = Gf(60, 60, 0, ⵠΔ[990], 3);
        this.ⲆΔⲆ[73].id = 73;
        this.ᐃⵠᐃ[213] = Gf(68, 68, 0, ⵠΔ[995], 3);
        this.ᐃⵠᐃ[213].id = 213;
        this.ᐃᐃⵠ[213] = Gf(60, 60, 0, ⵠΔ[994], 3);
        this.ᐃᐃⵠ[213].id = 213;
        this.ⲆΔⲆ[74] = Gf(60, 60, 0, ⵠΔ[993], 3);
        this.ⲆΔⲆ[74].id = 74;
        this.ᐃⵠᐃ[214] = Gf(68, 68, 0, ⵠΔ[998], 3);
        this.ᐃⵠᐃ[214].id = 214;
        this.ᐃᐃⵠ[214] = Gf(60, 60, 0, ⵠΔ[997], 3);
        this.ᐃᐃⵠ[214].id = 214;
        this.ⲆΔⲆ[75] = Gf(60, 60, 0, ⵠΔ[996], 3);
        this.ⲆΔⲆ[75].id = 75;
        this.ᐃⵠᐃ[215] = Gf(68, 68, 0, ⵠΔ[1001], 3);
        this.ᐃⵠᐃ[215].id = 215;
        this.ᐃᐃⵠ[215] = Gf(60, 60, 0, ⵠΔ[1000], 3);
        this.ᐃᐃⵠ[215].id = 215;
        this.ⲆΔⲆ[76] = Gf(60, 60, 0, ⵠΔ[999], 3);
        this.ⲆΔⲆ[76].id = 76;
        this.ᐃⵠᐃ[216] = Gf(68, 68, 0, ⵠΔ[1004], 3);
        this.ᐃⵠᐃ[216].id = 216;
        this.ᐃᐃⵠ[216] = Gf(60, 60, 0, ⵠΔ[1003], 3);
        this.ᐃᐃⵠ[216].id = 216;
        this.ⲆΔⲆ[77] = Gf(60, 60, 0, ⵠΔ[1002], 3);
        this.ⲆΔⲆ[77].id = 77;
        this.ᐃⵠᐃ[220] = Gf(68, 68, 0, ⵠΔ[1007], 3);
        this.ᐃⵠᐃ[220].id = 220;
        this.ᐃᐃⵠ[220] = Gf(60, 60, 0, ⵠΔ[1006], 3);
        this.ᐃᐃⵠ[220].id = 220;
        this.ⲆΔⲆ[78] = Gf(60, 60, 0, ⵠΔ[1005], 3);
        this.ⲆΔⲆ[78].id = 78;
        this.ᐃⵠᐃ[217] = Gf(68, 68, 0, ⵠΔ[1016], 3);
        this.ᐃⵠᐃ[217].id = 217;
        this.ᐃᐃⵠ[217] = Gf(60, 60, 0, ⵠΔ[1015], 3);
        this.ᐃᐃⵠ[217].id = 217;
        this.ⲆΔⲆ[60] = Gf(60, 60, 0, ⵠΔ[1014], 3);
        this.ⲆΔⲆ[60].id = 60;
        this.ᐃⵠᐃ[219] = Gf(68, 68, 0, ⵠΔ[1013], 3);
        this.ᐃⵠᐃ[219].id = 219;
        this.ᐃᐃⵠ[219] = Gf(60, 60, 0, ⵠΔ[1012], 3);
        this.ᐃᐃⵠ[219].id = 219;
        this.ⲆΔⲆ[72] = Gf(60, 60, 0, ⵠΔ[1011], 3);
        this.ⲆΔⲆ[72].id = 72;
        this.ᐃⵠᐃ[218] = Gf(68, 68, 0, ⵠΔ[1010], 3);
        this.ᐃⵠᐃ[218].id = 218;
        this.ᐃᐃⵠ[218] = Gf(60, 60, 0, ⵠΔ[1009], 3);
        this.ᐃᐃⵠ[218].id = 218;
        this.ⲆΔⲆ[66] = Gf(60, 60, 0, ⵠΔ[1008], 3);
        this.ⲆΔⲆ[66].id = 66;
        this.ᐃⵠᐃ[153] = Gf(68, 68, 0, ⵠΔ[1201], 3);
        this.ᐃⵠᐃ[153].id = 153;
        this.ᐃᐃⵠ[153] = Gf(60, 60, 0, ⵠΔ[1199], 3);
        this.ᐃᐃⵠ[153].id = 153;
        this.ⲆΔⲆ[117] = Gf(60, 60, 0, ⵠΔ[1200], 3);
        this.ⲆΔⲆ[117].id = 117;
        this.ᐃⵠᐃ[154] = Gf(68, 68, 0, ⵠΔ[1205], 3);
        this.ᐃⵠᐃ[154].id = 154;
        this.ᐃᐃⵠ[154] = Gf(60, 60, 0, ⵠΔ[1203], 3);
        this.ᐃᐃⵠ[154].id = 154;
        this.ⲆΔⲆ[118] = Gf(60, 60, 0, ⵠΔ[1204], 3);
        this.ⲆΔⲆ[118].id = 118;
        this.ᐃⵠᐃ[155] = Gf(68, 68, 0, ⵠΔ[1209], 3);
        this.ᐃⵠᐃ[155].id = 155;
        this.ᐃᐃⵠ[155] = Gf(60, 60, 0, ⵠΔ[1207], 3);
        this.ᐃᐃⵠ[155].id = 155;
        this.ⲆΔⲆ[119] = Gf(60, 60, 0, ⵠΔ[1208], 3);
        this.ⲆΔⲆ[119].id = 119;
        this.ᐃⵠᐃ[156] = Gf(68, 68, 0, ⵠΔ[1213], 3);
        this.ᐃⵠᐃ[156].id = 156;
        this.ᐃᐃⵠ[156] = Gf(60, 60, 0, ⵠΔ[1211], 3);
        this.ᐃᐃⵠ[156].id = 156;
        this.ⲆΔⲆ[120] = Gf(60, 60, 0, ⵠΔ[1212], 3);
        this.ⲆΔⲆ[120].id = 120;
        this.ᐃⵠᐃ[157] = Gf(68, 68, 0, ⵠΔ[1217], 3);
        this.ᐃⵠᐃ[157].id = 157;
        this.ᐃᐃⵠ[157] = Gf(60, 60, 0, ⵠΔ[1215], 3);
        this.ᐃᐃⵠ[157].id = 157;
        this.ⲆΔⲆ[121] = Gf(60, 60, 0, ⵠΔ[1216], 3);
        this.ⲆΔⲆ[121].id = 121;
        this.ᐃⵠᐃ[203] = Gf(68, 68, 0, ⵠΔ[937], 3);
        this.ᐃⵠᐃ[203].id = 203;
        this.ᐃᐃⵠ[203] = Gf(60, 60, 0, ⵠΔ[936], 3);
        this.ᐃᐃⵠ[203].id = 203;
        this.ᐃᐃⵠ[203].info.ΔⲆ[2] = this.ᐃᐃⵠ[203].info.ΔⲆ[0];
        this.ᐃⵠᐃ[150] = Gf(68, 68, 0, ⵠΔ[524], 3);
        this.ᐃⵠᐃ[150].id = 150;
        this.ᐃᐃⵠ[150] = Gf(60, 60, 0, ⵠΔ[523], 3);
        this.ᐃᐃⵠ[150].id = 150;
        this.ᐃᐃⵠ[150].info.ΔⲆ[2] = this.ᐃᐃⵠ[150].info.ΔⲆ[0];
        this.ᐃⵠᐃ[202] = Gf(68, 68, 0, ⵠΔ[939], 3);
        this.ᐃⵠᐃ[202].id = 202;
        this.ᐃᐃⵠ[202] = Gf(60, 60, 0, ⵠΔ[938], 3);
        this.ᐃᐃⵠ[202].id = 202;
        this.ᐃᐃⵠ[202].info.ΔⲆ[2] = this.ᐃᐃⵠ[202].info.ΔⲆ[0];
        this.ᐃⵠᐃ[19] = Gf(68, 68, 0, ⵠΔ[934], 3);
        this.ᐃⵠᐃ[19].id = 19;
        this.ᐃᐃⵠ[19] = Gf(60, 60, 0, ⵠΔ[932], 3);
        this.ᐃᐃⵠ[19].id = 19;
        this.ⲆΔⲆ[39] = Gf(60, 60, 0, ⵠΔ[933], 3);
        this.ⲆΔⲆ[39].id = 39;
        this.ᐃⵠᐃ[20] = Gf(68, 68, 0, ⵠΔ[923], 3);
        this.ᐃⵠᐃ[20].id = 20;
        this.ᐃᐃⵠ[20] = Gf(60, 60, 0, ⵠΔ[921], 3);
        this.ᐃᐃⵠ[20].id = 20;
        this.ⲆΔⲆ[95] = Gf(60, 60, 0, ⵠΔ[922], 3);
        this.ⲆΔⲆ[95].id = 95;
        this.ᐃⵠᐃ[21] = Gf(68, 68, 0, ⵠΔ[927], 3);
        this.ᐃⵠᐃ[21].id = 21;
        this.ᐃᐃⵠ[21] = Gf(60, 60, 0, ⵠΔ[925], 3);
        this.ᐃᐃⵠ[21].id = 21;
        this.ⲆΔⲆ[96] = Gf(60, 60, 0, ⵠΔ[926], 3);
        this.ⲆΔⲆ[96].id = 96;
        this.ᐃⵠᐃ[22] = Gf(68, 68, 0, ⵠΔ[931], 3);
        this.ᐃⵠᐃ[22].id = 22;
        this.ᐃᐃⵠ[22] = Gf(60, 60, 0, ⵠΔ[929], 3);
        this.ᐃᐃⵠ[22].id = 22;
        this.ⲆΔⲆ[97] = Gf(60, 60, 0, ⵠΔ[930], 3);
        this.ⲆΔⲆ[97].id = 97;
        this.ᐃⵠᐃ[60] = Gf(68, 68, 0, ⵠΔ[736], 3);
        this.ᐃⵠᐃ[60].id = 60;
        this.ᐃᐃⵠ[60] = Gf(60, 60, 0, ⵠΔ[735], 3);
        this.ᐃᐃⵠ[60].id = 60;
        this.ⲆΔⲆ[127] = Gf(60, 60, 0, ⵠΔ[737], 3);
        this.ⲆΔⲆ[127].id = 127;
        this.ᐃⵠᐃ[90] = Gf(68, 68, 0, ⵠΔ[739], 3);
        this.ᐃⵠᐃ[90].id = 90;
        this.ᐃᐃⵠ[90] = Gf(60, 60, 0, ⵠΔ[738], 3);
        this.ᐃᐃⵠ[90].id = 90;
        this.ⲆΔⲆ[173] = Gf(60, 60, 0, ⵠΔ[740], 3);
        this.ⲆΔⲆ[173].id = 173;
        this.ᐃⵠᐃ[92] = Gf(68, 68, 0, ⵠΔ[745], 3);
        this.ᐃⵠᐃ[92].id = 92;
        this.ᐃᐃⵠ[92] = Gf(60, 60, 0, ⵠΔ[744], 3);
        this.ᐃᐃⵠ[92].id = 92;
        this.ⲆΔⲆ[174] = Gf(60, 60, 0, ⵠΔ[746], 3);
        this.ⲆΔⲆ[174].id = 174;
        this.ᐃⵠᐃ[93] = Gf(68, 68, 0, ⵠΔ[748], 3);
        this.ᐃⵠᐃ[93].id = 93;
        this.ᐃᐃⵠ[93] = Gf(60, 60, 0, ⵠΔ[747], 3);
        this.ᐃᐃⵠ[93].id = 93;
        this.ⲆΔⲆ[175] = Gf(60, 60, 0, ⵠΔ[749], 3);
        this.ⲆΔⲆ[175].id = 175;
        this.ᐃⵠᐃ[91] = Gf(68, 68, 0, ⵠΔ[742], 3);
        this.ᐃⵠᐃ[91].id = 91;
        this.ᐃᐃⵠ[91] = Gf(60, 60, 0, ⵠΔ[741], 3);
        this.ᐃᐃⵠ[91].id = 91;
        this.ⲆΔⲆ[176] = Gf(60, 60, 0, ⵠΔ[743], 3);
        this.ⲆΔⲆ[176].id = 176;
        this.ᐃⵠᐃ[100] = Gf(68, 68, 0, ⵠΔ[1165], 3);
        this.ᐃⵠᐃ[100].id = 100;
        this.ᐃᐃⵠ[100] = Gf(60, 60, 0, ⵠΔ[1164], 3);
        this.ᐃᐃⵠ[100].id = 100;
        this.ⲆΔⲆ[Zr.ΔΔᐃᐃⲆ] = Gf(60, 60, 0, ⵠΔ[Wr.ΔⵠᐃᐃᐃᐃΔᐃΔ], 3);
        this.ⲆΔⲆ[Zr.ΔΔᐃᐃⲆ].id = Zr.ΔΔᐃᐃⲆ;
        this.ᐃⵠᐃ[34] = Gf(68, 68, 0, ⵠΔ[945], 3);
        this.ᐃⵠᐃ[34].id = 34;
        this.ᐃᐃⵠ[34] = Gf(60, 60, 0, ⵠΔ[943], 3);
        this.ᐃᐃⵠ[34].id = 34;
        this.ⲆΔⲆ[30] = Gf(60, 60, 0, ⵠΔ[944], 3);
        this.ⲆΔⲆ[30].id = 30;
        this.ᐃⵠᐃ[44] = Gf(68, 68, 0, ⵠΔ[948], 3);
        this.ᐃⵠᐃ[44].id = 44;
        this.ᐃᐃⵠ[44] = Gf(60, 60, 0, ⵠΔ[946], 3);
        this.ᐃᐃⵠ[44].id = 44;
        this.ⲆΔⲆ[92] = Gf(60, 60, 0, ⵠΔ[947], 3);
        this.ⲆΔⲆ[92].id = 92;
        this.ᐃⵠᐃ[17] = Gf(68, 68, 0, ⵠΔ[878], 3);
        this.ᐃⵠᐃ[17].id = 17;
        this.ᐃᐃⵠ[17] = Gf(60, 60, 0, ⵠΔ[877], 3);
        this.ᐃᐃⵠ[17].id = 17;
        this.ⲆΔⲆ[32] = Gf(60, 60, 0, ⵠΔ[879], 3);
        this.ⲆΔⲆ[32].id = 32;
        this.ᐃⵠᐃ[63] = Gf(68, 68, 0, ⵠΔ[568], 3);
        this.ᐃⵠᐃ[63].id = 63;
        this.ᐃᐃⵠ[63] = Gf(60, 60, 0, ⵠΔ[566], 3);
        this.ᐃᐃⵠ[63].id = 63;
        this.ⲆΔⲆ[130] = Gf(60, 60, 0, ⵠΔ[567], 3);
        this.ⲆΔⲆ[130].id = 130;
        this.ᐃⵠᐃ[187] = Gf(68, 68, 0, ⵠΔ[591], 3);
        this.ᐃⵠᐃ[187].id = 187;
        this.ᐃᐃⵠ[187] = Gf(60, 60, 0, ⵠΔ[253], 3);
        this.ᐃᐃⵠ[187].id = 187;
        this.ᐃⵠᐃ[_r.ΔΔΔΔᐃⲆⲆ] = Gf(68, 68, 0, ⵠΔ[Wr.ⵠᐃⵠⵠΔⵠΔᐃΔ], 3);
        this.ᐃⵠᐃ[_r.ΔΔΔΔᐃⲆⲆ].id = _r.ΔΔΔΔᐃⲆⲆ;
        this.ᐃᐃⵠ[_r.ΔΔΔΔᐃⲆⲆ] = Gf(60, 60, 0, ⵠΔ[Wr.ⵠᐃΔΔⲆⲆⵠⲆⵠ], 3);
        this.ᐃᐃⵠ[_r.ΔΔΔΔᐃⲆⲆ].id = _r.ΔΔΔΔᐃⲆⲆ;
        this.ᐃⵠᐃ[_r.ⲆᐃΔⵠᐃᐃΔ] = Gf(68, 68, 0, ⵠΔ[Wr.ΔⵠᐃⵠᐃⵠⵠΔᐃ], 3);
        this.ᐃⵠᐃ[_r.ⲆᐃΔⵠᐃᐃΔ].id = _r.ⲆᐃΔⵠᐃᐃΔ;
        this.ᐃᐃⵠ[_r.ⲆᐃΔⵠᐃᐃΔ] = Gf(60, 60, 0, ⵠΔ[Wr.ΔⵠⲆᐃᐃⲆⲆᐃⲆ], 3);
        this.ᐃᐃⵠ[_r.ⲆᐃΔⵠᐃᐃΔ].id = _r.ⲆᐃΔⵠᐃᐃΔ;
        this.ᐃⵠᐃ[_r.ΔⲆᐃΔΔⵠΔ] = Gf(68, 68, 0, ⵠΔ[Wr.ⵠΔᐃⲆᐃᐃᐃᐃⵠ], 3);
        this.ᐃⵠᐃ[_r.ΔⲆᐃΔΔⵠΔ].id = _r.ΔⲆᐃΔΔⵠΔ;
        this.ᐃᐃⵠ[_r.ΔⲆᐃΔΔⵠΔ] = Gf(60, 60, 0, ⵠΔ[Wr.ΔᐃΔᐃΔΔⲆΔⲆ], 3);
        this.ᐃᐃⵠ[_r.ΔⲆᐃΔΔⵠΔ].id = _r.ΔⲆᐃΔΔⵠΔ;
        this.ᐃⵠᐃ[_r.ⲆᐃⵠᐃᐃⵠⲆ] = Gf(68, 68, 0, ⵠΔ[Wr.ΔⵠᐃⵠⵠᐃΔΔⵠ], 3);
        this.ᐃⵠᐃ[_r.ⲆᐃⵠᐃᐃⵠⲆ].id = _r.ⲆᐃⵠᐃᐃⵠⲆ;
        this.ᐃᐃⵠ[_r.ⲆᐃⵠᐃᐃⵠⲆ] = Gf(60, 60, 0, ⵠΔ[Wr.ⵠⲆⵠΔΔᐃΔⵠⲆ], 3);
        this.ᐃᐃⵠ[_r.ⲆᐃⵠᐃᐃⵠⲆ].id = _r.ⲆᐃⵠᐃᐃⵠⲆ;
        this.ᐃⵠᐃ[_r.ⲆⵠⵠΔⲆᐃⵠ] = Gf(68, 68, 0, ⵠΔ[Wr.ⵠⲆᐃⵠΔⵠⵠΔⲆ], 3);
        this.ᐃⵠᐃ[_r.ⲆⵠⵠΔⲆᐃⵠ].id = _r.ⲆⵠⵠΔⲆᐃⵠ;
        this.ᐃᐃⵠ[_r.ⲆⵠⵠΔⲆᐃⵠ] = Gf(60, 60, 0, ⵠΔ[Wr.ᐃΔΔⲆⵠⲆⵠⵠΔ], 3);
        this.ᐃᐃⵠ[_r.ⲆⵠⵠΔⲆᐃⵠ].id = _r.ⲆⵠⵠΔⲆᐃⵠ;
        this.ⲆΔᐃⲆⵠΔΔ = function () {
            for (var a = Qx.ᐃⲆⵠΔ.ᐃⲆⲆⲆⵠ, b = 10, c = 10, d = 0; a.length > d; d++) {
                if (d > 0 && !(d % 4)) {
                    b += a[0].info.width + 10;
                    c = 10;
                }
                a[d].info.translate.x = b;
                a[d].info.translate.y = c;
                c += 10 + a[d].info.height;
            }
        };
        this.ΔⲆⵠⲆⵠΔᐃ = function () {
            var a = Math.floor((10 + this.ᐃⵠᐃ[0].info.ΔⲆ[0].width) * Math.floor((3 + Qx.ᐃⲆⵠΔ.ᐃⲆⲆⲆⵠ.length) / 4) + 35);
            for (var b = 0; this.ᐃⵠᐃ.length > b; b++) {
                if (this.ᐃⵠᐃ[b]) {
                    this.ᐃⵠᐃ[b].info.translate.x = a;
                    this.ᐃⵠᐃ[b].info.translate.y = 22;
                }
            }
            this.ΔⵠⲆΔΔᐃᐃ.info.translate.x = a + 17;
            this.ΔⵠⲆΔΔᐃᐃ.info.translate.y = 22 + ⵠΔ[339].height;
            this.ᐃΔΔᐃΔⲆⲆ.info.translate.x = a + 17;
            this.ᐃΔΔᐃΔⲆⲆ.info.translate.y = 30;
            this.ᐃΔⵠΔⵠⲆᐃ.info.translate.x = a + 17;
            this.ᐃΔⵠΔⵠⲆᐃ.info.translate.y = 22 + ⵠΔ[339].height;
        };
        this.ⲆⵠᐃⲆᐃⲆΔⲆΔ = function () {
            var a = Math.floor((ao - ⵠΔ[556][0].width) / 2);
            for (var b = 0; this.ⲆⲆᐃᐃᐃ.length > b; b++) {
                this.ⲆⲆᐃᐃᐃ[b].button.info.translate.x = a;
                this.ⲆⲆᐃᐃᐃ[b].button.info.translate.y = -13;
            }
        };
        this.ⲆΔΔⵠᐃⲆⲆ = function () {
            var a = 12 + Math.floor((10 + this.ᐃⲆᐃⵠⵠᐃᐃ.info.ΔⲆ[0].width) * Math.floor((3 + Qx.ᐃⲆⵠΔ.ᐃⲆⲆⲆⵠ.length) / 4) + 35);
            this.ᐃⲆᐃⵠⵠᐃᐃ.info.translate.x = a;
            this.ᐃⲆᐃⵠⵠᐃᐃ.info.translate.y = 33;
            this.ⲆᐃΔⵠᐃⵠⵠ.info.translate.x = this.ᐃⲆᐃⵠⵠᐃᐃ.info.translate.x;
            this.ⲆᐃΔⵠᐃⵠⵠ.info.translate.y = 137;
            this.ᐃⲆⵠⲆᐃΔⵠ.info.translate.x = this.ᐃⲆᐃⵠⵠᐃᐃ.info.translate.x;
            this.ᐃⲆⵠⲆᐃΔⵠ.info.translate.y = 240;
        };
        this.ⵠΔⲆⲆΔΔⲆ = function () {
            var a = 12 + Math.floor(Math.floor((3 + Qx.ᐃⲆⵠΔ.ᐃⲆⲆⲆⵠ.length) / 4) * (10 + this.ΔᐃⲆΔⲆⲆⲆ.info.ΔⲆ[0].width) + 35);
            this.ΔᐃⲆΔⲆⲆⲆ.info.translate.x = a;
            this.ΔᐃⲆΔⲆⲆⲆ.info.translate.y = 36;
            a += 83;
            this.ⲆᐃᐃⵠΔⵠⲆ.info.translate.x = a;
            this.ⲆᐃᐃⵠΔⵠⲆ.info.translate.y = 36;
            this.ⲆᐃᐃΔΔᐃᐃ.info.translate.x = a;
            this.ⲆᐃᐃΔΔᐃᐃ.info.translate.y = 36;
            this.ᐃΔΔΔⵠⲆⵠ.info.translate.x = a;
            this.ᐃΔΔΔⵠⲆⵠ.info.translate.y = 36;
            this.ᐃᐃⵠᐃᐃⲆⵠ.info.translate.x = a;
            this.ᐃᐃⵠᐃᐃⲆⵠ.info.translate.y = 36;
            this.ⲆᐃΔⵠᐃⵠᐃ.info.translate.x = a;
            this.ⲆᐃΔⵠᐃⵠᐃ.info.translate.y = 36;
        };
        this.ᐃΔΔΔΔΔᐃ = function () {
            var a = 12 + Math.floor((10 + this.ᐃⵠⵠΔⲆΔⲆ.info.ΔⲆ[0].width) * Math.floor((3 + Qx.ᐃⲆⵠΔ.ᐃⲆⲆⲆⵠ.length) / 4) + 35);
            this.ᐃⵠⵠΔⲆΔⲆ.info.translate.x = a;
            this.ᐃⵠⵠΔⲆΔⲆ.info.translate.y = 36;
            a += 83;
            this.ⵠΔᐃⵠⵠⵠⲆ.info.translate.x = a;
            this.ⵠΔᐃⵠⵠⵠⲆ.info.translate.y = 36;
        };
        this.ⲆⵠⲆⵠⲆᐃⲆ = function () {
            var a = Math.floor((10 + this.ᐃΔΔᐃΔⵠⲆ.info.ΔⲆ[0].width) * Math.floor((3 + Qx.ᐃⲆⵠΔ.ᐃⲆⲆⲆⵠ.length) / 4) + 35);
            this.ᐃΔΔᐃΔⵠⲆ.info.translate.x = a;
            this.ᐃΔΔᐃΔⵠⲆ.info.translate.y = 22;
        };
        this.ΔᐃⲆⲆΔΔΔ = function () {
            var a = Qx.ⲆⲆⵠΔ.ⵠⵠⵠΔΔ;
            if (a.length > 0) {
                var b = Math.floor((ao - (a[0].info.width + 5) * Qx.ⲆⲆⵠΔ.max) / 2);
            }
            for (var c = 0; c < a.length; c++) {
                a[c].info.translate.x = b + (a[c].info.width + 5) * c;
                a[c].info.translate.y = so - a[c].info.width - 10;
                this.ⵠⵠⵠΔⵠ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
                this.ⵠⵠⵠΔⵠ[a[c].id].info.translate.y = a[c].info.translate.y - this.ⵠⵠⵠΔⵠ[a[c].id].info.ΔⲆ[0].height - 6;
            }
        };
        var m;
        var n = 0;
        function o() {
            f.Ⲇⵠᐃ();
            if (++n == 30) {
                f.ᐃⲆⲆⵠᐃᐃⲆ();
                f.Ⲇⵠᐃ();
                return;
            }
            hc.setTimeout(o, 33);
        }
        this.ⵠⲆⲆᐃⵠ = function (a) {
            if (Qx.ⵠᐃΔⲆΔ.open) {
                Qx.ⵠᐃΔⲆΔ.ⵠⲆⲆᐃⵠ();
            }
            if (Qx.ΔⲆⵠᐃΔ.open) {
                Qx.ΔⲆⵠᐃΔ.ⵠⲆⲆᐃⵠ();
            }
            document.getElementById("team_box").style.display = "none";
            f.ᐃⵠⵠⵠⲆ.style.display = "none";
            f.ᐃⵠⵠⵠⲆ.open = th;
            f.sign.style.display = "none";
            f.sign.open = tk;
            document.getElementById("shop_starterkit").style.display = "none";
            document.getElementById("home_craft").style.display = "none";
            document.getElementById("recipe_craft").style.display = "none";
            f.ⲆΔⲆΔ.open = false;
            document.getElementById("option_in_game").style.display = "none";
            f.options.open = ds;
            document.getElementById("sure_delete").style.display = "none";
            f.ΔΔⲆⵠ.open = false;
            document.getElementById("cancel_sure_delete").style.display = "none";
            f.ΔⲆᐃⲆⵠ.open = Dj;
            document.getElementById("chronoquest").style.display = "none";
            f.ᐃΔⲆᐃ.open = pq;
            m = a;
            f.ⵠᐃⵠⵠⵠΔᐃ();
            f.Δᐃ.style.cursor = f.ᐃᐃᐃⲆⵠᐃΔ;
            Tx.ⵠⲆⲆᐃⵠ();
            g = -1;
            p();
            Zx();
        };
        var g = -1;
        function p() {
            f.Ⲇⵠᐃ();
            if (++g == 30) {
                f.stop();
                m();
                return;
            }
            hc.setTimeout(p, 33);
        }
        this.ΔᐃᐃⲆⵠ = tk;
        this.stop = function () {
            this.ΔᐃᐃⲆⵠ = false;
        };
        this.ΔΔᐃⲆⵠ = function () {
            ΔⵠΔΔ.ⵠⵠΔⲆⵠΔᐃΔᐃ();
            f.ΔᐃᐃⲆⵠ = true;
            g = -1;
            n = 0;
            o();
        };
        this.Ⲇⵠᐃ = function () {
            this.ⵠⲆᐃⲆΔ.translate.x = ao - this.ⵠⲆᐃⲆΔ.ΔⲆ.width - 10;
            this.ⵠⲆᐃⲆΔ.translate.y = 5;
            Px.ΔᐃΔᐃΔ.translate.x = this.ⵠⲆᐃⲆΔ.translate.x - ⵠΔ[725][0].width - 85;
            Px.ΔᐃΔᐃΔ.translate.y = 10;
            this.ⲆΔⲆΔ.button.info.translate.x = this.ⵠⲆᐃⲆΔ.translate.x - ⵠΔ[708][0].width - 10;
            this.ⲆΔⲆΔ.button.info.translate.y = 10;
            this.ᐃΔⲆᐃ.button.info.translate.x = this.ⵠⲆᐃⲆΔ.translate.x - ⵠΔ[755][0].width - 20;
            this.ᐃΔⲆᐃ.button.info.translate.y = this.ⲆΔⲆΔ.button.info.translate.y + ⵠΔ[708][0].height + 5;
            this.options.button.info.translate.x = this.ⵠⲆᐃⲆΔ.translate.x - ⵠΔ[727][0].width - 20;
            this.options.button.info.translate.y = this.ᐃΔⲆᐃ.button.info.translate.y + ⵠΔ[727][0].height + 18;
            this.ΔΔᐃᐃ.ⲆΔᐃⲆᐃᐃⲆ.info.translate.x = this.ⵠⲆᐃⲆΔ.translate.x - ⵠΔ[727][0].width - 20;
            this.ΔΔᐃᐃ.ⲆΔᐃⲆᐃᐃⲆ.info.translate.y = this.options.button.info.translate.y + ⵠΔ[783][0].height;
            this.ΔΔᐃᐃ.ⲆᐃⲆᐃΔΔⲆ.info.translate.x = this.ⵠⲆᐃⲆΔ.translate.x - ⵠΔ[727][0].width - 20;
            this.ΔΔᐃᐃ.ⲆᐃⲆᐃΔΔⲆ.info.translate.y = this.options.button.info.translate.y + ⵠΔ[783][0].height;
            this.ᐃⵠⵠⵠⲆ.button.info.translate.x = this.ⵠⲆᐃⲆΔ.translate.x - ⵠΔ[795][0].width - 20;
            this.ᐃⵠⵠⵠⲆ.button.info.translate.y = this.ΔΔᐃᐃ.ⲆΔᐃⲆᐃᐃⲆ.info.translate.y + ⵠΔ[795][0].height;
            Qx.ⵠΔΔᐃᐃ.translate.x = this.ⵠⲆᐃⲆΔ.translate.x - 63 - 85;
            Qx.ⵠΔΔᐃᐃ.translate.y = 100;
            Qx.ⲆⵠⵠⵠΔΔΔ.translate.x = this.ⵠⲆᐃⲆΔ.translate.x - ⵠΔ[517].width - 85;
            Qx.ⲆⵠⵠⵠΔΔΔ.translate.y = Qx.ⵠΔΔᐃᐃ.translate.y + 10 + ⵠΔ[546].height;
            this.ΔⲆⲆⲆᐃ.translate.y = so - 3 - 193;
            this.ΔⲆⲆⲆᐃ.translate.x = ao - 3 - 193;
            this.ᐃᐃᐃⵠ.translate.x = 5;
            this.ᐃᐃᐃⵠ.translate.y = so - this.ᐃᐃᐃⵠ.ΔⲆ.height - 5;
            this.ᐃᐃⲆⵠΔ.button.info.translate.x = lo - 45.5;
            this.ᐃᐃⲆⵠΔ.button.info.translate.y = 50;
            this.ⲆΔᐃⲆⵠΔΔ();
            this.ΔᐃⲆⲆΔΔΔ();
            this.ΔⲆⵠⲆⵠΔᐃ();
            this.ⲆⵠⲆⵠⲆᐃⲆ();
            this.ᐃΔΔΔΔΔᐃ();
            this.ⵠΔⲆⲆΔΔⲆ();
            this.ⲆΔΔⵠᐃⲆⲆ();
            this.ⲆⵠᐃⲆᐃⲆΔⲆΔ();
            this.sign.ᐃᐃᐃⵠⲆΔⲆ();
            Hu();
            Qx.ⵠᐃΔⲆΔ.Ⲇⵠᐃ();
            Qx.ΔⲆⵠᐃΔ.Ⲇⵠᐃ();
            this.ⵠⵠΔⲆᐃᐃⵠⲆΔ.Ⲇⵠᐃ();
            this.ⲆΔⲆΔ.ᐃΔⵠΔⲆΔᐃ.Ⲇⵠᐃ();
            this.ⲆΔⲆΔ.list.Ⲇⵠᐃ();
            this.ΔΔⲆⵠ.Ⲇⵠᐃ();
            this.ΔⲆᐃⲆⵠ.Ⲇⵠᐃ();
            this.ᐃΔⲆᐃ.Ⲇⵠᐃ();
            this.ᐃᐃⲆⵠΔ.Ⲇⵠᐃ();
            this.options.Ⲇⵠᐃ();
            this.ᐃⵠⵠⵠⲆ.Ⲇⵠᐃ();
            this.sign.Ⲇⵠᐃ();
            var a = 0;
            if (n != 30) {
                a = 1500 / (n + 1) - 50;
            }
            if (g != -1) {
                a = -(1500 / (30 - g + 1) - 48);
            }
            this.ᐃᐃⲆⵠΔ.button.info.translate.y -= a > 0 ? a : -a;
            this.ⵠⲆᐃⲆΔ.translate.y -= a > 0 ? a : -a;
            Qx.ⵠΔΔᐃᐃ.translate.y -= a > 0 ? a : -a;
            Qx.ⲆⵠⵠⵠΔΔΔ.translate.y -= a > 0 ? a : -a;
            this.ⲆΔⲆΔ.button.info.translate.y -= a > 0 ? a : -a;
            this.ᐃΔⲆᐃ.button.info.translate.y -= a > 0 ? a : -a;
            this.options.button.info.translate.y -= a > 0 ? a : -a;
            this.ᐃⵠⵠⵠⲆ.button.info.translate.y -= a > 0 ? a : -a;
            this.ΔΔᐃᐃ.ⲆΔᐃⲆᐃᐃⲆ.info.translate.y -= a > 0 ? a : -a;
            this.ΔΔᐃᐃ.ⲆᐃⲆᐃΔΔⲆ.info.translate.y -= a > 0 ? a : -a;
            Px.ΔᐃΔᐃΔ.translate.y -= a > 0 ? a : -a;
            this.ᐃᐃᐃⵠ.translate.y -= a < 0 ? a : -a;
            this.ΔⲆⲆⲆᐃ.translate.y -= a < 0 ? a : -a;
        };
        this.ᐃΔΔΔⲆⵠⲆΔΔ = function () {
            if (!Qx.ⲆⵠΔⵠⲆ.enabled && this.ⲆΔᐃⲆⲆᐃⵠ && !Qx.ᐃΔΔⲆⵠ) {
                Zu();
            }
            av();
            (function () {
                var a = Px.Ⲇᐃⵠ[0];
                if (Px.mode === 0 || Px.mode === 7 || Px.mode === 2 || Px.mode === 4 || Px.mode === 5 || Px.mode === 6 || Px.mode === 3) {
                    for (var b = 0; b < a.length; b++) {
                        a[b].ⲆΔⲆΔⲆᐃⲆ();
                    }
                } else if (Px.mode === 1) {
                    for (b = 0; b < a.length; b++) {
                        if (Qx.ΔΔᐃⲆⲆᐃⵠ || Qx.ⲆⵠⵠⵠΔΔΔ.enabled || a[b].ⵠᐃΔᐃ.ΔⵠⲆⵠⲆ !== "spectator") {
                            a[b].ⲆΔⲆΔⲆᐃⲆ();
                        }
                    }
                }
            })();
            hr.ⵠΔⲆⵠᐃⲆΔ();
            if (this.ⲆΔᐃⲆⲆᐃⵠ) {
                Ou();
                if (this.ᐃᐃΔᐃⲆⵠⵠ === 1) {
                    this.ⲆΔⲆΔ.button.ᐃⲆᐃⲆ(d);
                }
                if (Px.mode !== 2 && Px.mode !== 4 && Px.mode !== 5 && this.ⵠᐃⵠᐃᐃⲆⵠ === 1) {
                    this.ᐃΔⲆᐃ.button.ᐃⲆᐃⲆ(d);
                }
                this.options.button.ᐃⲆᐃⲆ(d);
                if (this.ᐃΔᐃᐃⲆⵠᐃ === 1) {
                    this.ᐃⵠⵠⵠⲆ.button.ᐃⲆᐃⲆ(d);
                }
                if (Tx.ΔΔᐃⲆⵠ) {
                    this.ΔΔᐃᐃ.ⲆΔᐃⲆᐃᐃⲆ.ᐃⲆᐃⲆ(d);
                } else {
                    this.ΔΔᐃᐃ.ⲆᐃⲆᐃΔΔⲆ.ᐃⲆᐃⲆ(d);
                }
                bv();
                iv();
                this.ᐃᐃᐃⵠ.ᐃⲆᐃⲆ();
                dv();
                Wu();
                Xu();
                nv();
                ov();
                Tu();
                Ku();
                (function () {
                    if (!Qx.ⲆᐃΔΔ.open && !Qx.ⵠᐃⲆᐃⲆ.open && !Qx.ⲆᐃⲆⵠ.open && !Qx.ΔΔΔΔ.open && !Qx.ⵠⲆᐃⲆ.open) {
                        Qx.ΔᐃⲆᐃᐃ.open = pq;
                        var a = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
                        var b = 100;
                        if (a) {
                            for (var c = 0; Px.Ⲇᐃⵠ[35].length > c; c++) {
                                var d = Px.Ⲇᐃⵠ[35][c];
                                var e = ⵠᐃⵠ.ᐃⵠᐃⵠ(d, a);
                                if (b > e) {
                                    b = e;
                                    Qx.ΔᐃⲆᐃᐃ.open = Er;
                                    Qx.ΔᐃⲆᐃᐃ.ⵠΔᐃⵠ = d.ⵠΔᐃⵠ;
                                    Qx.ΔᐃⲆᐃᐃ.ΔⲆΔΔⲆ = d.id;
                                }
                            }
                        }
                    }
                })();
                Zp();
                Su();
                Uu();
                Iu();
                Hu();
                Pu();
            }
            if (Qx.ⲆⵠΔⵠⲆ.enabled) {
                Lu();
            }
            Xp();
            if (this.ⲆΔᐃⲆⲆᐃⵠ && this.ΔᐃᐃΔⲆΔⵠ === 1) {
                $u();
            }
            Qx.ⲆⵠᐃΔⲆΔⲆ.ᐃⲆᐃⲆ();
            Qx.alert.ᐃⲆᐃⲆ("#FFF", "#000");
            if (this.ⲆΔᐃⲆⲆᐃⵠ) {
                Qx.ⲆⵠΔⵠⲆ.ᐃⲆᐃⲆ();
                Qx.ᐃᐃⲆⵠΔ.ᐃⲆᐃⲆ();
                Qx.ⲆⲆⵠΔ.ᐃⵠΔΔⲆΔᐃ.ᐃⲆᐃⲆ(Vx.ᐃⲆⵠⲆ.x, Vx.ᐃⲆⵠⲆ.y);
            }
            Ju();
        };
        this.ΔᐃⲆᐃⵠⲆᐃᐃᐃ = function () {
            Qx.ΔᐃⲆ.Ⲇⵠᐃ();
            Qx.ᐃᐃᐃⵠ.Ⲇⵠᐃ();
            if (!Qx.reconnect.enabled && Qx.ⵠΔΔᐃⲆ) {
                Qx.control.Ⲇⵠᐃ();
                Qx.ⵠΔΔᐃᐃ.Ⲇⵠᐃ();
            }
            Px.Ⲇⵠᐃ();
            this.ᐃΔⲆᐃ.ΔⲆΔⲆΔⵠⲆⲆᐃ();
        };
        this.ΔΔⵠⲆⵠᐃΔⲆⵠ = function () {
            cf();
        };
        this.ⵠⵠⵠⲆΔΔⵠⲆⵠ = function () {
            ΔⵠΔΔ.ᐃⵠᐃⲆⵠⲆⲆⵠⵠ();
            ΔⵠΔΔ.ᐃⵠᐃΔⵠᐃⲆᐃⲆ();
            ΔⵠΔΔ.ⲆΔⵠᐃⵠᐃⵠΔᐃ();
            ΔⵠΔΔ.ᐃᐃⵠᐃⲆⵠᐃⲆΔ();
        };
        this.ᐃⲆᐃⲆ = function () {
            if (!Qx.reconnect.enabled && Qx.ⵠΔΔᐃⲆ) {
                this.ⵠⵠⵠⲆΔΔⵠⲆⵠ();
            }
            Tx.ⲆΔⲆⲆⵠΔΔⵠⲆ();
            this.ΔᐃⲆᐃⵠⲆᐃᐃᐃ();
            if (Mx.ⲆΔᐃⵠᐃⲆⵠ !== 1) {
                this.ΔΔⵠⲆⵠᐃΔⲆⵠ();
                this.ᐃΔΔΔⲆⵠⲆΔΔ();
            } else {
                var a = ᐃⵠ.ⵠΔᐃⵠⲆⵠⲆ;
                Mu(d, a, lo - a.width / 4, Po - a.height / 4, a.width / 2, a.height / 2);
            }
        };
        this.ⵠᐃᐃⲆⵠᐃⲆ = function (a) {
            if (!Qx.ⵠᐃΔⲆΔ.open && !Qx.ΔⲆⵠᐃΔ.open) {
                if (a.code === Settings.AutoSpike.k) Settings.AutoSpike.e = false;
            }
            if (Qx.ⵠᐃΔⲆΔ.open && a.keyCode === 27) {
                Qx.ⵠᐃΔⲆΔ.ⵠⲆⲆᐃⵠ();
            } else if (Qx.ΔⲆⵠᐃΔ.open && a.keyCode === 27) {
                Qx.ΔⲆⵠᐃΔ.ⵠⲆⲆᐃⵠ();
            } else if (Qx.ⵠᐃΔⲆΔ.open || Qx.ΔⲆⵠᐃΔ.open || a.keyCode != 79 || g != -1) {
                if (a.keyCode == 13 && g == -1) {
                    if (Qx.ΔⲆⵠᐃΔ.open) {
                        Qx.ΔⲆⵠᐃΔ.ⲆⲆⵠᐃᐃᐃᐃ();
                    } else {
                        Qx.ⵠᐃΔⲆΔ.ΔΔᐃⲆⵠ();
                    }
                } else if (!Qx.ⵠᐃΔⲆΔ.open && !Qx.ΔⲆⵠᐃΔ.open) {
                    if (a.keyCode === 82) {
                        Qx.ⵠΔΔᐃᐃ.ⵠⲆΔᐃⵠⵠⲆ();
                    } else if (a.keyCode !== 80 || Px.mode !== 1 || Qx.ΔΔᐃⲆⲆᐃⵠ) {
                        if (a.keyCode >= 49 && a.keyCode <= 57) {
                            if (Qx.ᐃⲆⵠΔ.id < 0) {
                                var b = a.keyCode - 49;
                                var c = Qx.ⲆⲆⵠΔ.ⵠⵠⵠΔΔ[b];
                                if (c) {
                                    ΔⵠΔΔ.ᐃΔΔⵠⲆ(c.id, b);
                                }
                            }
                        } else if (a.keyCode == 89) {
                            Qx.ᐃΔⲆⲆΔᐃⵠ = !Qx.ᐃΔⲆⲆΔᐃⵠ;
                        } else if (a.keyCode == 71) {
                            Qx.ᐃⲆⵠΔ.ᐃⵠᐃΔⲆΔⵠΔΔ();
                        }
                    } else {
                        Qx.ⲆⵠⵠⵠΔΔΔ.ⵠⲆΔᐃⵠⵠⲆ();
                    }
                }
            } else {
                Qx.ΔⲆⵠᐃΔ.ᐃᐃᐃⵠⲆᐃⵠᐃⵠ();
            }
            Ux.up(a);
        };
        this.ⲆⲆΔΔⲆⵠᐃ = function (a) {
            Ux.down(a);
            if (!Qx.ⵠᐃΔⲆΔ.open && !Qx.ΔⲆⵠᐃΔ.open) {
                if (8 == a.keyCode) a.preventDefault();
                if (a.code === Settings.AutoSpike.k) Settings.AutoSpike.e = true;
            }
        };
        this.ⵠᐃᐃⵠⵠᐃᐃ = function (b) {
            Vx.ᐃⲆⵠⲆ = jf(f.Δᐃ, b);
            var c = false;
            if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0) {
                f.ΔⲆⲆⲆᐃ.focus(Vx.ᐃⲆⵠⲆ);
            }
            var d = Qx.ⲆᐃΔΔ;
            if (Qx.ᐃⲆⵠΔ.id < 0 && d.id >= 0 && (!Qx.ⲆᐃΔΔ.lock || Qx.ⲆᐃΔΔ.ⵠΔᐃⵠ === Qx.id)) {
                c |= f.ᐃⵠᐃ[Qx.ⲆᐃΔΔ.id].ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
            }
            var e = Qx.ⲆᐃⲆⵠ;
            if (e.open && e.ⲆⲆⲆΔΔⲆⲆ > 0) {
                c |= f.ⵠΔᐃⵠⵠⵠⲆ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
            }
            var j = Qx.ⵠⲆᐃⲆ;
            if (j.open && j.ⲆⵠᐃᐃⵠΔᐃ > 0) {
                c |= f.ⲆᐃᐃⵠΔⵠⲆ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
                c |= f.ⲆᐃᐃΔΔᐃᐃ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
                c |= f.ᐃΔΔΔⵠⲆⵠ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
                c |= f.ᐃᐃⵠᐃᐃⲆⵠ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
                c |= f.ⲆᐃΔⵠᐃⵠᐃ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
            }
            var a = Qx.ΔΔΔΔ;
            if (a.open && a.ᐃⵠⲆΔⲆⵠⲆ > 0) {
                c |= f.ᐃⲆⵠⲆᐃΔⵠ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
            }
            if (Qx.sign.open) {
                c |= f.sign.button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
            }
            if (!Qx.ⲆᐃΔΔ.lock) {
                if (Qx.ⲆᐃΔΔ.ᐃᐃⲆΔΔᐃⵠ) {
                    c |= f.ᐃΔⵠΔⵠⲆᐃ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
                }
            }
            if (Qx.ⲆᐃΔΔ.ᐃⵠⲆΔᐃⲆᐃ) {
                c |= f.ΔⵠⲆΔΔᐃᐃ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
            }
            if (Qx.ᐃⲆⵠΔ.id < 0 && !f.ⲆΔⲆΔ.open && !f.ΔΔⲆⵠ.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃΔⲆᐃ.open && !f.options.open && !f.ᐃⵠⵠⵠⲆ.open) {
                for (var k = Qx.ⲆⲆⵠΔ.ⵠⵠⵠΔΔ, m = 0; m < k.length; m++) {
                    var n = k[m].ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
                    c |= n;
                    if (n) {
                        Qx.ⲆⲆⵠΔ.ᐃⵠΔΔⲆΔᐃ.start(m, Vx.ᐃⲆⵠⲆ);
                    }
                    if (d.open && (d.id < 0 || d.id == k[m].id) || Qx.ⵠᐃⲆᐃⲆ.open && k[m].id === 109 || Qx.ΔᐃⲆᐃᐃ.open && k[m].id === 180 || Qx.ΔΔΔΔ.open && (k[m].id === 109 || k[m].id === 131) || Qx.ⲆᐃⲆⵠ.open && k[m].id === 134 || Qx.ⵠⲆᐃⲆ.open && k[m].id === 109) {
                        c |= f.ⵠⵠⵠΔⵠ[k[m].id].ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
                    }
                }
            }
            if (Qx.ⲆⵠΔᐃⵠ.open) {
                c |= f.ⲆⵠΔᐃⵠ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
            }
            if (f.ⵠᐃⲆΔⵠ != -1) {
                if (c |= f.ⲆⲆᐃᐃᐃ[f.ⵠᐃⲆΔⵠ].button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If)) {
                    var o = true;
                }
            } else {
                o = false;
            }
            if (Qx.ᐃⲆⵠΔ.id < 0 && Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && !o && !f.ⲆΔⲆΔ.open && !f.ΔΔⲆⵠ.open && !f.options.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃⵠⵠⵠⲆ.open && !Qx.ᐃΔΔⲆⵠ) {
                k = Qx.ᐃⲆⵠΔ.ᐃⲆⲆⲆⵠ;
                m = 0;
                for (; k.length > m; m++) {
                    c |= k[m].ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
                }
            }
            if (Qx.ᐃⲆⵠΔ.id < 0 && Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && !!Qx.ᐃᐃⲆⵠΔ.open && !f.ⲆΔⲆΔ.open && !f.ΔΔⲆⵠ.open && !f.options.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃΔⲆᐃ.open && !f.ᐃⵠⵠⵠⲆ.open) {
                c |= f.ᐃᐃⲆⵠΔ.button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
            }
            if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && !f.ΔΔⲆⵠ.open && !f.options.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃΔⲆᐃ.open && !f.ᐃⵠⵠⵠⲆ.open) {
                c |= f.ⲆΔⲆΔ.button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
            }
            if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && !f.ⲆΔⲆΔ.open && !f.ΔΔⲆⵠ.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃΔⲆᐃ.open && !f.ᐃⵠⵠⵠⲆ.open) {
                c |= f.options.button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
            }
            if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && !f.ⲆΔⲆΔ.open && !f.ΔΔⲆⵠ.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃΔⲆᐃ.open && !f.options.open) {
                c |= f.ᐃⵠⵠⵠⲆ.button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
            }
            if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && !f.ⲆΔⲆΔ.open && !f.ΔΔⲆⵠ.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃΔⲆᐃ.open && !f.options.open && !f.ᐃⵠⵠⵠⲆ.open) {
                if (Tx.ΔΔᐃⲆⵠ) {
                    c |= f.ΔΔᐃᐃ.ⲆΔᐃⲆᐃᐃⲆ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
                } else {
                    c |= f.ΔΔᐃᐃ.ⲆᐃⲆᐃΔΔⲆ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
                }
            }
            if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && !f.ⲆΔⲆΔ.open && !f.ᐃⵠⵠⵠⲆ.open && !f.ΔΔⲆⵠ.open && !f.options.open && !f.ΔⲆᐃⲆⵠ.open && Px.mode !== 2 && Px.mode !== 4 && Px.mode !== 5) {
                c |= f.ᐃΔⲆᐃ.button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
            }
            if (!c && !f.ⲆΔⲆΔ.open && !f.ΔΔⲆⵠ.open && !f.options.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃΔⲆᐃ.open && !f.ᐃⵠⵠⵠⲆ.open && !f.sign.open) {
                if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ >= 0) {
                    ΔⵠΔΔ.ᐃⵠⲆᐃΔⲆΔⲆⲆ();
                } else if (!o) {
                    Vx.down();
                }
            }
        };
        this.ΔΔᐃᐃᐃⲆᐃ = function (b) {
            Vx.ᐃⲆⵠⲆ = jf(f.Δᐃ, b);
            Vx.up();
            if (!Qx.ⲆⲆⵠΔ.ᐃⵠΔΔⲆΔᐃ.release()) {
                var c = Qx.ⲆᐃΔΔ;
                var d = Qx.ⵠᐃⲆᐃⲆ;
                var e = Qx.ΔᐃⲆᐃᐃ;
                var i = Qx.ⲆᐃⲆⵠ;
                var j = Qx.ⵠⲆᐃⲆ;
                var k = Qx.ΔΔΔΔ;
                if (Qx.control.attack) {
                    Qx.control.attack = 0;
                    ΔⵠΔΔ.ⲆΔⵠⲆΔᐃⵠᐃᐃ();
                }
                if (f.ⵠᐃⲆΔⵠ != -1) {
                    var m = f.ⲆⲆᐃᐃᐃ[f.ⵠᐃⲆΔⵠ].button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef);
                    var n = document.getElementById("team_box").style;
                    if (m && n.display == "inline-block") {
                        n.display = "none";
                        return;
                    }
                    if (m) {
                        f.ⲆⲆᐃᐃᐃ[f.ⵠᐃⲆΔⵠ].action();
                    }
                }
                if (Qx.ᐃⲆⵠΔ.id < 0 && c.id >= 0 && !f.ΔΔⲆⵠ.open) {
                    if (!Qx.ⲆᐃΔΔ.lock || Qx.id === Qx.ⲆᐃΔΔ.ⵠΔᐃⵠ) {
                        if (m = f.ᐃⵠᐃ[Qx.ⲆᐃΔΔ.id].ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) {
                            ΔⵠΔΔ.ⲆᐃⲆᐃⵠⵠⵠᐃⵠ(c);
                        }
                    }
                }
                if ((i = Qx.ⲆᐃⲆⵠ).open && i.ⲆⲆⲆΔΔⲆⲆ > 0 && !f.ΔΔⲆⵠ.open) {
                    if (m = f.ⵠΔᐃⵠⵠⵠⲆ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) {
                        ΔⵠΔΔ.ΔΔᐃᐃᐃⲆⵠⲆⵠ(i);
                    }
                }
                if ((j = Qx.ⵠⲆᐃⲆ).open && j.ⲆⵠᐃᐃⵠΔᐃ > 0 && !f.ΔΔⲆⵠ.open) {
                    switch (j.type) {
                        case 24:
                            if (m = f.ⲆᐃᐃⵠΔⵠⲆ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) {
                                ΔⵠΔΔ.ᐃᐃΔΔⲆΔΔ(j);
                            }
                            break;
                        case 25:
                            if (m = f.ⲆᐃᐃΔΔᐃᐃ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) {
                                ΔⵠΔΔ.ᐃᐃΔΔⲆΔΔ(j);
                            }
                            break;
                        case 26:
                            if (m = f.ᐃΔΔΔⵠⲆⵠ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) {
                                ΔⵠΔΔ.ᐃᐃΔΔⲆΔΔ(j);
                            }
                            break;
                        case 27:
                            if (m = f.ᐃᐃⵠᐃᐃⲆⵠ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) {
                                ΔⵠΔΔ.ᐃᐃΔΔⲆΔΔ(j);
                            }
                            break;
                        case 28:
                            if (m = f.ⲆᐃΔⵠᐃⵠᐃ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) {
                                ΔⵠΔΔ.ᐃᐃΔΔⲆΔΔ(j);
                            }
                    }
                }
                if ((k = Qx.ΔΔΔΔ).open && k.ᐃⵠⲆΔⲆⵠⲆ > 0 && !f.ΔΔⲆⵠ.open) {
                    if (m = f.ᐃⲆⵠⲆᐃΔⵠ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) {
                        ΔⵠΔΔ.ⲆⵠΔⲆⲆᐃⲆᐃΔ(k);
                    }
                }
                if (Qx.sign.open && !f.ΔΔⲆⵠ.open) {
                    if (m = f.sign.button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) {
                        f.sign.select();
                    }
                }
                if (!Qx.ⲆᐃΔΔ.lock && !f.ΔΔⲆⵠ.open) {
                    if (Qx.ⲆᐃΔΔ.ᐃᐃⲆΔΔᐃⵠ && (m = f.ᐃΔⵠΔⵠⲆᐃ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef))) {
                        ΔⵠΔΔ.ⵠᐃⵠⲆⵠⵠⵠⵠΔ(c);
                    }
                }
                if (Qx.ⲆᐃΔΔ.ᐃⵠⲆΔᐃⲆᐃ && !f.ΔΔⲆⵠ.open && (m = f.ΔⵠⲆΔΔᐃᐃ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef))) {
                    ΔⵠΔΔ.ᐃΔⲆᐃⲆⲆⵠⵠᐃ(c);
                    if (ga) {
                        ga("send", "event", "Game", "lockpick");
                    }
                }
                if (Qx.ⲆⵠΔᐃⵠ.open) {
                    if (m = f.ⲆⵠΔᐃⵠ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) {
                        ΔⵠΔΔ.ⲆⵠΔᐃⵠ();
                        if (ga) {
                            ga("send", "event", "Game", "resurrection");
                        }
                    }
                }
                if (Qx.ᐃⲆⵠΔ.id < 0 && !Qx.ⲆⵠΔⵠⲆ.enabled && !f.ΔΔⲆⵠ.open) {
                    for (var l = Qx.ⲆⲆⵠΔ.ⵠⵠⵠΔΔ, o = 0; o < l.length; o++) {
                        if (m = l[o].ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) {
                            if (b.which != 1 || b.shiftKey) {
                                if ((b.which == 1 && b.shiftKey || b.which == 3) && Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0) {
                                    f.ΔΔⲆⵠ.ⵠᐃᐃᐃⲆⵠΔ(l[o].id);
                                }
                            } else {
                                ΔⵠΔΔ.ᐃΔΔⵠⲆ(l[o].id, o);
                            }
                        } else if (c.open && (c.id < 0 || l[o].id === c.id)) {
                            if ((m = f.ⵠⵠⵠΔⵠ[l[o].id].ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) && Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0) {
                                ΔⵠΔΔ.ⲆᐃⲆΔᐃⵠⲆΔΔ(c, l[o].id, b.shiftKey ? 10 : 1);
                            }
                        } else if (e.open && l[o].id === 180) {
                            if ((m = f.ⵠⵠⵠΔⵠ[l[o].id].ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) && Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0) {
                                ΔⵠΔΔ.ᐃⲆⲆΔΔⲆΔΔⲆ(e);
                            }
                        } else if (d.open && l[o].id === 109) {
                            if ((m = f.ⵠⵠⵠΔⵠ[l[o].id].ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) && Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0) {
                                ΔⵠΔΔ.ⲆᐃᐃⲆⵠᐃΔΔΔ(d, b.shiftKey ? 10 : 1);
                            }
                        } else if (i.open && l[o].id === 134) {
                            if ((m = f.ⵠⵠⵠΔⵠ[l[o].id].ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) && Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0) {
                                ΔⵠΔΔ.ΔⵠⵠΔⲆⲆᐃᐃΔ(i, b.shiftKey ? 10 : 1);
                            }
                        } else if (j.open && l[o].id === 109) {
                            if ((m = f.ⵠⵠⵠΔⵠ[l[o].id].ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) && Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0) {
                                ΔⵠΔΔ.ⲆᐃᐃⲆⲆᐃⵠⲆᐃ(j, b.shiftKey ? 10 : 1);
                            }
                        } else if (k.open && (l[o].id === 109 || l[o].id === 131)) {
                            if ((m = f.ⵠⵠⵠΔⵠ[l[o].id].ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) && Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0) {
                                if (l[o].id === 109) {
                                    ΔⵠΔΔ.ᐃΔⵠᐃⲆⵠⲆ(k, b.shiftKey ? 10 : 1, 0);
                                } else {
                                    ΔⵠΔΔ.ᐃΔⵠᐃⲆⵠⲆ(k, 0, b.shiftKey ? 10 : 1);
                                }
                            }
                        }
                    }
                }
                if (Qx.ᐃⲆⵠΔ.id < 0 && Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && !Qx.ⲆⵠΔⵠⲆ.enabled && !f.ΔΔⲆⵠ.open && !Qx.ᐃΔΔⲆⵠ) {
                    l = Qx.ᐃⲆⵠΔ.ᐃⲆⲆⲆⵠ;
                    o = 0;
                    for (; o < l.length; o++) {
                        if (m = l[o].ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) {
                            ΔⵠⵠΔⵠ = ΔⵠΔΔ.ΔᐃᐃⵠⲆᐃⲆⲆΔ(l[o].id);
                            if (ΔⵠⵠΔⵠ && ga) {
                                ga("send", "event", "Game", "craft", cs[ht[l[o].id].ᐃΔΔᐃ].name);
                            }
                        }
                    }
                }
                if (Qx.ᐃⲆⵠΔ.id < 0 && Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && Qx.ᐃᐃⲆⵠΔ.open && !f.ᐃⵠⵠⵠⲆ.open && !f.ⲆΔⲆΔ.open && !f.ΔΔⲆⵠ.open && !f.options.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃΔⲆᐃ.open) {
                    if (m = f.ᐃᐃⲆⵠΔ.button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df)) {
                        Sx.ᐃᐃⲆⵠΔ.select();
                    }
                }
                if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && !f.ⲆΔⲆΔ.open && !f.ΔΔⲆⵠ.open && !f.ᐃⵠⵠⵠⲆ.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃΔⲆᐃ.open && !f.options.open) {
                    if (Tx.ΔΔᐃⲆⵠ) {
                        if (m = f.ΔΔᐃᐃ.ⲆΔᐃⲆᐃᐃⲆ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) {
                            Tx.select();
                            if (ga) {
                                ga("send", "event", "Game", "sound on");
                            }
                        }
                    } else if (m = f.ΔΔᐃᐃ.ⲆᐃⲆᐃΔΔⲆ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) {
                        Tx.select();
                        if (ga) {
                            ga("send", "event", "Game", "sound off");
                        }
                    }
                }
                if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && !f.ⲆΔⲆΔ.open && !f.ΔΔⲆⵠ.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃΔⲆᐃ.open && !f.ᐃⵠⵠⵠⲆ.open) {
                    if (m = f.options.button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) {
                        f.options.ⲆⵠΔⵠⵠⲆⵠᐃᐃ();
                        if (ga) {
                            ga("send", "event", "Game", "options");
                        }
                    }
                }
                if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && !f.ⲆΔⲆΔ.open && !f.ΔΔⲆⵠ.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃΔⲆᐃ.open && !f.options.open && f.ᐃΔᐃᐃⲆⵠᐃ === 1) {
                    if (m = f.ᐃⵠⵠⵠⲆ.button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) {
                        f.ᐃⵠⵠⵠⲆ.select();
                        if (ga) {
                            ga("send", "event", "Game", "market");
                        }
                    }
                }
                if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && !f.ΔΔⲆⵠ.open && !f.ᐃⵠⵠⵠⲆ.open && !f.options.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃΔⲆᐃ.open && f.ᐃᐃΔᐃⲆⵠⵠ === 1) {
                    if (m = f.ⲆΔⲆΔ.button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) {
                        f.ⲆΔⲆΔ.ΔΔΔⵠⲆΔᐃΔΔ();
                        if (ga) {
                            ga("send", "event", "Game", "recipe");
                        }
                    }
                }
                if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && !f.ⲆΔⲆΔ.open && !f.ΔΔⲆⵠ.open && !f.options.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃⵠⵠⵠⲆ.open && Px.mode !== 2 && Px.mode !== 4 && Px.mode !== 5 && f.ⵠᐃⵠᐃᐃⲆⵠ === 1) {
                    if (m = f.ᐃΔⲆᐃ.button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) {
                        f.ᐃΔⲆᐃ.select();
                        if (ga) {
                            ga("send", "event", "Game", "quests");
                        }
                    }
                }
                if (Qx.ᐃⲆⵠΔ.ⵠᐃⲆΔΔ && b.which == 3) {
                    f.ΔⲆᐃⲆⵠ.ⵠᐃᐃᐃⲆⵠΔ();
                }
            }
        };
        this.ⲆᐃⲆΔᐃⵠⵠ = ds;
        this.ⲆⲆⲆᐃⲆΔⲆ = function (b) {
            Vx.ᐃⲆⵠⲆ = jf(f.Δᐃ, b);
            var d = Lj;
            Sx.ᐃⵠΔⲆⵠ.display = 0;
            Qx.ⲆⲆⵠΔ.ᐃⵠΔΔⲆΔᐃ.ⵠⵠᐃΔⵠ(Vx.ᐃⲆⵠⲆ);
            if (f.ⵠᐃⲆΔⵠ != -1) {
                d |= f.ⲆⲆᐃᐃᐃ[f.ⵠᐃⲆΔⵠ].button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
            }
            var e = Qx.ⲆᐃⲆⵠ;
            if (e.open && e.ⲆⲆⲆΔΔⲆⲆ > 0) {
                d |= f.ⵠΔᐃⵠⵠⵠⲆ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
            }
            var i = Qx.ⵠⲆᐃⲆ;
            if (i.open && i.ⲆⵠᐃᐃⵠΔᐃ > 0) {
                d |= f.ⲆᐃᐃⵠΔⵠⲆ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
                d |= f.ⲆᐃᐃΔΔᐃᐃ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
                d |= f.ᐃΔΔΔⵠⲆⵠ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
                d |= f.ᐃᐃⵠᐃᐃⲆⵠ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
                d |= f.ⲆᐃΔⵠᐃⵠᐃ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
            }
            var a = Qx.ΔΔΔΔ;
            if (a.open && a.ᐃⵠⲆΔⲆⵠⲆ > 0) {
                d |= f.ᐃⲆⵠⲆᐃΔⵠ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
            }
            if (Qx.sign.open) {
                d |= f.sign.button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
            }
            var j = Qx.ⲆᐃΔΔ;
            if (Qx.ᐃⲆⵠΔ.id < 0 && j.id >= 0 && !Qx.ⲆⵠΔⵠⲆ.enabled && (!Qx.ⲆᐃΔΔ.lock || Qx.id === Qx.ⲆᐃΔΔ.ⵠΔᐃⵠ)) {
                d |= f.ᐃⵠᐃ[j.id].ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
            }
            if (Qx.ⲆⵠΔᐃⵠ.open) {
                d |= f.ⲆⵠΔᐃⵠ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
            }
            if (!Qx.ⲆᐃΔΔ.lock && !Qx.ⲆⵠΔⵠⲆ.enabled) {
                if (Qx.ⲆᐃΔΔ.ᐃᐃⲆΔΔᐃⵠ) {
                    d |= f.ᐃΔⵠΔⵠⲆᐃ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
                }
            }
            if (Qx.ⲆᐃΔΔ.ᐃⵠⲆΔᐃⲆᐃ && !Qx.ⲆⵠΔⵠⲆ.enabled) {
                d |= f.ΔⵠⲆΔΔᐃᐃ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
            }
            if (Qx.ᐃⲆⵠΔ.id < 0 && !Qx.ⲆⵠΔⵠⲆ.enabled) {
                for (var k = Qx.ⲆⲆⵠΔ.ⵠⵠⵠΔΔ, m = 0; k.length > m; m++) {
                    var n = k[m].ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
                    d |= Sx.ᐃⵠΔⲆⵠ.ⵠⵠᐃᐃ(n, k[m], 0);
                    if (j.open && (j.id < 0 || k[m].id == j.id) || Qx.ⵠᐃⲆᐃⲆ.open && k[m].id == 109 || Qx.ΔᐃⲆᐃᐃ.open && k[m].id === 180 || Qx.ΔΔΔΔ.open && (k[m].id == 109 || k[m].id == 131) || Qx.ⲆᐃⲆⵠ.open && k[m].id == 134 || Qx.ⵠⲆᐃⲆ.open && k[m].id == 109) {
                        d |= f.ⵠⵠⵠΔⵠ[k[m].id].ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
                    }
                }
            }
            if (Qx.ᐃⲆⵠΔ.id < 0 && Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && !Qx.ⲆⵠΔⵠⲆ.enabled && !Qx.ᐃΔΔⲆⵠ) {
                k = Qx.ᐃⲆⵠΔ.ᐃⲆⲆⲆⵠ;
                m = 0;
                for (; k.length > m; m++) {
                    n = false;
                    n = k[m].ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
                    d |= Sx.ᐃⵠΔⲆⵠ.ⵠⵠᐃᐃ(n, k[m], 1);
                }
            }
            if (Qx.ᐃⲆⵠΔ.id < 0 && Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && Qx.ᐃᐃⲆⵠΔ.open && !f.ⲆΔⲆΔ.open && !f.ΔΔⲆⵠ.open && !f.options.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃΔⲆᐃ.open && !f.ᐃⵠⵠⵠⲆ.open) {
                d |= f.ᐃᐃⲆⵠΔ.button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
            }
            if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && !f.ΔΔⲆⵠ.open && !f.options.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃΔⲆᐃ.open && !f.ᐃⵠⵠⵠⲆ.open && f.ᐃᐃΔᐃⲆⵠⵠ === 1) {
                d |= f.ⲆΔⲆΔ.button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
            }
            if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && !f.ⲆΔⲆΔ.open && !f.ΔΔⲆⵠ.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃΔⲆᐃ.open && !f.ᐃⵠⵠⵠⲆ.open) {
                d |= f.options.button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
            }
            if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && !f.ⲆΔⲆΔ.open && !f.ΔΔⲆⵠ.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃΔⲆᐃ.open && !f.options.open && f.ᐃΔᐃᐃⲆⵠᐃ === 1) {
                d |= f.ᐃⵠⵠⵠⲆ.button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
            }
            if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && !f.ⲆΔⲆΔ.open && !f.ΔΔⲆⵠ.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃΔⲆᐃ.open && !f.options.open && !f.ᐃⵠⵠⵠⲆ.open) {
                if (Tx.ΔΔᐃⲆⵠ) {
                    d |= f.ΔΔᐃᐃ.ⲆΔᐃⲆᐃᐃⲆ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
                } else {
                    d |= f.ΔΔᐃᐃ.ⲆᐃⲆᐃΔΔⲆ.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
                }
            }
            if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ < 0 && !f.ⲆΔⲆΔ.open && !f.ΔΔⲆⵠ.open && !f.options.open && !f.ΔⲆᐃⲆⵠ.open && !f.ᐃⵠⵠⵠⲆ.open && Px.mode !== 2 && Px.mode !== 4 && Px.mode !== Qw.ⵠᐃᐃⲆΔᐃΔᐃᐃ && f.ⵠᐃⵠᐃᐃⲆⵠ === 1) {
                d |= f.ᐃΔⲆᐃ.button.ⵠⵠᐃᐃ(f.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
            }
            if (f.ⲆᐃⲆΔᐃⵠⵠ !== d) {
                f.ⲆᐃⲆΔᐃⵠⵠ = d;
                c.style.cursor = d ? f.ⲆΔΔⵠⲆⵠΔ : f.ᐃᐃᐃⲆⵠᐃΔ;
            }
        };
        this.ᐃⲆⲆⵠᐃᐃⲆ = function () {
            hc.addEventListener("mousedown", this.ⵠᐃᐃⵠⵠᐃᐃ, false);
            hc.addEventListener("mouseup", this.ΔΔᐃᐃᐃⲆᐃ, w);
            hc.addEventListener("mousemove", this.ⲆⲆⲆᐃⲆΔⲆ, Lj);
            hc.addEventListener("keyup", this.ⵠᐃᐃⲆⵠᐃⲆ, false);
            hc.addEventListener("keydown", this.ⲆⲆΔΔⲆⵠᐃ, false);
        };
        this.ⵠᐃⵠⵠⵠΔᐃ = function () {
            hc.removeEventListener("mousedown", this.ⵠᐃᐃⵠⵠᐃᐃ, Dl);
            hc.removeEventListener("mouseup", this.ΔΔᐃᐃᐃⲆᐃ, false);
            hc.removeEventListener("mousemove", this.ⲆⲆⲆᐃⲆΔⲆ, false);
            hc.removeEventListener("keyup", this.ⵠᐃᐃⲆⵠᐃⲆ, false);
            hc.removeEventListener("keydown", this.ⲆⲆΔΔⲆⵠᐃ, false);
        };
    }
    function vx(b, c) {
        this.Δᐃ = b;
        this.ᐃ = c;
        if (hc.navigator.userAgent.indexOf("Edge") > -1) {
            this.ᐃᐃᐃⲆⵠᐃΔ = "default";
            this.ⲆΔΔⵠⲆⵠΔ = "pointer";
        } else {
            this.ᐃᐃᐃⲆⵠᐃΔ = "url('img/cursor0.png'), default";
            this.ⲆΔΔⵠⲆⵠΔ = "url('img/cursor1.png'), pointer";
        }
        var k = this;
        function e(c, d, e, f, i) {
            var a = this;
            for (var j = d + 9, m = 0, n = f, o = d; o < j; o++) {
                k.buttons[o].info.callback = q;
                k.buttons[o].info.ΔΔⵠΔᐃⵠΔⲆΔ = c;
            }
            function p() {
                var a = c[n];
                Mx.ⲆΔᐃⲆᐃⵠⲆ = Ff(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, undefined, 10, 8);
                if (a.level !== Xh) {
                    Mx.ᐃΔⲆᐃΔᐃⵠ = Ff("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, er, 10, 8);
                } else {
                    Mx.ᐃΔⲆᐃΔᐃⵠ = Ff("by " + a.ⲆⲆΔ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
                }
            }
            function q() {
                if (this.ΔⲆᐃⲆᐃΔⲆ !== n && this.ΔⲆᐃⲆᐃΔⲆ !== -1) {
                    if (this.ⲆⲆⵠᐃⲆΔᐃ > 0) {
                        if (ⲆⲆΔᐃΔᐃⲆ === d) {
                            K(x, ia, "none");
                        } else {
                            K(z, ia, "none");
                        }
                    } else if (ⲆⲆΔᐃΔᐃⲆ === d) {
                        K(x, ja, "inline-block");
                    } else {
                        K(z, ja, "inline-block");
                    }
                    n = this.ΔⲆᐃⲆᐃΔⲆ;
                    e(this.ΔⲆᐃⲆᐃΔⲆ);
                    p();
                }
            }
            this.ⲆⵠⵠᐃⵠΔᐃ = function () {
                for (var a = d, b = m * 3; j > a && b < c.length; a++, b++) {
                    if (c[b].ᐃⵠⵠ !== ΔΔⲆ.ᐃⵠΔᐃⵠᐃⲆ || i[b] !== 0) {
                        k.buttons[a].info.ΔⲆᐃⲆᐃΔⲆ = b;
                        for (var e = 0; e < 3; e++) {
                            k.buttons[a].info.ΔⲆ[e] = ⲆⲆⵠΔⲆΔᐃ[c[b].ᐃⵠⵠ][e];
                            k.buttons[a].info.active = ja;
                            k.buttons[a].info.ⲆⲆⵠᐃⲆΔᐃ = i[b];
                        }
                    } else {
                        k.buttons[a].info.ΔⲆᐃⲆᐃΔⲆ = -1;
                        k.buttons[a].info.active = ia;
                    }
                }
                for (; j > a; a++) {
                    k.buttons[a].info.ΔⲆᐃⲆᐃΔⲆ = -1;
                    k.buttons[a].info.active = ia;
                }
                p();
            };
            k.buttons[j].info.callback = function () {
                if (m > 0) {
                    m--;
                }
                a.ⲆⵠⵠᐃⵠΔᐃ();
            };
            k.buttons[j + 1].info.callback = function () {
                if (c.length > m * 3 + 9) {
                    m++;
                }
                a.ⲆⵠⵠᐃⵠΔᐃ();
            };
        }
        function f() {
            var b = Number(ⲆΔⵠⲆ.get("starve_crate"));
            var c = Number(ⲆΔⵠⲆ.get("starve_dead"));
            var d = Number(ⲆΔⵠⲆ.get("starve_book"));
            var e = Number(ⲆΔⵠⲆ.get("starve_bag"));
            var f = Number(ⲆΔⵠⲆ.get("starve_skin"));
            var a = Number(ⲆΔⵠⲆ.get("starve_accessory"));
            k.ᐃΔⲆⲆ = f || 0;
            k.ⲆⵠⵠⲆⲆ = d || 0;
            k.ⵠⵠΔⲆⵠ = b || 1;
            k.ⵠᐃⲆⵠΔ = a || 0;
            k.ⵠᐃΔⲆⲆ = e || 0;
            k.ⲆᐃΔⵠⲆ = c || 0;
        }
        function a() {
            for (var a = ΔΔΔⲆ.ⲆΔᐃⵠᐃ, b = 0; b < a.length; b++) {
                if (a[b].ᐃⵠⵠ === ΔΔⲆ.ᐃⵠᐃⵠⲆ) {
                    k.unlock.ᐃΔⲆⲆ[b] = 1;
                } else {
                    k.unlock.ᐃΔⲆⲆ[b] = 0;
                }
            }
            a = ΔΔΔⲆ.ᐃᐃⵠⵠⲆ;
            b = 0;
            for (; b < a.length; b++) {
                if (a[b].ᐃⵠⵠ === ΔΔⲆ.ᐃⵠᐃⵠⲆ) {
                    k.unlock.ⵠᐃⲆⵠΔ[b] = 1;
                } else {
                    k.unlock.ⵠᐃⲆⵠΔ[b] = 0;
                }
            }
            a = ΔΔΔⲆ.ⲆΔΔⲆ;
            b = 0;
            for (; a.length > b; b++) {
                if (ΔΔⲆ.ᐃⵠᐃⵠⲆ === a[b].ᐃⵠⵠ) {
                    k.unlock.ⵠᐃΔⲆⲆ[b] = 1;
                } else {
                    k.unlock.ⵠᐃΔⲆⲆ[b] = 0;
                }
            }
            a = ΔΔΔⲆ.ΔᐃΔⵠΔ;
            b = 0;
            for (; b < a.length; b++) {
                if (ΔΔⲆ.ᐃⵠᐃⵠⲆ === a[b].ᐃⵠⵠ) {
                    k.unlock.ⲆⵠⵠⲆⲆ[b] = 1;
                } else {
                    k.unlock.ⲆⵠⵠⲆⲆ[b] = 0;
                }
            }
            a = ΔΔΔⲆ.ⲆΔΔⲆΔ;
            b = 0;
            for (; a.length > b; b++) {
                if (a[b].ᐃⵠⵠ === ΔΔⲆ.ᐃⵠᐃⵠⲆ) {
                    k.unlock.ⵠⵠΔⲆⵠ[b] = 1;
                    k.unlock.ⲆᐃΔⵠⲆ[b] = 1;
                } else {
                    k.unlock.ⵠⵠΔⲆⵠ[b] = 0;
                    k.unlock.ⲆᐃΔⵠⲆ[b] = 0;
                }
            }
        }
        this.waiting = lq;
        this.ⵠⲆⵠΔⵠΔⵠ = 0;
        this.ⲆᐃⲆᐃⲆΔᐃ = -1;
        this.ᐃΔⲆΔⲆⲆΔ = {
            translate: {
                x: 0,
                y: 0
            },
            angle: 0,
            ΔⲆ: ⵠΔ[301],
            ᐃⲆᐃⲆ: function () {
                this.angle += Xx * 2;
                c.save();
                c.translate(this.translate.x + this.ΔⲆ.width / 2, this.translate.y + this.ΔⲆ.height / 2);
                c.rotate(this.angle);
                Mu(c, this.ΔⲆ, -this.ΔⲆ.width / 2, -this.ΔⲆ.height / 2);
                c.restore();
            }
        };
        this.ⲆⵠᐃᐃⵠᐃΔ = {
            id: document.getElementById("langselect"),
            style: document.getElementById("langselect").style,
            translate: {
                y: 0,
                x: 0
            },
            Ⲇⵠᐃ: function () {
                this.style.left = Math.floor(this.translate.x) + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        this.ΔΔⲆᐃⲆ = 0;
        this.ⵠⲆⵠΔᐃΔⲆ = -1;
        this.ⵠⲆᐃⲆᐃⵠⵠ = $q;
        this.ⵠⵠⵠⲆᐃᐃᐃ = "";
        this.ⲆⵠΔⲆΔⲆᐃ = "";
        this.ⵠΔΔΔⵠⲆⵠ = Pg;
        this.ᐃⵠⲆΔⵠ = 0;
        this.ΔⲆⲆΔⲆᐃⵠ = -1;
        this.ᐃⲆⵠⲆⲆΔⲆ = mo;
        this.ⵠΔⵠΔΔᐃⲆ = 0;
        this.ⵠΔⵠΔᐃᐃᐃ = 0;
        this.ΔᐃⵠΔΔⲆᐃ = 0;
        this.ᐃⵠⲆᐃⲆⲆⲆ = 0;
        this.ΔᐃⲆⲆⲆⵠⵠ = 0;
        this.time = 0;
        this.ᐃⵠΔⵠΔ = 0;
        this.ⲆᐃΔΔᐃΔᐃ = 0;
        this.ⲆᐃⵠⲆᐃⵠⵠ = 0;
        this.ⲆᐃⲆⲆⵠⵠΔ = 0;
        this.ⲆᐃᐃⲆᐃⲆΔ = 0;
        this.ᐃΔᐃⵠΔΔᐃ = [];
        this.ⲆⲆⵠΔᐃ = -1;
        this.ΔⵠᐃᐃⲆⵠΔ = -1;
        this.ΔⲆᐃᐃᐃΔΔ = -1;
        this.ᐃᐃᐃⵠΔᐃⲆ = undefined;
        this.ⲆΔⲆⲆΔᐃᐃ = er;
        this.ᐃⵠⲆΔⵠΔΔ = -1;
        this.ⲆΔⲆⵠⵠΔⵠ = -1;
        this.ⲆⵠⲆⲆⵠⵠⲆ = -1;
        this.ΔⵠᐃΔⲆⲆⲆ = -1;
        this.ⲆᐃⲆΔⲆΔΔ = undefined;
        this.ΔᐃΔⵠΔᐃΔ = undefined;
        this.ⵠᐃΔⲆⵠᐃⵠ = rh;
        this.ⲆΔᐃⲆᐃⵠⲆ = undefined;
        this.ᐃΔⲆᐃΔᐃⵠ = undefined;
        this.ⲆⵠⵠΔᐃⵠⵠ = Xa;
        this.ⵠΔᐃⲆΔᐃΔ = undefined;
        this.ⵠΔΔⲆⵠᐃⲆ = undefined;
        this.ΔᐃΔⲆᐃᐃⵠ = undefined;
        this.ⵠᐃⵠᐃⵠΔⲆ = 3;
        this.ⲆΔᐃⲆ = 0;
        this.ⲆⲆᐃᐃᐃⲆⵠⲆⲆ = Pn;
        this.Δⵠⵠᐃᐃ = ⲆΔⵠⲆ.get("starve_quality") ? ⲆΔⵠⲆ.get("starve_quality") : "high";
        if (this.Δⵠⵠᐃᐃ === "high") {
            document.getElementById("high_ing").style.backgroundColor = "#B56D18";
            document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
            this.Δⵠⵠᐃᐃ = 1;
        } else {
            document.getElementById("low_ing").style.backgroundColor = "#B56D18";
            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
            this.Δⵠⵠᐃᐃ = 0;
        }
        this.ⵠΔⲆⵠΔᐃⲆΔⲆ = function () {
            document.getElementById("high_ing").style.backgroundColor = "#B56D18";
            document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
            ⲆΔⵠⲆ.set("starve_quality", "high", {
                expires: 30
            });
            document.getElementById("input_ratio").value = 1;
            Sx.ᐃⵠᐃᐃΔᐃᐃ();
            Mx.Δⵠⵠᐃᐃ = 1;
        };
        this.ⲆΔⵠⵠΔⵠᐃⲆⲆ = function () {
            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
            document.getElementById("low_ing").style.backgroundColor = "#B56D18";
            ⲆΔⵠⲆ.set("starve_quality", "low", {
                expires: 30
            });
            document.getElementById("input_ratio").value = 0.5 / (br / cr);
            Sx.ᐃⵠᐃᐃΔᐃᐃ();
            Mx.Δⵠⵠᐃᐃ = 0;
        };
        if (ⲆΔⵠⲆ.get("starve_mapping") === undefined && qr === "FR") {
            Ux.ᐃⵠⵠᐃᐃⲆⲆ();
            this.mapping = "azerty";
        } else {
            this.mapping = ⲆΔⵠⲆ.get("starve_mapping") ? ⲆΔⵠⲆ.get("starve_mapping") : "qwerty";
        }
        if (this.mapping == "azerty") {
            Ux.ᐃⵠⵠᐃᐃⲆⲆ();
            document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
        } else {
            document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
        }
        this.ᐃⵠⵠᐃᐃⲆⲆ = function () {
            Ux.ᐃⵠⵠᐃᐃⲆⲆ();
            document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
            ⲆΔⵠⲆ.set("starve_mapping", "azerty", {
                expires: 30
            });
        };
        this.ΔᐃᐃⲆᐃⵠⵠ = function () {
            Ux.ΔᐃᐃⲆᐃⵠⵠ();
            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
            document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
            ⲆΔⵠⲆ.set("starve_mapping", "qwerty", {
                expires: 30
            });
        };
        this.ⲆⵠᐃΔⵠᐃᐃ = {
            id: document.getElementById("all_rights_reserved"),
            style: document.getElementById("all_rights_reserved").style,
            translate: {
                x: 0,
                y: 0
            },
            Ⲇⵠᐃ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        f();
        this.unlock = {};
        this.unlock.ᐃΔⲆⲆ = [];
        this.unlock.ⵠᐃΔⲆⲆ = [];
        this.unlock.ⲆⵠⵠⲆⲆ = [];
        this.unlock.ⵠⵠΔⲆⵠ = [];
        this.unlock.ⲆᐃΔⵠⲆ = [];
        this.unlock.ⵠᐃⲆⵠΔ = [];
        this.ⲆᐃⲆΔⵠΔⵠ = 0;
        this.ΔⲆⵠⵠⲆᐃᐃ = a;
        a();
        this.ⵠⵠⵠⵠⵠ = {
            id: document.getElementById("trevda"),
            style: document.getElementById("trevda").style,
            translate: {
                y: 0,
                x: 0
            },
            Ⲇⵠᐃ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        var i;
        var n = 0;
        function o() {
            k.Ⲇⵠᐃ();
            if (++n == 30) {
                k.ᐃⲆⲆⵠᐃᐃⲆ();
                k.ⵠⲆⵠΔⵠΔⵠ = Ll;
                k.Ⲇⵠᐃ();
                return;
            }
            hc.setTimeout(o, 33);
        }
        this.ⵠⲆⲆᐃⵠ = function (a) {
            i = a;
            k.ⵠᐃⵠⵠⵠΔᐃ();
            k.ⵠⲆⵠΔⵠΔⵠ = 0;
            l = -1;
            r();
        };
        var l = -1;
        function r() {
            k.Ⲇⵠᐃ();
            if (++l == 30) {
                ⲆΔⵠⲆ.set("starve_nickname", k.ΔⵠⲆⵠⲆ.input.value, {
                    expires: 30
                });
                k.ΔⵠⲆⵠⲆ.style.display = "none";
                k.ⵠⲆⵠⲆᐃ.style.display = "none";
                k.ⲆⵠᐃᐃⵠᐃΔ.style.display = "none";
                k.ⲆⵠᐃΔⵠᐃᐃ.style.display = "none";
                k.ⵠⵠⵠⵠⵠ.style.display = "none";
                k.stop();
                i();
                return;
            }
            hc.setTimeout(r, 33);
        }
        this.ΔᐃᐃⲆⵠ = C;
        this.stop = function () {
            this.ΔᐃᐃⲆⵠ = false;
        };
        this.ΔΔᐃⲆⵠ = function () {
            _x();
            document.getElementById("game_body").style.backgroundColor = Wr.ΔⵠᐃⲆᐃ[Ox.time];
            k.ΔⵠⲆⵠⲆ.style.display = "inline-block";
            k.ⵠⲆⵠⲆᐃ.style.display = "inline-block";
            k.ⲆⵠᐃᐃⵠᐃΔ.style.display = "inline-block";
            k.ⲆⵠᐃΔⵠᐃᐃ.style.display = "inline-block";
            k.ⵠⵠⵠⵠⵠ.style.display = "inline-block";
            k.waiting = false;
            k.ΔᐃᐃⲆⵠ = Un;
            l = -1;
            n = 0;
            o();
        };
        this.ⵠᐃΔⵠⵠⵠⵠ = function (a, b) {
            b = b < 0 ? -b : b;
            if ((a.position & da) === da) {
                if ((a.position & _) === _) {
                    a.translate.x = lo + a.translate.ⵠⲆΔⲆᐃ - b;
                } else if (aa === (a.position & aa)) {
                    a.translate.x = lo + a.translate.ⵠⲆΔⲆᐃ + b;
                } else {
                    a.translate.x = lo + a.translate.ⵠⲆΔⲆᐃ;
                }
            } else if ((a.position & _) === _) {
                a.translate.x = a.translate.ⵠⲆΔⲆᐃ - b;
            } else if (aa === (a.position & aa)) {
                a.translate.x = ao - a.translate.ⵠⲆΔⲆᐃ + b;
            } else {
                a.translate.x = a.translate.ⵠⲆΔⲆᐃ;
            }
            if (ea === (a.position & ea)) {
                if (ba === (a.position & ba)) {
                    a.translate.y = Po + a.translate.ⵠⵠⲆⵠᐃ - b;
                } else if ((a.position & ca) === ca) {
                    a.translate.y = Po + a.translate.ⵠⵠⲆⵠᐃ + b;
                } else {
                    a.translate.y = Po + a.translate.ⵠⵠⲆⵠᐃ;
                }
            } else if (ba === (a.position & ba)) {
                a.translate.y = a.translate.ⵠⵠⲆⵠᐃ - b;
            } else if (ca === (a.position & ca)) {
                a.translate.y = so + a.translate.ⵠⵠⲆⵠᐃ + b;
            } else {
                a.translate.y = a.translate.ⵠⵠⲆⵠᐃ;
            }
            if (Qa !== a.style) {
                a.style.left = Math.floor(a.translate.x) + "px";
                a.style.top = Math.floor(a.translate.y) + "px";
            }
        };
        this.Ⲇⵠᐃ = function () {
            var a = 0;
            if (n != 30 || l != -1) {
                if (n != 30) {
                    a = 1500 / (n + 1) - 50;
                }
                if (l != -1) {
                    a = -(1750 / (30 - l + 1) - 48);
                }
            }
            for (var b = 0; this.ΔΔⲆᐃ.length > b; b++) {
                this.ⵠᐃΔⵠⵠⵠⵠ(this.ΔΔⲆᐃ[b], a);
            }
            for (b = 0; b < this.buttons.length; b++) {
                this.ⵠᐃΔⵠⵠⵠⵠ(this.buttons[b].info, a);
            }
            for (b = 0; this.ⵠᐃᐃⲆΔ.length > b; b++) {
                this.ⵠᐃΔⵠⵠⵠⵠ(this.ⵠᐃᐃⲆΔ[b], a);
            }
            this.ᐃΔⲆΔⲆⲆΔ.translate.x = (ao - this.ᐃΔⲆΔⲆⲆΔ.ΔⲆ.width) / 2;
            this.ᐃΔⲆΔⲆⲆΔ.translate.y = 0;
            this.ⲆⵠᐃᐃⵠᐃΔ.translate.x = ao - 450;
            this.ⲆⵠᐃᐃⵠᐃΔ.translate.y = so - 40;
            this.ⲆⵠᐃΔⵠᐃᐃ.translate.x = ao - 340;
            this.ⲆⵠᐃΔⵠᐃᐃ.translate.y = so - 25;
            this.ⵠⵠⵠⵠⵠ.translate.x = ao - 320;
            this.ⵠⵠⵠⵠⵠ.translate.y = 80;
            if (n != 30 || l != -1) {
                var c = 0;
                if (n != 30) {
                    c = 1500 / (n + 1) - 50;
                }
                if (l != -1) {
                    c = -(1750 / (30 - l + 1) - 48);
                }
                this.ᐃΔⲆΔⲆⲆΔ.translate.y -= c > 0 ? c : -c;
                this.ⲆⵠᐃᐃⵠᐃΔ.translate.y -= c < 0 ? c : -c;
                this.ⲆⵠᐃΔⵠᐃᐃ.translate.y -= c < 0 ? c : -c;
            }
            this.ⲆⵠᐃᐃⵠᐃΔ.Ⲇⵠᐃ();
            this.ⲆⵠᐃΔⵠᐃᐃ.Ⲇⵠᐃ();
            this.ⵠⵠⵠⵠⵠ.Ⲇⵠᐃ();
        };
        this.ⲆⵠᐃⵠΔᐃΔ = function (b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = 342;
            c.height = 342;
            var e = -Math.PI / 2;
            for (var f = 0; b.length > f; f++) {
                var g = b[f][0];
                var h = Math.PI * b[f][1] / 180;
                d.beginPath();
                d.arc(171, 171, 170, e, e + h, false);
                d.lineTo(171, 171);
                d.fillStyle = g;
                d.fill();
                e += h;
            }
            return c;
        };
        this.ⵠΔᐃⵠΔⵠⲆⵠⵠ = function () {
            this.ⵠⵠⵠⲆᐃᐃᐃ = document.getElementById("account_nickname_input").value;
            if (this.ⵠⵠⵠⲆᐃᐃᐃ !== this.ⲆⵠΔⲆΔⲆᐃ) {
                this.ⲆⵠΔⲆΔⲆᐃ = this.ⵠⵠⵠⲆᐃᐃᐃ;
                this.ⵠΔΔΔⵠⲆⵠ = Ff(this.ⵠⵠⵠⲆᐃᐃᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
            }
        };
        this.ᐃⲆᐃⲆ = function () {
            Yp();
            Mx.ⵠΔⵠΔΔᐃⲆ = ⵠᐃⵠ.ⵠΔᐃᐃᐃᐃᐃ(Mx.ⵠΔⵠΔΔᐃⲆ, Mx.ⵠΔⵠΔᐃᐃᐃ, 0.03);
            this.ΔΔⲆᐃ[ΔⲆΔᐃⲆⵠⵠ].translate.x = this.ΔΔⲆᐃ[0].translate.x + -72 + Mx.ⵠΔⵠΔΔᐃⲆ * 165;
            this.ΔΔⲆᐃ[ΔⲆΔᐃⲆⵠⵠ].translate.ⵠⲆΔⲆᐃ = this.ΔΔⲆᐃ[ΔⲆΔᐃⲆⵠⵠ].translate.x;
            this.ΔΔⲆᐃ[ΔⲆΔᐃⲆⵠⵠ].translate.y = this.ΔΔⲆᐃ[0].translate.y + 30;
            this.ΔΔⲆᐃ[ΔⲆΔᐃⲆⵠⵠ].translate.ⵠⵠⲆⵠᐃ = this.ΔΔⲆᐃ[ΔⲆΔᐃⲆⵠⵠ].translate.y;
            for (var n = 2; this.ΔΔⲆᐃ.length > n; n++) {
                if (ja === this.ΔΔⲆᐃ[n].active) {
                    this.ΔΔⲆᐃ[n].ᐃⲆᐃⲆ(c);
                }
            }
            if ((K = this.ⲆⲆⵠΔᐃ - Date.now()) > 0) {
                var p = Math.floor(K / 60000);
                var t = Math.floor(p / 60);
                if ((p %= 60) !== this.ΔⲆᐃᐃᐃΔΔ) {
                    this.ΔⲆᐃᐃᐃΔΔ = p;
                    p = p < 10 ? "0" + p : "" + p;
                    k.ᐃᐃᐃⵠΔᐃⲆ = Ff(p, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (t !== this.ΔⵠᐃᐃⲆⵠΔ) {
                    this.ΔⵠᐃᐃⲆⵠΔ = t;
                    t = t < 10 ? "0" + t : "" + t;
                    k.ⲆΔⲆⲆΔᐃᐃ = Ff(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                (W = this.ΔΔⲆᐃ[ᐃⵠⲆᐃⲆΔΔ]).ᐃⲆᐃⲆ(c);
                var x = this.ⲆΔⲆⲆΔᐃᐃ;
                Mu(c, x, W.translate.x - x.width / 4 + 182, W.translate.y - x.height / 4 + 40, x.width / 2, x.height / 2);
                x = this.ᐃᐃᐃⵠΔᐃⲆ;
                Mu(c, x, W.translate.x - x.width / 4 + 251, W.translate.y - x.height / 4 + 40, x.width / 2, x.height / 2);
            }
            var K = this.ᐃⵠⲆΔⵠΔΔ - Date.now();
            if (K > 0) {
                p = Math.floor(K / 60000);
                t = Math.floor(p / 60);
                var W;
                var X = Math.floor(t / 24);
                t %= 24;
                if ((p %= 60) !== this.ΔⵠᐃΔⲆⲆⲆ) {
                    this.ΔⵠᐃΔⲆⲆⲆ = p;
                    p = p < 10 ? "0" + p : "" + p;
                    k.ⲆᐃⲆΔⲆΔΔ = Ff(p, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (t !== this.ⲆⵠⲆⲆⵠⵠⲆ) {
                    this.ⲆⵠⲆⲆⵠⵠⲆ = t;
                    t = t < 10 ? "0" + t : "" + t;
                    k.ΔᐃΔⵠΔᐃΔ = Ff(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (X !== this.ⲆΔⲆⵠⵠΔⵠ) {
                    this.ⲆΔⲆⵠⵠΔⵠ = X;
                    X = X < 10 ? "0" + X : "" + X;
                    k.ⵠᐃΔⲆⵠᐃⵠ = Ff(X, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                (W = this.ΔΔⲆᐃ[ᐃⲆⲆⵠⵠᐃⵠ]).ᐃⲆᐃⲆ(c);
                x = this.ⵠᐃΔⲆⵠᐃⵠ;
                Mu(c, x, W.translate.x - x.width / 4 + 113, W.translate.y - x.height / 4 + 40, x.width / 2, x.height / 2);
                x = this.ΔᐃΔⵠΔᐃΔ;
                Mu(c, x, W.translate.x - x.width / 4 + 182, W.translate.y - x.height / 4 + 40, x.width / 2, x.height / 2);
                x = this.ⲆᐃⲆΔⲆΔΔ;
                Mu(c, x, W.translate.x - x.width / 4 + 251, W.translate.y - x.height / 4 + 40, x.width / 2, x.height / 2);
            }
            if ((this.ᐃΔⲆⵠⵠ & w) === w) {
                this.buttons[ⵠⲆΔⲆᐃⵠⲆ].info.state = _f;
            } else if ((this.ᐃΔⲆⵠⵠ & P) === P) {
                this.buttons[ΔⵠⵠⵠΔᐃⲆ].info.state = _f;
            } else if (M === (this.ᐃΔⲆⵠⵠ & M)) {
                this.buttons[ⲆⵠᐃΔΔⵠΔ].info.state = _f;
            } else if (v === (this.ᐃΔⲆⵠⵠ & v)) {
                this.buttons[ⲆᐃⵠᐃᐃΔΔ].info.state = _f;
            } else if ((this.ᐃΔⲆⵠⵠ & y) === y) {
                this.buttons[ⵠⲆᐃᐃⵠΔᐃ].info.state = _f;
            } else if ((this.ᐃΔⲆⵠⵠ & m) === m) {
                this.buttons[ⲆⵠΔΔⵠⲆⵠ].info.state = _f;
            } else if ((this.ᐃΔⲆⵠⵠ & N) === N || A === (this.ᐃΔⲆⵠⵠ & A) || B === (this.ᐃΔⲆⵠⵠ & B) || D === (this.ᐃΔⲆⵠⵠ & D) || (this.ᐃΔⲆⵠⵠ & E) === E || (this.ᐃΔⲆⵠⵠ & I) === I || J === (this.ᐃΔⲆⵠⵠ & J)) {
                this.buttons[ⲆⵠΔⲆⲆⵠᐃ].info.state = _f;
            } else if ((this.ᐃΔⲆⵠⵠ & Q) === Q || F === (this.ᐃΔⲆⵠⵠ & F) || R === (this.ᐃΔⲆⵠⵠ & R) || (this.ᐃΔⲆⵠⵠ & j) === j || G === (this.ᐃΔⲆⵠⵠ & G) || (this.ᐃΔⲆⵠⵠ & L) === L) {
                this.buttons[ⲆⵠᐃΔΔⵠΔ].info.state = _f;
            } else if ((this.ᐃΔⲆⵠⵠ & q) === q || (this.ᐃΔⲆⵠⵠ & H) === H || (this.ᐃΔⲆⵠⵠ & T) === T) {
                this.buttons[ⵠⲆⲆᐃΔⵠΔ].info.state = _f;
            } else if (U === (this.ᐃΔⲆⵠⵠ & U)) {
                this.buttons[ⲆᐃⵠᐃᐃΔΔ].info.state = _f;
            }
            if (P === (this.ᐃΔⲆⵠⵠ & P)) {
                if (this.ⵠΔᐃⲆΔᐃΔ === this.ⵠᐃᐃⲆⲆⲆᐃ) {
                    this.ⲆⵠⵠΔᐃⵠⵠ = this.ⲆΔᐃᐃⲆᐃΔ;
                    this.buttons[this.ⲆΔᐃᐃⲆᐃΔ].info.active = ia;
                    this.buttons[this.ⵠᐃΔᐃⵠᐃΔ].info.active = ia;
                    this.buttons[this.ΔⵠⵠΔⲆⵠᐃ].info.active = ia;
                } else {
                    this.buttons[this.ⲆΔᐃᐃⲆᐃΔ].info.active = ja;
                    this.buttons[this.ⵠᐃΔᐃⵠᐃΔ].info.active = ja;
                    this.buttons[this.ΔⵠⵠΔⲆⵠᐃ].info.active = ja;
                }
                if (this.ⵠΔᐃⲆΔᐃΔ === this.ᐃΔⲆⵠᐃⲆᐃ) {
                    this.buttons[this.ᐃΔⲆⵠᐃⲆᐃ].info.state = _f;
                } else if (this.ᐃᐃΔⲆⲆⲆᐃ === this.ⵠΔᐃⲆΔᐃΔ) {
                    this.buttons[this.ᐃᐃΔⲆⲆⲆᐃ].info.state = _f;
                } else if (this.ⵠΔᐃⲆΔᐃΔ === this.ⵠᐃᐃⲆⲆⲆᐃ) {
                    this.buttons[this.ⵠᐃᐃⲆⲆⲆᐃ].info.state = _f;
                } else if (this.ⵠΔⲆᐃᐃⲆᐃ === this.ⵠΔᐃⲆΔᐃΔ) {
                    this.buttons[this.ⵠΔⲆᐃᐃⲆᐃ].info.state = _f;
                } else if (this.ⵠⵠⵠⵠΔᐃⲆ === this.ⵠΔᐃⲆΔᐃΔ) {
                    this.buttons[this.ⵠⵠⵠⵠΔᐃⲆ].info.state = _f;
                }
                if (this.ⲆΔᐃᐃⲆᐃΔ === this.ⲆⵠⵠΔᐃⵠⵠ) {
                    this.buttons[this.ⲆΔᐃᐃⲆᐃΔ].info.state = _f;
                } else if (this.ⵠᐃΔᐃⵠᐃΔ === this.ⲆⵠⵠΔᐃⵠⵠ) {
                    this.buttons[this.ⵠᐃΔᐃⵠᐃΔ].info.state = _f;
                } else if (this.ⲆⵠⵠΔᐃⵠⵠ === this.ΔⵠⵠΔⲆⵠᐃ) {
                    this.buttons[this.ΔⵠⵠΔⲆⵠᐃ].info.state = _f;
                }
                if (this.ⵠΔΔⲆⵠᐃⲆ === this.ᐃⲆⵠⲆᐃⵠᐃ) {
                    this.buttons[this.ᐃⲆⵠⲆᐃⵠᐃ].info.state = _f;
                } else if (this.ΔΔΔᐃⵠᐃⲆ === this.ⵠΔΔⲆⵠᐃⲆ) {
                    this.buttons[this.ΔΔΔᐃⵠᐃⲆ].info.state = _f;
                } else if (this.ΔᐃⲆⵠΔᐃᐃ === this.ⵠΔΔⲆⵠᐃⲆ) {
                    this.buttons[this.ΔᐃⲆⵠΔᐃᐃ].info.state = _f;
                }
                if (this.ΔᐃΔⲆᐃᐃⵠ === this.ⵠⵠΔΔᐃⵠⲆ) {
                    this.buttons[this.ⵠⵠΔΔᐃⵠⲆ].info.state = _f;
                } else if (this.ⲆᐃⲆΔᐃᐃⲆ === this.ΔᐃΔⲆᐃᐃⵠ) {
                    this.buttons[this.ⲆᐃⲆΔᐃᐃⲆ].info.state = _f;
                } else if (this.ᐃΔⲆᐃᐃᐃⲆ === this.ΔᐃΔⲆᐃᐃⵠ) {
                    this.buttons[this.ᐃΔⲆᐃᐃᐃⲆ].info.state = _f;
                } else if (this.ᐃΔⵠⵠᐃⵠᐃ === this.ΔᐃΔⲆᐃᐃⵠ) {
                    this.buttons[this.ᐃΔⵠⵠᐃⵠᐃ].info.state = _f;
                } else if (this.ΔᐃΔⲆᐃᐃⵠ === this.ⵠᐃΔᐃΔᐃᐃ) {
                    this.buttons[this.ⵠᐃΔᐃΔᐃᐃ].info.state = _f;
                } else if (this.ΔᐃΔⲆᐃᐃⵠ === this.ⵠⵠΔⲆⲆⲆⵠ) {
                    this.buttons[this.ⵠⵠΔⲆⲆⲆⵠ].info.state = _f;
                }
            }
            if (v === (this.ᐃΔⲆⵠⵠ & v)) {
                if (this.ⲆᐃⲆᐃⲆΔᐃ === -1) {
                    this.buttons[Aa].info.state = _f;
                } else if (this.ⲆᐃⲆᐃⲆΔᐃ === 0) {
                    this.buttons[Ba].info.state = _f;
                } else if (this.ⲆᐃⲆᐃⲆΔᐃ === 2) {
                    this.buttons[Da].info.state = _f;
                } else if (this.ⲆᐃⲆᐃⲆΔᐃ === 3) {
                    this.buttons[Ea].info.state = _f;
                } else if (this.ⲆᐃⲆᐃⲆΔᐃ === 4) {
                    this.buttons[Ca].info.state = _f;
                }
                if (this.ⵠᐃⵠᐃⵠΔⲆ === 0) {
                    this.buttons[ua].info.state = _f;
                } else if (this.ⵠᐃⵠᐃⵠΔⲆ === 1) {
                    this.buttons[va].info.state = _f;
                } else if (this.ⵠᐃⵠᐃⵠΔⲆ === 2) {
                    this.buttons[wa].info.state = _f;
                } else if (this.ⵠᐃⵠᐃⵠΔⲆ === 3) {
                    this.buttons[xa].info.state = _f;
                } else if (this.ⵠᐃⵠᐃⵠΔⲆ === 4) {
                    this.buttons[ya].info.state = _f;
                } else if (this.ⵠᐃⵠᐃⵠΔⲆ === 5) {
                    this.buttons[za].info.state = _f;
                }
            }
            if (w === (this.ᐃΔⲆⵠⵠ & w) && ΔⵠΔΔ.ⲆⲆᐃⲆⲆⲆΔ === 0) {
                if (this.buttons[na].ⵠΔΔⲆᐃⵠΔ(Vx.ᐃⲆⵠⲆ)) {
                    this.buttons[na].hint = Math.min(1, this.buttons[na].hint + Xx * 1.5);
                } else {
                    this.buttons[na].hint = Math.max(0, this.buttons[na].hint - Xx * 1.5);
                }
                if (this.buttons[oa].ⵠΔΔⲆᐃⵠΔ(Vx.ᐃⲆⵠⲆ)) {
                    this.buttons[oa].hint = Math.min(1, this.buttons[oa].hint + Xx * 1.5);
                } else {
                    this.buttons[oa].hint = Math.max(0, this.buttons[oa].hint - Xx * 1.5);
                }
                if (this.buttons[pa].ⵠΔΔⲆᐃⵠΔ(Vx.ᐃⲆⵠⲆ)) {
                    this.buttons[pa].hint = Math.min(1, this.buttons[pa].hint + Xx * 1.5);
                } else {
                    this.buttons[pa].hint = Math.max(0, this.buttons[pa].hint - Xx * 1.5);
                }
                if (this.buttons[sa].ⵠΔΔⲆᐃⵠΔ(Vx.ᐃⲆⵠⲆ)) {
                    this.buttons[sa].hint = Math.min(1, this.buttons[sa].hint + Xx * 1.5);
                } else {
                    this.buttons[sa].hint = Math.max(0, this.buttons[sa].hint - Xx * 1.5);
                }
                if (this.buttons[qa].ⵠΔΔⲆᐃⵠΔ(Vx.ᐃⲆⵠⲆ)) {
                    this.buttons[qa].hint = Math.min(1, this.buttons[qa].hint + Xx * 1.5);
                } else {
                    this.buttons[qa].hint = Math.max(0, this.buttons[qa].hint - Xx * 1.5);
                }
                if (this.buttons[ra].ⵠΔΔⲆᐃⵠΔ(Vx.ᐃⲆⵠⲆ)) {
                    this.buttons[ra].hint = Math.min(1, this.buttons[ra].hint + Xx * 1.5);
                } else {
                    this.buttons[ra].hint = Math.max(0, this.buttons[ra].hint - Xx * 1.5);
                }
            }
            var Y = 1;
            if ((this.ᐃΔⲆⵠⵠ & (A | B | D | E | I | J)) > 1) {
                x = ᐃⵠ.ΔΔⲆᐃⵠⲆᐃ;
                c.save();
                c.translate(lo, ma + x.height / 4);
                if (this.ΔΔⲆΔΔ === 1) {
                    this.ᐃᐃⲆΔⲆᐃᐃ += Xx / 3;
                    Y = this.ᐃⵠᐃⲆⲆΔⵠ - 100 / Math.pow(1 + this.ᐃᐃⲆΔⲆᐃᐃ, 1 + this.ᐃᐃⲆΔⲆᐃᐃ);
                    c.rotate(Y);
                }
                Mu(c, x, -x.width / 4, -x.height / 4, x.width / 2, x.height / 2);
                c.restore();
            }
            if (ΔⵠΔΔ.ⲆⲆᐃⲆⲆⲆΔ === 0) {
                if (ΔⵠΔΔ.ⲆⲆⲆⲆⲆ === 0) {
                    this.buttons[na].info.state = _f;
                } else if (ΔⵠΔΔ.ⲆⲆⲆⲆⲆ === 4) {
                    this.buttons[oa].info.state = _f;
                } else if (ΔⵠΔΔ.ⲆⲆⲆⲆⲆ === 2) {
                    this.buttons[qa].info.state = _f;
                } else if (ΔⵠΔΔ.ⲆⲆⲆⲆⲆ === 3) {
                    this.buttons[ra].info.state = _f;
                } else if (ΔⵠΔΔ.ⲆⲆⲆⲆⲆ === 6) {
                    this.buttons[pa].info.state = _f;
                } else if (ΔⵠΔΔ.ⲆⲆⲆⲆⲆ === 7) {
                    this.buttons[sa].info.state = _f;
                }
            }
            for (n = 1; this.buttons.length > n; n++) {
                if (ja === this.buttons[n].info.active) {
                    this.buttons[n].ᐃⲆᐃⲆ(c);
                }
            }
            this.ΔΔⲆᐃ[0].ᐃⲆᐃⲆ(c);
            if ((this.ᐃΔⲆⵠⵠ & (O | S)) > 0) {
                x = this.ⵠΔΔΔⵠⲆⵠ;
                Mu(c, x, lo - x.width / 4, 138, x.width / 2, x.height / 2);
            }
            var Z = Math.max(1, Math.min(18, Math.floor((Mx.ᐃⵠⲆΔⵠ + 3) / 2)));
            this.ΔΔⲆᐃ[Z].active = ja;
            this.ΔΔⲆᐃ[Z].ᐃⲆᐃⲆ(c);
            this.ΔΔⲆᐃ[Z].active = ia;
            this.buttons[0].ᐃⲆᐃⲆ(c);
            if ((this.ᐃΔⲆⵠⵠ & (M | F | j | Q | G)) > 1) {
                var g = (this.ᐃΔⲆⵠⵠ & (F | j | Q | G)) > 1 ? -190 : 0;
                x = ⵠΔ[29][this.ⵠᐃΔⲆⲆ][this.ⲆᐃⲆΔⵠΔⵠ];
                Mu(c, x, lo - x.width / 4 + g, 183, x.width / 2, x.height / 2);
                this.ⲆΔᐃⲆ = (this.ⲆΔᐃⲆ + Xx * 1000) % 2000;
                var u = (this.ⲆΔᐃⲆ < 1000) * 4.5 ? this.ⲆΔᐃⲆ / 1000 : (2000 - this.ⲆΔᐃⲆ) / 1000;
                x = ⵠΔ[28][this.ⲆⵠⵠⲆⲆ][this.ⲆᐃⲆΔⵠΔⵠ];
                Mu(c, x, lo - x.width / 4 - 62 + u + g, 240, x.width / 2, x.height / 2);
                x = ⵠΔ[7][this.ᐃΔⲆⲆ][this.ⲆᐃⲆΔⵠΔⵠ];
                Mu(c, x, lo - x.width / 4 - 54 + u + g, 272, x.width / 2, x.height / 2);
                Mu(c, x, lo - x.width / 4 + 54 - u + g, 272, x.width / 2, x.height / 2);
                x = ⵠΔ[255][this.ᐃΔⲆⲆ][this.ⲆᐃⲆΔⵠΔⵠ];
                Mu(c, x, lo - x.width / 4 + g, 222, x.width / 2, x.height / 2);
                x = ⵠΔ[796][this.ⵠᐃⲆⵠΔ][this.ⲆᐃⲆΔⵠΔⵠ];
                Mu(c, x, lo - x.width / 4 + g, 222, x.width / 2, x.height / 2);
            }
            if ((this.ᐃΔⲆⵠⵠ & M) === M) {
                x = ⵠΔ[250][this.ⵠⵠΔⲆⵠ][this.ⲆᐃⲆΔⵠΔⵠ];
                Mu(c, x, lo - x.width / 4 - 61, 406 - x.height / 4, x.width / 2, x.height / 2);
                x = ⵠΔ[250][this.ⲆᐃΔⵠⲆ][this.ⲆᐃⲆΔⵠΔⵠ];
                Mu(c, x, lo - x.width / 4 + 53, 406 - x.height / 4, x.width / 2, x.height / 2);
            }
            if ((this.ᐃΔⲆⵠⵠ & R) === R) {
                x = ⵠΔ[250][this.ⲆᐃΔⵠⲆ][this.ⲆᐃⲆΔⵠΔⵠ];
                Mu(c, x, lo - x.width / 4 - 200, 268 - x.height / 4, x.width / 2, x.height / 2);
            }
            if (L === (this.ᐃΔⲆⵠⵠ & L)) {
                x = ⵠΔ[250][this.ⵠⵠΔⲆⵠ][this.ⲆᐃⲆΔⵠΔⵠ];
                Mu(c, x, lo - x.width / 4 - 200, 268 - x.height / 4, x.width / 2, x.height / 2);
            }
            if ((this.ᐃΔⲆⵠⵠ & (F | j | Q | G | R | L)) > 1) {
                for (n = 1; this.buttons.length > n; n++) {
                    if (this.buttons[n].view & this.ᐃΔⲆⵠⵠ) {
                        var _ = this.buttons[n].info;
                        if (_.ΔⲆᐃⲆᐃΔⲆ >= 0) {
                            x = _.ΔΔⵠΔᐃⵠΔⲆΔ[_.ΔⲆᐃⲆᐃΔⲆ].Ⲇⵠⵠ;
                            Mu(c, x, _.translate.x - x.width / 8 + 44.5, _.translate.y - x.height / 8 + 45.5, x.width / 4, x.height / 4);
                            if (_.ⲆⲆⵠᐃⲆΔᐃ !== 1) {
                                x = ᐃⵠ.ⵠⲆᐃⵠⵠΔⲆ;
                                Mu(c, x, _.translate.x - x.width / 4 + 44.5, _.translate.y - x.height / 4 + 44.5, x.width / 2, x.height / 2);
                            }
                        }
                    }
                }
                x = this.ⲆΔᐃⲆᐃⵠⲆ;
                Mu(c, x, lo - 312, 375, x.width / 2, x.height / 2);
                x = this.ᐃΔⲆᐃΔᐃⵠ;
                Mu(c, x, lo - 312, 395, x.width / 2, x.height / 2);
            }
            if (this.ⵠⲆⵠΔᐃΔⲆ !== this.ΔΔⲆᐃⲆ) {
                this.ⵠⲆⵠΔᐃΔⲆ = this.ΔΔⲆᐃⲆ;
                this.ⵠⲆᐃⲆᐃⵠⵠ = Ff("" + this.ΔΔⲆᐃⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
            }
            Mu(c, this.ⵠⲆᐃⲆᐃⵠⵠ, this.ΔΔⲆᐃ[0].translate.x + 350, 15, this.ⵠⲆᐃⲆᐃⵠⵠ.w2, this.ⵠⲆᐃⲆᐃⵠⵠ.ᐃⲆΔⲆⵠ);
            if (this.ΔⲆⲆΔⲆᐃⵠ !== this.ᐃⵠⲆΔⵠ) {
                this.ΔⲆⲆΔⲆᐃⵠ = this.ᐃⵠⲆΔⵠ;
                this.ᐃⲆⵠⲆⲆΔⲆ = Ff("LVL " + (this.ᐃⵠⲆΔⵠ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, Qa, 30, 24, undefined, undefined, undefined, eq, "#3F3019", 20);
            }
            Mu(c, this.ᐃⲆⵠⲆⲆΔⲆ, this.ΔΔⲆᐃ[0].translate.x + 94, 0, this.ᐃⲆⵠⲆⲆΔⲆ.w2, this.ᐃⲆⵠⲆⲆΔⲆ.ᐃⲆΔⲆⵠ);
            if (ΔⵠΔΔ.ⲆⲆᐃⲆⲆⲆΔ === 0) {
                var aa = this.buttons[na].hint;
                if (aa > 0) {
                    x = ᐃⵠ.ᐃⲆⲆⵠⲆⲆⵠ;
                    Mu(c, x, lo - x.width / 4, -36 - x.height * ⵠᐃⵠ.ᐃⲆΔΔⲆ(1 - aa) / 2, x.width / 2, x.height / 2);
                }
                if ((aa = this.buttons[oa].hint) > 0) {
                    x = ᐃⵠ.ⲆⲆⲆΔⵠⵠⲆ;
                    Mu(c, x, lo - x.width / 4, -36 - x.height * ⵠᐃⵠ.ᐃⲆΔΔⲆ(1 - aa) / 2, x.width / 2, x.height / 2);
                }
                if ((aa = this.buttons[pa].hint) > 0) {
                    x = ᐃⵠ.ⲆⲆⲆⲆⵠⲆⵠ;
                    Mu(c, x, lo - x.width / 4, -36 - ⵠᐃⵠ.ᐃⲆΔΔⲆ(1 - aa) * x.height / 2, x.width / 2, x.height / 2);
                }
                aa = this.buttons[sa].hint;
                if (aa > 0) {
                    x = ᐃⵠ.ᐃⵠᐃΔᐃΔⵠ;
                    Mu(c, x, lo - x.width / 4, -36 - x.height * ⵠᐃⵠ.ᐃⲆΔΔⲆ(1 - aa) / 2, x.width / 2, x.height / 2);
                }
                if ((aa = this.buttons[ra].hint) > 0) {
                    x = ᐃⵠ.ΔΔᐃⲆΔΔᐃ;
                    Mu(c, x, lo - x.width / 4, -36 - ⵠᐃⵠ.ᐃⲆΔΔⲆ(1 - aa) * x.height / 2, x.width / 2, x.height / 2);
                }
                if ((aa = this.buttons[qa].hint) > 0) {
                    x = ᐃⵠ.ᐃⲆΔΔⵠᐃᐃ;
                    Mu(c, x, lo - x.width / 4, -36 - ⵠᐃⵠ.ᐃⲆΔΔⲆ(1 - aa) * x.height / 2, x.width / 2, x.height / 2);
                }
            }
            if (this.ΔΔⲆΔΔ === 1 && Math.abs(Y - this.ᐃⵠᐃⲆⲆΔⵠ) < 0.006) {
                c.globalAlpha = Math.min(1, this.ᐃΔⲆⵠᐃⵠᐃ * 3);
                x = ᐃⵠ.ⲆΔⵠΔᐃΔΔ;
                c.save();
                c.translate(lo, 260);
                this.ᐃΔⲆⵠᐃⵠᐃ += Xx;
                c.rotate(this.ᐃΔⲆⵠᐃⵠᐃ);
                Mu(c, x, -x.width / 2, -x.height / 2, x.width, x.height);
                c.restore();
                u = 1.05 + Math.cos(this.ᐃΔⲆⵠᐃⵠᐃ * 5) * 0.05;
                if (this.ⵠⵠⵠᐃⲆⲆⵠ === 0) {
                    var ba = (x = ΔΔΔⲆ.ⲆΔᐃⵠᐃ[this.ⲆΔᐃᐃᐃΔⲆ].Ⲇⵠⵠ).width * u;
                    var ca = x.height * u;
                    Mu(c, x, lo - ba / 2, 260 - ca / 2, ba, ca);
                } else if (this.ⵠⵠⵠᐃⲆⲆⵠ === 1) {
                    ba = (x = ΔΔΔⲆ.ⲆΔᐃⵠᐃ[0].Ⲇⵠⵠ).width * u;
                    ca = u * x.height;
                    Mu(c, x, lo - ba / 2, 260 - ca / 2, ba, ca);
                    ba = (x = ΔΔΔⲆ.ᐃᐃⵠⵠⲆ[this.ⲆΔᐃᐃᐃΔⲆ].Ⲇⵠⵠ).width * u;
                    ca = u * x.height;
                    Mu(c, x, lo - ba / 2, 260 - ca / 2, ba, ca);
                } else if (this.ⵠⵠⵠᐃⲆⲆⵠ === 2) {
                    ba = u * (x = ΔΔΔⲆ.ⲆΔΔⲆ[this.ⲆΔᐃᐃᐃΔⲆ].Ⲇⵠⵠ).width;
                    ca = u * x.height;
                    Mu(c, x, lo - ba / 2, 180 - ca / 2, ba, ca);
                    ba = u * (x = ΔΔΔⲆ.ⲆΔᐃⵠᐃ[0].Ⲇⵠⵠ).width;
                    ca = u * x.height;
                    Mu(c, x, lo - ba / 2, 260 - ca / 2, ba, ca);
                } else if (this.ⵠⵠⵠᐃⲆⲆⵠ === 3) {
                    ba = (x = ΔΔΔⲆ.ΔᐃΔⵠΔ[this.ⲆΔᐃᐃᐃΔⲆ].Ⲇⵠⵠ).width * u;
                    ca = u * x.height;
                    c.save();
                    c.translate(lo, 260);
                    c.rotate(Math.PI);
                    Mu(c, x, -ba / 2, -ca / 2, ba, ca);
                    c.restore();
                } else if (this.ⵠⵠⵠᐃⲆⲆⵠ === 4) {
                    ba = (x = ΔΔΔⲆ.ⲆΔΔⲆΔ[this.ⲆΔᐃᐃᐃΔⲆ].Ⲇⵠⵠ).width * u;
                    ca = x.height * u;
                    Mu(c, x, lo - ba / 2, 260 - ca / 2, ba, ca);
                }
                x = this.ⲆΔⵠᐃⲆⲆⵠ;
                Mu(c, x, lo - x.width / 4, 340, x.width / 2, x.height / 2);
                x = this.ⵠΔΔⵠⲆⲆⵠ;
                Mu(c, x, lo - x.width / 4, 365, x.width / 2, x.height / 2);
                if (this.ᐃΔⲆⵠᐃⵠᐃ > 6) {
                    this.ΔΔⲆΔΔ = 0;
                    V(N);
                }
                c.globalAlpha = 1;
            }
            Qx.alert.ᐃⲆᐃⲆ("#FFF", "#000");
            if (k.waiting) {
                this.ᐃΔⲆΔⲆⲆΔ.ᐃⲆᐃⲆ();
            }
        };
        var t = 0;
        var w = Math.pow(2, t++);
        var v = Math.pow(2, t++);
        this.ᐃᐃⲆΔΔ = v;
        var m = Math.pow(2, t++);
        var M = Math.pow(2, t++);
        var N = Math.pow(2, t++);
        var y = Math.pow(2, t++);
        var P = Math.pow(2, t++);
        var u = Math.pow(2, t++);
        this.ⲆΔⵠⲆᐃ = u;
        var x = Math.pow(2, t++);
        var z = Math.pow(2, t++);
        var A = Math.pow(2, t++);
        var B = Math.pow(2, t++);
        var D = Math.pow(2, t++);
        var E = Math.pow(2, t++);
        var I = Math.pow(2, t++);
        var J = Math.pow(2, t++);
        var Q = Math.pow(2, t++);
        var R = Math.pow(2, t++);
        var F = Math.pow(2, t++);
        var j = Math.pow(2, t++);
        var G = Math.pow(2, t++);
        var L = Math.pow(2, t++);
        var S = Math.pow(2, t++);
        var O = Math.pow(2, t++);
        var q = Math.pow(2, t++);
        this.ⵠⵠⲆᐃᐃ = q;
        var H = Math.pow(2, t++);
        this.ⵠⵠⲆΔΔ = H;
        var T = Math.pow(2, t++);
        this.ΔⲆⵠⲆᐃ = T;
        var U = Math.pow(2, t++);
        function K(a, b, c) {
            for (var d = 0; d < k.ΔΔⲆᐃ.length; d++) {
                if (k.ΔΔⲆᐃ[d].view & a) {
                    k.ΔΔⲆᐃ[d].active = b;
                }
            }
            for (d = 0; d < k.buttons.length; d++) {
                if ((k.buttons[d].view & a) !== 0) {
                    k.buttons[d].info.active = b;
                }
            }
            for (d = 0; k.ⵠᐃᐃⲆΔ.length > d; d++) {
                if (k.ⵠᐃᐃⲆΔ[d].view & a) {
                    k.ⵠᐃᐃⲆΔ[d].style.display = c;
                }
            }
        }
        this.ᐃΔⲆⵠⵠ = w;
        function V(a) {
            if (k.ⵠⲆⵠΔⵠΔⵠ !== false) {
                K(x, ia, "none");
                K(z, ia, "none");
                W();
                if (k.ᐃΔⲆⵠⵠ !== a && k.ΔΔⲆΔΔ < 1) {
                    k.ⵠⵠⵠⵠⵠ.style.display = w === a || N === a || v === a || P === a || a === M || a === y ? "inline-block" : "none";
                    K(k.ᐃΔⲆⵠⵠ, ia, "none");
                    k.ᐃΔⲆⵠⵠ = a;
                    K(k.ᐃΔⲆⵠⵠ, ja, "inline-block");
                }
            }
        }
        function W() {
            var b = Number(ⲆΔⵠⲆ.get("starve_crate"));
            var c = Number(ⲆΔⵠⲆ.get("starve_dead"));
            var d = Number(ⲆΔⵠⲆ.get("starve_book"));
            var e = Number(ⲆΔⵠⲆ.get("starve_bag"));
            var f = Number(ⲆΔⵠⲆ.get("starve_skin"));
            var g = Number(ⲆΔⵠⲆ.get("starve_accessory"));
            if (Mx.unlock.ᐃΔⲆⲆ[Mx.ᐃΔⲆⲆ] <= 0) {
                Mx.ᐃΔⲆⲆ = Mx.unlock.ᐃΔⲆⲆ[f] > 0 ? f : 0;
            }
            if (Mx.unlock.ⲆⵠⵠⲆⲆ[Mx.ⲆⵠⵠⲆⲆ] <= 0) {
                Mx.ⲆⵠⵠⲆⲆ = Mx.unlock.ⲆⵠⵠⲆⲆ[d] > 0 ? d : 0;
            }
            if (Mx.unlock.ⲆᐃΔⵠⲆ[Mx.ⲆᐃΔⵠⲆ] <= 0) {
                Mx.ⲆᐃΔⵠⲆ = Mx.unlock.ⲆᐃΔⵠⲆ[c] > 0 ? c : 0;
            }
            if (Mx.unlock.ⵠⵠΔⲆⵠ[Mx.ⵠⵠΔⲆⵠ] <= 0) {
                Mx.ⵠⵠΔⲆⵠ = Mx.unlock.ⵠⵠΔⲆⵠ[b] > 0 ? b : 0;
            }
            if (Mx.unlock.ⵠᐃⲆⵠΔ[Mx.ⵠᐃⲆⵠΔ] <= 0) {
                Mx.ⵠᐃⲆⵠΔ = Mx.unlock.ⵠᐃⲆⵠΔ[g] > 0 ? g : 0;
            }
            if (Mx.unlock.ⵠᐃΔⲆⲆ[Mx.ⵠᐃΔⲆⲆ] <= 0) {
                Mx.ⵠᐃΔⲆⲆ = Mx.unlock.ⵠᐃΔⲆⲆ[e] > 0 ? e : 0;
            }
        }
        function X() {
            W();
            if ($x % 2) {
                console.log(undefined);
                ΔⵠΔΔ.connect();
            } else {
                console.log(kr);
                if (hc.Widget.isBlocked === 1) {
                    hc.Widget.createAdPlayer(ΔⵠΔΔ.connect.bind(ΔⵠΔΔ), ΔⵠΔΔ.connect.bind(ΔⵠΔΔ));
                } else {
                    hc.Widget.preroll();
                    hc.Widget.play = ΔⵠΔΔ.connect.bind(ΔⵠΔΔ);
                }
            }
        }
        function Y(a) {
            if (Qx.ⲆⲆⵠⵠᐃⲆⲆ !== mo && Qx.ΔⲆᐃⵠⲆⲆⵠ !== undefined && eq !== Qx.ⵠⲆΔⲆᐃⵠΔ) {
                a();
            }
        }
        function Z(a, b, c) {
            const d = new XMLHttpRequest();
            d.open("GET", a);
            d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            d.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    if (b !== undefined) {
                        b(d.responseText);
                    }
                } else if (this.readyState == 4 && c !== undefined) {
                    c();
                }
            };
            d.send();
        }
        this.ⲆΔᐃⵠᐃⲆⵠ = 0;
        this.ΔΔΔⵠ = V;
        this.ⲆⵠᐃⲆⵠΔⲆ = function (b, a) {
            let c = "0";
            let d = 0;
            if (qy) {
                c = qy + hr.ΔⵠᐃᐃᐃⲆⲆ();
            }
            if (Qx.ⲆⲆⵠⵠᐃⲆⲆ) {
                Y(b);
            } else {
                Z(`${cy}token?id=${c}`, function (c) {
                    if (d === 1) {
                        return;
                    }
                    const e = c.split("_");
                    const f = e[0] + "_";
                    const g = Number(e[1]);
                    const a = Math.abs(function (a) {
                        return Yk(a, 8260, 46947, 8004, 37330, 5330);
                    }(g));
                    Qx.ⲆⲆⵠⵠᐃⲆⲆ = f + a;
                    Y(b);
                }, function () {
                    if (d !== 1) {
                        if (a === 1) {
                            d = 1;
                            b();
                            return;
                        } else {
                            k.waiting = false;
                            return;
                        }
                    }
                });
            }
            Z(`${dy}get`, function (c) {
                if (d === 1) {
                    return;
                }
                const e = c.split("_");
                const f = e[0] + "_";
                const g = Number(e[1]);
                const a = Math.abs(function (a) {
                    return nr(a, 51138, 6688, 28404);
                }(g));
                Qx.ΔⲆᐃⵠⲆⲆⵠ = f + a;
                Qx.ᐃⲆⲆⵠⵠⲆⵠ = a;
                Y(b);
            }, function () {
                if (d !== 1) {
                    if (a === 1) {
                        d = 1;
                        b();
                        return;
                    } else {
                        k.waiting = Ks;
                        return;
                    }
                }
            });
            Z(`${dy}set`, function (c) {
                if (d === 1) {
                    return;
                }
                const e = c.split("_");
                const f = e[0] + "_";
                const g = Number(e[1]);
                const a = Math.abs(function (a) {
                    return nt(a, 18625, 2823);
                }(g));
                Qx.ⵠⲆΔⲆᐃⵠΔ = f + a;
                Qx.ᐃᐃⵠᐃⵠΔⵠⲆⵠ = a;
                Y(b);
            }, function () {
                if (d !== 1) {
                    if (a === 1) {
                        d = 1;
                        b();
                        return;
                    } else {
                        k.waiting = false;
                        return;
                    }
                }
            });
        };
        this.ⵠΔⲆⵠᐃᐃⲆ = function () {
            if (xl === k.waiting) {
                Qx.reconnect.enabled = false;
                k.waiting = p;
                k.ⲆⵠᐃⲆⵠΔⲆ(X);
            }
        };
        var _ = 1;
        var aa = 2;
        var ba = 4;
        var ca = 8;
        var da = 16;
        var ea = 32;
        var fa = 1;
        var ha = 0;
        var ia = 0;
        var ja = 1;
        if (hc.innerWidth < 1300) {
            this.ΔⵠⲆⵠⲆ = {
                id: document.getElementById("nickname_block"),
                style: document.getElementById("nickname_block").style,
                input: document.getElementById("nickname_input"),
                active: ja,
                position: ba | _,
                view: w,
                translate: {
                    ⵠⵠⲆⵠᐃ: 184,
                    x: 0,
                    ⵠⲆΔⲆᐃ: 200,
                    y: 0
                }
            };
        } else {
            this.ΔⵠⲆⵠⲆ = {
                id: document.getElementById("nickname_block"),
                style: document.getElementById("nickname_block").style,
                input: document.getElementById("nickname_input"),
                active: ja,
                position: ba | da,
                view: w,
                translate: {
                    ⵠⲆΔⲆᐃ: -180,
                    ⵠⵠⲆⵠᐃ: 184,
                    x: 0,
                    y: 0
                }
            };
        }
        this.ΔⵠⲆⵠⲆ.id.addEventListener("keyup", function (a) {
            a.preventDefault();
            if (a.keyCode == 13 && !k.waiting && !k.ⲆⲆᐃᐃᐃⲆⵠⲆⲆ) {
                k.ⵠΔⲆⵠᐃᐃⲆ();
            }
        });
        this.ΔⵠⲆⵠⲆ.input.value = ⲆΔⵠⲆ.get("starve_nickname") ? ⲆΔⵠⲆ.get("starve_nickname") : "";
        this.ΔⲆᐃᐃΔΔⵠⲆⵠ = {
            id: document.getElementById("account_nickname_block"),
            style: document.getElementById("account_nickname_block").style,
            input: document.getElementById("account_nickname_input"),
            active: ia,
            position: ba | da,
            view: v,
            translate: {
                ⵠⵠⲆⵠᐃ: 110,
                ⵠⲆΔⲆᐃ: -122,
                y: 0,
                x: 0
            }
        };
        if (hc.innerWidth < 1300) {
            this.ⵠⲆⵠⲆᐃ = {
                id: document.getElementById("servselect"),
                style: document.getElementById("servselect").style,
                active: ja,
                position: ba | _,
                view: w,
                translate: {
                    ⵠⵠⲆⵠᐃ: 225,
                    ⵠⲆΔⲆᐃ: 208,
                    x: 0,
                    y: 0
                }
            };
        } else {
            this.ⵠⲆⵠⲆᐃ = {
                id: document.getElementById("servselect"),
                style: document.getElementById("servselect").style,
                active: ja,
                position: ba | da,
                view: w,
                translate: {
                    ⵠⵠⲆⵠᐃ: 225,
                    x: 0,
                    y: 0,
                    ⵠⲆΔⲆᐃ: -180
                }
            };
        }
        this.ⵠⲆᐃⲆΔ = {
            id: document.getElementById("leaderboard"),
            style: document.getElementById("leaderboard").style,
            active: ia,
            position: ba | da,
            view: P,
            translate: {
                ⵠⵠⲆⵠᐃ: 190,
                ⵠⲆΔⲆᐃ: -294.5,
                x: 0,
                y: 0
            }
        };
        this.ⲆⵠⵠⲆⲆⵠΔⲆᐃ = {
            id: document.getElementById("stats_box"),
            style: document.getElementById("stats_box").style,
            active: ia,
            position: ba | da,
            view: v,
            translate: {
                ⵠⵠⲆⵠᐃ: 187,
                ⵠⲆΔⲆᐃ: 125,
                x: 0,
                y: 0
            }
        };
        this.ⵠΔⲆᐃⲆⲆⲆΔⵠ = {
            id: document.getElementById("serverAddressBlock"),
            style: document.getElementById("serverAddressBlock").style,
            input: document.getElementById("serverAddressInput"),
            active: ia,
            position: ba | da,
            view: T,
            translate: {
                x: 0,
                ⵠⵠⲆⵠᐃ: 350,
                ⵠⲆΔⲆᐃ: -220,
                y: 0
            }
        };
        t = 0;
        this.ⵠᐃᐃⲆΔ = [];
        this.ⵠᐃᐃⲆΔ[t++] = this.ΔⵠⲆⵠⲆ;
        this.ⵠᐃᐃⲆΔ[t++] = this.ⵠⲆⵠⲆᐃ;
        this.ⵠᐃᐃⲆΔ[t++] = this.ⵠⲆᐃⲆΔ;
        this.ⵠᐃᐃⲆΔ[t++] = this.ΔⲆᐃᐃΔΔⵠⲆⵠ;
        this.ⵠᐃᐃⲆΔ[t++] = this.ⲆⵠⵠⲆⲆⵠΔⲆᐃ;
        this.ⵠᐃᐃⲆΔ[t++] = this.ⵠΔⲆᐃⲆⲆⲆΔⵠ;
        t = 0;
        this.ΔΔⲆᐃ = [];
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ⲆᐃⵠΔⲆⲆΔ, ja, 0, 0, _);
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ⲆⵠᐃⲆⲆΔᐃ, ia, 0, 0, _);
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ⵠΔⲆᐃΔᐃΔ, ia, 0, 0, _);
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ᐃᐃΔⲆⵠΔⵠ, ia, 0, 0, _);
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ⵠΔΔⵠⲆⲆⲆ, ia, 0, 0, _);
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ᐃΔΔᐃⵠᐃⵠ, ia, 0, 0, _);
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ΔᐃΔΔⵠᐃⵠ, ia, 0, 0, _);
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ᐃΔⲆⲆΔⵠⵠ, ia, 0, 0, _);
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ᐃΔΔⲆⲆᐃΔ, ia, 0, 0, _);
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ⵠΔⵠᐃⲆⲆⵠ, ia, 0, 0, _);
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ⵠᐃᐃΔᐃΔⵠ, ia, 0, 0, _);
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ᐃⲆᐃᐃⵠᐃⵠ, ia, 0, 0, _);
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ⲆⵠⵠⲆⵠⲆⵠ, ia, 0, 0, _);
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ⵠⲆΔᐃᐃΔⲆ, ia, 0, 0, _);
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ΔΔⲆⵠΔⲆⲆ, ia, 0, 0, _);
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ⲆᐃⲆΔᐃΔᐃ, ia, 0, 0, _);
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ᐃᐃΔⲆⲆⵠⵠ, ia, 0, 0, _);
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ⵠΔⵠᐃⵠⵠᐃ, ia, 0, 0, _);
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ⲆᐃⵠΔΔᐃⲆ, ia, 0, 0, _);
        if (hc.innerWidth < 1300) {
            this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⵠⲆⵠⵠⵠΔΔ, ja, 200, 100, ba | _);
        } else {
            this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⵠⲆⵠⵠⵠΔΔ, ja, -753 / 4, 100, ba | da);
        }
        this.ΔΔⲆᐃ[t++].view = w;
        this.ΔΔⲆᐃ[t++] = Rf(ᐃⵠ.ⵠᐃᐃΔⲆᐃⲆ, ja, 403, -10, aa);
        if (hc.innerWidth > 1300) {
            this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⲆᐃⵠΔⵠⲆΔ, ja, -885 / 4, -319 / 2, ca | da);
            this.ΔΔⲆᐃ[t++].view = w;
        }
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ᐃⲆᐃΔⲆΔΔ, ia, -1293 / 4, 100, ba | da);
        this.ΔΔⲆᐃ[t++].view = v;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⲆⲆⲆⲆⵠⵠᐃ, ia, -356.25, 100, ba | da);
        this.ΔΔⲆᐃ[t++].view = M;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⵠᐃⵠⵠΔⲆΔ, ia, -905 / 4, 50, ba | da);
        this.ΔΔⲆᐃ[t++].view = m;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⲆΔᐃⵠⵠᐃΔ, ia, -402, 130, ba | da);
        this.ΔΔⲆᐃ[t++].view = N;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⲆⵠⵠⲆⵠⲆΔ, ia, -279.25, 130, ba | da);
        this.ΔΔⲆᐃ[t++].view = q;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ᐃⵠⲆᐃΔᐃⲆ, ia, -305.5, 130, ba | da);
        this.ΔΔⲆᐃ[t++].view = H;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⵠⵠⵠⲆΔᐃᐃ, ia, -305.5, 100, ba | da);
        this.ΔΔⲆᐃ[t++].view = T;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⵠᐃᐃⵠΔⵠᐃ, ia, -ᐃⵠ.ⵠᐃᐃⵠΔⵠᐃ.width / 4 - 350, -15, ba | da);
        this.ΔΔⲆᐃ[t++].view = U;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ΔᐃⲆΔΔᐃᐃ, ia, -374.25, 110, ba | da);
        this.ΔΔⲆᐃ[t++].view = y;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⲆΔᐃⵠⲆᐃⵠ, ia, -1226 / 4, 100, ba | da);
        this.ΔΔⲆᐃ[t++].view = P;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⲆΔΔⵠⲆΔⵠ, ia, -1381 / 4, 80, ba | da);
        this.ΔΔⲆᐃ[t++].view = u;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⵠⲆΔⵠᐃΔᐃ, ia, -385.5, 150, ba | da);
        this.ΔΔⲆᐃ[t++].view = A;
        var ka = 3.6;
        var la = this.ⲆⵠᐃⵠΔᐃΔ([["#25c5d6", 10.8], ["#e2cf27", ka * 10], ["#afac98", 108], ["#d88e23", ka * 57]]);
        this.ΔΔⲆᐃ[t] = Rf(la, ia, -la.width / 4, 178, ba | da);
        this.ΔΔⲆᐃ[t++].view = A;
        this.ⲆⵠⲆⲆᐃⲆⲆⵠᐃ = function (b, c, d) {
            var e;
            k.ΔΔⲆΔΔ = 1;
            k.ᐃᐃⲆΔⲆᐃᐃ = 0;
            k.ᐃΔⲆⵠᐃⵠᐃ = 0;
            k.ᐃⵠᐃⲆⲆΔⵠ = b;
            k.ⵠⵠⵠᐃⲆⲆⵠ = c;
            var f = 0;
            if (c === 0) {
                for (f = 0; f < ΔΔΔⲆ.ⲆΔᐃⵠᐃ.length && ΔΔΔⲆ.ⲆΔᐃⵠᐃ[f].id !== d; f++);
                e = ΔΔΔⲆ.ⲆΔᐃⵠᐃ[f];
                k.unlock.ᐃΔⲆⲆ[f] = 1;
            } else if (c === 1) {
                for (f = 0; ΔΔΔⲆ.ᐃᐃⵠⵠⲆ.length > f && ΔΔΔⲆ.ᐃᐃⵠⵠⲆ[f].id !== d; f++);
                e = ΔΔΔⲆ.ᐃᐃⵠⵠⲆ[f];
                k.unlock.ⵠᐃⲆⵠΔ[f] = 1;
            } else if (c === 2) {
                for (f = 0; ΔΔΔⲆ.ⲆΔΔⲆ.length > f && d !== ΔΔΔⲆ.ⲆΔΔⲆ[f].id; f++);
                e = ΔΔΔⲆ.ⲆΔΔⲆ[f];
                k.unlock.ⵠᐃΔⲆⲆ[f] = 1;
            } else if (c === 3) {
                for (f = 0; ΔΔΔⲆ.ΔᐃΔⵠΔ.length > f && ΔΔΔⲆ.ΔᐃΔⵠΔ[f].id !== d; f++);
                e = ΔΔΔⲆ.ΔᐃΔⵠΔ[f];
                k.unlock.ⲆⵠⵠⲆⲆ[f] = 1;
            } else if (c === 4) {
                for (f = 0; ΔΔΔⲆ.ⲆΔΔⲆΔ.length > f && d !== ΔΔΔⲆ.ⲆΔΔⲆΔ[f].id; f++);
                e = ΔΔΔⲆ.ⲆΔΔⲆΔ[f];
                k.unlock.ⵠⵠΔⲆⵠ[f] = 1;
                k.unlock.ⲆᐃΔⵠⲆ[f] = 1;
            }
            k.ⲆΔᐃᐃᐃΔⲆ = f;
            k.ⵠΔΔⵠⲆⲆⵠ = Ff("by " + e.ⲆⲆΔ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, undefined, 30, 24, undefined, undefined, undefined, er, "#000000", 24);
            k.ⲆΔⵠᐃⲆⲆⵠ = Ff(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, undefined, 30, 24, lh, ug, Qk, undefined, "#000000", 20);
        };
        this.ΔΔⲆΔΔ = 0;
        this.ᐃᐃⲆΔⲆᐃᐃ = 0;
        this.ᐃⵠᐃⲆⲆΔⵠ = 0;
        this.ⵠⵠⵠᐃⲆⲆⵠ = 0;
        this.ᐃΔⲆⵠᐃⵠᐃ = 0;
        this.ⵠΔΔⵠⲆⲆⵠ = mo;
        this.ⲆΔⵠᐃⲆⲆⵠ = lh;
        var ma = 197;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ΔⲆⵠⵠⲆⵠᐃ, ia, -1542 / 4, 150, ba | da);
        this.ΔΔⲆᐃ[t++].view = I;
        la = this.ⲆⵠᐃⵠΔᐃΔ([["#d45ce5", 10.8], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", ka * 57]]);
        this.ΔΔⲆᐃ[t] = Rf(la, ia, -la.width / 4, 178, ba | da);
        this.ΔΔⲆᐃ[t++].view = I;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⲆⵠᐃΔΔᐃⲆ, ia, -1542 / 4, 150, ba | da);
        this.ΔΔⲆᐃ[t++].view = D;
        la = this.ⲆⵠᐃⵠΔᐃΔ([["#d33a2a", 10.8], ["#d45ce5", ka * 10], ["#25c5d6", 108], ["#e2cf27", ka * 57]]);
        this.ΔΔⲆᐃ[t] = Rf(la, ia, -la.width / 4, 178, ba | da);
        this.ΔΔⲆᐃ[t++].view = D;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⲆᐃΔᐃⲆⲆⲆ, ia, -1542 / 4, 150, ba | da);
        this.ΔΔⲆᐃ[t++].view = E;
        la = this.ⲆⵠᐃⵠΔᐃΔ([["#25c5d6", 10.8], ["#e2cf27", ka * 10], ["#afac98", 108], ["#d88e23", ka * 57]]);
        this.ΔΔⲆᐃ[t] = Rf(la, ia, -la.width / 4, 178, ba | da);
        this.ΔΔⲆᐃ[t++].view = E;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⵠΔᐃⲆⲆΔᐃ, ia, -1542 / 4, 150, ba | da);
        this.ΔΔⲆᐃ[t++].view = B;
        la = this.ⲆⵠᐃⵠΔᐃΔ([["#d45ce5", ka * 3], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", ka * 57]]);
        this.ΔΔⲆᐃ[t] = Rf(la, ia, -la.width / 4, 178, ba | da);
        this.ΔΔⲆᐃ[t++].view = B;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⵠⵠⲆᐃᐃⵠᐃ, ia, -1542 / 4, 150, ba | da);
        this.ΔΔⲆᐃ[t++].view = J;
        la = this.ⲆⵠᐃⵠΔᐃΔ([["#d33a2a", ka * 3], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", ka * 57]]);
        this.ΔΔⲆᐃ[t] = Rf(la, ia, -la.width / 4, 178, ba | da);
        this.ΔΔⲆᐃ[t++].view = J;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⵠⲆΔᐃⵠⲆⲆ, ia, -1366 / 4, 100, ba | da);
        this.ΔΔⲆᐃ[t++].view = Q;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ᐃⲆⲆⵠⵠⲆΔ, ia, -341.5, 100, ba | da);
        this.ΔΔⲆᐃ[t++].view = G;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⵠⵠΔⵠⵠⲆⵠ, ia, -341.5, 100, ba | da);
        this.ΔΔⲆᐃ[t++].view = F;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⲆᐃⵠⵠΔᐃᐃ, ia, -1366 / 4, 100, ba | da);
        this.ΔΔⲆᐃ[t++].view = j;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⵠⵠⲆᐃⲆΔⲆ, ia, -1366 / 4, 100, ba | da);
        this.ΔΔⲆᐃ[t++].view = R;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ΔΔΔΔΔⲆΔ, ia, -341.5, 100, ba | da);
        this.ΔΔⲆᐃ[t++].view = L;
        ᐃⵠⲆᐃⲆΔΔ = t++;
        this.ΔΔⲆᐃ[ᐃⵠⲆᐃⲆΔΔ] = Rf(ᐃⵠ.ᐃⵠⲆᐃⲆΔΔ, ia, 484, 0, ba);
        ᐃⲆⲆⵠⵠᐃⵠ = t++;
        this.ΔΔⲆᐃ[ᐃⲆⲆⵠⵠᐃⵠ] = Rf(ᐃⵠ.ᐃⲆⲆⵠⵠᐃⵠ, ia, 812.5, 0, ba);
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ΔΔⵠⵠⵠⵠᐃ, ia, -189.5, -5, ba | da);
        this.ΔΔⲆᐃ[t++].view = z;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⵠⲆᐃⲆⵠⵠᐃ, ia, -189.5, -5, ba | da);
        this.ΔΔⲆᐃ[t++].view = x;
        ΔⲆΔᐃⲆⵠⵠ = t++;
        this.ΔΔⲆᐃ[ΔⲆΔᐃⲆⵠⵠ] = Rf(ᐃⵠ.ΔΔΔⵠⵠᐃΔ, ja, 93, 30, ba);
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⵠⲆⵠⲆΔᐃⲆ, ia, -173, 110, ba | da);
        this.ΔΔⲆᐃ[t++].view = S;
        this.ΔΔⲆᐃ[t] = Rf(ᐃⵠ.ⲆⵠΔⵠᐃΔⲆ, ia, -173, 110, ba | da);
        this.ΔΔⲆᐃ[t++].view = O;
        t = 0;
        this.buttons = [];
        this.buttons[t] = Gf(50, 57, 0, [ᐃⵠ.ᐃΔⵠᐃⲆΔΔ, ᐃⵠ.ⵠⲆᐃᐃΔᐃⲆ, ᐃⵠ.ΔᐃⲆⵠⲆⵠⵠ], fa, ha, function () {
            if (k.ⲆⵠⵠⵠⲆ()) {
                V(u);
            } else {
                V(m);
            }
        }, 320, 0, _, ja);
        t++;
        if (hc.innerWidth < 1300) {
            this.buttons[t] = Gf(202, 97, 0, [ᐃⵠ.ⲆⵠΔⲆΔᐃᐃ, ᐃⵠ.ΔᐃⲆⵠᐃΔᐃ, ᐃⵠ.ΔΔⲆⵠⵠⵠⲆ], fa, ha, this.ⵠΔⲆⵠᐃᐃⲆ, 462, 235, ba | _, ja);
        } else {
            this.buttons[t] = Gf(202, 97, 0, [ᐃⵠ.ⲆⵠΔⲆΔᐃᐃ, ᐃⵠ.ΔᐃⲆⵠᐃΔᐃ, ᐃⵠ.ΔΔⲆⵠⵠⵠⲆ], fa, ha, this.ⵠΔⲆⵠᐃᐃⲆ, 74, 235, ba | da, ja);
        }
        this.buttons[t].view = w;
        t++;
        if (hc.innerWidth > 1300) {
            this.buttons[t] = Gf(355, 168, 0, [ᐃⵠ.ΔᐃᐃᐃᐃΔΔ, ᐃⵠ.ΔᐃᐃᐃᐃΔΔ, ᐃⵠ.ΔᐃᐃᐃᐃΔΔ], fa, ha, function () {
                hc.open("./changelog.html", "_blank");
            }, -195, -115, ca | da, ja);
            this.buttons[t++].view = w;
            this.buttons[t] = Gf(355, 168, 0, [ᐃⵠ.ⲆⲆⵠⵠᐃⵠΔ, ᐃⵠ.ⲆⲆⵠⵠᐃⵠΔ, ᐃⵠ.ⲆⲆⵠⵠᐃⵠΔ], fa, ha, function () {
                hc.open("https://taming.io", "_blank");
            }, 20, -115, ca | da, ja);
            this.buttons[t++].view = w;
        }
        this.buttons[t++] = Gf(80, 80, 0, [ᐃⵠ.ⲆⵠΔΔⵠⵠⲆ, ᐃⵠ.ᐃⲆᐃⲆᐃⲆⵠ, ᐃⵠ.ᐃᐃᐃΔⵠᐃⵠ], fa, ha, function () {
            hc.open("https://lapamauve.creator-spring.com/", "_blank");
        }, 380, 10, aa, ja);
        this.buttons[t++] = Gf(80, 80, 0, [ᐃⵠ.ᐃⵠΔⵠΔⲆⵠ, ᐃⵠ.ⵠΔⲆᐃΔᐃⵠ, ᐃⵠ.ᐃᐃΔⲆⲆⵠᐃ], fa, ha, function () {
            hc.open("https://discord.gg/starveio", "_blank");
        }, 330, 10, aa, ja);
        this.buttons[t++] = Gf(80, 80, 0, [ᐃⵠ.ΔΔⲆⵠⲆⲆΔ, ᐃⵠ.ⲆⵠΔⲆⵠⲆⵠ, ᐃⵠ.ᐃᐃⲆΔΔⲆᐃ], fa, ha, function () {
            hc.open("https://reddit.com/r/starveio", "_blank");
        }, 280, 10, aa, ja);
        this.buttons[t++] = Gf(80, 80, 0, [ᐃⵠ.ΔⲆΔΔⵠΔⵠ, ᐃⵠ.ⲆⵠΔⵠᐃⲆᐃ, ᐃⵠ.ΔⲆⲆⵠⵠⵠΔ], fa, ha, function () {
            hc.open("https://starveiopro.wikia.com/wiki/", "_blank");
        }, 230, 10, aa, ja);
        this.buttons[t++] = Gf(80, 80, 0, [ᐃⵠ.ᐃΔΔΔΔΔⲆ, ᐃⵠ.ΔᐃⲆᐃᐃΔΔ, ᐃⵠ.ⲆⲆⵠᐃⵠΔⲆ], fa, ha, function () {
            hc.open("https://www.facebook.com/LapaMauve/", "_blank");
        }, 155, 10, aa, ja);
        this.buttons[t++] = Gf(80, 80, 0, [ᐃⵠ.ᐃⲆΔⲆⵠᐃⵠ, ᐃⵠ.ⵠΔᐃᐃᐃⲆΔ, ᐃⵠ.ᐃⲆᐃΔⵠⵠᐃ], fa, ha, function () {
            hc.open("https://twitter.com/lapamauve", "_blank");
        }, 105, 10, aa, ja);
        this.buttons[t++] = Gf(80, 80, 0, [ᐃⵠ.ΔΔⲆⲆⲆᐃΔ, ᐃⵠ.ⵠⵠᐃⲆᐃⵠⲆ, ᐃⵠ.ⲆΔⲆⵠⵠᐃⵠ], fa, ha, function () {
            hc.open("https://www.youtube.com/@lapamauveofficial", "_blank");
        }, 55, 10, aa, ja);
        ΔⵠⵠⵠΔᐃⲆ = t++;
        this.buttons[ΔⵠⵠⵠΔᐃⲆ] = Gf(232, 142, 0, [ᐃⵠ.ⲆΔⲆⲆΔⲆΔ, ᐃⵠ.ⵠⲆⲆΔⵠᐃⲆ, ᐃⵠ.ⵠⵠΔᐃⵠΔⵠ], fa, ha, function () {
            V(P);
            Gy(Mx.ⲆΔᐃᐃⲆᐃΔ, Mx.ⵠᐃᐃⲆⲆⲆᐃ, Mx.ΔΔΔᐃⵠᐃⲆ, Mx.ⵠⵠΔⲆⲆⲆⵠ);
        }, -5, 573, _, ja);
        this.buttons[t++] = Gf(236, 165, 0, [ᐃⵠ.ᐃΔⲆᐃᐃⵠⲆ, ᐃⵠ.ᐃΔⲆᐃᐃⵠⲆ, ᐃⵠ.ᐃΔⲆᐃᐃⵠⲆ], fa, 1, function () {
            V(P);
        }, -5, 566, _, ja);
        ⵠⲆᐃᐃⵠΔᐃ = t++;
        this.buttons[ⵠⲆᐃᐃⵠΔᐃ] = Gf(236, 165, 0, [ᐃⵠ.ⲆⵠⵠⲆᐃΔΔ, ᐃⵠ.ⵠⵠΔΔⵠⲆⲆ, ᐃⵠ.ⲆⲆᐃᐃΔⵠᐃ], fa, ha, function () {
            V(y);
        }, -5, 494, _, ja);
        this.buttons[t++] = Gf(236, 165, 0, [ᐃⵠ.ⲆΔⲆᐃⲆΔⲆ, ᐃⵠ.ⲆΔⲆᐃⲆΔⲆ, ᐃⵠ.ⲆΔⲆᐃⲆΔⲆ], fa, 1, function () {
            V(y);
        }, -5, 494, _, ja);
        ⵠⲆⲆᐃΔⵠΔ = t++;
        this.buttons[ⵠⲆⲆᐃΔⵠΔ] = Gf(236, 165, 0, [ᐃⵠ.ⲆⵠⵠⲆᐃΔΔ, ᐃⵠ.ⵠⵠΔΔⵠⲆⲆ, ᐃⵠ.ⲆⲆᐃᐃΔⵠᐃ], fa, ha, function () {
            if (k.ⲆⵠⵠⵠⲆ()) {
                if (Mx.ᐃⵠⲆΔⵠΔΔ - Date.now() > 0) {
                    V(T);
                } else {
                    V(q);
                }
            } else {
                V(m);
            }
        }, -5, 415, _, ja);
        this.buttons[t++] = Gf(236, 165, 0, [ᐃⵠ.ᐃᐃΔᐃⵠᐃᐃ, ᐃⵠ.ᐃᐃΔᐃⵠᐃᐃ, ᐃⵠ.ᐃᐃΔᐃⵠᐃᐃ], fa, 1, function () {
            if (k.ⲆⵠⵠⵠⲆ()) {
                if (Mx.ᐃⵠⲆΔⵠΔΔ - Date.now() > 0) {
                    V(T);
                } else {
                    V(q);
                }
            } else {
                V(m);
            }
        }, -5, 415, _, ja);
        ⲆⵠΔⲆⲆⵠᐃ = t++;
        this.buttons[ⲆⵠΔⲆⲆⵠᐃ] = Gf(236, 165, 0, [ᐃⵠ.ⲆⵠⵠⲆᐃΔΔ, ᐃⵠ.ⵠⵠΔΔⵠⲆⲆ, ᐃⵠ.ⲆⲆᐃᐃΔⵠᐃ], fa, ha, function () {
            V(N);
        }, -5, 336, _, ja);
        this.buttons[t++] = Gf(236, 165, 0, [ᐃⵠ.ΔⲆᐃⵠⲆΔΔ, ᐃⵠ.ΔⲆᐃⵠⲆΔΔ, ᐃⵠ.ΔⲆᐃⵠⲆΔΔ], fa, 1, function () {
            V(N);
        }, -5, 336, _, ja);
        ⲆⵠᐃΔΔⵠΔ = t++;
        this.buttons[ⲆⵠᐃΔΔⵠΔ] = Gf(236, 165, 0, [ᐃⵠ.ⲆⵠⵠⲆᐃΔΔ, ᐃⵠ.ⵠⵠΔΔⵠⲆⲆ, ᐃⵠ.ⲆⲆᐃᐃΔⵠᐃ], fa, ha, function () {
            V(M);
        }, -5, 257, _, ja);
        this.buttons[t++] = Gf(236, 165, 0, [ᐃⵠ.ⵠΔΔΔⵠᐃΔ, ᐃⵠ.ⵠΔΔΔⵠᐃΔ, ᐃⵠ.ⵠΔΔΔⵠᐃΔ], fa, 1, function () {
            V(M);
        }, -5, 257, _, ja);
        ⵠⲆΔⲆᐃⵠⲆ = t++;
        this.buttons[ⵠⲆΔⲆᐃⵠⲆ] = Gf(236, 165, 0, [ᐃⵠ.ⲆⵠⵠⲆᐃΔΔ, ᐃⵠ.ⵠⵠΔΔⵠⲆⲆ, ᐃⵠ.ⲆⲆᐃᐃΔⵠᐃ], fa, ha, function () {
            V(w);
        }, -5, 178, _, ja);
        this.buttons[t++] = Gf(236, 165, 0, [ᐃⵠ.ᐃⲆΔᐃΔⵠⵠ, ᐃⵠ.ᐃⲆΔᐃΔⵠⵠ, ᐃⵠ.ᐃⲆΔᐃΔⵠⵠ], fa, 1, function () {
            V(w);
        }, -5, 178, _, ja);
        ⲆⵠΔΔⵠⲆⵠ = t++;
        this.ⲆⵠΔΔⵠⲆⵠ = ⲆⵠΔΔⵠⲆⵠ;
        this.buttons[ⲆⵠΔΔⵠⲆⵠ] = Gf(324, 222, 0, [ᐃⵠ.ⲆⵠᐃᐃΔΔⲆ, ᐃⵠ.ⲆⵠᐃⵠΔΔⵠ, ᐃⵠ.ⲆᐃⲆΔᐃⵠᐃ], fa, ha, function () {
            V(m);
        }, 0, 70, _, ja);
        ⲆᐃⵠᐃᐃΔΔ = t++;
        ⵠΔⵠᐃΔⲆΔ = t++;
        this.ⲆᐃⵠᐃᐃΔΔ = ⲆᐃⵠᐃᐃΔΔ;
        this.ⵠΔⵠᐃΔⲆΔ = ⵠΔⵠᐃΔⲆΔ;
        this.buttons[ⲆᐃⵠᐃᐃΔΔ] = Gf(324, 222, 0, [ᐃⵠ.ⲆⵠⵠⵠⲆΔΔ, ᐃⵠ.ᐃΔⲆⵠΔⵠΔ, ᐃⵠ.ⲆᐃⵠᐃⲆⲆᐃ], fa, ha, function () {
            V(v);
            ta(-1);
        }, 0, 70, _, ia);
        this.buttons[ⵠΔⵠᐃΔⲆΔ] = Gf(324, 222, 0, [ᐃⵠ.ⵠᐃⲆⵠΔΔⲆ, ᐃⵠ.ⵠᐃⲆⵠΔΔⲆ, ᐃⵠ.ⵠᐃⲆⵠΔΔⲆ], fa, 1, function () {
            V(v);
            ta(-1);
        }, 0, 70, _, ia);
        if (ΔⵠΔΔ.ⲆⲆᐃⲆⲆⲆΔ === 0) {
            var na = t++;
            if (hc.innerWidth < 1300) {
                this.buttons[na] = Gf(266, 176, 0, [ᐃⵠ.ⵠΔΔⲆⲆᐃᐃ, ᐃⵠ.ᐃⲆⲆᐃⵠᐃⵠ, ᐃⵠ.ΔⵠⵠⲆⲆⵠᐃ], fa, ha, function () {
                    ΔⵠΔΔ.ΔⵠⲆⲆⲆ(0);
                }, 150, 300, _ | ba, ja);
            } else {
                this.buttons[na] = Gf(266, 176, 0, [ᐃⵠ.ⵠΔΔⲆⲆᐃᐃ, ᐃⵠ.ᐃⲆⲆᐃⵠᐃⵠ, ᐃⵠ.ΔⵠⵠⲆⲆⵠᐃ], fa, ha, function () {
                    ΔⵠΔΔ.ΔⵠⲆⲆⲆ(0);
                }, -340, 100, da | ba, ja);
            }
            this.buttons[na].view = w;
            this.buttons[na].hint = 0;
            var oa = t++;
            if (hc.innerWidth < 1300) {
                this.buttons[oa] = Gf(266, 176, 0, [ᐃⵠ.ΔⵠⵠⲆⲆΔΔ, ᐃⵠ.ᐃΔⲆᐃΔⲆΔ, ᐃⵠ.ᐃΔⵠΔⲆᐃᐃ], fa, ha, function () {
                    ΔⵠΔΔ.ΔⵠⲆⲆⲆ(4);
                }, 150, 400, _ | ba, ja);
            } else {
                this.buttons[oa] = Gf(266, 176, 0, [ᐃⵠ.ΔⵠⵠⲆⲆΔΔ, ᐃⵠ.ᐃΔⲆᐃΔⲆΔ, ᐃⵠ.ᐃΔⵠΔⲆᐃᐃ], fa, ha, function () {
                    ΔⵠΔΔ.ΔⵠⲆⲆⲆ(4);
                }, -340, 200, da | ba, ja);
            }
            this.buttons[oa].view = w;
            this.buttons[oa].hint = 0;
            var pa = t++;
            if (hc.innerWidth < 1300) {
                this.buttons[pa] = Gf(266, 176, 0, [ᐃⵠ.ᐃⵠᐃᐃΔΔⵠ, ᐃⵠ.ⲆᐃⵠᐃⲆⵠΔ, ᐃⵠ.ᐃΔⵠⵠⲆⲆⲆ], fa, ha, function () {
                    ΔⵠΔΔ.ΔⵠⲆⲆⲆ(6);
                }, 450, 300, _ | ba, ja);
            } else {
                this.buttons[pa] = Gf(266, 176, 0, [ᐃⵠ.ᐃⵠᐃᐃΔΔⵠ, ᐃⵠ.ⲆᐃⵠᐃⲆⵠΔ, ᐃⵠ.ᐃΔⵠⵠⲆⲆⲆ], fa, ha, function () {
                    ΔⵠΔΔ.ΔⵠⲆⲆⲆ(6);
                }, -340, 300, da | ba, ja);
            }
            this.buttons[pa].view = w;
            this.buttons[pa].hint = 0;
            var qa = t++;
            if (hc.innerWidth < 1300) {
                this.buttons[qa] = Gf(266, 176, 0, [ᐃⵠ.ᐃᐃΔⵠᐃⲆⲆ, ᐃⵠ.ⵠΔΔⲆⲆΔᐃ, ᐃⵠ.ⲆⲆⵠⵠⵠⲆⲆ], fa, ha, function () {
                    ΔⵠΔΔ.ΔⵠⲆⲆⲆ(2);
                }, 300, 300, _ | ba, ja);
            } else {
                this.buttons[qa] = Gf(266, 176, 0, [ᐃⵠ.ᐃᐃΔⵠᐃⲆⲆ, ᐃⵠ.ⵠΔΔⲆⲆΔᐃ, ᐃⵠ.ⲆⲆⵠⵠⵠⲆⲆ], fa, ha, function () {
                    ΔⵠΔΔ.ΔⵠⲆⲆⲆ(2);
                }, 204, 100, da | ba, ja);
            }
            this.buttons[qa].view = w;
            this.buttons[qa].hint = 0;
            var ra = t++;
            if (hc.innerWidth < 1300) {
                this.buttons[ra] = Gf(266, 176, 0, [ᐃⵠ.ᐃⵠᐃⲆᐃⲆΔ, ᐃⵠ.ⵠΔᐃᐃⲆⵠΔ, ᐃⵠ.ᐃᐃⵠⲆᐃᐃᐃ], fa, ha, function () {
                    ΔⵠΔΔ.ΔⵠⲆⲆⲆ(3);
                }, 300, 400, _ | ba, ja);
            } else {
                this.buttons[ra] = Gf(266, 176, 0, [ᐃⵠ.ᐃⵠᐃⲆᐃⲆΔ, ᐃⵠ.ⵠΔᐃᐃⲆⵠΔ, ᐃⵠ.ᐃᐃⵠⲆᐃᐃᐃ], fa, ha, function () {
                    ΔⵠΔΔ.ΔⵠⲆⲆⲆ(3);
                }, 204, 200, da | ba, ja);
            }
            this.buttons[ra].view = w;
            this.buttons[ra].hint = 0;
            var sa = t++;
            this.buttons[sa] = Gf(266, 176, 0, [ᐃⵠ.ΔΔⲆΔᐃⵠⵠ, ᐃⵠ.ᐃᐃᐃΔᐃΔᐃ, ᐃⵠ.ⲆᐃⲆΔΔⲆⵠ], fa, ha, function () {
                ΔⵠΔΔ.ΔⵠⲆⲆⲆ(7);
            }, hc.innerWidth < 1300 ? 450 : 204, hc.innerWidth < 1300 ? 400 : 300, (hc.innerWidth < 1300 ? _ : da) | ba, ja);
            this.buttons[sa].view = w;
            this.buttons[sa].hint = 0;
        }
        function ta(b, c) {
            if (c !== undefined) {
                Mx.ⵠᐃⵠᐃⵠΔⲆ = c;
                var d = Mx.ᐃΔᐃⵠΔΔᐃ[c];
                Mx.ᐃⵠΔⵠΔ = d.score;
                Mx.ᐃⵠⲆᐃⲆⲆⲆ = d.kill;
                Mx.ΔᐃⲆⲆⲆⵠⵠ = d.death;
                Mx.time = d.time;
                Mx.ⲆᐃᐃⲆᐃⲆΔ = d.bestScore;
                Mx.ⲆᐃⵠⲆᐃⵠⵠ = d.bestKill;
                Mx.ⲆᐃⲆⲆⵠⵠΔ = d.bestTime;
                Mx.ⲆᐃΔΔᐃΔᐃ = d.scoreTotal;
            }
            if (b === undefined) {
                b = Mx.ⲆᐃⲆᐃⲆΔᐃ;
            }
            Mx.ⲆᐃⲆᐃⲆΔᐃ = b;
            if (b >= 0) {
                document.getElementById("stats_box_time").innerHTML = Mx.ⲆᐃⲆⲆⵠⵠΔ[b];
                document.getElementById("stats_box_kill").innerHTML = Mx.ⲆᐃⵠⲆᐃⵠⵠ[b];
                document.getElementById("stats_box_score").innerHTML = Mx.ⲆᐃᐃⲆᐃⲆΔ[b];
            } else {
                var f = 0;
                for (var g = 0; g < Mx.ᐃⵠⲆᐃⲆⲆⲆ.length; g++) {
                    f += Mx.ᐃⵠⲆᐃⲆⲆⲆ[g];
                }
                var h = 0;
                for (g = 0; g < Mx.time.length; g++) {
                    h += Mx.time[g];
                }
                document.getElementById("stats_box_time").innerHTML = h;
                document.getElementById("stats_box_kill").innerHTML = f;
                document.getElementById("stats_box_score").innerHTML = Mx.ᐃⵠΔⵠΔ;
            }
        }
        this.buttons[t] = Gf(87, 78, 0, [ᐃⵠ.ⲆⲆᐃⵠⲆⵠⲆ, ᐃⵠ.ⵠⵠⲆᐃΔⲆⲆ, ᐃⵠ.ΔΔᐃⵠⲆⵠⲆ], fa, ha, function () {
            Mx.ⵠΔᐃⵠΔⵠⲆⵠⵠ();
            if (Mx.ΔᐃⵠΔΔⲆᐃ === 0) {
                V(O);
            } else {
                V(S);
            }
        }, 127, 110, da | ba, ia);
        this.buttons[t++].view = v;
        this.buttons[t] = Gf(87, 78, 0, [ᐃⵠ.ⵠΔⵠⲆⲆΔⵠ, ᐃⵠ.ᐃΔⲆΔⲆⵠⵠ, ᐃⵠ.ΔⲆⲆᐃⵠΔⵠ], fa, ha, function () {
            const a = hc.document.createElement("textarea");
            a.value = qy;
            hc.document.body.appendChild(a);
            a.select();
            hc.document.execCommand("copy");
            hc.document.body.removeChild(a);
        }, 182, 110, da | ba, ia);
        this.buttons[t++].view = v;
        this.buttons[t] = Gf(87, 78, 0, [ᐃⵠ.ⵠΔᐃⵠⵠᐃΔ, ᐃⵠ.ⲆΔⲆΔΔΔⵠ, ᐃⵠ.ΔⵠⲆⵠΔⵠⲆ], fa, ha, function () {
            (function () {
                if (my === ly && hc.FB && hc.FB.getUserID()) {
                    hc.FB.logout();
                }
                if (hy === my && zy !== undefined) {
                    hc.gapi.auth2.getAuthInstance().signOut();
                    zy = rh;
                }
                qy = undefined;
                py = undefined;
                my = Qa;
                Mx.ⲆⲆⵠΔᐃ = 0;
                Mx.ΔΔⲆᐃⲆ = 0;
                Mx.ᐃⵠΔⵠΔ = 0;
                Mx.ΔⲆⵠⵠⲆᐃᐃ();
                ΔⵠᐃᐃΔⲆⵠᐃⲆ();
            })();
        }, 255, 110, da | ba, ia);
        this.buttons[t++].view = v;
        this.buttons[t] = Gf(58, 64, 0, [ᐃⵠ.ⲆⵠΔⵠΔΔⲆ, ᐃⵠ.ΔⵠᐃᐃΔΔᐃ, ᐃⵠ.ⵠⲆᐃᐃᐃⲆⵠ], fa, ha, function () {
            V(w);
        }, 189, 118, da | ba, ia);
        this.buttons[t++].view = m;
        this.buttons[t] = Gf(497, 72, 0, [ᐃⵠ.ᐃⵠᐃΔΔᐃᐃ, ᐃⵠ.ᐃᐃᐃⵠΔⲆⲆ, ᐃⵠ.ⵠᐃΔⲆⵠΔⵠ], fa, ha, function () {
            (function () {
                if (Nf) {
                    py = ⵠᐃⵠ.ⲆⵠⵠⲆΔⲆᐃ(40);
                    my = fy;
                    qy = Nf.userId;
                    hc.ΔⵠᐃⲆⲆⵠⵠ();
                    return;
                }
                hc.gapi.auth2.getAuthInstance().signIn();
            })();
        }, -130, 390, da | ba, ia);
        this.buttons[t++].view = m;
        this.buttons[t] = Gf(497, 72, 0, [ᐃⵠ.ΔⵠⵠᐃⲆⲆⵠ, ᐃⵠ.ⲆΔⵠᐃΔⲆΔ, ᐃⵠ.ⲆΔΔΔⲆΔᐃ], fa, ha, function () {
            hc.FB.login(function (a) {
                if (a.authResponse) {
                    hc.FB.api("/me", function (a) {
                        my = ly;
                        py = hc.FB.getAuthResponse().accessToken;
                        Fy();
                        hc.ΔⵠᐃⲆⲆⵠⵠ();
                    });
                }
            });
        }, -130, 430, da | ba, ia);
        this.buttons[t++].view = m;
        ⵠⲆᐃᐃΔⲆᐃ = 20000;
        this.ᐃⲆⲆⲆΔΔᐃ = function (a) {
            var b = Mx.ⵠⲆⵠΔΔⵠᐃ(a);
            var c = ⵠⲆᐃᐃΔⲆᐃ * (b * b);
            return (a -= c) / ((b + 1) * (b + 1) * ⵠⲆᐃᐃΔⲆᐃ - c);
        };
        this.ⵠⲆⵠΔΔⵠᐃ = function (a) {
            return Math.floor(Math.sqrt(a / ⵠⲆᐃᐃΔⲆᐃ));
        };
        this.ᐃΔⲆΔⲆⲆⵠⵠⵠ = function (a) {
            Mx.ᐃⵠⲆΔⵠ = Mx.ⵠⲆⵠΔΔⵠᐃ(a);
            Mx.ⵠΔⵠΔᐃᐃᐃ = Mx.ᐃⲆⲆⲆΔΔᐃ(a);
            Mx.ⵠΔⵠΔΔᐃⲆ = 0;
            Mx.ᐃⵠΔⵠΔ = a;
        };
        this.ΔⲆⲆⲆⲆⲆⵠⲆΔ = function (a) {
            Mx.buttons[Mx.ⲆⵠΔΔⵠⲆⵠ].info.active = 0;
            Mx.buttons[Mx.ⲆᐃⵠᐃᐃΔΔ].info.active = 1;
            Mx.buttons[Mx.ⵠΔⵠᐃΔⲆΔ].info.active = 1;
            f();
            if (a.name.indexOf("Starver#") === -1) {
                document.getElementById("account_nickname_input").value = hc.decodeURIComponent(hc.escape(hc.atob(a.name)));
            } else {
                document.getElementById("account_nickname_input").value = a.name;
            }
            Mx.ΔΔⲆᐃⲆ = a.bread;
            var b = a.seasons;
            var c = b[b.length - 1];
            Mx.ᐃΔᐃⵠΔΔᐃ = b;
            k.ᐃΔⲆΔⲆⲆⵠⵠⵠ(c.score);
            Mx.ᐃⵠΔⵠΔ = c.score;
            Mx.ᐃⵠⲆᐃⲆⲆⲆ = c.kill;
            Mx.ΔᐃⲆⲆⲆⵠⵠ = c.death;
            Mx.time = c.time;
            Mx.ⲆᐃᐃⲆᐃⲆΔ = c.bestScore;
            Mx.ⲆᐃⵠⲆᐃⵠⵠ = c.bestKill;
            Mx.ⲆᐃⲆⲆⵠⵠΔ = c.bestTime;
            Mx.ⲆᐃΔΔᐃΔᐃ = c.scoreTotal;
            Mx.ΔᐃⵠΔΔⲆᐃ = a.firstName;
            document.getElementById("serverAddressInput").value = a.privateServerRegion + " : " + a.privateServer;
            if (Mx.ΔᐃⵠΔΔⲆᐃ === $q) {
                Mx.ΔᐃⵠΔΔⲆᐃ = 0;
            }
            Mx.ᐃⵠⲆΔⵠΔΔ = Date.now() + a.privateServerTime;
            if (Number(a.privateServerTime) > 0) {
                Mx.ᐃⵠⲆΔⵠΔΔ = Date.now() + Number(a.privateServerTime);
            }
            Mx.ⲆⲆⵠΔᐃ = Date.now() + a.kit;
            if (Number(a.kit) > 0) {
                Mx.ⲆⲆⵠΔᐃ = Date.now() + Number(a.kit);
            }
            var d = ΔΔΔⲆ.ⲆΔᐃⵠᐃ;
            for (var e = 0; a.skins.length > e; e++) {
                var g = a.skins[e];
                if (g > 0) {
                    for (var i = 0; d.length > i; i++) {
                        if (d[i].id === e) {
                            k.unlock.ᐃΔⲆⲆ[i] = 1;
                        }
                    }
                }
            }
            d = ΔΔΔⲆ.ᐃᐃⵠⵠⲆ;
            e = 0;
            for (; e < a.accessories.length; e++) {
                if ((g = a.accessories[e]) > 0) {
                    for (i = 0; d.length > i; i++) {
                        if (d[i].id === e) {
                            k.unlock.ⵠᐃⲆⵠΔ[i] = 1;
                        }
                    }
                }
            }
            d = ΔΔΔⲆ.ΔᐃΔⵠΔ;
            e = 0;
            for (; e < a.books.length; e++) {
                if ((g = a.books[e]) > 0) {
                    for (i = 0; i < d.length; i++) {
                        if (e === d[i].id) {
                            k.unlock.ⲆⵠⵠⲆⲆ[i] = 1;
                        }
                    }
                }
            }
            d = ΔΔΔⲆ.ⲆΔΔⲆ;
            e = 0;
            for (; e < a.bags.length; e++) {
                if ((g = a.bags[e]) > 0) {
                    for (i = 0; i < d.length; i++) {
                        if (e === d[i].id) {
                            k.unlock.ⵠᐃΔⲆⲆ[i] = 1;
                        }
                    }
                }
            }
            d = ΔΔΔⲆ.ⲆΔΔⲆΔ;
            e = 0;
            for (; a.crates.length > e; e++) {
                if ((g = a.crates[e]) > 0) {
                    for (i = 0; d.length > i; i++) {
                        if (d[i].id === e) {
                            k.unlock.ⵠⵠΔⲆⵠ[i] = 1;
                            k.unlock.ⲆᐃΔⵠⲆ[i] = 1;
                        }
                    }
                }
            }
        };
        this.ΔΔᐃΔΔᐃᐃⲆΔ = function () {
            hc.ΔⵠᐃⲆⲆⵠⵠ = function () {
                V(w);
                (function (a) {
                    var b = new XMLHttpRequest();
                    b.open("GET", cy + "login?token=" + py + "&type=" + my + (Nf ? "&userId=" + Nf.userId + "&userInfo=" + Nf.userInfo : ""));
                    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    b.onreadystatechange = function () {
                        if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
                            a(JSON.parse(b.responseText));
                        }
                    };
                    b.send();
                })(k.ΔⲆⲆⲆⲆⲆⵠⲆΔ);
            };
            if (sy === 1) {
                hc.ΔⵠᐃⲆⲆⵠⵠ();
            }
        };
        hc.ΔⵠᐃᐃΔⲆⵠᐃⲆ = function () {
            Mx.buttons[Mx.ⲆⵠΔΔⵠⲆⵠ].info.active = 1;
            Mx.buttons[Mx.ⲆᐃⵠᐃᐃΔΔ].info.active = 0;
            Mx.buttons[Mx.ⵠΔⵠᐃΔⲆΔ].info.active = 0;
            V(w);
        };
        this.ⲆⵠⵠⵠⲆ = function () {
            return Mx.buttons[Mx.ⲆᐃⵠᐃᐃΔΔ].info.active;
        };
        this.buttons[t] = Gf(461, 105, 0, [ᐃⵠ.ᐃΔΔⵠᐃⵠᐃ, ᐃⵠ.ⵠⵠⵠᐃΔΔⲆ, ᐃⵠ.ΔᐃⵠΔΔᐃᐃ], fa, ha, function () {
            if (k.ⲆⵠⵠⵠⲆ()) {
                V(u);
            } else {
                V(m);
            }
        }, -100, 80, da | ba, ia);
        this.buttons[t++].view = N;
        this.buttons[t] = Gf(157, 158, 0, [ᐃⵠ.ΔⵠΔᐃⲆᐃⵠ, ᐃⵠ.ⵠᐃⵠΔⵠᐃⲆ, ᐃⵠ.ⵠⵠⲆᐃⲆⲆⲆ], fa, ha, function () {
            hc.open("https://starveiopro.wikia.com/wiki/", "_blank");
        }, -35, 125, da | ba, ia);
        this.buttons[t++].view = y;
        this.buttons[t] = Gf(66, 73, 0, [ᐃⵠ.ΔΔⲆΔΔⲆⵠ, ᐃⵠ.ᐃⵠⲆⵠΔⵠⲆ, ᐃⵠ.ⲆⵠᐃⲆᐃΔⲆ], fa, ha, undefined, -68, 340, da | ba, ia);
        this.buttons[t++].view = y;
        this.buttons[t] = Gf(66, 73, 0, [ᐃⵠ.ⲆΔⵠΔΔΔⲆ, ᐃⵠ.ⵠᐃⵠⲆⵠᐃⲆ, ᐃⵠ.ᐃⵠⲆⲆΔⵠⵠ], fa, ha, undefined, -30, 340, da | ba, ia);
        this.buttons[t++].view = y;
        this.ⲆΔⵠΔΔⵠᐃⵠᐃ = t;
        this.buttons[t] = Gf(97, 66, 0, [ᐃⵠ.ⲆΔΔΔᐃⵠᐃ, ᐃⵠ.ΔᐃⵠⲆⵠⲆΔ, ᐃⵠ.ⵠⵠᐃⵠⵠⲆⲆ], fa, ha, function () {
            Gy(kr, undefined, Mx.ΔΔΔᐃⵠᐃⲆ);
        }, -14, 151, da | ba, ia);
        this.buttons[t++].view = P;
        this.ᐃⲆⵠⲆᐃⵠᐃ = t;
        this.buttons[t] = Gf(135, 66, 0, [ᐃⵠ.ⲆΔⲆΔⲆⲆⲆ, ᐃⵠ.ᐃⲆΔΔΔⵠⲆ, ᐃⵠ.ΔΔᐃⵠΔⲆΔ], fa, ha, function () {
            Gy(undefined, gj, Mx.ᐃⲆⵠⲆᐃⵠᐃ);
        }, 37.5, 151, da | ba, ia);
        this.buttons[t++].view = P;
        this.ΔᐃⲆⵠΔᐃᐃ = t;
        this.buttons[t] = Gf(160, 66, 0, [ᐃⵠ.ⲆᐃᐃⵠᐃΔⵠ, ᐃⵠ.ᐃⲆᐃⲆⲆⲆΔ, ᐃⵠ.ᐃᐃᐃⵠⵠⵠⲆ], fa, ha, function () {
            Gy(undefined, undefined, Mx.ΔᐃⲆⵠΔᐃᐃ);
        }, 107.5, 151, da | ba, ia);
        this.buttons[t++].view = P;
        this.ΔΔΔᐃⵠᐃⲆ = t;
        this.buttons[t] = Gf(207, 66, 0, [ᐃⵠ.ᐃᐃⵠΔΔΔΔ, ᐃⵠ.ΔΔⵠΔΔⵠᐃ, ᐃⵠ.ΔΔΔⵠⵠⵠΔ], fa, ha, function () {
            Gy(Xh, undefined, Mx.ΔΔΔᐃⵠᐃⲆ);
        }, 190.5, 151, da | ba, ia);
        this.buttons[t++].view = P;
        this.ΔⵠⵠΔⲆⵠᐃ = t;
        this.buttons[t] = Gf(144, 66, 0, [ᐃⵠ.ᐃⵠᐃΔⵠⲆᐃ, ᐃⵠ.ⵠⲆΔⲆᐃⵠᐃ, ᐃⵠ.ⲆⵠᐃⵠᐃᐃΔ], fa, ha, function () {
            Gy(Mx.ΔⵠⵠΔⲆⵠᐃ);
        }, 103.5, 110, da | ba, ia);
        this.buttons[t++].view = P;
        this.ⵠᐃΔᐃⵠᐃΔ = t;
        this.buttons[t] = Gf(124, 66, 0, [ᐃⵠ.ⲆⵠⲆⵠΔΔᐃ, ᐃⵠ.ⲆᐃᐃⵠⲆⵠⵠ, ᐃⵠ.ᐃΔⲆⵠⲆⵠᐃ], fa, ha, function () {
            Gy(Mx.ⵠᐃΔᐃⵠᐃΔ);
        }, 177.5, 110, da | ba, ia);
        this.buttons[t++].view = P;
        this.ⲆΔᐃᐃⲆᐃΔ = t;
        this.buttons[t] = Gf(104, 66, 0, [ᐃⵠ.ⲆⲆΔᐃᐃⵠΔ, ᐃⵠ.ΔⵠⲆⵠⲆΔΔ, ᐃⵠ.ᐃΔΔᐃⲆΔᐃ], fa, ha, function () {
            Gy(Mx.ⲆΔᐃᐃⲆᐃΔ);
        }, 242, 110, da | ba, ia);
        this.buttons[t++].view = P;
        this.ⵠⵠΔΔᐃⵠⲆ = t;
        this.buttons[t] = Gf(46, 51, 0, [ᐃⵠ.ᐃᐃΔⲆᐃⲆΔ, ᐃⵠ.ᐃΔⲆᐃΔⵠᐃ, ᐃⵠ.ⵠⵠⲆⲆΔᐃⲆ], fa, ha, function () {
            Gy(undefined, undefined, undefined, Mx.ⵠⵠΔΔᐃⵠⲆ);
        }, -185, 528, da | ba, ia);
        this.buttons[t++].view = P;
        this.ⲆᐃⲆΔᐃᐃⲆ = t;
        this.buttons[t] = Gf(46, 51, 0, [ᐃⵠ.ⵠⲆⲆΔⲆᐃΔ, ᐃⵠ.ᐃⲆⲆⵠⵠᐃᐃ, ᐃⵠ.ⵠΔΔᐃⲆᐃⵠ], fa, ha, function () {
            Gy(lh, sj, mo, Mx.ⲆᐃⲆΔᐃᐃⲆ);
        }, -149, 528, da | ba, ia);
        this.buttons[t++].view = P;
        this.ᐃΔⲆᐃᐃᐃⲆ = t;
        this.buttons[t] = Gf(46, 51, 0, [ᐃⵠ.ΔⵠⲆⲆΔΔⲆ, ᐃⵠ.ⲆⵠᐃᐃⲆᐃΔ, ᐃⵠ.ᐃⲆᐃⵠⲆⵠⲆ], fa, ha, function () {
            Gy(undefined, undefined, undefined, Mx.ᐃΔⲆᐃᐃᐃⲆ);
        }, -113, 528, da | ba, ia);
        this.buttons[t++].view = P;
        this.ᐃΔⵠⵠᐃⵠᐃ = t;
        this.buttons[t] = Gf(46, 51, 0, [ᐃⵠ.ⵠᐃⵠⵠⵠⵠΔ, ᐃⵠ.ΔΔⵠΔⵠⵠᐃ, ᐃⵠ.ⲆΔᐃⵠⲆⲆᐃ], fa, ha, function () {
            Gy(kr, undefined, undefined, Mx.ᐃΔⵠⵠᐃⵠᐃ);
        }, -77, 528, da | ba, ia);
        this.buttons[t++].view = P;
        this.ⵠᐃΔᐃΔᐃᐃ = t;
        this.buttons[t] = Gf(46, 51, 0, [ᐃⵠ.ᐃᐃΔⲆᐃⲆᐃ, ᐃⵠ.ΔΔⵠⲆⲆⲆⵠ, ᐃⵠ.ᐃⵠΔᐃⲆⲆⲆ], fa, ha, function () {
            Gy(kr, Qk, undefined, Mx.ⵠᐃΔᐃΔᐃᐃ);
        }, -41, 528, da | ba, ia);
        this.buttons[t++].view = P;
        this.ⵠⵠΔⲆⲆⲆⵠ = t;
        this.buttons[t] = Gf(46, 51, 0, [ᐃⵠ.ⵠⲆᐃⲆⲆⵠᐃ, ᐃⵠ.ⲆᐃⵠⲆⲆⵠᐃ, ᐃⵠ.ΔⵠⵠⵠⲆⵠᐃ], fa, ha, function () {
            Gy(lh, sj, Qk, Mx.ⵠⵠΔⲆⲆⲆⵠ);
        }, -5, 528, da | ba, ia);
        this.buttons[t++].view = P;
        this.buttons[t] = Gf(232, 352, 0, [ᐃⵠ.ⵠᐃΔᐃⲆᐃᐃ, ᐃⵠ.ⲆᐃⲆᐃⵠᐃᐃ, ᐃⵠ.ΔᐃΔⵠⲆΔⲆ], fa, ha, function () {
            Ky(300);
        }, -330, 135, da | ba, ia);
        this.buttons[t++].view = u;
        this.buttons[t] = Gf(232, 352, 0, [ᐃⵠ.ⵠⲆΔᐃΔⲆΔ, ᐃⵠ.ΔⲆᐃᐃΔᐃⵠ, ᐃⵠ.ᐃΔΔⲆⵠⲆᐃ], fa, ha, function () {
            Ky(600);
        }, -195, 135, da | ba, ia);
        this.buttons[t++].view = u;
        this.buttons[t] = Gf(243, 374, 0, [ᐃⵠ.ᐃⲆᐃΔᐃΔⵠ, ᐃⵠ.ⲆⲆⵠᐃΔΔΔ, ᐃⵠ.ⵠᐃⵠᐃᐃⵠⵠ], fa, ha, function () {
            Ky(2600);
        }, -60, 130, da | ba, ia);
        this.buttons[t++].view = u;
        this.buttons[t] = Gf(232, 352, 0, [ᐃⵠ.ΔⲆΔⵠᐃᐃⵠ, ᐃⵠ.ⵠⲆΔᐃⵠⵠⵠ, ᐃⵠ.ΔⲆᐃΔⲆᐃΔ], fa, ha, function () {
            Ky(7000);
        }, 78, 135, da | ba, ia);
        this.buttons[t++].view = u;
        this.buttons[t] = Gf(243, 374, 0, [ᐃⵠ.ⲆΔⲆⲆᐃⲆⲆ, ᐃⵠ.ΔΔᐃⵠⵠᐃⵠ, ᐃⵠ.ⲆⵠⲆᐃᐃⵠⵠ], fa, ha, function () {
            Ky(20000);
        }, 213, 130, da | ba, ia);
        this.buttons[t++].view = u;
        this.buttons[t] = Gf(58, 64, 0, [ᐃⵠ.ⲆⵠΔⵠΔΔⲆ, ᐃⵠ.ΔⵠᐃᐃΔΔᐃ, ᐃⵠ.ⵠⲆᐃᐃᐃⲆⵠ], fa, ha, function () {
            V(N);
        }, 300, 88, da | ba, ia);
        this.buttons[t++].view = u;
        this.buttons[t] = Gf(323, 112, 0, [ᐃⵠ.ⲆᐃΔΔⲆⲆⲆ, ᐃⵠ.ⵠΔⵠᐃⲆⵠⲆ, ᐃⵠ.ᐃᐃΔⲆΔⲆⵠ], fa, ha, function () {
            V(Q);
            Fa.ⲆⵠⵠᐃⵠΔᐃ();
        }, -315, 185, da | ba, ia);
        this.buttons[t++].view = M;
        this.buttons[t] = Gf(323, 112, 0, [ᐃⵠ.ⵠⲆᐃΔΔⲆΔ, ᐃⵠ.ΔΔᐃⵠⵠΔⵠ, ᐃⵠ.ᐃⵠⵠⵠᐃⵠᐃ], fa, ha, function () {
            V(G);
            Ka.ⲆⵠⵠᐃⵠΔᐃ();
        }, -315, 321, da | ba, ia);
        this.buttons[t++].view = M;
        this.buttons[t] = Gf(323, 112, 0, [ᐃⵠ.ⲆⵠᐃΔΔⲆⵠ, ᐃⵠ.ᐃᐃᐃΔᐃΔⲆ, ᐃⵠ.ᐃΔⲆᐃⲆΔΔ], fa, ha, function () {
            V(F);
            Ga.ⲆⵠⵠᐃⵠΔᐃ();
        }, 153, 185, da | ba, ia);
        this.buttons[t++].view = M;
        this.buttons[t] = Gf(323, 112, 0, [ᐃⵠ.ᐃᐃⲆⵠᐃΔᐃ, ᐃⵠ.ⲆᐃⲆⲆΔΔⵠ, ᐃⵠ.ⲆᐃΔⲆⵠᐃⵠ], fa, ha, function () {
            V(j);
            Ha.ⲆⵠⵠᐃⵠΔᐃ();
        }, 153, 321, da | ba, ia);
        this.buttons[t++].view = M;
        this.buttons[t] = Gf(323, 112, 0, [ᐃⵠ.ΔᐃⲆᐃⲆΔⲆ, ᐃⵠ.ᐃⵠΔΔⲆΔⵠ, ᐃⵠ.ᐃⲆⵠΔΔⵠⲆ], fa, ha, function () {
            V(R);
            Ia.ⲆⵠⵠᐃⵠΔᐃ();
        }, 153, 463, da | ba, ia);
        this.buttons[t++].view = M;
        this.buttons[t] = Gf(323, 112, 0, [ᐃⵠ.ⲆⲆⲆⲆⲆᐃⲆ, ᐃⵠ.ⵠΔⲆⲆⵠⵠᐃ, ᐃⵠ.ⵠᐃΔᐃᐃΔΔ], fa, ha, function () {
            V(L);
            Ja.ⲆⵠⵠᐃⵠΔᐃ();
        }, -315, 463, da | ba, ia);
        this.buttons[t++].view = M;
        this.buttons[t] = Gf(327, 117, 0, [ᐃⵠ.ⲆᐃⵠⵠᐃⲆⵠ, ᐃⵠ.ᐃⲆⵠᐃⲆΔⵠ, ᐃⵠ.ᐃΔⵠⲆΔⲆⲆ], fa, ha, function () {
            V(U);
        }, 155, 70, _, ja);
        this.buttons[t++].view = w;
        this.buttons[t] = Gf(130, 129, 0, [ᐃⵠ.ΔⵠⵠᐃⲆΔⵠ, ᐃⵠ.ⲆᐃⲆΔᐃᐃⵠ, ᐃⵠ.ⵠⵠⵠⵠⵠᐃⲆ], fa, ha, function () {
            K(x, ia, "none");
            V(N);
        }, 10, 40, da | ba, ia);
        this.buttons[t++].view = x;
        this.buttons[t] = Gf(130, 129, 0, [ᐃⵠ.ΔⵠⵠᐃⲆΔⵠ, ᐃⵠ.ⲆᐃⲆΔᐃᐃⵠ, ᐃⵠ.ⵠⵠⵠⵠⵠᐃⲆ], fa, ha, function () {
            K(z, ia, "none");
            V(N);
        }, 10, 40, da | ba, ia);
        this.buttons[t++].view = z;
        this.buttons[t] = Gf(115, 73, 0, [ᐃⵠ.ᐃᐃᐃᐃⲆ, ᐃⵠ.ᐃΔⲆⵠᐃ, ᐃⵠ.ΔⲆⵠⵠΔ], fa, ha, function () {
            V(N);
        }, 200, 140, da | ba, ia);
        this.buttons[t++].view = q;
        this.buttons[t] = Gf(524, 110, 0, [ᐃⵠ.ΔⲆΔΔⲆⲆⲆ, ᐃⵠ.ᐃⲆΔΔⵠⵠⵠ, ᐃⵠ.ᐃⲆΔΔᐃᐃⲆ], fa, ha, function () {
            jy("Atlanta");
        }, -265, 300, da | ba, ia);
        this.buttons[t++].view = q;
        this.buttons[t] = Gf(523, 110, 0, [ᐃⵠ.ΔΔⵠᐃⲆⵠⵠ, ᐃⵠ.ᐃⵠᐃⲆⲆΔᐃ, ᐃⵠ.ⲆⲆΔᐃⲆⵠᐃ], fa, ha, function () {
            jy("LosAngeles");
        }, 5, 300, da | ba, ia);
        this.buttons[t++].view = q;
        this.buttons[t] = Gf(344, 110, 0, [ᐃⵠ.ΔⵠⲆΔΔⲆⵠ, ᐃⵠ.ⵠΔΔⵠⲆⵠⲆ, ᐃⵠ.ΔⵠᐃΔⵠΔΔ], fa, ha, function () {
            jy("Frankfurt");
        }, -265, 365, da | ba, ia);
        this.buttons[t++].view = q;
        this.buttons[t] = Gf(344, 110, 0, [ᐃⵠ.ΔΔⵠΔⲆΔᐃ, ᐃⵠ.ᐃΔⲆΔΔᐃⲆ, ᐃⵠ.ⵠᐃⵠΔⲆᐃⵠ], fa, ha, function () {
            jy("Osaka");
        }, 100, 365, da | ba, ia);
        this.buttons[t++].view = q;
        this.buttons[t] = Gf(344, 110, 0, [ᐃⵠ.ⵠΔᐃⵠᐃⲆᐃ, ᐃⵠ.ᐃΔⵠᐃᐃⲆᐃ, ᐃⵠ.ΔⲆΔⲆΔⲆᐃ], fa, ha, function () {
            jy("Sydney");
        }, -86, 365, da | ba, ia);
        this.buttons[t++].view = q;
        this.buttons[t] = Gf(115, 73, 0, [ᐃⵠ.ᐃᐃᐃᐃⲆ, ᐃⵠ.ᐃΔⲆⵠᐃ, ᐃⵠ.ΔⲆⵠⵠΔ], fa, ha, function () {
            V(q);
        }, 224, 140, da | ba, ia);
        this.buttons[t++].view = H;
        this.buttons[t] = Gf(230, 352, 0, [ᐃⵠ.ⵠⲆⲆᐃΔᐃⵠ, ᐃⵠ.ⵠᐃᐃᐃⵠΔᐃ, ᐃⵠ.ΔⵠⵠⵠΔⲆᐃ], fa, ha, function () {
            Ky(350);
        }, -280, 240, da | ba, ia);
        this.buttons[t++].view = H;
        this.buttons[t] = Gf(230, 352, 0, [ᐃⵠ.ΔΔᐃΔᐃⵠⲆ, ᐃⵠ.ΔᐃΔΔⲆᐃΔ, ᐃⵠ.ᐃᐃⵠᐃΔᐃⲆ], fa, ha, function () {
            Ky(700);
        }, -130, 240, da | ba, ia);
        this.buttons[t++].view = H;
        this.buttons[t] = Gf(230, 352, 0, [ᐃⵠ.ⲆᐃⲆΔⵠⲆΔ, ᐃⵠ.ᐃᐃΔⵠᐃᐃⵠ, ᐃⵠ.ΔᐃᐃⵠⲆⲆᐃ], fa, ha, function () {
            Ky(1400);
        }, 20, 240, da | ba, ia);
        this.buttons[t++].view = H;
        this.buttons[t] = Gf(230, 352, 0, [ᐃⵠ.Ⲇⵠᐃⵠⵠᐃᐃ, ᐃⵠ.ⲆΔᐃΔᐃᐃⲆ, ᐃⵠ.ⲆⲆⵠΔⲆⲆᐃ], fa, ha, function () {
            Ky(3000);
        }, 170, 240, da | ba, ia);
        this.buttons[t++].view = H;
        this.buttons[t] = Gf(105, 119, 0, [ᐃⵠ.ᐃΔΔΔⲆΔΔ, ᐃⵠ.ⲆᐃⲆⵠΔⵠΔ, ᐃⵠ.ᐃΔΔᐃᐃᐃᐃ], fa, ha, function () {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            const b = hc.document.createElement("textarea");
            b.value = Yf + "?server=" + a[1] + "&region=" + a[0];
            hc.document.body.appendChild(b);
            b.select();
            hc.document.execCommand("copy");
            hc.document.body.removeChild(b);
        }, 170, 310, da | ba, ia);
        this.buttons[t++].view = T;
        this.buttons[t] = Gf(105, 119, 0, [ᐃⵠ.ⵠΔⲆΔⲆⲆΔ, ᐃⵠ.ⲆⵠΔⲆΔΔⵠ, ᐃⵠ.ΔΔᐃᐃᐃΔⵠ], fa, ha, function () {
            (function () {
                var a = new XMLHttpRequest();
                a.open("GET", cy + "rebootServer?token=" + py + "&userid=" + qy);
                a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                a.onreadystatechange = function () {
                    if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
                        const a = document.getElementById("serverAddressInput").value.split(" : ");
                        location.href = Yf + "?server=" + a[1] + "&region=" + a[0];
                    }
                };
                a.send();
            })();
        }, 235, 310, da | ba, ia);
        this.buttons[t++].view = T;
        this.buttons[t] = Gf(204, 115, 0, [ᐃⵠ.ⲆⲆᐃᐃⲆⵠⵠ, ᐃⵠ.ⲆⲆΔⲆⵠⲆΔ, ᐃⵠ.ᐃⲆΔΔⵠᐃⲆ], fa, ha, function () {
            hc.open("./commands.html", "_blank");
        }, -265, 490, da | ba, ia);
        this.buttons[t++].view = T;
        this.buttons[t] = Gf(145, 69, 0, [ᐃⵠ.ᐃᐃΔⵠΔΔⲆ, ᐃⵠ.ᐃᐃⲆᐃΔΔᐃ, ᐃⵠ.ΔΔᐃΔΔⵠⵠ], fa, ha, function () {
            V(A);
        }, -210, 170, da | ba, ia);
        this.buttons[t++].view = N;
        this.buttons[t] = Gf(145, 69, 0, [ᐃⵠ.ᐃⲆⲆⵠᐃⵠⲆ, ᐃⵠ.ᐃⵠᐃⵠⵠⲆⲆ, ᐃⵠ.ⲆⵠⲆⵠᐃⲆᐃ], fa, ha, function () {
            V(E);
        }, 70, 170, da | ba, ia);
        this.buttons[t++].view = N;
        this.buttons[t] = Gf(145, 69, 0, [ᐃⵠ.ⵠΔᐃΔⵠᐃᐃ, ᐃⵠ.ⲆᐃᐃⵠᐃⲆᐃ, ᐃⵠ.ᐃΔⵠᐃᐃΔΔ], fa, ha, function () {
            V(B);
        }, 70, 204, da | ba, ia);
        this.buttons[t++].view = N;
        this.buttons[t] = Gf(145, 69, 0, [ᐃⵠ.ⵠⵠⵠⲆⲆⵠⵠ, ᐃⵠ.ᐃΔᐃⲆⲆᐃᐃ, ᐃⵠ.ᐃᐃⵠⵠᐃᐃᐃ], fa, ha, function () {
            V(I);
        }, -210, 204, da | ba, ia);
        this.buttons[t++].view = N;
        this.buttons[t] = Gf(145, 69, 0, [ᐃⵠ.ⵠⵠⵠⲆⲆⵠⵠ, ᐃⵠ.ᐃΔᐃⲆⲆᐃᐃ, ᐃⵠ.ᐃᐃⵠⵠᐃᐃᐃ], fa, ha, function () {
            V(J);
        }, 70, 238, da | ba, ia);
        this.buttons[t++].view = N;
        this.buttons[t] = Gf(145, 69, 0, [ᐃⵠ.ⵠⵠⵠⲆⲆⵠⵠ, ᐃⵠ.ᐃΔᐃⲆⲆᐃᐃ, ᐃⵠ.ᐃᐃⵠⵠᐃᐃᐃ], fa, ha, function () {
            if (k.ⲆⵠⵠⵠⲆ()) {
                Oy(0, 300);
            } else {
                V(m);
            }
        }, 307, 205, da | ba, ia);
        this.buttons[t++].view = N;
        this.buttons[t] = Gf(145, 69, 0, [ᐃⵠ.ⵠⲆᐃⵠᐃΔᐃ, ᐃⵠ.ᐃⵠⲆᐃⲆⵠⵠ, ᐃⵠ.ΔⲆⵠᐃⵠΔΔ], fa, ha, function () {
            V(D);
        }, -210, 238, da | ba, ia);
        this.buttons[t++].view = N;
        this.buttons[t] = Gf(145, 69, 0, [ᐃⵠ.ⵠⲆᐃⵠᐃΔᐃ, ᐃⵠ.ᐃⵠⲆᐃⲆⵠⵠ, ᐃⵠ.ΔⲆⵠᐃⵠΔΔ], fa, ha, function () {
            if (k.ⲆⵠⵠⵠⲆ()) {
                Oy(1, 600);
            } else {
                V(m);
            }
        }, 307, 239, da | ba, ia);
        this.buttons[t++].view = N;
        this.buttons[t] = Gf(192, 101, 0, [ᐃⵠ.ⲆΔⵠⵠᐃΔᐃ, ᐃⵠ.ⲆΔⲆᐃᐃΔⵠ, ᐃⵠ.ᐃⵠᐃᐃΔⵠᐃ], fa, ha, function () {
            Ny();
        }, -100, 250, da | ba, ia);
        this.buttons[t++].view = O;
        this.buttons[t] = Gf(192, 104, 0, [ᐃⵠ.ᐃᐃᐃⵠᐃΔⲆ, ᐃⵠ.ⵠⵠᐃᐃΔΔⲆ, ᐃⵠ.ⲆⵠⵠΔᐃᐃⵠ], fa, ha, function () {
            Ny();
        }, -100, 239, da | ba, ia);
        this.buttons[t++].view = S;
        this.buttons[t] = Gf(192, 101, 0, [ᐃⵠ.ⲆΔΔᐃᐃⲆⵠ, ᐃⵠ.ᐃΔⲆᐃΔᐃⲆ, ᐃⵠ.ᐃⲆᐃΔⲆⵠⲆ], fa, ha, function () {
            V(v);
        }, 10, 250, da | ba, ia);
        this.buttons[t++].view = O;
        this.buttons[t] = Gf(192, 104, 0, [ᐃⵠ.ⵠⵠΔᐃⵠⲆⲆ, ᐃⵠ.ⲆᐃᐃⲆΔⲆᐃ, ᐃⵠ.ⲆⲆⲆᐃᐃⲆⵠ], fa, ha, function () {
            V(v);
        }, 10, 239, da | ba, ia);
        this.buttons[t++].view = S;
        ⲆⲆⵠΔⲆΔᐃ = [];
        ⲆⲆⵠΔⲆΔᐃ[ΔΔⲆ.ᐃⵠᐃⵠⲆ] = [ᐃⵠ.ⵠΔΔᐃᐃΔⵠ, ᐃⵠ.ΔⵠⲆᐃⲆΔΔ, ᐃⵠ.ⲆᐃⵠⵠⵠⵠΔ];
        ⲆⲆⵠΔⲆΔᐃ[ΔΔⲆ.ΔΔⲆΔ] = [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ];
        ⲆⲆⵠΔⲆΔᐃ[ΔΔⲆ.ΔᐃΔⵠ] = [ᐃⵠ.ⲆⵠᐃΔⵠΔΔ, ᐃⵠ.ⵠⵠⲆΔⵠᐃΔ, ᐃⵠ.ᐃⲆᐃᐃᐃⲆⵠ];
        ⲆⲆⵠΔⲆΔᐃ[ΔΔⲆ.ᐃⲆΔᐃ] = [ᐃⵠ.ᐃᐃⲆᐃᐃΔⲆ, ᐃⵠ.ⵠᐃᐃΔᐃᐃᐃ, ᐃⵠ.ΔⲆⵠᐃⲆⵠᐃ];
        ⲆⲆⵠΔⲆΔᐃ[ΔΔⲆ.ⵠⵠⲆⵠ] = [ᐃⵠ.ⵠⵠⵠⲆΔᐃⵠ, ᐃⵠ.ⲆΔᐃΔᐃⲆᐃ, ᐃⵠ.ΔᐃⲆⵠᐃᐃⵠ];
        ⲆⲆⵠΔⲆΔᐃ[ΔΔⲆ.ᐃΔᐃⵠ] = [ᐃⵠ.ΔⵠⲆᐃΔΔΔ, ᐃⵠ.ⲆᐃⵠᐃⲆⵠⵠ, ᐃⵠ.ⵠᐃⲆⵠⲆΔⵠ];
        ⲆⲆⵠΔⲆΔᐃ[ΔΔⲆ.Δⵠⵠᐃ] = [ᐃⵠ.ΔᐃⲆᐃⵠⲆΔ, ᐃⵠ.ⲆⲆΔᐃⵠⵠⲆ, ᐃⵠ.ᐃΔΔⵠⲆᐃᐃ];
        ⲆⲆⵠΔⲆΔᐃ[ΔΔⲆ.ⲆⲆΔᐃᐃ] = [ᐃⵠ.ⲆⵠⲆⵠⵠᐃΔ, ᐃⵠ.ⲆⵠΔᐃᐃΔⲆ, ᐃⵠ.ᐃᐃᐃᐃⲆᐃⵠ];
        ⲆⲆⵠΔⲆΔᐃ[ΔΔⲆ.ᐃⵠΔᐃⵠᐃⲆ] = [ᐃⵠ.ⲆΔΔⲆΔⲆΔ, ᐃⵠ.ᐃΔᐃΔⲆΔᐃ, ᐃⵠ.ᐃΔⵠΔᐃΔΔ];
        ⲆⲆΔᐃΔᐃⲆ = t;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, ih, -29, 205, da | ba, ia);
        this.buttons[t++].view = Q;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, ug, -29, 300, da | ba, ia);
        this.buttons[t++].view = Q;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, eq, -29, 395, da | ba, ia);
        this.buttons[t++].view = Q;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, 65, 205, da | ba, ia);
        this.buttons[t++].view = Q;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, fk, 65, 300, da | ba, ia);
        this.buttons[t++].view = Q;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, Xh, 65, 395, da | ba, ia);
        this.buttons[t++].view = Q;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, 159, 205, da | ba, ia);
        this.buttons[t++].view = Q;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, fk, 159, 300, da | ba, ia);
        this.buttons[t++].view = Q;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, ih, 159, 395, da | ba, ia);
        this.buttons[t++].view = Q;
        this.buttons[t] = Gf(39, 122, 0, [ᐃⵠ.ⲆⲆᐃⵠⵠᐃⵠ, ᐃⵠ.ⵠΔⵠⵠΔⵠⲆ, ᐃⵠ.ᐃᐃᐃⲆⵠᐃᐃ], fa, ha, undefined, -61, 315, da | ba, ia);
        this.buttons[t++].view = Q;
        this.buttons[t] = Gf(39, 122, 0, [ᐃⵠ.ΔⵠⲆⲆΔΔⵠ, ᐃⵠ.ⲆⵠⲆᐃᐃΔᐃ, ᐃⵠ.ΔⵠᐃⵠΔΔⵠ], fa, ha, mo, 260, 315, da | ba, ia);
        this.buttons[t++].view = Q;
        this.buttons[t] = Gf(115, 73, 0, [ᐃⵠ.ᐃᐃᐃᐃⲆ, ᐃⵠ.ᐃΔⲆⵠᐃ, ᐃⵠ.ΔⲆⵠⵠΔ], fa, ha, function () {
            V(M);
        }, -320, 470, da | ba, ia);
        this.buttons[t++].view = Q;
        ΔᐃⲆⲆⲆⵠⲆΔⵠ = t;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, -29, 205, da | ba, ia);
        this.buttons[t++].view = G;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, -29, 300, da | ba, ia);
        this.buttons[t++].view = G;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, -29, 395, da | ba, ia);
        this.buttons[t++].view = G;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, mo, 65, 205, da | ba, ia);
        this.buttons[t++].view = G;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, 65, 300, da | ba, ia);
        this.buttons[t++].view = G;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, rh, 65, 395, da | ba, ia);
        this.buttons[t++].view = G;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, 159, 205, da | ba, ia);
        this.buttons[t++].view = G;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, 159, 300, da | ba, ia);
        this.buttons[t++].view = G;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, 159, 395, da | ba, ia);
        this.buttons[t++].view = G;
        this.buttons[t] = Gf(39, 122, 0, [ᐃⵠ.ⲆⲆᐃⵠⵠᐃⵠ, ᐃⵠ.ⵠΔⵠⵠΔⵠⲆ, ᐃⵠ.ᐃᐃᐃⲆⵠᐃᐃ], fa, ha, gj, -61, 315, da | ba, ia);
        this.buttons[t++].view = G;
        this.buttons[t] = Gf(39, 122, 0, [ᐃⵠ.ΔⵠⲆⲆΔΔⵠ, ᐃⵠ.ⲆⵠⲆᐃᐃΔᐃ, ᐃⵠ.ΔⵠᐃⵠΔΔⵠ], fa, ha, lh, 260, 315, da | ba, ia);
        this.buttons[t++].view = G;
        this.buttons[t] = Gf(115, 73, 0, [ᐃⵠ.ᐃᐃᐃᐃⲆ, ᐃⵠ.ᐃΔⲆⵠᐃ, ᐃⵠ.ΔⲆⵠⵠΔ], fa, ha, function () {
            V(M);
        }, -320, 470, da | ba, ia);
        this.buttons[t++].view = G;
        ⵠⲆⵠⵠⲆⵠΔⵠⲆ = t;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, -29, 205, da | ba, ia);
        this.buttons[t++].view = L;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, -29, 300, da | ba, ia);
        this.buttons[t++].view = L;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, -29, 395, da | ba, ia);
        this.buttons[t++].view = L;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, sj, 65, 205, da | ba, ia);
        this.buttons[t++].view = L;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, 65, 300, da | ba, ia);
        this.buttons[t++].view = L;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, 65, 395, da | ba, ia);
        this.buttons[t++].view = L;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, er, 159, 205, da | ba, ia);
        this.buttons[t++].view = L;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, 159, 300, da | ba, ia);
        this.buttons[t++].view = L;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, 159, 395, da | ba, ia);
        this.buttons[t++].view = L;
        this.buttons[t] = Gf(39, 122, 0, [ᐃⵠ.ⲆⲆᐃⵠⵠᐃⵠ, ᐃⵠ.ⵠΔⵠⵠΔⵠⲆ, ᐃⵠ.ᐃᐃᐃⲆⵠᐃᐃ], fa, ha, undefined, -61, 315, da | ba, ia);
        this.buttons[t++].view = L;
        this.buttons[t] = Gf(39, 122, 0, [ᐃⵠ.ΔⵠⲆⲆΔΔⵠ, ᐃⵠ.ⲆⵠⲆᐃᐃΔᐃ, ᐃⵠ.ΔⵠᐃⵠΔΔⵠ], fa, ha, undefined, 260, 315, da | ba, ia);
        this.buttons[t++].view = L;
        this.buttons[t] = Gf(115, 73, 0, [ᐃⵠ.ᐃᐃᐃᐃⲆ, ᐃⵠ.ᐃΔⲆⵠᐃ, ᐃⵠ.ΔⲆⵠⵠΔ], fa, ha, function () {
            V(M);
        }, -320, 470, da | ba, ia);
        this.buttons[t++].view = L;
        ⲆⵠᐃᐃⲆⵠᐃᐃᐃ = t;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, sj, -29, 205, da | ba, ia);
        this.buttons[t++].view = F;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, rh, -29, 300, da | ba, ia);
        this.buttons[t++].view = F;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, er, -29, 395, da | ba, ia);
        this.buttons[t++].view = F;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, eq, 65, 205, da | ba, ia);
        this.buttons[t++].view = F;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, eq, 65, 300, da | ba, ia);
        this.buttons[t++].view = F;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, 65, 395, da | ba, ia);
        this.buttons[t++].view = F;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, mo, 159, 205, da | ba, ia);
        this.buttons[t++].view = F;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, 159, 300, da | ba, ia);
        this.buttons[t++].view = F;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, jl, 159, 395, da | ba, ia);
        this.buttons[t++].view = F;
        this.buttons[t] = Gf(39, 122, 0, [ᐃⵠ.ⲆⲆᐃⵠⵠᐃⵠ, ᐃⵠ.ⵠΔⵠⵠΔⵠⲆ, ᐃⵠ.ᐃᐃᐃⲆⵠᐃᐃ], fa, ha, gj, -61, 315, da | ba, ia);
        this.buttons[t++].view = F;
        this.buttons[t] = Gf(39, 122, 0, [ᐃⵠ.ΔⵠⲆⲆΔΔⵠ, ᐃⵠ.ⲆⵠⲆᐃᐃΔᐃ, ᐃⵠ.ΔⵠᐃⵠΔΔⵠ], fa, ha, undefined, 260, 315, da | ba, ia);
        this.buttons[t++].view = F;
        this.buttons[t] = Gf(115, 73, 0, [ᐃⵠ.ᐃᐃᐃᐃⲆ, ᐃⵠ.ᐃΔⲆⵠᐃ, ᐃⵠ.ΔⲆⵠⵠΔ], fa, ha, function () {
            V(M);
        }, -320, 470, da | ba, ia);
        this.buttons[t++].view = F;
        ⵠᐃⲆᐃⲆⵠⲆᐃⵠ = t;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, -29, 205, da | ba, ia);
        this.buttons[t++].view = j;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, er, -29, 300, da | ba, ia);
        this.buttons[t++].view = j;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, eq, -29, 395, da | ba, ia);
        this.buttons[t++].view = j;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, rh, 65, 205, da | ba, ia);
        this.buttons[t++].view = j;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, mo, 65, 300, da | ba, ia);
        this.buttons[t++].view = j;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, Qk, 65, 395, da | ba, ia);
        this.buttons[t++].view = j;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, hg, 159, 205, da | ba, ia);
        this.buttons[t++].view = j;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, ug, 159, 300, da | ba, ia);
        this.buttons[t++].view = j;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, 159, 395, da | ba, ia);
        this.buttons[t++].view = j;
        this.buttons[t] = Gf(39, 122, 0, [ᐃⵠ.ⲆⲆᐃⵠⵠᐃⵠ, ᐃⵠ.ⵠΔⵠⵠΔⵠⲆ, ᐃⵠ.ᐃᐃᐃⲆⵠᐃᐃ], fa, ha, Qk, -61, 315, da | ba, ia);
        this.buttons[t++].view = j;
        this.buttons[t] = Gf(39, 122, 0, [ᐃⵠ.ΔⵠⲆⲆΔΔⵠ, ᐃⵠ.ⲆⵠⲆᐃᐃΔᐃ, ᐃⵠ.ΔⵠᐃⵠΔΔⵠ], fa, ha, undefined, 260, 315, da | ba, ia);
        this.buttons[t++].view = j;
        this.buttons[t] = Gf(115, 73, 0, [ᐃⵠ.ᐃᐃᐃᐃⲆ, ᐃⵠ.ᐃΔⲆⵠᐃ, ᐃⵠ.ΔⲆⵠⵠΔ], fa, ha, function () {
            V(M);
        }, -320, 470, da | ba, ia);
        this.buttons[t++].view = j;
        ΔⵠᐃⵠᐃⵠΔⵠⵠ = t;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, -29, 205, da | ba, ia);
        this.buttons[t++].view = R;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, -29, 300, da | ba, ia);
        this.buttons[t++].view = R;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, -29, 395, da | ba, ia);
        this.buttons[t++].view = R;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, 65, 205, da | ba, ia);
        this.buttons[t++].view = R;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, 65, 300, da | ba, ia);
        this.buttons[t++].view = R;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, 65, 395, da | ba, ia);
        this.buttons[t++].view = R;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, 159, 205, da | ba, ia);
        this.buttons[t++].view = R;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, 159, 300, da | ba, ia);
        this.buttons[t++].view = R;
        this.buttons[t] = Gf(178, 182, 0, [ᐃⵠ.ⲆᐃⲆⲆ, ᐃⵠ.ⵠᐃΔⵠ, ᐃⵠ.ᐃⲆⲆΔ], fa, ha, undefined, 159, 395, da | ba, ia);
        this.buttons[t++].view = R;
        this.buttons[t] = Gf(39, 122, 0, [ᐃⵠ.ⲆⲆᐃⵠⵠᐃⵠ, ᐃⵠ.ⵠΔⵠⵠΔⵠⲆ, ᐃⵠ.ᐃᐃᐃⲆⵠᐃᐃ], fa, ha, undefined, -61, 315, da | ba, ia);
        this.buttons[t++].view = R;
        this.buttons[t] = Gf(39, 122, 0, [ᐃⵠ.ΔⵠⲆⲆΔΔⵠ, ᐃⵠ.ⲆⵠⲆᐃᐃΔᐃ, ᐃⵠ.ΔⵠᐃⵠΔΔⵠ], fa, ha, gj, 260, 315, da | ba, ia);
        this.buttons[t++].view = R;
        this.buttons[t] = Gf(115, 73, 0, [ᐃⵠ.ᐃᐃᐃᐃⲆ, ᐃⵠ.ᐃΔⲆⵠᐃ, ᐃⵠ.ΔⲆⵠⵠΔ], fa, ha, function () {
            V(M);
        }, -320, 470, da | ba, ia);
        this.buttons[t++].view = R;
        this.buttons[t] = Gf(260, 260, 0, [ᐃⵠ.ᐃⵠᐃΔⵠⲆΔ, ᐃⵠ.ᐃⲆᐃⵠⵠΔᐃ, ᐃⵠ.ⲆΔⲆⵠⵠⵠΔ], fa, ha, function () {
            if (k.ⲆⵠⵠⵠⲆ()) {
                Iy(3, 50);
            } else {
                V(m);
            }
        }, -65, 197, da | ba, ia);
        this.buttons[t++].view = E;
        this.buttons[t] = Gf(115, 73, 0, [ᐃⵠ.ᐃᐃᐃᐃⲆ, ᐃⵠ.ᐃΔⲆⵠᐃ, ᐃⵠ.ΔⲆⵠⵠΔ], fa, ha, function () {
            V(N);
        }, 309, 180, da | ba, ia);
        this.buttons[t++].view = E;
        this.buttons[t] = Gf(260, 260, 0, [ᐃⵠ.ⲆⵠᐃΔⲆⲆⲆ, ᐃⵠ.ᐃᐃᐃΔⲆⲆᐃ, ᐃⵠ.ΔⲆⲆΔⲆⲆⵠ], fa, ha, function () {
            if (k.ⲆⵠⵠⵠⲆ()) {
                Iy(0, 100);
            } else {
                V(m);
            }
        }, -65, 197, da | ba, ia);
        this.buttons[t++].view = A;
        this.buttons[t] = Gf(115, 73, 0, [ᐃⵠ.ᐃᐃᐃᐃⲆ, ᐃⵠ.ᐃΔⲆⵠᐃ, ᐃⵠ.ΔⲆⵠⵠΔ], fa, ha, function () {
            V(N);
        }, 309, 180, da | ba, ia);
        this.buttons[t++].view = A;
        this.buttons[t] = Gf(260, 260, 0, [ᐃⵠ.ⲆⲆΔΔⲆⲆⲆ, ᐃⵠ.ΔⵠᐃⲆⵠⵠⲆ, ᐃⵠ.ⲆᐃⲆⲆᐃᐃⲆ], fa, ha, function () {
            if (k.ⲆⵠⵠⵠⲆ()) {
                Iy(4, 150);
            } else {
                V(m);
            }
        }, -65, 197, da | ba, ia);
        this.buttons[t++].view = B;
        this.buttons[t] = Gf(115, 73, 0, [ᐃⵠ.ᐃᐃᐃᐃⲆ, ᐃⵠ.ᐃΔⲆⵠᐃ, ᐃⵠ.ΔⲆⵠⵠΔ], fa, ha, function () {
            V(N);
        }, 309, 180, da | ba, ia);
        this.buttons[t++].view = B;
        this.buttons[t] = Gf(260, 260, 0, [ᐃⵠ.ᐃⵠⵠⲆⲆᐃΔ, ᐃⵠ.ΔⵠᐃⲆⲆⵠⲆ, ᐃⵠ.ΔⲆⵠⲆᐃᐃᐃ], fa, ha, function () {
            if (k.ⲆⵠⵠⵠⲆ()) {
                Iy(1, 300);
            } else {
                V(m);
            }
        }, -65, 197, da | ba, ia);
        this.buttons[t++].view = I;
        this.buttons[t] = Gf(115, 73, 0, [ᐃⵠ.ᐃᐃᐃᐃⲆ, ᐃⵠ.ᐃΔⲆⵠᐃ, ᐃⵠ.ΔⲆⵠⵠΔ], fa, ha, function () {
            V(N);
        }, 309, 180, da | ba, ia);
        this.buttons[t++].view = I;
        this.buttons[t] = Gf(260, 260, 0, [ᐃⵠ.ᐃΔΔⵠΔⲆΔ, ᐃⵠ.ⵠΔΔᐃᐃᐃΔ, ᐃⵠ.ΔΔᐃΔⵠⲆΔ], fa, ha, function () {
            if (k.ⲆⵠⵠⵠⲆ()) {
                Iy(2, 600);
            } else {
                V(m);
            }
        }, -65, 197, da | ba, ia);
        this.buttons[t++].view = D;
        this.buttons[t] = Gf(115, 73, 0, [ᐃⵠ.ᐃᐃᐃᐃⲆ, ᐃⵠ.ᐃΔⲆⵠᐃ, ᐃⵠ.ΔⲆⵠⵠΔ], fa, ha, function () {
            V(N);
        }, 309, 180, da | ba, ia);
        this.buttons[t++].view = D;
        this.buttons[t] = Gf(260, 260, 0, [ᐃⵠ.ᐃⵠⵠⲆⲆᐃΔ, ᐃⵠ.ΔⵠᐃⲆⲆⵠⲆ, ᐃⵠ.ΔⲆⵠⲆᐃᐃᐃ], fa, ha, function () {
            if (k.ⲆⵠⵠⵠⲆ()) {
                Iy(5, 300);
            } else {
                V(m);
            }
        }, -65, 197, da | ba, ia);
        this.buttons[t++].view = J;
        this.buttons[t] = Gf(115, 73, 0, [ᐃⵠ.ᐃᐃᐃᐃⲆ, ᐃⵠ.ᐃΔⲆⵠᐃ, ᐃⵠ.ΔⲆⵠⵠΔ], fa, ha, function () {
            V(N);
        }, 309, 180, da | ba, ia);
        this.buttons[t++].view = J;
        var ua = t;
        this.buttons[t] = Gf(46, 51, 0, [ᐃⵠ.ΔΔΔᐃᐃⲆΔ, ᐃⵠ.ΔΔᐃΔⲆⵠⵠ, ᐃⵠ.ᐃΔⵠΔⵠᐃᐃ], fa, ha, function () {
            ta(hg, 0);
        }, -305, 132, da | ba, ia);
        this.buttons[t++].view = v;
        var va = t;
        this.buttons[t] = Gf(46, 51, 0, [ᐃⵠ.ᐃᐃⵠⲆⲆⵠΔ, ᐃⵠ.ⵠⵠⲆΔΔΔᐃ, ᐃⵠ.ⵠΔᐃⵠⲆΔⵠ], fa, ha, function () {
            ta(undefined, 1);
        }, -273, 132, da | ba, ia);
        this.buttons[t++].view = v;
        var wa = t;
        this.buttons[t] = Gf(46, 51, 0, [ᐃⵠ.ᐃΔⵠΔΔᐃⵠ, ᐃⵠ.ⲆᐃⲆᐃⲆⲆΔ, ᐃⵠ.ⵠⵠⲆΔΔⲆⵠ], fa, ha, function () {
            ta(undefined, 2);
        }, -241, 132, da | ba, ia);
        this.buttons[t++].view = v;
        var xa = t;
        this.buttons[t] = Gf(46, 51, 0, [ᐃⵠ.ⲆΔⲆᐃⵠⲆΔ, ᐃⵠ.ΔᐃⵠᐃⵠΔᐃ, ᐃⵠ.ᐃΔⲆΔΔⵠⵠ], fa, ha, function () {
            ta(undefined, 3);
        }, -305, 165, da | ba, ia);
        this.buttons[t++].view = v;
        var ya = t;
        this.buttons[t] = Gf(46, 51, 0, [ᐃⵠ.ᐃΔΔΔⵠⵠⲆ, ᐃⵠ.ᐃΔᐃΔⲆᐃⲆ, ᐃⵠ.ᐃⲆᐃⲆᐃⵠΔ], fa, ha, function () {
            ta($q, 4);
        }, -273, 165, da | ba, ia);
        this.buttons[t++].view = v;
        var za = t;
        this.buttons[t] = Gf(46, 51, 0, [ᐃⵠ.ΔⵠⵠΔⲆᐃΔ, ᐃⵠ.ΔᐃᐃⵠⵠΔᐃ, ᐃⵠ.ᐃΔΔΔᐃΔⵠ], fa, ha, function () {
            ta(ug, 5);
        }, -241, 165, da | ba, ia);
        this.buttons[t++].view = v;
        var Aa = t;
        this.buttons[t] = Gf(460, 73, 0, [ᐃⵠ.ⲆⵠⲆᐃᐃⲆⵠ, ᐃⵠ.ⲆⲆⲆⲆΔᐃⲆ, ᐃⵠ.ᐃΔⲆΔΔΔⲆ], fa, ha, function () {
            ta(-1);
        }, -180, 170, da | ba, ia);
        this.buttons[t++].view = v;
        var Ba = t;
        this.buttons[t] = Gf(222, 68, 0, [ᐃⵠ.ⵠⲆΔΔᐃᐃΔ, ᐃⵠ.ΔⵠⵠⲆᐃᐃⲆ, ᐃⵠ.ΔⵠᐃⲆΔⲆΔ], fa, ha, function () {
            ta(0);
        }, -180, 215, da | ba, ia);
        this.buttons[t++].view = v;
        var Ca = t;
        this.buttons[t] = Gf(222, 68, 0, [ᐃⵠ.ⲆⲆⵠΔΔⲆⲆ, ᐃⵠ.ⲆᐃⲆᐃⲆΔⵠ, ᐃⵠ.ⲆΔᐃΔᐃΔⵠ], fa, ha, function () {
            ta(4);
        }, -180, 260, da | ba, ia);
        this.buttons[t++].view = v;
        var Da = t;
        this.buttons[t] = Gf(222, 68, 0, [ᐃⵠ.ΔⵠᐃⵠⲆᐃΔ, ᐃⵠ.ⲆΔⵠⲆΔⲆⲆ, ᐃⵠ.ⲆᐃᐃᐃΔⲆⵠ], fa, ha, function () {
            ta(2);
        }, -60, 215, da | ba, ia);
        this.buttons[t++].view = v;
        var Ea = t;
        this.buttons[t] = Gf(222, 68, 0, [ᐃⵠ.ⵠⲆⲆⵠΔⵠΔ, ᐃⵠ.ΔΔⲆΔᐃⵠΔ, ᐃⵠ.ΔⲆᐃΔⵠⵠⵠ], fa, ha, function () {
            ta(3);
        }, -60, 260, da | ba, ia);
        this.buttons[t++].view = v;
        this.ⵠᐃᐃⲆⲆⲆᐃ = t;
        this.buttons[t] = Gf(143, 66, 0, [ᐃⵠ.ᐃⵠⵠΔⵠΔⲆ, ᐃⵠ.ⲆⵠΔⵠᐃⵠΔ, ᐃⵠ.ⵠⲆⵠᐃᐃⵠᐃ], fa, ha, function () {
            Gy(undefined, Mx.ⵠᐃᐃⲆⲆⲆᐃ);
        }, -298, 110, da | ba, ia);
        this.buttons[t++].view = P;
        this.ᐃΔⲆⵠᐃⲆᐃ = t;
        this.buttons[t] = Gf(104, 66, 0, [ᐃⵠ.ᐃⵠⵠⵠΔⲆᐃ, ᐃⵠ.ⲆⵠⵠⲆᐃⵠⵠ, ᐃⵠ.ΔⵠⲆᐃΔᐃⵠ], fa, ha, function () {
            Gy(Pg, Mx.ᐃΔⲆⵠᐃⲆᐃ);
        }, -223, 110, da | ba, ia);
        this.buttons[t++].view = P;
        this.ⵠⵠⵠⵠΔᐃⲆ = t;
        this.buttons[t] = Gf(110, 66, 0, [ᐃⵠ.ⲆᐃΔΔᐃⲆΔ, ᐃⵠ.ⵠⲆΔⵠᐃⵠΔ, ᐃⵠ.ΔΔΔⵠⲆᐃΔ], fa, ha, function () {
            Gy(eq, Mx.ⵠⵠⵠⵠΔᐃⲆ);
        }, -168, 110, da | ba, ia);
        this.buttons[t++].view = P;
        this.ⵠΔⲆᐃᐃⲆᐃ = t;
        this.buttons[t] = Gf(88, 66, 0, [ᐃⵠ.ⵠᐃⲆΔⲆΔⵠ, ᐃⵠ.ⵠⵠⲆⵠΔΔⲆ, ᐃⵠ.ΔᐃⵠᐃᐃⲆᐃ], fa, ha, function () {
            Gy(undefined, Mx.ⵠΔⲆᐃᐃⲆᐃ);
        }, -110, 110, da | ba, ia);
        this.buttons[t++].view = P;
        this.ᐃᐃΔⲆⲆⲆᐃ = t;
        this.buttons[t] = Gf(88, 66, 0, [ᐃⵠ.ᐃⲆΔⲆⲆΔⲆ, ᐃⵠ.ΔⵠⵠΔᐃⵠⲆ, ᐃⵠ.ᐃⲆⵠᐃⵠⲆΔ], fa, ha, function () {
            Gy(undefined, Mx.ᐃᐃΔⲆⲆⲆᐃ);
        }, -63, 110, da | ba, ia);
        this.buttons[t++].view = P;
        this.buttons[t] = Gf(86, 44, 0, [ᐃⵠ.ᐃΔΔⵠⲆⲆⲆ, ᐃⵠ.Ⲇⵠⵠⵠⵠⵠᐃ, ᐃⵠ.ⵠᐃⵠΔᐃⵠᐃ], fa, ha, function () {
            hc.open("./terms.html", "_blank");
        }, 349, 290, da | ba, ia);
        this.buttons[t++].view = N;
        var Fa = new e(ΔΔΔⲆ.ⲆΔᐃⵠᐃ, ⲆⲆΔᐃΔᐃⲆ, function (a) {
            Mx.ᐃΔⲆⲆ = a;
            if (Mx.unlock.ᐃΔⲆⲆ[a] === 1) {
                ⲆΔⵠⲆ.set("starve_skin", "" + a, {
                    expires: 30
                });
            }
        }, this.ᐃΔⲆⲆ, this.unlock.ᐃΔⲆⲆ);
        var Ga = new e(ΔΔΔⲆ.ⲆΔΔⲆ, ⲆⵠᐃᐃⲆⵠᐃᐃᐃ, function (a) {
            Mx.ⵠᐃΔⲆⲆ = a;
            if (Mx.unlock.ⵠᐃΔⲆⲆ[a] === 1) {
                ⲆΔⵠⲆ.set("starve_bag", "" + a, {
                    expires: 30
                });
            }
        }, this.ⵠᐃΔⲆⲆ, this.unlock.ⵠᐃΔⲆⲆ);
        var Ha = new e(ΔΔΔⲆ.ΔᐃΔⵠΔ, ⵠᐃⲆᐃⲆⵠⲆᐃⵠ, function (a) {
            Mx.ⲆⵠⵠⲆⲆ = a;
            if (Mx.unlock.ⲆⵠⵠⲆⲆ[a] === 1) {
                ⲆΔⵠⲆ.set("starve_book", "" + a, {
                    expires: 30
                });
            }
        }, this.ⲆⵠⵠⲆⲆ, this.unlock.ⲆⵠⵠⲆⲆ);
        var Ia = new e(ΔΔΔⲆ.ⲆΔΔⲆΔ, ΔⵠᐃⵠᐃⵠΔⵠⵠ, function (a) {
            Mx.ⲆᐃΔⵠⲆ = a;
            if (Mx.unlock.ⲆᐃΔⵠⲆ[a] === 1) {
                ⲆΔⵠⲆ.set("starve_dead", "" + a, {
                    expires: 30
                });
            }
        }, this.ⲆᐃΔⵠⲆ, this.unlock.ⲆᐃΔⵠⲆ);
        var Ja = new e(ΔΔΔⲆ.ⲆΔΔⲆΔ, ⵠⲆⵠⵠⲆⵠΔⵠⲆ, function (a) {
            Mx.ⵠⵠΔⲆⵠ = a;
            if (Mx.unlock.ⵠⵠΔⲆⵠ[a] === 1) {
                ⲆΔⵠⲆ.set("starve_crate", "" + a, {
                    expires: 30
                });
            }
        }, this.ⵠⵠΔⲆⵠ, this.unlock.ⵠⵠΔⲆⵠ);
        var Ka = new e(ΔΔΔⲆ.ᐃᐃⵠⵠⲆ, ΔᐃⲆⲆⲆⵠⲆΔⵠ, function (a) {
            Mx.ⵠᐃⲆⵠΔ = a;
            if (Mx.unlock.ⵠᐃⲆⵠΔ[a] === 1) {
                ⲆΔⵠⲆ.set("starve_accessory", "" + a, {
                    expires: 30
                });
            }
        }, this.ⵠᐃⲆⵠΔ, this.unlock.ⵠᐃⲆⵠΔ);
        this.ⵠᐃᐃⵠⵠᐃᐃ = function (a) {
            Vx.ᐃⲆⵠⲆ = jf(k.Δᐃ, a);
            for (var b = 0; k.buttons.length > b; b++) {
                if (ja === k.buttons[b].info.active) {
                    k.buttons[b].ⵠⵠᐃᐃ(k.Δᐃ, Vx.ᐃⲆⵠⲆ, If);
                }
            }
        };
        this.ΔΔᐃᐃᐃⲆᐃ = function (a) {
            Vx.ᐃⲆⵠⲆ = jf(k.Δᐃ, a);
            for (var b = 0; b < k.buttons.length; b++) {
                var c = k.buttons[b];
                if (ja === c.info.active && c.ⵠⵠᐃᐃ(k.Δᐃ, Vx.ᐃⲆⵠⲆ, Ef)) {
                    c.info.callback();
                    return;
                }
            }
        };
        this.ⲆᐃⲆΔᐃⵠⵠ = Lj;
        this.ⲆⲆⲆᐃⲆΔⲆ = function (a) {
            Vx.ᐃⲆⵠⲆ = jf(k.Δᐃ, a);
            var c = false;
            for (var d = 0; d < k.buttons.length; d++) {
                if (ja === k.buttons[d].info.active) {
                    c |= k.buttons[d].ⵠⵠᐃᐃ(k.Δᐃ, Vx.ᐃⲆⵠⲆ, Df);
                }
            }
            if (k.ⲆᐃⲆΔᐃⵠⵠ !== c) {
                k.ⲆᐃⲆΔᐃⵠⵠ = c;
                b.style.cursor = c ? k.ⲆΔΔⵠⲆⵠΔ : k.ᐃᐃᐃⲆⵠᐃΔ;
            }
        };
        this.ᐃⲆⲆⵠᐃᐃⲆ = function () {
            hc.addEventListener("mousedown", this.ⵠᐃᐃⵠⵠᐃᐃ, false);
            hc.addEventListener("mouseup", this.ΔΔᐃᐃᐃⲆᐃ, Oo);
            hc.addEventListener("mousemove", this.ⲆⲆⲆᐃⲆΔⲆ, ds);
        };
        this.ⵠᐃⵠⵠⵠΔᐃ = function () {
            hc.removeEventListener("mousedown", this.ⵠᐃᐃⵠⵠᐃᐃ, false);
            hc.removeEventListener("mouseup", this.ΔΔᐃᐃᐃⲆᐃ, xl);
            hc.removeEventListener("mousemove", this.ⲆⲆⲆᐃⲆΔⲆ, C);
        };
    }
    function wx(b, c, d, e, f) {
        _i(sb, b, c, d, e, f);
        const g = Tb(gb[0], gb[1], gb[2]);
        Bb(gb[3], gb[4], gb[0], gb[1], gb[2]);
        return g ^ 56652;
    }
    function xx() {
        ⵠᐃⵠ.ⵠᐃⲆΔⵠᐃΔ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
    }
    function yx(b, c, d, e, f, g) {
        const a = ~(b & 25380) & (b | 25380);
        const i = c ^ 47999;
        const j = Pw(a, i, ~(d & 44848) & (d | 44848), (1013904223 + (60181 + e) * 1664525) % 4294967296);
        jt(a, i);
        return j ^ 2732;
    }
    (function () {
        function b() {
            this.ᐃᐃⵠΔⵠ();
        }
        b.prototype = {
            ᐃᐃⵠΔⵠ: function () {
                var a = this || c;
                a.ᐃᐃⵠⲆⲆΔⲆ = 1000;
                a.ⲆⵠΔⵠⵠΔⵠ = {};
                a.ᐃΔⵠⲆⵠ = [];
                a.ᐃⵠⲆⲆⲆ = false;
                a.ᐃⵠᐃᐃⲆ = 1;
                a.ⲆⲆⲆⵠⵠᐃΔ = "canplaythrough";
                a.ⵠⵠᐃⵠⲆ = typeof hc != "undefined" && hc.navigator ? hc.navigator : null;
                a.ⵠΔᐃᐃⵠⵠᐃ = null;
                a.ⵠⵠΔⵠΔⵠᐃ = false;
                a.ⵠⲆᐃᐃΔ = true;
                a.ΔⵠⲆΔΔⵠΔ = true;
                a.ᐃ = null;
                a.ΔⲆⵠΔⵠᐃΔ = true;
                a.ⵠⵠⵠᐃΔᐃᐃ();
                return a;
            },
            volume: function (b) {
                var d = this || c;
                b = parseFloat(b);
                if (!d.ᐃ) {
                    i();
                }
                if (b !== undefined && b >= 0 && b <= 1) {
                    d.ᐃⵠᐃᐃⲆ = b;
                    if (d.ᐃⵠⲆⲆⲆ) {
                        return d;
                    }
                    if (d.ⵠⲆᐃᐃΔ) {
                        d.ⵠΔᐃᐃⵠⵠᐃ.gain.value = b;
                    }
                    for (var f = 0; f < d.ᐃΔⵠⲆⵠ.length; f++) {
                        if (!d.ᐃΔⵠⲆⵠ[f].ᐃⵠΔΔⲆ) {
                            for (var g = d.ᐃΔⵠⲆⵠ[f].ΔⵠΔΔΔ(), h = 0; h < g.length; h++) {
                                var j = d.ᐃΔⵠⲆⵠ[f].ᐃᐃΔⵠⵠ(g[h]);
                                if (j && j.ᐃΔⵠⵠ) {
                                    j.ᐃΔⵠⵠ.volume = j.ᐃⵠᐃᐃⲆ * b;
                                }
                            }
                        }
                    }
                    return d;
                }
                return d.ᐃⵠᐃᐃⲆ;
            },
            ᐃⲆᐃⵠΔⲆΔ: function (b) {
                var d = this || c;
                if (!d.ᐃ) {
                    i();
                }
                d.ᐃⵠⲆⲆⲆ = b;
                if (d.ⵠⲆᐃᐃΔ) {
                    d.ⵠΔᐃᐃⵠⵠᐃ.gain.value = b ? 0 : d.ᐃⵠᐃᐃⲆ;
                }
                for (var e = 0; e < d.ᐃΔⵠⲆⵠ.length; e++) {
                    if (!d.ᐃΔⵠⲆⵠ[e].ᐃⵠΔΔⲆ) {
                        for (var f = d.ᐃΔⵠⲆⵠ[e].ΔⵠΔΔΔ(), g = 0; g < f.length; g++) {
                            var h = d.ᐃΔⵠⲆⵠ[e].ᐃᐃΔⵠⵠ(f[g]);
                            if (h && h.ᐃΔⵠⵠ) {
                                h.ᐃΔⵠⵠ.muted = !!b || h.ᐃⵠⲆⲆⲆ;
                            }
                        }
                    }
                }
                return d;
            },
            ΔⲆΔⵠⲆᐃΔ: function () {
                var a = this || c;
                for (var b = a.ᐃΔⵠⲆⵠ.length - 1; b >= 0; b--) {
                    a.ᐃΔⵠⲆⵠ[b].ΔⲆΔⵠⲆᐃΔ();
                }
                if (a.ⵠⲆᐃᐃΔ && a.ᐃ && a.ᐃ.close !== undefined) {
                    a.ᐃ.close();
                    a.ᐃ = null;
                    i();
                }
                return a;
            },
            ᐃΔΔⵠᐃᐃⲆⲆⲆ: function (a) {
                return (this || c).ⲆⵠΔⵠⵠΔⵠ[a.replace(/^x-/, "")];
            },
            ⵠⵠⵠᐃΔᐃᐃ: function () {
                var a = this || c;
                a.state = a.ᐃ && a.ᐃ.state || "running";
                a.ΔⵠᐃΔⵠⵠΔ();
                if (!a.ⵠⲆᐃᐃΔ) {
                    if (typeof Audio != "undefined") {
                        try {
                            if (new Audio().oncanplaythrough === undefined) {
                                a.ⲆⲆⲆⵠⵠᐃΔ = "canplay";
                            }
                        } catch (b) {
                            a.ⵠⵠΔⵠΔⵠᐃ = true;
                        }
                    } else {
                        a.ⵠⵠΔⵠΔⵠᐃ = true;
                    }
                }
                try {
                    if (new Audio().muted) {
                        a.ⵠⵠΔⵠΔⵠᐃ = true;
                    }
                } catch (a) { }
                if (!a.ⵠⵠΔⵠΔⵠᐃ) {
                    a.ⲆⵠᐃⵠᐃⵠΔΔᐃ();
                }
                return a;
            },
            ⲆⵠᐃⵠᐃⵠΔΔᐃ: function () {
                var b = this || c;
                var d = null;
                try {
                    d = typeof Audio != "undefined" ? new Audio() : null;
                } catch (a) {
                    return b;
                }
                if (!d || typeof d.canPlayType != "function") {
                    return b;
                }
                var e = d.canPlayType("audio/mpeg;").replace(/^no$/, "");
                var f = b.ⵠⵠᐃⵠⲆ && b.ⵠⵠᐃⵠⲆ.userAgent.match(/OPR\/([0-6].)/g);
                var g = f && parseInt(f[0].split("/")[1], 10) < 33;
                b.ⲆⵠΔⵠⵠΔⵠ = {
                    ΔΔᐃᐃⵠᐃⵠᐃⲆ: !g && (!!e || !!d.canPlayType("audio/mp3;").replace(/^no$/, "")),
                    ᐃᐃΔⵠΔᐃⲆΔΔ: !!e,
                    ⲆⵠⵠⵠΔⵠᐃΔⵠ: !!d.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
                    ᐃⵠΔΔⲆΔΔⲆᐃ: !!d.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ⵠΔᐃⵠΔᐃⵠⵠΔ: !!d.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ΔⵠⵠΔⵠᐃⲆᐃⵠ: !!d.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
                    ΔᐃⵠⵠⲆⵠⵠⵠᐃ: !!d.canPlayType("audio/aac;").replace(/^no$/, ""),
                    ⲆⲆΔⵠΔΔΔⲆⵠ: !!d.canPlayType("audio/x-caf;").replace(/^no$/, ""),
                    ⵠΔᐃΔΔᐃᐃΔΔ: !!(d.canPlayType("audio/x-m4a;") || d.canPlayType("audio/m4a;") || d.canPlayType("audio/aac;")).replace(/^no$/, ""),
                    ΔⵠⵠⲆⲆΔⲆᐃⲆ: !!(d.canPlayType("audio/x-mp4;") || d.canPlayType("audio/mp4;") || d.canPlayType("audio/aac;")).replace(/^no$/, ""),
                    ⲆᐃΔⲆⲆᐃⲆᐃᐃ: !!d.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ΔΔΔⲆᐃⲆᐃⵠⲆ: !!d.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ⵠⵠⲆΔⵠⲆᐃⲆΔ: !!d.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
                    ΔⲆΔⵠⲆᐃⲆΔⵠ: !!(d.canPlayType("audio/x-flac;") || d.canPlayType("audio/flac;")).replace(/^no$/, "")
                };
                return b;
            },
            ΔⵠΔⲆᐃᐃΔⵠᐃ: function () {
                var b = this || c;
                var a = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(b.ⵠⵠᐃⵠⲆ && b.ⵠⵠᐃⵠⲆ.userAgent);
                var d = !!("ontouchend" in hc) || !!b.ⵠⵠᐃⵠⲆ && b.ⵠⵠᐃⵠⲆ.maxTouchPoints > 0 || !!b.ⵠⵠᐃⵠⲆ && b.ⵠⵠᐃⵠⲆ.ⲆⵠᐃⲆΔⲆᐃⵠΔ > 0;
                if (!b.ⲆΔⲆⲆⵠᐃⲆ && b.ᐃ && (a || d)) {
                    b.ⲆΔⲆⲆⵠᐃⲆ = false;
                    if (!b.ᐃΔⲆΔⵠΔΔᐃᐃ && b.ᐃ.sampleRate !== 44100) {
                        b.ᐃΔⲆΔⵠΔΔᐃᐃ = true;
                        b.ΔⲆΔⵠⲆᐃΔ();
                    }
                    b.ⲆⲆᐃᐃᐃΔⲆ = b.ᐃ.createBuffer(1, 1, 22050);
                    function d() {
                        c.ⵠⲆⵠᐃᐃⵠⵠ();
                        var a = b.ᐃ.createBufferSource();
                        a.buffer = b.ⲆⲆᐃᐃᐃΔⲆ;
                        a.connect(b.ᐃ.destination);
                        if (a.start === undefined) {
                            a.ᐃᐃⵠΔᐃⵠᐃⵠΔ(0);
                        } else {
                            a.start(0);
                        }
                        if (typeof b.ᐃ.resume == "function") {
                            b.ᐃ.resume();
                        }
                        a.onended = function () {
                            a.disconnect(0);
                            b.ⲆΔⲆⲆⵠᐃⲆ = true;
                            b.ΔⲆⵠΔⵠᐃΔ = false;
                            document.removeEventListener("touchend", d, true);
                        };
                    }
                    document.addEventListener("touchend", d, true);
                    return b;
                }
            },
            ΔⵠᐃΔⵠⵠΔ: function () {
                var a = this;
                if (a.ΔⵠⲆΔΔⵠΔ && a.ᐃ && a.ᐃ.suspend !== undefined && c.ⵠⲆᐃᐃΔ) {
                    for (var b = 0; b < a.ᐃΔⵠⲆⵠ.length; b++) {
                        if (a.ᐃΔⵠⲆⵠ[b].ᐃⵠΔΔⲆ) {
                            for (var d = 0; d < a.ᐃΔⵠⲆⵠ[b].ⵠᐃⵠΔⲆ.length; d++) {
                                if (!a.ᐃΔⵠⲆⵠ[b].ⵠᐃⵠΔⲆ[d].ⵠΔⲆΔⲆ) {
                                    return a;
                                }
                            }
                        }
                    }
                    if (a.ΔⵠΔΔᐃⲆΔ) {
                        clearTimeout(a.ΔⵠΔΔᐃⲆΔ);
                    }
                    a.ΔⵠΔΔᐃⲆΔ = setTimeout(function () {
                        if (a.ΔⵠⲆΔΔⵠΔ) {
                            a.ΔⵠΔΔᐃⲆΔ = null;
                            a.state = "suspending";
                            a.ᐃ.suspend().then(function () {
                                a.state = "suspended";
                                if (a.ⲆᐃΔⵠⲆⵠΔ) {
                                    delete a.ⲆᐃΔⵠⲆⵠΔ;
                                    a.ⵠⲆⵠᐃᐃⵠⵠ();
                                }
                            });
                        }
                    }, 30000);
                    return a;
                }
            },
            ⵠⲆⵠᐃᐃⵠⵠ: function () {
                var a = this;
                if (a.ᐃ && a.ᐃ.resume !== undefined && c.ⵠⲆᐃᐃΔ) {
                    if (a.state === "running" && a.ΔⵠΔΔᐃⲆΔ) {
                        clearTimeout(a.ΔⵠΔΔᐃⲆΔ);
                        a.ΔⵠΔΔᐃⲆΔ = null;
                    } else if (a.state === "suspended") {
                        a.ᐃ.resume().then(function () {
                            a.state = "running";
                            for (var b = 0; b < a.ᐃΔⵠⲆⵠ.length; b++) {
                                a.ᐃΔⵠⲆⵠ[b].ᐃᐃⵠⲆⲆ("resume");
                            }
                        });
                        if (a.ΔⵠΔΔᐃⲆΔ) {
                            clearTimeout(a.ΔⵠΔΔᐃⲆΔ);
                            a.ΔⵠΔΔᐃⲆΔ = null;
                        }
                    } else if (a.state === "suspending") {
                        a.ⲆᐃΔⵠⲆⵠΔ = true;
                    }
                    return a;
                }
            }
        };
        var c = new b();
        function d(a) {
            if (a.src && a.src.length !== 0) {
                this.ᐃᐃⵠΔⵠ(a);
            } else {
                console.error(undefined);
            }
        }
        d.prototype = {
            ᐃᐃⵠΔⵠ: function (a) {
                var b = this;
                if (!c.ᐃ) {
                    i();
                }
                b.ΔⲆⲆⲆⲆΔⵠⲆⵠ = a.autoplay || false;
                b.ΔᐃΔⲆᐃΔⲆ = typeof a.ΔᐃΔΔΔⲆⵠ != "string" ? a.ΔᐃΔΔΔⲆⵠ : [a.ΔᐃΔΔΔⲆⵠ];
                b.ΔⲆⵠᐃⵠⵠΔ = a.ⲆΔⲆⲆΔⲆᐃΔⵠ || false;
                b.ᐃⵠⲆⲆⲆ = a.ᐃⲆᐃⵠΔⲆΔ || false;
                b.ΔᐃⵠᐃΔ = a.loop || false;
                b.ⵠΔⵠΔⲆᐃⵠⲆΔ = a.ⲆⲆⵠⵠⲆΔⲆⵠⲆ || 5;
                b.ΔᐃᐃΔΔΔΔⵠΔ = typeof a.preload != "boolean" || a.preload;
                b.ΔᐃⵠᐃⲆ = a.rate || 1;
                b.ⲆⲆΔⲆᐃ = a.ⵠΔ || {};
                b.ⲆⵠᐃΔⲆ = typeof a.src != "string" ? a.src : [a.src];
                b.ᐃⵠᐃᐃⲆ = a.volume !== undefined ? a.volume : 1;
                b.ⲆⲆΔΔⲆⵠΔ = 0;
                b.ⲆᐃⲆᐃΔ = "unloaded";
                b.ⵠᐃⵠΔⲆ = [];
                b.ΔᐃᐃΔⲆᐃⵠ = {};
                b.ᐃᐃⲆⲆⵠ = [];
                b.ⵠΔᐃⵠᐃⲆΔⲆⵠ = a.onend ? [{
                    ᐃΔⲆⲆΔ: a.onend
                }] : [];
                b.ⵠᐃⲆⵠᐃⵠⲆⲆⵠ = a.onfade ? [{
                    ᐃΔⲆⲆΔ: a.onfade
                }] : [];
                b.ᐃⲆⲆⵠᐃΔΔᐃⵠ = a.onload ? [{
                    ᐃΔⲆⲆΔ: a.onload
                }] : [];
                b.ⲆⲆⲆΔⵠⲆⲆᐃⵠ = a.ᐃⵠΔᐃⵠⵠⲆΔᐃ ? [{
                    ᐃΔⲆⲆΔ: a.ᐃⵠΔᐃⵠⵠⲆΔᐃ
                }] : [];
                b.ᐃⲆⲆⵠⲆΔᐃⲆᐃ = a.onpause ? [{
                    ᐃΔⲆⲆΔ: a.onpause
                }] : [];
                b.ⵠⵠⵠⵠᐃᐃⲆΔᐃ = a.onplay ? [{
                    ᐃΔⲆⲆΔ: a.onplay
                }] : [];
                b.ΔⵠⵠⲆⵠᐃΔᐃᐃ = a.onstop ? [{
                    ᐃΔⲆⲆΔ: a.onstop
                }] : [];
                b.ᐃⵠⲆΔⲆᐃΔⲆΔ = a.onmute ? [{
                    ᐃΔⲆⲆΔ: a.onmute
                }] : [];
                b.ᐃᐃᐃΔⵠΔⲆⲆΔ = a.ⲆᐃⲆⲆⵠⲆᐃⲆᐃ ? [{
                    ᐃΔⲆⲆΔ: a.ⲆᐃⲆⲆⵠⲆᐃⲆᐃ
                }] : [];
                b.ΔⲆⲆⲆⲆᐃᐃⵠⲆ = a.ⲆⲆᐃⲆⲆΔᐃΔᐃ ? [{
                    ᐃΔⲆⲆΔ: a.ⲆⲆᐃⲆⲆΔᐃΔᐃ
                }] : [];
                b.ⲆⲆⲆΔΔⵠᐃⵠᐃ = a.ΔⵠΔⵠΔⵠᐃΔⲆ ? [{
                    ᐃΔⲆⲆΔ: a.ΔⵠΔⵠΔⵠᐃΔⲆ
                }] : [];
                b.ΔⲆⲆⲆⲆᐃⵠᐃΔ = [];
                b.ᐃⵠΔΔⲆ = c.ⵠⲆᐃᐃΔ && !b.ΔⲆⵠᐃⵠⵠΔ;
                if (c.ᐃ !== undefined && c.ᐃ && c.ΔⲆⵠΔⵠᐃΔ) {
                    c.ΔⵠΔⲆᐃᐃΔⵠᐃ();
                }
                c.ᐃΔⵠⲆⵠ.push(b);
                if (b.ΔⲆⲆⲆⲆΔⵠⲆⵠ) {
                    b.ᐃᐃⲆⲆⵠ.push({
                        event: "play",
                        action: function () {
                            b.play();
                        }
                    });
                }
                if (b.ΔᐃᐃΔΔΔΔⵠΔ) {
                    b.load();
                }
                return b;
            },
            load: function () {
                var b = this;
                var d = null;
                if (!c.ⵠⵠΔⵠΔⵠᐃ) {
                    if (typeof b.ⲆⵠᐃΔⲆ == "string") {
                        b.ⲆⵠᐃΔⲆ = [b.ⲆⵠᐃΔⲆ];
                    }
                    for (var e = 0; e < b.ⲆⵠᐃΔⲆ.length; e++) {
                        var g;
                        var i;
                        if (b.ΔᐃΔⲆᐃΔⲆ && b.ΔᐃΔⲆᐃΔⲆ[e]) {
                            g = b.ΔᐃΔⲆᐃΔⲆ[e];
                        } else {
                            if (typeof (i = b.ⲆⵠᐃΔⲆ[e]) != "string") {
                                b.ᐃᐃⵠⲆⲆ("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                                continue;
                            }
                            if (!(g = /^data:audio\/([^;,]+);/i.exec(i))) {
                                g = /\.([^.]+)$/.exec(i.split("?", 1)[0]);
                            }
                            g &&= g[1].toLowerCase();
                        }
                        if (!g) {
                            console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
                        }
                        if (g && c.ᐃΔΔⵠᐃᐃⲆⲆⲆ(g)) {
                            d = b.ⲆⵠᐃΔⲆ[e];
                            break;
                        }
                    }
                    if (d) {
                        b.ⲆⵠᐃΔⲆ = d;
                        b.ⲆᐃⲆᐃΔ = "loading";
                        if (hc.location.protocol === "https:" && d.slice(0, 5) === "http:") {
                            b.ΔⲆⵠᐃⵠⵠΔ = true;
                            b.ᐃⵠΔΔⲆ = false;
                        }
                        new f(b);
                        if (b.ᐃⵠΔΔⲆ) {
                            a(b);
                        }
                        return b;
                    } else {
                        b.ᐃᐃⵠⲆⲆ("loaderror", null, "No codec support for selected audio sources.");
                        return;
                    }
                }
                b.ᐃᐃⵠⲆⲆ("loaderror", null, "No audio support.");
            },
            play: function (e, f) {
                var j = this;
                var k = null;
                if (typeof e == "number") {
                    k = e;
                    e = null;
                } else {
                    if (typeof e == "string" && j.ⲆᐃⲆᐃΔ === "loaded" && !j.ⲆⲆΔⲆᐃ[e]) {
                        return null;
                    }
                    if (e === undefined) {
                        e = "__default";
                        var n = 0;
                        for (var o = 0; o < j.ⵠᐃⵠΔⲆ.length; o++) {
                            if (j.ⵠᐃⵠΔⲆ[o].ⵠΔⲆΔⲆ && !j.ⵠᐃⵠΔⲆ[o].Ⲇⵠⵠⵠᐃ) {
                                n++;
                                k = j.ⵠᐃⵠΔⲆ[o].ᐃᐃⲆΔ;
                            }
                        }
                        if (n === 1) {
                            e = null;
                        } else {
                            k = null;
                        }
                    }
                }
                var q = k ? j.ᐃᐃΔⵠⵠ(k) : j.ᐃⵠⲆΔᐃⵠⵠⲆⵠ();
                if (!q) {
                    return null;
                }
                if (k && !e) {
                    e = q.ⲆⲆΔⲆᐃ || "__default";
                }
                if (j.ⲆᐃⲆᐃΔ !== "loaded") {
                    q.ⲆⲆΔⲆᐃ = e;
                    q.Ⲇⵠⵠⵠᐃ = false;
                    var h = q.ᐃᐃⲆΔ;
                    j.ᐃᐃⲆⲆⵠ.push({
                        event: "play",
                        action: function () {
                            j.play(h);
                        }
                    });
                    return h;
                }
                if (k && !q.ⵠΔⲆΔⲆ) {
                    if (!f) {
                        setTimeout(function () {
                            j.ᐃᐃⵠⲆⲆ("play", q.ᐃᐃⲆΔ);
                        }, 0);
                    }
                    return q.ᐃᐃⲆΔ;
                }
                if (j.ᐃⵠΔΔⲆ) {
                    c.ⵠⲆⵠᐃᐃⵠⵠ();
                }
                var l = Math.max(0, q.ᐃⵠⲆᐃΔ > 0 ? q.ᐃⵠⲆᐃΔ : j.ⲆⲆΔⲆᐃ[e][0] / 1000);
                var g = Math.max(0, (j.ⲆⲆΔⲆᐃ[e][0] + j.ⲆⲆΔⲆᐃ[e][1]) / 1000 - l);
                var t = g * 1000 / Math.abs(q.ΔᐃⵠᐃⲆ);
                q.ⵠΔⲆΔⲆ = false;
                q.Ⲇⵠⵠⵠᐃ = false;
                q.ⲆⲆΔⲆᐃ = e;
                q.ᐃⵠⲆᐃΔ = l;
                q.ⵠᐃⵠΔⵠ = j.ⲆⲆΔⲆᐃ[e][0] / 1000;
                q.ⲆⵠᐃΔᐃᐃᐃ = (j.ⲆⲆΔⲆᐃ[e][0] + j.ⲆⲆΔⲆᐃ[e][1]) / 1000;
                q.ΔᐃⵠᐃΔ = !!q.ΔᐃⵠᐃΔ || !!j.ⲆⲆΔⲆᐃ[e][2];
                var b = q.ᐃΔⵠⵠ;
                if (j.ᐃⵠΔΔⲆ) {
                    function a() {
                        j.ⵠⲆⵠΔᐃⲆΔⵠⵠ(q);
                        var a = q.ᐃⵠⲆⲆⲆ || j.ᐃⵠⲆⲆⲆ ? 0 : q.ᐃⵠᐃᐃⲆ;
                        b.gain.setValueAtTime(a, c.ᐃ.currentTime);
                        q.ΔⲆΔⲆⲆⵠᐃ = c.ᐃ.currentTime;
                        if (b.ⲆᐃⲆⲆⵠ.start === undefined) {
                            if (q.ΔᐃⵠᐃΔ) {
                                b.ⲆᐃⲆⲆⵠ.ⲆΔΔⲆᐃⵠᐃᐃΔ(0, l, 86400);
                            } else {
                                b.ⲆᐃⲆⲆⵠ.ⲆΔΔⲆᐃⵠᐃᐃΔ(0, l, g);
                            }
                        } else if (q.ΔᐃⵠᐃΔ) {
                            b.ⲆᐃⲆⲆⵠ.start(0, l, 86400);
                        } else {
                            b.ⲆᐃⲆⲆⵠ.start(0, l, g);
                        }
                        if (t !== Infinity) {
                            j.ΔᐃᐃΔⲆᐃⵠ[q.ᐃᐃⲆΔ] = setTimeout(j.Ⲇⵠⵠⵠᐃ.bind(j, q), t);
                        }
                        if (!f) {
                            setTimeout(function () {
                                j.ᐃᐃⵠⲆⲆ("play", q.ᐃᐃⲆΔ);
                            }, 0);
                        }
                    }
                    var d = c.state === "running";
                    if (j.ⲆᐃⲆᐃΔ === "loaded" && d) {
                        a();
                    } else {
                        var m = d || j.ⲆᐃⲆᐃΔ !== "loaded" ? "load" : "resume";
                        j.once(m, a, d ? q.ᐃᐃⲆΔ : null);
                        j.ᐃⵠⲆΔⲆΔⵠ(q.ᐃᐃⲆΔ);
                    }
                } else {
                    function a() {
                        b.currentTime = l;
                        b.muted = q.ᐃⵠⲆⲆⲆ || j.ᐃⵠⲆⲆⲆ || c.ᐃⵠⲆⲆⲆ || b.muted;
                        b.volume = q.ᐃⵠᐃᐃⲆ * c.volume();
                        b.playbackRate = q.ΔᐃⵠᐃⲆ;
                        b.play();
                        if (t !== Infinity) {
                            j.ΔᐃᐃΔⲆᐃⵠ[q.ᐃᐃⲆΔ] = setTimeout(j.Ⲇⵠⵠⵠᐃ.bind(j, q), t);
                        }
                        if (!f) {
                            j.ᐃᐃⵠⲆⲆ("play", q.ᐃᐃⲆΔ);
                        }
                    }
                    var p = j.ⲆᐃⲆᐃΔ === "loaded" && (hc && hc.ᐃⲆⲆⲆᐃᐃⲆⲆᐃ || !b.readyState && c.ⵠⵠᐃⵠⲆ.ΔΔΔⲆⲆⵠΔⲆⵠ);
                    if (b.readyState === 4 || p) {
                        a();
                    } else {
                        function d() {
                            a();
                            b.removeEventListener(c.ⲆⲆⲆⵠⵠᐃΔ, d, false);
                        }
                        b.addEventListener(c.ⲆⲆⲆⵠⵠᐃΔ, d, false);
                        j.ᐃⵠⲆΔⲆΔⵠ(q.ᐃᐃⲆΔ);
                    }
                }
                return q.ᐃᐃⲆΔ;
            },
            pause: function (a) {
                var b = this;
                if (b.ⲆᐃⲆᐃΔ !== "loaded") {
                    b.ᐃᐃⲆⲆⵠ.push({
                        event: "pause",
                        action: function () {
                            b.pause(a);
                        }
                    });
                    return b;
                }
                for (var c = b.ΔⵠΔΔΔ(a), d = 0; d < c.length; d++) {
                    b.ᐃⵠⲆΔⲆΔⵠ(c[d]);
                    var e = b.ᐃᐃΔⵠⵠ(c[d]);
                    if (e && !e.ⵠΔⲆΔⲆ && (e.ᐃⵠⲆᐃΔ = b.ᐃⲆⵠᐃᐃΔⵠ(c[d]), e.ⲆⲆⲆΔΔᐃΔ = 0, e.ⵠΔⲆΔⲆ = true, b.ⲆⵠⲆⵠⵠⲆⲆ(c[d]), e.ᐃΔⵠⵠ)) {
                        if (b.ᐃⵠΔΔⲆ) {
                            if (!e.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ) {
                                continue;
                            }
                            if (e.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ.stop === undefined) {
                                e.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ.ⵠᐃⵠΔΔᐃⵠΔᐃ(0);
                            } else {
                                e.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ.stop(0);
                            }
                            b.ΔᐃΔᐃᐃΔᐃ(e.ᐃΔⵠⵠ);
                        } else if (!isNaN(e.ᐃΔⵠⵠ.duration) || e.ᐃΔⵠⵠ.duration === Infinity) {
                            e.ᐃΔⵠⵠ.pause();
                        }
                    }
                    if (!arguments[1]) {
                        b.ᐃᐃⵠⲆⲆ("pause", e ? e.ᐃᐃⲆΔ : null);
                    }
                }
                return b;
            },
            stop: function (b, c) {
                var d = this;
                if (d.ⲆᐃⲆᐃΔ !== "loaded") {
                    d.ᐃᐃⲆⲆⵠ.push({
                        event: "stop",
                        action: function () {
                            d.stop(b);
                        }
                    });
                    return d;
                }
                for (var e = d.ΔⵠΔΔΔ(b), f = 0; f < e.length; f++) {
                    d.ᐃⵠⲆΔⲆΔⵠ(e[f]);
                    var g = d.ᐃᐃΔⵠⵠ(e[f]);
                    if (g) {
                        g.ᐃⵠⲆᐃΔ = g.ⵠᐃⵠΔⵠ || 0;
                        g.ⲆⲆⲆΔΔᐃΔ = 0;
                        g.ⵠΔⲆΔⲆ = true;
                        g.Ⲇⵠⵠⵠᐃ = true;
                        d.ⲆⵠⲆⵠⵠⲆⲆ(e[f]);
                        if (g.ᐃΔⵠⵠ) {
                            if (d.ᐃⵠΔΔⲆ) {
                                if (g.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ) {
                                    if (g.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ.stop === undefined) {
                                        g.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ.ⵠᐃⵠΔΔᐃⵠΔᐃ(0);
                                    } else {
                                        g.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ.stop(0);
                                    }
                                    d.ΔᐃΔᐃᐃΔᐃ(g.ᐃΔⵠⵠ);
                                }
                            } else if (!isNaN(g.ᐃΔⵠⵠ.duration) || g.ᐃΔⵠⵠ.duration === Infinity) {
                                g.ᐃΔⵠⵠ.currentTime = g.ⵠᐃⵠΔⵠ || 0;
                                g.ᐃΔⵠⵠ.pause();
                            }
                        }
                        if (!c) {
                            d.ᐃᐃⵠⲆⲆ("stop", g.ᐃᐃⲆΔ);
                        }
                    }
                }
                return d;
            },
            ᐃⲆᐃⵠΔⲆΔ: function (b, d) {
                var e = this;
                if (e.ⲆᐃⲆᐃΔ !== "loaded") {
                    e.ᐃᐃⲆⲆⵠ.push({
                        event: "mute",
                        action: function () {
                            e.ᐃⲆᐃⵠΔⲆΔ(b, d);
                        }
                    });
                    return e;
                }
                if (d === undefined) {
                    if (typeof b != "boolean") {
                        return e.ᐃⵠⲆⲆⲆ;
                    }
                    e.ᐃⵠⲆⲆⲆ = b;
                }
                for (var f = e.ΔⵠΔΔΔ(d), g = 0; g < f.length; g++) {
                    var h = e.ᐃᐃΔⵠⵠ(f[g]);
                    if (h) {
                        h.ᐃⵠⲆⲆⲆ = b;
                        if (e.ᐃⵠΔΔⲆ && h.ᐃΔⵠⵠ) {
                            h.ᐃΔⵠⵠ.gain.setValueAtTime(b ? 0 : h.ᐃⵠᐃᐃⲆ, c.ᐃ.currentTime);
                        } else if (h.ᐃΔⵠⵠ) {
                            h.ᐃΔⵠⵠ.muted = !!c.ᐃⵠⲆⲆⲆ || b;
                        }
                        e.ᐃᐃⵠⲆⲆ("mute", h.ᐃᐃⲆΔ);
                    }
                }
                return e;
            },
            volume: function () {
                var b;
                var d;
                var f;
                var g = this;
                var h = arguments;
                if (h.length === 0) {
                    return g.ᐃⵠᐃᐃⲆ;
                }
                if (h.length === 1 || h.length === 2 && h[1] === undefined) {
                    if (g.ΔⵠΔΔΔ().indexOf(h[0]) >= 0) {
                        d = parseInt(h[0], 10);
                    } else {
                        b = parseFloat(h[0]);
                    }
                } else if (h.length >= 2) {
                    b = parseFloat(h[0]);
                    d = parseInt(h[1], 10);
                }
                if (b === undefined || b < 0 || b > 1) {
                    if (f = d ? g.ᐃᐃΔⵠⵠ(d) : g.ⵠᐃⵠΔⲆ[0]) {
                        return f.ᐃⵠᐃᐃⲆ;
                    } else {
                        return 0;
                    }
                }
                if (g.ⲆᐃⲆᐃΔ !== "loaded") {
                    g.ᐃᐃⲆⲆⵠ.push({
                        event: "volume",
                        action: function () {
                            g.volume.apply(g, h);
                        }
                    });
                    return g;
                }
                if (d === undefined) {
                    g.ᐃⵠᐃᐃⲆ = b;
                }
                d = g.ΔⵠΔΔΔ(d);
                for (var a = 0; a < d.length; a++) {
                    if (f = g.ᐃᐃΔⵠⵠ(d[a])) {
                        f.ᐃⵠᐃᐃⲆ = b;
                        if (!h[2]) {
                            g.ⲆⵠⲆⵠⵠⲆⲆ(d[a]);
                        }
                        if (g.ᐃⵠΔΔⲆ && f.ᐃΔⵠⵠ && !f.ᐃⵠⲆⲆⲆ) {
                            f.ᐃΔⵠⵠ.gain.setValueAtTime(b, c.ᐃ.currentTime);
                        } else if (f.ᐃΔⵠⵠ && !f.ᐃⵠⲆⲆⲆ) {
                            f.ᐃΔⵠⵠ.volume = b * c.volume();
                        }
                        g.ᐃᐃⵠⲆⲆ("volume", f.ᐃᐃⲆΔ);
                    }
                }
                return g;
            },
            fade: function (f, e, i, j) {
                var k = this;
                var a = Math.abs(f - e);
                var n = f > e ? "out" : "in";
                var o = a / 0.01;
                var p = o > 0 ? i / o : i;
                if (p < 4) {
                    o = Math.ceil(o / (4 / p));
                    p = 4;
                }
                if (k.ⲆᐃⲆᐃΔ !== "loaded") {
                    k.ᐃᐃⲆⲆⵠ.push({
                        event: "fade",
                        action: function () {
                            k.fade(f, e, i, j);
                        }
                    });
                    return k;
                }
                k.volume(f, j);
                for (var q = k.ΔⵠΔΔΔ(j), g = 0; g < q.length; g++) {
                    var r = k.ᐃᐃΔⵠⵠ(q[g]);
                    if (r) {
                        if (!j) {
                            k.ⲆⵠⲆⵠⵠⲆⲆ(q[g]);
                        }
                        if (k.ᐃⵠΔΔⲆ && !r.ᐃⵠⲆⲆⲆ) {
                            var s = c.ᐃ.currentTime;
                            var t = s + i / 1000;
                            r.ᐃⵠᐃᐃⲆ = f;
                            r.ᐃΔⵠⵠ.gain.setValueAtTime(f, s);
                            r.ᐃΔⵠⵠ.gain.linearRampToValueAtTime(e, t);
                        }
                        var w = f;
                        r.ⲆᐃⲆΔΔᐃᐃ = setInterval(function (a, b) {
                            if (o > 0) {
                                w += n === "in" ? 0.01 : -0.01;
                            }
                            w = Math.max(0, w);
                            w = Math.min(1, w);
                            w = Math.round(w * 100) / 100;
                            if (k.ᐃⵠΔΔⲆ) {
                                if (j === undefined) {
                                    k.ᐃⵠᐃᐃⲆ = w;
                                }
                                b.ᐃⵠᐃᐃⲆ = w;
                            } else {
                                k.volume(w, a, true);
                            }
                            if (e < f && w <= e || e > f && w >= e) {
                                clearInterval(b.ⲆᐃⲆΔΔᐃᐃ);
                                b.ⲆᐃⲆΔΔᐃᐃ = null;
                                k.volume(e, a);
                                k.ᐃᐃⵠⲆⲆ("fade", a);
                            }
                        }.bind(k, q[g], r), p);
                    }
                }
                return k;
            },
            ⲆⵠⲆⵠⵠⲆⲆ: function (a) {
                var b = this;
                var d = b.ᐃᐃΔⵠⵠ(a);
                if (d && d.ⲆᐃⲆΔΔᐃᐃ) {
                    if (b.ᐃⵠΔΔⲆ) {
                        d.ᐃΔⵠⵠ.gain.cancelScheduledValues(c.ᐃ.currentTime);
                    }
                    clearInterval(d.ⲆᐃⲆΔΔᐃᐃ);
                    d.ⲆᐃⲆΔΔᐃᐃ = null;
                    b.ᐃᐃⵠⲆⲆ("fade", a);
                }
                return b;
            },
            loop: function () {
                var b;
                var c;
                var d;
                var f = this;
                var g = arguments;
                if (g.length === 0) {
                    return f.ΔᐃⵠᐃΔ;
                }
                if (g.length === 1) {
                    if (typeof g[0] != "boolean") {
                        return !!(d = f.ᐃᐃΔⵠⵠ(parseInt(g[0], 10))) && d.ΔᐃⵠᐃΔ;
                    }
                    b = g[0];
                    f.ΔᐃⵠᐃΔ = b;
                } else if (g.length === 2) {
                    b = g[0];
                    c = parseInt(g[1], 10);
                }
                for (var h = f.ΔⵠΔΔΔ(c), a = 0; a < h.length; a++) {
                    if (d = f.ᐃᐃΔⵠⵠ(h[a])) {
                        d.ΔᐃⵠᐃΔ = b;
                        if (f.ᐃⵠΔΔⲆ && d.ᐃΔⵠⵠ && d.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ) {
                            d.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ.loop = b;
                            if (b) {
                                d.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ.loopStart = d.ⵠᐃⵠΔⵠ || 0;
                                d.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ.loopEnd = d.ⲆⵠᐃΔᐃᐃᐃ;
                            }
                        }
                    }
                }
                return f;
            },
            rate: function () {
                var b;
                var d;
                var f;
                var g = this;
                var j = arguments;
                if (j.length === 0) {
                    d = g.ⵠᐃⵠΔⲆ[0].ᐃᐃⲆΔ;
                } else if (j.length === 1) {
                    if (g.ΔⵠΔΔΔ().indexOf(j[0]) >= 0) {
                        d = parseInt(j[0], 10);
                    } else {
                        b = parseFloat(j[0]);
                    }
                } else if (j.length === 2) {
                    b = parseFloat(j[0]);
                    d = parseInt(j[1], 10);
                }
                if (typeof b != "number") {
                    if (f = g.ᐃᐃΔⵠⵠ(d)) {
                        return f.ΔᐃⵠᐃⲆ;
                    } else {
                        return g.ΔᐃⵠᐃⲆ;
                    }
                }
                if (g.ⲆᐃⲆᐃΔ !== "loaded") {
                    g.ᐃᐃⲆⲆⵠ.push({
                        event: "rate",
                        action: function () {
                            g.rate.apply(g, j);
                        }
                    });
                    return g;
                }
                if (d === undefined) {
                    g.ΔᐃⵠᐃⲆ = b;
                }
                d = g.ΔⵠΔΔΔ(d);
                for (var a = 0; a < d.length; a++) {
                    if (f = g.ᐃᐃΔⵠⵠ(d[a])) {
                        f.ⲆⲆⲆΔΔᐃΔ = g.ᐃⲆⵠᐃᐃΔⵠ(d[a]);
                        f.ΔⲆΔⲆⲆⵠᐃ = g.ᐃⵠΔΔⲆ ? c.ᐃ.currentTime : f.ΔⲆΔⲆⲆⵠᐃ;
                        f.ΔᐃⵠᐃⲆ = b;
                        if (g.ᐃⵠΔΔⲆ && f.ᐃΔⵠⵠ && f.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ) {
                            f.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ.playbackRate.value = b;
                        } else if (f.ᐃΔⵠⵠ) {
                            f.ᐃΔⵠⵠ.playbackRate = b;
                        }
                        var k = g.ᐃⲆⵠᐃᐃΔⵠ(d[a]);
                        var l = ((g.ⲆⲆΔⲆᐃ[f.ⲆⲆΔⲆᐃ][0] + g.ⲆⲆΔⲆᐃ[f.ⲆⲆΔⲆᐃ][1]) / 1000 - k) * 1000 / Math.abs(f.ΔᐃⵠᐃⲆ);
                        if (!!g.ΔᐃᐃΔⲆᐃⵠ[d[a]] || !f.ⵠΔⲆΔⲆ) {
                            g.ᐃⵠⲆΔⲆΔⵠ(d[a]);
                            g.ΔᐃᐃΔⲆᐃⵠ[d[a]] = setTimeout(g.Ⲇⵠⵠⵠᐃ.bind(g, f), l);
                        }
                        g.ᐃᐃⵠⲆⲆ("rate", f.ᐃᐃⲆΔ);
                    }
                }
                return g;
            },
            ᐃⲆⵠᐃᐃΔⵠ: function () {
                var b;
                var d;
                var f = this;
                var g = arguments;
                if (g.length === 0) {
                    d = f.ⵠᐃⵠΔⲆ[0].ᐃᐃⲆΔ;
                } else if (g.length === 1) {
                    if (f.ΔⵠΔΔΔ().indexOf(g[0]) >= 0) {
                        d = parseInt(g[0], 10);
                    } else {
                        d = f.ⵠᐃⵠΔⲆ[0].ᐃᐃⲆΔ;
                        b = parseFloat(g[0]);
                    }
                } else if (g.length === 2) {
                    b = parseFloat(g[0]);
                    d = parseInt(g[1], 10);
                }
                if (d === undefined) {
                    return f;
                }
                if (f.ⲆᐃⲆᐃΔ !== "loaded") {
                    f.ᐃᐃⲆⲆⵠ.push({
                        event: "seek",
                        action: function () {
                            f.ᐃⲆⵠᐃᐃΔⵠ.apply(f, g);
                        }
                    });
                    return f;
                }
                var j = f.ᐃᐃΔⵠⵠ(d);
                if (j) {
                    if (typeof b != "number" || b < 0) {
                        if (f.ᐃⵠΔΔⲆ) {
                            var a = f.ᐃⵠⲆΔᐃΔⵠ(d) ? c.ᐃ.currentTime - j.ΔⲆΔⲆⲆⵠᐃ : 0;
                            var k = j.ⲆⲆⲆΔΔᐃΔ ? j.ⲆⲆⲆΔΔᐃΔ - j.ᐃⵠⲆᐃΔ : 0;
                            return j.ᐃⵠⲆᐃΔ + (k + a * Math.abs(j.ΔᐃⵠᐃⲆ));
                        }
                        return j.ᐃΔⵠⵠ.currentTime;
                    }
                    var l = f.ᐃⵠⲆΔᐃΔⵠ(d);
                    if (l) {
                        f.pause(d, true);
                    }
                    j.ᐃⵠⲆᐃΔ = b;
                    j.Ⲇⵠⵠⵠᐃ = false;
                    f.ᐃⵠⲆΔⲆΔⵠ(d);
                    if (l) {
                        f.play(d, true);
                    }
                    if (!f.ᐃⵠΔΔⲆ && j.ᐃΔⵠⵠ) {
                        j.ᐃΔⵠⵠ.currentTime = b;
                    }
                    f.ᐃᐃⵠⲆⲆ("seek", d);
                }
                return f;
            },
            ᐃⵠⲆΔᐃΔⵠ: function (a) {
                var b = this;
                if (typeof a == "number") {
                    var c = b.ᐃᐃΔⵠⵠ(a);
                    return !!c && !c.ⵠΔⲆΔⲆ;
                }
                for (var d = 0; d < b.ⵠᐃⵠΔⲆ.length; d++) {
                    if (!b.ⵠᐃⵠΔⲆ[d].ⵠΔⲆΔⲆ) {
                        return true;
                    }
                }
                return false;
            },
            duration: function (a) {
                var b = this;
                var c = b.ⲆⲆΔΔⲆⵠΔ;
                var d = b.ᐃᐃΔⵠⵠ(a);
                if (d) {
                    c = b.ⲆⲆΔⲆᐃ[d.ⲆⲆΔⲆᐃ][1] / 1000;
                }
                return c;
            },
            state: function () {
                return this.ⲆᐃⲆᐃΔ;
            },
            ΔⲆΔⵠⲆᐃΔ: function () {
                var a = this;
                for (var b = a.ⵠᐃⵠΔⲆ, d = 0; d < b.length; d++) {
                    if (!b[d].ⵠΔⲆΔⲆ) {
                        a.stop(b[d].ᐃᐃⲆΔ);
                    }
                    if (!a.ᐃⵠΔΔⲆ) {
                        if (!/MSIE |Trident\//.test(c.ⵠⵠᐃⵠⲆ && c.ⵠⵠᐃⵠⲆ.userAgent)) {
                            b[d].ᐃΔⵠⵠ.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
                        }
                        b[d].ᐃΔⵠⵠ.removeEventListener("error", b[d].ᐃⵠᐃᐃᐃᐃᐃ, false);
                        b[d].ᐃΔⵠⵠ.removeEventListener(c.ⲆⲆⲆⵠⵠᐃΔ, b[d].ⲆⲆⵠᐃᐃⵠⲆ, false);
                    }
                    delete b[d].ᐃΔⵠⵠ;
                    a.ᐃⵠⲆΔⲆΔⵠ(b[d].ᐃᐃⲆΔ);
                    var f = c.ᐃΔⵠⲆⵠ.indexOf(a);
                    if (f >= 0) {
                        c.ᐃΔⵠⲆⵠ.splice(f, 1);
                    }
                }
                var g = true;
                for (d = 0; d < c.ᐃΔⵠⲆⵠ.length; d++) {
                    if (c.ᐃΔⵠⲆⵠ[d].ⲆⵠᐃΔⲆ === a.ⲆⵠᐃΔⲆ) {
                        g = false;
                        break;
                    }
                }
                if (j && g) {
                    delete j[a.ⲆⵠᐃΔⲆ];
                }
                c.ⵠⵠΔⵠΔⵠᐃ = false;
                a.ⲆᐃⲆᐃΔ = "unloaded";
                a.ⵠᐃⵠΔⲆ = [];
                a = null;
                return null;
            },
            on: function (a, b, c, d) {
                var e = this["_on" + a];
                if (typeof b == "function") {
                    e.push(d ? {
                        id: c,
                        ᐃΔⲆⲆΔ: b,
                        once: d
                    } : {
                        id: c,
                        ᐃΔⲆⲆΔ: b
                    });
                }
                return this;
            },
            ᐃΔΔⵠᐃΔⲆᐃᐃ: function (b, c, d) {
                var e = this;
                var f = e["_on" + b];
                var g = 0;
                if (typeof c == "number") {
                    d = c;
                    c = null;
                }
                if (c || d) {
                    for (g = 0; g < f.length; g++) {
                        var h = d === f[g].id;
                        if (c === f[g].ᐃΔⲆⲆΔ && h || !c && h) {
                            f.splice(g, 1);
                            break;
                        }
                    }
                } else if (b) {
                    e["_on" + b] = [];
                } else {
                    var j = Object.keys(e);
                    for (g = 0; g < j.length; g++) {
                        if (j[g].indexOf("_on") === 0 && Array.isArray(e[j[g]])) {
                            e[j[g]] = [];
                        }
                    }
                }
                return e;
            },
            once: function (a, b, c) {
                this.on(a, b, c, 1);
                return this;
            },
            ᐃᐃⵠⲆⲆ: function (b, c, d) {
                var e = this;
                var f = e["_on" + b];
                for (var g = f.length - 1; g >= 0; g--) {
                    if (!f[g].id || f[g].id === c || b === "load") {
                        setTimeout(function (a) {
                            a.call(this, c, d);
                        }.bind(e, f[g].ᐃΔⲆⲆΔ), 0);
                        if (f[g].once) {
                            e.ᐃΔΔⵠᐃΔⲆᐃᐃ(b, f[g].ᐃΔⲆⲆΔ, f[g].id);
                        }
                    }
                }
                return e;
            },
            ⵠⲆᐃⵠΔⲆⲆ: function () {
                var a = this;
                if (a.ᐃᐃⲆⲆⵠ.length > 0) {
                    var b = a.ᐃᐃⲆⲆⵠ[0];
                    a.once(b.event, function () {
                        a.ᐃᐃⲆⲆⵠ.shift();
                        a.ⵠⲆᐃⵠΔⲆⲆ();
                    });
                    b.action();
                }
                return a;
            },
            Ⲇⵠⵠⵠᐃ: function (b) {
                var d = this;
                var e = b.ⲆⲆΔⲆᐃ;
                if (!d.ᐃⵠΔΔⲆ && d.ᐃΔⵠⵠ && !d.ᐃΔⵠⵠ.ended) {
                    setTimeout(d.Ⲇⵠⵠⵠᐃ.bind(d, b), 100);
                    return d;
                }
                var f = !!b.ΔᐃⵠᐃΔ || !!d.ⲆⲆΔⲆᐃ[e][2];
                d.ᐃᐃⵠⲆⲆ("end", b.ᐃᐃⲆΔ);
                if (!d.ᐃⵠΔΔⲆ && f) {
                    d.stop(b.ᐃᐃⲆΔ, true).play(b.ᐃᐃⲆΔ);
                }
                if (d.ᐃⵠΔΔⲆ && f) {
                    d.ᐃᐃⵠⲆⲆ("play", b.ᐃᐃⲆΔ);
                    b.ᐃⵠⲆᐃΔ = b.ⵠᐃⵠΔⵠ || 0;
                    b.ⲆⲆⲆΔΔᐃΔ = 0;
                    b.ΔⲆΔⲆⲆⵠᐃ = c.ᐃ.currentTime;
                    var g = (b.ⲆⵠᐃΔᐃᐃᐃ - b.ⵠᐃⵠΔⵠ) * 1000 / Math.abs(b.ΔᐃⵠᐃⲆ);
                    d.ΔᐃᐃΔⲆᐃⵠ[b.ᐃᐃⲆΔ] = setTimeout(d.Ⲇⵠⵠⵠᐃ.bind(d, b), g);
                }
                if (d.ᐃⵠΔΔⲆ && !f) {
                    b.ⵠΔⲆΔⲆ = true;
                    b.Ⲇⵠⵠⵠᐃ = true;
                    b.ᐃⵠⲆᐃΔ = b.ⵠᐃⵠΔⵠ || 0;
                    b.ⲆⲆⲆΔΔᐃΔ = 0;
                    d.ᐃⵠⲆΔⲆΔⵠ(b.ᐃᐃⲆΔ);
                    d.ΔᐃΔᐃᐃΔᐃ(b.ᐃΔⵠⵠ);
                    c.ΔⵠᐃΔⵠⵠΔ();
                }
                if (!d.ᐃⵠΔΔⲆ && !f) {
                    d.stop(b.ᐃᐃⲆΔ);
                }
                return d;
            },
            ᐃⵠⲆΔⲆΔⵠ: function (a) {
                var b = this;
                if (b.ΔᐃᐃΔⲆᐃⵠ[a]) {
                    clearTimeout(b.ΔᐃᐃΔⲆᐃⵠ[a]);
                    delete b.ΔᐃᐃΔⲆᐃⵠ[a];
                }
                return b;
            },
            ᐃᐃΔⵠⵠ: function (a) {
                for (var b = this, c = 0; c < b.ⵠᐃⵠΔⲆ.length; c++) {
                    if (a === b.ⵠᐃⵠΔⲆ[c].ᐃᐃⲆΔ) {
                        return b.ⵠᐃⵠΔⲆ[c];
                    }
                }
                return null;
            },
            ᐃⵠⲆΔᐃⵠⵠⲆⵠ: function () {
                var a = this;
                a.ⲆⵠΔⵠⵠⵠⲆᐃΔ();
                for (var b = 0; b < a.ⵠᐃⵠΔⲆ.length; b++) {
                    if (a.ⵠᐃⵠΔⲆ[b].Ⲇⵠⵠⵠᐃ) {
                        return a.ⵠᐃⵠΔⲆ[b].reset();
                    }
                }
                return new f(a);
            },
            ⲆⵠΔⵠⵠⵠⲆᐃΔ: function () {
                var a = this;
                var b = a.ⵠΔⵠΔⲆᐃⵠⲆΔ;
                var c = 0;
                var d = 0;
                if (a.ⵠᐃⵠΔⲆ.length >= b) {
                    for (d = 0; d < a.ⵠᐃⵠΔⲆ.length; d++) {
                        if (a.ⵠᐃⵠΔⲆ[d].Ⲇⵠⵠⵠᐃ) {
                            c++;
                        }
                    }
                    for (d = a.ⵠᐃⵠΔⲆ.length - 1; d >= 0; d--) {
                        if (c <= b) {
                            return;
                        }
                        if (a.ⵠᐃⵠΔⲆ[d].Ⲇⵠⵠⵠᐃ) {
                            if (a.ᐃⵠΔΔⲆ && a.ⵠᐃⵠΔⲆ[d].ᐃΔⵠⵠ) {
                                a.ⵠᐃⵠΔⲆ[d].ᐃΔⵠⵠ.disconnect(0);
                            }
                            a.ⵠᐃⵠΔⲆ.splice(d, 1);
                            c--;
                        }
                    }
                }
            },
            ΔⵠΔΔΔ: function (a) {
                if (a === undefined) {
                    var b = [];
                    for (var c = 0; c < this.ⵠᐃⵠΔⲆ.length; c++) {
                        b.push(this.ⵠᐃⵠΔⲆ[c].ᐃᐃⲆΔ);
                    }
                    return b;
                }
                return [a];
            },
            ⵠⲆⵠΔᐃⲆΔⵠⵠ: function (a) {
                a.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ = c.ᐃ.createBufferSource();
                a.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ.buffer = j[this.ⲆⵠᐃΔⲆ];
                if (a.ⵠΔᐃᐃΔ) {
                    a.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ.connect(a.ⵠΔᐃᐃΔ);
                } else {
                    a.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ.connect(a.ᐃΔⵠⵠ);
                }
                a.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ.loop = a.ΔᐃⵠᐃΔ;
                if (a.ΔᐃⵠᐃΔ) {
                    a.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ.loopStart = a.ⵠᐃⵠΔⵠ || 0;
                    a.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ.loopEnd = a.ⲆⵠᐃΔᐃᐃᐃ;
                }
                a.ᐃΔⵠⵠ.ⲆᐃⲆⲆⵠ.playbackRate.value = a.ΔᐃⵠᐃⲆ;
                return this;
            },
            ΔᐃΔᐃᐃΔᐃ: function (a) {
                var b = this;
                if (b.ⲆⲆᐃᐃᐃΔⲆ) {
                    a.ⲆᐃⲆⲆⵠ.onended = null;
                    a.ⲆᐃⲆⲆⵠ.disconnect(0);
                    try {
                        a.ⲆᐃⲆⲆⵠ.buffer = b.ⲆⲆᐃᐃᐃΔⲆ;
                    } catch (a) { }
                }
                a.ⲆᐃⲆⲆⵠ = null;
                return b;
            }
        };
        function f(a) {
            this.ΔⵠⲆⵠⵠⲆᐃ = a;
            this.ᐃᐃⵠΔⵠ();
        }
        f.prototype = {
            ᐃᐃⵠΔⵠ: function () {
                var a = this;
                var b = a.ΔⵠⲆⵠⵠⲆᐃ;
                a.ᐃⵠⲆⲆⲆ = b.ᐃⵠⲆⲆⲆ;
                a.ΔᐃⵠᐃΔ = b.ΔᐃⵠᐃΔ;
                a.ᐃⵠᐃᐃⲆ = b.ᐃⵠᐃᐃⲆ;
                a.ΔᐃⵠᐃⲆ = b.ΔᐃⵠᐃⲆ;
                a.ᐃⵠⲆᐃΔ = 0;
                a.ⵠΔⲆΔⲆ = true;
                a.Ⲇⵠⵠⵠᐃ = true;
                a.ⲆⲆΔⲆᐃ = "__default";
                a.ᐃᐃⲆΔ = ++c.ᐃᐃⵠⲆⲆΔⲆ;
                b.ⵠᐃⵠΔⲆ.push(a);
                a.create();
                return a;
            },
            create: function () {
                var a = this;
                var b = a.ΔⵠⲆⵠⵠⲆᐃ;
                var d = c.ᐃⵠⲆⲆⲆ || a.ᐃⵠⲆⲆⲆ || a.ΔⵠⲆⵠⵠⲆᐃ.ᐃⵠⲆⲆⲆ ? 0 : a.ᐃⵠᐃᐃⲆ;
                if (b.ᐃⵠΔΔⲆ) {
                    a.ᐃΔⵠⵠ = c.ᐃ.createGain === undefined ? c.ᐃ.ᐃⲆⲆΔⲆⵠⲆⲆᐃ() : c.ᐃ.createGain();
                    a.ᐃΔⵠⵠ.gain.setValueAtTime(d, c.ᐃ.currentTime);
                    a.ᐃΔⵠⵠ.paused = true;
                    a.ᐃΔⵠⵠ.connect(c.ⵠΔᐃᐃⵠⵠᐃ);
                } else {
                    a.ᐃΔⵠⵠ = new Audio();
                    a.ᐃⵠᐃᐃᐃᐃᐃ = a.ⵠⵠⲆⲆΔⵠΔΔⵠ.bind(a);
                    a.ᐃΔⵠⵠ.addEventListener("error", a.ᐃⵠᐃᐃᐃᐃᐃ, false);
                    a.ⲆⲆⵠᐃᐃⵠⲆ = a.ⲆⵠᐃᐃⵠᐃⲆⲆⵠ.bind(a);
                    a.ᐃΔⵠⵠ.addEventListener(c.ⲆⲆⲆⵠⵠᐃΔ, a.ⲆⲆⵠᐃᐃⵠⲆ, false);
                    a.ᐃΔⵠⵠ.src = b.ⲆⵠᐃΔⲆ;
                    a.ᐃΔⵠⵠ.preload = "auto";
                    a.ᐃΔⵠⵠ.volume = d * c.volume();
                    a.ᐃΔⵠⵠ.load();
                }
                return a;
            },
            reset: function () {
                var a = this;
                var b = a.ΔⵠⲆⵠⵠⲆᐃ;
                a.ᐃⵠⲆⲆⲆ = b.ᐃⵠⲆⲆⲆ;
                a.ΔᐃⵠᐃΔ = b.ΔᐃⵠᐃΔ;
                a.ᐃⵠᐃᐃⲆ = b.ᐃⵠᐃᐃⲆ;
                a.ΔᐃⵠᐃⲆ = b.ΔᐃⵠᐃⲆ;
                a.ᐃⵠⲆᐃΔ = 0;
                a.ⲆⲆⲆΔΔᐃΔ = 0;
                a.ⵠΔⲆΔⲆ = true;
                a.Ⲇⵠⵠⵠᐃ = true;
                a.ⲆⲆΔⲆᐃ = "__default";
                a.ᐃᐃⲆΔ = ++c.ᐃᐃⵠⲆⲆΔⲆ;
                return a;
            },
            ⵠⵠⲆⲆΔⵠΔΔⵠ: function () {
                var a = this;
                a.ΔⵠⲆⵠⵠⲆᐃ.ᐃᐃⵠⲆⲆ("loaderror", a.ᐃᐃⲆΔ, a.ᐃΔⵠⵠ.error ? a.ᐃΔⵠⵠ.error.code : 0);
                a.ᐃΔⵠⵠ.removeEventListener("error", a.ᐃⵠᐃᐃᐃᐃᐃ, false);
            },
            ⲆⵠᐃᐃⵠᐃⲆⲆⵠ: function () {
                var a = this;
                var b = a.ΔⵠⲆⵠⵠⲆᐃ;
                b.ⲆⲆΔΔⲆⵠΔ = Math.ceil(a.ᐃΔⵠⵠ.duration * 10) / 10;
                if (Object.keys(b.ⲆⲆΔⲆᐃ).length === 0) {
                    b.ⲆⲆΔⲆᐃ = {
                        ᐃΔⵠΔⲆⵠⲆⲆΔ: [0, b.ⲆⲆΔΔⲆⵠΔ * 1000]
                    };
                }
                if (b.ⲆᐃⲆᐃΔ !== "loaded") {
                    b.ⲆᐃⲆᐃΔ = "loaded";
                    b.ᐃᐃⵠⲆⲆ("load");
                    b.ⵠⲆᐃⵠΔⲆⲆ();
                }
                a.ᐃΔⵠⵠ.removeEventListener(c.ⲆⲆⲆⵠⵠᐃΔ, a.ⲆⲆⵠᐃᐃⵠⲆ, false);
            }
        };
        var j = {};
        function a(a) {
            var b = a.ⲆⵠᐃΔⲆ;
            if (j[b]) {
                a.ⲆⲆΔΔⲆⵠΔ = j[b].duration;
                h(a);
                return;
            }
            if (/^data:[^;]+;base64,/.test(b)) {
                for (var c = atob(b.split(",")[1]), d = new Uint8Array(c.length), e = 0; e < c.length; ++e) {
                    d[e] = c.charCodeAt(e);
                }
                m(d.buffer, a);
            } else {
                var f = new XMLHttpRequest();
                f.open("GET", b, true);
                f.responseType = "arraybuffer";
                f.onload = function () {
                    var b = (f.status + "")[0];
                    if (b === "0" || b === "2" || b === "3") {
                        m(f.response, a);
                    } else {
                        a.ᐃᐃⵠⲆⲆ("loaderror", null, "Failed loading audio file with status: " + f.status + ".");
                    }
                };
                f.onerror = function () {
                    if (a.ᐃⵠΔΔⲆ) {
                        a.ΔⲆⵠᐃⵠⵠΔ = true;
                        a.ᐃⵠΔΔⲆ = false;
                        a.ⵠᐃⵠΔⲆ = [];
                        delete j[b];
                        a.load();
                    }
                };
                k(f);
            }
        }
        function k(a) {
            try {
                a.send();
            } catch (b) {
                a.onerror();
            }
        }
        function m(a, b) {
            c.ᐃ.decodeAudioData(a, function (a) {
                if (a && b.ⵠᐃⵠΔⲆ.length > 0) {
                    j[b.ⲆⵠᐃΔⲆ] = a;
                    h(b, a);
                }
            }, function () {
                b.ᐃᐃⵠⲆⲆ("loaderror", null, "Decoding audio data failed.");
            });
        }
        function h(a, b) {
            if (b && !a.ⲆⲆΔΔⲆⵠΔ) {
                a.ⲆⲆΔΔⲆⵠΔ = b.duration;
            }
            if (Object.keys(a.ⲆⲆΔⲆᐃ).length === 0) {
                a.ⲆⲆΔⲆᐃ = {
                    ᐃΔⵠΔⲆⵠⲆⲆΔ: [0, a.ⲆⲆΔΔⲆⵠΔ * 1000]
                };
            }
            if (a.ⲆᐃⲆᐃΔ !== "loaded") {
                a.ⲆᐃⲆᐃΔ = "loaded";
                a.ᐃᐃⵠⲆⲆ("load");
                a.ⵠⲆᐃⵠΔⲆⲆ();
            }
        }
        function i() {
            try {
                if (typeof AudioContext != "undefined") {
                    c.ᐃ = new AudioContext();
                } else if (typeof ⵠⵠⵠΔⵠᐃΔΔⲆ != "undefined") {
                    c.ᐃ = new ⵠⵠⵠΔⵠᐃΔΔⲆ();
                } else {
                    c.ⵠⲆᐃᐃΔ = false;
                }
            } catch (a) {
                c.ⵠⲆᐃᐃΔ = false;
            }
            var a = /iP(hone|od|ad)/.test(c.ⵠⵠᐃⵠⲆ && c.ⵠⵠᐃⵠⲆ.platform);
            var b = c.ⵠⵠᐃⵠⲆ && c.ⵠⵠᐃⵠⲆ.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
            var d = b ? parseInt(b[1], 10) : null;
            if (a && d && d < 9) {
                var e = /safari/.test(c.ⵠⵠᐃⵠⲆ && c.ⵠⵠᐃⵠⲆ.userAgent.toLowerCase());
                if (c.ⵠⵠᐃⵠⲆ && c.ⵠⵠᐃⵠⲆ.ᐃᐃᐃᐃᐃⵠⵠⵠΔ && !e || c.ⵠⵠᐃⵠⲆ && !c.ⵠⵠᐃⵠⲆ.ᐃᐃᐃᐃᐃⵠⵠⵠΔ && !e) {
                    c.ⵠⲆᐃᐃΔ = false;
                }
            }
            if (c.ⵠⲆᐃᐃΔ) {
                c.ⵠΔᐃᐃⵠⵠᐃ = c.ᐃ.createGain === undefined ? c.ᐃ.ᐃⲆⲆΔⲆⵠⲆⲆᐃ() : c.ᐃ.createGain();
                c.ⵠΔᐃᐃⵠⵠᐃ.gain.value = c.ᐃⵠⲆⲆⲆ ? 0 : 1;
                c.ⵠΔᐃᐃⵠⵠᐃ.connect(c.ᐃ.destination);
            }
            c.ⵠⵠⵠᐃΔᐃᐃ();
        }
        if (typeof ⲆΔΔⲆⲆⲆΔ == "function" && ⲆΔΔⲆⲆⲆΔ.ΔⲆᐃⵠⲆⲆⲆ) {
            ⲆΔΔⲆⲆⲆΔ([], function () {
                return {
                    Howler: c,
                    Howl: d
                };
            });
        }
        if (typeof ⵠⲆᐃᐃΔΔᐃ != "undefined") {
            ⵠⲆᐃᐃΔΔᐃ.Howler = c;
            ⵠⲆᐃᐃΔΔᐃ.Howl = d;
        }
        if (typeof hc != "undefined") {
            hc.ⲆⲆᐃⵠᐃⲆΔ = b;
            hc.Howler = c;
            hc.Howl = d;
            hc.ⵠⲆⲆΔⵠΔΔ = f;
        } else if (typeof ΔⲆΔΔᐃⵠᐃ != "undefined") {
            ΔⲆΔΔᐃⵠᐃ.ⲆⲆᐃⵠᐃⲆΔ = b;
            ΔⲆΔΔᐃⵠᐃ.Howler = c;
            ΔⲆΔΔᐃⵠᐃ.Howl = d;
            ΔⲆΔΔᐃⵠᐃ.ⵠⲆⲆΔⵠΔΔ = f;
        }
    })();
    (function () {
        ⲆⲆᐃⵠᐃⲆΔ.prototype.ⵠⵠⲆᐃⲆ = [0, 0, 0];
        ⲆⲆᐃⵠᐃⲆΔ.prototype.ⲆΔⵠᐃᐃ = [0, 0, -1, 0, 1, 0];
        ⲆⲆᐃⵠᐃⲆΔ.prototype.ΔΔΔⵠⵠⵠⵠ = function (a) {
            var b = this;
            if (!b.ᐃ || !b.ᐃ.listener) {
                return b;
            }
            for (var c = b.ᐃΔⵠⲆⵠ.length - 1; c >= 0; c--) {
                b.ᐃΔⵠⲆⵠ[c].ΔΔΔⵠⵠⵠⵠ(a);
            }
            return b;
        };
        ⲆⲆᐃⵠᐃⲆΔ.prototype.ᐃⲆⵠⲆ = function (a, b, c) {
            var d = this;
            if (d.ᐃ && d.ᐃ.listener) {
                b = typeof b != "number" ? d.ⵠⵠⲆᐃⲆ[1] : b;
                c = typeof c != "number" ? d.ⵠⵠⲆᐃⲆ[2] : c;
                if (typeof a != "number") {
                    return d.ⵠⵠⲆᐃⲆ;
                } else {
                    d.ⵠⵠⲆᐃⲆ = [a, b, c];
                    d.ᐃ.listener.setPosition(d.ⵠⵠⲆᐃⲆ[0], d.ⵠⵠⲆᐃⲆ[1], d.ⵠⵠⲆᐃⲆ[2]);
                    return d;
                }
            } else {
                return d;
            }
        };
        ⲆⲆᐃⵠᐃⲆΔ.prototype.orientation = function (b, c, d, e, f, g) {
            var h = this;
            if (!h.ᐃ || !h.ᐃ.listener) {
                return h;
            }
            var j = h.ⲆΔⵠᐃᐃ;
            c = typeof c != "number" ? j[1] : c;
            d = typeof d != "number" ? j[2] : d;
            e = typeof e != "number" ? j[3] : e;
            f = typeof f != "number" ? j[4] : f;
            g = typeof g != "number" ? j[5] : g;
            if (typeof b != "number") {
                return j;
            } else {
                h.ⲆΔⵠᐃᐃ = [b, c, d, e, f, g];
                h.ᐃ.listener.setOrientation(b, c, d, e, f, g);
                return h;
            }
        };
        Howl.prototype.ᐃᐃⵠΔⵠ = function (a) {
            return function (b) {
                var c = this;
                c.ⲆΔⵠᐃᐃ = b.orientation || [1, 0, 0];
                c.ΔΔΔᐃᐃΔᐃ = b.ΔΔΔⵠⵠⵠⵠ || null;
                c.ⵠⵠⲆᐃⲆ = b.ᐃⲆⵠⲆ || null;
                c.ᐃΔⵠᐃⵠ = {
                    coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : 360,
                    coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : 360,
                    coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : 0,
                    distanceModel: b.distanceModel !== undefined ? b.distanceModel : "inverse",
                    maxDistance: b.maxDistance !== undefined ? b.maxDistance : 10000,
                    panningModel: b.panningModel !== undefined ? b.panningModel : "HRTF",
                    refDistance: b.refDistance !== undefined ? b.refDistance : 1,
                    rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : 1
                };
                c.ⲆᐃⲆⵠΔΔⵠΔΔ = b.ᐃᐃΔᐃΔΔⲆΔᐃ ? [{
                    ᐃΔⲆⲆΔ: b.ᐃᐃΔᐃΔΔⲆΔᐃ
                }] : [];
                c.ⵠΔΔᐃⵠⵠⲆⲆΔ = b.ᐃᐃⵠΔⲆΔᐃⵠᐃ ? [{
                    ᐃΔⲆⲆΔ: b.ᐃᐃⵠΔⲆΔᐃⵠᐃ
                }] : [];
                c.ⵠΔᐃΔⵠᐃⵠᐃⲆ = b.ᐃΔⲆⲆΔⵠⲆⲆᐃ ? [{
                    ᐃΔⲆⲆΔ: b.ᐃΔⲆⲆΔⵠⲆⲆᐃ
                }] : [];
                return a.call(this, b);
            };
        }(Howl.prototype.ᐃᐃⵠΔⵠ);
        Howl.prototype.ΔΔΔⵠⵠⵠⵠ = function (c, d) {
            var e = this;
            if (!e.ᐃⵠΔΔⲆ) {
                return e;
            }
            if (e.ⲆᐃⲆᐃΔ !== "loaded") {
                e.ᐃᐃⲆⲆⵠ.push({
                    event: "stereo",
                    action: function () {
                        e.ΔΔΔⵠⵠⵠⵠ(c, d);
                    }
                });
                return e;
            }
            var f = Howler.ᐃ.createStereoPanner === undefined ? "spatial" : "stereo";
            if (d === undefined) {
                if (typeof c != "number") {
                    return e.ΔΔΔᐃᐃΔᐃ;
                }
                e.ΔΔΔᐃᐃΔᐃ = c;
                e.ⵠⵠⲆᐃⲆ = [c, 0, 0];
            }
            for (var g = e.ΔⵠΔΔΔ(d), a = 0; a < g.length; a++) {
                var h = e.ᐃᐃΔⵠⵠ(g[a]);
                if (h) {
                    if (typeof c != "number") {
                        return h.ΔΔΔᐃᐃΔᐃ;
                    }
                    h.ΔΔΔᐃᐃΔᐃ = c;
                    h.ⵠⵠⲆᐃⲆ = [c, 0, 0];
                    if (h.ᐃΔⵠⵠ) {
                        h.ᐃΔⵠᐃⵠ.panningModel = "equalpower";
                        if (!h.ⵠΔᐃᐃΔ || !h.ⵠΔᐃᐃΔ.pan) {
                            b(h, f);
                        }
                        if (f === "spatial") {
                            h.ⵠΔᐃᐃΔ.setPosition(c, 0, 0);
                        } else {
                            h.ⵠΔᐃᐃΔ.pan.value = c;
                        }
                    }
                    e.ᐃᐃⵠⲆⲆ("stereo", h.ᐃᐃⲆΔ);
                }
            }
            return e;
        };
        Howl.prototype.ᐃⲆⵠⲆ = function (c, d, e, f) {
            var g = this;
            if (!g.ᐃⵠΔΔⲆ) {
                return g;
            }
            if (g.ⲆᐃⲆᐃΔ !== "loaded") {
                g.ᐃᐃⲆⲆⵠ.push({
                    event: "pos",
                    action: function () {
                        g.ᐃⲆⵠⲆ(c, d, e, f);
                    }
                });
                return g;
            }
            d = typeof d != "number" ? 0 : d;
            e = typeof e != "number" ? -0.5 : e;
            if (f === undefined) {
                if (typeof c != "number") {
                    return g.ⵠⵠⲆᐃⲆ;
                }
                g.ⵠⵠⲆᐃⲆ = [c, d, e];
            }
            for (var a = g.ΔⵠΔΔΔ(f), i = 0; i < a.length; i++) {
                var j = g.ᐃᐃΔⵠⵠ(a[i]);
                if (j) {
                    if (typeof c != "number") {
                        return j.ⵠⵠⲆᐃⲆ;
                    }
                    j.ⵠⵠⲆᐃⲆ = [c, d, e];
                    if (j.ᐃΔⵠⵠ) {
                        if (!j.ⵠΔᐃᐃΔ || !!j.ⵠΔᐃᐃΔ.pan) {
                            b(j, "spatial");
                        }
                        j.ⵠΔᐃᐃΔ.setPosition(c, d, e);
                    }
                    g.ᐃᐃⵠⲆⲆ("pos", j.ᐃᐃⲆΔ);
                }
            }
            return g;
        };
        Howl.prototype.orientation = function (c, d, e, f) {
            var g = this;
            if (!g.ᐃⵠΔΔⲆ) {
                return g;
            }
            if (g.ⲆᐃⲆᐃΔ !== "loaded") {
                g.ᐃᐃⲆⲆⵠ.push({
                    event: "orientation",
                    action: function () {
                        g.orientation(c, d, e, f);
                    }
                });
                return g;
            }
            d = typeof d != "number" ? g.ⲆΔⵠᐃᐃ[1] : d;
            e = typeof e != "number" ? g.ⲆΔⵠᐃᐃ[2] : e;
            if (f === undefined) {
                if (typeof c != "number") {
                    return g.ⲆΔⵠᐃᐃ;
                }
                g.ⲆΔⵠᐃᐃ = [c, d, e];
            }
            for (var a = g.ΔⵠΔΔΔ(f), i = 0; i < a.length; i++) {
                var j = g.ᐃᐃΔⵠⵠ(a[i]);
                if (j) {
                    if (typeof c != "number") {
                        return j.ⲆΔⵠᐃᐃ;
                    }
                    j.ⲆΔⵠᐃᐃ = [c, d, e];
                    if (j.ᐃΔⵠⵠ) {
                        if (!j.ⵠΔᐃᐃΔ) {
                            j.ⵠⵠⲆᐃⲆ ||= g.ⵠⵠⲆᐃⲆ || [0, 0, -0.5];
                            b(j, "spatial");
                        }
                        j.ⵠΔᐃᐃΔ.setOrientation(c, d, e);
                    }
                    g.ᐃᐃⵠⲆⲆ("orientation", j.ᐃᐃⲆΔ);
                }
            }
            return g;
        };
        Howl.prototype.ΔⵠⲆᐃⲆᐃΔΔⲆ = function () {
            var c;
            var d;
            var e;
            var f = this;
            var g = arguments;
            if (!f.ᐃⵠΔΔⲆ) {
                return f;
            }
            if (g.length === 0) {
                return f.ᐃΔⵠᐃⵠ;
            }
            if (g.length === 1) {
                if (typeof g[0] != "object") {
                    if (e = f.ᐃᐃΔⵠⵠ(parseInt(g[0], 10))) {
                        return e.ᐃΔⵠᐃⵠ;
                    } else {
                        return f.ᐃΔⵠᐃⵠ;
                    }
                }
                c = g[0];
                if (d === undefined) {
                    f.ᐃΔⵠᐃⵠ = {
                        coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : f.ΔⲆᐃᐃⵠⲆᐃⲆᐃ,
                        coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : f.ⲆΔⵠΔᐃⵠⵠⲆⵠ,
                        coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : f.ⵠΔᐃⲆΔᐃⵠΔΔ,
                        distanceModel: c.distanceModel !== undefined ? c.distanceModel : f.ΔⲆΔⵠⲆΔᐃᐃⲆ,
                        maxDistance: c.maxDistance !== undefined ? c.maxDistance : f.ⲆⵠⲆᐃⲆᐃⵠⵠⵠ,
                        panningModel: c.panningModel !== undefined ? c.panningModel : f.ᐃΔⲆΔⲆᐃⵠⲆⵠ,
                        refDistance: c.refDistance !== undefined ? c.refDistance : f.ΔᐃⲆⵠⵠΔᐃⲆⵠ,
                        rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : f.ⲆΔΔⲆΔᐃΔⲆⲆ
                    };
                }
            } else if (g.length === 2) {
                c = g[0];
                d = parseInt(g[1], 10);
            }
            for (var a = f.ΔⵠΔΔΔ(d), j = 0; j < a.length; j++) {
                if (e = f.ᐃᐃΔⵠⵠ(a[j])) {
                    var k = e.ᐃΔⵠᐃⵠ;
                    k = {
                        coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : k.coneInnerAngle,
                        coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : k.coneOuterAngle,
                        coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : k.coneOuterGain,
                        distanceModel: c.distanceModel !== undefined ? c.distanceModel : k.distanceModel,
                        maxDistance: c.maxDistance !== undefined ? c.maxDistance : k.maxDistance,
                        panningModel: c.panningModel !== undefined ? c.panningModel : k.panningModel,
                        refDistance: c.refDistance !== undefined ? c.refDistance : k.refDistance,
                        rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : k.rolloffFactor
                    };
                    var m = e.ⵠΔᐃᐃΔ;
                    if (m) {
                        m.coneInnerAngle = k.coneInnerAngle;
                        m.coneOuterAngle = k.coneOuterAngle;
                        m.coneOuterGain = k.coneOuterGain;
                        m.distanceModel = k.distanceModel;
                        m.maxDistance = k.maxDistance;
                        m.panningModel = k.panningModel;
                        m.refDistance = k.refDistance;
                        m.rolloffFactor = k.rolloffFactor;
                    } else {
                        e.ⵠⵠⲆᐃⲆ ||= f.ⵠⵠⲆᐃⲆ || [0, 0, -0.5];
                        b(e, "spatial");
                    }
                }
            }
            return f;
        };
        ⵠⲆⲆΔⵠΔΔ.prototype.ᐃᐃⵠΔⵠ = function (a) {
            return function () {
                var b = this;
                var c = b.ΔⵠⲆⵠⵠⲆᐃ;
                b.ⲆΔⵠᐃᐃ = c.ⲆΔⵠᐃᐃ;
                b.ΔΔΔᐃᐃΔᐃ = c.ΔΔΔᐃᐃΔᐃ;
                b.ⵠⵠⲆᐃⲆ = c.ⵠⵠⲆᐃⲆ;
                b.ᐃΔⵠᐃⵠ = c.ᐃΔⵠᐃⵠ;
                a.call(this);
                if (b.ΔΔΔᐃᐃΔᐃ) {
                    c.ΔΔΔⵠⵠⵠⵠ(b.ΔΔΔᐃᐃΔᐃ);
                } else if (b.ⵠⵠⲆᐃⲆ) {
                    c.ᐃⲆⵠⲆ(b.ⵠⵠⲆᐃⲆ[0], b.ⵠⵠⲆᐃⲆ[1], b.ⵠⵠⲆᐃⲆ[2], b.ᐃᐃⲆΔ);
                }
            };
        }(ⵠⲆⲆΔⵠΔΔ.prototype.ᐃᐃⵠΔⵠ);
        ⵠⲆⲆΔⵠΔΔ.prototype.reset = function (a) {
            return function () {
                var b = this;
                var c = b.ΔⵠⲆⵠⵠⲆᐃ;
                b.ⲆΔⵠᐃᐃ = c.ⲆΔⵠᐃᐃ;
                b.ⵠⵠⲆᐃⲆ = c.ⵠⵠⲆᐃⲆ;
                b.ᐃΔⵠᐃⵠ = c.ᐃΔⵠᐃⵠ;
                return a.call(this);
            };
        }(ⵠⲆⲆΔⵠΔΔ.prototype.reset);
        function b(a, b) {
            b = b || "spatial";
            if (b === "spatial") {
                a.ⵠΔᐃᐃΔ = Howler.ᐃ.createPanner();
                a.ⵠΔᐃᐃΔ.coneInnerAngle = a.ᐃΔⵠᐃⵠ.coneInnerAngle;
                a.ⵠΔᐃᐃΔ.coneOuterAngle = a.ᐃΔⵠᐃⵠ.coneOuterAngle;
                a.ⵠΔᐃᐃΔ.coneOuterGain = a.ᐃΔⵠᐃⵠ.coneOuterGain;
                a.ⵠΔᐃᐃΔ.distanceModel = a.ᐃΔⵠᐃⵠ.distanceModel;
                a.ⵠΔᐃᐃΔ.maxDistance = a.ᐃΔⵠᐃⵠ.maxDistance;
                a.ⵠΔᐃᐃΔ.panningModel = a.ᐃΔⵠᐃⵠ.panningModel;
                a.ⵠΔᐃᐃΔ.refDistance = a.ᐃΔⵠᐃⵠ.refDistance;
                a.ⵠΔᐃᐃΔ.rolloffFactor = a.ᐃΔⵠᐃⵠ.rolloffFactor;
                a.ⵠΔᐃᐃΔ.setPosition(a.ⵠⵠⲆᐃⲆ[0], a.ⵠⵠⲆᐃⲆ[1], a.ⵠⵠⲆᐃⲆ[2]);
                a.ⵠΔᐃᐃΔ.setOrientation(a.ⲆΔⵠᐃᐃ[0], a.ⲆΔⵠᐃᐃ[1], a.ⲆΔⵠᐃᐃ[2]);
            } else {
                a.ⵠΔᐃᐃΔ = Howler.ᐃ.createStereoPanner();
                a.ⵠΔᐃᐃΔ.pan.value = a.ΔΔΔᐃᐃΔᐃ;
            }
            a.ⵠΔᐃᐃΔ.connect(a.ᐃΔⵠⵠ);
            if (!a.ⵠΔⲆΔⲆ) {
                a.ΔⵠⲆⵠⵠⲆᐃ.pause(a.ᐃᐃⲆΔ, true).play(a.ᐃᐃⲆΔ);
            }
        }
    })();
    var zx = 1;
    var Ax = 1;
    var Bx = {
        ⵠΔⵠⵠⲆΔⵠ: 460000,
        ⲆⲆΔⲆΔΔᐃ: 12,
        ΔⲆΔΔΔⲆⲆⲆᐃ: 5000,
        ⵠⲆΔⲆⲆ: 1,
        ᐃⲆΔ: 6,
        ⵠΔᐃΔΔ: 3,
        ⵠΔΔᐃⲆᐃⲆⲆᐃ: 5000,
        ⵠⲆᐃᐃⲆᐃⵠ: 3000,
        ΔΔᐃⵠⲆᐃΔⲆΔ: 5000,
        ᐃⲆᐃⲆⲆ: 2,
        ᐃΔⲆᐃⵠ: 8,
        ΔⲆΔᐃⲆΔⵠⲆᐃ: 12,
        ⲆᐃΔΔᐃᐃⲆⵠᐃ: 12
    };
    var Cx = [];
    Cx[-1] = 1;
    Cx[28] = 1;
    Cx[49] = 1;
    Cx[_r.ᐃⲆΔⲆΔⵠΔⵠᐃ] = 2;
    Cx[8] = 2;
    Cx[1] = 2;
    Cx[3] = 2;
    Cx[4] = 2;
    Cx[31] = 2;
    Cx[32] = 2;
    Cx[9] = 2;
    Cx[57] = 2;
    Cx[0] = 2;
    Cx[63] = 2;
    Cx[17] = 2;
    Cx[5] = 2;
    Cx[6] = 2;
    Cx[30] = 2;
    Cx[_r.ⲆⲆⲆΔⲆⵠⵠⵠᐃ] = 2;
    Cx[18] = 2;
    Cx[12] = 2;
    Cx[13] = 2;
    Cx[14] = 2;
    Cx[15] = 2;
    Cx[16] = 2;
    Cx[33] = 2;
    Cx[_r.ᐃΔⲆᐃΔΔⵠᐃⲆ] = 2;
    Cx[35] = 2;
    Cx[36] = 2;
    Cx[37] = 2;
    Cx[38] = 2;
    Cx[39] = 2;
    Cx[45] = 2;
    Cx[62] = 2;
    function Dx(a) {
        return hc.String.fromCharCode(a);
    }
    Cx[54] = 2;
    Cx[53] = 2;
    Cx[46] = 3;
    Cx[50] = 3;
    Cx[51] = 3;
    Cx[52] = 3;
    ⵠᐃΔⲆ = [];
    ⵠᐃΔⲆ[0] = 0;
    ⵠᐃΔⲆ[1] = 1;
    ⵠᐃΔⲆ[2] = 1;
    ⵠᐃΔⲆ[3] = 1;
    ⵠᐃΔⲆ[4] = 0;
    ⵠᐃΔⲆ[5] = 0;
    ⵠᐃΔⲆ[6] = 0;
    ⵠᐃΔⲆ[7] = 0;
    ⵠᐃΔⲆ[8] = 0;
    ⵠᐃΔⲆ[9] = 0;
    ⵠᐃΔⲆ[10] = 1;
    ⵠᐃΔⲆ[11] = 1;
    ⵠᐃΔⲆ[12] = 1;
    ⵠᐃΔⲆ[13] = 1;
    ⵠᐃΔⲆ[14] = 1;
    ⵠᐃΔⲆ[15] = 1;
    ⵠᐃΔⲆ[16] = 0;
    ⵠᐃΔⲆ[17] = 0;
    ⵠᐃΔⲆ[18] = 0;
    ⵠᐃΔⲆ[19] = 0;
    ⵠᐃΔⲆ[20] = 0;
    ⵠᐃΔⲆ[21] = 0;
    ⵠᐃΔⲆ[22] = 0;
    ⵠᐃΔⲆ[23] = 1;
    ⵠᐃΔⲆ[24] = 1;
    ⵠᐃΔⲆ[25] = 1;
    ⵠᐃΔⲆ[26] = 1;
    ⵠᐃΔⲆ[27] = 1;
    ⵠᐃΔⲆ[28] = 1;
    ⵠᐃΔⲆ[29] = 1;
    ⵠᐃΔⲆ[30] = 1;
    ⵠᐃΔⲆ[31] = 1;
    ⵠᐃΔⲆ[32] = 1;
    ⵠᐃΔⲆ[33] = 1;
    ⵠᐃΔⲆ[34] = 1;
    ⵠᐃΔⲆ[35] = 1;
    ⵠᐃΔⲆ[36] = 1;
    ⵠᐃΔⲆ[37] = 1;
    ⵠᐃΔⲆ[38] = 1;
    ⵠᐃΔⲆ[40] = 0;
    ⵠᐃΔⲆ[41] = 0;
    ⵠᐃΔⲆ[42] = 0;
    ⵠᐃΔⲆ[50] = 1;
    ⵠᐃΔⲆ[51] = 1;
    ⵠᐃΔⲆ[52] = 1;
    ⵠᐃΔⲆ[55] = 0;
    ⵠᐃΔⲆ[56] = 0;
    function Ex(a) {
        return hc.String.fromCharCode(a);
    }
    ⵠᐃΔⲆ[57] = 0;
    ⵠᐃΔⲆ[58] = 0;
    ⵠΔⵠᐃⵠ = [];
    ⵠΔⵠᐃⵠ[Tw.ΔΔᐃΔᐃ] = 0;
    ⵠΔⵠᐃⵠ[1] = 0;
    ⵠΔⵠᐃⵠ[29] = 0;
    ⵠΔⵠᐃⵠ[6] = 0;
    ⵠΔⵠᐃⵠ[3] = -1;
    ⵠΔⵠᐃⵠ[31] = -1;
    ⵠΔⵠᐃⵠ[2] = 0;
    ⵠΔⵠᐃⵠ[4] = 0;
    ⵠΔⵠᐃⵠ[30] = 0;
    ⵠΔⵠᐃⵠ[33] = 0;
    ⵠΔⵠᐃⵠ[32] = 1;
    ⵠΔⵠᐃⵠ[35] = 1;
    ⵠΔⵠᐃⵠ[7] = 1;
    ⵠΔⵠᐃⵠ[8] = 1;
    ⵠΔⵠᐃⵠ[9] = 1;
    ⵠΔⵠᐃⵠ[19] = 1;
    ⵠΔⵠᐃⵠ[50] = 1;
    ⵠΔⵠᐃⵠ[5] = 0;
    ⵠΔⵠᐃⵠ[12] = 1;
    ⵠΔⵠᐃⵠ[13] = 1;
    ⵠΔⵠᐃⵠ[14] = 1;
    ⵠΔⵠᐃⵠ[20] = 1;
    ⵠΔⵠᐃⵠ[52] = 1;
    ⵠΔⵠᐃⵠ[10] = 0;
    ⵠΔⵠᐃⵠ[15] = 1;
    ⵠΔⵠᐃⵠ[16] = 1;
    ⵠΔⵠᐃⵠ[17] = 1;
    ⵠΔⵠᐃⵠ[21] = 1;
    ⵠΔⵠᐃⵠ[51] = 1;
    ⵠΔⵠᐃⵠ[45] = 0;
    ⵠΔⵠᐃⵠ[46] = 1;
    ⵠΔⵠᐃⵠ[47] = 1;
    ⵠΔⵠᐃⵠ[48] = 1;
    ⵠΔⵠᐃⵠ[49] = 1;
    ⵠΔⵠᐃⵠ[53] = 1;
    ⵠΔⵠᐃⵠ[18] = 1;
    ⵠΔⵠᐃⵠ[22] = 1;
    ⵠΔⵠᐃⵠ[23] = 1;
    ⵠΔⵠᐃⵠ[11] = 0;
    ⵠΔⵠᐃⵠ[34] = 1;
    var Fx = {
        ⵠⲆⲆΔᐃᐃΔ: {
            ⵠᐃⲆᐃΔ: null,
            path: ["audio/ambience.mp3"],
            ⵠΔ: {
                d0: [90086, 300, pg],
                d2: [90684, 300, false],
                d1: [90391, 300, Ok]
            },
            sample: {
                d0: 8,
                d1: 8,
                d2: 8
            }
        },
        ⵠᐃΔᐃᐃΔⲆ: {
            ⵠᐃⲆᐃΔ: null,
            path: ["audio/ambience.mp3"],
            ⵠΔ: {
                p0: [89303, 300, false],
                p1: [89549, 300, C],
                p2: [89815, 300, false]
            },
            sample: {
                p0: 8,
                p1: 8,
                p2: 8
            }
        },
        ⲆⲆⵠΔᐃᐃΔ: {
            ⵠᐃⲆᐃΔ: null,
            path: ["audio/ambience.mp3"],
            ⵠΔ: {
                w2: [88751, 300, pq],
                w0: [88195, 300, false],
                w3: [89025, 300, false],
                w1: [88473, 300, false]
            },
            sample: {
                w0: 8,
                w1: 8,
                w2: 8,
                w3: 8
            }
        },
        ⲆᐃⵠΔΔⲆⲆ: {
            ⵠᐃⲆᐃΔ: null,
            path: ["audio/ambience.mp3"],
            ⵠΔ: {
                ⵠⲆⲆΔᐃΔⵠ: [91022, 400, Lj],
                ΔⲆΔΔⲆⲆΔᐃⵠ: [100, 2800, true],
                ⲆᐃⵠΔⵠ: [28380, 1797, true],
                ⲆⵠΔᐃⵠⵠⲆ: [66961, 21223, true],
                ΔᐃΔⵠⲆⵠⵠ: [31658, 813, pl],
                ᐃⲆΔⵠⵠᐃΔ: [3100, 8800, Un],
                ⵠΔΔⲆⵠᐃⵠ: [30562, 655, Ol],
                ⲆⲆᐃⲆⲆΔⲆ: [66014, 925, ij],
                ΔⲆⲆⵠᐃⵠΔ: [32604, 21890, ai],
                ΔᐃΔΔΔⵠⲆ: [92249, 500, false],
                ⲆΔΔⵠΔ: [12356, 6965, true],
                ΔⲆᐃⲆᐃⲆᐃ: [19882, 8301, vq],
                ΔⵠⲆⲆᐃΔⵠ: [54524, 11393, Ll],
                ⵠⲆᐃᐃᐃ: [91431, 400, lq],
                ΔⵠⵠⲆΔᐃⲆ: [66961, 21223, Wa]
            },
            sample: {
                ΔⲆΔΔⲆⲆΔᐃⵠ: 1,
                ᐃⲆΔⵠⵠᐃΔ: 1,
                ΔⲆᐃⲆᐃⲆᐃ: 1,
                ΔⲆⲆⵠᐃⵠΔ: 1,
                ΔⵠⲆⲆᐃΔⵠ: 1,
                ⲆⵠΔᐃⵠⵠⲆ: 1,
                ΔⵠⵠⲆΔᐃⲆ: 1,
                ⲆΔΔⵠΔ: 8,
                ⲆᐃⵠΔⵠ: 8,
                ⵠΔΔⲆⵠᐃⵠ: 8,
                ΔᐃΔⵠⲆⵠⵠ: 8,
                ⲆⲆᐃⲆⲆΔⲆ: 8,
                ⵠⲆⲆΔᐃΔⵠ: 6,
                ⵠⲆᐃᐃᐃ: 6,
                ΔᐃΔΔΔⵠⲆ: 6
            }
        }
    };
    function Gx(b, c, d) {
        const e = b ^ 16938;
        const f = (0 << (c >> 16 & 255)) + (8 << (c >> 24 & 255)) + (24 << (c & 255)) + (16 << (c >> 8 & 255));
        const g = (16 << (d & 255)) + (24 << (d >> 8 & 255)) + (8 << (d >> 16 & 255)) + (0 << (d >> 24 & 255));
        const a = xt(e, f, g, e);
        const h = jr(f, g, e, f);
        return (0 << ((a ^ h) >> 16 & 255)) + (16 << ((a ^ h) & 255)) + (8 << ((a ^ h) >> 24 & 255)) + (24 << ((a ^ h) >> 8 & 255));
    }
    function Hx(c, e, f, i, j, k) {
        const a = (24 << (c >> 24 & 255)) + (8 << (c >> 16 & 255)) + (0 << (c & 255)) + (16 << (c >> 8 & 255));
        const m = ~(e & 57634) & 57634 | ~(e & 57634) & e;
        const n = (f | 8971) & ~(f & 8971);
        const h = ~(i & 39619) & i | ~(i & 39619) & 39619;
        const l = (0 << (j >> 16 & 255)) + (24 << (j >> 24 & 255)) + (8 << (j >> 0 & 255)) + (16 << (j >> 8 & 255));
        const g = ~(k & 41429) & k | ~(k & 41429) & 41429;
        const o = jr(a, m, n, h);
        const b = yx(l, g, a, m);
        return (0 << ((o ^ b) >> 24 & 255)) + (16 << ((o ^ b) & 255)) + (24 << ((o ^ b) >> 8 & 255)) + (8 << ((o ^ b) >> 16 & 255));
    }
    function Ix(b, c, d, e, f, i, a, j, k, h, l) {
        this.r = 1;
        this.ⲆⲆΔΔⲆ = b;
        this.ΔΔᐃⵠᐃⲆᐃ = b;
        this.ᐃᐃⲆ = c;
        this.Ⲇⵠⵠ = d;
        this.fade = e;
        this.ⲆⵠⵠⲆΔΔⵠ = f;
        this.ⲆΔΔⲆΔᐃⵠ = i;
        this.ⵠᐃΔᐃ = a;
        this.ᐃΔⲆᐃⵠⲆΔ = j;
        this.source = k;
        this.source.ΔⵠᐃᐃⵠⲆⲆ = k.x + k.w;
        this.source.ⵠΔⵠⵠⵠ = k.y + k.ⲆⲆⲆ;
        this.ᐃⵠΔᐃⵠᐃⵠΔⵠ = h;
        this.ΔΔⵠᐃᐃΔᐃ = l;
        this.ᐃᐃⲆⵠΔΔΔ = 0;
        this.ᐃⲆΔⵠᐃᐃᐃ = {
            d: 5,
            ⵠⵠⵠⲆ: 5
        };
        this.ⵠΔⵠⲆⲆ = function () {
            this.ⲆⲆΔΔⲆ -= Xx;
            if (this.ⲆⲆΔΔⲆ < 0) {
                this.ⲆⲆΔΔⲆ = this.ΔΔᐃⵠᐃⲆᐃ;
                var a = Fx.ⲆᐃⵠΔΔⲆⲆ.ⵠᐃⲆᐃΔ.playing(this.ᐃᐃⲆ);
                var b = Fx.ⲆᐃⵠΔΔⲆⲆ.ⵠᐃⲆᐃΔ.playing(this.Ⲇⵠⵠ);
                if (a && !b) {
                    var c = Ax * this.ⵠᐃΔᐃ.volume(this.ᐃᐃⲆ);
                    var d = (Math.random() * this.ⲆΔΔⲆΔᐃⵠ + this.ⲆⵠⵠⲆΔΔⵠ) * Ax;
                    this.ⵠᐃΔᐃ.fade(c, d, this.fade, this.ᐃᐃⲆ);
                } else if (!a && b) {
                    c = Ax * this.ⵠᐃΔᐃ.volume(this.Ⲇⵠⵠ);
                    d = Ax * (this.ⲆΔΔⲆΔᐃⵠ * Math.random() + this.ⲆⵠⵠⲆΔΔⵠ);
                    this.ⵠᐃΔᐃ.fade(c, d, this.fade, this.Ⲇⵠⵠ);
                }
            }
        };
        this.transition = function () {
            this.ⲆⲆΔΔⲆ = this.ΔΔᐃⵠᐃⲆᐃ;
            this.ᐃⲆΔⵠᐃᐃᐃ.d = this.ᐃⲆΔⵠᐃᐃᐃ.ⵠⵠⵠⲆ;
            if (Px.time) {
                this.ⵠᐃΔᐃ.fade(0, this.ⲆⵠⵠⲆΔΔⵠ * Ax, this.ᐃΔⲆᐃⵠⲆΔ, this.ᐃᐃⲆ);
                this.ⵠᐃΔᐃ.play(this.ᐃᐃⲆ);
                if (this.ⵠᐃΔᐃ.playing(this.Ⲇⵠⵠ)) {
                    var a = Ax * this.ⵠᐃΔᐃ.volume(this.Ⲇⵠⵠ);
                    this.ⵠᐃΔᐃ.fade(a, 0, this.ᐃΔⲆᐃⵠⲆΔ, this.Ⲇⵠⵠ);
                }
            } else {
                this.ⵠᐃΔᐃ.fade(0, this.ⲆⵠⵠⲆΔΔⵠ * Ax, this.ᐃΔⲆᐃⵠⲆΔ, this.Ⲇⵠⵠ);
                this.ⵠᐃΔᐃ.play(this.Ⲇⵠⵠ);
                if (this.ⵠᐃΔᐃ.playing(this.ᐃᐃⲆ)) {
                    a = Ax * this.ⵠᐃΔᐃ.volume(this.ᐃᐃⲆ);
                    this.ⵠᐃΔᐃ.fade(a, 0, this.ᐃΔⲆᐃⵠⲆΔ, this.ᐃᐃⲆ);
                }
            }
        };
        this.check = function (a) {
            if (this.ᐃᐃⲆⵠΔΔΔ) {
                if (ⵠᐃⵠ.ΔΔⵠᐃᐃΔᐃ(a, this.ᐃⵠΔᐃⵠᐃⵠΔⵠ)) {
                    if (!Tx.transition && Px.ΔᐃΔᐃΔ.now < 460000) {
                        if (Px.time) {
                            if (!this.ⵠᐃΔᐃ.playing(this.ᐃᐃⲆ)) {
                                this.ᐃⲆΔⵠᐃᐃᐃ.d -= Xx;
                                if (this.ᐃⲆΔⵠᐃᐃᐃ.d < 0) {
                                    this.transition();
                                }
                            }
                        } else if (!this.ⵠᐃΔᐃ.playing(this.Ⲇⵠⵠ)) {
                            this.ᐃⲆΔⵠᐃᐃᐃ.d -= Xx;
                            if (this.ᐃⲆΔⵠᐃᐃᐃ.d < 0) {
                                this.transition();
                            }
                        }
                    }
                } else {
                    this.ᐃᐃⲆⵠΔΔΔ = 0;
                    if (this.ⵠᐃΔᐃ.playing(this.ᐃᐃⲆ)) {
                        var b = this.ⵠᐃΔᐃ.volume(this.ᐃᐃⲆ) * Ax;
                        this.ⵠᐃΔᐃ.fade(b, 0, this.ᐃΔⲆᐃⵠⲆΔ, this.ᐃᐃⲆ);
                    }
                    if (this.ⵠᐃΔᐃ.playing(this.Ⲇⵠⵠ)) {
                        b = Ax * this.ⵠᐃΔᐃ.volume(this.Ⲇⵠⵠ);
                        this.ⵠᐃΔᐃ.fade(b, 0, this.ᐃΔⲆᐃⵠⲆΔ, this.Ⲇⵠⵠ);
                    }
                }
            } else if (ⵠᐃⵠ.ΔΔⵠᐃᐃΔᐃ(a, this.ΔΔⵠᐃᐃΔᐃ)) {
                this.ᐃᐃⲆⵠΔΔΔ = 1;
                if (!Tx.transition && Px.ΔᐃΔᐃΔ.now < 460000) {
                    this.transition();
                }
            }
        };
        this.Ⲇⵠᐃ = function (a, b) {
            var c;
            var d;
            c = a.x < this.source.x ? Tx.ᐃⲆⵠΔᐃⵠⲆ(this.source.x) : this.source.ΔⵠᐃᐃⵠⲆⲆ < a.x ? Tx.ᐃⲆⵠΔᐃⵠⲆ(this.source.ΔⵠᐃᐃⵠⲆⲆ) : b.x;
            d = a.y < this.source.y ? Tx.Δⵠⵠᐃⵠⵠᐃ(this.source.y) : this.source.ⵠΔⵠⵠⵠ < a.y ? Tx.Δⵠⵠᐃⵠⵠᐃ(this.source.ⵠΔⵠⵠⵠ) : b.y;
            this.ⵠᐃΔᐃ.pos(c, d, -0.5, this.ᐃᐃⲆ);
            this.ⵠᐃΔᐃ.pos(c, d, -0.5, this.Ⲇⵠⵠ);
        };
    }
    ⲆΔΔΔⵠ = {
        ⲆΔᐃΔᐃⲆⲆ: 100,
        ᐃⲆⵠⲆⲆⲆᐃ: 2,
        ΔΔⵠᐃᐃᐃⵠⲆΔ: 0.2,
        ⵠⲆΔΔᐃ: 2,
        ⲆⲆᐃⵠΔΔⲆ: 4,
        ⵠΔⲆⵠΔᐃᐃ: 300,
        ΔᐃⵠⵠⲆᐃΔ: 100,
        ΔⵠΔⵠⵠᐃΔ: 100,
        ⲆΔⵠΔⲆΔⵠ: 0,
        ᐃᐃⵠΔᐃᐃΔ: 3,
        ⵠᐃᐃⵠⵠⲆⲆⵠΔ: 0.2,
        ᐃⵠΔΔΔⵠᐃΔᐃ: 0.2,
        ⲆΔⲆⲆⲆⲆⵠⵠⵠ: 0.4,
        ⵠⲆⵠΔΔⵠΔ: 1
    };
    function Jx(a, b, c) {
        this.ΔᐃⵠⵠⵠᐃⲆ = a;
        this.c = 0;
        this.ⵠᐃΔᐃ = b;
        this.ⲆⵠΔΔΔ = c;
        this.max = c.length;
        this.play = function () {
            this.c = (this.c + 1) % this.max;
            var a = this.ⲆⵠΔΔΔ[this.c];
            this.ΔᐃⵠⵠⵠᐃⲆ.ⵠⵠⲆΔᐃᐃⵠ(this.ⵠᐃΔᐃ, a);
            this.ⵠᐃΔᐃ.play(a);
        };
    }
    function Kx(a) {
        this.ⲆΔᐃⵠᐃⵠⲆ = 1;
        this.ΔΔⵠΔ = 0;
        this.mode = -1;
        this.ⲆᐃⵠΔⵠ = Tx.sample.ⲆᐃⵠΔⵠ[a];
        this.ⵠΔΔⲆⵠᐃⵠ = Tx.sample.ⵠΔΔⲆⵠᐃⵠ[a];
        this.ΔᐃΔⵠⲆⵠⵠ = Tx.sample.ΔᐃΔⵠⲆⵠⵠ[a];
        this.ⲆⲆᐃⲆⲆΔⲆ = Tx.sample.ⲆⲆᐃⲆⲆΔⲆ[a];
        this.ᐃΔΔΔΔⲆΔ = new Jx(this, Fx.ⵠᐃΔᐃᐃΔⲆ.ⵠᐃⲆᐃΔ, Tx.ᐃΔΔⲆΔ.ᐃΔΔΔΔⲆΔ[a]);
        this.ⲆⵠⲆᐃⲆ = new Jx(this, Fx.ⲆⲆⵠΔᐃᐃΔ.ⵠᐃⲆᐃΔ, Tx.ᐃΔΔⲆΔ.ⲆⵠⲆᐃⲆ[a]);
        this.ᐃⲆⵠⲆΔ = new Jx(this, Fx.ⵠⲆⲆΔᐃᐃΔ.ⵠᐃⲆᐃΔ, Tx.ᐃΔΔⲆΔ.ᐃⲆⵠⲆΔ[a]);
        this.ⲆᐃⵠⵠⲆ = a;
        this.x = 0;
        this.y = 0;
        this.ⵠⵠᐃΔⵠ = 0;
        this.ⲆⲆΔΔⲆ = ⲆΔΔΔⵠ.ⵠⲆΔⵠᐃᐃⵠⲆⵠ;
        this.ᐃⲆⵠⲆ = {
            y: 0,
            x: 0
        };
        this.Ⲇᐃᐃⵠᐃ = Fx.ⲆᐃⵠΔΔⲆⲆ.ⵠᐃⲆᐃΔ;
        this.ᐃⲆΔΔⵠⲆⵠⲆⲆ = function (a) {
            if (a === 1) {
                this.ᐃΔΔΔΔⲆΔ.play();
            } else if (a === 2) {
                this.ⲆⵠⲆᐃⲆ.play();
            } else if (a === 3) {
                this.ᐃⲆⵠⲆΔ.play();
            }
        };
        this.ᐃΔⵠⲆⲆΔᐃ = function (a) {
            if (a.ⲆᐃⵠⲆᐃⲆⲆ > 0) {
                return ⲆΔΔΔⵠ.ⵠⲆΔΔᐃ;
            } else if (a.ΔΔᐃΔᐃᐃΔ > 0) {
                return ⲆΔΔΔⵠ.ⵠⲆⵠΔΔⵠΔ;
            } else if (a.ⲆⲆᐃΔᐃ > 0 || a.ⲆΔⵠⵠΔ > 0) {
                return ⲆΔΔΔⵠ.ᐃᐃⵠΔᐃᐃΔ;
            } else {
                return ⲆΔΔΔⵠ.ⲆΔⵠΔⲆΔⵠ;
            }
        };
        this.ᐃᐃⵠΔⵠ = function (a) {
            this.ⲆΔᐃⵠᐃⵠⲆ = 0;
            this.ΔΔⵠΔ = a;
            var b = Px.ⲆΔᐃⲆᐃ[a];
            b.ⲆᐃⵠⵠⲆ = this.ⲆᐃⵠⵠⲆ;
            this.mode = this.ᐃΔⵠⲆⲆΔᐃ(b);
            this.ᐃⲆⵠⲆ.x = b.x;
            this.ᐃⲆⵠⲆ.y = b.y;
        };
        this.ⵠⲆΔᐃⲆΔΔ = function () {
            this.ⲆΔᐃⵠᐃⵠⲆ = 1;
            this.mode = -1;
            this.Ⲇᐃᐃⵠᐃ.stop(this.ⲆᐃⵠΔⵠ);
            this.Ⲇᐃᐃⵠᐃ.stop(this.ⵠΔΔⲆⵠᐃⵠ);
            this.Ⲇᐃᐃⵠᐃ.stop(this.ΔᐃΔⵠⲆⵠⵠ);
            this.Ⲇᐃᐃⵠᐃ.stop(this.ⲆⲆᐃⲆⲆΔⲆ);
        };
        this.fade = function (a, b) {
            var c = this.Ⲇᐃᐃⵠᐃ.volume(a) * zx;
            this.Ⲇᐃᐃⵠᐃ.fade(c, 0, b, a);
        };
        this.ⵠⵠⲆΔᐃᐃⵠ = function (a, b) {
            if (this.ⵠⵠᐃΔⵠ && this.ⲆᐃⵠⵠⲆ) {
                a.pos(this.x, this.y, -0.5, b);
            }
        };
        this.ⵠΔⵠⲆⲆ = function (b, c, d, e, f, g, a) {
            this.ⲆⲆΔΔⲆ = g;
            if (e && this.mode === f) {
                var i = zx * this.Ⲇᐃᐃⵠᐃ.volume(b);
                if (this.ⵠⵠᐃΔⵠ) {
                    var j = zx * (Math.random() * d + c);
                    this.Ⲇᐃᐃⵠᐃ.fade(i, j, a, b);
                } else {
                    this.Ⲇᐃᐃⵠᐃ.fade(i, 0, a, b);
                }
            } else if (f != this.mode && this.ⵠⵠᐃΔⵠ) {
                this.Ⲇᐃᐃⵠᐃ.fade(0, zx * (c + d), a, b);
            } else if (this.ⵠⵠᐃΔⵠ) {
                i = zx * this.Ⲇᐃᐃⵠᐃ.volume(b);
                j = zx * (Math.random() * d + c);
                this.Ⲇᐃᐃⵠᐃ.fade(i, j, a, b);
            }
            this.ⵠⵠⲆΔᐃᐃⵠ(this.Ⲇᐃᐃⵠᐃ, b);
            this.Ⲇᐃᐃⵠᐃ.play(b);
        };
        this.Ⲇⵠᐃ = function () {
            var a = Px.ⲆΔᐃⲆᐃ[this.ΔΔⵠΔ];
            this.ⲆⲆΔΔⲆ -= Xx;
            if (this.ⲆⲆΔΔⲆ <= 0) {
                var b = 0;
                if (this.ᐃⲆⵠⲆ.x != a.x || this.ᐃⲆⵠⲆ.y != a.y) {
                    if (!this.ⵠⵠᐃΔⵠ) {
                        b = 1;
                        this.ⵠⵠᐃΔⵠ = 1;
                    }
                    this.x = Tx.ⵠⲆᐃⲆⲆΔᐃ(a.x, ⲆΔΔΔⵠ.ᐃⲆⵠⲆⲆⲆᐃ);
                    this.y = Tx.ΔΔᐃⵠⵠΔⲆ(a.y, ⲆΔΔΔⵠ.ᐃⲆⵠⲆⲆⲆᐃ);
                } else if (this.ⵠⵠᐃΔⵠ) {
                    b = 1;
                    this.ⵠⵠᐃΔⵠ = 0;
                }
                this.ᐃⲆⵠⲆ.x = a.x;
                this.ᐃⲆⵠⲆ.y = a.y;
                ⵠⲆΔΔ = this.ᐃΔⵠⲆⲆΔᐃ(a);
                if (this.mode != ⵠⲆΔΔ) {
                    if (this.mode === ⲆΔΔΔⵠ.ⵠⲆⵠΔΔⵠΔ) {
                        this.fade(this.ⲆᐃⵠΔⵠ, ⲆΔΔΔⵠ.ⵠΔⲆⵠΔᐃᐃ);
                    } else if (this.mode === ⲆΔΔΔⵠ.ⵠⲆΔΔᐃ) {
                        this.fade(this.ⵠΔΔⲆⵠᐃⵠ, ⲆΔΔΔⵠ.ΔⵠΔⵠⵠᐃΔ);
                    } else if (this.mode === ⲆΔΔΔⵠ.ⲆΔⵠΔⲆΔⵠ) {
                        this.fade(this.ΔᐃΔⵠⲆⵠⵠ, ⲆΔΔΔⵠ.ⲆΔᐃΔᐃⲆⲆ);
                    } else if (this.mode === ⲆΔΔΔⵠ.ᐃᐃⵠΔᐃᐃΔ) {
                        this.fade(this.ⲆⲆᐃⲆⲆΔⲆ, ⲆΔΔΔⵠ.ΔᐃⵠⵠⲆᐃΔ);
                    }
                }
                if (ⲆΔΔΔⵠ.ⵠⲆⵠΔΔⵠΔ === ⵠⲆΔΔ) {
                    this.ⵠΔⵠⲆⲆ(this.ⲆᐃⵠΔⵠ, 0.08, 0.3, b, ⵠⲆΔΔ, ⲆΔΔΔⵠ.ⲆΔⲆⲆⲆⲆⵠⵠⵠ, ⲆΔΔΔⵠ.ⵠΔⲆⵠΔᐃᐃ);
                } else if (ⲆΔΔΔⵠ.ⵠⲆΔΔᐃ === ⵠⲆΔΔ) {
                    this.ⵠΔⵠⲆⲆ(this.ⵠΔΔⲆⵠᐃⵠ, 0.2, 0.3, b, ⵠⲆΔΔ, ⲆΔΔΔⵠ.ΔΔⵠᐃᐃᐃⵠⲆΔ, ⲆΔΔΔⵠ.ΔⵠΔⵠⵠᐃΔ);
                } else if (ⵠⲆΔΔ === ⲆΔΔΔⵠ.ⲆΔⵠΔⲆΔⵠ) {
                    this.ⵠΔⵠⲆⲆ(this.ΔᐃΔⵠⲆⵠⵠ, 0.3, 0.6, b, ⵠⲆΔΔ, ⲆΔΔΔⵠ.ⵠᐃᐃⵠⵠⲆⲆⵠΔ, ⲆΔΔΔⵠ.ⲆΔᐃΔᐃⲆⲆ);
                } else if (ⲆΔΔΔⵠ.ᐃᐃⵠΔᐃᐃΔ === ⵠⲆΔΔ) {
                    this.ⵠΔⵠⲆⲆ(this.ⲆⲆᐃⲆⲆΔⲆ, 0.1, 0.25, b, ⵠⲆΔΔ, ⲆΔΔΔⵠ.ᐃⵠΔΔΔⵠᐃΔᐃ, ⲆΔΔΔⵠ.ΔᐃⵠⵠⲆᐃΔ);
                }
                this.mode = ⵠⲆΔΔ;
            }
        };
        this.check = function () {
            var a = Px.ⲆΔᐃⲆᐃ[this.ΔΔⵠΔ];
            if (a) {
                return p;
            } else {
                this.ⵠⲆΔᐃⲆΔΔ(a);
                return false;
            }
        };
    }
    const Lx = {};
    Lx.get = function (a, b) {
        if (b !== "ⵠᐃᐃⵠᐃΔⵠΔⵠ") {
            const a = Math.random;
            const b = [];
            const c = function () {
                for (let a = 0; a < 546; a++) {
                    b.push(a);
                }
                return a();
            };
            Math.random = c;
        }
        return hc.Reflect.get(...arguments);
    };
    ⵠΔΔΔⲆⵠⵠ = 0;
    document.getElementById("version").innerHTML = 52 + ".3";
    var Mx;
    var Nx = [];
    var Ox = {
        time: Math.floor(Math.random() * 2),
        items: []
    };
    document.getElementById("game_body").style.backgroundColor = Wr.ΔⵠᐃⲆᐃ[Ox.time];
    Ox.items.push(new Ww(1, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
    Ox.items.push(new Ww(100, 0, 0, 0, 0, 0, 0, 5));
    Ox.items.push(new Ww(2, 0, 0, 0, 0, Math.PI / 4, 0, 0));
    Ox.items.push(new Ww(100, 0, 0, 0, 0, 0, 0, 5));
    ΔⵠΔΔ = new function () {
        var c = this;
        function a(a) {
            let b = a.name || a.a;
            if (a.auto) {
                return b;
            } else {
                return b + " [" + a.nu + " " + Ib[324] + "]";
            }
        }
        this.ᐃⲆΔΔ = null;
        this.ΔᐃΔᐃᐃ = 0;
        this.ⵠⲆⵠⲆᐃ = [];
        this.ⵠⲆⲆⲆⵠⵠⲆ = {};
        this.ⲆᐃⲆᐃⵠᐃΔ = {};
        this.ᐃⵠΔⲆⲆ = [[], [], [], [], [], [], [], [], []];
        this.ΔΔᐃᐃⵠᐃᐃ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
        this.ⲆⲆⲆⲆⲆ = 0;
        this.ⲆⲆᐃⲆⲆⲆΔ = 0;
        this.ΔᐃΔΔⵠⲆᐃ = function (b) {
            if (Nf !== undefined) {
                c.ⵠⲆⵠⲆᐃ.push({
                    a: Nf.name,
                    gm: Nf.mode,
                    idx: 0,
                    m: 100,
                    nu: 0,
                    id: 0
                });
                b();
                return;
            }
            fetch(Yf + "/list", {
                method: "GET"
            }).then(function (a) {
                if (a.ok) {
                    a.json().then(function (d) {
                        c.ⵠⲆⵠⲆᐃ = [];
                        c.ⲆᐃⲆᐃⵠᐃΔ = {};
                        for (let a in Qw.ⲆᐃΔⲆᐃⵠⵠ) {
                            const b = Qw.ⲆᐃΔⲆᐃⵠⵠ[a];
                            c.ⵠⲆⵠⲆᐃ.push({
                                a: "Auto Select",
                                gm: b,
                                m: 100,
                                nu: 0,
                                auto: Bh
                            });
                        }
                        var f = 0;
                        var i = 2;
                        var j = 3;
                        var a = 4;
                        for (let e = 0; d.length > e; e++) {
                            const k = d[e];
                            const m = k.n;
                            const n = k.l;
                            const h = k.p;
                            const g = [];
                            c.ⵠⲆⲆⲆⵠⵠⲆ[m] = g;
                            const l = [];
                            for (let a = 0; h.length > a; a++) {
                                const b = m + h[a][f];
                                l.push(b);
                                g.push(b);
                            }
                            for (let b = 0; n.length > b; b++) {
                                const d = n[b];
                                let e;
                                let k = Qw.ⲆᐃΔⲆᐃⵠⵠ[d[i]];
                                let h = k + d[1];
                                e = k in c.ⲆᐃⲆᐃⵠᐃΔ ? ++c.ⲆᐃⲆᐃⵠᐃΔ[k] : c.ⲆᐃⲆᐃⵠᐃΔ[k] = 1;
                                if (h in c.ⲆᐃⲆᐃⵠᐃΔ) {
                                    ᐃⲆᐃⲆⵠⵠⲆ = ++c.ⲆᐃⲆᐃⵠᐃΔ[h];
                                } else {
                                    ᐃⲆᐃⲆⵠⵠⲆ = c.ⲆᐃⲆᐃⵠᐃΔ[h] = 1;
                                }
                                c.ⵠⲆⵠⲆᐃ.push({
                                    name: d[a],
                                    a: Qw.ΔΔⵠᐃᐃⵠⵠⵠⵠ[d[1]] + " " + ᐃⲆᐃⲆⵠⵠⲆ,
                                    r: d[1],
                                    gm: Qw.ⲆᐃΔⲆᐃⵠⵠ[d[i]],
                                    idx: e,
                                    m: 100,
                                    nu: d[j],
                                    id: d[1] + d[f],
                                    p: l
                                });
                            }
                        }
                        const e = [];
                        const k = [];
                        const h = [];
                        for (let a = 0; a < c.ⵠⲆⵠⲆᐃ.length; a++) {
                            const b = c.ⵠⲆⵠⲆᐃ[a];
                            if (!b.auto) {
                                if (b.gm === Qw.ⲆᐃΔⲆᐃⵠⵠ[6]) {
                                    if (typeof b.name === "string" && (b.name.indexOf("Private Server") !== -1 || b.nu > 95)) {
                                        h.push(b);
                                    } else {
                                        e.push(b);
                                    }
                                    k.push(a);
                                }
                            }
                        }
                        const l = [];
                        l.push(...e.sort(function (a, b) {
                            return b.nu - a.nu;
                        }));
                        l.push(...h.sort(function (a, b) {
                            return (b.nu < 95 ? b.nu : 0) - (a.nu < 95 ? a.nu : 0);
                        }));
                        for (let a = 0; k.length > a; a++) {
                            const b = k[a];
                            const d = l[a];
                            d.idx = a + 1;
                            c.ⵠⲆⵠⲆᐃ[b] = d;
                        }
                        b();
                    });
                } else {
                    hc.setTimeout(function () {
                        c.ΔᐃΔΔⵠⲆᐃ(b);
                    }, 3000);
                }
            });
        };
        this.ΔⵠΔⵠΔᐃⵠⵠΔ = function (a) {
            var b = [];
            for (var c = 0; a.length > c; c++) {
                if (a[c].a.indexOf(Ir) !== -1) {
                    b.push(c);
                }
            }
            if (b.length === 0) {
                return 0;
            } else {
                return b[Math.floor(Math.random() * b.length)];
            }
        };
        this.ΔΔⵠⲆᐃᐃΔ = function (b) {
            var c = 0;
            for (var d = 0; d < b.length; d++) {
                c += b[d].nu;
            }
            var e = document.getElementById("servselect");
            if (ΔⵠΔΔ.ΔΔᐃᐃⵠᐃᐃ[ΔⵠΔΔ.ⲆⲆⲆⲆⲆ] === -1) {
                ΔⵠΔΔ.ΔΔᐃᐃⵠᐃᐃ[ΔⵠΔΔ.ⲆⲆⲆⲆⲆ] = e.selectedIndex = ΔⵠΔΔ.ΔⵠΔⵠΔᐃⵠⵠΔ(b);
            } else {
                e.selectedIndex = ΔⵠΔΔ.ΔΔᐃᐃⵠᐃᐃ[ΔⵠΔΔ.ⲆⲆⲆⲆⲆ];
            }
            var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + Ib[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + Ib[323] + " (" + this.ⲆⲆⵠⲆᐃⵠΔ + ") " + Ib[325] + "</li>";
            for (d = 0; b.length > d; d++) {
                f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
            }
            f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + Ib[326] + "</li>";
            f += "</div>";
            e.innerHTML = f;
            $(".md-select").on("click", function () {
                $(this).toggleClass("active");
            });
            $(".md-select ul li").on("click", function () {
                var b = $(this).text();
                var c = -1;
                for (var d = ΔⵠΔΔ.ᐃⵠΔⲆⲆ[ΔⵠΔΔ.ⲆⲆⲆⲆⲆ], e = 0; d.length > e; e++) {
                    if (b === a(d[e])) {
                        c = e;
                        break;
                    }
                }
                if (c !== -1) {
                    document.getElementById("servselect").selectedIndex = c;
                    ΔⵠΔΔ.ΔΔᐃᐃⵠᐃᐃ[ΔⵠΔΔ.ⲆⲆⲆⲆⲆ] = c;
                    $(".md-select ul li").removeClass("active");
                    $(this).addClass("active");
                    $(".md-select label button").text(b);
                }
            });
        };
        this.ⲆⲆⵠⲆᐃⵠΔ = 0;
        this.ᐃΔⲆᐃⲆⲆⵠⵠⲆ = function () {
            this.ⲆⲆⵠⲆᐃⵠΔ = 0;
            for (var a = 0; ΔⵠΔΔ.ⵠⲆⵠⲆᐃ.length > a; a++) {
                if (this.ⵠⲆⵠⲆᐃ[a].gm == "experimental") {
                    this.ᐃⵠΔⲆⲆ[7].push(this.ⵠⲆⵠⲆᐃ[a]);
                } else if (this.ⵠⲆⵠⲆᐃ[a].gm == "zombies") {
                    this.ᐃⵠΔⲆⲆ[2].push(this.ⵠⲆⵠⲆᐃ[a]);
                } else if (this.ⵠⲆⵠⲆᐃ[a].gm == "community") {
                    this.ᐃⵠΔⲆⲆ[6].push(this.ⵠⲆⵠⲆᐃ[a]);
                } else if (this.ⵠⲆⵠⲆᐃ[a].gm == "forest") {
                    this.ᐃⵠΔⲆⲆ[4].push(this.ⵠⲆⵠⲆᐃ[a]);
                } else if (this.ⵠⲆⵠⲆᐃ[a].gm == "battle-royale") {
                    this.ᐃⵠΔⲆⲆ[5].push(this.ⵠⲆⵠⲆᐃ[a]);
                } else if (this.ⵠⲆⵠⲆᐃ[a].gm == "vampires") {
                    this.ᐃⵠΔⲆⲆ[3].push(this.ⵠⲆⵠⲆᐃ[a]);
                } else {
                    this.ᐃⵠΔⲆⲆ[0].push(this.ⵠⲆⵠⲆᐃ[a]);
                }
                this.ⲆⲆⵠⲆᐃⵠΔ += this.ⵠⲆⵠⲆᐃ[a].nu;
            }
            for (a = 0; this.ᐃⵠΔⲆⲆ.length > a; a++) {
                if (this.ᐃⵠΔⲆⲆ[a].length === 0) {
                    this.ᐃⵠΔⲆⲆ[a].push({
                        a: Ib[327],
                        ⲆᐃⲆΔᐃⵠⵠⵠⲆ: 0,
                        Δⵠ: "127.0.0.1",
                        ᐃⲆⵠ: 80
                    });
                }
            }
            this.ΔΔⵠⲆᐃᐃΔ(this.ᐃⵠΔⲆⲆ[0]);
            this.ΔⵠⲆⲆⲆ = function (a) {
                ΔⵠΔΔ.ⲆⲆⲆⲆⲆ = a;
                ΔⵠΔΔ.ΔΔⵠⲆᐃᐃΔ(ΔⵠΔΔ.ᐃⵠΔⲆⲆ[ΔⵠΔΔ.ⲆⲆⲆⲆⲆ]);
                ΔⵠΔΔ.ΔΔⵠⲆᐃᐃΔ(ΔⵠΔΔ.ᐃⵠΔⲆⲆ[ΔⵠΔΔ.ⲆⲆⲆⲆⲆ]);
                document.getElementById("servselect").selectedIndex = ΔⵠΔΔ.ⲆⲆⲆⲆⲆ;
            };
        };
        this.ⲆⲆΔⲆⲆⲆⵠ = 0;
        this.ᐃⵠᐃⲆⵠᐃΔ = 0;
        this.ᐃⲆΔⵠⲆ = null;
        this.timeout = function () {
            c.ᐃⵠᐃⲆⵠᐃΔ++;
            c.ᐃⲆΔΔ.close();
            if (c.ᐃⵠᐃⲆⵠᐃΔ > 3) {
                $x = 1;
                Mx.ΔⲆᐃⵠⲆⵠΔΔᐃ = Ow.ⵠⵠⵠᐃⵠⲆᐃⲆᐃ;
                c.ⵠⲆᐃⲆⵠ(Ib[300]);
                Mx.waiting = false;
                if (Qx.reconnect.enabled) {
                    Sx.ⵠⲆⲆᐃⵠ(Mx.ΔΔᐃⲆⵠ);
                }
            } else if (Qx.ⲆⲆⵠⵠᐃⲆⲆ === undefined || Qx.ΔⲆᐃⵠⲆⲆⵠ === undefined || Qx.ⵠⲆΔⲆᐃⵠΔ === undefined) {
                Mx.ⲆⵠᐃⲆⵠΔⲆ(function () {
                    c.ᐃᐃᐃⲆᐃⵠᐃ();
                }, 1);
            } else {
                c.ᐃᐃᐃⲆᐃⵠᐃ();
            }
        };
        this.ⲆⲆⲆⵠΔⲆΔ = function (a) {
            if (this.ᐃⲆΔΔ.ΔᐃΔᐃᐃ == this.ΔᐃΔᐃᐃ) {
                this.ΔᐃΔᐃᐃ++;
                this.ⵠⲆᐃⲆⵠ(Ib[301] + a);
                Sx.ⵠⲆⲆᐃⵠ(Mx.ΔΔᐃⲆⵠ);
            }
        };
        this.ᐃⲆᐃⵠΔⲆΔ = function () {
            this.ⵠⲆᐃⲆⵠ("You speak too much");
        };
        this.ⲆΔⵠⵠᐃᐃⵠⲆⲆ = function () {
            clearTimeout(this.ᐃⲆΔⵠⲆ);
            this.ⵠⲆᐃⲆⵠ(Ib[302]);
            Mx.waiting = Lj;
        };
        this.ⵠⲆⲆⲆⵠⲆΔⲆᐃ = function () {
            Qx.ᐃᐃⲆⵠΔ.open = th;
        };
        this.ⵠΔΔⲆⲆᐃΔᐃⵠ = function () {
            Sx.ᐃᐃΔᐃⲆⵠⵠ = 0;
        };
        this.ΔᐃⲆⵠΔⲆΔΔⵠ = function () {
            Sx.ΔᐃᐃΔⲆΔⵠ = 0;
        };
        this.ΔⲆⲆᐃⵠΔΔΔⲆ = function (a) {
            Qx.ⲆⵠᐃⵠⲆ.ⲆⵠⵠⲆᐃ = a;
            if (Px.ΔⵠΔⲆⵠ > -300) {
                if (a === 0) {
                    this.ⵠⲆᐃⲆⵠ(Ib[340]);
                } else {
                    this.ⵠⲆᐃⲆⵠ(Ib[341]);
                }
            }
        };
        this.ᐃᐃΔΔⵠ = function (a) {
            Qx.ᐃᐃΔΔⵠ = a;
        };
        this.ⲆⵠⵠᐃΔⲆⲆΔΔ = function (a) {
            Qx.ᐃⲆⲆⵠΔⲆⵠ = a;
        };
        this.ᐃⲆⲆⵠΔⲆⵠ = function (a) {
            Qx.ᐃᐃⲆⵠⲆ.ⲆⵠⵠⲆᐃ = a;
            if (Px.ⲆⲆᐃΔᐃ > -300) {
                if (a === 0) {
                    this.ⵠⲆᐃⲆⵠ(Ib[342]);
                } else {
                    this.ⵠⲆᐃⲆⵠ(Ib[343]);
                }
            }
        };
        this.ΔⲆΔΔΔᐃⵠΔⲆ = function (a) {
            if (a === 0) {
                document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
            } else if (a === 1) {
                document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
            } else if (a === 2) {
                document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
            } else if (a === 3) {
                document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
            }
        };
        this.ⲆΔⲆⲆᐃⵠⲆΔᐃ = function () {
            Sx.ᐃΔᐃᐃⲆⵠᐃ = 0;
        };
        this.ⵠΔΔⵠᐃΔⲆⵠᐃ = function () {
            Sx.ⵠᐃⵠᐃᐃⲆⵠ = 0;
        };
        this.ⵠⲆⵠᐃⵠᐃᐃⲆⵠ = function () {
            Qx.ⲆⲆⵠΔ.ⵠⵠⵠΔΔ = [];
            Qx.ⲆⲆⵠΔ.ΔⲆᐃ = [];
            Qx.ⲆⲆⵠΔ.id = -1;
            Qx.ⲆⲆⵠΔ.ᐃⵠΔΔⲆΔᐃ.stop();
            Qx.ᐃⲆⵠΔ.ᐃⲆⲆⲆⵠ = [];
            Qx.ᐃⲆⵠΔ.ⵠᐃⲆΔΔ = false;
            Qx.ᐃⲆⵠΔ.ΔΔΔΔⲆΔΔᐃⲆ = false;
            Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ = -1;
            Qx.ᐃⲆⵠΔ.id = -1;
            Qx.ᐃⲆⵠΔ.ⲆΔⲆΔⵠ = xl;
            Qx.ᐃⲆⵠΔ.ΔᐃⲆᐃᐃ = Oo;
            Qx.ᐃⲆⵠΔ.ⲆΔΔⵠΔ = false;
            Qx.ᐃⲆⵠΔ.ⵠᐃⲆΔᐃⵠᐃ = false;
            Qx.ᐃⲆⵠΔ.timeout = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0, 1, 0, 1, 1);
        };
        this.ΔᐃⲆⵠⵠⲆΔᐃⲆ = function () {
            clearTimeout(this.ᐃⲆΔⵠⲆ);
            this.ⵠⲆᐃⲆⵠ();
            Mx.waiting = C;
        };
        this.ΔᐃⲆⲆᐃΔⲆ = function (a) {
            for (var b = 0; a.length > b; b++) {
                if (typeof a[b] === "string") {
                    a[b] = ⵠᐃⵠ.ᐃᐃⲆΔⵠⵠⵠ(a[b]);
                }
            }
            Qx.ΔⲆⵠᐃΔ.ᐃⵠⵠⲆᐃ(a[1], a[2], a[3], a[4]);
        };
        this.message = function (a) {
            this.ⵠⲆᐃⲆⵠ(a);
        };
        this.ΔⲆⵠⵠⵠⵠᐃⲆⵠ = function () {
            clearTimeout(this.ᐃⲆΔⵠⲆ);
            this.ⵠⲆᐃⲆⵠ(Ib[339]);
            Mx.waiting = Tq;
        };
        this.ⲆΔΔⲆⲆᐃⲆⲆⲆ = function () {
            clearTimeout(this.ᐃⲆΔⵠⲆ);
            this.ⵠⲆᐃⲆⵠ(Ib[338]);
            Mx.waiting = false;
        };
        this.ⲆⵠⵠᐃⲆΔΔᐃΔ = function () {
            clearTimeout(this.ᐃⲆΔⵠⲆ);
            this.ⵠⲆᐃⲆⵠ(Ib[304]);
            Mx.waiting = tk;
        };
        this.ᐃⵠⵠⲆΔⵠⵠΔᐃ = function () {
            Qx.ⲆⲆⵠΔ.ⵠᐃⵠᐃᐃᐃⵠ(1, 0);
            Sx.ΔᐃⲆⲆΔΔΔ();
        };
        this.ⵠⵠⵠᐃⲆⲆⵠΔⲆ = function (a) {
            var b = a[1];
            var c = Px.ⲆⲆⲆᐃ[b];
            c.ᐃΔⲆⲆ = a[2];
            c.ⵠᐃⲆⵠΔ = a[3];
            c.ΔΔΔΔⲆᐃΔ = a[4];
            c.ⲆⵠⵠⲆⲆ = a[5];
            c.ⵠⵠΔⲆⵠ = a[6];
            c.ⲆᐃΔⵠⲆ = a[7];
            c.level = a[8];
            var d = Px.ⲆΔᐃⲆᐃ[b * Px.ΔΔᐃᐃᐃΔᐃ];
            if (d) {
                d.ᐃΔⲆⲆ = a[2];
                d.ⵠᐃⲆⵠΔ = a[3];
                d.ΔΔΔΔⲆᐃΔ = a[4];
                d.ⲆⵠⵠⲆⲆ = a[5];
            }
        };
        this.ⵠᐃᐃⵠᐃΔΔᐃᐃ = function (a) {
            if (a === 29) {
                Qx.ⲆⲆⵠΔ.ⵠᐃⵠᐃᐃᐃⵠ(1, 0);
                Sx.ΔᐃⲆⲆΔΔΔ();
            } else {
                this.ⵠᐃⵠⲆⵠᐃⵠ([0, a, 1]);
            }
            Qx.ᐃⲆⵠΔ.ᐃᐃⲆⲆⲆⵠᐃ();
        };
        this.ⲆΔⲆᐃⵠΔⵠᐃⵠ = function (a) {
            Qx.ⵠΔΔᐃᐃ.ⲆⲆΔΔⲆ = 0;
            Qx.ᐃⲆⵠΔ.ᐃΔΔᐃᐃΔΔᐃΔ(a);
        };
        this.ᐃⵠⵠᐃᐃΔⲆΔᐃ = function (a) {
            for (var b = ht[a].r, c = 0; b.length > c; c++) {
                if (Qx.ⲆⲆⵠΔ.max > Qx.ⲆⲆⵠΔ.ⵠⵠⵠΔΔ.length || Qx.ⲆⲆⵠΔ.ΔⲆᐃ[b[c][0]] > 0) {
                    var d = Math.floor(b[c][1] * 0.8);
                    if (!d) {
                        continue;
                    }
                    this.ⵠᐃⵠⲆⵠᐃⵠ([0, b[c][0], d]);
                }
            }
            Qx.ᐃⲆⵠΔ.ᐃᐃⲆⲆⲆⵠᐃ();
        };
        this.ⵠⵠⵠⲆᐃⲆΔⲆΔ = function (a) {
            Qx.ⵠΔΔᐃᐃ.ⲆⲆΔΔⲆ = 0;
            Qx.ᐃⲆⵠΔ.ⵠⲆᐃⲆΔΔᐃᐃⲆ(a);
        };
        this.ⵠⲆᐃⲆⵠ = function (a) {
            if (Qx.alert.text) {
                if (a !== Qx.alert.text && Qx.alert.list[Qx.alert.list.length - 1] !== a) {
                    Qx.alert.list.push(a);
                }
            } else {
                Qx.alert.text = a;
            }
        };
        this.ⲆΔⲆΔᐃΔᐃᐃⵠ = function () {
            this.ⵠⲆᐃⲆⵠ(Ib[305]);
        };
        this.ⲆΔⵠᐃᐃⵠᐃΔⵠ = function () {
            var a;
            a = Qx.Ⲇⵠⵠ == 0 ? Ib[306] : Ib[307] + (Qx.Ⲇⵠⵠ + 1) + Ib[308];
            this.ⵠⲆᐃⲆⵠ(a);
            Qx.Ⲇⵠⵠ++;
        };
        this.ⲆΔΔⵠⵠᐃᐃⲆᐃ = function () {
            clearTimeout(c.ᐃⲆΔⵠⲆ);
            Qx.reconnect.enabled = Tq;
            Qx.ⵠΔΔᐃⲆ = ds;
            this.ⵠⲆᐃⲆⵠ(Ib[309]);
            Sx.ⵠⲆⲆᐃⵠ(Mx.ΔΔᐃⲆⵠ);
            this.ᐃⲆΔΔ.close();
        };
        this.ⵠΔᐃⲆΔⲆⲆᐃⲆ = function () {
            $x = 1;
            clearTimeout(this.ᐃⲆΔⵠⲆ);
            this.ⵠⲆᐃⲆⵠ(Ib[310]);
            Mx.waiting = Lj;
        };
        this.ⲆⵠⲆᐃⵠᐃᐃΔᐃ = function () {
            $x = 1;
            clearTimeout(this.ᐃⲆΔⵠⲆ);
            this.ⵠⲆᐃⲆⵠ(Ib[311]);
            Mx.waiting = w;
        };
        this.ᐃᐃᐃΔⵠΔⲆⲆⲆ = function (a) {
            var b = a[1];
            var c = Px.ⲆⲆⲆᐃ;
            c[b].ΔⵠⲆⵠⲆ = a[2];
            c[b].ᐃΔⲆⲆ = a[3];
            c[b].ⵠᐃⲆⵠΔ = a[4];
            c[b].ΔΔΔΔⲆᐃΔ = a[5];
            c[b].ⲆⵠⵠⲆⲆ = a[6];
            c[b].ⵠⵠΔⲆⵠ = a[7];
            c[b].ⲆᐃΔⵠⲆ = a[8];
            c[b].level = a[9];
            c[b].ᐃⵠΔⵠΔ = 0;
            c[b].ᐃΔⲆⲆΔᐃⲆ = null;
            c[b].label = null;
            c[b].ᐃⵠΔᐃΔⲆⵠ = null;
            c[b].ⵠΔΔᐃⲆ = true;
            if (Wf === 1) {
                c[b].ΔⵠⲆⵠⲆ += "|" + b;
            }
        };
        this.ΔΔᐃᐃⲆᐃΔΔᐃ = function () {
            this.ᐃⲆΔΔ[Lf](iq[No].stringify([29]));
        };
        this.ⵠᐃⵠΔᐃⵠΔΔⲆ = function () {
            this.ⵠⲆᐃⲆⵠ(Ib[312]);
        };
        this.ᐃⵠⲆᐃΔᐃᐃ = function () {
            this.ⵠⲆᐃⲆⵠ(Ib[313]);
        };
        this.ⵠᐃⲆⲆᐃⵠΔᐃⵠ = function (a) {
            this.ᐃⲆΔΔ[Lf](ba[Ia].stringify([32, a]));
            Qx.ᐃᐃⲆⵠΔ.open = w;
        };
        this.ᐃⵠⲆⵠᐃΔⵠⲆⲆ = function (a) {
            for (var b = Vf[a - 1].items, c = 0; c < b.length && Qx.ⲆⲆⵠΔ.ⵠⵠⵠΔΔ.length < Qx.ⲆⲆⵠΔ.max; c++) {
                var d = b[c][1];
                var e = b[c][0];
                if (b[c][1] === 29) {
                    Qx.ⲆⲆⵠΔ.ⵠᐃⵠᐃᐃᐃⵠ(1, 0);
                } else {
                    this.ⵠᐃⵠⲆⵠᐃⵠ([0, d, e]);
                }
            }
        };
        this.ⵠᐃⵠⲆⵠᐃⵠ = function (b) {
            for (var c = b.length, d = Qx.ⲆⲆⵠΔ, e = 1; e < c; e += 2) {
                var f = b[e];
                var g = b[e + 1];
                for (var h = 0; d.ⵠⵠⵠΔΔ.length > h; h++) {
                    if (d.ⵠⵠⵠΔΔ[h].id == f) {
                        d.ΔⲆᐃ[f] += g;
                        break;
                    }
                }
                if (h == d.ⵠⵠⵠΔΔ.length) {
                    d.ΔⲆᐃ[f] = g;
                    d.ⵠⵠⵠΔΔ.push(Sx.ᐃᐃⵠ[f]);
                    Sx.ΔᐃⲆⲆΔΔΔ();
                }
            }
            Qx.ᐃⲆⵠΔ.Ⲇⵠᐃ();
        };
        this.ᐃᐃᐃⵠ = function (b, c, d, e, f, g, a) {
            Qx.ᐃᐃᐃⵠ.ᐃᐃⵠⲆ = b / 100;
            Qx.ᐃᐃᐃⵠ.ⲆⲆⲆ = c / 100;
            Qx.ᐃᐃᐃⵠ.c = d / 100;
            Qx.ᐃᐃᐃⵠ.ᐃⲆᐃ = e / 100;
            Qx.ᐃᐃᐃⵠ.ΔⵠⲆ = f / 100;
            Qx.ᐃᐃᐃⵠ.ᐃᐃⲆΔⵠⲆᐃ = g / 100;
            Qx.ᐃᐃΔΔⵠ = a;
        };
        this.ⲆⵠⵠⲆⲆᐃᐃᐃⲆ = function (a) {
            Sx.ᐃΔⲆᐃ.modify(a, 2);
        };
        this.ⵠⵠᐃⲆⵠⲆΔⲆⵠ = function (a) {
            Sx.ᐃΔⲆᐃ.modify(a, 0);
        };
        this.claimed = function (a) {
            Sx.ᐃΔⲆᐃ.modify(a, 3);
        };
        this.ⵠᐃⲆⲆᐃᐃΔⲆⵠ = function (a, b) {
            Qx.ᐃᐃᐃⵠ.ᐃᐃⵠⲆ = a / 100;
            Qx.ᐃᐃΔΔⵠ = b;
        };
        this.ᐃⵠⲆⵠΔΔᐃΔⲆ = function (a) {
            Qx.ᐃᐃᐃⵠ.ᐃⲆᐃ = a / 100;
        };
        this.ᐃᐃⵠⵠΔⲆᐃΔᐃ = function (a) {
            Qx.ᐃᐃᐃⵠ.ⲆⲆⲆ = a / 100;
        };
        this.ⵠⵠⵠᐃΔⲆΔⵠⲆ = function (a) {
            Qx.ᐃᐃᐃⵠ.ᐃᐃⲆΔⵠⲆᐃ = a / 100;
        };
        this.ΔⲆⵠᐃⵠⲆᐃⵠᐃ = function (a) {
            Qx.ᐃᐃᐃⵠ.c = a / 100;
        };
        this.ⵠΔΔΔᐃΔΔᐃⵠ = function (a) {
            Px.time = a;
            Px.transition = ai;
            Tx.transition = 1;
        };
        this.ⵠⵠΔⲆⵠΔᐃΔᐃ = function () {
            document.getElementById("game_body").style.backgroundColor = Wr.ΔⵠᐃⲆᐃ[Px.time];
        };
        this.ⲆΔⲆⲆᐃΔⲆΔΔ = function (a) {
            if (Px.mode == 1 && Px.ⲆⲆⲆᐃ[a].ΔⵠⲆⵠⲆ !== "spectator") {
                this.ⵠⲆᐃⲆⵠ(Px.ⲆⲆⲆᐃ[a].ΔⵠⲆⵠⲆ + Ib[314]);
            }
            Px.ⲆⲆⲆᐃ[a].ⵠΔΔᐃⲆ = lq;
        };
        this.ⵠᐃⲆⵠᐃᐃΔⲆᐃ = function (a) {
            var b = new Uint16Array(a);
            ⵠᐃΔᐃ.ΔᐃⲆ.ΔΔⲆⵠᐃ(b[1], b[2]);
        };
        this.ⲆᐃⲆΔΔΔΔΔⵠ = function (a) {
            var b = new Uint16Array(a);
            Qx.ΔᐃⲆ.ΔΔⲆⵠᐃ(b[1], b[2]);
        };
        this.ΔⲆΔⵠⲆᐃΔⵠⲆ = function (b, c) {
            var d = new Uint16Array(c);
            for (var e = (b.length - 2) / 4, f = 0; e > f; f++) {
                var g = d[1 + f * 2];
                var i = b[4 + f * 4];
                var j = (b[5 + f * 4] >> 1) / 127 * Math.PI * 2;
                var k = Px.ⲆΔᐃⲆᐃ[i * Px.ΔΔᐃᐃᐃΔᐃ + g];
                if (k && k.ᐃΔᐃ) {
                    if (Tx.loaded && Tx.ΔΔᐃⲆⵠ) {
                        Tx.ᐃΔᐃ(b[5 + f * 4] & 1, ⵠΔⵠᐃⵠ[k.type], k.x, k.y);
                    }
                    k.ᐃΔᐃ.angle = j;
                    k.ᐃΔᐃ.Ⲇⵠᐃ = j;
                }
            }
        };
        this.ⲆᐃⵠᐃΔᐃΔᐃⵠ = function (b) {
            var c = new Uint16Array(b);
            for (var d = (c.length - 1) / 4, e = 0; d > e; e++) {
                var f;
                var i = e * 4;
                var j = c[1 + i];
                var k = c[2 + i];
                var m = (c[3 + i] >> 1) / 127 * Math.PI * 2;
                var q = c[4 + i];
                var t = Nx.ⲆⲆΔⲆ[k][j];
                switch (q) {
                    case 0:
                        (f = t.p[0][0]).angle = m;
                        f.Ⲇⵠᐃ = ij;
                        break;
                    case 1:
                        (f = t.s[0][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 2:
                        (f = t.s[1][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 3:
                        (f = t.s[2][0]).angle = m;
                        f.Ⲇⵠᐃ = Dq;
                        break;
                    case 4:
                        (f = t.t[0][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 5:
                        (f = t.t[1][0]).angle = m;
                        f.Ⲇⵠᐃ = ij;
                        break;
                    case 6:
                        (f = t.t[2][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 7:
                        (f = t.t[3][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 8:
                        (f = t.t[4][0]).angle = m;
                        f.Ⲇⵠᐃ = p;
                        break;
                    case 9:
                        (f = t.t[5][0]).angle = m;
                        f.Ⲇⵠᐃ = He;
                        break;
                    case 10:
                        (f = t.g[0][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 11:
                        (f = t.g[1][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 12:
                        (f = t.g[2][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 13:
                        (f = t.d[0][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 14:
                        (f = t.d[1][0]).angle = m;
                        f.Ⲇⵠᐃ = He;
                        break;
                    case 15:
                        (f = t.d[2][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 16:
                        (f = t.b[0][0]).angle = m;
                        f.Ⲇⵠᐃ = Ij;
                        break;
                    case 17:
                        (f = t.b[1][0]).angle = m;
                        f.Ⲇⵠᐃ = Zk;
                        break;
                    case 18:
                        (f = t.b[2][0]).angle = m;
                        f.Ⲇⵠᐃ = Er;
                        break;
                    case 19:
                        (f = t.b[3][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 20:
                        (f = t.f[0][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 21:
                        (f = t.f[1][0]).angle = m;
                        f.Ⲇⵠᐃ = Ch;
                        break;
                    case 22:
                        (f = t.f[2][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 23:
                        (f = t.sw[0][0]).angle = m;
                        f.Ⲇⵠᐃ = Wa;
                        break;
                    case 24:
                        (f = t.sw[1][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 25:
                        (f = t.sw[2][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 26:
                        (f = t.gw[0][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 27:
                        (f = t.gw[1][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 28:
                        (f = t.gw[2][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 29:
                        (f = t.dw[0][0]).angle = m;
                        f.Ⲇⵠᐃ = He;
                        break;
                    case 30:
                        (f = t.dw[1][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 31:
                        (f = t.dw[2][0]).angle = m;
                        f.Ⲇⵠᐃ = He;
                        break;
                    case 32:
                        (f = t.a[0][0]).angle = m;
                        f.Ⲇⵠᐃ = Er;
                        break;
                    case 33:
                        (f = t.a[1][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 34:
                        (f = t.a[2][0]).angle = m;
                        f.Ⲇⵠᐃ = Ll;
                        break;
                    case 35:
                        (f = t.cs[0][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 36:
                        (f = t.cs[1][0]).angle = m;
                        f.Ⲇⵠᐃ = Er;
                        break;
                    case 37:
                        (f = t.cs[2][0]).angle = m;
                        f.Ⲇⵠᐃ = Ll;
                        break;
                    case 38:
                        (f = t.cs[3][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 40:
                        (f = t.plm[0][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 41:
                        (f = t.plm[1][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 42:
                        (f = t.plm[2][0]).angle = m;
                        f.Ⲇⵠᐃ = ph;
                        break;
                    case 50:
                        (f = t.re[0][0]).angle = m;
                        f.Ⲇⵠᐃ = He;
                        break;
                    case 51:
                        (f = t.re[1][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 52:
                        (f = t.re[2][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                        break;
                    case 55:
                        (f = t.c[0][0]).angle = m;
                        f.Ⲇⵠᐃ = Dq;
                        break;
                    case 56:
                        (f = t.m[0][0]).angle = m;
                        f.Ⲇⵠᐃ = He;
                        break;
                    case 57:
                        (f = t.m[1][0]).angle = m;
                        f.Ⲇⵠᐃ = Ch;
                        break;
                    case 58:
                        (f = t.m[2][0]).angle = m;
                        f.Ⲇⵠᐃ = true;
                }
                if (Tx.loaded && Tx.ΔΔᐃⲆⵠ && f) {
                    Tx.ᐃΔᐃ(c[3 + i] & 1, ⵠᐃΔⲆ[q], f.x, f.y);
                }
            }
        };
        this.ⲆⵠΔᐃⵠ = function () {
            this.ᐃⲆΔΔ[Lf](Vo[jo].stringify([33, Qx.ⲆⵠΔᐃⵠ.ⵠΔᐃⵠ, Qx.ⲆⵠΔᐃⵠ.ΔⲆΔΔⲆ]));
        };
        this.ΔⵠⵠΔⲆⲆᐃᐃΔ = function (a, b) {
            this.ᐃⲆΔΔ[Lf](Vo[pa].stringify([14, b, a.ⵠΔᐃⵠ, a.ΔⲆΔΔⲆ]));
        };
        this.ᐃΔⵠᐃⲆⵠⲆ = function (a, b, c) {
            if (b) {
                this.ᐃⲆΔΔ[Lf](Vo[pa].stringify([17, b, a.ⵠΔᐃⵠ, a.ΔⲆΔΔⲆ]));
            } else {
                this.ᐃⲆΔΔ[Lf](Vo[$o].stringify([0, c, a.ⵠΔᐃⵠ, a.ΔⲆΔΔⲆ]));
            }
        };
        this.ⲆⵠΔⲆⲆᐃⲆᐃΔ = function (a) {
            this.ᐃⲆΔΔ[Lf](ya[Pa].stringify([12, a.ⵠΔᐃⵠ, a.ΔⲆΔΔⲆ]));
        };
        this.ΔΔⵠᐃᐃΔᐃⵠᐃ = function (a) {
            this.ᐃⲆΔΔ[Lf](ya[Ga].stringify([30, a]));
        };
        this.ᐃⲆⲆΔΔⲆΔΔⲆ = function (a) {
            this.ᐃⲆΔΔ[Lf](fa[jo].stringify([21, a.ⵠΔᐃⵠ, a.ΔⲆΔΔⲆ]));
        };
        this.ⲆᐃᐃⲆⲆᐃⵠⲆᐃ = function (a, b) {
            this.ᐃⲆΔΔ[Lf](ba[Pa].stringify([9, b, a.ⵠΔᐃⵠ, a.ΔⲆΔΔⲆ, a.type]));
        };
        this.ⲆᐃᐃⲆⵠᐃΔΔΔ = function (a, b) {
            this.ᐃⲆΔΔ[Lf](ba[Pa].stringify([34, b, a.ⵠΔᐃⵠ, a.ΔⲆΔΔⲆ]));
        };
        this.ⲆᐃⲆΔᐃⵠⲆΔΔ = function (a, b, c) {
            this.ᐃⲆΔΔ[Lf](fa[pa].stringify([13, b, c, a.ⵠΔᐃⵠ, a.ΔⲆΔΔⲆ]));
        };
        this.ᐃᐃΔΔⲆΔΔ = function (a) {
            this.ᐃⲆΔΔ[Lf](ya[Pa].stringify([1, a.ⵠΔᐃⵠ, a.ΔⲆΔΔⲆ, a.type]));
        };
        this.ΔΔᐃᐃᐃⲆⵠⲆⵠ = function (a) {
            this.ᐃⲆΔΔ[Lf](ya[Pa].stringify([26, a.ⵠΔᐃⵠ, a.ΔⲆΔΔⲆ]));
        };
        this.ⲆᐃⲆᐃⵠⵠⵠᐃⵠ = function (a) {
            this.ᐃⲆΔΔ[Lf](ya[Pa].stringify([27, a.ⵠΔᐃⵠ, a.ΔⲆΔΔⲆ]));
        };
        this.ᐃΔⲆᐃⲆⲆⵠⵠᐃ = function (a) {
            this.ᐃⲆΔΔ[Lf](sq[Ba].stringify([23, a.ⵠΔᐃⵠ, a.ΔⲆΔΔⲆ]));
        };
        this.ⵠᐃⵠⲆⵠⵠⵠⵠΔ = function (a) {
            this.ᐃⲆΔΔ[Lf](tq[Ia].stringify([5, a.ΔⲆΔΔⲆ]));
        };
        this.ΔⵠΔⲆⵠᐃΔ = function (a) {
            c.ᐃⲆΔΔ[Lf](Oa[Ga].stringify([22, Qx.ᐃⲆⲆᐃᐃ.id, Qx.ⵠⲆᐃΔΔ[a]]));
        };
        this.ΔᐃᐃⵠⲆΔᐃᐃΔ = function () {
            c.ᐃⲆΔΔ[Lf](xq[Ya].stringify([38, Qx.ᐃⲆⲆᐃᐃ.ⵠΔᐃⵠ, Qx.ᐃⲆⲆᐃᐃ.id]));
        };
        this.ΔᐃΔⲆⵠᐃⵠ = function () {
            c.ᐃⲆΔΔ[Lf](yq[Za].stringify([18]));
        };
        this.ⵠⵠΔⵠΔΔᐃᐃᐃ = function () {
            c.ᐃⲆΔΔ[Lf](yq[Ga].stringify([4, Qx.ᐃⲆⲆᐃᐃ.id]));
            if (document.getElementById("lock_team").innerHTML == "LOCK") {
                Qx.ᐃⲆⲆᐃᐃ.lock = 1;
                document.getElementById("lock_team").innerHTML = "UNLOCK";
            } else {
                Qx.ᐃⲆⲆᐃᐃ.lock = 0;
                document.getElementById("lock_team").innerHTML = "LOCK";
            }
        };
        this.Ⲇᐃⵠ = function (j, e, i) {
            var k = new Uint16Array(j);
            if (i) {
                Px.ⵠⵠᐃᐃⵠᐃᐃⵠⵠ();
            }
            for (var n = (e.length - 2) / 18, o = 0; n > o; o++) {
                var q = 2 + o * 18;
                var t = 1 + o * 9;
                var w = e[q];
                var x = k[t + 1];
                var y = k[t + 5];
                var z = w * Px.ΔΔᐃᐃᐃΔᐃ + y;
                if (x & 1) {
                    Px.ΔⵠⵠⲆⵠᐃΔⲆΔ(z);
                } else {
                    var A = k[t + 2];
                    var B = k[t + 3];
                    var D = k[t + 4];
                    var E = k[t + 6];
                    var F = k[t + 7];
                    var G = k[t + 8];
                    var H = e[q + 1] / 255 * Math.PI * 2;
                    if (Px.ⲆΔᐃⲆᐃ[z]) {
                        var I = Px.ⲆΔᐃⲆᐃ[z];
                        I.r.x = B;
                        I.r.y = D;
                        if (w != 0 && ⵠᐃⵠ.ᐃⵠᐃⵠ(I, I.r) > 200) {
                            I.x = B;
                            I.y = D;
                        }
                        if (Qx.id !== I.id || w === 0) {
                            I.ⵠΔΔᐃⵠⲆⵠ = H;
                        }
                        I.action |= x;
                        I.info = E;
                        I.ΔᐃⲆΔⲆ = F;
                        I.ⵠᐃΔᐃΔ = G;
                        if (I.Ⲇⵠᐃ) {
                            I.Ⲇⵠᐃ(x);
                        }
                    } else {
                        var J = new Ww(A, w, y, B, D, H, x, E, F, G);
                        Px.ⲆΔᐃⲆᐃ[z] = J;
                        Px.Ⲇᐃⵠ[A].push(J);
                    }
                }
            }
        };
        this.ⵠⲆᐃⲆΔ = function (a) {
            this.ⲆⲆΔⲆⲆⲆⵠ = Wx;
            var b = new Uint16Array(a);
            Qx.ᐃⲆΔⲆⲆ.ᐃᐃⵠΔⵠ(b);
        };
        this.ΔⲆΔⲆⲆᐃΔⲆᐃ = function (a) {
            if (gt !== undefined) {
                ht = gt;
            }
            if (a.length > 0) {
                gt = JSON.parse(JSON.stringify(ht));
                for (var b = 0; b < a.length; b++) {
                    var c = a[b];
                    var d = ht[c.item];
                    if (d !== $q) {
                        d.r = c.recipe;
                        d.w = c.workbench;
                        d.f = c.fire;
                        d.ΔⵠⲆ = c.water;
                        d.e = c.well;
                        d.time = 1 / c.time;
                    }
                }
            }
        };
        this.ⲆⵠᐃΔⲆΔⲆ = function (a) {
            if (a && a.length !== 0) {
                Qx.ⲆⵠᐃΔⲆΔⲆ.message = function (b) {
                    var c = document.createElement("canvas");
                    var d = c.getContext("2d");
                    for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
                        b = b.replace("\\n", "\n");
                    }
                    b = b.split("\n");
                    Ⲇᐃ = [];
                    var f = 14;
                    var g = b.length * (f + 4) + 10;
                    var h = 0;
                    d.font = f + "px Baloo Paaji";
                    for (var i = 0; i < b.length; i++) {
                        if (b[i].charAt(0) === "#") {
                            Ⲇᐃ[i] = b[i].substring(0, 7);
                            b[i] = b[i].substring(8);
                        } else {
                            Ⲇᐃ[i] = "#FFFFFF";
                        }
                        h = Math.max(d.measureText(b[i]).width + 16, h);
                    }
                    c.height = g;
                    c.width = h;
                    i = 0;
                    for (; i < b.length; i++) {
                        var j = lc(1, b[i], f, Ⲇᐃ[i], null, null, null, null, null, "#000", 6);
                        d.drawImage(j, 8, (f + 4) * i + 5);
                    }
                    return c;
                }(a);
            } else {
                Qx.ⲆⵠᐃΔⲆΔⲆ.message = undefined;
            }
        };
        this.ⵠᐃΔⲆΔ = function (a) {
            var b = Px.ⲆΔᐃⲆᐃ[a[1] * Px.ΔΔᐃᐃᐃΔᐃ];
            if (b) {
                if (Px.mode === 2 && b.ᐃΔⲆⲆ === 0) {
                    if (Qx.ᐃΔΔⲆⵠ) {
                        if (Math.random() > 0.5) {
                            b.text.push(a[2] + " ..." + ⵠⵠΔⵠΔ);
                        } else {
                            b.text.push(ⵠⵠΔⵠΔ + "... " + a[2]);
                        }
                    } else {
                        b.text.push(ⲆΔᐃᐃᐃⵠⲆ[Math.floor(Math.random() * ⲆΔᐃᐃᐃⵠⲆ.length)]);
                    }
                } else {
                    b.text.push(a[2]);
                }
            }
        };
        this.ΔᐃᐃⵠⲆᐃⲆⲆΔ = function (a) {
            if (Qx.ⲆⲆⵠΔ.max !== Qx.ⲆⲆⵠΔ.ⵠⵠⵠΔΔ.length || ht[a].ᐃΔΔᐃ === 29 || Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(ht[a].ᐃΔΔᐃ) != -1 || Qx.ⲆⲆⵠΔ.ΔᐃⲆⵠⵠⵠΔΔᐃ(ht[a].r)) {
                this.ᐃⲆΔΔ[Lf](iq[No].stringify([2, a]));
                return 1;
            } else {
                this.ᐃⵠⲆᐃΔᐃᐃ();
                return 0;
            }
        };
        this.ⲆΔⲆΔⵠ = function (a) {
            Qx.ᐃⲆⵠΔ.ⲆᐃΔᐃⵠⵠⵠⲆᐃ(a);
        };
        this.ΔᐃⲆᐃᐃ = function (a) {
            Qx.ᐃⲆⵠΔ.ΔᐃⲆᐃᐃ = a;
            Qx.ᐃⲆⵠΔ.Ⲇⵠᐃ();
        };
        this.ⲆΔΔⵠΔ = function (a) {
            Qx.ᐃⲆⵠΔ.ⲆΔΔⵠΔ = a;
            Qx.ᐃⲆⵠΔ.Ⲇⵠᐃ();
        };
        this.ⵠᐃⲆΔᐃⵠᐃ = function (a) {
            Qx.ᐃⲆⵠΔ.ⵠᐃⲆΔᐃⵠᐃ = a;
            Qx.ᐃⲆⵠΔ.Ⲇⵠᐃ();
        };
        this.ᐃⲆⵠᐃⲆⵠΔΔΔ = function (a) {
            this.ⵠⲆᐃⲆⵠ(Ib[315]);
        };
        this.ⲆΔΔⵠⲆᐃⲆΔᐃ = function () {
            Qx.ᐃⲆⵠΔ.ᐃᐃⲆⲆⲆⵠᐃ();
        };
        this.ΔⲆⲆⲆᐃ = function (a) {
            Sx.ΔⲆⲆⲆᐃ.ⲆⲆⲆᐃ = [];
            var b = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
            var c = 0;
            for (var d = 1; d < a.length; d += 2) {
                var e = {
                    x: Math.floor(a[d] * Px.w / 250),
                    y: Math.floor(a[d + 1] * Px.ⲆⲆⲆ / 250)
                };
                if (b && !c && !Qx.ΔΔᐃⲆⲆᐃⵠ && ⵠᐃⵠ.ᐃⵠᐃⵠ(e, b) < 250) {
                    c += 1;
                } else {
                    Sx.ΔⲆⲆⲆᐃ.ⲆⲆⲆᐃ.push(e);
                }
            }
        };
        this.ⵠᐃᐃᐃⲆΔⵠⲆⵠ = function () {
            Qx.ⲆⵠΔᐃⵠ.open = tk;
            Qx.ⲆⵠΔⵠⲆ.enabled = w;
            Qx.ⲆⵠΔⵠⲆ.ⲆⲆΔΔⲆ = -1;
            Qx.ⲆⵠΔⵠⲆ.label = null;
            Qx.ⲆⵠΔⵠⲆ.ᐃΔᐃⲆⵠᐃᐃ = null;
            Qx.ⲆⵠΔⵠⲆ.now = -1;
        };
        this.ⲆⵠΔⵠⲆ = function (a) {
            Qw.ⲆΔᐃᐃᐃᐃⵠ = a;
            Qx.ⲆⵠΔⵠⲆ.enabled = true;
            Qx.ⲆⵠΔⵠⲆ.ⲆⲆΔΔⲆ = new Date().getTime();
            Qx.ⲆⵠΔⵠⲆ.label = null;
            Qx.ⲆⵠΔⵠⲆ.now = -1;
            for (var b = [45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; b.length > c; c++) {
                var d = Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(b[c]);
                if (d != -1) {
                    Qx.ⲆⲆⵠΔ.ᐃⲆⵠᐃΔⲆᐃ(b.length[c], d);
                }
            }
            Qx.ᐃⲆⵠΔ.ᐃᐃⲆⲆⲆⵠᐃ();
        };
        this.ΔⲆΔᐃⲆⵠⵠᐃⲆ = function (a, b, c) {
            this.ⵠᐃⲆⲆⲆΔⲆ(a, b * 256 + c);
        };
        this.ⵠᐃⲆⲆⲆΔⲆ = function (a, b) {
            Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ = -1;
            Qx.ⲆⲆⵠΔ.ᐃⲆᐃⵠⵠΔΔ(a, b, Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(a));
            Qx.ᐃⲆⵠΔ.Ⲇⵠᐃ();
        };
        this.ΔᐃⲆⲆᐃΔⵠᐃᐃ = function (a) {
            Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ = -1;
            Qx.ΔⲆⲆⵠⵠ.wait = true;
            var b = Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(a);
            Qx.ⲆⲆⵠΔ.ᐃⲆᐃⵠⵠΔΔ(a, 1, b);
            if (b >= 0 && !Qx.ⲆⲆⵠΔ.ΔⲆᐃ[a]) {
                Qx.ᐃⲆⵠΔ.Ⲇⵠᐃ();
            }
            if (a == 159) {
                Qx.ⵠⲆᐃΔΔ = [Qx.id];
            }
        };
        this.ⵠⵠⵠⲆⵠᐃΔⵠᐃ = function () {
            this.ᐃⲆΔΔ[Lf](Vo[jo].stringify([37]));
        };
        this.ⵠⵠⲆⵠⵠΔΔⵠᐃ = function (a) {
            this.ᐃⲆΔΔ[Lf](ba[$o].stringify([28, a.ΔⲆᐃⵠⵠ, a.id]));
        };
        this.ΔⲆᐃⵠᐃᐃⲆᐃΔ = function (a, b) {
            this.ᐃⲆΔΔ[Lf](ba[Pa].stringify([7, a, b]));
        };
        this.ᐃⵠⲆᐃΔⲆΔⲆⲆ = function () {
            var a = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
            if (a) {
                var b = Math.PI * 2;
                this.ᐃⲆΔΔ[Lf](ba[$o].stringify([15, Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ, Math.floor((a.angle + b) % b * 255 / b), Qx.ᐃⲆⵠΔ.mode]));
            }
        };
        this.ᐃΔΔⵠⲆ = function (a, b) {
            switch (a) {
                case 195:
                case 110:
                case 116:
                case 117:
                case 145:
                case 127:
                case 133:
                case 136:
                case 142:
                case 143:
                case 189:
                case 207:
                case 233:
                case 205:
                case 209:
                case 211:
                case 192:
                case 137:
                case 138:
                case 196:
                case 197:
                case 200:
                case 199:
                    Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ = -1;
                    this.ᐃⲆΔΔ[Lf](fa[pa].stringify([16, a]));
                    break;
                case 114:
                case 160:
                case 115:
                case 132:
                case 188:
                case 206:
                case 204:
                case 191:
                case 193:
                case 208:
                case 210:
                case 113:
                case 162:
                case 163:
                case 164:
                case 165:
                case 118:
                case 167:
                case 151:
                case 152:
                case 166:
                case 171:
                case 172:
                case 173:
                case 124:
                case 218:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 220:
                case 168:
                case 169:
                case 170:
                case 119:
                case 122:
                case 123:
                case 217:
                case 219:
                case 125:
                case 190:
                case 141:
                case 135:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 198:
                case 201:
                case 182:
                case 183:
                case 144:
                case 159:
                case 221:
                    if (!Qx.ᐃΔΔⲆⵠ) {
                        if (Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ === a) {
                            Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ = -1;
                        } else {
                            Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ = a;
                        }
                    }
                    break;
                case 0:
                case 57:
                case 5:
                case 6:
                case 30:
                case 19:
                case 9:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 92:
                case 93:
                case 12:
                case 13:
                case 14:
                case 15:
                case 33:
                case _r.ᐃΔⲆᐃΔΔⵠᐃⲆ:
                case 16:
                case 17:
                case 34:
                case 18:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                    if (!Qx.ᐃΔΔⲆⵠ) {
                        Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ = -1;
                        if ((c = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ]) && a === c.right) {
                            this.ᐃⲆΔΔ[Lf](ya[Pa].stringify([16, 7]));
                        } else {
                            Qx.ⲆⵠⲆᐃⲆ.wait = He;
                            this.ᐃⲆΔΔ[Lf](sq[Ba].stringify([16, a]));
                        }
                    }
                    break;
                case 1:
                case 8:
                case 3:
                case 4:
                case 35:
                case 36:
                case 37:
                case 28:
                case 38:
                case 39:
                case 31:
                case 32:
                case 45:
                case 46:
                case 50:
                case 51:
                case 52:
                case 55:
                case 56:
                case 53:
                case 54:
                case 89:
                case 49:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                    if (!Qx.ᐃΔΔⲆⵠ) {
                        Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ = -1;
                        if ((c = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ]) && c.right === a) {
                            this.ᐃⲆΔΔ[Lf](tq[Ia].stringify([16, 7]));
                        } else {
                            this.ᐃⲆΔΔ[Lf](Oa[Ga].stringify([16, a]));
                        }
                    }
                    break;
                case 223:
                case 224:
                case 225:
                case 239:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 91:
                    if (!Qx.ᐃΔΔⲆⵠ) {
                        Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ = -1;
                        var c = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
                        this.ᐃⲆΔΔ[Lf](Oa[Ga].stringify([16, a]));
                    }
                    break;
                case 77:
                case 78:
                case 79:
                case 58:
                case 25:
                case 26:
                case 27:
                case 43:
                case 44:
                case 20:
                case 21:
                case 22:
                case 59:
                case 60:
                case 90:
                case 61:
                case 47:
                    if ((c = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ]) && c.ⲆⵠᐃⲆᐃ !== a) {
                        Qx.ᐃᐃⵠⵠΔ.wait = ij;
                    }
                    this.ᐃⲆΔΔ[Lf](fa[Pa].stringify([16, a]));
                    break;
                case 10:
                case 83:
                case 84:
                case 86:
                case 11:
                case 40:
                case 88:
                case 82:
                case 80:
                case 81:
                case 41:
                case 42:
                case 85:
                case 23:
                case 24:
                case 48:
                    this.ᐃⲆΔΔ[Lf](xq[Ya].stringify([16, a]));
            }
        };
        this.ⲆⵠⵠΔᐃΔᐃⲆⵠ = function (a) {
            this.ᐃⲆΔΔ[Lf](ba[No].stringify([11, a]));
        };
        this.ⲆⵠⲆⵠᐃⲆᐃⵠΔ = function (a) {
            Qx.ΔⲆⲆⵠⵠ.wait = true;
            var b = Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(a);
            Qx.ⲆⲆⵠΔ.ᐃⲆⵠᐃΔⲆᐃ(a, b);
            Qx.ᐃⲆⵠΔ.Ⲇⵠᐃ();
        };
        this.ΔⵠⲆᐃⵠΔⲆᐃᐃ = function (a, b) {
            this.ᐃⲆΔΔ[Lf](iq[Ia].stringify([20, a]));
        };
        this.ᐃⵠᐃⵠⵠⵠΔᐃⲆ = function (a, b) {
            this.ᐃⲆΔΔ[Lf](Vo[jo].stringify([35, a]));
        };
        this.ΔⵠΔⵠⲆᐃΔⵠⵠ = function (a) {
            Qx.ΔⲆⲆⵠⵠ.wait = true;
            var b = Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(a);
            Qx.ⲆⲆⵠΔ.ᐃⲆᐃⵠⵠΔΔ(a, 1, b);
            Qx.ᐃⲆⵠΔ.Ⲇⵠᐃ();
        };
        this.ⵠᐃᐃⲆⲆΔᐃΔᐃ = function (a) {
            var b = a[1];
            var c = a[2];
            Qx.ΔⲆⲆⵠⵠ.wait = He;
            var d = Qx.ⲆⲆⵠΔ.ΔⲆΔᐃΔ(b);
            Qx.ⲆⲆⵠΔ.ᐃⲆᐃⵠⵠΔΔ(b, c, d);
            Qx.ᐃⲆⵠΔ.Ⲇⵠᐃ();
        };
        this.ⲆΔⵠⲆΔᐃⵠᐃᐃ = function () {
            this.ᐃⲆΔΔ[Lf](Vo[jo].stringify([36]));
        };
        this.ⵠᐃⵠΔΔⲆⵠⵠⲆ = function (a) {
            var b = Math.PI * 2;
            this.ᐃⲆΔΔ[Lf](ba[$o].stringify([24, Math.floor((a + b) % b * 255 / b)]));
        };
        this.ⵠⲆⵠᐃⲆΔᐃⲆⲆ = function (a) {
            var b = Math.PI * 2;
            this.ᐃⲆΔΔ[Lf](ba[$o].stringify([19, Math.floor((a + b) % b * 255 / b)]));
        };
        this.ⲆⵠΔⲆᐃⵠᐃⵠⵠ = function (a) {
            this.ᐃⲆΔΔ[Lf](ⵠⵠⲆⵠᐃᐃⵠ[0].stringify([3, a]));
        };
        this.ⵠᐃⵠⲆⵠⲆⵠΔᐃ = function (a) {
            this.ᐃⲆΔΔ[Lf](ya[Pa].stringify([31, a]));
        };
        this.ⵠⲆΔΔᐃⲆⵠᐃΔ = function (a) {
            var b = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
            if (Qx.ᐃΔΔⲆⵠ) {
                if (Math.random() > 0.5) {
                    b.text.push(a.substring(0, 25) + " ..." + ⵠⵠΔⵠΔ);
                } else {
                    b.text.push(ⵠⵠΔⵠΔ + "... " + a.substring(0, 25));
                }
            } else {
                b.text.push(a);
            }
            this.ᐃⲆΔΔ[Lf](ya[Pa].stringify([8, a]));
        };
        this.ᐃΔᐃⵠΔ = function (a) {
            var b = ⵠᐃΔᐃ.select.Ⲇᐃⵠ;
            if (b.length != 0) {
                var c = [3];
                var d = [];
                ⵠᐃⵠ.ⵠⵠΔⵠΔΔΔ(a, {
                    x: ⵠᐃΔᐃ.ΔᐃⲆ.rx,
                    y: ⵠᐃΔᐃ.ΔᐃⲆ.ry
                });
                c.push(a.x);
                c.push(a.y);
                for (var e = 0; e < b.length; e++) {
                    d.push(b[e].ⵠⵠΔΔΔΔⲆΔⵠ);
                }
                c.push(d);
                this.ᐃⲆΔΔ[Lf](sq[Ba].stringify(c));
            }
        };
        this.ⵠᐃⲆⲆΔⵠⲆ = 0;
        this.ⵠⲆΔΔⵠⵠΔ = {
            Δⵠ: 0,
            Δⵠᐃ: 0
        };
        this.ᐃᐃⵠᐃⲆⵠᐃⲆΔ = function () {
            if (Wx - this.ⵠᐃⲆⲆΔⵠⲆ > 50) {
                this.ⵠᐃⲆⲆΔⵠⲆ = Wx;
                var a = Qx.ΔᐃⲆ;
                var b = Math.floor(a.x / 100);
                var c = Math.floor(a.y / 100);
                if (b != this.ⵠⲆΔΔⵠⵠΔ.Δⵠ || this.ⵠⲆΔΔⵠⵠΔ.Δⵠᐃ != c) {
                    this.ᐃⲆΔΔ[Lf](Oa[Ia].stringify([10, Math.floor(-a.x), Math.floor(-a.y)]));
                    this.ⵠⲆΔΔⵠⵠΔ.Δⵠ = b;
                    this.ⵠⲆΔΔⵠⵠΔ.Δⵠᐃ = c;
                }
            }
        };
        this.ⲆΔⵠⵠΔᐃᐃ = 0;
        this.ⲆΔⵠᐃⵠᐃⵠΔᐃ = function () {
            if (Wx - this.ⲆΔⵠⵠΔᐃᐃ > 60000) {
                this.ⲆΔⵠⵠΔᐃᐃ = Wx;
                this.ping();
            }
        };
        this.ⲆⵠⵠΔⵠⲆⵠⲆⲆ = function () {
            Qx.reconnect.enabled = true;
            if (this.ᐃⲆΔΔ.ΔᐃΔᐃᐃ == this.ΔᐃΔᐃᐃ) {
                this.ΔᐃΔᐃᐃ++;
                this.ᐃⲆΔΔ.close();
                ΔⵠΔΔ.connect();
            }
        };
        this.ⲆᐃⲆΔΔΔⵠⵠⲆ = function (a) {
            this.ⵠⲆᐃⲆⵠ(Ib[316]);
            for (var b = 1; b < a.length; b++) {
                Qx.ⵠⲆᐃΔΔ.push(a[b]);
            }
        };
        this.ΔᐃΔᐃΔΔΔⲆⵠ = function (a) {
            this.ⵠⲆᐃⲆⵠ(Px.ⲆⲆⲆᐃ[a].ΔⵠⲆⵠⲆ + Ib[318]);
            Qx.ⵠⲆᐃΔΔ.push(a);
            var b = document.getElementById("team_box");
            if (Sx.ⵠᐃⲆΔⵠ != -1 && b.style.display == "inline-block") {
                Sx.ⲆⲆᐃᐃᐃ[Sx.ⵠᐃⲆΔⵠ].action();
            }
        };
        this.ΔⲆⲆⵠᐃⵠΔⵠⲆ = function () {
            this.ⵠⲆᐃⲆⵠ(Ib[319]);
            Qx.ᐃⲆⲆᐃᐃ.wait = true;
            Qx.ⵠⲆᐃΔΔ = [];
            document.getElementById("team_box").style.display = "none";
        };
        this.ⵠΔⵠⵠΔΔΔⵠΔ = function (a) {
            if (Qx.id == a) {
                this.ⵠⲆᐃⲆⵠ(Ib[320]);
                Qx.ᐃⲆⲆᐃᐃ.wait = Un;
                Qx.ⵠⲆᐃΔΔ = [];
                document.getElementById("team_box").style.display = "none";
            } else {
                this.ⵠⲆᐃⲆⵠ(Px.ⲆⲆⲆᐃ[a].ΔⵠⲆⵠⲆ + Ib[321]);
                for (var b = 0; Qx.ⵠⲆᐃΔΔ.length > b; b++) {
                    if (Qx.ⵠⲆᐃΔΔ[b] == a) {
                        Qx.ⵠⲆᐃΔΔ.splice(b, 1);
                        break;
                    }
                }
                var c = document.getElementById("team_box");
                if (Sx.ⵠᐃⲆΔⵠ != -1 && c.style.display == "inline-block") {
                    Sx.ⲆⲆᐃᐃᐃ[Sx.ⵠᐃⲆΔⵠ].action();
                }
            }
        };
        this.ⲆⲆᐃⵠΔⵠΔⵠᐃ = function (a) {
            Qx.ⵠΔΔᐃⲆ = Tq;
            this.ⵠⲆᐃⲆⵠ(Ib[322]);
            if (this.ΔᐃΔᐃᐃ == this.ᐃⲆΔΔ.ΔᐃΔᐃᐃ) {
                this.ΔᐃΔᐃᐃ++;
                Sx.ⵠⲆⲆᐃⵠ(Mx.ΔΔᐃⲆⵠ);
                this.ᐃⲆΔΔ.close();
            }
        };
        this.ΔᐃᐃⲆΔⲆᐃⵠⵠ = function (a, b) {
            Qx.ⵠΔΔᐃⲆ = false;
            var c = new Uint16Array(b);
            var d = new Uint32Array(b);
            Qx.ΔⲆⲆⲆⵠᐃⲆ.ΔΔΔᐃᐃⲆᐃ = Dt[a][Math.floor(Math.random() * Dt[a].length)];
            Qx.ΔⲆⲆⲆⵠᐃⲆ.ᐃⵠΔⵠΔ = ⵠᐃⵠ.ⵠⲆΔⲆⵠᐃΔ(Px.ⲆⲆⲆᐃ[Qx.id].ᐃⵠΔⵠΔ);
            Qx.ΔⲆⲆⲆⵠᐃⲆ.ⲆⵠᐃΔᐃᐃⵠ = ⵠᐃⵠ.ⵠⲆΔⲆⵠᐃΔ(d[1]);
            Qx.ΔⲆⲆⲆⵠᐃⲆ.ᐃⵠⲆᐃⲆⲆⲆ = c[1];
            this.ⵠⲆᐃⲆⵠ(Ib[317]);
            if (this.ΔᐃΔᐃᐃ == this.ᐃⲆΔΔ.ΔᐃΔᐃᐃ) {
                this.ΔᐃΔᐃᐃ++;
                Sx.ⵠⲆⲆᐃⵠ(Rx.ΔΔᐃⲆⵠ);
                this.ᐃⲆΔΔ.close();
                try {
                    hc.Widget.adsRefresh();
                } catch (a) { }
            }
            Settings.AutoSpike.e = false;
        };
        this.ping = function () {
            this.ᐃⲆΔΔ[Lf]("[6]");
        };
        this.ᐃⵠᐃⲆⵠⲆⲆⵠⵠ = function () {
            if (this.ᐃⲆΔΔ.readyState == 3) {
                this.ⲆⲆΔⲆⲆⲆⵠ -= 600000;
            }
        };
        this.ᐃⵠᐃΔⵠᐃⲆᐃⲆ = function () {
            if (Xx > 5) {
                this.ⲆⲆΔⲆⲆⲆⵠ = Wx;
            }
            if (Wx - this.ⲆⲆΔⲆⲆⲆⵠ > 600000) {
                this.ⲆⲆΔⲆⲆⲆⵠ = Wx;
                this.ⲆⵠⵠΔⵠⲆⵠⲆⲆ();
            }
        };
        this.ⵠⲆΔΔⵠⲆⲆᐃⵠ = function (b) {
            $x++;
            clearTimeout(this.ᐃⲆΔⵠⲆ);
            document.getElementById("commandMainBoxName").innerHTML = this.ᐃⵠΔⲆⲆ[this.ⲆⲆⲆⲆⲆ][this.ΔΔᐃᐃⵠᐃᐃ[this.ⲆⲆⲆⲆⲆ]].a;
            document.getElementById("exploreForest").src = "img/forest-leaf.png";
            document.getElementById("exploreWinter").src = "img/winter-flake.png";
            document.getElementById("exploreDesert").src = "img/desert-cactus.png";
            document.getElementById("exploreLava").src = "img/lava-volcano.png";
            this.ⲆⲆΔⲆⲆⲆⵠ = Wx;
            Qx.ᐃᐃᐃⵠ.ⵠᐃᐃⵠⲆ.Ⲇⵠⵠᐃⵠ = Qx.ᐃᐃᐃⵠ.ⵠᐃᐃⵠⲆ.ⵠΔΔᐃΔ;
            Qx.ᐃᐃᐃⵠ.ΔⲆᐃΔⵠΔⲆ.Ⲇⵠⵠᐃⵠ = Qx.ᐃᐃᐃⵠ.ΔⲆᐃΔⵠΔⲆ.ⵠΔΔᐃΔ;
            Qx.ᐃᐃᐃⵠ.ᐃΔⲆⵠⲆⵠΔ.Ⲇⵠⵠᐃⵠ = Qx.ᐃᐃᐃⵠ.ᐃΔⲆⵠⲆⵠΔ.ⵠΔΔᐃΔ;
            Qx.ᐃᐃᐃⵠ.ᐃΔⲆᐃⵠΔⵠ.Ⲇⵠⵠᐃⵠ = Qx.ᐃᐃᐃⵠ.ᐃΔⲆᐃⵠΔⵠ.ⵠΔΔᐃΔ;
            Qx.ᐃᐃᐃⵠ.ⵠⵠΔⲆᐃⵠᐃ.Ⲇⵠⵠᐃⵠ = Qx.ᐃᐃᐃⵠ.ⵠⵠΔⲆᐃⵠᐃ.ⵠΔΔᐃΔ;
            Qx.ᐃᐃᐃⵠ.ᐃᐃⵠⲆ = 1;
            Qx.ᐃᐃᐃⵠ.c = 1;
            Qx.ᐃᐃᐃⵠ.ⲆⲆⲆ = 1;
            Qx.ᐃᐃᐃⵠ.ᐃⲆᐃ = 1;
            Qx.ᐃᐃᐃⵠ.ΔⵠⲆ = 1;
            Qx.ᐃᐃᐃⵠ.ᐃᐃⲆΔⵠⲆᐃ = 1;
            Qx.ᐃΔⲆⲆΔᐃⵠ = false;
            Sx.ᐃⵠΔⲆⵠ.display = 0;
            Qx.ⲆⲆⵠΔ.ⵠⵠⵠΔΔ = [];
            Qx.ⲆⲆⵠΔ.ΔⲆᐃ = [];
            Qx.ⲆⲆⵠΔ.max = 10;
            Qx.ⲆⲆⵠΔ.ⲆᐃⵠΔᐃⵠⵠ = 0;
            Qx.ⲆⲆⵠΔ.ⵠᐃΔⲆⲆ = 0;
            Qx.ⲆⲆⵠΔ.id = -1;
            Sx.ᐃᐃΔᐃⲆⵠⵠ = 1;
            Sx.ΔᐃᐃΔⲆΔⵠ = 1;
            Sx.ⵠᐃⵠᐃᐃⲆⵠ = 1;
            Sx.ᐃΔᐃᐃⲆⵠᐃ = 1;
            Qx.ⵠΔΔᐃⲆ = ai;
            Qx.ⲆⲆⵠΔ.ᐃⵠΔΔⲆΔᐃ.stop();
            Qx.ᐃⲆⵠΔ.ᐃⲆⲆⲆⵠ = [];
            Qx.ᐃⲆⵠΔ.ⵠᐃⲆΔΔ = false;
            Qx.ᐃⲆⵠΔ.ΔΔΔΔⲆΔΔᐃⲆ = th;
            Qx.ᐃⲆⵠΔ.ⵠΔⲆᐃ = -1;
            Qx.ᐃⲆⵠΔ.id = -1;
            Qx.ᐃⲆⵠΔ.ⲆΔⲆΔⵠ = false;
            Qx.ᐃⲆⵠΔ.ΔᐃⲆᐃᐃ = w;
            Qx.ᐃⲆⵠΔ.ⲆΔΔⵠΔ = th;
            Qx.ᐃⲆⵠΔ.ⵠᐃⲆΔᐃⵠᐃ = false;
            Qx.ᐃⲆⵠΔ.timeout = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0, 1, 0, 1, 1);
            Qx.ⲆⵠⲆᐃⲆ.timeout = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0, 1, 0, 0.1, 1);
            Qx.ⲆⵠⲆᐃⲆ.wait = th;
            Qx.ᐃᐃⵠⵠΔ.timeout = new ⵠᐃⵠ.ⵠᐃⵠⲆ(Dj, 0, 1, 0, 1 / 5, 1);
            Qx.ᐃᐃⵠⵠΔ.wait = false;
            Qx.ΔⲆⲆⵠⵠ.timeout = new ⵠᐃⵠ.ⵠᐃⵠⲆ(C, 0, 1, 0, 1, 1);
            Qx.ΔⲆⲆⵠⵠ.wait = false;
            Qx.ᐃⲆⲆᐃᐃ.id = -1;
            Qx.ᐃⲆⲆᐃᐃ.ⵠΔᐃⵠ = -1;
            Qx.ᐃⲆⲆᐃᐃ.wait = th;
            Qx.ᐃⲆⲆᐃᐃ.timeout = new ⵠᐃⵠ.ⵠᐃⵠⲆ(false, 0, 1, 0, 1 / 30, 1);
            Sx.ΔⲆⲆⲆᐃ.ᐃⲆᐃΔⵠ.x = -1;
            Sx.ΔⲆⲆⲆᐃ.ᐃⲆᐃΔⵠ.y = -1;
            Sx.ⲆΔⲆΔ.open = Pn;
            Sx.ΔⲆⲆⲆᐃ.ⲆⲆⲆᐃ = [];
            Qx.ⲆⵠⵠⵠΔΔΔ.enabled = false;
            Px.mode = b[1];
            if (ug !== b[20] && b[21] !== lh) {
                Px.ⵠⵠᐃⵠⵠ = b[20];
                Px.Ⲇᐃⵠⵠⵠ = b[21];
                Px.w = Px.ΔᐃᐃΔΔⲆⵠ * Px.ⵠⵠᐃⵠⵠ;
                Px.ⲆⲆⲆ = Px.Ⲇᐃⵠⵠⵠ * Px.ΔΔⲆⵠᐃΔᐃ;
            }
            Px.ΔᐃᐃᐃⵠᐃⲆ = b[22];
            Px.ⵠⵠΔΔΔ = b[23];
            c.ⲆⵠᐃΔⲆΔⲆ(b[24]);
            c.ΔⲆΔⲆⲆᐃΔⲆᐃ(b[25]);
            Qx.ⲆⵠᐃⵠⲆ.ⲆⵠⵠⲆᐃ = b[26];
            Qx.ᐃⲆⲆⵠΔⲆⵠ = 0;
            Qx.ᐃᐃⲆⵠⲆ.ⲆⵠⵠⲆᐃ = b[27];
            Px.ⲆⲆⵠᐃΔΔⲆᐃᐃ(b[19]);
            Px.time = b[5];
            Px.ΔᐃΔᐃΔ.ᐃᐃΔΔⲆ = b[15];
            Px.ΔᐃΔᐃΔ.ᐃᐃⵠΔⵠ = new Date().getTime();
            Sx.ᐃΔⲆᐃ.ⵠᐃⵠⲆᐃΔΔ = b[16];
            Px.transition = Dj;
            Qx.Ⲇⵠⵠ = b[2];
            Sx.ᐃΔⲆᐃ.reset();
            Qx.ⵠⲆᐃΔΔ = b[8];
            Px.Ⲇᐃⵠ[0] = [];
            Px.Ⲇᐃⵠ[100] = [];
            Px.Ⲇᐃⵠ[2] = [];
            Px.Ⲇᐃⵠ[1] = [];
            Px.Ⲇᐃⵠ[6] = [];
            Px.Ⲇᐃⵠ[3] = [];
            Px.Ⲇᐃⵠ[31] = [];
            Px.Ⲇᐃⵠ[37] = [];
            Px.Ⲇᐃⵠ[43] = [];
            Px.Ⲇᐃⵠ[44] = [];
            Px.Ⲇᐃⵠ[39] = [];
            Px.Ⲇᐃⵠ[40] = [];
            Px.Ⲇᐃⵠ[54] = [];
            Px.Ⲇᐃⵠ[55] = [];
            Px.Ⲇᐃⵠ[4] = [];
            Px.Ⲇᐃⵠ[7] = [];
            Px.Ⲇᐃⵠ[8] = [];
            Px.Ⲇᐃⵠ[9] = [];
            Px.Ⲇᐃⵠ[10] = [];
            Px.Ⲇᐃⵠ[15] = [];
            Px.Ⲇᐃⵠ[16] = [];
            Px.Ⲇᐃⵠ[17] = [];
            Px.Ⲇᐃⵠ[45] = [];
            Px.Ⲇᐃⵠ[46] = [];
            Px.Ⲇᐃⵠ[47] = [];
            Px.Ⲇᐃⵠ[48] = [];
            Px.Ⲇᐃⵠ[49] = [];
            Px.Ⲇᐃⵠ[53] = [];
            Px.Ⲇᐃⵠ[11] = [];
            Px.Ⲇᐃⵠ[22] = [];
            Px.Ⲇᐃⵠ[23] = [];
            Px.Ⲇᐃⵠ[5] = [];
            Px.Ⲇᐃⵠ[12] = [];
            Px.Ⲇᐃⵠ[13] = [];
            Px.Ⲇᐃⵠ[14] = [];
            Px.Ⲇᐃⵠ[60] = [];
            Px.Ⲇᐃⵠ[70] = [];
            Px.Ⲇᐃⵠ[71] = [];
            Px.Ⲇᐃⵠ[72] = [];
            Px.Ⲇᐃⵠ[73] = [];
            Px.Ⲇᐃⵠ[74] = [];
            Px.Ⲇᐃⵠ[81] = [];
            Px.Ⲇᐃⵠ[82] = [];
            Px.Ⲇᐃⵠ[87] = [];
            Px.Ⲇᐃⵠ[86] = [];
            Px.Ⲇᐃⵠ[34] = [];
            Px.Ⲇᐃⵠ[65] = [];
            Px.Ⲇᐃⵠ[66] = [];
            Px.Ⲇᐃⵠ[67] = [];
            Px.Ⲇᐃⵠ[62] = [];
            Px.Ⲇᐃⵠ[63] = [];
            Px.Ⲇᐃⵠ[78] = [];
            Px.Ⲇᐃⵠ[77] = [];
            Px.Ⲇᐃⵠ[75] = [];
            Px.Ⲇᐃⵠ[76] = [];
            Px.Ⲇᐃⵠ[64] = [];
            Px.Ⲇᐃⵠ[69] = [];
            Px.Ⲇᐃⵠ[68] = [];
            Px.Ⲇᐃⵠ[79] = [];
            Px.Ⲇᐃⵠ[89] = [];
            Px.Ⲇᐃⵠ[83] = [];
            Px.Ⲇᐃⵠ[84] = [];
            Px.Ⲇᐃⵠ[85] = [];
            Px.Ⲇᐃⵠ[80] = [];
            Px.Ⲇᐃⵠ[88] = [];
            Px.Ⲇᐃⵠ[91] = [];
            Px.Ⲇᐃⵠ[90] = [];
            Px.Ⲇᐃⵠ[61] = [];
            Px.Ⲇᐃⵠ[18] = [];
            Px.Ⲇᐃⵠ[19] = [];
            Px.Ⲇᐃⵠ[20] = [];
            Px.Ⲇᐃⵠ[21] = [];
            Px.Ⲇᐃⵠ[50] = [];
            Px.Ⲇᐃⵠ[52] = [];
            Px.Ⲇᐃⵠ[51] = [];
            Px.Ⲇᐃⵠ[29] = [];
            Px.Ⲇᐃⵠ[56] = [];
            Px.Ⲇᐃⵠ[30] = [];
            Px.Ⲇᐃⵠ[38] = [];
            Px.Ⲇᐃⵠ[33] = [];
            Px.Ⲇᐃⵠ[32] = [];
            Px.Ⲇᐃⵠ[24] = [];
            Px.Ⲇᐃⵠ[25] = [];
            Px.Ⲇᐃⵠ[26] = [];
            Px.Ⲇᐃⵠ[27] = [];
            Px.Ⲇᐃⵠ[28] = [];
            Px.Ⲇᐃⵠ[42] = [];
            Px.Ⲇᐃⵠ[41] = [];
            Px.Ⲇᐃⵠ[35] = [];
            Px.Ⲇᐃⵠ[36] = [];
            Px.ⲆΔᐃⲆᐃ = [];
            Px.ΔΔᐃᐃᐃΔᐃ = b[7];
            Qx.id = b[9];
            Qx.ΔΔⵠΔ = Qx.id * Px.ΔΔᐃᐃᐃΔᐃ;
            if (Tx.loaded) {
                Tx.ⲆⲆⲆᐃ[0].ΔΔⵠΔ = Qx.ΔΔⵠΔ;
                Tx.ⲆⲆⲆᐃ[0].ⲆΔᐃⵠᐃⵠⲆ = 0;
            }
            Ux.ⵠⲆⲆⲆⲆⲆⲆ();
            Qx.ΔᐃⲆ.ΔΔⲆⵠᐃ(b[3], b[10]);
            Px.ⲆⲆⲆᐃ = [];
            var d = Px.ⲆⲆⲆᐃ;
            for (var e = 0; e < b[11]; e++) {
                d.push(new $w());
            }
            e = 0;
            for (var f = b[4]; e < f.length; e++) {
                var g = d[f[e].i];
                g.ΔⵠⲆⵠⲆ = f[e].n;
                g.ᐃΔⲆⲆ = f[e].s;
                g.ⵠᐃⲆⵠΔ = f[e].a;
                g.ⵠⵠΔⲆⵠ = f[e].c;
                g.ⲆⵠⵠⲆⲆ = f[e].b;
                g.ⲆᐃΔⵠⲆ = f[e].d;
                g.ΔΔΔΔⲆᐃΔ = f[e].g;
                g.level = f[e].l;
                g.ᐃⵠΔⵠΔ = ⵠᐃⵠ.ΔⲆⵠΔⵠⲆⵠ(f[e].p);
                g.ⵠΔΔᐃⲆ = true;
                if (Wf === 1) {
                    g.ΔⵠⲆⵠⲆ += "|" + f[e].i;
                }
            }
            Qx.ᐃⲆΔⲆⲆ.sort();
            if (Px.mode === 1 && Px.ⲆⲆⲆᐃ[Qx.id].ΔⵠⲆⵠⲆ === "spectator") {
                Qx.ΔΔᐃⲆⲆᐃⵠ = Bh;
            } else {
                Qx.ΔΔᐃⲆⲆᐃⵠ = pq;
            }
            if (Px.mode === 2 && Px.ⲆⲆⲆᐃ[Qx.id].ᐃΔⲆⲆ === 0) {
                Qx.ᐃΔΔⲆⵠ = ur;
            } else {
                Qx.ᐃΔΔⲆⵠ = pq;
            }
            if (Px.mode === 3 && Px.ⲆⲆⲆᐃ[Qx.id].ᐃΔⲆⲆ === 0) {
                Qx.ΔⲆΔⲆᐃⲆⵠ = ur;
            } else {
                Qx.ΔⲆΔⲆᐃⲆⵠ = tk;
            }
            ⲆΔⵠⲆ.set("starve_token", Qx.ᐃᐃⵠⲆᐃ);
            if (b[12] === 0) {
                Qx.ᐃᐃⲆⵠΔ.ⲆⲆΔΔⲆ = 0;
                Sx.ᐃΔⲆᐃ.restore(b[17]);
                var h = b[14];
                if (h[29]) {
                    Qx.ⲆⲆⵠΔ.ⵠᐃⵠᐃᐃᐃⵠ(1, 0);
                }
                for (e = 0; e < h.length; e++) {
                    if (h[e]) {
                        if (e == 29) {
                            continue;
                        }
                        if (e == 7) {
                            continue;
                        }
                        this.ⵠᐃⵠⲆⵠᐃⵠ([0, e, h[e]]);
                    }
                }
                Qx.ᐃᐃⲆⵠΔ.open = false;
            } else {
                if (Px.mode === 4) {
                    this.ⵠᐃⵠⲆⵠᐃⵠ([0, 238, 1]);
                } else if (Px.mode === 3) {
                    if (Qx.ΔⲆΔⲆᐃⲆⵠ) {
                        this.ⵠᐃⵠⲆⵠᐃⵠ([0, 190, 4]);
                    } else {
                        this.ⵠᐃⵠⲆⵠᐃⵠ([0, 191, 3]);
                    }
                }
                if (Px.mode === 0 || Px.mode === 3 || Px.mode === 7 || Px.mode === 4) {
                    Qx.ᐃᐃⲆⵠΔ.ⲆⲆΔΔⲆ = new Date().getTime();
                    Qx.ᐃᐃⲆⵠΔ.open = true;
                    Qx.ᐃᐃⲆⵠΔ.value = b[13];
                    Sx.ᐃᐃⲆⵠΔ.ᐃᐃⵠΔⵠ();
                } else {
                    Qx.ᐃᐃⲆⵠΔ.ⲆⲆΔΔⲆ = 0;
                    Qx.ᐃᐃⲆⵠΔ.open = kg;
                    Qx.ᐃᐃⲆⵠΔ.value = 0;
                }
                Qx.ΔΔΔⲆᐃⵠⲆ = b[12].toString();
            }
            Qx.ⲆⵠΔⵠⲆ.enabled = b[6];
            Qx.ⲆⵠΔⵠⲆ.ⲆⲆΔΔⲆ = -1;
            Qx.ⲆⵠΔⵠⲆ.label = null;
            Qx.ⲆⵠΔⵠⲆ.now = -1;
            ⲆΔⵠⲆ.set("starve_token_id", Qx.ΔΔΔⲆᐃⵠⲆ);
            if (Qx.reconnect.enabled) {
                Qx.reconnect.rotate = 0;
                Qx.reconnect.enabled = Lj;
            } else {
                Mx.ⵠⲆⲆᐃⵠ(Sx.ΔΔᐃⲆⵠ);
                if (ga) {
                    ga("send", "event", "Game", "play", "S" + Mx.ᐃΔⲆⲆ + "A" + Mx.ⵠᐃⲆⵠΔ);
                }
            }
        };
        this.connect = function () {
            c.ᐃⵠᐃⲆⵠᐃΔ = 0;
            c.ᐃᐃᐃⲆᐃⵠᐃ();
        };
        this.ⵠᐃⵠᐃⵠΔᐃ = [];
        this.ΔⵠΔΔⵠᐃⲆᐃⵠ = function (b) {
            const d = c.ⵠⲆⵠⲆᐃ.filter(a => a.gm === b);
            const f = {};
            for (let a = 0; d.length > a; a++) {
                const b = d[a];
                const c = b.r;
                if (c !== undefined) {
                    if (Qk === f[c]) {
                        f[c] = [];
                    }
                    f[c].push(b);
                }
            }
            function e(d) {
                c.ⵠᐃⵠᐃⵠΔᐃ[b] = d;
                const e = f[d];
                const g = e[Math.floor(Math.random() * e.length)];
                c.ᐃᐃᐃᐃΔᐃᐃ({
                    domain: Uf,
                    is_tls: 1,
                    id: g.id,
                    p: g.p
                });
            }
            if (c.ⵠᐃⵠᐃⵠΔᐃ[b] !== undefined) {
                e(c.ⵠᐃⵠᐃⵠΔᐃ[b]);
                return;
            }
            let a = 1;
            function g(b) {
                const c = new hc.XMLHttpRequest();
                const d = b[0];
                const f = d.p;
                const g = d.r;
                const i = f[Math.floor(Math.random() * f.length)];
                c.open("GET", "https://" + i + "." + Uf + "/", ij);
                c.onreadystatechange = function () {
                    if (c.readyState === 4) {
                        if (a === 0) {
                            return;
                        }
                        a = 0;
                        e(g);
                    }
                };
                c.send();
            }
            for (let a in f) {
                g(f[a]);
            }
            hc.setTimeout(function () {
                if (a === 0) {
                    return;
                }
                a = 0;
                const b = hc.Object.keys(f);
                e(b[Math.floor(b.length * Math.random())]);
            }, 5000);
        };
        this.ⵠⵠᐃΔⵠⵠⲆᐃΔ = function () {
            let a = Qw.ⲆᐃΔⲆᐃⵠⵠ[c.ⲆⲆⲆⲆⲆ];
            console.log(Qk, undefined, undefined);
            let b = c.ΔΔᐃᐃⵠᐃᐃ[c.ⲆⲆⲆⲆⲆ];
            let d = c.ⵠⲆⵠⲆᐃ.find(c => c.gm == a && c.idx == b);
            if (d === undefined) {
                c.ΔⵠΔΔⵠᐃⲆᐃⵠ(a);
            } else {
                c.ᐃᐃᐃᐃΔᐃᐃ({
                    domain: Uf,
                    is_tls: 1,
                    id: d.id,
                    p: d.p
                });
            }
        };
        this.ᐃᐃᐃⲆᐃⵠᐃ = function () {
            console.log(undefined);
            if (Nw !== undefined && Hf !== Xa) {
                console.log(hg, ih, undefined);
                c.ᐃᐃᐃᐃΔᐃᐃ({
                    domain: Uf,
                    is_tls: 1,
                    id: Hf + Nw,
                    p: c.ⵠⲆⲆⲆⵠⵠⲆ[Hf]
                });
                return;
            }
            if (hg === Nf) {
                c.ⵠⵠᐃΔⵠⵠⲆᐃΔ();
            } else {
                c.ᐃᐃᐃᐃΔᐃᐃ({
                    domain: Nf.domain,
                    is_tls: Nf.ssl,
                    id: Nf.id,
                    p: [Nf.p]
                });
            }
        };
        this.ᐃᐃᐃᐃΔᐃᐃ = function (b) {
            let d = b.domain;
            let e = b.is_tls;
            let f = b.id;
            let a = b.p;
            let g = a[Math.floor(Math.random() * a.length)];
            let i = e ? "wss://" + g + "." + d + "/" + f : "ws://" + d;
            console.log(Xa, eq);
            c.ᐃⲆΔΔ = new hc.WebSocket(i);
            c.ᐃⲆΔΔ.binaryType = "arraybuffer";
            c.ᐃⲆΔΔ.ΔᐃΔᐃᐃ = c.ΔᐃΔᐃᐃ;
            c.ᐃⲆΔΔ.onmessage = function (a) {
                if (c.ΔᐃΔᐃᐃ == c.ΔᐃΔᐃᐃ) {
                    if (typeof a.data == "string") {
                        var b = JSON.parse(a.data);
                        switch (b[0]) {
                            case 0:
                                c.ⵠᐃΔⲆΔ(b);
                                break;
                            case 1:
                                c.ⲆⲆⲆⵠΔⲆΔ(b[1]);
                                break;
                            case 2:
                                c.ᐃᐃᐃΔⵠΔⲆⲆⲆ(b);
                                break;
                            case 3:
                                c.ⵠⲆΔΔⵠⲆⲆᐃⵠ(b);
                                break;
                            case 4:
                                c.message(b[1]);
                                break;
                            case 5:
                                c.ΔᐃⲆⲆᐃΔⲆ(b);
                                break;
                            case 6:
                                c.ⲆⵠᐃΔⲆΔⲆ(b[1]);
                        }
                    } else {
                        var d = function (b, c, d) {
                            const f = new Uint8Array(b);
                            const e = f.length;
                            let g = Xf[e];
                            let a = lh;
                            let h = er;
                            if (g === undefined) {
                                Zf += e * 2;
                                if (Zf < 65535) {
                                    h = kj(Sj(e));
                                } else {
                                    Zf = e;
                                    for (let a = 0; a < Xf.length; a++) {
                                        if (Xf[a] !== kr) {
                                            const b = Xf[a][0];
                                            Xf[a] = undefined;
                                            mj(b);
                                        }
                                    }
                                    h = kj(Sj(e));
                                    me();
                                }
                                a = pk(h);
                                Xf[e] = [h, a];
                            } else {
                                h = g[0];
                                a = g[1];
                            }
                            for (let g = 0; f.length > g; g++) {
                                a[g] = f[g];
                            }
                            Bj(h, c, d);
                            for (let g = 0; g < f.length; g++) {
                                f[g] = a[g];
                            }
                            return f;
                        }(a.data, Qx.ᐃⲆⲆⵠⵠⲆⵠ, Qx.ᐃᐃⵠᐃⵠΔⵠⲆⵠ);
                        var e = d.buffer;
                        switch (d[0]) {
                            case 0:
                                c.Ⲇᐃⵠ(e, d, false);
                                break;
                            case 1:
                                c.Ⲇᐃⵠ(e, d, Wa);
                                break;
                            case 2:
                                c.ⲆΔΔⵠⲆᐃⲆΔᐃ();
                                break;
                            case 3:
                                c.ⵠᐃⵠⲆⵠᐃⵠ(new Uint16Array(e));
                                break;
                            case 4:
                                c.ⲆⵠⵠᐃⲆΔΔᐃΔ();
                                break;
                            case 5:
                                c.ⲆⵠⲆᐃⵠᐃᐃΔᐃ();
                                break;
                            case 6:
                                c.ᐃⲆⵠᐃⲆⵠΔΔΔ();
                                break;
                            case 7:
                                c.ⲆᐃⵠᐃΔᐃΔᐃⵠ(e);
                                break;
                            case 8:
                                c.ⵠᐃᐃⵠᐃΔΔᐃᐃ(d[1]);
                                break;
                            case 9:
                                c.ⵠⵠⵠⲆᐃⲆΔⲆΔ(d[1]);
                                break;
                            case 10:
                                c.ᐃⵠⲆᐃΔᐃᐃ();
                                break;
                            case 11:
                                c.ⵠᐃⲆⲆⲆΔⲆ(d[1], d[2]);
                                break;
                            case 12:
                                c.ⲆΔⲆΔⵠ(d[1]);
                                break;
                            case 13:
                                c.ΔⲆΔⵠⲆᐃΔⵠⲆ(d, e);
                                break;
                            case 14:
                                c.ᐃⲆᐃⵠΔⲆΔ();
                                break;
                            case 15:
                                c.ⲆΔⲆⲆᐃΔⲆΔΔ(d[1]);
                                break;
                            case 16:
                                c.ᐃᐃᐃⵠ(d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
                                break;
                            case 17:
                                c.ⲆᐃⲆΔΔΔΔΔⵠ(e);
                                break;
                            case 18:
                                c.ⵠᐃⵠΔᐃⵠΔΔⲆ();
                                break;
                            case 19:
                                c.ⲆΔΔⵠΔ(d[1]);
                                break;
                            case 20:
                                c.ⲆΔⵠᐃᐃⵠᐃΔⵠ();
                                break;
                            case 21:
                                c.ⵠⲆᐃⲆΔ(e);
                                break;
                            case 22:
                                c.ⵠΔΔΔᐃΔΔᐃⵠ(d[1]);
                                break;
                            case 23:
                                c.ⵠᐃⲆⵠᐃᐃΔⲆᐃ(e);
                                break;
                            case 24:
                                c.ΔᐃⲆⲆᐃΔⵠᐃᐃ(d[1]);
                                break;
                            case 25:
                                c.ΔᐃᐃⲆΔⲆᐃⵠⵠ(d[1], e);
                                break;
                            case 26:
                                c.ΔⲆⲆⲆᐃ(d);
                                break;
                            case 27:
                                c.ⲆΔΔⵠⵠᐃᐃⲆᐃ();
                                break;
                            case 28:
                                c.ⲆⵠΔⵠⲆ(d[1]);
                                break;
                            case 29:
                                c.ⵠᐃᐃᐃⲆΔⵠⲆⵠ();
                                break;
                            case 30:
                                c.ⲆⲆᐃⵠΔⵠΔⵠᐃ();
                                break;
                            case 31:
                                c.ⲆᐃⲆΔΔΔⵠⵠⲆ(d);
                                break;
                            case 32:
                                c.ⵠΔⵠⵠΔΔΔⵠΔ(d[1]);
                                break;
                            case 33:
                                c.ΔᐃΔᐃΔΔΔⲆⵠ(d[1]);
                                break;
                            case 34:
                                c.ΔⲆⲆⵠᐃⵠΔⵠⲆ();
                                break;
                            case 35:
                                c.ᐃⵠⲆⵠᐃΔⵠⲆⲆ(d[1]);
                                break;
                            case 36:
                                c.ⵠᐃⲆΔᐃⵠᐃ(d[1]);
                                break;
                            case 37:
                                c.ⵠᐃⲆⲆᐃᐃΔⲆⵠ(d[1], d[2]);
                                break;
                            case 38:
                                c.ᐃᐃⵠⵠΔⲆᐃΔᐃ(d[1]);
                                break;
                            case 39:
                                c.ᐃⵠⲆⵠΔΔᐃΔⲆ(d[1]);
                                break;
                            case 40:
                                c.ᐃⵠⵠⲆΔⵠⵠΔᐃ();
                                break;
                            case 41:
                                c.ⵠⵠⵠᐃⲆⲆⵠΔⲆ(d);
                                break;
                            case 42:
                                c.ⲆⵠⵠⲆⲆᐃᐃᐃⲆ(d[1]);
                                break;
                            case 43:
                                c.ⵠⵠᐃⲆⵠⲆΔⲆⵠ(d[1]);
                                break;
                            case 44:
                                c.claimed(d[1]);
                                break;
                            case 45:
                                c.ⲆΔⲆᐃⵠΔⵠᐃⵠ(d[1]);
                                break;
                            case 46:
                                c.ᐃⵠⵠᐃᐃΔⲆΔᐃ(d[1]);
                                break;
                            case 47:
                                c.ΔᐃⲆᐃᐃ(d[1]);
                                break;
                            case 48:
                                c.ⲆΔⲆΔᐃΔᐃᐃⵠ();
                                break;
                            case 50:
                                c.ΔⲆΔᐃⲆⵠⵠᐃⲆ(d[1], d[2], d[3]);
                                break;
                            case 51:
                                c.ⵠΔᐃⲆΔⲆⲆᐃⲆ();
                                break;
                            case 52:
                                c.ⲆⵠⲆⵠᐃⲆᐃⵠΔ(d[1]);
                                break;
                            case 53:
                                c.ΔⵠΔⵠⲆᐃΔⵠⵠ(d[1]);
                                break;
                            case 54:
                                c.ΔΔⵠᐃᐃⵠⵠΔⲆ();
                                break;
                            case 55:
                                c.ⵠⵠⵠᐃΔⲆΔⵠⲆ(d[1]);
                                break;
                            case 56:
                                c.ΔⲆⵠᐃⵠⲆᐃⵠᐃ(d[1]);
                                break;
                            case 57:
                                c.ⲆΔΔⲆⲆᐃⲆⲆⲆ();
                                break;
                            case 58:
                                c.ΔⲆⵠⵠⵠⵠᐃⲆⵠ();
                                break;
                            case 59:
                                c.ⵠⲆⵠᐃⵠᐃᐃⲆⵠ();
                                break;
                            case 60:
                                c.ⵠⲆⲆⲆⵠⲆΔⲆᐃ();
                                break;
                            case 61:
                                Qx.ΔᐃⲆ.ᐃᐃⵠⲆΔΔⲆ = 0.2;
                                Qx.ΔᐃⲆ.ⲆⲆΔΔⲆ = 3;
                                break;
                            case 62:
                                c.ⵠᐃᐃⲆⲆΔᐃΔᐃ(new Uint16Array(e));
                                break;
                            case 63:
                                c.ΔᐃⲆⵠΔⲆΔΔⵠ();
                                break;
                            case 64:
                                c.ⵠΔΔⲆⲆᐃΔᐃⵠ();
                                break;
                            case 65:
                                c.ⵠΔΔⵠᐃΔⲆⵠᐃ();
                                break;
                            case 66:
                                c.ⲆΔⲆⲆᐃⵠⲆΔᐃ();
                                break;
                            case 67:
                                c.ΔⲆΔΔΔᐃⵠΔⲆ(d[1]);
                                break;
                            case 68:
                                c.ΔⲆⲆᐃⵠΔΔΔⲆ(d[1]);
                                break;
                            case 69:
                                c.ᐃⲆⲆⵠΔⲆⵠ(d[1]);
                                break;
                            case 70:
                                c.ⲆⵠⵠᐃΔⲆⲆΔΔ(d[1]);
                                break;
                            case 71:
                                c.ᐃᐃΔΔⵠ(d[1]);
                        }
                    }
                }
            };
            c.ᐃⲆΔΔ.onerror = function () {
                if (Qx.reconnect.enabled) {
                    hc.setTimeout(c.timeout, 2500);
                }
            };
            this.ᐃⲆΔΔ.onopen = function () {
                clearTimeout(c.ᐃⲆΔⵠⲆ);
                Qx.ⲆⲆⵠⵠᐃⲆⲆ = Qx.ⲆⲆⵠⵠᐃⲆⲆ || ⵠᐃⵠ.ᐃⲆΔΔΔⵠΔ("token");
                ⵠᐃⵠ.ⵠᐃⲆΔΔⵠⵠ().then(a => {
                    c.ᐃⲆΔΔ[Lf](yq[Ya].stringify([Mx.ΔⵠⲆⵠⲆ.input.value, screen.width + 200, screen.height + 200, 52, Qx.ᐃᐃⵠⲆᐃ, Qx.ΔΔΔⲆᐃⵠⲆ, Qx.reconnect.enabled ? 1 : 0, Mx.ᐃΔⲆⲆ, Mx.ⵠᐃⲆⵠΔ, Mx.ⵠᐃΔⲆⲆ, Mx.ⲆⵠⵠⲆⲆ, Mx.ⵠⵠΔⲆⵠ, Mx.ⲆᐃΔⵠⲆ, qy === undefined ? 0 : qy, py === undefined ? 0 : py.substring(py.length - 50), Of, Qx.ⲆⲆⵠⵠᐃⲆⲆ, a, Qx.ΔⲆᐃⵠⲆⲆⵠ, Qx.ⵠⲆΔⲆᐃⵠΔ]));
                    Qx.ⲆⲆⵠⵠᐃⲆⲆ = undefined;
                    Qx.ΔⲆᐃⵠⲆⲆⵠ = kr;
                    Qx.ⵠⲆΔⲆᐃⵠΔ = undefined;
                    c.ᐃⲆΔⵠⲆ = setTimeout(c.timeout, 2000);
                });
            };
        };
    }();
    var Px;
    var Qx;
    var Rx;
    var Sx = {
        ΔᐃᐃⲆⵠ: th
    };
    var Tx = new function () {
        this.ΔΔᐃⲆⵠ = 0;
        this.loaded = 0;
        this.transition = 0;
        this.ᐃⲆⵠΔᐃⵠⲆ = function (a) {
            return a / Px.w * 100;
        };
        this.Δⵠⵠᐃⵠⵠᐃ = function (a) {
            return a / Px.ⲆⲆⲆ * 100;
        };
        this.ⵠⲆᐃⲆⲆΔᐃ = function (a, b) {
            a = this.ᐃⲆⵠΔᐃⵠⲆ(a) - this.ⵠᐃᐃΔⲆ.x;
            return this.ⵠᐃᐃΔⲆ.x + b * a;
        };
        this.ΔΔᐃⵠⵠΔⲆ = function (a, b) {
            a = Math.abs(this.Δⵠⵠᐃⵠⵠᐃ(a) - this.ⵠᐃᐃΔⲆ.y);
            return this.ⵠᐃᐃΔⲆ.y + b * a;
        };
        this.sample = {};
        this.ᐃΔΔⲆΔ = {};
        this.ⵠᐃΔᐃ = {};
        this.ΔⵠⵠⲆⵠⵠⵠ = function (b, c, d, e) {
            for (var f = 0; f < c.length; f++) {
                var g = c[f];
                if (!b.playing(g)) {
                    b.pos(d, e, -0.5, g);
                    b.play(g);
                    return true;
                }
            }
            return false;
        };
        this.ᐃΔᐃ = function (a, b, c, d) {
            c = this.ⵠⲆᐃⲆⲆΔᐃ(c, ⲆΔΔΔⵠ.ⲆⲆᐃⵠΔΔⲆ);
            d = this.ΔΔᐃⵠⵠΔⲆ(d, ⲆΔΔΔⵠ.ⲆⲆᐃⵠΔΔⲆ);
            console.log("HIT", a, b, c, d, ⲆΔΔΔⵠ.ⲆⲆᐃⵠΔΔⲆ);
            if (a) {
                if (b === 1) {
                    this.ΔⵠⵠⲆⵠⵠⵠ(this.ⵠᐃΔᐃ.ΔᐃΔΔΔⵠⲆ, this.sample.ΔᐃΔΔΔⵠⲆ, c, d);
                } else if (b === 0) {
                    this.ΔⵠⵠⲆⵠⵠⵠ(this.ⵠᐃΔᐃ.ⵠⲆⲆΔᐃΔⵠ, this.sample.ⵠⲆⲆΔᐃΔⵠ, c, d);
                }
            } else {
                this.ΔⵠⵠⲆⵠⵠⵠ(this.ⵠᐃΔᐃ.ⵠⲆᐃᐃᐃ, this.sample.ⵠⲆᐃᐃᐃ, c, d);
            }
        };
        this.ⵠᐃᐃΔⲆ = {
            y: 0,
            x: 0
        };
        this.ᐃⵠᐃⲆⲆᐃⲆ = {
            y: 0,
            x: 0
        };
        this.ΔᐃΔⲆⵠ = {};
        this.ⲆⲆⲆᐃ = [];
        this.Ⲇᐃᐃⵠᐃ = function (a, b) {
            for (var c in this.ΔᐃΔⲆⵠ) {
                var d = this.ΔᐃΔⲆⵠ[c];
                d.check(a);
                if (d.ᐃᐃⲆⵠΔΔΔ) {
                    if (Px.ΔᐃΔᐃΔ.now < 460000) {
                        d.ⵠΔⵠⲆⲆ();
                    }
                    if (b) {
                        d.Ⲇⵠᐃ(a, this.ⵠᐃᐃΔⲆ);
                    }
                    if (this.transition) {
                        d.transition();
                    }
                }
            }
            this.transition &&= 0;
        };
        this.ⲆⵠⵠΔΔⵠᐃΔᐃ = function () {
            var a = [];
            for (var b = 0; b < this.ⲆⲆⲆᐃ.length; b++) {
                if ((e = this.ⲆⲆⲆᐃ[b]).ⲆΔᐃⵠᐃⵠⲆ) {
                    a.push(b);
                } else if (!e.ⲆΔᐃⵠᐃⵠⲆ && !Px.ⲆΔᐃⲆᐃ[e.ΔΔⵠΔ]) {
                    e.ⵠⲆΔᐃⲆΔΔ();
                    a.push(b);
                }
            }
            var c = Px.Ⲇᐃⵠ[0];
            var d = 0;
            for (b = 0; c.length > b && a.length > d; b++) {
                var e = c[b];
                if ((Px.mode != 1 || Px.ⲆⲆⲆᐃ[e.id].ΔⵠⲆⵠⲆ !== "spectator") && e.ⲆᐃⵠⵠⲆ === -1 && Qx.ΔΔⵠΔ !== e.ΔΔⵠΔ) {
                    this.ⲆⲆⲆᐃ[a[d]].ᐃᐃⵠΔⵠ(e.ΔΔⵠΔ);
                    d++;
                }
            }
        };
        this.ΔΔⲆΔⵠᐃⵠⵠΔ = function () {
            this.ⲆⵠⵠΔΔⵠᐃΔᐃ();
            for (var a = 0; a < this.ⲆⲆⲆᐃ.length; a++) {
                var b = this.ⲆⲆⲆᐃ[a];
                if (!b.ⲆΔᐃⵠᐃⵠⲆ && b.check()) {
                    b.Ⲇⵠᐃ();
                }
            }
        };
        this.ᐃⵠᐃⲆⲆⲆΔⵠⵠ = function (a) {
            if (a.x === this.ᐃⵠᐃⲆⲆᐃⲆ.x && a.y === this.ᐃⵠᐃⲆⲆᐃⲆ.y) {
                return 0;
            } else {
                this.ᐃⵠᐃⲆⲆᐃⲆ.x = a.x;
                this.ᐃⵠᐃⲆⲆᐃⲆ.y = a.y;
                this.ⵠᐃᐃΔⲆ.x = this.ᐃⲆⵠΔᐃⵠⲆ(a.x);
                this.ⵠᐃᐃΔⲆ.y = this.Δⵠⵠᐃⵠⵠᐃ(a.y);
                Howler.pos(this.ⵠᐃᐃΔⲆ.x, this.ⵠᐃᐃΔⲆ.y, 0);
                return 1;
            }
        };
        this.ⲆΔⲆⲆⵠΔΔⵠⲆ = function () {
            if (this.ΔΔᐃⲆⵠ && this.loaded) {
                var a = Px.ⲆΔᐃⲆᐃ[Qx.ΔΔⵠΔ];
                if (a) {
                    a.ⲆᐃⵠⵠⲆ = 0;
                    var b = this.ᐃⵠᐃⲆⲆⲆΔⵠⵠ(a);
                    if (Px.mode !== 2 && Px.mode !== 4 && Px.mode !== 5) {
                        this.Ⲇᐃᐃⵠᐃ(a, b);
                    }
                    this.ΔΔⲆΔⵠᐃⵠⵠΔ();
                }
            }
        };
        this.ⲆΔⵠⲆⲆᐃⲆⵠΔ = function () {
            for (var b in Fx) {
                var c = Fx[b];
                if (typeof c === "object" && c.path) {
                    c.ⵠᐃⲆᐃΔ = new Howl({
                        src: c.path,
                        volume: 0,
                        sprite: c.ⵠΔ
                    });
                }
                for (var d in c.sample) {
                    var f = c.sample[d];
                    var g = [];
                    console.log(undefined);
                    for (var h = 0; h < f; h++) {
                        var j = c.ⵠᐃⲆᐃΔ.play(d);
                        c.ⵠᐃⲆᐃΔ.stop(j);
                        c.ⵠᐃⲆᐃΔ.on("fade", function (a) {
                            if (!this.volume(a)) {
                                console.log(jl, undefined);
                                this.stop(a);
                            }
                        }, j);
                        g.push(j);
                    }
                    if (g.length > 1) {
                        Tx.sample[d] = g;
                    } else {
                        Tx.sample[d] = g[0];
                    }
                    Tx.ⵠᐃΔᐃ[d] = c.ⵠᐃⲆᐃΔ;
                }
            }
        };
        this.ΔΔΔᐃⲆⲆⲆ = function (a, b, c) {
            for (var d = 0; d < a.length; d++) {
                b.volume(c, a[d]);
            }
        };
        this.ΔⵠΔⵠⵠΔΔ = function (b, c, d, e, f, g) {
            var a = b;
            for (var i = 0; d > i; i++) {
                var j = a[i] = [];
                for (Δⵠᐃ = 0; Δⵠᐃ < e; Δⵠᐃ++) {
                    j[Δⵠᐃ] = Tx.sample[f + Δⵠᐃ][i];
                    c.ⵠᐃⲆᐃΔ.volume(g, j[Δⵠᐃ]);
                }
            }
        };
        this.ᐃᐃⵠΔⵠ = function () {
            Tx.ⲆΔⵠⲆⲆᐃⲆⵠΔ();
            Tx.ᐃΔΔⲆΔ.ᐃΔΔΔΔⲆΔ = [];
            Tx.ᐃΔΔⲆΔ.ⲆⵠⲆᐃⲆ = [];
            Tx.ᐃΔΔⲆΔ.ᐃⲆⵠⲆΔ = [];
            Tx.ΔⵠΔⵠⵠΔΔ(Tx.ᐃΔΔⲆΔ.ᐃΔΔΔΔⲆΔ, Fx.ⵠᐃΔᐃᐃΔⲆ, 8, 3, "p", 0.15);
            Tx.ΔⵠΔⵠⵠΔΔ(Tx.ᐃΔΔⲆΔ.ⲆⵠⲆᐃⲆ, Fx.ⲆⲆⵠΔᐃᐃΔ, 8, 4, "w", 0.15);
            Tx.ΔⵠΔⵠⵠΔΔ(Tx.ᐃΔΔⲆΔ.ᐃⲆⵠⲆΔ, Fx.ⵠⲆⲆΔᐃᐃΔ, 8, 3, "d", 0.09);
            Tx.ΔΔΔᐃⲆⲆⲆ(Tx.sample.ⵠⲆᐃᐃᐃ, Tx.ⵠᐃΔᐃ.ⵠⲆᐃᐃᐃ, 0.15);
            Tx.ΔΔΔᐃⲆⲆⲆ(Tx.sample.ⵠⲆⲆΔᐃΔⵠ, Tx.ⵠᐃΔᐃ.ⵠⲆⲆΔᐃΔⵠ, 0.2);
            Tx.ΔΔΔᐃⲆⲆⲆ(Tx.sample.ΔᐃΔΔΔⵠⲆ, Tx.ⵠᐃΔᐃ.ΔᐃΔΔΔⵠⲆ, 1);
            Tx.ΔᐃΔⲆⵠ.ⲆᐃⵠⲆᐃᐃΔⵠΔ = new Ix(12, this.sample.ΔⲆᐃⲆᐃⲆᐃ, this.sample.ᐃⲆΔⵠⵠᐃΔ, 5000, 0.05, 0.4, Fx.ⲆᐃⵠΔΔⲆⲆ.ⵠᐃⲆᐃΔ, 3000, {
                x: Wr.ⲆⵠΔⲆⵠΔⲆ,
                y: Wr.ⲆᐃⵠⲆΔⵠΔ,
                w: Px.w,
                ⲆⲆⲆ: Px.ⲆⲆⲆ
            }, {
                x: Wr.ⲆⵠΔⲆⵠΔⲆ - 2300,
                y: Wr.ⲆᐃⵠⲆΔⵠΔ - 4000,
                w: Px.w,
                ⲆⲆⲆ: Px.ⲆⲆⲆ
            }, {
                x: Wr.ⲆⵠΔⲆⵠΔⲆ - 1500,
                y: Wr.ⲆᐃⵠⲆΔⵠΔ - 2000,
                w: Px.w,
                ⲆⲆⲆ: Px.ⲆⲆⲆ
            });
            Tx.ΔᐃΔⲆⵠ.ⲆᐃΔᐃΔΔⲆΔᐃ = new Ix(12, this.sample.ΔⵠⲆⲆᐃΔⵠ, this.sample.ΔⲆⲆⵠᐃⵠΔ, 5000, 0.03, 0.25, Fx.ⲆᐃⵠΔΔⲆⲆ.ⵠᐃⲆᐃΔ, 3000, {
                x: 0,
                y: Wr.ⲆᐃⵠⲆΔⵠΔ + 800,
                w: Wr.ⲆⵠΔⲆⵠΔⲆ - 2300,
                ⲆⲆⲆ: Px.ⲆⲆⲆ
            }, {
                x: -100,
                y: Wr.ⲆᐃⵠⲆΔⵠΔ - 300,
                w: Wr.ⲆⵠΔⲆⵠΔⲆ - 100,
                ⲆⲆⲆ: Px.ⲆⲆⲆ
            }, {
                x: -100,
                y: Wr.ⲆᐃⵠⲆΔⵠΔ + 400,
                w: Wr.ⲆⵠΔⲆⵠΔⲆ - 1400,
                ⲆⲆⲆ: Px.ⲆⲆⲆ
            });
            Tx.ΔᐃΔⲆⵠ.ⲆⲆᐃⲆⲆΔⲆ = new Ix(12, this.sample.ΔⵠⵠⲆΔᐃⲆ, this.sample.ⲆⵠΔᐃⵠⵠⲆ, 5000, 0.01, 0.22, Fx.ⲆᐃⵠΔΔⲆⲆ.ⵠᐃⲆᐃΔ, 3000, {
                x: -100,
                y: -100,
                w: Px.w + 200,
                ⲆⲆⲆ: Wr.ⲆᐃⵠⲆΔⵠΔ - 1000
            }, {
                x: -100,
                y: -100,
                w: Px.w + 200,
                ⲆⲆⲆ: Wr.ⲆᐃⵠⲆΔⵠΔ + 600
            }, {
                x: -100,
                y: -100,
                w: Px.w + 200,
                ⲆⲆⲆ: Wr.ⲆᐃⵠⲆΔⵠΔ + 100
            });
            for (var a = 0; a < 8; a++) {
                Tx.ⲆⲆⲆᐃ[a] = new Kx(a);
            }
            Tx.ⲆⲆⲆᐃ[0].ᐃᐃⵠΔⵠ(Qx.ΔΔⵠΔ);
            Tx.loaded = 1;
        };
        this.ᐃⵠⲆᐃⲆᐃⲆⲆΔ = function () {
            if (!this.transition && Px.ΔᐃΔᐃΔ.now < 460000) {
                this.transition = 1;
            }
        };
        this.ⵠⲆⲆᐃⵠ = function () {
            if (this.ΔΔᐃⲆⵠ && this.loaded) {
                for (var a in Tx.sample) {
                    var b = Tx.sample[a];
                    if (typeof b === "object") {
                        for (var c = 0; c < b.length; c++) {
                            Tx.ⵠᐃΔᐃ[a].stop(b[c]);
                        }
                    } else {
                        Tx.ⵠᐃΔᐃ[a].stop(b);
                    }
                }
                for (c = 0; c < Tx.ⲆⲆⲆᐃ.length; c++) {
                    Tx.ⲆⲆⲆᐃ[c].ⵠⲆΔᐃⲆΔΔ();
                }
            }
        };
        this.select = function () {
            if (Tx.ΔΔᐃⲆⵠ) {
                Tx.ⵠⲆⲆᐃⵠ();
            } else {
                if (!Tx.loaded) {
                    Tx.ᐃᐃⵠΔⵠ();
                }
                Tx.ⲆⲆⲆᐃ[0].ΔΔⵠΔ = Qx.ΔΔⵠΔ;
                Tx.ⲆⲆⲆᐃ[0].ⲆΔᐃⵠᐃⵠⲆ = 0;
                Tx.ᐃⵠⲆᐃⲆᐃⲆⲆΔ();
            }
            Tx.ΔΔᐃⲆⵠ = !Tx.ΔΔᐃⲆⵠ;
        };
    }();
    var Ux = new function () {
        this.ᐃⵠⵠᐃᐃⲆⲆ = function () {
            this.ⵠΔⲆᐃΔ = 81;
            this.ᐃᐃⵠⲆΔ = 68;
            this.ᐃᐃΔΔΔ = 90;
            this.ⵠᐃΔᐃⲆⲆΔ = 83;
        };
        this.ΔᐃᐃⲆᐃⵠⵠ = function () {
            this.ⵠΔⲆᐃΔ = 65;
            this.ᐃᐃⵠⲆΔ = 68;
            this.ᐃᐃΔΔΔ = 87;
            this.ⵠⵠᐃⵠᐃ = 83;
        };
        this.ⲆᐃΔᐃⲆ = 0;
        this.ⵠᐃΔᐃⲆⲆΔ = 1;
        this.ΔⵠΔⵠⵠⵠᐃ = 49;
        this.ⲆⵠᐃⵠⲆΔΔ = 50;
        this.ⵠⵠⵠᐃⲆᐃⲆ = 51;
        this.ⵠᐃⵠⵠⲆᐃⲆ = 52;
        this.ⲆⵠⵠⵠᐃⵠⲆΔⲆ = 53;
        this.ᐃⲆΔΔᐃⲆᐃ = 17;
        this.ΔᐃⲆΔΔⲆⵠ = 37;
        this.ⲆⲆⲆΔᐃΔⵠ = 39;
        this.ⲆⲆΔⵠⵠⲆⲆ = 38;
        this.ᐃΔⲆⲆⵠᐃⲆ = 40;
        this.ⲆᐃⵠΔΔᐃⵠ = 32;
        this.ΔⵠᐃⲆⲆⲆⲆ = 82;
        this.ⵠⲆⲆΔᐃⲆⵠ = 71;
        this.ⲆⵠᐃⲆⵠⲆΔ = 86;
        this.ⵠΔⵠⲆⲆⵠΔ = 66;
        this.ΔᐃᐃⲆᐃⵠⵠ();
        this.keys = new Array(255);
        for (var a = 0; a < 255; a++) {
            this.keys[a] = this.ⲆᐃΔᐃⲆ;
        }
        this.up = function (a) {
            var b = Math.min(a.charCode || a.keyCode, 255);
            this.keys[b] = this.ⲆᐃΔᐃⲆ;
        };
        this.down = function (a) {
            var b = Math.min(a.charCode || a.keyCode, 255);
            if (b == this.ⵠΔⲆᐃΔ || b == this.ΔᐃⲆΔΔⲆⵠ) {
                this.ⵠᐃΔⲆᐃⵠᐃ();
            } else if (b == this.ᐃᐃΔΔΔ || this.ⲆⲆΔⵠⵠⲆⲆ == b) {
                this.ⲆᐃⲆⵠⵠΔⲆ();
            } else if (b == this.ⵠᐃΔᐃⲆⲆΔ || b == this.Ⲇⵠᐃⵠⵠⵠᐃⵠⵠ) {
                this.ⲆᐃᐃΔⲆⲆΔ();
            } else if (b == this.ᐃᐃⵠⲆΔ || b == this.ⲆⲆⲆΔᐃΔⵠ) {
                this.ᐃΔᐃⲆΔΔⵠ();
            }
            this.keys[b] = this.ⵠᐃΔᐃⲆⲆΔ;
            return b;
        };
        this.ⵠᐃΔⲆᐃⵠᐃ = function () {
            this.keys[this.ᐃᐃⵠⲆΔ] = this.ⲆᐃΔᐃⲆ;
            this.keys[this.ⲆⲆⲆΔᐃΔⵠ] = this.ⲆᐃΔᐃⲆ;
        };
        this.ᐃΔᐃⲆΔΔⵠ = function () {
            this.keys[this.ⵠΔⲆᐃΔ] = this.ⲆᐃΔᐃⲆ;
            this.keys[this.ΔᐃⲆΔΔⲆⵠ] = this.ⲆᐃΔᐃⲆ;
        };
        this.ⲆᐃᐃΔⲆⲆΔ = function () {
            this.keys[this.ᐃᐃΔΔΔ] = this.ⲆᐃΔᐃⲆ;
            this.keys[this.ⲆⲆΔⵠⵠⲆⲆ] = this.ⲆᐃΔᐃⲆ;
        };
        this.ⲆᐃⲆⵠⵠΔⲆ = function () {
            this.keys[this.ⵠⵠᐃⵠᐃ] = this.ⲆᐃΔᐃⲆ;
            this.keys[this.ᐃΔⲆⲆⵠᐃⲆ] = this.ⲆᐃΔᐃⲆ;
        };
        this.ⵠⲆⲆⲆⲆⲆⲆ = function () {
            this.keys[this.ᐃᐃⵠⲆΔ] = this.ⲆᐃΔᐃⲆ;
            this.keys[this.ⲆⲆⲆΔᐃΔⵠ] = this.ⲆᐃΔᐃⲆ;
            this.keys[this.ⵠΔⲆᐃΔ] = this.ⲆᐃΔᐃⲆ;
            this.keys[this.ΔᐃⲆΔΔⲆⵠ] = this.ⲆᐃΔᐃⲆ;
            this.keys[this.ᐃᐃΔΔΔ] = this.ⲆᐃΔᐃⲆ;
            this.keys[this.ⲆⲆΔⵠⵠⲆⲆ] = this.ⲆᐃΔᐃⲆ;
            this.keys[this.ⵠⵠᐃⵠᐃ] = this.ⲆᐃΔᐃⲆ;
            this.keys[this.ᐃΔⲆⲆⵠᐃⲆ] = this.ⲆᐃΔᐃⲆ;
        };
        this.ⲆΔⲆⲆⵠⲆⵠ = function () {
            return this.keys[this.ⵠΔⲆᐃΔ] || this.keys[this.ΔᐃⲆΔΔⲆⵠ];
        };
        this.ⵠΔΔⵠᐃⵠᐃ = function () {
            return this.keys[this.ᐃᐃⵠⲆΔ] || this.keys[this.ⲆⲆⲆΔᐃΔⵠ];
        };
        this.ᐃᐃⲆⲆⵠⵠᐃ = function () {
            return this.keys[this.ᐃᐃΔΔΔ] || this.keys[this.ⲆⲆΔⵠⵠⲆⲆ];
        };
        this.ⲆⲆⲆΔΔᐃⵠ = function () {
            return this.keys[this.ⵠⵠᐃⵠᐃ] || this.keys[this.ᐃΔⲆⲆⵠᐃⲆ];
        };
        this.ΔΔⲆⲆⲆΔᐃᐃᐃ = function () {
            return this.keys[this.ᐃⲆΔΔᐃⲆᐃ];
        };
        this.ΔⵠΔΔⵠⲆᐃᐃⵠ = function () {
            return this.keys[this.ΔⵠΔⵠⵠⵠᐃ];
        };
        this.ΔΔⲆⵠⵠᐃΔⵠΔ = function () {
            return this.keys[this.ⲆⵠᐃⵠⲆΔΔ];
        };
        this.ΔⵠⵠΔⵠⲆⵠⲆᐃ = function () {
            return this.keys[this.ⵠⵠⵠᐃⲆᐃⲆ];
        };
        this.ⵠⲆΔⵠᐃΔⲆⲆⲆ = function () {
            return this.keys[this.ⵠᐃⵠⵠⲆᐃⲆ];
        };
        this.ⵠᐃΔᐃⵠᐃⲆⲆΔ = function () {
            return this.keys[this.ⲆᐃⵠΔΔᐃⵠ];
        };
        this.ᐃⲆᐃⵠⵠᐃΔΔⵠ = function () {
            return this.keys[this.ΔⵠᐃⲆⲆⲆⲆ];
        };
        this.ΔⵠΔⵠᐃⵠᐃΔᐃ = function () {
            return this.keys[this.ⵠⲆⲆΔᐃⲆⵠ];
        };
        this.ⵠⵠᐃᐃⵠΔⵠΔⵠ = function () {
            return this.keys[this.ⲆⵠᐃⲆⵠⲆΔ];
        };
        this.ⲆⲆΔⵠⲆⲆΔⵠⲆ = function () {
            return this.keys[this.ⵠΔⵠⲆⲆⵠΔ];
        };
    }();
    var Vx = new function () {
        this.ⵠᐃΔᐃⲆⲆΔ = 0;
        this.ⲆᐃΔᐃⲆ = 1;
        this.IDLE = 2;
        this.ᐃᐃⲆᐃΔΔⲆ = 0;
        this.ᐃⲆᐃΔᐃΔΔⵠⲆ = 1;
        this.ᐃⲆⵠⲆ = {
            y: 0,
            x: 0
        };
        this.ⵠΔⵠⲆΔᐃⵠ = 0;
        this.ⵠᐃⵠᐃΔΔⵠ = 0;
        this.angle = 0;
        this.state = this.IDLE;
        this.ᐃⵠᐃⵠ = this.ᐃᐃⲆᐃΔΔⲆ;
        this.down = function () {
            this.state = this.ⵠᐃΔᐃⲆⲆΔ;
        };
        this.up = function () {
            this.state = this.ⲆᐃΔᐃⲆ;
        };
        this.Ⲇⵠᐃ = function () {
            return (this.ᐃⲆⵠⲆ.x != this.ⵠΔⵠⲆΔᐃⵠ || this.ⵠᐃⵠᐃΔΔⵠ != this.ᐃⲆⵠⲆ.y) && (this.ⵠΔⵠⲆΔᐃⵠ = this.ᐃⲆⵠⲆ.x, this.ⵠᐃⵠᐃΔΔⵠ = this.ᐃⲆⵠⲆ.y, ij);
        };
    }();
    var Wx = 0;
    var Xx = 0;
    var Yx = new function (b, c, f) {
        this.Δᐃ = b;
        this.ᐃ = c;
        this.ⵠⵠᐃᐃΔⲆᐃ = {
            translate: {
                x: 0,
                y: 0
            },
            style: document.getElementById("loading").style,
            Ⲇⵠᐃ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        this.ⵠⵠᐃᐃΔⲆᐃ.style.position = "absolute";
        this.ⵠⵠᐃᐃΔⲆᐃ.style.display = "inline-block";
        this.ⵠⵠᐃᐃΔⲆᐃ.Ⲇⵠᐃ();
        this.ΔᐃᐃⲆⵠ = true;
        this.stop = function () {
            this.ΔᐃᐃⲆⵠ = false;
        };
        this.ᐃΔⲆΔⲆⲆΔ = {
            total: 1
        };
        var i = this;
        function j() { }
        var k = 0;
        function n(a) {
            if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
                return 1;
            } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -1 || a.indexOf("avatar-player") !== -1) {
                return 0;
            } else {
                return 1;
            }
        }
        this.ΔᐃⵠⵠΔ = function () {
            i.Ⲇⵠᐃ();
            if (++k == 40) {
                i.stop();
                j();
                return;
            }
            hc.setTimeout(i.ΔᐃⵠⵠΔ, 33);
        };
        this.ⵠⲆⲆᐃⵠ = function (a) {
            j = a;
            i.ΔᐃⵠⵠΔ();
        };
        new Date().getTime();
        Object.keys(ᐃⵠ).length;
        console.log(undefined, hj);
        for (var e in ᐃⵠ) {
            if (n(ᐃⵠ[e]) === 0) {
                0;
            }
        }
        console.log(undefined, undefined);
        function o() {
            if (this.ᐃᐃᐃΔᐃⵠⵠ !== 0) {
                return this.ᐃᐃᐃΔᐃⵠⵠ;
            } else {
                this.ᐃᐃᐃΔᐃⵠⵠ = 2;
                this.src = this.ⲆⵠᐃΔⲆ;
                return 0;
            }
        }
        function l(a) {
            this.ᐃᐃᐃΔᐃⵠⵠ = 1;
        }
        var g = 0;
        function q() {
            console.log(undefined);
            if (g !== 1) {
                g = 1;
                console.log(gj);
                if (Ob !== ot) {
                    ot();
                }
                Ob();
                var a = ⵠᐃⵠ.ᐃⲆΔΔΔⵠΔ("server");
                if (a !== null) {
                    ΔⵠΔΔ.ⲆⲆᐃⲆⲆⲆΔ = 1;
                    ΔⵠΔΔ.ⵠⲆⵠⲆᐃ = [{
                        nu: 0,
                        m: 100,
                        i: "server" + a + ".starve.io",
                        p: 443,
                        a: a,
                        ssl: 1
                    }];
                }
                ΔⵠΔΔ.ᐃΔⲆᐃⲆⲆⵠⵠⲆ();
                setTimeout(f, 100);
            }
        }
        function d() {
            let a = function () {
                ΔⵠΔΔ.ΔᐃΔΔⵠⲆᐃ(q);
            };
            if (document.fonts && document.fonts.check) {
                if (document.fonts.check("1em Baloo Paaji")) {
                    setTimeout(a, 100);
                } else {
                    setTimeout(d, 100);
                }
            } else {
                setTimeout(a, 1000);
            }
        }
        function m() {
            this.ᐃⵠⲆᐃΔΔᐃ++;
            console.warn(`Image (${this.src}) failed to load, attempt ${this.ᐃⵠⲆᐃΔΔᐃ}`, this);
            if (this.ᐃⵠⲆᐃΔΔᐃ > 3) {
                console.warn("Failed to load image too many times");
            }
            var a = this.ᐃⵠⲆᐃΔΔᐃ;
            var b = this.src;
            var c = n(b) === 0 ? 10000 : 2000;
            setTimeout(function () {
                for (var c in ᐃⲆᐃΔⲆΔᐃ) {
                    if (b.indexOf(ᐃⲆᐃΔⲆΔᐃ[c]) !== -1) {
                        ᐃⵠ[c] = new Image();
                        ᐃⵠ[c].onload = l;
                        ᐃⵠ[c].onerror = m;
                        ᐃⵠ[c].ᐃⵠⲆᐃΔΔᐃ = a;
                        ᐃⵠ[c].src = b;
                        break;
                    }
                }
            }, c);
        }
        function p(a) {
            for (var b in ᐃⵠ) {
                var c = ᐃⵠ[b];
                if (typeof c === "string" && n(c) === a) {
                    ᐃⵠ[b] = new Image();
                    ᐃⵠ[b].ᐃᐃᐃΔᐃⵠⵠ = 0;
                    ᐃⵠ[b].ᐃⵠⲆᐃΔΔᐃ = 0;
                    ᐃⵠ[b].onload = l;
                    ᐃⵠ[b].onerror = m;
                    ᐃⵠ[b].ᐃⲆΔⵠᐃΔⵠ = o;
                    ᐃⵠ[b].ⲆⵠᐃΔⲆ = c;
                }
            }
        }
        p(1);
        p(0);
        lc(1, "l", 20, "#000");
        d();
        Bp();
        this.Ⲇⵠᐃ = function () {
            this.ⵠⵠᐃᐃΔⲆᐃ.translate.x = (ao - 500) / 2;
            this.ⵠⵠᐃᐃΔⲆᐃ.translate.y = (so - 150) / 2;
            var a = 2500 / (40 - k + 1) - 48;
            this.ⵠⵠᐃᐃΔⲆᐃ.translate.y -= a;
            this.ⵠⵠᐃᐃΔⲆᐃ.Ⲇⵠᐃ();
        };
        this.ⵠⵠᐃᐃΔⲆᐃ.Ⲇⵠᐃ();
        this.ᐃⲆᐃⲆ = function () {
            try {
                Yp();
            } catch (a) { }
            this.Ⲇⵠᐃ();
        };
    }(Zn, oo, function () {
        Np();
        Sx = new ux(Zn, oo);
        (Mx = new vx(Zn, oo)).ΔΔᐃΔΔᐃᐃⲆΔ();
        Rx = new sx(Zn, oo);
        Px = new Xw();
        Qx = new mx();
        Yx.ⵠⲆⲆᐃⵠ(function () {
            Yx.ⵠⵠᐃᐃΔⲆᐃ.style.display = "none";
            Mx.ΔΔᐃⲆⵠ();
        });
    });
    function Zx() {
        try {
            hc.Widget.adsRefresh();
        } catch (a) { }
    }
    hc.onbeforeunload = function () {
        if (Sx.ΔᐃᐃⲆⵠ) {
            return "Are you sure you want quit starve.io ;-; ?";
        }
    };
    dr();
    (function b(a) {
        hc.requestAnimationFrame(b);
        Xx = (a - Wx) / 1000;
        Wx = a;
        Xx = Xx > 1 ? 1 : Xx;
        if (Sx.ΔᐃᐃⲆⵠ) {
            Sx.ᐃⲆᐃⲆ();
        } else {
            oo.clearRect(0, 0, ao, so);
            if (Yx.ΔᐃᐃⲆⵠ) {
                Yx.ᐃⲆᐃⲆ();
            } else if (Mx.ΔᐃᐃⲆⵠ) {
                Mx.ᐃⲆᐃⲆ();
            } else if (Rx.ΔᐃᐃⲆⵠ) {
                Rx.ᐃⲆᐃⲆ();
            }
        }
    })(0);
    var $x = 0;
    function _x() {
        by.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", true);
        by.send();
    }
    var by = new XMLHttpRequest();
    by.onreadystatechange = function () {
        if (this.readyState === 4) {
            this.status;
        }
    };
    var cy = "https://token.starve.io/";
    var dy = "https://token2.starve.io/";
    var hy = 0;
    var ly = 1;
    var fy = 4;
    var my = undefined;
    var py = undefined;
    var qy = undefined;
    var sy = 0;
    hc.ΔⵠᐃⲆⲆⵠⵠ = function () {
        sy = 1;
    };
    var ty = {
        ᐃⲆⵠΔᐃⲆᐃᐃⲆ: "ACCESS_TOKEN"
    };
    var ky = document.createElement("script");
    ky.type = "text/javascript";
    ky.async = true;
    ky.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
    ky.addEventListener("load", function (a) {
        hc.XPayStationWidget.init(ty);
        hc.XPayStationWidget.on("status-done", Ey);
    }, false);
    document.getElementsByTagName("head")[0].appendChild(ky);
    hc.fbAsyncInit = function () {
        Fy();
        console.log(undefined);
    };
    (function (a, b, c) {
        var d;
        var e = a.getElementsByTagName(b)[0];
        if (!a.getElementById(c)) {
            (d = a.createElement(b)).id = c;
            d.src = "https://connect.facebook.net/en_US/sdk.js";
            e.parentNode.insertBefore(d, e);
        }
    })(document, "script", "facebook-jssdk");
    var xy = sj;
    var zy = Qa;
    function Cy() {
        hc.gapi.auth2.init({
            client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
            scope: "https://www.googleapis.com/auth/userinfo.profile"
        }).then(a => {
            (xy = a).isSignedIn.listen(By);
            xy.currentUser.listen(Dy);
            if (xy.isSignedIn.get()) {
                xy.signIn();
            }
            Hy();
        });
    }
    function By(a) { }
    function Dy(a) {
        if (py === undefined && hg !== zy && (py = zy.getAuthResponse().id_token, mo !== py)) {
            my = hy;
            qy = zy.getBasicProfile().getId();
            hc.ΔⵠᐃⲆⲆⵠⵠ();
            return;
        }
        if (a !== undefined && ur === a.isSignedIn()) {
            qy = (zy = a).id;
            qy = zy.getBasicProfile().getId();
            py = zy.getAuthResponse().id_token;
            my = hy;
            hc.ΔⵠᐃⲆⲆⵠⵠ();
        }
    }
    function Hy() {
        if (xy) {
            zy = xy.currentUser.get();
        }
    }
    function Ey() {
        var a = new XMLHttpRequest();
        a.open("GET", cy + "claimBread?userid=" + qy);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
                var b = Number(a.responseText);
                if (!isNaN(b)) {
                    Mx.ΔΔⲆᐃⲆ = b;
                }
            }
        };
        a.send();
    }
    function Iy(a, b) {
        if (Mx.ΔΔⲆΔΔ <= 0) {
            if (b > Mx.ΔΔⲆᐃⲆ) {
                Mx.ΔΔΔⵠ(Mx.ⲆΔⵠⲆᐃ);
            } else {
                Mx.ΔΔⲆΔΔ = 2;
                Mx.ᐃᐃⲆΔⲆᐃᐃ = 0;
                Mx.ᐃⵠᐃⲆⲆΔⵠ = 100;
                var c = new XMLHttpRequest();
                c.open("GET", cy + "buySpin?token=" + py + "&userid=" + qy + "&spin=" + a);
                c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                c.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        if (c.responseText !== "0") {
                            var a = JSON.parse(c.responseText);
                            Mx.ⲆⵠⲆⲆᐃⲆⲆⵠᐃ(a.rand * Math.PI * 2, a.type, a.id);
                            Mx.ΔΔⲆᐃⲆ -= b;
                        } else {
                            Mx.ΔΔⲆΔΔ = 0;
                        }
                    }
                };
                c.send();
            }
        }
    }
    function Ky(a) {
        if (qy) {
            var b = new XMLHttpRequest();
            b.open("GET", cy + "xsolla?userid=" + qy + "&item=" + a);
            b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            b.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
                    ty.access_token = b.responseText;
                    hc.XPayStationWidget.init(ty);
                    hc.XPayStationWidget.open();
                }
            };
            b.send();
        }
    }
    function Ny() {
        if (Mx.ΔΔⲆᐃⲆ >= 300 || Mx.ΔᐃⵠΔΔⲆᐃ <= 0) {
            var a = document.getElementById("account_nickname_input").value.trim();
            document.getElementById("account_nickname_input").value = a;
            if (a.length >= 1 && a.length <= 20) {
                var b = new XMLHttpRequest();
                b.open("GET", cy + "changeNickname?token=" + py + "&userid=" + qy + "&nickname=" + encodeURIComponent(a));
                b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                b.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
                        var a = Number(b.responseText);
                        if (a > 0) {
                            Mx.ΔΔⲆᐃⲆ -= a;
                        }
                        Mx.ΔᐃⵠΔΔⲆᐃ = 1;
                        Mx.ΔΔΔⵠ(Mx.ᐃᐃⲆΔΔ);
                    }
                };
                b.send();
            }
        }
    }
    function Oy(a, b) {
        if (b > Mx.ΔΔⲆᐃⲆ) {
            Mx.ΔΔΔⵠ(Mx.ⲆΔⵠⲆᐃ);
        } else {
            var c = new XMLHttpRequest();
            c.open("GET", cy + "buyKit?token=" + py + "&userid=" + qy + "&kit=" + a);
            c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            c.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
                    var a = JSON.parse(c.responseText);
                    Mx.ΔΔⲆᐃⲆ -= b;
                    Mx.ⲆⲆⵠΔᐃ = Date.now() + Number(a);
                }
            };
            c.send();
        }
    }
    function Fy() {
        if (hc.FB) {
            hc.FB.init({
                cookie: Zk,
                xfbml: true,
                version: "v15.0",
                appId: "642017356260407"
            });
        }
        if (qy === undefined) {
            (function () {
                try {
                    if (hc.FB && hc.FB.getUserID()) {
                        qy = hc.FB.getUserID();
                        if (py === undefined) {
                            hc.FB.getLoginStatus(function () {
                                my = ly;
                                py = hc.FB.getAuthResponse().accessToken;
                                hc.ΔⵠᐃⲆⲆⵠⵠ(qy);
                            });
                        }
                    }
                } catch (a) { }
                try {
                    qy = zy.getBasicProfile().getId();
                } catch (a) { }
            })();
        }
    }
    function jy(a) {
        var b = new XMLHttpRequest();
        b.open("GET", cy + "setRegion?token=" + py + "&userid=" + qy + "&region=" + a);
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                if (b.responseText !== "0") {
                    Mx.ΔΔΔⵠ(Mx.ⵠⵠⲆΔΔ);
                } else {
                    Mx.ΔΔΔⵠ(Mx.ⲆⵠᐃⲆⵠ);
                }
            }
        };
        b.send();
    }
    function Gy(b, c, d, e) {
        b = b === undefined ? Mx.ⲆⵠⵠΔᐃⵠⵠ : b;
        c = c === undefined ? Mx.ⵠΔᐃⲆΔᐃΔ : c;
        d = hj === d ? Mx.ⵠΔΔⲆⵠᐃⲆ : d;
        e = e === undefined ? Mx.ΔᐃΔⲆᐃᐃⵠ : e;
        if (b !== Mx.ⲆⵠⵠΔᐃⵠⵠ || c !== Mx.ⵠΔᐃⲆΔᐃΔ || d !== Mx.ⵠΔΔⲆⵠᐃⲆ || Mx.ΔᐃΔⲆᐃᐃⵠ !== e) {
            Mx.ⲆⵠⵠΔᐃⵠⵠ = b;
            Mx.ⵠΔᐃⲆΔᐃΔ = c;
            Mx.ⵠΔΔⲆⵠᐃⲆ = d;
            Mx.ΔᐃΔⲆᐃᐃⵠ = e;
            if (Mx.ⵠⵠΔΔᐃⵠⲆ === e) {
                e = "0";
            } else if (e === Mx.ⲆᐃⲆΔᐃᐃⲆ) {
                e = "1";
            } else if (Mx.ᐃΔⲆᐃᐃᐃⲆ === e) {
                e = "2";
            } else if (Mx.ᐃΔⵠⵠᐃⵠᐃ === e) {
                e = "3";
            } else if (Mx.ⵠᐃΔᐃΔᐃᐃ === e) {
                e = "4";
            } else if (Mx.ⵠⵠΔⲆⲆⲆⵠ === e) {
                e = "5";
            }
            if (Mx.ⵠᐃᐃⲆⲆⲆᐃ === c) {
                c = "total";
            } else if (c === Mx.ᐃΔⲆⵠᐃⲆᐃ) {
                c = "normal";
            } else if (c === Mx.ⵠΔⲆᐃᐃⲆᐃ) {
                c = "zombie";
            } else if (Mx.ᐃᐃΔⲆⲆⲆᐃ === c) {
                c = "vampire";
            } else if (c === Mx.ⵠⵠⵠⵠΔᐃⲆ) {
                c = "forest";
            }
            if (Mx.ⲆΔᐃᐃⲆᐃΔ === b) {
                b = "all";
            }
            if (Mx.ⵠᐃΔᐃⵠᐃΔ === b) {
                b = "week";
            }
            if (b === Mx.ΔⵠⵠΔⲆⵠᐃ) {
                b = "today";
            }
            if (d === Mx.ᐃⲆⵠⲆᐃⵠᐃ) {
                d = "kill";
            } else if (d === Mx.ΔΔΔᐃⵠᐃⲆ) {
                d = "score";
            } else if (Mx.ΔᐃⲆⵠΔᐃᐃ === d) {
                d = "time";
            }
            var f = new XMLHttpRequest();
            f.open("GET", cy + "leaderboard?range=" + b + "&mode=" + c + "&sort=" + d + "&season=" + e);
            f.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            f.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && f.responseText !== "0") {
                    for (var a = JSON.parse(f.responseText), b = "", c = 0; c < a.length; c++) {
                        ΔᐃⲆΔΔ = a[c];
                        var d = ΔᐃⲆΔΔ[1];
                        try {
                            if (d.indexOf("Starver#") === -1) {
                                d = hc.decodeURIComponent(hc.escape(hc.atob(d)));
                            }
                        } catch (a) { }
                        b += "<div class=\"lineLeaderboard\">";
                        b += "<div class=\"rank\">";
                        b += c + 1 + "";
                        b += "</div>";
                        b += "<div class=\"name\">";
                        b += d;
                        b += "</div>";
                        b += "<div class=\"lvl\">";
                        b += Mx.ⵠⲆⵠΔΔⵠᐃ(ΔᐃⲆΔΔ[6]) + 1 + "";
                        b += "</div>";
                        b += "<div class=\"kills\">";
                        b += ΔᐃⲆΔΔ[5] + "";
                        b += "</div>";
                        b += "<div class=\"time\">";
                        b += ΔᐃⲆΔΔ[4] + "";
                        b += "</div>";
                        b += "<div class=\"score\">";
                        b += ΔᐃⲆΔΔ[3] + "";
                        b += "</div>";
                        b += "</div>";
                    }
                    document.getElementById("leaderboard").innerHTML = b;
                }
            };
            f.send();
        }
    }
})();
