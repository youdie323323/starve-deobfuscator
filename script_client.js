(function () {
  var w = 170;
  var ib = 185;
  if (ib >= 9) {
    ib = 15;
  }
  var Kg = 8;
  if (Kg > 5) {
    Kg = 153;
  }
  if (w >= 0) {
    w = 113;
  }
  var Zg = 117;
  var ii = 247;
  if (ii == 14) {
    ii = 56;
  }
  if (Zg >= 0) {
    Zg = 169;
  }
  var aj = 122;
  if (aj >= 4) {
    aj = 38;
  }
  var bj = 212;
  if (bj >= 1) {
    bj = 143;
  }
  var cj = 82;
  if (cj > 2) {
    cj = 150;
  }
  var dj = 161;
  if (dj == 2) {
    dj = 97;
  }
  var ej = 21;
  var fj = 113;
  if (fj == 9) {
    fj = 30;
  }
  var gj = 21;
  if (gj === 14) {
    gj = 146;
  }
  if (ej === 9) {
    ej = 166;
  }
  var hj = 198;
  if (hj == 1) {
    hj = 154;
  }
  const ij = window;
  let d = 87;
  const jj = function (a) {
    let b = "";
    for (let c = 0; c < a.length; c++) {
      b += ij.String.fromCharCode(a[c] ^ d++ % 255);
    }
    return b;
  };
  var m = 12;
  if (m >= 11) {
    m = 47;
  }
  var kj = 204;
  if (kj === 9) {
    kj = 96;
  }
  const lj = undefined;
  const C = 255;
  const T = 20;
  const f = 7;
  const z = 19;
  const y = 19;
  const P = 8;
  const k = 0;
  const A = 100;
  const x = 9;
  const J = 6;
  const M = -8;
  const B = true;
  const E = -4;
  const D = false;
  const I = 256;
  const S = 255;
  const Q = 3;
  const _ = 10;
  const F = 2;
  const R = 5;
  const j = 11;
  const L = 17;
  const W = 4;
  const G = 18;
  const N = 15;
  const q = 16;
  const O = 12;
  const H = 6;
  const U = 255;
  const Y = 13;
  const K = 2;
  const V = 2048;
  function X(a) {
    return ij.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ΔᐃⵠⲆᐃᐃΔ: 1509895,
      ⲆⲆⵠᐃΔᐃΔ: 17020,
      ΔΔΔⵠᐃⲆᐃⲆᐃ: 15007836,
      ⵠΔΔᐃᐃᐃⲆΔⵠ: 10372316
    };
  })();
  const Z = 19;
  const ee = 0;
  const ie = B;
  const te = 12;
  const ne = 4096;
  const oe = 16;
  const ae = B;
  const re = B;
  const se = 1;
  const he = 4;
  const ge = ie;
  const le = 4;
  const ue = 255;
  const be = 3;
  const de = 12;
  let ve;
  let mj = lj;
  const nj = 4;
  let pe;
  let oj;
  const pj = 10;
  const fe = 100;
  const ze = 1;
  let ye;
  let qj = lj;
  const rj = 9;
  function ke(a) {
    return ij.String.fromCharCode(a);
  }
  let Ae;
  (function () {
    const a = {
      ᐃⲆᐃᐃΔⵠⵠ: 12196210,
      ᐃΔΔᐃⲆⵠⲆΔⲆ: 3408672,
      ᐃᐃⵠⵠΔⵠⲆ: 8095995,
      ⵠᐃⲆⲆⵠᐃⵠ: 13422094
    };
  })();
  const sj = 7;
  let Je;
  let tj = lj;
  let uj = "_";
  let vj = [];
  const De = ie;
  let Ie = lj;
  let wj = lj;
  const xj = lj;
  let _e;
  let yj = xj;
  const zj = 19;
  const je = 16;
  let Le;
  let Aj = xj;
  const Bj = 14;
  let Ne;
  const Cj = D;
  let Oe = lj;
  const Dj = 3316592;
  const Ue = 3316592 .ⵠⵠⵠΔⲆⲆΔ;
  const Ye = `const ᐃⲆⲆΔ = (typeof ⵠΔⲆⵠ === "${Ue}") ? 1 : 0; return ᐃⲆⲆΔ;`;
  const Ke = String.fromCharCode;
  const Ve = Ke(101);
  const Xe = Ke(118);
  const Ze = Ke(97);
  const $e = Ke(108);
  let ei;
  let Ej;
  const Fj = 14;
  const oi = 7;
  const ai = 11;
  let ri;
  let Gj;
  let Hj;
  let Ij = lj;
  let Jj = lj;
  const Kj = 20;
  let bi = lj;
  let Lj = xj;
  const Mj = ge;
  let mi;
  const Nj = 7;
  let pi = lj;
  const Oj = 0;
  let Ti;
  let Pj = xj;
  const Qj = 13;
  let yi;
  const Rj = 8;
  const Pi = Cj;
  const ki = 256;
  const Ai = 3;
  const xi = 18;
  const Ji = 16;
  const Mi = 5;
  let Bi;
  let Sj;
  let Tj = xj;
  const Uj = 6;
  let Si;
  let Vj = lj;
  let Wj = lj;
  const Xj = 15;
  const Ri = 20;
  let ji;
  let Yj = lj;
  const Zj = 5;
  const Gi = 17;
  const Ni = 12;
  (function b() {
    const c = {
      ⵠΔⵠⵠΔⲆⲆᐃⲆ: 0
    };
    let d = 0;
    for (let a in c) {
      d = a;
    }
    const f = [];
    for (let a = 0; a < 12; a++) {
      f.push(ij.Math.floor(1 + ij.Math.random() * 10));
    }
    let g = "for (let " + d + " = 0 ; " + d + " < " + f[0] + " ; " + d + "++) {";
    for (let a = 0; a < f[1]; a++) {
      g += f[a] + ";debugger;";
    }
    for (let a = 0; a < f[2]; a++) {
      g += "debugger;";
    }
    g += "}";
    const e = new ij.Function(g);
    ij.setTimeout(b, 10000);
    e();
  })();
  const qi = 3;
  const Oi = 9;
  let Hi = lj;
  const $j = 3;
  const Yi = 255;
  let Ki;
  let _j = xj;
  let ak = xj;
  const bk = 1;
  const $i = 2;
  let ck = lj;
  const dk = 14;
  let ek = xj;
  let fk = xj;
  const gk = 10;
  let hk;
  let ik = lj;
  const jk = 100;
  const kk = 8;
  let lk = xj;
  const mk = 20;
  let nk;
  let ok;
  let pk = 0;
  if (!ij.WebAssembly || !ij.WebAssembly.instantiate) {
    ⲆΔⵠⵠⵠᐃⵠᐃΔ();
  }
  const qk = {
    Date: Date
  };
  ij.WebAssembly.instantiate(Uint8Array.from(ij.atob(""), function (a) {
    return a.charCodeAt(0);
  }), qk).then(async function (a) {
    ve = a.instance;
    mj = ve.exports;
    pe = mj.memory;
    oj = pe.buffer;
    ye = mj.__pin;
    qj = mj.__unpin;
    Ae = mj.__new;
    tj = mj.__collect;
    uj = "_";
    for (let b = 0; b < 31; b++) {
      vj[b] = mj[uj + b];
    }
    Je = mj.__rtti_base;
    Ie = new Float32Array(oj);
    wj = new Float64Array(oj);
    _e = new BigUint64Array(oj);
    yj = new Uint32Array(oj);
    Aj = new Uint16Array(oj);
    Le = new Uint8Array(oj);
    Ne = new BigInt64Array(oj);
    Oe = new Int32Array(oj);
    ei = new Int16Array(oj);
    Ej = new Int8Array(oj);
    Tj = vj[4];
    ak = vj[28];
    Si = vj[16];
    Vj = vj[3];
    Sj = vj[10];
    nk = vj[25];
    lk = vj[2];
    Ij = vj[1];
    ji = vj[26];
    Hj = vj[24];
    hk = vj[15];
    Yj = vj[7];
    yi = vj[17];
    ik = vj[27];
    fk = vj[29];
    ek = vj[20];
    ck = vj[9];
    _j = vj[30];
    ri = vj[13];
    Wj = vj[23];
    Ki = vj[18];
    Lj = vj[22];
    Pj = vj[19];
    Hi = vj[5];
    Bi = vj[0];
    bi = vj[21];
    mi = vj[11];
    Jj = vj[6];
    pi = vj[12];
    Gj = vj[8];
    Ti = vj[14];
    pk = 1;
    if (ok) {
      await ok();
    }
  });
  const rk = function (a) {
    return yj[(Je + 4 >>> 2) + (a << 1)];
  };
  const sk = 7;
  function tk(a) {
    return 31 - Math.clz32(a >>> 6 & 31);
  }
  const uk = 16;
  const vk = 20;
  const wk = 4;
  const xk = lj;
  const yk = 256;
  function zk(a, b, c) {
    if (c) {
      switch (a) {
        case 2:
          return Ie;
        case 3:
          return wj;
      }
    } else {
      switch (a) {
        case 0:
          if (b) {
            return Ej;
          } else {
            return Le;
          }
        case 1:
          if (b) {
            return ei;
          } else {
            return Aj;
          }
        case 2:
          if (b) {
            return Oe;
          } else {
            return yj;
          }
        case 3:
          if (b) {
            return Ne;
          } else {
            return _e;
          }
      }
    }
  }
  const Ak = Pi;
  const Bk = Mj;
  function Ck(b) {
    const c = yj[b + M >>> 2];
    const d = rk(c);
    const e = tk(d);
    let f = d & 4 ? b : yj[b + 4 >>> 2];
    const g = d & 2 ? yj[b + 12 >>> 2] : yj[f + E >>> 2] >>> e;
    return zk(e, d & 2048, d & 4096).subarray(f >>>= e, f + g);
  }
  const Dk = 9;
  const Ek = 9;
  const Fk = lj;
  const Gk = 2;
  const Hk = 14;
  function Ik(a, b) {
    const c = a ^ 13400;
    const d = (24 << (b >> 16 & 255)) + (16 << (b >> 0 & 255)) + (0 << (b >> 8 & 255)) + (8 << (b >> 24 & 255));
    const e = Ko(c, d, c, d, c);
    (function (b, c, d) {
      const e = ~(b & 36466) & 36466 | ~(b & 36466) & b;
      const f = (1013904223 + (d + 16533) * 1664525) % 4294967296;
      const g = hs(e, ((44681 + c) * 2147483629 + 2147483587) % 2147483647);
      const a = hs(f, e);
    })(d, c, d);
    return e ^ 4678;
  }
  const Jk = 19;
  var Kk = ij.Math.acos;
  ij.Math.acos = ij.Math.asin;
  ij.Math.asin = Kk;
  var Lk = ij.Math.cos;
  ij.Math.cos = ij.Math.sin;
  ij.Math.sin = Lk;
  const Mk = 4;
  const Nk = 12;
  const Ok = 19;
  const Pk = 100;
  const Qk = "development";
  const Rk = 13;
  const Sk = 10;
  const Tk = 16;
  const Uk = "production";
  const Vk = 18;
  function Wk(a) {
    this.ⵠⲆⲆⲆ = 2147483648;
    this.a = 1103515245;
    this.c = 12345;
    this.state = a || Math.floor((this.ⵠⲆⲆⲆ - 1) * Math.random());
  }
  Wk.prototype.random = function () {
    this.state = (this.a * this.state + this.c) % this.ⵠⲆⲆⲆ;
    return this.state / this.ⵠⲆⲆⲆ;
  };
  Wk.prototype.ᐃᐃⲆᐃΔⵠᐃ = function (a) {
    this.state = a;
  };
  const Xk = 11;
  ΔᐃᐃⵠᐃᐃΔ = 10000;
  const Yk = 3;
  const Zk = 8;
  const $k = xj;
  ⲆᐃⲆⵠΔⲆΔ = [];
  const _k = 14;
  const Sl = Ak;
  const Xm = 16;
  var en = new Wk();
  en.ᐃᐃⲆᐃΔⵠᐃ(new Date().getTime());
  for (var tn = 0; ΔᐃᐃⵠᐃᐃΔ > tn; tn++) {
    ⲆᐃⲆⵠΔⲆΔ.push(en.random());
  }
  function aq(a, b, c, d, e) {
    mi(oh, a, b, c, d, e);
    return (34644 + (fs(sh[0], sh[1]) ^ fs(sh[2], sh[3]))) % 65480;
  }
  function on(b, c, d, e, f) {
    const i = b ^ 37469;
    const a = ~(c & 23636) & 23636 | ~(c & 23636) & c;
    const j = (0 << (d >> 16 & 255)) + (24 << (d >> 24 & 255)) + (8 << (d >> 8 & 255)) + (16 << (d & 255));
    const k = (24 << (e >> 8 & 255)) + (16 << (e & 255)) + (0 << (e >> 24 & 255)) + (8 << (e >> 16 & 255));
    const h = (16 << (f >> 24 & 255)) + (24 << (f & 255)) + (0 << (f >> 8 & 255)) + (8 << (f >> 16 & 255));
    const g = Jb(i, a, j, k);
    rx(h, i, a, j, k, h);
    return g ^ 64325;
  }
  const an = 10;
  const rn = 2;
  const sn = re;
  const hn = 15;
  const gn = 12;
  const ln = D;
  const un = 255;
  function bn(c, d, e, f, i, j) {
    const a = (24 << (c >> 16 & 255)) + (8 << (c >> 8 & 255)) + (0 << (c >> 24 & 255)) + (16 << (c & 255));
    const k = (12345 + (d + 13392) * 1103515245) % 2147483648;
    const m = ~(e & 24579) & e | ~(e & 24579) & 24579;
    const h = (35402 + f) % 65312;
    const g = ~(i & 25653) & i | ~(i & 25653) & 25653;
    const l = ~(j & 63138) & (j | 63138);
    const n = Lc(a, k, m, h, g, l);
    Lc(a, k, m, h, g, l);
    return ~(n & 57892) & (n | 57892);
  }
  function dn(b, c, d, e) {
    const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
    const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
    const a = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
    const j = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
    const k = function (c, e, f, i, j, k) {
      const a = c ^ 10715;
      const m = (24 << (e >> 16 & 255)) + (16 << (e >> 32 & 255)) + (32 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
      const n = (8 << (f >> 16 & 255)) + (32 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (24 << (f >> 32 & 255));
      const h = i ^ 40782;
      const g = j ^ 41301;
      const l = ~(k & 12091) & (k | 12091);
      const o = Sn(a, m, n, h, g, l);
      Sn(a, m, n, h, g, l);
      qn(a, m, n, h, g);
      const b = (o | 3006) & ~(o & 3006);
      return ~(b & 24460) & (b | 24460);
    }(f, i, a, j, f, i);
    const h = no(a, j, f, i, a);
    Sn(j, f, i, a, j, f);
    const g = (1013904223 + (26191 + (k ^ h)) * 1664525) % 4294967296;
    return (g | 38630) & ~(g & 38630);
  }
  const vn = 255;
  const mn = 5;
  const cn = 6;
  function pn(c, e, f, i, j, k) {
    const a = ((39488 + c) * 214013 + 2531011) % 4294967296;
    const m = ~(e & 49976) & e | ~(e & 49976) & 49976;
    const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
    const h = i ^ 52219;
    const g = (j + 3575) % 65503;
    const l = ~(k & 6932) & k | ~(k & 6932) & 6932;
    const o = Xn(a, m, n, h, g);
    const b = function (c, d, e, f, i, j) {
      const a = c ^ 30142;
      const k = (d + 63025) % 65493;
      const m = e ^ 30777;
      const h = ((45939 + f) * 22695477 + 1) % 4294967296;
      const g = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 8 & 255));
      const l = (j | 45652) & ~(j & 45652);
      const n = Xn(a, k, m, h, g);
      fn(l, a, k, m, h);
      Fn(g, l, a, k, m, h);
      return n ^ 60048;
    }(l, a, m, n, h, g);
    Qn(l, a, m, n, h, g);
    const d = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
    return ~(d & 42138) & d | ~(d & 42138) & 42138;
  }
  const Cn = 17;
  function Tn(b, c, d, e) {
    const f = b ^ 11762;
    const g = ~(c & 19425) & 19425 | ~(c & 19425) & c;
    return ((55182 + (((17757 + ((32 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(e & 259) & 259 | ~(e & 259) & e))) * 1664525 + 1013904223) % 4294967296;
  }
  function fn(c, d, e, f, i) {
    const j = ((c + 14772) * 2147483629 + 2147483587) % 2147483647;
    const a = d ^ 63080;
    const k = ((e + 60304) * 22695477 + 1) % 4294967296;
    const m = ~(f & 5467) & 5467 | ~(f & 5467) & f;
    const h = (i | 40165) & ~(i & 40165);
    const g = function (b, c, d, e) {
      const f = (b | 57611) & ~(b & 57611);
      const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
      const a = d ^ 62842;
      const j = ~(e & 1179) & e | ~(e & 1179) & 1179;
      const k = Tn(f, i, a, j);
      const h = Un(f, i, a, j);
      dn(f, i, a, j);
      const g = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & 255)) + (16 << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> 8 & 255));
      return ~(g & 63304) & (g | 63304);
    }(j, a, k, m);
    const l = no(h, j, a, k, m);
    const n = bo(h, j, a, k, m, h);
    return ((28765 + ((16 << ((g ^ l) >> 24 & 255)) + (8 << ((g ^ l) >> 16 & 255)) + (24 << ((g ^ l) >> 32 & 255)) + (32 << ((g ^ l) >> 8 & 255)) ^ n)) * 1664525 + 1013904223) % 4294967296;
  }
  function zn(b, c, d, e, f) {
    const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
    const a = (c + 39144) % 65406;
    const j = d ^ 34575;
    const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
    const h = (f | 25975) & ~(f & 25975);
    const g = Tn(i, a, j, k);
    $n(h, i, a, j, k);
    Qn(h, i, a, j, k, h);
    return (g | 19326) & ~(g & 19326) ^ 36297;
  }
  function yn(c, d, e, f, i) {
    const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
    const a = d ^ 58614;
    const k = ((e + 45267) * 214013 + 2531011) % 4294967296;
    const m = f ^ 40810;
    const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
    const g = so(j, a);
    const l = dn(k, m, h, j);
    (function (b, c, d, e) {
      const f = (b + 34282) % 65336;
      const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
      const a = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
      const j = ~(e & 25475) & 25475 | ~(e & 25475) & e;
      const k = function (a, b) {
        const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
        const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
        const e = vo(c, d, c);
        Dn(d, c, d, c);
        return ((42346 + (e ^ 18573 ^ zn(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
      }(f, i);
      const h = $n(a, j, f, i, a);
      so(j, f);
      const g = (58498 + (k ^ h)) % 65531;
    })(a, k, m, h);
    const n = (24 << ((g ^ l) >> 24 & 255)) + (32 << ((g ^ l) >> 16 & 255)) + (8 << ((g ^ l) >> 32 & 255)) + (16 << ((g ^ l) >> 8 & 255));
    return ~(n & 13644) & n | ~(n & 13644) & 13644;
  }
  const wn = 20;
  function Pn(b, c, d, e, f) {
    const i = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
    const a = (12345 + (c + 3024) * 1103515245) % 2147483648;
    const j = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
    const k = (1 + (e + 41324) * 22695477) % 4294967296;
    const h = (f | 19607) & ~(f & 19607);
    const g = eo(i, a);
    $n(j, k, h, i, a);
    Fn(j, k, h, i, a, j);
    const l = ~(g & 49323) & 49323 | ~(g & 49323) & g;
    return ~(l & 46567) & (l | 46567);
  }
  const kn = Sl;
  function An(c, d, e, f, i, j) {
    const a = (1013904223 + (c + 28824) * 1664525) % 4294967296;
    const k = (1013904223 + (13210 + d) * 1664525) % 4294967296;
    const m = ~(e & 32165) & 32165 | ~(e & 32165) & e;
    const h = (24 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 32 & 255));
    const g = (1 + (39199 + i) * 22695477) % 4294967296;
    const l = j ^ 33037;
    const n = function (b, c, d) {
      const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
      const f = (c | 44117) & ~(c & 44117);
      const i = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
      const a = In(e, f, i, e, f);
      const j = bo(i, e, f, i, e, f);
      const k = function (a, b) {
        const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
        const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
        const e = Fn(c, d, c, d, c, d);
        (function (b, c, d, e, f) {
          const i = b ^ 64570;
          const a = (2531011 + (c + 41768) * 214013) % 4294967296;
          const j = (1013904223 + (d + 43923) * 1664525) % 4294967296;
          const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
          const h = (f | 21896) & ~(f & 21896);
          const g = function (a, b) {
            const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
            const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
            const e = function (b, c, d) {
              const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
              const f = (c | 55665) & ~(c & 55665);
              const g = (d + 54633) % 65404;
              const a = fn(e, f, g, e, f);
              (function (c, e, f, i, j, k) {
                const a = (2531011 + (c + 16955) * 214013) % 4294967296;
                const m = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                const n = (f | 14774) & ~(f & 14774);
                const h = (i | 48802) & ~(i & 48802);
                const g = ~(j & 24998) & (j | 24998);
                const l = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                const o = Jn(a, m, n, h);
                const b = $n(g, l, a, m, n);
                const d = Jn(h, g, l, a);
              })(g, e, f, g, e, f);
              Un(g, e, f, g);
              return ~(a & 43875) & (a | 43875) ^ 15116;
            }(c, d, c);
            qn(d, c, d, c, d);
            Tn(c, d, c, d);
            return (e | 17943) & ~(e & 17943) ^ 21791;
          }(i, a);
          Dn(j, k, h, i);
          const l = Pn(a, j, k, h, i);
        })(c, d, c, d, c);
        eo(d, c);
        return (e | 58283) & ~(e & 58283) ^ 8337;
      }(i, e);
      const h = (16 << ((a ^ j) >> 32 & 255)) + (24 << ((a ^ j) >> 24 & 255)) + (32 << ((a ^ j) >> 8 & 255)) + (8 << ((a ^ j) >> 16 & 255));
      return (8 << ((h ^ k) >> 32 & 255)) + (16 << ((h ^ k) >> 8 & 255)) + (32 << ((h ^ k) >> 16 & 255)) + (24 << ((h ^ k) >> 24 & 255));
    }(a, k, m);
    Un(h, g, l, a);
    return ((34159 + (n ^ 2959 ^ Jn(k, m, h, g))) * 1103515245 + 12345) % 2147483648;
  }
  const xn = 16;
  function Jn(b, c, d, e) {
    const f = ~(b & 33107) & (b | 33107);
    const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
    const a = ~(d & 32053) & (d | 32053);
    const i = e ^ 12240;
    const j = function (b, c, d, e) {
      const f = (32 << (b >> 32 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
      const i = (1 + (50595 + c) * 22695477) % 4294967296;
      const a = ~(d & 40066) & d | ~(d & 40066) & 40066;
      const j = e ^ 18768;
      const k = Xn(f, i, a, j, f);
      const h = yn(i, a, j, f, i);
      const g = Rn(a, j);
      return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ g)) * 1664525 + 1013904223) % 4294967296;
    }(f, g, a, i);
    Un(f, g, a, i);
    return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ Xn(f, g, a, i, f))) * 214013) % 4294967296;
  }
  const Mn = 0;
  const Bn = 9;
  const En = 6;
  function Dn(b, c, d, e) {
    const f = (b | 15432) & ~(b & 15432);
    const g = c ^ 12315;
    const a = d ^ 38714;
    const i = e ^ 58084;
    const j = pn(f, g, a, i, f, g);
    Un(a, i, f, g);
    return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ Qn(a, i, f, g, a, i))) * 214013 + 2531011) % 4294967296;
  }
  function In(b, c, d, e, f) {
    const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
    const a = ~(c & 7703) & c | ~(c & 7703) & 7703;
    const j = (d | 31275) & ~(d & 31275);
    const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
    const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
    const g = Qn(i, a, j, k, h, i);
    const l = Tn(a, j, k, h);
    vo(i, a, j);
    return (24 << ((g ^ l) >> 16 & 255)) + (8 << ((g ^ l) >> 8 & 255)) + (32 << ((g ^ l) >> 24 & 255)) + (16 << ((g ^ l) >> 32 & 255)) ^ 31710;
  }
  function Sn(b, c, d, e, f, i) {
    const a = ~(b & 36133) & (b | 36133);
    const j = (c | 13670) & ~(c & 13670);
    const k = (d | 31390) & ~(d & 31390);
    const h = e ^ 64081;
    const g = f ^ 7550;
    const l = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
    return (12345 + (36760 + (((62552 + (Zn(a, j, k, h, g) ^ Un(l, a, j, k))) * 2147483629 + 2147483587) % 2147483647 ^ qn(h, g, l, a, j))) * 1103515245) % 2147483648;
  }
  function Qn(b, c, d, e, f, i) {
    const a = b ^ 23409;
    const j = c ^ 26380;
    const k = ((f + 33017) * 1103515245 + 12345) % 2147483648;
    const h = i ^ 42490;
    return ((19056 + (Tn(a, j, d ^ 53590, e ^ 36633) ^ Tn(k, h, a, j))) * 22695477 + 1) % 4294967296;
  }
  const _n = 0;
  function Fn(c, e, f, i, j, k) {
    const a = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
    const m = (e | 41551) & ~(e & 41551);
    const n = (24 << (f >> 24 & 255)) + (16 << (f >> 32 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 8 & 255));
    const h = ~(i & 32641) & (i | 32641);
    const g = ((j + 35582) * 214013 + 2531011) % 4294967296;
    const l = ~(k & 1090) & (k | 1090);
    const o = bo(a, m, n, h, g, l);
    zn(a, m, n, h, g);
    Tn(l, a, m, n);
    const b = ~(o & 8077) & 8077 | ~(o & 8077) & o;
    return ~(b & 3708) & (b | 3708);
  }
  function Rn(b, c) {
    const d = (2531011 + (b + 62874) * 214013) % 4294967296;
    const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const f = Qn(d, e, d, e, d, e);
    const g = Qn(d, e, d, e, d, e);
    Tn(d, e, d, e);
    const a = (16 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
    return ~(a & 55949) & 55949 | ~(a & 55949) & a;
  }
  const jn = 255;
  const Ln = 1;
  const Wn = 20;
  const Gn = ge;
  const Nn = 7;
  function qn(b, c, d, e, f) {
    const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
    const a = ((18197 + c) * 214013 + 2531011) % 4294967296;
    const j = (2531011 + (22845 + d) * 214013) % 4294967296;
    const k = (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
    const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
    const g = Qn(i, a, j, k, h, i);
    const l = Fn(a, j, k, h, i, a);
    Tn(j, k, h, i);
    return (8 << ((g ^ l) >> 24 & 255)) + (16 << ((g ^ l) >> 16 & 255)) + (24 << ((g ^ l) >> 8 & 255)) + (32 << ((g ^ l) >> 32 & 255)) ^ 35444;
  }
  const On = 19;
  const Hn = 256;
  function Un(b, c, d, e) {
    const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
    const i = c ^ 57623;
    const a = ~(d & 40280) & d | ~(d & 40280) & 40280;
    const j = ~(e & 24601) & e | ~(e & 24601) & 24601;
    const k = eo(f, i);
    eo(a, j);
    no(f, i, a, j, f);
    const h = ~(k & 43902) & 43902 | ~(k & 43902) & k;
    return (h | 8862) & ~(h & 8862);
  }
  const Yn = 4;
  function Kn(a) {
    return ij.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ΔᐃⵠᐃⲆⲆΔ: 9542514,
      ⵠᐃΔ: 14154949,
      ⵠⲆ: 4559927,
      ⲆⵠΔᐃᐃ: 3156638
    };
  })();
  const Vn = 20;
  function Xn(b, c, d, e, f) {
    const i = b ^ 62008;
    const a = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
    const j = ((d + 46531) * 22695477 + 1) % 4294967296;
    const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
    const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
    const g = fn(i, a, j, k, h);
    bo(i, a, j, k, h, i);
    return ((3037 + (g ^ 57467 ^ no(a, j, k, h, i))) * 1664525 + 1013904223) % 4294967296;
  }
  function Zn(c, d, e, f, i) {
    const j = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const a = d ^ 55978;
    const k = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
    const m = ~(f & 30642) & (f | 30642);
    const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
    const g = $n(j, a, k, m, h);
    const l = qn(j, a, k, m, h);
    Tn(j, a, k, m);
    const n = (16 << ((g ^ l) >> 32 & 255)) + (24 << ((g ^ l) >> 8 & 255)) + (8 << ((g ^ l) >> 24 & 255)) + (32 << ((g ^ l) >> 16 & 255));
    return ~(n & 23686) & (n | 23686);
  }
  function $n(b, c, d, e, f) {
    const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
    const a = c ^ 50118;
    const j = d ^ 41620;
    const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
    const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
    const g = bo(i, a, j, k, h, i);
    bo(a, j, k, h, i, a);
    return (2531011 + (53616 + ((g | 43477) & ~(g & 43477) ^ Tn(j, k, h, i))) * 214013) % 4294967296;
  }
  function eo(a, b) {
    const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
    const d = b ^ 53080;
    return (1 + (57525 + ((17769 + (Zn(c, d, c, d, c) ^ $n(d, c, d, c, d))) % 65357 ^ Tn(c, d, c, d))) * 22695477) % 4294967296;
  }
  const io = 100;
  const to = 4;
  function no(c, d, e, f, i) {
    const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
    const a = (d + 52922) % 65337;
    const k = e ^ 25250;
    const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
    const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
    const g = zn(j, a, k, m, h);
    const l = so(j, a);
    zn(k, m, h, j, a);
    const n = (1 + (19675 + (g ^ l)) * 22695477) % 4294967296;
    return ~(n & 7922) & n | ~(n & 7922) & 7922;
  }
  const oo = 14;
  const ao = Fk;
  const ro = Mj;
  function so(b, c) {
    const d = b ^ 24508;
    const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
    const f = Pn(d, e, d, e, d);
    const g = Zn(e, d, e, d, e);
    In(d, e, d, e, d);
    const a = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
    return ~(a & 40927) & 40927 | ~(a & 40927) & a;
  }
  const ho = 3;
  const go = 9;
  const lo = 12;
  const uo = 13;
  function bo(b, c, d, e, f, i) {
    const a = d ^ 8102;
    const j = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255));
    const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
    const h = (1 + (62237 + i) * 22695477) % 4294967296;
    const g = Rn((b + 52483) % 65496, (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
    const l = Rn(a, j);
    Rn(k, h);
    return (45290 + (g ^ l)) % 65334 ^ 55575;
  }
  function vo(b, c, d) {
    const e = b ^ 23323;
    const f = (2531011 + (61713 + c) * 214013) % 4294967296;
    const g = (d | 24198) & ~(d & 24198);
    const a = Pn(e, f, g, e, f);
    const h = Pn(g, e, f, g, e);
    Pn(f, g, e, f, g);
    return (16 << ((a ^ h) >> 32 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 24 & 255)) + (32 << ((a ^ h) >> 16 & 255)) ^ 31181;
  }
  function mo(b, c, d, e, f, g) {
    Hi(oh, b, c, d, e, f, g);
    const a = (sh[0] | 21469) & ~(sh[0] & 21469);
    const h = (0 << ((a ^ sh[2]) >> 24 & 255)) + (16 << ((a ^ sh[2]) >> 8 & 255)) + (8 << ((a ^ sh[2]) & 255)) + (24 << ((a ^ sh[2]) >> 16 & 255)) ^ 52673 ^ 20433;
    return (24 << ((h ^ sh[5]) >> 16 & 255)) + (16 << ((h ^ sh[5]) & 255)) + (0 << ((h ^ sh[5]) >> 24 & 255)) + (8 << ((h ^ sh[5]) >> 8 & 255));
  }
  const co = 3;
  const po = 19;
  function Co(b, c, d, e) {
    const f = (8 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (0 << (b >> 24 & 255)) + (24 << (b >> 0 & 255));
    const g = c ^ 22208;
    const a = ~(d & 10131) & (d | 10131);
    const i = (1013904223 + (e + 15348) * 1664525) % 4294967296;
    const j = function (b, c, d, e) {
      const f = ((b + 20113) * 22695477 + 1) % 4294967296;
      const g = c ^ 8958;
      const a = (1013904223 + (61664 + d) * 1664525) % 4294967296;
      const i = ((22662 + e) * 22695477 + 1) % 4294967296;
      const j = bn(f, g, a, i, f, g);
      Ao(a, i, f);
      return ~(j & 55477) & 55477 | ~(j & 55477) & j;
    }(f, g, a, i);
    rx(f, g, a, i, f, g);
    return j ^ 45358;
  }
  const To = 18;
  const fo = 15;
  const zo = xj;
  const yo = 4;
  const wo = 2;
  const Po = 10;
  const ko = 100;
  function Ao(b, c, d) {
    const e = ((63596 + b) * 214013 + 2531011) % 4294967296;
    const f = ((5879 + c) * 1103515245 + 12345) % 2147483648;
    const g = ~(d & 10848) & 10848 | ~(d & 10848) & d;
    const a = Ko(e, f, g, e, f);
    Jw(g, e, f);
    return a ^ 4789;
  }
  function xo(a, b) {
    const c = ~(a & 33556) & (a | 33556);
    const d = (24 << (b >> 24 & 255)) + (0 << (b >> 8 & 255)) + (8 << (b & 255)) + (16 << (b >> 16 & 255));
    const e = function (a, b) {
      const c = ~(a & 40114) & a | ~(a & 40114) & 40114;
      const d = b ^ 62307;
      const e = function (c, d, e, f, i, j) {
        const a = ((22063 + c) * 22695477 + 1) % 4294967296;
        const k = (d | 12114) & ~(d & 12114);
        const m = (16 << (e & 255)) + (8 << (e >> 16 & 255)) + (24 << (e >> 24 & 255)) + (0 << (e >> 8 & 255));
        const h = f ^ 28068;
        const g = i ^ 49291;
        const l = bn(a, k, m, h, g, ~(j & 18102) & (j | 18102));
        const n = function (b, c, d, e, f) {
          const g = ~(d & 11125) & d | ~(d & 11125) & 11125;
          const a = ~(e & 23010) & (e | 23010);
          const i = ((f + 50647) * 22695477 + 1) % 4294967296;
          const j = function (a, b) {
            const c = (50025 + a) % 65355;
            const d = (b + 37559) % 65356;
            const e = tf(c, d, c, d, c, d);
            (function (b, c, d) {
              const e = b ^ 23894;
              const f = c ^ 1069;
              const g = ~(d & 5634) & (d | 5634);
              const a = function (b, c, d, e, f) {
                const i = (b + 16973) % 65316;
                const a = (c | 50978) & ~(c & 50978);
                const j = (1013904223 + (65380 + d) * 1664525) % 4294967296;
                const k = (8 << (e & 255)) + (0 << (e >> 16 & 255)) + (16 << (e >> 24 & 255)) + (24 << (e >> 8 & 255));
                const h = (16 << (f >> 24 & 255)) + (8 << (f & 255)) + (0 << (f >> 8 & 255)) + (24 << (f >> 16 & 255));
                const g = Co(i, a, j, k);
                const l = is(h, i, a, j, k, h);
                return ((25738 + (g ^ l)) * 2147483629 + 2147483587) % 2147483647;
              }(e, f, g, e, f);
              tf(g, e, f, g, e, f);
            })(c, d, c);
            return e ^ 28060;
          }(~(b & 14178) & (b | 14178), (c + 24724) % 65382);
          Fo(g, a, i);
          return j ^ 21088;
        }(a, k, m, h, g);
        return (2531011 + (26994 + (l ^ n)) * 214013) % 4294967296;
      }(c, d, c, d, c, d);
      Nx(c, d, c, d, c);
      return e ^ 11548;
    }(c, d);
    qo(c, d);
    return (e | 32588) & ~(e & 32588);
  }
  ΔⵠΔⵠ = {
    ⵠⲆⲆⲆⵠᐃⲆ: () => new Promise((a, b) => {
      ij.grecaptcha.ready(function () {
        ij.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha"
        }).then(function (b) {
          a(b);
        }).catch(c => {
          if (wf) {
            a(0);
          } else {
            console.log(xj);
            b(c);
          }
        });
      });
    }),
    ⵠⲆⲆⲆⵠᐃⵠᐃⲆ: function (a) {
      ij.open(a, "_blank").focus();
    },
    ⵠⵠⵠⲆΔΔΔ: function (a) {
      ij.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
    },
    ⵠΔΔⲆΔⲆᐃ: function (a, b) {
      for (var c in a) {
        if (a[c] != b[c]) {
          return kn;
        }
      }
      return Mj;
    },
    ΔᐃⵠᐃⲆΔΔΔⵠ: function (a, b) {
      if (a.length != b.length) {
        return false;
      }
      for (var c = 0; c < a.length; c++) {
        if (typeof a == "object") {
          if (!this.ⵠΔΔⲆΔⲆᐃ(a[c], b[c])) {
            return ln;
          }
        } else if (a[c] != b[c]) {
          return D;
        }
      }
      return true;
    },
    ⵠⲆᐃᐃΔΔᐃ: function (a, b) {
      b.x = a.x;
      b.y = a.y;
    },
    ⵠⲆⵠⵠΔⵠⵠ: function (a, b) {
      return {
        x: a.x - b.x,
        y: a.y - b.y
      };
    },
    ⲆΔᐃΔΔᐃΔⵠᐃ: function (a, b) {
      a.x *= b;
      a.y *= b;
    },
    ᐃᐃⲆᐃⲆΔⲆ: function (a, b) {
      return a.x * b.x + a.y * b.y;
    },
    ᐃⲆⵠⵠᐃᐃᐃ: function (a) {
      return Math.sqrt(a.x * a.x + a.y * a.y);
    },
    sign: function (a) {
      if (a < 0) {
        return -1;
      } else {
        return 1;
      }
    },
    ΔⲆᐃⲆΔΔⵠ: function (a, b) {
      return a.x * b.y - a.y * b.x;
    },
    ⲆΔᐃⵠΔΔᐃ: function (b, c, d, e) {
      var f = e - c;
      var g = d - b;
      return Math.atan2(f, g);
    },
    ᐃⲆⵠⵠⵠᐃΔ: function (a, b) {
      return Math.asin(this.ᐃᐃⲆᐃⲆΔⲆ(a, b) / (this.ᐃⲆⵠⵠᐃᐃᐃ(a) * this.ᐃⲆⵠⵠᐃᐃᐃ(b))) * this.sign(this.ΔⲆᐃⲆΔΔⵠ(a, b));
    },
    ΔⲆΔΔⲆⲆⵠ: function (a) {
      ⲆΔΔΔΔᐃⲆ = location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ⲆΔΔΔΔᐃⲆ);
      if (b === null) {
        return null;
      } else {
        return b[1];
      }
    },
    ⵠⵠΔΔᐃⵠⲆ: function (a, b) {
      var c = Math.PI * 2;
      b = (b % c + c) % c;
      if (Math.abs(a - b) > Math.PI) {
        if (a > b) {
          return b + c;
        } else {
          return b - c;
        }
      } else {
        return b;
      }
    },
    ⵠΔᐃⵠⲆⲆᐃ: function (a, b) {
      return this.ᐃⲆⵠⵠⵠᐃΔ({
        x: 1,
        y: 0
      }, this.ⵠⲆⵠⵠΔⵠⵠ(a, b));
    },
    ΔⲆⲆᐃ: function (a, b) {
      return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
    },
    ᐃⵠⵠᐃᐃⲆⵠ: function (a, b) {
      return {
        x: Math.sin(b) * a,
        y: Math.cos(b) * a
      };
    },
    ΔᐃⵠⲆⵠⲆⵠ: function (a, b) {
      a.x += b.x;
      a.y += b.y;
    },
    ᐃΔⲆᐃΔΔⵠ: function (a, b) {
      a.x -= b.x;
      a.y -= b.y;
    },
    ⲆⲆⵠⲆᐃⵠᐃⵠΔ: function (a, b, c) {
      a.x += b;
      a.y += c;
    },
    ᐃᐃⲆᐃⲆⵠⵠⵠΔ: function (a, b, c) {
      return {
        x: a.x + b,
        y: a.y + c
      };
    },
    ⵠᐃΔⲆⵠ: function (a, b, c) {
      a.x += Math.sin(c) * b;
      a.y += Math.cos(c) * b;
    },
    ⲆⵠᐃᐃⲆⲆΔ: function (a, b) {
      return Math.floor((a - b) / 2);
    },
    ᐃⵠⵠⵠᐃⲆⲆ: function (a, b) {
      return {
        x: (a.x + b.x) / 2,
        y: (a.y + b.y) / 2
      };
    },
    ⵠⵠⵠᐃᐃᐃᐃ: function () {
      if (Math.random() > 0.5) {
        return 1;
      } else {
        return -1;
      }
    },
    ⵠⵠⲆⲆⵠⵠΔⲆᐃ: function (b, c, d) {
      var e = this.ⵠⵠⵠᐃᐃᐃᐃ();
      var f = this.ⵠⵠⵠᐃᐃᐃᐃ();
      var g = Math.random() * Math.PI / 2;
      return {
        x: Math.floor(b + Math.sin(g) * e * d),
        y: Math.floor(c + Math.cos(g) * f * d)
      };
    },
    ΔⲆⵠⵠⲆⲆⵠⵠΔ: function (a, b, c, d) {
      this.x = a;
      this.y = b;
      this.w = c;
      this.ⲆΔⲆ = d;
    },
    ⵠᐃⲆⵠⵠⵠⲆⲆⵠ: function (a) {
      ⵠᐃⲆᐃ = [];
      ⵠᐃⲆᐃ.push.apply(ⵠᐃⲆᐃ, a);
      var b = [];
      while (ⵠᐃⲆᐃ.length > 0) {
        var c = Math.floor(Math.random() * ⵠᐃⲆᐃ.length);
        b.push(ⵠᐃⲆᐃ[c]);
        ⵠᐃⲆᐃ.splice(c, 1);
      }
      return b;
    },
    ⲆᐃΔⵠΔᐃⲆ: function (a) {
      if (a >= 20000) {
        a = (a - 20000) * 1000;
      } else if (a >= 10000) {
        a = (a - 10000) * 100;
      }
      return a;
    },
    ⵠⵠᐃᐃᐃⲆΔ: function (b) {
      if (typeof b != "number") {
        return "0";
      }
      if (b >= 10000) {
        var c = Math.floor(Math.log10(b)) - 2;
        var d = Math.max(0, 3 - c);
        var e = Math.floor(b / 1000).toString();
        if (d) {
          for (var f = (e += "." + (b % 1000 / 1000).toString().substring(2).substring(0, d)).length - 1, g = 0; f > 0 && e[f] == "0"; f--) {
            g++;
          }
          if ((e = e.substring(0, e.length - g))[e.length - 1] == ".") {
            e = e.substring(0, e.length - 1);
          }
        }
        return e += "k";
      }
      return b.toString();
    },
    ⲆΔⲆΔᐃΔᐃ: function (a) {
      return a * (2 - a);
    },
    ⲆⲆⵠᐃⲆΔΔ: function (a) {
      return --a * a * a + 1;
    },
    ᐃⵠⵠΔⵠ: function (a) {
      if (a < 0.5) {
        return a * 2 * a;
      } else {
        return (4 - a * 2) * a - 1;
      }
    },
    ΔᐃⵠᐃⵠⵠⲆ: function (a) {
      if (a < 0.5) {
        return a * 4 * a * a;
      } else {
        return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
      }
    },
    ⲆⵠⵠΔΔΔΔⲆΔ: function (a) {
      if (a < 0.5) {
        return a * 8 * a * a * a;
      } else {
        return 1 - --a * 8 * a * a * a;
      }
    },
    Ⲇⵠᐃᐃᐃⵠᐃ: function (a) {
      return 1 - --a * a * a * a;
    },
    ᐃΔⵠΔᐃΔᐃ: function (a) {
      return 1 + --a * a * a * a * a;
    },
    ΔᐃΔⵠ: function (b, c, d, e, f, g) {
      this.Ⲇⵠⵠ = b;
      this.ⲆⵠⲆ = c;
      this.max = d;
      this.min = e;
      this.ⵠᐃⵠΔⵠᐃⵠ = f;
      this.ᐃⵠⲆᐃⵠⲆⵠ = g;
      this.ⲆᐃⲆΔᐃ = 0;
      this.ⲆᐃⲆ = function () {
        if (this.Ⲇⵠⵠ) {
          if ((a = this.ⲆⵠⲆ + Hx * this.ⵠᐃⵠΔⵠᐃⵠ) > this.max) {
            this.ⲆⵠⲆ = this.max;
            this.Ⲇⵠⵠ = Ak;
            return Mj;
          }
          this.ⲆⵠⲆ = a;
        } else {
          var a;
          if ((a = this.ⲆⵠⲆ - Hx * this.ᐃⵠⲆᐃⵠⲆⵠ) < this.min) {
            this.ⲆⵠⲆ = this.min;
            this.Ⲇⵠⵠ = sn;
          } else {
            this.ⲆⵠⲆ = a;
          }
        }
      };
      return false;
    },
    ⲆⲆⲆⲆΔ: function (b, c, d, e, f, g) {
      this.ⲆΔᐃᐃⵠ = b;
      this.ⵠⲆᐃⲆᐃ = c;
      this.ΔⵠΔΔΔ = d;
      this.ⲆⵠⵠⲆⲆ = e;
      this.x = f;
      this.ΔⵠΔⲆⲆ = g;
      this.ⵠⵠᐃᐃᐃⲆᐃ = function () {
        this.x = this.ᐃᐃΔⵠᐃᐃΔⵠⵠ;
        this.ⵠⲆᐃⲆᐃ = 0;
      };
      this.ⲆᐃⲆᐃΔ = function (a) {
        if (a !== this.ΔⵠΔⲆⲆ) {
          this.ΔⵠΔⲆⲆ = a;
          this.ⲆⵠⵠⲆⲆ = this.x;
          this.ⵠⲆᐃⲆᐃ = 0;
        }
        if (this.ΔⵠΔⲆⲆ !== this.x) {
          this.ⵠⲆᐃⲆᐃ += Hx;
          if (this.ⵠⲆᐃⲆᐃ > this.ΔⵠΔΔΔ) {
            this.x = this.ΔⵠΔⲆⲆ;
          } else {
            var b = this.ⲆΔᐃᐃⵠ(this.ⵠⲆᐃⲆᐃ / this.ΔⵠΔΔΔ);
            this.x = this.ⲆⵠⵠⲆⲆ + (this.ΔⵠΔⲆⲆ - this.ⲆⵠⵠⲆⲆ) * b;
          }
        }
      };
    },
    ⵠΔΔⲆⲆΔΔ: function (b, c, d, e, f, g, a, i, j) {
      this.ⲆΔᐃᐃⵠ = b;
      this.ⵠⲆᐃⲆᐃ = c;
      this.ΔⵠΔΔΔ = d;
      this.ⲆⵠⵠⲆⲆ = e;
      this.ⵠⵠⲆΔᐃ = f;
      this.x = g;
      this.y = a;
      this.ΔⵠΔⲆⲆ = i;
      this.ⲆΔΔⲆΔΔΔ = j;
      this.ⲆᐃⲆᐃΔ = function (a) {
        if (a.x != this.ΔⵠΔⲆⲆ || a.y != this.ⲆΔΔⲆΔΔΔ) {
          this.ΔⵠΔⲆⲆ = a.x;
          this.ⲆΔΔⲆΔΔΔ = a.y;
          this.ⲆⵠⵠⲆⲆ = this.x;
          this.ⵠⵠⲆΔᐃ = this.y;
          this.ⵠⲆᐃⲆᐃ = 0;
        }
        if (this.ΔⵠΔⲆⲆ != this.x || this.ⲆΔΔⲆΔΔΔ != this.y) {
          this.ⵠⲆᐃⲆᐃ += Hx;
          if (this.ⵠⲆᐃⲆᐃ > this.ΔⵠΔΔΔ) {
            this.x = this.ΔⵠΔⲆⲆ;
            this.y = this.ⲆΔΔⲆΔΔΔ;
          } else {
            var b = this.ⲆΔᐃᐃⵠ(this.ⵠⲆᐃⲆᐃ / this.ΔⵠΔΔΔ);
            this.x = this.ⲆⵠⵠⲆⲆ + (this.ΔⵠΔⲆⲆ - this.ⲆⵠⵠⲆⲆ) * b;
            this.y = this.ⵠⵠⲆΔᐃ + (this.ⲆΔΔⲆΔΔΔ - this.ⵠⵠⲆΔᐃ) * b;
          }
        }
      };
    },
    ΔⲆⵠΔᐃⵠᐃ: function (a) {
      var b = "";
      for (var c = 0; c < a; c++) {
        b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
      }
      return b;
    },
    ⲆⵠᐃⵠΔᐃᐃ: function (a, b) {
      b ||= location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
      if (c == null) {
        return null;
      } else {
        return c[1];
      }
    },
    ΔⲆᐃⲆΔ: function (a) {
      let b = "";
      const c = a.length;
      for (let d = 0; d < c; d++) {
        b += String.fromCharCode(a[d]);
      }
      return b;
    },
    ΔᐃᐃΔⵠΔⲆ: function (a, b) {
      return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ⲆΔⲆ || Pi;
    },
    ΔΔⲆⵠᐃᐃⵠ: function (b, c, d, e, f, g, a, h) {
      if (Math.max(b, f) < Math.min(c, g) && Math.max(d, a) < Math.min(e, h)) {
        return 1;
      } else {
        return 0;
      }
    },
    ᐃᐃΔᐃⵠ: function (a, b, c) {
      return (1 - c) * a + c * b;
    },
    ΔⲆᐃΔⵠⵠΔ: function (a) {
      return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  };
  const Jo = kn;
  Math.sign = Math.sign || function (a) {
    if (a === 0) {
      return 0;
    } else if (a > 0) {
      return 1;
    } else {
      return -1;
    }
  };
  const Mo = 20;
  function Bo(b, c, d) {
    Lj(oh, b, c, d);
    const e = aq(sh[0], sh[1], sh[2], sh[0], sh[1]);
    f = sh[2];
    g = sh[0];
    Pj(oh, f, g);
    aq(sh[0], sh[1], sh[0], sh[1], sh[0]);
    uc(sh[1], sh[0]);
    var f;
    var g;
    return ~(e & 48441) & (e | 48441);
  }
  Math.log10 = Math.log10 || function (a) {
    return Math.log(a) / Math.ⵠⵠΔΔⵠᐃΔⵠᐃ;
  };
  const Eo = 11;
  const Do = 11;
  const Io = 8;
  (function (a) {
    var b = false;
    if (typeof ⵠⵠⲆⵠⵠⲆⲆ == "function" && ⵠⵠⲆⵠⵠⲆⲆ.ΔΔⵠΔⵠᐃᐃᐃⵠ) {
      ⵠⵠⲆⵠⵠⲆⲆ(a);
      b = true;
    }
    if (typeof ᐃΔⲆⵠⲆᐃᐃ === "object") {
      ⵠⲆΔᐃⵠⵠᐃⲆⵠ.exports = a();
      b = ie;
    }
    if (!b) {
      var c = ij.ᐃΔΔⵠ;
      var d = ij.ᐃΔΔⵠ = a();
      d.ᐃⲆⵠΔⲆⵠⲆΔΔ = function () {
        ij.ᐃΔΔⵠ = c;
        return d;
      };
    }
  })(function () {
    function b() {
      for (var a = 0, b = {}; a < arguments.length; a++) {
        var c = arguments[a];
        for (var d in c) {
          b[d] = c[d];
        }
      }
      return b;
    }
    return function a(c) {
      function d(e, f, j) {
        var k;
        if (typeof document != "undefined") {
          if (arguments.length > 1) {
            if (typeof (j = b({
              path: "/"
            }, d.ⵠⵠⲆᐃⵠΔᐃ, j)).expires == "number") {
              var m = new Date();
              m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
              j.expires = m;
            }
            try {
              k = JSON.stringify(f);
              if (/^[\{\[]/.test(k)) {
                f = k;
              }
            } catch (a) { }
            f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
            return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ⲆⲆⲆᐃⲆⵠᐃⵠᐃ ? "; secure" : ""].join("");
          }
          if (!e) {
            k = {};
          }
          for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, g = 0; g < n.length; g++) {
            var p = n[g].split("=");
            var q = p.slice(1).join("=");
            if (q.charAt(0) === "\"") {
              q = q.slice(1, -1);
            }
            try {
              var s = p[0].replace(h, decodeURIComponent);
              q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
              if (this.json) {
                try {
                  q = JSON.parse(q);
                } catch (a) { }
              }
              if (s === e) {
                k = q;
                break;
              }
              if (!e) {
                k[s] = q;
              }
            } catch (a) { }
          }
          return k;
        }
      }
      d.set = d;
      d.get = function (a) {
        return d.call(d, a);
      };
      d.ⲆΔΔΔΔΔΔⵠᐃ = function () {
        return d.apply({
          json: sn
        }, [].slice.call(arguments));
      };
      d.ⵠⵠⲆᐃⵠΔᐃ = {};
      d.remove = function (a, c) {
        d(a, "", b(c, {
          expires: -1
        }));
      };
      d.ⲆⲆⵠΔⵠⲆⵠⲆᐃ = a;
      return d;
    }(function () { });
  });
  const So = 17;
  const Qo = Gn;
  const _o = lj;
  function Fo(b, c, d) {
    const e = ((49526 + b) * 22695477 + 1) % 4294967296;
    const f = ~(c & 49794) & 49794 | ~(c & 49794) & c;
    const g = ~(d & 52262) & 52262 | ~(d & 52262) & d;
    const a = tf(e, f, g, e, f, g);
    Ib(e, f, g, e, f);
    return a ^ 8460;
  }
  const Ro = 16;
  function jo(a) {
    return function (a, b) {
      Ki(oh, a, b);
      const c = Bo(sh[0], sh[1], sh[0]);
      const d = function (b, c, d, e, f, g) {
        ak(oh, b, c, d, e, f, g);
        const a = vh(sh[0], sh[1], sh[2], sh[3], sh[4], sh[5]);
        const h = function (b, c, d, e) {
          Ti(oh, b, c, d, e);
          const f = function (b, c, d, e, f) {
            Sj(oh, b, c, d, e, f);
            const g = No(sh[0], sh[1], sh[2]);
            mo(sh[3], sh[4], sh[0], sh[1], sh[2], sh[3]);
            return g ^ 46046;
          }(sh[0], sh[1], sh[2], sh[3], sh[0]);
          const g = No(sh[1], sh[2], sh[3]);
          return (8 << ((f ^ g) >> 8 & 255)) + (0 << ((f ^ g) >> 16 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) & 255));
        }(sh[0], sh[1], sh[2], sh[3]);
        return (8 << ((a ^ h) >> 24 & 255)) + (0 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) & 255)) + (16 << ((a ^ h) >> 16 & 255));
      }(sh[1], sh[0], sh[1], sh[0], sh[1], sh[0]);
      return ((77 + (c ^ d)) * 8121 + 28411) % 134456;
    }(a, 51513);
  }
  const Lo = 255;
  const Wo = 14;
  const Go = 20;
  function No(a, b, c) {
    Si(oh, a, b, c);
    const d = mf(sh[0], sh[1], sh[2], sh[0], sh[1]);
    mf(sh[2], sh[0], sh[1], sh[2], sh[0]);
    return (d | 26002) & ~(d & 26002);
  }
  function qo(a, b) {
    const c = (a | 40226) & ~(a & 40226);
    const d = ((35183 + b) * 214013 + 2531011) % 4294967296;
    const e = $r(c, d, c, d, c, d);
    Ko(c, d, c, d, c);
    return (e | 51907) & ~(e & 51907);
  }
  const Oo = 3;
  const Ho = 256;
  const Uo = 5;
  const Yo = 256;
  function Ko(b, c, d, e, f) {
    const i = (b | 29728) & ~(b & 29728);
    const a = ~(c & 10072) & (c | 10072);
    const j = ~(d & 32742) & d | ~(d & 32742) & 32742;
    const k = ~(e & 36656) & (e | 36656);
    const h = ~(f & 56752) & f | ~(f & 56752) & 56752;
    const g = rx(i, a, j, k, h, i);
    $r(a, j, k, h, i, a);
    return g ^ 1610;
  }
  var Vo = document.getElementById("game_canvas");
  const Xo = 12;
  var Zo = Vo.getContext("2d");
  var $o = Vo.width;
  const bq = 256;
  const ia = 6;
  const ta = 18;
  const na = 3;
  const oa = 7;
  const aa = 12;
  const ra = 1;
  var sa = Vo.height;
  const cq = ao;
  const la = 11;
  var ua = Vo.width / 2;
  var dq = Vo.height / 2;
  var eq = {
    x: ua,
    y: dq
  };
  var fq = 1;
  var gq = 1;
  var hq = -1;
  const iq = 9;
  var Ca = "J" + Fq;
  var jq = "S" + cr;
  const kq = 16;
  var za;
  var lq;
  var mq = ij;
  var Pa = (Ia = "O") + "N";
  const nq = re;
  var Aa = mq;
  const xa = 255;
  const Ja = sn;
  const Ma = Pi;
  jq = "N";
  var Ba;
  var oq = "J";
  const pq = 17;
  var Ia = "O" + Fq;
  const qq = 5;
  const Qa = 10;
  const _a = 13;
  const Fa = 0;
  const Ra = 100;
  const ja = 3;
  const La = 1;
  var Wa = Aa;
  const Ga = 13;
  const Na = 20;
  const qa = 19;
  const Oa = 15;
  const Ha = 6;
  var Ua;
  const rq = 0;
  const Ka = 12;
  const Va = lj;
  const Xa = 8;
  const Za = 14;
  const $a = ae;
  const sq = 7;
  var tq = Wa;
  Pa = "N" + undefined;
  const uq = 9;
  const vq = 2;
  var wq = tq;
  const xq = 4;
  const yq = 16;
  var zq;
  var Aq;
  const Bq = 18;
  var Cq = wq;
  const Dq = 5;
  var Eq;
  var Fq;
  var Gq = ij.console;
  Gq.log = Gq.info = Gq.error = Gq.warn = Gq.debug = Gq.ⲆᐃⵠΔᐃⲆⵠΔⲆ = Gq.trace = Gq.time = Gq.timeEnd = function () { };
  const Hq = 19;
  const Iq = De;
  const Jq = 5;
  var Kq = Cq;
  const Lq = 255;
  var Mq;
  const Nq = 100;
  const Oq = Pi;
  function Pq(a) {
    const b = function () {
      for (let a = 0; a < 5; a++) {
        ij.addEventListener("click", function () {
          b();
        });
      }
    };
    b();
  }
  const Qq = 5;
  const Rq = 11;
  var Sq = Kq;
  oq = "O";
  const Tq = 0;
  const Uq = 14;
  const Vq = 10;
  const Wq = 100;
  const Xq = 6;
  const Yq = 5;
  var Zq;
  var $q;
  var _q = Sq = Kq;
  const ar = 15;
  var br = _q;
  var cr = "J" + (Zq = "S");
  const er = 16;
  const fr = 20;
  const ir = 5;
  function jr(a) {
    var b = new Image();
    b.src = a.toDataURL("image/png");
    b.width = a.width;
    b.height = a.height;
    b.ⲆᐃⲆⵠⵠⲆⵠ = 1;
    return b;
  }
  Vo.oncontextmenu = function () {
    return Pi;
  };
  Ca = "J";
  const kr = 100;
  const lr = zo;
  const mr = 17;
  const nr = Bk;
  const or = 8;
  const pr = 4;
  const rr = 100;
  lq = cr + (oq += Ca = jq);
  const sr = 10;
  Ia = Pa;
  const tr = 3;
  Pa = Fq;
  Fq = cr;
  const ur = 12;
  Ia = cr;
  const wr = 16;
  Ua = zq = cr + oq;
  jq = oq + Ca;
  const xr = 2;
  const yr = 17;
  const Ar = 1;
  Aq = za = lq;
  Ia = cr + oq;
  const Br = 9;
  const Cr = 13;
  Eq = lq;
  Pa = cr + oq;
  const Dr = 6;
  Mq = Ba = za;
  const Er = 7;
  oq = Fq = cr;
  const Fr = 255;
  Zq = lq;
  const Gr = 14;
  const Hr = 2;
  const Ir = Jo;
  $q = za;
  Ca = Ia;
  const Kr = 16;
  var Lr = ij.devicePixelRatio || 1;
  const Mr = 18;
  var Nr = Zo.ⲆⲆᐃᐃⲆᐃΔΔⲆ || Zo.ΔⵠΔΔⲆⵠⲆⵠᐃ || Zo.ⵠᐃΔΔᐃⵠᐃⲆᐃ || Zo.ΔᐃⵠᐃᐃᐃΔΔᐃ || Zo.ⲆΔⲆⲆⵠΔⵠΔᐃ || 1;
  function Or() {
    if (ij.innerWidth != Vo.width) {
      Vo.width = ij.innerWidth;
      $o = Vo.width;
      ua = Vo.width / 2;
    }
    if (Vo.height != ij.innerHeight) {
      Vo.height = ij.innerHeight;
      sa = Vo.height;
      dq = Vo.height / 2;
    }
    eq = {
      x: ua,
      y: dq
    };
    var a = Vo.width;
    var b = Vo.height;
    gq = hq === -1 ? Lr / Nr : hq;
    Vo.width = gq * a;
    Vo.height = b * gq;
    Vo.style.width = a + "px";
    Vo.style.height = b + "px";
    Zo.scale(gq, gq);
    if (Ax) {
      Ax.ⲆⲆΔ.ⲆⵠΔΔΔⵠⵠ = a;
      Ax.ⲆⲆΔ.ⵠΔⲆⲆⵠΔⵠ = b;
    }
    if (Ix.ᐃⲆⵠᐃᐃ) {
      Ix.ⲆᐃⲆ();
    } else if (yx.ᐃⲆⵠᐃᐃ) {
      yx.ⲆᐃⲆ();
    } else if (Cx.ᐃⲆⵠᐃᐃ) {
      Cx.ⲆᐃⲆ();
    } else if (Bx.ᐃⲆⵠᐃᐃ) {
      Bx.ⲆᐃⲆ();
    }
  }
  const Pr = $a;
  var Rr = document.getElementById("game_body");
  Rr.ondragstart = function () {
    return Cj;
  };
  Rr.ondrop = function () {
    return D;
  };
  const Sr = 6;
  Rr.onresize = Or;
  (function () {
    var b = 0;
    for (var a = ["ms", "moz", "webkit", "o"], c = 0; c < a.length && !ij.requestAnimationFrame; ++c) {
      ij.requestAnimationFrame = ij[a[c] + "RequestAnimationFrame"];
      ij.cancelAnimationFrame = ij[a[c] + "CancelAnimationFrame"] || ij[a[c] + "CancelRequestAnimationFrame"];
    }
    ij.requestAnimationFrame ||= function (c, d) {
      var e = new Date().getTime();
      var f = Math.max(0, 16 - (e - b));
      var g = ij.setTimeout(function () {
        c(e + f);
      }, f);
      b = e + f;
      return g;
    };
    ij.cancelAnimationFrame ||= function (a) {
      clearTimeout(a);
    };
  })();
  const Tr = 20;
  const Ur = zo;
  function Vr(b, c) {
    const d = (1 + (b + 47889) * 22695477) % 4294967296;
    const e = (0 << (c >> 8 & 255)) + (16 << (c & 255)) + (8 << (c >> 24 & 255)) + (24 << (c >> 16 & 255));
    const f = qo(d, e);
    const g = function (b, c, d, e, f) {
      const g = (d + 28227) % 65531;
      const a = ((25986 + e) * 22695477 + 1) % 4294967296;
      const h = ~(f & 167) & (f | 167);
      return (1 + (44917 + (Mb(~(b & 10416) & 10416 | ~(b & 10416) & b, ~(c & 9377) & c | ~(c & 9377) & 9377) ^ Ao(g, a, h))) * 22695477) % 4294967296;
    }(d, e, d, e, d);
    return (0 << ((f ^ g) & 255)) + (8 << ((f ^ g) >> 16 & 255)) + (24 << ((f ^ g) >> 8 & 255)) + (16 << ((f ^ g) >> 24 & 255));
  }
  const Wr = 20;
  const Xr = 10;
  function Yr(b, c, d, e, f, g) {
    const a = ~(b & 16933) & (b | 16933);
    const i = (12345 + (c + 32800) * 1103515245) % 2147483648;
    const j = ~(g & 8773) & (g | 8773);
    return ((36109 + (on(a, i, ((48365 + d) * 2147483629 + 2147483587) % 2147483647, ~(e & 25771) & 25771 | ~(e & 25771) & e, ((f + 45434) * 214013 + 2531011) % 4294967296) ^ function (b, c, d) {
      const e = (1 + (b + 43568) * 22695477) % 4294967296;
      const f = ((60686 + c) * 1103515245 + 12345) % 2147483648;
      const g = ((31118 + d) * 2147483629 + 2147483587) % 2147483647;
      const a = Ik(e, f);
      Jw(g, e, f);
      return a ^ 12623;
    }(j, a, i))) * 2147483629 + 2147483587) % 2147483647;
  }
  const Zr = re;
  function $r(b, c, d, e, f, i) {
    const a = (8 << (b >> 8 & 255)) + (24 << (b & 255)) + (0 << (b >> 16 & 255)) + (16 << (b >> 24 & 255));
    const j = (8 << (c >> 24 & 255)) + (16 << (c >> 16 & 255)) + (0 << (c >> 8 & 255)) + (24 << (c & 255));
    const k = ~(d & 39325) & (d | 39325);
    const h = (e | 28011) & ~(e & 28011);
    const g = (24 << (i >> 16 & 255)) + (0 << (i >> 0 & 255)) + (16 << (i >> 8 & 255)) + (8 << (i >> 24 & 255));
    return (5323 + (fx(a, j, k, h, (24 << (f >> 16 & 255)) + (0 << (f & 255)) + (8 << (f >> 24 & 255)) + (16 << (f >> 8 & 255))) ^ on(g, a, j, k, h))) % 65371;
  }
  const as = 19;
  const bs = 11;
  const cs = 8;
  const ds = 17;
  const es = Ak;
  function fs(a, b) {
    Yj(oh, a, b);
    const c = mo(sh[0], sh[1], sh[0], sh[1], sh[0], sh[1]);
    mo(sh[0], sh[1], sh[0], sh[1], sh[0], sh[1]);
    return c ^ 48599;
  }
  function hs(a, b) {
    const c = a ^ 25274;
    const d = (b | 34615) & ~(b & 34615);
    const e = fx(c, d, c, d, c);
    Ib(d, c, d, c, d);
    return ~(e & 51784) & (e | 51784);
  }
  function is(c, d, e, f, i, j) {
    const a = (24 << (c >> 8 & 255)) + (16 << (c >> 24 & 255)) + (8 << (c >> 16 & 255)) + (0 << (c & 255));
    const k = ~(d & 36110) & 36110 | ~(d & 36110) & d;
    const m = ~(e & 21414) & 21414 | ~(e & 21414) & e;
    const h = ~(f & 35340) & f | ~(f & 35340) & 35340;
    const g = ~(i & 36746) & i | ~(i & 36746) & 36746;
    const l = j ^ 35563;
    const n = on(a, k, m, h, g);
    Yr(l, a, k, m, h, g);
    return ~(n & 39055) & 39055 | ~(n & 39055) & n;
  }
  const ks = kn;
  const ls = 0;
  var js = navigator.language || navigator.userLanguage;
  const ms = 3;
  var ns = -new Date().getTimezoneOffset() / 60;
  var os = "Europe";
  const ps = 15;
  const qs = 100;
  const rs = 4;
  const ss = 17;
  const ts = String.fromCharCode;
  const us = ts(101);
  const vs = ts(118);
  const ws = ts(97);
  const xs = ts(108);
  var ys = "South America";
  var eh = os;
  if (ns >= -2 && ns <= 2) {
    eh = os;
  } else if (ns > 2 && ns <= 5) {
    eh = "Russia";
  } else if (ns > 5 && ns <= 9) {
    eh = "Asia";
  } else if (ns > 9) {
    eh = "Australia";
  } else if (ns >= -5 && ns < -2) {
    eh = js === "pt-BR" || js === "pt-br" || js === "pt" || js === "pt-pt" ? ys : "North America";
  } else if (ns < -5) {
    eh = js === "pt-BR" || js === "pt-br" || js === "pt" || js === "pt-pt" ? ys : "West America";
  }
  const zs = 5;
  function th(a, b) {
    Jj(oh, a, b);
    return ((193 + (function (a, b) {
      lk(oh, a, b);
      const c = function (a, b) {
        Gj(oh, a, b);
        const c = kb(sh[0], sh[1], sh[0], sh[1]);
        kb(sh[0], sh[1], sh[0], sh[1]);
        return ~(c & 28420) & 28420 | ~(c & 28420) & c;
      }(sh[0], sh[1]);
      fs(sh[0], sh[1]);
      return ~(c & 23369) & c | ~(c & 23369) & 23369;
    }(sh[0], sh[1]) ^ fs(sh[0], sh[1]))) * 8121 + 28411) % 134456;
  }
  const nh = 1;
  let oh;
  const As = 6;
  const rh = es;
  let sh;
  const Bs = 255;
  const gh = ok;
  const lh = 15964436;
  const uh = 15964436 .ΔᐃΔⵠΔᐃᐃⲆΔ;
  const bh = `const ΔΔᐃⵠⵠΔΔ = (typeof ⲆⲆⵠΔⵠΔΔⲆΔ === "${uh}") ? 1 : 0; return ΔΔᐃⵠⵠΔΔ;`;
  ok = async function () {
    oh = ye(Wj(11));
    sh = Ck(oh);
    if (gh) {
      gh();
    }

    await ij.gapi.load("auth2", ky);
  };
  const dh = 14;
  var Wk = {
    ⲆⲆᐃⵠⲆⵠᐃ: function (a) {
      var b = 2147483648;
      var c = a || Math.floor(Math.random() * (b - 1));
      this.ⵠΔⲆΔⲆ = function (a) {
        c = a || Math.floor(Math.random() * (b - 1));
      };
      this.get = function () {
        return (c = (c * 1103515245 + 12345) % b) / b;
      };
    }
  };
  function vh(b, c, d, e, f, g) {
    ck(oh, b, c, d, e, f, g);
    const a = ax(sh[0], sh[1], sh[2], sh[3]);
    const h = Bo(sh[4], sh[5], sh[0]);
    return (0 << ((a ^ h) & 255)) + (8 << ((a ^ h) >> 16 & 255)) + (24 << ((a ^ h) >> 8 & 255)) + (16 << ((a ^ h) >> 24 & 255));
  }
  function mh(a, b) {
    ik(oh, a, b);
    var c;
    var d;
    return ((32 + ((c = sh[0], d = sh[1], ri(oh, c, d), ((126 + (uc(sh[0], sh[1]) ^ vh(sh[0], sh[1], sh[0], sh[1], sh[0], sh[1]))) * 75 + 74) % 65537) ^ ax(sh[0], sh[1], sh[0], sh[1]))) * 48271 + 0) % 2147483647;
  }
  var ch = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
  const ph = xj;
  var Ch = 0;
  let Cs = {
    ⵠⵠΔᐃⵠ: ["#133A2B", "#042b30"],
    ᐃΔᐃⲆⵠⵠⵠᐃⵠ: ["#EBF2F0", "#136167"],
    ᐃⵠⵠⵠⲆᐃΔ: ["#4EB687", "#187484"],
    ᐃⲆᐃᐃΔΔΔ: ["#664516", "#13474C"],
    ᐃΔⵠᐃⲆⵠⲆ: ["#FCEFBB", "#0F4D48"],
    ⲆΔΔᐃⵠᐃᐃ: ["#C1AA7E", "#0F423D"],
    ⵠΔΔᐃᐃⲆⲆ: ["#594837", "#163A3A"],
    ⲆⵠⵠΔΔⵠᐃ: ["#A5D6D6", "#539CA0"],
    ᐃⲆΔⵠᐃ: ["#0B6A84", "#09373F"],
    ⵠΔΔΔΔⲆⵠ: ["#2A8B9B", "#0F464C"],
    ᐃᐃΔⵠΔΔᐃ: ["#A9D6D3", "#115E60"],
    ⲆΔⲆⵠΔⵠΔ: ["#ECF7F9", "#539CA0"],
    ΔⲆⲆΔᐃⲆⵠ: ["#FFF", "#FFF"],
    ΔⲆⲆᐃⵠᐃΔ: ["#FFF", "#FFF"],
    ΔⵠΔⲆⲆΔⲆ: ["#1C9BA4", "#00272F"],
    ⵠⵠⵠΔⲆ: ["#2D2017", "#031C1E"],
    ⵠΔⵠ: 0,
    ⲆⲆⵠ: 1,
    ⵠΔΔⲆᐃΔⲆⲆⲆ: 2300,
    ⵠⲆΔⵠΔⲆᐃᐃΔ: 2290,
    ΔⲆⲆⵠⵠΔⵠ: 34,
    ⲆΔΔⲆⲆⲆⲆ: 5,
    ⵠⲆΔⵠⵠΔⵠ: 68,
    ⲆⵠⵠΔⵠⵠᐃ: 34,
    ᐃᐃⵠⲆΔᐃⵠ: 5,
    ΔⵠⵠⵠᐃⲆⲆ: 1,
    ΔΔⵠⲆΔᐃᐃ: 0.6,
    ᐃᐃᐃⵠⲆᐃᐃ: 0.25,
    ⵠΔⲆᐃᐃᐃᐃ: 50,
    ΔⵠⵠⲆⵠΔⲆ: 10,
    ΔⵠⲆᐃᐃΔⲆ: 75,
    ⲆⲆΔΔⲆΔⲆ: 20,
    ᐃⲆⲆΔΔⵠΔ: 5,
    ⵠΔᐃᐃⵠ: 0,
    ΔΔΔΔΔ: 1,
    ΔᐃⲆᐃⵠ: 2,
    ⲆⲆⵠΔΔ: 3,
    ⲆⵠⵠΔΔ: 4,
    ΔᐃⲆⵠⲆ: 5,
    ⵠΔΔⲆⲆ: 6,
    ΔᐃᐃⵠⲆ: 7,
    ΔΔⵠᐃⲆ: 8,
    ⲆΔⵠⵠᐃ: 9,
    ⵠⲆΔΔΔ: 10,
    ⵠⲆⲆΔⵠ: 11,
    ⲆⲆⵠΔⲆ: 12,
    ⲆΔΔⵠⵠ: 13,
    ᐃⵠᐃΔΔ: 14,
    ΔⵠⵠⵠΔ: 15,
    ⲆᐃⵠⲆⲆ: 16,
    ΔΔΔⲆᐃ: 17,
    ΔᐃⵠⲆᐃ: 18,
    ᐃᐃⵠⵠⵠ: 19,
    ᐃᐃⵠⲆᐃ: 20,
    ΔⲆΔΔⵠ: 21,
    ⲆΔⵠⵠⲆ: 22,
    ⲆⵠᐃΔⵠ: 23,
    ΔⲆⲆⵠΔ: 24,
    ᐃΔΔΔᐃ: 25,
    ΔᐃⵠⵠⲆ: 26,
    ⲆⲆᐃⵠⲆ: 27,
    ᐃᐃΔⲆᐃ: 28,
    ⵠᐃⵠⲆ: 29,
    ᐃⵠⲆⲆΔ: 30,
    ⲆⵠⲆᐃΔ: 31,
    ⲆⵠΔⲆⲆ: 32,
    ⵠᐃᐃᐃⲆ: 33,
    Δᐃᐃᐃⵠ: 34,
    ⲆΔΔᐃΔ: 35,
    Ⲇᐃᐃᐃᐃ: 36,
    ⵠΔⵠᐃᐃ: 37,
    ⲆᐃⵠΔⵠ: 38,
    ⵠⲆΔΔⵠ: 39,
    ⵠⲆⵠⲆⲆ: 40,
    ᐃⲆⲆᐃΔ: 41,
    ⲆⲆᐃΔⲆ: 42,
    ΔΔΔⲆΔ: 43,
    ΔⲆΔΔⲆ: 44,
    ⲆᐃΔⵠⲆ: 45,
    ΔΔΔᐃΔ: 46,
    ᐃΔⵠⵠΔ: 47,
    ᐃⵠⲆⵠΔ: 48,
    ΔⲆⵠⵠΔ: 49,
    ⲆᐃⲆⲆᐃ: 50,
    ᐃⲆᐃⲆᐃ: 51,
    ⵠⵠΔᐃΔ: 52,
    ᐃⲆΔⵠⵠ: 53,
    ⲆⵠⵠⲆᐃ: 54,
    ΔΔᐃⲆᐃ: 55,
    ⵠⵠΔⵠᐃ: 56,
    ΔᐃⲆΔⲆ: 57,
    ⲆⵠⲆΔⵠ: 58,
    ⵠⵠΔⵠⵠ: 59,
    ᐃⲆⲆⵠΔ: 60,
    ΔⲆⲆᐃⲆ: 61,
    ΔᐃⵠΔΔ: 62,
    ⵠΔⲆⵠᐃ: 63,
    ⵠᐃΔⲆᐃ: 64,
    ⲆⲆΔᐃΔ: 65,
    ΔᐃⵠᐃΔ: 66,
    ⲆΔⵠⲆᐃ: 67,
    ΔⲆᐃᐃᐃ: 68,
    ⲆᐃΔⲆᐃ: 69,
    ΔΔⵠⲆΔ: 70,
    ᐃΔⲆᐃⵠ: 71,
    ⵠΔⲆⲆΔ: 72,
    ᐃⲆⲆⵠⵠ: 73,
    ΔⵠΔⵠⲆ: 74,
    ⵠᐃΔⵠΔ: 75,
    ⵠᐃΔΔΔ: 76,
    ᐃᐃⲆⵠΔ: 77,
    ⵠⲆⲆᐃΔ: 78,
    ⵠⵠⲆΔΔ: 79,
    ᐃⲆΔΔⵠ: 80,
    ᐃΔⲆΔΔ: 81,
    ᐃΔΔΔⲆ: 82,
    ⵠΔⲆᐃⲆ: 83,
    ΔΔᐃΔΔ: 84,
    ⲆᐃⲆⵠΔ: 85,
    ⵠⵠΔⲆⲆ: 86,
    ᐃⲆⲆⲆⵠ: 87,
    ΔⵠⲆΔΔ: 88,
    ᐃΔⵠΔᐃ: 89,
    ΔⲆⵠⵠⲆ: 90,
    ΔⲆᐃⵠⵠ: 91,
    ⲆⲆⵠⵠΔ: 92,
    ⵠᐃⵠⵠⵠ: 93,
    ⵠᐃⲆᐃΔ: 94,
    ᐃΔᐃΔΔ: 95,
    ᐃᐃⵠΔⵠ: 96,
    ⲆⲆⵠΔᐃ: 97,
    ΔⲆⵠⲆⵠ: 98,
    ⲆⲆΔⵠΔ: 99,
    ᐃⲆΔΔⵠⲆⵠⲆⵠ: 100,
    ᐃⵠⲆΔΔ: 101,
    ⲆⲆᐃⲆΔ: 102,
    ᐃⲆΔΔΔ: 103,
    ⵠⵠᐃⲆⲆ: 104,
    ⵠᐃⵠⲆⵠ: 105,
    ⵠᐃᐃΔΔ: 106,
    ⵠⲆⵠⲆΔ: 107,
    ΔⲆᐃⲆⲆ: 108,
    ΔᐃⲆⵠ: 109,
    ⲆΔᐃⵠⲆ: 110,
    ᐃΔᐃⲆ: 111,
    ⲆᐃⲆᐃ: 112,
    ⵠⵠⲆⵠⵠⵠⲆ: 113,
    ᐃⵠⵠⲆᐃ: 114,
    ⵠⵠⲆΔⵠᐃⵠ: 115,
    ᐃⵠΔⵠⵠ: 116,
    ᐃⲆΔⲆⵠ: 117,
    ΔᐃⲆⲆᐃΔⲆ: 118,
    ⵠΔᐃΔᐃΔⲆ: 119,
    ⲆᐃⵠⵠⲆ: 120,
    ⲆΔΔᐃ: 121,
    ᐃⲆⲆΔⲆ: 122,
    ⲆⲆⲆⵠⲆ: 123,
    ΔΔⵠⲆᐃⵠⲆ: 124,
    ΔⵠᐃⲆⲆ: 125,
    ⵠᐃᐃΔⵠ: 126,
    ⲆⵠⲆⲆΔ: 127,
    ⲆᐃΔᐃᐃ: 128,
    ⵠⵠⵠᐃᐃ: 129,
    ⲆⵠΔᐃⲆ: 130,
    ΔⲆⵠᐃⲆ: 131,
    ΔᐃⲆⵠᐃ: 132,
    ΔᐃⵠΔⵠ: 133,
    ⵠⵠⵠⵠᐃ: 134,
    ᐃⵠΔᐃⲆ: 135,
    ⵠⲆᐃⵠⵠ: 136,
    ᐃⵠⵠΔΔ: 137,
    ΔⵠΔᐃᐃ: 138,
    Δⵠⵠⵠᐃ: 139,
    ⵠⵠⵠⵠⵠᐃᐃ: 140,
    ΔⵠᐃΔΔ: 141,
    ⵠⲆⲆᐃᐃⲆᐃ: 142,
    ⲆᐃΔⲆⲆᐃⵠ: 143,
    ⲆⲆᐃΔΔⲆΔ: 144,
    ΔΔΔⲆΔΔᐃ: 145,
    ΔⲆⵠⲆⲆ: 146,
    ᐃᐃᐃⲆᐃ: 147,
    ⲆⲆⵠⲆΔ: 148,
    ΔⵠᐃᐃⲆ: 149,
    ⲆΔⲆⵠⲆ: 150,
    ⲆⵠⲆᐃᐃ: 151,
    ᐃᐃⲆᐃΔ: 152,
    ⵠΔᐃΔΔ: 153,
    ΔⲆⵠΔⲆ: 154,
    ᐃΔⲆᐃΔ: 155,
    ⵠⵠᐃΔΔ: 156,
    ⵠⲆⲆΔⲆ: 157,
    ᐃⵠΔⲆᐃ: 158,
    ᐃᐃⲆΔⲆ: 159,
    ⲆⲆᐃⵠΔ: 160,
    ⲆⵠⵠᐃⲆ: 161,
    ΔⵠⵠⲆΔ: 162,
    ΔᐃΔⵠⵠ: 163,
    ᐃᐃᐃᐃᐃ: 164,
    ΔⲆΔᐃⵠ: 165,
    ᐃⲆⲆΔⵠΔᐃ: 166,
    ᐃⵠᐃⲆΔ: 167,
    ᐃⵠⲆΔⵠ: 168,
    ⵠⵠⵠᐃΔ: 169,
    ⵠΔΔⵠΔ: 170,
    ᐃⲆⲆⲆΔᐃⲆ: 171,
    ΔⲆᐃⵠⵠⵠⵠ: 172,
    ⲆΔⲆΔΔΔⲆ: 173,
    ΔΔⲆⲆⲆ: 174,
    ⲆΔΔⵠΔⵠΔ: 175,
    ᐃⵠΔΔΔⵠⵠ: 176,
    ᐃⵠΔⲆⲆΔⲆ: 177,
    ⵠⲆΔΔⵠⲆⵠ: 178,
    ΔᐃᐃⲆⵠⵠᐃ: 179,
    ΔⲆⵠᐃⵠΔⵠ: 180,
    ΔΔᐃⲆⵠᐃⲆ: 181,
    ΔΔΔⵠⵠᐃⲆ: 182,
    ΔᐃΔⲆⲆ: 183,
    ⵠⵠᐃⲆΔ: 184,
    ᐃⵠⵠⵠⵠ: 185,
    ⵠⵠⵠⲆᐃ: 186,
    ⲆⲆΔΔΔ: 187,
    ΔΔΔᐃⲆΔΔ: 188,
    ΔⲆᐃⲆᐃ: 189,
    ⲆᐃΔⵠᐃ: 190,
    ⲆΔⲆⵠⵠⵠᐃ: 191,
    ⲆⲆⵠΔⵠ: 192,
    ΔⲆᐃⲆᐃⵠΔ: 193,
    ᐃᐃⵠⵠⲆ: 194,
    ⵠΔⲆⲆⲆ: 195,
    ᐃⵠᐃⲆΔⵠⵠ: 196,
    ⲆᐃⵠᐃⲆⲆⵠ: 197,
    ⲆⵠᐃⲆⲆ: 198,
    ΔⲆⲆⲆᐃ: 199,
    ᐃᐃᐃΔᐃⲆᐃ: 200,
    ⲆᐃᐃΔᐃ: 201,
    ⲆᐃⲆⲆ: 202,
    ⲆᐃᐃΔⲆ: 203,
    ᐃᐃᐃΔᐃⵠⵠ: 204,
    ⲆᐃᐃᐃΔ: 205,
    ⲆⵠⵠⵠᐃΔⲆ: 206,
    ⵠⲆⵠΔⲆ: 207,
    ᐃⵠΔᐃᐃⵠΔ: 208,
    ⵠⲆⵠΔΔ: 209,
    ⲆᐃᐃⵠⲆⲆⲆ: 210,
    ⵠΔⵠⵠΔⵠΔ: 211,
    ⲆΔᐃΔᐃ: 212,
    ⲆΔΔⵠΔ: 213,
    ⵠⵠΔⲆΔ: 214,
    ⲆᐃⵠΔΔ: 215,
    ⵠⵠᐃᐃΔ: 216,
    ᐃⲆⵠⲆⲆ: 217,
    ⵠⲆΔⲆⵠ: 218,
    ΔΔⵠⵠΔ: 219,
    ⲆⵠΔⵠⵠ: 220,
    ⲆⲆᐃᐃΔ: 221,
    ⲆⲆᐃᐃⲆ: 222,
    ⲆᐃᐃⵠⲆ: 223,
    ᐃΔⲆᐃⲆ: 224,
    ⵠᐃⵠΔⵠⵠⵠ: 225,
    ᐃᐃⲆⲆᐃΔᐃ: 226,
    ⲆⲆᐃΔΔ: 227,
    ΔⲆⲆⵠΔⵠΔ: 228,
    ΔⵠᐃΔᐃ: 229,
    ΔᐃᐃΔⲆ: 230,
    ⵠⲆⲆⵠᐃ: 231,
    ⲆⵠⲆⵠᐃ: 232,
    ⲆᐃⲆⲆΔ: 233,
    ΔΔⲆΔΔΔᐃ: 234,
    ΔⵠⲆΔᐃ: 235,
    ⵠⵠⵠⵠΔ: 236,
    ᐃⲆᐃΔⵠ: 237,
    ᐃΔΔᐃⵠ: 238,
    ⵠΔᐃΔⵠ: 239,
    ΔᐃᐃΔⵠ: 240,
    ᐃᐃⲆᐃⲆ: 241,
    ΔΔⲆⲆΔ: 242,
    ⵠⵠⵠⵠΔⵠⵠ: 243,
    ᐃᐃⲆΔᐃ: 244,
    ᐃⲆΔᐃⵠ: 245,
    ΔᐃΔΔⲆΔⲆ: 246,
    ΔⲆΔΔΔ: 247,
    ⲆΔΔᐃⲆ: 248,
    ⵠⵠⲆᐃⵠⲆⲆ: 249,
    ᐃᐃⵠⵠΔ: 250,
    ⵠᐃΔΔᐃ: 251,
    ⲆⲆΔΔⵠⵠⲆ: 252,
    ⵠᐃᐃΔⵠⲆⵠ: 253,
    ⲆⵠᐃⲆⲆⵠΔ: 254,
    ᐃΔⵠⲆⵠ: 255,
    ΔᐃᐃΔΔΔⵠ: 256,
    ⲆⲆⵠⲆⲆⲆⲆ: 257,
    ⲆⲆⲆΔⲆᐃⵠ: 258,
    ⲆⵠᐃᐃΔᐃᐃ: 259,
    ΔΔⲆΔⵠ: 260,
    ΔΔᐃⵠⲆᐃⵠ: 261,
    ⵠⲆᐃΔⵠᐃΔ: 262,
    ⵠΔⵠⲆⲆⵠᐃ: 263,
    ⵠΔᐃⵠᐃ: 264,
    ᐃⲆⲆΔⵠΔⲆ: 265,
    ᐃⲆⵠΔⲆᐃᐃ: 266,
    ΔⲆᐃᐃⵠⲆᐃ: 267,
    ᐃⵠᐃᐃⲆΔᐃ: 268,
    ⲆⲆⲆⵠΔⲆⲆ: 269,
    ⵠⲆᐃⵠΔΔᐃ: 270,
    ᐃᐃΔⲆΔᐃⵠ: 271,
    ΔᐃⲆΔⵠⲆⲆ: 272,
    ᐃΔⵠⲆⵠⵠᐃ: 273,
    ΔⲆΔᐃⵠⲆᐃ: 274,
    ΔⵠⲆΔΔᐃᐃ: 275,
    ΔΔⲆⵠⲆᐃᐃ: 276,
    ⲆⵠⲆᐃⵠᐃⲆ: 277,
    ΔⲆⲆᐃⲆΔⲆ: 278,
    ⲆΔᐃΔ: 279,
    ⵠⲆᐃΔⵠ: 280,
    ⵠᐃᐃᐃΔΔΔ: 281,
    ΔᐃⲆᐃᐃΔⵠ: 282,
    ᐃⵠ: 283,
    ᐃΔⵠΔΔᐃΔ: 284,
    ᐃⲆΔΔᐃ: 285,
    ⲆΔΔΔᐃ: 286,
    ᐃⲆΔⵠΔⲆⲆ: 287,
    ⲆⲆΔⵠⲆ: 288,
    ⵠⲆᐃᐃᐃⵠΔ: 289,
    ⵠⲆⵠΔⵠⵠⲆ: 290,
    ΔⵠᐃᐃΔᐃΔ: 291,
    ΔΔᐃΔⵠᐃⲆ: 292,
    ⲆΔΔⲆⲆⵠⵠ: 293,
    ᐃᐃⲆᐃⵠ: 294,
    ⲆⵠⵠⵠⵠΔᐃ: 295,
    ᐃⲆΔⵠΔΔᐃ: 296,
    ⲆⵠᐃᐃᐃᐃΔ: 297,
    ⲆᐃΔᐃⲆⵠⲆ: 298,
    ⲆᐃⵠⲆᐃ: 299,
    ⲆⵠᐃΔΔΔΔ: 300,
    ΔΔⵠⵠⵠΔΔ: 301,
    ⵠⲆⵠⲆΔΔΔ: 302,
    ΔⵠⲆΔΔΔΔ: 303,
    ⵠⲆⵠΔΔΔᐃ: 304,
    Δᐃⵠⵠⵠⵠⵠ: 305,
    ⵠⵠΔⵠⵠⲆⲆ: 306,
    ΔΔⲆΔᐃ: 307,
    ⵠᐃᐃᐃᐃⲆΔ: 308,
    ᐃⵠⵠᐃᐃᐃΔ: 309,
    ⵠⵠⲆⵠⲆΔⵠ: 310,
    ⲆⲆᐃΔⲆⲆⲆ: 311,
    ΔᐃΔΔΔΔᐃ: 312,
    ⵠᐃⲆⲆΔⲆΔ: 313,
    ⲆⲆᐃⲆⵠⲆⲆ: 314,
    ᐃΔⵠⵠᐃⲆⲆ: 315,
    ᐃΔᐃⲆΔΔⲆ: 316,
    ΔⵠΔᐃᐃΔⵠ: 317,
    ᐃΔⲆⲆΔΔΔ: 318,
    ⵠⵠⵠΔΔᐃΔ: 319,
    ᐃⵠⵠᐃⵠΔⵠ: 320,
    ⵠΔΔᐃⲆ: 321,
    ᐃᐃΔΔᐃᐃΔ: 322,
    ᐃⲆᐃᐃᐃⵠⲆ: 323,
    ⲆⲆΔⲆΔΔⵠ: 324,
    ⲆⵠᐃΔᐃΔᐃ: 325,
    ⵠⲆⵠᐃᐃⵠⲆ: 326,
    ᐃⲆᐃⵠΔⲆᐃ: 327,
    ⵠᐃᐃΔᐃΔⵠ: 328,
    ΔΔⵠΔⲆᐃⵠ: 329,
    ᐃᐃⲆⵠⲆΔΔ: 330,
    ⵠΔⵠⲆᐃᐃⵠ: 331,
    ⲆⲆⵠΔⵠΔⵠ: 332,
    ᐃΔᐃⲆᐃᐃⲆ: 333,
    ⲆⲆΔⵠᐃⲆⵠ: 334,
    ⵠⵠΔΔᐃⲆᐃ: 335,
    ΔⲆΔᐃⲆⵠᐃ: 336,
    ⵠⵠᐃΔⵠⵠᐃ: 337,
    ⲆⲆΔⲆΔⵠᐃ: 338,
    ᐃᐃΔΔΔᐃⲆ: 339,
    ⲆⵠΔⵠⵠΔⲆ: 340,
    ΔⵠᐃⲆⲆⲆⵠ: 341,
    ΔⵠΔᐃⵠⵠⵠ: 342,
    ᐃᐃⵠⲆᐃᐃⲆ: 343,
    ⲆⵠⵠΔᐃᐃⲆ: 344,
    ⵠΔⵠᐃⵠΔᐃ: 345,
    ΔΔΔⵠⵠᐃΔ: 346,
    ᐃⵠⲆᐃΔⵠΔⵠⲆ: 347,
    ⵠΔΔᐃⵠΔⵠ: 348,
    ΔⵠⵠᐃⵠᐃⲆ: 349,
    ⲆⵠΔΔⲆⵠⵠ: 350,
    ⵠᐃᐃΔᐃΔᐃ: 351,
    ᐃⵠⲆⲆⲆΔᐃ: 352,
    ΔⵠᐃⵠⲆΔⵠ: 353,
    ΔⵠΔΔⵠΔⵠ: 354,
    ⵠΔⵠⵠᐃΔⲆ: 355,
    ⵠᐃⲆⵠⲆᐃΔ: 356,
    ⵠΔⵠΔΔⲆᐃ: 357,
    ⵠΔΔΔᐃⵠⲆ: 358,
    ΔⵠⵠⲆⵠⲆⲆ: 359,
    ⲆⲆⵠᐃⵠⲆⲆ: 360,
    ΔⲆⲆΔⵠΔⲆ: 361,
    ΔᐃΔⵠΔⲆⲆ: 362,
    ΔⲆⵠⲆΔⵠΔ: 363,
    ᐃⲆⵠᐃⵠⵠⲆ: 364,
    ⲆⲆⲆΔΔⵠⵠ: 365,
    ΔᐃⲆᐃⵠᐃⵠ: 366,
    ᐃⵠⵠⵠⵠⲆⵠ: 367,
    ΔᐃⵠⵠΔⵠΔ: 368,
    ⵠⲆⲆᐃΔⵠⲆ: 369,
    ᐃΔΔᐃⲆᐃᐃ: 370,
    ᐃΔⵠᐃᐃⲆⵠ: 371,
    ⵠⲆⲆΔⵠⵠΔ: 372,
    ᐃΔⵠᐃΔᐃⲆ: 373,
    ⲆⲆⵠⲆΔᐃᐃ: 374,
    ⵠⵠⲆⵠᐃΔⲆ: 375,
    ΔⵠΔᐃᐃⲆⲆ: 376,
    ⲆΔⵠᐃᐃⲆⵠ: 377,
    ᐃⲆᐃᐃⲆΔⵠ: 378,
    ΔⵠⵠΔⵠⵠΔ: 379,
    ⲆⵠΔⵠᐃΔⵠ: 380,
    ᐃΔᐃΔΔᐃⵠ: 381,
    ⵠΔⲆᐃⵠⲆⵠ: 382,
    ⵠⵠᐃᐃⲆᐃᐃ: 383,
    ⵠⲆⲆⵠⲆⵠⲆ: 384,
    ΔᐃΔⵠᐃⲆᐃ: 385,
    ΔᐃⲆᐃᐃⵠᐃ: 386,
    ⵠΔᐃⵠⲆⲆⲆ: 387,
    ⲆⲆΔΔᐃΔⵠ: 388,
    ⲆΔⲆΔⲆΔⲆ: 389,
    ᐃᐃⵠΔⵠⵠᐃ: 390,
    ⲆᐃⲆᐃΔᐃⲆ: 391,
    ΔΔⵠᐃΔⵠᐃ: 392,
    ᐃⲆⵠⵠⲆΔⲆ: 393,
    ᐃⵠΔⲆᐃΔΔ: 394,
    ᐃΔᐃⵠⲆⲆΔ: 395,
    ⵠᐃΔⲆⵠⲆⲆ: 396,
    ᐃᐃᐃᐃΔⵠΔ: 397,
    ⵠᐃΔⲆΔᐃᐃ: 398,
    ⵠΔⵠΔⲆᐃⵠ: 399,
    ᐃΔᐃΔⲆⵠᐃ: 400,
    ⵠΔⵠⵠᐃⵠΔ: 401,
    ⵠⵠᐃⵠⵠᐃΔ: 402,
    ⲆⵠΔⲆᐃΔⲆ: 403,
    ⵠΔΔⲆᐃΔⲆ: 404,
    ⵠΔΔᐃⵠⵠΔ: 405,
    ⵠᐃΔᐃⵠΔᐃ: 406,
    ΔΔⵠᐃⵠᐃⲆ: 407,
    ΔΔΔⲆⵠᐃᐃ: 408,
    ΔᐃⵠⲆⵠⵠⵠ: 409,
    ⵠⵠⵠᐃᐃᐃⲆ: 410,
    ΔⵠΔⲆΔⵠⵠ: 411,
    ⵠⵠᐃⵠᐃⲆⵠ: 412,
    ⵠΔᐃᐃⲆ: 413,
    ⵠⲆⲆᐃⵠⲆⲆᐃⲆ: 414,
    Δᐃᐃᐃᐃ: 415,
    ᐃΔᐃΔⲆ: 416,
    ⲆⵠΔⲆᐃⵠⵠᐃᐃ: 417,
    ⲆᐃᐃⵠⲆⲆⵠ: 418,
    ⲆⵠⵠΔⵠ: 419,
    ΔⵠΔᐃΔΔᐃ: 420,
    ΔⲆᐃᐃⲆΔⲆ: 421,
    ᐃᐃⵠⵠΔᐃⲆ: 422,
    ΔᐃᐃᐃᐃⲆⵠ: 423,
    ΔᐃⲆᐃΔⲆΔ: 424,
    ᐃⲆΔᐃΔΔⵠ: 425,
    ⵠⵠᐃⵠⵠⲆΔ: 426,
    ⲆⵠᐃᐃⲆΔΔ: 427,
    ΔᐃⵠΔΔⵠᐃ: 428,
    ⲆⲆⲆⲆᐃⲆᐃ: 429,
    ⵠᐃᐃⲆⵠΔⵠ: 430,
    ᐃⵠⲆⵠⲆⵠⵠ: 431,
    ΔⲆΔΔΔᐃᐃ: 432,
    ᐃᐃⲆⲆⲆᐃᐃ: 433,
    ⵠⲆᐃᐃⲆⲆⲆ: 434,
    ᐃⵠⵠⵠⵠᐃⲆ: 435,
    ⲆⵠΔᐃΔⲆⵠ: 436,
    ᐃᐃⲆⵠᐃᐃⵠ: 437,
    ⲆΔᐃⲆᐃⲆⵠ: 438,
    ⵠⵠⵠⲆΔᐃⲆ: 439,
    ⲆᐃᐃᐃΔⵠⵠ: 440,
    ⵠᐃⲆᐃᐃⵠᐃ: 441,
    ΔⵠᐃⲆⵠᐃⲆ: 442,
    ⵠⵠΔΔᐃⵠᐃ: 443,
    ⲆⲆⲆⵠΔⲆⲆⲆⲆ: 444,
    ⵠᐃⵠΔⵠ: 445,
    ᐃⵠᐃⲆⵠΔΔ: 446,
    ᐃᐃⲆᐃⵠᐃⲆ: 447,
    ΔΔᐃΔⲆⲆᐃΔⲆ: 448,
    ⵠᐃⲆⲆᐃ: 449,
    ⵠⵠᐃⵠΔ: 450,
    ᐃᐃⵠⲆᐃΔⲆ: 451,
    ⵠⵠᐃⲆΔⵠⲆ: 452,
    ᐃⲆΔⵠᐃⵠⵠ: 453,
    ⵠᐃⵠⲆᐃⵠΔ: 454,
    ᐃⵠⵠᐃⵠᐃⵠ: 455,
    ⵠⵠΔᐃⵠΔΔ: 456,
    ⵠΔᐃᐃΔⵠⲆ: 457,
    ⲆⲆⲆᐃᐃⲆⵠ: 458,
    ⵠᐃⵠΔⲆᐃⵠ: 459,
    ⲆᐃΔⲆⲆⲆΔ: 460,
    ⲆⲆΔⲆΔⲆⲆ: 461,
    ⲆΔᐃⲆᐃᐃⵠ: 462,
    ᐃᐃΔᐃⲆⵠᐃ: 463,
    ⲆΔⵠⲆⲆⵠΔ: 464,
    ⲆᐃΔⵠᐃⵠΔ: 465,
    ⲆΔⵠᐃⲆᐃⲆ: 466,
    ᐃᐃᐃⵠᐃⵠᐃ: 467,
    ⵠⵠⵠΔⵠᐃⵠ: 468,
    ΔⲆⵠΔΔⲆΔ: 469,
    ⲆΔⵠᐃΔⵠΔ: 470,
    ΔΔᐃΔΔᐃΔ: 471,
    ⲆΔⵠⵠⵠᐃᐃ: 472,
    ⲆᐃΔᐃᐃⵠΔ: 473,
    ΔⲆΔⲆⵠⲆⲆ: 474,
    ΔᐃⵠΔⲆⲆⵠ: 475,
    ⲆⲆⲆⵠⲆⲆⵠ: 476,
    ⲆᐃⵠΔΔᐃΔ: 477,
    ᐃⲆⲆⲆΔΔⲆ: 478,
    ΔⲆᐃᐃⲆᐃⲆ: 479,
    ⲆᐃⵠⲆᐃΔⵠ: 480,
    ᐃⵠⲆΔᐃⲆⵠ: 481,
    ⲆΔᐃΔⵠᐃⲆ: 482,
    ΔⵠⲆⲆΔΔⵠ: 483,
    ᐃⵠⵠⵠᐃⲆⵠ: 484,
    ⲆᐃⲆⲆⵠⵠᐃ: 485,
    ⵠΔΔΔⲆΔᐃ: 486,
    ᐃᐃⲆⲆⲆⲆⲆ: 487,
    ⵠᐃⵠⵠΔⲆᐃ: 488,
    ⵠⵠⵠΔΔΔᐃ: 489,
    ⵠⲆᐃⵠΔⵠⲆ: 490,
    ⵠᐃΔⵠⲆᐃΔ: 491,
    ⲆΔΔⲆΔΔᐃ: 492,
    ⲆⵠⵠΔⲆΔᐃ: 493,
    ⵠΔΔΔΔⲆⲆ: 494,
    ᐃⵠΔᐃⲆΔⲆ: 495,
    ⵠⲆΔⵠᐃⵠⵠ: 496,
    ⲆⵠΔⵠᐃΔᐃ: 497,
    ⲆᐃⵠᐃⲆⲆΔ: 498,
    ⵠᐃⲆΔΔⵠⵠ: 499,
    ⲆⵠΔΔⵠⲆⵠ: 500,
    ⵠΔⵠᐃⲆⵠᐃ: 501,
    ᐃᐃΔᐃΔⲆⵠ: 502,
    ⲆⵠΔᐃΔⵠⲆ: 503,
    ΔΔⵠΔⲆΔΔ: 504,
    ⵠΔΔⲆⲆⵠⲆ: 505,
    ᐃⵠΔΔⲆᐃⲆ: 506,
    ⲆᐃΔⵠᐃⵠΔ: 507,
    ⵠⵠΔΔⵠⵠᐃ: 508,
    ⵠΔⵠⵠᐃᐃⵠ: 509,
    ΔΔᐃᐃⵠᐃⵠ: 510,
    ΔⲆᐃⵠᐃⲆⲆ: 511,
    ⲆΔᐃᐃᐃⲆⲆ: 512,
    ΔΔⲆⵠᐃΔᐃ: 513,
    ΔΔⲆᐃΔΔᐃ: 514,
    ᐃⵠᐃᐃⵠΔᐃ: 515,
    ⵠᐃΔΔΔⵠΔ: 516,
    ⲆᐃᐃᐃΔⲆⲆ: 517,
    ΔΔⲆΔⲆΔΔ: 518,
    ΔⲆⵠᐃⵠⵠⲆ: 519,
    ᐃⲆΔⵠᐃⲆᐃ: 520,
    ΔⲆᐃⵠⲆⵠΔ: 521,
    ᐃΔᐃΔⵠᐃⵠ: 522,
    ΔⵠΔⲆᐃᐃΔ: 523,
    ⵠⵠⵠⵠᐃΔᐃ: 524,
    ⲆᐃⲆⲆᐃᐃⲆ: 525,
    ᐃⵠΔⵠⵠΔᐃ: 526,
    ⲆⲆⵠᐃⲆΔⲆ: 527,
    ΔΔΔⵠΔⵠⲆ: 528,
    ⲆⲆᐃⲆⵠᐃᐃ: 529,
    ⲆᐃΔⵠᐃⲆⲆ: 530,
    ΔⲆⵠᐃᐃᐃΔ: 531,
    ᐃⵠⲆᐃΔⵠⲆ: 532,
    ⲆᐃⲆᐃΔⲆΔ: 533,
    ΔⲆᐃⵠᐃⵠᐃ: 534,
    ΔΔⵠⲆᐃᐃⲆ: 535,
    ᐃⵠΔΔᐃᐃΔ: 536,
    ΔⵠΔⵠᐃᐃΔ: 537,
    ⵠⲆᐃᐃⵠᐃᐃ: 538,
    ᐃΔΔⵠᐃᐃᐃⵠΔ: 539,
    ᐃⲆⵠⵠΔⵠⲆ: 540,
    ᐃᐃⲆⵠⲆΔⵠ: 541,
    ⲆⲆΔᐃΔΔⲆ: 542,
    ΔᐃΔᐃΔΔᐃ: 543,
    ΔᐃΔᐃΔΔᐃⲆⵠ: 544,
    POINTS: 545,
    ⵠᐃᐃᐃⵠᐃⵠ: 546,
    ΔᐃⵠⲆᐃⵠᐃ: 547,
    ⲆⵠᐃΔⵠⲆⵠ: 548,
    ᐃⵠᐃⲆⲆⲆΔ: 549,
    ᐃΔᐃΔΔⵠⲆ: 550,
    ⵠⵠⲆⵠΔᐃᐃ: 551,
    ⵠⵠⲆⵠΔⵠᐃ: 552,
    ᐃᐃΔᐃΔΔⵠ: 553,
    ⲆᐃΔΔᐃΔⲆ: 554,
    ᐃⵠⵠᐃΔⲆᐃ: 555,
    ᐃⵠᐃⲆⲆⵠⲆ: 556,
    ΔᐃᐃⵠⲆⲆⵠ: 557,
    ⲆⲆⵠᐃΔⲆⵠ: 558,
    ᐃᐃᐃⲆᐃᐃᐃ: 559,
    ΔΔⵠΔΔⲆᐃ: 560,
    ᐃⵠᐃᐃᐃⵠΔ: 561,
    ⵠΔⵠⵠⵠⵠⲆ: 562,
    ΔᐃⲆⲆΔⲆᐃ: 563,
    ⵠᐃⲆⲆⵠΔΔ: 564,
    ⲆⵠΔΔᐃⵠΔ: 565,
    ⵠⲆΔᐃⲆⲆΔ: 566,
    ᐃⲆⲆΔΔⲆᐃ: 567,
    ΔⲆⲆΔΔᐃⲆ: 568,
    ⲆᐃⲆⲆⲆⵠⲆ: 569,
    ⵠⲆⵠⵠⵠᐃⵠ: 570,
    ᐃᐃᐃᐃⵠⲆᐃ: 571,
    ᐃΔⲆⲆⲆⲆⲆ: 572,
    ᐃⲆΔᐃᐃⵠⵠ: 573,
    ΔⵠⵠΔⵠΔᐃ: 574,
    ᐃΔᐃᐃⵠⵠΔ: 575,
    ⲆᐃⵠⲆΔⲆⵠ: 576,
    ᐃⵠΔᐃΔᐃΔ: 577,
    ᐃᐃⲆΔΔᐃΔ: 578,
    ΔᐃᐃⵠᐃⲆΔ: 579,
    ΔⲆⲆⵠᐃᐃΔ: 580,
    ⵠᐃⲆᐃⵠΔΔ: 581,
    ⵠΔᐃⵠⵠΔⵠ: 582,
    ᐃⲆⲆⲆᐃⲆⲆ: 583,
    ᐃⵠⲆᐃᐃⲆⵠ: 584,
    ΔⵠᐃΔⵠⲆⵠ: 585,
    ΔⲆⵠⲆᐃΔᐃ: 586,
    ᐃᐃⲆΔⲆⵠΔ: 587,
    ⲆⵠΔⵠⵠⲆⲆ: 588,
    ΔΔᐃⲆΔⵠⵠ: 589,
    ⵠⵠΔⵠᐃⲆᐃ: 590,
    ᐃΔⲆⲆⲆᐃΔ: 591,
    ⲆΔⵠᐃᐃΔΔ: 592,
    ⲆⲆΔⲆᐃΔΔⲆⲆ: 593,
    ᐃᐃⲆⵠΔᐃⵠ: 594,
    ⲆΔΔᐃᐃⵠΔᐃΔ: 595,
    ΔⲆᐃⵠⵠΔⵠ: 596,
    ΔⵠΔΔᐃⵠΔⵠᐃ: 597,
    ⵠᐃΔΔᐃⲆⲆΔΔ: 598,
    ⲆⲆᐃⲆᐃⲆⲆⵠΔ: 599,
    ⲆᐃᐃΔᐃⲆⵠᐃⲆ: 600,
    ᐃⵠᐃΔΔⵠΔⵠⲆ: 601,
    ᐃΔΔⵠⵠⵠⵠ: 602,
    ⵠᐃⲆⲆΔ: 603,
    ΔΔᐃⲆᐃⲆⲆ: 604,
    ⵠᐃΔⲆΔΔⵠ: 605,
    ᐃᐃΔⲆᐃⵠⵠ: 606,
    ⵠᐃΔⲆΔᐃⵠⲆⲆ: 607,
    ᐃⲆⲆᐃᐃⵠΔ: 608,
    ᐃᐃᐃΔⲆΔⵠ: 609,
    ΔᐃⵠⵠⵠⵠΔ: 610,
    ᐃᐃΔⵠΔⵠⵠ: 611,
    ⲆⵠᐃⵠⲆⲆΔ: 612,
    ⵠΔΔᐃΔⲆᐃ: 613,
    ⵠⲆⵠᐃᐃⲆⵠ: 614,
    ⵠⲆⵠⲆΔⵠΔ: 615,
    ᐃᐃⲆΔⲆⲆⲆ: 616,
    ΔΔⲆΔⵠΔⲆ: 617,
    ⵠⵠᐃⵠⲆΔⵠ: 618,
    ᐃᐃᐃⲆⲆ: 619,
    ⲆⲆⲆⵠΔ: 620,
    ⵠⲆΔⵠΔ: 621,
    ⲆᐃΔⲆᐃᐃⲆⵠⵠ: 622,
    ⲆⲆᐃⲆᐃⲆⲆ: 623,
    ⵠᐃⵠⵠΔⵠΔ: 624,
    ⵠⲆᐃⲆΔⲆΔ: 625,
    ΔⲆⵠᐃⲆΔΔ: 626,
    ⵠΔΔⲆⵠᐃⵠ: 627,
    ΔᐃⲆᐃᐃⵠⲆ: 628,
    ⵠΔⵠⵠⲆⲆⲆ: 629,
    ⲆᐃⵠⲆⵠΔⵠ: 630,
    ⵠⲆᐃᐃᐃᐃΔ: 631,
    ⲆΔᐃᐃⵠΔᐃ: 632,
    ΔᐃⲆⵠⵠⲆᐃ: 633,
    ᐃΔⵠⵠⲆΔᐃ: 634,
    ⲆΔᐃᐃⵠΔⵠ: 635,
    ᐃⵠΔⵠΔⲆⲆ: 636,
    ΔⲆⵠⲆᐃ: 637,
    ⲆⵠΔᐃᐃΔⲆ: 638,
    ⲆⵠⲆⲆⲆⲆᐃ: 639,
    ᐃΔⲆⲆⲆΔΔ: 640,
    ⵠⵠⲆΔᐃⲆⲆ: 641,
    ⲆⵠΔⵠᐃᐃᐃ: 642,
    ᐃΔΔⲆΔⵠⲆ: 643,
    ⵠᐃᐃᐃⲆⲆΔ: 644,
    ᐃⲆΔᐃΔⵠΔ: 645,
    ⲆΔᐃΔᐃⵠᐃ: 646,
    ⵠⲆᐃⵠΔⲆⵠ: 647,
    ⵠⲆⲆΔΔⵠⵠ: 648,
    ⵠᐃⵠⵠᐃⵠᐃ: 649,
    ΔⲆⵠⵠⵠⲆΔ: 650,
    ⲆⵠΔⲆΔᐃⲆ: 651,
    ᐃΔⲆᐃΔΔⲆ: 652,
    ᐃⵠᐃΔⵠⵠΔ: 653,
    ⵠⵠΔⲆⵠΔⵠ: 654,
    ⵠᐃⵠⵠⲆⲆᐃ: 655,
    ⲆΔΔᐃᐃᐃΔ: 656,
    ᐃⵠᐃᐃΔΔᐃ: 657,
    ⲆⵠΔⲆΔⲆⵠ: 658,
    ⵠⵠᐃⲆⲆᐃⲆ: 659,
    ΔⲆⵠⵠΔᐃⲆ: 660,
    ⲆⲆⲆΔᐃⵠΔ: 661,
    ⵠⵠᐃⲆΔᐃⲆ: 662,
    ⵠⲆⵠᐃⵠᐃⵠ: 663,
    ΔⲆⵠᐃⵠⲆΔ: 664,
    ᐃⲆⵠΔᐃⲆⲆ: 665,
    ᐃᐃΔΔⲆᐃⵠ: 666,
    ΔⵠΔⲆⵠⵠⵠ: 667,
    ⵠΔᐃⵠⲆⵠⲆ: 668,
    ⲆⲆⵠⵠⲆΔᐃ: 669,
    ⲆⲆᐃⵠⵠⵠΔ: 670,
    ⵠⵠᐃᐃΔⵠᐃ: 671,
    ΔᐃᐃⵠΔⲆⲆ: 672,
    ΔⵠΔᐃⲆ: 673,
    ΔΔⲆΔⲆⲆᐃ: 674,
    ᐃⲆΔⲆᐃᐃⵠ: 675,
    ᐃⲆⲆᐃⵠ: 676,
    ᐃᐃⵠᐃⵠᐃΔⵠⲆ: 677,
    ᐃΔⲆᐃΔⲆΔ: 678,
    ᐃⵠⲆᐃᐃ: 679,
    ΔⲆᐃⵠᐃⲆⵠ: 680,
    ⵠⲆⵠⵠⲆΔⵠ: 681,
    ⲆⲆⲆⵠⵠΔⲆ: 682,
    ᐃⲆⲆⲆⵠᐃΔ: 683,
    ΔᐃᐃᐃⲆⲆⵠ: 684,
    ᐃⵠΔΔⲆⲆⲆ: 685,
    ᐃⲆⵠⲆᐃⲆᐃ: 686,
    ᐃᐃᐃⵠᐃⵠΔ: 687,
    ᐃⵠⵠⲆⲆⲆⵠ: 688,
    ᐃΔΔⲆΔᐃΔ: 689,
    ⵠⲆⲆⲆΔΔⲆ: 690,
    ⲆΔᐃΔΔ: 691,
    ⵠⵠᐃⵠᐃ: 692,
    ᐃⵠⵠⲆⵠ: 693,
    ᐃⵠⵠᐃⲆ: 694,
    ᐃⲆΔᐃⲆ: 695,
    ΔⲆΔⲆⵠΔΔ: 696,
    ⵠΔⲆΔᐃⲆᐃ: 697,
    ⵠⵠΔⵠⲆᐃⲆ: 698,
    ΔⵠᐃⲆΔⵠⲆ: 699,
    ⲆΔᐃΔⵠⲆⲆ: 700,
    ΔΔᐃᐃⲆΔΔ: 701,
    ⵠᐃⲆⲆⲆⵠⲆ: 702,
    ΔᐃᐃᐃⲆⵠᐃ: 703,
    ⵠⵠᐃΔⲆⵠΔ: 704,
    ᐃⲆⲆⵠᐃⵠⵠ: 705,
    ⵠⵠᐃΔΔⲆΔ: 706,
    ⵠⲆᐃⵠᐃᐃΔ: 707,
    ΔΔⵠΔΔⵠᐃ: 708,
    ᐃᐃᐃᐃⲆⲆⲆ: 709,
    ᐃΔᐃⲆᐃΔΔ: 710,
    ⵠⲆΔΔⲆΔⲆ: 711,
    ᐃᐃΔⲆⲆᐃΔ: 712,
    ⵠⲆⲆⲆⵠᐃⵠ: 713,
    ΔΔⲆΔⲆⵠⵠ: 714,
    ⵠΔΔⵠᐃΔⵠ: 715,
    ⲆⵠⵠᐃⵠⵠΔ: 716,
    ⵠᐃⵠΔΔⵠᐃ: 717,
    ⵠΔⵠΔᐃⵠΔ: 718,
    ᐃΔᐃⲆⲆⲆⲆ: 719,
    ⵠᐃⵠΔⲆⵠΔ: 720,
    ΔⵠⵠⲆⵠΔⵠᐃⲆ: 721,
    ⲆⲆᐃᐃᐃΔⲆ: 722,
    ⵠⵠⵠⲆᐃᐃΔ: 723,
    ᐃᐃⲆᐃⵠⲆⲆ: 724,
    ⲆᐃⲆΔᐃⲆⵠ: 725,
    ⵠⵠⲆΔΔᐃⵠ: 726,
    ⵠᐃⲆⵠⵠ: 727,
    ⲆᐃⲆΔⲆ: 728,
    ΔⲆᐃⵠⵠⲆⵠ: 729,
    ⲆⲆᐃΔⵠᐃⲆ: 730,
    ⲆⵠᐃᐃⲆⲆⵠ: 731,
    ᐃⵠΔⲆⲆᐃⲆ: 732,
    ᐃⲆᐃΔᐃⲆᐃ: 733,
    ⲆⲆᐃΔⵠⵠⵠ: 734,
    ⵠⵠⲆᐃΔⲆᐃ: 735,
    ᐃΔⲆΔⵠΔΔ: 736,
    ⵠⵠᐃⲆⲆⵠⵠ: 737,
    ΔⲆᐃᐃⵠᐃΔ: 738,
    ⲆΔΔΔᐃᐃⵠ: 739,
    ⲆⲆᐃⵠⵠⵠᐃ: 740,
    ᐃⲆᐃⲆΔΔΔ: 741,
    ᐃⵠᐃⵠⲆΔΔ: 742,
    ⵠᐃⵠⲆΔⲆⲆ: 743,
    ⵠⵠⲆΔⲆⲆΔ: 744,
    ΔᐃⵠᐃⲆⵠⵠ: 745,
    ᐃⵠⲆᐃⲆᐃⵠ: 746,
    ᐃΔⵠⵠⲆⵠΔ: 747,
    ⲆⵠΔⲆᐃⵠᐃ: 748,
    ᐃⲆΔΔᐃⲆΔ: 749,
    ⵠⲆⵠᐃⲆΔⲆ: 750,
    ᐃⵠⵠⲆᐃᐃⲆ: 751,
    ⵠΔⲆⵠⵠⲆΔ: 752,
    ⵠᐃⵠⵠΔΔΔ: 753,
    ⲆᐃⲆⵠᐃⵠⵠ: 754,
    ᐃᐃⲆᐃⲆᐃᐃ: 755,
    ᐃⲆΔⲆⲆⵠΔ: 756,
    ⵠᐃⲆΔⵠⵠΔ: 757,
    ΔΔⵠⵠⵠᐃᐃ: 758,
    ΔⵠⲆⵠᐃᐃⵠ: 759,
    ᐃⵠⵠⲆᐃⲆᐃ: 760,
    ⲆΔⵠⵠⲆᐃΔ: 761,
    ⵠᐃⲆⲆⲆⵠⵠ: 762,
    ΔΔᐃⲆⵠᐃⵠ: 763,
    ⲆΔΔⲆⲆᐃⲆ: 764,
    ΔⵠⲆΔⵠᐃⲆ: 765,
    ⵠᐃᐃΔⵠᐃⲆ: 766,
    ⲆⲆⵠⵠᐃᐃⲆ: 767,
    ΔᐃⲆΔᐃᐃᐃ: 768,
    ᐃΔⲆᐃⲆⵠΔ: 769,
    ᐃΔᐃⵠⵠⲆΔ: 770,
    ΔΔⵠⵠⲆⲆᐃ: 771,
    ΔⲆΔᐃⲆΔᐃ: 772,
    ΔⵠΔᐃⲆΔΔ: 773,
    ⲆᐃᐃᐃⵠᐃΔ: 774,
    ᐃⵠΔΔⲆᐃΔ: 775,
    ⲆⲆⲆⵠⵠⵠⵠ: 776,
    ᐃᐃᐃⲆΔΔⲆ: 777,
    ΔⲆΔᐃⵠⵠΔ: 778,
    ΔᐃΔⵠΔᐃΔ: 779,
    ΔΔΔᐃΔᐃⵠ: 780,
    ΔᐃⵠΔⵠⲆΔ: 781,
    ΔᐃΔⲆⵠⵠΔ: 782,
    ᐃΔⵠⵠⵠⲆⲆ: 783,
    ⲆᐃⲆᐃᐃⵠⲆ: 784,
    ⲆⲆⵠΔΔΔΔ: 785,
    ᐃⵠⵠⵠΔΔᐃ: 786,
    ⵠΔⵠⲆⵠΔΔ: 787,
    ᐃⵠⵠⵠᐃⲆΔ: 788,
    ᐃⵠΔⵠⵠⲆⲆ: 789,
    ⵠⵠΔⵠⲆΔⲆ: 790,
    ΔⵠⵠⲆᐃⵠᐃ: 791,
    ⵠⲆⵠⲆⵠⲆⵠ: 792,
    Ⲇⵠᐃⵠⵠ: 793,
    ΔΔⵠΔᐃⵠⲆ: 794,
    ⵠⲆⵠⵠⲆᐃⲆ: 795,
    ΔᐃⲆΔᐃ: 796,
    ⵠΔᐃⵠⲆΔⲆ: 797,
    ⵠⲆᐃⵠⵠΔᐃ: 798,
    ⲆⲆⵠΔⵠᐃΔ: 799,
    ΔⲆΔⲆⲆᐃⵠ: 800,
    ᐃⲆΔᐃⵠⲆⲆ: 801,
    Ⲇⵠᐃᐃⵠ: 802,
    ᐃⵠⲆⵠΔⲆⵠ: 803,
    ΔⵠⲆΔᐃΔⵠΔΔ: 804,
    ⵠΔⲆᐃⵠⵠᐃᐃⲆ: 805,
    ⲆΔⵠⲆΔⲆⲆⲆⵠ: 806,
    ⲆᐃⵠⲆⵠⵠᐃⵠⲆ: 807,
    ΔⲆΔⲆⲆΔⵠ: 808,
    ΔⵠΔⲆᐃΔΔ: 809,
    ΔⵠᐃΔᐃⵠᐃ: 810,
    ⵠΔⵠΔⵠΔΔ: 811,
    ΔΔΔΔᐃΔⵠ: 812,
    ⵠᐃⵠⵠᐃⵠⲆ: 813,
    ᐃⲆᐃᐃᐃΔⵠ: 814,
    ᐃⵠΔᐃⲆΔⵠ: 815,
    ᐃⲆⲆᐃΔⵠΔ: 816,
    ΔⵠⲆⵠΔΔΔ: 817,
    ΔΔⲆΔΔ: 818,
    ΔⵠⵠⲆⵠ: 819,
    ⵠΔᐃⲆᐃⲆⲆ: 820,
    ᐃΔᐃⲆᐃⲆⲆ: 821,
    ⵠⵠⲆⵠⵠΔΔ: 822,
    ⵠΔⲆⲆⲆⵠⲆ: 823,
    ⲆᐃⵠΔΔⲆΔ: 824,
    ΔⲆΔΔΔᐃⵠ: 825,
    ΔΔⲆΔⲆⲆⲆ: 826,
    ΔⵠⲆⵠⲆⲆⵠ: 827,
    ΔⵠΔᐃⲆΔᐃ: 828,
    ΔⵠⲆᐃΔΔΔ: 829,
    ᐃᐃⲆᐃⲆⵠⵠ: 830,
    ᐃⲆⵠᐃⲆⵠᐃ: 831,
    ⲆⲆⲆⲆΔⲆΔΔⲆ: 832,
    ΔΔⲆᐃΔⵠΔⲆᐃ: 833,
    ⵠⵠΔᐃΔⵠⵠ: 834,
    ⲆΔⲆΔⲆᐃⵠ: 835,
    ΔᐃⲆᐃⲆⵠⵠ: 836,
    ⲆⵠᐃⵠΔΔⲆ: 837,
    ⵠΔⵠᐃⵠⵠⵠ: 838,
    ⵠΔⲆⲆΔΔⵠ: 839,
    ᐃⵠⵠΔⵠⵠᐃ: 840,
    ⵠⵠᐃᐃⲆΔᐃ: 841,
    ΔⵠΔⵠⲆᐃᐃ: 842,
    ⵠᐃᐃⵠⵠᐃⲆ: 843,
    ⲆⵠᐃᐃΔΔᐃ: 844,
    ᐃΔⵠᐃⵠⲆⲆ: 845,
    ᐃⲆᐃᐃᐃᐃᐃ: 846,
    ⵠΔᐃΔΔⲆΔ: 847,
    ⵠⲆⲆΔΔΔΔ: 848,
    ⵠᐃᐃⵠⲆΔⲆ: 849,
    ΔᐃⵠⲆⲆⵠΔ: 850,
    ᐃᐃⵠΔΔᐃᐃ: 851,
    ⵠⲆⵠᐃⵠⲆⲆΔΔ: 852,
    ᐃᐃᐃᐃΔ: 853,
    ⵠΔΔᐃΔ: 854,
    ΔⵠⵠⵠⲆⲆΔᐃⲆ: 855,
    ΔᐃⵠⲆⲆᐃⵠΔᐃ: 856,
    ᐃΔᐃⲆΔᐃᐃΔΔ: 857,
    ⲆᐃⲆⲆΔᐃⵠΔΔ: 858,
    ⵠⲆⵠΔⲆⲆᐃ: 859,
    ⵠᐃᐃᐃⲆΔᐃ: 860,
    ⲆⵠⵠΔᐃⵠⵠ: 861,
    ⲆΔⲆⲆⵠΔⵠ: 862,
    ᐃⵠⵠⲆΔⵠΔ: 863,
    ᐃᐃⵠⲆⵠᐃⲆΔᐃ: 864,
    ⵠᐃⵠⵠⲆⲆⵠ: 865,
    ⲆⵠⲆⵠΔⲆⲆ: 866,
    ᐃΔⵠᐃᐃΔⲆ: 867,
    ᐃΔⲆⲆⵠΔΔ: 868,
    ⲆⵠⵠⵠᐃⲆⵠ: 869,
    ΔᐃⵠᐃᐃⲆΔ: 870,
    ⲆⵠⲆⵠⵠΔⲆ: 871,
    ΔᐃᐃΔᐃ: 872,
    ⵠΔᐃΔⲆᐃᐃⵠⵠ: 873,
    ⵠΔⵠⵠⲆⲆΔ: 874,
    ᐃⵠΔⲆⵠⵠᐃ: 875,
    ΔⵠⲆⵠⲆΔⵠ: 876,
    ⵠⵠⵠᐃⲆⲆΔ: 877,
    ⵠΔᐃⲆΔⲆⵠ: 878,
    ⲆΔⲆⲆΔᐃⵠ: 879,
    ΔⲆⵠⵠⵠᐃΔ: 880,
    ΔΔⵠⵠⵠΔᐃ: 881,
    ᐃΔᐃΔΔⲆⲆ: 882,
    ΔᐃⵠᐃⲆⲆᐃ: 883,
    ⵠΔⲆΔⵠⲆⲆ: 884,
    ᐃⵠΔⲆᐃⵠᐃ: 885,
    ΔⲆᐃΔⲆᐃΔ: 886,
    ΔⲆⲆⵠᐃ: 887,
    ᐃⲆΔΔΔᐃᐃ: 888,
    ⵠⲆᐃⲆᐃⲆᐃ: 889,
    ⵠΔⲆⵠΔⵠΔ: 890,
    ᐃΔⵠΔⲆΔⲆ: 891,
    ᐃΔΔΔΔΔⵠ: 892,
    ⲆⵠΔⵠΔⲆⲆ: 893,
    ⲆⵠΔᐃⵠΔᐃ: 894,
    ⵠⲆⲆΔⲆⲆᐃ: 895,
    ⵠⲆΔΔᐃΔΔ: 896,
    ᐃⲆⵠⲆⲆᐃⵠ: 897,
    ⵠΔⲆⵠΔᐃᐃ: 898,
    ᐃΔⲆΔᐃⲆΔ: 899,
    ΔⲆᐃΔᐃⲆᐃ: 900,
    ΔᐃΔⲆΔΔⲆ: 901,
    ⲆᐃΔᐃⵠⲆⲆ: 902,
    ᐃⲆⵠᐃᐃᐃⲆ: 903,
    ⲆᐃᐃΔⵠⲆΔ: 904,
    ᐃⵠⲆⵠⲆⵠΔ: 905,
    ᐃⲆⵠⵠⵠⲆⲆ: 906,
    ⵠΔᐃⵠᐃΔⲆ: 907,
    ⵠΔᐃⲆΔⵠⵠ: 908,
    ⲆⵠⲆᐃΔᐃΔ: 909,
    ⵠⲆⲆᐃⲆᐃᐃ: 910,
    ΔΔΔᐃᐃᐃΔ: 911,
    ⵠⵠⲆΔⲆⵠⵠ: 912,
    ⵠⲆⲆⲆΔⲆΔ: 913,
    ΔΔⵠⲆⵠⲆⵠⵠᐃ: 914,
    ᐃⲆΔⵠΔᐃⵠᐃⵠ: 915,
    ⵠⵠⲆⵠⲆᐃΔⵠΔ: 916,
    ᐃⵠⲆᐃⵠⲆⲆⲆᐃ: 917,
    ΔΔᐃΔΔΔⲆ: 918,
    ⲆⵠⵠⵠⲆⲆⲆ: 919,
    ᐃᐃⲆⵠⵠ: 920,
    ⲆᐃΔᐃᐃΔᐃ: 921,
    ⲆⲆⵠⲆⲆⵠⵠ: 922,
    ⲆᐃⵠΔᐃⵠᐃ: 923,
    ⲆΔΔⵠⲆᐃΔ: 924,
    ⵠⲆΔΔⵠⵠΔ: 925,
    Δᐃⵠⵠⵠⵠᐃ: 926,
    ⵠⵠⲆᐃⵠΔⲆ: 927,
    ΔᐃⲆΔᐃᐃΔ: 928,
    ᐃᐃⵠᐃⵠΔᐃ: 929,
    ᐃΔᐃᐃⲆᐃᐃ: 930,
    ΔⵠⲆᐃᐃⲆⵠ: 931,
    ⵠᐃᐃᐃⵠ: 932,
    ⲆΔⲆⵠⲆⲆⲆ: 933,
    ᐃⲆΔⲆⲆᐃⲆ: 934,
    ΔⲆᐃᐃΔⲆⵠ: 935,
    ⵠⲆⲆⵠⵠⵠⲆ: 936,
    ⵠᐃΔⵠΔⲆⲆ: 937,
    ΔΔⵠΔⲆⲆᐃ: 938,
    ΔⵠⵠᐃΔⲆⵠ: 939,
    ⲆΔⲆᐃⵠΔⲆⵠⵠ: 940,
    ⵠⵠⲆⵠΔ: 941,
    ⵠⵠᐃⲆⵠΔᐃ: 942,
    ΔᐃᐃⲆᐃⵠΔ: 943,
    ΔⵠⵠⲆⵠΔᐃ: 944,
    ᐃⵠⵠᐃⲆⵠᐃ: 945,
    ⲆⲆⲆⵠΔᐃⲆ: 946,
    ᐃΔⵠᐃⲆⵠⵠ: 947,
    ⵠΔⲆⲆⲆⵠΔ: 948,
    ΔⲆᐃΔⲆⲆᐃ: 949,
    ⵠⵠᐃΔⲆΔᐃ: 950,
    ᐃⵠΔᐃⲆⵠΔ: 951,
    ᐃᐃⲆᐃᐃⵠⵠ: 952,
    ΔΔΔΔᐃⵠⵠ: 953,
    ΔΔΔΔΔᐃΔ: 954,
    ⵠΔᐃᐃⵠᐃⲆ: 955,
    ᐃᐃⲆⵠⲆᐃⲆ: 956,
    ⲆᐃⵠⲆᐃΔⲆ: 957,
    ᐃΔᐃⲆⵠᐃᐃ: 958,
    ⵠΔᐃⲆⲆᐃⵠ: 959,
    ᐃᐃⲆΔⲆⵠᐃ: 960,
    ᐃⲆⵠᐃᐃⵠⲆ: 961,
    ⲆΔΔⵠᐃⲆⲆ: 962,
    ΔⵠⲆⵠᐃΔⵠ: 963,
    ᐃⲆⵠⲆⵠΔΔΔⲆ: 964,
    ⵠⵠⵠⵠⲆᐃⵠ: 965,
    ⵠᐃᐃⵠᐃⲆΔ: 966,
    ᐃΔⵠⵠⵠⵠⵠ: 967,
    ⵠΔᐃⲆⵠⵠⵠ: 968,
    ΔⵠⵠⲆⲆⵠⲆ: 969,
    ⲆᐃΔΔⲆΔᐃ: 970,
    ΔⲆᐃΔⵠⵠⲆ: 971,
    ΔⵠᐃⲆᐃΔᐃ: 972,
    ⲆᐃᐃᐃⲆᐃⲆ: 973,
    ⲆΔⲆΔΔΔΔ: 974,
    ⵠΔⲆⵠΔΔⵠ: 975,
    ΔΔⵠΔΔᐃⲆ: 976,
    ⲆΔΔⵠⲆΔⲆ: 977,
    ᐃⲆⵠᐃᐃΔᐃ: 978,
    ᐃⲆⵠΔⵠⲆΔ: 979,
    ⲆΔⵠⵠΔⵠⵠ: 980,
    ⵠΔᐃΔᐃΔΔ: 981,
    ΔⵠΔΔᐃⵠⲆ: 982,
    ⲆᐃⲆΔⵠⲆⲆ: 983,
    ⵠᐃᐃΔⲆΔΔ: 984,
    ΔⲆΔⵠⵠᐃΔ: 985,
    ⲆᐃⵠΔᐃⲆⲆ: 986,
    ΔΔⲆᐃᐃΔᐃ: 987,
    ΔᐃΔⵠᐃᐃⲆ: 988,
    ᐃΔΔⲆᐃ: 989,
    ⵠⵠⵠⲆⲆΔΔ: 990,
    ᐃⵠⵠᐃⲆᐃⵠ: 991,
    ᐃΔᐃΔΔⲆᐃ: 992,
    ᐃᐃΔᐃΔⵠΔ: 993,
    ΔΔⵠⲆΔΔⵠ: 994,
    ᐃⵠⵠⲆⲆᐃⲆ: 995,
    ⲆⲆᐃⲆᐃΔⲆ: 996,
    ⲆᐃᐃⲆᐃⲆΔ: 997,
    ⵠⵠⲆⵠⵠⲆⵠ: 998,
    ΔΔⲆᐃᐃⵠΔ: 999,
    ΔⵠⵠⲆⲆᐃⵠ: 1000,
    ΔⵠⵠΔⲆⵠⲆ: 1001,
    ΔΔⲆⵠⲆΔⵠ: 1002,
    ⵠᐃⲆᐃⵠΔⵠ: 1003,
    ⵠᐃᐃᐃⵠΔⵠ: 1004,
    ⵠΔᐃΔᐃᐃⲆ: 1005,
    ᐃⵠΔᐃΔⵠΔ: 1006,
    ᐃᐃΔᐃⲆⲆⵠ: 1007,
    ⲆⲆᐃᐃⵠᐃⲆ: 1008,
    ΔᐃⲆΔΔΔⵠ: 1009,
    ᐃⲆᐃⲆΔΔⵠ: 1010,
    ᐃⲆⲆΔⵠᐃᐃ: 1011,
    ⲆⵠΔⵠⵠᐃⵠ: 1012,
    ⲆⵠΔΔΔⲆⵠ: 1013,
    ΔᐃⵠⲆᐃᐃᐃ: 1014,
    ΔⲆᐃᐃᐃΔΔ: 1015,
    ⵠΔᐃⲆᐃⲆⵠ: 1016,
    ΔⲆⲆᐃⲆⵠᐃ: 1017,
    ΔⵠⲆΔⲆⲆᐃ: 1018,
    ᐃΔᐃᐃΔⲆⵠ: 1019,
    ⲆⲆᐃⲆΔⲆⵠ: 1020,
    ⲆⵠⵠⵠⲆⵠⲆ: 1021,
    ᐃᐃⵠⲆⵠΔⵠ: 1022,
    ΔⲆᐃΔⲆΔᐃ: 1023,
    ⵠΔⲆⲆ: 1024,
    ΔΔᐃⲆ: 1025,
    ⵠⲆⲆᐃᐃⵠⵠ: 1026,
    ᐃᐃᐃΔⲆᐃⲆ: 1027,
    ⲆΔⲆⵠⲆᐃΔ: 1028,
    ᐃᐃⲆⵠΔⲆΔ: 1029,
    ᐃᐃⵠΔΔᐃΔ: 1030,
    ᐃᐃⲆⲆⲆⲆᐃ: 1031,
    ᐃᐃⵠⵠΔᐃΔ: 1032,
    ⵠⲆⲆΔᐃ: 1033,
    ⲆⵠⲆΔⵠⵠⲆ: 1034,
    ⲆΔⵠⲆⲆ: 1035,
    ⵠⲆᐃⵠⲆⲆⲆ: 1036,
    ⵠⲆΔᐃⵠ: 1037,
    ᐃᐃⲆⵠᐃᐃᐃ: 1038,
    ⲆᐃⲆΔΔ: 1039,
    ΔᐃΔⵠᐃⵠᐃ: 1040,
    ΔΔⲆᐃⵠ: 1041,
    ᐃΔⲆΔⲆ: 1042,
    ⵠΔⲆΔᐃⵠⵠ: 1043,
    ᐃΔⲆᐃΔᐃⲆ: 1044,
    ΔᐃⲆⵠⵠΔⵠ: 1045,
    ΔⵠⲆⲆⲆᐃⲆ: 1046,
    ᐃⵠⲆᐃⲆⵠΔ: 1047,
    ⲆⲆⵠⲆᐃⵠΔ: 1048,
    ⵠⵠᐃⵠⲆΔᐃ: 1049,
    ᐃΔΔΔⵠⵠΔ: 1050,
    ⲆΔᐃⵠⲆΔⵠ: 1051,
    ⵠᐃⵠⵠΔ: 1052,
    ⲆᐃᐃⲆⵠⵠⵠ: 1053,
    ⵠⲆⲆⵠᐃ: 1054,
    ⲆΔⲆⲆΔⵠⵠ: 1055,
    ⵠᐃΔⲆᐃᐃΔ: 1056,
    ⲆᐃⵠⲆⵠⲆⲆ: 1057,
    ⵠΔⵠⲆⵠⵠᐃ: 1058,
    ⲆΔⵠᐃⵠⲆᐃ: 1059,
    ᐃⲆᐃⵠⲆⲆⵠ: 1060,
    ΔⲆᐃΔⵠⲆᐃⵠᐃ: 1061,
    ΔΔΔΔⲆⵠΔ: 1062,
    ᐃⵠⲆΔΔⲆⵠ: 1063,
    ⵠΔΔⲆⲆⵠΔⲆᐃ: 1064,
    ⲆΔᐃᐃᐃⵠⵠ: 1065,
    ᐃΔᐃΔⵠⲆΔ: 1066,
    ᐃΔⲆΔΔⵠΔ: 1067,
    ᐃᐃΔΔᐃΔⵠ: 1068,
    ⲆⵠⲆⵠᐃ: 1069,
    ᐃᐃⵠᐃᐃⲆᐃ: 1070,
    ΔⵠᐃⵠΔᐃΔ: 1071,
    ⲆΔⵠⲆⵠΔⲆ: 1072,
    ⲆΔᐃᐃⲆΔᐃ: 1073,
    ΔΔⲆᐃΔⲆⵠ: 1074,
    ᐃᐃⵠᐃᐃΔⵠ: 1075,
    ᐃᐃⲆΔΔᐃⲆ: 1076,
    ⵠΔⵠⲆⵠΔᐃ: 1077,
    ΔΔᐃⵠΔᐃⲆ: 1078,
    ⵠⲆᐃⵠⵠᐃⵠ: 1079,
    ΔΔᐃⲆⵠⵠⵠ: 1080,
    ᐃΔⵠⵠⵠᐃⲆ: 1081,
    ⵠⲆⵠⵠⲆⵠⲆ: 1082,
    ⵠⵠᐃⲆΔᐃᐃ: 1083,
    ⲆᐃⲆⲆΔ: 1084,
    ⵠⲆᐃᐃΔⵠΔ: 1085,
    ᐃΔΔᐃⲆΔⵠ: 1086,
    ⵠΔⵠᐃⲆⵠⵠ: 1087,
    ⵠΔᐃᐃᐃᐃᐃ: 1088,
    ΔⵠΔⲆᐃⵠᐃ: 1089,
    ᐃᐃΔⲆᐃⵠⲆ: 1090,
    ⲆᐃⵠⵠⲆᐃⲆ: 1091,
    ⲆᐃⲆⵠⵠΔᐃ: 1092,
    ⲆΔⵠΔⵠⵠⲆ: 1093,
    ⵠΔΔⵠᐃⵠⲆ: 1094,
    ⵠΔᐃᐃⵠⲆⵠ: 1095,
    ⲆⵠⵠⵠΔⵠΔ: 1096,
    ⵠⲆΔⵠᐃⵠᐃ: 1097,
    ΔΔⲆᐃᐃⵠᐃ: 1098,
    ΔⵠⲆΔᐃ: 1099,
    ⲆⵠⵠⵠⲆᐃᐃ: 1100,
    ⲆΔⵠΔᐃⵠⲆ: 1101,
    ᐃᐃⲆⵠᐃⲆⲆ: 1102,
    ⲆⲆΔⵠⵠΔⲆ: 1103,
    ᐃⲆⲆⲆᐃⵠΔ: 1104,
    ᐃΔΔⵠⲆⲆΔ: 1105,
    ⲆⵠⲆᐃⵠⵠᐃ: 1106,
    ΔⵠΔⵠΔⲆΔ: 1107,
    ⵠⵠⲆⵠᐃⲆᐃ: 1108,
    ⲆᐃⵠⵠⵠⵠⲆ: 1109,
    ᐃᐃΔΔᐃᐃⵠ: 1110,
    ⲆⲆⵠΔᐃΔΔ: 1111,
    ᐃⵠⵠⵠΔⲆⲆ: 1112,
    ᐃⲆⵠᐃᐃᐃΔ: 1113,
    ⵠΔΔᐃᐃⵠⲆ: 1114,
    ᐃᐃΔⲆⵠⲆΔ: 1115,
    ᐃⲆᐃⲆⲆᐃⵠ: 1116,
    ᐃᐃΔⲆⲆΔΔ: 1117,
    ᐃΔⲆⲆⲆᐃⲆ: 1118,
    ΔⲆⲆⵠᐃⵠΔ: 1119,
    ᐃΔΔᐃⵠ: 1120,
    ⲆⲆⲆⲆⲆᐃᐃ: 1121,
    ΔΔⲆⵠᐃⵠᐃ: 1122,
    ᐃᐃⵠᐃᐃᐃⲆ: 1123,
    ΔΔⵠⵠⲆⲆⵠ: 1124,
    ΔᐃⲆⵠΔⲆΔ: 1125,
    ΔᐃⲆⲆΔΔⲆ: 1126,
    ᐃᐃΔⵠΔⵠΔ: 1127,
    ᐃⵠΔⲆΔᐃⵠ: 1128,
    ⲆᐃⲆᐃⲆᐃⵠ: 1129,
    ⵠᐃᐃⵠⵠᐃᐃ: 1130,
    ⵠⲆᐃⵠΔⲆᐃ: 1131,
    ΔⵠⲆᐃΔⵠΔ: 1132,
    ᐃⵠΔⵠΔΔΔ: 1133,
    ΔⲆᐃⲆⲆⲆⵠ: 1134,
    ⲆⵠᐃⵠⲆⲆⲆ: 1135,
    ⵠⲆᐃᐃΔᐃⲆ: 1136,
    ⲆⵠᐃⲆᐃⵠᐃ: 1137,
    ΔᐃᐃᐃΔᐃᐃ: 1138,
    ᐃᐃΔⲆᐃᐃⲆ: 1139,
    ΔΔΔΔⵠⲆᐃ: 1140,
    ΔⲆⲆⲆⲆⲆⲆ: 1141,
    ΔᐃⵠⵠᐃΔΔ: 1142,
    ⵠΔᐃᐃΔᐃⲆ: 1143,
    ᐃⵠᐃΔⵠⲆᐃ: 1144,
    ⵠΔⲆᐃΔᐃⵠ: 1145,
    ΔⲆⲆᐃⵠΔⲆ: 1146,
    ΔⵠⲆⲆΔⲆΔ: 1147,
    ΔⵠᐃⲆΔⲆⲆ: 1148,
    ᐃⵠᐃⵠᐃⲆⵠ: ["#E9CF96", "#144940"],
    ⵠⵠⲆⲆⵠⲆⲆ: 1149,
    ⲆΔⵠⲆⲆᐃᐃ: 1150,
    ⲆⵠⵠⵠⵠⲆⵠ: 1151,
    ΔΔΔⵠⲆⲆⲆ: 1152,
    ⵠⵠⲆⲆⲆⵠΔ: 1153,
    ᐃΔΔⵠⵠⲆᐃ: 1154,
    ⲆᐃⲆΔᐃᐃⲆ: 1155,
    ΔⲆⲆⲆΔ: 1156,
    ΔⵠⵠΔᐃᐃⵠ: 1157,
    ⵠⲆⲆΔᐃΔΔ: 1158,
    ⲆⲆᐃΔᐃᐃⵠ: 1159,
    ΔⵠⵠΔⲆΔᐃ: 1160,
    ΔⵠΔΔⲆⵠᐃ: 1161,
    ⵠⲆⲆΔᐃᐃⵠ: 1162,
    ΔΔᐃᐃⵠᐃᐃ: 1163,
    ⲆΔⵠᐃⲆⲆΔ: 1164,
    ⲆΔⲆᐃΔⲆⲆ: 1165,
    ⲆᐃⵠΔⵠⵠΔ: 1166,
    ᐃⵠⲆⲆⲆⵠⵠ: 1167,
    ᐃⲆᐃΔᐃΔΔ: 1168,
    ⲆᐃΔΔⲆⵠⲆ: 1169,
    ⲆᐃΔⵠᐃΔᐃ: 1170,
    ⵠᐃΔⲆⵠⵠⵠ: 1171,
    ⵠᐃⲆΔΔⵠⲆ: 1172,
    ⲆΔᐃⲆᐃΔⲆ: 1173,
    ΔᐃᐃΔⵠᐃᐃ: 1174,
    ΔⲆΔᐃᐃΔᐃ: 1175,
    ᐃΔⲆᐃᐃⵠᐃ: 1176,
    ⲆᐃⵠᐃᐃⲆⵠ: 1177,
    ⲆⵠⵠⵠⵠⵠΔ: 1178,
    ⲆΔᐃᐃⵠⲆΔ: 1179,
    ΔΔᐃⵠⲆⲆΔ: 1180,
    ᐃᐃᐃᐃⲆᐃΔ: 1181,
    ᐃᐃⲆΔⵠⲆΔ: 1182,
    ΔⵠⲆⵠⲆΔⲆ: 1183,
    ΔⵠⵠΔⲆⲆᐃ: 1184,
    ⲆΔⵠΔⵠᐃΔ: 1185,
    ⲆⵠΔⲆⵠⵠΔ: 1186,
    ΔⲆᐃΔΔᐃⲆ: 1187,
    ⵠᐃᐃⲆⵠΔΔ: 1188,
    ΔΔⲆⲆᐃⲆΔ: 1189,
    ⲆΔᐃⵠⲆΔᐃ: 1190,
    ᐃⲆⵠᐃⵠᐃΔ: 1191,
    ΔⲆⵠΔⲆⵠᐃ: 1192,
    ᐃΔᐃⵠⵠⵠⵠ: 1193,
    ᐃⵠΔΔⵠⵠΔ: 1194,
    ⵠΔᐃⲆᐃⵠⵠ: 1195,
    ⵠᐃᐃΔΔⲆⵠ: 1196,
    ⲆⵠᐃⲆⵠΔΔ: 1197,
    ⵠⵠᐃⵠⵠΔᐃ: 1198,
    ΔΔᐃⵠⲆΔᐃ: 1199,
    ⵠᐃᐃⵠⲆΔΔ: 1200,
    ⲆΔⲆⲆΔᐃᐃ: 1201,
    ⵠⵠΔⵠᐃᐃᐃ: 1202,
    ⵠⵠΔⲆⵠⲆⲆ: 1203,
    ᐃᐃᐃⵠΔᐃᐃ: 1204,
    ΔᐃⵠⵠⲆᐃⵠ: 1205,
    ᐃᐃⵠᐃⲆΔᐃ: 1206,
    ⲆΔᐃⵠⲆᐃᐃ: 1207,
    ⲆᐃΔⲆΔΔⲆ: 1208,
    ⲆⵠΔᐃⲆᐃΔ: 1209,
    ⲆΔⵠᐃⵠΔⲆ: 1210,
    ⵠᐃⲆΔⲆΔⲆ: 1211,
    ΔᐃⲆⲆⲆⵠᐃ: 1212,
    ᐃⲆᐃⲆⲆᐃⲆ: 1213,
    ΔᐃⲆᐃᐃⵠΔ: 1214,
    ᐃᐃⲆΔΔⵠⵠ: 1215,
    ⵠⵠⲆᐃΔⵠᐃ: 1216,
    ⲆᐃⲆᐃⵠΔΔ: 1217,
    ⵠΔΔΔⲆ: 1218,
    ᐃΔⲆⵠⵠⵠᐃ: 1219,
    ⲆΔΔᐃⲆ: 1220,
    ⲆΔΔᐃⲆᐃΔ: 1221,
    ⲆⲆⵠᐃᐃΔⲆ: 1222,
    ⲆⲆΔⲆⲆΔᐃ: 1223,
    ᐃᐃΔΔΔⵠᐃ: 1224,
    ⵠⲆⲆⲆⵠⵠⵠ: 1225,
    ⲆΔᐃᐃΔΔⵠ: 1226,
    ΔΔΔⵠⵠⲆⲆ: 1227,
    ᐃᐃⵠᐃⲆᐃⵠ: 1228,
    ᐃᐃΔⵠⵠΔᐃ: 1229,
    ΔⵠᐃᐃⲆⵠⲆ: 1230,
    ᐃΔΔⲆΔⵠᐃ: 1231,
    ᐃⵠⲆΔⵠⲆⲆ: 1232,
    ⲆⲆΔⲆⲆᐃΔ: 1233,
    ⵠᐃⲆⲆⵠΔᐃ: 1234,
    ΔᐃⵠᐃᐃⵠΔ: 1235,
    ᐃⲆⲆΔⲆᐃⵠ: 1236,
    ΔΔΔⲆᐃᐃⵠ: 1237,
    ⵠΔΔΔΔᐃⲆ: 1238,
    ᐃᐃᐃᐃᐃΔᐃ: 1239,
    ⵠᐃⲆᐃⲆⵠᐃ: 1240,
    ΔⵠΔⲆⵠΔΔ: 1241,
    ΔⵠᐃᐃᐃⲆΔ: 1242,
    ᐃⲆⵠᐃⵠΔΔ: 1243,
    ᐃΔΔⵠⵠΔⲆ: 1244,
    ΔΔⵠⲆⵠΔⲆ: 1245,
    ⲆΔⵠΔⵠᐃᐃ: 1246,
    ⵠⵠⵠᐃⲆⵠⵠ: 1247,
    ΔⲆᐃᐃᐃⲆⵠ: 1248,
    ⵠᐃᐃᐃⲆΔⲆ: 1249,
    ⵠΔⵠⵠΔⵠᐃ: 1250,
    ᐃⵠᐃΔⲆⵠⲆ: 1251,
    ⲆⲆᐃᐃΔΔΔ: 1252,
    ᐃᐃᐃᐃᐃΔⵠ: 1253,
    ΔⲆⲆΔⵠᐃΔ: 1254,
    ᐃⲆΔΔⵠⲆΔ: 1255,
    ⵠΔᐃⲆⲆⲆⵠ: 1256,
    ⵠⵠΔⲆᐃⲆⵠ: 1257,
    ⲆⵠⵠΔⵠᐃⲆ: 1258,
    ⵠⲆⲆⵠᐃΔΔ: 1259,
    ΔⲆⵠΔⵠⲆΔ: 1260,
    ᐃΔᐃΔᐃⵠᐃ: 1261,
    ⵠⵠΔᐃⵠⵠΔ: 1262,
    ⲆᐃⵠⵠⲆⵠᐃ: 1263,
    ⲆᐃᐃⵠᐃⲆᐃ: 1264,
    ⵠΔⵠΔⲆⵠⵠ: 1265,
    ᐃⲆⵠᐃᐃⵠΔ: 1266,
    ⵠⲆⲆⵠⵠΔⵠ: 1267,
    ᐃⵠᐃΔⵠⲆⵠ: 1268,
    ΔᐃⲆΔᐃΔⵠ: 1269,
    ΔⲆΔᐃⲆΔΔ: 1270,
    ΔᐃΔⵠⵠⵠⵠ: 1271,
    ΔΔⲆⵠⵠⵠᐃ: 1272,
    ⵠᐃⵠᐃⵠᐃⲆ: 1273
  };
  Ch = 0;
  var fh = {
    ⲆⲆΔⵠⲆ: 0,
    ᐃⲆⵠΔΔ: 1,
    ᐃⲆⲆⲆΔ: 2,
    ᐃⵠⵠⲆᐃ: 3,
    ΔΔⵠᐃⲆ: 4,
    ΔΔΔΔΔ: 5,
    ⲆⲆⵠΔΔ: 6,
    ⲆⵠⵠΔΔ: 7,
    ⲆⵠⲆᐃΔ: 8,
    ⲆⵠΔⲆⲆ: 9,
    ⲆΔΔᐃΔ: 10,
    Ⲇᐃᐃᐃᐃ: 11,
    ⵠΔⵠᐃᐃ: 12,
    ⲆᐃⵠΔⵠ: 13,
    ⵠⲆΔΔⵠ: 14,
    ⲆᐃΔⵠⲆ: 15,
    ΔΔΔᐃΔ: 16,
    ⲆᐃⲆⲆᐃ: 17,
    ᐃⲆᐃⲆᐃ: 18,
    ⵠⵠΔᐃΔ: 19,
    ⲆⵠΔᐃⲆ: 20,
    ΔⲆⵠⵠΔ: 21,
    ᐃⲆΔⵠⵠ: 22,
    ⲆⵠⵠⲆᐃ: 23,
    ᐃᐃΔⲆᐃ: 24,
    ⲆⲆⵠΔⲆ: 25,
    ⲆΔΔⵠⵠ: 26,
    ᐃⵠᐃΔΔ: 27,
    ΔⵠⵠⵠΔ: 28,
    ⵠᐃᐃᐃⲆ: 29,
    Δᐃᐃᐃⵠ: 30,
    ⲆᐃⵠⲆⲆ: 31,
    ΔΔΔⲆᐃ: 32,
    ΔᐃⵠⲆᐃ: 33,
    ΔᐃⲆΔⲆ: 34,
    ⵠΔᐃᐃⵠ: 35,
    ΔᐃⲆⵠⲆ: 36,
    ⵠΔΔⲆⲆ: 37,
    ᐃⵠⲆⲆΔ: 38,
    ᐃᐃⵠⵠⵠ: 39,
    ⵠᐃΔΔᐃ: 40,
    ΔᐃⲆⵠᐃ: 41,
    ᐃⲆΔⲆΔ: 42,
    ⲆᐃᐃⲆⵠ: 43,
    ⲆᐃⵠΔⲆ: 44,
    ⵠΔᐃⵠⵠ: 45,
    ΔΔⲆⲆᐃ: 46,
    ⵠⲆᐃⵠⲆ: 47,
    ΔᐃᐃⲆⲆ: 48,
    ᐃⲆΔⲆⵠ: 49,
    ΔⵠΔᐃᐃ: 50,
    ⲆⲆᐃΔⵠ: 51,
    ΔᐃⵠΔⵠ: 52,
    ⵠⲆᐃⵠⵠ: 53,
    ⵠΔⲆⲆⲆ: 54,
    ΔⵠⵠⲆΔ: 55,
    ΔᐃΔⵠⵠ: 56,
    ᐃᐃᐃᐃᐃ: 57,
    ΔⲆΔᐃⵠ: 58,
    ᐃⲆⲆΔⲆ: 59,
    ᐃⲆⵠⲆⲆ: 60,
    ᐃΔⲆⵠⲆ: 61,
    ⵠⲆⲆᐃⵠ: 62,
    Δⵠᐃⵠⵠ: 63,
    ⲆⲆⲆⲆⵠ: 64,
    ᐃⵠⵠᐃΔ: 65,
    ⵠⲆΔⲆⵠ: 66,
    ⲆⲆᐃⵠΔ: 67,
    ᐃⵠⲆΔⵠ: 68,
    ⵠⵠⵠᐃΔ: 69,
    ⵠΔΔⵠΔ: 70,
    ⲆⲆⲆⵠⲆ: 71,
    ΔΔⵠⵠΔ: 72,
    ⲆΔᐃΔᐃ: 73,
    ⲆΔΔⵠΔ: 74,
    ⵠⵠΔⲆΔ: 75,
    ⲆᐃⵠΔΔ: 76,
    ⵠⵠᐃᐃΔ: 77,
    ⲆⵠΔⵠⵠ: 78,
    ᐃⵠᐃⲆΔ: 79,
    ⲆⵠᐃΔⵠ: 80,
    ΔⲆⲆⵠΔ: 81,
    ᐃΔΔΔⲆ: 82,
    ⵠⲆΔΔΔ: 83,
    ⵠⲆⲆΔⵠ: 84,
    ⵠⲆⵠⲆⲆ: 85,
    ΔⵠⲆΔΔ: 86,
    ⲆⵠⲆΔⵠ: 87,
    ᐃΔΔΔᐃ: 88,
    ΔᐃⵠⵠⲆ: 89,
    ⲆⲆᐃⵠⲆ: 90,
    ΔΔΔⲆΔ: 91,
    ΔⲆΔΔⲆ: 92,
    ᐃⵠⲆⵠΔ: 93,
    ᐃΔⵠⵠΔ: 94,
    ᐃᐃⵠⲆᐃ: 95,
    ΔⲆΔΔⵠ: 96,
    ⲆΔⵠⵠⲆ: 97,
    ᐃⲆΔΔⵠ: 98,
    ᐃΔⲆΔΔ: 99,
    ⵠᐃⵠⲆ: 100,
    ⲆᐃⵠⵠⲆ: 101,
    ᐃᐃᐃⲆᐃ: 102,
    ⲆⲆⵠⲆΔ: 103,
    ᐃⵠΔⲆᐃ: 104,
    ᐃᐃⲆΔⲆ: 105,
    ΔⵠᐃⲆⲆ: 106,
    ⲆᐃΔⵠᐃ: 107,
    ⲆⲆᐃᐃΔ: 108,
    ΔⵠᐃΔΔ: 109,
    ⲆᐃΔᐃᐃ: 110,
    ⲆⵠⲆⲆΔ: 111,
    ᐃΔⵠⵠΔΔⵠ: 112,
    ΔⲆⵠⲆⵠⲆⵠ: 113,
    ᐃⵠΔᐃⲆ: 114,
    ⲆⵠⲆᐃᐃ: 115,
    ᐃᐃⲆᐃΔ: 116,
    ⵠΔᐃΔΔ: 117,
    ΔⲆⵠΔⲆ: 118,
    ᐃΔⲆᐃΔ: 119,
    ⵠⵠᐃΔΔ: 120,
    ⵠⲆⲆΔⲆ: 121,
    ΔΔᐃⲆᐃ: 122,
    ⵠⵠΔⵠᐃ: 123,
    ΔᐃΔⵠᐃ: 124,
    ⵠᐃⲆⵠΔ: 125,
    ⵠⵠΔⵠⵠ: 126,
    ᐃⲆⲆⵠΔ: 127,
    ΔⲆⲆᐃⲆ: 128,
    ΔᐃⵠΔΔ: 129,
    ⵠΔⲆⵠᐃ: 130,
    ⵠᐃΔⲆᐃ: 131,
    ᐃⵠⲆΔΔ: 132,
    ⲆⲆΔᐃΔ: 133,
    ⲆⲆᐃⲆΔ: 134,
    ΔᐃⵠᐃΔ: 135,
    ᐃⲆΔΔΔ: 136,
    ⲆΔⵠⲆᐃ: 137,
    ⵠⵠᐃⲆⲆ: 138,
    ΔⲆᐃᐃᐃ: 139,
    ⵠᐃⵠⲆⵠ: 140,
    ⲆᐃΔⲆᐃ: 141,
    ⵠᐃᐃΔΔ: 142,
    ΔΔⵠⲆΔ: 143,
    ⵠⲆⵠⲆΔ: 144,
    ᐃΔⲆᐃⵠ: 145,
    ⵠΔⲆⲆΔ: 146,
    ᐃⲆⲆⵠⵠ: 147,
    ΔⵠΔⵠⲆ: 148,
    ⵠᐃΔⵠΔ: 149,
    ⵠᐃΔΔΔ: 150,
    ᐃᐃⲆⵠΔ: 151,
    ⵠⲆⲆᐃΔ: 152,
    ⵠⵠⲆΔΔ: 153,
    ⵠΔⲆᐃⲆ: 154,
    ΔΔᐃΔΔ: 155,
    ⲆᐃⲆⵠΔ: 156,
    ⵠⵠΔⲆⲆ: 157,
    ΔⵠⲆⲆᐃ: 158,
    ⲆΔⵠⲆⵠ: 159,
    ΔᐃΔᐃΔ: 160,
    ΔᐃΔⲆⲆ: 161,
    ⲆⵠᐃⲆⲆ: 162,
    ⲆᐃᐃⵠⲆ: 163,
    ᐃΔⲆᐃⲆ: 164,
    ᐃΔⵠΔᐃ: 165,
    ⵠⵠⵠⵠΔ: 166,
    ⵠᐃⲆᐃΔ: 167,
    ᐃΔᐃΔΔ: 168,
    ᐃᐃⵠΔⵠ: 169,
    ⲆⲆⵠΔᐃ: 170,
    ΔⲆⵠⲆⵠ: 171,
    ⲆⲆΔⵠΔ: 172,
    ΔⲆⵠⵠⲆ: 173,
    ⲆⲆⵠⵠΔ: 174,
    ⵠᐃⵠⵠⵠ: 175,
    ΔⲆᐃⵠⵠ: 176
  };
  const zh = 255;
  const yh = 8;
  Ch = 0;
  const wh = 2;
  const Ph = 12;
  const kh = 18;
  var Ah = {
    ⵠΔᐃᐃⵠ: 0,
    ΔΔΔΔΔ: 1,
    ΔᐃⲆᐃⵠ: 2,
    ⲆⲆⵠΔΔ: 3,
    ⲆⵠⵠΔΔ: 4,
    ΔᐃⲆⵠⲆ: 5,
    ⵠΔΔⲆⲆ: 6,
    ΔᐃᐃⵠⲆ: 7,
    ΔΔⵠᐃⲆ: 8,
    ⲆΔⵠⵠᐃ: 9,
    ⵠⲆΔΔΔ: 10,
    ⵠⲆⲆΔⵠ: 11,
    ⲆⲆⵠΔⲆ: 12,
    ⲆΔΔⵠⵠ: 13,
    ᐃⵠᐃΔΔ: 14,
    ΔⵠⵠⵠΔ: 15,
    ⲆᐃⵠⲆⲆ: 16,
    ΔΔΔⲆᐃ: 17,
    ΔᐃⵠⲆᐃ: 18,
    ᐃᐃⵠⵠⵠ: 19,
    ᐃᐃⵠⲆᐃ: 20,
    ΔⲆΔΔⵠ: 21,
    ⲆΔⵠⵠⲆ: 22,
    ⲆⵠᐃΔⵠ: 23,
    ΔⲆⲆⵠΔ: 24,
    ᐃΔΔΔᐃ: 25,
    ΔᐃⵠⵠⲆ: 26,
    ⲆⲆᐃⵠⲆ: 27,
    ᐃᐃΔⲆᐃ: 28,
    ⵠᐃⵠⲆ: 29,
    ᐃⵠⲆⲆΔ: 30,
    ⲆⵠⲆᐃΔ: 31,
    ⲆⵠΔⲆⲆ: 32,
    ⵠᐃᐃᐃⲆ: 33,
    Δᐃᐃᐃⵠ: 34,
    ⲆΔΔᐃΔ: 35,
    Ⲇᐃᐃᐃᐃ: 36,
    ⵠΔⵠᐃᐃ: 37,
    ⲆᐃⵠΔⵠ: 38,
    ⵠⲆΔΔⵠ: 39,
    ⵠⲆⵠⲆⲆ: 40,
    ᐃⲆⲆᐃΔ: 41,
    ⲆⲆᐃΔⲆ: 42,
    ΔΔΔⲆΔ: 43,
    ΔⲆΔΔⲆ: 44,
    ⲆᐃΔⵠⲆ: 45,
    ΔΔΔᐃΔ: 46,
    ᐃΔⵠⵠΔ: 47,
    ᐃⵠⲆⵠΔ: 48,
    ΔⲆⵠⵠΔ: 49,
    ⲆᐃⲆⲆᐃ: 50,
    ᐃⲆᐃⲆᐃ: 51,
    ⵠⵠΔᐃΔ: 52,
    ᐃⲆΔⵠⵠ: 53,
    ⲆⵠⵠⲆᐃ: 54,
    ΔΔᐃⲆᐃ: 55,
    ⵠⵠΔⵠᐃ: 56,
    ΔᐃⲆΔⲆ: 57,
    ⲆⵠⲆΔⵠ: 58,
    ⵠⵠΔⵠⵠ: 59,
    ᐃⲆⲆⵠΔ: 60,
    ΔⲆⲆᐃⲆ: 61,
    ΔᐃⵠΔΔ: 62,
    ⵠΔⲆⵠᐃ: 63,
    ⵠᐃΔⲆᐃ: 64,
    ⲆⲆΔᐃΔ: 65,
    ΔᐃⵠᐃΔ: 66,
    ⲆΔⵠⲆᐃ: 67,
    ΔⲆᐃᐃᐃ: 68,
    ⲆᐃΔⲆᐃ: 69,
    ΔΔⵠⲆΔ: 70,
    ᐃΔⲆᐃⵠ: 71,
    ⵠΔⲆⲆΔ: 72,
    ᐃⲆⲆⵠⵠ: 73,
    ΔⵠΔⵠⲆ: 74,
    ⵠᐃΔⵠΔ: 75,
    ⵠᐃΔΔΔ: 76,
    ᐃᐃⲆⵠΔ: 77,
    ⵠⲆⲆᐃΔ: 78,
    ⵠⵠⲆΔΔ: 79,
    ᐃⲆΔΔⵠ: 80,
    ᐃΔⲆΔΔ: 81,
    ᐃΔΔΔⲆ: 82,
    ⵠΔⲆᐃⲆ: 83,
    ΔΔᐃΔΔ: 84,
    ⲆᐃⲆⵠΔ: 85,
    ⵠⵠΔⲆⲆ: 86,
    ᐃⲆⲆⲆⵠ: 87,
    ΔⵠⲆΔΔ: 88,
    ᐃΔⵠΔᐃ: 89,
    ΔⲆⵠⵠⲆ: 90,
    ΔⲆᐃⵠⵠ: 91,
    ⲆⲆⵠⵠΔ: 92,
    ⵠᐃⵠⵠⵠ: 93,
    ⵠᐃⲆᐃΔ: 94,
    ᐃΔᐃΔΔ: 95,
    ᐃᐃⵠΔⵠ: 96,
    ⲆⲆⵠΔᐃ: 97,
    ΔⲆⵠⲆⵠ: 98,
    ⲆⲆΔⵠΔ: 99,
    ᐃⲆΔᐃⵠ: 100,
    ᐃⵠⲆΔΔ: 101,
    ⲆⲆᐃⲆΔ: 102,
    ᐃⲆΔΔΔ: 103,
    ⵠⵠᐃⲆⲆ: 104,
    ⵠᐃⵠⲆⵠ: 105,
    ⵠᐃᐃΔΔ: 106,
    ⵠⲆⵠⲆΔ: 107,
    ⵠⵠΔΔ: 108,
    ⲆⵠᐃΔ: 109,
    ⲆΔᐃⵠⲆ: 110,
    ᐃΔᐃⲆ: 111,
    ⲆᐃⲆᐃ: 112,
    ⲆⲆΔⵠⲆ: 113,
    ᐃⵠⵠⲆᐃ: 114,
    ⵠᐃΔΔᐃ: 115,
    ᐃⵠΔⵠⵠ: 116,
    ᐃⲆΔⲆⵠ: 117,
    ᐃⲆⵠΔΔ: 118,
    ᐃⲆⲆⲆΔ: 119,
    ⲆᐃⵠⵠⲆ: 120,
    ⲆΔΔᐃ: 121,
    ᐃⲆⲆΔⲆ: 122,
    ⲆⲆⲆⵠⲆ: 123,
    ᐃⵠⵠᐃΔ: 124,
    ΔⵠᐃⲆⲆ: 125,
    ⵠᐃᐃΔⵠ: 126,
    ⲆⵠⲆⲆΔ: 127,
    ⲆᐃΔᐃᐃ: 128,
    ⵠⵠⵠᐃᐃ: 129,
    ⲆⵠΔᐃⲆ: 130,
    ΔⲆⵠᐃⲆ: 131,
    ΔᐃⲆⵠᐃ: 132,
    ΔᐃⵠΔⵠ: 133,
    ⵠⵠⵠⵠᐃ: 134,
    ᐃⵠΔᐃⲆ: 135,
    ⵠⲆᐃⵠⵠ: 136,
    ᐃⵠⵠΔΔ: 137,
    ΔⵠΔᐃᐃ: 138,
    Δⵠⵠⵠᐃ: 139,
    ⵠⵠΔᐃⵠ: 140,
    ΔⵠᐃΔΔ: 141,
    ⲆΔⲆⲆΔ: 142,
    ⲆⲆᐃΔⵠ: 143,
    ΔᐃΔⵠᐃ: 144,
    ⵠᐃⲆⵠΔ: 145,
    ΔⲆⵠⲆⲆ: 146,
    ᐃᐃᐃⲆᐃ: 147,
    ⲆⲆⵠⲆΔ: 148,
    ΔⵠᐃᐃⲆ: 149,
    ⲆΔⲆⵠⲆ: 150,
    ⲆⵠⲆᐃᐃ: 151,
    ᐃᐃⲆᐃΔ: 152,
    ⵠΔᐃΔΔ: 153,
    ΔⲆⵠΔⲆ: 154,
    ᐃΔⲆᐃΔ: 155,
    ⵠⵠᐃΔΔ: 156,
    ⵠⲆⲆΔⲆ: 157,
    ᐃⵠΔⲆᐃ: 158,
    ᐃᐃⲆΔⲆ: 159,
    ⲆⲆᐃⵠΔ: 160,
    ⲆⵠⵠᐃⲆ: 161,
    ΔⵠⵠⲆΔ: 162,
    ΔᐃΔⵠⵠ: 163,
    ᐃᐃᐃᐃᐃ: 164,
    ΔⲆΔᐃⵠ: 165,
    ᐃΔⲆⵠⲆ: 166,
    ᐃⵠᐃⲆΔ: 167,
    ᐃⵠⲆΔⵠ: 168,
    ⵠⵠⵠᐃΔ: 169,
    ⵠΔΔⵠΔ: 170,
    ⵠⲆⲆᐃⵠ: 171,
    Δⵠᐃⵠⵠ: 172,
    ⲆⲆⲆⲆⵠ: 173,
    ΔΔⲆⲆⲆ: 174,
    ⲆⵠΔΔⲆ: 175,
    ᐃⲆΔⵠΔ: 176,
    ΔⵠⵠΔᐃ: 177,
    ᐃΔⲆⲆⲆ: 178,
    ΔᐃⵠΔⲆ: 179,
    ΔⵠⲆⲆᐃ: 180,
    ⲆΔⵠⲆⵠ: 181,
    ΔᐃΔᐃΔ: 182,
    ΔᐃΔⲆⲆ: 183,
    ⵠⵠᐃⲆΔ: 184,
    ᐃⵠⵠⵠⵠ: 185,
    ⵠⵠⵠⲆᐃ: 186,
    ⲆⲆΔΔΔ: 187,
    ᐃⲆΔⲆΔ: 188,
    ΔⲆᐃⲆᐃ: 189,
    ⲆᐃΔⵠᐃ: 190,
    ⲆᐃᐃⲆⵠ: 191,
    ⲆⲆⵠΔⵠ: 192,
    ⲆᐃⵠΔⲆ: 193,
    ᐃᐃⵠⵠⲆ: 194,
    ⵠΔⲆⲆⲆ: 195,
    ΔⵠᐃΔᐃ: 196,
    ΔᐃᐃΔⲆ: 197,
    ⲆⵠᐃⲆⲆ: 198,
    ΔⲆⲆⲆᐃ: 199,
    ᐃΔⲆⵠⵠ: 200,
    ⲆᐃᐃΔᐃ: 201,
    ⲆᐃⲆⲆ: 202,
    ΔᐃⵠΔᐃ: 203,
    ⵠΔᐃⵠⵠ: 204,
    ⲆᐃᐃᐃΔ: 205,
    ΔΔⲆⲆᐃ: 206,
    ⵠⲆⵠΔⲆ: 207,
    ⵠⲆᐃⵠⲆ: 208,
    ⵠⲆⵠΔΔ: 209,
    ΔᐃᐃⲆⲆ: 210,
    ⵠΔᐃΔⵠ: 211,
    ⲆΔᐃΔᐃ: 212,
    ⲆΔΔⵠΔ: 213,
    ⵠⵠΔⲆΔ: 214,
    ⲆᐃⵠΔΔ: 215,
    ⵠⵠᐃᐃΔ: 216,
    ᐃⲆⵠⲆⲆ: 217,
    ⵠⲆΔⲆⵠ: 218,
    ΔΔⵠⵠΔ: 219,
    ⲆⵠΔⵠⵠ: 220,
    ⲆⲆᐃᐃΔ: 221,
    ⲆⲆᐃᐃⲆ: 222,
    ⲆᐃᐃⵠⲆ: 223,
    ᐃΔⲆᐃⲆ: 224,
    ⲆⲆᐃΔΔ: 225,
    ⵠⲆⲆⵠᐃ: 226,
    ⲆⵠⲆⵠᐃ: 227,
    ⲆᐃⲆⲆΔ: 228,
    ΔⵠⲆΔᐃ: 229,
    ⵠⵠⵠⵠΔ: 230,
    ᐃⲆᐃΔⵠ: 231,
    ΔᐃᐃΔⵠ: 232,
    ᐃΔΔⲆᐃ: 233,
    ᐃᐃⲆᐃⲆ: 234,
    ⵠᐃᐃⵠⵠᐃⵠ: 235,
    ΔⲆⲆⲆⲆᐃⲆ: 236,
    ΔΔⲆⲆΔ: 237,
    ⵠᐃⲆᐃⵠ: 238,
    ⲆΔΔᐃⲆ: 239,
    ΔᐃⵠⲆⲆ: 240
  };
  const xh = 16;
  const Jh = _o;
  const Mh = 6;
  var Bh = {
    ⲆᐃᐃᐃⲆ: 2,
    ΔⲆⲆⵠⲆ: 4,
    ΔΔᐃΔᐃ: 0,
    ⵠⵠⲆᐃⵠ: 1,
    ᐃᐃΔⵠᐃ: 3,
    ΔΔΔⲆⲆ: 5
  };
  const Eh = 3;
  const Dh = Ak;
  var Ih = [];
  Ih[109] = {
    name: "Wood",
    ᐃᐃ: 316,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[108] = {
    name: "Stone",
    ᐃᐃ: 315,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Sh = 9;
  Ih[111] = {
    name: "Gold",
    ᐃᐃ: 297,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Qh = 13;
  const _h = Zr;
  Ih[112] = {
    name: "Diamond",
    ᐃᐃ: 298,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[121] = {
    name: "Amethyst",
    ᐃᐃ: 418,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[2] = {
    name: "Rabbit fur",
    ᐃᐃ: 368,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Fh = 19;
  Ih[174] = {
    name: "Wolf fur",
    ᐃᐃ: 393,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Rh = 7;
  const jh = 15;
  Ih[237] = {
    name: "Boar fur",
    ᐃᐃ: 1162,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[100] = {
    name: "Firefly",
    ᐃᐃ: 1164,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[101] = {
    name: "Wood arrow",
    ᐃᐃ: 1166,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[102] = {
    name: "Stone arrow",
    ᐃᐃ: 1169,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[103] = {
    name: "Gold arrow",
    ᐃᐃ: 1172,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Lh = 9;
  const Wh = 11;
  const Gh = 18;
  const Nh = 3;
  const qh = 17;
  Ih[104] = {
    name: "Diamond arrow",
    ᐃᐃ: 1175,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[105] = {
    name: "Amethyst arrow",
    ᐃᐃ: 1178,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[106] = {
    name: "Reidite arrow",
    ᐃᐃ: 1181,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[107] = {
    name: "Dragon arrow",
    ᐃᐃ: 1184,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[146] = {
    name: "Winter fur",
    ᐃᐃ: 505,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Oh = 4;
  Ih[240] = {
    name: "Fur mammoth",
    ᐃᐃ: 1233,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[161] = {
    name: "Web",
    ᐃᐃ: 305,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Hh = 20;
  const Uh = 0;
  const Yh = 16;
  Ih[116] = {
    name: "Meat",
    ᐃᐃ: 300,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Kh = 5;
  Ih[137] = {
    name: "Fish",
    ᐃᐃ: 662,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[129] = {
    name: "Kraken skin",
    ᐃᐃ: 624,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[139] = {
    name: "Piranha scales",
    ᐃᐃ: 674,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[142] = {
    name: "Ice",
    ᐃᐃ: 142,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Vh = 17;
  Ih[126] = {
    name: "Sand",
    ᐃᐃ: 609,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Xh = 10;
  const Zh = 20;
  Ih[140] = {
    name: "Dirt",
    ᐃᐃ: 140,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const $h = D;
  Ih[110] = {
    name: "Berrie",
    ᐃᐃ: 277,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[131] = {
    name: "Flour",
    ᐃᐃ: 629,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[134] = {
    name: "Flour",
    ᐃᐃ: 639,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[178] = {
    name: "Special fur peasant",
    ᐃᐃ: 178,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const eg = 1;
  Ih[179] = {
    name: "Special fur hood",
    ᐃᐃ: 179,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const ig = 18;
  Ih[189] = {
    name: "Pumpkin",
    ᐃᐃ: 814,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const tg = 100;
  const ng = 20;
  const og = 2;
  Ih[192] = {
    name: "Garlic",
    ᐃᐃ: 840,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const ag = 13;
  const rg = 6;
  Ih[194] = {
    name: "Thornbush",
    ᐃᐃ: 850,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[205] = {
    name: "Carrot",
    ᐃᐃ: 955,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const sg = 8;
  Ih[207] = {
    name: "Tomato",
    ᐃᐃ: 965,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[209] = {
    name: "Watermelon",
    ᐃᐃ: 972,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[211] = {
    name: "Aloe Vera",
    ᐃᐃ: 987,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[222] = {
    name: "Penguin Feather",
    ᐃᐃ: 1035,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const hg = 14;
  Ih[231] = {
    name: "Hawk Feather",
    ᐃᐃ: 1037,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const gg = 18;
  Ih[232] = {
    name: "Vulture Feather",
    ᐃᐃ: 1039,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const lg = 2;
  const ug = 15;
  Ih[233] = {
    name: "Cactus",
    ᐃᐃ: 1154,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[236] = {
    name: "Cactus",
    ᐃᐃ: 1160,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const bg = xk;
  const dg = 16;
  Ih[235] = {
    name: "Pitchfork Part",
    ᐃᐃ: 1158,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[238] = {
    name: "Emerald Machine",
    ᐃᐃ: 1187,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const vg = 255;
  Ih[234] = {
    name: "Emerald",
    ᐃᐃ: 1156,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const mg = 13;
  Ih[41] = {
    name: "Christmas Hat",
    ᐃᐃ: 880,
    ᐃⲆΔⵠ: 0
  };
  const cg = Pi;
  Ih[42] = {
    name: "Elf Hat",
    ᐃᐃ: 882,
    ᐃⲆΔⵠ: 0
  };
  const pg = 17;
  const Cg = 15;
  const Tg = 1;
  Ih[201] = {
    name: "Garland",
    ᐃᐃ: 870,
    ᐃⲆΔⵠ: 0,
    ⵠⵠⲆΔ: 0
  };
  Ih[200] = {
    name: "Candy",
    ᐃᐃ: 200,
    ᐃⲆΔⵠ: 0
  };
  const fg = 100;
  const zg = 4;
  const yg = 20;
  const wg = 10;
  const Pg = 12;
  const kg = rh;
  const Ag = 3;
  Ih[199] = {
    name: "Sugar Cane",
    ᐃᐃ: 865,
    ᐃⲆΔⵠ: 0
  };
  Ih[9] = {
    name: "Pirate Sword",
    ᐃᐃ: 860,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const xg = 9;
  Ih[196] = {
    name: "Crab Stick",
    ᐃᐃ: 196,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Jg = 16;
  Ih[202] = {
    name: "Reidite",
    ᐃᐃ: 938,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[203] = {
    name: "Flame",
    ᐃᐃ: 936,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[113] = {
    name: "Campfire",
    ᐃᐃ: 302,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Mg = 19;
  const Bg = 7;
  Ih[198] = {
    name: "Bed",
    ᐃᐃ: 909,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Eg = 5;
  Ih[114] = {
    name: "Workbench",
    ᐃᐃ: 262,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[0] = {
    name: "Stone sword",
    ᐃᐃ: 254,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Dg = 18;
  Ih[1] = {
    name: "Stone pick",
    ᐃᐃ: 256,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[115] = {
    name: "Berries bush",
    ᐃᐃ: 284,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[3] = {
    name: "Gold pick",
    ᐃᐃ: 295,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Ig = 12;
  const Sg = 256;
  const Qg = 14;
  Ih[4] = {
    name: "Diamond pick",
    ᐃᐃ: 257,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const _g = 11;
  const Fg = 0;
  Ih[57] = {
    name: "Wood sword",
    ᐃᐃ: 830,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Rg = ao;
  Ih[5] = {
    name: "Gold sword",
    ᐃᐃ: 290,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[6] = {
    name: "Diamond sword",
    ᐃᐃ: 291,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const jg = 11;
  Ih[8] = {
    name: "Wood pick",
    ᐃᐃ: 314,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[162] = {
    name: "Wood wall",
    ᐃᐃ: 318,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[160] = {
    name: "Wood spike",
    ᐃᐃ: 320,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[117] = {
    name: "Cooked meat",
    ᐃᐃ: 325,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[118] = {
    name: "Big campfire",
    ᐃᐃ: 327,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[195] = {
    name: "Bandage",
    ᐃᐃ: 304,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[163] = {
    name: "Stone wall",
    ᐃᐃ: 263,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[164] = {
    name: "Gold wall",
    ᐃᐃ: 265,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[165] = {
    name: "Diamond wall",
    ᐃᐃ: 332,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Lg = 0;
  Ih[166] = {
    name: "Wood door",
    ᐃᐃ: 268,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Wg = 2;
  Ih[167] = {
    name: "Chest",
    ᐃᐃ: 338,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[168] = {
    name: "Stone spike",
    ᐃᐃ: 360,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Gg = 15;
  Ih[169] = {
    name: "Gold spike",
    ᐃᐃ: 363,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Ng = 100;
  Ih[170] = {
    name: "Diamond spike",
    ᐃᐃ: 365,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[171] = {
    name: "Stone door",
    ᐃᐃ: 371,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[172] = {
    name: "Gold door",
    ᐃᐃ: 374,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[173] = {
    name: "Diamond door",
    ᐃᐃ: 377,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const qg = xj;
  const Og = 14;
  function Hg(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Ug(a) {
    return ij.String.fromCharCode(a);
  }
  Ih[10] = {
    name: "Chapka",
    ᐃᐃ: 370,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  function Yg(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Vg(a) {
    return ij.String.fromCharCode(a);
  }
  const Xg = 19;
  const $g = 6;
  Ih[11] = {
    name: "Big Chapka",
    ᐃᐃ: 380,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[12] = {
    name: "Wood spear",
    ᐃᐃ: 402,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[13] = {
    name: "Stone spear",
    ᐃᐃ: 396,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const el = 12;
  Ih[14] = {
    name: "Gold spear",
    ᐃᐃ: 399,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const il = 9;
  Ih[15] = {
    name: "Diamond spear",
    ᐃᐃ: 405,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const tl = 14;
  Ih[16] = {
    name: "Dragon spear",
    ᐃᐃ: 876,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const nl = kn;
  Ih[17] = {
    name: "Dragon spear",
    ᐃᐃ: 879,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const ol = 3;
  const al = 17;
  const rl = 13;
  Ih[18] = {
    name: "Crab spear",
    ᐃᐃ: 900,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const sl = 1;
  const hl = Jo;
  const gl = 8;
  const ll = 255;
  const ul = 10;
  Ih[197] = {
    name: "Crab loot",
    ᐃᐃ: 197,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[119] = {
    name: "Furnace",
    ᐃᐃ: 409,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const bl = 9;
  const dl = 20;
  Ih[23] = {
    name: "Explorer hat",
    ᐃᐃ: 421,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[24] = {
    name: "Pirate hat",
    ᐃᐃ: 424,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[87] = {
    name: "Flower hat",
    ᐃᐃ: 1228,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[88] = {
    name: "Fur hat",
    ᐃᐃ: 1231,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const vl = 11;
  Ih[58] = {
    name: "Wood helmet",
    ᐃᐃ: 827,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[25] = {
    name: "Stone helmet",
    ᐃᐃ: 430,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[26] = {
    name: "Gold helmet",
    ᐃᐃ: 433,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const ml = 1;
  const cl = 18;
  Ih[27] = {
    name: "Diamond helmet",
    ᐃᐃ: 436,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const pl = 100;
  Ih[28] = {
    name: "Book",
    ᐃᐃ: 439,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[120] = {
    name: "Paper",
    ᐃᐃ: 442,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Cl = 5;
  Ih[29] = {
    name: "Bag",
    ᐃᐃ: 367,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Tl = 16;
  Ih[30] = {
    name: "Amethyst sword",
    ᐃᐃ: 456,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[31] = {
    name: "Amethyst pick",
    ᐃᐃ: 460,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[33] = {
    name: "Amethyst spear",
    ᐃᐃ: 473,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[35] = {
    name: "Stone hammer",
    ᐃᐃ: 478,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const fl = 100;
  Ih[36] = {
    name: "Gold hammer",
    ᐃᐃ: 481,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[37] = {
    name: "Diamond hammer",
    ᐃᐃ: 484,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[38] = {
    name: "Amethyst hammer",
    ᐃᐃ: 487,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[39] = {
    name: "Reidite hammer",
    ᐃᐃ: 490,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const zl = 15;
  Ih[122] = {
    name: "Amethyst wall",
    ᐃᐃ: 493,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[123] = {
    name: "Amethyst spike",
    ᐃᐃ: 496,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const yl = 4;
  Ih[124] = {
    name: "Amethyst door",
    ᐃᐃ: 498,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const wl = 8;
  const Pl = 100;
  const kl = 9;
  Ih[40] = {
    name: "Cap & scarf",
    ᐃᐃ: 503,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[147] = {
    name: "Blue cord",
    ᐃᐃ: 515,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Al = 7;
  Ih[148] = {
    name: "Lock",
    ᐃᐃ: 519,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[151] = {
    name: "Resurrection",
    ᐃᐃ: 530,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const xl = 10;
  const Jl = 7;
  Ih[158] = {
    name: "Lockpick",
    ᐃᐃ: 533,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Ml = 16;
  const Bl = 4;
  const El = 13;
  Ih[159] = {
    name: "Totem",
    ᐃᐃ: 555,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  function Dl(a) {
    const b = Math.random;
    const c = [];
    Math.random = function () {
      for (let a = 0; a < 5943; a++) {
        c.push(a);
      }
      return b();
    };
  }
  const Il = ao;
  const Ql = 10;
  Ih[43] = {
    name: "Amethyst helmet",
    ᐃᐃ: 542,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const _l = 3;
  const Fl = 1;
  Ih[45] = {
    name: "Super hammer",
    ᐃᐃ: 551,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Rl = 255;
  Ih[125] = {
    name: "Bridge",
    ᐃᐃ: 604,
    ⵠⵠⲆΔ: 1,
    ᐃⲆΔⵠ: 1
  };
  Ih[221] = {
    name: "Wood Tower",
    ᐃᐃ: 1235,
    ⵠⵠⲆΔ: 1,
    ᐃⲆΔⵠ: 1
  };
  Ih[127] = {
    name: "Bottle full",
    ᐃᐃ: 715,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const jl = 14;
  Ih[128] = {
    name: "Bottle empty",
    ᐃᐃ: 611,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Ll = 19;
  Ih[46] = {
    name: "Stone shovel",
    ᐃᐃ: 618,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Wl = 17;
  const Gl = 2;
  Ih[130] = {
    name: "Watering can",
    ᐃᐃ: 627,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[132] = {
    name: "Wheat",
    ᐃᐃ: 632,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[133] = {
    name: "Cookie",
    ᐃᐃ: 635,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Nl = 5;
  Ih[135] = {
    name: "Windmill",
    ᐃᐃ: 643,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const ql = 0;
  Ih[47] = {
    name: "Super diving suit",
    ᐃᐃ: 647,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[48] = {
    name: "Diving mask",
    ᐃᐃ: 650,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  function Ol(a) {
    return ij.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ΔⵠⵠᐃⵠΔᐃⵠΔ: 15681209,
      ⲆⵠⵠΔᐃᐃΔ: 11028725,
      ⵠⵠᐃⲆⵠᐃΔ: 15902672,
      ᐃᐃⲆⵠⲆⲆΔ: 10367118
    };
  })();
  const Hl = 12;
  const Ul = 8;
  const Yl = {};
  Yl.get = function (a, b) {
    if (b !== "ΔⲆΔᐃ") {
      const a = ij.setTimeout;
      const b = a;
      const c = function () {
        a(c, 3578);
        b(c, 8387);
      };
      c();
    }
    return ij.Reflect.get(...arguments);
  };
  Ih[49] = {
    name: "Watering can full",
    ᐃᐃ: 654,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Kl = 12;
  Ih[136] = {
    name: "Cake",
    ᐃᐃ: 660,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[138] = {
    name: "Foodfish cooked",
    ᐃᐃ: 666,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[141] = {
    name: "Plot",
    ᐃᐃ: 684,
    ⵠⵠⲆΔ: 1,
    ᐃⲆΔⵠ: 1
  };
  Ih[143] = {
    name: "Bread",
    ᐃᐃ: 690,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Vl = 5;
  const Xl = 6;
  Ih[Ah.ᐃΔⵠⵠΔΔⵠ] = {
    name: "Bottle full (with ice)",
    ᐃᐃ: Cs.ⲆⵠⵠⲆⲆΔⲆΔⲆ,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Zl = 13;
  Ih[Ah.ΔⲆⵠⲆⵠⲆⵠ] = {
    name: "Bottle full (with well)",
    ᐃᐃ: Cs.ᐃⵠⲆΔΔΔⲆⲆΔ,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[50] = {
    name: "Gold shovel",
    ᐃᐃ: 700,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const $l = 17;
  Ih[51] = {
    name: "Diamond shovel",
    ᐃᐃ: 704,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[52] = {
    name: "Amethyst shovel",
    ᐃᐃ: 706,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[55] = {
    name: "Spanner",
    ᐃᐃ: 711,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[56] = {
    name: "Machete",
    ᐃᐃ: 714,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Ds = 15;
  const Es = 20;
  const Fs = 7;
  Ih[144] = {
    name: "Bread oven",
    ᐃᐃ: 718,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Gs = 100;
  Ih[145] = {
    name: "Sandwich",
    ᐃᐃ: 730,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[59] = {
    name: "Dragon helmet",
    ᐃᐃ: 734,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Hs = 14;
  const Is = 18;
  Ih[60] = {
    name: "Dragon helmet",
    ᐃᐃ: 737,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[90] = {
    name: "Witch",
    ᐃᐃ: 740,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[91] = {
    name: "Nimbus",
    ᐃᐃ: 743,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[92] = {
    name: "Wand1",
    ᐃᐃ: 746,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[93] = {
    name: "Wand2",
    ᐃᐃ: 749,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[62] = {
    name: "Dragon sword",
    ᐃᐃ: 564,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Js = 11;
  Ih[63] = {
    name: "Dragon sword",
    ᐃᐃ: 567,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[71] = {
    name: "Wood shield",
    ᐃᐃ: 1238,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[72] = {
    name: "Stone shield",
    ᐃᐃ: 1241,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[73] = {
    name: "Gold shield",
    ᐃᐃ: 1244,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[74] = {
    name: "Diamond shield",
    ᐃᐃ: 1247,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[75] = {
    name: "Amethyst shield",
    ᐃᐃ: 1250,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Ks = 4;
  Ih[76] = {
    name: "Reidite shield",
    ᐃᐃ: 1253,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[94] = {
    name: "Wood axe",
    ᐃᐃ: 1256,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Ms = 13;
  const Ns = 14;
  Ih[95] = {
    name: "Stone axe",
    ᐃᐃ: 1259,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Os = 0;
  Ih[96] = {
    name: "Gold axe",
    ᐃᐃ: 1262,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Ps = 8;
  const Qs = 19;
  const Rs = 9;
  const Ss = 2;
  Ih[97] = {
    name: "Diamond axe",
    ᐃᐃ: 1265,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[98] = {
    name: "Amethyst axe",
    ᐃᐃ: 1268,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[99] = {
    name: "Reidite axe",
    ᐃᐃ: 1271,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[64] = {
    name: "Wood bow",
    ᐃᐃ: 570,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[65] = {
    name: "Stone bow",
    ᐃᐃ: 573,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Ts = lj;
  Ih[66] = {
    name: "Gold bow",
    ᐃᐃ: 576,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[67] = {
    name: "Diamond bow",
    ᐃᐃ: 579,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[68] = {
    name: "Amethyst bow",
    ᐃᐃ: 582,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[69] = {
    name: "Reidite bow",
    ᐃᐃ: 585,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[70] = {
    name: "Dragon bow",
    ᐃᐃ: 588,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Us = _o;
  Ih[77] = {
    name: "Crown of life",
    ᐃᐃ: 758,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[175] = {
    name: "Gem of life",
    ᐃᐃ: 176,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Vs = 17;
  const Ws = 3;
  Ih[185] = {
    name: "Orb of the dragon",
    ᐃᐃ: 252,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Xs = 11163294;
  const Ys = 11163294 .ⲆⲆᐃΔⲆⲆΔ;
  const Zs = `const ΔⲆⲆⵠⵠⵠΔ = (typeof ⵠᐃⵠᐃ === "${Ys}") ? 1 : 0; return ΔⲆⲆⵠⵠⵠΔ;`;
  const $s = 100;
  const _s = 0;
  Ih[187] = {
    name: "Orb of the dragon",
    ᐃᐃ: 253,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[184] = {
    name: "Cube of the dragon",
    ᐃᐃ: 751,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[186] = {
    name: "Cube of the dragon",
    ᐃᐃ: 753,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[78] = {
    name: "Crown of luck",
    ᐃᐃ: 762,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const at = 17;
  const ct = 1;
  Ih[176] = {
    name: "Gem of luck",
    ᐃᐃ: 177,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[79] = {
    name: "Crown of the angel",
    ᐃᐃ: 770,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const et = 10;
  const ft = 4;
  Ih[177] = {
    name: "Gem of the angel",
    ᐃᐃ: 175,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[149] = {
    name: "Dragon heart",
    ᐃᐃ: 521,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const gt = 15;
  Ih[150] = {
    name: "Lava heart",
    ᐃᐃ: 523,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const ht = 15;
  const jt = 7;
  Ih[83] = {
    name: "Hood",
    ᐃᐃ: 768,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[84] = {
    name: "Peasant",
    ᐃᐃ: 772,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[86] = {
    name: "Winter peasant",
    ᐃᐃ: 777,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[85] = {
    name: "Winter hood",
    ᐃᐃ: 780,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[180] = {
    name: "Bucket full",
    ᐃᐃ: 784,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const kt = 17;
  const mt = 12;
  const pt = 8;
  Ih[181] = {
    name: "Bucket empty",
    ᐃᐃ: 785,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const qt = 5;
  const tt = 17;
  Ih[182] = {
    name: "Well",
    ᐃᐃ: 791,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[183] = {
    name: "Sign",
    ᐃᐃ: 799,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const ut = {};
  ut.get = function (a, b) {
    if (b !== "ⲆΔⲆⵠΔⵠⲆⲆᐃ") {
      const a = function () {
        for (let b = 0; b < 5; b++) {
          ij.addEventListener("click", function () {
            a();
          });
        }
      };
      a();
    }
    return ij.Reflect.get(...arguments);
  };
  Ih[188] = {
    name: "Pumpkin Seed",
    ᐃᐃ: 809,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const wt = 7758131;
  const xt = 7758131 .ⵠΔⵠΔΔᐃᐃᐃΔ;
  const yt = `const ⵠⲆΔᐃᐃⵠᐃ = (typeof ⲆⲆⵠⵠᐃⵠᐃ === "${xt}") ? 1 : 0; return ⵠⲆΔᐃᐃⵠᐃ;`;
  Ih[191] = {
    name: "Garlic Seed",
    ᐃᐃ: 835,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[193] = {
    name: "Thorbushes Seed",
    ᐃᐃ: 846,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[190] = {
    name: "Roof",
    ᐃᐃ: 843,
    ⵠⵠⲆΔ: 1,
    ᐃⲆΔⵠ: 1
  };
  const zt = 9;
  Ih[61] = {
    name: "Crab Crown",
    ᐃᐃ: 912,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const At = 6;
  Ih[204] = {
    name: "Carrot Seed",
    ᐃᐃ: 950,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Bt = 5;
  Ih[206] = {
    name: "Tomato Seed",
    ᐃᐃ: 960,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Ct = 19;
  const Dt = 256;
  const Et = 18;
  Ih[208] = {
    name: "Watermelon Seed",
    ᐃᐃ: 967,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const Ft = 7;
  Ih[210] = {
    name: "Aloe Vera Seed",
    ᐃᐃ: 982,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[80] = {
    name: "Cap",
    ᐃᐃ: 1138,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Gt = 6;
  Ih[81] = {
    name: "Turban",
    ᐃᐃ: 1141,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Ht = 19;
  Ih[82] = {
    name: "Pilot Helmet",
    ᐃᐃ: 427,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[152] = {
    name: "Emerald Machine",
    ᐃᐃ: 1196,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const It = 14;
  Ih[153] = {
    name: "Emerald Machine",
    ᐃᐃ: 1200,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Jt = 11;
  Ih[154] = {
    name: "Emerald Machine",
    ᐃᐃ: 1204,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[155] = {
    name: "Emerald Machine",
    ᐃᐃ: 1208,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[156] = {
    name: "Emerald Machine",
    ᐃᐃ: 1212,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Kt = 0;
  Ih[157] = {
    name: "Emerald Machine",
    ᐃᐃ: 1216,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[53] = {
    name: "Pitchfork",
    ᐃᐃ: 977,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const Lt = 8;
  Ih[212] = {
    name: "Wood Door Spike",
    ᐃᐃ: 990,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[213] = {
    name: "Stone Door Spike",
    ᐃᐃ: 993,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[214] = {
    name: "Gold Door Spike",
    ᐃᐃ: 996,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[215] = {
    name: "Diamond Door Spike",
    ᐃᐃ: 999,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[216] = {
    name: "Amethyst Door Spike",
    ᐃᐃ: 1002,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[20] = {
    name: "Diamond Fire Protection ",
    ᐃᐃ: 922,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  function Mt(a) {
    const b = function () {
      for (let a = 0; a < 5; a++) {
        ij.addEventListener("click", function () {
          b();
        });
      }
    };
    b();
  }
  Ih[21] = {
    name: "Amethyst Fire Protection ",
    ᐃᐃ: 926,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const eb = 10;
  const tb = 4;
  Ih[22] = {
    name: "Amethyst Fire Protection ",
    ᐃᐃ: 930,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[19] = {
    name: "Reidite Sword",
    ᐃᐃ: 933,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const nb = 13;
  Ih[34] = {
    name: "Reidite Spear",
    ᐃᐃ: 944,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const ob = 12;
  const ab = 11;
  Ih[44] = {
    name: "Reidite Helmet",
    ᐃᐃ: 947,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const rb = 5;
  const sb = 3;
  const hb = 11;
  const gb = 9;
  Ih[220] = {
    name: "Reidite Door Spike",
    ᐃᐃ: 1005,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const lb = 2;
  Ih[218] = {
    name: "Reidite Door",
    ᐃᐃ: 1008,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[219] = {
    name: "Reidite Spike",
    ᐃᐃ: 1011,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[217] = {
    name: "Reidite Wall",
    ᐃᐃ: 1014,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[32] = {
    name: "Reidite pick",
    ᐃᐃ: 1019,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[223] = {
    name: "Boat",
    ᐃᐃ: 1027,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  Ih[224] = {
    name: "Sled",
    ᐃᐃ: 1030,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const ub = 1;
  const bb = 2;
  Ih[89] = {
    name: "Saddle",
    ᐃᐃ: 1048,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 1
  };
  const db = 15;
  Ih[225] = {
    name: "Mount Boar",
    ᐃᐃ: 1051,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[226] = {
    name: "Mount King Crab",
    ᐃᐃ: 1191,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[227] = {
    name: "Mount Baby Dragon",
    ᐃᐃ: 1082,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  const vb = 6;
  Ih[228] = {
    name: "Mount Baby Lava",
    ᐃᐃ: 1097,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[229] = {
    name: "Mount Hawk",
    ᐃᐃ: 1112,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[230] = {
    name: "Plane",
    ᐃᐃ: 1116,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[54] = {
    name: "Pitchfork 2",
    ᐃᐃ: 980,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  Ih[239] = {
    name: "Baby Mammoth",
    ᐃᐃ: 1226,
    ⵠⵠⲆΔ: 0,
    ᐃⲆΔⵠ: 0
  };
  var mb = undefined;
  var Nt = [{
    r: [[109, 25], [108, 5]],
    w: 0,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 0,
    ᐃΔΔᐃ: 113,
    time: 1 / 5,
    Δᐃᐃ: 4
  }, {
    r: [[113, 1], [109, 35], [108, 10]],
    w: 0,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 1,
    ᐃΔΔᐃ: 118,
    time: 1 / 5,
    Δᐃᐃ: 4
  }, {
    r: [[109, 150], [108, 50], [111, 15]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 2,
    ᐃΔΔᐃ: 119,
    time: 1 / 20,
    Δᐃᐃ: 4
  }, {
    r: [[109, 20], [108, 10]],
    w: 0,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 3,
    ᐃΔΔᐃ: 114,
    time: 1 / 6,
    Δᐃᐃ: 4
  }, {
    r: [[109, 10]],
    w: 0,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 4,
    ᐃΔΔᐃ: 8,
    time: 1 / 3,
    Δᐃᐃ: 0
  }, {
    r: [[8, 1], [109, 50], [108, 15]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 5,
    ᐃΔΔᐃ: 1,
    time: 1 / 8,
    Δᐃᐃ: 0
  }, {
    r: [[109, 40], [111, 20], [108, 30], [1, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 6,
    ᐃΔΔᐃ: 3,
    time: 1 / 12,
    Δᐃᐃ: 0
  }, {
    r: [[112, 20], [111, 50], [108, 80], [3, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 7,
    ᐃΔΔᐃ: 4,
    time: 1 / 20,
    Δᐃᐃ: 0
  }, {
    r: [[112, 40], [111, 60], [121, 30], [4, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 8,
    ᐃΔΔᐃ: 31,
    time: 0.016666666666666666,
    Δᐃᐃ: 0
  }, {
    r: [[121, 30], [112, 40], [202, 30], [31, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 9,
    ᐃΔΔᐃ: 32,
    time: 1 / 90,
    Δᐃᐃ: 0
  }, {
    r: [[109, 90], [108, 50]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 10,
    ᐃΔΔᐃ: 35,
    time: 0.1,
    Δᐃᐃ: 0
  }, {
    r: [[109, 160], [108, 120], [111, 80], [35, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 11,
    ᐃΔΔᐃ: 36,
    time: 1 / 15,
    Δᐃᐃ: 0
  }, {
    r: [[112, 80], [108, 200], [111, 150], [36, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 12,
    ᐃΔΔᐃ: 37,
    time: 0.05,
    Δᐃᐃ: 0
  }, {
    r: [[112, 160], [121, 60], [111, 250], [37, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 13,
    ᐃΔΔᐃ: 38,
    time: 0.016666666666666666,
    Δᐃᐃ: 0
  }, {
    r: [[121, 160], [202, 60], [112, 250], [38, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 14,
    ᐃΔΔᐃ: 39,
    time: 1 / 90,
    Δᐃᐃ: 0
  }, {
    r: [[39, 1], [127, 1], [129, 1], [139, 10], [121, 20]],
    w: 1,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 15,
    ᐃΔΔᐃ: 45,
    time: 0.008333333333333333,
    Δᐃᐃ: 0
  }, {
    r: [[109, 30], [108, 15]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 16,
    ᐃΔΔᐃ: 46,
    time: 1 / 5,
    Δᐃᐃ: 0
  }, {
    r: [[46, 1], [111, 20], [108, 30], [109, 40]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 17,
    ᐃΔΔᐃ: 50,
    time: 1 / 10,
    Δᐃᐃ: 0
  }, {
    r: [[50, 1], [112, 20], [111, 50], [108, 80]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 18,
    ᐃΔΔᐃ: 51,
    time: 1 / 20,
    Δᐃᐃ: 0
  }, {
    r: [[51, 1], [111, 60], [121, 30], [112, 40]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 19,
    ᐃΔΔᐃ: 52,
    time: 1 / 40,
    Δᐃᐃ: 0
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 20,
    ᐃΔΔᐃ: 130,
    time: 0.2,
    Δᐃᐃ: 0
  }, {
    r: [[130, 1]],
    w: 0,
    f: 0,
    Ⲇⵠⵠ: 1,
    e: 0,
    id: 21,
    ᐃΔΔᐃ: 49,
    time: 0.2,
    Δᐃᐃ: 0
  }, {
    r: [[109, 100], [108, 50]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 22,
    ᐃΔΔᐃ: 53,
    time: 1 / 10,
    Δᐃᐃ: 0
  }, {
    r: [[53, 1], [235, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 23,
    ᐃΔΔᐃ: 54,
    time: 0.016666666666666666,
    Δᐃᐃ: 0
  }, {
    r: [[120, 4], [161, 4], [174, 4]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 24,
    ᐃΔΔᐃ: 28,
    time: 1 / 15,
    Δᐃᐃ: 0
  }, {
    r: [[109, 40]],
    w: 0,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 25,
    ᐃΔΔᐃ: 12,
    time: 1 / 5,
    Δᐃᐃ: 1
  }, {
    r: [[12, 1], [109, 60], [108, 10]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 26,
    ᐃΔΔᐃ: 13,
    time: 1 / 10,
    Δᐃᐃ: 1
  }, {
    r: [[109, 80], [111, 30], [108, 30], [13, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 27,
    ᐃΔΔᐃ: 14,
    Δᐃᐃ: 1,
    time: 1 / 20
  }, {
    r: [[109, 200], [112, 40], [111, 60], [14, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 28,
    ᐃΔΔᐃ: 15,
    time: 1 / 30,
    Δᐃᐃ: 1
  }, {
    r: [[121, 40], [112, 80], [111, 90], [15, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 29,
    ᐃΔΔᐃ: 33,
    time: 1 / 60,
    Δᐃᐃ: 1
  }, {
    r: [[202, 40], [121, 80], [112, 90], [33, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 30,
    ᐃΔΔᐃ: 34,
    time: 1 / 90,
    Δᐃᐃ: 1
  }, {
    r: [[147, 20], [185, 1], [121, 100], [149, 3]],
    w: 1,
    f: 1,
    Ⲇⵠⵠ: 1,
    e: 0,
    id: 31,
    ᐃΔΔᐃ: 16,
    time: 0.008333333333333333,
    Δᐃᐃ: 1
  }, {
    r: [[16, 1], [187, 1], [202, 100], [150, 2]],
    w: 1,
    f: 1,
    Ⲇⵠⵠ: 1,
    e: 0,
    id: 32,
    ᐃΔΔᐃ: 17,
    time: 1 / 200,
    Δᐃᐃ: 1
  }, {
    r: [[12, 1], [197, 5], [161, 6]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 33,
    ᐃΔΔᐃ: 18,
    time: 0.03333333333333333,
    Δᐃᐃ: 1
  }, {
    r: [[109, 30]],
    w: 0,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 34,
    ᐃΔΔᐃ: 57,
    time: 0.2,
    Δᐃᐃ: 1
  }, {
    r: [[109, 50], [108, 25], [57, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 35,
    ᐃΔΔᐃ: 0,
    time: 1 / 10,
    Δᐃᐃ: 1
  }, {
    r: [[109, 60], [111, 40], [108, 50], [0, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 36,
    ᐃΔΔᐃ: 5,
    time: 1 / 20,
    Δᐃᐃ: 1
  }, {
    r: [[112, 40], [111, 60], [108, 80], [5, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 37,
    ᐃΔΔᐃ: 6,
    time: 0.03333333333333333,
    Δᐃᐃ: 1
  }, {
    r: [[112, 60], [111, 100], [121, 40], [6, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 38,
    ᐃΔΔᐃ: 30,
    time: 1 / 60,
    Δᐃᐃ: 1
  }, {
    r: [[112, 100], [121, 80], [202, 40], [30, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 39,
    ᐃΔΔᐃ: 19,
    time: 1 / 90,
    Δᐃᐃ: 1
  }, {
    r: [[110, 3]],
    w: 0,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 40,
    ᐃΔΔᐃ: 115,
    time: 1 / 5,
    Δᐃᐃ: 3
  }, {
    r: [[134, 3]],
    w: 0,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 41,
    ᐃΔΔᐃ: 132,
    time: 1 / 5,
    Δᐃᐃ: 3
  }, {
    r: [[189, 8]],
    w: 0,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 42,
    ᐃΔΔᐃ: 188,
    time: 1 / 5,
    Δᐃᐃ: 3
  }, {
    r: [[192, 8]],
    w: 0,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 43,
    ᐃΔΔᐃ: 191,
    time: 0.2,
    Δᐃᐃ: 3
  }, {
    r: [[194, 8]],
    w: 0,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 44,
    ᐃΔΔᐃ: 193,
    time: 1 / 5,
    Δᐃᐃ: 3
  }, {
    r: [[205, 8]],
    w: 0,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 45,
    ᐃΔΔᐃ: 204,
    time: 1 / 5,
    Δᐃᐃ: 3
  }, {
    r: [[207, 8]],
    w: 0,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 46,
    ᐃΔΔᐃ: 206,
    time: 1 / 5,
    Δᐃᐃ: 3
  }, {
    r: [[209, 16]],
    w: 0,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 47,
    ᐃΔΔᐃ: 208,
    time: 1 / 5,
    Δᐃᐃ: 3
  }, {
    r: [[211, 16]],
    w: 0,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 48,
    ᐃΔΔᐃ: 210,
    time: 1 / 5,
    Δᐃᐃ: 3
  }, {
    r: [[116, 1]],
    w: 0,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 49,
    ᐃΔΔᐃ: 117,
    time: 1 / 5,
    Δᐃᐃ: 3
  }, {
    r: [[137, 1]],
    w: 0,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 50,
    ᐃΔΔᐃ: 138,
    time: 1 / 3,
    Δᐃᐃ: 3
  }, {
    r: [[131, 3]],
    w: 0,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 51,
    ᐃΔΔᐃ: 143,
    time: 0.3333333333333333,
    Δᐃᐃ: 3
  }, {
    r: [[131, 3], [110, 1]],
    w: 0,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 52,
    ᐃΔΔᐃ: 133,
    time: 1 / 3,
    Δᐃᐃ: 3
  }, {
    r: [[131, 5], [110, 2], [142, 2]],
    w: 0,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 53,
    ᐃΔΔᐃ: 136,
    time: 0.2,
    Δᐃᐃ: 3
  }, {
    r: [[161, 2]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 54,
    ᐃΔΔᐃ: 195,
    time: 1 / 5,
    Δᐃᐃ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 55,
    ᐃΔΔᐃ: 162,
    time: 1 / 5,
    Δᐃᐃ: 5
  }, {
    r: [[162, 1], [108, 17]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 56,
    ᐃΔΔᐃ: 163,
    time: 1 / 5,
    Δᐃᐃ: 5
  }, {
    r: [[163, 1], [111, 14]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 57,
    ᐃΔΔᐃ: 164,
    time: 1 / 5,
    Δᐃᐃ: 5
  }, {
    r: [[164, 1], [112, 11]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 58,
    ᐃΔΔᐃ: 165,
    time: 1 / 5,
    Δᐃᐃ: 5
  }, {
    r: [[165, 1], [121, 8]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 59,
    ᐃΔΔᐃ: 122,
    time: 1 / 5,
    Δᐃᐃ: 5
  }, {
    r: [[122, 1], [202, 5]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 60,
    ᐃΔΔᐃ: 217,
    time: 1 / 5,
    Δᐃᐃ: 5
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 61,
    ᐃΔΔᐃ: 166,
    time: 0.125,
    Δᐃᐃ: 5
  }, {
    r: [[166, 1], [108, 27]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 62,
    ᐃΔΔᐃ: 171,
    time: 1 / 8,
    Δᐃᐃ: 5
  }, {
    r: [[171, 1], [111, 24]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 63,
    ᐃΔΔᐃ: 172,
    time: 1 / 8,
    Δᐃᐃ: 5
  }, {
    r: [[172, 1], [112, 21]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 64,
    ᐃΔΔᐃ: 173,
    time: 1 / 8,
    Δᐃᐃ: 5
  }, {
    r: [[173, 1], [121, 18]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 65,
    ᐃΔΔᐃ: 124,
    time: 0.125,
    Δᐃᐃ: 5
  }, {
    r: [[124, 1], [202, 15]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 66,
    ᐃΔΔᐃ: 218,
    time: 1 / 8,
    Δᐃᐃ: 5
  }, {
    r: [[162, 1], [109, 40], [108, 30]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 67,
    ᐃΔΔᐃ: 160,
    time: 1 / 20,
    Δᐃᐃ: 5
  }, {
    r: [[163, 1], [108, 70]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 68,
    ᐃΔΔᐃ: 168,
    time: 1 / 20,
    Δᐃᐃ: 5
  }, {
    r: [[164, 1], [111, 40], [108, 30]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 69,
    ᐃΔΔᐃ: 169,
    time: 1 / 20,
    Δᐃᐃ: 5
  }, {
    r: [[165, 1], [112, 40], [108, 30]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 70,
    ᐃΔΔᐃ: 170,
    time: 1 / 20,
    Δᐃᐃ: 5
  }, {
    r: [[122, 1], [121, 40], [108, 30]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 71,
    ᐃΔΔᐃ: 123,
    time: 1 / 20,
    Δᐃᐃ: 5
  }, {
    r: [[217, 1], [202, 40], [111, 30]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 72,
    ᐃΔΔᐃ: 219,
    time: 0.05,
    Δᐃᐃ: 5
  }, {
    r: [[166, 1], [109, 80], [108, 60]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 73,
    ᐃΔΔᐃ: 212,
    time: 1 / 20,
    Δᐃᐃ: 5
  }, {
    r: [[171, 1], [108, 140]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 74,
    ᐃΔΔᐃ: 213,
    time: 1 / 20,
    Δᐃᐃ: 5
  }, {
    r: [[172, 1], [111, 80], [108, 60]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 75,
    ᐃΔΔᐃ: 214,
    time: 1 / 20,
    Δᐃᐃ: 5
  }, {
    r: [[173, 1], [112, 80], [108, 60]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 76,
    ᐃΔΔᐃ: 215,
    time: 1 / 20,
    Δᐃᐃ: 5
  }, {
    r: [[124, 1], [121, 80], [108, 60]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 77,
    ᐃΔΔᐃ: 216,
    time: 0.05,
    Δᐃᐃ: 5
  }, {
    r: [[218, 1], [202, 80], [111, 60]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 78,
    ᐃΔΔᐃ: 220,
    time: 1 / 20,
    Δᐃᐃ: 5
  }, {
    r: [[109, 25], [111, 2]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 79,
    ᐃΔΔᐃ: 167,
    time: 0.2,
    Δᐃᐃ: 4
  }, {
    r: [[120, 1], [2, 1], [161, 2]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 80,
    ᐃΔΔᐃ: 23,
    time: 1 / 5,
    Δᐃᐃ: 2
  }, {
    r: [[120, 5], [222, 20], [147, 5], [2, 5]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 81,
    ᐃΔΔᐃ: 24,
    time: 0.03333333333333333,
    Δᐃᐃ: 2
  }, {
    r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 82,
    ᐃΔΔᐃ: 82,
    time: 1 / 60,
    Δᐃᐃ: 2
  }, {
    r: [[2, 1], [161, 2]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 83,
    ᐃΔΔᐃ: 10,
    time: 1 / 5,
    Δᐃᐃ: 2
  }, {
    r: [[10, 1], [174, 5], [161, 4]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 84,
    ᐃΔΔᐃ: 11,
    time: 1 / 12,
    Δᐃᐃ: 2
  }, {
    r: [[11, 1], [146, 5], [147, 4]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 85,
    ᐃΔΔᐃ: 40,
    time: 1 / 30,
    Δᐃᐃ: 2
  }, {
    r: [[40, 1], [146, 5], [240, 10], [147, 4]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 86,
    ᐃΔΔᐃ: 88,
    time: 1 / 50,
    Δᐃᐃ: 2
  }, {
    r: [[109, 50]],
    w: 0,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 87,
    ᐃΔΔᐃ: 58,
    time: 1 / 5,
    Δᐃᐃ: 2
  }, {
    r: [[108, 75], [109, 75], [58, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 88,
    ᐃΔΔᐃ: 25,
    time: 0.1,
    Δᐃᐃ: 2
  }, {
    r: [[108, 90], [109, 90], [111, 90], [25, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 89,
    ᐃΔΔᐃ: 26,
    time: 1 / 20,
    Δᐃᐃ: 2
  }, {
    r: [[108, 100], [111, 100], [112, 100], [26, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 90,
    ᐃΔΔᐃ: 27,
    time: 1 / 30,
    Δᐃᐃ: 2
  }, {
    r: [[121, 80], [111, 150], [112, 120], [27, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 91,
    ᐃΔΔᐃ: 43,
    time: 1 / 60,
    Δᐃᐃ: 2
  }, {
    r: [[202, 80], [112, 150], [121, 120], [43, 1]],
    w: 1,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 92,
    ᐃΔΔᐃ: 44,
    time: 1 / 90,
    Δᐃᐃ: 2
  }, {
    r: [[139, 2], [112, 40], [161, 4]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 93,
    ᐃΔΔᐃ: 48,
    time: 0.05,
    Δᐃᐃ: 2
  }, {
    r: [[48, 1], [111, 80], [129, 1], [121, 20]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 94,
    ᐃΔΔᐃ: 47,
    time: 0.011111111111111112,
    Δᐃᐃ: 2
  }, {
    r: [[203, 5], [112, 50], [147, 5]],
    w: 1,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 95,
    ᐃΔΔᐃ: 20,
    time: 1 / 20,
    Δᐃᐃ: 2
  }, {
    r: [[20, 1], [203, 10], [121, 50]],
    w: 1,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 96,
    ᐃΔΔᐃ: 21,
    time: 1 / 60,
    Δᐃᐃ: 2
  }, {
    r: [[21, 1], [203, 15], [121, 50], [202, 50]],
    w: 1,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 97,
    ᐃΔΔᐃ: 22,
    time: 1 / 90,
    Δᐃᐃ: 2
  }, {
    r: [[161, 4], [237, 2]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 98,
    ᐃΔΔᐃ: 80,
    time: 1 / 15,
    Δᐃᐃ: 2
  }, {
    r: [[80, 1], [161, 6], [237, 4], [232, 12], [222, 4]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 99,
    ᐃΔΔᐃ: 81,
    time: 1 / 150,
    Δᐃᐃ: 2
  }, {
    r: [[161, 6], [174, 5]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 100,
    ᐃΔΔᐃ: 29,
    time: 1 / 15,
    Δᐃᐃ: 2
  }, {
    r: [[109, 20]],
    w: 0,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 101,
    ᐃΔΔᐃ: 120,
    time: 1 / 3,
    Δᐃᐃ: 4
  }, {
    r: [[112, 1], [161, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 102,
    ᐃΔΔᐃ: 147,
    time: 1 / 3,
    Δᐃᐃ: 4
  }, {
    r: [[111, 10]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 103,
    ᐃΔΔᐃ: 148,
    time: 0.2,
    Δᐃᐃ: 4
  }, {
    r: [[111, 250]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 104,
    ᐃΔΔᐃ: 158,
    time: 0.016666666666666666,
    Δᐃᐃ: 4
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 105,
    ᐃΔΔᐃ: 159,
    time: 0.1,
    Δᐃᐃ: 4
  }, {
    r: [[109, 15]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 106,
    ᐃΔΔᐃ: 125,
    time: 1 / 5,
    Δᐃᐃ: 4
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 107,
    ᐃΔΔᐃ: 190,
    time: 0.2,
    Δᐃᐃ: 4
  }, {
    r: [[109, 120]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 108,
    ᐃΔΔᐃ: 221,
    time: 1 / 15,
    Δᐃᐃ: 4
  }, {
    r: [[109, 20], [140, 15]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 109,
    ᐃΔΔᐃ: 141,
    time: 1 / 5,
    Δᐃᐃ: 4
  }, {
    r: [[126, 25]],
    w: 1,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 110,
    ᐃΔΔᐃ: 128,
    time: 0.2,
    Δᐃᐃ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    Ⲇⵠⵠ: 1,
    e: 0,
    id: 111,
    ᐃΔΔᐃ: 127,
    time: 1 / 5,
    Δᐃᐃ: 3
  }, {
    r: [[142, 20], [128, 1]],
    w: 0,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 112,
    ᐃΔΔᐃ: 127,
    time: 1 / 10,
    Δᐃᐃ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 1,
    id: 113,
    ᐃΔΔᐃ: 127,
    time: 1 / 3,
    Δᐃᐃ: 3
  }, {
    r: [[109, 60], [108, 20], [161, 2]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 114,
    ᐃΔΔᐃ: 135,
    time: 1 / 10,
    Δᐃᐃ: 4
  }, {
    r: [[112, 40], [108, 45]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 115,
    ᐃΔΔᐃ: 151,
    time: 1 / 20,
    Δᐃᐃ: 4
  }, {
    r: [[151, 1], [234, 40], [238, 1]],
    w: 1,
    f: 1,
    Ⲇⵠⵠ: 1,
    e: 0,
    id: 116,
    ᐃΔΔᐃ: 152,
    time: 1 / 200,
    Δᐃᐃ: 4
  }, {
    r: [[109, 50], [108, 100]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 117,
    ᐃΔΔᐃ: 153,
    time: 0.011111111111111112,
    Δᐃᐃ: 4
  }, {
    r: [[108, 60], [111, 120]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 118,
    ᐃΔΔᐃ: 154,
    time: 1 / 90,
    Δᐃᐃ: 4
  }, {
    r: [[111, 70], [112, 140]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 119,
    ᐃΔΔᐃ: 155,
    time: 1 / 90,
    Δᐃᐃ: 4
  }, {
    r: [[112, 80], [121, 160]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 120,
    ᐃΔΔᐃ: 156,
    time: 1 / 90,
    Δᐃᐃ: 4
  }, {
    r: [[121, 90], [202, 180]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 121,
    ᐃΔΔᐃ: 157,
    time: 1 / 90,
    Δᐃᐃ: 4
  }, {
    r: [[108, 70]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 122,
    ᐃΔΔᐃ: 55,
    time: 1 / 10,
    Δᐃᐃ: 0
  }, {
    r: [[108, 70], [109, 50]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 123,
    ᐃΔΔᐃ: 56,
    time: 1 / 10,
    Δᐃᐃ: 0
  }, {
    r: [[109, 40], [108, 40]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 124,
    ᐃΔΔᐃ: 144,
    time: 1 / 10,
    Δᐃᐃ: 4
  }, {
    r: [[143, 1], [117, 1]],
    w: 0,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 125,
    ᐃΔΔᐃ: 145,
    time: 1 / 3,
    Δᐃᐃ: 3
  }, {
    r: [[147, 30], [184, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    Ⲇⵠⵠ: 1,
    e: 0,
    id: 126,
    ᐃΔΔᐃ: 59,
    time: 1 / 120,
    Δᐃᐃ: 2
  }, {
    r: [[59, 1], [186, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    Ⲇⵠⵠ: 1,
    e: 0,
    id: 127,
    ᐃΔΔᐃ: 60,
    time: 1 / 180,
    Δᐃᐃ: 2
  }, {
    r: [[26, 1], [197, 10], [196, 10], [161, 10]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 128,
    ᐃΔΔᐃ: 61,
    time: 1 / 60,
    Δᐃᐃ: 2
  }, {
    r: [[147, 20], [185, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    Ⲇⵠⵠ: 1,
    e: 0,
    id: 129,
    ᐃΔΔᐃ: 62,
    time: 1 / 120,
    Δᐃᐃ: 1
  }, {
    r: [[62, 1], [187, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    Ⲇⵠⵠ: 1,
    e: 0,
    id: 130,
    ᐃΔΔᐃ: 63,
    time: 0.005555555555555556,
    Δᐃᐃ: 1
  }, {
    r: [[109, 100], [161, 4]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 131,
    ᐃΔΔᐃ: 64,
    time: 1 / 20,
    Δᐃᐃ: 1
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 132,
    ᐃΔΔᐃ: 101,
    time: 1 / 5,
    Δᐃᐃ: 1
  }, {
    r: [[108, 200], [161, 8], [222, 4], [64, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 133,
    ᐃΔΔᐃ: 65,
    time: 1 / 25,
    Δᐃᐃ: 1
  }, {
    r: [[108, 20], [231, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 134,
    ᐃΔΔᐃ: 102,
    time: 1 / 5,
    Δᐃᐃ: 1
  }, {
    r: [[111, 200], [161, 12], [231, 4], [222, 4], [65, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 135,
    ᐃΔΔᐃ: 66,
    time: 1 / 30,
    Δᐃᐃ: 1
  }, {
    r: [[111, 20], [222, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 136,
    ᐃΔΔᐃ: 103,
    time: 1 / 10,
    Δᐃᐃ: 1
  }, {
    r: [[112, 200], [147, 10], [231, 8], [222, 8], [66, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 137,
    ᐃΔΔᐃ: 67,
    time: 1 / 35,
    Δᐃᐃ: 1
  }, {
    r: [[112, 10], [222, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 138,
    ᐃΔΔᐃ: 104,
    time: 1 / 10,
    Δᐃᐃ: 1
  }, {
    r: [[121, 200], [147, 10], [222, 8], [232, 8], [67, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 139,
    ᐃΔΔᐃ: 68,
    time: 0.025,
    Δᐃᐃ: 1
  }, {
    r: [[121, 10], [232, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 140,
    ᐃΔΔᐃ: 105,
    time: 1 / 15,
    Δᐃᐃ: 1
  }, {
    r: [[202, 200], [147, 10], [129, 1], [68, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 141,
    ᐃΔΔᐃ: 69,
    time: 0.022222222222222223,
    Δᐃᐃ: 1
  }, {
    r: [[202, 10], [232, 1], [203, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 142,
    ᐃΔΔᐃ: 106,
    time: 1 / 15,
    Δᐃᐃ: 1
  }, {
    r: [[234, 200], [147, 10], [185, 1], [69, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 143,
    ᐃΔΔᐃ: 70,
    time: 0.02,
    Δᐃᐃ: 1
  }, {
    r: [[234, 10], [238, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 144,
    ᐃΔΔᐃ: 107,
    time: 0.05,
    Δᐃᐃ: 1
  }, {
    r: [[109, 100]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 145,
    ᐃΔΔᐃ: 71,
    time: 1 / 25,
    Δᐃᐃ: 1
  }, {
    r: [[71, 1], [108, 100], [109, 50]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 146,
    ᐃΔΔᐃ: 72,
    time: 1 / 40,
    Δᐃᐃ: 1
  }, {
    r: [[72, 1], [111, 50], [108, 50], [109, 50]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 147,
    ᐃΔΔᐃ: 73,
    time: 1 / 50,
    Δᐃᐃ: 1
  }, {
    r: [[73, 1], [112, 50], [111, 50], [108, 50]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 148,
    ᐃΔΔᐃ: 74,
    time: 1 / 70,
    Δᐃᐃ: 1
  }, {
    r: [[74, 1], [121, 50], [112, 50], [111, 50]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 149,
    ᐃΔΔᐃ: 75,
    time: 0.011111111111111112,
    Δᐃᐃ: 1
  }, {
    r: [[75, 1], [202, 50], [121, 50], [112, 50]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 150,
    ᐃΔΔᐃ: 76,
    time: 1 / 120,
    Δᐃᐃ: 1
  }, {
    r: [[175, 1], [111, 200]],
    w: 1,
    f: 1,
    Ⲇⵠⵠ: 1,
    e: 0,
    id: 151,
    ᐃΔΔᐃ: 77,
    time: 0.016666666666666666,
    Δᐃᐃ: 2
  }, {
    r: [[176, 1], [111, 200]],
    w: 1,
    f: 1,
    Ⲇⵠⵠ: 1,
    e: 0,
    id: 152,
    ᐃΔΔᐃ: 78,
    time: 1 / 60,
    Δᐃᐃ: 2
  }, {
    r: [[177, 1], [111, 200], [149, 1]],
    w: 1,
    f: 1,
    Ⲇⵠⵠ: 1,
    e: 0,
    id: 153,
    ᐃΔΔᐃ: 79,
    time: 0.016666666666666666,
    Δᐃᐃ: 2
  }, {
    r: [[174, 10], [2, 5], [161, 6]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 154,
    ᐃΔΔᐃ: 83,
    time: 0.1,
    Δᐃᐃ: 2
  }, {
    r: [[2, 3], [161, 2]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 155,
    ᐃΔΔᐃ: 84,
    time: 0.1,
    Δᐃᐃ: 2
  }, {
    r: [[83, 1], [179, 1], [146, 15], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 156,
    ᐃΔΔᐃ: 85,
    time: 1 / 60,
    Δᐃᐃ: 2
  }, {
    r: [[84, 1], [178, 1], [146, 10], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 157,
    ᐃΔΔᐃ: 86,
    time: 0.016666666666666666,
    Δᐃᐃ: 2
  }, {
    r: [[181, 1]],
    w: 0,
    f: 0,
    Ⲇⵠⵠ: 1,
    e: 0,
    id: 158,
    ᐃΔΔᐃ: 180,
    time: 0.2,
    Δᐃᐃ: 0
  }, {
    r: [[109, 20], [161, 1]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 159,
    ᐃΔΔᐃ: 181,
    time: 1 / 5,
    Δᐃᐃ: 0
  }, {
    r: [[108, 100], [140, 30]],
    w: 1,
    f: 1,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 160,
    ᐃΔΔᐃ: 182,
    time: 0.1,
    Δᐃᐃ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 161,
    ᐃΔΔᐃ: 183,
    time: 1 / 5,
    Δᐃᐃ: 4
  }, {
    r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 162,
    ᐃΔΔᐃ: 198,
    time: 1 / 20,
    Δᐃᐃ: 4
  }, {
    r: [[109, 250], [147, 10], [146, 2], [139, 2]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 163,
    ᐃΔΔᐃ: 223,
    time: 1 / 50,
    Δᐃᐃ: 4
  }, {
    r: [[109, 250], [161, 10], [146, 2], [222, 8]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 164,
    ᐃΔΔᐃ: 224,
    time: 1 / 50,
    Δᐃᐃ: 4
  }, {
    r: [[161, 10], [174, 6], [2, 4], [126, 50]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 165,
    ᐃΔΔᐃ: 89,
    time: 1 / 20,
    Δᐃᐃ: 4
  }, {
    r: [[109, 250], [161, 10], [120, 10], [231, 8]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 166,
    ᐃΔΔᐃ: 230,
    time: 0.02,
    Δᐃᐃ: 4
  }, {
    r: [[109, 40]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 167,
    ᐃΔΔᐃ: 94,
    time: 0.2,
    Δᐃᐃ: 1
  }, {
    r: [[94, 1], [108, 40], [109, 50]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 168,
    ᐃΔΔᐃ: 95,
    time: 0.1,
    Δᐃᐃ: 1
  }, {
    r: [[95, 1], [111, 40], [108, 50], [109, 60]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 169,
    ᐃΔΔᐃ: 96,
    time: 1 / 20,
    Δᐃᐃ: 1
  }, {
    r: [[96, 1], [112, 40], [111, 70], [108, 80]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 170,
    ᐃΔΔᐃ: 97,
    time: 1 / 30,
    Δᐃᐃ: 1
  }, {
    r: [[97, 1], [121, 40], [112, 70], [111, 110]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 171,
    ᐃΔΔᐃ: 98,
    time: 1 / 60,
    Δᐃᐃ: 1
  }, {
    r: [[98, 1], [202, 50], [121, 80], [112, 110]],
    w: 1,
    f: 0,
    Ⲇⵠⵠ: 0,
    e: 0,
    id: 172,
    ᐃΔΔᐃ: 99,
    time: 1 / 90,
    Δᐃᐃ: 1
  }];
  const Ot = 6;
  Ch = 300;
  ΔΔΔ = {
    ⵠⵠΔⲆΔⲆᐃ: 300,
    ⵠⲆⲆᐃΔΔΔ: 301,
    ᐃⵠᐃᐃΔⲆⵠ: 302,
    ⲆⵠⲆⲆΔⲆⲆ: 303,
    ᐃᐃΔⲆΔᐃⲆ: 304,
    ⵠⲆΔᐃⲆⵠⲆ: 305,
    ⵠΔΔΔⵠᐃⵠ: 306,
    ΔΔΔΔⵠⵠⲆ: 307,
    ⵠⲆⵠΔⲆⲆⲆ: 308,
    ⵠⵠᐃᐃΔⵠΔ: 309,
    ᐃⲆⲆⵠⵠⲆⲆ: 310,
    ΔᐃⵠⵠⵠᐃⲆ: 311,
    EMPTY: 312,
    ⵠⲆⲆᐃⵠⵠΔ: 313,
    ⲆⲆΔΔⲆⲆᐃ: 314,
    ⵠᐃᐃΔΔΔⲆ: 315,
    ᐃⲆᐃΔᐃⵠⲆ: 316,
    ΔΔⲆⵠΔᐃᐃ: 317,
    ᐃᐃΔᐃᐃΔΔ: 318,
    ΔΔⵠᐃᐃᐃⲆ: 319,
    ΔᐃⵠⲆⵠᐃⵠ: 320,
    ⵠΔⲆⲆⵠⲆᐃ: 321,
    ⵠⵠⵠᐃⲆ: 322,
    ⲆⲆᐃᐃᐃΔᐃ: 323,
    ⵠⲆᐃⵠΔ: 324,
    ᐃΔⲆΔⵠΔᐃ: 325,
    ⲆᐃⲆⵠΔᐃΔ: 326,
    ᐃΔⵠⲆᐃⲆᐃ: 327,
    ⲆⲆⲆⵠΔᐃᐃ: 328,
    ᐃᐃΔⵠⲆⵠⵠ: 329,
    ᐃΔΔΔⵠⵠᐃ: 330,
    ⵠⲆᐃᐃⵠᐃⵠ: 331,
    POINTS: 332,
    ᐃΔΔᐃⵠⲆᐃ: 333,
    ᐃⲆⵠΔⵠⵠᐃ: 334,
    ᐃΔΔⵠⵠⵠΔ: 335,
    ⲆΔⲆⲆᐃᐃⲆ: 336,
    ⲆᐃⵠΔΔΔΔ: 337,
    ᐃⵠⲆⲆⲆᐃᐃ: 338,
    ᐃᐃΔΔⲆⵠᐃ: 339,
    ᐃⲆᐃᐃᐃΔⲆ: 340,
    ΔⵠΔⵠⵠΔⵠ: 341,
    ΔᐃᐃᐃᐃⲆⲆ: 342,
    ΔⵠⲆⲆΔΔⲆ: 343
  };
  function Cb() {
    _b[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
    _b[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
    _b[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
    _b[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
    _b[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
    _b[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
    _b[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
    _b[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
    _b[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
    _b[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
    _b[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
    _b[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
    _b[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
    _b[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
    _b[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
    _b[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
    _b[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
    _b[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
    _b[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
    _b[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
    _b[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
    _b[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
    _b[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
    _b[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
    _b[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
    _b[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
    _b[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
    _b[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
    _b[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
    _b[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
    _b[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
    _b[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
    _b[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
    _b[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
    _b[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
    _b[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
    _b[232] = ["Vulture Feather", "From a deadly vulture"];
    _b[234] = ["Emerald", "How many golden breads can you get from it?"];
    _b[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
    _b[80] = ["Turban", "Useful to survive in the desert."];
    _b[81] = ["Ninja outfit", "Essential to survive in the desert"];
    _b[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
    _b[236] = ["Pilot Glasses"];
    _b[225] = ["Tamed Boar", "Fast on lands and slow on water."];
    _b[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
    _b[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
    _b[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
    _b[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
    _b[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
    _b[89] = ["Saddle", "Hit a boar with it to tame it."];
    _b[90] = ["Witch Hat", "You're a wizard Starvy!"];
    _b[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
    _b[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
    _b[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
    _b[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
    _b[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
    _b[224] = ["Sled", "You are faster with it in the snow"];
    _b[223] = ["Boat", "You are faster with it in the water"];
    _b[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
    _b[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 70"];
    _b[222] = ["Penguin Feather", "From a deadly cute penguin."];
    _b[231] = ["Hawk Feather", "From a deadly hawk."];
    _b[233] = ["Cactus", "Food : 20", "Water : 10"];
    _b[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
    _b[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    _b[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
    _b[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    _b[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
    _b[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
    _b[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
    _b[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
    _b[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
    _b[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
    _b[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
    _b[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
    _b[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
    _b[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
    _b[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
    _b[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
    _b[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    _b[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    _b[53] = ["Pitchfork", "Perfect for gathering"];
    _b[54] = ["Golden Pitchfork", "Essential for a real farmer."];
    _b[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
    _b[Ah.ᐃⲆⲆⵠΔⵠⵠ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
    _b[Ah.ΔᐃⵠⲆⵠⵠⲆ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
    _b[Ah.ᐃⵠⵠΔΔᐃⵠ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
    _b[Ah.ᐃΔΔΔᐃⲆⵠ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
    _b[Ah.ΔⵠⵠᐃⲆΔⲆ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
    _b[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
    _b[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
    _b[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
    _b[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
    _b[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
    _b[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
    _b[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
    _b[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
    _b[203] = ["Flame", "It's hot!"];
    _b[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
    _b[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
    _b[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
    _b[202] = ["Reidite", "The ultimate ore"];
    _b[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
    Pt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Pt[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
    Pt[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
    Pt[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
    Pt[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
    Pt[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
    Pt[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
    Pt[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
    Pt[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
    Pt[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
    Pt[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
    Pt[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
    Pt[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
    Pt[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
    Pt[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
    Pt[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
    Pt[38] = ["You died crushed by an angry baby mammoth."];
    Pt[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
    Pt[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
    _b[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    _b[341] = "A sandstorm is approaching in a few seconds.";
    _b[340] = "The sandstorm will soon stop.";
    _b[343] = "A blizzard is approaching in a few seconds.";
    _b[342] = "The blizzard will soon stop.";
    _b[328] = " BACK TO THE GAME";
    _b[329] = " Share on Twitter";
    _b[330] = " Share on Facebook";
    _b[331] = "You can buy items on the shop in the next game with your points";
    _b[332] = "points";
    _b[333] = "Score";
    _b[334] = "Kill";
    _b[335] = "Days survived";
    _b[336] = "Building method: Free. Press G to change";
    _b[337] = "Building method: Grid. Press G to change";
    _b[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    _b[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
    _b[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
    _b[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    _b[7] = ["Hand"];
    _b[140] = ["Dirt", "Dirty!"];
    _b[126] = ["Sand", "I got it in my eyes!"];
    _b[109] = ["Wood", "You can't get enough of it!"];
    _b[108] = ["Stone", "Also called a rock"];
    _b[111] = ["Gold", "Be generous, give it to others"];
    _b[112] = ["Diamond", "What will you make with it?"];
    _b[121] = ["Amethyst", "It's Mauve like Lapa"];
    _b[131] = ["Flour", "Used in cooking"];
    _b[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
    _b[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    _b[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
    _b[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    _b[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
    _b[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
    _b[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
    _b[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    _b[200] = ["Candies", "Only for children!", "Food: 20"];
    _b[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
    _b[201] = ["Garland", "Perfect decoration for roofs"];
    _b[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
    _b[110] = ["Berry", "Berry tasty!", "Food: 10"];
    _b[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    _b[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
    _b[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    _b[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    _b[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    _b[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    _b[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
    _b[194] = ["Thorn bush", "It stings!"];
    _b[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
    _b[142] = ["Ice", "Useful for making cakes and water"];
    _b[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
    _b[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    _b[2] = ["Rabbit Fur", "That rabbit was so cute..."];
    _b[178] = ["Pure Fur", "You're a bread factory"];
    _b[179] = ["Dark Fur", "You get ready to do something wrong"];
    _b[146] = ["Winter Fur", "These animals just wanted a hug..."];
    _b[139] = ["Scales", "It smells like fish!"];
    _b[129] = ["Kraken Skin", "Weren't you too scared?"];
    _b[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
    _b[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
    _b[114] = ["Workbench", "Very useful to craft all kinds of objects"];
    _b[161] = ["Cord", "Used in crafting Hats and Bag"];
    _b[147] = ["Diamond Cord", "Used in crafting Special Hats"];
    _b[167] = ["Chest", "Allows you to store items", "Durability: 500"];
    _b[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
    _b[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
    _b[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
    _b[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
    _b[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
    _b[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
    _b[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
    _b[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
    _b[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
    _b[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
    _b[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
    _b[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
    _b[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
    _b[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
    _b[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
    _b[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
    _b[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
    _b[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 95"];
    _b[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
    _b[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
    _b[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
    _b[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
    _b[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
    _b[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
    _b[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
    _b[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
    _b[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    _b[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
    _b[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
    _b[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
    _b[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
    _b[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
    _b[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
    _b[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
    _b[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
    _b[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
    _b[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
    _b[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
    _b[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
    _b[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
    _b[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
    _b[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
    _b[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    _b[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
    _b[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    _b[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
    _b[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
    _b[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
    _b[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
    _b[175] = ["Green Gemstone", "You didn't cheat, promise?"];
    _b[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
    _b[177] = ["Blue Gemstone", "For too kind people"];
    _b[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
    _b[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
    _b[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
    _b[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
    _b[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
    _b[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
    _b[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
    _b[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
    _b[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
    _b[29] = ["Bag", "More space for your items!"];
    _b[120] = ["Paper", "Used in book-crafting"];
    _b[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
    _b[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
    _b[148] = ["Lock", "Allow you to lock your chest"];
    _b[158] = ["Lock-pick", "Allows you to unlock one chest"];
    _b[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
    _b[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
    _b[183] = ["Sign", "Leave a message to others", "Durability: 200"];
    _b[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
    _b[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
    _b[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    _b[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
    _b[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
    _b[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
    _b[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
    _b[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
    _b[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
    _b[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
    _b[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
    _b[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
    _b[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
    _b[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
    _b[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
    _b[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
    _b[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
    _b[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
    _b[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
    _b[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
    _b[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
    _b[300] = "You cannot join this server";
    _b[301] = "Kicked: ";
    _b[302] = "Your key is already used by someone else";
    _b[303] = "Your key is wrong";
    _b[304] = "You have an old version, you need to clear your cache";
    _b[338] = "Your client version is too recent for this server. The server is being updated";
    _b[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
    _b[305] = "There are no more new resources";
    _b[306] = "You survived 1 day";
    _b[307] = "You survived ";
    _b[308] = " days";
    _b[309] = "You are dead ;-;";
    _b[310] = "Server cannot find spawn location! Spam the play button!";
    _b[311] = "Server is full! Spam the play button!";
    _b[312] = "Resource is empty";
    _b[313] = "Inventory is full (right-click to empty items)";
    _b[314] = " is dead";
    _b[315] = "This is not the right tool";
    _b[316] = "You joined a team";
    _b[317] = "You are dead";
    _b[318] = " joined the team";
    _b[319] = "Your team was destroyed";
    _b[320] = "You left the team";
    _b[321] = " left the team";
    _b[322] = "Someone stole your token :>";
    _b[323] = "Choose a server";
    _b[324] = "players";
    _b[325] = "total players";
    _b[326] = "players on this mode";
    _b[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    Pt[0] = ["You were killed for no reason"];
    Pt[1] = ["You starved to death, as the name of the game implies"];
    Pt[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
    Pt[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
    Pt[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
    Pt[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
    Pt[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
    Pt[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
    Pt[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
    Pt[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
    Pt[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
    Pt[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
    Pt[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
    Pt[13] = ["You died of thirst. Better drink your own piss."];
    Pt[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
    Pt[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
    Pt[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
    Pt[17] = ["Your skin's falling apart, the sun killed you."];
    Pt[18] = ["Garlic stored in your pockets boiled your brain."];
    Pt[19] = ["As a vampire, don't stand near the garlic cloves."];
    Pt[20] = ["You ate garlic as a vampire, what did you expect?"];
    Pt[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
    ΔᐃΔᐃⲆ = "Uuunnnggg";
    ⲆⵠⲆⲆᐃⲆᐃ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
  }
  const Tb = 10;
  const fb = 17;
  function zb() {
    _b[184] = ["You feel a great power emanating from this orb"];
    Pt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    _b[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    _b[328] = " BACK TO THE GAME";
    _b[329] = " Share on Twitter";
    _b[330] = " Share on Facebook";
    _b[331] = "You can buy items on the shop in the next game with your points";
    _b[332] = "points";
    _b[333] = "Score";
    _b[334] = "Kill";
    _b[335] = "Days survived";
    _b[336] = "Building method: Free. Press G to change";
    _b[337] = "Building method: Grid. Press G to change";
    _b[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    _b[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    _b[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    _b[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    _b[7] = ["Рука"];
    _b[140] = ["Земля", "Грязно!"];
    _b[126] = ["Песок", "Он в моих глазах!"];
    _b[109] = ["Дерево", "Постоянно нужно больше!"];
    _b[108] = ["Камень", "Твердый"];
    _b[111] = ["Золото", "Будьте щедры, давайте его другим"];
    _b[112] = ["Алмаз", "Что вы создадите с помощью него?"];
    _b[121] = ["Аметист", "Он сиреневый, как Lapa"];
    _b[131] = ["Мука", "Используется в готовке"];
    _b[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    _b[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    _b[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
    _b[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
    _b[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
    _b[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
    _b[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
    _b[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    _b[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
    _b[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
    _b[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
    _b[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
    _b[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    _b[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    _b[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
    _b[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    _b[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    _b[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
    _b[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
    _b[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
    _b[194] = ["Колючий Куст", "Это больно!"];
    _b[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
    _b[142] = ["Лёд", "Используется для изготовления тортов и воды"];
    _b[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
    _b[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    _b[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    _b[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    _b[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
    _b[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
    _b[139] = ["Чешуя", "Она пахнет рыбой!"];
    _b[129] = ["Шкура Кракена", "Вы не испугались?"];
    _b[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
    _b[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
    _b[114] = ["Верстак", "Необходим для создания многих предметов"];
    _b[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    _b[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
    _b[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
    _b[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
    _b[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
    _b[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
    _b[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
    _b[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
    _b[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
    _b[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
    _b[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
    _b[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
    _b[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
    _b[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
    _b[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
    _b[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
    _b[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
    _b[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
    _b[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
    _b[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
    _b[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
    _b[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
    _b[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
    _b[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
    _b[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
    _b[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
    _b[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
    _b[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
    _b[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
    _b[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
    _b[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
    _b[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
    _b[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
    _b[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
    _b[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
    _b[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
    _b[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
    _b[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
    _b[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
    _b[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    _b[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
    _b[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
    _b[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
    _b[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    _b[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    _b[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    _b[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
    _b[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
    _b[185] = ["Шар Дракона", "Даётся за квест"];
    _b[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
    _b[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
    _b[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
    _b[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
    _b[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
    _b[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
    _b[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
    _b[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
    _b[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
    _b[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
    _b[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
    _b[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
    _b[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
    _b[29] = ["Рюкзак", "Больше места для ваших предметов!"];
    _b[120] = ["Бумага", "Используется при создании книги"];
    _b[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
    _b[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
    _b[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    _b[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    _b[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
    _b[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
    _b[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
    _b[190] = ["Крыша", "Немного скрывает вас и согревает!"];
    _b[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
    _b[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
    _b[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
    _b[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
    _b[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
    _b[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
    _b[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
    _b[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
    _b[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
    _b[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
    _b[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
    _b[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
    _b[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
    _b[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
    _b[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
    _b[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
    _b[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
    _b[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
    _b[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
    _b[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
    _b[300] = "Вы не можете зайти на этот сервер";
    _b[301] = "Выгнаны: ";
    _b[302] = "Ваш ключ уже используется кем-то";
    _b[303] = "Ваш ключ неправильный";
    _b[304] = "У вас старая версия, вам нужно очистить кеш";
    _b[305] = "Ресурсов больше нет";
    _b[306] = "Вы выжили 1 день";
    _b[307] = "Вы выжили ";
    _b[308] = " дней";
    _b[309] = "Вы умерли ;-;";
    _b[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    _b[311] = "Сервер заполнен! Спамьте кнопку играть!";
    _b[312] = "Ресурсы закончились";
    _b[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    _b[314] = " умер";
    _b[315] = "Это не тот инструмент";
    _b[316] = "Вы вошли в команду";
    _b[317] = "Вы умерли";
    _b[318] = " вошёл в команду";
    _b[319] = "Ваша команда была разрушена";
    _b[320] = "Вы покинули команду";
    _b[321] = " покинул команду";
    _b[322] = "Кто-то использует ваш токен :>";
    _b[323] = "Выберите сервер";
    _b[324] = "игроков";
    _b[325] = "игроков всего";
    _b[326] = "игроков в этом режиме";
    _b[327] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    Pt[0] = ["Вы были убиты без причины"];
    Pt[1] = ["Вы умерли от голода, как название игры подразумевает это"];
    Pt[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
    Pt[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
    Pt[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
    Pt[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
    Pt[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
    Pt[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
    Pt[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
    Pt[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
    Pt[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
    Pt[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
    Pt[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
    Pt[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    Pt[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
    Pt[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
    Pt[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
    Pt[17] = ["Твоя кожа разваливается, солнце убило тебя"];
    Pt[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    Pt[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    Pt[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    Pt[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
    ΔᐃΔᐃⲆ = "Uuunnnggg";
    ⲆⵠⲆⲆᐃⲆᐃ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
  }
  const yb = 19;
  const wb = 15;
  function Pb() {
    _b[184] = ["You feel a great power emanating from this orb"];
    Pt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    _b[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    _b[328] = " BACK TO THE GAME";
    _b[329] = " Share on Twitter";
    _b[330] = " Share on Facebook";
    _b[331] = "You can buy items on the shop in the next game with your points";
    _b[332] = "points";
    _b[333] = "Score";
    _b[334] = "Kill";
    _b[335] = "Days survived";
    _b[336] = "Building method: Free. Press G to change";
    _b[337] = "Building method: Grid. Press G to change";
    _b[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    _b[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    _b[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    _b[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    _b[7] = ["mão"];
    _b[140] = ["terra", "está sujo!"];
    _b[126] = ["areia", "entrou nos meus olhos!"];
    _b[109] = ["madeira", "você não pode pegar o suficiente disso!"];
    _b[108] = ["pedra", "também chamado rocha"];
    _b[111] = ["ouro", "seja generoso, dê para outros"];
    _b[112] = ["diamante", "o que você irá fazer com isso?"];
    _b[121] = ["ametista", "é mauve como lapa"];
    _b[131] = ["farinha", "usada na cozinha"];
    _b[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
    _b[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    _b[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
    _b[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
    _b[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
    _b[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
    _b[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
    _b[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
    _b[200] = ["doces", "apenas para crianças!", "comida: 100"];
    _b[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
    _b[201] = ["pisca-pisca", "decoração perfeita de telhado"];
    _b[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
    _b[110] = ["berry", "Berry saborosa!", "comida: 10"];
    _b[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
    _b[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
    _b[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
    _b[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    _b[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
    _b[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
    _b[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
    _b[194] = ["mato de espinhos", "pica!"];
    _b[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
    _b[142] = ["gelo", "útil para fazer bolo e água"];
    _b[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
    _b[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
    _b[2] = ["pele de coelho", "o coelho era tão fofo..."];
    _b[178] = ["pele pura", "você é uma fábrica de pão"];
    _b[179] = ["pele negra", "você está pronto para fazer algo errado"];
    _b[146] = ["pele de inverno", "ele só queria um abraço"];
    _b[139] = ["escala", "é pequeno como peixe!"];
    _b[129] = ["pele do kraken", "você não está com medo?"];
    _b[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
    _b[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
    _b[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
    _b[161] = ["linha", "usada para fazer chapéus e mochila"];
    _b[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
    _b[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
    _b[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
    _b[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
    _b[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
    _b[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
    _b[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
    _b[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
    _b[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
    _b[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
    _b[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
    _b[Ah.ⲆⵠᐃᐃⵠⵠⲆⵠΔ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
    _b[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
    _b[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
    _b[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
    _b[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
    _b[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
    _b[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
    _b[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
    _b[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
    _b[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
    _b[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
    _b[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
    _b[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
    _b[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
    _b[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
    _b[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
    _b[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
    _b[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
    _b[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
    _b[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
    _b[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
    _b[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
    _b[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
    _b[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
    _b[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
    _b[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
    _b[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
    _b[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
    _b[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
    _b[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
    _b[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
    _b[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
    _b[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
    _b[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
    _b[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
    _b[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
    _b[185] = ["esfera do dragão", "dado na questt"];
    _b[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
    _b[175] = ["pedra verde", "você não vai trapacear, promete?"];
    _b[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
    _b[177] = ["pedra azul", "para pessoas muito gentis"];
    _b[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
    _b[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
    _b[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
    _b[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
    _b[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
    _b[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
    _b[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
    _b[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
    _b[49] = ["regador", "permite regar as plantas", "dano: 1"];
    _b[29] = ["mochila", "mais espaço para seus itens!"];
    _b[120] = ["papel", "usado para fazer o livro"];
    _b[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
    _b[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
    _b[148] = ["fechadura", "permite você trancar seu baú"];
    _b[158] = ["chave", "permite destrancar um baú"];
    _b[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
    _b[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
    _b[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
    _b[190] = ["telhado", "esconde você um pouco e te esquenta!"];
    _b[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    _b[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
    _b[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
    _b[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
    _b[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
    _b[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
    _b[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
    _b[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
    _b[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
    _b[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
    _b[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
    _b[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
    _b[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
    _b[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
    _b[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
    _b[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
    _b[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
    _b[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
    _b[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
    _b[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
    _b[300] = "você não pode entrar no servidor";
    _b[301] = "kickado: ";
    _b[302] = "sua chave está em uso por outra pessoa";
    _b[303] = "sua chave está errada";
    _b[304] = "você tem uma versão velha, limpe seu cache";
    _b[305] = "não tem mais recursos";
    _b[306] = "você sobreviveu 1 dia";
    _b[307] = "você sobreviveu ";
    _b[308] = " dias";
    _b[309] = "você está morto ;-;";
    _b[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
    _b[311] = "servidor está cheio! spam o botão de play!";
    _b[312] = "não tem recursos";
    _b[313] = "inventário está cheio (botão direito para deletar itens)";
    _b[314] = " está morto";
    _b[315] = "essa não é a ferramenta certa";
    _b[316] = "você entrou no time";
    _b[317] = "você está morto";
    _b[318] = "entrou no time";
    _b[319] = "seu time foi destruido";
    _b[320] = "você saiu do time";
    _b[321] = " saiu do time";
    _b[322] = "alguém roubou sua ficha :>";
    _b[323] = "escolha um servidor";
    _b[324] = "jogadores";
    _b[325] = "jogadores totais";
    _b[326] = "jogadores nesse modo";
    _b[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    Pt[0] = ["você morreu sem motivo"];
    Pt[1] = ["você morreu de fome, como o jogo diz"];
    Pt[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
    Pt[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
    Pt[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
    Pt[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
    Pt[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
    Pt[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
    Pt[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
    Pt[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
    Pt[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
    Pt[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
    Pt[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
    Pt[13] = ["você morreu de sede. melhor beber sua própria urina."];
    Pt[14] = ["você sabia que você morre afogado? agora você sabe."];
    Pt[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
    Pt[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
    Pt[17] = ["sua pele caindo aos pedaços, o sol te matou."];
    Pt[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    Pt[19] = ["como vampiro, não chegue perto do alho."];
    Pt[20] = ["você comeu alho como vampiro, o que você esperava?"];
    Pt[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
    ΔᐃΔᐃⲆ = "Uuunnnggg";
    ⲆⵠⲆⲆᐃⲆᐃ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
  }
  function kb(a, b, c, d) {
    _j(oh, a, b, c, d);
    return ((186 + (mh(sh[0], sh[1]) ^ Bo(sh[2], sh[3], sh[0]))) * 16807 + 0) % 2147483647;
  }
  const Ab = 7;
  const xb = 18;
  function Jb(b, c, d, e) {
    const f = ((b + 22162) * 214013 + 2531011) % 4294967296;
    const g = ~(f & 55367) & 55367 | ~(f & 55367) & f;
    const a = ~(g & 12300) & g | ~(g & 12300) & 12300;
    return ~(a & 13834) & (a | 13834);
  }
  function Mb(a, b) {
    const c = (8 << (a >> 8 & 255)) + (24 << (a >> 24 & 255)) + (0 << (a & 255)) + (16 << (a >> 16 & 255));
    const d = ~(b & 48950) & 48950 | ~(b & 48950) & b;
    const e = on(c, d, c, d, c);
    Ao(d, c, d);
    return e ^ 64251;
  }
  function Bb() {
    _b[184] = ["You feel a great power emanating from this orb"];
    Pt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    _b[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    _b[328] = " BACK TO THE GAME";
    _b[329] = " Share on Twitter";
    _b[330] = " Share on Facebook";
    _b[331] = "You can buy items on the shop in the next game with your points";
    _b[332] = "points";
    _b[333] = "Score";
    _b[334] = "Kill";
    _b[335] = "Days survived";
    _b[336] = "Building method: Free. Press G to change";
    _b[337] = "Building method: Grid. Press G to change";
    _b[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    _b[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    _b[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    _b[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    _b[7] = ["Mano"];
    _b[140] = ["Tierra", "¡Tan limpia como mis manos!"];
    _b[126] = ["Arena", "¡Tengo arena en mis ojos!"];
    _b[109] = ["Madera", "¡Nunca hay suficiente!"];
    _b[108] = ["Piedra", "También llamada roca."];
    _b[111] = ["Oro", "Sé generoso, compártelo con los otros"];
    _b[112] = ["Diamante", "¿Que vas a hacer con él?"];
    _b[121] = ["Amatista", "Es Mauve como Lapa"];
    _b[131] = ["Harina", "Usada para cocinar."];
    _b[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    _b[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
    _b[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
    _b[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
    _b[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
    _b[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
    _b[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
    _b[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
    _b[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
    _b[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
    _b[201] = ["Guirnalda", "Perfecta para decorar el techo"];
    _b[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    _b[110] = ["Baya", "No es venenosa.", "Comida: 10"];
    _b[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    _b[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
    _b[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    _b[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    _b[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
    _b[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
    _b[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
    _b[194] = ["Planta de Espinas", "¡Te daña!"];
    _b[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
    _b[142] = ["Hielo", "Bueno para hacer tartas y agua"];
    _b[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
    _b[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
    _b[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    _b[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
    _b[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
    _b[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
    _b[139] = ["Escamas", "¡Huele a pescado!"];
    _b[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
    _b[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
    _b[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
    _b[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
    _b[161] = ["Hilo", "Usado para craftear ropa y mochila"];
    _b[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
    _b[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
    _b[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
    _b[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
    _b[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
    _b[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
    _b[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
    _b[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
    _b[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
    _b[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
    _b[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
    _b[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    _b[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
    _b[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
    _b[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
    _b[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
    _b[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
    _b[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
    _b[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
    _b[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
    _b[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
    _b[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
    _b[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
    _b[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
    _b[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
    _b[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
    _b[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
    _b[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
    _b[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
    _b[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
    _b[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
    _b[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
    _b[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
    _b[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
    _b[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
    _b[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
    _b[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
    _b[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
    _b[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
    _b[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
    _b[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
    _b[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    _b[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
    _b[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
    _b[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
    _b[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
    _b[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
    _b[185] = ["Esfera del Dragón", "Dada en la misión"];
    _b[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
    _b[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
    _b[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
    _b[177] = ["Gema Azul", "Para gente muy amable"];
    _b[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
    _b[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
    _b[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
    _b[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
    _b[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
    _b[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
    _b[128] = ["Botella Vacia", "La puedes llenar de agua"];
    _b[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
    _b[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
    _b[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
    _b[120] = ["Hoja", "Usada para hacer un libro"];
    _b[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
    _b[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
    _b[148] = ["Cerradura", "Te permite cerrar tu cofre"];
    _b[158] = ["Llave", "Te permite abrir un cofre cerrado"];
    _b[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
    _b[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
    _b[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
    _b[190] = ["Techo", "Te esconde un poco y te protege del frío"];
    _b[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
    _b[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
    _b[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
    _b[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
    _b[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
    _b[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
    _b[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
    _b[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
    _b[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
    _b[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
    _b[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
    _b[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
    _b[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
    _b[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
    _b[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
    _b[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
    _b[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
    _b[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    _b[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    _b[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
    _b[300] = "No puedes unirte a este servidor";
    _b[301] = "Expulsado: ";
    _b[302] = "Tu llave ya está usada";
    _b[303] = "Tu llave está mal";
    _b[304] = "Tienes una versión antigua, limpia tu cache";
    _b[305] = "No hay mas recursos";
    _b[306] = "Has sobrevivido 1 día";
    _b[307] = "Has sobrevivido ";
    _b[308] = " días";
    _b[309] = "Estás muerto ;-;";
    _b[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
    _b[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
    _b[312] = "Recurso vacio";
    _b[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
    _b[314] = " está muerto";
    _b[315] = "Esta no es la herramienta correcta";
    _b[316] = "Te has unido a un equipo";
    _b[317] = "Estás muerto";
    _b[318] = " se unió al equipo";
    _b[319] = "Tu equipo ha sido destruido";
    _b[320] = "Has dejado el equipo";
    _b[321] = " dejo el equipo ";
    _b[322] = "Alguien te robó tu token :>";
    _b[323] = "Elige un servidor";
    _b[324] = "jugadores";
    _b[325] = "total de jugadores";
    _b[326] = "Jugadores en este modo de juego";
    _b[327] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    Pt[0] = ["Has muerto por ninguna razón"];
    Pt[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    Pt[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
    Pt[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
    Pt[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
    Pt[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
    Pt[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
    Pt[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
    Pt[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
    Pt[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
    Pt[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
    Pt[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
    Pt[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
    Pt[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
    Pt[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
    Pt[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
    Pt[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
    Pt[17] = ["Tu piel se cayó, el sol te quemó."];
    Pt[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    Pt[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
    Pt[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
    Pt[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
    ΔᐃΔᐃⲆ = "Uuunnnggg";
    ⲆⵠⲆⲆᐃⲆᐃ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
  }
  function Eb() {
    _b[184] = ["You feel a great power emanating from this orb"];
    Pt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    _b[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    _b[328] = " BACK TO THE GAME";
    _b[329] = " Share on Twitter";
    _b[330] = " Share on Facebook";
    _b[331] = "You can buy items on the shop in the next game with your points";
    _b[332] = "points";
    _b[333] = "Score";
    _b[334] = "Kill";
    _b[335] = "Days survived";
    _b[336] = "Building method: Free. Press G to change";
    _b[337] = "Building method: Grid. Press G to change";
    _b[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    _b[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    _b[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    _b[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    _b[7] = ["Hand"];
    _b[140] = ["Boden", "Dreckig!"];
    _b[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    _b[109] = ["Holz", "Du kannst niemals zu viel haben!"];
    _b[108] = ["Stein", "Auch Fels gennant"];
    _b[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    _b[112] = ["Diamant", "Was wirst du daraus machen?"];
    _b[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    _b[131] = ["Mehl", "wird fürs Backen gebraucht"];
    _b[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
    _b[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
    _b[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
    _b[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
    _b[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
    _b[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
    _b[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
    _b[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
    _b[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    _b[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
    _b[201] = ["Girlande", "perfekter Schmuck für Dächer"];
    _b[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    _b[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
    _b[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    _b[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
    _b[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    _b[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
    _b[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    _b[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
    _b[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
    _b[194] = ["Dornenbusch", "Es sticht!"];
    _b[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
    _b[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    _b[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
    _b[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    _b[2] = ["Hasenfell", "Der Hase war so süß..."];
    _b[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
    _b[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
    _b[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
    _b[139] = ["Schuppen", "Es riecht wie Fisch!"];
    _b[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    _b[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
    _b[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
    _b[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
    _b[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
    _b[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
    _b[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
    _b[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
    _b[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
    _b[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
    _b[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
    _b[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
    _b[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
    _b[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
    _b[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
    _b[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
    _b[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
    _b[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    _b[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    _b[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
    _b[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
    _b[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
    _b[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
    _b[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
    _b[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
    _b[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
    _b[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
    _b[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
    _b[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
    _b[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
    _b[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
    _b[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    _b[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    _b[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
    _b[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
    _b[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
    _b[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
    _b[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
    _b[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
    _b[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
    _b[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
    _b[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
    _b[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
    _b[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    _b[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
    _b[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
    _b[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
    _b[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    _b[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    _b[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    _b[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
    _b[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    _b[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
    _b[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
    _b[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
    _b[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
    _b[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
    _b[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    _b[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    _b[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    _b[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
    _b[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
    _b[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
    _b[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
    _b[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
    _b[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
    _b[29] = ["Rucksack", "Mehr Platz im Inventar!"];
    _b[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
    _b[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
    _b[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
    _b[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    _b[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
    _b[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
    _b[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
    _b[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
    _b[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    _b[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
    _b[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
    _b[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
    _b[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
    _b[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
    _b[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
    _b[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
    _b[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
    _b[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
    _b[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
    _b[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
    _b[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
    _b[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
    _b[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
    _b[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
    _b[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
    _b[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
    _b[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    _b[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    _b[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
    _b[300] = "Du kannst diesem Server nicht beitreten";
    _b[301] = "Gekickt: ";
    _b[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    _b[303] = "Dein Schlüssel ist falsch";
    _b[304] = "Deine Version ist veraltet, säubere dein Cache";
    _b[305] = "Es gibt keine neuen Ressourcen";
    _b[306] = "Du hast einen Tag überlebt";
    _b[307] = "Du hast überlebt ";
    _b[308] = " Tage";
    _b[309] = "Du bist gestorben ;-;";
    _b[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    _b[311] = "Server ist voll! Drücke immer wieder auf spielen!";
    _b[312] = "Ressource ist leer";
    _b[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    _b[314] = " ist gestorben";
    _b[315] = "Das ist nicht das richtige Werkzeug";
    _b[316] = "Du bist einem Team beigetreten";
    _b[317] = "Du bist gestorben";
    _b[318] = " ist dem Team beigetreten";
    _b[319] = "Dein Team wurde zerstört";
    _b[320] = "Du hast das Team verlassen";
    _b[321] = " hat das Team verlassen";
    _b[322] = "Jemand hat dein Token gestohlen :>";
    _b[323] = "Suche dir ein Server aus";
    _b[324] = "Spieler";
    _b[325] = "alle Spieler";
    _b[326] = "Spieler in diesem Modus";
    _b[327] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    Pt[0] = ["Du wurdest ohne Grund getötet"];
    Pt[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    Pt[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
    Pt[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
    Pt[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
    Pt[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
    Pt[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
    Pt[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
    Pt[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
    Pt[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
    Pt[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
    Pt[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
    Pt[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
    Pt[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
    Pt[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
    Pt[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
    Pt[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
    Pt[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    Pt[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    Pt[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    Pt[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
    Pt[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
    ΔᐃΔᐃⲆ = "Uuunnnggg";
    ⲆⵠⲆⲆᐃⲆᐃ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
  }
  function Db() {
    _b[184] = ["You feel a great power emanating from this orb"];
    Pt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    _b[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    _b[328] = " BACK TO THE GAME";
    _b[329] = " Share on Twitter";
    _b[330] = " Share on Facebook";
    _b[331] = "You can buy items on the shop in the next game with your points";
    _b[332] = "points";
    _b[333] = "Score";
    _b[334] = "Kill";
    _b[335] = "Days survived";
    _b[336] = "Building method: Free. Press G to change";
    _b[337] = "Building method: Grid. Press G to change";
    _b[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    _b[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    _b[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    _b[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    _b[7] = ["Ręka"];
    _b[140] = ["Ziemia", "Brudna!"];
    _b[126] = ["Piasek", "Mam go w oczach!"];
    _b[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    _b[108] = ["Kamień", "Także nazywany skałą"];
    _b[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
    _b[112] = ["Diament", "Co z nim zrobisz?"];
    _b[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    _b[131] = ["Mąka", "Używana w gotowaniu"];
    _b[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
    _b[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    _b[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
    _b[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
    _b[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
    _b[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
    _b[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
    _b[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
    _b[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    _b[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
    _b[201] = ["Girlanda", "Idealna do dekorowania dachów"];
    _b[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    _b[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    _b[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    _b[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
    _b[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    _b[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    _b[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    _b[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
    _b[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
    _b[194] = ["Kolczasty krzew", "Kłuje!"];
    _b[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
    _b[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
    _b[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
    _b[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
    _b[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    _b[178] = ["Skóra", "Jesteś fabryką chleba"];
    _b[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    _b[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
    _b[139] = ["Łuski", "Pachnie jak ryba!"];
    _b[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    _b[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
    _b[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
    _b[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
    _b[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    _b[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
    _b[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
    _b[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
    _b[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
    _b[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
    _b[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    _b[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    _b[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
    _b[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
    _b[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
    _b[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
    _b[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
    _b[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    _b[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    _b[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    _b[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
    _b[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
    _b[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
    _b[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
    _b[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
    _b[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
    _b[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
    _b[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
    _b[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
    _b[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
    _b[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
    _b[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    _b[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    _b[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    _b[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
    _b[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
    _b[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
    _b[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
    _b[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
    _b[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
    _b[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
    _b[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
    _b[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
    _b[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
    _b[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
    _b[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
    _b[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    _b[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
    _b[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
    _b[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
    _b[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
    _b[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    _b[185] = ["Smocza kula", "Zdobyta podczas zadania"];
    _b[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
    _b[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
    _b[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
    _b[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    _b[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    _b[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    _b[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    _b[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
    _b[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    _b[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
    _b[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
    _b[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
    _b[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
    _b[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    _b[120] = ["Papier", "Używany w tworzeniu książki"];
    _b[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
    _b[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
    _b[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    _b[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    _b[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
    _b[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
    _b[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
    _b[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    _b[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
    _b[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
    _b[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
    _b[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
    _b[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
    _b[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
    _b[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
    _b[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
    _b[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
    _b[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
    _b[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
    _b[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
    _b[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
    _b[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
    _b[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
    _b[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
    _b[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
    _b[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    _b[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    _b[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
    _b[300] = "Nie możesz dołączyć do tego serwera";
    _b[301] = "Wyrzucony: ";
    _b[302] = "Twój klucz jest aktualnie używany przez innego gracza";
    _b[303] = "Twój klucz jest nieprawidłowy";
    _b[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    _b[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
    _b[306] = "Przeżyłeś 1 dzień";
    _b[307] = "Przeżyłeś ";
    _b[308] = " dni";
    _b[309] = "Jesteś martwy ;-;";
    _b[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    _b[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    _b[312] = "Źródło jest puste";
    _b[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    _b[314] = " jest martwy";
    _b[315] = "To nie jest właściwe narzędzie";
    _b[316] = "Dołączyłeś do drużyny";
    _b[317] = "Jesteś martwy";
    _b[318] = " dołączył do drużyny";
    _b[319] = "Twoja drużyna została zniszczona";
    _b[320] = " Opuściłeś drużynę";
    _b[321] = " opuścił drużynę";
    _b[322] = "Ktoś ukradł twój żeton :>";
    _b[323] = "Wybierz serwer";
    _b[324] = "graczy";
    _b[325] = "wszystkich graczy";
    _b[326] = "graczy w tym trybie";
    _b[327] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    Pt[0] = ["Zostałeś zabity bez powodu"];
    Pt[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    Pt[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
    Pt[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
    Pt[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
    Pt[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
    Pt[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
    Pt[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
    Pt[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
    Pt[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
    Pt[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
    Pt[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
    Pt[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
    Pt[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    Pt[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
    Pt[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
    Pt[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
    Pt[17] = ["Twoja skóra odpada, słońce cię zabija."];
    Pt[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    Pt[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    Pt[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    Pt[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
    ΔᐃΔᐃⲆ = "Uuunnnggg";
    ⲆⵠⲆⲆᐃⲆᐃ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
  }
  function Ib(b, c, d, e, f) {
    const g = b ^ 16192;
    const a = ((22005 + f) * 22695477 + 1) % 4294967296;
    const h = dx(g, (16 << (c >> 8 & 255)) + (0 << (c >> 16 & 255)) + (24 << (c & 255)) + (8 << (c >> 24 & 255)), d ^ 26031, (2531011 + (22811 + e) * 214013) % 4294967296);
    Vr(a, g);
    return ~(h & 54114) & 54114 | ~(h & 54114) & h;
  }
  function Sb() {
    _b[184] = ["You feel a great power emanating from this orb"];
    Pt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    _b[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    _b[328] = " RETOUR AU JEU";
    _b[329] = " Partage sur Twitter";
    _b[330] = " Partage sur Facebook";
    _b[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    _b[332] = "points";
    _b[333] = "Score";
    _b[334] = "Tués";
    _b[335] = "Jours survécus";
    _b[336] = "Mode de construction: Libre. Appuie sur G pour changer";
    _b[337] = "Mode de construction: Grille. Appuie sur G pour changer";
    _b[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
    _b[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
    _b[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
    _b[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    _b[7] = ["Main"];
    _b[140] = ["Terre", "C'est sale!"];
    _b[126] = ["Sable", "J'en ai dans les yeux"];
    _b[109] = ["Bois", "Tu n'en auras jamais trop!"];
    _b[108] = ["Pierre", "Aussi appelée roche"];
    _b[111] = ["Or", "Sois généreux, donne en aux autres"];
    _b[112] = ["Diamant", "Comme tes yeux! wesh"];
    _b[121] = ["Améthyste", "C'est Mauve comme Lapa"];
    _b[131] = ["Farine", "Utile pour la cuisine"];
    _b[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
    _b[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    _b[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
    _b[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
    _b[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
    _b[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
    _b[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
    _b[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
    _b[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
    _b[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
    _b[201] = ["Guirlandes", "Utilisable sur les toits"];
    _b[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
    _b[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    _b[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    _b[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
    _b[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    _b[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
    _b[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
    _b[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
    _b[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
    _b[194] = ["Ronces", "Ça pique!"];
    _b[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
    _b[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    _b[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
    _b[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    _b[2] = ["Peau de lapin", "Vous êtes un monstre"];
    _b[178] = ["Fourrure blanche", "Tu es une usine à pain"];
    _b[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
    _b[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    _b[139] = ["Écailles", "Ça sent le poisson!"];
    _b[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    _b[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
    _b[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
    _b[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
    _b[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    _b[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    _b[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
    _b[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
    _b[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
    _b[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
    _b[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
    _b[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
    _b[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
    _b[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
    _b[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
    _b[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
    _b[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
    _b[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
    _b[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
    _b[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
    _b[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
    _b[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
    _b[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
    _b[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
    _b[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
    _b[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
    _b[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
    _b[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
    _b[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
    _b[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
    _b[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
    _b[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
    _b[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
    _b[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
    _b[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
    _b[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
    _b[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
    _b[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
    _b[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
    _b[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
    _b[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    _b[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    _b[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    _b[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
    _b[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
    _b[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    _b[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    _b[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    _b[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
    _b[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    _b[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
    _b[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
    _b[185] = ["Orbe du Dragon", "Donné en Quête"];
    _b[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
    _b[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    _b[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
    _b[177] = ["Gemme bleue", "Pour les gens trop gentils"];
    _b[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
    _b[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
    _b[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
    _b[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
    _b[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
    _b[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
    _b[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
    _b[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
    _b[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
    _b[29] = ["Sac", "Plus de place dans ton inventaire!"];
    _b[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    _b[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
    _b[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
    _b[148] = ["Cadenas", "Pour verrouiller un coffre"];
    _b[158] = ["Clé", "Pour déverrouiller un coffre"];
    _b[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
    _b[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
    _b[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
    _b[190] = ["Toit", "Te cache un peu et te réchauffe"];
    _b[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
    _b[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
    _b[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
    _b[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
    _b[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
    _b[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
    _b[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
    _b[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
    _b[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
    _b[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
    _b[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
    _b[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
    _b[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
    _b[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
    _b[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
    _b[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
    _b[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
    _b[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    _b[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    _b[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
    _b[300] = "Tu ne peux pas rejoindre le serveur";
    _b[301] = "Expulsé: ";
    _b[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    _b[303] = "Ta clé est fausse";
    _b[304] = "Tu as une vieille version, rafraichis tes caches";
    _b[305] = "Il n'y a plus de nouvelles ressources";
    _b[306] = "Tu as survécu 1 jour";
    _b[307] = "Tu as survécu ";
    _b[308] = " jours";
    _b[309] = "Tu es mort ;-;";
    _b[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    _b[311] = "Le serveur est complet! Spam le bouton jouer";
    _b[312] = "Cette ressource est vide";
    _b[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    _b[314] = " est mort";
    _b[315] = "Ce n'est pas le bon outil";
    _b[316] = "Tu as rejoins une équipe";
    _b[317] = "Tu es mort";
    _b[318] = " a rejoint l'équipe";
    _b[319] = "Ton équipe a été détruite";
    _b[320] = "Tu as quitté l'équipe";
    _b[321] = " a quitté l'équipe";
    _b[322] = "Quelqu'un a volé ton token :>";
    _b[323] = "Choisis un serveur";
    _b[324] = "joueurs";
    _b[325] = "joueurs";
    _b[326] = "joueurs dans ce mode";
    _b[327] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    Pt[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
    Pt[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    Pt[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
    Pt[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
    Pt[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
    Pt[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    Pt[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
    Pt[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
    Pt[8] = ["Cet ours voulait juste un câlin."];
    Pt[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
    Pt[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
    Pt[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
    Pt[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
    Pt[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
    Pt[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    Pt[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    Pt[16] = ["Un kraken a 'kraké' tes os."];
    Pt[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    Pt[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    Pt[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    Pt[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
    Pt[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
    ΔᐃΔᐃⲆ = "Uuunnnggg";
    ⲆⵠⲆⲆᐃⲆᐃ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
  }
  const Qb = 11;
  var _b = [];
  for (var Fb = 0; Fb < 344; Fb++) {
    _b[Fb] = "";
  }
  var Pt = [];
  $(".md-languages").on("click", function () {
    $(this).toggleClass("active");
  });
  $(".md-languages ul li").on("click", function () {
    var a = $(this).text();
    if (a === "English") {
      Cb();
    } else if (a === "Français") {
      Sb();
    } else if (a === "Deutsch") {
      Eb();
    } else if (a === "Español") {
      Bb();
    } else if (a === "Português") {
      Pb();
    } else if (a === "Русский") {
      zb();
    } else if (a === "Polski") {
      Db();
    }
    ⲆⵠᐃⲆᐃ = [];
    Ax.ᐃⵠⲆᐃ.label = [];
    $(".md-languages ul li").removeClass("active");
    $(this).addClass("active");
    $(".md-languages label button").text(a);
  });
  const jb = 2;
  const Lb = 0;
  js = "EN";
  const Wb = 2;
  var Gb;
  switch (navigator.language || navigator.userLanguage) {
    case "ru":
      js = "RU";
      break;
    case "en":
      js = "EN";
      break;
    case "es":
      js = "SP";
      break;
    case "fr":
      js = "FR";
      break;
    case "pl":
      js = "PL";
      break;
    case "de":
      js = "DE";
      break;
    case "pt":
      js = "PT";
  }
  if (js === "FR") {
    $(".md-languages label button").text("Français");
    Gb = Sb;
  } else if (js === "PL") {
    $(".md-languages label button").text("Polski");
    Gb = Db;
  } else if (js === "PT") {
    $(".md-languages label button").text("Português");
    Gb = Pb;
  } else if (js === "SP") {
    $(".md-languages label button").text("Español");
    Gb = Bb;
  } else if (js === "RU") {
    $(".md-languages label button").text("Русский");
    Gb = zb;
  } else if (js === "DE") {
    $(".md-languages label button").text("Deutsch");
    Gb = Eb;
  } else {
    $(".md-languages label button").text("English");
    Gb = Cb;
  }
  ⵠᐃ = {
    ⵠᐃⵠⵠΔⵠⵠⲆΔ: "img/logo.png",
    ΔᐃⲆᐃΔⵠΔ: "img/mapday.png",
    ⵠⵠΔΔⵠᐃⵠ: "img/mapnight.png",
    ΔᐃⵠⵠΔⵠᐃⵠⵠ: "img/bigzday.png",
    ᐃⵠΔⲆⲆᐃᐃᐃⵠ: "img/bigznight.png",
    ⵠⵠⵠΔΔⲆⵠ: "img/bigday-river1.png",
    ⵠⲆΔΔΔᐃᐃⵠΔ: "img/bigday-lake.png",
    ᐃⵠⲆᐃⵠᐃⲆ: "img/bigday-berry.png",
    ⵠᐃΔΔΔⵠⵠ: "img/bigday-stone1.png",
    ᐃⵠⵠⵠⵠΔΔ: "img/bigday-stone2.png",
    ⲆⵠᐃΔⵠⵠΔ: "img/bigday-gold1.png",
    ⵠⲆⲆⵠⲆΔⵠ: "img/bigday-gold2.png",
    ᐃⲆΔⲆⵠᐃΔ: "img/bigday-emerald1.png",
    ᐃⵠⵠΔⲆⵠⲆ: "img/bigday-emerald2.png",
    ⵠⲆᐃⲆⵠⵠⵠ: "img/bigday-amethyst.png",
    ᐃΔᐃⲆⲆΔⲆ: "img/bigday-bear.png",
    ΔᐃⲆᐃⵠᐃΔ: "img/bigday-cave.png",
    ⲆⲆΔⵠᐃⲆⲆ: "img/bigday-diamond.png",
    ⲆⵠᐃᐃⲆⲆⲆ: "img/bigday-island.png",
    ΔⲆⲆⵠⵠⲆᐃ: "img/bigday-reidite.png",
    ᐃΔⲆⲆⵠΔᐃ: "img/bigday-spider.png",
    ⵠⵠⲆᐃⵠᐃⵠ: "img/bigday-wolf.png",
    ⵠΔΔⵠᐃⵠᐃ: "img/bigday-fir-tree.png",
    ⲆΔⵠᐃΔᐃΔ: "img/bigday-fox.png",
    ⵠⲆᐃⲆᐃⲆΔ: "img/bigday-kraken.png",
    ΔᐃΔΔⵠⲆᐃ: "img/bigday-piranha.png",
    ⲆΔᐃΔⲆⵠⵠ: "img/bigday-cactus.png",
    ΔⲆⲆⲆᐃⲆⵠ: "img/bigday-magma.png",
    ⲆⲆᐃⵠΔΔΔ: "img/bigday-river1.png",
    ⲆΔΔᐃⵠⲆΔⵠᐃ: "img/bignight-lake.png",
    ᐃⵠⲆᐃΔᐃⲆⲆⲆ: "img/bignight-berry.png",
    ⵠᐃⵠⵠΔⵠⲆ: "img/bignight-stone1.png",
    ⲆΔⵠⵠⵠⵠΔ: "img/bignight-stone2.png",
    ᐃΔⵠⵠⲆⵠⲆ: "img/bignight-gold1.png",
    ⲆΔⲆΔⵠΔⲆ: "img/bignight-gold2.png",
    ΔΔⲆΔⵠⲆⵠ: "img/bignight-emerald1.png",
    ⲆᐃΔⵠᐃᐃⲆ: "img/bignight-emerald2.png",
    ΔΔΔΔΔⲆᐃ: "img/bignight-amethyst.png",
    ΔᐃΔᐃΔⵠᐃ: "img/bignight-bear.png",
    ᐃⵠⵠΔⲆΔⲆ: "img/bignight-cave.png",
    ΔⲆⵠⵠΔΔᐃ: "img/bignight-diamond.png",
    ⵠⲆⲆⲆⵠⲆⲆ: "img/bignight-island.png",
    ᐃⲆⲆΔᐃᐃⵠ: "img/bignight-reidite.png",
    ⵠⵠⲆⲆΔᐃᐃ: "img/bignight-spider.png",
    ΔΔᐃᐃⲆᐃΔ: "img/bignight-wolf.png",
    ᐃⵠⲆⲆᐃⲆᐃ: "img/bignight-fir-tree.png",
    ⵠⲆᐃΔⲆΔΔ: "img/bignight-fox.png",
    ᐃᐃⲆᐃᐃⵠΔ: "img/bignight-kraken.png",
    Δᐃᐃⵠⵠⵠⵠ: "img/bignight-piranha.png",
    ⵠⲆΔⲆᐃⲆⵠ: "img/bignight-cactus.png",
    ᐃⵠΔⵠⲆΔᐃ: "img/bignight-magma.png",
    ⵠΔⵠΔⵠⲆⵠ: "img/bigday-desert.png",
    ΔⵠⲆΔᐃⵠⲆ: "img/bigday-winter.png",
    ⵠⵠᐃΔΔⲆⲆ: "img/bigday-lava.png",
    ᐃΔΔⲆᐃΔΔ: "img/bigday-forest.png",
    ΔΔⵠⵠΔᐃᐃ: "img/bignight-desert.png",
    ⲆΔⵠⵠⵠᐃⵠ: "img/bignight-winter.png",
    ΔⵠⵠⲆⵠⲆΔ: "img/bignight-lava.png",
    ᐃᐃⵠΔΔΔⲆ: "img/bignight-forest.png",
    ΔᐃⲆΔΔⵠᐃ: "img/day-river-wave.png",
    Δᐃⵠᐃⵠᐃⵠ: "img/night-river-wave.png",
    ΔⲆⲆⵠΔⲆⲆ: "img/day-fog0.png",
    ⲆⲆⵠⲆⵠⵠΔ: "img/day-fog1.png",
    ⲆᐃⵠⵠᐃⵠΔ: "img/day-fog2.png",
    ᐃⵠᐃᐃΔⵠᐃ: "img/night-fog0.png",
    ΔΔᐃᐃᐃᐃⵠ: "img/night-fog1.png",
    ⵠᐃⵠⵠᐃⲆᐃ: "img/night-fog2.png",
    ⲆΔⵠᐃΔⲆᐃ: "img/day-fogdesert0.png",
    ΔᐃᐃⵠⵠⲆᐃ: "img/day-fogdesert1.png",
    ᐃⵠᐃⵠΔⲆΔ: "img/day-fogdesert2.png",
    ⵠⲆⵠⵠᐃΔᐃ: "img/night-fogdesert0.png",
    ⲆⲆᐃΔⲆᐃⵠ: "img/night-fogdesert1.png",
    ΔⲆⲆⲆⲆΔⲆ: "img/night-fogdesert2.png",
    ⵠᐃⵠⵠᐃΔᐃ: "img/day-cross-server.png",
    ᐃΔⲆⲆⵠᐃᐃ: "img/day-here-server.png",
    ΔᐃⲆⲆⵠⲆΔ: "img/day-finish-server.png",
    ⲆΔⵠΔΔᐃᐃ: "img/day-item-server.png",
    ⲆᐃⲆⲆΔⵠⵠ: "img/day-skull-server.png",
    ⲆΔⲆⲆⵠⲆᐃ: "img/night-cross-server.png",
    ⵠᐃⲆⲆΔΔⲆ: "img/night-here-server.png",
    ᐃⵠΔΔᐃᐃⵠ: "img/night-finish-server.png",
    ᐃⲆΔⵠⲆΔⵠ: "img/night-item-server.png",
    ⲆⲆⲆⲆΔΔⲆ: "img/night-skull-server.png",
    ⲆⵠⲆⲆⵠⲆΔ: "img/day-reidite0.png",
    ᐃⵠⵠᐃⲆΔᐃ: "img/night-reidite0.png",
    ⵠΔΔᐃⵠⲆᐃ: "img/day-reidite1.png",
    ⵠᐃΔⵠᐃⲆⵠ: "img/night-reidite1.png",
    ⲆᐃΔᐃΔᐃⲆ: "img/day-reidite2.png",
    ᐃⵠⵠΔᐃⲆⵠ: "img/night-reidite2.png",
    ᐃⲆⵠᐃⵠΔᐃ: "img/day-lava1.png",
    ᐃᐃⲆΔΔⲆΔ: "img/night-lava1.png",
    ᐃΔᐃⵠΔᐃᐃ: "img/day-lava2.png",
    ᐃⵠⲆᐃⵠⵠⲆ: "img/night-lava2.png",
    ⲆᐃⲆᐃⵠⵠΔ: "img/day-lava3.png",
    ᐃΔΔᐃΔⵠⲆ: "img/night-lava3.png",
    ΔⵠⲆⵠΔⲆⲆ: "img/day-lava4.png",
    ⲆⲆΔⲆⵠⵠⲆ: "img/night-lava4.png",
    ⵠᐃᐃⲆⲆᐃⲆ: "img/day-lava5.png",
    ⲆΔΔⲆᐃⵠⲆ: "img/night-lava5.png",
    ⲆᐃᐃΔⲆΔΔ: "img/day-lava6.png",
    ᐃⵠⲆⵠΔⲆΔ: "img/night-lava6.png",
    ⵠⵠⵠⵠᐃⲆⲆ: "img/day-lava-ground1.png",
    ⵠⵠⲆⵠΔⵠⲆ: "img/night-lava-ground1.png",
    ΔΔⲆΔᐃⵠⲆ: "img/day-lava-ground2.png",
    ⵠⵠⲆⲆᐃᐃᐃ: "img/night-lava-ground2.png",
    ᐃⲆⲆⵠⵠⵠⵠ: "img/day-lava-ground3.png",
    ᐃⵠᐃⵠⲆⵠᐃ: "img/night-lava-ground3.png",
    ⲆΔΔΔᐃᐃⲆ: "img/day-lava-ground4.png",
    ΔⵠⲆΔΔⵠΔ: "img/night-lava-ground4.png",
    ⵠᐃⲆⵠⵠᐃⲆ: "img/day-lava-ground5.png",
    ΔΔᐃⵠᐃᐃⲆ: "img/night-lava-ground5.png",
    ⲆᐃᐃᐃⵠΔᐃ: "img/day-lava-ground6.png",
    ⲆⵠⵠᐃⵠⲆⲆ: "img/night-lava-ground6.png",
    ⲆⲆΔⲆΔΔⲆ: "img/day-fire-mob.png",
    ⵠᐃΔΔⲆᐃⲆ: "img/night-fire-mob.png",
    ⲆᐃᐃᐃᐃⲆᐃ: "img/hurt-fire-mob.png",
    ᐃΔᐃⲆᐃΔⵠ: "img/day-diamond-protection.png",
    ⲆΔᐃΔΔⲆⵠ: "img/night-diamond-protection.png",
    ⲆⵠⵠⲆⲆⵠⲆ: "img/day-hand-diamond-protection.png",
    ᐃᐃⲆⵠᐃⵠⲆ: "img/night-hand-diamond-protection.png",
    ⲆΔᐃⲆⲆᐃⵠ: "img/inv-diamond-protection-out.png",
    ⲆⵠᐃⲆΔⵠⵠ: "img/inv-diamond-protection-in.png",
    ΔΔᐃᐃᐃᐃᐃ: "img/inv-diamond-protection-click.png",
    ΔⲆⵠΔⲆⵠⵠ: "img/day-amethyst-protection.png",
    ᐃΔᐃⲆᐃⲆᐃ: "img/night-amethyst-protection.png",
    ⵠᐃⵠⵠⵠΔⲆⵠⵠ: "img/day-hand-amethyst-protection.png",
    ΔⵠⵠᐃⲆᐃⲆⵠᐃ: "img/night-hand-amethyst-protection.png",
    ᐃΔⵠⲆⲆⵠⵠ: "img/inv-amethyst-protection-out.png",
    ΔⲆⲆᐃΔⵠⲆ: "img/inv-amethyst-protection-in.png",
    ᐃΔᐃⵠΔᐃⵠ: "img/inv-amethyst-protection-click.png",
    ΔⲆⵠⵠⵠⵠΔ: "img/day-reidite-sword.png",
    ⲆᐃⲆΔᐃᐃⵠ: "img/night-reidite-sword.png",
    ⲆΔᐃⲆᐃⵠⵠ: "img/inv-reidite-sword-out.png",
    ⵠᐃⲆⲆⲆᐃΔ: "img/inv-reidite-sword-in.png",
    ΔΔΔⲆⲆᐃᐃ: "img/inv-reidite-sword-click.png",
    ⵠΔⲆⵠᐃᐃᐃ: "img/inv-reidite-out.png",
    ⵠⵠΔⲆⲆⲆⵠ: "img/inv-reidite-in.png",
    ᐃⲆΔΔⵠΔᐃ: "img/inv-reidite-click.png",
    ⲆΔⵠⲆᐃᐃⵠ: "img/inv-flame-out.png",
    ΔⲆᐃⵠΔⵠΔ: "img/inv-flame-in.png",
    ΔΔⲆⲆᐃΔΔ: "img/inv-flame-click.png",
    ⵠⵠⵠⵠⲆᐃᐃ: "img/day-magma-buble0.png",
    ΔⲆᐃΔΔΔΔ: "img/night-magma-buble0.png",
    ⲆᐃⵠⵠⲆᐃΔ: "img/day-magma-buble1.png",
    ⵠⲆΔⲆΔⲆΔ: "img/night-magma-buble1.png",
    ᐃⵠⲆΔΔᐃΔ: "img/day-magma-buble2.png",
    ᐃΔᐃⵠⲆΔⲆ: "img/night-magma-buble2.png",
    ᐃⵠΔⵠΔⵠⵠ: "img/day-lava-dragon.png",
    ⵠⵠⵠⵠⲆⲆⲆ: "img/night-lava-dragon.png",
    ⵠᐃΔΔⵠⵠⵠⲆᐃ: "img/day-fire-dragon.png",
    ᐃⵠᐃΔⵠⲆΔⵠⵠ: "img/night-fire-dragon.png",
    ⲆΔⵠⲆⲆⵠΔ: "img/hurt-lava-dragon.png",
    ⵠΔΔΔᐃΔᐃ: "img/day-lava-wing-left.png",
    ᐃᐃᐃΔΔΔᐃ: "img/night-lava-wing-left.png",
    ΔΔⵠΔⵠⵠᐃ: "img/day-lava-wing-right.png",
    ᐃᐃΔΔᐃⲆⲆ: "img/night-lava-wing-right.png",
    ⵠⵠⵠΔⵠᐃⵠ: "img/hurt-lava-wing-left.png",
    ΔⲆⵠΔΔⲆΔ: "img/hurt-lava-wing-right.png",
    ⵠⵠⵠΔΔⲆⲆ: "img/day-reidite-spear.png",
    ⲆⲆⵠΔⲆⵠᐃ: "img/night-reidite-spear.png",
    ᐃᐃⲆⵠⵠΔᐃ: "img/inv-reidite-spear-out.png",
    ⲆᐃⲆⵠᐃᐃᐃ: "img/inv-reidite-spear-in.png",
    ⲆᐃⲆᐃⵠᐃᐃ: "img/inv-reidite-spear-click.png",
    ΔᐃᐃⲆⵠⵠⲆ: "img/day-reidite-helmet.png",
    ΔΔᐃⵠⲆᐃΔ: "img/night-reidite-helmet.png",
    ᐃⲆⲆΔᐃⲆΔ: "img/inv-reidite-helmet-out.png",
    ⵠΔΔⲆᐃⲆⵠ: "img/inv-reidite-helmet-in.png",
    ΔⲆⵠⵠᐃⲆⵠ: "img/inv-reidite-helmet-click.png",
    ᐃⲆΔΔᐃⲆᐃ: "img/day-hand-reidite-protection.png",
    ⲆⲆΔⲆᐃΔᐃ: "img/night-hand-reidite-protection.png",
    ᐃΔⲆᐃⲆⲆⲆ: "img/day-reidite-protection.png",
    ᐃⲆᐃΔΔᐃΔ: "img/night-reidite-protection.png",
    ΔᐃᐃΔⲆᐃᐃ: "img/inv-reidite-protection-out.png",
    ΔᐃΔⲆⵠΔⲆ: "img/inv-reidite-protection-in.png",
    ᐃⲆᐃΔⲆⵠΔ: "img/inv-reidite-protection-click.png",
    ΔⲆⲆⲆⲆⲆᐃ: "img/day-lava-dragon-sword.png",
    ⵠᐃΔΔⲆᐃⵠ: "img/night-lava-dragon-sword.png",
    ΔⲆⵠⵠⲆΔᐃ: "img/inv-lava-dragon-sword-out.png",
    ᐃⲆΔᐃᐃᐃΔ: "img/inv-lava-dragon-sword-in.png",
    ⵠⲆⲆᐃⲆᐃΔ: "img/inv-lava-dragon-sword-click.png",
    ΔΔⲆⵠⵠᐃⲆ: "img/day-lava-spear.png",
    ⲆⵠΔⲆⲆⵠΔ: "img/night-lava-spear.png",
    ᐃᐃⵠᐃⲆᐃΔ: "img/inv-lava-spear-out.png",
    ⵠⵠⵠⵠⵠⲆᐃ: "img/inv-lava-spear-in.png",
    ⲆⵠⲆᐃᐃⵠᐃ: "img/inv-lava-spear-click.png",
    ⵠⲆⵠⵠⵠΔⲆ: "img/day-lava-helmet.png",
    ΔΔⲆⲆⲆᐃⵠ: "img/night-lava-helmet.png",
    ⵠⲆΔᐃⲆⵠᐃ: "img/inv-lava-helmet-out.png",
    ΔΔᐃⲆⲆⵠΔ: "img/inv-lava-helmet-in.png",
    ⵠΔⲆᐃⵠΔⲆ: "img/inv-lava-helmet-click.png",
    ᐃⲆⵠᐃΔΔⲆ: "img/day-witch-hat.png",
    ΔΔⲆΔⵠᐃⵠ: "img/night-witch-hat.png",
    ᐃⲆⲆΔᐃⲆⲆ: "img/inv-witch-hat-out.png",
    ᐃⲆᐃⵠΔⵠΔ: "img/inv-witch-hat-in.png",
    ⲆᐃⵠᐃᐃᐃⲆ: "img/inv-witch-hat-click.png",
    ᐃᐃΔᐃⵠⵠᐃ: "img/day-nimbus2000.png",
    ⵠᐃⵠΔⵠᐃⲆ: "img/night-nimbus2000.png",
    ⲆⲆⲆⲆⵠᐃⲆ: "img/inv-nimbus2000-out.png",
    ᐃΔᐃⵠⲆΔΔ: "img/inv-nimbus2000-in.png",
    ⲆΔᐃᐃΔⵠⵠ: "img/inv-nimbus2000-click.png",
    ᐃⵠⲆⲆΔⲆΔ: "img/day-accessory1-pacques.png",
    ⵠⵠΔΔΔᐃΔ: "img/night-accessory1-pacques.png",
    ⲆᐃΔᐃᐃⲆⲆ: "img/day-accessory2-pacques.png",
    ⵠⵠⵠⵠⵠᐃⲆ: "img/night-accessory2-pacques.png",
    ⲆᐃⲆΔΔᐃΔ: "img/day-accessory3-pacques.png",
    ⲆⲆⵠⵠΔᐃⵠ: "img/night-accessory3-pacques.png",
    ΔⲆⲆⵠⵠᐃᐃ: "img/day-accessory5-pacques.png",
    ᐃⲆᐃⲆⲆΔⲆ: "img/night-accessory5-pacques.png",
    ⲆᐃⲆⵠΔΔᐃ: "img/day-accessory6-pacques.png",
    ΔⵠᐃᐃⵠΔᐃ: "img/night-accessory6-pacques.png",
    Ⲇᐃᐃⵠᐃⵠⵠ: "img/day-accessory7-pacques.png",
    ΔΔⲆΔᐃⲆⲆ: "img/night-accessory7-pacques.png",
    ⲆⵠΔⲆⵠᐃⲆ: "img/day-accessory8-pacques.png",
    ⵠⲆΔΔΔΔⲆ: "img/night-accessory8-pacques.png",
    ᐃΔⲆΔⲆⵠᐃ: "img/day-bag-pacques.png",
    ⵠᐃΔⵠᐃᐃΔ: "img/night-bag-pacques.png",
    ⲆᐃᐃΔᐃⲆᐃ: "img/day-carrot.png",
    ΔⲆᐃᐃⵠⵠᐃ: "img/night-carrot.png",
    ΔᐃᐃΔᐃⵠᐃ: "img/day-carrot-dried.png",
    ⲆΔⵠΔⵠΔᐃ: "img/night-carrot-dried.png",
    ⵠⵠᐃΔⵠⵠⵠ: "img/day-tomato-herb.png",
    ⲆⵠⲆⵠᐃⲆⵠ: "img/night-tomato-herb.png",
    ᐃΔΔΔΔᐃⲆ: "img/day-tomato-herb-dried.png",
    ΔᐃᐃᐃⲆΔⵠ: "img/night-tomato-herb-dried.png",
    ΔⵠⲆⲆΔᐃᐃ: "img/day-tomato.png",
    ᐃΔⲆᐃᐃᐃΔ: "img/night-tomato.png",
    ΔⲆⵠⲆᐃΔⵠ: "img/inv-carrot-out.png",
    ⲆᐃⲆⲆΔΔⵠ: "img/inv-carrot-in.png",
    ᐃᐃⵠᐃⲆⲆⲆ: "img/inv-carrot-click.png",
    ᐃⲆᐃΔΔΔᐃ: "img/inv-tomato-out.png",
    ᐃⵠⵠⲆᐃΔΔ: "img/inv-tomato-in.png",
    ⲆⵠⵠΔΔⲆⲆ: "img/inv-tomato-click.png",
    ΔᐃⲆᐃⵠⲆΔ: "img/day-player0.png",
    ⵠⲆⲆⲆᐃΔᐃ: "img/night-player0.png",
    ⲆᐃᐃⲆΔᐃⲆ: "img/day-player1.png",
    ⲆΔⲆΔΔⵠΔ: "img/night-player1.png",
    ⵠⵠⲆⲆΔᐃⲆ: "img/day-player2.png",
    ᐃΔΔᐃⲆΔᐃ: "img/night-player22.png",
    ⲆᐃⵠⲆⲆⲆΔ: "img/day-player3.png",
    ⲆⲆΔᐃⲆΔⵠ: "img/night-player33.png",
    ᐃΔᐃⲆⲆΔᐃ: "img/day-player4.png",
    ᐃⲆⲆΔⲆⲆᐃ: "img/night-player4.png",
    ᐃⵠⲆⵠⵠⲆΔ: "img/day-player5.png",
    ⲆⵠⲆⵠᐃⵠΔ: "img/night-player5.png",
    ᐃⲆᐃⲆᐃⲆΔ: "img/day-player6.png",
    ⲆΔᐃⲆᐃΔΔ: "img/night-player6.png",
    ⲆⵠᐃΔⲆⲆΔ: "img/day-player7.png",
    ⲆⲆΔⲆΔᐃᐃ: "img/night-player7.png",
    ⵠΔⵠᐃⵠⲆⲆ: "img/day-player8.png",
    ⵠΔᐃΔⵠᐃΔ: "img/night-player8.png",
    ΔΔⵠΔⵠⲆΔ: "img/day-player9.png",
    ᐃΔⵠΔΔⵠⲆ: "img/night-player9.png",
    ΔᐃⵠⲆⲆΔⲆ: "img/day-player10.png",
    ΔᐃᐃⲆΔⲆᐃ: "img/night-player10.png",
    ᐃⲆⲆⲆΔⲆⵠ: "img/day-player11.png",
    ⵠΔΔⲆⲆΔⲆ: "img/night-player11.png",
    ΔᐃⵠᐃⵠΔⵠ: "img/day-player12.png",
    ⵠᐃᐃⲆᐃⲆᐃ: "img/night-player12.png",
    ⵠᐃΔΔⵠⲆⲆ: "img/day-player13.png",
    ᐃⵠᐃⲆᐃⲆⵠ: "img/night-player13.png",
    ΔⵠⵠⵠᐃᐃΔ: "img/day-player14.png",
    ⲆⲆΔΔᐃΔΔ: "img/night-player14.png",
    ᐃᐃᐃΔΔᐃⲆ: "img/day-player15.png",
    ᐃᐃᐃᐃⲆᐃⲆ: "img/night-player15.png",
    ⲆⲆᐃⵠΔΔⲆ: "img/day-player16.png",
    ⲆΔⲆᐃⲆᐃΔ: "img/night-player16.png",
    ΔⲆⵠⲆⲆᐃⵠ: "img/day-player17.png",
    ΔΔⵠⵠΔᐃΔ: "img/night-player17.png",
    ᐃΔᐃᐃᐃΔⵠ: "img/day-player18.png",
    ᐃⲆⲆΔⲆⵠⲆ: "img/night-player18.png",
    ⵠᐃⵠⵠᐃᐃⲆ: "img/day-player19.png",
    ΔⲆⵠΔⲆᐃⲆ: "img/night-player19.png",
    ᐃⲆⵠΔⵠⲆᐃ: "img/day-hand-player0.png",
    ⲆΔᐃΔⲆⲆⲆ: "img/night-hand-player0.png",
    ΔᐃΔΔⵠⵠⵠ: "img/day-hand-player1.png",
    ᐃᐃⵠⵠⲆΔΔ: "img/night-hand-player1.png",
    ⵠⲆΔᐃⲆⲆᐃ: "img/day-hand-player2.png",
    ᐃⵠⲆⵠᐃΔⲆ: "img/night-hand-player22.png",
    ⵠᐃΔⵠᐃΔᐃ: "img/day-hand-player3.png",
    ᐃᐃⵠᐃⵠⵠⵠ: "img/night-hand-player33.png",
    ⵠⵠⲆⲆⵠᐃⲆ: "img/day-hand-player4.png",
    ΔⵠⲆⲆΔⲆⵠ: "img/night-hand-player4.png",
    ⲆⵠⲆΔⲆᐃⲆ: "img/day-hand-player5.png",
    ⲆⲆⵠΔΔⵠᐃ: "img/night-hand-player5.png",
    ΔⲆⲆΔⲆΔΔ: "img/day-hand-player6.png",
    ⵠⵠⵠᐃⵠΔΔ: "img/night-hand-player6.png",
    ΔⲆᐃⵠⲆⲆⲆ: "img/day-hand-player7.png",
    ⵠⲆᐃᐃΔᐃⵠ: "img/night-hand-player7.png",
    ᐃᐃᐃⲆΔᐃⵠ: "img/day-hand-player8.png",
    ᐃⵠᐃᐃΔΔΔ: "img/night-hand-player8.png",
    ⵠⵠⲆⵠⵠⵠᐃ: "img/day-hand-player9.png",
    ᐃΔᐃⲆⵠΔⲆ: "img/night-hand-player9.png",
    ⲆΔⵠᐃⵠΔᐃ: "img/day-hand-player10.png",
    ⵠⵠⵠⲆⵠⲆᐃ: "img/night-hand-player10.png",
    ⲆⲆΔⵠⲆⲆᐃ: "img/day-hand-player11.png",
    ⵠΔⵠⲆᐃⵠⲆ: "img/night-hand-player11.png",
    ⲆΔΔᐃⵠᐃΔ: "img/day-hand-player12.png",
    ⵠⵠᐃΔⲆⲆΔ: "img/night-hand-player12.png",
    ⲆᐃΔᐃΔᐃⵠ: "img/day-hand-player13.png",
    ᐃΔⵠⵠᐃⵠΔ: "img/night-hand-player13.png",
    ⵠⲆⵠΔΔⲆⵠ: "img/day-hand-player14.png",
    ΔⲆⲆΔⲆᐃΔ: "img/night-hand-player14.png",
    ⵠⵠⵠᐃⵠⲆⵠ: "img/day-hand-player15.png",
    ⲆΔⲆⵠᐃᐃⲆ: "img/night-hand-player15.png",
    ⲆΔΔⵠᐃΔᐃ: "img/day-hand-player16.png",
    ⵠⲆᐃΔᐃΔᐃ: "img/night-hand-player16.png",
    ΔⲆᐃΔΔⲆᐃ: "img/day-hand-player17.png",
    ᐃⵠᐃΔⲆΔᐃ: "img/night-hand-player17.png",
    ⲆⲆⲆⵠᐃⲆΔ: "img/day-hand-player18.png",
    ⲆΔᐃᐃⲆⵠΔ: "img/night-hand-player18.png",
    ᐃΔⲆⵠΔⵠⵠ: "img/day-hand-player19.png",
    ΔⲆᐃᐃⲆⵠⵠ: "img/night-hand-player19.png",
    ⲆΔⵠᐃΔⲆΔ: "img/day-accessory4.png",
    ⲆΔΔΔⲆⲆⲆ: "img/night-accessory4.png",
    ⲆⵠⲆᐃᐃΔᐃ: "img/day-accessory9.png",
    ᐃⲆᐃⵠⲆⵠⲆ: "img/night-accessory9.png",
    ᐃᐃΔⲆᐃΔᐃ: "img/day-accessory10.png",
    ⲆΔⲆᐃⲆⲆᐃ: "img/night-accessory10.png",
    ΔΔᐃⲆⲆᐃⵠ: "img/day-accessory11.png",
    ⵠᐃΔⲆᐃⲆⵠ: "img/night-accessory11.png",
    ΔΔᐃⲆᐃᐃᐃ: "img/day-accessory12.png",
    ᐃΔⲆⵠᐃΔⵠ: "img/night-accessory12.png",
    ⲆⵠΔⲆⵠΔⵠ: "img/day-bag.png",
    ᐃⲆⵠⲆⵠΔᐃ: "img/night-bag.png",
    ⵠⲆᐃⵠΔⵠⵠ: "img/inv-bag-out.png",
    ΔᐃᐃⲆᐃᐃⲆ: "img/inv-bag-in.png",
    ᐃᐃΔⵠⵠⵠᐃ: "img/inv-bag-click.png",
    ΔᐃᐃᐃⲆᐃⲆ: "img/day-pitchfork.png",
    ᐃⵠΔᐃⵠⲆΔ: "img/night-pitchfork.png",
    ΔⲆΔΔᐃΔᐃ: "img/inv-pitchfork-out.png",
    ⵠⲆⲆⵠΔⵠΔ: "img/inv-pitchfork-in.png",
    ⵠΔᐃᐃᐃⲆᐃ: "img/inv-pitchfork-click.png",
    ᐃΔⲆᐃⲆΔΔ: "img/inv-wood-spike-door-out.png",
    ⲆⲆΔⵠⵠⲆΔ: "img/inv-wood-spike-door-in.png",
    ⵠᐃᐃⲆΔⵠⵠ: "img/inv-wood-spike-door-click.png",
    ⵠΔᐃᐃᐃⲆΔ: "img/inv-stone-spike-door-out.png",
    ⲆⵠΔⲆΔΔⵠ: "img/inv-stone-spike-door-in.png",
    ⲆᐃΔᐃⲆΔΔ: "img/inv-stone-spike-door-click.png",
    ⵠⵠΔΔⲆⲆⵠ: "img/inv-gold-spike-door-out.png",
    ⲆⲆⲆⵠⲆⲆⲆ: "img/inv-gold-spike-door-in.png",
    ⲆΔⲆⵠⵠⵠⵠ: "img/inv-gold-spike-door-click.png",
    ⲆⵠⲆᐃⲆᐃᐃ: "img/inv-diamond-spike-door-out.png",
    ⵠⲆⲆⵠᐃⲆᐃ: "img/inv-diamond-spike-door-in.png",
    ᐃᐃⲆⵠᐃΔⵠ: "img/inv-diamond-spike-door-click.png",
    ⲆⲆⲆᐃΔⵠⵠ: "img/inv-amethyst-spike-door-out.png",
    Δⵠⵠᐃᐃᐃᐃ: "img/inv-amethyst-spike-door-in.png",
    ⵠⲆΔΔᐃΔⵠ: "img/inv-amethyst-spike-door-click.png",
    ⵠⵠⲆᐃⲆⵠⵠ: "img/day-wood-spike-door.png",
    ⲆⲆᐃⵠⲆⲆΔ: "img/night-wood-spike-door.png",
    ⲆⲆⲆⵠⲆΔᐃ: "img/day-stone-spike-door.png",
    ⵠⵠΔⵠΔⵠΔ: "img/night-stone-spike-door.png",
    ⲆᐃⲆᐃᐃⵠⵠ: "img/day-gold-spike-door.png",
    ⲆⲆⵠΔⵠⲆⲆ: "img/night-gold-spike-door.png",
    ΔΔΔⵠⵠⵠⵠ: "img/day-diamond-spike-door.png",
    ⵠᐃⲆⲆᐃⵠᐃ: "img/night-diamond-spike-door.png",
    ⵠⲆⲆⲆⲆᐃΔ: "img/day-amethyst-spike-door.png",
    ᐃⵠᐃᐃⵠⲆΔ: "img/night-amethyst-spike-door.png",
    ⲆⵠΔⲆᐃᐃⵠ: "img/inv-reidite-spike-door-out.png",
    ⵠΔΔⵠⵠΔⵠ: "img/inv-reidite-spike-door-in.png",
    ᐃᐃᐃΔΔⵠΔ: "img/inv-reidite-spike-door-click.png",
    ⵠᐃⲆᐃⲆᐃΔ: "img/inv-reidite-door-out.png",
    ⵠⵠⲆⵠΔΔⲆ: "img/inv-reidite-door-in.png",
    ⵠⲆᐃⵠΔΔⲆ: "img/inv-reidite-door-click.png",
    ⲆΔΔⵠⲆᐃⲆ: "img/inv-reidite-spike-out.png",
    ΔⲆⵠΔⵠⵠⲆ: "img/inv-reidite-spike-in.png",
    ΔΔⲆᐃⵠΔΔ: "img/inv-reidite-spike-click.png",
    ᐃᐃⵠΔΔΔᐃ: "img/inv-reidite-wall-out.png",
    ΔⵠΔᐃᐃᐃⲆ: "img/inv-reidite-wall-in.png",
    ᐃⲆΔᐃⵠⵠΔ: "img/inv-reidite-wall-click.png",
    ΔⵠⵠⲆΔⵠⵠ: "img/day-reidite-wall.png",
    ᐃΔᐃⲆᐃᐃΔ: "img/night-reidite-wall.png",
    ⲆⲆᐃⵠΔᐃᐃ: "img/day-reidite-door.png",
    ⲆⲆⵠᐃⵠⲆⵠ: "img/night-reidite-door.png",
    ᐃᐃⲆΔⵠΔΔ: "img/day-reidite-spike.png",
    ⵠⲆᐃⵠⲆΔΔ: "img/night-reidite-spike.png",
    ⲆᐃᐃᐃᐃᐃⲆ: "img/day-reidite-spike-door.png",
    ᐃⵠⵠᐃⵠⵠⲆ: "img/night-reidite-spike-door.png",
    ᐃᐃⵠⵠᐃⲆⵠ: "img/inv-reidite-pickaxe-out.png",
    ΔΔᐃⵠⲆⲆⲆ: "img/inv-reidite-pickaxe-in.png",
    ΔⵠΔⵠΔⵠⲆ: "img/inv-reidite-pickaxe-click.png",
    ⲆᐃΔᐃⵠΔⲆ: "img/day-reidite-pickaxe.png",
    ⲆΔΔᐃⵠⲆⲆ: "img/night-reidite-pickaxe.png",
    ⵠΔⵠΔᐃᐃΔ: "img/inv-reidite-hammer-out.png",
    ΔⵠⲆᐃᐃⵠⲆ: "img/inv-reidite-hammer-in.png",
    ᐃⲆΔᐃⲆⲆΔ: "img/inv-reidite-hammer-click.png",
    ᐃⵠᐃⲆⲆΔΔ: "img/day-reidite-hammer.png",
    ⵠΔᐃⵠⵠΔⲆ: "img/night-reidite-hammer.png",
    ⲆᐃⵠⲆΔᐃⵠ: "img/day-watermelon1.png",
    ⲆᐃⵠⲆⵠᐃⵠ: "img/night-watermelon1.png",
    ΔⵠᐃⲆᐃⲆΔ: "img/day-watermelon-dried1.png",
    ⵠᐃⵠⲆⲆⵠΔ: "img/night-watermelon-dried1.png",
    ᐃⵠᐃⵠΔΔΔ: "img/inv-watermelon-out.png",
    Ⲇⵠᐃᐃⵠᐃᐃ: "img/inv-watermelon-in.png",
    ΔΔΔⲆᐃⵠⲆ: "img/inv-watermelon-click.png",
    ⵠⲆΔᐃⲆᐃⵠ: "img/day-boat.png",
    ⵠᐃⲆⵠᐃᐃᐃ: "img/night-boat.png",
    ⲆⵠⵠᐃᐃⵠⲆ: "img/day-boat-wave.png",
    ΔⵠΔⲆΔⵠⲆ: "img/night-boat-wave.png",
    ⵠΔⲆⲆΔⲆⵠ: "img/inv-boat-out.png",
    ΔΔⵠᐃΔⲆⲆ: "img/inv-boat-in.png",
    ᐃΔⵠⵠᐃΔΔ: "img/inv-boat-click.png",
    ⵠΔᐃᐃᐃᐃⵠ: "img/day-plane.png",
    ⵠΔᐃⲆΔΔⵠ: "img/night-plane.png",
    ΔΔⲆⲆᐃΔⵠ: "img/inv-plane-out.png",
    ᐃᐃΔⲆΔΔᐃ: "img/inv-plane-in.png",
    ⲆΔⲆⲆⲆⲆΔ: "img/inv-plane-click.png",
    ⵠᐃᐃⲆⵠΔᐃ: "img/day-sled.png",
    ᐃⵠⵠᐃⵠᐃΔ: "img/night-sled.png",
    ΔᐃⵠᐃᐃⲆⲆ: "img/day-sled-wave.png",
    ᐃΔΔᐃΔΔⵠ: "img/night-sled-wave.png",
    ΔᐃᐃᐃⵠⲆΔ: "img/inv-sled-out.png",
    ⲆΔⲆⵠⵠⵠΔ: "img/inv-sled-in.png",
    ΔᐃⲆΔΔΔΔ: "img/inv-sled-click.png",
    ᐃᐃΔᐃᐃᐃᐃ: "img/day-pirate-hat.png",
    ⵠⵠⲆᐃⵠΔΔ: "img/night-pirate-hat.png",
    ⵠᐃⵠⲆⵠⵠᐃ: "img/inv-pirate-hat-out.png",
    ᐃᐃᐃᐃⵠⲆⲆ: "img/inv-pirate-hat-in.png",
    ΔⵠⲆⵠΔⵠⵠ: "img/inv-pirate-hat-click.png",
    ⲆⲆΔⵠᐃⲆΔ: "img/day-penguin.png",
    ΔΔΔΔⲆᐃⲆ: "img/night-penguin.png",
    ⲆⵠⲆΔⵠⵠⲆ: "img/hurt-penguin.png",
    ⲆΔⵠⲆⲆ: "img/inv-penguin-feather-click.png",
    ⵠⲆΔᐃⵠ: "img/inv-hawk-feather-click.png",
    ⵠΔⲆΔΔⲆⲆ: "img/day-boar1.png",
    ⲆⲆΔᐃⲆᐃⲆ: "img/day-boar1-tamed.png",
    ⵠᐃΔΔⲆⵠⵠ: "img/day-boar1-angry.png",
    ⵠΔⲆⲆᐃⵠΔ: "img/night-boar1.png",
    ᐃΔΔΔᐃⵠᐃ: "img/night-boar1-tamed.png",
    ΔⲆⵠⵠᐃᐃⵠ: "img/night-boar1-angry.png",
    ΔⵠΔⲆⲆⵠᐃ: "img/inv-mount-boar-out.png",
    ΔΔⵠΔⲆⵠΔ: "img/inv-mount-boar-in.png",
    ΔᐃⵠΔⵠⵠᐃ: "img/inv-mount-boar-click.png",
    ΔᐃⲆⵠⵠΔⵠ: "img/day-hurt-boar1.png",
    ΔⲆⲆⵠΔⵠΔ: "img/boar1-step.png",
    ΔᐃᐃΔᐃⲆⵠ: "img/day-saddle1.png",
    ⵠΔⲆΔΔΔⵠ: "img/night-saddle1.png",
    ᐃⵠΔΔⲆΔⵠ: "img/inv-saddle-out.png",
    ⲆᐃΔⵠⵠΔⲆ: "img/inv-saddle-in.png",
    ᐃΔⲆⵠⵠᐃΔ: "img/inv-saddle-click.png",
    ᐃᐃⵠΔⲆⲆⲆ: "img/day-magic-wand0.png",
    ΔⵠΔΔⲆᐃⵠ: "img/night-magic-wand0.png",
    ⲆΔᐃⲆΔΔᐃ: "img/day-light-wand1.png",
    ᐃⲆᐃᐃⲆᐃⲆ: "img/night-light-wand1.png",
    ⵠⵠⵠⵠⵠΔΔ: "img/inv-magic-wand0-out.png",
    ᐃⲆⲆⵠᐃⵠᐃ: "img/inv-magic-wand0-in.png",
    ΔⲆⵠΔᐃⵠⵠ: "img/inv-magic-wand0-click.png",
    ΔⵠⲆⲆⲆⲆⲆ: "img/day-magic-wand1.png",
    ⲆΔⲆΔΔΔⵠ: "img/night-magic-wand1.png",
    ⵠⲆᐃⵠⲆⲆⵠ: "img/day-light-wand0.png",
    ΔᐃⵠᐃⵠⵠΔ: "img/night-light-wand0.png",
    ⲆⲆⲆᐃⵠΔⲆ: "img/inv-magic-wand1-out.png",
    ⲆⵠᐃⲆⲆΔⵠ: "img/inv-magic-wand1-in.png",
    ⵠᐃΔⲆΔⵠⵠ: "img/inv-magic-wand1-click.png",
    ⵠⲆⵠΔΔⲆⲆ: "img/day-firefly.png",
    ΔⲆΔΔᐃΔⲆ: "img/night-firefly.png",
    ΔᐃΔΔⲆΔⲆ: "img/hurt-firefly.png",
    ⲆΔⲆⲆⲆⵠΔ: "img/inv-firefly-out.png",
    ⲆⲆᐃᐃⵠᐃΔ: "img/inv-firefly-in.png",
    ΔΔᐃᐃⵠⵠⵠ: "img/inv-firefly-click.png",
    ⲆⲆΔᐃᐃⲆΔ: "img/day-baby-dragon.png",
    ⵠⲆΔᐃⲆΔⲆ: "img/night-baby-dragon.png",
    ⵠΔⵠΔⵠᐃⵠ: "img/day-baby-dragon-angry.png",
    ΔⲆⵠΔᐃᐃΔ: "img/night-baby-dragon-angry.png",
    ΔⲆⵠⵠΔⲆⲆ: "img/day-baby-dragon-tamed.png",
    ᐃᐃⲆΔᐃⵠⲆ: "img/night-baby-dragon-tamed.png",
    ⵠΔΔⵠⲆⵠⵠ: "img/day-wing-dragon-left-angry.png",
    ΔΔⲆΔΔΔⵠ: "img/night-dragon-wing-left-angry.png",
    ᐃⲆⲆΔⲆⲆⲆ: "img/day-wing-dragon-right-angry.png",
    ΔⵠᐃΔᐃⵠΔ: "img/night-dragon-wing-right-angry.png",
    ⵠΔⵠᐃΔΔⲆ: "img/day-wing-dragon-left-tamed.png",
    ᐃΔⵠⵠⵠᐃᐃ: "img/night-dragon-wing-left-tamed.png",
    ΔⲆⵠᐃᐃᐃᐃ: "img/day-wing-dragon-right-tamed.png",
    ⲆⲆΔⲆᐃᐃⲆ: "img/night-wing-dragon-right-tamed.png",
    ⲆΔⲆᐃⲆΔⲆ: "img/day-wing-dragon-left.png",
    ⲆⲆᐃΔΔⵠⵠ: "img/night-dragon-wing-left.png",
    ΔⲆᐃΔᐃⲆΔ: "img/day-wing-dragon-right.png",
    ΔᐃΔΔⲆⲆⲆ: "img/night-wing-dragon-right.png",
    ⵠΔⵠⲆⵠΔᐃ: "img/hurt-baby-dragon.png",
    ΔΔᐃⵠΔᐃⲆ: "img/hurt-baby-dragon-wing-left.png",
    ⵠⲆᐃⵠⵠᐃⵠ: "img/hurt-baby-dragon-wing-right.png",
    ⵠᐃΔⲆⲆⵠⲆ: "img/inv-baby-dragon-out.png",
    ΔⲆⵠⵠᐃΔΔ: "img/inv-baby-dragon-in.png",
    ⵠⲆⵠΔᐃⲆⵠ: "img/inv-baby-dragon-click.png",
    ⵠⵠΔⵠⵠᐃⵠ: "img/day-baby-lava.png",
    ΔᐃΔᐃΔⲆⲆ: "img/night-baby-lava.png",
    ⵠⵠΔΔΔᐃᐃ: "img/day-baby-lava-angry.png",
    ⲆΔⵠᐃΔΔΔ: "img/night-baby-lava-angry.png",
    ΔΔⲆΔᐃⲆⵠ: "img/day-baby-lava-tamed.png",
    ΔΔᐃⵠⵠⲆⲆ: "img/night-baby-lava-tamed.png",
    ᐃⲆᐃⲆᐃΔⲆ: "img/day-wing-lava-left-angry.png",
    ΔᐃⵠᐃᐃⲆᐃ: "img/night-wing-lava-left-angry.png",
    ⵠΔΔⲆⲆᐃⲆ: "img/day-wing-lava-right-angry.png",
    ΔᐃⲆΔⵠΔΔ: "img/night-wing-lava-right-angry.png",
    ⵠΔⵠΔΔⲆΔ: "img/day-wing-lava-left-tamed.png",
    ⵠΔΔᐃⲆⲆᐃ: "img/night-wing-lava-left-tamed.png",
    ⵠⵠⲆⲆⵠⲆΔ: "img/day-wing-lava-right-tamed.png",
    ⲆΔⲆⵠΔⲆΔ: "img/night-wing-lava-right-tamed.png",
    ⲆⵠᐃΔⲆΔⵠ: "img/day-wing-lava-left.png",
    ⲆⵠΔⵠⵠΔⵠ: "img/night-wing-lava-left.png",
    ⲆⲆⲆᐃᐃⲆᐃ: "img/day-wing-lava-right.png",
    ⵠΔΔⲆⵠΔⲆ: "img/night-wing-lava-right.png",
    ⲆᐃⲆⵠⵠΔᐃ: "img/hurt-baby-lava.png",
    ⲆΔⵠΔⵠⵠⲆ: "img/hurt-baby-lava-wing-left.png",
    ⵠΔΔⵠᐃⵠⲆ: "img/hurt-baby-lava-wing-right.png",
    ᐃΔΔⲆⲆⵠΔ: "img/inv-baby-lava-out.png",
    ΔⵠⵠⵠⲆⲆⵠ: "img/inv-baby-lava-in.png",
    ⵠᐃΔΔᐃΔⲆ: "img/inv-baby-lava-click.png",
    ᐃⵠᐃⵠⵠΔΔ: "img/day-falcon.png",
    ⵠⵠⲆⵠⲆⲆΔ: "img/night-falcon.png",
    ᐃΔΔΔΔⲆᐃ: "img/day-falcon-angry.png",
    ⲆⵠⵠⲆⲆⲆΔ: "img/night-falcon-angry.png",
    ᐃᐃΔᐃᐃΔᐃ: "img/day-falcon-ground.png",
    ΔⲆᐃⲆⲆᐃΔ: "img/night-falcon-ground.png",
    ⵠΔΔⵠⵠⲆⲆ: "img/day-falcon-ground-angry.png",
    ⵠΔᐃΔΔᐃΔ: "img/night-falcon-ground-angry.png",
    ᐃᐃᐃⲆⲆⵠΔ: "img/day-falcon-wings-left.png",
    ᐃΔⵠᐃΔᐃⵠ: "img/night-falcon-wings-left.png",
    ⲆⵠⲆⵠⵠⵠΔ: "img/day-falcon-wings-right.png",
    ΔᐃᐃⲆᐃᐃⵠ: "img/night-falcon-wings-right.png",
    ΔⲆᐃⵠⵠⵠΔ: "img/day-falcon-angry-wings-left.png",
    ΔⵠᐃⵠⵠΔᐃ: "img/night-falcon-angry-wings-left.png",
    ᐃᐃᐃⵠᐃᐃᐃ: "img/day-falcon-angry-wings-right.png",
    ⲆᐃⲆΔΔᐃⵠ: "img/night-falcon-angry-wings-right.png",
    ᐃⲆⵠⵠⲆΔΔ: "img/day-falcon-wings-left-tamed.png",
    ΔΔΔⵠⵠⲆΔ: "img/night-falcon-wings-left-tamed.png",
    ᐃᐃᐃΔⲆⵠⲆ: "img/day-falcon-wings-right-tamed.png",
    ᐃᐃΔⲆⵠⵠᐃ: "img/night-falcon-wings-right-tamed.png",
    ⲆΔᐃᐃᐃⲆⵠ: "img/day-falcon-tamed.png",
    ⲆΔᐃᐃᐃⵠᐃ: "img/night-falcon-tamed.png",
    ᐃᐃΔⲆⵠⲆΔ: "img/hurt-falcon-ground.png",
    ΔⵠΔⵠΔⲆΔ: "img/hurt-falcon.png",
    ⵠⵠⲆⵠᐃⲆᐃ: "img/hurt-falcon-wings-left.png",
    ⲆᐃⵠⵠⵠⵠⲆ: "img/hurt-falcon-wings-right.png",
    ⲆⲆᐃΔΔⲆⵠ: "img/inv-falcon-out.png",
    ΔⲆⵠⵠᐃⵠⵠ: "img/inv-falcon-in.png",
    ᐃᐃⵠⵠᐃⵠⵠ: "img/inv-falcon-click.png",
    ⵠⵠΔᐃᐃⵠᐃ: "img/day-crab-boss.png",
    ᐃⲆⲆΔᐃΔⲆ: "img/night-crab-boss.png",
    ⲆⵠⲆᐃⵠⵠΔ: "img/day-crab-boss-angry.png",
    ᐃⲆΔⲆᐃᐃᐃ: "img/night-crab-boss-angry.png",
    ⵠᐃᐃⵠⲆᐃⲆ: "img/day-crab-boss-tamed.png",
    ΔᐃΔⲆⲆⵠⲆ: "img/night-crab-boss-tamed.png",
    ΔⵠⵠⵠⲆΔⵠ: "img/day-crab-boss-claw-left-attack.png",
    ᐃⲆⲆⵠⲆᐃⲆ: "img/night-crab-boss-claw-left-attack.png",
    ⵠᐃⲆᐃⵠᐃⲆ: "img/day-crab-boss-claw-right-attack.png",
    ⲆⲆᐃⲆΔᐃᐃ: "img/night-crab-boss-claw-right-attack.png",
    ⵠⲆᐃⲆΔⵠΔⵠΔ: "img/day-crab-boss-claw-left-tamed.png",
    ⲆⲆⵠⲆΔⵠⵠⲆⵠ: "img/night-crab-boss-claw-left-tamed.png",
    ᐃⵠᐃΔⵠᐃΔⵠⵠ: "img/day-crab-boss-claw-right-tamed.png",
    ΔΔᐃⵠᐃⲆⲆⵠᐃ: "img/night-crab-boss-claw-right-tamed.png",
    ΔⵠΔⵠᐃⲆⵠ: "img/day-crab-boss-claw-left.png",
    ᐃΔⲆΔⲆᐃⲆ: "img/night-crab-boss-claw-left.png",
    ⲆⲆⲆΔⵠΔᐃ: "img/day-crab-boss-claw-right.png",
    ΔᐃΔⲆΔⲆⲆ: "img/night-crab-boss-claw-right.png",
    ⵠᐃΔⲆᐃᐃΔ: "img/hurt-crab-boss.png",
    ⲆᐃⵠⲆⵠⲆⲆ: "img/hurt-crab-boss-claw-left.png",
    ⵠΔⵠⲆⵠⵠᐃ: "img/hurt-crab-boss-claw-right.png",
    ⲆΔᐃᐃᐃⵠⵠ: "img/heal-crab-boss.png",
    ᐃΔᐃΔⵠⲆΔ: "img/heal-crab-boss-claw-left.png",
    ᐃΔⲆΔΔⵠΔ: "img/heal-crab-boss-claw-right.png",
    ΔΔⲆΔΔΔᐃ: "img/crab-step.png",
    ΔᐃΔⲆᐃⵠⵠ: "img/inv-crab-boss-out.png",
    ΔΔΔⲆⵠⲆΔ: "img/inv-crab-boss-in.png",
    ΔᐃⵠⲆΔⲆⵠ: "img/inv-crab-boss-click.png",
    ⲆΔⵠΔⲆⵠⲆ: "img/day-cactus10.png",
    ⵠⵠⵠⲆⲆⲆΔ: "img/night-cactus10.png",
    ⵠΔᐃⵠⵠⵠⲆ: "img/inv-cactus-out.png",
    ⲆΔΔΔᐃΔⲆ: "img/inv-cactus-in.png",
    ΔⲆΔᐃΔⵠⲆ: "img/inv-cactus-click.png",
    ΔⲆⲆᐃⲆⵠⲆ: "img/day-scorpion.png",
    ⵠΔᐃΔⵠΔⵠ: "img/night-scorpion.png",
    ⲆⵠⲆᐃⲆᐃΔ: "img/day-scorpion-hand-left.png",
    ⲆⲆᐃⵠⵠⲆᐃ: "img/night-scorpion-hand-left.png",
    ⲆΔΔⵠᐃⲆΔ: "img/day-scorpion-hand-right.png",
    ΔΔΔⵠⲆⵠⲆ: "img/night-scorpion-hand-right.png",
    ᐃⵠᐃΔⵠⲆᐃ: "img/hurt-scorpion.png",
    ΔⵠⲆⲆΔⲆΔ: "img/hurt-scorpion-hand-left.png",
    ΔⵠᐃⲆΔⲆⲆ: "img/hurt-scorpion-hand-right.png",
    ᐃⵠᐃᐃᐃⲆⵠ: "img/day-vulture.png",
    ⵠΔΔⲆᐃᐃⲆ: "img/night-vulture.png",
    ⵠΔᐃⲆᐃΔΔ: "img/day-vulture-angry.png",
    ⲆᐃΔⲆⵠΔΔ: "img/night-vulture-angry.png",
    ΔⲆⵠᐃⵠⵠⵠ: "img/day-vulture-ground.png",
    ᐃΔΔⲆΔᐃⵠ: "img/night-vulture-ground.png",
    ⲆⲆΔⵠⵠⲆᐃ: "img/day-vulture-ground-angry.png",
    ⵠΔⲆΔⵠⲆⵠ: "img/night-vulture-ground-angry.png",
    ⲆΔⲆⵠΔᐃⵠ: "img/day-vulture-wings-left.png",
    ΔᐃⵠⲆⵠⲆᐃ: "img/night-vulture-wings-left.png",
    ⵠⲆⲆΔⵠⵠⲆ: "img/day-vulture-wings-right.png",
    ⵠΔΔⲆΔᐃⲆ: "img/night-vulture-wings-right.png",
    ⵠⵠⵠⲆⵠΔᐃ: "img/day-vulture-angry-wings-left.png",
    Ⲇᐃⵠⵠᐃⵠⵠ: "img/night-vulture-angry-wings-left.png",
    ⵠᐃⵠΔᐃⵠΔ: "img/day-vulture-angry-wings-right.png",
    ᐃⵠⵠΔΔⵠᐃ: "img/night-vulture-angry-wings-right.png",
    ⲆⵠΔⵠⲆⲆᐃ: "img/day-vulture-wings-left-tamed.png",
    ΔⲆⵠⲆⲆΔᐃ: "img/night-vulture-wings-left-tamed.png",
    ᐃⵠΔⲆⵠᐃⵠ: "img/day-vulture-wings-right-tamed.png",
    ⲆᐃᐃⵠⲆⵠⲆ: "img/night-vulture-wings-right-tamed.png",
    ᐃΔⲆᐃⲆᐃΔ: "img/day-vulture-tamed.png",
    ΔⲆᐃⲆⵠᐃⵠ: "img/night-vulture-tamed.png",
    ⵠⲆᐃᐃΔᐃⲆ: "img/hurt-vulture-ground.png",
    ᐃⵠΔⲆΔᐃⵠ: "img/hurt-vulture.png",
    ⲆᐃⲆᐃⲆᐃⵠ: "img/hurt-vulture-wings-left.png",
    ⵠᐃᐃⵠⵠᐃᐃ: "img/hurt-vulture-wings-right.png",
    ᐃⲆᐃΔⵠᐃᐃ: "img/day-aloe-vera.png",
    ᐃⲆⵠΔᐃⲆⵠ: "img/night-aloe-vera.png",
    ᐃᐃⲆⵠᐃⲆⵠ: "img/inv-aloe-vera-out.png",
    ᐃⵠΔⲆᐃΔⵠ: "img/inv-aloe-vera-in.png",
    ⲆᐃⲆⵠⲆᐃⵠ: "img/inv-aloe-vera-click.png",
    ⲆⵠⵠⵠΔⲆⲆ: "img/day-aloe-vera-grown.png",
    ⲆⵠᐃⵠⵠᐃΔ: "img/night-aloe-vera-grown.png",
    ⲆᐃᐃⵠΔⲆⲆ: "img/day-aloe-vera-dried.png",
    ⲆⲆᐃΔΔᐃΔ: "img/night-aloe-vera-dried.png",
    ⵠⵠⵠⵠᐃΔΔ: "img/day-turban1.png",
    ΔⲆΔⵠⵠⲆΔ: "img/night-turban1.png",
    ⵠⵠᐃᐃΔⲆΔ: "img/day-turban2.png",
    ᐃⵠᐃᐃⵠᐃΔ: "img/night-turban2.png",
    ᐃⵠⵠⲆᐃⵠⵠ: "img/inv-turban2-out.png",
    ΔⵠⲆᐃᐃΔΔ: "img/inv-turban2-in.png",
    ᐃᐃⵠᐃᐃᐃᐃ: "img/inv-turban2-click.png",
    ⲆᐃⲆΔⵠⵠⵠ: "img/inv-turban1-out.png",
    ᐃᐃΔᐃⵠᐃⵠ: "img/inv-turban1-in.png",
    ⵠⲆΔΔΔΔᐃ: "img/inv-turban1-click.png",
    ⲆᐃΔᐃΔⵠⵠ: "img/day-pitchfork2.png",
    ⲆᐃᐃᐃΔⵠⲆ: "img/night-pitchfork2.png",
    ΔⲆᐃⵠⲆⵠⲆ: "img/inv-pitchfork2-out.png",
    ΔΔⵠΔΔΔΔ: "img/inv-pitchfork2-in.png",
    ᐃᐃⲆⲆⲆΔᐃ: "img/inv-pitchfork2-click.png",
    ⵠΔᐃⲆᐃᐃΔ: "img/inv-gold-fork-click.png",
    ⲆᐃᐃⵠⲆᐃⲆ: "img/inv-pilot-glasses-click.png",
    ΔⲆⵠΔⵠᐃᐃ: "img/day-pilot-helmet.png",
    ⵠᐃⲆⲆⲆᐃⲆ: "img/night-pilot-helmet.png",
    ⵠΔᐃⲆΔⲆⲆ: "img/inv-pilot-helmet-out.png",
    ᐃᐃⵠΔᐃⲆⵠ: "img/inv-pilot-helmet-in.png",
    ᐃᐃⲆᐃᐃᐃⲆ: "img/inv-pilot-helmet-click.png",
    ᐃⲆⵠΔⵠΔᐃᐃⵠ: "img/day-sandworm0.png",
    ⵠΔⲆⲆΔⵠΔ: "img/day-sandworm1.png",
    ΔΔⵠⲆⲆⵠΔ: "img/day-sandworm2.png",
    ⵠⲆΔⲆΔⵠⵠᐃⵠ: "img/night-sandworm0.png",
    ΔⵠᐃⵠⵠⲆⵠ: "img/night-sandworm1.png",
    ΔⵠᐃΔⲆⲆⵠ: "img/night-sandworm2.png",
    ⵠⵠⲆⲆⵠⲆⲆ: "img/hurt-sandworm0.png",
    ⲆⵠⵠⵠⵠⲆⵠ: "img/hurt-sandworm1.png",
    ⵠⵠⲆⲆⲆⵠΔ: "img/hurt-sandworm2.png",
    ⲆᐃⲆΔΔ: "img/inv-vulture-feather-click.png",
    ⵠⲆⲆⵠΔᐃᐃ: "img/day-emerald0.png",
    ΔᐃⵠⵠᐃⵠⲆ: "img/night-emerald0.png",
    ΔᐃⵠⵠΔΔΔ: "img/day-emerald1.png",
    ΔΔⲆᐃᐃⵠⲆ: "img/night-emerald1.png",
    ⵠⲆᐃΔⵠⵠΔ: "img/day-emerald2.png",
    ᐃΔⵠᐃΔΔΔ: "img/night-emerald2.png",
    ΔⲆⲆⲆΔ: "img/inv-emerald-click.png",
    ⲆⲆᐃⲆⲆⲆΔ: "img/inv-sworm-juice-out.png",
    ᐃΔᐃΔⵠⲆⲆ: "img/inv-sworm-juice-in.png",
    ⲆⵠⵠᐃⲆΔⲆ: "img/inv-sworm-juice-click.png",
    ΔΔⵠⲆⲆⵠⲆ: "img/day-point-machine.png",
    ᐃⵠⲆΔᐃᐃᐃ: "img/night-point-machine.png",
    ᐃᐃᐃⵠᐃΔⲆ: "img/day-point-machine-hole.png",
    ⵠᐃΔΔΔᐃΔ: "img/night-point-machine-hole.png",
    ᐃⲆⵠᐃΔΔⵠ: "img/day-point-machine-ground.png",
    ΔⵠⲆᐃΔⵠᐃ: "img/night-point-machine-ground.png",
    ⲆᐃⲆΔⵠᐃᐃ: "img/day-point-machine-rotate.png",
    ⵠᐃΔⲆΔⵠⲆ: "img/night-point-machine-rotate.png",
    ⲆⲆⵠᐃΔΔⵠ: "img/inv-point-machine-out.png",
    ΔⵠⲆⵠᐃᐃⲆ: "img/inv-point-machine-in.png",
    ⲆᐃⵠⲆΔⵠΔ: "img/inv-point-machine-click.png",
    ᐃⵠⵠⲆⵠᐃⲆ: "img/day-extractor-machine0-stone.png",
    ⵠᐃⲆⵠΔᐃΔ: "img/night-extractor-machine0-stone.png",
    ΔΔᐃⲆⲆΔⲆ: "img/day-extractor-machine-stone.png",
    ᐃΔⵠΔΔᐃⲆ: "img/night-extractor-machine-stone.png",
    ⵠΔᐃⵠΔⲆΔ: "img/inv-extractor-machine-stone-out.png",
    ᐃΔᐃⵠⵠᐃΔ: "img/inv-extractor-machine-stone-in.png",
    ⲆᐃⲆⲆⵠⲆᐃ: "img/inv-extractor-machine-stone-click.png",
    ⵠⲆⵠⵠⵠᐃᐃ: "img/day-extractor-machine0-gold.png",
    ⵠΔᐃᐃⲆⵠᐃ: "img/night-extractor-machine0-gold.png",
    ⲆᐃⲆⲆⲆΔⵠ: "img/day-extractor-machine-gold.png",
    ⲆⲆⵠⲆΔΔΔ: "img/night-extractor-machine-gold.png",
    ⵠᐃᐃΔᐃᐃⵠ: "img/inv-extractor-machine-gold-out.png",
    ⲆᐃⵠΔᐃΔⲆ: "img/inv-extractor-machine-gold-in.png",
    ᐃⲆΔΔⵠΔⵠ: "img/inv-extractor-machine-gold-click.png",
    ΔⲆⵠᐃΔΔΔ: "img/day-extractor-machine0-diamond.png",
    ᐃⵠⵠⵠⵠΔⲆ: "img/night-extractor-machine0-diamond.png",
    ᐃᐃΔᐃᐃΔⵠ: "img/day-extractor-machine-diamond.png",
    ΔⲆⲆⵠΔᐃΔ: "img/night-extractor-machine-diamond.png",
    ⲆⵠᐃΔⲆΔⲆ: "img/inv-extractor-machine-diamond-out.png",
    ΔᐃⲆᐃΔΔⲆ: "img/inv-extractor-machine-diamond-in.png",
    ᐃⵠᐃⵠⵠᐃⵠ: "img/inv-extractor-machine-diamond-click.png",
    ⵠⲆΔΔⵠⲆᐃ: "img/day-extractor-machine0-amethyst.png",
    ⵠⲆⲆⵠⵠⲆΔ: "img/night-extractor-machine0-amethyst.png",
    ΔⲆᐃΔᐃΔᐃ: "img/day-extractor-machine-amethyst.png",
    ᐃᐃⵠⲆΔⵠⲆ: "img/night-extractor-machine-amethyst.png",
    ⵠⵠᐃⵠΔᐃⵠ: "img/inv-extractor-machine-amethyst-out.png",
    ᐃΔΔᐃⲆⲆᐃ: "img/inv-extractor-machine-amethyst-in.png",
    ⵠᐃⲆⲆᐃⲆᐃ: "img/inv-extractor-machine-amethyst-click.png",
    ᐃⵠΔⲆᐃⲆΔ: "img/day-extractor-machine0-reidite.png",
    ⲆⲆⲆΔⵠⲆⵠ: "img/night-extractor-machine0-reidite.png",
    ⲆΔⲆᐃⲆᐃⵠ: "img/day-extractor-machine-reidite.png",
    ⲆⲆⵠᐃⵠⵠⵠ: "img/night-extractor-machine-reidite.png",
    ΔⵠᐃⲆΔⲆⵠ: "img/inv-extractor-machine-reidite-out.png",
    ⵠᐃΔⵠᐃᐃᐃ: "img/inv-extractor-machine-reidite-in.png",
    ⲆΔΔⲆΔⲆⵠ: "img/inv-extractor-machine-reidite-click.png",
    ⲆΔΔᐃᐃᐃΔ: "img/extractor-cases.png",
    ᐃⵠᐃⵠⲆⵠⵠ: "img/day-golden-hen.png",
    ΔΔᐃΔⲆⵠⲆ: "img/night-golden-hen.png",
    ΔᐃⵠᐃⵠⲆΔ: "img/day-golden-chicken.png",
    ⵠⵠΔΔⵠᐃΔ: "img/night-golden-chicken.png",
    ᐃᐃⵠⲆⵠΔⵠ: "img/hurt-golden-hen.png",
    ΔⲆᐃΔⲆΔᐃ: "img/hurt-golden-chicken.png",
    ⲆⵠⵠΔⲆⵠΔ: "img/logo-interface.png",
    ᐃᐃⲆᐃΔⲆⲆ: "img/forest-mode-hover.png",
    ᐃΔⲆⲆⵠΔⵠ: "img/normal-mode-hover.png",
    ⵠᐃΔⵠΔⵠⲆ: "img/vampire-mode-hover.png",
    ⵠΔⵠᐃⲆᐃᐃ: "img/zombie-mode-hover.png",
    ⵠΔᐃΔΔⵠⵠ: "img/community-mode-hover2.png",
    ⲆᐃⵠΔⵠⲆⵠ: "img/experimental-mode-hover.png",
    ΔΔⵠⵠⲆᐃⲆ: "img/zombie-mode-out.png",
    ᐃⲆⲆⵠᐃΔⲆ: "img/zombie-mode-in.png",
    ⵠⲆΔⲆⲆⲆΔ: "img/zombie-mode-click.png",
    ΔⲆΔΔᐃⲆΔ: "img/vampire-mode-out.png",
    ⲆⵠᐃΔⲆⵠⵠ: "img/vampire-mode-in.png",
    ⵠᐃⲆⵠⵠᐃᐃ: "img/vampire-mode-click.png",
    ΔⲆᐃᐃΔᐃⵠ: "img/normal-mode-out.png",
    ᐃⲆⲆⵠΔᐃΔ: "img/normal-mode-in.png",
    ⲆΔⵠⵠⲆⵠⵠ: "img/normal-mode-click.png",
    ΔᐃⵠΔⵠΔⵠ: "img/forest-mode-out.png",
    ΔΔⵠⲆⵠⲆⵠ: "img/forest-mode-in.png",
    ΔⵠΔⲆᐃᐃᐃ: "img/forest-mode-click.png",
    ⵠΔᐃΔⲆⵠᐃ: "img/community-mode-out.png",
    ⵠᐃⲆᐃΔΔΔ: "img/community-mode-in.png",
    ⵠⵠΔⲆⵠΔᐃ: "img/community-mode-click.png",
    ΔⲆⲆⵠᐃⲆΔ: "img/experimental-modes-out.png",
    Δⵠⵠᐃᐃᐃⵠ: "img/experimental-modes-in.png",
    ⲆΔⵠᐃᐃΔᐃ: "img/experimental-modes-click.png",
    ᐃⵠⲆⵠΔΔⵠ: "img/youtube-button-out.png",
    ⵠⵠⵠΔΔᐃⲆ: "img/youtube-button-in.png",
    ⵠⲆⲆⵠΔᐃⵠ: "img/youtube-button-click.png",
    ⲆⵠⲆⵠᐃᐃΔ: "img/wiki-button-out.png",
    ᐃΔΔⲆⲆΔⵠ: "img/wiki-button-in.png",
    ΔⲆΔⲆⲆⲆⵠ: "img/wiki-button-click.png",
    ⵠⵠᐃᐃᐃⵠⵠ: "img/twitter-button-out.png",
    ΔⵠⵠⲆᐃᐃⲆ: "img/twitter-button-in.png",
    ᐃⵠΔΔⵠᐃⵠ: "img/twitter-button-click.png",
    ΔΔΔΔⲆΔⲆ: "img/facebook-button-out.png",
    ᐃⵠⲆⲆⵠⵠⵠ: "img/facebook-button-in.png",
    ⵠΔⵠⵠⵠⲆⵠ: "img/facebook-button-click.png",
    ⵠΔΔΔᐃᐃΔ: "img/reddit-button-out.png",
    ᐃᐃⲆᐃΔΔⲆ: "img/reddit-button-in.png",
    Ⲇᐃⵠⵠⵠⵠⵠ: "img/reddit-button-click.png",
    ⲆΔᐃⵠⲆᐃⵠ: "img/discord-button-out.png",
    ⵠⲆⲆⲆᐃⵠᐃ: "img/discord-button-in.png",
    ΔᐃⲆⵠⵠᐃⲆ: "img/discord-button-click.png",
    ⲆΔᐃΔᐃΔΔ: "img/merch-button-out.png",
    ΔΔⵠⲆⵠⵠᐃ: "img/merch-button-in.png",
    ⲆⲆᐃⲆⲆᐃⵠ: "img/merch-button-click.png",
    ⲆⲆⵠᐃⲆΔΔᐃΔ: "img/terminal-button-out.png",
    ᐃⵠⲆⵠⵠⵠΔᐃⵠ: "img/terminal-button-in.png",
    ⵠᐃⲆᐃⲆᐃΔΔⵠ: "img/terminal-button-click.png",
    ⲆᐃᐃᐃⵠΔΔ: "img/restart-out.png",
    ΔⵠΔⲆᐃᐃⲆ: "img/restart-in.png",
    ⵠΔⲆΔⵠΔᐃ: "img/restart-click.png",
    ΔⲆᐃⲆΔⵠΔ: "img/reboot-out.png",
    ΔᐃⲆⲆⲆΔⵠ: "img/reboot-in.png",
    ⵠⲆⲆⲆᐃᐃᐃ: "img/reboot-click.png",
    ᐃⵠΔⵠᐃⲆⵠ: "img/guide-out.png",
    ⵠΔΔⲆΔⵠᐃ: "img/guide-in.png",
    ᐃΔΔᐃΔⲆⵠ: "img/guide-click.png",
    ⵠΔᐃᐃⵠΔΔ: "img/copy-paste-out.png",
    ᐃᐃⲆⲆᐃΔⵠ: "img/copy-paste-in.png",
    ⵠᐃᐃⲆⵠⲆⲆ: "img/copy-paste-click.png",
    ⲆⲆΔⲆᐃΔⲆ: "img/link-buttons-bg.png",
    ᐃⵠᐃⵠⲆΔⲆ: "img/changelog-box2.png",
    ᐃⵠⲆⲆⲆⲆⵠ: "img/changelog_31.png",
    ⵠᐃΔᐃᐃⲆᐃ: "img/banner-taming.png",
    ⲆⵠᐃⵠᐃᐃⲆ: "img/profile-button-out.png",
    ᐃⲆⲆⵠᐃΔⵠ: "img/profile-button-in.png",
    ⲆΔΔᐃΔΔⲆ: "img/profile-button-click.png",
    ⵠᐃⲆᐃᐃⵠⵠ: "img/login-button-out.png",
    ᐃⵠΔⵠⵠⲆⵠ: "img/login-button-in.png",
    ΔⵠⵠᐃⲆᐃᐃ: "img/login-button-click.png",
    ΔⲆⲆⵠⲆⵠΔ: "img/login-google-out.png",
    ⵠΔΔⵠⵠⵠᐃ: "img/login-google-in.png",
    ⵠᐃⲆⵠΔⲆΔ: "img/login-google-click.png",
    ΔᐃΔᐃⵠⵠⲆ: "img/login-facebook-out.png",
    ᐃⵠΔⲆᐃⵠⲆ: "img/login-facebook-in.png",
    ΔᐃΔⵠⲆⵠⵠ: "img/login-facebook-click.png",
    ⵠⵠᐃΔΔⲆⵠ: "img/account-box.png",
    ⵠᐃⲆᐃⲆΔⵠᐃΔ: "img/account-under-maintenance.png",
    ᐃⲆΔⲆⲆΔⵠ: "img/close-button-account-out.png",
    ΔΔᐃⲆΔⲆᐃ: "img/close-button-account-in.png",
    ᐃⵠᐃⲆΔΔⲆ: "img/close-button-account-click.png",
    ⵠⵠⲆⲆᐃⲆΔ: "img/play-button-out.png",
    ⲆᐃⲆᐃᐃⲆⵠ: "img/play-button-in.png",
    ᐃΔⵠⲆⲆΔᐃ: "img/play-button-click.png",
    ᐃⲆᐃΔᐃΔᐃⵠᐃ: "img/app-store-badge.png",
    ⵠΔⵠⵠΔᐃΔⲆᐃ: "img/play-store-badge.png",
    ΔᐃⵠᐃΔᐃΔⵠᐃ: "img/mobile-boxad.png",
    ᐃΔⲆᐃⲆΔⲆ: "img/modify-name-out.png",
    ΔⵠᐃⲆⵠⲆΔ: "img/modify-name-in.png",
    ΔⵠΔⲆⵠΔⲆ: "img/modify-name-click.png",
    ᐃⲆⵠᐃΔⲆᐃ: "img/copy-id-button-out.png",
    ⵠΔᐃⲆⲆⲆⲆ: "img/copy-id-button-hover.png",
    ⵠⲆᐃᐃᐃᐃᐃ: "img/copy-id-button-active.png",
    ⲆⵠⵠⵠⲆᐃⵠ: "img/yes-button-out.png",
    ⲆⲆⵠⲆⵠᐃⵠ: "img/yes-button-in.png",
    ᐃᐃᐃΔⵠΔⵠ: "img/yes-button-click.png",
    ⲆΔⵠⲆⵠⲆΔ: "img/yes-300-button-out.png",
    ΔΔΔⲆᐃⲆⲆ: "img/yes-300-button-in.png",
    ΔⲆⲆΔᐃⲆᐃ: "img/yes-300-button-click.png",
    ΔᐃⲆⵠᐃⵠΔ: "img/no-button-out.png",
    ΔᐃΔⲆᐃⵠᐃ: "img/no-button-in.png",
    ΔⵠᐃⵠⲆⵠⲆ: "img/no-button-click.png",
    ᐃΔⲆⲆΔⵠᐃ: "img/no-thanks-button-out.png",
    ᐃⲆᐃΔⵠⵠΔ: "img/no-thanks-button-in.png",
    ⲆΔⵠⲆΔΔⵠ: "img/no-thanks-button-click.png",
    ΔΔⲆⲆⲆⲆⲆ: "img/shop-button-out.png",
    ᐃΔⵠᐃΔⵠᐃ: "img/shop-button-in.png",
    ⲆᐃⲆⲆⲆᐃΔ: "img/shop-button-click.png",
    ⲆⵠⵠΔᐃΔⲆ: "img/logout-out.png",
    ⵠⲆⵠⲆⲆⵠΔ: "img/logout-in.png",
    ⲆᐃᐃⵠΔⲆᐃ: "img/logout-click.png",
    ⵠᐃᐃΔΔΔᐃ: "img/terms-button-out.png",
    ⲆΔᐃⵠⲆⲆᐃ: "img/terms-button-in.png",
    ᐃⲆⵠᐃⲆᐃΔ: "img/terms-button-click.png",
    ΔⵠⵠᐃⲆⲆⵠ: "img/tutorial-icon.png",
    ⵠΔⵠⵠⵠΔᐃ: "img/skins-icon.png",
    ⲆΔᐃⵠᐃⵠⲆ: "img/shop-icon.png",
    ΔΔⵠⲆⲆⵠΔⲆⲆ: "img/paint-icon.png",
    ᐃⲆᐃⵠⵠⲆΔ: "img/leaderboard-icon.png",
    ⵠⲆⲆΔⲆⵠᐃ: "img/start-icon.png",
    ΔⵠᐃΔⲆᐃⵠ: "img/profile-icon.png",
    ᐃⵠⵠΔΔᐃΔ: "img/server-access-icon2.png",
    ⵠⲆΔⵠΔᐃΔ: "img/button-homepage-bg-out.png",
    ⲆᐃⵠⵠΔᐃΔ: "img/button-homepage-bg-in.png",
    ⵠⲆΔᐃΔᐃΔ: "img/button-homepage-bg-click.png",
    ᐃⲆᐃᐃⲆᐃΔ: "img/button-bottom-homepage-bg-out.png",
    ⲆΔΔⲆᐃᐃΔ: "img/button-bottom-homepage-bg-in.png",
    ᐃΔΔΔⲆᐃᐃ: "img/button-bottom-homepage-bg-click.png",
    ⵠⲆⵠⵠΔΔΔ: "img/lvl-player.png",
    ⵠΔⲆⵠᐃⵠᐃ: "img/avatar-player.png",
    ⲆΔᐃⵠΔⵠᐃ: "img/avatar-player1.png",
    Ⲇⵠᐃⵠᐃⵠᐃ: "img/avatar-player2.png",
    ⲆΔⲆⵠⲆⲆΔ: "img/avatar-player3.png",
    ⵠᐃⲆΔⲆᐃᐃ: "img/avatar-player4.png",
    ⲆⵠΔⵠΔⵠⲆ: "img/avatar-player5.png",
    ⲆΔΔΔᐃⵠⲆ: "img/avatar-player6.png",
    ⲆⵠⲆᐃΔⵠⵠ: "img/avatar-player7.png",
    ⵠΔⵠⵠᐃᐃⲆ: "img/avatar-player8.png",
    ⲆΔᐃΔⲆΔᐃ: "img/avatar-player9.png",
    ᐃΔⲆᐃⵠᐃⵠ: "img/avatar-player10.png",
    ⲆΔⵠⵠΔΔᐃ: "img/avatar-player11.png",
    ⲆΔᐃΔⲆⲆⵠ: "img/avatar-player12.png",
    ⵠⵠⵠⲆΔᐃⵠ: "img/avatar-player13.png",
    ᐃⵠᐃᐃᐃΔⵠ: "img/avatar-player14.png",
    ⲆⲆⵠᐃᐃΔⵠ: "img/avatar-player14.png",
    ᐃⵠᐃᐃᐃⵠⲆ: "img/avatar-player14.png",
    ⲆᐃΔᐃΔⲆΔ: "img/avatar-player14.png",
    ⵠΔᐃᐃⵠⲆΔᐃⵠ: "img/golden-bread.png",
    ᐃΔᐃⵠⵠⵠΔ: "img/buy-bread-out.png",
    ⲆⵠᐃΔᐃⲆⵠ: "img/buy-bread-in.png",
    ᐃⵠⵠⵠΔⲆⵠ: "img/buy-bread-click.png",
    ⵠΔᐃΔⵠⲆΔ: "img/gauge.png",
    ᐃⲆⲆⵠᐃΔᐃᐃᐃ: "img/season-4-out.png",
    ΔᐃⲆⵠⲆⲆᐃᐃⲆ: "img/season-4-in.png",
    ⵠᐃᐃΔΔᐃⲆⲆᐃ: "img/season-4-click.png",
    ᐃⵠᐃⲆⵠⵠΔⵠΔ: "img/season4-box.png",
    ᐃⲆⵠⵠⵠᐃᐃⵠᐃ: "img/season-5-out.png",
    ᐃΔⵠΔⲆΔⵠⲆⵠ: "img/season-5-in.png",
    ⵠΔΔⵠⲆΔⵠΔᐃ: "img/season-5-click.png",
    ΔᐃⵠᐃᐃΔⵠᐃᐃ: "img/season5-box.png",
    ᐃⲆᐃⵠⵠⵠᐃ: "img/season-6-out.png",
    ΔΔᐃΔΔⵠᐃ: "img/season-6-in.png",
    ⵠΔⵠⵠΔⲆᐃ: "img/season-6-click.png",
    ⵠΔΔⵠᐃΔⲆ: "img/season6-box.png",
    ᐃⲆⲆᐃᐃᐃⵠ: "img/profile3-box.png",
    ⲆᐃᐃⲆⵠΔᐃ: "img/skins-box.png",
    ΔΔΔⵠΔᐃⲆ: "img/shop-box.png",
    ⲆⵠⲆᐃⲆⲆⵠⵠⲆ: "img/private-server-box.png",
    ⵠⲆⵠᐃᐃⵠΔ: "img/location-box.png",
    ⵠᐃᐃⲆΔⲆⵠ: "img/server-duration-box.png",
    ⲆⲆⵠⵠᐃᐃⵠ: "img/tutorial-box.png",
    ᐃΔⵠⵠΔᐃᐃ: "img/leaderboard2-box.png",
    ΔᐃᐃⵠⵠⲆⲆ: "img/buy-breads-box.png",
    ΔⲆⵠⲆⲆΔⲆ: "img/bag-box.png",
    ⵠΔᐃⲆⵠⵠΔ: "img/deadbox-box.png",
    ᐃⵠⵠⵠⲆΔⲆ: "img/book-box.png",
    ΔⲆΔᐃΔΔΔ: "img/accessories-box.png",
    ⵠᐃⵠΔᐃⵠᐃ: "img/customskin-box.png",
    ⲆᐃⲆΔⵠᐃΔ: "img/bag-lasts.png",
    ΔᐃᐃⲆΔⵠᐃ: "img/server-lasts.png",
    ΔᐃⲆΔᐃᐃⵠ: "img/server-access-box3.png",
    ⵠΔⵠⲆΔᐃᐃ: "img/lootbox-box.png",
    ⵠⲆΔⵠⵠⵠⲆ: "img/change-nickname0.png",
    ΔᐃᐃΔᐃⵠⵠ: "img/change-nickname1.png",
    ⵠᐃᐃΔΔⲆⲆ: "img/cheating-box.png",
    ᐃΔⵠⵠⵠⵠⵠⵠⵠ: "img/daily-quest-box.png",
    ⵠᐃΔΔⵠᐃⵠΔΔ: "img/daily-5-bread.png",
    ⲆᐃⵠⵠᐃΔⲆᐃᐃ: "img/daily-10-bread.png",
    ⲆⵠΔⵠΔΔΔᐃᐃ: "img/daily-valid.png",
    ⲆᐃΔⵠⲆⲆⲆ: "img/normal-profile-out.png",
    ⲆⵠΔⵠⵠᐃΔ: "img/normal-profile-in.png",
    ⵠΔⲆᐃⲆⵠⲆ: "img/normal-profile-click.png",
    ᐃⵠⵠⲆΔΔΔ: "img/forest-profile-out.png",
    ΔⵠⲆᐃⲆⵠΔ: "img/forest-profile-in.png",
    ΔⲆᐃⵠⲆⵠⵠ: "img/forest-profile-click.png",
    ⲆⲆᐃΔⵠⵠΔ: "img/zombie-profile-out.png",
    ⲆᐃΔⲆⲆⵠⲆ: "img/zombie-profile-in.png",
    ⵠⲆⲆⵠⲆᐃⵠ: "img/zombie-profile-click.png",
    ⵠᐃΔᐃⵠΔⵠ: "img/vampire-profile-out.png",
    ᐃⲆΔΔᐃⵠΔ: "img/vampire-profile-in.png",
    ⲆΔΔⵠᐃⵠⵠ: "img/vampire-profile-click.png",
    ⲆⲆΔᐃΔᐃⵠ: "img/total-profile-out.png",
    ⲆⵠᐃᐃⵠⵠΔ: "img/total-profile-in.png",
    ⵠⲆⵠᐃᐃΔᐃ: "img/total-profile-click.png",
    ᐃΔΔⲆᐃⵠⵠ: "img/season1-out.png",
    ΔΔᐃⲆⲆⲆⲆ: "img/season1-in.png",
    Δⵠᐃᐃⵠⵠᐃ: "img/season1-click.png",
    ⲆⲆΔᐃⵠⲆΔ: "img/season2-out.png",
    ⲆⵠΔⵠⲆⵠⲆ: "img/season2-in.png",
    ᐃⵠΔⵠΔᐃΔ: "img/season2-click.png",
    ⵠⲆΔΔΔΔⵠ: "img/season3-out.png",
    ⵠⲆΔᐃΔᐃᐃ: "img/season3-in.png",
    ΔⲆᐃⵠᐃΔΔ: "img/season3-click.png",
    ⵠᐃⵠⲆᐃⲆᐃ: "img/season4-out.png",
    ⲆᐃⵠⵠΔⲆᐃ: "img/season4-in.png",
    ⵠᐃⲆⲆᐃⵠⵠ: "img/season4-click.png",
    ⲆⲆᐃⲆⵠΔΔ: "img/season5-out.png",
    ΔΔᐃⲆⲆᐃᐃ: "img/season5-in.png",
    ⵠⵠᐃⲆⵠⲆⲆ: "img/season5-click.png",
    ⲆᐃᐃⲆⲆⲆⲆ: "img/season6-out.png",
    ᐃⵠᐃⲆⲆⵠΔ: "img/season6-in.png",
    ᐃⲆΔⲆⵠⲆⲆ: "img/season6-click.png",
    ⲆⵠᐃⵠΔΔΔ: "img/locked-skin-alert.png",
    ΔᐃᐃᐃⵠⲆⲆ: "img/locked-custom-alert.png",
    ⲆⲆⵠⲆΔⲆⵠ: "img/bg-red-locked.png",
    ΔΔⲆⵠⲆᐃΔ: "img/skin-button-out.png",
    ⲆΔⵠⵠⲆⲆΔ: "img/skin-button-in.png",
    ΔΔΔᐃⵠⵠᐃ: "img/skin-button-click.png",
    ⲆΔⵠΔⵠⲆΔ: "img/accessory-button-out.png",
    ⲆⵠⲆΔΔⵠΔ: "img/accessory-button-in.png",
    ᐃⵠΔⲆⲆΔⵠ: "img/accessory-button-click.png",
    ᐃⵠⲆᐃⲆΔⵠ: "img/bag-button-out.png",
    ⲆᐃᐃᐃⵠΔⵠ: "img/bag-button-in.png",
    ⲆᐃᐃⲆⵠᐃⵠ: "img/bag-button-click.png",
    ᐃⲆⵠᐃΔᐃⵠ: "img/book-button-out.png",
    ΔⵠΔΔΔⵠᐃ: "img/book-button-in.png",
    ΔⲆᐃⵠΔΔⵠ: "img/book-button-click.png",
    ⲆᐃΔΔⵠᐃΔ: "img/deadbox-button-out.png",
    ΔⵠᐃⵠⲆⲆᐃ: "img/deadbox-button-in.png",
    ⲆⵠᐃᐃⲆⵠⲆ: "img/deadbox-button-click.png",
    ⵠᐃⵠⲆΔΔⵠ: "img/loot-button-out.png",
    ᐃⵠΔΔᐃΔⵠ: "img/loot-button-in.png",
    ΔΔᐃᐃΔⵠΔ: "img/loot-button-click.png",
    ⵠⵠᐃⵠⵠⵠΔ: "img/free-item-out.png",
    ᐃⵠΔⵠⲆⵠᐃ: "img/free-item-in.png",
    ᐃⵠᐃⲆⵠⵠᐃ: "img/free-item-click.png",
    ⲆΔⵠᐃ: "img/wood-item-out.png",
    ᐃⲆΔᐃ: "img/wood-item-in.png",
    ⵠΔⵠⵠ: "img/wood-item-click.png",
    ⵠΔΔⵠⵠⵠⲆ: "img/stone-item.png",
    ⲆΔⵠᐃⲆⲆᐃ: "img/stone-item-in.png",
    ᐃᐃⲆΔⲆⲆᐃ: "img/stone-item-click.png",
    ᐃΔᐃΔᐃⲆᐃ: "img/gold-item.png",
    ΔΔΔⵠΔⵠΔ: "img/gold-item-in.png",
    ⵠΔΔⵠⵠⵠⵠ: "img/gold-item-click.png",
    ᐃⵠᐃᐃⵠⵠᐃ: "img/diamond-item.png",
    ᐃⲆΔⲆⲆΔΔ: "img/diamond-item-in.png",
    ᐃⵠⵠⲆΔⵠᐃ: "img/diamond-item-click.png",
    ᐃΔΔᐃΔᐃΔ: "img/amethyst-item.png",
    ⵠΔΔⲆⵠᐃⲆ: "img/amethyst-item-in.png",
    ⵠⵠⵠⵠΔΔᐃ: "img/amethyst-item-click.png",
    ᐃⵠᐃⲆⵠΔⵠ: "img/reidite-item.png",
    ⲆᐃⵠⵠΔⲆⵠ: "img/reidite-item-in.png",
    ⲆⵠΔᐃⲆⵠᐃ: "img/reidite-item-click.png",
    ⲆΔⵠΔⵠΔⵠ: "img/special-item-out.png",
    ΔΔΔΔΔΔΔ: "img/special-item-in.png",
    ᐃⵠΔⲆⵠᐃΔ: "img/special-item-click.png",
    ⲆΔᐃΔⲆⲆΔ: "img/level-item-out.png",
    ᐃᐃΔⵠⲆⲆΔ: "img/level-item-in.png",
    ᐃΔᐃⲆⵠᐃⲆ: "img/level-item-click.png",
    ⲆᐃⵠⵠᐃⲆᐃ: "img/skin-previous-out.png",
    ⲆⲆⵠⲆⲆᐃⵠ: "img/skin-previous-in.png",
    ᐃΔΔⵠⲆΔⵠ: "img/skin-previous-click.png",
    Ⲇᐃᐃᐃᐃⵠᐃ: "img/skin-next-out.png",
    ᐃΔΔⲆΔΔⲆ: "img/skin-next-in.png",
    Ⲇᐃᐃⵠᐃⵠᐃ: "img/skin-next-click.png",
    ⵠᐃΔΔⲆ: "img/back-button-out.png",
    Δᐃⵠⵠᐃ: "img/back-button-in.png",
    ⵠᐃⲆᐃⲆ: "img/back-button-click.png",
    ᐃⵠΔⵠΔⲆⵠ: "img/get-more-button-out.png",
    ⲆⵠᐃⲆⵠΔⲆ: "img/get-more-button-in.png",
    ⲆΔⲆⵠᐃⲆⲆ: "img/get-more-button-click.png",
    ⲆⵠⲆⵠⵠⵠⵠ: "img/currency1-out.png",
    ᐃⵠᐃᐃⲆΔⲆ: "img/currency1-in.png",
    ᐃⲆᐃⲆΔΔᐃ: "img/currency1-click.png",
    ⵠⵠⵠⵠⵠΔⵠ: "img/currency2-out.png",
    ⵠⵠⵠᐃΔⵠᐃ: "img/currency2-in.png",
    ⵠᐃⵠⵠΔⲆⲆ: "img/currency2-click.png",
    ᐃᐃΔΔΔΔⵠ: "img/currency3-out.png",
    ᐃᐃⲆⵠⵠⵠⵠ: "img/currency3-in.png",
    ᐃΔΔⵠⲆΔⲆ: "img/currency3-click.png",
    ΔⵠⵠΔⵠⵠᐃ: "img/currency4-out.png",
    ⲆΔⲆᐃᐃᐃΔ: "img/currency4-in.png",
    ΔⵠⲆᐃᐃΔᐃ: "img/currency4-click.png",
    ⲆⲆΔᐃⵠΔⵠ: "img/currency5-out.png",
    ⵠΔⵠⵠⲆᐃⵠ: "img/currency5-in.png",
    ΔⵠⲆΔⵠⵠᐃ: "img/currency5-click.png",
    ΔΔⵠⲆΔⲆⵠ: "img/price1-out.png",
    ⵠᐃΔⲆⵠⲆⵠ: "img/price1-in.png",
    ⲆᐃᐃᐃΔᐃᐃ: "img/price1-click.png",
    ⵠⲆᐃⵠᐃⵠᐃ: "img/price2-out.png",
    ⵠΔΔⲆΔΔΔ: "img/price2-in.png",
    ⵠⵠᐃⵠⵠᐃⵠ: "img/price2-click.png",
    ⵠⲆⵠᐃΔⲆΔ: "img/price3-out.png",
    ⲆⲆⵠⵠⵠⵠⵠ: "img/price3-in.png",
    ⲆΔⵠᐃⵠⲆΔ: "img/price3-click.png",
    ᐃᐃⲆᐃᐃⲆⵠ: "img/price4-out.png",
    ᐃᐃᐃⵠΔᐃⲆ: "img/price4-in.png",
    ΔᐃΔⲆΔⵠⵠ: "img/price4-click.png",
    ᐃⲆᐃⲆᐃᐃΔ: "img/price5-out.png",
    ᐃⵠᐃΔⲆⵠΔ: "img/price5-in.png",
    ᐃⲆᐃᐃᐃᐃⵠ: "img/price5-click.png",
    ΔⵠⵠΔⲆⵠⵠΔⵠ: "img/buy-private-server-out.png",
    ⵠⵠᐃᐃⲆᐃⵠⲆᐃ: "img/buy-private-server-in.png",
    ⵠⵠⲆΔⵠΔᐃΔΔ: "img/buy-private-server-click.png",
    ΔⵠΔⵠⲆᐃΔ: "img/atlanta-button-out.png",
    ⲆΔᐃΔΔⵠᐃ: "img/atlanta-button-in.png",
    ⲆⲆΔΔⲆᐃΔ: "img/atlanta-button-click.png",
    ᐃᐃᐃⵠⲆΔΔ: "img/los-angeles-button-out.png",
    ΔᐃᐃΔⲆΔⲆ: "img/los-angeles-button-in.png",
    ᐃᐃᐃⵠⵠᐃΔ: "img/los-angeles-button-click.png",
    ΔⵠⵠΔⲆⵠⵠ: "img/sydney-button-out.png",
    ᐃΔⵠΔⵠΔΔ: "img/sydney-button-in.png",
    ⵠⵠⵠΔΔⲆΔ: "img/sydney-button-click.png",
    ⵠⵠᐃᐃⲆⵠⲆ: "img/frankfurt-button-out.png",
    ⲆᐃⵠᐃΔⵠⵠ: "img/frankfurt-button-in.png",
    ΔΔᐃᐃΔΔⲆ: "img/frankfurt-button-click.png",
    ⲆⵠⲆⲆⲆᐃᐃ: "img/osaka-button-out.png",
    ΔⲆⵠᐃΔⲆΔ: "img/osaka-button-in.png",
    ⲆⲆᐃⵠⲆΔΔ: "img/osaka-button-click.png",
    ⲆᐃΔⲆⲆⵠᐃⲆᐃ: "img/yes-location-out.png",
    ⲆⲆⵠⵠⲆᐃⲆᐃΔ: "img/yes-location-in.png",
    ᐃᐃⲆᐃⲆΔⵠᐃⲆ: "img/yes-location-click.png",
    ⲆⵠⵠΔⵠⵠⵠ: "img/3days-button-out.png",
    ⵠΔⲆᐃΔᐃᐃ: "img/3days-button-in.png",
    ᐃΔⵠⲆᐃⵠⵠ: "img/3days-button-click.png",
    ⲆΔΔΔⵠⵠᐃ: "img/7days-button-out.png",
    ⲆⲆⵠΔᐃᐃⲆ: "img/7days-button-in.png",
    ⲆᐃΔⵠⵠΔⵠ: "img/7days-button-click.png",
    ΔΔⲆΔⵠⵠⲆ: "img/30days-button-out.png",
    ⲆᐃⲆⵠⲆⲆⵠ: "img/30days-button-in.png",
    ⵠΔΔᐃΔΔΔ: "img/30days-button-click.png",
    ⵠᐃΔΔΔⲆⵠ: "img/90days-button-out.png",
    ⵠΔⵠⵠΔᐃⲆ: "img/90days-button-in.png",
    ΔⲆΔⵠⲆΔΔ: "img/90days-button-click.png",
    ΔⲆⲆΔᐃᐃΔ: "img/spin1.png",
    ⲆⵠⵠⵠⲆΔⵠ: "img/spin2.png",
    ⵠⵠᐃⲆⵠⵠⵠ: "img/spin3.png",
    ᐃⵠΔΔⵠΔᐃ: "img/spin4.png",
    ⵠᐃΔⲆΔⲆⲆ: "img/spin5.png",
    ᐃΔⲆⲆᐃΔⲆ: "img/spin6.png",
    ᐃⵠᐃΔⵠᐃΔ: "img/arrow-spin.png",
    ᐃⲆⲆⲆⵠᐃⲆ: "img/spin-button-1-out.png",
    ΔΔᐃⲆΔᐃⵠ: "img/spin-button-1-in.png",
    ⲆⵠⲆⵠⵠⵠⲆ: "img/spin-button-1-click.png",
    ΔΔΔⵠΔⲆⲆ: "img/spin-button-2-out.png",
    ⵠⵠⲆᐃᐃⵠΔ: "img/spin-button-2-in.png",
    ⲆᐃΔⵠⲆⲆᐃ: "img/spin-button-2-click.png",
    ᐃΔΔⲆⲆⲆⵠ: "img/spin-button-3-out.png",
    ⵠΔⲆΔᐃΔᐃ: "img/spin-button-3-in.png",
    ⲆⵠⵠⲆᐃⲆⵠ: "img/spin-button-3-click.png",
    ᐃⲆΔⵠᐃᐃⵠ: "img/spin-button-4-out.png",
    ΔᐃΔⵠᐃⲆⲆ: "img/spin-button-4-in.png",
    ⵠΔⲆⲆΔⲆⲆ: "img/spin-button-4-click.png",
    ᐃⵠⲆⵠⵠΔⲆ: "img/spin-button-5-out.png",
    ᐃⵠⵠⵠⲆⲆⵠ: "img/spin-button-5-in.png",
    ⲆⲆΔⲆΔⲆⵠ: "img/spin-button-5-click.png",
    ΔⵠΔᐃᐃΔΔ: "img/spin-light.png",
    ᐃΔⲆᐃⲆⵠⵠ: "img/tuto-wiki-out.png",
    ᐃᐃⲆⵠⲆΔᐃ: "img/tuto-wiki-in.png",
    ⲆⵠᐃΔⵠᐃⵠ: "img/tuto-wiki-click.png",
    ⵠᐃΔⲆⵠΔᐃ: "img/tuto-previous-out.png",
    ᐃⲆᐃⵠⵠⵠΔ: "img/tuto-previous-in.png",
    ᐃΔⵠⵠᐃⲆⵠ: "img/tuto-previous-click.png",
    ⲆⲆΔⵠᐃⵠⲆ: "img/tuto-next-out.png",
    ⲆⲆⵠⲆⲆΔⲆ: "img/tuto-next-in.png",
    ᐃΔᐃⲆᐃⵠⵠ: "img/tuto-next-click.png",
    ⵠᐃᐃᐃᐃⵠⲆ: "img/time-leaderboard-out.png",
    ᐃⵠᐃᐃⵠⲆᐃ: "img/time-leaderboard-in.png",
    ΔⵠᐃⵠⵠⲆⲆ: "img/time-leaderboard-click.png",
    ΔⲆⲆΔᐃᐃⲆ: "img/score-leaderboard-out.png",
    ⵠΔⲆⲆΔΔᐃ: "img/score-leaderboard-in.png",
    ⵠⵠᐃΔᐃΔⲆ: "img/score-leaderboard-click.png",
    ᐃΔᐃⲆⵠⵠⵠ: "img/lvl-leaderboard-out.png",
    ΔⲆΔⵠⲆᐃⲆ: "img/lvl-leaderboard-in.png",
    ⵠⲆᐃᐃⵠⲆΔ: "img/lvl-leaderboard-click.png",
    ΔⵠΔⵠᐃΔᐃ: "img/kill-leaderboard-out.png",
    ᐃᐃⲆΔᐃᐃⲆ: "img/kill-leaderboard-in.png",
    ᐃⵠΔⲆⵠᐃⲆ: "img/kill-leaderboard-click.png",
    ⲆⲆⲆⵠᐃᐃΔ: "img/all-leaderboard-out.png",
    ⵠᐃΔΔᐃᐃᐃ: "img/all-leaderboard-in.png",
    ⲆⵠΔΔⲆΔⲆ: "img/all-leaderboard-click.png",
    ⲆΔⵠⲆΔΔⲆ: "img/today-leaderboard-out.png",
    ⲆᐃⵠⲆᐃᐃᐃ: "img/today-leaderboard-in.png",
    ΔΔᐃΔⲆᐃⵠ: "img/today-leaderboard-click.png",
    ᐃⵠⵠⲆᐃⵠᐃ: "img/week-leaderboard-out.png",
    ᐃⵠΔᐃΔΔⵠ: "img/week-leaderboard-in.png",
    ⲆᐃᐃᐃΔΔΔ: "img/week-leaderboard-click.png",
    ⲆΔᐃᐃⲆⲆⵠ: "img/season1-out.png",
    ⵠΔⲆΔᐃΔⵠ: "img/season1-in.png",
    ᐃᐃΔⲆⲆⲆⵠ: "img/season1-click.png",
    ⵠᐃⲆⲆᐃΔⵠ: "img/season2-out.png",
    ⵠⵠⲆΔⵠⵠᐃ: "img/season2-in.png",
    ᐃᐃᐃᐃΔᐃΔ: "img/season2-click.png",
    ᐃⲆᐃΔⵠⲆΔ: "img/season3-out.png",
    ΔᐃᐃⲆᐃⲆⲆ: "img/season3-in.png",
    ᐃᐃΔⵠⵠΔⲆ: "img/season3-click.png",
    ΔⲆⲆᐃⵠⵠΔ: "img/season4-out.png",
    ⵠⵠΔΔΔᐃⵠ: "img/season4-in.png",
    ΔᐃᐃⵠⵠⵠΔ: "img/season4-click.png",
    ⲆᐃΔⵠΔⲆᐃ: "img/season5-out.png",
    ⲆΔᐃΔⲆᐃⵠ: "img/season5-in.png",
    ΔΔΔⵠⲆⲆᐃ: "img/season5-click.png",
    ⵠⲆⲆⲆⵠΔΔ: "img/season6-out.png",
    ⵠⲆΔⵠⲆᐃᐃ: "img/season6-in.png",
    ⵠᐃΔⵠⲆΔᐃ: "img/season6-click.png",
    ⲆΔᐃΔΔΔΔ: "img/total-lead-out.png",
    ᐃᐃⵠᐃΔΔⵠ: "img/total-lead-in.png",
    ᐃΔᐃⲆⵠⲆΔ: "img/total-lead-click.png",
    ᐃΔᐃⲆⲆᐃΔ: "img/normal-lead-out.png",
    ⲆΔⲆⵠⲆⵠΔ: "img/normal-lead-in.png",
    ᐃΔΔⵠΔΔⲆ: "img/normal-lead-click.png",
    ⲆΔⵠΔⲆᐃⲆ: "img/forest-lead-out.png",
    ᐃᐃΔᐃΔᐃᐃ: "img/forest-lead-in.png",
    ΔΔⵠΔⵠⲆⵠ: "img/forest-lead-click.png",
    ΔⵠᐃΔⵠᐃⲆ: "img/vampire-lead-out.png",
    ΔⲆᐃⲆᐃⵠᐃ: "img/vampire-lead-in.png",
    ᐃΔⵠΔᐃⵠⵠ: "img/vampire-lead-click.png",
    ⵠΔΔᐃᐃⲆΔ: "img/zombie-lead-out.png",
    ⲆⵠᐃΔΔᐃⲆ: "img/zombie-lead-in.png",
    ⲆⵠⲆΔΔⵠᐃ: "img/zombie-lead-click.png",
    ⲆⵠᐃⲆⲆΔᐃ: "img/day-level5.png",
    ᐃᐃⲆⲆⲆⵠⵠ: "img/night-level5.png",
    ⲆΔⲆᐃᐃΔᐃ: "img/day-level10.png",
    ΔΔⲆⵠⲆⲆᐃ: "img/night-level10.png",
    ᐃⵠⵠΔΔⲆⲆ: "img/day-level15.png",
    ΔΔⲆⵠⵠⲆΔ: "img/night-level15.png",
    ΔΔΔᐃⵠⲆᐃ: "img/day-level20.png",
    ⲆⲆⲆΔⲆⲆⵠ: "img/night-level20.png",
    ᐃᐃΔᐃⵠⲆⲆ: "img/day-level25.png",
    ΔⲆⵠⲆⲆⲆᐃ: "img/night-level25.png",
    ⵠᐃΔⵠᐃΔⵠ: "img/day-level30.png",
    ⲆⲆΔⵠᐃⵠΔ: "img/night-level30.png",
    ΔᐃⲆⵠᐃΔΔ: "img/day-level35.png",
    ᐃⵠΔⵠᐃΔⲆ: "img/night-level35.png",
    Ⲇᐃᐃᐃⵠᐃⵠ: "img/day-level40.png",
    ᐃⵠⲆⲆΔΔⲆ: "img/night-level40.png",
    ⲆⲆⲆⵠⵠⲆᐃ: "img/day-level45.png",
    ⵠⲆⲆⲆⲆⲆⵠ: "img/night-level45.png",
    ⵠⲆΔⲆⲆΔᐃ: "img/day-level50.png",
    ⵠⵠⵠⵠΔΔⵠ: "img/night-level50.png",
    ⲆⲆΔⲆⵠⲆΔ: "img/day-level55.png",
    ⵠⲆᐃⵠᐃⲆⵠ: "img/night-level55.png",
    Δⵠᐃᐃᐃᐃⵠ: "img/day-level60.png",
    ᐃΔⲆΔΔⲆΔ: "img/night-level60.png",
    ⵠⵠᐃᐃⲆΔⲆ: "img/day-skin-devast0.png",
    ⵠⵠΔΔᐃΔⵠ: "img/night-skin-devast0.png",
    ΔᐃᐃⵠⵠⲆΔ: "img/day-hand-devaster.png",
    ᐃᐃΔⲆⲆⲆΔ: "img/night-hand-devaster.png",
    ⲆᐃᐃⲆᐃΔⵠ: "img/day-skin-star0.png",
    ᐃⵠⵠⲆⵠⲆⵠ: "img/night-skin-star0.png",
    ⲆᐃⵠⲆⲆⵠⲆ: "img/day-hand-star0.png",
    ᐃⵠΔⲆΔⵠᐃ: "img/night-hand-star0.png",
    ΔᐃΔⲆⵠⵠⵠ: "img/day-vampire.png",
    ⵠᐃⵠᐃⵠⲆⵠ: "img/night-vampire.png",
    ᐃⵠⵠΔΔⲆᐃ: "img/day-hand-vampire.png",
    ⲆᐃⵠⵠΔᐃⲆ: "img/night-hand-vampire.png",
    ᐃⵠⲆΔⵠᐃΔ: "img/day-zombie.png",
    ⲆΔⲆⲆΔⲆⵠ: "img/night-zombie.png",
    ⲆΔⵠⵠΔΔⲆ: "img/day-hand-zombie.png",
    ⵠᐃᐃⵠᐃΔⲆ: "img/night-hand-zombie.png",
    ⲆΔⵠΔⲆⲆⲆ: "img/day-skin113.png",
    ΔᐃⵠᐃᐃΔⲆ: "img/night-skin113.png",
    ᐃⵠⲆⲆⲆⵠⲆ: "img/day-hand-skin113.png",
    ΔⵠΔⲆΔⵠᐃ: "img/night-hand-skin113.png",
    ⵠᐃⵠⵠᐃΔⵠ: "img/day-skin0.png",
    ᐃΔΔⲆΔⲆΔ: "img/night-skin0.png",
    ⲆⲆᐃⲆⲆᐃⲆ: "img/day-skin1.png",
    ⵠᐃΔΔᐃᐃⵠ: "img/night-skin1.png",
    ⵠΔⵠᐃᐃΔΔ: "img/day-skin2.png",
    ᐃΔΔⲆⵠⵠⲆ: "img/night-skin2.png",
    ⲆⲆᐃⲆⵠⵠⲆ: "img/day-skin3.png",
    ΔⵠᐃⵠⲆΔᐃ: "img/night-skin3.png",
    ΔᐃⲆΔⵠⲆⵠ: "img/day-skin4.png",
    ΔⵠΔΔΔΔⲆ: "img/night-skin4.png",
    ⲆᐃΔⲆΔⵠᐃ: "img/day-skin5.png",
    ⵠΔⲆᐃⲆⵠΔ: "img/night-skin5.png",
    ⲆᐃⲆⵠᐃⲆⵠ: "img/day-skin6.png",
    ΔⵠⵠᐃΔⵠΔ: "img/night-skin6.png",
    ⲆᐃⲆΔⵠᐃⲆ: "img/day-skin7.png",
    ⲆⵠⵠⲆΔᐃΔ: "img/night-skin7.png",
    ⲆⲆⲆⲆᐃᐃᐃ: "img/day-skin8.png",
    ᐃⵠΔΔΔᐃⵠ: "img/night-skin8.png",
    ⵠΔᐃⵠⲆΔΔ: "img/day-skin9.png",
    ⲆⵠⲆᐃⵠⲆᐃ: "img/night-skin9.png",
    ⵠⲆⵠⲆⲆⵠᐃ: "img/day-skin10.png",
    ⲆⵠΔᐃⵠᐃⲆ: "img/night-skin10.png",
    ΔⲆⲆⲆᐃⵠᐃ: "img/day-skin11.png",
    ᐃΔΔΔⵠᐃΔ: "img/night-skin11.png",
    ᐃⵠᐃⲆᐃΔΔ: "img/day-skin12.png",
    ΔⲆΔⲆⵠⲆΔ: "img/night-skin12.png",
    ΔⲆⵠΔⲆΔΔ: "img/day-skin13.png",
    ΔᐃⵠᐃΔⵠⵠ: "img/night-skin13.png",
    ᐃⵠⵠΔⲆⵠⵠ: "img/day-skin14.png",
    ⲆᐃⲆᐃᐃⵠΔ: "img/night-skin14.png",
    ΔᐃⵠΔΔⲆᐃ: "img/day-skin15.png",
    ⵠⲆᐃⲆⲆⲆΔ: "img/night-skin15.png",
    ᐃⵠᐃⵠⵠⲆⲆ: "img/day-skin16.png",
    ⲆⵠᐃΔⲆⲆⵠ: "img/night-skin16.png",
    ⵠᐃᐃΔᐃⲆⵠ: "img/day-skin17.png",
    ᐃⵠⲆΔᐃᐃⵠ: "img/night-skin17.png",
    ᐃⵠΔΔⲆⲆⵠ: "img/day-skin18.png",
    ⵠⵠΔⲆᐃⲆⲆ: "img/night-skin18.png",
    ⲆᐃⵠⵠᐃⲆⲆ: "img/day-skin19.png",
    ᐃΔⲆΔΔⵠⲆ: "img/night-skin19.png",
    ΔⲆⵠΔⵠⲆⲆ: "img/day-skin20.png",
    ⲆⵠⲆΔΔⲆⲆ: "img/night-skin20.png",
    ⲆΔⵠΔΔΔᐃ: "img/day-skin21.png",
    ᐃΔΔⵠⵠᐃⲆ: "img/night-skin21.png",
    ΔⵠⲆᐃᐃᐃⲆ: "img/day-skin22.png",
    ⲆⲆᐃⲆⲆΔⲆ: "img/night-skin22.png",
    ΔΔᐃΔΔⲆᐃ: "img/day-skin23.png",
    ᐃⲆᐃΔᐃⲆⲆ: "img/night-skin23.png",
    ᐃⵠⵠᐃᐃΔⵠ: "img/day-skin24.png",
    ⲆⵠⵠΔᐃⲆⵠ: "img/night-skin24.png",
    ᐃΔΔⲆⵠΔΔ: "img/day-skin25.png",
    ⲆⵠⵠᐃΔᐃⵠ: "img/night-skin25.png",
    ⲆᐃᐃᐃⵠⵠΔ: "img/day-skin26.png",
    ΔⲆⲆⵠⵠΔᐃ: "img/night-skin26.png",
    ᐃΔΔΔⲆⲆᐃ: "img/day-skin27.png",
    ᐃⵠⲆΔᐃⵠⲆ: "img/night-skin27.png",
    ΔᐃⲆᐃᐃⵠⵠ: "img/day-skin28.png",
    ᐃⵠᐃΔΔᐃΔ: "img/night-skin28.png",
    ᐃⲆᐃᐃᐃⲆⵠ: "img/day-skin29.png",
    ⵠⲆⲆᐃᐃⵠΔ: "img/night-skin29.png",
    ⲆⵠⵠᐃᐃⲆⲆ: "img/day-skin30.png",
    ΔⵠⲆᐃⲆⲆᐃ: "img/night-skin30.png",
    ᐃⲆΔΔⵠᐃⵠ: "img/day-skin31.png",
    ΔᐃΔⵠᐃᐃⵠ: "img/night-skin31.png",
    ⲆⵠᐃΔΔᐃⵠ: "img/day-skin32.png",
    ΔⲆᐃΔᐃΔΔ: "img/night-skin32.png",
    ⵠᐃⲆⵠΔⲆⲆ: "img/day-skin33.png",
    ⵠΔⲆᐃⲆᐃⵠ: "img/night-skin33.png",
    ⵠⲆⲆᐃⲆⲆⲆ: "img/day-skin34.png",
    ΔΔⵠⵠⲆⵠⲆ: "img/night-skin34.png",
    ⵠⲆΔⵠΔᐃᐃ: "img/day-skin35.png",
    ⵠᐃⲆⵠⲆΔᐃ: "img/night-skin35.png",
    ⲆᐃⵠᐃⲆᐃⲆ: "img/day-skin36.png",
    Δⵠⵠᐃᐃⵠᐃ: "img/night-skin36.png",
    ᐃⵠⲆⵠⲆᐃᐃ: "img/day-skin37.png",
    ⲆⵠᐃⵠⲆⲆⵠ: "img/night-skin37.png",
    ⵠΔᐃᐃΔⵠΔ: "img/day-skin38.png",
    ΔⵠΔᐃⲆᐃⲆ: "img/night-skin38.png",
    ⲆⲆᐃⵠΔⵠⵠ: "img/day-skin39.png",
    ⲆΔᐃⵠᐃᐃΔ: "img/night-skin39.png",
    ΔᐃⵠᐃⲆΔⲆ: "img/day-skin40.png",
    ⲆΔᐃⵠᐃⲆΔ: "img/night-skin40.png",
    ⲆΔᐃⲆΔⲆⵠ: "img/day-skin41.png",
    ⵠᐃᐃᐃᐃΔᐃ: "img/night-skin41.png",
    ᐃΔΔᐃⲆⲆⵠ: "img/day-skin42.png",
    ⵠᐃᐃⲆⲆΔⲆ: "img/night-skin42.png",
    ⵠᐃᐃⵠⲆᐃΔ: "img/day-skin43.png",
    ⵠⵠΔⲆᐃᐃΔ: "img/night-skin43.png",
    ⲆΔΔⲆⵠⵠᐃ: "img/day-skin44.png",
    ⲆᐃᐃΔᐃᐃⵠ: "img/night-skin44.png",
    ⲆᐃⲆΔᐃⵠⲆ: "img/day-skin45.png",
    ᐃⵠⵠⵠⵠⵠᐃ: "img/night-skin45.png",
    ⲆⵠΔⵠⵠⵠᐃ: "img/day-skin46.png",
    ⵠⲆⲆᐃΔΔⲆ: "img/night-skin46.png",
    ᐃⵠΔⵠᐃΔᐃ: "img/day-skin47.png",
    ᐃⵠΔⲆΔⵠⲆ: "img/night-skin47.png",
    ΔᐃᐃⲆⲆⵠᐃ: "img/day-skin48.png",
    ΔⲆΔΔΔⲆⲆ: "img/night-skin48.png",
    ⲆΔΔΔΔⲆⵠ: "img/day-skin49.png",
    ΔᐃⵠΔⵠᐃᐃ: "img/night-skin49.png",
    ⵠⲆᐃᐃⵠᐃⲆ: "img/day-skin50.png",
    ΔⵠⵠⲆⲆⲆⲆ: "img/night-skin50.png",
    ⲆⲆⵠᐃΔᐃᐃ: "img/day-skin51.png",
    ᐃΔΔΔⵠΔᐃ: "img/night-skin51.png",
    ⲆⲆΔⵠΔⵠⲆ: "img/day-skin52.png",
    ᐃⲆΔΔᐃⵠⵠ: "img/night-skin52.png",
    ⲆᐃᐃⲆᐃᐃΔ: "img/day-skin53.png",
    ᐃⵠⲆΔⵠⲆΔ: "img/night-skin53.png",
    ΔᐃⵠⲆᐃΔΔ: "img/day-skin54.png",
    ⲆᐃᐃΔᐃΔΔ: "img/night-skin54.png",
    ᐃᐃⵠⲆΔⲆΔ: "img/day-skin55.png",
    ᐃⵠΔⲆⵠΔᐃ: "img/night-skin55.png",
    ᐃⲆⵠⵠⲆⵠⵠ: "img/day-skin56.png",
    ⵠⲆΔᐃᐃΔᐃ: "img/night-skin56.png",
    ⲆΔⲆⲆⵠⵠΔ: "img/day-skin57.png",
    ⲆⲆΔⵠⲆⵠΔ: "img/night-skin57.png",
    ⵠᐃᐃΔᐃⲆⲆ: "img/day-skin58.png",
    ⵠΔⲆⵠᐃᐃΔ: "img/night-skin58.png",
    ᐃⲆⲆⲆᐃᐃⵠ: "img/day-skin59.png",
    ᐃⵠᐃᐃΔⵠⲆ: "img/night-skin59.png",
    ΔΔᐃΔΔⵠⵠ: "img/day-skin60.png",
    ΔⲆΔⵠᐃⵠΔ: "img/night-skin60.png",
    ⲆΔⵠⲆⲆΔΔ: "img/day-skin61.png",
    ΔᐃΔⵠΔⲆⵠ: "img/night-skin61.png",
    ⲆⵠΔⲆⲆⵠᐃ: "img/day-skin62.png",
    ⵠⵠᐃⲆΔΔⵠ: "img/night-skin62.png",
    ΔⲆⵠΔⵠⵠΔ: "img/day-skin63.png",
    ⵠⲆᐃⲆⲆᐃⲆ: "img/night-skin63.png",
    ⵠⵠⵠⲆⲆⵠᐃ: "img/day-skin64.png",
    ᐃᐃᐃΔΔΔΔ: "img/night-skin64.png",
    ⲆⵠⲆΔᐃⵠⵠ: "img/day-skin65.png",
    ⲆⲆᐃⵠⲆΔⵠ: "img/night-skin65.png",
    ΔᐃⲆⵠΔⵠⵠ: "img/day-skin66.png",
    ΔⵠΔΔⵠΔᐃ: "img/night-skin66.png",
    ᐃⵠΔΔΔⲆⵠ: "img/day-skin67.png",
    ⲆᐃΔⵠᐃⲆᐃ: "img/night-skin67.png",
    ⲆⵠⵠΔΔᐃⵠ: "img/day-skin68.png",
    ⵠΔᐃⲆⵠΔⵠ: "img/night-skin68.png",
    ⲆΔᐃᐃⵠΔⲆ: "img/day-skin69.png",
    ᐃᐃΔΔᐃΔⲆ: "img/night-skin69.png",
    ⲆⲆⵠⵠⵠⵠᐃ: "img/day-skin70.png",
    ᐃᐃᐃᐃⲆⵠⲆ: "img/night-skin70.png",
    ΔᐃᐃⲆⵠⲆⵠ: "img/day-skin71.png",
    ΔᐃⵠΔⵠⲆⲆ: "img/night-skin71.png",
    ΔⵠΔⲆⲆΔΔ: "img/day-skin72.png",
    ⵠⲆⲆⲆⵠⲆᐃ: "img/night-skin72.png",
    ΔΔⲆⵠᐃⵠⲆ: "img/day-skin73.png",
    ⵠⲆᐃⲆⵠΔⵠ: "img/night-skin73.png",
    ᐃⵠᐃⲆᐃΔᐃ: "img/day-skin74.png",
    ᐃⲆΔⲆⲆⲆⵠ: "img/night-skin74.png",
    ΔΔⲆᐃΔΔⲆ: "img/day-skin75.png",
    ⲆⲆⲆΔⲆⲆΔ: "img/night-skin75.png",
    ⲆᐃⲆⲆⲆⲆᐃ: "img/day-skin76.png",
    ᐃⲆᐃΔΔⵠᐃ: "img/night-skin76.png",
    ⲆΔⲆⲆⵠΔᐃ: "img/day-skin77.png",
    ᐃⵠⵠΔᐃⵠᐃ: "img/night-skin77.png",
    ⵠⵠΔΔⲆᐃᐃ: "img/day-skin78.png",
    ⲆⲆᐃⲆⲆⲆⵠ: "img/night-skin78.png",
    ⵠΔΔᐃᐃⲆⵠ: "img/day-skin79.png",
    ⵠⲆΔΔⲆΔᐃ: "img/night-skin79.png",
    ⲆⲆⲆᐃⵠᐃᐃ: "img/day-skin80.png",
    ⵠⲆⵠΔΔΔΔ: "img/night-skin80.png",
    ᐃⲆΔᐃⲆⵠᐃ: "img/day-skin81.png",
    ᐃⵠⲆΔᐃⲆΔ: "img/night-skin81.png",
    ⲆⵠΔⵠⲆΔⵠ: "img/day-skin82.png",
    ᐃⵠΔⵠᐃᐃⲆ: "img/night-skin82.png",
    ⵠΔⵠᐃⵠΔⲆ: "img/day-skin83.png",
    ΔΔΔᐃⵠᐃΔ: "img/night-skin83.png",
    ᐃⵠⵠΔΔΔⲆ: "img/day-skin84.png",
    ΔⵠΔⵠΔᐃᐃ: "img/night-skin84.png",
    ⵠⲆΔⵠⵠⵠᐃ: "img/day-skin85.png",
    ⵠᐃᐃⲆⲆᐃΔ: "img/night-skin85.png",
    ᐃΔⲆᐃᐃΔⲆ: "img/day-skin86.png",
    ΔⵠᐃᐃΔⲆⵠ: "img/night-skin86.png",
    ᐃΔΔᐃⵠᐃⵠ: "img/day-skin87.png",
    ΔⲆᐃᐃⵠⲆⵠ: "img/night-skin87.png",
    ΔΔⲆᐃⵠᐃΔ: "img/day-skin88.png",
    ⵠⵠⵠΔⵠᐃⲆ: "img/night-skin88.png",
    ⵠΔΔΔⲆΔΔ: "img/day-skin89.png",
    ᐃᐃᐃᐃᐃΔΔ: "img/night-skin89.png",
    ⵠⵠⵠⲆⲆⵠⲆ: "img/day-skin90.png",
    ⲆΔⵠᐃⵠⵠⲆ: "img/night-skin90.png",
    ⵠⲆⲆⵠⵠᐃΔ: "img/day-skin91.png",
    ΔⲆᐃΔⲆⵠᐃ: "img/night-skin91.png",
    ⲆⵠΔᐃⲆⵠΔ: "img/day-skin92.png",
    ΔⲆΔⲆⵠᐃⵠ: "img/night-skin92.png",
    ⲆⲆΔᐃᐃᐃⲆ: "img/day-skin93.png",
    ᐃᐃΔΔΔⲆⵠ: "img/night-skin93.png",
    ⲆⲆΔᐃΔⲆⲆ: "img/day-skin94.png",
    ᐃⲆⲆΔΔⵠᐃ: "img/night-skin94.png",
    ⲆⵠⵠᐃΔⲆⵠ: "img/day-skin95.png",
    ΔΔⵠΔⵠΔΔ: "img/night-skin95.png",
    ΔⵠᐃⲆΔΔᐃ: "img/day-skin96.png",
    ᐃᐃⲆΔⲆᐃⲆ: "img/night-skin96.png",
    ⲆⲆᐃⲆΔᐃΔ: "img/day-skin97.png",
    ⵠΔΔΔᐃⵠΔ: "img/night-skin97.png",
    ΔᐃᐃΔΔᐃⲆ: "img/day-skin98.png",
    ⵠⲆⵠᐃⲆΔᐃ: "img/night-skin98.png",
    ΔΔᐃᐃⵠⵠΔ: "img/day-skin99.png",
    ⵠⵠᐃⲆᐃⵠⲆ: "img/night-skin99.png",
    ⲆᐃⲆⲆΔⲆᐃ: "img/day-skin100.png",
    ⵠᐃᐃⵠΔⵠΔ: "img/night-skin100.png",
    ⵠΔⵠⵠⲆΔⲆ: "img/day-skin101.png",
    ⵠⵠΔᐃⵠᐃⵠ: "img/night-skin101.png",
    ΔΔⲆΔΔⲆⵠ: "img/day-skin102.png",
    ⵠΔᐃΔⵠᐃᐃ: "img/night-skin102.png",
    ⵠΔᐃᐃᐃⵠᐃ: "img/day-skin103.png",
    ⲆΔᐃⲆⵠᐃᐃ: "img/night-skin103.png",
    ⲆᐃᐃⲆᐃⲆⲆ: "img/day-skin104.png",
    ⲆⲆᐃⵠᐃⲆⵠ: "img/night-skin104.png",
    ᐃⵠΔΔⲆΔΔ: "img/day-skin105.png",
    ⲆΔⵠⲆᐃᐃⲆ: "img/night-skin105.png",
    ᐃⲆΔⵠᐃΔᐃ: "img/day-skin106.png",
    ᐃΔΔⵠΔⵠΔ: "img/night-skin106.png",
    ⲆᐃΔᐃⵠⵠⲆ: "img/day-skin107.png",
    ᐃΔⵠΔⲆΔΔ: "img/night-skin107.png",
    ᐃᐃⲆⵠⲆⵠᐃ: "img/day-skin108.png",
    ⵠⲆΔⲆⲆⵠᐃ: "img/night-skin108.png",
    ΔᐃΔⵠⵠᐃᐃ: "img/day-skin109.png",
    ⵠᐃⵠΔⵠⵠΔ: "img/night-skin109.png",
    ΔΔΔⲆⲆᐃⵠ: "img/day-skin110.png",
    ᐃΔᐃⲆⵠΔⵠ: "img/night-skin110.png",
    ⲆᐃⵠⵠⵠΔΔ: "img/day-skin111.png",
    ΔᐃⵠᐃⲆΔΔ: "img/night-skin111.png",
    ⲆᐃᐃΔⲆᐃⵠ: "img/day-skin112.png",
    ⲆⲆⵠΔⵠⲆᐃ: "img/night-skin112.png",
    ᐃᐃΔᐃᐃⵠᐃΔⲆ: "img/day-skin113.png",
    ⲆᐃᐃⲆⵠᐃⲆⵠΔ: "img/night-skin113.png",
    ΔΔᐃᐃΔᐃⲆ: "img/day-skin114.png",
    ⲆᐃⵠⲆⵠⲆΔ: "img/night-skin114.png",
    ⲆᐃⲆΔⲆΔΔ: "img/day-skin115.png",
    ΔⵠⲆⵠΔΔⵠ: "img/night-skin115.png",
    ⵠⲆΔⲆᐃⵠᐃ: "img/day-skin116.png",
    ⲆΔᐃⲆⵠᐃⲆ: "img/night-skin116.png",
    ⲆᐃⵠⵠⲆᐃᐃ: "img/day-skin117.png",
    ⲆΔⵠⵠΔΔⵠ: "img/night-skin117.png",
    ᐃⲆⲆΔⲆΔΔ: "img/day-skin118.png",
    ΔΔⲆΔⵠⲆΔ: "img/night-skin118.png",
    ᐃΔᐃᐃⲆⲆⲆ: "img/day-skin119.png",
    ⵠᐃⲆᐃⵠᐃⵠ: "img/night-skin119.png",
    ΔⲆᐃΔⵠᐃΔ: "img/day-skin120.png",
    ΔᐃⲆΔΔᐃⵠ: "img/night-skin120.png",
    ΔΔⲆΔΔⵠΔ: "img/day-skin121.png",
    ᐃⲆⲆᐃⲆⵠⲆ: "img/night-skin121.png",
    ⲆΔΔΔΔⵠΔ: "img/day-skin122.png",
    ⵠᐃᐃⲆⲆⵠⵠ: "img/night-skin122.png",
    ᐃᐃⵠⵠΔⵠΔ: "img/day-skin123.png",
    ΔⲆᐃⵠⵠᐃⲆ: "img/night-skin123.png",
    ⵠⲆⵠΔⵠⲆⲆ: "img/day-skin124.png",
    ⲆⲆΔΔⵠᐃᐃ: "img/night-skin124.png",
    ΔΔΔⵠᐃⵠⵠ: "img/day-skin125.png",
    ⵠᐃⵠΔΔᐃⵠ: "img/night-skin125.png",
    ⵠⲆΔⲆⵠⵠᐃ: "img/day-skin126.png",
    ⵠⲆᐃⵠⵠᐃᐃ: "img/night-skin126.png",
    ΔᐃΔⲆⲆΔⲆ: "img/day-skin127.png",
    ᐃⲆΔᐃᐃⵠᐃ: "img/night-skin127.png",
    ⲆⵠⵠΔⲆⵠᐃ: "img/day-skin128.png",
    ⲆⲆⲆᐃᐃΔᐃ: "img/night-skin128.png",
    ΔⲆⵠⵠⲆΔΔ: "img/day-skin129.png",
    ΔⲆᐃⵠᐃⲆΔ: "img/night-skin129.png",
    ⲆᐃᐃᐃΔⵠΔ: "img/day-skin130-1.png",
    ⵠᐃⲆⲆᐃΔΔ: "img/night-skin130-1.png",
    ⵠΔΔΔⲆᐃᐃ: "img/day-skin131.png",
    ⵠⵠⵠⲆᐃΔᐃ: "img/night-skin131.png",
    ⵠⵠⲆΔⲆᐃᐃ: "img/day-skin132.png",
    ᐃᐃⲆΔⵠΔⲆ: "img/night-skin132.png",
    ΔⲆΔΔⵠᐃᐃ: "img/day-skin133.png",
    ᐃⲆⲆΔⵠᐃΔ: "img/night-skin133.png",
    ΔᐃⲆᐃΔΔΔ: "img/day-skin134.png",
    ΔⲆΔᐃⲆⲆΔ: "img/night-skin134.png",
    ΔΔⲆⵠⲆⵠΔ: "img/day-skin135.png",
    ⲆⲆⲆⲆᐃΔⵠ: "img/night-skin135.png",
    ⵠⲆⵠⵠᐃⲆΔ: "img/day-skin136.png",
    ΔⲆⵠᐃⲆᐃⵠ: "img/night-skin136.png",
    ⵠⵠΔⵠΔⵠⲆ: "img/day-skin137.png",
    ᐃΔΔᐃᐃⲆⵠ: "img/night-skin137.png",
    ΔⲆⵠⲆΔⵠⵠ: "img/day-skin138.png",
    ⵠΔᐃⲆΔⲆᐃ: "img/night-skin138.png",
    ᐃᐃΔⵠΔᐃᐃ: "img/day-skin139.png",
    ᐃⵠⲆⵠⲆⵠᐃ: "img/night-skin139.png",
    ᐃᐃⵠⵠⲆᐃΔ: "img/day-skin140.png",
    ΔⲆΔⲆΔᐃΔ: "img/night-skin140.png",
    ᐃⵠΔΔᐃΔΔ: "img/day-skin141.png",
    ᐃⲆᐃΔⲆⵠⵠ: "img/night-skin141.png",
    ΔⲆⵠⲆⵠΔⵠ: "img/day-skin142.png",
    ᐃΔⵠΔΔΔᐃ: "img/night-skin142.png",
    ⵠΔⲆⵠⵠⲆⲆ: "img/day-skin143.png",
    ᐃᐃΔᐃⵠⵠⵠ: "img/night-skin143.png",
    ⵠⵠᐃⵠⵠⲆⲆ: "img/day-skin144.png",
    ⵠⲆΔⵠᐃⲆᐃ: "img/night-skin144.png",
    ᐃΔⵠᐃⵠᐃⵠ: "img/day-skin145.png",
    ⲆⲆᐃΔᐃⵠᐃ: "img/night-skin145.png",
    Δᐃⵠᐃᐃⵠⵠ: "img/day-skin146.png",
    ΔᐃᐃⲆᐃΔⲆ: "img/night-skin146.png",
    ⲆΔⵠΔΔΔⵠ: "img/day-skin147.png",
    ΔΔⲆΔⵠⵠⵠ: "img/night-skin147.png",
    ⵠᐃⲆΔⵠⵠⲆ: "img/day-skin148.png",
    ΔⵠⲆᐃᐃⵠⵠ: "img/night-skin148.png",
    ΔᐃⲆⵠΔⵠⲆ: "img/day-skin149.png",
    ΔᐃⵠΔⵠⵠΔ: "img/night-skin149.png",
    ⲆⵠᐃᐃᐃⲆᐃ: "img/day-skin150.png",
    ⲆΔⲆⲆΔⵠΔ: "img/night-skin150.png",
    ⲆⲆΔⵠΔΔΔ: "img/day-skin151.png",
    ᐃᐃⵠⵠΔⲆΔ: "img/night-skin151.png",
    ᐃⲆⵠⵠΔⲆⵠ: "img/day-skin152.png",
    ᐃⵠΔᐃⲆⲆΔ: "img/night-skin152.png",
    ᐃⲆΔⵠⵠΔᐃ: "img/day-skin153.png",
    ⵠΔⲆⲆᐃΔΔ: "img/night-skin153.png",
    ΔⵠⲆⵠᐃᐃΔ: "img/day-skin154.png",
    ᐃⵠⵠᐃΔⲆⲆ: "img/night-skin154.png",
    ΔⲆΔᐃⲆᐃᐃ: "img/day-skin155.png",
    ⲆΔᐃΔΔⲆⲆ: "img/night-skin155.png",
    ⲆΔΔΔΔᐃⵠ: "img/day-skin156.png",
    ⵠⵠⲆⵠᐃᐃΔ: "img/night-skin156.png",
    ⲆᐃⲆⵠΔⵠᐃ: "img/day-skin157.png",
    ΔΔⲆᐃΔᐃⵠ: "img/night-skin157.png",
    ⵠⲆΔⲆᐃΔⵠ: "img/day-skin158.png",
    ΔⵠⵠΔᐃᐃᐃ: "img/night-skin158.png",
    ΔⵠⵠⲆΔᐃᐃ: "img/day-skin159.png",
    ΔⲆΔΔᐃⵠᐃ: "img/night-skin159.png",
    ⵠⲆΔⲆⲆΔⲆ: "img/day-skin160.png",
    ⵠΔᐃⵠⵠᐃⲆ: "img/night-skin160.png",
    ᐃᐃⲆᐃⲆᐃΔ: "img/day-skin161.png",
    ΔⵠΔᐃⵠⵠⲆ: "img/night-skin161.png",
    ᐃⲆⲆⲆᐃᐃᐃ: "img/day-skin162.png",
    ⵠΔΔⲆᐃⵠⵠ: "img/night-skin162.png",
    ⲆᐃΔΔⲆΔⵠ: "img/day-skin163.png",
    ⲆᐃⵠᐃΔᐃᐃ: "img/night-skin163.png",
    ΔᐃⵠΔΔᐃᐃ: "img/day-skin164.png",
    ⲆᐃᐃⵠⵠΔⵠ: "img/night-skin164.png",
    ⵠⵠᐃⵠᐃⲆΔ: "img/day-skin165.png",
    ᐃⵠΔᐃⵠⵠᐃ: "img/night-skin165.png",
    ΔΔⲆⵠΔᐃⵠ: "img/day-skin166.png",
    ΔΔⵠᐃᐃᐃᐃ: "img/night-skin166.png",
    ⵠΔⵠⵠᐃⲆᐃ: "img/day-skin167.png",
    ᐃΔᐃⲆᐃⲆΔ: "img/night-skin167.png",
    ΔⵠⵠⲆΔᐃⲆ: "img/day-skin168.png",
    ⵠΔᐃᐃΔΔΔ: "img/night-skin168.png",
    ⲆⵠᐃᐃᐃⵠΔ: "img/day-skin169.png",
    ΔⵠᐃⵠⲆᐃⵠ: "img/night-skin169.png",
    ⵠΔⵠΔΔⵠΔ: "img/day-skin170.png",
    ΔΔᐃⲆΔⲆⵠ: "img/night-skin170.png",
    ᐃⵠⵠΔᐃᐃᐃ: "img/day-skin171.png",
    ΔᐃᐃᐃᐃⲆᐃ: "img/night-skin171.png",
    ᐃⵠⲆⵠⵠΔΔ: "img/day-skin172.png",
    ⲆᐃΔⲆⲆⲆⲆ: "img/night-skin172.png",
    ⵠⵠⵠΔᐃⵠⲆ: "img/day-skin173.png",
    ᐃⵠΔⵠⵠⲆΔ: "img/night-skin173.png",
    ΔⲆΔⲆⵠΔⲆ: "img/day-skin174.png",
    ᐃᐃⲆⵠⵠΔΔ: "img/night-skin174.png",
    ⵠᐃⵠⵠⵠⲆΔ: "img/day-skin175.png",
    ⵠᐃⲆᐃⲆΔΔ: "img/night-skin175.png",
    ᐃᐃⵠᐃΔⲆΔ: "img/day-skin176.png",
    ΔΔᐃⲆᐃⵠΔ: "img/night-skin176.png",
    ⵠⲆΔⲆᐃᐃⲆ: "img/day-skin177.png",
    ᐃⵠⲆΔⵠⵠᐃ: "img/night-skin177.png",
    ᐃⲆⵠⲆᐃΔΔ: "img/day-skin178.png",
    ⵠⲆⲆΔᐃΔᐃ: "img/night-skin178.png",
    ⲆⲆΔⵠⲆΔᐃ: "img/day-skin179.png",
    ΔⲆⵠⲆΔΔᐃ: "img/night-skin179.png",
    ⵠΔΔⲆⲆⵠⵠ: "img/day-skin180.png",
    ΔⲆⵠⲆΔⲆⵠ: "img/night-skin180.png",
    ⲆⲆΔᐃⵠΔᐃ: "img/day-skin181.png",
    ⵠⵠⲆΔⲆΔⵠ: "img/night-skin181.png",
    ΔΔΔⲆⲆⵠΔ: "img/day-skin182.png",
    ⵠⲆᐃΔᐃΔΔ: "img/night-skin182.png",
    ᐃᐃⲆᐃⲆΔᐃ: "img/day-skin183.png",
    ᐃΔⵠⲆᐃᐃⲆ: "img/night-skin183.png",
    ΔⲆᐃΔⵠᐃⲆ: "img/day-skin184.png",
    ⵠⲆΔΔΔᐃⲆ: "img/night-skin184.png",
    ᐃᐃᐃⲆΔᐃᐃ: "img/day-skin185.png",
    ⵠⵠᐃΔᐃΔⵠ: "img/night-skin185.png",
    ⵠᐃⲆⲆⵠⵠⵠ: "img/day-skin186.png",
    ΔⲆΔⵠⵠᐃⵠ: "img/night-skin186.png",
    ⵠⵠΔᐃⲆⲆᐃ: "img/day-skin187.png",
    ΔᐃΔΔⵠⵠᐃ: "img/night-skin187.png",
    ΔⲆⵠΔΔΔΔ: "img/day-skin188.png",
    ᐃᐃⲆⲆᐃΔⲆ: "img/night-skin188.png",
    ⲆⵠⲆⲆⲆⵠΔ: "img/day-skin189.png",
    ⵠⲆⲆⵠᐃⵠΔ: "img/night-skin189.png",
    ⲆⵠΔᐃⵠⲆⵠ: "img/day-skin190.png",
    ΔΔⵠⲆΔᐃⲆ: "img/night-skin190.png",
    ΔⵠᐃᐃⲆⲆΔ: "img/day-skin191.png",
    ΔᐃᐃᐃⲆⲆⲆ: "img/night-skin191.png",
    ᐃⵠΔⵠⵠⵠⲆ: "img/day-skin192.png",
    ⲆⲆᐃΔΔΔⵠ: "img/night-skin192.png",
    ⲆᐃⵠⵠⵠⲆⵠ: "img/day-skin193.png",
    ΔⵠⵠΔᐃⲆⲆ: "img/night-skin193.png",
    ⵠΔᐃΔΔᐃⵠ: "img/day-skin194.png",
    ⵠⵠⲆΔᐃΔᐃ: "img/night-skin194.png",
    ᐃᐃⲆⵠⲆⲆⲆ: "img/day-skin195.png",
    ΔΔⲆⲆⲆⵠⲆ: "img/night-skin195.png",
    ⵠᐃᐃΔⵠΔⵠ: "img/day-skin196.png",
    ΔᐃᐃⲆⵠⲆΔ: "img/night-skin196.png",
    ΔΔⵠⲆΔⲆᐃ: "img/day-skin197.png",
    ΔΔΔⲆⲆᐃⲆ: "img/night-skin197.png",
    ΔᐃΔⲆᐃΔΔ: "img/day-skin198.png",
    ΔᐃⵠᐃⲆΔⵠ: "img/night-skin198.png",
    ⲆΔⲆⲆᐃⲆᐃ: "img/day-skin199.png",
    ⲆΔⵠᐃⲆΔⲆ: "img/night-skin199.png",
    ⲆΔᐃΔᐃᐃᐃ: "img/day-skin200.png",
    ⵠⲆⲆΔⵠΔᐃ: "img/night-skin200.png",
    ΔΔⲆᐃⵠᐃⵠ: "img/day-skin201.png",
    ᐃⲆᐃᐃΔΔᐃ: "img/night-skin201.png",
    ⲆⲆᐃᐃⲆΔⲆ: "img/day-skin202.png",
    ᐃⵠᐃᐃⲆΔⵠ: "img/night-skin202.png",
    ᐃΔⲆΔΔⵠⵠ: "img/day-skin203.png",
    ⵠΔᐃΔΔΔⵠ: "img/night-skin203.png",
    ᐃᐃᐃΔᐃᐃⲆ: "img/day-skin204.png",
    ΔΔⲆΔᐃᐃⲆ: "img/night-skin204.png",
    ⵠᐃⲆⵠᐃⵠⲆ: "img/day-skin205.png",
    ⲆⵠⵠⲆⲆⵠⵠ: "img/night-skin205.png",
    ᐃΔᐃⵠᐃⵠⵠ: "img/day-skin206.png",
    ΔΔⲆᐃᐃⲆⲆ: "img/night-skin206.png",
    ΔΔⲆⵠⲆⲆⲆ: "img/day-skin207.png",
    ᐃⲆⲆᐃᐃᐃΔ: "img/night-skin207.png",
    ᐃΔⲆΔᐃⵠΔ: "img/day-skin208.png",
    ᐃᐃᐃⵠΔΔᐃ: "img/night-skin208.png",
    ΔᐃⵠⲆᐃⵠΔ: "img/day-skin209.png",
    ⵠⲆⲆΔΔⲆᐃ: "img/night-skin209.png",
    ΔΔΔⲆⵠⵠᐃ: "img/day-skin210.png",
    Δⵠᐃⵠⵠᐃⵠ: "img/night-skin210.png",
    ⵠⲆⲆᐃᐃΔΔ: "img/day-skin211.png",
    ΔΔⲆⲆᐃⵠΔ: "img/night-skin211.png",
    ⲆΔΔⲆⵠΔⵠ: "img/day-skin212.png",
    ⲆⵠⲆⲆⵠⵠΔ: "img/night-skin212.png",
    ⵠᐃⲆᐃΔᐃΔ: "img/day-skin213.png",
    ᐃⲆΔᐃⲆΔⲆ: "img/night-skin213.png",
    ⵠⲆⲆⵠᐃⲆΔ: "img/day-skin214.png",
    ΔⲆⵠⵠᐃΔⲆ: "img/night-skin214.png",
    ⵠᐃⵠⲆⲆᐃⲆ: "img/day-hand-skin0.png",
    ΔΔⵠΔΔᐃᐃ: "img/night-hand-skin0.png",
    ᐃΔⵠΔΔᐃᐃ: "img/day-hand-skin1.png",
    ΔⵠΔⵠⲆⲆᐃ: "img/night-hand-skin1.png",
    ᐃΔⲆⲆᐃⲆᐃ: "img/day-hand-skin2.png",
    ΔᐃⲆᐃⲆΔⵠ: "img/night-hand-skin2.png",
    ᐃΔⲆⲆⲆⲆΔ: "img/day-hand-skin3.png",
    ᐃᐃⲆⵠΔΔⲆ: "img/night-hand-skin3.png",
    ⵠΔΔⲆᐃᐃᐃ: "img/day-hand-skin4.png",
    ᐃΔᐃⲆΔΔⵠ: "img/night-hand-skin4.png",
    ΔⵠⲆⲆⵠⵠᐃ: "img/day-hand-skin5.png",
    ᐃᐃΔᐃᐃⵠᐃ: "img/night-hand-skin5.png",
    ΔᐃⵠΔⵠⲆᐃ: "img/day-hand-skin6.png",
    ΔⵠⲆΔⵠⵠⲆΔⲆ: "img/night-hand-skin6.png",
    ΔΔⵠΔΔⵠⵠ: "img/day-hand-skin6.png",
    ΔᐃⵠⵠⲆⵠᐃ: "img/night-hand-skin6.png",
    ⲆⵠΔᐃΔΔⲆ: "img/day-hand-skin8.png",
    ⲆᐃⵠⲆⲆΔⲆ: "img/night-hand-skin8.png",
    ΔⲆⵠᐃⲆΔⵠ: "img/day-hand-skin9.png",
    ⲆⲆⲆᐃΔⲆⵠ: "img/night-hand-skin9.png",
    ⵠᐃᐃᐃᐃΔΔ: "img/day-hand-skin10.png",
    ΔΔⵠⲆᐃⵠᐃ: "img/night-hand-skin10.png",
    ⵠⲆⲆⲆΔⵠⲆ: "img/day-hand-skin11.png",
    ⵠⲆⲆΔⵠⲆᐃ: "img/night-hand-skin11.png",
    ΔⲆᐃᐃΔⵠⵠ: "img/day-hand-skin12.png",
    ᐃᐃⵠⵠⵠΔᐃ: "img/night-hand-skin12.png",
    ⵠⵠⵠⵠΔⵠᐃ: "img/day-hand-skin13.png",
    ⲆᐃⵠⲆⵠᐃⲆ: "img/night-hand-skin13.png",
    ᐃⵠⵠᐃⲆᐃᐃ: "img/day-hand-skin14.png",
    ⵠᐃΔⲆΔⵠΔ: "img/night-hand-skin14.png",
    ⵠⵠΔΔᐃⲆⲆ: "img/day-hand-skin15.png",
    ⵠΔⲆⲆᐃⲆⲆ: "img/night-hand-skin15.png",
    ⲆΔⲆᐃᐃΔΔ: "img/day-hand-skin16.png",
    ᐃⲆᐃᐃⵠⲆᐃ: "img/night-hand-skin16.png",
    ᐃᐃᐃⵠΔΔΔ: "img/day-hand-skin17.png",
    ΔᐃⵠⵠΔⲆⵠ: "img/night-hand-skin17.png",
    ᐃⲆⲆⲆⲆᐃΔ: "img/day-hand-skin18.png",
    ᐃⵠΔⲆⲆⲆΔ: "img/night-hand-skin18.png",
    ᐃΔᐃⲆⵠⲆᐃ: "img/day-hand-skin19.png",
    ΔᐃΔΔⲆⵠᐃ: "img/night-hand-skin19.png",
    ⵠᐃⵠⲆΔⲆΔ: "img/day-hand-skin20.png",
    ΔⵠᐃΔⵠⵠⲆ: "img/night-hand-skin20.png",
    ⵠⲆΔΔⵠⵠⵠ: "img/day-hand-skin21.png",
    ᐃⵠⲆⲆⵠⵠᐃ: "img/night-hand-skin21.png",
    Δⵠⵠᐃⵠᐃⵠ: "img/day-hand-skin22.png",
    ⲆᐃΔΔᐃⵠᐃ: "img/night-hand-skin22.png",
    ⲆΔΔᐃⲆⲆⲆ: "img/day-hand-skin23.png",
    ⲆΔᐃᐃⵠⲆᐃ: "img/night-hand-skin23.png",
    ΔⲆⵠⵠⲆᐃⵠ: "img/day-hand-skin24.png",
    ΔⵠⵠⲆᐃⵠΔ: "img/night-hand-skin24.png",
    ⲆⲆΔᐃᐃⵠⲆ: "img/day-hand-skin25.png",
    ᐃⲆⲆⵠΔᐃⵠ: "img/night-hand-skin25.png",
    ΔΔⲆᐃᐃᐃΔ: "img/day-hand-skin26.png",
    ⵠΔΔΔⲆΔⲆ: "img/night-hand-skin26.png",
    ΔⲆᐃᐃⲆⲆΔ: "img/day-hand-skin27.png",
    ⲆΔⵠⵠⲆⲆᐃ: "img/night-hand-skin27.png",
    ᐃⵠⲆᐃⵠᐃⵠ: "img/day-hand-skin28.png",
    ΔⲆᐃΔⲆⲆⵠ: "img/night-hand-skin28.png",
    ⲆᐃⵠⲆΔᐃΔ: "img/day-hand-skin29.png",
    ᐃⲆᐃⵠⵠᐃΔ: "img/night-hand-skin29.png",
    ⲆⵠᐃⲆΔΔⵠ: "img/day-hand-skin30.png",
    ΔⵠΔⵠΔᐃΔ: "img/night-hand-skin30.png",
    ⲆᐃⲆⲆᐃⵠΔ: "img/day-hand-skin31.png",
    ⲆⵠⵠⲆⲆⲆⵠ: "img/night-hand-skin31.png",
    ⲆᐃᐃⲆⵠⵠᐃ: "img/day-hand-skin32.png",
    ⵠⵠΔⵠᐃΔΔ: "img/night-hand-skin32.png",
    ⵠⲆΔᐃᐃᐃⵠ: "img/day-hand-skin33.png",
    ⵠᐃᐃⵠⵠⲆⲆ: "img/night-hand-skin33.png",
    ΔⲆⲆⲆⲆⲆⵠ: "img/day-hand-skin34.png",
    ⵠᐃⵠᐃᐃΔΔ: "img/night-hand-skin34.png",
    ⵠΔᐃᐃⲆΔⵠ: "img/day-hand-skin35.png",
    ⲆⲆᐃⲆⵠΔⲆ: "img/night-hand-skin35.png",
    ⵠΔΔΔⲆⲆⲆ: "img/day-hand-skin36.png",
    ⲆⵠᐃΔⵠⲆⲆ: "img/night-hand-skin36.png",
    ⲆᐃΔΔᐃⲆΔ: "img/day-hand-skin37.png",
    ⵠΔⲆᐃⵠᐃᐃ: "img/night-hand-skin37.png",
    ⵠᐃⵠᐃⵠᐃᐃ: "img/day-hand-skin38.png",
    ΔΔΔΔⵠΔΔ: "img/night-hand-skin38.png",
    ⲆᐃᐃⲆⲆⵠⵠ: "img/day-hand-skin39.png",
    ⵠⵠᐃⵠᐃᐃⵠ: "img/night-hand-skin39.png",
    ᐃᐃᐃΔΔⲆᐃ: "img/day-hand-skin40.png",
    ⵠⵠᐃΔⲆⲆⵠ: "img/night-hand-skin40.png",
    ΔᐃᐃΔⲆΔⵠ: "img/day-hand-skin41.png",
    ⵠᐃᐃⵠⲆᐃⵠ: "img/night-hand-skin41.png",
    ⲆᐃΔᐃᐃⲆᐃ: "img/day-hand-skin42.png",
    ᐃⵠᐃⵠⵠΔⲆ: "img/night-hand-skin42.png",
    ⲆⲆⲆⵠᐃⵠⲆ: "img/day-hand-skin43.png",
    ᐃᐃⵠΔΔⵠᐃ: "img/night-hand-skin43.png",
    ΔⲆᐃΔΔᐃⵠ: "img/day-hand-skin16.png",
    ΔⲆᐃⲆⲆΔΔ: "img/night-hand-skin16.png",
    ᐃⵠᐃᐃᐃⵠⵠ: "img/day-hand-skin45.png",
    ⲆᐃⵠᐃᐃΔΔ: "img/night-hand-skin45.png",
    ⲆᐃⲆⵠⵠⲆΔ: "img/day-hand-skin46.png",
    ⲆΔΔⵠⲆⲆΔ: "img/night-hand-skin46.png",
    ⲆⵠᐃᐃⲆᐃⵠ: "img/day-hand-skin47.png",
    ⲆΔⵠΔⲆⲆΔ: "img/night-hand-skin47.png",
    ⵠΔⵠᐃΔΔᐃ: "img/day-hand-skin48.png",
    ΔⲆᐃⲆⵠⲆⵠ: "img/night-hand-skin48.png",
    ⵠⵠΔΔⵠΔΔ: "img/day-hand-skin49.png",
    ΔᐃᐃⲆⲆΔⲆ: "img/night-hand-skin49.png",
    ΔⲆᐃⵠΔⵠⲆ: "img/day-hand-skin49.png",
    ⲆⲆᐃⵠⵠᐃⵠ: "img/night-hand-skin49.png",
    ⲆᐃⵠᐃΔᐃⲆ: "img/day-hand-skin51.png",
    ⵠⵠⵠⲆⵠᐃΔ: "img/night-hand-skin51.png",
    ⲆΔᐃᐃΔᐃⲆ: "img/day-hand-skin52.png",
    ⵠⲆᐃᐃΔⵠᐃ: "img/night-hand-skin52.png",
    ⵠⵠⵠⵠΔᐃΔ: "img/day-hand-skin53.png",
    ΔⲆⲆᐃΔΔᐃ: "img/night-hand-skin53.png",
    ΔⲆⵠⲆΔΔΔ: "img/day-hand-skin53.png",
    ⲆⲆⲆΔᐃᐃᐃ: "img/night-hand-skin53.png",
    ⵠⲆⲆᐃᐃⲆⵠ: "img/day-hand-skin55.png",
    ΔᐃⲆⲆΔᐃⵠ: "img/night-hand-skin55.png",
    ⲆΔⲆᐃΔⵠΔ: "img/day-hand-skin56.png",
    ⵠΔᐃⵠⵠⲆⵠ: "img/night-hand-skin56.png",
    ΔⲆᐃⲆⵠⲆᐃ: "img/day-hand-skin57.png",
    ᐃᐃΔᐃΔΔⲆ: "img/night-hand-skin57.png",
    ᐃⵠⵠⵠᐃᐃⵠ: "img/day-hand-skin58.png",
    ⵠⵠⲆⲆᐃⵠΔ: "img/night-hand-skin58.png",
    ⵠᐃⲆⲆⵠᐃΔ: "img/day-hand-skin59.png",
    ⲆΔⵠⲆΔⵠᐃ: "img/night-hand-skin59.png",
    ⲆᐃᐃⵠΔⵠⲆ: "img/day-hand-skin61.png",
    ΔⵠⲆⲆᐃⲆΔ: "img/night-hand-skin61.png",
    ΔΔⲆⲆΔΔⵠ: "img/day-hand-skin61.png",
    ⵠⲆⵠᐃⲆⵠⲆ: "img/night-hand-skin61.png",
    ⵠⵠᐃⵠⲆᐃⲆ: "img/day-hand-skin62.png",
    ⵠᐃⵠΔΔⲆⲆ: "img/night-hand-skin62.png",
    ⵠΔᐃᐃⵠᐃΔ: "img/day-hand-skin63.png",
    ΔⵠΔⲆᐃΔⵠ: "img/night-hand-skin63.png",
    ΔᐃΔⲆᐃⲆⲆ: "img/day-hand-skin64.png",
    ΔᐃⵠⲆⵠⵠΔ: "img/night-hand-skin64.png",
    ⵠⲆⲆⵠⲆᐃᐃ: "img/day-hand-skin65.png",
    ⵠⵠⲆⵠᐃΔⵠ: "img/night-hand-skin65.png",
    ⵠⲆᐃⲆᐃⵠΔ: "img/day-hand-skin66.png",
    ᐃᐃⵠⲆⲆⲆⵠ: "img/night-hand-skin66.png",
    ΔᐃⲆᐃΔⵠⲆ: "img/day-hand-skin67.png",
    ⲆΔΔⲆΔⵠⲆ: "img/night-hand-skin67.png",
    ᐃⵠΔΔᐃᐃⲆ: "img/day-hand-skin68.png",
    ⵠᐃⲆⵠᐃⵠᐃ: "img/night-hand-skin68.png",
    ΔΔΔᐃⲆⲆΔ: "img/day-hand-skin69.png",
    ⵠΔᐃⲆᐃΔⵠ: "img/night-hand-skin69.png",
    ⲆⲆⲆⲆΔⲆⵠ: "img/day-hand-skin70.png",
    ΔΔᐃᐃᐃⲆᐃ: "img/night-hand-skin70.png",
    ΔΔⲆⲆΔᐃⵠ: "img/day-hand-skin71.png",
    ᐃΔⵠⲆᐃⲆⲆ: "img/night-hand-skin71.png",
    ⵠΔᐃⵠⵠⲆΔ: "img/day-hand-skin72.png",
    ᐃΔⵠΔⵠΔᐃ: "img/night-hand-skin72.png",
    ⲆᐃⵠᐃⲆⵠᐃ: "img/day-hand-skin73.png",
    ΔⵠᐃⲆⲆᐃΔ: "img/night-hand-skin73.png",
    ΔⲆⲆⲆᐃⲆΔ: "img/day-hand-skin74.png",
    ᐃᐃⵠᐃⲆⲆⵠ: "img/night-hand-skin74.png",
    ⵠⲆⵠᐃⲆⵠⵠ: "img/day-hand-skin75.png",
    ⲆⵠΔⲆⵠᐃΔ: "img/night-hand-skin75.png",
    ⵠᐃΔⲆⵠⲆΔ: "img/day-hand-skin76.png",
    ΔΔΔΔⲆⲆⲆ: "img/night-hand-skin76.png",
    ΔᐃⲆⵠΔⵠᐃ: "img/day-hand-skin77.png",
    ⲆⲆⵠᐃᐃᐃⲆ: "img/night-hand-skin77.png",
    ⵠΔⲆⲆⲆᐃΔ: "img/day-hand-skin78.png",
    ⵠᐃⵠⵠⵠⵠⲆ: "img/night-hand-skin78.png",
    ᐃΔΔⵠΔᐃⵠ: "img/day-hand-skin79.png",
    ⵠᐃⲆⲆⲆⵠᐃ: "img/night-hand-skin79.png",
    ᐃⲆⵠᐃᐃⲆⲆ: "img/day-hand-skin80.png",
    ΔᐃΔⵠᐃᐃᐃ: "img/night-hand-skin80.png",
    ⵠᐃⵠΔⲆⲆⲆ: "img/day-hand-skin81.png",
    ⵠⲆⲆⲆⲆΔᐃ: "img/night-hand-skin81.png",
    ΔᐃΔⲆΔᐃⲆ: "img/day-hand-skin82.png",
    ⵠⲆⲆᐃᐃⵠᐃ: "img/night-hand-skin82.png",
    ΔᐃᐃⵠΔⲆΔ: "img/day-hand-skin83.png",
    ΔΔⵠⲆᐃⲆᐃ: "img/night-hand-skin83.png",
    ⵠⲆⲆᐃΔᐃᐃ: "img/day-hand-skin84.png",
    ᐃΔⵠΔⵠⲆⲆ: "img/night-hand-skin84.png",
    ⲆⵠΔⵠΔΔΔ: "img/day-hand-skin85.png",
    ⲆⵠΔΔΔⵠⲆ: "img/night-hand-skin85.png",
    ⲆⵠᐃⵠᐃΔΔ: "img/day-hand-skin86.png",
    ⲆᐃΔᐃⵠᐃΔ: "img/night-hand-skin86.png",
    ⵠⵠⵠⲆⲆΔᐃ: "img/day-hand-skin87.png",
    ΔⲆⲆⵠⵠⵠⲆ: "img/night-hand-skin87.png",
    ΔⲆΔᐃⵠᐃᐃ: "img/day-hand-skin88.png",
    ΔⵠΔⵠᐃⲆⲆ: "img/night-hand-skin88.png",
    ⲆᐃΔᐃⲆΔⲆ: "img/day-hand-skin89.png",
    ΔΔᐃΔᐃⲆⲆ: "img/night-hand-skin89.png",
    ⵠΔⵠᐃⵠᐃⵠ: "img/day-hand-skin90.png",
    ⵠΔΔΔⵠⲆⵠ: "img/night-hand-skin90.png",
    ΔΔΔⵠⲆⵠⵠ: "img/day-hand-skin91.png",
    ⲆᐃⲆⵠᐃᐃⵠ: "img/night-hand-skin91.png",
    ΔΔᐃΔΔⵠⲆ: "img/day-hand-skin92.png",
    ⲆΔᐃⲆⲆᐃᐃ: "img/night-hand-skin92.png",
    ⲆⲆⲆⲆᐃⵠⲆ: "img/day-hand-skin93.png",
    ⲆⵠⲆΔΔᐃᐃ: "img/night-hand-skin93.png",
    ⵠᐃⵠⲆᐃⲆⲆ: "img/day-hand-skin94.png",
    ΔΔⵠᐃΔⲆΔ: "img/night-hand-skin94.png",
    ⲆⵠΔⲆⲆᐃᐃ: "img/day-hand-skin95.png",
    ⵠⵠⵠⲆⵠⵠᐃ: "img/night-hand-skin95.png",
    ᐃΔⵠⵠⲆⵠⵠ: "img/day-hand-skin96.png",
    ΔᐃⲆⲆΔΔⵠ: "img/night-hand-skin96.png",
    ⵠⲆⵠΔⵠᐃⲆ: "img/day-hand-skin97.png",
    ⵠᐃΔⲆΔᐃⲆ: "img/night-hand-skin97.png",
    ᐃᐃᐃⵠᐃᐃⵠ: "img/day-hand-skin98.png",
    ⲆⲆᐃᐃΔΔⵠ: "img/night-hand-skin98.png",
    ⲆⵠΔⲆΔⲆⲆ: "img/day-hand-skin99.png",
    ⲆⲆⵠᐃΔⵠᐃ: "img/night-hand-skin99.png",
    ΔⵠⵠᐃᐃⵠⲆ: "img/day-hand-skin100.png",
    ⲆⵠΔⲆᐃⲆΔ: "img/night-hand-skin100.png",
    ⲆⲆᐃⲆΔⲆΔ: "img/day-hand-skin101.png",
    ⲆΔⵠⵠⵠΔᐃ: "img/night-hand-skin101.png",
    ⵠⵠᐃΔⲆΔⵠ: "img/day-hand-skin102.png",
    ΔᐃⲆⲆᐃⵠⲆ: "img/night-hand-skin102.png",
    ΔᐃΔᐃᐃⲆⵠ: "img/day-hand-skin103.png",
    ΔᐃⵠΔⲆᐃⵠ: "img/night-hand-skin103.png",
    ⵠᐃΔᐃΔᐃⵠ: "img/day-hand-skin104.png",
    ⵠᐃⵠⲆᐃᐃᐃ: "img/night-hand-skin104.png",
    ⵠᐃΔⵠⵠⵠⲆ: "img/day-hand-skin105.png",
    ⵠⵠᐃᐃⲆⲆΔ: "img/night-hand-skin105.png",
    ΔᐃᐃⵠⵠᐃΔ: "img/day-hand-skin106.png",
    ΔⵠⲆΔⲆⵠⵠ: "img/night-hand-skin106.png",
    ΔⵠⵠΔⵠᐃᐃ: "img/day-hand-skin107.png",
    ᐃᐃⲆΔⵠᐃⵠ: "img/night-hand-skin107.png",
    ΔΔⵠⲆⲆⲆⵠ: "img/day-hand-skin108.png",
    ᐃⵠᐃⵠⵠᐃⲆ: "img/night-hand-skin108.png",
    ΔΔⲆᐃᐃᐃᐃ: "img/day-hand-skin109.png",
    ⵠⲆⵠⵠΔΔⵠ: "img/night-hand-skin109.png",
    ⲆⲆⲆⲆⲆᐃⲆ: "img/day-hand-skin110.png",
    ΔᐃⲆΔΔⲆΔ: "img/night-hand-skin110.png",
    ⲆᐃᐃⲆΔⵠΔ: "img/day-hand-skin111.png",
    ᐃⲆⲆΔⲆᐃⲆ: "img/night-hand-skin111.png",
    ᐃⲆⵠⲆⵠⵠΔ: "img/day-hand-skin112.png",
    ⲆᐃⵠΔᐃⲆΔ: "img/night-hand-skin112.png",
    ⲆΔΔⵠⵠⲆⵠⵠⲆ: "img/day-hand-skin113.png",
    ᐃⲆᐃᐃⲆᐃⵠᐃᐃ: "img/night-hand-skin113.png",
    ΔᐃⵠⲆⵠᐃᐃ: "img/day-hand-skin114.png",
    ᐃⲆⵠΔⵠⵠⲆ: "img/night-hand-skin114.png",
    ⵠΔⵠⲆΔΔΔ: "img/day-hand-skin115.png",
    ᐃⵠΔᐃⲆⵠⲆ: "img/night-hand-skin115.png",
    ⵠⲆⲆⵠᐃⵠⵠ: "img/day-hand-skin116.png",
    ΔᐃΔᐃⵠⲆΔ: "img/night-hand-skin116.png",
    ᐃΔⲆⲆᐃⵠΔ: "img/day-hand-skin117.png",
    ⵠⲆᐃⲆⲆᐃΔ: "img/night-hand-skin117.png",
    ᐃΔⵠᐃΔΔᐃ: "img/day-hand-skin118.png",
    ⵠⵠΔⲆΔΔᐃ: "img/night-hand-skin118.png",
    ⲆᐃⲆΔⲆⵠᐃ: "img/day-hand-skin119.png",
    ⲆⲆᐃⲆⲆⵠᐃ: "img/night-hand-skin119.png",
    ⵠᐃᐃⲆⵠᐃⲆ: "img/day-hand-skin120.png",
    ᐃΔΔΔΔⲆΔ: "img/night-hand-skin120.png",
    ⵠⲆⲆⲆᐃΔΔ: "img/day-hand-skin122.png",
    ⲆᐃΔⵠΔⵠᐃ: "img/night-hand-skin122.png",
    ΔᐃᐃᐃⲆⵠⲆ: "img/day-hand-skin122.png",
    ΔᐃⵠᐃⵠᐃΔ: "img/night-hand-skin122.png",
    ΔΔᐃⲆᐃⵠⲆ: "img/day-hand-skin122.png",
    ⲆⵠⲆⲆⲆⲆⲆ: "img/night-hand-skin122.png",
    ᐃⲆⲆⵠⲆⲆΔ: "img/day-hand-skin124.png",
    ᐃΔⵠΔⵠᐃⲆ: "img/night-hand-skin124.png",
    ᐃⵠⵠᐃᐃⵠⲆ: "img/day-hand-skin125.png",
    ᐃⵠᐃΔᐃⲆΔ: "img/night-hand-skin125.png",
    ⲆΔΔᐃΔΔⵠ: "img/day-hand-skin126.png",
    ᐃⵠⲆᐃⵠΔᐃ: "img/night-hand-skin126.png",
    ⵠⲆⵠⵠΔⲆΔ: "img/day-hand-skin127.png",
    ᐃΔⵠᐃⲆᐃⲆ: "img/night-hand-skin127.png",
    ⵠⵠⵠⵠⵠΔᐃ: "img/day-hand-skin128.png",
    ᐃᐃΔΔⲆΔⲆ: "img/night-hand-skin128.png",
    ΔⲆΔΔⲆᐃΔ: "img/day-hand-skin129.png",
    ΔⲆⵠᐃΔⵠᐃ: "img/night-hand-skin129.png",
    ⲆⲆΔⵠⲆᐃᐃ: "img/day-hand-skin130.png",
    ΔⵠΔⲆΔᐃΔ: "img/night-hand-skin130.png",
    ΔᐃᐃᐃᐃΔⲆ: "img/day-hand-skin131.png",
    ΔΔΔⵠᐃᐃⲆ: "img/night-hand-skin131.png",
    ⵠᐃⵠΔⲆΔⲆ: "img/day-hand-skin130.png",
    ⵠΔⲆⵠⵠⵠⵠ: "img/night-hand-skin130.png",
    ⲆⵠⲆⲆⲆᐃΔ: "img/day-hand-skin133.png",
    ⲆⲆᐃⵠⵠⵠⲆ: "img/night-hand-skin133.png",
    ⵠⲆΔΔΔⲆΔ: "img/day-hand-skin134.png",
    ⵠΔΔΔᐃⵠᐃ: "img/night-hand-skin134.png",
    ⲆⲆᐃⲆᐃⵠⵠ: "img/day-hand-skin135.png",
    ⵠⲆᐃⵠΔⵠᐃ: "img/night-hand-skin135.png",
    ᐃᐃᐃⲆⲆᐃᐃ: "img/day-hand-skin136.png",
    ⲆⲆⲆⵠΔᐃΔ: "img/night-hand-skin136.png",
    ᐃⵠⲆΔᐃᐃΔ: "img/day-hand-skin137.png",
    Δᐃᐃⵠⵠᐃⵠ: "img/night-hand-skin137.png",
    ⲆᐃⲆⵠⵠᐃⲆ: "img/day-hand-skin138.png",
    ΔΔⲆⵠⲆⵠⵠ: "img/night-hand-skin138.png",
    ᐃⲆΔⲆᐃⵠⵠ: "img/day-hand-skin139.png",
    ⵠᐃΔⲆⲆΔᐃ: "img/night-hand-skin139.png",
    ᐃⵠⲆΔΔⵠΔ: "img/day-hand-skin140.png",
    ⵠᐃⵠⵠⲆΔⲆ: "img/night-hand-skin140.png",
    ΔⲆᐃⲆⲆΔⵠ: "img/day-hand-skin141.png",
    ᐃᐃΔⲆⲆᐃᐃ: "img/night-hand-skin141.png",
    ⵠⲆΔⵠΔⵠⲆ: "img/day-hand-skin142.png",
    ΔᐃΔⲆⵠᐃⵠ: "img/night-hand-skin142.png",
    ᐃⵠⲆⲆⵠⵠΔ: "img/day-hand-skin143.png",
    ⵠᐃᐃⲆⲆⵠᐃ: "img/night-hand-skin143.png",
    ⵠⲆⲆⵠᐃΔⵠ: "img/day-hand-skin144.png",
    ᐃᐃᐃᐃᐃᐃᐃ: "img/night-hand-skin144.png",
    ΔⵠⵠΔⲆⵠᐃ: "img/day-hand-skin145.png",
    ΔᐃᐃᐃΔⵠⲆ: "img/night-hand-skin145.png",
    ⵠⵠΔᐃΔⲆᐃ: "img/day-hand-skin146.png",
    ΔᐃΔⲆⵠᐃⲆ: "img/night-hand-skin146.png",
    ⲆⲆᐃᐃΔᐃⲆ: "img/day-hand-skin147.png",
    ᐃΔΔⵠᐃᐃᐃ: "img/night-hand-skin147.png",
    ᐃⵠᐃⵠΔⵠⲆ: "img/day-hand-skin148.png",
    ⵠᐃᐃⵠΔⲆΔ: "img/night-hand-skin148.png",
    ᐃⲆⲆⵠΔⲆᐃ: "img/day-hand-skin149.png",
    ⵠΔⵠᐃⲆⲆⵠ: "img/night-hand-skin149.png",
    ⲆᐃⵠᐃⲆᐃᐃ: "img/day-hand-skin150.png",
    ⵠⲆⵠᐃΔⲆⲆ: "img/night-hand-skin150.png",
    ⵠⲆᐃΔⲆΔᐃ: "img/day-hand-skin151.png",
    ⲆΔⲆᐃⵠΔΔ: "img/night-hand-skin151.png",
    ⲆⲆⲆΔⵠⲆᐃ: "img/day-hand-skin152.png",
    ΔⲆΔⵠᐃΔᐃ: "img/night-hand-skin152.png",
    ΔⵠⲆᐃⵠΔⵠ: "img/day-hand-skin153.png",
    ⵠΔΔΔⵠⵠΔ: "img/night-hand-skin153.png",
    ΔΔⵠⲆΔᐃⵠ: "img/day-hand-skin154.png",
    ᐃⵠⲆΔᐃⵠᐃ: "img/night-hand-skin154.png",
    ΔⲆⵠᐃⲆᐃᐃ: "img/day-hand-skin155.png",
    ΔⵠⵠᐃΔⵠᐃ: "img/night-hand-skin155.png",
    ⵠⵠᐃⲆⲆΔᐃ: "img/day-hand-skin156.png",
    ⵠᐃΔⲆᐃΔᐃ: "img/night-hand-skin156.png",
    ⵠᐃΔΔⲆΔⵠ: "img/day-hand-skin157.png",
    ΔᐃⲆᐃᐃⲆΔ: "img/night-hand-skin157.png",
    ⵠΔⵠΔΔⲆⵠ: "img/day-hand-skin158.png",
    ⲆⲆⲆᐃⵠⵠⵠ: "img/night-hand-skin158.png",
    ⵠⵠⵠΔⲆΔⵠ: "img/day-hand-skin159.png",
    ⵠᐃⵠⵠᐃⵠⵠ: "img/night-hand-skin159.png",
    ⵠΔⵠΔΔᐃⵠ: "img/day-hand-skin160.png",
    ᐃΔᐃⲆᐃᐃᐃ: "img/night-hand-skin160.png",
    ⵠᐃΔⵠΔΔᐃ: "img/day-hand-skin161.png",
    ⵠⲆᐃΔΔΔⲆ: "img/night-hand-skin161.png",
    ΔΔⵠⲆⵠᐃΔ: "img/day-hand-skin162.png",
    ⵠᐃⲆᐃΔⲆᐃ: "img/night-hand-skin162.png",
    ᐃᐃⲆⲆΔⲆⵠ: "img/day-hand-skin163.png",
    ᐃΔⲆᐃⲆᐃⲆ: "img/night-hand-skin163.png",
    ᐃⵠⲆΔᐃⵠΔ: "img/day-hand-skin164.png",
    ⵠᐃΔΔⲆⵠᐃ: "img/night-hand-skin164.png",
    ⲆⵠⵠⵠᐃΔⵠ: "img/day-hand-skin165.png",
    Ⲇⵠⵠⵠᐃⵠᐃ: "img/night-hand-skin165.png",
    ⲆⲆΔⲆⵠⲆⲆ: "img/day-hand-skin166.png",
    ⲆⵠΔΔΔⲆᐃ: "img/night-hand-skin166.png",
    ᐃⵠⲆⵠᐃⵠⲆ: "img/day-hand-skin167.png",
    ⵠⵠΔᐃᐃⵠΔ: "img/night-hand-skin167.png",
    ⵠΔⵠⵠⵠⲆᐃ: "img/day-hand-skin168.png",
    ⲆᐃᐃΔᐃⵠΔ: "img/night-hand-skin168.png",
    ᐃᐃⲆⵠⵠᐃΔ: "img/day-hand-skin169.png",
    ⲆⵠΔᐃᐃⲆⵠ: "img/night-hand-skin169.png",
    ᐃⵠᐃΔΔⲆⵠ: "img/day-hand-skin170.png",
    ᐃᐃⵠΔΔᐃⵠ: "img/night-hand-skin170.png",
    ⵠⲆΔⵠᐃΔΔ: "img/day-hand-skin171.png",
    ⵠⲆⵠΔⲆΔⵠ: "img/night-hand-skin171.png",
    ⲆⵠΔᐃΔᐃᐃ: "img/day-hand-skin172.png",
    ⲆᐃᐃⲆΔⲆᐃ: "img/night-hand-skin172.png",
    Δᐃᐃᐃᐃᐃᐃ: "img/day-hand-skin173.png",
    ⲆⲆᐃⵠⵠⲆΔ: "img/night-hand-skin173.png",
    ⵠⵠΔⵠᐃⵠⲆ: "img/day-hand-skin174.png",
    ⵠᐃᐃⵠΔΔᐃ: "img/night-hand-skin174.png",
    ᐃΔΔⵠⲆᐃΔ: "img/day-hand-skin175.png",
    ᐃᐃΔᐃⵠⲆΔ: "img/night-hand-skin175.png",
    ⵠⵠⲆᐃⲆᐃⲆ: "img/day-hand-skin176.png",
    ΔⵠᐃⲆⵠᐃᐃ: "img/night-hand-skin176.png",
    ᐃⵠᐃᐃΔΔⲆ: "img/day-hand-skin177.png",
    ⵠΔⲆΔᐃⲆΔ: "img/night-hand-skin177.png",
    ⲆⲆᐃⲆⵠⲆⵠ: "img/day-hand-skin178.png",
    ⵠΔᐃⲆᐃⵠⲆ: "img/night-hand-skin178.png",
    ΔⲆᐃⵠⵠᐃᐃ: "img/day-hand-skin179.png",
    ⵠⲆᐃΔⲆΔⲆ: "img/night-hand-skin179.png",
    ᐃⲆᐃⵠⵠⲆᐃ: "img/day-hand-skin180.png",
    ⵠⵠᐃᐃΔⲆᐃ: "img/night-hand-skin180.png",
    ΔⵠⲆᐃΔⵠⵠ: "img/day-hand-skin181.png",
    ⵠᐃΔΔΔΔΔ: "img/night-hand-skin181.png",
    ⲆᐃᐃⵠΔⵠᐃ: "img/day-hand-skin182.png",
    ᐃⲆᐃⵠⵠⲆⲆ: "img/night-hand-skin182.png",
    ⲆⵠΔⲆⲆΔΔ: "img/day-hand-skin183.png",
    ⲆⵠΔⵠⲆⵠⵠ: "img/night-hand-skin183.png",
    ⵠⵠⵠΔᐃΔᐃ: "img/day-hand-skin184.png",
    ⲆⲆΔΔⲆᐃⵠ: "img/night-hand-skin184.png",
    ⵠⵠⵠⵠΔΔⲆ: "img/day-hand-skin185.png",
    ΔΔΔⲆΔᐃⲆ: "img/night-hand-skin185.png",
    ᐃΔⲆⲆⵠⲆⲆ: "img/day-hand-skin186.png",
    ⵠΔⲆΔⲆΔᐃ: "img/night-hand-skin186.png",
    ⵠΔΔⵠⵠⵠΔ: "img/day-hand-skin187.png",
    ⵠΔᐃⵠΔᐃⲆ: "img/night-hand-skin187.png",
    ΔΔⲆΔⲆⲆΔ: "img/day-hand-skin188.png",
    ⲆᐃᐃᐃΔᐃⲆ: "img/night-hand-skin188.png",
    ⵠⵠⵠⲆⲆᐃⲆ: "img/day-hand-skin189.png",
    ⲆⲆᐃⵠⲆᐃΔ: "img/night-hand-skin189.png",
    ⵠΔΔᐃΔᐃᐃ: "img/day-hand-skin190.png",
    ⵠΔΔⵠᐃⵠΔ: "img/night-hand-skin190.png",
    ΔⲆΔⵠⵠᐃᐃ: "img/day-hand-skin191.png",
    ᐃⵠⵠᐃΔᐃⵠ: "img/night-hand-skin191.png",
    ⵠΔᐃΔⵠⵠΔ: "img/day-hand-skin192.png",
    ᐃΔⲆⵠⵠΔᐃ: "img/night-hand-skin192.png",
    ᐃᐃⲆᐃᐃⲆⲆ: "img/day-hand-skin193.png",
    ⵠΔⵠⲆⲆᐃⲆ: "img/night-hand-skin193.png",
    ⲆΔⵠⵠⵠⲆⲆ: "img/day-hand-skin194.png",
    ΔⵠⵠⲆᐃⲆΔ: "img/night-hand-skin194.png",
    ⲆⲆⵠᐃᐃᐃⵠ: "img/day-hand-skin195.png",
    ΔΔΔᐃΔⵠΔ: "img/night-hand-skin195.png",
    ᐃⲆΔΔΔⲆΔ: "img/day-hand-skin196.png",
    ΔΔᐃⲆⵠⲆΔ: "img/night-hand-skin196.png",
    ᐃⵠΔⵠⲆⵠⵠ: "img/day-hand-skin197.png",
    ⵠⵠⵠᐃᐃᐃⵠ: "img/night-hand-skin197.png",
    ⲆⲆⵠⲆᐃⵠᐃ: "img/day-hand-skin198.png",
    ⲆᐃⲆⵠⲆΔⲆ: "img/night-hand-skin198.png",
    ᐃⵠΔⵠᐃⲆΔ: "img/day-hand-skin199.png",
    ᐃᐃⵠΔⵠⲆⵠ: "img/night-hand-skin199.png",
    ⵠⵠⲆⵠⵠⲆΔ: "img/day-hand-skin200.png",
    ΔⲆᐃᐃΔⵠⲆ: "img/night-hand-skin200.png",
    ⵠΔΔᐃⲆⲆⵠ: "img/day-hand-skin201.png",
    ΔⵠΔⵠΔᐃⵠ: "img/night-hand-skin201.png",
    ΔΔⲆⵠᐃⲆΔ: "img/day-hand-skin202.png",
    ᐃΔᐃⲆΔⵠᐃ: "img/night-hand-skin202.png",
    Ⲇⵠⵠⵠᐃᐃᐃ: "img/day-hand-skin203.png",
    ΔⵠᐃΔⵠⵠᐃ: "img/night-hand-skin203.png",
    ⲆΔⵠΔΔΔΔ: "img/day-hand-skin204.png",
    ᐃΔⵠᐃΔᐃᐃ: "img/night-hand-skin204.png",
    ΔᐃⵠⲆΔⵠⵠ: "img/day-hand-skin205.png",
    ΔⵠⲆᐃⲆⵠᐃ: "img/night-hand-skin205.png",
    ᐃⲆⲆⵠᐃᐃⲆ: "img/day-hand-skin206.png",
    ⵠⲆⲆⲆⲆᐃᐃ: "img/night-hand-skin206.png",
    ᐃΔᐃⵠΔⵠⵠ: "img/day-hand-skin207.png",
    ⲆΔΔᐃⵠⵠΔ: "img/night-hand-skin207.png",
    ΔΔᐃⵠΔΔⵠ: "img/day-hand-skin208.png",
    ⲆⵠⵠⵠΔΔΔ: "img/night-hand-skin208.png",
    ΔⲆΔᐃⵠΔⲆ: "img/day-hand-skin209.png",
    ⲆΔΔⲆᐃⲆΔ: "img/night-hand-skin209.png",
    ⵠΔⲆⲆᐃΔⵠ: "img/day-hand-skin210.png",
    ⲆⵠⵠᐃᐃⲆᐃ: "img/night-hand-skin210.png",
    ΔᐃⵠᐃⵠⲆⵠ: "img/day-hand-skin211.png",
    ⲆᐃΔΔⵠΔⲆ: "img/night-hand-skin211.png",
    ⵠᐃⵠⲆⲆⵠⲆ: "img/day-hand-skin212.png",
    ᐃⵠⵠⵠⲆⲆⲆ: "img/night-hand-skin212.png",
    ΔΔⲆΔΔᐃᐃ: "img/day-hand-skin213.png",
    ᐃⲆᐃⲆᐃⵠⵠ: "img/night-hand-skin213.png",
    ΔⲆᐃⵠⵠⵠⲆ: "img/day-hand-skin214.png",
    ΔⲆⵠⲆΔⲆᐃ: "img/night-hand-skin214.png",
    ⵠⲆⲆᐃⵠΔΔ: "img/day-bag-star0.png",
    ⲆΔⲆΔⲆⲆΔ: "img/night-bag-star0.png",
    ΔᐃᐃᐃΔⵠⵠ: "img/day-bag0.png",
    ΔⵠⵠⵠⵠᐃΔ: "img/night-bag0.png",
    ΔⵠⲆⲆⲆΔΔ: "img/day-bag1.png",
    ⵠⵠⵠⵠΔⲆⲆ: "img/night-bag1.png",
    ᐃⵠⲆᐃⵠᐃΔ: "img/day-bag2.png",
    ΔᐃΔⲆᐃⵠⲆ: "img/night-bag2.png",
    ᐃᐃⲆΔⵠⵠⵠ: "img/day-bag3.png",
    ΔⲆΔᐃⵠᐃⲆ: "img/night-bag3.png",
    ᐃⲆᐃⲆᐃⵠᐃ: "img/day-bag4.png",
    ⵠΔΔᐃⲆⵠⲆ: "img/night-bag4.png",
    ᐃΔⵠⲆᐃⵠΔ: "img/day-bag5.png",
    ΔⲆΔᐃⲆⲆᐃ: "img/night-bag5.png",
    ⲆⲆⲆᐃⲆΔⲆ: "img/day-bag6.png",
    ΔⲆⵠΔᐃᐃⲆ: "img/night-bag6.png",
    ⵠⵠⵠⲆΔⵠᐃ: "img/day-bag7.png",
    ⵠⵠᐃᐃᐃΔⵠ: "img/night-bag7.png",
    ΔⲆΔᐃᐃΔΔ: "img/day-bag8.png",
    ΔⵠⵠⲆᐃΔᐃ: "img/night-bag8.png",
    ⵠΔᐃⲆΔⵠᐃ: "img/day-bag9.png",
    ᐃⵠⲆⵠⲆΔⵠ: "img/night-bag9.png",
    ⲆⵠᐃᐃⵠΔᐃ: "img/day-bag10.png",
    ᐃΔᐃΔⵠⵠⵠ: "img/night-bag10.png",
    ΔᐃᐃⵠΔᐃⵠ: "img/day-bag11.png",
    ⲆᐃΔᐃⲆᐃᐃ: "img/night-bag11.png",
    ⲆⲆⲆⲆΔΔⵠ: "img/day-bag13.png",
    ⲆⵠΔⵠᐃᐃΔ: "img/night-bag13.png",
    ΔⲆΔⲆⵠⵠⵠ: "img/day-bag14.png",
    ΔΔⵠⲆΔⲆⲆ: "img/night-bag14.png",
    ⵠΔᐃΔⵠⵠᐃ: "img/day-bag16.png",
    ⵠⵠΔⲆⵠⲆᐃ: "img/night-bag16.png",
    ⵠΔΔᐃⵠΔΔ: "img/day-bag17.png",
    ᐃᐃⵠΔⲆᐃΔ: "img/night-bag17.png",
    ΔᐃᐃⵠΔⵠΔ: "img/day-bag18.png",
    ΔⲆⲆⵠⲆⲆΔ: "img/night-bag18.png",
    ΔΔⵠΔⲆⲆⲆ: "img/day-bag19.png",
    ΔⲆⵠΔⲆⵠⲆ: "img/night-bag19.png",
    ⲆᐃⵠᐃΔⲆⲆ: "img/day-bag20.png",
    ⵠⵠⵠΔᐃΔⲆ: "img/night-bag20.png",
    ⲆΔᐃⵠⲆⲆⵠ: "img/day-bag21.png",
    ΔΔⵠⵠᐃⲆΔ: "img/night-bag21.png",
    ΔΔⵠⲆᐃΔΔ: "img/day-bag22.png",
    ⲆⵠΔⵠᐃᐃⵠ: "img/night-bag22.png",
    ᐃᐃⲆⲆⲆⲆⵠ: "img/day-bag23.png",
    ᐃΔΔΔⵠⵠⲆ: "img/night-bag23.png",
    ⵠⵠΔΔⲆⵠᐃ: "img/day-bag24.png",
    ⲆᐃΔᐃⵠⵠⵠ: "img/night-bag24.png",
    ᐃΔΔⵠΔᐃⲆ: "img/day-bag25.png",
    ⵠΔᐃΔⲆⵠΔ: "img/night-bag25.png",
    ⵠΔⵠⵠᐃⲆⲆ: "img/day-bag26.png",
    ⲆΔᐃⲆᐃᐃⲆ: "img/night-bag26.png",
    ⵠΔΔᐃΔΔⲆ: "img/day-bag27.png",
    ᐃᐃⵠⵠΔΔΔ: "img/night-bag27.png",
    ⵠⵠΔⲆⲆᐃᐃ: "img/day-bag28.png",
    ᐃⵠΔⲆⲆᐃΔ: "img/night-bag28.png",
    ⲆⲆΔᐃᐃΔⲆ: "img/day-bag29.png",
    ⲆΔⲆᐃΔⵠᐃ: "img/night-bag29.png",
    ᐃⵠΔⲆᐃⵠⵠ: "img/day-bag30.png",
    ⵠᐃⵠⵠⵠⲆⲆ: "img/night-bag30.png",
    ⵠⲆⲆⲆⵠΔⵠ: "img/day-bag31.png",
    ΔᐃᐃΔⵠⵠⲆ: "img/night-bag31.png",
    ΔᐃᐃⲆᐃⵠᐃ: "img/day-bag32.png",
    ⵠΔⵠⵠΔⲆΔ: "img/night-bag32.png",
    ᐃΔᐃΔⵠΔᐃ: "img/day-bag33.png",
    ΔⲆⲆΔⵠⵠⲆ: "img/night-bag33.png",
    ⲆⵠΔᐃⲆᐃᐃ: "img/day-bag34.png",
    ⲆⲆᐃᐃᐃⵠⲆ: "img/night-bag34.png",
    ⵠⲆΔᐃⵠΔⲆ: "img/day-bag35.png",
    ΔᐃᐃⲆⵠᐃⵠ: "img/night-bag35.png",
    ΔⵠΔᐃΔⲆΔ: "img/day-bag36.png",
    ᐃⵠⵠΔᐃⲆⲆ: "img/night-bag36.png",
    ΔⵠΔⵠΔⲆⵠ: "img/day-bag37.png",
    ⵠᐃᐃⲆᐃΔᐃ: "img/night-bag37.png",
    ᐃΔᐃⲆᐃΔⲆ: "img/day-bag38.png",
    ⵠⲆⵠⵠⵠⵠⲆ: "img/night-bag38.png",
    ΔⲆⵠᐃⲆⲆⲆ: "img/day-bag39.png",
    ⵠᐃⵠⲆⵠⵠⲆ: "img/night-bag39.png",
    ᐃⵠⲆΔΔⵠⲆ: "img/day-bag40.png",
    ᐃⲆΔⵠⲆΔΔ: "img/night-bag40.png",
    ᐃᐃᐃΔⵠᐃΔ: "img/day-bag41.png",
    ⲆᐃⲆᐃⲆⲆΔ: "img/night-bag41.png",
    ⵠΔᐃⵠⵠᐃΔ: "img/day-bag42.png",
    ⵠΔᐃⵠⵠᐃⵠ: "img/night-bag42.png",
    ⵠⵠⵠⲆⵠⵠΔ: "img/day-bag43.png",
    ᐃΔⲆⵠᐃⲆⵠ: "img/night-bag43.png",
    ᐃᐃⲆΔⲆᐃⵠ: "img/day-bag44.png",
    ⲆⲆⵠᐃᐃⲆΔ: "img/night-bag44.png",
    ᐃⵠⵠⵠⵠⲆΔ: "img/day-bag45.png",
    ᐃΔⲆⲆᐃΔᐃ: "img/night-bag45.png",
    ᐃⵠⵠΔᐃΔᐃ: "img/day-bag46.png",
    ΔᐃᐃⲆⵠΔᐃ: "img/night-bag46.png",
    ΔΔΔᐃΔᐃΔ: "img/day-bag47.png",
    ⵠⲆⵠⲆΔⲆΔ: "img/night-bag47.png",
    ⲆᐃΔΔⲆΔΔ: "img/day-bag48.png",
    ⵠⲆΔΔⲆⵠᐃ: "img/night-bag48.png",
    ᐃⵠᐃΔⵠᐃᐃ: "img/day-bag49.png",
    ⲆⲆⵠΔⲆⲆᐃ: "img/night-bag49.png",
    ⲆⵠᐃΔⲆΔᐃ: "img/day-bag50.png",
    ΔⲆΔⵠⵠⵠⵠ: "img/night-bag50.png",
    ᐃᐃⵠⲆⵠⲆⵠ: "img/day-bag51.png",
    ⵠⲆᐃⲆᐃΔⲆ: "img/night-bag51.png",
    ᐃⵠⲆⵠⵠⵠᐃ: "img/day-bag52.png",
    ⵠΔⵠⵠⲆΔⵠ: "img/night-bag52.png",
    ⵠΔⲆΔⵠⵠⵠ: "img/day-bag53.png",
    ⵠⲆⵠⵠᐃⲆⲆ: "img/night-bag53.png",
    ⲆⵠΔⲆΔⵠⲆ: "img/day-bag54.png",
    ⲆᐃᐃΔΔⵠⵠ: "img/night-bag54.png",
    ⵠᐃᐃⲆᐃᐃⲆ: "img/day-bag55.png",
    ΔⵠⲆⲆᐃᐃⲆ: "img/night-bag55.png",
    ⲆᐃᐃᐃⲆΔⲆ: "img/day-bag56.png",
    ⲆΔⲆⲆᐃⵠⵠ: "img/night-bag56.png",
    ⵠΔᐃⵠΔᐃΔ: "img/day-bag57.png",
    ⵠⵠⵠⲆΔᐃᐃ: "img/night-bag57.png",
    ⵠᐃⵠⲆⵠΔⵠ: "img/day-bag58.png",
    ⵠⲆΔΔᐃⲆⲆ: "img/night-bag58.png",
    ⲆᐃⵠᐃΔΔⵠ: "img/day-bag59.png",
    ⲆⲆⵠⲆΔᐃⲆ: "img/night-bag59.png",
    ᐃᐃⵠΔΔΔⵠ: "img/day-bag60.png",
    ᐃᐃᐃⵠⵠΔΔ: "img/night-bag60.png",
    ᐃᐃⵠΔⲆⵠⵠ: "img/day-bag61.png",
    ⲆⲆΔᐃⲆⵠⵠ: "img/night-bag61.png",
    ΔⵠΔⵠⵠⵠᐃ: "img/day-bag62.png",
    ᐃⵠᐃᐃⲆⵠⲆ: "img/night-bag62.png",
    ⵠⲆΔᐃⵠᐃΔ: "img/day-bag63.png",
    ΔⲆⲆᐃⵠᐃⲆ: "img/night-bag63.png",
    ΔⲆΔⲆⲆᐃᐃ: "img/day-bag64.png",
    ⵠⵠΔΔΔᐃⲆ: "img/night-bag64.png",
    ⲆᐃⲆⲆΔⲆⲆ: "img/day-bag65.png",
    ⲆⲆᐃᐃⲆⲆΔ: "img/night-bag65.png",
    ⲆⵠⵠⵠΔⵠⲆ: "img/day-bag66.png",
    ᐃⲆᐃᐃᐃⲆᐃ: "img/night-bag66.png",
    ⲆⵠᐃᐃΔᐃⵠ: "img/day-bag67.png",
    ⵠⲆⲆᐃΔⵠⵠ: "img/night-bag67.png",
    ⲆⲆⲆⲆᐃΔⲆ: "img/day-bag68.png",
    ⲆⵠᐃᐃΔⵠΔ: "img/night-bag68.png",
    ΔΔⲆᐃⲆⵠΔ: "img/day-bag69.png",
    ᐃⵠΔⵠⵠᐃᐃ: "img/night-bag69.png",
    ⵠᐃⵠⲆⵠⵠⵠ: "img/day-bag70.png",
    ⲆⲆᐃⲆⲆⵠⲆ: "img/night-bag70.png",
    ᐃΔΔΔᐃⲆᐃ: "img/day-bag71.png",
    ⵠⲆⵠⲆⵠΔᐃ: "img/night-bag71.png",
    ⵠⲆᐃⲆᐃᐃⲆ: "img/day-bag72.png",
    ⲆⲆⵠⵠⲆⵠΔ: "img/night-bag72.png",
    ⵠΔΔⵠΔⵠΔ: "img/day-bag73.png",
    ᐃᐃⲆᐃᐃⲆΔ: "img/night-bag73.png",
    ⵠΔⲆΔᐃΔⲆ: "img/day-bag74.png",
    ⵠᐃⵠⲆⲆⲆⲆ: "img/night-bag74.png",
    ⲆⲆᐃᐃᐃⵠᐃ: "img/day-bag75.png",
    ΔⵠⲆΔΔΔⵠ: "img/night-bag75.png",
    ΔᐃΔⵠⵠΔⲆ: "img/day-bag76.png",
    ⲆⵠᐃⲆΔᐃΔ: "img/night-bag76.png",
    ᐃΔⵠⲆⵠΔΔ: "img/day-bag77.png",
    ΔⵠᐃᐃⲆΔⵠ: "img/night-bag77.png",
    ᐃΔⲆΔᐃΔⵠ: "img/day-bag78.png",
    ᐃⲆΔⵠΔⲆⵠ: "img/night-bag78.png",
    ᐃⲆⵠⲆΔⲆⲆ: "img/day-bag79.png",
    ⲆⲆΔⵠΔᐃΔ: "img/night-bag79.png",
    ΔΔᐃΔⲆⵠᐃ: "img/day-bag80.png",
    ΔΔᐃⵠΔΔᐃ: "img/night-bag80.png",
    ⲆΔᐃᐃᐃΔᐃ: "img/day-accessory0.png",
    ΔⲆⵠⲆᐃⲆⵠ: "img/day-accessory0-pacques.png",
    ⲆΔΔⲆΔⲆᐃ: "img/night-accessory0-pacques.png",
    ᐃᐃᐃⵠᐃⵠⲆ: "img/day-accessory13.png",
    ᐃⲆⲆⲆⵠⵠΔ: "img/night-accessory13.png",
    ᐃⵠⵠΔⲆⵠΔ: "img/day-accessory14.png",
    ⵠⲆΔᐃᐃⲆᐃ: "img/night-accessory14.png",
    ᐃⲆⲆⲆⵠⲆⵠ: "img/day-accessory15.png",
    ⲆΔᐃⲆᐃⲆΔ: "img/night-accessory15.png",
    ΔⵠΔΔⵠᐃᐃ: "img/day-accessory16.png",
    ⵠΔⲆΔᐃᐃⵠ: "img/night-accessory16.png",
    ⲆⲆⵠⵠΔΔᐃ: "img/day-accessory17.png",
    ⵠΔᐃⵠⵠⵠΔ: "img/day-accessory17.png",
    ⲆᐃΔᐃᐃᐃⵠ: "img/day-accessory19.png",
    ΔⵠΔⵠΔΔΔ: "img/night-accessory19.png",
    ᐃⵠᐃⵠΔᐃⲆ: "img/day-accessory20.png",
    ⲆΔᐃⲆⲆΔΔ: "img/night-accessory20.png",
    ⲆⵠΔⲆⵠΔⲆ: "img/day-accessory21.png",
    ⵠΔᐃⲆⲆⵠⲆ: "img/night-accessory21.png",
    ⲆΔⲆⲆⵠᐃΔ: "img/day-accessory22.png",
    ⵠⲆᐃⵠⵠⵠᐃ: "img/night-accessory22.png",
    ⵠΔⵠᐃⵠⵠΔ: "img/day-accessory23.png",
    ⲆΔᐃⵠᐃⲆⲆ: "img/night-accessory23.png",
    ⵠⵠⲆⵠΔΔΔ: "img/day-accessory24.png",
    ᐃᐃΔᐃⲆΔΔ: "img/night-accessory24.png",
    ⲆⵠΔⲆᐃΔⵠ: "img/day-accessory25.png",
    ⵠⲆΔΔΔⵠⲆ: "img/night-accessory25.png",
    ⲆⵠⵠⲆΔⲆΔ: "img/day-accessory26.png",
    ΔΔΔᐃΔⵠᐃ: "img/night-accessory26.png",
    ⲆⲆΔⲆⲆⲆⲆ: "img/day-accessory27.png",
    ᐃⵠΔⲆⲆⲆⲆ: "img/night-accessory27.png",
    ΔⵠⵠᐃᐃΔⲆ: "img/day-accessory18.png",
    ⲆⵠⲆᐃΔΔᐃ: "img/night-accessory18.png",
    ΔᐃᐃⲆⲆΔᐃ: "img/day-accessory29.png",
    ⲆⲆⲆΔᐃΔᐃ: "img/night-accessory29.png",
    ⲆΔᐃᐃΔᐃΔ: "img/day-accessory30.png",
    ΔᐃⲆⵠᐃΔᐃ: "img/night-accessory30.png",
    ᐃⲆΔⵠⲆᐃⵠ: "img/day-accessory31.png",
    ⵠⵠⵠⲆⲆⲆᐃ: "img/night-accessory31.png",
    ΔⵠᐃΔΔⵠᐃ: "img/day-accessory32.png",
    ⵠⲆⵠⲆⲆⵠⵠ: "img/night-accessory32.png",
    ᐃᐃⲆⲆᐃⵠΔ: "img/day-accessory33.png",
    ⵠᐃⲆⲆᐃⵠⲆ: "img/night-accessory33.png",
    ΔⲆⲆⵠΔΔΔ: "img/day-accessory34.png",
    ⲆⵠΔᐃⵠΔΔ: "img/night-accessory34.png",
    ⵠᐃΔⵠᐃⲆⲆ: "img/day-accessory35.png",
    ⵠΔⵠᐃᐃᐃΔ: "img/night-accessory35.png",
    ⲆⵠⲆᐃⵠΔΔ: "img/day-accessory28.png",
    ⲆᐃⲆΔΔⲆⲆ: "img/night-accessory28.png",
    ΔⵠΔⵠᐃⵠⵠ: "img/day-accessory36.png",
    ΔᐃⵠΔⲆᐃⲆ: "img/night-accessory36.png",
    ᐃΔᐃΔⲆᐃᐃ: "img/day-accessory37.png",
    ΔᐃΔⲆⵠⲆⲆ: "img/night-accessory37.png",
    ⲆⵠⵠΔⲆΔⵠ: "img/day-accessory39.png",
    ᐃⲆΔᐃⲆᐃⵠ: "img/night-accessory39.png",
    ⲆΔΔⲆᐃⲆⵠ: "img/day-accessory40.png",
    ΔⲆΔⲆᐃΔΔ: "img/night-accessory40.png",
    ⲆᐃΔⵠⲆⲆΔ: "img/day-accessory41.png",
    ⲆΔⲆⵠΔΔⲆ: "img/night-accessory41.png",
    ⵠⵠᐃᐃᐃΔⲆ: "img/day-accessory42.png",
    ᐃΔᐃᐃⲆⲆⵠ: "img/night-accessory42.png",
    ΔⲆⵠΔᐃⲆΔ: "img/day-accessory43.png",
    ⲆⵠΔΔΔᐃⵠ: "img/night-accessory43.png",
    ΔᐃᐃΔΔΔΔ: "img/day-accessory44.png",
    ΔⵠⵠⲆⵠⵠΔ: "img/night-accessory44.png",
    ΔᐃⵠΔᐃᐃΔ: "img/day-accessory38.png",
    ⵠᐃᐃⲆᐃᐃⵠ: "img/night-accessory38.png",
    ΔⵠⵠΔⲆΔΔ: "img/day-accessory46.png",
    ᐃᐃΔΔΔΔΔ: "img/night-accessory46.png",
    ᐃᐃΔᐃⵠⲆⵠ: "img/day-accessory47.png",
    ⲆⲆⲆⵠⵠⵠⲆ: "img/night-accessory47.png",
    ᐃⵠⲆᐃᐃⵠΔ: "img/day-accessory48.png",
    ᐃᐃⲆΔΔⲆⲆ: "img/night-accessory48.png",
    ⵠⲆΔΔⲆⵠⵠ: "img/day-accessory49.png",
    ⲆⵠⲆⵠΔΔⲆ: "img/night-accessory49.png",
    ⲆⲆⲆᐃⵠⵠΔ: "img/day-accessory45.png",
    ⲆⵠⵠⵠⲆⲆᐃ: "img/night-accessory45.png",
    ⲆΔⲆΔⵠⵠᐃ: "img/day-accessory50.png",
    ⲆⵠⲆⲆⲆⵠⲆ: "img/night-accessory50.png",
    ⵠᐃΔΔⵠᐃΔ: "img/day-accessory51.png",
    ΔⵠᐃⲆΔᐃⵠ: "img/night-accessory51.png",
    ΔΔⲆⵠᐃΔΔ: "img/day-accessory52.png",
    ⵠᐃⵠⲆΔᐃⲆ: "img/night-accessory52.png",
    ⲆΔᐃΔᐃΔⵠ: "img/day-accessory53.png",
    Ⲇⵠᐃᐃᐃᐃⵠ: "img/night-accessory53.png",
    ᐃΔⲆᐃᐃⲆΔ: "img/day-accessory54.png",
    ᐃΔⲆⵠⲆΔⵠ: "img/night-accessory54.png",
    ᐃΔⲆΔⲆⲆΔ: "img/day-accessory55.png",
    ⵠᐃⲆⲆⲆⲆᐃ: "img/night-accessory55.png",
    ⵠᐃⲆΔΔΔΔ: "img/day-accessory56.png",
    ᐃⲆⵠΔⲆⵠⵠ: "img/night-accessory56.png",
    ⲆΔⵠⵠⵠΔⵠ: "img/day-accessory57.png",
    ΔⵠᐃⵠⲆᐃᐃ: "img/night-accessory57.png",
    ᐃⵠᐃⵠᐃΔᐃ: "img/day-accessory58.png",
    ⵠⲆⲆΔⵠΔΔ: "img/night-accessory58.png",
    ΔⲆⲆᐃⵠⵠⵠ: "img/day-accessory59.png",
    ᐃⲆΔᐃᐃᐃᐃ: "img/night-accessory59.png",
    ⵠᐃⲆΔⵠᐃⵠ: "img/day-accessory60.png",
    ⲆᐃΔⲆⲆⲆⵠ: "img/night-accessory60.png",
    ⵠⵠᐃᐃΔΔⲆ: "img/day-accessory61.png",
    ᐃⲆⲆⵠⲆⲆⵠ: "img/night-accessory61.png",
    ⲆᐃⵠⲆᐃⵠⵠ: "img/day-accessory62.png",
    ᐃⲆⵠⲆⵠⲆⵠ: "img/night-accessory62.png",
    ᐃⵠⲆΔⲆᐃᐃ: "img/day-accessory63.png",
    ΔⲆᐃⲆⵠⲆⲆ: "img/night-accessory63.png",
    ⵠᐃᐃᐃᐃᐃᐃ: "img/day-accessory64.png",
    ⲆⲆⵠᐃΔⲆⲆ: "img/night-accessory64.png",
    Ⲇᐃᐃⵠᐃᐃᐃ: "img/day-accessory65.png",
    ΔⲆⵠΔⵠΔᐃ: "img/night-accessory65.png",
    ⲆᐃΔⵠⲆⵠΔ: "img/day-accessory66.png",
    ᐃᐃᐃⲆⵠᐃⵠ: "img/night-accessory66.png",
    ⵠᐃⵠⲆⵠⲆⵠ: "img/day-accessory67.png",
    ΔⲆΔΔⲆⵠⲆ: "img/night-accessory67.png",
    ᐃΔᐃⵠⵠΔΔ: "img/day-accessory68.png",
    ᐃⵠⵠΔⵠᐃⲆ: "img/night-accessory68.png",
    ⲆᐃᐃⵠΔᐃΔ: "img/day-accessory69.png",
    ⲆᐃᐃⲆⲆⵠⲆ: "img/night-accessory69.png",
    ⵠᐃⵠᐃⲆⲆⵠ: "img/day-accessory70.png",
    ᐃⲆᐃⲆⲆᐃᐃ: "img/night-accessory70.png",
    ΔᐃⲆⲆⵠⵠⵠ: "img/day-accessory71.png",
    ⵠⵠΔᐃⲆⲆΔ: "img/night-accessory71.png",
    ᐃⲆⲆΔⵠΔΔ: "img/day-accessory72.png",
    ᐃⲆΔΔⲆᐃᐃ: "img/night-accessory72.png",
    ᐃᐃⵠⲆⵠᐃⵠ: "img/day-accessory73.png",
    ᐃⲆⲆᐃᐃΔᐃ: "img/night-accessory73.png",
    ᐃΔΔⵠⲆΔᐃ: "img/day-accessory74.png",
    ⵠⲆⵠΔⲆᐃⵠ: "img/night-accessory74.png",
    ⲆᐃᐃΔΔΔᐃ: "img/day-accessory75.png",
    ⲆⲆⲆᐃΔΔⵠ: "img/night-accessory75.png",
    ⲆⵠΔⲆᐃⵠⲆ: "img/day-accessory76.png",
    ⲆⵠᐃᐃᐃⲆⵠ: "img/night-accessory76.png",
    ΔΔⲆΔⲆᐃᐃ: "img/day-accessory77.png",
    ᐃΔⵠᐃΔⲆⲆ: "img/night-accessory77.png",
    ⲆⵠⲆⵠⲆΔⵠ: "img/day-accessory78.png",
    ΔⵠⵠⵠⵠⵠⲆ: "img/night-accessory78.png",
    ⲆⲆᐃⲆΔΔⲆ: "img/day-accessory79.png",
    ᐃⲆⵠⲆⵠΔⵠ: "img/night-accessory79.png",
    ΔⲆᐃᐃⵠΔᐃ: "img/day-accessory80.png",
    ΔⵠⲆⵠⵠⲆⲆ: "img/night-accessory80.png",
    ⲆⵠΔΔⵠᐃᐃ: "img/day-accessory81.png",
    ⲆⵠᐃΔⵠⲆΔ: "img/night-accessory81.png",
    ΔᐃⵠⵠΔⵠᐃ: "img/day-accessory83.png",
    ⲆⲆΔⵠΔᐃᐃ: "img/night-accessory83.png",
    ᐃᐃⵠᐃⵠⲆⵠ: "img/day-accessory84.png",
    ⵠⲆᐃΔⵠⲆΔ: "img/night-accessory84.png",
    ⵠⵠⵠΔΔᐃᐃ: "img/day-accessory85.png",
    ⵠⲆⲆΔⵠⵠᐃ: "img/night-accessory85.png",
    ᐃΔΔⵠⲆⵠⲆ: "img/day-accessory86.png",
    ΔᐃΔΔⲆΔΔ: "img/night-accessory86.png",
    ᐃⲆΔᐃΔⵠⲆ: "img/day-accessory87.png",
    ᐃⲆⲆⵠⲆⵠΔ: "img/night-accessory87.png",
    ⵠⵠΔⵠⲆⲆΔ: "img/day-accessory88.png",
    ΔΔΔΔᐃⵠᐃ: "img/night-accessory88.png",
    ΔⲆⵠⲆⲆⵠⲆ: "img/day-accessory89.png",
    ᐃⵠᐃΔᐃΔⵠ: "img/night-accessory89.png",
    ⲆⲆⵠⵠⵠⲆΔ: "img/day-accessory90.png",
    ⵠⵠΔⲆⲆᐃⵠ: "img/night-accessory90.png",
    ⲆᐃⵠΔᐃⵠⲆ: "img/day-accessory91.png",
    ᐃⲆΔᐃΔⵠᐃ: "img/night-accessory91.png",
    ⲆⵠᐃΔᐃᐃᐃ: "img/day-accessory92.png",
    ⲆⵠⲆⲆⲆᐃⵠ: "img/night-accessory92.png",
    ⲆⵠᐃⲆΔΔᐃ: "img/day-accessory93.png",
    ᐃⲆⵠⵠⲆᐃⲆ: "img/night-accessory93.png",
    ΔΔΔᐃΔⵠⵠ: "img/day-accessory94.png",
    ᐃΔΔⲆΔⵠⵠ: "img/night-accessory94.png",
    ᐃᐃᐃᐃⲆⲆⵠ: "img/day-accessory95.png",
    ΔⲆΔΔⵠⵠΔ: "img/night-accessory95.png",
    ⲆⵠⵠⵠΔⲆΔ: "img/day-accessory96.png",
    ᐃᐃΔΔΔᐃⵠ: "img/night-accessory96.png",
    ΔⲆⵠⵠⲆⵠΔ: "img/day-accessory97.png",
    ⲆΔⵠⲆⲆⲆⲆ: "img/night-accessory97.png",
    ⲆⲆᐃᐃΔⲆⵠ: "img/day-accessory98.png",
    ⵠⲆΔΔᐃⲆⵠ: "img/night-accessory98.png",
    ᐃⲆΔᐃⵠΔΔ: "img/day-accessory99.png",
    ᐃⲆⵠᐃⵠⵠΔ: "img/night-accessory99.png",
    ᐃⲆⵠⲆⲆⵠΔ: "img/day-accessory100.png",
    ⵠΔⵠⵠΔΔΔ: "img/night-accessory100.png",
    ᐃᐃⵠΔΔΔΔ: "img/day-accessory101.png",
    ΔⵠⲆⲆΔⵠᐃ: "img/night-accessory101.png",
    ΔⵠⲆΔⵠⵠⵠ: "img/day-accessory102.png",
    ᐃΔᐃΔΔᐃⲆ: "img/night-accessory102.png",
    ᐃᐃⲆΔΔⵠᐃ: "img/day-accessory103.png",
    ⵠᐃΔΔᐃⲆⵠ: "img/night-accessory103.png",
    ΔᐃⲆⵠⲆⲆᐃ: "img/day-accessory104.png",
    ᐃⲆΔᐃΔΔⲆ: "img/night-accessory104.png",
    ⵠΔᐃⵠΔⲆᐃ: "img/day-accessory105.png",
    ΔⲆⲆⵠᐃⲆᐃ: "img/night-accessory105.png",
    ΔΔⲆᐃⵠⲆᐃᐃⵠ: "img/day-accessory106.png",
    ⵠΔΔⲆⵠⵠⲆᐃΔ: "img/night-accessory106.png",
    ᐃᐃΔΔᐃⵠⵠᐃᐃ: "img/day-accessory107.png",
    ⲆΔᐃⵠΔᐃΔΔᐃ: "img/night-accessory107.png",
    ΔΔᐃⲆⵠⲆᐃ: "img/day-accessory82.png",
    ᐃⲆᐃΔⵠΔⵠ: "img/night-accessory82.png",
    ᐃⵠΔⲆᐃⵠΔ: "img/day-book0.png",
    ΔⲆⲆΔᐃΔΔ: "img/night-book0.png",
    ΔΔΔⲆⵠⲆᐃ: "img/day-book1.png",
    ⲆⵠᐃⲆᐃⲆᐃ: "img/night-book1.png",
    ΔᐃᐃⲆᐃΔΔ: "img/day-book2.png",
    ⲆⵠⵠΔᐃⵠᐃ: "img/night-book2.png",
    ΔΔⲆΔⵠΔⵠ: "img/day-book3.png",
    Ⲇⵠⵠᐃᐃᐃᐃ: "img/night-book3.png",
    ⲆⲆⲆⲆᐃⵠΔ: "img/day-book4.png",
    ᐃⲆⵠⵠΔⵠⵠ: "img/night-book4.png",
    ᐃⵠᐃᐃᐃⲆⲆ: "img/day-book5.png",
    ⲆⵠⵠⲆΔΔᐃ: "img/night-book5.png",
    ᐃⵠΔⲆᐃᐃΔ: "img/day-book6.png",
    ΔⵠΔᐃᐃⵠᐃ: "img/night-book6.png",
    ΔⵠᐃΔⵠΔᐃ: "img/day-book7.png",
    ΔΔⲆΔⲆᐃΔ: "img/night-book7.png",
    ᐃΔⲆⵠⵠΔⵠ: "img/day-book8.png",
    ᐃᐃⵠⵠⵠⵠⵠ: "img/night-book8.png",
    ⲆᐃΔᐃΔΔⲆ: "img/day-book9.png",
    ΔⲆΔΔᐃΔΔ: "img/night-book9.png",
    ᐃΔᐃΔᐃⲆⲆ: "img/day-book10.png",
    ⲆⵠΔΔⲆᐃΔ: "img/night-book10.png",
    ΔⵠⲆΔⵠΔΔ: "img/day-book11.png",
    ⵠⵠⵠᐃⲆΔΔ: "img/night-book11.png",
    ⲆⵠΔᐃᐃⵠⲆ: "img/day-book12.png",
    ΔⵠᐃⵠΔⵠᐃ: "img/night-book12.png",
    ⵠΔⵠⵠΔΔⵠ: "img/day-book13.png",
    ΔⲆⵠⵠᐃΔᐃ: "img/night-book13.png",
    ΔΔⲆⵠⵠⲆᐃ: "img/day-book14.png",
    ⲆΔΔᐃΔⵠᐃ: "img/night-book14.png",
    ⵠΔⵠΔⵠⲆᐃ: "img/day-book15.png",
    ᐃⲆⲆᐃⵠⵠⲆ: "img/night-book15.png",
    ΔⵠᐃⲆⵠΔⵠ: "img/day-book16.png",
    ⲆⲆⲆⲆⵠⵠⲆ: "img/night-book16.png",
    ⲆᐃⵠⲆⵠΔᐃ: "img/day-book17.png",
    ⵠΔΔⵠⲆᐃⲆ: "img/night-book17.png",
    ⲆⵠⵠᐃΔⵠᐃ: "img/day-book18.png",
    ⲆΔⲆⲆⵠⵠⲆ: "img/night-book18.png",
    ΔⲆᐃⲆΔᐃΔ: "img/day-book19.png",
    ⲆΔΔⲆᐃᐃᐃ: "img/night-book19.png",
    ᐃⵠᐃⲆᐃⵠΔ: "img/day-book20.png",
    ⲆⲆⲆⵠᐃᐃⲆ: "img/night-book20.png",
    ᐃⲆⵠⲆᐃⵠΔ: "img/day-book21.png",
    ⲆᐃΔⲆΔⲆⲆ: "img/night-book21.png",
    ⵠΔⲆⲆⵠΔⲆ: "img/day-book22.png",
    ΔⵠᐃΔⵠⵠΔ: "img/night-book22.png",
    ᐃⵠΔⲆᐃΔⲆ: "img/day-book23.png",
    ᐃⵠⲆΔΔᐃⲆ: "img/night-book23.png",
    ⲆΔⵠⵠᐃⲆΔ: "img/day-book24.png",
    ⲆⵠⵠΔᐃᐃⵠ: "img/night-book24.png",
    ΔⲆᐃᐃⲆᐃΔ: "img/day-book25.png",
    ᐃΔⵠⲆΔⵠⵠ: "img/night-book25.png",
    ᐃⲆⲆᐃᐃⵠᐃ: "img/day-book26.png",
    ⲆΔᐃⲆΔᐃᐃ: "img/night-book26.png",
    ⵠᐃΔⲆΔⲆΔ: "img/day-book27.png",
    ᐃⵠⲆⵠⵠΔⵠ: "img/night-book27.png",
    ⵠᐃΔΔⵠⵠⵠ: "img/day-book28.png",
    ΔⲆⵠᐃⲆⵠⵠ: "img/night-book28.png",
    ⵠΔⵠᐃᐃⵠⵠ: "img/day-book29.png",
    ΔⲆᐃⲆⵠᐃΔ: "img/night-book29.png",
    ⲆΔΔΔᐃΔΔ: "img/day-book30.png",
    ΔⵠⵠⲆⵠᐃⵠ: "img/night-book30.png",
    ΔⲆΔΔⵠⲆΔ: "img/day-book31.png",
    ⲆΔⲆⵠⲆΔᐃ: "img/night-book31.png",
    ⲆⵠΔΔⵠⲆⲆ: "img/day-book32.png",
    ΔⵠᐃᐃᐃⵠΔ: "img/night-book32.png",
    ⲆᐃⲆⵠΔⲆᐃ: "img/day-book33.png",
    ⵠⵠⲆⵠᐃᐃⲆ: "img/night-book33.png",
    ΔⵠᐃᐃᐃⵠⲆ: "img/day-book34.png",
    ⲆⲆᐃⲆΔⲆᐃ: "img/night-book34.png",
    ⲆⵠᐃⵠⲆⵠⵠ: "img/day-book35.png",
    ΔΔᐃⵠΔⵠⲆ: "img/night-book35.png",
    ᐃⵠⵠⲆᐃⵠⲆ: "img/day-book36.png",
    ᐃⵠΔΔⲆⲆΔ: "img/night-book36.png",
    ΔⲆⵠΔΔⵠⲆᐃᐃ: "img/day-book37.png",
    ΔⲆⲆⵠⲆⲆⵠᐃΔ: "img/night-book37.png",
    ᐃⵠΔⵠⲆⲆⲆ: "img/day-book38.png",
    ΔΔⵠⵠΔΔᐃ: "img/night-book38.png",
    ⵠᐃⵠⵠΔΔⲆ: "img/day-book39.png",
    ᐃΔΔⲆⵠⲆⲆ: "img/night-book39.png",
    ΔⵠΔᐃΔⲆⲆ: "img/day-book40.png",
    ⲆᐃΔᐃΔᐃΔ: "img/night-book40.png",
    ⲆⲆⵠⲆᐃᐃⵠ: "img/day-book41.png",
    ᐃⵠⲆᐃⵠⵠⵠ: "img/night-book41.png",
    ⲆΔΔⵠⵠΔΔ: "img/day-book42.png",
    ⲆⵠΔⲆᐃᐃᐃ: "img/night-book42.png",
    ᐃΔⲆⲆᐃⲆⲆ: "img/day-book43.png",
    ΔΔΔⲆⲆΔⲆ: "img/night-book43.png",
    ⲆⵠⵠⲆⵠΔⲆ: "img/day-book44.png",
    ᐃⲆΔᐃⲆⲆⵠ: "img/night-book44.png",
    Δᐃⵠᐃᐃᐃⵠ: "img/day-book45.png",
    ⵠⲆⵠⲆᐃΔᐃ: "img/night-book45.png",
    ᐃᐃᐃΔⵠΔᐃ: "img/day-book46.png",
    ⵠΔΔΔΔⲆΔ: "img/night-book46.png",
    ⲆⵠᐃⲆᐃΔⵠ: "img/day-book47.png",
    ΔⲆΔᐃᐃⵠⵠ: "img/night-book47.png",
    ᐃⵠΔΔΔᐃᐃ: "img/day-book48.png",
    ΔᐃⵠⲆᐃⲆⵠ: "img/night-book48.png",
    ⵠΔⲆⵠᐃΔⲆ: "img/day-book49.png",
    ⲆⲆΔΔΔΔⲆ: "img/night-book49.png",
    ⲆⵠΔΔⵠⲆΔ: "img/day-book50.png",
    ⵠⵠᐃΔⲆⵠⵠ: "img/night-book50.png",
    ΔⲆⵠΔⲆⲆΔ: "img/day-crate1.png",
    ΔⵠΔⵠⲆΔⵠ: "img/night-crate1.png",
    ⵠᐃⵠⲆⲆⵠⵠ: "img/day-crate2.png",
    ⲆΔⲆⵠΔΔⵠ: "img/night-crate2.png",
    ⲆⵠⲆᐃΔⵠᐃ: "img/day-crate3.png",
    ᐃⲆⲆⲆⲆⲆⲆ: "img/night-crate3.png",
    ᐃⵠᐃⵠᐃⲆⲆ: "img/day-crate4.png",
    ᐃⲆⵠᐃᐃⲆⵠ: "img/night-crate4.png",
    ⲆΔΔⲆΔᐃⵠ: "img/day-crate5.png",
    ⵠⲆⵠᐃΔΔⵠ: "img/night-crate5.png",
    ⵠᐃⵠⲆⵠⵠΔ: "img/day-crate6.png",
    ⲆΔΔⲆⲆᐃᐃ: "img/night-crate6.png",
    ΔⲆΔⵠΔΔΔ: "img/day-crate7.png",
    ᐃΔᐃⲆⲆⲆΔ: "img/night-crate7.png",
    ⵠⲆᐃᐃⲆⲆⵠ: "img/day-crate8.png",
    ᐃΔⲆᐃⵠⲆⲆ: "img/night-crate8.png",
    ΔᐃΔΔⲆⲆΔ: "img/day-crate9.png",
    ⲆⲆᐃΔᐃΔⵠ: "img/night-crate9.png",
    ΔΔⵠᐃⵠⵠᐃ: "img/day-crate10.png",
    ΔΔⲆⵠⵠⵠⵠ: "img/night-crate10.png",
    ᐃᐃⵠΔⲆΔⲆ: "img/day-crate11.png",
    ΔⵠⲆⲆᐃⵠΔ: "img/night-crate11.png",
    ⲆⵠⵠᐃⵠᐃⲆ: "img/day-crate12.png",
    ⲆⵠⵠΔⵠᐃⵠ: "img/night-crate12.png",
    ΔⵠⲆΔΔⵠᐃ: "img/day-crate13.png",
    ᐃⲆΔⵠⵠᐃⵠ: "img/night-crate13.png",
    ΔⲆⵠΔᐃΔΔ: "img/day-crate14.png",
    ᐃⵠᐃⵠΔⲆᐃ: "img/night-crate14.png",
    ⵠᐃⲆⲆΔΔΔ: "img/day-crate15.png",
    ⵠⵠⵠᐃⵠⵠᐃ: "img/night-crate15.png",
    ⵠⲆᐃⵠⲆⵠⲆ: "img/day-crate16.png",
    ᐃᐃΔⵠⲆΔⲆ: "img/night-crate16.png",
    ᐃⵠᐃⵠΔⲆⵠ: "img/day-crate17.png",
    ᐃᐃᐃⵠⲆⵠⲆ: "img/night-crate17.png",
    ⵠᐃΔⲆⲆᐃⵠ: "img/day-crate18.png",
    ⵠⵠᐃⲆΔⵠΔ: "img/night-crate18.png",
    ⵠᐃᐃⵠⲆⵠⲆ: "img/day-crate19.png",
    ⲆⲆⵠⵠᐃⵠⵠ: "img/night-crate19.png",
    ⲆⵠΔΔⲆΔⵠ: "img/day-crate20.png",
    ΔᐃΔⵠᐃⵠΔ: "img/night-crate20.png",
    ΔΔⲆⲆⵠᐃⵠ: "img/day-crate21.png",
    ⲆⲆⲆᐃⵠⵠⲆ: "img/night-crate21.png",
    ⵠⲆΔᐃᐃᐃⲆ: "img/day-crate22.png",
    ΔΔⲆⵠᐃⲆⵠ: "img/night-crate22.png",
    ᐃᐃⲆΔΔΔⲆ: "img/day-crate23.png",
    ᐃΔⲆⵠᐃⲆⲆ: "img/night-crate23.png",
    ᐃᐃⵠΔⵠΔΔ: "img/day-crate24.png",
    ⲆΔᐃⲆⲆⲆΔ: "img/night-crate24.png",
    ⲆⵠΔΔⲆⲆⵠ: "img/day-crate25.png",
    ⵠᐃᐃⵠᐃⲆⵠ: "img/night-crate25.png",
    ᐃᐃⲆⲆΔΔᐃ: "img/day-crate26.png",
    ΔᐃⵠⲆΔⵠᐃ: "img/night-crate26.png",
    ΔⵠΔΔΔᐃⲆ: "img/day-crate27.png",
    ᐃᐃᐃΔᐃⲆΔ: "img/night-crate27.png",
    ΔᐃᐃⵠᐃⵠΔ: "img/day-crate28.png",
    ⵠⲆⵠⲆᐃⵠΔ: "img/night-crate28.png",
    ⵠΔⵠⵠⲆⲆᐃ: "img/day-crate29.png",
    ⲆⲆⵠΔΔΔⵠ: "img/night-crate29.png",
    ⵠⵠᐃⵠᐃⲆᐃ: "img/day-crate30.png",
    ⲆΔⵠᐃᐃΔⵠ: "img/night-crate30.png",
    ⲆᐃⵠᐃᐃᐃΔ: "img/day-crate31.png",
    ᐃⲆⲆᐃΔᐃᐃ: "img/night-crate31.png",
    ΔᐃⲆΔⲆΔⲆ: "img/day-crate32.png",
    ⲆⵠΔΔΔΔΔ: "img/night-crate32.png",
    ᐃⵠᐃⵠᐃⵠⲆ: "img/day-crate33.png",
    ⲆⵠⵠᐃⵠⲆΔ: "img/night-crate33.png",
    ⵠᐃⲆⲆⵠⲆⲆ: "img/day-crate34.png",
    ⲆΔΔᐃΔΔᐃ: "img/night-crate34.png",
    ⵠⵠΔⵠⵠⲆΔ: "img/day-crate35.png",
    ⵠᐃᐃΔⵠⲆⲆ: "img/night-crate35.png",
    ΔⵠⵠⲆΔⵠᐃ: "img/day-crate36.png",
    ᐃᐃᐃⲆΔᐃΔ: "img/night-crate36.png",
    ΔⵠⵠⲆΔΔⵠ: "img/day-crate37.png",
    ⲆᐃΔⵠⲆⵠᐃ: "img/night-crate37.png",
    ⲆⵠᐃΔᐃⵠⲆ: "img/day-crate38.png",
    ⵠⲆⵠⵠⲆᐃᐃ: "img/night-crate38.png",
    ΔⵠᐃⵠΔΔⲆ: "img/day-crate39.png",
    ᐃᐃⲆᐃⲆΔⵠ: "img/night-crate39.png",
    Ⲇᐃᐃⵠⵠⵠᐃ: "img/day-crate40.png",
    ⲆⵠᐃΔⵠⵠⵠ: "img/night-crate40.png",
    ᐃⲆᐃΔⲆⲆᐃ: "img/day-crate41.png",
    ⵠⵠⲆⲆⲆᐃᐃ: "img/night-crate41.png",
    ⵠⲆᐃᐃⵠᐃΔ: "img/day-crate42.png",
    ⵠⵠⵠᐃⲆⲆⵠ: "img/night-crate42.png",
    ᐃⵠⲆΔⲆᐃⲆ: "img/day-crate43.png",
    ᐃⵠⵠΔⵠΔⲆ: "img/night-crate43.png",
    ⲆᐃΔⲆⵠΔⵠ: "img/day-crate44.png",
    ⵠᐃⵠΔⵠΔᐃ: "img/night-crate44.png",
    ΔΔⵠⵠΔⲆⵠ: "img/day-crate45.png",
    ᐃⲆᐃᐃⵠⵠΔ: "img/night-crate45.png",
    ᐃΔΔⵠⵠⵠⲆ: "img/day-crate46.png",
    ΔᐃⲆΔⲆⲆⵠ: "img/night-crate46.png",
    ΔᐃⵠⲆᐃᐃⵠ: "img/day-crate47.png",
    ⵠᐃⵠᐃⲆⲆΔ: "img/night-crate47.png",
    ⵠΔΔΔΔᐃΔ: "img/day-crate48.png",
    ⵠᐃᐃΔⵠᐃⵠ: "img/night-crate48.png",
    ᐃΔᐃⲆⲆⵠⲆ: "img/day-crate49.png",
    ΔᐃⵠᐃᐃΔΔ: "img/night-crate49.png",
    ⵠΔᐃΔⵠΔᐃ: "img/day-crate50.png",
    ⵠⲆⵠⲆΔΔⵠ: "img/night-crate50.png",
    ΔΔᐃⲆⵠΔⵠ: "img/day-crate51.png",
    ⵠⵠⲆΔⲆⵠΔ: "img/night-crate51.png",
    ΔΔΔᐃⲆⵠᐃ: "img/day-crate52.png",
    ⵠΔΔΔΔΔⵠ: "img/night-crate52.png",
    ᐃᐃⲆᐃΔΔΔ: "img/day-crate53.png",
    ᐃᐃΔᐃΔⲆᐃ: "img/night-crate53.png",
    ΔⲆᐃⵠΔⵠᐃ: "img/day-crate54.png",
    ᐃⵠⵠⵠⲆᐃᐃ: "img/night-crate54.png",
    ᐃᐃⵠⲆΔⲆⵠ: "img/day-crate55.png",
    ᐃⵠⵠᐃⲆⲆⵠ: "img/night-crate55.png",
    ᐃⲆᐃᐃᐃΔᐃ: "img/day-crate56.png",
    ᐃⵠⲆᐃΔⲆΔ: "img/night-crate56.png",
    ΔⵠᐃΔⲆⵠⵠ: "img/day-crate57.png",
    ΔΔⵠᐃⵠⲆⲆ: "img/night-crate57.png",
    ⵠᐃΔΔᐃⵠᐃ: "img/day-crate58.png",
    ΔᐃᐃⲆⲆΔΔ: "img/night-crate58.png",
    ⵠᐃᐃⵠᐃⲆⲆ: "img/day-crate59.png",
    ᐃⵠⵠⵠⲆⲆΔ: "img/night-crate59.png",
    ᐃⵠⵠΔᐃΔⵠ: "img/day-crate60.png",
    ⵠᐃᐃᐃΔΔⵠ: "img/night-crate60.png",
    ᐃᐃᐃᐃᐃᐃⲆ: "img/day-crate61.png",
    ΔⲆΔΔᐃⵠΔ: "img/night-crate61.png",
    ⵠⵠΔᐃⲆΔΔ: "img/day-crate62.png",
    ⵠⲆⵠᐃΔᐃΔ: "img/night-crate62.png",
    ΔΔᐃⲆΔⵠΔ: "img/day-crate63.png",
    ᐃⲆᐃΔⵠΔΔ: "img/night-crate63.png",
    ⲆΔΔᐃⲆⵠⲆ: "img/day-crate64.png",
    ᐃΔᐃᐃᐃⲆΔ: "img/night-crate64.png",
    ΔΔⵠᐃⲆΔⲆ: "img/day-crate65.png",
    ΔᐃᐃΔΔⵠⵠ: "img/night-crate65.png",
    ΔΔⵠⲆᐃΔᐃ: "img/day-crate66.png",
    ⲆⲆⲆⵠᐃΔΔ: "img/night-crate66.png",
    ⲆⲆⵠⲆⲆΔΔ: "img/day-crate67.png",
    ⲆᐃⵠⵠⵠⲆΔ: "img/night-crate67.png",
    ΔⵠᐃⵠΔΔⵠ: "img/day-crate68.png",
    ⵠᐃΔᐃⵠⲆⲆ: "img/night-crate68.png",
    ΔⵠⲆⵠᐃⵠΔ: "img/day-crate69.png",
    ᐃⲆᐃΔΔⵠⲆ: "img/night-crate69.png",
    ᐃⲆⵠΔⵠᐃᐃ: "img/day-crate70.png",
    ΔΔΔᐃⲆΔⵠ: "img/night-crate70.png",
    ᐃΔᐃⲆᐃⲆⵠ: "img/day-crate71.png",
    ᐃⲆᐃᐃⲆⲆⲆ: "img/night-crate71.png",
    ᐃⵠⲆᐃΔΔⲆ: "img/day-crate72.png",
    ⵠⵠⲆΔⲆΔⲆ: "img/night-crate72.png",
    ᐃᐃᐃΔΔⲆⲆ: "img/day-crate73.png",
    ᐃⲆⲆⲆⵠΔᐃ: "img/night-crate73.png",
    ⲆⲆⲆⲆⵠΔΔ: "img/day-crate74.png",
    ᐃᐃⵠⲆᐃⲆΔ: "img/night-crate74.png",
    ⵠⲆⵠⵠᐃᐃⲆ: "img/day-crate75.png",
    ⵠᐃᐃⵠⵠⵠⲆ: "img/night-crate75.png",
    ⲆᐃⲆⵠⵠⲆⲆ: "img/day-crate76.png",
    ⵠᐃᐃᐃⲆᐃᐃ: "img/night-crate76.png",
    ᐃᐃᐃⲆⵠᐃⲆ: "img/day-crate77.png",
    ⵠᐃⲆⵠⵠᐃΔ: "img/night-crate77.png",
    ΔⵠⵠᐃⲆΔᐃ: "img/day-crate78.png",
    ΔΔⲆΔΔⵠⵠ: "img/night-crate78.png",
    ⲆᐃΔⵠⵠΔΔ: "img/day-crate79.png",
    ⲆᐃⵠΔⵠΔΔ: "img/night-crate79.png",
    ᐃΔᐃᐃᐃⵠᐃ: "img/day-herb0.png",
    ⵠⵠⵠᐃΔⵠⲆ: "img/day-herb1.png",
    ΔⲆⲆⵠⲆⲆⵠ: "img/day-herb2.png",
    ᐃⵠⲆᐃⵠⵠᐃ: "img/day-herb3.png",
    ⲆΔᐃᐃΔⵠΔ: "img/day-herb4.png",
    ΔᐃⵠⲆΔΔⲆ: "img/day-herb5.png",
    ΔⵠΔΔⲆΔⵠ: "img/day-herb6.png",
    ΔⵠⵠⵠΔⲆᐃ: "img/day-herb7.png",
    ⲆⲆⵠΔᐃⲆΔ: "img/day-herb8.png",
    ᐃⵠⵠⲆⲆⵠⵠ: "img/day-herb9.png",
    ΔⲆⲆᐃⲆᐃᐃ: "img/day-herb10.png",
    ⵠⲆⲆΔΔⵠᐃ: "img/day-herb11.png",
    ᐃⵠΔᐃⲆΔΔ: "img/day-herb12.png",
    ⵠᐃᐃᐃⲆΔΔ: "img/day-herb13.png",
    ⲆⲆΔᐃⲆⲆⲆ: "img/day-herb14.png",
    ᐃⵠⲆᐃⲆΔᐃ: "img/day-herb15.png",
    ⵠⵠⵠᐃⵠᐃΔ: "img/day-shell0.png",
    ΔⵠΔΔΔΔⵠ: "img/day-shell1.png",
    ⲆᐃΔΔⵠⲆᐃ: "img/day-shell2.png",
    ⲆⵠⲆⵠΔⲆⵠ: "img/day-leaf1.png",
    ⵠΔⲆᐃΔⵠᐃ: "img/day-leaf2.png",
    ΔΔΔᐃⲆⵠΔ: "img/day-leaf3.png",
    ⲆⲆⲆⲆΔⲆⲆ: "img/day-leaf4.png",
    ⲆᐃΔᐃΔΔᐃ: "img/day-leaf5.png",
    ⲆⵠⲆᐃᐃᐃΔ: "img/day-leaf6.png",
    ⲆΔⵠᐃⵠⵠⵠ: "img/day-leaf7.png",
    ⲆΔᐃⲆⵠⲆⲆ: "img/day-leaf8.png",
    ᐃⲆΔᐃᐃᐃⲆ: "img/day-rock0.png",
    ᐃⵠⵠΔᐃⵠⲆ: "img/day-rock1.png",
    ⵠⲆⲆΔⵠⲆⵠ: "img/day-rock2.png",
    ⵠΔⵠΔⵠᐃΔ: "img/day-rock3.png",
    ⵠⵠⲆᐃⲆⵠΔ: "img/day-rock4.png",
    ΔᐃΔⲆⲆⵠΔ: "img/day-rock5.png",
    ΔΔⲆⲆⵠⵠΔ: "img/day-rock6.png",
    ᐃⲆΔᐃⵠⲆⵠ: "img/day-rock7.png",
    ⲆΔΔⵠΔΔᐃ: "img/day-rock8.png",
    ⵠΔΔᐃᐃᐃᐃ: "img/day-rock9.png",
    ΔⲆⵠᐃᐃⲆⲆ: "img/day-rock10.png",
    ⲆⵠⵠᐃΔⵠⲆ: "img/day-rock11.png",
    ⲆΔⵠᐃⵠⵠᐃ: "img/day-rock12.png",
    ⲆⵠᐃⲆⵠⲆΔ: "img/day-rock13.png",
    ΔΔΔᐃΔΔⲆ: "img/day-flower1.png",
    ᐃⲆⵠⵠᐃⲆⵠ: "img/day-flower2.png",
    ⵠΔⲆⵠᐃⲆΔ: "img/day-flower3.png",
    ⲆΔⵠᐃⵠᐃⲆ: "img/day-flower4.png",
    ΔⲆⵠⲆⵠⲆⲆ: "img/day-flower5.png",
    ΔⵠᐃᐃⲆΔⲆ: "img/day-flower6.png",
    ⵠⵠᐃⲆⲆΔΔ: "img/day-flower7.png",
    ⵠᐃⲆᐃⲆΔᐃ: "img/day-flower8.png",
    ⲆⵠᐃⲆᐃᐃᐃ: "img/day-flower9.png",
    ᐃⵠᐃⵠⵠᐃΔ: "img/day-herb16.png",
    ΔⵠᐃΔΔΔⲆ: "img/day-herb17.png",
    ⵠΔⵠⲆΔⲆⵠ: "img/day-herb18.png",
    ᐃⵠⲆΔᐃⵠⵠ: "img/day-herb19.png",
    ⲆΔᐃⵠⲆⲆⲆ: "img/day-herb20.png",
    ⵠᐃⲆΔⲆᐃΔ: "img/day-herb21.png",
    ⲆᐃΔⲆΔⲆⵠ: "img/night-herb0.png",
    ⵠⵠⵠᐃⲆΔⵠ: "img/night-herb1.png",
    ⵠⵠⲆᐃᐃᐃᐃ: "img/night-herb2.png",
    ᐃΔᐃⲆⲆⲆᐃ: "img/night-herb3.png",
    ΔⵠⵠΔⵠⲆⲆ: "img/night-herb4.png",
    ⲆΔⵠⲆΔⲆⲆ: "img/night-herb5.png",
    ⲆⵠⵠⵠΔᐃᐃ: "img/night-herb6.png",
    ⲆᐃⲆᐃⲆΔⲆ: "img/night-herb7.png",
    ⲆΔΔΔⲆⵠᐃ: "img/night-herb8.png",
    ΔᐃΔᐃΔⵠⵠ: "img/night-herb9.png",
    ᐃⵠᐃᐃᐃᐃᐃ: "img/night-herb10.png",
    ΔΔⲆΔⲆΔᐃ: "img/night-herb11.png",
    ΔᐃΔΔᐃⲆⲆ: "img/night-herb12.png",
    ⲆΔⲆⲆⲆΔᐃ: "img/night-herb13.png",
    ᐃⲆⵠⵠⲆᐃⵠ: "img/night-herb14.png",
    ᐃᐃᐃⲆⵠⲆⵠ: "img/night-herb15.png",
    ᐃⵠᐃⵠᐃᐃᐃ: "img/night-shell0.png",
    ᐃⲆᐃⵠᐃΔΔ: "img/night-shell1.png",
    ΔᐃᐃᐃⵠΔᐃ: "img/night-shell2.png",
    ⵠⲆⵠⲆᐃⲆⲆ: "img/night-leaf1.png",
    ΔⲆᐃΔⵠⵠᐃ: "img/night-leaf2.png",
    ⵠΔⵠⲆΔᐃⲆ: "img/night-leaf3.png",
    ⲆᐃΔᐃⲆⲆΔ: "img/night-leaf4.png",
    ᐃⵠΔⲆⵠΔⵠ: "img/night-leaf5.png",
    ᐃⵠᐃⲆᐃⲆΔ: "img/night-leaf6.png",
    ΔᐃⲆᐃⲆᐃⲆ: "img/night-leaf7.png",
    ⲆⲆⵠⵠΔⲆᐃ: "img/night-leaf8.png",
    ᐃⵠⲆⲆⲆⵠΔ: "img/night-rock0.png",
    ⵠⵠⲆⲆⵠᐃⵠ: "img/night-rock1.png",
    ΔⲆⵠΔⲆΔᐃ: "img/night-rock2.png",
    ᐃΔᐃᐃΔⲆΔ: "img/night-rock3.png",
    ⲆᐃⲆΔⲆᐃⲆ: "img/night-rock4.png",
    ᐃⲆΔⲆᐃΔⵠ: "img/night-rock5.png",
    ⲆⲆΔΔⵠΔᐃ: "img/night-rock6.png",
    ⵠᐃⲆᐃᐃΔⲆ: "img/night-rock7.png",
    ᐃᐃᐃᐃΔᐃⵠ: "img/night-rock8.png",
    ᐃᐃⵠⵠΔⲆᐃ: "img/night-rock9.png",
    ΔⵠⵠᐃΔᐃᐃ: "img/night-rock10.png",
    ΔΔⲆᐃΔⵠⵠ: "img/night-rock11.png",
    ᐃⲆᐃᐃΔᐃⵠ: "img/night-rock12.png",
    ⲆⲆⵠⲆⵠⲆⵠ: "img/night-rock13.png",
    ᐃΔⵠⲆᐃᐃᐃ: "img/night-flower1.png",
    ⵠⲆΔΔᐃⵠᐃ: "img/night-flower2.png",
    ⲆΔΔⵠⵠᐃᐃ: "img/night-flower3.png",
    ΔⲆᐃⲆⲆⲆΔ: "img/night-flower4.png",
    ⵠⵠᐃᐃᐃΔᐃ: "img/night-flower5.png",
    ⵠᐃΔᐃⵠᐃⲆ: "img/night-flower6.png",
    ΔᐃⲆᐃⵠΔⵠ: "img/night-flower7.png",
    ΔᐃΔᐃⲆⲆⵠ: "img/night-flower8.png",
    ᐃⵠᐃΔⲆᐃⵠ: "img/night-flower9.png",
    ⵠⵠΔΔᐃΔΔ: "img/night-herb16.png",
    ᐃΔⲆΔⲆΔᐃ: "img/night-herb17.png",
    ⲆΔᐃⵠΔΔΔ: "img/night-herb18.png",
    ⲆᐃΔᐃⵠⵠᐃ: "img/night-herb19.png",
    ⲆΔΔⵠⵠⵠᐃ: "img/night-herb20.png",
    ⲆⲆΔⵠⲆᐃⲆ: "img/night-herb21.png",
    ᐃⲆᐃⵠⲆΔᐃ: "img/day-river000-010-000.png",
    ΔⲆⲆⲆᐃᐃⲆ: "img/day-river000-010-010.png",
    ⲆᐃⵠΔᐃⵠⵠ: "img/day-river000-011-000.png",
    ⵠᐃΔⲆⵠⵠᐃ: "img/day-river000-011-010.png",
    ᐃⵠⵠᐃⲆⲆᐃ: "img/day-river000-011-011.png",
    ⵠⲆΔⲆΔᐃⲆ: "img/day-river000-110-000.png",
    ΔⵠⵠᐃΔⲆΔ: "img/day-river000-110-010.png",
    ᐃΔΔⲆΔΔᐃ: "img/day-river000-110-110.png",
    ⵠᐃⵠⲆᐃΔⵠ: "img/day-river000-111-000.png",
    ⲆΔⵠᐃΔᐃⵠ: "img/day-river000-111-010.png",
    ᐃⵠⵠⲆⵠᐃΔ: "img/day-river000-111-011.png",
    ⲆⲆⲆΔⵠᐃⵠ: "img/day-river000-111-110.png",
    ⵠᐃⵠᐃΔⵠΔ: "img/day-river000-111-111.png",
    ΔⵠᐃΔΔⲆᐃ: "img/day-river010-010-000.png",
    ΔΔᐃⲆᐃΔⵠ: "img/day-river010-010-010.png",
    ᐃΔⲆⲆⵠΔⲆ: "img/day-river010-011-000.png",
    ΔⵠⲆⵠᐃⲆⵠ: "img/day-river010-011-010.png",
    ⵠᐃⵠᐃⵠᐃΔ: "img/day-river010-011-011.png",
    ⲆⵠΔⲆᐃⲆᐃ: "img/day-river010-110-000.png",
    ᐃΔⲆΔΔΔⵠ: "img/day-river010-110-010.png",
    ᐃⵠⲆⵠᐃᐃᐃ: "img/day-river010-110-110.png",
    ⲆΔᐃᐃΔⵠᐃ: "img/day-river010-111-000.png",
    ᐃⵠⲆⲆᐃᐃᐃ: "img/day-river010-111-010.png",
    ΔⲆᐃⲆΔΔΔ: "img/day-river010-111-011.png",
    ᐃⲆᐃΔⵠⵠⲆ: "img/day-river010-111-110.png",
    ΔΔᐃⵠΔⲆΔ: "img/day-river010-111-111.png",
    ΔⵠⲆΔⲆⲆⲆ: "img/day-river011-011-000.png",
    ⲆⵠⵠΔⵠΔⲆ: "img/day-river011-011-010.png",
    ᐃᐃⵠⲆΔⲆⲆ: "img/day-river011-011-011.png",
    ⲆᐃⵠⵠⵠΔⵠ: "img/day-river011-111-000.png",
    ⵠΔⲆᐃⵠⵠⲆ: "img/day-river011-111-010.png",
    ⲆΔⲆⲆᐃⲆΔ: "img/day-river011-111-011.png",
    ᐃΔⲆΔᐃΔᐃ: "img/day-river011-111-110.png",
    ⵠⲆⵠⲆⵠⵠⲆ: "img/day-river011-111-111.png",
    ⲆᐃⵠΔΔᐃⵠ: "img/day-river110-110-000.png",
    ᐃⵠΔⵠⵠΔΔ: "img/day-river110-110-010.png",
    ᐃᐃⵠⲆⲆΔᐃ: "img/day-river110-110-110.png",
    ⲆΔᐃⵠⵠᐃᐃ: "img/day-river110-111-000.png",
    ᐃⵠΔΔΔΔⵠ: "img/day-river110-111-010.png",
    ⵠᐃⲆᐃΔΔᐃ: "img/day-river110-111-011.png",
    ⲆᐃⵠΔⵠⲆΔ: "img/day-river110-111-110.png",
    ⲆΔⲆΔⲆⲆⵠ: "img/day-river110-111-111.png",
    ᐃΔΔΔΔΔⲆ: "img/day-river111-111-011.png",
    ⵠᐃⵠᐃΔⲆⲆ: "img/day-river111-111-110.png",
    ᐃΔΔΔΔΔⲆ: "img/day-river111-111-011.png",
    ᐃⵠΔᐃᐃⲆⵠ: "img/day-river111-111-000.png",
    ⲆΔⵠⲆΔᐃᐃ: "img/day-river111-111-111.png",
    ΔᐃⲆⵠⵠⲆⵠ: "img/day-river111-111-010.png",
    ⵠᐃⲆᐃⲆⲆⵠ: "img/night-river000-010-000.png",
    ΔⵠΔⵠΔⵠⵠ: "img/night-river000-010-010.png",
    ⵠᐃⲆⲆⲆⲆΔ: "img/night-river000-011-000.png",
    ⵠᐃᐃⲆⵠᐃᐃ: "img/night-river000-011-010.png",
    ᐃᐃⵠΔⲆᐃⲆ: "img/night-river000-011-011.png",
    ΔΔΔᐃⵠᐃⵠ: "img/night-river000-110-000.png",
    ⵠΔⲆⲆΔΔⲆ: "img/night-river000-110-010.png",
    ⲆΔᐃⲆΔᐃⲆ: "img/night-river000-110-110.png",
    ⵠᐃΔⵠΔΔⲆ: "img/night-river000-111-000.png",
    ᐃΔⲆⵠᐃᐃⲆ: "img/night-river000-111-010.png",
    ⲆⵠⵠⲆΔⵠⵠ: "img/night-river000-111-011.png",
    ⵠΔᐃⲆᐃⵠᐃ: "img/night-river000-111-110.png",
    ᐃⵠΔᐃⲆᐃⵠ: "img/night-river000-111-111.png",
    ⲆⵠⲆⲆΔΔΔ: "img/night-river010-010-000.png",
    ᐃⵠΔᐃⵠⵠⲆ: "img/night-river010-010-010.png",
    ⲆΔΔⵠΔⲆⵠ: "img/night-river010-011-000.png",
    ⵠⵠⲆΔᐃⵠⵠ: "img/night-river010-011-010.png",
    ΔΔΔΔᐃᐃᐃ: "img/night-river010-011-011.png",
    ⵠᐃΔᐃΔΔⲆ: "img/night-river010-110-000.png",
    ᐃᐃⲆΔⵠⲆⲆ: "img/night-river010-110-010.png",
    ⵠᐃᐃⲆⵠᐃⵠ: "img/night-river010-110-110.png",
    ⲆⲆⵠᐃⵠΔⵠ: "img/night-river010-111-000.png",
    ᐃΔⲆΔᐃⵠᐃ: "img/night-river010-111-010.png",
    ⵠᐃᐃⲆⵠⵠᐃ: "img/night-river010-111-011.png",
    ⲆΔⵠΔΔⵠⲆ: "img/night-river010-111-110.png",
    ΔⲆⵠⲆΔΔⵠ: "img/night-river010-111-111.png",
    ⲆⲆᐃⵠᐃⲆᐃ: "img/night-river011-011-000.png",
    ⲆⲆΔᐃΔⲆΔ: "img/night-river011-011-010.png",
    ᐃⲆΔΔⲆᐃⵠ: "img/night-river011-011-011.png",
    ΔⵠΔᐃᐃⲆᐃ: "img/night-river011-111-000.png",
    ⲆᐃΔⵠᐃΔΔ: "img/night-river011-111-010.png",
    ⲆΔΔΔⵠΔⲆ: "img/night-river011-111-011.png",
    ⲆΔΔΔⲆᐃⵠ: "img/night-river011-111-110.png",
    ⵠⲆⲆⵠᐃΔᐃ: "img/night-river011-111-111.png",
    ΔᐃⲆⵠⲆⵠⲆ: "img/night-river110-110-000.png",
    ΔⵠⵠⵠᐃΔⲆ: "img/night-river110-110-010.png",
    ΔⲆⲆΔᐃⵠᐃ: "img/night-river110-110-110.png",
    ⵠⲆⲆᐃⲆⵠᐃ: "img/night-river110-111-000.png",
    ΔⵠⵠⵠⵠⲆΔ: "img/night-river110-111-010.png",
    ⵠⲆᐃΔⲆⵠᐃ: "img/night-river110-111-011.png",
    ᐃΔⵠⵠᐃΔⵠ: "img/night-river110-111-110.png",
    ᐃΔᐃΔⲆⵠⲆ: "img/night-river110-111-111.png",
    ⲆΔᐃⵠᐃⵠⵠ: "img/night-river111-111-011.png",
    ⲆⵠⲆⲆⵠᐃᐃ: "img/night-river111-111-110.png",
    ⲆΔᐃⵠᐃⵠⵠ: "img/night-river111-111-011.png",
    ⲆⲆⲆⵠⵠΔᐃ: "img/night-river111-111-000.png",
    ᐃⲆΔᐃⵠⵠⲆ: "img/night-river111-111-111.png",
    ⵠⲆᐃᐃᐃⵠᐃ: "img/night-river111-111-010.png",
    ΔΔⵠⵠΔⵠⲆ: "img/day-pebblecompo1.png",
    ⲆΔⵠᐃᐃ: "img/day-pebblecompo2.png",
    ΔⵠᐃᐃΔ: "img/day-pebblecompo3.png",
    ⲆⵠᐃⲆⲆᐃⵠ: "img/day-pebblecompo4.png",
    ᐃⵠᐃⵠΔ: "img/day-pebblecompo5.png",
    ΔᐃⲆᐃΔ: "img/day-pebblecompo6.png",
    ΔΔᐃΔⲆ: "img/day-pebblecompo7.png",
    ⵠⵠᐃⲆⵠⵠⲆ: "img/day-pebblecompo8.png",
    ΔⵠΔΔΔⵠⲆ: "img/day-pebblecompo9.png",
    ⵠΔⲆⵠⵠΔⵠ: "img/day-pebblecompo10.png",
    ΔⵠᐃΔⲆ: "img/day-pebblecompo11.png",
    ᐃᐃⵠΔᐃⲆΔ: "img/day-pebblecompo12.png",
    ᐃᐃⵠᐃⲆⵠⵠ: "img/day-pebblecompo13.png",
    ᐃⵠΔΔᐃᐃᐃ: "img/day-pebblecompo14.png",
    ΔⵠⲆⲆⲆᐃΔ: "img/day-pebblecompo15.png",
    ΔΔΔⵠⲆⵠΔ: "img/day-pebblecompo16.png",
    ⲆⵠᐃΔΔ: "img/day-pebblecompo17.png",
    ᐃΔⲆᐃᐃΔⵠ: "img/day-pebblecompo18.png",
    ΔΔⲆⲆⵠᐃⲆ: "img/day-pebblecompo19.png",
    ⲆⵠΔΔᐃ: "img/day-pebblecompo20.png",
    ⲆⲆᐃⵠⵠ: "img/day-pebblecompo21.png",
    ⵠΔΔⲆⵠⵠⵠ: "img/day-pebblecompo22.png",
    ⵠΔᐃⵠᐃᐃᐃ: "img/day-pebblecompo23.png",
    ΔⵠᐃⵠⲆⵠΔ: "img/day-pebblecompo24.png",
    ΔⲆⵠΔΔ: "img/day-pebblecompo25.png",
    ⲆᐃΔⲆⲆ: "img/day-pebblecompo26.png",
    ΔᐃᐃΔⵠⵠΔ: "img/day-pebblecompo27.png",
    ⲆⲆᐃᐃᐃ: "img/day-pebblecompo28.png",
    ⲆⵠⲆⵠⵠⲆⵠ: "img/night-pebblecompo1.png",
    ⲆΔΔᐃⵠ: "img/night-pebblecompo2.png",
    ᐃⵠⲆⲆⵠ: "img/night-pebblecompo3.png",
    ᐃᐃΔΔⵠⵠⵠ: "img/night-pebblecompo4.png",
    ΔⵠⲆΔⵠ: "img/night-pebblecompo5.png",
    ⵠΔⲆΔⵠ: "img/night-pebblecompo6.png",
    ΔΔⲆⵠΔ: "img/night-pebblecompo7.png",
    ΔⲆⵠᐃᐃⵠⲆ: "img/night-pebblecompo8.png",
    ⲆⲆⵠⵠⵠΔⵠ: "img/night-pebblecompo9.png",
    ⲆⵠᐃⲆΔΔⲆ: "img/night-pebblecompo10.png",
    ᐃⵠᐃΔᐃ: "img/night-pebblecompo11.png",
    Δⵠᐃᐃⵠⵠⵠ: "img/night-pebblecompo12.png",
    ⲆΔΔⵠᐃᐃⲆ: "img/night-pebblecompo13.png",
    ΔΔΔⲆᐃⲆᐃ: "img/night-pebblecompo14.png",
    ᐃⵠⵠⲆⲆΔΔ: "img/night-pebblecompo15.png",
    ⵠᐃᐃΔΔᐃᐃ: "img/night-pebblecompo16.png",
    ⲆᐃⲆⵠⵠ: "img/night-pebblecompo17.png",
    ⵠΔᐃΔΔⵠⲆ: "img/night-pebblecompo18.png",
    ⲆΔΔΔΔⵠⵠ: "img/night-pebblecompo19.png",
    ⵠᐃΔΔⵠ: "img/night-pebblecompo20.png",
    ΔⵠⵠΔⲆ: "img/night-pebblecompo21.png",
    ΔᐃᐃⲆⵠΔΔ: "img/night-pebblecompo22.png",
    ⵠᐃΔΔΔⵠⲆ: "img/night-pebblecompo23.png",
    ⵠⵠᐃᐃᐃⵠᐃ: "img/night-pebblecompo24.png",
    ᐃⵠᐃᐃⵠ: "img/night-pebblecompo25.png",
    ΔⲆᐃᐃΔ: "img/night-pebblecompo26.png",
    ΔⲆⲆⲆⵠⵠΔ: "img/night-pebblecompo27.png",
    ΔⵠΔΔⵠ: "img/night-pebblecompo28.png",
    ⲆΔⲆⵠⲆΔΔ: "img/day-baby-mammoth.png",
    ᐃᐃᐃⵠⲆᐃⵠ: "img/day-baby-mammoth-tamed.png",
    ΔⲆᐃᐃΔΔⵠ: "img/day-baby-mammoth-angry.png",
    ⲆⲆⲆⲆⲆΔΔ: "img/night-baby-mammoth.png",
    ΔᐃⵠⵠᐃⵠΔ: "img/night-baby-mammoth-tamed.png",
    ⵠΔᐃⵠΔⵠᐃ: "img/night-baby-mammoth-angry.png",
    ΔⵠΔΔᐃᐃⵠ: "img/inv-mammoth-out.png",
    ΔΔᐃⲆⵠΔⲆ: "img/inv-mammoth-in.png",
    ΔΔΔΔΔᐃᐃ: "img/inv-mammoth-click.png",
    ⲆⲆΔⲆⲆΔᐃ: "img/hurt-baby-mammoth.png",
    ⵠⵠⲆᐃⵠⲆⲆ: "img/baby-mammoth-step.png",
    ⵠⵠΔⵠⲆⵠΔΔⲆ: "img/day-flower-hat.png",
    ⵠⲆΔᐃⵠᐃⲆⵠΔ: "img/night-flower-hat.png",
    ⵠⵠᐃΔᐃΔⵠⵠⵠ: "img/inv-flower-hat-out.png",
    ᐃⵠⲆᐃΔᐃΔΔⵠ: "img/inv-flower-hat-in.png",
    ᐃⵠⲆⵠⵠΔⲆⵠᐃ: "img/inv-flower-hat-click.png",
    ᐃⵠΔΔⵠⲆΔΔⲆ: "img/day-fur-hat.png",
    ΔᐃⵠⲆⲆⵠⵠⵠⲆ: "img/night-fur-hat.png",
    ⵠΔᐃⵠΔⵠⲆΔⵠ: "img/inv-fur-hat-out.png",
    ⵠⵠᐃΔᐃΔⵠΔⵠ: "img/inv-fur-hat-in.png",
    ᐃⲆⲆⲆⲆⵠⵠⲆΔ: "img/inv-fur-hat-click.png",
    ⵠΔᐃⲆⵠⲆᐃᐃⵠ: "img/day-mammoth.png",
    ⵠΔⲆⵠⵠΔⲆΔΔ: "img/night-mammoth.png",
    ᐃΔⲆⵠⵠⵠᐃ: "img/hurt-mammoth.png",
    ᐃⲆⲆᐃᐃᐃⲆᐃΔ: "img/inv-mammoth-fur-out.png",
    ΔΔᐃΔⲆⵠⵠⲆⵠ: "img/inv-mammoth-fur-in.png",
    ⵠᐃⲆⲆⲆⲆᐃᐃΔ: "img/inv-mammoth-fur-click.png",
    ⵠⲆᐃᐃᐃΔᐃⵠⵠ: "img/inv-wood-bow-out.png",
    ΔⲆⲆⵠⵠⲆᐃⵠⲆ: "img/inv-wood-bow-in.png",
    ᐃⵠⲆΔⵠᐃΔⵠⵠ: "img/inv-wood-bow-click.png",
    ᐃⲆⵠΔΔΔⵠΔⵠ: "img/inv-wood-arrow-out.png",
    ΔⲆⲆⲆᐃⵠΔΔⲆ: "img/inv-wood-arrow-in.png",
    ⲆⲆΔΔⲆΔᐃᐃΔ: "img/inv-wood-arrow-click.png",
    ⲆⲆⲆᐃᐃⵠⲆᐃΔ: "img/day-wood-bow2.png",
    ⲆⲆⵠⲆⲆᐃᐃⵠⵠ: "img/night-wood-bow2.png",
    ᐃΔΔⵠᐃΔⲆ: "img/day-wood-arrow.png",
    ᐃⵠᐃⲆⲆⲆᐃ: "img/night-wood-arrow.png",
    ⵠΔΔⲆᐃⵠᐃΔⲆ: "img/inv-stone-bow-out.png",
    ᐃᐃⲆᐃΔΔⵠΔᐃ: "img/inv-stone-bow-in.png",
    ⲆᐃⲆΔⵠᐃΔⲆᐃ: "img/inv-stone-bow-click.png",
    ⵠᐃΔᐃΔⲆΔⵠⵠ: "img/inv-stone-arrow-out.png",
    ΔΔⵠΔΔᐃΔΔᐃ: "img/inv-stone-arrow-in.png",
    ᐃⲆⵠⲆⵠᐃᐃⲆⵠ: "img/inv-stone-arrow-click.png",
    ΔⲆΔΔᐃᐃᐃⵠᐃ: "img/day-stone-bow.png",
    ᐃⲆΔⲆᐃⲆⲆⲆⲆ: "img/night-stone-bow.png",
    ΔⵠΔΔᐃΔⵠ: "img/day-stone-arrow.png",
    ΔΔⲆᐃΔⲆᐃ: "img/night-stone-arrow.png",
    ᐃΔᐃΔᐃᐃⲆᐃⵠ: "img/inv-gold-bow-out.png",
    ⵠⲆᐃⵠⵠⵠⵠᐃⲆ: "img/inv-gold-bow-in.png",
    ⲆᐃⲆⲆᐃΔᐃᐃᐃ: "img/inv-gold-bow-click.png",
    ᐃᐃⵠⲆΔⵠⲆᐃᐃ: "img/inv-gold-arrow-out.png",
    ⵠⲆⲆΔⵠⵠᐃᐃⲆ: "img/inv-gold-arrow-in.png",
    ⵠΔⲆⲆᐃΔΔᐃᐃ: "img/inv-gold-arrow-click.png",
    ΔᐃⵠᐃⵠⵠΔᐃᐃ: "img/day-gold-bow.png",
    ΔᐃΔⵠⲆᐃⵠΔΔ: "img/night-gold-bow.png",
    ΔΔⲆᐃΔᐃΔ: "img/day-gold-arrow.png",
    ⵠᐃⲆⵠⵠⲆⵠ: "img/night-gold-arrow.png",
    ᐃΔᐃᐃΔⵠⲆⵠⵠ: "img/inv-diamond-bow-out.png",
    ᐃⵠΔⵠⵠΔⲆᐃⲆ: "img/inv-diamond-bow-in.png",
    ΔⲆⲆΔⲆΔⵠΔⵠ: "img/inv-diamond-bow-click.png",
    ⲆᐃΔⲆᐃᐃΔᐃⵠ: "img/inv-diamond-arrow-out.png",
    ᐃᐃΔᐃΔⵠⵠΔⵠ: "img/inv-diamond-arrow-in.png",
    ΔⵠΔⲆᐃᐃⵠⲆᐃ: "img/inv-diamond-arrow-click.png",
    ΔⵠᐃⵠΔⵠⲆⵠᐃ: "img/day-diamond-bow.png",
    ᐃⲆᐃᐃᐃᐃⲆΔⵠ: "img/night-diamond-bow.png",
    ᐃⲆⲆⲆⵠⵠⲆ: "img/day-diamond-arrow.png",
    ΔⲆΔΔᐃᐃΔ: "img/night-diamond-arrow.png",
    ΔᐃⵠⵠⵠⲆⲆⲆⵠ: "img/inv-amethyst-bow-out.png",
    ⵠΔⲆⲆΔⲆΔⲆᐃ: "img/inv-amethyst-bow-in.png",
    ⲆⵠΔⲆᐃΔⲆΔΔ: "img/inv-amethyst-bow-click.png",
    ⵠᐃⵠΔᐃΔᐃΔᐃ: "img/inv-amethyst-arrow-out.png",
    ⵠⵠΔⵠᐃⲆΔΔⲆ: "img/inv-amethyst-arrow-in.png",
    ⲆⲆᐃΔⵠⵠΔⲆΔ: "img/inv-amethyst-arrow-click.png",
    ⲆᐃᐃⵠⲆⵠΔΔᐃ: "img/day-amethyst-bow.png",
    ᐃⵠΔⵠᐃᐃΔΔΔ: "img/night-amethyst-bow.png",
    ΔᐃᐃⵠΔⲆᐃ: "img/day-amethyst-arrow.png",
    ⲆⲆⲆΔΔⵠⲆ: "img/night-amethyst-arrow.png",
    ⵠᐃᐃⲆⵠⲆΔⲆⲆ: "img/inv-dragon-bow-out.png",
    ΔⲆⲆⵠⲆΔⲆᐃΔ: "img/inv-dragon-bow-in.png",
    ΔⵠᐃⵠⵠⲆᐃᐃΔ: "img/inv-dragon-bow-click.png",
    ⵠᐃⲆᐃᐃᐃⲆⵠⵠ: "img/inv-dragon-arrow-out.png",
    ᐃᐃΔΔΔᐃⵠᐃᐃ: "img/inv-dragon-arrow-in.png",
    ᐃΔⲆⲆⵠⵠⵠⵠⵠ: "img/inv-dragon-arrow-click.png",
    ⵠⵠⵠⲆⲆΔⲆᐃⵠ: "img/day-dragon-bow.png",
    ΔᐃΔⵠᐃⵠⵠΔΔ: "img/night-dragon-bow.png",
    ⵠΔᐃΔᐃⲆΔ: "img/day-dragon-arrow.png",
    ⵠΔⲆᐃΔⲆⵠ: "img/night-dragon-arrow.png",
    ⲆⵠⵠᐃΔᐃΔΔⵠ: "img/inv-reidite-bow-out.png",
    ⲆⲆⵠⵠΔⲆⵠⵠⲆ: "img/inv-reidite-bow-in.png",
    ΔⵠΔⵠⲆᐃΔⲆⲆ: "img/inv-reidite-bow-click.png",
    ᐃᐃΔⲆⵠⲆⲆᐃΔ: "img/inv-reidite-arrow-out.png",
    ⲆΔⵠΔΔⵠⵠᐃΔ: "img/inv-reidite-arrow-in.png",
    ΔⵠᐃⲆᐃᐃⲆⵠΔ: "img/inv-reidite-arrow-click.png",
    ⲆⲆᐃⲆΔⵠΔⲆⲆ: "img/day-reidite-bow.png",
    ⵠⲆᐃΔᐃⵠᐃΔΔ: "img/night-reidite-bow.png",
    ⵠΔⵠᐃⵠΔⵠ: "img/day-reidite-arrow.png",
    ⲆᐃΔᐃⲆᐃᐃⵠᐃ: "img/night-reidite-arrow.png",
    ⵠΔᐃΔⲆⵠⵠᐃΔ: "img/inv-wooden-axe-out.png",
    ΔᐃΔᐃⲆⲆᐃⵠⲆ: "img/inv-wooden-axe-in.png",
    ᐃⲆᐃⲆΔⵠΔΔᐃ: "img/inv-wooden-axe-click.png",
    ΔΔᐃΔⲆΔⲆⲆⲆ: "img/day-wooden-axe.png",
    ⵠΔΔΔΔⲆΔⲆⵠ: "img/night-wooden-axe.png",
    ᐃⵠΔⵠⵠΔΔΔⲆ: "img/inv-stone-axe-out.png",
    ΔΔⵠⵠᐃⵠΔᐃΔ: "img/inv-stone-axe-in.png",
    ΔΔⵠΔΔⵠᐃᐃⲆ: "img/inv-stone-axe-click.png",
    ⵠΔᐃⵠΔⵠΔᐃⵠ: "img/day-stone-axe.png",
    ⲆⲆⵠΔΔᐃⵠΔΔ: "img/night-stone-axe.png",
    ⲆΔⵠᐃΔΔⵠⲆⲆ: "img/inv-golden-axe-out.png",
    ᐃⲆΔⲆⲆᐃΔⵠⵠ: "img/inv-golden-axe-in.png",
    ⵠⵠᐃⵠⵠⵠᐃΔⲆ: "img/inv-golden-axe-click.png",
    ᐃⲆⲆⲆⲆΔⲆᐃΔ: "img/day-golden-axe.png",
    ᐃⲆⵠΔⲆⲆᐃⵠⵠ: "img/night-golden-axe.png",
    ᐃⵠⵠΔⵠⵠΔⲆⲆ: "img/inv-diamond-axe-out.png",
    ⵠⵠⵠΔᐃᐃᐃΔΔ: "img/inv-diamond-axe-in.png",
    ΔⲆΔΔⲆᐃⲆⲆΔ: "img/inv-diamond-axe-click.png",
    ⵠⵠΔΔⲆΔⵠⵠΔ: "img/day-diamond-axe.png",
    ⲆⲆΔⵠⲆΔⵠᐃΔ: "img/night-diamond-axe.png",
    ᐃᐃⲆⲆⵠΔᐃΔΔ: "img/inv-amethyst-axe-out.png",
    ᐃᐃᐃΔⵠⲆΔΔⲆ: "img/inv-amethyst-axe-in.png",
    ᐃⲆⲆΔⵠⵠⵠΔᐃ: "img/inv-amethyst-axe-click.png",
    ⲆⲆⲆⲆⵠⵠΔⲆᐃ: "img/day-amethyst-axe.png",
    ᐃⲆⵠⲆⵠᐃⲆⲆΔ: "img/night-amethyst-axe.png",
    ⵠⵠⵠⲆᐃᐃⲆⵠⵠ: "img/inv-reidite-axe-out.png",
    ΔᐃⲆᐃⲆⵠᐃⵠⲆ: "img/inv-reidite-axe-in.png",
    ⲆᐃⲆⲆᐃⵠΔΔΔ: "img/inv-reidite-axe-click.png",
    ⵠⲆᐃΔΔΔⲆⲆⵠ: "img/day-reidite-axe.png",
    ⵠⵠⵠⵠⵠᐃⲆᐃΔ: "img/night-reidite-axe.png",
    ΔᐃⵠⲆᐃⵠᐃ: "img/bandage-activated.png",
    ⵠᐃᐃᐃⵠᐃⵠ: "img/auto-feed.png",
    ᐃⵠᐃⲆⲆⲆΔ: "img/stop-regeneration.png",
    ⲆⵠᐃΔⵠⲆⵠ: "img/stop-regeneration2.png",
    ΔᐃⵠⵠᐃΔⵠΔΔ: "img/day-wood-platform.png",
    ⵠᐃⲆⲆⲆΔⲆⲆΔ: "img/night-wood-platform.png",
    ΔⵠᐃᐃΔⲆΔΔⲆ: "img/inv-wood-platform-in.png",
    ⵠⵠᐃᐃⲆᐃᐃᐃᐃ: "img/inv-wood-platform-out.png",
    ᐃΔΔⲆⲆⵠᐃⵠⲆ: "img/inv-wood-platform-click.png",
    ᐃⵠΔᐃⵠΔᐃΔΔ: "img/day-wood-shield.png",
    ⲆⵠⲆⵠⲆᐃⵠⲆⲆ: "img/night-wood-shield.png",
    ΔⲆⵠⵠⵠΔᐃⲆⲆ: "img/day-stone-shield.png",
    ⲆᐃᐃᐃᐃⵠⵠⲆⵠ: "img/night-stone-shield.png",
    ΔⵠΔᐃⵠᐃΔⲆΔ: "img/day-gold-shield.png",
    ΔⲆⲆΔᐃΔᐃΔⵠ: "img/night-gold-shield.png",
    ⵠⵠⲆΔᐃⵠᐃΔᐃ: "img/day-diamond-shield.png",
    ΔΔΔⲆⵠⵠⵠᐃᐃ: "img/night-diamond-shield.png",
    ⵠⲆⲆΔⵠⵠⵠᐃⲆ: "img/day-amethyst-shield.png",
    ⲆᐃⵠⵠⲆᐃⵠⵠⲆ: "img/night-amethyst-shield.png",
    ⵠᐃⲆⲆΔΔⲆⲆΔ: "img/day-reidite-shield.png",
    ᐃΔⲆⲆⲆᐃΔᐃⲆ: "img/night-reidite-shield.png",
    ΔⵠⵠⲆΔⵠᐃᐃᐃ: "img/inv-wood-shield-in.png",
    ΔΔⵠⵠᐃΔⵠΔⵠ: "img/inv-wood-shield-out.png",
    ⲆⲆⲆⵠⲆⵠⲆᐃⵠ: "img/inv-wood-shield-click.png",
    ⲆᐃⲆᐃᐃᐃⲆⲆⲆ: "img/inv-stone-shield-in.png",
    ⵠⲆⲆᐃⲆᐃᐃⲆⵠ: "img/inv-stone-shield-out.png",
    ⲆⵠᐃⲆⲆⲆⵠⲆⵠ: "img/inv-stone-shield-click.png",
    ⵠᐃⵠⵠⲆⲆⲆⵠⲆ: "img/inv-gold-shield-in.png",
    ᐃᐃⲆΔΔΔΔΔⵠ: "img/inv-gold-shield-out.png",
    ᐃᐃⵠⵠⵠΔΔΔᐃ: "img/inv-gold-shield-click.png",
    ΔⲆⵠᐃΔⵠᐃⲆᐃ: "img/inv-diamond-shield-in.png",
    ᐃⵠᐃᐃⲆΔⲆΔⲆ: "img/inv-diamond-shield-out.png",
    ⵠⵠⲆⵠᐃⵠⲆΔΔ: "img/inv-diamond-shield-click.png",
    ⵠΔΔᐃᐃⵠΔΔΔ: "img/inv-amethyst-shield-in.png",
    ⲆΔⲆⲆΔΔΔⵠⲆ: "img/inv-amethyst-shield-out.png",
    ᐃᐃᐃΔⵠᐃⵠⵠⲆ: "img/inv-amethyst-shield-click.png",
    ⵠⲆⲆⵠⵠΔⵠᐃᐃ: "img/inv-reidite-shield-in.png",
    ⵠⵠⵠⵠⲆⵠΔⵠΔ: "img/inv-reidite-shield-out.png",
    ΔⲆᐃⵠⲆⲆⵠⵠⵠ: "img/inv-reidite-shield-click.png",
    ⵠⵠΔᐃᐃⵠΔⵠΔ: "img/day-machete.png",
    ⵠⵠⵠᐃⲆⵠΔⵠᐃ: "img/night-machete.png",
    ⵠΔᐃⵠᐃΔⲆᐃΔ: "img/inv-machete-in.png",
    ΔⵠᐃΔΔᐃΔΔⵠ: "img/inv-machete-out.png",
    ⲆⲆⵠⵠⲆΔⲆⲆᐃ: "img/inv-machete-click.png"
  };
  ΔᐃⲆᐃᐃᐃΔ = [{}];
  ΔᐃⲆᐃᐃᐃΔ[0].stringify = function (a) {
    var b = new Uint8Array(new ArrayBuffer(a.length));
    for (var c = 0; c < a.length; c++) {
      b[c] = a[c];
    }
    return b;
  };
  const Qt = 12;
  ⲆᐃΔⵠⵠᐃⵠ = {};
  const qb = 1;
  ΔⲆⵠΔᐃᐃⵠⵠΔ = {};
  for (var Fb in ⵠᐃ) {
    ⲆᐃΔⵠⵠᐃⵠ[Fb] = ⵠᐃ[Fb];
  }
  const Ob = 13;
  ᐃΔ = [];
  const Hb = 9;
  const Ub = 8;
  ΔΔⵠ = {};
  ΔΔⵠ.ᐃⵠⲆⲆⲆ = 0;
  const Yb = 11;
  const Kb = 12;
  ΔΔⵠ.ⲆⵠᐃΔ = 1;
  ΔΔⵠ.ⵠⵠΔΔ = 2;
  ΔΔⵠ.ᐃΔᐃⲆ = 3;
  const Vb = 4;
  const Xb = 7;
  const Zb = 11;
  ΔΔⵠ.ⲆᐃⲆᐃ = 4;
  const $b = 8;
  const ed = 10;
  ΔΔⵠ.ⲆΔΔᐃ = 5;
  ΔΔⵠ.ⲆᐃⲆⲆ = 6;
  ΔΔⵠ.ᐃⲆΔᐃΔᐃⲆ = 7;
  ΔΔⵠ.ᐃΔⵠⵠⵠ = 8;
  const id = 18;
  Δᐃᐃᐃ = {};
  ᐃᐃᐃᐃ = [];
  ᐃⵠᐃᐃⵠⵠⵠ = function (a, b) {
    for (var c = 0; c < a.length; c++) {
      if (a[c].id === b) {
        return c;
      }
    }
    return -1;
  };
  var td = [];
  const Rt = 15;
  function od(a, b) {
    for (var c = 0; td.length > c; c += b) {
      var d = td[c];
      if (a === d[0]) {
        sd(d[0], d[1], d[2], d[3]);
      }
    }
  }
  const ad = 6;
  const rd = 4;
  function sd(b, c, d, e) {
    var f = ᐃᐃᐃᐃ[b];
    if (f !== Fk) {
      for (var i = 0; i < 2; i++) {
        var j = f[c][i];
        var k = e * 193 / zx.ΔᐃᐃⵠΔ;
        var m = d * 193 / zx.ᐃⵠᐃᐃᐃ;
        var n = j.width / 3.5;
        var o = j.height / 3.5;
        ᐃΔ[818][i].drawImage(j, k - n / 2, m - o / 2, n, o);
        k = e * 600 / zx.ΔᐃᐃⵠΔ;
        m = d * 600 / zx.ᐃⵠᐃᐃᐃ;
        n = j.width / 1.5;
        o = j.height / 1.5;
        ᐃΔ[819][i].drawImage(j, k - n / 2, m - o / 2, n, o);
      }
    }
  }
  ⲆΔⵠⵠⲆᐃⲆⲆΔ = function () {
    for (var b = 0; b < 2; b++) {
      ᐃΔ[818][b].clearRect(0, 0, 193, 193);
      ᐃΔ[818][b].drawImage(ᐃᐃᐃᐃ.MAP[b], 0, 0, 193, 193);
      ᐃΔ[819][b].clearRect(0, 0, 600, 600);
      ᐃΔ[819][b].drawImage(ᐃᐃᐃᐃ.MAP[b], 0, 0, 600, 600);
      for (var c = zx.ᐃΔⲆᐃ.length - 1; c >= 0; c--) {
        var d = zx.ᐃΔⲆᐃ[c];
        var f = d.x1 * 193 / (zx.ΔᐃᐃⵠΔ * 100);
        var j = d.y1 * 193 / (zx.ᐃⵠᐃᐃᐃ * 100);
        var k = d.w * 193 / (zx.ΔᐃᐃⵠΔ * 100);
        var m = d.ⲆΔⲆ * 193 / (zx.ᐃⵠᐃᐃᐃ * 100);
        var p = d.x1 * 600 / (zx.ΔᐃᐃⵠΔ * 100);
        var q = d.y1 * 600 / (zx.ᐃⵠᐃᐃᐃ * 100);
        var u = d.w * 600 / (zx.ΔᐃᐃⵠΔ * 100);
        var v = d.ⲆΔⲆ * 600 / (zx.ᐃⵠᐃᐃᐃ * 100);
        if (zx.ᐃΔΔΔⵠ === d.Δᐃᐃ) {
          ᐃΔ[818][b].drawImage(ᐃᐃᐃᐃ.FOREST[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(ᐃᐃᐃᐃ.FOREST[b], p, q, u, v);
        }
        if (zx.ⵠᐃᐃᐃⲆⲆᐃ === d.Δᐃᐃ) {
          ᐃΔ[818][b].drawImage(ᐃᐃᐃᐃ.WINTER[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(ᐃᐃᐃᐃ.WINTER[b], p, q, u, v);
        }
        if (d.Δᐃᐃ === zx.ΔΔⵠⵠᐃΔⵠ) {
          ᐃΔ[818][b].drawImage(ᐃᐃᐃᐃ.LAVA[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(ᐃᐃᐃᐃ.LAVA[b], p, q, u, v);
        }
        if (d.Δᐃᐃ === zx.ⲆⵠⵠⲆⵠᐃΔ) {
          ᐃΔ[818][b].drawImage(ᐃᐃᐃᐃ.CAVE[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(ᐃᐃᐃᐃ.CAVE[b], p, q, u, v);
        }
        if (d.Δᐃᐃ === zx.ᐃᐃΔⲆᐃᐃⵠ) {
          ᐃΔ[818][b].drawImage(ᐃᐃᐃᐃ.DESERT[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(ᐃᐃᐃᐃ.DESERT[b], p, q, u, v);
        }
      }
    }
  };
  ΔⲆΔⵠⲆᐃΔΔⲆ = function () {
    Δᐃᐃᐃ = {
      ⵠᐃΔⲆΔ: [{
        id: 0,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⲆᐃⵠⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⲆⲆᐃΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⲆⵠΔⵠⲆᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆΔᐃΔⲆⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⵠⲆⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Starver"
      }, {
        id: 3,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⵠⲆⲆⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆΔᐃⲆΔⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠᐃΔⵠᐃΔᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃᐃⵠᐃⵠⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⵠⲆⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Angry"
      }, {
        id: 2,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠⲆⲆΔᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔΔᐃⲆΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⲆΔᐃⲆⲆᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⵠⲆⵠᐃΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⵠⲆⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Sad"
      }, {
        id: 9,
        ⲆΔᐃ: ⵠᐃ.ΔΔⵠΔⵠⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔⵠΔΔⵠⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠⲆⵠⵠⵠᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃΔᐃⲆⵠΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⵠⲆⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Happy 1"
      }, {
        id: 1,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃᐃⲆΔᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔⲆΔΔⵠΔ,
        ᐃⵠΔΔ: ⵠᐃ.ΔᐃΔΔⵠⵠⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃᐃⵠⵠⲆΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "What?"
      }, {
        id: 4,
        ⲆΔᐃ: ⵠᐃ.ᐃΔᐃⲆⲆΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⲆΔⲆⲆᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠⲆⲆⵠᐃⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⵠⲆⲆΔⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Suspicious"
      }, {
        id: 5,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⲆⵠⵠⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠⲆⵠᐃⵠΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⵠⲆΔⲆᐃⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⲆⵠΔΔⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Scar"
      }, {
        id: 6,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆᐃⲆᐃⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔᐃⲆᐃΔΔ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆⲆΔⲆΔΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⵠⵠᐃⵠΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "In Trouble"
      }, {
        id: 7,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠᐃΔⲆⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆΔⲆΔᐃᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆᐃⵠⲆⲆⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⲆᐃᐃΔᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Cute"
      }, {
        id: 8,
        ⲆΔᐃ: ⵠᐃ.ⵠΔⵠᐃⵠⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔᐃΔⵠᐃΔ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃᐃᐃⲆΔᐃⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⵠᐃᐃΔΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Bored 1"
      }, {
        id: 10,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⵠⲆⲆΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃᐃⲆΔⲆᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆΔⵠᐃⵠΔᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⵠⵠⲆⵠⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Happy 2"
      }, {
        id: 11,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆⲆⲆΔⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔΔⲆⲆΔⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⲆΔⵠⲆⲆᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠΔⵠⲆᐃⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Crazy"
      }, {
        id: 12,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⵠᐃⵠΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃᐃⲆᐃⲆᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆΔΔᐃⵠᐃΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⵠᐃΔⲆⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Happy 3"
      }, {
        id: 13,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃΔΔⵠⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠᐃⲆᐃⲆⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆᐃΔᐃΔᐃⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃΔⵠⵠᐃⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Very Cute"
      }, {
        id: 14,
        ⲆΔᐃ: ⵠᐃ.ΔⵠⵠⵠᐃᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆΔΔᐃΔΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⲆⵠΔΔⲆⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⲆⲆΔⲆᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Curious"
      }, {
        id: 15,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃᐃΔΔᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃᐃᐃⲆᐃⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠⵠᐃⵠⲆⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆΔⲆⵠᐃᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Bored 2"
      }, {
        id: 16,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆᐃⵠΔΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔⲆᐃⲆᐃΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆΔΔⵠᐃΔᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⲆᐃΔᐃΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Happy 4"
      }, {
        id: 17,
        ⲆΔᐃ: ⵠᐃ.ΔⲆⵠⲆⲆᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⵠⵠΔᐃΔ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆᐃΔΔⲆᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⵠᐃΔⲆΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Scar 2"
      }, {
        id: 18,
        ⲆΔᐃ: ⵠᐃ.ᐃΔᐃᐃᐃΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⲆΔⲆⵠⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⲆⲆⵠᐃⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆΔᐃᐃⲆⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Sick"
      }, {
        id: 19,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃⵠⵠᐃᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆⵠΔⲆᐃⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃΔⲆⵠΔⵠⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⲆᐃᐃⲆⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Somnambule"
      }, {
        id: 24,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⲆΔⵠᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠⵠⲆΔᐃΔ,
        ᐃⵠΔΔ: ⵠᐃ.ΔΔⵠΔΔⵠⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔᐃⵠⵠⲆⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Pixelbitie",
        name: "Feel Bad"
      }, {
        id: 23,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃⵠⵠᐃΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔΔⲆΔⲆΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠᐃⵠⲆⲆᐃⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔΔⵠΔΔᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Pixelbitie",
        name: "Mmmh."
      }, {
        id: 103,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠΔΔⲆᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆᐃⲆⲆⲆⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠΔⲆⲆⲆᐃΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃⵠⵠⵠⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "pizza wa",
        name: "Panic"
      }, {
        id: 105,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆⲆᐃⵠᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⵠΔΔΔΔ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⲆⵠᐃᐃⲆⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔᐃΔⵠᐃᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "pizza wa",
        name: "Hypnotic"
      }, {
        id: 106,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆΔᐃⲆⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⲆΔᐃⲆΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠᐃⵠΔⲆⲆⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⲆⲆⲆⲆΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "pizza wa",
        name: "Stars in the eyes"
      }, {
        id: 220,
        ⲆΔᐃ: ⵠᐃ.ΔΔⵠⲆΔⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔΔΔⲆⲆᐃⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⵠΔⵠⲆⵠⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⵠⵠᐃᐃᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Seams"
      }, {
        id: 104,
        ⲆΔᐃ: ⵠᐃ.ⵠΔΔᐃᐃⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆΔΔⲆΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃΔΔⵠΔᐃⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃⲆⲆⲆⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "pizza wa",
        name: "Scared at night"
      }, {
        id: 20,
        ⲆΔᐃ: ⵠᐃ.ΔᐃΔⲆⵠⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃⵠᐃⵠⲆⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⵠⵠΔΔⲆᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆᐃⵠⵠΔᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Vampire"
      }, {
        id: 21,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⲆΔⵠᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔⲆⲆΔⲆⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆΔⵠⵠΔΔⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃᐃⵠᐃΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Zombie"
      }, {
        id: 22,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠᐃᐃⲆΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠΔΔᐃΔⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ΔᐃᐃⵠⵠⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃᐃΔⲆⲆⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Pixelbitie",
        name: "Devaster"
      }, {
        id: 116,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆⲆⵠⵠᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆᐃΔⲆⵠᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ΔΔΔⵠⲆⵠⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆᐃⲆⵠᐃᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Fukss",
        name: "Dead Devaster"
      }, {
        id: 27,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⵠⵠᐃⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔⲆΔΔⵠⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃΔᐃⲆⵠⲆᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔᐃΔΔⲆⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Winter",
        name: "Cactus"
      }, {
        id: 28,
        ⲆΔᐃ: ⵠᐃ.ΔⲆⵠΔⵠⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠⲆΔΔⲆⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠᐃⵠⲆΔⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⵠᐃΔⵠⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "pizza wa",
        name: "Bee"
      }, {
        id: 49,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⵠᐃᐃΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠⵠΔᐃⲆⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆⵠⵠⲆᐃⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⵠⵠⲆᐃⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Camo Skin"
      }, {
        id: 58,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆⲆᐃⲆⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⵠⵠⲆⵠⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆⲆⲆⲆⲆⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃⵠᐃᐃΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Blue Limax Skin"
      }, {
        id: 59,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃⲆⵠΔⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔⲆᐃⲆᐃⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⲆΔᐃᐃᐃⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃᐃⵠⵠⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Red Limax Skin"
      }, {
        id: 94,
        ⲆΔᐃ: ⵠᐃ.ⲆΔᐃᐃⵠΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃΔΔᐃΔⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ΔΔΔᐃⲆⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠΔᐃⲆᐃΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Mr. Pumpkin"
      }, {
        id: 109,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⵠΔΔΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠΔⵠΔᐃᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⲆⲆᐃΔᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃΔⵠΔⵠⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "pizza wa",
        name: "Wood"
      }, {
        id: 114,
        ⲆΔᐃ: ⵠᐃ.ⵠΔΔΔⲆΔΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃᐃᐃᐃΔΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆᐃΔᐃⲆΔⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔΔᐃΔᐃⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "pizza wa",
        name: "Zebra"
      }, {
        id: 120,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠⵠᐃΔⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⵠΔⵠΔΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⵠΔⲆⲆᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⵠⵠⲆⵠⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "CrysTal",
        name: "Tiger"
      }, {
        id: 134,
        ⲆΔᐃ: ⵠᐃ.ΔᐃΔⵠⵠᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃⵠΔⵠⵠΔ,
        ᐃⵠΔΔ: ⵠᐃ.ΔΔⲆᐃᐃᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⲆⵠⵠΔΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Franchestcreator",
        name: "Day or Night"
      }, {
        id: 135,
        ⲆΔᐃ: ⵠᐃ.ΔΔΔⲆⲆᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔᐃⲆⵠΔⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⲆⲆⲆⲆᐃⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔᐃⲆΔΔⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Poinet",
        name: "Square Starver"
      }, {
        id: 136,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⵠⵠⵠΔΔ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃⵠᐃⲆΔΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆᐃᐃⲆΔⵠΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⲆⲆΔⲆᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Voodoo Doll"
      }, {
        id: 137,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃᐃΔⲆᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⵠΔⵠⲆᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⲆⵠⲆⵠⵠΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆᐃⵠΔᐃⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Frankenstein"
      }, {
        id: 138,
        ⲆΔᐃ: ⵠᐃ.ΔΔᐃᐃΔᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃⵠⲆⵠⲆΔ,
        ᐃⵠΔΔ: ⵠᐃ.ΔᐃⵠⲆⵠᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⲆⵠΔⵠⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Old Mummy"
      }, {
        id: 139,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⲆΔⲆΔΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠⲆⵠΔΔⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠΔⵠⲆΔΔΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⵠΔᐃⲆⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Werewolf"
      }, {
        id: 140,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆΔⲆᐃⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔᐃⲆⵠᐃⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⲆⲆⵠᐃⵠⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔᐃΔᐃⵠⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Old Cthulhu"
      }, {
        id: 141,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⵠⵠⲆᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔⵠⵠΔΔⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃΔⲆⲆᐃⵠΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⲆᐃⲆⲆᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Sea Man"
      }, {
        id: 142,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆⲆΔⲆΔΔ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⲆΔⵠⲆΔ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃΔⵠᐃΔΔᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⵠΔⲆΔΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Old Pumpkin"
      }, {
        id: 148,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆⵠΔⵠⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆΔΔⵠᐃᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⲆⲆⵠⲆⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃΔⵠΔⵠᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Old Snowman"
      }, {
        id: 149,
        ⲆΔᐃ: ⵠᐃ.ΔΔΔⵠᐃⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃⵠΔΔᐃⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⵠⵠᐃᐃⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⵠᐃΔᐃⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Old Christmas Tree Man"
      }, {
        id: 150,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆΔⲆⵠⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆᐃⵠⵠᐃᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆΔΔᐃΔΔⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⵠⲆᐃⵠΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Old Mrs Bell"
      }, {
        id: 151,
        ⲆΔᐃ: ⵠᐃ.ΔᐃΔⲆⲆΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆΔᐃᐃⵠᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⲆⵠⵠΔⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃΔⵠᐃⲆᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Old Elfy"
      }, {
        id: 152,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠⵠΔⲆⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⲆᐃᐃΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠⵠⵠⵠΔᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃᐃΔΔⲆΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Old Mr Present"
      }, {
        id: 153,
        ⲆΔᐃ: ⵠᐃ.ΔⲆⵠⵠⲆΔΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆᐃⵠᐃⲆΔ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆΔΔⲆᐃΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⲆⵠᐃΔⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "My Dear Old Deer"
      }, {
        id: 154,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃᐃᐃΔⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃⲆⲆᐃΔΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⲆΔⵠⲆᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⵠΔⲆΔᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mr Angel"
      }, {
        id: 155,
        ⲆΔᐃ: ⵠᐃ.ⵠΔΔΔⲆᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠⵠⲆᐃΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ΔᐃᐃᐃᐃΔⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔΔΔⵠᐃᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mr Ice Cube"
      }, {
        id: 156,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠⲆΔⲆᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃⲆΔⵠΔⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠᐃⵠΔⲆΔⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠΔⲆⵠⵠⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mr Snowman"
      }, {
        id: 159,
        ⲆΔᐃ: ⵠᐃ.ΔΔⲆⵠⲆⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⲆⲆᐃΔⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⲆᐃⲆᐃⵠⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⲆᐃⵠΔⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "CrysTal",
        name: "Crystal Sky Skin"
      }, {
        id: 167,
        ⲆΔᐃ: ⵠᐃ.ⵠΔⲆⵠⵠⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃΔᐃⵠⵠⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⵠⲆⲆⵠⵠΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃᐃⲆⲆⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Franchestcreator",
        name: "Radioactive Starver"
      }, {
        id: 169,
        ⲆΔᐃ: ⵠᐃ.Δᐃⵠᐃᐃⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃᐃⲆᐃΔⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠΔᐃΔⲆᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔᐃΔⲆⵠᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "TheScaryBlaze",
        name: "Eaten Cookie"
      }, {
        id: 170,
        ⲆΔᐃ: ⵠᐃ.ⲆΔⵠΔΔΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⲆΔⵠⵠⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⲆᐃᐃΔᐃⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃΔΔⵠᐃᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "aloner",
        name: "Blob Thing"
      }, {
        id: 172,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⲆⵠΔⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃⵠΔⵠⵠΔ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⲆⲆⵠΔⲆᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠΔⵠᐃⲆⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "aloner",
        name: "Machine Mask"
      }, {
        id: 184,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆΔⲆⲆΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔᐃⵠⵠᐃⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠΔⵠΔΔᐃⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃΔᐃⲆᐃᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mad"
      }, {
        id: 206,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⲆᐃⲆΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔⵠⲆᐃᐃⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⵠΔⲆⲆΔΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⵠΔⵠⲆⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Survivor"
      }, {
        id: 209,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃⲆⲆⵠⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆΔⵠⵠᐃⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃΔⲆⲆⵠⲆⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠΔⲆΔⲆΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Starverator"
      }, {
        id: 230,
        ⲆΔᐃ: ⵠᐃ.ΔΔⲆⵠⲆⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⲆᐃᐃᐃΔ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃΔᐃⵠΔⵠⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆΔΔᐃⵠⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Totem"
      }, {
        id: 231,
        ⲆΔᐃ: ⵠᐃ.ᐃΔⲆΔᐃⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃᐃⵠΔΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ΔΔᐃⵠΔΔⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⵠⵠⵠΔΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Big Pile of Sand"
      }, {
        id: 232,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⵠⲆᐃⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⲆΔΔⲆᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆΔᐃⵠΔⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆΔΔⲆᐃⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Big Pile of Dirt"
      }, {
        id: 235,
        ⲆΔᐃ: ⵠᐃ.ΔΔΔⲆⵠⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.Δⵠᐃⵠⵠᐃⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠΔⲆⲆᐃΔⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⵠⵠᐃᐃⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Sandstone"
      }, {
        id: 29,
        ⲆΔᐃ: ⵠᐃ.ⵠΔⵠᐃᐃΔΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔΔⲆⵠⵠⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃΔⲆⲆᐃⲆᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔᐃⲆᐃⲆΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Pixelbitie",
        name: "Lollipop 1"
      }, {
        id: 30,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆᐃⲆⵠⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠᐃⵠⲆΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃΔⲆⲆⲆⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃᐃⲆⵠΔΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Lollipop 2"
      }, {
        id: 31,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⲆΔⵠⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠΔΔΔΔⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠΔΔⲆᐃᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃΔᐃⲆΔΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Lollipop 3"
      }, {
        id: 32,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃΔⲆΔⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔⲆᐃⲆⵠΔ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⵠⲆⲆⵠⵠᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃᐃΔᐃᐃⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Lollipop 4"
      }, {
        id: 33,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆⲆⲆᐃᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠΔΔΔᐃⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⵠΔᐃΔΔⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆᐃⵠⲆⲆΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Sushui",
        name: "Yellow Bird"
      }, {
        id: 34,
        ⲆΔᐃ: ⵠᐃ.ⵠΔᐃⵠⲆΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠⲆᐃⵠⲆᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆⵠᐃⲆΔⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⲆⲆᐃΔⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Sushui",
        name: "Red Bird"
      }, {
        id: 35,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆⵠⲆⲆⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠΔᐃⵠᐃⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠᐃᐃᐃᐃΔΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔΔⵠⲆᐃⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Sushui",
        name: "Blue Bird"
      }, {
        id: 37,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃᐃΔᐃⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⲆΔᐃᐃⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃᐃᐃⵠΔΔΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔᐃⵠⵠΔⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Winter",
        name: "Owl"
      }, {
        id: 52,
        ⲆΔᐃ: ⵠᐃ.ᐃΔΔΔⲆⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⲆΔᐃⵠⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆᐃᐃⲆⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆΔⵠⵠⲆⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Nemo"
      }, {
        id: 53,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⲆᐃᐃⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠᐃΔΔᐃΔ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⵠⲆᐃⵠᐃⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⲆᐃΔⲆⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mr. Bread"
      }, {
        id: 74,
        ⲆΔᐃ: ⵠᐃ.ⲆΔΔΔΔⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃⵠΔⵠᐃᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠΔΔⵠΔΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔᐃᐃⲆⲆΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Communist & Taco4Life",
        name: "Mr. Bread 2"
      }, {
        id: 75,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆᐃᐃⵠᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠⵠⲆⲆⲆⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆᐃⵠΔⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⲆᐃⵠⵠᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Communist & Taco4Life",
        name: "Mr. Bread 3"
      }, {
        id: 60,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆΔⵠΔᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃⲆⵠⲆΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠΔᐃᐃⲆΔⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⲆᐃⲆⵠΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Red Berry"
      }, {
        id: 61,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⵠᐃⲆᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.Δⵠⵠᐃᐃⵠᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠΔΔΔⲆⲆⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⵠᐃΔⵠⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Old Berry"
      }, {
        id: 70,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⲆΔᐃⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⵠⵠⵠⵠᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⵠᐃᐃᐃⵠⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆᐃⵠᐃᐃΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Cake"
      }, {
        id: 71,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠΔⵠⵠⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⲆᐃΔΔⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆᐃⲆⵠⵠⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆΔΔⵠⲆⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Christmas Cake"
      }, {
        id: 77,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆΔⵠΔⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆΔΔᐃⵠⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆΔᐃᐃΔᐃⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⲆᐃᐃΔⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Pancakez",
        name: "Mr. Pancake"
      }, {
        id: 87,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠΔⲆⲆⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠᐃⲆΔΔⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠᐃⵠⲆᐃⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃⵠΔΔⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Mr. Taco"
      }, {
        id: 78,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃᐃⲆᐃᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⲆΔⵠⲆΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠⵠⵠΔᐃΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⲆⲆᐃΔΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Mr. Bottle"
      }, {
        id: 79,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⵠⲆᐃΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃᐃΔᐃΔΔ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆⵠⲆΔΔΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⲆⲆΔᐃᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Mr. Bottle 2"
      }, {
        id: 97,
        ⲆΔᐃ: ⵠᐃ.ΔᐃᐃⲆⵠⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃⵠΔⵠⲆⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ΔΔⲆⲆΔᐃⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃΔⵠⲆᐃⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Pink Rabbit"
      }, {
        id: 102,
        ⲆΔᐃ: ⵠᐃ.ⲆΔⲆⲆⵠΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⵠΔᐃⵠᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ΔᐃⲆⵠΔⵠᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⲆⵠᐃᐃᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "pizza wa",
        name: "Marshmallow"
      }, {
        id: 107,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠΔⵠⲆΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠΔⵠᐃᐃⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ΔᐃΔⲆΔᐃⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⲆⲆᐃᐃⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Fox"
      }, {
        id: 132,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃΔᐃⵠⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔⵠΔⲆΔΔ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⵠⵠΔⵠᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃᐃⲆΔⵠᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Raccoon"
      }, {
        id: 111,
        ⲆΔᐃ: ⵠᐃ.ᐃΔⲆᐃᐃΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠᐃᐃΔⲆⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⵠᐃⵠᐃΔΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆᐃΔᐃⵠᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "pizza wa",
        name: "Cloud"
      }, {
        id: 113,
        ⲆΔᐃ: ⵠᐃ.ΔΔⲆᐃⵠᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠⵠΔⵠᐃⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆΔᐃⵠᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⵠΔⵠᐃⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "pizza wa",
        name: "Moon"
      }, {
        id: 117,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠΔᐃⲆⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆΔⲆⵠᐃⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ΔΔᐃΔΔⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆΔᐃⲆⲆᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Mr. Panda"
      }, {
        id: 118,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆΔᐃᐃᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃΔΔΔⲆⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⲆⲆⲆᐃⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⵠⲆΔΔᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Mr. Strawberry"
      }, {
        id: 119,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆΔᐃΔⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⲆΔΔⵠᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠᐃⵠⲆᐃⲆⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔΔⵠᐃΔⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito & Sushuui",
        name: "Mummy"
      }, {
        id: 122,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆᐃⲆΔᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔΔΔᐃⵠΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⲆⵠΔⵠᐃⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃΔⲆΔᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Dino"
      }, {
        id: 127,
        ⲆΔᐃ: ⵠᐃ.ΔΔⲆΔΔⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔᐃΔⵠᐃᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠᐃΔⲆΔⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔᐃⲆⲆᐃⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "MADBalgouthi",
        name: "Mr. Koala"
      }, {
        id: 160,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆⵠⵠᐃⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆⵠᐃⲆᐃⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃᐃᐃⲆⲆᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⲆⲆⵠΔᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Bottle Protection"
      }, {
        id: 162,
        ⲆΔᐃ: ⵠᐃ.ΔⲆⵠⲆΔⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔᐃⲆΔⲆᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆᐃⲆⵠⵠᐃⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔΔⲆⵠⲆⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "CrysTal",
        name: "Leaf Man"
      }, {
        id: 166,
        ⲆΔᐃ: ⵠᐃ.ΔⲆⵠⲆⵠΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔⵠΔΔΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⲆΔⵠΔⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔᐃΔⲆⵠᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "pizza wa",
        name: "Bubble"
      }, {
        id: 174,
        ⲆΔᐃ: ⵠᐃ.ᐃΔⵠᐃⵠᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆᐃΔᐃⵠᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⵠⵠΔⲆⵠᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔᐃᐃᐃΔⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "upfiz",
        name: "Potato"
      }, {
        id: 171,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃⲆΔⵠⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠⲆᐃᐃⵠⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⵠᐃⵠΔⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃᐃⵠΔⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "aloner",
        name: "Axolotl"
      }, {
        id: 178,
        ⲆΔᐃ: ⵠᐃ.ΔⵠⲆⵠᐃᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⵠᐃΔⲆⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ΔΔⵠⲆΔᐃⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⵠⲆΔᐃⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Rusted Machine"
      }, {
        id: 179,
        ⲆΔᐃ: ⵠᐃ.ΔⲆΔᐃⲆᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔᐃΔΔⲆⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆⵠᐃⲆᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⵠⵠᐃΔⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Starving Machine"
      }, {
        id: 181,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⲆⵠΔⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⲆᐃΔᐃⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠᐃΔΔⲆΔⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔᐃⲆᐃᐃⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Night Stars"
      }, {
        id: 191,
        ⲆΔᐃ: ⵠᐃ.ⵠΔⵠⵠᐃⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔᐃⲆᐃⲆΔ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⵠⲆⵠᐃⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⵠΔᐃᐃⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Blue Jay"
      }, {
        id: 198,
        ⲆΔᐃ: ⵠᐃ.ΔⲆΔⲆⵠΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃⲆⵠⵠΔΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠΔⵠᐃⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃᐃⵠΔΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "AWTP",
        name: "Dave"
      }, {
        id: 200,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⵠᐃΔⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ΔΔᐃⲆᐃⵠΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠⲆᐃⲆᐃⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⵠᐃⲆⵠᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Jinty",
        name: "Smug"
      }, {
        id: 203,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆΔⵠⲆΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆⵠⲆΔΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆᐃⵠⵠᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⲆᐃΔⲆΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Reclaimed"
      }, {
        id: 204,
        ⲆΔᐃ: ⵠᐃ.ⵠΔΔⲆⲆⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆⵠⲆΔⲆⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⲆᐃⵠⵠⲆᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⵠᐃᐃΔⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Legacy Wolf"
      }, {
        id: 211,
        ⲆΔᐃ: ⵠᐃ.ΔⲆⵠΔΔΔΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃⲆⲆᐃΔⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ΔΔⲆΔⲆⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆᐃᐃᐃΔᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Starver of the Seas"
      }, {
        id: 213,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠΔᐃⵠⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⵠⲆΔᐃⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠΔΔᐃΔᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠΔΔⵠᐃⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Ice"
      }, {
        id: 219,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃᐃΔⵠΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃᐃⲆⵠⲆΔ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⲆΔΔΔⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔΔᐃⲆⵠⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Ramil",
        name: "Sandwich Cookie"
      }, {
        id: 221,
        ⲆΔᐃ: ⵠᐃ.ΔᐃΔⲆᐃΔΔ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃⵠᐃⲆΔⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⲆⵠⲆᐃⵠᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆᐃⲆⵠⲆΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Purple Geode"
      }, {
        id: 222,
        ⲆΔᐃ: ⵠᐃ.ⲆΔⲆⲆᐃⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔⵠᐃⲆΔⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⵠΔⵠᐃⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃᐃⵠΔⵠⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Cyan Geode"
      }, {
        id: 223,
        ⲆΔᐃ: ⵠᐃ.ⲆΔᐃΔᐃᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⲆΔⵠΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠⲆⵠⵠⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⲆᐃᐃΔⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Yellow Geode"
      }, {
        id: 228,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃⲆⵠᐃⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠⵠⲆⲆⵠⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ΔᐃⵠⲆΔⵠⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⵠⲆᐃⲆⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Furnace Head"
      }, {
        id: 229,
        ⲆΔᐃ: ⵠᐃ.ᐃΔᐃⵠᐃⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⲆᐃᐃⲆⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⲆⲆⵠᐃᐃⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⲆⲆⲆⲆᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Bag"
      }, {
        id: 227,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃᐃΔᐃᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⲆΔᐃᐃⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆΔⵠΔΔΔΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃΔⵠᐃΔᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Lit Furnace Head"
      }, {
        id: 25,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⲆⵠᐃⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠⵠᐃΔⵠΔ,
        ᐃⵠΔΔ: ⵠᐃ.ΔᐃⵠΔⵠⲆᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔΔⵠΔΔᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Pixelbitie",
        name: "Test Dummy"
      }, {
        id: 41,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃᐃⲆᐃΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⵠⲆⵠⲆⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆᐃⵠⲆⲆⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⵠΔⲆΔⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "pizza wa",
        name: "Star-ver"
      }, {
        id: 43,
        ⲆΔᐃ: ⵠᐃ.ΔⲆⲆⲆᐃⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔΔΔⵠᐃΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⲆⲆⲆΔⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⲆⲆΔⵠⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Communist",
        name: "Starver Chest"
      }, {
        id: 88,
        ⲆΔᐃ: ⵠᐃ.ΔⲆⵠΔⵠⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆᐃⲆⲆᐃⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠΔᐃᐃⵠᐃΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⵠΔⲆᐃΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Communist",
        name: "Starver Workbench"
      }, {
        id: 121,
        ⲆΔᐃ: ⵠᐃ.ΔⵠᐃⲆΔΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃⲆΔⲆᐃⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃΔⵠⵠⲆⵠⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔᐃⲆⲆΔΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "MADBalgouthi",
        name: "Fish"
      }, {
        id: 39,
        ⲆΔᐃ: ⵠᐃ.ΔⵠⲆᐃᐃᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆᐃⲆⲆΔⲆ,
        ᐃⵠΔΔ: ⵠᐃ.Δⵠⵠᐃⵠᐃⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆᐃΔΔᐃⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Negligent4Dia",
        name: "Crab"
      }, {
        id: 40,
        ⲆΔᐃ: ⵠᐃ.ΔΔᐃΔΔⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆᐃΔᐃⲆⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆΔΔᐃⲆⲆⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆΔᐃᐃⵠⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Negligent4Dia",
        name: "Piranha"
      }, {
        id: 36,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠᐃⵠⵠⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠᐃΔⲆⲆⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆΔⲆᐃᐃΔΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⲆᐃᐃⵠⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Winter Fox"
      }, {
        id: 69,
        ⲆΔᐃ: ⵠᐃ.ⲆΔΔⲆⵠⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃᐃΔᐃᐃⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆᐃΔΔᐃⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⲆᐃⲆⲆΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Zed",
        name: "Baby Foxy"
      }, {
        id: 51,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃᐃᐃⵠⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆⲆⵠⵠΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ΔΔⲆᐃᐃᐃΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠΔΔΔⲆΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "HOWI",
        name: "Winter Bear"
      }, {
        id: 133,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⲆⵠⲆⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆΔⲆⲆⵠᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ΔΔⵠⲆⲆⲆⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⵠᐃⵠⵠᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Hawk"
      }, {
        id: 55,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠⵠᐃᐃⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠⲆᐃⲆⲆᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⵠᐃⲆΔΔⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⵠΔⵠΔᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Nice Little Yuki"
      }, {
        id: 68,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃᐃⵠⲆᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠΔⲆᐃᐃΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⲆⲆⵠᐃⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃᐃⵠΔΔⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Baby Yuki"
      }, {
        id: 62,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⲆⵠⲆᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠᐃⵠⲆⲆⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆᐃΔΔᐃⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠΔⲆᐃⵠᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mr. Carrot"
      }, {
        id: 56,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆΔΔⵠᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃΔⵠᐃᐃⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆᐃⲆⲆᐃⵠΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⵠⵠⲆⲆⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Bat Limax"
      }, {
        id: 72,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠΔⵠᐃΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠΔⲆΔⵠⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⵠᐃᐃⲆᐃⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆΔⵠΔⲆⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Mr. Crate"
      }, {
        id: 73,
        ⲆΔᐃ: ⵠᐃ.ΔᐃᐃⲆⲆⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆΔΔΔⲆⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠΔⵠᐃΔΔᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⲆᐃⲆⵠⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Taco4Life & eogito",
        name: "Mr. Spider"
      }, {
        id: 93,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠⵠΔΔᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔᐃⲆⵠΔⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⵠΔΔᐃᐃⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃⲆⵠᐃⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Anyone want to play?",
        name: "Mr. Spider 2"
      }, {
        id: 82,
        ⲆΔᐃ: ⵠᐃ.ⲆΔⲆⲆⵠⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆΔⵠⲆⵠΔ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆᐃⲆⵠⲆᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃᐃΔᐃΔΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mr. Blue Starfish"
      }, {
        id: 83,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃᐃΔᐃⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔⲆⵠᐃᐃΔ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⵠⵠⵠᐃᐃⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⵠⲆⲆᐃⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mr. Orange Starfish"
      }, {
        id: 84,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆⲆⲆᐃᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠᐃᐃΔⵠⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠᐃⲆⲆⵠᐃΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆΔⵠⲆΔⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mr. Pink Starfish"
      }, {
        id: 85,
        ⲆΔᐃ: ⵠᐃ.ΔΔᐃΔΔⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆΔⵠᐃⵠΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆᐃᐃⵠΔⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⵠⲆⲆᐃⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mr. ShellMauve"
      }, {
        id: 86,
        ⲆΔᐃ: ⵠᐃ.ⲆΔⵠⲆⲆΔΔ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃΔⵠΔⲆⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ΔΔⲆⲆΔΔⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⲆⵠᐃⲆⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mr. Shell Bead"
      }, {
        id: 96,
        ⲆΔᐃ: ⵠᐃ.ΔⵠΔⲆⲆΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⲆⲆⵠⲆᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠΔᐃⵠⵠⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃΔⵠΔⵠΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Fukss",
        name: "Angry Crab"
      }, {
        id: 98,
        ⲆΔᐃ: ⵠᐃ.ΔΔⲆⵠᐃⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆᐃⲆⵠΔⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆᐃⵠᐃⲆⵠᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⵠᐃⲆⲆᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Penguin"
      }, {
        id: 126,
        ⲆΔᐃ: ⵠᐃ.ⵠΔⵠⵠⲆΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠΔᐃⵠᐃⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⲆᐃⲆΔⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆΔⵠⵠⵠΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Anyone want to play?",
        name: "Mr. Boar"
      }, {
        id: 145,
        ⲆΔᐃ: ⵠᐃ.ΔΔⲆΔΔⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⲆᐃⲆⵠⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⲆⲆⲆᐃΔΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆᐃΔⵠΔⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "I saw you"
      }, {
        id: 146,
        ⲆΔᐃ: ⵠᐃ.ⲆΔΔΔΔⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃᐃⲆⲆⵠⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ΔᐃᐃᐃⲆⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔᐃⵠᐃⵠᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "It was funny"
      }, {
        id: 147,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⵠⵠΔⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆᐃⵠⵠᐃⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ΔΔᐃⲆᐃⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⵠⲆⲆⲆⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "You can scream"
      }, {
        id: 158,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⲆᐃΔΔΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆΔᐃⲆⲆΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⲆΔΔΔⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠΔΔΔᐃⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Mr. Book"
      }, {
        id: 163,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃΔⵠΔᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⲆⵠⲆⵠᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⲆΔⲆᐃⵠⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃΔⲆⲆΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Anyone want to play?",
        name: "Mr. Mammoth"
      }, {
        id: 164,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⵠⵠⲆᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆΔⲆΔᐃΔ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⵠⲆΔΔⵠΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃⵠⵠⲆΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "SoOw",
        name: "Mr. Mammoth 2"
      }, {
        id: 161,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠΔⵠΔⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔΔᐃᐃⲆⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⵠⲆΔᐃᐃΔ,
        ᐃⲆⵠΔ: ⵠᐃ.Δᐃᐃⵠⵠᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Nightmare"
      }, {
        id: 168,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠᐃⵠⵠⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆΔⵠᐃⲆᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⲆⲆⵠᐃΔⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃᐃᐃᐃᐃᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "pizza wa",
        name: "Shiny Crystal"
      }, {
        id: 173,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠᐃᐃᐃⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔⲆⲆΔⵠΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆᐃⵠᐃⲆᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⲆⵠᐃΔⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "pizza wa",
        name: "Water skin"
      }, {
        id: 175,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆΔⵠΔΔΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃⵠⵠΔⲆΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⲆᐃΔⲆΔᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆΔⲆᐃⵠΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Fall Berry Bush Starver"
      }, {
        id: 176,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆⵠⵠΔⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠΔᐃⲆⲆΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⲆⲆΔⵠⲆᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⲆΔⵠᐃΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Christmas Berry Bush Starver"
      }, {
        id: 177,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆΔⵠⵠΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔⲆⲆᐃΔΔ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⵠⲆᐃⵠΔⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠΔΔΔⵠⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Berry Bush Starver"
      }, {
        id: 182,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆΔⲆᐃΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠⵠΔᐃᐃᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠΔⵠΔΔⲆⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⲆⲆᐃⵠⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Tamer"
      }, {
        id: 185,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⲆᐃⲆᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠΔᐃⵠⵠⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠᐃΔⵠΔΔᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⲆᐃΔΔΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Tamon Wolf"
      }, {
        id: 186,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆⲆⲆᐃᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔΔⲆᐃⵠⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ΔΔⵠⲆⵠᐃΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃⲆᐃΔⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Tamon Snow Wolf"
      }, {
        id: 187,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃΔΔⲆΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃⵠᐃΔᐃᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃᐃⲆⲆΔⲆⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃΔⲆᐃⲆᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Tamon Rabbit"
      }, {
        id: 188,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⵠΔΔᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃᐃⵠⵠΔⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⵠⲆΔᐃⵠΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃΔΔⲆⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Tamon Snow Rabbit"
      }, {
        id: 189,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠᐃⵠᐃⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠΔᐃⵠⵠᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⵠⵠⵠᐃΔⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.Ⲇⵠⵠⵠᐃⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Tamon Bear"
      }, {
        id: 190,
        ⲆΔᐃ: ⵠᐃ.ΔΔⲆⵠΔᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⵠᐃᐃᐃᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⲆΔⲆⵠⲆⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⵠΔΔΔⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Tamon Polar Bear"
      }, {
        id: 196,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⲆⵠⵠΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃΔⲆⲆⲆⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⵠΔᐃΔᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆᐃᐃⲆΔⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Crying Angel"
      }, {
        id: 202,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆⵠⲆᐃΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⲆΔᐃΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⲆᐃⲆⵠⲆⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠΔᐃⲆᐃⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Tamon Fennec"
      }, {
        id: 207,
        ⲆΔᐃ: ⵠᐃ.ΔⲆᐃΔⵠᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆΔΔΔᐃⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠⵠΔᐃΔᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⲆΔΔⲆᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Decay"
      }, {
        id: 212,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠⲆⲆⲆⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⲆⵠᐃⵠΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠⵠⲆⲆᐃⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⲆᐃⵠⲆᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Pillow"
      }, {
        id: 218,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⲆⵠⲆⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⲆⲆⲆⵠⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⲆⵠᐃᐃᐃⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔΔΔᐃΔⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Exotic"
      }, {
        id: 224,
        ⲆΔᐃ: ⵠᐃ.ΔΔⲆᐃⵠᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆᐃᐃΔΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠΔΔᐃⲆⲆⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⵠΔⵠΔᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Apple"
      }, {
        id: 225,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆᐃᐃⲆΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠᐃᐃⲆΔⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ΔΔⲆⵠᐃⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃΔᐃⲆΔⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Golden Apple"
      }, {
        id: 233,
        ⲆΔᐃ: ⵠᐃ.ⲆΔΔⲆⵠΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠⲆⲆⵠⵠΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠᐃⵠⲆⲆⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⵠⵠⵠⲆⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Lava Cube"
      }, {
        id: 234,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆⲆᐃᐃΔΔ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⲆⲆᐃⵠΔ,
        ᐃⵠΔΔ: ⵠᐃ.ΔᐃⵠᐃⵠⲆⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆᐃΔΔⵠΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Dragon Cube"
      }, {
        id: 42,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⵠΔⲆⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃⲆᐃᐃⵠΔ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⵠⵠᐃⲆᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃΔⲆΔⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Winter",
        name: "Will-O'-The-Wisp"
      }, {
        id: 91,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⲆⵠΔⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠΔΔⵠΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⲆᐃⲆᐃⵠΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃᐃⵠⲆⲆⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "ExpertyAnimations",
        name: "Flame"
      }, {
        id: 26,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⵠΔΔⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆᐃⲆⲆⲆΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠΔΔᐃⲆⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠΔⲆⲆᐃⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Be a Tree"
      }, {
        id: 38,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠΔΔⲆⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠΔⲆᐃⲆⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⲆⲆⲆⲆᐃΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⵠΔⲆⲆⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Winter",
        name: "Toxic Mutant"
      }, {
        id: 50,
        ⲆΔᐃ: ⵠᐃ.ᐃΔΔⲆⵠΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠⵠᐃΔᐃⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⲆΔᐃᐃⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⲆⲆⵠΔᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Communist",
        name: "Mr. Tomato"
      }, {
        id: 54,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆᐃᐃᐃⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⲆᐃᐃⵠΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆᐃⵠⲆΔᐃΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⲆᐃⵠⵠᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mr. Mauve, the Lapa"
      }, {
        id: 57,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠᐃΔΔᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆᐃΔᐃΔΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆᐃᐃⲆⵠⵠᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⵠΔⵠᐃΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Golden Fish"
      }, {
        id: 64,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆᐃⵠΔⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔᐃⵠᐃᐃΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆᐃᐃⲆⲆⵠⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⵠᐃⵠᐃᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "LapaMauve"
      }, {
        id: 65,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⵠᐃⲆΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔᐃⵠᐃⲆΔ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃᐃᐃΔΔⲆᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⵠᐃΔⲆⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "LapaMauve "
      }, {
        id: 92,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠΔΔΔⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃΔⵠᐃⲆᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ΔᐃⲆᐃΔⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆΔΔⲆΔⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mr. Burger"
      }, {
        id: 66,
        ⲆΔᐃ: ⵠᐃ.ⲆΔᐃⲆΔⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃᐃᐃᐃΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ΔᐃᐃΔⲆΔⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃᐃⵠⲆᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "pizza wa",
        name: "Tropical Starver"
      }, {
        id: 80,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⵠⲆΔⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠΔⲆⵠΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⲆⲆᐃᐃⲆⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔᐃⲆⲆΔᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mr. ShellPink"
      }, {
        id: 81,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆⵠⵠⲆⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆΔᐃᐃΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆΔⲆᐃΔⵠΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠΔᐃⵠⵠⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mr. OranShell"
      }, {
        id: 99,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠᐃⲆᐃΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆΔⲆⲆⲆⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆⲆⲆᐃⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃᐃⵠᐃⲆⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Pepe"
      }, {
        id: 100,
        ⲆΔᐃ: ⵠᐃ.ΔΔⲆᐃΔΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⲆΔⲆⲆΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⲆⵠᐃⲆⵠⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⵠΔⲆⵠᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "fatant",
        name: "Mr. Ant"
      }, {
        id: 115,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠⵠⲆⲆⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔⵠᐃⵠⵠⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠΔⵠᐃⵠᐃⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠΔΔΔⵠⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "MADBalgouthi",
        name: "Mr. Watermelon"
      }, {
        id: 101,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⲆⲆⲆⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆᐃΔΔⵠᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠᐃΔⲆⵠⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔΔΔΔⲆⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Mr. Thornbush"
      }, {
        id: 131,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆΔⵠᐃΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔΔⵠΔⵠΔ,
        ᐃⵠΔΔ: ⵠᐃ.ΔᐃᐃⵠⵠᐃΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⵠⲆΔⲆⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Cthulhu"
      }, {
        id: 143,
        ⲆΔᐃ: ⵠᐃ.ᐃΔᐃᐃⲆⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃⲆᐃⵠᐃⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆᐃⲆΔⲆⵠᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⲆᐃⲆⲆⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Mr. Cactus"
      }, {
        id: 144,
        ⲆΔᐃ: ⵠᐃ.ΔⲆᐃΔⵠᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃⲆΔΔᐃⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠᐃᐃⲆⵠᐃⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃΔΔΔΔⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Momo"
      }, {
        id: 180,
        ⲆΔᐃ: ⵠᐃ.ⲆΔΔΔΔᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠⲆⵠᐃᐃΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠᐃⲆⲆΔᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃΔⲆᐃΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Scream"
      }, {
        id: 193,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠᐃᐃᐃⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠᐃⵠⲆᐃⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃᐃⲆⵠⵠᐃΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⵠΔᐃᐃⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Tamon Dragon"
      }, {
        id: 195,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⵠΔᐃᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃᐃᐃᐃⲆᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⲆΔⵠᐃΔΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⲆⵠΔⲆΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Forest Spirit"
      }, {
        id: 197,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠⵠΔᐃⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠΔⵠⵠⲆΔ,
        ᐃⵠΔΔ: ⵠᐃ.Δᐃᐃᐃᐃᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⲆᐃⵠⵠⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Evil Goat"
      }, {
        id: 199,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃⵠⵠⵠⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃⲆᐃⲆΔΔ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃΔΔⵠⲆᐃΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃᐃΔᐃⵠⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Rotten"
      }, {
        id: 201,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆΔⲆᐃᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⲆΔⵠⵠᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⵠᐃᐃΔΔⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠΔⲆΔᐃⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Fossil"
      }, {
        id: 205,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆΔᐃⵠΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠⲆΔⲆΔⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⵠⲆᐃΔⵠⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃΔΔΔΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Tamon Spectrum"
      }, {
        id: 210,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠΔᐃⲆⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃΔΔⵠⵠᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠΔΔⵠⵠⵠΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠΔᐃⵠΔᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Helpy",
        name: "Black Cat"
      }, {
        id: 214,
        ⲆΔᐃ: ⵠᐃ.ΔⵠᐃᐃⲆⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃᐃᐃⲆⲆⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆΔⵠⵠᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⵠⵠᐃΔᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Tamon Lynx"
      }, {
        id: 215,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠΔⵠⵠⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆᐃΔΔΔⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠΔᐃΔⵠⵠΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃΔⲆⵠⵠΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Tamon Warg"
      }, {
        id: 217,
        ⲆΔᐃ: ⵠᐃ.ⵠΔᐃΔΔᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠⲆΔᐃΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆΔⵠⵠⵠⲆⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⵠⵠⲆᐃⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Tamon Menhir"
      }, {
        id: 95,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆⵠⵠⵠⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃᐃᐃⲆⵠⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⲆⲆⲆΔⲆⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔΔᐃᐃᐃⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Mr. Garlic"
      }, {
        id: 76,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆⵠᐃΔᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔΔΔⵠΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆᐃⵠᐃΔᐃⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⵠⵠⲆⵠᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Winter",
        name: "Robot Dragon"
      }, {
        id: 44,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆᐃⲆⲆᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃΔΔᐃᐃⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃΔⵠΔΔᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⵠΔⵠⲆⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Winter",
        name: "Lava Dragon Version 1"
      }, {
        id: 90,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠⲆΔᐃⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆᐃⵠⲆΔⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⲆⲆⵠⲆᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⵠⲆⵠᐃΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "ExpertyAnimations",
        name: "Lava Dragon Version 2"
      }, {
        id: 124,
        ⲆΔᐃ: ⵠᐃ.ΔΔᐃᐃⵠⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠᐃⲆᐃⵠⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⵠΔⲆΔⲆⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⲆⵠᐃΔⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Lava Dragon Version 3"
      }, {
        id: 45,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠᐃⲆᐃΔΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆΔⲆⵠⲆΔ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆᐃᐃΔⵠⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃᐃⵠⵠⵠΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Sushui",
        name: "Ice Dragon Version 1"
      }, {
        id: 46,
        ⲆΔᐃ: ⵠᐃ.ΔⲆⵠΔⲆΔΔ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃⵠᐃΔⵠⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠⵠⵠΔⵠᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆᐃⵠⲆⵠᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Winter",
        name: "Ice Dragon Version 2"
      }, {
        id: 108,
        ⲆΔᐃ: ⵠᐃ.ⵠΔⵠᐃⵠΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔΔΔᐃⵠᐃΔ,
        ᐃⵠΔΔ: ⵠᐃ.ΔᐃᐃⵠΔⲆΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔΔⵠⲆᐃⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Ice Dragon Version 3"
      }, {
        id: 123,
        ⲆΔᐃ: ⵠᐃ.ΔᐃᐃΔΔᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⵠᐃⲆΔᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃᐃᐃⵠᐃᐃⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⲆᐃᐃΔΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Baby Dragon Version 1"
      }, {
        id: 128,
        ⲆΔᐃ: ⵠᐃ.ⵠΔᐃᐃᐃⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔᐃⲆⵠᐃᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ΔᐃΔᐃᐃⲆⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔᐃⵠΔⲆᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "MADBalgouthi",
        name: "Baby Dragon Version 2"
      }, {
        id: 125,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⲆⲆΔⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃᐃⵠΔⵠΔ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⵠⵠᐃᐃⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⵠΔⲆᐃⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Baby Lava"
      }, {
        id: 47,
        ⲆΔᐃ: ⵠᐃ.ⲆΔⵠΔΔΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔΔⵠⵠᐃⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⲆΔΔⵠⵠⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⵠⲆⲆⵠⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Kraken"
      }, {
        id: 129,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃᐃⲆᐃⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆᐃⵠᐃⲆⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠᐃΔᐃΔᐃⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃⵠⲆᐃᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Sandworm"
      }, {
        id: 63,
        ⲆΔᐃ: ⵠᐃ.ⵠΔᐃᐃΔⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠΔᐃⲆᐃⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠᐃⵠᐃⵠᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔΔΔΔⵠΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mr. Golden Bread"
      }, {
        id: 67,
        ⲆΔᐃ: ⵠᐃ.ᐃΔΔᐃⲆⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃᐃⲆⲆΔⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆᐃΔᐃᐃⲆᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⵠᐃⵠⵠΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "ForgottenHeroe",
        name: "Starver Ores"
      }, {
        id: 130,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠΔΔⲆΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔⵠⲆᐃᐃⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠᐃΔⵠⵠⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠⵠᐃᐃⲆⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Poo"
      }, {
        id: 89,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠⵠⲆⲆⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃᐃΔΔΔΔ,
        ᐃⵠΔΔ: ⵠᐃ.ΔᐃΔⲆᐃⲆⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔᐃⵠⲆⵠⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Poinet",
        name: "Volcano Starver"
      }, {
        id: 112,
        ⲆΔᐃ: ⵠᐃ.ᐃΔΔᐃⵠᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆᐃᐃⵠⲆⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠⵠⲆⲆΔᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⲆⲆⵠⵠⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Lava Starver"
      }, {
        id: 183,
        ⲆΔᐃ: ⵠᐃ.ΔⵠⵠⲆΔᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆΔΔᐃⵠᐃ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠⵠΔⲆΔⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠᐃⵠⵠᐃⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Revaster"
      }, {
        id: 192,
        ⲆΔᐃ: ⵠᐃ.ΔⵠⵠⲆΔᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔᐃᐃΔΔΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠΔⵠⵠⵠⲆᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆᐃᐃΔᐃⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Awakened"
      }, {
        id: 194,
        ⲆΔᐃ: ⵠᐃ.ⵠΔⵠΔΔⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ΔΔᐃⲆΔⲆⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⵠᐃΔΔⲆⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃᐃⵠΔΔᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Tamon Ice Dragon"
      }, {
        id: 236,
        ⲆΔᐃ: ⵠᐃ.ΔΔΔⲆⲆⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆᐃΔᐃΔΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆᐃᐃⵠΔⵠᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⲆᐃⵠⵠⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Crystal Dragon"
      }, {
        id: 208,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃᐃⲆΔᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠᐃΔᐃΔⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ⵠⵠⵠⵠΔΔⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔΔΔⲆΔᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Bone Dragon"
      }, {
        id: 216,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⵠⵠⵠⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠⵠΔᐃⲆⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃᐃⲆᐃᐃⲆⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ⵠΔⵠⲆⲆᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Tamon Warg Ghost"
      }, {
        id: 226,
        ⲆΔᐃ: ⵠᐃ.ᐃΔⲆΔΔⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔᐃΔΔΔⵠ,
        ᐃⵠΔΔ: ⵠᐃ.Ⲇⵠⵠⵠᐃᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⵠᐃΔⵠⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Cursed"
      }, {
        id: 48,
        ⲆΔᐃ: ⵠᐃ.ⲆΔⵠΔⲆⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃⵠᐃᐃΔⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ᐃⵠⲆⲆⲆⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⵠΔⲆΔⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⲆΔᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Robot"
      }, {
        id: 110,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆΔⵠⵠⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃᐃⲆⲆᐃΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⵠΔⵠΔΔΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⵠΔΔΔⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⲆΔᐃΔᐃⲆ,
        ⲆⲆⲆ: "pizza wa",
        name: "Blue Butterfly"
      }, {
        id: 157,
        ⲆΔᐃ: ⵠᐃ.ΔⲆΔΔⵠᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⲆΔⵠᐃΔ,
        ᐃⵠΔΔ: ⵠᐃ.ⲆⵠⲆⲆⲆᐃΔ,
        ᐃⲆⵠΔ: ⵠᐃ.ⲆⲆᐃⵠⵠⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⲆΔᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Yrifox"
      }, {
        id: 165,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠΔΔᐃΔΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆᐃΔⲆⵠⵠ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆᐃⲆⲆΔⵠ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃᐃΔⲆⲆᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⲆΔᐃΔᐃⲆ,
        ⲆⲆⲆ: "OmarJr13",
        name: "Blob Skin"
      }, {
        id: 237,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃⲆᐃΔᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆΔᐃⲆΔⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ΔΔⲆΔΔᐃᐃ,
        ᐃⲆⵠΔ: ⵠᐃ.ᐃⲆᐃⲆᐃⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⲆΔᐃΔᐃⲆ,
        ⲆⲆⲆ: "NotBonnie",
        name: "NotBonnie"
      }, {
        id: 238,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆⲆⵠᐃⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆⵠⵠᐃΔⲆ,
        ᐃⵠΔΔ: ⵠᐃ.ΔⲆᐃⵠⵠⵠⲆ,
        ᐃⲆⵠΔ: ⵠᐃ.ΔⲆⵠⲆΔⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⲆΔᐃΔᐃⲆ,
        ⲆⲆⲆ: "NotBonnie",
        name: "Cynder"
      }],
      ⵠᐃⵠⲆ: [{
        id: 0,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠΔⲆⵠΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⵠⲆⵠΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⵠⲆⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Bag 1"
      }, {
        id: 1,
        ⲆΔᐃ: ⵠᐃ.ΔᐃᐃᐃΔⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠⵠⵠⵠᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⵠⲆⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Old Bag"
      }, {
        id: 2,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆᐃⲆᐃⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔΔᐃⲆⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Bag 2"
      }, {
        id: 3,
        ⲆΔᐃ: ⵠᐃ.ᐃΔⵠⲆᐃⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆΔᐃⲆⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Bag 3"
      }, {
        id: 4,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆⲆᐃⲆΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆⵠΔᐃᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Bag 4"
      }, {
        id: 5,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠⵠⲆΔⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠᐃᐃᐃΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Bag 5"
      }, {
        id: 11,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⲆⲆⲆⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔΔΔⵠⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Wood Pickaxe Bag"
      }, {
        id: 19,
        ⲆΔᐃ: ⵠᐃ.ⵠΔᐃΔⵠⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠΔⲆⵠⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io ",
        name: "Wood Carrier"
      }, {
        id: 37,
        ⲆΔᐃ: ⵠᐃ.ΔⵠΔᐃΔⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⵠΔᐃⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Bag 6"
      }, {
        id: 39,
        ⲆΔᐃ: ⵠᐃ.ᐃΔᐃⲆᐃΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⵠⵠⵠⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Bag with Wooden Swords"
      }, {
        id: 44,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠⵠⲆⵠⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔⲆⵠᐃⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Communist",
        name: "Big Bag"
      }, {
        id: 7,
        ⲆΔᐃ: ⵠᐃ.ΔⲆΔⲆⵠⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⵠⲆΔⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Communist",
        name: "Bag 6"
      }, {
        id: 8,
        ⲆΔᐃ: ⵠᐃ.ᐃΔⲆΔⲆⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃΔⵠᐃᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Easter Bag"
      }, {
        id: 9,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆⲆᐃⵠΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔⲆΔⲆⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "pizza wa",
        name: "Star Bag"
      }, {
        id: 10,
        ⲆΔᐃ: ⵠᐃ.ⵠΔᐃⲆΔⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⲆⵠⲆΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "eogito",
        name: "Winter Bag"
      }, {
        id: 20,
        ⲆΔᐃ: ⵠᐃ.ⵠΔΔᐃⵠΔΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃⵠΔⲆᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io ",
        name: "Stone Carrier"
      }, {
        id: 24,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠΔΔⲆⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃΔᐃⵠⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "eogito",
        name: "Stone Pickaxe Bag"
      }, {
        id: 6,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆⲆⲆΔΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠΔⵠᐃᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Communist",
        name: "Bag Camouflage"
      }, {
        id: 38,
        ⲆΔᐃ: ⵠᐃ.ΔⵠΔⵠΔⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃᐃⲆᐃΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "eogito",
        name: "Bag with Stone Swords"
      }, {
        id: 54,
        ⲆΔᐃ: ⵠᐃ.ⵠΔⲆΔⵠⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⵠⵠᐃⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "eogito",
        name: "Cow Bag"
      }, {
        id: 59,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃⵠⲆⵠΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆΔΔᐃⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "CrysTal",
        name: "Starver Bag"
      }, {
        id: 62,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⵠΔⲆⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆΔᐃⲆⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "CrysTal",
        name: "Crystal Sky Bag"
      }, {
        id: 71,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃⵠⲆⵠⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆᐃⲆⲆⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Portable Furnace"
      }, {
        id: 78,
        ⲆΔᐃ: ⵠᐃ.ᐃΔⵠⲆⵠΔΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠᐃᐃⲆΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Crate Bag"
      }, {
        id: 13,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠᐃᐃⵠΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔᐃΔⵠⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "pizza wa",
        name: "Honey Pot"
      }, {
        id: 21,
        ⲆΔᐃ: ⵠᐃ.ΔᐃᐃⵠΔⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆⲆⵠⲆⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io ",
        name: "Gold Carrier"
      }, {
        id: 30,
        ⲆΔᐃ: ⵠᐃ.ᐃΔΔⵠΔᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔᐃΔⲆⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Gold Pickaxe Bag"
      }, {
        id: 29,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆⲆⲆⵠΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃᐃΔⵠⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Ariel",
        name: "Mr and Mrs Bakers"
      }, {
        id: 41,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⲆΔΔⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆΔⵠⲆΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Bag with Golden Swords"
      }, {
        id: 47,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⵠΔᐃΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃᐃⲆⵠΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Explorer Bag"
      }, {
        id: 51,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠᐃΔⲆΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆΔⵠⵠⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "pizza wa",
        name: "Bamboo Bag"
      }, {
        id: 53,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⲆⵠⵠⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔⵠⵠⲆΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Mummy Bag"
      }, {
        id: 58,
        ⲆΔᐃ: ⵠᐃ.ⵠΔᐃⵠΔᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠⵠⲆΔᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "MADBalgouthi",
        name: "Watermelon Bag"
      }, {
        id: 60,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⵠᐃΔΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃᐃⵠⵠΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Garlic Bag"
      }, {
        id: 61,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⵠΔΔΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⵠⲆΔᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Pumpkin Bag"
      }, {
        id: 64,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆΔᐃⵠᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆⲆᐃⵠᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "upfiz",
        name: "Oil Barel bag"
      }, {
        id: 67,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆⲆⲆᐃΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠᐃᐃΔⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "pizza wa",
        name: "Tree Bag"
      }, {
        id: 70,
        ⲆΔᐃ: ⵠᐃ.ΔΔⲆᐃⲆⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠΔⵠⵠᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Lit Portable Furnace"
      }, {
        id: 72,
        ⲆΔᐃ: ⵠᐃ.ᐃΔΔΔᐃⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⵠⲆⵠΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Christmas Berry Bush Bag"
      }, {
        id: 73,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆᐃⲆᐃᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⵠⵠⲆⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Berry Bush Bag"
      }, {
        id: 74,
        ⲆΔᐃ: ⵠᐃ.ⵠΔΔⵠΔⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃⲆᐃᐃⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Fall Berry Bush Bag"
      }, {
        id: 76,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆᐃᐃᐃⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠⲆΔΔΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Reclaimed Bag"
      }, {
        id: 14,
        ⲆΔᐃ: ⵠᐃ.ΔⵠⲆⲆⲆΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠⵠⵠΔⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "a Rabbit in my Bag"
      }, {
        id: 15,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⲆᐃⵠᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃΔⲆᐃⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Bird's nest"
      }, {
        id: 16,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⲆΔⵠⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆΔᐃⵠᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "a Fish on your Back"
      }, {
        id: 17,
        ⲆΔᐃ: ⵠᐃ.ΔⲆΔᐃᐃΔΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠⵠⲆᐃΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "a Squirrel in my Bag"
      }, {
        id: 22,
        ⲆΔᐃ: ⵠᐃ.ΔΔⵠΔⲆⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆⵠΔⲆⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io ",
        name: "Diamond Carrier"
      }, {
        id: 12,
        ⲆΔᐃ: ⵠᐃ.ΔΔⵠⲆᐃΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠΔⵠᐃᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Resources Bag"
      }, {
        id: 32,
        ⲆΔᐃ: ⵠᐃ.ⵠΔⵠⵠᐃⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔᐃⲆᐃᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Diamond Pickaxe Bag"
      }, {
        id: 40,
        ⲆΔᐃ: ⵠᐃ.ΔⲆⵠᐃⲆⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃⵠⲆⵠⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Bag with Diamond Swords"
      }, {
        id: 45,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⲆΔⲆᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⵠᐃᐃⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "My Cake Bag"
      }, {
        id: 46,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⵠⵠⵠⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔⲆⲆᐃΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "My Christmas Cake Bag"
      }, {
        id: 52,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⵠⲆⵠⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆᐃⲆᐃΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "MADBalgouthi",
        name: "Fish Bag"
      }, {
        id: 65,
        ⲆΔᐃ: ⵠᐃ.ΔⲆΔⲆⲆᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠΔΔΔᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "pizza wa",
        name: "Cloud Bag"
      }, {
        id: 68,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠⵠⵠΔⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆᐃᐃᐃⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "pizza wa",
        name: "Bee Bag"
      }, {
        id: 77,
        ⲆΔᐃ: ⵠᐃ.ΔᐃΔⵠⵠΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠᐃⲆΔᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Bag and Bedroll"
      }, {
        id: 80,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆⵠⲆΔⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆΔⵠΔᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Peasant's Bag"
      }, {
        id: 81,
        ⲆΔᐃ: ⵠᐃ.ΔΔᐃΔⲆⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔΔᐃⵠΔΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Probably Stolen Bag"
      }, {
        id: 48,
        ⲆΔᐃ: ⵠᐃ.ΔΔΔᐃΔᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⵠⲆΔⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "fatant",
        name: "Natural Bag"
      }, {
        id: 23,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⵠᐃΔⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠⵠΔᐃΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io ",
        name: "Amethyst Carrier"
      }, {
        id: 25,
        ⲆΔᐃ: ⵠᐃ.ⵠΔΔᐃΔΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃⵠⵠΔΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Amethyst Pickaxe Bag"
      }, {
        id: 28,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠΔⲆᐃⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃⵠⵠⵠⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Your Baby"
      }, {
        id: 33,
        ⲆΔᐃ: ⵠᐃ.ΔᐃᐃⲆᐃⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔⵠⵠΔⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "pizza wa",
        name: "Tropical Bag"
      }, {
        id: 43,
        ⲆΔᐃ: ⵠᐃ.ⵠΔᐃⵠⵠᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔᐃⵠⵠᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Bag with Amethyst Swords"
      }, {
        id: 35,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠΔᐃⲆᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆᐃᐃᐃⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Ice Bag"
      }, {
        id: 50,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠᐃΔⵠᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⵠΔⲆⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Thornbush Bag"
      }, {
        id: 56,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃᐃⲆᐃᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠⲆⲆᐃᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Autumn Bag"
      }, {
        id: 57,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃᐃᐃⲆΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔⲆⲆᐃⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Dino Egg Bag"
      }, {
        id: 66,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⲆⲆΔⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆᐃᐃⲆⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "pizza wa",
        name: "Magic Cloud Bag"
      }, {
        id: 69,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠᐃᐃΔᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⲆᐃΔⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "pizza wa",
        name: "Chest Bag"
      }, {
        id: 75,
        ⲆΔᐃ: ⵠᐃ.ⵠΔⲆΔᐃΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃⵠⲆⲆⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Tamon Spectum Bag"
      }, {
        id: 79,
        ⲆΔᐃ: ⵠᐃ.ᐃΔⲆΔᐃΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆΔⵠΔⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Winter Peasant's Bag"
      }, {
        id: 31,
        ⲆΔᐃ: ⵠᐃ.ⲆΔᐃⵠⲆⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⵠⵠᐃⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io ",
        name: "Reidite Carrier"
      }, {
        id: 18,
        ⲆΔᐃ: ⵠᐃ.ΔᐃᐃⵠΔᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃΔᐃⲆᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Winter",
        name: "Lava Bag"
      }, {
        id: 49,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃΔΔⲆΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆΔΔⲆⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Lava Bag 2"
      }, {
        id: 36,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆΔᐃⵠΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃᐃⲆⵠᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Dragon Bag"
      }, {
        id: 55,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠΔⲆΔⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃᐃΔΔⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Winter Ice Bag"
      }, {
        id: 26,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠΔⲆⲆᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠΔⲆⲆᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Reidite Pickaxe Bag"
      }, {
        id: 27,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆΔᐃᐃΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔⲆᐃΔⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Octopus Bowl"
      }, {
        id: 34,
        ⲆΔᐃ: ⵠᐃ.ᐃΔᐃΔⵠΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆⲆΔⵠⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Cave Bag"
      }, {
        id: 42,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃᐃΔⵠᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃⲆᐃⲆⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Bag with Reidite Swords"
      }, {
        id: 63,
        ⲆΔᐃ: ⵠᐃ.ΔⵠΔⵠⵠⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠᐃᐃⲆⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Engineer Bag"
      }],
      ᐃᐃⵠⵠΔ: [{
        id: 0,
        ⲆΔᐃ: ⵠᐃ.ΔⲆΔⵠΔΔΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔᐃⲆⲆⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⵠⲆⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Wooden Dead Box"
      }, {
        id: 1,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃⵠⲆⵠⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔΔⲆⲆᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⵠⲆⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Hidden item"
      }, {
        id: 2,
        ⲆΔᐃ: ⵠᐃ.ΔⲆⵠΔⲆⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠΔⵠⲆΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Wooden Box 1"
      }, {
        id: 3,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃⵠⲆⲆⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔⲆⵠΔΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Wooden Box 2"
      }, {
        id: 4,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠⲆᐃΔⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⲆⲆⲆⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Wooden Box 3"
      }, {
        id: 5,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠᐃⵠᐃⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⵠᐃᐃⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Broken Wooden Box"
      }, {
        id: 6,
        ⲆΔᐃ: ⵠᐃ.ⲆΔΔⲆΔᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⵠᐃΔΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Wooden Box"
      }, {
        id: 7,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆᐃᐃⲆⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔⲆᐃⵠⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Wooden Battle Box"
      }, {
        id: 8,
        ⲆΔᐃ: ⵠᐃ.ΔᐃΔΔⲆⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆᐃΔᐃΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Wooden Box with a Cross"
      }, {
        id: 9,
        ⲆΔᐃ: ⵠᐃ.ΔΔⵠᐃⵠⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⲆⵠⵠⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Wooden Box with Bubbles"
      }, {
        id: 10,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⵠΔⲆΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠⲆⲆᐃⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Wooden Box with Eyes"
      }, {
        id: 11,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠⵠᐃⵠᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠⵠΔⵠᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Dark Wooden Box"
      }, {
        id: 38,
        ⲆΔᐃ: ⵠᐃ.ΔⵠᐃⵠΔΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃⲆᐃⲆΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Weddlz",
        name: "Noob Box"
      }, {
        id: 12,
        ⲆΔᐃ: ⵠᐃ.ΔⵠⲆΔΔⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆΔⵠⵠᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "eogito",
        name: "Wooden and Stone Box"
      }, {
        id: 14,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃᐃⵠⲆⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⵠⵠᐃⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "pizza wa",
        name: "Star Box 1"
      }, {
        id: 15,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠΔΔⲆΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃΔⵠᐃⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "pizza wa",
        name: "Star Box 2"
      }, {
        id: 27,
        ⲆΔᐃ: ⵠᐃ.ⵠΔⵠⵠⲆⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⵠΔΔΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "eogito",
        name: "Flower Box"
      }, {
        id: 46,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⵠⲆᐃᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃⵠᐃⲆⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "MADBalgouthi",
        name: "Blue Box"
      }, {
        id: 75,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⲆⵠⵠⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃᐃᐃⲆᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Night Stars Crate"
      }, {
        id: 19,
        ⲆΔᐃ: ⵠᐃ.ΔΔⲆⲆⵠᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⲆᐃⵠⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Beehive"
      }, {
        id: 13,
        ⲆΔᐃ: ⵠᐃ.ΔⲆⵠΔᐃΔΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠᐃⵠΔⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Wooden and Golden Box"
      }, {
        id: 21,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆΔᐃᐃᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⲆⵠᐃⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Gravestone"
      }, {
        id: 25,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⲆⲆΔΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃⵠⲆΔⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Communist",
        name: "Sky Box"
      }, {
        id: 29,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠᐃⵠᐃⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔⵠᐃᐃΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Winter",
        name: "Golden Box"
      }, {
        id: 34,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠΔⵠⵠⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃᐃΔⵠⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Communist",
        name: "Water Crate"
      }, {
        id: 35,
        ⲆΔᐃ: ⵠᐃ.ΔⵠⵠⲆΔⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃᐃⲆΔᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Communist",
        name: "Glass Crate"
      }, {
        id: 70,
        ⲆΔᐃ: ⵠᐃ.ᐃΔᐃⲆᐃⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆᐃᐃⲆⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "CrysTal",
        name: "Crystal Sky Box"
      }, {
        id: 74,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆⵠⵠᐃᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃᐃⵠⵠⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Reclaimed Crate"
      }, {
        id: 77,
        ⲆΔᐃ: ⵠᐃ.ΔⵠⵠᐃⲆΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⲆΔΔⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Workplace Accident"
      }, {
        id: 16,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃⲆⲆΔΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠⵠᐃⵠⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Wooden and Diamond Box"
      }, {
        id: 18,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃΔⲆⲆᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠᐃⲆΔⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Don't Hit Me"
      }, {
        id: 26,
        ⲆΔᐃ: ⵠᐃ.ΔⵠΔΔΔᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃᐃΔᐃⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Underwater Box"
      }, {
        id: 31,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⲆΔⲆΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠΔΔΔΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Communist",
        name: "Items Pile"
      }, {
        id: 32,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠᐃⵠᐃⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠⵠᐃⵠⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Cake Box"
      }, {
        id: 33,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃⲆⲆⵠⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔΔᐃΔΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Christmas Cake Box"
      }, {
        id: 36,
        ⲆΔᐃ: ⵠᐃ.ΔⵠⵠⲆΔΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃΔⵠⲆⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Fukss",
        name: "Crab Box"
      }, {
        id: 42,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⲆΔⲆᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⵠΔⵠΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "MADBalgouthi",
        name: "Fishing Box"
      }, {
        id: 72,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃᐃΔΔⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⲆⲆⵠΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Storage Machine"
      }, {
        id: 22,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⲆΔΔΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔⲆⵠᐃⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Let me out of here"
      }, {
        id: 17,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆᐃⵠⲆⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃΔⵠⲆΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Wooden and Amethyst Box"
      }, {
        id: 24,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠΔΔⲆⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃᐃⵠᐃⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Aquarium"
      }, {
        id: 28,
        ⲆΔᐃ: ⵠᐃ.ΔᐃᐃⵠᐃⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⵠⲆᐃⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Gift Box"
      }, {
        id: 40,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆᐃΔⲆⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠⲆⲆⲆᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "MADBalgouthi",
        name: "Open Watermelon Box"
      }, {
        id: 41,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆᐃᐃⵠᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠⵠᐃⲆⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "MADBalgouthi",
        name: "Watermelon Box"
      }, {
        id: 39,
        ⲆΔᐃ: ⵠᐃ.Ⲇᐃᐃⵠⵠⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠᐃΔⵠⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Thornbush Box"
      }, {
        id: 43,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃΔⲆⵠΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃⵠΔⵠΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Rabbit in the Box"
      }, {
        id: 47,
        ⲆΔᐃ: ⵠᐃ.ⵠΔΔΔΔᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃᐃΔⵠᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Garlic Plot"
      }, {
        id: 48,
        ⲆΔᐃ: ⵠᐃ.ᐃΔᐃⲆⲆⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃⵠᐃᐃΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Pumpkin Plot"
      }, {
        id: 78,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃΔⵠⵠΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃⵠΔⵠΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Tamon Spectrum Portal"
      }, {
        id: 45,
        ⲆΔᐃ: ⵠᐃ.ᐃΔΔⵠⵠⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃⲆΔⲆⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Autumn Box"
      }, {
        id: 44,
        ⲆΔᐃ: ⵠᐃ.ΔΔⵠⵠΔⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆᐃᐃⵠⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Winter Box"
      }, {
        id: 20,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠᐃⵠΔⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃᐃⵠⲆⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Metal and Reidite Box"
      }, {
        id: 23,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⵠΔⵠΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔᐃⲆⲆⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Kraken Box"
      }, {
        id: 30,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⵠᐃᐃᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⲆᐃΔᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Winter",
        name: "Lava Box"
      }, {
        id: 37,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠᐃΔᐃⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⵠⵠⲆᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Lava Box 2"
      }, {
        id: 49,
        ⲆΔᐃ: ⵠᐃ.ⵠΔᐃΔⵠΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⵠⲆΔΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Rabbit"
      }, {
        id: 50,
        ⲆΔᐃ: ⵠᐃ.ΔΔᐃⲆⵠΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠⲆΔⲆⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Wolf"
      }, {
        id: 51,
        ⲆΔᐃ: ⵠᐃ.ΔΔΔᐃⲆⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔΔΔΔΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Spider"
      }, {
        id: 52,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⲆᐃΔΔΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃΔᐃΔⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Hawk"
      }, {
        id: 53,
        ⲆΔᐃ: ⵠᐃ.ΔⲆᐃⵠΔⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⵠⵠⲆᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Bear"
      }, {
        id: 54,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⵠⲆΔⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⵠᐃⲆⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Fox"
      }, {
        id: 55,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆᐃᐃᐃΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⲆᐃΔⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Baby Mammoth"
      }, {
        id: 56,
        ⲆΔᐃ: ⵠᐃ.ΔⵠᐃΔⲆⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⵠᐃⵠⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Mammoth"
      }, {
        id: 57,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃΔΔᐃⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃᐃⲆⲆΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Sandworm"
      }, {
        id: 58,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃᐃⵠᐃⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⵠⵠⲆⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Vulture"
      }, {
        id: 59,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⵠΔᐃΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃᐃᐃΔΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Kraken"
      }, {
        id: 60,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃᐃᐃᐃᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆΔΔᐃⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Piranha"
      }, {
        id: 61,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠΔᐃⲆΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⵠᐃΔᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Baby Dragon"
      }, {
        id: 62,
        ⲆΔᐃ: ⵠᐃ.ΔΔᐃⲆΔⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆᐃΔⵠΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Baby Lava"
      }, {
        id: 63,
        ⲆΔᐃ: ⵠᐃ.ⲆΔΔᐃⲆⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔᐃᐃᐃⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Dragon"
      }, {
        id: 64,
        ⲆΔᐃ: ⵠᐃ.ΔΔⵠᐃⲆΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃᐃΔΔⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Penguin"
      }, {
        id: 65,
        ⲆΔᐃ: ⵠᐃ.ΔΔⵠⲆᐃΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⲆⵠᐃΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Lava Dragon"
      }, {
        id: 66,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆⵠⲆⲆΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃⵠⵠⵠⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Boar"
      }, {
        id: 67,
        ⲆΔᐃ: ⵠᐃ.ΔⵠᐃⵠΔΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃΔᐃⵠⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Fire mob"
      }, {
        id: 68,
        ⲆΔᐃ: ⵠᐃ.ΔⵠⲆⵠᐃⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆᐃΔΔⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the Crab"
      }, {
        id: 69,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆⵠΔⵠᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔΔΔᐃⲆΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Box of the King Crab"
      }, {
        id: 71,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⲆᐃΔΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠⲆΔⲆΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Dragon Box"
      }, {
        id: 73,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆⲆⲆⵠΔΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃⵠⲆᐃⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Rekt"
      }, {
        id: 76,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃᐃⲆⵠᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃⲆⵠⵠᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Sleeping Tamon Dragon"
      }],
      ᐃᐃΔⲆᐃ: [{
        id: 0,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠΔⲆᐃⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆⲆΔᐃΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⵠⲆⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Book 1"
      }, {
        id: 1,
        ⲆΔᐃ: ⵠᐃ.ΔΔⲆΔⵠΔⵠ,
        ΔⲆᐃ: ⵠᐃ.Ⲇⵠⵠᐃᐃᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Book 2"
      }, {
        id: 2,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆⲆⲆᐃⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⵠⵠΔⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Book 3"
      }, {
        id: 3,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠᐃᐃᐃⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠⵠⲆΔΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Book 4"
      }, {
        id: 4,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠΔⲆᐃᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠΔᐃᐃⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Damaged Book 1"
      }, {
        id: 18,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠⵠᐃΔⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔⲆⲆⵠⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "SeveR",
        name: "Damaged Book 2"
      }, {
        id: 5,
        ⲆΔᐃ: ⵠᐃ.ΔΔΔⲆⵠⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠᐃⲆᐃⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Doctorpus",
        name: "Scroll"
      }, {
        id: 6,
        ⲆΔᐃ: ⵠᐃ.ΔᐃᐃⲆᐃΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠⵠΔᐃⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Doctorpus",
        name: "Clipboard"
      }, {
        id: 7,
        ⲆΔᐃ: ⵠᐃ.ΔⵠᐃΔⵠΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⲆΔⲆᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "eogito",
        name: "Seed Book"
      }, {
        id: 20,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠᐃⲆᐃⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⲆⵠᐃᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Camo Book"
      }, {
        id: 24,
        ⲆΔᐃ: ⵠᐃ.ⲆΔⵠⵠᐃⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠⵠΔᐃᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Communist",
        name: "Stone Tablet"
      }, {
        id: 47,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠΔΔΔᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃⵠⲆᐃⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Reclaimed Book"
      }, {
        id: 10,
        ⲆΔᐃ: ⵠᐃ.ⵠΔⵠⵠΔΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆⵠⵠᐃΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "pizza wa",
        name: "Star Book"
      }, {
        id: 8,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃΔᐃΔΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆΔΔᐃΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Gold Book"
      }, {
        id: 15,
        ⲆΔᐃ: ⵠᐃ.ⵠΔⵠΔⵠⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⲆᐃⵠⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Old Mysterious Paper"
      }, {
        id: 17,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⵠⲆⵠΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔΔⵠⲆᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Gold Engraving"
      }, {
        id: 25,
        ⲆΔᐃ: ⵠᐃ.ΔⲆᐃᐃⲆᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔⵠⲆΔⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "fatant",
        name: "Ant Book"
      }, {
        id: 32,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠΔΔⵠⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠᐃᐃᐃⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Mummy Book"
      }, {
        id: 37,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃⵠⵠΔΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔΔⲆⵠⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Garlic Book"
      }, {
        id: 38,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠΔⵠⲆⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⵠⵠΔΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Pumpkin Book"
      }, {
        id: 39,
        ⲆΔᐃ: ⵠᐃ.ΔⵠΔᐃΔⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃΔᐃΔᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Christmas Tree Book"
      }, {
        id: 11,
        ⲆΔᐃ: ⵠᐃ.ᐃΔᐃΔᐃⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠΔΔⲆᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Diamond Book"
      }, {
        id: 9,
        ⲆΔᐃ: ⵠᐃ.ᐃΔⲆⵠⵠΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃⵠⵠⵠⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Obscure Book"
      }, {
        id: 16,
        ⲆΔᐃ: ⵠᐃ.ΔⵠᐃⲆⵠΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⲆⲆⵠⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Rolled Parchment"
      }, {
        id: 22,
        ⲆΔᐃ: ⵠᐃ.ⵠΔⲆⲆⵠΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠᐃΔⵠⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Cake Book"
      }, {
        id: 23,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠΔⲆᐃΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⲆΔΔᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Christmas Cake Book"
      }, {
        id: 30,
        ⲆΔᐃ: ⵠᐃ.ⲆΔΔΔᐃΔΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠⵠⲆⵠᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "MADBalgouthi",
        name: "Fish Book"
      }, {
        id: 31,
        ⲆΔᐃ: ⵠᐃ.ΔⲆΔΔⵠⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔⲆⵠⲆΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "CrysTal",
        name: "Once upon a time"
      }, {
        id: 48,
        ⲆΔᐃ: ⵠᐃ.ⵠΔⲆⵠᐃΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆΔΔΔΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Chrono Clock"
      }, {
        id: 49,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠΔΔⵠⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠᐃΔⲆⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Recipe Book"
      }, {
        id: 13,
        ⲆΔᐃ: ⵠᐃ.ΔⵠⲆΔⵠΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠⵠᐃⲆΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Amethyst Book"
      }, {
        id: 28,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃΔΔⵠⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆⵠᐃⲆⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Paint Pallet"
      }, {
        id: 29,
        ⲆΔᐃ: ⵠᐃ.ⵠΔⵠᐃᐃⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆᐃⲆⵠᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "CrysTal",
        name: "Watermelon Book"
      }, {
        id: 27,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃΔⲆΔⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⲆⵠⵠΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Thornbush Book"
      }, {
        id: 35,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠᐃⵠⲆⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔΔᐃⵠΔⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Menu"
      }, {
        id: 36,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⵠⲆᐃⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠΔΔⲆⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "CrysTal",
        name: "Lover Letter"
      }, {
        id: 40,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆⵠⲆᐃᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⲆᐃⵠⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Fresh-Baked Cookies"
      }, {
        id: 41,
        ⲆΔᐃ: ⵠᐃ.ⲆΔΔⵠⵠΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠΔⲆᐃᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Inside, there is just a book."
      }, {
        id: 45,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃᐃΔⵠΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔΔΔΔⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Crafting Machine"
      }, {
        id: 33,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⲆⵠΔⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠⲆⵠᐃᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Winter Book"
      }, {
        id: 34,
        ⲆΔᐃ: ⵠᐃ.ΔⵠᐃᐃᐃⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆᐃⲆΔⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Autumn Book"
      }, {
        id: 14,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠΔᐃᐃⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠᐃⵠΔⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Reidite Book"
      }, {
        id: 12,
        ⲆΔᐃ: ⵠᐃ.ΔΔⲆⵠⵠⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔΔᐃΔⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Winter",
        name: "Lava Book"
      }, {
        id: 26,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆⲆᐃᐃⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔᐃⲆΔᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Lava Book 2"
      }, {
        id: 19,
        ⲆΔᐃ: ⵠᐃ.ΔⲆᐃⲆΔᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔΔⲆᐃᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Winter",
        name: "Ocean Mystery"
      }, {
        id: 21,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆⵠⲆᐃⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃΔⲆΔⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Dragon Book"
      }, {
        id: 42,
        ⲆΔᐃ: ⵠᐃ.ᐃΔⲆⲆᐃⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔΔΔⲆⲆΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Engineer Book"
      }, {
        id: 43,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠⵠⲆⵠΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆΔᐃⲆⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Nightmare Book"
      }, {
        id: 44,
        ⲆΔᐃ: ⵠᐃ.Δᐃⵠᐃᐃᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⵠⲆᐃΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "aloner",
        name: "Mystery Book"
      }, {
        id: 46,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠᐃⲆᐃΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆΔᐃᐃⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Cursed Book"
      }],
      ΔᐃⲆΔᐃ: [{
        id: 0,
        ⲆΔᐃ: ⵠᐃ.ⲆΔᐃᐃᐃΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔᐃᐃᐃΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⵠⲆⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Nothing"
      }, {
        id: 2,
        ⲆΔᐃ: ⵠᐃ.ⲆΔⵠᐃΔⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔΔΔⲆⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⵠⲆⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Pink Cheeks"
      }, {
        id: 3,
        ⲆΔᐃ: ⵠᐃ.ΔⲆⲆⵠⵠᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆᐃⲆⲆΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⵠⲆⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Heart"
      }, {
        id: 1,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⲆΔΔᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⵠⵠΔᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⵠⲆⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Bandage 1"
      }, {
        id: 4,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⲆⵠΔΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠᐃᐃⵠΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃⵠⲆⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Flower 1"
      }, {
        id: 5,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠΔⲆⵠᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆΔΔΔΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Bow 1"
      }, {
        id: 6,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠⲆᐃᐃΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆᐃⵠⲆⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Bandage 2"
      }, {
        id: 7,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆⲆⲆⵠⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔᐃⲆᐃⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Flower 2"
      }, {
        id: 8,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃΔⲆᐃΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔⲆᐃⲆⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Bandage 3"
      }, {
        id: 36,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠⲆᐃⵠΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃⲆΔΔⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Foliage"
      }, {
        id: 59,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃΔᐃⵠⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⲆⵠⵠⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "eogito",
        name: "Peaceful"
      }, {
        id: 67,
        ⲆΔᐃ: ⵠᐃ.ᐃΔⲆᐃᐃⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔⲆⵠⲆΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "pizza wa",
        name: "Sparkles"
      }, {
        id: 68,
        ⲆΔᐃ: ⵠᐃ.ᐃΔⲆΔⲆⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃⲆⲆⲆⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "pizza wa",
        name: "Luxury"
      }, {
        id: 69,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃⲆΔΔΔΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⵠΔⲆⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆⵠᐃΔ,
        ⲆⲆⲆ: "pizza wa",
        name: "Snow Flakes Crown"
      }, {
        id: 17,
        ⲆΔᐃ: ⵠᐃ.ΔⲆⵠⲆᐃⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔΔⲆΔⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Glasses 1"
      }, {
        id: 10,
        ⲆΔᐃ: ⵠᐃ.Ⲇᐃᐃⵠᐃⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⲆΔᐃⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Bow 2"
      }, {
        id: 11,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃᐃⵠᐃⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⲆⲆⵠⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "pizza wa",
        name: "Little Stars"
      }, {
        id: 12,
        ⲆΔᐃ: ⵠᐃ.ΔΔᐃⲆⲆᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃΔⲆᐃⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "eogito",
        name: "Pirate Eye Patch 1"
      }, {
        id: 44,
        ⲆΔᐃ: ⵠᐃ.ΔᐃᐃΔΔΔΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠⵠⲆⵠⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Pirate Eye Patch 2"
      }, {
        id: 23,
        ⲆΔᐃ: ⵠᐃ.ⵠΔⵠᐃⵠⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔᐃⵠᐃⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Clown nose"
      }, {
        id: 16,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃΔᐃᐃⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠⵠⵠⵠᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Eye Patch"
      }, {
        id: 30,
        ⲆΔᐃ: ⵠᐃ.ⲆΔᐃᐃΔᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃⲆⵠᐃΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "eogito",
        name: "Flower 3"
      }, {
        id: 38,
        ⲆΔᐃ: ⵠᐃ.ᐃΔᐃΔⲆᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃΔⲆⵠⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Winter",
        name: "False Nose"
      }, {
        id: 74,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠᐃᐃΔΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⲆⵠⲆⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Red Cloth"
      }, {
        id: 75,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⵠⲆᐃⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⵠⲆⵠⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Blue Cloth"
      }, {
        id: 79,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃΔⵠⲆⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃᐃⲆⵠᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Transparent Mask"
      }, {
        id: 89,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠΔⲆᐃⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠᐃᐃᐃⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Anyone want to play?",
        name: "Starve.io Anime"
      }, {
        id: 94,
        ⲆΔᐃ: ⵠᐃ.ΔΔⲆΔⲆᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔⵠᐃΔⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Ant",
        name: "Hero Mask"
      }, {
        id: 100,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆΔᐃΔⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⲆⵠⲆⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "This starver is mad"
      }, {
        id: 104,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃⵠΔᐃⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆΔᐃΔⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Scars"
      }, {
        id: 106,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠᐃⲆΔΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⵠⵠⲆᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "In Search of Intelligence"
      }, {
        id: 109,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠⵠⵠΔⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃΔΔΔᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Reclaimed Bandage"
      }, {
        id: 111,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆᐃᐃΔⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆΔΔᐃⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⵠⵠΔΔ,
        ⲆⲆⲆ: "Starve.io",
        name: "Unwrap Starver for Gift"
      }, {
        id: 15,
        ⲆΔᐃ: ⵠᐃ.ΔⵠΔΔⵠᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔⲆΔᐃᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Star Glasses"
      }, {
        id: 21,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠΔⲆⵠΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔᐃⲆⲆⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Great-aunt's Glasses"
      }, {
        id: 24,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠⲆⵠΔΔΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃΔᐃⲆΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Little Starver"
      }, {
        id: 22,
        ⲆΔᐃ: ⵠᐃ.ⲆΔⲆⲆⵠᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆᐃⵠⵠⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Little Glasses"
      }, {
        id: 13,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⵠΔⲆⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆΔᐃᐃⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Flower Chain"
      }, {
        id: 29,
        ⲆΔᐃ: ⵠᐃ.ΔᐃᐃⲆⲆΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⲆΔᐃΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Horns"
      }, {
        id: 31,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆΔⵠⲆᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠⵠⲆⲆⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Golden Flower"
      }, {
        id: 40,
        ⲆΔᐃ: ⵠᐃ.ⲆΔΔⲆᐃⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆΔⲆᐃΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "pizza wa",
        name: "Sleeping Mask"
      }, {
        id: 57,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆⲆᐃⵠⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠⵠⵠⲆⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Taco4Life",
        name: "Fish on your head"
      }, {
        id: 58,
        ⲆΔᐃ: ⵠᐃ.ΔⵠⵠΔⲆΔΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃΔΔΔΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Rose"
      }, {
        id: 91,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆᐃⲆΔΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⵠⲆⵠΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "upfiz",
        name: "Grey Scarf"
      }, {
        id: 92,
        ⲆΔᐃ: ⵠᐃ.ΔⲆᐃᐃⵠΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠⲆⵠⵠⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "upfiz",
        name: "Black Scarf"
      }, {
        id: 93,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠΔΔⵠᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠᐃΔⵠⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "upfiz",
        name: "Skull Mask"
      }, {
        id: 95,
        ⲆΔᐃ: ⵠᐃ.ΔΔᐃⲆⵠⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆᐃΔⵠΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Golden Monocle"
      }, {
        id: 96,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⵠⵠΔⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆΔⵠΔᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "A simple instruction"
      }, {
        id: 102,
        ⲆΔᐃ: ⵠᐃ.ΔⲆⵠⲆⲆⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠᐃΔᐃΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Garland"
      }, {
        id: 103,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆⵠⵠⵠⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠΔⲆⲆᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "The Doormat"
      }, {
        id: 108,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃᐃᐃⲆⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆΔΔⵠⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Copium Tanks"
      }, {
        id: 117,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⲆⵠⲆⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆΔᐃΔΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Eyelashes"
      }, {
        id: 118,
        ⲆΔᐃ: ⵠᐃ.ⵠΔᐃⵠΔⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆⲆⵠᐃⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔᐃⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Helmet Prototype"
      }, {
        id: 9,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⲆⲆΔⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠΔΔΔᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Fancy Glasses"
      }, {
        id: 25,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠΔⲆᐃΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆΔΔΔⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Medecin Mask"
      }, {
        id: 14,
        ⲆΔᐃ: ⵠᐃ.ΔΔᐃⲆᐃᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔⲆⵠᐃΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mr. Mayor"
      }, {
        id: 19,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃΔᐃᐃᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠΔⵠΔΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Sunglasses 2"
      }, {
        id: 28,
        ⲆΔᐃ: ⵠᐃ.ΔⵠⵠᐃᐃΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠⲆᐃΔΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "pizza wa",
        name: "Starfish"
      }, {
        id: 37,
        ⲆΔᐃ: ⵠᐃ.ΔⵠΔⵠᐃⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃⵠΔⲆᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Berry"
      }, {
        id: 39,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠⵠΔⲆΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆΔᐃⲆᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Flake"
      }, {
        id: 43,
        ⲆΔᐃ: ⵠᐃ.ΔⲆⵠΔᐃⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠΔΔΔᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Leaf "
      }, {
        id: 61,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆΔΔⲆⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠⲆⵠΔΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "A sword in your head"
      }, {
        id: 62,
        ⲆΔᐃ: ⵠᐃ.ⲆΔⲆΔⵠⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠⲆⲆⲆⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Winter Scarf"
      }, {
        id: 64,
        ⲆΔᐃ: ⵠᐃ.ΔΔⲆⵠᐃΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃⵠⲆΔᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Winter Scarf 2"
      }, {
        id: 66,
        ⲆΔᐃ: ⵠᐃ.ⲆΔᐃΔᐃΔⵠ,
        ΔⲆᐃ: ⵠᐃ.Ⲇⵠᐃᐃᐃᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Winter Scarf 3"
      }, {
        id: 70,
        ⲆΔᐃ: ⵠᐃ.ⲆΔⵠⵠⵠΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠᐃⵠⲆᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mask with animal tracks"
      }, {
        id: 71,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠᐃⵠᐃΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⲆΔⵠΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Spring Mask"
      }, {
        id: 72,
        ⲆΔᐃ: ⵠᐃ.ΔⲆⲆᐃⵠⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆΔᐃᐃᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Pink Mask"
      }, {
        id: 73,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃⲆΔⵠᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃΔⲆⲆⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Blue Mask"
      }, {
        id: 76,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⲆΔⲆᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆᐃⲆⵠⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Military Mask"
      }, {
        id: 77,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃᐃᐃᐃᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⵠᐃΔⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Orange Mask"
      }, {
        id: 78,
        ⲆΔᐃ: ⵠᐃ.Ⲇᐃᐃⵠᐃᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆⵠΔⵠΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "White and Red Points Mask"
      }, {
        id: 80,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃⵠⲆⵠⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆΔΔⲆⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Stick out your tongue Mask"
      }, {
        id: 81,
        ⲆΔᐃ: ⵠᐃ.ᐃΔᐃⵠⵠΔΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⵠΔⵠᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Two Teeth Mask"
      }, {
        id: 82,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃᐃⵠΔᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆᐃᐃⲆⲆⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Make-up Mask"
      }, {
        id: 83,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃⵠᐃⲆⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆᐃⲆⲆᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Sad Mask"
      }, {
        id: 84,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⲆⲆⵠⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠΔᐃⲆⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Happy Mask"
      }, {
        id: 90,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠⲆⵠⲆΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠⵠⵠⵠⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "aloner",
        name: "Blood"
      }, {
        id: 101,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠΔⵠⲆⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ΔΔΔΔᐃⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Axed Plans"
      }, {
        id: 105,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠᐃΔᐃᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠⲆⲆⲆᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Saddle"
      }, {
        id: 113,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆⵠⲆⲆⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔⵠⵠΔΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "I see"
      }, {
        id: 114,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⵠΔΔΔΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠⲆⲆΔⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "I have no body and I must dress"
      }, {
        id: 115,
        ⲆΔᐃ: ⵠᐃ.ΔⵠⲆΔⵠⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔᐃΔΔᐃⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Cursed Crown"
      }, {
        id: 27,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆΔⲆⲆⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠΔⲆⲆⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Clown Face"
      }, {
        id: 20,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠᐃⵠΔᐃⲆ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔᐃⲆⲆΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Sunglasses 3"
      }, {
        id: 32,
        ⲆΔᐃ: ⵠᐃ.ΔⵠᐃΔΔⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⵠⲆⲆⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Engineer's Glasses"
      }, {
        id: 33,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⲆⲆᐃⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃⲆⲆᐃⵠⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Engineer's Monocle"
      }, {
        id: 34,
        ⲆΔᐃ: ⵠᐃ.ΔⲆⲆⵠΔΔΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆⵠΔᐃⵠΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mauve's butt"
      }, {
        id: 41,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃΔⵠⲆⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔⲆⵠΔΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Lapa Head"
      }, {
        id: 42,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠᐃᐃᐃΔⲆ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔᐃᐃⲆⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "eogito",
        name: "Lapa Head "
      }, {
        id: 85,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆⲆΔⵠΔΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆΔΔⲆᐃᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Mask and Glasses"
      }, {
        id: 110,
        ⲆΔᐃ: ⵠᐃ.ΔⲆⵠⵠⲆⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ⲆΔⵠⲆⲆⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆΔΔᐃ,
        ⲆⲆⲆ: "Starve.io",
        name: "Tamon Spectrum Pet"
      }, {
        id: 60,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⲆᐃᐃⵠΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃⲆΔΔⲆⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Jason"
      }, {
        id: 26,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠⵠⲆΔⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ΔΔΔᐃΔⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Devil Horns"
      }, {
        id: 18,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆⵠⵠΔΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔᐃⵠⵠⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Big Boss"
      }, {
        id: 35,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃΔⵠᐃⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ⵠΔⵠᐃᐃᐃΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Baby Kraken"
      }, {
        id: 63,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃΔΔⵠᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ΔⵠᐃⲆΔᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Deer Antlers"
      }, {
        id: 65,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⵠΔᐃᐃΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃᐃⲆᐃᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Baby Dragon on your head"
      }, {
        id: 86,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⵠⲆⵠᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⲆᐃᐃΔᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Gaz Mask and Glasses"
      }, {
        id: 87,
        ⲆΔᐃ: ⵠᐃ.ᐃΔΔⵠⲆΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⵠΔⲆᐃⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Pink Gaz Mask and Glasses"
      }, {
        id: 88,
        ⲆΔᐃ: ⵠᐃ.ⲆᐃᐃΔΔΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⲆᐃΔΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "eogito",
        name: "Engineer Glasses"
      }, {
        id: 97,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⵠᐃⵠⲆⵠ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆᐃΔⵠⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Jarred Horns"
      }, {
        id: 98,
        ⲆΔᐃ: ⵠᐃ.ⵠⵠⵠΔΔᐃᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⲆΔⵠⵠᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Curved Horns"
      }, {
        id: 99,
        ⲆΔᐃ: ⵠᐃ.ᐃΔΔⵠⲆⵠⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔᐃΔΔⲆΔΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Evil Goat Horns"
      }, {
        id: 107,
        ⲆΔᐃ: ⵠᐃ.ΔΔΔᐃΔⵠⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔΔⲆΔⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Decorative Earmuffs"
      }, {
        id: 112,
        ⲆΔᐃ: ⵠᐃ.ᐃⲆΔᐃⵠΔΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⲆⵠᐃⵠⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Tamon Dragon Pet"
      }, {
        id: 116,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃⲆΔΔⵠᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠᐃΔΔᐃⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ⲆᐃⲆⲆ,
        ⲆⲆⲆ: "Starve.io",
        name: "Blanket"
      }, {
        id: 45,
        ⲆΔᐃ: ⵠᐃ.ⲆⵠᐃⲆⲆΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ᐃᐃⲆⲆⲆⵠⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔⵠⵠⵠ,
        ⲆⲆⲆ: "Starve.io",
        name: "More than Level 5",
        level: 5
      }, {
        id: 46,
        ⲆΔᐃ: ⵠᐃ.ⲆΔⲆᐃᐃΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⲆⵠⲆⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔⵠⵠⵠ,
        ⲆⲆⲆ: "Starve.io",
        name: "More than Level 10",
        level: 10
      }, {
        id: 47,
        ⲆΔᐃ: ⵠᐃ.ᐃⵠⵠΔΔⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔΔⲆⵠⵠⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔⵠⵠⵠ,
        ⲆⲆⲆ: "Starve.io",
        name: "More than Level 15",
        level: 15
      }, {
        id: 48,
        ⲆΔᐃ: ⵠᐃ.ΔΔΔᐃⵠⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆⲆΔⲆⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔⵠⵠⵠ,
        ⲆⲆⲆ: "Starve.io",
        name: "More than Level 20",
        level: 20
      }, {
        id: 49,
        ⲆΔᐃ: ⵠᐃ.ᐃᐃΔᐃⵠⲆⲆ,
        ΔⲆᐃ: ⵠᐃ.ΔⲆⵠⲆⲆⲆᐃ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔⵠⵠⵠ,
        ⲆⲆⲆ: "Starve.io",
        name: "More than Level 25",
        level: 25
      }, {
        id: 50,
        ⲆΔᐃ: ⵠᐃ.ⵠᐃΔⵠᐃΔⵠ,
        ΔⲆᐃ: ⵠᐃ.ⲆⲆΔⵠᐃⵠΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔⵠⵠⵠ,
        ⲆⲆⲆ: "Starve.io",
        name: "More than Level 30",
        level: 30
      }, {
        id: 51,
        ⲆΔᐃ: ⵠᐃ.ΔᐃⲆⵠᐃΔΔ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠΔⵠᐃΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔⵠⵠⵠ,
        ⲆⲆⲆ: "Starve.io",
        name: "More than Level 35",
        level: 35
      }, {
        id: 52,
        ⲆΔᐃ: ⵠᐃ.Ⲇᐃᐃᐃⵠᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃⵠⲆⲆΔΔⲆ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔⵠⵠⵠ,
        ⲆⲆⲆ: "Starve.io",
        name: "More than Level 40",
        level: 40
      }, {
        id: 53,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆⲆⵠⵠⲆᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆⲆⲆⲆⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔⵠⵠⵠ,
        ⲆⲆⲆ: "Starve.io",
        name: "More than Level 45",
        level: 45
      }, {
        id: 54,
        ⲆΔᐃ: ⵠᐃ.ⵠⲆΔⲆⲆΔᐃ,
        ΔⲆᐃ: ⵠᐃ.ⵠⵠⵠⵠΔΔⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔⵠⵠⵠ,
        ⲆⲆⲆ: "Starve.io",
        name: "More than Level 50",
        level: 50
      }, {
        id: 55,
        ⲆΔᐃ: ⵠᐃ.ⲆⲆΔⲆⵠⲆΔ,
        ΔⲆᐃ: ⵠᐃ.ⵠⲆᐃⵠᐃⲆⵠ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔⵠⵠⵠ,
        ⲆⲆⲆ: "Starve.io",
        name: "More than Level 55",
        level: 55
      }, {
        id: 56,
        ⲆΔᐃ: ⵠᐃ.Δⵠᐃᐃᐃᐃⵠ,
        ΔⲆᐃ: ⵠᐃ.ᐃΔⲆΔΔⲆΔ,
        ⵠᐃⵠ: ΔΔⵠ.ᐃΔⵠⵠⵠ,
        ⲆⲆⲆ: "Starve.io",
        name: "More than Level 60",
        level: 60
      }]
    };
    If.ᐃⵠⵠᐃⵠᐃᐃ = ᐃⵠᐃᐃⵠⵠⵠ(Δᐃᐃᐃ.ⵠᐃΔⲆΔ, 21);
    If.ᐃⲆᐃᐃⵠⲆⵠ = ᐃⵠᐃᐃⵠⵠⵠ(Δᐃᐃᐃ.ⵠᐃΔⲆΔ, 20);
    ᐃΔ[255] = [];
    ᐃΔ[7] = [];
    ᐃΔ[250] = [];
    ᐃΔ[28] = [];
    ᐃΔ[29] = [];
    ᐃΔ[796] = [];
    for (var a = 0; a < Δᐃᐃᐃ.ⵠᐃΔⲆΔ.length; a++) {
      ᐃΔ[255][a] = [Δᐃᐃᐃ.ⵠᐃΔⲆΔ[a].ⲆΔᐃ, Δᐃᐃᐃ.ⵠᐃΔⲆΔ[a].ΔⲆᐃ];
      ᐃΔ[7][a] = [Δᐃᐃᐃ.ⵠᐃΔⲆΔ[a].ᐃⵠΔΔ, Δᐃᐃᐃ.ⵠᐃΔⲆΔ[a].ᐃⲆⵠΔ];
    }
    for (a = 0; a < Δᐃᐃᐃ.ᐃᐃΔⲆᐃ.length; a++) {
      ᐃΔ[28][a] = [Δᐃᐃᐃ.ᐃᐃΔⲆᐃ[a].ⲆΔᐃ, Δᐃᐃᐃ.ᐃᐃΔⲆᐃ[a].ΔⲆᐃ];
    }
    for (a = 0; Δᐃᐃᐃ.ᐃᐃⵠⵠΔ.length > a; a++) {
      ᐃΔ[250][a] = [Δᐃᐃᐃ.ᐃᐃⵠⵠΔ[a].ⲆΔᐃ, Δᐃᐃᐃ.ᐃᐃⵠⵠΔ[a].ΔⲆᐃ];
    }
    for (a = 0; Δᐃᐃᐃ.ⵠᐃⵠⲆ.length > a; a++) {
      ᐃΔ[29][a] = [Δᐃᐃᐃ.ⵠᐃⵠⲆ[a].ⲆΔᐃ, Δᐃᐃᐃ.ⵠᐃⵠⲆ[a].ΔⲆᐃ];
    }
    for (a = 0; a < Δᐃᐃᐃ.ΔᐃⲆΔᐃ.length; a++) {
      ᐃΔ[796][a] = [Δᐃᐃᐃ.ΔᐃⲆΔᐃ[a].ⲆΔᐃ, Δᐃᐃᐃ.ΔᐃⲆΔᐃ[a].ΔⲆᐃ];
    }
  };
  const hd = 8;
  const gd = 6;
  function ld(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.sqrt(b.width * b.width + b.height * b.height);
    d2 = e / 2;
    c.width = e;
    c.height = e;
    d.translate(d2, d2);
    d.rotate(a);
    d.drawImage(b, -b.width / 2, -b.height / 2);
    return c;
  }
  function ud(b, c, d, e, f, g) {
    if (e < g * 2) {
      g = e / 2;
    }
    if (g * 2 > f) {
      g = f / 2;
    }
    if (g < 0) {
      g = 0;
    }
    b.beginPath();
    b.moveTo(c + g, d);
    b.arcTo(c + e, d, c + e, d + f, g);
    b.arcTo(c + e, d + f, c, d + f, g);
    b.arcTo(c, d + f, c, d, g);
    b.arcTo(c, d, c + e, d, g);
    b.closePath();
  }
  function bd(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.floor(b * 28);
    var g = Math.floor(b * 20);
    e.font = g + "px Baloo Paaji";
    var a = b * 8;
    var h = e.measureText(c).width + a * 2;
    d.width = h;
    d.height = f;
    ud(e, 0, 0, h, f, b * 10);
    e.globalAlpha = 0.5;
    md(e, "#000");
    e.globalAlpha = 1;
    e.textBaseline = "middle";
    e.font = g + "px Baloo Paaji";
    e.beginPath();
    e.fillStyle = "#FFF";
    e.fillText(c, a, f / 2);
    return d;
  }
  function dd(a, b, c, d, e) {
    a.beginPath();
    a.lineCap = "round";
    a.arc(b, c, d, 0, Math.PI * 2 * e);
  }
  function vd(b, c, d, e) {
    var f = Math.PI * 2 / c;
    b.beginPath();
    var i = [{
      x: d,
      y: 0
    }];
    var a = [];
    for (var j = 1; c > j; j++) {
      i.push({
        x: d * Math.sin(j * f),
        y: d * Math.cos(j * f)
      });
      var k = i.length;
      a.push(ΔⵠΔⵠ.ᐃⵠⵠⵠᐃⲆⲆ(i[k - 2], i[k - 1]));
    }
    a.push(ΔⵠΔⵠ.ᐃⵠⵠⵠᐃⲆⲆ(i[i.length - 1], i[0]));
    var l = a[a.length - 1];
    b.moveTo(l.x, l.y);
    for (j = 0; j < c; j++) {
      b.arcTo(i[j].x, i[j].y, a[j].x, a[j].y, e);
    }
    b.closePath();
  }
  function md(a, b, c, d) {
    if (b) {
      a.fillStyle = b;
      a.fill();
    }
    if (c) {
      a.lineWidth = d;
      a.strokeStyle = c;
      a.stroke();
    }
  }
  function cd(a, b, c, d) {
    a.beginPath();
    a.arc(b, c, d, 0, Math.PI * 2);
  }
  const pd = 11;
  function Cd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 70;
    d.height = a * 70;
    e.globalAlpha = 0.5;
    cd(e, a * 26, a * 26, a * 9);
    md(e, c[0]);
    cd(e, a * 56, a * 36, a * 9);
    md(e, c[1]);
    cd(e, a * 40, a * 50, a * 9);
    md(e, c[2]);
    e.globalAlpha = 1;
    cd(e, a * 26, a * 26, a * 5);
    md(e, c[0]);
    cd(e, a * 56, a * 36, a * 5);
    md(e, c[1]);
    cd(e, a * 40, a * 50, a * 5);
    md(e, c[2]);
    return d;
  }
  function Td(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 264;
    d.height = a * 246;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    md(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    md(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 102);
    e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
    e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
    e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
    e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
    e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
    e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
    e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
    e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
    e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
    e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
    e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
    e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
    e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
    e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
    e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
    e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
    e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
    e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
    e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
    e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
    e.closePath();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 103);
    e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
    e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
    e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
    e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
    e.closePath();
    md(e, c[3], c[4], a * 4);
    return d;
  }
  function fd(c, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 120;
    var k = c * 110;
    var a = j / 2;
    var m = k / 2;
    var n = c * 20;
    var h = c * 112;
    var g = c * 82;
    var l = h / 2;
    var o = g / 2;
    var b = c * 4;
    f.width = j;
    f.height = k;
    i.globalAlpha = 1;
    i.translate(a, m);
    ud(i, -l, -o, h, g, n);
    md(i, e, e, b);
    return f;
  }
  const zd = 2;
  function yd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 183, a * 107);
    ud(e, a * -8, a * -70.5, a * 16, a * 141, a * 1);
    e.restore();
    md(e, c[0]);
    e.save();
    e.translate(a * 69.5, a * 110);
    ud(e, a * -8.5, a * -71, a * 17, a * 143, a * 1);
    e.restore();
    md(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 181);
    ud(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
    e.restore();
    md(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 95);
    e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
    e.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
    e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
    e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
    e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
    e.closePath();
    md(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 75);
    e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
    e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
    e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
    e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
    e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
    e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
    e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
    e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
    e.closePath();
    md(e, c[3], c[1], a * 6);
    return d;
  }
  function wd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 69.5, a * 145);
    ud(e, a * -8.5, a * -63, a * 17, a * 127, a * 1);
    e.restore();
    md(e, c[0]);
    e.save();
    e.translate(a * 183, a * 145);
    ud(e, a * -8, a * -63, a * 16, a * 126, a * 1);
    e.restore();
    md(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 62.5);
    e.rotate(6.28);
    ud(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
    e.restore();
    md(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 118);
    e.rotate(6.24);
    ud(e, a * -85.5, a * -24, a * 169, a * 48, a * 5);
    e.restore();
    md(e, c[3], c[1], a * 6);
    e.save();
    e.translate(a * 122, a * 177.5);
    e.rotate(6.32);
    ud(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
    e.restore();
    md(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 157);
    e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
    e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
    e.closePath();
    md(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205, a * 175);
    e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
    e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
    e.closePath();
    md(e, c[1]);
    return d;
  }
  function Pd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 182, a * 120);
    ud(e, a * -8, a * -67, a * 16, a * 134, a * 1);
    e.restore();
    md(e, c[0]);
    e.save();
    e.translate(a * 68.5, a * 127.5);
    ud(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
    e.restore();
    md(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 68);
    ud(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
    e.restore();
    md(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123, a * 179.5);
    ud(e, a * -83, a * -24.5, a * 166, a * 49, a * 4);
    e.restore();
    md(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 123.5);
    e.rotate(6.24);
    ud(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
    e.restore();
    md(e, c[3], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 112);
    e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
    e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
    e.closePath();
    md(e, c[1]);
    return d;
  }
  function kd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 22;
    d.height = a * 22;
    e.globalAlpha = 0.4;
    cd(e, a * 11, a * 11, a * 10);
    md(e, c[0]);
    e.globalAlpha = 0.7;
    cd(e, a * 11, a * 11, a * 7);
    md(e, c[0]);
    e.globalAlpha = 1;
    cd(e, a * 11, a * 11, a * 4);
    md(e, c[0]);
    return d;
  }
  const Ad = 0;
  const xd = 10;
  function Jd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 191;
    c.height = a * 153;
    d.save();
    d.translate(a * 96.49996948242188, a * 66.79510498046875);
    ud(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    d.restore();
    md(d, b[0], b[0], a * 4);
    d.translate(a * 2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 119, a * 28);
    d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    d.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    d.closePath();
    md(d, b[0], b[0], a * 4);
    d.save();
    d.translate(a * 97.49996948242188, a * 95.12844848632812);
    ud(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    d.restore();
    md(d, b[0], b[0], a * 4);
    return c;
  }
  function Md(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 200;
    var f = b * 200;
    c.width = e;
    c.height = f;
    var g = bm(0.35, ln, ["#0e3022", "#0b8052", "#077b49"]);
    d.drawImage(g, 10, 10);
    g = Pu(0.9, kg, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 21, 20);
    g = Pu(0.9, es, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 38, 28);
    g = Pu(0.9, cg, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 15, 37);
    g = Pu(0.9, Dh, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 32, 45);
    return c;
  }
  function Bd(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 185;
    f.height = b * 240;
    g.globalAlpha = 0.5;
    g.translate(0, b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    md(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    md(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    md(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    md(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    md(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    md(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    md(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    md(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    md(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    md(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 59, b * 99);
    g.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
    g.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
    g.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
    g.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
    g.closePath();
    md(g, d[3], d[2], b * 4);
    if (e === 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 47, b * 149);
      g.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
      g.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
      g.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
      g.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
      g.closePath();
      md(g, d[1]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 40, b * 139);
      g.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
      g.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
      g.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
      g.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
      g.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
      g.closePath();
      md(g, d[3], d[2], b * 4);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 41, b * 139);
      g.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
      g.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
      g.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
      g.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
      g.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
      g.closePath();
      md(g, d[3], d[2], b * 4);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 95);
    g.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
    g.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * 17);
    g.bezierCurveTo(b * 92, b * 5, b * 83, b * 16, b * 78, b * 29);
    g.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
    g.closePath();
    md(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 86);
    g.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
    g.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * 16);
    g.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
    g.closePath();
    md(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 117);
    g.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
    g.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
    g.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
    g.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
    g.closePath();
    md(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 175);
    g.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
    g.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
    g.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
    g.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
    g.closePath();
    md(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 169);
    g.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
    g.closePath();
    md(g, Us, d[2], b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 136, b * 171);
    g.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
    g.closePath();
    md(g, undefined, d[2], b * 4);
    cd(g, b * 63, b * 180, b * 15.231546211727817);
    md(g, d[4]);
    cd(g, b * 121, b * 181, b * 15.652475842498529);
    md(g, d[4]);
    cd(g, b * 58, b * 175, b * 5.656854249492381);
    md(g, d[2]);
    cd(g, b * 116, b * 175, b * 5.656854249492381);
    md(g, d[2]);
    return f;
  }
  function Ed(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 32;
    var a = c * 32;
    var m = k / 2;
    var n = a / 2;
    i.width = k;
    i.height = a;
    var h = c * 5;
    var g = c * 28;
    var l = h / 2;
    var o = g / 2;
    j.translate(c * 0, c * 0);
    j.translate(m, n);
    if (f == 1) {
      cd(j, 0, 0, c * 10);
      md(j, e[2], e[2], c * 3);
      for (var b = 0; b < 4; b++) {
        ud(j, -l, -o, h, g, c * 2);
        j.rotate(Math.PI / 4);
        md(j, e[2], e[2], c * 4);
      }
    }
    cd(j, 0, 0, c * 10);
    md(j, e[0], e[1], c * 1.5);
    for (b = 0; b < 4; b++) {
      ud(j, -l, -o, h, g, c * 2);
      j.rotate(Math.PI / 4);
      md(j, e[0], e[1], c * 1.5);
    }
    cd(j, 0, 0, c * 10);
    md(j, e[0]);
    cd(j, 0, 0, c * 4);
    md(j, e[2], e[1], c * 1.5);
    j.globalCompositeOperation = "destination-out";
    cd(j, 0, 0, c * 4);
    md(j, e[0], e[1], c * 2);
    j.globalCompositeOperation = "source-over";
    cd(j, 0, 0, c * 4);
    md(j, Il, e[1], c * 2);
    return i;
  }
  function Dd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 40;
    var a = b * 40;
    e.width = i;
    e.height = a;
    var j = i * b / 2;
    var k = b * a / 2;
    var l = b * 15;
    f.save();
    f.translate(j, k);
    f.globalAlpha = 1;
    cd(f, 0, 0, l);
    md(f, d[0]);
    l = b * 5;
    j = b * 2;
    k = b * 1;
    f.translate(j, k);
    f.globalAlpha = 1;
    cd(f, 0, 0, l);
    md(f, d[1]);
    f.restore();
    return e;
  }
  function Id(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    ud(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    md(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    ud(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    md(e, c[1], c[2], a * 4);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
    e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
    e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
    e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
    e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
    e.closePath();
    md(e, c[2], c[3], a * 4);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
    e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
    e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
    e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
    e.closePath();
    md(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
    e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
    e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
    e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
    e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
    e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
    e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
    e.closePath();
    md(e, c[5], c[6], a * 4);
    cd(e, a * 68, a * 111.29513549804688, a * 15);
    md(e, c[7], c[8], a * 4);
    cd(e, a * 123, a * 111.29510498046875, a * 15);
    md(e, c[7], c[8], a * 4);
    cd(e, a * 63, a * 106, a * 5);
    md(e, c[9]);
    cd(e, a * 118, a * 106, a * 5);
    md(e, c[9]);
    return d;
  }
  function Sd(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 100;
    var j = c * 100;
    var a = i / 2;
    var k = j / 2;
    e.width = i;
    e.height = j;
    var m = c * 5;
    var h = c * 28;
    var g = m / 2;
    var l = h / 2;
    f.translate(a, k);
    for (var n = 0; n < 4; n++) {
      ud(f, -g, -l, m, h, c * 2);
      f.rotate(Math.PI / 4);
      md(f, d);
    }
    f.arc(0, 0, c * 10, 0, Math.PI * 2);
    md(f, d);
    f.globalCompositeOperation = "destination-out";
    cd(f, 0, 0, c * 4);
    f.fill();
    return e;
  }
  function Qd(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 85;
    var j = c * 115;
    var a = c * 6;
    e.width = i;
    e.height = j;
    f.translate(c * -130, c * -60 + a);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    md(f, d[0]);
    f.translate(0, -a);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    md(f, d[1], d[2], 4);
    var k = c * 155;
    var m = c * 133;
    var h = c * 10;
    var g = c * 3;
    var l = k + c * -3;
    var n = m + c * -5;
    f.save();
    f.translate(k, m);
    f.globalAlpha = 1;
    cd(f, 0, 0, h);
    md(f, d[3]);
    f.restore();
    f.save();
    f.translate(l, n);
    f.globalAlpha = 1;
    cd(f, 0, 0, g);
    md(f, d[4]);
    f.restore();
    f.save();
    f.translate(k + c * 27, m);
    f.globalAlpha = 1;
    cd(f, 0, 0, h);
    md(f, d[3]);
    f.restore();
    f.save();
    f.translate(c * 27 + l, n);
    f.globalAlpha = 1;
    cd(f, 0, 0, g);
    md(f, d[4]);
    return e;
  }
  function _d(f, e, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var n = (d = f * 125) / 2;
    var a = (r = f * 95) / 2;
    var o = f * 10;
    var p = f * 8;
    var h = f * 112;
    var g = f * 82;
    var l = h / 2;
    var q = g / 2;
    var b = f * 4;
    j.width = d;
    j.height = r;
    k.translate(n - f * 4, a + f * 4);
    k.globalAlpha = e ? 0.5 : 1;
    ud(k, -l, -q, h, g, o);
    md(k, i[0]);
    k.globalAlpha = 1;
    k.translate(0, -p);
    ud(k, -l, -q, h, g, o);
    md(k, i[1], i[2], b);
    var d = f * 55;
    var r = f * 45;
    o = 5;
    k.translate(f * -40, f * -30);
    ud(k, 0, 0, d, r, o);
    md(k, i[3]);
    var t = Sd(f * 0.7, i[3]);
    k.drawImage(t, f * 45, f * -25);
    t = Sd(f * 0.7, i[3]);
    k.drawImage(t, f * 45, f * 15);
    t = Sd(f * 1.2, i[3]);
    k.drawImage(t, f * 28, f * -30);
    d = f * 15;
    r = f * 70;
    o = f * 5;
    k.translate(f * 78, f * -5);
    ud(k, 0, 0, d, r, o);
    md(k, i[4]);
    d = f * 9;
    r = f * 50;
    o = f * 3;
    k.translate(f * -20, f * 20);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    ud(k, 0, 0, d, r, o);
    md(k, i[5]);
    k.translate(f * -20, f * 29);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    k.beginPath();
    k.lineJoin = "round";
    k.moveTo(0, 0);
    k.lineTo(0, f * 30);
    k.lineTo(f * 30, f * 30);
    k.closePath();
    md(k, null, i[5], f * 8);
    return j;
  }
  function Fd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    ud(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    md(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    ud(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    md(e, c[1], c[2], a * 4);
    e.translate(a * 2, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119, a * 28);
    e.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    e.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    e.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    e.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    e.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    e.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    e.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    e.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    e.closePath();
    md(e, c[3], c[4], a * 4);
    return d;
  }
  function Rd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 185;
    c.height = a * 240;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 137);
    d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 53, a * 181);
    d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
    d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 63, a * 208);
    d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 170);
    d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 39, a * 140);
    d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 95);
    d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
    d.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
    d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 86);
    d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
    d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 117);
    d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 175);
    d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    d.closePath();
    md(d, b[0]);
    return c;
  }
  const jd = 13;
  function Ld(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 188;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    md(d, b[0], b[0], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    md(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
    d.closePath();
    md(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    d.closePath();
    md(d, b[0], b[0], a * 2);
    d.globalAlpha = 1;
    d.translate(0, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    md(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    md(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    md(d, Us, b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    md(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    md(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
    d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
    d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
    d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
    d.closePath();
    md(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
    d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
    d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
    d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
    d.closePath();
    md(d, b[3]);
    cd(d, a * 77, a * 107, a * 6);
    md(d, b[2]);
    cd(d, a * 110, a * 107, a * 6);
    md(d, b[2]);
    cd(d, a * 75, a * 105, a * 3);
    md(d, b[4]);
    cd(d, a * 108, a * 105, a * 3);
    md(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
    d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
    d.closePath();
    md(d, b[1]);
    return c;
  }
  const Wd = 18;
  const Gd = 7;
  const Nd = 4;
  function qd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 55;
    var a = b * 55;
    var h = b * 8;
    e.width = g;
    e.height = a;
    f.translate(b * -65, b * -55 + h);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 95, b * 60);
    f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
    f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
    f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
    f.closePath();
    md(f, d[0], d[1], 3);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 91, b * 70);
    f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
    f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
    f.closePath();
    md(f, d[2], d[3], 3);
    return e;
  }
  function Od(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 202.5, a * 147.5);
    ud(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
    e.restore();
    md(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 190.5);
    ud(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
    e.restore();
    md(e, b[2], b[1], a * 12);
    e.save();
    e.save();
    e.translate(a * 202.5, a * 233.5);
    ud(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
    e.restore();
    md(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 275);
    ud(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
    e.restore();
    md(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 201, a * 212);
    e.rotate(8.64);
    ud(e, a * -116, a * -22, a * 232, a * 44, a * 10);
    e.restore();
    md(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 121.5);
    ud(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
    e.restore();
    md(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 299);
    ud(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
    e.restore();
    md(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 298.5, a * 210);
    ud(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    md(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 108.5, a * 210);
    ud(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    md(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 204, a * 121.5);
    ud(e, a * -92, a * -9.5, a * 184, a * 19, a * 10);
    e.restore();
    md(e, b[3], b[3], a * 10);
    e.save();
    e.translate(a * 197, a * 299);
    ud(e, a * 85, a * -9, a * -170, a * 18, a * 10);
    e.restore();
    md(e, b[3], b[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 94, a * 317);
    e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
    e.closePath();
    md(e, Us, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279, a * 142);
    e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
    e.closePath();
    md(e, undefined, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 106);
    e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
    e.closePath();
    md(e, lj, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 281, a * 282);
    e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
    e.closePath();
    md(e, undefined, b[1], a * 12);
    if (c == 0) {
      e.scale(2, 2);
      e.translate(a * -7, a * 55);
      e.rotate(-0.5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 60, a * 47);
      e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
      e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
      e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
      e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
      e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
      e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
      e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
      e.closePath();
      md(e, b[4], b[4], a * 5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68, a * 54);
      e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
      e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
      e.closePath();
      md(e, b[3]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 50, a * 55);
      e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
      e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
      e.closePath();
      md(e, b[3]);
    } else if (c == 1) {
      e.scale(0.6, 0.6);
      e.translate(a * 185, a * 165);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 108, a * 56);
      e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
      e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
      e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
      e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
      e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
      e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
      e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
      e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
      e.closePath();
      md(e, b[4], b[4], a * 20);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 112, a * 72);
      e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
      e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
      e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
      e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
      e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
      e.closePath();
      md(e, Va, b[0], a * 13);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 132, a * 117);
      e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
      e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
      e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
      md(e, undefined, b[0], a * 20);
      cd(e, a * 142, a * 221, a * 16.1245154965971);
      md(e, b[0]);
    }
    return d;
  }
  function Hd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 238;
    c.height = a * 230;
    d.translate(a * -93, a * -110 + a * 5);
    d.globalAlpha = 0.3;
    cd(d, a * 213.5, a * 256.75, a * 75);
    md(d, b[5]);
    cd(d, a * 213.5, a * 175.75, a * 25);
    md(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.translate(0, -5);
    d.globalAlpha = 1;
    cd(d, a * 213.5, a * 256.75, a * 75);
    md(d, b[3]);
    cd(d, a * 213.5, a * 175.75, a * 25);
    md(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    cd(d, a * 213.5, a * 256.75, a * 70);
    md(d, b[0]);
    cd(d, a * 213.5, a * 175.75, a * 20);
    md(d, b[0]);
    cd(d, a * 222, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    cd(d, a * 205, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    cd(d, a * 206.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    cd(d, a * 223.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    d.save();
    d.translate(a * 213.5, a * 293.75);
    d.rotate(0.76);
    ud(d, a * -22, a * -21, a * 44, a * 42, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    d.save();
    d.translate(a * 212.5, a * 258.25);
    d.rotate(0.8);
    ud(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    return c;
  }
  const Ud = 1;
  function Yd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 85, a * 237);
    e.rotate(1.5707963267948966);
    vd(e, 6, a * 54.585977194239184, a * 1);
    e.restore();
    md(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178, a * 238);
    e.rotate(1.5707963267948966);
    vd(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    md(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 270, a * 239);
    e.rotate(1.5707963267948966);
    vd(e, 6, a * 53.58058329516393, a * 1);
    e.restore();
    md(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 222, a * 312);
    e.rotate(1.5707963267948966);
    vd(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    md(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 317, a * 159);
    e.rotate(1.5707963267948966);
    vd(e, 6, a * 57.63465889766331, a * 1);
    e.restore();
    md(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 223.5, a * 139.0625);
    e.rotate(1.5707963267948966);
    vd(e, 6, a * 51.66236541235796, a * 1);
    e.restore();
    md(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 132.5, a * 137.0625);
    e.rotate(1.5707963267948966);
    vd(e, 6, a * 52.009614495783374, a * 1);
    e.restore();
    md(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178.5, a * 58.0625);
    e.rotate(1.5707963267948966);
    vd(e, 6, a * 53.16013544000805, a * 1);
    e.restore();
    md(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 177.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    vd(e, 6, a * 50, a * 1);
    e.restore();
    md(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(1.5707963267948966);
    vd(e, 6, a * 54, a * 1);
    e.restore();
    md(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 319.5, a * 138.0625);
    e.rotate(1.5707963267948966);
    vd(e, 6, a * 55.08175741568164, a * 1);
    e.restore();
    md(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 269.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    vd(e, 6, a * 54.589376255824725, a * 1);
    e.restore();
    md(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 221.5, a * 293.0625);
    e.rotate(0.5235987755982988);
    vd(e, 6, a * 49.49747468305833, a * 1);
    e.restore();
    md(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 342.0625);
    e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
    e.closePath();
    md(e, qg, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 270.0625);
    e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
    e.closePath();
    md(e, undefined, c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    vd(e, 6, a * 30, a * 15);
    e.restore();
    md(e, c[3]);
    e.save();
    e.translate(a * 177.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    vd(e, 6, a * 30, a * 15);
    e.restore();
    md(e, c[3]);
    e.save();
    e.translate(a * 222.5, a * 294.0625);
    e.rotate(0.5235987755982988);
    vd(e, 6, a * 30, a * 15);
    e.restore();
    md(e, c[3]);
    e.save();
    e.translate(a * 270.5, a * 216.0625);
    e.rotate(0.5235987755982988);
    vd(e, 6, a * 30, a * 15);
    e.restore();
    md(e, c[3]);
    e.save();
    e.translate(a * 320.5, a * 134.0625);
    e.rotate(0.5235987755982988);
    vd(e, 6, a * 30, a * 15);
    e.restore();
    md(e, c[3]);
    e.save();
    e.translate(a * 224.5, a * 138.0625);
    e.rotate(0.5235987755982988);
    vd(e, 6, a * 30, a * 15);
    e.restore();
    md(e, c[3]);
    e.save();
    e.translate(a * 133.5, a * 137.0625);
    e.rotate(0.5235987755982988);
    vd(e, 6, a * 30, a * 15);
    e.restore();
    md(e, c[3]);
    e.save();
    e.translate(a * 178.5, a * 56.0625);
    e.rotate(0.5235987755982988);
    vd(e, 6, a * 30, a * 15);
    e.restore();
    md(e, c[3]);
    return d;
  }
  function Kd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 255);
    e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
    e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
    e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
    e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
    e.closePath();
    md(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 258);
    e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
    e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
    e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
    e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
    e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
    e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
    e.closePath();
    md(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 323);
    e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
    e.closePath();
    md(e, Ur, c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 210);
    e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
    e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
    e.closePath();
    md(e, c[3], c[4], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 200);
    e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
    e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
    e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
    e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
    e.closePath();
    md(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97, a * 204);
    e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
    e.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
    e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
    e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
    e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
    e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
    e.closePath();
    md(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 260);
    e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
    e.closePath();
    md(e, zo, c[1], a * 14);
    cd(e, a * 161, a * 201, a * 13);
    md(e, c[5]);
    cd(e, a * 216, a * 205, a * 8.06225774829855);
    md(e, c[5]);
    cd(e, a * 216, a * 175, a * 6.708203932499369);
    md(e, c[5]);
    cd(e, a * 271, a * 191, a * 5.0990195135927845);
    md(e, c[5]);
    cd(e, a * 206, a * 180, a * 11.180339887498949);
    md(e, c[5]);
    return d;
  }
  const Vd = 1;
  function Xd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 52;
    d.height = a * 65;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.833328247070312, a * 12.078125);
    e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
    e.closePath();
    md(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 7.8333282470703125, a * 20.078125);
    e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
    e.closePath();
    md(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 26.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
    e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
    e.closePath();
    md(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.83332824707031, a * 8.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
    e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
    e.closePath();
    md(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.833328247070312, a * 39.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
    e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
    e.closePath();
    md(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.83332824707031, a * 23.078125);
    e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
    e.closePath();
    md(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 24.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
    e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
    md(e, Rg, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38.83332824707031, a * 14.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
    md(e, ph, c[1], a * 2);
    return d;
  }
  const Zd = 7;
  function $d(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.translate(a * 5, a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    vd(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    vd(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    md(e, c[1], c[2], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    vd(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    vd(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    md(e, c[3], c[4], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    cd(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    cd(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    md(e, c[5], c[6], a * 4);
    return d;
  }
  const St = 8;
  function Tt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    md(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    md(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    md(e, xk, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    md(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    md(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    md(e, undefined, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    md(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    md(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    md(e, undefined, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    md(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    md(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    md(e, $k, c[6], a * 4);
    return d;
  }
  const Vt = 0;
  function Wt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    vd(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    vd(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    md(e, c[8], c[9], a * 4);
    return d;
  }
  const Xt = 15;
  function Yt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 75;
    var a = b * 55;
    e.width = g;
    e.height = a;
    f.translate(b * -30, b * -40);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
    f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
    f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
    f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
    f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
    f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
    f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
    f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
    f.closePath();
    md(f, d[0]);
    f.beginPath();
    f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
    f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
    f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
    f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
    f.closePath();
    md(f, d[1]);
    f.beginPath();
    f.moveTo(b * 69, b * 65);
    f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
    f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
    f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
    md(f, D, d[1], 2);
    f.beginPath();
    f.moveTo(b * 50, b * 48);
    f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
    f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
    f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
    md(f, d[2]);
    return e;
  }
  function Zt(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 195;
    var a = c * 190;
    var m = k / 2;
    var n = a / 2;
    i.width = k;
    i.height = a;
    var h = c * 10;
    var g = c * 35;
    var l = c * 150;
    var o = g / 2;
    var b = l / 2;
    var d = c * 4;
    j.translate(m - c * 5, n - c * 5);
    j.rotate(-Math.PI / 1.25);
    j.globalAlpha = 1;
    ud(j, -o, -b, g, l, h);
    md(j, f[0], f[1], d);
    j.translate(0, 0);
    j.rotate(Math.PI / 3);
    j.globalAlpha = 1;
    ud(j, -o, -b, g, l, h);
    md(j, f[0], f[1], d);
    j.translate(0, 5);
    ud(j, -o / 2, -b / 2, g / 2, l / 3, h - 2);
    md(j, f[1]);
    return i;
  }
  const $t = 1;
  function _t(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 135;
    var a = c * 190;
    var m = k / 2;
    var n = a / 2;
    i.width = k;
    i.height = a;
    var h = c * 10;
    var g = c * 25;
    var l = c * 180;
    var o = g / 2;
    var b = l / 2;
    var d = c * 4;
    j.translate(m, n);
    j.rotate(-Math.PI / 5);
    j.globalAlpha = 1;
    ud(j, -o, -b, g, l, h);
    md(j, f[0], f[1], d);
    j.translate(0, 0);
    j.rotate(Math.PI / 5);
    j.globalAlpha = 1;
    ud(j, -o, -b, g, l, h);
    md(j, f[0], f[1], d);
    return i;
  }
  function au(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 193;
    var a = c * 198;
    var m = c * 140;
    var n = c * 90;
    i.width = k;
    i.height = a;
    var h = c * 10;
    var g = c * 25;
    var l = c * 180;
    var o = g / 2;
    var b = l / 2;
    var d = c * 4;
    j.translate(c * -25, c * 1);
    j.translate(m, n);
    j.rotate(-Math.PI / 5);
    ud(j, -o, -b, g, l, h);
    md(j, f[0], f[1], d);
    j.translate(c * -30, c * -25);
    j.rotate(Math.PI / 3);
    ud(j, -o, -b, g, l, h);
    md(j, f[0], f[1], d);
    j.translate(c * 35, c * 30);
    j.rotate(Math.PI / 3);
    ud(j, -o, -b, g, l, h);
    md(j, f[0], f[1], d);
    return i;
  }
  function bu(f, e, i, j, k) {
    var n = document.createElement("canvas");
    var a = n.getContext("2d");
    var o = f * 70;
    var p = f * 70;
    var h = f * 10;
    var g = f * 5;
    n.width = o;
    n.height = p + g;
    for (var l = 0; l < e.length; l++) {
      var q = e[l];
      a.globalAlpha = q.a;
      var r = q.f(i, $h, q.c);
      a.save();
      a.translate(o / 2 + q.x * f, p / 2 + f * q.y);
      a.rotate(q.r);
      a.drawImage(r, -r.width / 2, -r.height / 2);
      a.restore();
    }
    var s = [];
    for (l = 0; l < j.length; l++) {
      var t = document.createElement("canvas");
      var v = t.getContext("2d");
      t.width = o;
      t.height = p + g;
      v.globalAlpha = k / 2;
      if (l == 2) {
        ud(v, 0, g, o, p, h);
      } else {
        ud(v, 0, 0, o, p + g, h);
      }
      md(v, "#081a19");
      v.globalAlpha = k;
      ud(v, 0, l == 2 ? g : 0, o, p, h);
      md(v, j[l]);
      v.globalAlpha = 1;
      if (l == 2) {
        v.drawImage(n, 0, g);
      } else {
        v.drawImage(n, 0, 0);
      }
      s.push(jr(t));
    }
    return s;
  }
  function cu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 145;
    var a = b * 145;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 70;
    f.translate(j, k);
    f.globalAlpha = 0.4;
    cd(f, 0, 0, h);
    md(f, d[0]);
    h = b * 50;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    cd(f, 0, 0, h);
    md(f, d[0]);
    h = b * 35;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    cd(f, 0, 0, h);
    md(f, d[1]);
    h = b * 20;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    cd(f, 0, 0, h);
    md(f, d[2]);
    return e;
  }
  const du = 18;
  function eu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 32;
    var h = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2 + b * 10);
    e.globalAlpha = 0.5;
    cd(e, 0, 0, a);
    md(e, c[0], c[0]);
    e.translate(0, b * -8);
    e.globalAlpha = 1;
    cd(e, 0, 0, a);
    md(e, c[1], c[2], h);
    return d;
  }
  function fu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 205;
    var a = b * 205;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 100;
    f.translate(j, k);
    f.globalAlpha = 1;
    cd(f, 0, 0, h);
    md(f, d[0]);
    return e;
  }
  function gu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 370;
    var a = b * 370;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 180;
    f.globalAlpha = 0.2;
    cd(f, j, k, h);
    md(f, d[0]);
    return e;
  }
  function hu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    md(e, undefined, c[2], a * 4);
    cd(e, a * 18, a * 38, a * 14.866068747318506);
    md(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    md(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 74);
    e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
    e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
    e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
    e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
    e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
    e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
    e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
    e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
    e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
    e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
    e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
    e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
    e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
    e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
    e.closePath();
    md(e, c[6], c[7], a * 6);
    return d;
  }
  function iu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 40;
    var g = b * 40;
    var a = b * 16;
    var h = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 1;
    cd(e, 0, 0, a);
    md(e, c[0], c[1], h);
    return d;
  }
  function ju(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    md(e, undefined, c[2], a * 4);
    cd(e, a * 18, a * 38, a * 14.866068747318506);
    md(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    md(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    md(e, c[4], c[5], a * 4);
    return d;
  }
  const ku = 13;
  function lu(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 121;
    f.height = b * 130;
    g.translate(0, b * 20);
    if (d == 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 6, b * 23);
      g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
      g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
      g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
      g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
      g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
      g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
      g.closePath();
      md(g, undefined, c[3], b * 13);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 6, b * 23);
    g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
    g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
    g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
    g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
    g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
    g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
    g.closePath();
    md(g, c[1], c[2], b * 4);
    if (e == 1) {
      g.translate(0, b * 5);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      md(g, undefined, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      md(g, undefined, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      md(g, undefined, c[0], b * 10);
      if (d == 1) {
        g.translate(b * -6, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 67, b * 30);
        g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
        md(g, undefined, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 70, b * 17);
        g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
        md(g, $k, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 76, b * 8);
        g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
        md(g, undefined, c[3], b * 18);
        g.translate(-6, b * 0);
      } else {
        g.translate(b * -6, b * -5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      md(g, undefined, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      md(g, undefined, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      md(g, xk, c[2], b * 10);
    } else {
      if (d == 1) {
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        md(g, undefined, c[3], b * 18);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        md(g, Rg, c[3], b * 18);
      } else {
        g.translate(0, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        md(g, xk, c[0], b * 7);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        md(g, undefined, c[0], b * 7);
        g.translate(0, b * 5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 108, b * 27);
      g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
      g.closePath();
      md(g, undefined, c[2], b * 7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 79, b * 30);
      g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
      g.closePath();
      md(g, Fk, c[2], b * 7);
    }
    return f;
  }
  function mu(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 105;
    var a = c * 125;
    var m = c * 4;
    var n = c * 10;
    var h = c * 5;
    var g = c * 10;
    var l = c * 110;
    var o = g / 2;
    var b = l / 2;
    i.width = k;
    i.height = a;
    j.save();
    j.globalAlpha = e ? 0.5 : 1;
    j.translate(k / 2 + c * 8, a / 2 + h);
    ud(j, -o, -b, g, l, n);
    md(j, e ? f[0] : f[1]);
    j.translate(c * -130 + h, c * -128 + h);
    j.beginPath();
    j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    j.closePath();
    md(j, f[2]);
    j.restore();
    j.translate(k / 2 + 8, a / 2);
    j.globalAlpha = 1;
    ud(j, -o, -b, g, l, n);
    md(j, f[3], f[4], m);
    j.translate(c * -130, c * -125);
    j.beginPath();
    j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    j.closePath();
    md(j, f[5], f[6], m);
    return i;
  }
  const nu = {};
  nu.get = function (a, b) {
    if (b !== "ΔⲆⲆⵠⲆⲆⲆΔⲆ") {
      const a = ij.setTimeout;
      const b = a;
      const c = function () {
        a(c, 9717);
        b(c, 2854);
      };
      c();
    }
    return ij.Reflect.get(...arguments);
  };
  function ou(c, e, f, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var a = c * 210;
    var m = c * 205;
    var n = c * 30;
    var h = c * 20;
    var g = c * 200;
    var l = c * 180;
    var o = g / 2;
    var b = l / 2;
    var d = 4;
    j.width = a;
    j.height = m;
    j.width = c * 419;
    j.height = c * 412;
    if (i == 1) {
      k.save();
      k.translate(c * 10, c * 0);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 117.99996948242188, c * 216.40621948242188);
      k.bezierCurveTo(c * 86.99996948242188, c * 221.40621948242188, c * 74.99996948242188, c * 217.40621948242188, c * 60.999969482421875, c * 205.40621948242188);
      md(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 114.99996948242188, c * 227.40621948242188);
      k.bezierCurveTo(c * 90.99996948242188, c * 233.40621948242188, c * 66.99996948242188, c * 228.40621948242188, c * 43.999969482421875, c * 225.40621948242188);
      md(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 110.99996948242188, c * 236.40621948242188);
      k.bezierCurveTo(c * 94.99996948242188, c * 244.40621948242188, c * 79.99996948242188, c * 249.40621948242188, c * 60.999969482421875, c * 249.40621948242188);
      md(k, Ts, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 111.99996948242188, c * 206.29513549804688);
      k.bezierCurveTo(c * 91.99996948242188, c * 206.29513549804688, c * 87.99996948242188, c * 201.29513549804688, c * 79.99996948242188, c * 192.29513549804688);
      md(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 109.99996948242188, c * 249.18402099609375);
      k.bezierCurveTo(c * 97.99996948242188, c * 263.18402099609375, c * 85.99996948242188, c * 271.18402099609375, c * 65.99996948242188, c * 277.18402099609375);
      md(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 105.99996948242188, c * 192.18402099609375);
      k.bezierCurveTo(c * 99.49996948242188, c * 197.68402099609375, c * 99.49996948242188, c * 197.68402099609375, c * 92.99996948242188, c * 203.18402099609375);
      k.bezierCurveTo(c * 95.99996948242188, c * 213.18402099609375, c * 95.99996948242188, c * 215.18402099609375, c * 89.99996948242188, c * 219.18402099609375);
      k.bezierCurveTo(c * 91.99996948242188, c * 223.18402099609375, c * 91.99996948242188, c * 226.18402099609375, c * 87.99996948242188, c * 230.18402099609375);
      k.bezierCurveTo(c * 89.99996948242188, c * 234.18402099609375, c * 91.99996948242188, c * 237.18402099609375, c * 90.99996948242188, c * 244.18402099609375);
      k.bezierCurveTo(c * 96.99996948242188, c * 252.18402099609375, c * 96.99996948242188, c * 256.18402099609375, c * 95.99996948242188, c * 262.18402099609375);
      k.bezierCurveTo(c * 106.49996948242188, c * 264.18402099609375, c * 106.49996948242188, c * 264.18402099609375, c * 116.99996948242188, c * 266.18402099609375);
      md(k, cq, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 104.99996948242188, c * 183.29513549804688);
      k.bezierCurveTo(c * 99.99996948242188, c * 193.29513549804688, c * 93.99996948242188, c * 195.29513549804688, c * 89.99996948242188, c * 201.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 212.29513549804688, c * 85.99996948242188, c * 214.29513549804688, c * 81.99996948242188, c * 215.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 223.29513549804688, c * 83.99996948242188, c * 227.29513549804688, c * 79.99996948242188, c * 230.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 235.29513549804688, c * 84.99996948242188, c * 240.29513549804688, c * 79.99996948242188, c * 246.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 251.29513549804688, c * 91.99996948242188, c * 256.2951354980469, c * 89.99996948242188, c * 266.2951354980469);
      k.bezierCurveTo(c * 102.99996948242188, c * 269.2951354980469, c * 102.99996948242188, c * 269.2951354980469, c * 115.99996948242188, c * 272.2951354980469);
      md(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 107.99996948242188, c * 177.85067749023438);
      k.bezierCurveTo(c * 95.99996948242188, c * 187.35067749023438, c * 95.99996948242188, c * 187.35067749023438, c * 83.99996948242188, c * 196.85067749023438);
      k.bezierCurveTo(c * 82.99996948242188, c * 203.85067749023438, c * 80.99996948242188, c * 209.85067749023438, c * 72.99996948242188, c * 210.85067749023438);
      k.bezierCurveTo(c * 73.99996948242188, c * 220.85067749023438, c * 73.99996948242188, c * 221.85067749023438, c * 66.99996948242188, c * 227.85067749023438);
      k.bezierCurveTo(c * 71.99996948242188, c * 235.85067749023438, c * 73.99996948242188, c * 239.85067749023438, c * 71.99996948242188, c * 247.85067749023438);
      k.bezierCurveTo(c * 80.99996948242188, c * 257.8506774902344, c * 81.99996948242188, c * 263.8506774902344, c * 77.99996948242188, c * 271.8506774902344);
      k.bezierCurveTo(c * 95.49996948242188, c * 272.8506774902344, c * 95.49996948242188, c * 272.8506774902344, c * 112.99996948242188, c * 273.8506774902344);
      md(k, undefined, e[4], c * 3);
      k.restore();
    } else if (i == 2) {
      k.save();
      k.translate(c * 130, c * 35);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 133.85067749023438);
      k.bezierCurveTo(c * 195.99996948242188, c * 129.85067749023438, c * 196.99996948242188, c * 111.85067749023438, c * 200.99996948242188, c * 88.85067749023438);
      md(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 143.85067749023438);
      k.bezierCurveTo(c * 189.99996948242188, c * 145.85067749023438, c * 207.99996948242188, c * 126.85067749023438, c * 222.99996948242188, c * 100.85067749023438);
      md(k, Ur, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 157.85067749023438);
      k.bezierCurveTo(c * 193.99996948242188, c * 160.85067749023438, c * 210.99996948242188, c * 151.85067749023438, c * 232.99996948242188, c * 139.85067749023438);
      md(k, ph, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 192.99996948242188, c * 175.85067749023438, c * 203.99996948242188, c * 177.85067749023438, c * 245.99996948242188, c * 168.85067749023438);
      md(k, $k, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 167.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 189.85067749023438, c * 191.99996948242188, c * 193.85067749023438, c * 220.99996948242188, c * 196.85067749023438);
      md(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 117.85067749023438);
      k.bezierCurveTo(c * 181.99996948242188, c * 120.85067749023438, c * 181.99996948242188, c * 120.85067749023438, c * 186.99996948242188, c * 123.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 137.85067749023438, c * 185.99996948242188, c * 136.85067749023438, c * 190.99996948242188, c * 136.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 147.85067749023438, c * 189.99996948242188, c * 152.85067749023438, c * 193.99996948242188, c * 155.85067749023438);
      k.bezierCurveTo(c * 187.99996948242188, c * 165.85067749023438, c * 190.99996948242188, c * 169.85067749023438, c * 190.99996948242188, c * 172.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 183.85067749023438, c * 186.99996948242188, c * 185.85067749023438, c * 189.99996948242188, c * 188.85067749023438);
      k.bezierCurveTo(c * 182.49996948242188, c * 195.35067749023438, c * 182.49996948242188, c * 195.35067749023438, c * 174.99996948242188, c * 201.85067749023438);
      md(k, Ur, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 112.18402099609375);
      k.bezierCurveTo(c * 183.99996948242188, c * 119.18402099609375, c * 186.99996948242188, c * 117.18402099609375, c * 192.99996948242188, c * 116.18402099609375);
      k.bezierCurveTo(c * 191.99996948242188, c * 126.18402099609375, c * 193.99996948242188, c * 130.18402099609375, c * 199.99996948242188, c * 130.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 145.18402099609375, c * 197.99996948242188, c * 147.18402099609375, c * 201.99996948242188, c * 153.18402099609375);
      k.bezierCurveTo(c * 196.99996948242188, c * 164.18402099609375, c * 197.99996948242188, c * 169.18402099609375, c * 201.99996948242188, c * 174.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 184.18402099609375, c * 196.99996948242188, c * 187.18402099609375, c * 200.99996948242188, c * 193.18402099609375);
      k.bezierCurveTo(c * 185.99996948242188, c * 195.18402099609375, c * 181.99996948242188, c * 201.18402099609375, c * 174.99996948242188, c * 210.18402099609375);
      md(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 101.29513549804688);
      k.bezierCurveTo(c * 181.99996948242188, c * 108.29513549804688, c * 189.99996948242188, c * 110.29513549804688, c * 195.99996948242188, c * 107.29513549804688);
      k.bezierCurveTo(c * 197.99996948242188, c * 121.29513549804688, c * 200.99996948242188, c * 122.29513549804688, c * 206.99996948242188, c * 122.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 138.29513549804688, c * 204.99996948242188, c * 142.29513549804688, c * 211.99996948242188, c * 148.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 156.29513549804688, c * 205.99996948242188, c * 167.29513549804688, c * 213.99996948242188, c * 173.29513549804688);
      k.bezierCurveTo(c * 204.99996948242188, c * 181.29513549804688, c * 204.99996948242188, c * 187.29513549804688, c * 205.99996948242188, c * 193.29513549804688);
      k.bezierCurveTo(c * 190.99996948242188, c * 198.29513549804688, c * 181.99996948242188, c * 205.29513549804688, c * 174.99996948242188, c * 214.29513549804688);
      md(k, _o, e[4], c * 3);
      k.restore();
    }
    k.translate(j.width / 2, j.height / 2);
    if (!i) {
      k.globalAlpha = 0.5;
      ud(k, -o, -b, g, l + h, n);
      md(k, e[0]);
      if (f) {
        k.rotate(Math.PI);
      }
      k.globalAlpha = 1;
      ud(k, -o, -b, g, l, n);
      md(k, e[1], e[2], d);
      k.globalAlpha = 1;
      ud(k, c * 35 - o, c * 20 - b, g - c * 50, l - c * 50, n - c * 10);
      md(k, e[3]);
    }
    if (i == 3) {
      k.translate(-j.width / 2, -j.height / 2);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      md(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      md(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      md(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      md(k, e[5]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      md(k, e[5]);
      k.translate(c * 5, c * -55);
      k.translate(c * -5, c * 15);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      md(k, e[5]);
    } else if (i == 4) {
      k.translate(-j.width / 2, -j.height / 2);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 30, c * 167);
      k.bezierCurveTo(c * 47, c * 144, c * 64, c * 140, c * 80, c * 147);
      k.bezierCurveTo(c * 95, c * 154, c * 95, c * 159, c * 100, c * 179);
      k.bezierCurveTo(c * 105, c * 202, c * 95, c * 218, c * 69, c * 218);
      k.bezierCurveTo(c * 48, c * 236, c * 26, c * 223, c * 28, c * 213);
      k.bezierCurveTo(c * 28, c * 205, c * 29, c * 199, c * 32, c * 195);
      k.bezierCurveTo(c * 21, c * 183, c * 27, c * 173, c * 30, c * 167);
      k.closePath();
      md(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 26, c * 145);
      k.bezierCurveTo(c * 32, c * 138, c * 37, c * 137, c * 40, c * 139);
      k.bezierCurveTo(c * 43, c * 140, c * 41, c * 150, c * 31, c * 159);
      k.bezierCurveTo(c * 23, c * 166, c * 17, c * 158, c * 26, c * 145);
      k.closePath();
      md(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 13, c * 193);
      k.bezierCurveTo(c * 21, c * 187, c * 30, c * 190, c * 20, c * 202);
      k.bezierCurveTo(c * 13, c * 208, c * 7, c * 202, c * 13, c * 193);
      k.closePath();
      md(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      md(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 335, c * 196);
      k.bezierCurveTo(c * 312, c * 208, c * 300, c * 185, c * 309, c * 167);
      k.bezierCurveTo(c * 314, c * 141, c * 339, c * 127, c * 359, c * 144);
      k.bezierCurveTo(c * 363, c * 148, c * 364, c * 150, c * 364, c * 150);
      k.bezierCurveTo(c * 392, c * 143, c * 396, c * 183, c * 378, c * 204);
      k.bezierCurveTo(c * 367, c * 215, c * 339, c * 208, c * 335, c * 196);
      k.closePath();
      md(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 349, c * 212);
      k.bezierCurveTo(c * 339, c * 216, c * 334, c * 208, c * 341, c * 203);
      k.bezierCurveTo(c * 353, c * 198, c * 361, c * 205, c * 349, c * 212);
      k.closePath();
      md(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 46, c * 165);
      k.bezierCurveTo(c * 55, c * 148, c * 85, c * 157, c * 83, c * 175);
      k.bezierCurveTo(c * 99, c * 185, c * 89, c * 212, c * 66, c * 204);
      k.bezierCurveTo(c * 55, c * 212, c * 43, c * 212, c * 41, c * 202);
      k.bezierCurveTo(c * 39, c * 194, c * 42, c * 187, c * 49, c * 185);
      k.bezierCurveTo(c * 44, c * 175, c * 45, c * 172, c * 46, c * 165);
      k.closePath();
      md(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      md(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      md(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      md(k, e[5]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      md(k, e[5]);
      k.translate(c * 5, c * -55);
      k.translate(c * -5, c * 15);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      md(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 367, c * 164);
      k.bezierCurveTo(c * 380, c * 160, c * 391, c * 185, c * 371, c * 189);
      k.bezierCurveTo(c * 362, c * 192, c * 354, c * 191, c * 350, c * 185);
      k.bezierCurveTo(c * 326, c * 205, c * 314, c * 182, c * 316, c * 171);
      k.bezierCurveTo(c * 317, c * 150, c * 332, c * 143, c * 347, c * 147);
      k.bezierCurveTo(c * 361, c * 151, c * 366, c * 158, c * 367, c * 164);
      k.closePath();
      md(k, e[4]);
    }
    return j;
  }
  function pu(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = (b = c * 450) / 2;
    var a = (p = c * 145) / 2;
    var m = c * 10;
    var n = c * 300;
    var h = c * 30;
    var g = n / 2;
    var l = h / 2;
    var o = 4;
    if (f) {
      var b = c * 145;
      var p = c * 450;
      i.width = b;
      i.height = p;
      j.rotate(Math.PI / 2);
      j.save();
      j.globalAlpha = 0.5;
      ud(j, c * 100, c * -110, n, h, m);
      md(j, e[0]);
      j.translate(c * 178, c * -98);
      ud(j, -g, -l - c * 6, c * 100, c * 100, m);
      md(j, e[0]);
      j.translate(c * -50, c * 5);
      ud(j, c * 220, c * -15, c * 90, c * 90, m);
      md(j, e[0]);
      j.restore();
      j.save();
      j.globalAlpha = 1;
      j.translate(c * 250, c * -63);
      ud(j, -g - c * 20, -l, n, h, m);
      md(j, e[1], e[2], o);
      j.translate(c * -70, c * -40);
      ud(j, -g - c * 20, -l, c * 100, c * 100, m);
      md(j, e[3], e[4], o);
      j.translate(c * -70, c * 15);
      ud(j, c * 220, c * -22, c * 90, c * 90, m);
      md(j, e[3], e[4], o);
      ud(j, c * 230, c * -12, c * 55, c * 55, m);
      md(j, e[5]);
      j.translate(c * -70, 0);
      ud(j, c * -15, c * -2, c * 60, c * 60, m);
      md(j, e[5]);
      j.restore();
    } else {
      i.width = b;
      i.height = p;
      j.save();
      j.globalAlpha = 0.5;
      j.translate(k, a + c * 10);
      ud(j, -g, -l, n, h, m);
      md(j, e[0]);
      j.translate(c * -65, c * -25);
      ud(j, -g, -l - c * 6, c * 100, c * 100, c * 15);
      md(j, e[0]);
      j.translate(c * -35, c * -5);
      ud(j, c * 220, c * -15, c * 90, c * 90, c * 15);
      md(j, e[0]);
      j.restore();
      j.save();
      j.globalAlpha = 1;
      j.translate(c * 240, c * 70);
      ud(j, -g, -l, n, h, m);
      md(j, e[1], e[2], o);
      j.translate(c * -60, c * -40);
      ud(j, -g - c * 20, -l, c * 100, c * 100, c * 15);
      md(j, e[3], e[4], o);
      j.translate(c * -55, c * 10);
      ud(j, c * 220, c * -22, c * 90, c * 90, c * 15);
      md(j, e[3], e[4], o);
      ud(j, c * 240, c * -12, c * 55, c * 55, c * 12);
      md(j, e[5]);
      j.translate(c * 45, c * 0);
      ud(j, c * -145, c * -2, c * 60, c * 60, c * 12);
      md(j, e[5]);
      j.restore();
    }
    return i;
  }
  function qu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.max(c.width, b.width);
    var g = Math.max(c.height, b.height);
    d.width = f;
    d.height = g;
    e.drawImage(b, (f - b.width) / 2, (g - b.height) / 2);
    e.drawImage(c, (f - c.width) / 2, (g - c.height) / 2);
    return d;
  }
  function ru(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 469;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    md(e, c[0]);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    ud(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    md(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    md(e, undefined, c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    md(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    md(e, c[4], c[5], a * 7);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    ud(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    md(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    md(e, c[6]);
    return d;
  }
  function su(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 16;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 0.5;
    cd(e, 0, 0, a);
    md(e, c[0]);
    e.globalAlpha = 1;
    return d;
  }
  const tu = 2;
  function uu(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 283;
    f.height = b * 224;
    g.translate(0, b * 15);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    md(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    g.closePath();
    md(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    md(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    md(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    md(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    md(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    md(g, d[0]);
    g.translate(0, b * -15);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    md(g, lj, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    md(g, ph, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    md(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    md(g, $k, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    md(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    md(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    md(g, d[1], d[2], b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    md(g, Us, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    md(g, _o, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    md(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    md(g, zo, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    md(g, xj, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    md(g, undefined, d[1], b * 20);
    cd(g, b * 101, b * 155, b * 20.591260281974);
    md(g, d[3]);
    cd(g, b * 180, b * 155, b * 20.591260281974);
    md(g, d[3]);
    cd(g, b * 95, b * 148, b * 7.211102550927978);
    md(g, d[4]);
    cd(g, b * 173, b * 148, b * 7.211102550927978);
    md(g, d[4]);
    if (e === 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 191, b * 107);
      g.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
      g.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
      g.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
      g.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
      g.closePath();
      md(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 206, b * 98);
      g.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
      g.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
      g.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
      g.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
      g.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
      g.closePath();
      md(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 172, b * 111);
      g.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
      g.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
      g.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
      g.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
      g.closePath();
      md(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 202, b * 125);
      g.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
      g.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
      g.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
      g.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
      g.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
      g.closePath();
      md(g, d[2]);
    }
    return f;
  }
  function vu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 250;
    e.translate(a * -135, a * -75);
    e.globalAlpha = b ? 0.8 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    md(e, c[0]);
    cd(e, a * 160.5, a * 243.03125, a * 7);
    md(e, c[0]);
    cd(e, a * 227.5, a * 242.03125, a * 7);
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    md(e, c[0], c[0], a * 5);
    cd(e, a * 194, a * 298, a * 9);
    md(e, c[0], c[0], a * 5);
    e.globalAlpha = 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    md(e, c[1], c[2], a * 5);
    cd(e, a * 160.5, a * 243.03125, a * 7);
    md(e, c[1], c[2], a * 5);
    cd(e, a * 227.5, a * 242.03125, a * 7);
    md(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    md(e, c[1], c[2], a * 7);
    cd(e, a * 194, a * 298, a * 9);
    md(e, c[1], c[2], a * 7);
    return d;
  }
  function wu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 131;
    d.height = a * 121;
    e.translate(0, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    md(e, c[1], c[2], a * 10);
    return d;
  }
  function xu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 424;
    d.height = a * 788;
    e.translate(a * 25, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    ud(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    md(e, c[0]);
    cd(e, a * 204, a * 693, a * 36.013886210738214);
    md(e, c[0]);
    cd(e, a * 105, a * 518, a * 30);
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    md(e, c[0]);
    e.translate(a * -25, a * -25);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    ud(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    md(e, c[1], c[2], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    md(e, c[3], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    md(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    md(e, c[6], c[4], a * 16);
    cd(e, a * 204, a * 693, a * 36.013886210738214);
    md(e, c[6], c[4], a * 16);
    cd(e, a * 105, a * 518, a * 30);
    md(e, c[6], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    md(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    md(e, c[6]);
    cd(e, a * 204, a * 693, a * 17.029386365926403);
    md(e, c[7]);
    cd(e, a * 106, a * 518, a * 12);
    md(e, c[7]);
    return d;
  }
  function yu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 283;
    c.height = a * 224;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 33);
    d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    md(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 181, a * 32);
    d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    md(d, _o, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 225, a * 52);
    d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    md(d, ao, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 34, a * 134);
    d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    md(d, cq, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 249, a * 135);
    d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    md(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 56, a * 50);
    d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    md(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 55);
    d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
    d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
    d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
    d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
    d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
    d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
    d.closePath();
    md(d, b[0]);
    return c;
  }
  function zu(a) {
    return ij.String.fromCharCode(a);
  }
  function Au(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    md(e, c[0]);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    ud(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    md(e, c[0]);
    cd(e, a * 122, a * 480, a * 18.439088914585774);
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    md(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    ud(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    md(e, c[4], c[5], a * 12.5);
    cd(e, a * 122, a * 480, a * 18.439088914585774);
    md(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    md(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 345);
    e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
    e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
    e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
    e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
    e.closePath();
    md(e, c[3]);
    return d;
  }
  (function () {
    const a = {
      ᐃΔΔⲆⲆᐃⲆ: 1382209,
      ᐃⲆΔⵠᐃΔⵠᐃΔ: 14538519,
      ᐃⲆᐃΔᐃⲆⲆᐃΔ: 16472081,
      ⵠⵠⵠᐃᐃΔΔⵠⲆ: 11968198
    };
  })();
  const Bu = 0;
  function Cu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 112;
    e.translate(0, a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    md(e, c[1], c[2], a * 8);
    return d;
  }
  function Du(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    ud(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    ud(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    md(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    md(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    md(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    md(e, c[1], c[2], a * 12.5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 346);
    e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
    e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
    e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
    e.closePath();
    md(e, c[3]);
    return d;
  }
  function Eu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 321;
    d.height = a * 284;
    e.translate(a * 100, a * 30);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    md(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    md(e, Va, c[4], a * 4);
    e.translate(a * -100, a * -30);
    e.translate(a * 10, a * 70);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    md(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    md(e, undefined, c[4], a * 4);
    e.translate(a * 20, a * -80);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    md(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    md(e, undefined, c[4], a * 4);
    return d;
  }
  function Fu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    md(e, c[0]);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    ud(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    md(e, c[0]);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    vd(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    md(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    ud(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    md(e, c[4], c[5], a * 12.5);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    vd(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    md(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    md(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    md(e, c[3]);
    return d;
  }
  function Gu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    md(e, c[0]);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    ud(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    md(e, c[0]);
    cd(e, a * 121, a * 480, a * 20.396078054371138);
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    md(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    ud(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    md(e, c[4], c[5], a * 12.5);
    cd(e, a * 121, a * 480, a * 20.396078054371138);
    md(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    md(e, c[1], c[2], a * 12.5);
    return d;
  }
  function Hu(a) {
    const b = function () {
      ij.addEventListener("mousemove", function () {
        b();
      });
    };
    b();
  }
  function Iu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 154;
    d.height = a * 261;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 43);
    e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
    e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
    e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45, a * 29);
    e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
    e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
    e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
    e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 56);
    e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
    e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
    e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
    e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 81);
    e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
    e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
    e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 124);
    e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
    e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
    e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 170);
    e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
    e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
    e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 208);
    e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
    e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
    e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
    e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
    e.closePath();
    md(e, c[3]);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 81);
    e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
    e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
    e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
    e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
    e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
    e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
    e.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
    e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
    e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
    e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
    e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 123);
    e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
    e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
    e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
    e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
    e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
    e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
    e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
    e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
    e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
    e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
    e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
    e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
    e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
    e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
    e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
    e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
    e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
    e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
    e.closePath();
    md(e, c[4], c[5], a * 4);
    cd(e, a * 107, a * 152, a * 9);
    md(e, c[6]);
    cd(e, a * 105, a * 173, a * 9);
    md(e, c[6]);
    cd(e, a * 87, a * 161, a * 9);
    md(e, c[6]);
    cd(e, a * 106, a * 147, a * 4);
    md(e, c[7]);
    cd(e, a * 104, a * 167, a * 4);
    md(e, c[7]);
    cd(e, a * 86, a * 154, a * 4);
    md(e, c[7]);
    return d;
  }
  const Ju = 1;
  function Ku(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 70;
    var a = b * 90;
    var i = b * 4;
    var j = b * 5;
    e.width = g;
    e.height = a;
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    md(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    md(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    md(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * 3, b * -93 + j);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    md(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    md(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    md(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    md(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * 3, b * -93);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    md(f, d[0], d[1], i);
    f.restore();
    return e;
  }
  function Lu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 180;
    var a = b * 210;
    var j = (h = b * 60) / 4;
    var k = b * 20;
    e.width = i;
    e.height = a;
    f.save();
    f.translate(i / 2 - b * 0, a / 2 - b * 35 + k);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    vd(f, 5, h, j);
    md(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 10, a / 2 + b * 15 + k);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    vd(f, 5, h, j);
    md(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 50, a / 2 + b * 40 + k);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    f.translate(0, b * -20);
    vd(f, 5, h, j);
    md(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 0, a / 2 - b * 35);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(b * 0, b * -20);
    vd(f, 5, h, j);
    md(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 10, a / 2 + b * 15);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    vd(f, 5, h, j);
    md(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 50, a / 2 + b * 40);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    vd(f, 5, h, j);
    md(f, d[1]);
    f.restore();
    var h;
    j = (h = b * 30) / 4;
    f.save();
    f.translate(i / 2 + b * 5, a / 2 - b * 20);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    vd(f, 5, h, j);
    md(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 0, a / 2 + b * 10);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    vd(f, 5, h, j);
    md(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 45, a / 2 + b * 35);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    vd(f, 5, h, j);
    md(f, d[2]);
    f.restore();
    cd(f, i / 2 - b * 7, a / 2 + b * 7, 5);
    md(f, d[2]);
    return e;
  }
  function Mu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 277.34375);
    e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
    e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
    e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
    e.closePath();
    md(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 214.34375);
    e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
    e.closePath();
    md(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 247.34375);
    e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
    e.closePath();
    md(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.5, a * 189.34375);
    e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
    e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
    e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
    e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
    e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
    e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
    e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
    e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
    e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
    e.closePath();
    md(e, c[3], c[4], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 300.5, a * 147.34375);
    e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
    e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
    e.closePath();
    md(e, c[5], c[6], a * 12);
    cd(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
    md(e, c[7]);
    cd(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
    md(e, c[8]);
    return d;
  }
  function Nu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    md(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    md(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    md(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    md(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    md(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    md(e, c[4]);
    cd(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
    md(e, c[5]);
    cd(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
    md(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    md(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    md(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    md(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 296.5, a * 287.34375);
    e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
    e.closePath();
    md(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 289.34375);
    e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
    e.closePath();
    md(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 291.34375);
    e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
    e.closePath();
    md(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 161.34375);
    e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
    e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
    e.closePath();
    md(e, undefined, c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167.5, a * 248.34375);
    e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
    e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
    e.closePath();
    md(e, undefined, c[9], a * 3);
    return d;
  }
  function Ou(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 309;
    d.height = a * 287;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    md(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    md(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    md(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    md(e, c[0], c[0], a * 10);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    md(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    md(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    md(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    md(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 109.5, a * 51.53125);
    e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
    md(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 51.53125);
    e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
    e.closePath();
    md(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 63.53125);
    e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
    e.closePath();
    md(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.5, a * 84.53125);
    e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
    e.closePath();
    md(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 149.5, a * 108.53125);
    e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
    e.closePath();
    md(e, c[1], c[2], a * 7);
    return d;
  }
  function Pu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 18;
    var a = b * 18;
    e.width = i;
    e.height = a;
    var j = b * 9;
    var k = b * 9;
    var l = b * 8;
    f.save();
    f.translate(j, k);
    f.globalAlpha = 1;
    cd(f, 0, 0, l);
    md(f, d[0]);
    l = b * 3;
    j = 0;
    k = b * -3;
    f.translate(j, k);
    f.globalAlpha = 1;
    cd(f, 0, 0, l);
    md(f, d[1]);
    f.restore();
    return e;
  }
  function Qu(b, c, d, e, f) {
    var g = document.createElement("canvas");
    var a = g.getContext("2d");
    if (e == 0) {
      var i = b * 270;
      var j = b * 250;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 140, b * 3);
      a.translate(b * -25, b * -20);
      a.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
      a.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
      a.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
      a.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
      a.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
      a.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
      a.closePath();
      md(a, d[0]);
    } else if (e == 1) {
      i = b * 430;
      j = b * 350;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 180, b * 5);
      a.translate(b * -30, b * -60);
      a.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
      a.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
      a.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
      a.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
      a.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
      a.closePath();
      md(a, d[0]);
    } else if (e == 2) {
      i = b * 400;
      j = b * 300;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 80, b * 52);
      a.translate(b * -40, b * -30);
      a.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
      a.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
      a.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
      a.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
      a.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
      a.closePath();
      md(a, d[0]);
    }
    return g;
  }
  function Ru(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 217;
    d.height = a * 215;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 113);
    e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
    e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
    e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
    e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
    e.closePath();
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 103);
    e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
    e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
    e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
    e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
    e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
    e.closePath();
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 46);
    e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
    e.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
    e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
    e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
    e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
    e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
    e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
    e.closePath();
    md(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 50);
    e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
    e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
    e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
    e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
    e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
    e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
    e.closePath();
    md(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 40);
    e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
    e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
    e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
    e.closePath();
    md(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 48);
    e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
    e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
    e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
    e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
    e.closePath();
    md(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 89, a * 61);
    e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
    e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
    e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
    e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
    e.closePath();
    md(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 59);
    e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
    e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
    e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
    e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
    e.closePath();
    md(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 62);
    e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
    e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
    e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
    e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
    e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
    e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
    e.closePath();
    md(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 130);
    e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
    e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
    e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
    e.closePath();
    md(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 119);
    e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
    e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
    e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
    e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
    e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
    e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
    e.closePath();
    md(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 64);
    e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
    e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
    e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
    e.closePath();
    md(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 65);
    e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
    e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
    e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
    e.closePath();
    md(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 112);
    e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
    e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
    e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
    e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
    e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
    e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
    e.closePath();
    md(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 114);
    e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
    e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
    e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
    e.closePath();
    md(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85, a * 152);
    e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
    e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
    e.closePath();
    e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
    md(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 166);
    e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
    e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
    e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
    e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
    e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
    e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
    e.closePath();
    md(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 168);
    e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
    e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
    e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
    e.closePath();
    md(e, c[10]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 169);
    e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
    e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
    e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
    e.closePath();
    md(e, c[9], c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 107);
    e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
    e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
    e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
    e.closePath();
    md(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 108);
    e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
    e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
    e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
    e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
    e.closePath();
    md(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 106);
    e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
    e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
    e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
    e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
    e.closePath();
    md(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 69, a * 178);
    e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
    e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
    md(e, undefined, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 161);
    e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
    e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
    md(e, undefined, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 91, a * 29);
    e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
    e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
    md(e, undefined, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 33);
    e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
    e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
    md(e, undefined, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 98);
    e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
    e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
    e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
    e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
    e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
    e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
    e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
    e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
    e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
    md(e, Va, c[3], a * 4);
    return d;
  }
  function em(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 130;
    var a = b * 142;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j + b * 7);
    f.globalAlpha = c ? 0.5 : 1;
    cd(f, 0, 0, b * 60);
    md(f, d[0]);
    f.translate(0, b * -7);
    f.globalAlpha = 1;
    cd(f, 0, 0, b * 60);
    md(f, d[1], d[2], b * 4);
    cd(f, 0, 0, b * 40);
    md(f, d[3]);
    cd(f, 0, 0, b * 25);
    md(f, d[4], d[5], b * 8);
    return e;
  }
  function im(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 142;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 80);
    e.rotate(0.2);
    vd(e, 9, a * 60, a * 10);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 71);
    e.rotate(0.2);
    vd(e, 9, a * 60, a * 10);
    md(e, c[1], c[2], 4);
    e.rotate(-0.32);
    vd(e, 9, a * 38, a * 10);
    md(e, c[3], c[4], 4);
    e.rotate(0.68);
    vd(e, 9, a * 20, a * 8);
    md(e, c[5], c[6], 6);
    e.restore();
    return d;
  }
  function tm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 234;
    c.height = a * 183;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 25);
    d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
    d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
    d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
    d.bezierCurveTo(a * 19, a * 148, a * 6, a * 95, a * 21, a * 66);
    d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
    d.closePath();
    md(d, b[0], b[0], a * 4);
    return c;
  }
  function Su(b, c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var a = b * 220;
    var j = b * 220;
    var k = b * 100;
    var h = k / 4;
    f.width = a;
    f.height = j;
    i.translate(a / 2, j / 2);
    i.globalAlpha = c ? 0.5 : 1;
    if (!c) {
      i.translate(b * 0, b * -8);
    }
    vd(i, 7, k, h);
    md(i, c ? d[0] : d[1]);
    i.globalAlpha = 1;
    if (e == 0) {
      vd(i, 6, k * 0.65, h * 0.65);
      md(i, d[2]);
    } else if (e == 1) {
      i.translate(b * 20, b * 20);
      vd(i, 6, k * 0.45, h * 0.4);
      md(i, d[2]);
    }
    return f;
  }
  function om(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 128;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 7);
    e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * 5);
    e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
    e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
    e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
    e.closePath();
    md(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 124);
    e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
    e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
    e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
    e.closePath();
    md(e, c[2], c[3], a * 1);
    return d;
  }
  function am(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 120;
    var a = b * 150;
    var j = b * 60;
    var k = j / 4;
    var h = b * 15;
    e.width = i;
    e.height = a;
    f.save();
    f.translate(i / 2 + b * 0, a / 2 + b * 0 + h);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    vd(f, 8, j, k);
    md(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 11, a / 2 + b * 12);
    f.globalAlpha = 1;
    f.rotate(Math.PI / 3);
    f.translate(0, -h);
    vd(f, 8, j, k);
    md(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 9, a / 2 - b * 12);
    f.rotate(Math.PI / 2.8);
    vd(f, 5, j * 0.5, k * 0.4);
    md(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 19, a / 2 + b * 5);
    f.rotate(Math.PI / 1);
    vd(f, 5, j * 0.5, k * 0.4);
    md(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 8, a / 2 + b * 20);
    f.rotate(Math.PI / 2.25);
    vd(f, 5, j * 0.5, k * 0.4);
    md(f, d[2]);
    f.restore();
    return e;
  }
  function tm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 80;
    c.height = a * 100;
    d.scale(0.5, 0.5);
    d.translate(10, 15);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    md(d, undefined, b[0], a * 10);
    d.translate(0, -10);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    md(d, b[1], b[2], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    md(d, $k, b[2], a * 8);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
    md(d, undefined, b[2], a * 8);
    return c;
  }
  function rm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 118;
    d.height = a * 114;
    e.translate(0, a * 10);
    cd(e, a * 42, a * 43, a * 24.758836806279895);
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    md(e, c[0]);
    e.translate(0, a * -10);
    cd(e, a * 42, a * 43, a * 24.758836806279895);
    md(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    md(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    md(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 16);
    e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
    e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
    e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
    e.bezierCurveTo(a * 45, a * 19, a * 48, a * 16, a * 52, a * 16);
    e.closePath();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 30);
    e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
    e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
    e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
    e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
    e.closePath();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 21);
    e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
    e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
    e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
    e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
    e.closePath();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 36);
    e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
    e.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
    e.closePath();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 34);
    e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
    e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
    e.closePath();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 35);
    e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
    e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
    e.closePath();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 46);
    e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
    e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
    e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
    e.closePath();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 42);
    e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
    e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
    e.closePath();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 57);
    e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
    e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
    e.closePath();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 52);
    e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
    e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
    e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
    e.closePath();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 61);
    e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
    e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
    e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
    e.closePath();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 45);
    e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
    e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
    e.closePath();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 53);
    e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
    e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
    e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
    e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
    e.closePath();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 92, a * 71);
    e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
    e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
    e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
    e.closePath();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 82);
    e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
    e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
    e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
    e.closePath();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 72);
    e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
    e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
    e.closePath();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 86);
    e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
    e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
    e.closePath();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 46);
    e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
    e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
    e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
    e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
    e.closePath();
    md(e, c[5], c[6], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 76, a * 60);
    e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
    e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
    e.closePath();
    md(e, c[7], c[8], a * 5);
    return d;
  }
  function sm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 373;
    d.height = a * 314;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    ud(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    md(e, c[0], c[0], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    md(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    ud(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    md(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    ud(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    md(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    ud(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    md(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    ud(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    md(e, c[0], c[0], a * 6);
    cd(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    md(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    md(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    ud(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    md(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    ud(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    md(e, c[5], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    ud(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    md(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    ud(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    md(e, c[6], c[4], a * 6);
    e.globalCompositeOperation = "destination-out";
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    ud(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    md(e, c[7], c[8], a * 6);
    e.globalCompositeOperation = "source-over";
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    ud(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    md(e, c[7], c[8], a * 6);
    e.globalAlpha = 1;
    e.save();
    cd(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    md(e, c[3], c[4], a * 6);
    e.restore();
    return d;
  }
  function hm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 220;
    var a = b * 230;
    var j = b * 100;
    var k = j / 4;
    var h = b * 20;
    e.width = i;
    e.height = a;
    f.translate(i / 2, a / 2 + h);
    f.globalAlpha = 0.5;
    vd(f, 7, j, k);
    md(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, -h);
    vd(f, 7, j, k);
    md(f, d[1]);
    vd(f, 6, j * 0.65, k * 0.65);
    md(f, d[2]);
    return e;
  }
  function gm(c, e, f, i, j, k, n, o, p, h, g) {
    if (g === Fk) {
      g = 0;
    }
    var q = document.createElement("canvas");
    var r = q.getContext("2d");
    k = k ? c * k : 0;
    var b = Math.floor(f * c);
    r.font = b + "px Baloo Paaji";
    r.lineJoin = "round";
    o *= c;
    var t = n ? o * 2 : 0;
    if (p) {
      var u = Math.min(r.measureText(e).width + c * 2 + t, p);
    } else {
      u = r.measureText(e).width + c * 2 + t + g * c * 2;
    }
    b = c * (b + k + g) + t;
    q.width = u;
    q.height = b;
    if (n) {
      r.fillStyle = n;
      ud(r, 0, 0, u, b, o * 2);
      r.fill();
      r.translate(o, o);
    }
    r.textBaseline = "middle";
    r.font = f + "px Baloo Paaji";
    r.lineJoin = "round";
    if (j) {
      r.beginPath();
      r.fillStyle = j;
      r.fillText(e, 0, b / 2 + k - t / 2, u);
    }
    r.beginPath();
    if (h) {
      r.strokeStyle = h;
      r.lineWidth = g;
      r.strokeText(e, g, (b - t) / 2, u);
    }
    r.fillStyle = i;
    r.fillText(e, g, (b - t) / 2, u);
    return q;
  }
  function lm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = c * b * 2;
    var a = b * c * 2;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j);
    cd(f, 0, 0, b * c);
    md(f, d);
    return e;
  }
  function um(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 350;
    d.height = a * 140;
    e.translate(a * -50, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.5, a * 222.0625);
    e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
    e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
    e.closePath();
    md(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.5, a * 241.0625);
    e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
    e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
    e.closePath();
    md(e, c[0], c[1], a * 8);
    cd(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
    md(e, c[2]);
    cd(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
    md(e, c[2]);
    cd(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
    md(e, c[2]);
    cd(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
    md(e, c[2]);
    cd(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
    md(e, c[2]);
    cd(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151.5, a * 212.0625);
    e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
    e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
    e.closePath();
    md(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 209.0625);
    e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
    e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
    e.closePath();
    md(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188.5, a * 183.0625);
    e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
    e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
    e.closePath();
    md(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 261.5, a * 202.0625);
    e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
    e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
    e.closePath();
    md(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 240.5, a * 231.0625);
    e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
    e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
    e.closePath();
    md(e, c[3], c[4], a * 4);
    return d;
  }
  function bm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 140;
    var a = b * 150;
    var i = b * 10;
    var j = b * 4;
    e.width = g;
    e.height = a;
    f.translate(b * -50, b * -38 + i);
    f.globalAlpha = c ? 0.5 : 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    md(f, d[0]);
    f.translate(0, 0 - i);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    md(f, d[1], d[2], j);
    return e;
  }
  function dm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 148;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 85);
    e.rotate(1.4);
    vd(e, 7, a * 60, a * 10);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 74);
    e.rotate(1.4);
    vd(e, 7, a * 60, a * 10);
    md(e, c[1], c[2], 4);
    e.rotate(0.64);
    vd(e, 7, a * 40, a * 10);
    md(e, c[3], c[4], 4);
    e.rotate(0.12);
    vd(e, 7, a * 23, a * 5);
    e.restore();
    md(e, c[5]);
    return d;
  }
  function vm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 220;
    d.height = a * 180;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -90, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    md(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    md(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    md(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    md(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    md(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    md(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    md(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    md(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    md(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    md(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    md(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    md(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    md(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    md(e, Ts, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    md(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    md(e, Fk, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 140, a * 265.33333587646484);
    e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
    e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
    e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
    e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
    e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
    e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
    e.closePath();
    md(e, undefined, c[4], a * 6);
    e.globalAlpha = 0.5;
    e.scale(1, 1);
    e.translate(a * 105, a * 155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
    e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
    e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
    e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
    e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
    e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
    e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
    e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
    e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
    e.closePath();
    md(e, c[5], c[5], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -110, a * -155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    md(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    md(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    md(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    md(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    md(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    md(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    md(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    md(e, c[2], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    md(e, bg, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    md(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    md(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    md(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    md(e, xk, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    md(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    md(e, c[0], c[0], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    md(e, Us, c[1], a * 2);
    return d;
  }
  function mm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 372;
    c.height = a * 375;
    d.globalAlpha = 0.5;
    d.translate(a * 15, a * 15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    md(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -15, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    md(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
    d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
    d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
    d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
    d.closePath();
    md(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
    d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
    d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
    d.closePath();
    md(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
    d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
    d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
    d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
    d.closePath();
    md(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
    d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
    d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
    d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
    d.closePath();
    md(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
    d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
    d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
    d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
    d.closePath();
    md(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
    d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
    d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
    d.closePath();
    md(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    md(d, lr, b[2], a * 4);
    return c;
  }
  const cm = 15;
  function pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 125;
    d.height = a * 139;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 63, a * 79);
    e.rotate(1);
    vd(e, 8, a * 60, a * 10);
    md(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 63, a * 69);
    e.rotate(1);
    vd(e, 8, a * 60, a * 10);
    md(e, c[1], c[2], 4);
    e.rotate(0.56);
    vd(e, 8, a * 40, a * 10);
    md(e, c[3], c[4], 4);
    e.rotate(0.28);
    vd(e, 8, a * 28, a * 8);
    md(e, c[5]);
    e.restore();
    return d;
  }
  function Cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (Fb === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1);
      vd(e, 8, a * 41, a * 10);
      md(e, c[0]);
      e.restore();
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1);
    vd(e, 8, a * 41, a * 10);
    md(e, c[1], c[2], a * 4);
    e.rotate(0.56);
    vd(e, 8, a * 33, a * 10);
    md(e, c[3], c[4], a * 4);
    e.rotate(0.28);
    vd(e, 8, a * 24, a * 8);
    md(e, c[5]);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    ud(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    md(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    ud(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    md(e, c[4], c[4], a * 2);
    cd(e, a * 45, a * 29, a * 7);
    md(e, c[5]);
    cd(e, a * 45, a * 61, a * 7);
    md(e, c[5]);
    cd(e, a * 28, a * 45, a * 7);
    md(e, c[5]);
    cd(e, a * 62, a * 45, a * 7);
    md(e, c[5]);
    return d;
  }
  function Tm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    vd(e, 6, a * 146, a * 30);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    vd(e, 6, a * 146, a * 30);
    e.restore();
    md(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    vd(e, 6, a * 105, a * 30);
    e.restore();
    md(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    vd(e, 6, a * 66, a * 30);
    e.restore();
    md(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    vd(e, 6, a * 31, a * 30);
    e.restore();
    md(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    md(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    md(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    md(e, undefined, c[2], a * 8);
    return d;
  }
  function fm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (Fb === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1.4);
      vd(e, 7, a * 41, a * 10);
      e.restore();
      md(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1.4);
    vd(e, 7, a * 41, a * 10);
    md(e, c[1], c[2], a * 4);
    vd(e, 7, a * 35, a * 10);
    md(e, c[3], c[4], a * 4);
    vd(e, 7, a * 23, a * 5);
    e.restore();
    md(e, c[5]);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    ud(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    md(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    ud(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    md(e, c[4], c[4], a * 2);
    cd(e, a * 45, a * 29, a * 7);
    md(e, c[5]);
    cd(e, a * 45, a * 61, a * 7);
    md(e, c[5]);
    cd(e, a * 28, a * 45, a * 7);
    md(e, c[5]);
    cd(e, a * 62, a * 45, a * 7);
    md(e, c[5]);
    return d;
  }
  function zm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (Fb === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(0.2);
      vd(e, 9, a * 41, a * 10);
      e.restore();
      md(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.2);
    vd(e, 9, a * 41, a * 10);
    md(e, c[1], c[2], a * 4);
    e.rotate(-0.32);
    vd(e, 9, a * 32, a * 10);
    md(e, c[3], c[4], a * 4);
    e.rotate(0.68);
    vd(e, 9, a * 23, a * 8);
    md(e, c[5], c[6], a * 6);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    ud(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    md(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    ud(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    md(e, c[4], c[4], a * 2);
    cd(e, a * 45, a * 29, a * 7);
    md(e, c[5]);
    cd(e, a * 45, a * 61, a * 7);
    md(e, c[5]);
    cd(e, a * 28, a * 45, a * 7);
    md(e, c[5]);
    cd(e, a * 62, a * 45, a * 7);
    md(e, c[5]);
    return d;
  }
  function ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 101;
    e.translate(a * 0, a * 5);
    if (Fb === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      cd(e, a * 44, a * 55, a * 41);
      md(e, c[0]);
    }
    e.globalAlpha = 1;
    cd(e, a * 44, a * 45, a * 41);
    md(e, c[1], c[2], a * 4);
    cd(e, a * 44, a * 45, a * 31);
    md(e, c[3]);
    e.save();
    e.translate(a * 45, a * 45);
    ud(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    md(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    ud(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    md(e, c[4], c[4], a * 2);
    cd(e, a * 45, a * 29, a * 7);
    md(e, c[5]);
    cd(e, a * 45, a * 61, a * 7);
    md(e, c[5]);
    cd(e, a * 28, a * 45, a * 7);
    md(e, c[5]);
    cd(e, a * 62, a * 45, a * 7);
    md(e, c[5]);
    return d;
  }
  function wm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    vd(e, 6, a * 146, a * 30);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    vd(e, 6, a * 146, a * 30);
    e.restore();
    md(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    vd(e, 6, a * 105, a * 30);
    e.restore();
    md(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    vd(e, 6, a * 66, a * 30);
    e.restore();
    md(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 131, a * 116);
    vd(e, 7, a * 17, a * 8);
    e.restore();
    md(e, c[6]);
    e.save();
    e.translate(a * 163, a * 168);
    vd(e, 7, a * 25, a * 8);
    e.restore();
    md(e, c[6]);
    e.save();
    e.translate(a * 117, a * 151);
    vd(e, 7, a * 11, a * 8);
    e.restore();
    md(e, c[6]);
    e.save();
    e.translate(a * 167, a * 122);
    vd(e, 7, a * 12, a * 8);
    e.restore();
    md(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    md(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    md(e, Ur, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    md(e, undefined, c[2], a * 8);
    return d;
  }
  const Pm = 18;
  function km(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 135;
    d.height = a * 120;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 3.5, a * 55.25);
    e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
    e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
    e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
    e.closePath();
    md(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6.5, a * 43.25);
    e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
    e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
    e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
    e.closePath();
    md(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120.5, a * 62.25);
    e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
    e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
    e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
    e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
    e.closePath();
    md(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.5, a * 27);
    e.bezierCurveTo(a * 48.5, a * 5, a * 93.5, a * 14, a * 118.5, a * 26);
    e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
    e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
    e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
    e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
    e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
    e.closePath();
    md(e, c[2], c[3], a * 7);
    return d;
  }
  function Am(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 304;
    d.height = a * 278;
    e.translate(a * 10, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    md(e, c[0]);
    e.translate(a * -10, a * -25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    md(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    md(e, c[3], c[4], a * 15);
    return d;
  }
  function xm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    md(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    md(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    ud(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    md(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    ud(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    md(e, c[1], c[2], a * 5);
    return d;
  }
  function Jm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 501;
    d.height = a * 309;
    e.translate(0, a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 184);
    e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
    e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
    e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
    e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
    e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
    e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
    e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 116);
    e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
    e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
    e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
    e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
    e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
    e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
    e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
    e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
    e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
    e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
    e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
    e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
    e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
    e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
    e.closePath();
    md(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 122, a * 191);
    e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
    e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
    e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
    e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
    e.closePath();
    md(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403, a * 182);
    e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
    e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
    e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
    e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
    e.closePath();
    md(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155, a * 157);
    e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
    e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
    e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
    e.closePath();
    md(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 347, a * 162);
    e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
    e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
    e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
    e.closePath();
    md(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 134);
    e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
    e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
    e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
    e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
    e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
    e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
    e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
    e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
    e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
    e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
    e.closePath();
    md(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 98);
    e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
    e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
    e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
    e.closePath();
    md(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 449, a * 97);
    e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
    e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
    e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
    e.closePath();
    md(e, c[3], c[2], a * 10);
    return d;
  }
  function Mm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 139);
    e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
    e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
    e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.save();
    e.translate(a * 86.5, a * 81.5);
    ud(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
    e.restore();
    md(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 84.5, a * 79);
    ud(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
    e.restore();
    md(e, c[3], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 54);
    e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
    e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
    e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
    e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
    e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
    e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
    e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 28, a * 24);
    e.rotate(0);
    ud(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    md(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143, a * 23);
    e.rotate(0);
    ud(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    md(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 80);
    e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
    e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
    e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
    e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
    e.closePath();
    md(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    md(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    md(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    ud(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    md(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    ud(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    md(e, c[1], c[2], a * 5);
    return d;
  }
  const Bm = 13;
  function Em(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 43;
    d.height = a * 209;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 21, a * 102.5);
    ud(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    md(e, c[0]);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    md(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.translate(0, a * 10);
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 21, a * 102.5);
    ud(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    md(e, c[1], c[2], a * 4);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    md(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    md(e, c[5], c[6], a * 4);
    e.translate(0, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    md(e, c[8]);
    return d;
  }
  function Dm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.save();
    f.translate(b * 85, b * 88);
    f.rotate(1.4);
    vd(f, 7, b * 60, b * 10);
    f.restore();
    md(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 80);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      vd(f, 3, b * 21, b * 4);
      md(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1.4);
    vd(f, 7, b * 60, b * 10);
    md(f, d[3], d[4], b * 4);
    f.rotate(0.64);
    vd(f, 7, b * 40, b * 10);
    md(f, d[5], d[6], b * 4);
    f.rotate(0.12);
    vd(f, 7, b * 23, b * 5);
    f.restore();
    md(f, d[7]);
    return e;
  }
  function Im(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.5;
    cd(e, a * 69, a * 64, a * 48.16637831516918);
    md(e, c[1]);
    e.globalAlpha = 0.7;
    cd(e, a * 69, a * 64, a * 38.23105625617661);
    md(e, c[2]);
    e.globalAlpha = 0.7;
    cd(e, a * 69, a * 64, a * 32.01562118716424);
    md(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 41);
    e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
    e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
    e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 62);
    e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
    e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
    e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
    e.closePath();
    md(e, c[3]);
    return d;
  }
  function Sm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 271;
    c.height = a * 366;
    d.globalAlpha = 0.5;
    d.translate(0, a * 10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    md(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    md(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    md(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    md(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    md(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    md(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    md(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    md(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    md(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    md(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    md(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    md(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    md(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    md(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    md(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    md(d, b[1]);
    cd(d, a * 102, a * 269, a * 11);
    md(d, b[3]);
    cd(d, a * 98, a * 266, a * 5);
    md(d, b[6]);
    cd(d, a * 168, a * 269, a * 11);
    md(d, b[3]);
    cd(d, a * 164, a * 266, a * 5);
    md(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    md(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 235);
    d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
    d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
    d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
    d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
    d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
    d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
    d.closePath();
    md(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 132, a * 219);
    d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
    d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
    d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
    d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
    d.closePath();
    md(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 179);
    d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
    d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
    d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
    d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
    d.closePath();
    md(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 143);
    d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
    d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
    d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
    d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
    d.closePath();
    md(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 115);
    d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
    d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
    d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
    d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
    d.closePath();
    md(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 94);
    d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
    d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
    d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
    d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
    d.closePath();
    md(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 279);
    d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
    d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
    d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
    d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
    d.closePath();
    md(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 147, a * 303);
    d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
    d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
    d.closePath();
    md(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 303);
    d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
    d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
    d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
    d.closePath();
    md(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 89, a * 280);
    d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
    d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
    d.closePath();
    md(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 94, a * 290);
    d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
    d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
    d.closePath();
    md(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 163, a * 295);
    d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
    d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
    d.closePath();
    md(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 172, a * 286);
    d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
    d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
    d.closePath();
    md(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    md(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    md(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    md(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    md(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    md(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    md(d, b[7]);
    return c;
  }
  function Qm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = 0.3;
    cd(e, a * 98, a * 99, a * 100);
    md(e, c[0]);
    e.globalAlpha = 0.5;
    cd(e, a * 98, a * 99, a * 90);
    md(e, c[1]);
    return d;
  }
  function _m(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 151;
    d.height = a * 80;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 54);
    e.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, a * 13);
    e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, a * 16);
    e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
    e.closePath();
    md(e, c[2], c[3], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 40);
    e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
    e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
    e.closePath();
    md(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 33);
    e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
    e.bezierCurveTo(a * 19, a * 49, a * 19, a * 49, a * 15, a * 54);
    e.bezierCurveTo(a * 4, a * 43, a * 10, a * 35, a * 20, a * 32);
    e.closePath();
    md(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 52);
    e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
    e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
    e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
    e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * 18, a * 54);
    e.closePath();
    md(e, c[0], c[1], 4);
    return d;
  }
  function Fm() {
    ᐃΔ[814] = bu(1, [{
      f: jc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[815] = ᐃΔ[814];
    ᐃΔ[955] = [];
    ᐃΔ[955][0] = ⵠᐃ.ΔⲆⵠⲆᐃΔⵠ;
    ᐃΔ[955][1] = ⵠᐃ.ⲆᐃⲆⲆΔΔⵠ;
    ᐃΔ[955][2] = ⵠᐃ.ᐃᐃⵠᐃⲆⲆⲆ;
    ᐃΔ[956] = ᐃΔ[955];
    ᐃΔ[972] = [];
    ᐃΔ[972][0] = ⵠᐃ.ᐃⵠᐃⵠΔΔΔ;
    ᐃΔ[972][1] = ⵠᐃ.Ⲇⵠᐃᐃⵠᐃᐃ;
    ᐃΔ[972][2] = ⵠᐃ.ΔΔΔⲆᐃⵠⲆ;
    ᐃΔ[973] = ᐃΔ[972];
    ᐃΔ[987] = [];
    ᐃΔ[987][0] = ⵠᐃ.ᐃᐃⲆⵠᐃⲆⵠ;
    ᐃΔ[987][1] = ⵠᐃ.ᐃⵠΔⲆᐃΔⵠ;
    ᐃΔ[987][2] = ⵠᐃ.ⲆᐃⲆⵠⲆᐃⵠ;
    ᐃΔ[988] = ᐃΔ[987];
    ᐃΔ[1154] = [];
    ᐃΔ[1154][0] = ⵠᐃ.ⵠΔᐃⵠⵠⵠⲆ;
    ᐃΔ[1154][1] = ⵠᐃ.ⲆΔΔΔᐃΔⲆ;
    ᐃΔ[1154][2] = ⵠᐃ.ΔⲆΔᐃΔⵠⲆ;
    ᐃΔ[1155] = ᐃΔ[1154];
    ᐃΔ[965] = [];
    ᐃΔ[965][0] = ⵠᐃ.ᐃⲆᐃΔΔΔᐃ;
    ᐃΔ[965][1] = ⵠᐃ.ᐃⵠⵠⲆᐃΔΔ;
    ᐃΔ[965][2] = ⵠᐃ.ⲆⵠⵠΔΔⲆⲆ;
    ᐃΔ[974] = ᐃΔ[965];
    ᐃΔ[1028] = [];
    ᐃΔ[1028][0] = ⵠᐃ.ⵠΔⲆⲆΔⲆⵠ;
    ᐃΔ[1028][1] = ⵠᐃ.ΔΔⵠᐃΔⲆⲆ;
    ᐃΔ[1028][2] = ⵠᐃ.ᐃΔⵠⵠᐃΔΔ;
    ᐃΔ[1029] = ᐃΔ[1028];
    ᐃΔ[1027] = ᐃΔ[1028];
    ᐃΔ[712] = [];
    ᐃΔ[712][0] = ⵠᐃ.ΔⵠᐃΔΔᐃΔΔⵠ;
    ᐃΔ[712][1] = ⵠᐃ.ⵠΔᐃⵠᐃΔⲆᐃΔ;
    ᐃΔ[712][2] = ⵠᐃ.ⲆⲆⵠⵠⲆΔⲆⲆᐃ;
    ᐃΔ[713] = ᐃΔ[712];
    ᐃΔ[714] = ᐃΔ[712];
    ᐃΔ[1031] = [];
    ᐃΔ[1031][0] = ⵠᐃ.ΔᐃᐃᐃⵠⲆΔ;
    ᐃΔ[1031][1] = ⵠᐃ.ⲆΔⲆⵠⵠⵠΔ;
    ᐃΔ[1031][2] = ⵠᐃ.ΔᐃⲆΔΔΔΔ;
    ᐃΔ[1032] = ᐃΔ[1031];
    ᐃΔ[1030] = ᐃΔ[1031];
    ᐃΔ[423] = [];
    ᐃΔ[423][0] = ⵠᐃ.ⵠᐃⵠⲆⵠⵠᐃ;
    ᐃΔ[423][1] = ⵠᐃ.ᐃᐃᐃᐃⵠⲆⲆ;
    ᐃΔ[423][2] = ⵠᐃ.ΔⵠⲆⵠΔⵠⵠ;
    ᐃΔ[425] = ᐃΔ[423];
    ᐃΔ[424] = ᐃΔ[423];
    ᐃΔ[1233] = [];
    ᐃΔ[1233][0] = ⵠᐃ.ᐃⲆⲆᐃᐃᐃⲆᐃΔ;
    ᐃΔ[1233][1] = ⵠᐃ.ΔΔᐃΔⲆⵠⵠⲆⵠ;
    ᐃΔ[1233][2] = ⵠᐃ.ⵠᐃⲆⲆⲆⲆᐃᐃΔ;
    ᐃΔ[1234] = ᐃΔ[1233];
    ᐃΔ[1230] = [];
    ᐃΔ[1230][0] = ⵠᐃ.ⵠΔᐃⵠΔⵠⲆΔⵠ;
    ᐃΔ[1230][1] = ⵠᐃ.ⵠⵠᐃΔᐃΔⵠΔⵠ;
    ᐃΔ[1230][2] = ⵠᐃ.ᐃⲆⲆⲆⲆⵠⵠⲆΔ;
    ᐃΔ[1232] = ᐃΔ[1230];
    ᐃΔ[1231] = ᐃΔ[1230];
    ᐃΔ[569] = [];
    ᐃΔ[569][0] = ⵠᐃ.ⵠⲆᐃᐃᐃΔᐃⵠⵠ;
    ᐃΔ[569][1] = ⵠᐃ.ΔⲆⲆⵠⵠⲆᐃⵠⲆ;
    ᐃΔ[569][2] = ⵠᐃ.ᐃⵠⲆΔⵠᐃΔⵠⵠ;
    ᐃΔ[571] = ᐃΔ[569];
    ᐃΔ[570] = ᐃΔ[569];
    ᐃΔ[1166] = [];
    ᐃΔ[1166][0] = ⵠᐃ.ᐃⲆⵠΔΔΔⵠΔⵠ;
    ᐃΔ[1166][1] = ⵠᐃ.ΔⲆⲆⲆᐃⵠΔΔⲆ;
    ᐃΔ[1166][2] = ⵠᐃ.ⲆⲆΔΔⲆΔᐃᐃΔ;
    ᐃΔ[1167] = ᐃΔ[1166];
    ᐃΔ[1168] = ᐃΔ[1166];
    ᐃΔ[572] = [];
    ᐃΔ[572][0] = ⵠᐃ.ⵠΔΔⲆᐃⵠᐃΔⲆ;
    ᐃΔ[572][1] = ⵠᐃ.ᐃᐃⲆᐃΔΔⵠΔᐃ;
    ᐃΔ[572][2] = ⵠᐃ.ⲆᐃⲆΔⵠᐃΔⲆᐃ;
    ᐃΔ[574] = ᐃΔ[572];
    ᐃΔ[573] = ᐃΔ[572];
    ᐃΔ[1169] = [];
    ᐃΔ[1169][0] = ⵠᐃ.ⵠᐃΔᐃΔⲆΔⵠⵠ;
    ᐃΔ[1169][1] = ⵠᐃ.ΔΔⵠΔΔᐃΔΔᐃ;
    ᐃΔ[1169][2] = ⵠᐃ.ᐃⲆⵠⲆⵠᐃᐃⲆⵠ;
    ᐃΔ[1170] = ᐃΔ[1169];
    ᐃΔ[1171] = ᐃΔ[1169];
    ᐃΔ[575] = [];
    ᐃΔ[575][0] = ⵠᐃ.ᐃΔᐃΔᐃᐃⲆᐃⵠ;
    ᐃΔ[575][1] = ⵠᐃ.ⵠⲆᐃⵠⵠⵠⵠᐃⲆ;
    ᐃΔ[575][2] = ⵠᐃ.ⲆᐃⲆⲆᐃΔᐃᐃᐃ;
    ᐃΔ[577] = ᐃΔ[575];
    ᐃΔ[576] = ᐃΔ[575];
    ᐃΔ[1172] = [];
    ᐃΔ[1172][0] = ⵠᐃ.ᐃᐃⵠⲆΔⵠⲆᐃᐃ;
    ᐃΔ[1172][1] = ⵠᐃ.ⵠⲆⲆΔⵠⵠᐃᐃⲆ;
    ᐃΔ[1172][2] = ⵠᐃ.ⵠΔⲆⲆᐃΔΔᐃᐃ;
    ᐃΔ[1173] = ᐃΔ[1172];
    ᐃΔ[1174] = ᐃΔ[1172];
    ᐃΔ[578] = [];
    ᐃΔ[578][0] = ⵠᐃ.ᐃΔᐃᐃΔⵠⲆⵠⵠ;
    ᐃΔ[578][1] = ⵠᐃ.ᐃⵠΔⵠⵠΔⲆᐃⲆ;
    ᐃΔ[578][2] = ⵠᐃ.ΔⲆⲆΔⲆΔⵠΔⵠ;
    ᐃΔ[580] = ᐃΔ[578];
    ᐃΔ[579] = ᐃΔ[578];
    ᐃΔ[1175] = [];
    ᐃΔ[1175][0] = ⵠᐃ.ⲆᐃΔⲆᐃᐃΔᐃⵠ;
    ᐃΔ[1175][1] = ⵠᐃ.ᐃᐃΔᐃΔⵠⵠΔⵠ;
    ᐃΔ[1175][2] = ⵠᐃ.ΔⵠΔⲆᐃᐃⵠⲆᐃ;
    ᐃΔ[1176] = ᐃΔ[1175];
    ᐃΔ[1177] = ᐃΔ[1175];
    ᐃΔ[581] = [];
    ᐃΔ[581][0] = ⵠᐃ.ΔᐃⵠⵠⵠⲆⲆⲆⵠ;
    ᐃΔ[581][1] = ⵠᐃ.ⵠΔⲆⲆΔⲆΔⲆᐃ;
    ᐃΔ[581][2] = ⵠᐃ.ⲆⵠΔⲆᐃΔⲆΔΔ;
    ᐃΔ[583] = ᐃΔ[581];
    ᐃΔ[582] = ᐃΔ[581];
    ᐃΔ[1178] = [];
    ᐃΔ[1178][0] = ⵠᐃ.ⵠᐃⵠΔᐃΔᐃΔᐃ;
    ᐃΔ[1178][1] = ⵠᐃ.ⵠⵠΔⵠᐃⲆΔΔⲆ;
    ᐃΔ[1178][2] = ⵠᐃ.ⲆⲆᐃΔⵠⵠΔⲆΔ;
    ᐃΔ[1179] = ᐃΔ[1178];
    ᐃΔ[1180] = ᐃΔ[1178];
    ᐃΔ[584] = [];
    ᐃΔ[584][0] = ⵠᐃ.ⲆⵠⵠᐃΔᐃΔΔⵠ;
    ᐃΔ[584][1] = ⵠᐃ.ⲆⲆⵠⵠΔⲆⵠⵠⲆ;
    ᐃΔ[584][2] = ⵠᐃ.ΔⵠΔⵠⲆᐃΔⲆⲆ;
    ᐃΔ[586] = ᐃΔ[584];
    ᐃΔ[585] = ᐃΔ[584];
    ᐃΔ[1181] = [];
    ᐃΔ[1181][0] = ⵠᐃ.ᐃᐃΔⲆⵠⲆⲆᐃΔ;
    ᐃΔ[1181][1] = ⵠᐃ.ⲆΔⵠΔΔⵠⵠᐃΔ;
    ᐃΔ[1181][2] = ⵠᐃ.ΔⵠᐃⲆᐃᐃⲆⵠΔ;
    ᐃΔ[1182] = ᐃΔ[1181];
    ᐃΔ[1183] = ᐃΔ[1181];
    ᐃΔ[587] = [];
    ᐃΔ[587][0] = ⵠᐃ.ⵠᐃᐃⲆⵠⲆΔⲆⲆ;
    ᐃΔ[587][1] = ⵠᐃ.ΔⲆⲆⵠⲆΔⲆᐃΔ;
    ᐃΔ[587][2] = ⵠᐃ.ΔⵠᐃⵠⵠⲆᐃᐃΔ;
    ᐃΔ[589] = ᐃΔ[587];
    ᐃΔ[588] = ᐃΔ[587];
    ᐃΔ[1184] = [];
    ᐃΔ[1184][0] = ⵠᐃ.ⵠᐃⲆᐃᐃᐃⲆⵠⵠ;
    ᐃΔ[1184][1] = ⵠᐃ.ᐃᐃΔΔΔᐃⵠᐃᐃ;
    ᐃΔ[1184][2] = ⵠᐃ.ᐃΔⲆⲆⵠⵠⵠⵠⵠ;
    ᐃΔ[1185] = ᐃΔ[1184];
    ᐃΔ[1186] = ᐃΔ[1184];
    ᐃΔ[1257] = [];
    ᐃΔ[1257][0] = ⵠᐃ.ⵠΔᐃΔⲆⵠⵠᐃΔ;
    ᐃΔ[1257][1] = ⵠᐃ.ΔᐃΔᐃⲆⲆᐃⵠⲆ;
    ᐃΔ[1257][2] = ⵠᐃ.ᐃⲆᐃⲆΔⵠΔΔᐃ;
    ᐃΔ[1258] = ᐃΔ[1257];
    ᐃΔ[1256] = ᐃΔ[1257];
    ᐃΔ[1260] = [];
    ᐃΔ[1260][0] = ⵠᐃ.ᐃⵠΔⵠⵠΔΔΔⲆ;
    ᐃΔ[1260][1] = ⵠᐃ.ΔΔⵠⵠᐃⵠΔᐃΔ;
    ᐃΔ[1260][2] = ⵠᐃ.ΔΔⵠΔΔⵠᐃᐃⲆ;
    ᐃΔ[1261] = ᐃΔ[1260];
    ᐃΔ[1259] = ᐃΔ[1260];
    ᐃΔ[1263] = [];
    ᐃΔ[1263][0] = ⵠᐃ.ⲆΔⵠᐃΔΔⵠⲆⲆ;
    ᐃΔ[1263][1] = ⵠᐃ.ᐃⲆΔⲆⲆᐃΔⵠⵠ;
    ᐃΔ[1263][2] = ⵠᐃ.ⵠⵠᐃⵠⵠⵠᐃΔⲆ;
    ᐃΔ[1264] = ᐃΔ[1263];
    ᐃΔ[1262] = ᐃΔ[1263];
    ᐃΔ[1266] = [];
    ᐃΔ[1266][0] = ⵠᐃ.ᐃⵠⵠΔⵠⵠΔⲆⲆ;
    ᐃΔ[1266][1] = ⵠᐃ.ⵠⵠⵠΔᐃᐃᐃΔΔ;
    ᐃΔ[1266][2] = ⵠᐃ.ΔⲆΔΔⲆᐃⲆⲆΔ;
    ᐃΔ[1267] = ᐃΔ[1266];
    ᐃΔ[1265] = ᐃΔ[1266];
    ᐃΔ[1269] = [];
    ᐃΔ[1269][0] = ⵠᐃ.ᐃᐃⲆⲆⵠΔᐃΔΔ;
    ᐃΔ[1269][1] = ⵠᐃ.ᐃᐃᐃΔⵠⲆΔΔⲆ;
    ᐃΔ[1269][2] = ⵠᐃ.ᐃⲆⲆΔⵠⵠⵠΔᐃ;
    ᐃΔ[1270] = ᐃΔ[1269];
    ᐃΔ[1268] = ᐃΔ[1269];
    ᐃΔ[1272] = [];
    ᐃΔ[1272][0] = ⵠᐃ.ⵠⵠⵠⲆᐃᐃⲆⵠⵠ;
    ᐃΔ[1272][1] = ⵠᐃ.ΔᐃⲆᐃⲆⵠᐃⵠⲆ;
    ᐃΔ[1272][2] = ⵠᐃ.ⲆᐃⲆⲆᐃⵠΔΔΔ;
    ᐃΔ[1273] = ᐃΔ[1272];
    ᐃΔ[1271] = ᐃΔ[1272];
    ᐃΔ[1239] = [];
    ᐃΔ[1239][0] = ⵠᐃ.ΔΔⵠⵠᐃΔⵠΔⵠ;
    ᐃΔ[1239][1] = ⵠᐃ.ΔⵠⵠⲆΔⵠᐃᐃᐃ;
    ᐃΔ[1239][2] = ⵠᐃ.ⲆⲆⲆⵠⲆⵠⲆᐃⵠ;
    ᐃΔ[1240] = ᐃΔ[1239];
    ᐃΔ[1238] = ᐃΔ[1239];
    ᐃΔ[1242] = [];
    ᐃΔ[1242][0] = ⵠᐃ.ⵠⲆⲆᐃⲆᐃᐃⲆⵠ;
    ᐃΔ[1242][1] = ⵠᐃ.ⲆᐃⲆᐃᐃᐃⲆⲆⲆ;
    ᐃΔ[1242][2] = ⵠᐃ.ⲆⵠᐃⲆⲆⲆⵠⲆⵠ;
    ᐃΔ[1243] = ᐃΔ[1242];
    ᐃΔ[1241] = ᐃΔ[1242];
    ᐃΔ[1245] = [];
    ᐃΔ[1245][0] = ⵠᐃ.ᐃᐃⲆΔΔΔΔΔⵠ;
    ᐃΔ[1245][1] = ⵠᐃ.ⵠᐃⵠⵠⲆⲆⲆⵠⲆ;
    ᐃΔ[1245][2] = ⵠᐃ.ᐃᐃⵠⵠⵠΔΔΔᐃ;
    ᐃΔ[1246] = ᐃΔ[1245];
    ᐃΔ[1244] = ᐃΔ[1245];
    ᐃΔ[1248] = [];
    ᐃΔ[1248][0] = ⵠᐃ.ᐃⵠᐃᐃⲆΔⲆΔⲆ;
    ᐃΔ[1248][1] = ⵠᐃ.ΔⲆⵠᐃΔⵠᐃⲆᐃ;
    ᐃΔ[1248][2] = ⵠᐃ.ⵠⵠⲆⵠᐃⵠⲆΔΔ;
    ᐃΔ[1249] = ᐃΔ[1248];
    ᐃΔ[1247] = ᐃΔ[1248];
    ᐃΔ[1251] = [];
    ᐃΔ[1251][0] = ⵠᐃ.ⲆΔⲆⲆΔΔΔⵠⲆ;
    ᐃΔ[1251][1] = ⵠᐃ.ⵠΔΔᐃᐃⵠΔΔΔ;
    ᐃΔ[1251][2] = ⵠᐃ.ᐃᐃᐃΔⵠᐃⵠⵠⲆ;
    ᐃΔ[1252] = ᐃΔ[1251];
    ᐃΔ[1250] = ᐃΔ[1251];
    ᐃΔ[1254] = [];
    ᐃΔ[1254][0] = ⵠᐃ.ⵠⵠⵠⵠⲆⵠΔⵠΔ;
    ᐃΔ[1254][1] = ⵠᐃ.ⵠⲆⲆⵠⵠΔⵠᐃᐃ;
    ᐃΔ[1254][2] = ⵠᐃ.ΔⲆᐃⵠⲆⲆⵠⵠⵠ;
    ᐃΔ[1255] = ᐃΔ[1254];
    ᐃΔ[1253] = ᐃΔ[1254];
    ᐃΔ[1227] = [];
    ᐃΔ[1227][0] = ⵠᐃ.ⵠⵠᐃΔᐃΔⵠⵠⵠ;
    ᐃΔ[1227][1] = ⵠᐃ.ᐃⵠⲆᐃΔᐃΔΔⵠ;
    ᐃΔ[1227][2] = ⵠᐃ.ᐃⵠⲆⵠⵠΔⲆⵠᐃ;
    ᐃΔ[1229] = ᐃΔ[1227];
    ᐃΔ[1228] = ᐃΔ[1227];
    ᐃΔ[1187] = [];
    ᐃΔ[1187][0] = ⵠᐃ.ⲆⲆᐃⲆⲆⲆΔ;
    ᐃΔ[1187][1] = ⵠᐃ.ᐃΔᐃΔⵠⲆⲆ;
    ᐃΔ[1187][2] = ⵠᐃ.ⲆⵠⵠᐃⲆΔⲆ;
    ᐃΔ[1188] = ᐃΔ[1187];
    ᐃΔ[Cs.ⵠᐃᐃⵠΔᐃⲆᐃⵠ] = ᐃΔ[1187];
    ᐃΔ[840] = bu(1, [{
      f: Td,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
    }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[841] = ᐃΔ[840];
    ᐃΔ[850] = bu(1, [{
      f: dc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[851] = ᐃΔ[850];
    ᐃΔ[644] = bu(1, [{
      f: $d,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }, {
      f: Tt,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }, {
      f: Wt,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[643] = ᐃΔ[644];
    ᐃΔ[639] = bu(1, [{
      f: Xd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[800] = bu(1, [{
      f: pp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
    }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[799] = ᐃΔ[800];
    ᐃΔ[631] = bu(1, [{
      f: Ku,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[632] = ᐃΔ[631];
    ᐃΔ[311] = bu(1, [{
      f: Ku,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#493d36", "#332b28"]
    }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[284] = ᐃΔ[311];
    ᐃΔ[808] = bu(1, [{
      f: Ku,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#c67933", "#b17238"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[809] = ᐃΔ[808];
    ᐃΔ[834] = bu(1, [{
      f: Ku,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e8e8e8", "#bbbbbb"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[835] = ᐃΔ[834];
    ᐃΔ[845] = bu(1, [{
      f: Ku,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#328a56", "#449573"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[846] = ᐃΔ[845];
    ᐃΔ[949] = bu(1, [{
      f: Ku,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#c98e2f", "#a36b11"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[950] = ᐃΔ[949];
    ᐃΔ[951] = ᐃΔ[949];
    ᐃΔ[966] = bu(1, [{
      f: Ku,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#13a56d", "#098a58"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[967] = ᐃΔ[966];
    ᐃΔ[968] = ᐃΔ[966];
    ᐃΔ[981] = bu(1, [{
      f: Ku,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#3a8214", "#4a9c1e"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[982] = ᐃΔ[981];
    ᐃΔ[983] = ᐃΔ[981];
    ᐃΔ[959] = bu(1, [{
      f: Ku,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#b22419", "#99110e"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[960] = ᐃΔ[959];
    ᐃΔ[961] = ᐃΔ[959];
    ᐃΔ[309] = bu(1, [{
      f: _t,
      x: -2,
      y: -2,
      a: 1,
      r: -Math.PI / 7,
      c: ["#4d2d14", "#432516"]
    }, {
      f: cu,
      x: -2,
      y: -2,
      a: 1,
      r: -Math.PI / 7,
      c: ["#efd435", "#ec8d35", "#e96132"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[302] = ᐃΔ[309];
    ᐃΔ[328] = bu(1, [{
      f: au,
      x: -2,
      y: -1,
      a: 1,
      r: -Math.PI / 7,
      c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
    }, {
      f: cu,
      x: -2,
      y: -1,
      a: 1,
      r: -Math.PI / 7,
      c: ["#efd435", "#ec8d35", "#e96132"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[327] = ᐃΔ[328];
    ᐃΔ[860] = bu(1, [{
      f: xu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
    }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[865] = bu(1, [{
      f: Iu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[829] = bu(1, [{
      f: ru,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[261] = bu(1, [{
      f: Au,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[292] = bu(1, [{
      f: Gu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[293] = bu(1, [{
      f: Fu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[455] = bu(1, [{
      f: Du,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[313] = bu(1, [{
      f: mu,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[312] = bu(1, [{
      f: mu,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[258] = bu(1, [{
      f: mu,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[296] = bu(1, [{
      f: mu,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[458] = bu(1, [{
      f: mu,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[1017] = [];
    ᐃΔ[1017][0] = ⵠᐃ.ᐃᐃⵠⵠᐃⲆⵠ;
    ᐃΔ[1017][1] = ⵠᐃ.ΔΔᐃⵠⲆⲆⲆ;
    ᐃΔ[1017][2] = ⵠᐃ.ΔⵠΔⵠΔⵠⲆ;
    ᐃΔ[1019] = ᐃΔ[1017];
    ᐃΔ[1018] = ᐃΔ[1017];
    ᐃΔ[315] = bu(1, [{
      f: hm,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#252B28", "#58645F", "#75827D"]
    }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[297] = bu(1, [{
      f: am,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#282823", "#877c2d", "#c4bc51"]
    }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[298] = bu(1, [{
      f: Lu,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#232828", "#3fc9c9", "#74ede6"]
    }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[316] = bu(1, [{
      f: _t,
      x: 0,
      y: -5,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[830] = ᐃΔ[829];
    ᐃΔ[254] = ᐃΔ[261];
    ᐃΔ[290] = ᐃΔ[292];
    ᐃΔ[291] = ᐃΔ[293];
    ᐃΔ[456] = ᐃΔ[455];
    ᐃΔ[314] = ᐃΔ[313];
    ᐃΔ[256] = ᐃΔ[312];
    ᐃΔ[295] = ᐃΔ[258];
    ᐃΔ[257] = ᐃΔ[296];
    ᐃΔ[460] = ᐃΔ[458];
    ᐃΔ[277] = bu(1, [{
      f: Md,
      x: 0,
      y: 0,
      a: 1,
      r: 0
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[310] = bu(1, [{
      f: _d,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
    }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[262] = ᐃΔ[310];
    ᐃΔ[329] = bu(1, [{
      f: dm,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[263] = ᐃΔ[329];
    ᐃΔ[331] = bu(1, [{
      f: im,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[332] = ᐃΔ[331];
    ᐃΔ[492] = bu(1, [{
      f: dm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[493] = ᐃΔ[492];
    ᐃΔ[330] = bu(1, [{
      f: pm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[265] = ᐃΔ[330];
    ᐃΔ[317] = bu(1, [{
      f: em,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
    }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[318] = ᐃΔ[317];
    ᐃΔ[319] = bu(1, [{
      f: np,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[320] = ᐃΔ[319];
    ᐃΔ[362] = bu(1, [{
      f: Wc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[363] = ᐃΔ[362];
    ᐃΔ[364] = bu(1, [{
      f: Wc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[365] = ᐃΔ[364];
    ᐃΔ[361] = bu(1, [{
      f: Dm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[360] = ᐃΔ[361];
    ᐃΔ[495] = bu(1, [{
      f: Dm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[496] = ᐃΔ[495];
    ᐃΔ[335] = bu(1, [{
      f: ym,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[268] = ᐃΔ[335];
    ᐃΔ[372] = bu(1, [{
      f: fm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[371] = ᐃΔ[372];
    ᐃΔ[499] = bu(1, [{
      f: fm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[498] = ᐃΔ[499];
    ᐃΔ[375] = bu(1, [{
      f: Cm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[374] = ᐃΔ[375];
    ᐃΔ[378] = bu(1, [{
      f: zm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[377] = ᐃΔ[378];
    ᐃΔ[337] = bu(1, [{
      f: Cp,
      x: 0,
      y: 2,
      a: 1,
      r: 0,
      c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[338] = ᐃΔ[337];
    ᐃΔ[300] = bu(1, [{
      f: qd,
      x: 0,
      y: -3,
      a: 1,
      r: 0,
      c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
    }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[323] = bu(1, [{
      f: qd,
      x: 0,
      y: -3,
      a: 1,
      r: 0,
      c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
    }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[325] = ᐃΔ[323];
    ᐃΔ[305] = bu(1, [{
      f: Yt,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#cec0c4", "#ffffff", "#6d6768"]
    }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[513] = bu(1, [{
      f: Yt,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#d4e9ec", "#37b1d7", "#506c71"]
    }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[515] = ᐃΔ[513];
    ᐃΔ[368] = bu(1, [{
      f: ec,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#ef96be", "#ffffff"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[1162] = bu(1, [{
      f: ec,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#55423e", "#ffffff"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[178] = bu(1, [{
      f: om,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[179] = bu(1, [{
      f: om,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[624] = bu(1, [{
      f: ec,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#201851", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[393] = bu(1, [{
      f: ec,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#231f20", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[505] = bu(1, [{
      f: ec,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#ffffff", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[369] = bu(1, [{
      f: _m,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[370] = ᐃΔ[369];
    ᐃΔ[381] = bu(1, [{
      f: km,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[380] = ᐃΔ[381];
    ᐃΔ[502] = bu(1, [{
      f: Tp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[503] = ᐃΔ[502];
    ᐃΔ[880] = bu(1, [{
      f: ju,
      x: 0,
      y: 5,
      a: 1,
      r: 0,
      c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[881] = ᐃΔ[880];
    ᐃΔ[882] = bu(1, [{
      f: hu,
      x: 0,
      y: 5,
      a: 1,
      r: 0,
      c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[883] = ᐃΔ[882];
    ᐃΔ[303] = bu(1, [{
      f: Zt,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#ffffff", "#cec0c4"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[304] = ᐃΔ[303];
    ᐃΔ[392] = [];
    ᐃΔ[392][0] = ⵠᐃ.ⵠⲆᐃⵠΔⵠⵠ;
    ᐃΔ[392][1] = ⵠᐃ.ΔᐃᐃⲆᐃᐃⲆ;
    ᐃΔ[392][2] = ⵠᐃ.ᐃᐃΔⵠⵠⵠᐃ;
    ᐃΔ[367] = ᐃΔ[392];
    ᐃΔ[975] = [];
    ᐃΔ[975][0] = ⵠᐃ.ΔⲆΔΔᐃΔᐃ;
    ᐃΔ[975][1] = ⵠᐃ.ⵠⲆⲆⵠΔⵠΔ;
    ᐃΔ[975][2] = ⵠᐃ.ⵠΔᐃᐃᐃⲆᐃ;
    ᐃΔ[977] = ᐃΔ[975];
    ᐃΔ[976] = ᐃΔ[975];
    ᐃΔ[978] = [];
    ᐃΔ[978][0] = ⵠᐃ.ΔⲆᐃⵠⲆⵠⲆ;
    ᐃΔ[978][1] = ⵠᐃ.ΔΔⵠΔΔΔΔ;
    ᐃΔ[978][2] = ⵠᐃ.ᐃᐃⲆⲆⲆΔᐃ;
    ᐃΔ[980] = ᐃΔ[978];
    ᐃΔ[979] = ᐃΔ[978];
    ᐃΔ[1158] = [];
    ᐃΔ[1158][0] = ⵠᐃ.ⵠΔᐃⲆᐃᐃΔ;
    ᐃΔ[1158][1] = ⵠᐃ.ⵠΔᐃⲆᐃᐃΔ;
    ᐃΔ[1158][2] = ⵠᐃ.ⵠΔᐃⲆᐃᐃΔ;
    ᐃΔ[1159] = ᐃΔ[1158];
    ᐃΔ[426] = [];
    ᐃΔ[426][0] = ⵠᐃ.ⵠΔᐃⲆΔⲆⲆ;
    ᐃΔ[426][1] = ⵠᐃ.ᐃᐃⵠΔᐃⲆⵠ;
    ᐃΔ[426][2] = ⵠᐃ.ᐃᐃⲆᐃᐃᐃⲆ;
    ᐃΔ[427] = ᐃΔ[426];
    ᐃΔ[428] = ᐃΔ[426];
    ᐃΔ[1160] = [];
    ᐃΔ[1160][0] = ⵠᐃ.ⲆᐃᐃⵠⲆᐃⲆ;
    ᐃΔ[1160][1] = ⵠᐃ.ⲆᐃᐃⵠⲆᐃⲆ;
    ᐃΔ[1160][2] = ⵠᐃ.ⲆᐃᐃⵠⲆᐃⲆ;
    ᐃΔ[1161] = ᐃΔ[1160];
    ᐃΔ[1236] = [];
    ᐃΔ[1236][0] = ⵠᐃ.ⵠⵠᐃᐃⲆᐃᐃᐃᐃ;
    ᐃΔ[1236][1] = ⵠᐃ.ΔⵠᐃᐃΔⲆΔΔⲆ;
    ᐃΔ[1236][2] = ⵠᐃ.ᐃΔΔⲆⲆⵠᐃⵠⲆ;
    ᐃΔ[1235] = ᐃΔ[1236];
    ᐃΔ[1237] = ᐃΔ[1236];
    ᐃΔ[991] = [];
    ᐃΔ[991][0] = ⵠᐃ.ᐃΔⲆᐃⲆΔΔ;
    ᐃΔ[991][1] = ⵠᐃ.ⲆⲆΔⵠⵠⲆΔ;
    ᐃΔ[991][2] = ⵠᐃ.ⵠᐃᐃⲆΔⵠⵠ;
    ᐃΔ[990] = ᐃΔ[991];
    ᐃΔ[992] = ᐃΔ[991];
    ᐃΔ[994] = [];
    ᐃΔ[994][0] = ⵠᐃ.ⵠΔᐃᐃᐃⲆΔ;
    ᐃΔ[994][1] = ⵠᐃ.ⲆⵠΔⲆΔΔⵠ;
    ᐃΔ[994][2] = ⵠᐃ.ⲆᐃΔᐃⲆΔΔ;
    ᐃΔ[993] = ᐃΔ[994];
    ᐃΔ[995] = ᐃΔ[994];
    ᐃΔ[997] = [];
    ᐃΔ[997][0] = ⵠᐃ.ⵠⵠΔΔⲆⲆⵠ;
    ᐃΔ[997][1] = ⵠᐃ.ⲆⲆⲆⵠⲆⲆⲆ;
    ᐃΔ[997][2] = ⵠᐃ.ⲆΔⲆⵠⵠⵠⵠ;
    ᐃΔ[996] = ᐃΔ[997];
    ᐃΔ[998] = ᐃΔ[997];
    ᐃΔ[1000] = [];
    ᐃΔ[1000][0] = ⵠᐃ.ⲆⵠⲆᐃⲆᐃᐃ;
    ᐃΔ[1000][1] = ⵠᐃ.ⵠⲆⲆⵠᐃⲆᐃ;
    ᐃΔ[1000][2] = ⵠᐃ.ᐃᐃⲆⵠᐃΔⵠ;
    ᐃΔ[999] = ᐃΔ[1000];
    ᐃΔ[1001] = ᐃΔ[1000];
    ᐃΔ[1003] = [];
    ᐃΔ[1003][0] = ⵠᐃ.ⲆⲆⲆᐃΔⵠⵠ;
    ᐃΔ[1003][1] = ⵠᐃ.Δⵠⵠᐃᐃᐃᐃ;
    ᐃΔ[1003][2] = ⵠᐃ.ⵠⲆΔΔᐃΔⵠ;
    ᐃΔ[1002] = ᐃΔ[1003];
    ᐃΔ[1004] = ᐃΔ[1003];
    ᐃΔ[1006] = [];
    ᐃΔ[1006][0] = ⵠᐃ.ⲆⵠΔⲆᐃᐃⵠ;
    ᐃΔ[1006][1] = ⵠᐃ.ⵠΔΔⵠⵠΔⵠ;
    ᐃΔ[1006][2] = ⵠᐃ.ᐃᐃᐃΔΔⵠΔ;
    ᐃΔ[1005] = ᐃΔ[1006];
    ᐃΔ[1007] = ᐃΔ[1006];
    ᐃΔ[1009] = [];
    ᐃΔ[1009][0] = ⵠᐃ.ⵠᐃⲆᐃⲆᐃΔ;
    ᐃΔ[1009][1] = ⵠᐃ.ⵠⵠⲆⵠΔΔⲆ;
    ᐃΔ[1009][2] = ⵠᐃ.ⵠⲆᐃⵠΔΔⲆ;
    ᐃΔ[1008] = ᐃΔ[1009];
    ᐃΔ[1010] = ᐃΔ[1009];
    ᐃΔ[1012] = [];
    ᐃΔ[1012][0] = ⵠᐃ.ⲆΔΔⵠⲆᐃⲆ;
    ᐃΔ[1012][1] = ⵠᐃ.ΔⲆⵠΔⵠⵠⲆ;
    ᐃΔ[1012][2] = ⵠᐃ.ΔΔⲆᐃⵠΔΔ;
    ᐃΔ[1011] = ᐃΔ[1012];
    ᐃΔ[1013] = ᐃΔ[1012];
    ᐃΔ[1015] = [];
    ᐃΔ[1015][0] = ⵠᐃ.ᐃᐃⵠΔΔΔᐃ;
    ᐃΔ[1015][1] = ⵠᐃ.ΔⵠΔᐃᐃᐃⲆ;
    ᐃΔ[1015][2] = ⵠᐃ.ᐃⲆΔᐃⵠⵠΔ;
    ᐃΔ[1014] = ᐃΔ[1015];
    ᐃΔ[1016] = ᐃΔ[1015];
    ᐃΔ[1035] = [];
    ᐃΔ[1035][0] = ⵠᐃ.ⲆΔⵠⲆⲆ;
    ᐃΔ[1035][1] = ⵠᐃ.ⲆΔⵠⲆⲆ;
    ᐃΔ[1035][2] = ⵠᐃ.ⲆΔⵠⲆⲆ;
    ᐃΔ[Cs.ᐃᐃⵠⵠΔⵠⵠⲆⵠ] = ᐃΔ[1035];
    ᐃΔ[1036] = ᐃΔ[1035];
    ᐃΔ[1037] = [];
    ᐃΔ[1037][0] = ⵠᐃ.ⵠⲆΔᐃⵠ;
    ᐃΔ[1037][1] = ⵠᐃ.ⵠⲆΔᐃⵠ;
    ᐃΔ[1037][2] = ⵠᐃ.ⵠⲆΔᐃⵠ;
    ᐃΔ[Cs.ⲆᐃᐃⲆᐃⵠᐃⵠⵠ] = ᐃΔ[1037];
    ᐃΔ[1038] = ᐃΔ[1037];
    ᐃΔ[1039] = [];
    ᐃΔ[1039][0] = ⵠᐃ.ⲆᐃⲆΔΔ;
    ᐃΔ[1039][1] = ⵠᐃ.ⲆᐃⲆΔΔ;
    ᐃΔ[1039][2] = ⵠᐃ.ⲆᐃⲆΔΔ;
    ᐃΔ[Cs.ⲆΔΔⲆⲆΔⲆⵠᐃ] = ᐃΔ[1039];
    ᐃΔ[1040] = ᐃΔ[1039];
    ᐃΔ[1156] = [];
    ᐃΔ[1156][0] = ⵠᐃ.ΔⲆⲆⲆΔ;
    ᐃΔ[1156][1] = ⵠᐃ.ΔⲆⲆⲆΔ;
    ᐃΔ[1156][2] = ⵠᐃ.ΔⲆⲆⲆΔ;
    ᐃΔ[1157] = ᐃΔ[1156];
    ᐃΔ[1046] = [];
    ᐃΔ[1046][0] = ⵠᐃ.ᐃⵠΔΔⲆΔⵠ;
    ᐃΔ[1046][1] = ⵠᐃ.ⲆᐃΔⵠⵠΔⲆ;
    ᐃΔ[1046][2] = ⵠᐃ.ᐃΔⲆⵠⵠᐃΔ;
    ᐃΔ[1048] = ᐃΔ[1046];
    ᐃΔ[1047] = ᐃΔ[1046];
    ᐃΔ[744] = [];
    ᐃΔ[744][0] = ⵠᐃ.ⵠⵠⵠⵠⵠΔΔ;
    ᐃΔ[744][1] = ⵠᐃ.ᐃⲆⲆⵠᐃⵠᐃ;
    ᐃΔ[744][2] = ⵠᐃ.ΔⲆⵠΔᐃⵠⵠ;
    ᐃΔ[746] = ᐃΔ[744];
    ᐃΔ[745] = ᐃΔ[744];
    ᐃΔ[747] = [];
    ᐃΔ[747][0] = ⵠᐃ.ⲆⲆⲆᐃⵠΔⲆ;
    ᐃΔ[747][1] = ⵠᐃ.ⲆⵠᐃⲆⲆΔⵠ;
    ᐃΔ[747][2] = ⵠᐃ.ⵠᐃΔⲆΔⵠⵠ;
    ᐃΔ[749] = ᐃΔ[747];
    ᐃΔ[748] = ᐃΔ[747];
    ᐃΔ[1049] = [];
    ᐃΔ[1049][0] = ⵠᐃ.ΔⵠΔⲆⲆⵠᐃ;
    ᐃΔ[1049][1] = ⵠᐃ.ΔΔⵠΔⲆⵠΔ;
    ᐃΔ[1049][2] = ⵠᐃ.ΔᐃⵠΔⵠⵠᐃ;
    ᐃΔ[1051] = ᐃΔ[1049];
    ᐃΔ[1050] = ᐃΔ[1049];
    ᐃΔ[1189] = [];
    ᐃΔ[1189][0] = ⵠᐃ.ΔᐃΔⲆᐃⵠⵠ;
    ᐃΔ[1189][1] = ⵠᐃ.ΔΔΔⲆⵠⲆΔ;
    ᐃΔ[1189][2] = ⵠᐃ.ΔᐃⵠⲆΔⲆⵠ;
    ᐃΔ[1191] = ᐃΔ[1189];
    ᐃΔ[1190] = ᐃΔ[1189];
    ᐃΔ[1110] = [];
    ᐃΔ[1110][0] = ⵠᐃ.ⲆⲆᐃΔΔⲆⵠ;
    ᐃΔ[1110][1] = ⵠᐃ.ΔⲆⵠⵠᐃⵠⵠ;
    ᐃΔ[1110][2] = ⵠᐃ.ᐃᐃⵠⵠᐃⵠⵠ;
    ᐃΔ[1112] = ᐃΔ[1110];
    ᐃΔ[1111] = ᐃΔ[1110];
    ᐃΔ[1131] = [];
    ᐃΔ[1131][0] = ⵠᐃ.ⲆᐃⵠⲆⵠⲆⲆΔⵠ;
    ᐃΔ[1131][1] = ⵠᐃ.ⲆⵠⲆᐃⲆᐃΔΔᐃ;
    ᐃΔ[1131][2] = ⵠᐃ.ΔᐃΔᐃΔᐃⵠᐃⵠ;
    ᐃΔ[1133] = ᐃΔ[1131];
    ᐃΔ[1132] = ᐃΔ[1131];
    ᐃΔ[1137] = [];
    ᐃΔ[1137][0] = ⵠᐃ.ⲆᐃⲆΔⵠⵠⵠ;
    ᐃΔ[1137][1] = ⵠᐃ.ᐃᐃΔᐃⵠᐃⵠ;
    ᐃΔ[1137][2] = ⵠᐃ.ⵠⲆΔΔΔΔᐃ;
    ᐃΔ[1138] = ᐃΔ[1137];
    ᐃΔ[1139] = ᐃΔ[1137];
    ᐃΔ[1140] = [];
    ᐃΔ[1140][0] = ⵠᐃ.ᐃⵠⵠⲆᐃⵠⵠ;
    ᐃΔ[1140][1] = ⵠᐃ.ΔⵠⲆᐃᐃΔΔ;
    ᐃΔ[1140][2] = ⵠᐃ.ᐃᐃⵠᐃᐃᐃᐃ;
    ᐃΔ[1141] = ᐃΔ[1140];
    ᐃΔ[1142] = ᐃΔ[1140];
    ᐃΔ[1117] = [];
    ᐃΔ[1117][0] = ⵠᐃ.ΔΔⲆⲆᐃΔⵠ;
    ᐃΔ[1117][1] = ⵠᐃ.ᐃᐃΔⲆΔΔᐃ;
    ᐃΔ[1117][2] = ⵠᐃ.ⲆΔⲆⲆⲆⲆΔ;
    ᐃΔ[1116] = ᐃΔ[1117];
    ᐃΔ[1118] = ᐃΔ[1117];
    ᐃΔ[1080] = [];
    ᐃΔ[1080][0] = ⵠᐃ.ⵠᐃΔⲆⲆⵠⲆ;
    ᐃΔ[1080][1] = ⵠᐃ.ΔⲆⵠⵠᐃΔΔ;
    ᐃΔ[1080][2] = ⵠᐃ.ⵠⲆⵠΔᐃⲆⵠ;
    ᐃΔ[1082] = ᐃΔ[1080];
    ᐃΔ[1081] = ᐃΔ[1080];
    ᐃΔ[1224] = [];
    ᐃΔ[1224][0] = ⵠᐃ.ΔⵠΔΔᐃᐃⵠ;
    ᐃΔ[1224][1] = ⵠᐃ.ΔΔᐃⲆⵠΔⲆ;
    ᐃΔ[1224][2] = ⵠᐃ.ΔΔΔΔΔᐃᐃ;
    ᐃΔ[1226] = ᐃΔ[1224];
    ᐃΔ[1225] = ᐃΔ[1224];
    ᐃΔ[1095] = [];
    ᐃΔ[1095][0] = ⵠᐃ.ᐃΔΔⲆⲆⵠΔ;
    ᐃΔ[1095][1] = ⵠᐃ.ΔⵠⵠⵠⲆⲆⵠ;
    ᐃΔ[1095][2] = ⵠᐃ.ⵠᐃΔΔᐃΔⲆ;
    ᐃΔ[1097] = ᐃΔ[1095];
    ᐃΔ[1096] = ᐃΔ[1095];
    ᐃΔ[717] = bu(1, [{
      f: kc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
    }, {
      f: sc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e4c027"]
    }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[718] = ᐃΔ[717];
    ᐃΔ[408] = bu(1, [{
      f: Tm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
    }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[409] = ᐃΔ[408];
    ᐃΔ[907] = bu(1, [{
      f: Mm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
    }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[909] = ᐃΔ[907];
    ᐃΔ[908] = ᐃΔ[907];
    ᐃΔ[197] = bu(1, [{
      f: Am,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
    }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[906] = ᐃΔ[197];
    ᐃΔ[901] = bu(1, [{
      f: Zm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[900] = ᐃΔ[901];
    ᐃΔ[899] = ᐃΔ[901];
    ᐃΔ[401] = bu(1, [{
      f: rp,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[402] = ᐃΔ[401];
    ᐃΔ[395] = bu(1, [{
      f: vc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[396] = ᐃΔ[395];
    ᐃΔ[398] = bu(1, [{
      f: Pp,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[399] = ᐃΔ[398];
    ᐃΔ[404] = bu(1, [{
      f: yc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[405] = ᐃΔ[404];
    ᐃΔ[472] = bu(1, [{
      f: bp,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[473] = ᐃΔ[472];
    ᐃΔ[874] = bu(1, [{
      f: Em,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
    }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[876] = ᐃΔ[874];
    ᐃΔ[875] = ᐃΔ[874];
    ᐃΔ[477] = bu(1, [{
      f: Km,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[478] = ᐃΔ[477];
    ᐃΔ[709] = bu(1, [{
      f: Rm,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#939393", "#5f6061"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[711] = ᐃΔ[709];
    ᐃΔ[550] = bu(1, [{
      f: Jc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[551] = ᐃΔ[550];
    ᐃΔ[480] = bu(1, [{
      f: Km,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[481] = ᐃΔ[480];
    ᐃΔ[483] = bu(1, [{
      f: Km,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[484] = ᐃΔ[483];
    ᐃΔ[486] = bu(1, [{
      f: Km,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[487] = ᐃΔ[486];
    ᐃΔ[489] = [];
    ᐃΔ[489][0] = ⵠᐃ.ⵠΔⵠΔᐃᐃΔ;
    ᐃΔ[489][1] = ⵠᐃ.ΔⵠⲆᐃᐃⵠⲆ;
    ᐃΔ[489][2] = ⵠᐃ.ᐃⲆΔᐃⲆⲆΔ;
    ᐃΔ[491] = ᐃΔ[489];
    ᐃΔ[490] = ᐃΔ[489];
    ᐃΔ[1195] = [];
    ᐃΔ[1195][0] = ⵠᐃ.ⲆⲆⵠᐃΔΔⵠ;
    ᐃΔ[1195][1] = ⵠᐃ.ΔⵠⲆⵠᐃᐃⲆ;
    ᐃΔ[1195][2] = ⵠᐃ.ⲆᐃⵠⲆΔⵠΔ;
    ᐃΔ[1197] = ᐃΔ[1195];
    ᐃΔ[1196] = ᐃΔ[1195];
    ᐃΔ[1199] = [];
    ᐃΔ[1199][0] = ⵠᐃ.ⵠΔᐃⵠΔⲆΔ;
    ᐃΔ[1199][1] = ⵠᐃ.ᐃΔᐃⵠⵠᐃΔ;
    ᐃΔ[1199][2] = ⵠᐃ.ⲆᐃⲆⲆⵠⲆᐃ;
    ᐃΔ[1201] = ᐃΔ[1199];
    ᐃΔ[1200] = ᐃΔ[1199];
    ᐃΔ[1203] = [];
    ᐃΔ[1203][0] = ⵠᐃ.ⵠᐃᐃΔᐃᐃⵠ;
    ᐃΔ[1203][1] = ⵠᐃ.ⲆᐃⵠΔᐃΔⲆ;
    ᐃΔ[1203][2] = ⵠᐃ.ᐃⲆΔΔⵠΔⵠ;
    ᐃΔ[1205] = ᐃΔ[1203];
    ᐃΔ[1204] = ᐃΔ[1203];
    ᐃΔ[1207] = [];
    ᐃΔ[1207][0] = ⵠᐃ.ⲆⵠᐃΔⲆΔⲆ;
    ᐃΔ[1207][1] = ⵠᐃ.ΔᐃⲆᐃΔΔⲆ;
    ᐃΔ[1207][2] = ⵠᐃ.ᐃⵠᐃⵠⵠᐃⵠ;
    ᐃΔ[1209] = ᐃΔ[1207];
    ᐃΔ[1208] = ᐃΔ[1207];
    ᐃΔ[1211] = [];
    ᐃΔ[1211][0] = ⵠᐃ.ⵠⵠᐃⵠΔᐃⵠ;
    ᐃΔ[1211][1] = ⵠᐃ.ᐃΔΔᐃⲆⲆᐃ;
    ᐃΔ[1211][2] = ⵠᐃ.ⵠᐃⲆⲆᐃⲆᐃ;
    ᐃΔ[1213] = ᐃΔ[1211];
    ᐃΔ[1212] = ᐃΔ[1211];
    ᐃΔ[1215] = [];
    ᐃΔ[1215][0] = ⵠᐃ.ΔⵠᐃⲆΔⲆⵠ;
    ᐃΔ[1215][1] = ⵠᐃ.ⵠᐃΔⵠᐃᐃᐃ;
    ᐃΔ[1215][2] = ⵠᐃ.ⲆΔΔⲆΔⲆⵠ;
    ᐃΔ[1217] = ᐃΔ[1215];
    ᐃΔ[1216] = ᐃΔ[1215];
    ᐃΔ[518] = bu(1, [{
      f: Hm,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
    }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[519] = ᐃΔ[518];
    ᐃΔ[532] = bu(1, [{
      f: Wm,
      x: -2,
      y: -2,
      a: 1,
      r: -Math.PI / 5,
      c: ["#141414", "#c4a23a", "#816511"]
    }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[533] = ᐃΔ[532];
    ᐃΔ[521] = bu(1, [{
      f: Um,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
    ᐃΔ[523] = bu(1, [{
      f: Um,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#120202", "#991616", "#750a0a", "#120202"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
    ᐃΔ[529] = bu(1, [{
      f: Qm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#347f93", "#54a4ba"]
    }, {
      f: up,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
    }, {
      f: Vc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#a9e4ed", "#86d4e0"]
    }, {
      f: ip,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[530] = ᐃΔ[529];
    ᐃΔ[553] = bu(1, [{
      f: tp,
      x: 45,
      y: 70,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[555] = ᐃΔ[553];
    ᐃΔ[541] = bu(1, [{
      f: mp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[542] = ᐃΔ[541];
    ᐃΔ[779] = bu(1, [{
      f: ic,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[780] = ᐃΔ[779];
    ᐃΔ[767] = bu(1, [{
      f: Fc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#2a2938", "#242330", "#313041"]
    }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[768] = ᐃΔ[767];
    ᐃΔ[776] = bu(1, [{
      f: Ic,
      x: 0,
      y: 3,
      a: 1,
      r: 0,
      c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
    }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[777] = ᐃΔ[776];
    ᐃΔ[771] = bu(1, [{
      f: Ic,
      x: 0,
      y: 3,
      a: 1,
      r: 0,
      c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
    }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[772] = ᐃΔ[771];
    ᐃΔ[756] = bu(1, [{
      f: $m,
      x: 0,
      y: 10,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[758] = ᐃΔ[756];
    ᐃΔ[760] = bu(1, [{
      f: $m,
      x: 0,
      y: 10,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[762] = ᐃΔ[760];
    ᐃΔ[764] = bu(1, [{
      f: $m,
      x: 0,
      y: 10,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[770] = ᐃΔ[764];
    ᐃΔ[910] = bu(1, [{
      f: Jm,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[912] = ᐃΔ[910];
    ᐃΔ[911] = ᐃΔ[910];
    ᐃΔ[732] = bu(1, [{
      f: Ap,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
    }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[734] = ᐃΔ[732];
    ᐃΔ[563] = bu(1, [{
      f: bc,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
    }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[564] = ᐃΔ[563];
    ᐃΔ[751] = bu(1, [{
      f: dp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[252] = bu(1, [{
      f: Im,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[753] = bu(1, [{
      f: dp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[253] = bu(1, [{
      f: Im,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[176] = bu(1, [{
      f: pc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[177] = bu(1, [{
      f: pc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[175] = bu(1, [{
      f: pc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[616] = bu(1, [{
      f: mc,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[618] = ᐃΔ[616];
    ᐃΔ[699] = bu(1, [{
      f: mc,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[700] = ᐃΔ[699];
    ᐃΔ[702] = bu(1, [{
      f: mc,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[704] = ᐃΔ[702];
    ᐃΔ[705] = bu(1, [{
      f: mc,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[706] = ᐃΔ[705];
    ᐃΔ[420] = bu(1, [{
      f: Bc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[421] = ᐃΔ[420];
    ᐃΔ[826] = bu(1, [{
      f: rc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#252525", "#73583e", "#493425", "#7d6144"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[827] = ᐃΔ[826];
    ᐃΔ[429] = bu(1, [{
      f: $c,
      x: 0,
      y: -2,
      a: 1,
      r: 0,
      c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[430] = ᐃΔ[429];
    ᐃΔ[432] = bu(1, [{
      f: gp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#dbce71", "#b29c32", "#c4bc51"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[433] = ᐃΔ[432];
    ᐃΔ[435] = bu(1, [{
      f: Kc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[436] = ᐃΔ[435];
    ᐃΔ[438] = bu(1, [{
      f: kp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[439] = ᐃΔ[438];
    ᐃΔ[441] = bu(1, [{
      f: Ec,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#221e1b", "#ffffff", "#f6f0e7"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[442] = ᐃΔ[441];
    ᐃΔ[418] = bu(1, [{
      f: tc,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#c27add", "#cd98e5"]
    }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[609] = bu(1, [{
      f: Nc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#D7C393", "#a48c6c"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[142] = bu(1, [{
      f: xc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#93CBCE", "#E9F6F6"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[140] = bu(1, [{
      f: Nc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#866432", "#6b4f25"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[180] = bu(1, [{
      f: Lm,
      x: 3,
      y: 2,
      a: 1,
      r: 0,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[181] = bu(1, [{
      f: Om,
      x: 3,
      y: 2,
      a: 1,
      r: 0,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[784] = ᐃΔ[180];
    ᐃΔ[785] = ᐃΔ[181];
    ᐃΔ[789] = bu(1, [{
      f: Yc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
    }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[791] = ᐃΔ[789];
    ᐃΔ[613] = bu(1, [{
      f: op,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
    }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[612] = bu(1, [{
      f: yp,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
    }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[715] = ᐃΔ[613];
    ᐃΔ[611] = ᐃΔ[612];
    ᐃΔ[634] = bu(1, [{
      f: um,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[635] = ᐃΔ[634];
    ᐃΔ[200] = bu(1, [{
      f: Ru,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[866] = bu(1, [{
      f: rm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[143] = bu(1, [{
      f: ep,
      x: 0,
      y: -2,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[690] = ᐃΔ[143];
    ᐃΔ[662] = bu(1, [{
      f: Nu,
      x: -3,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
    }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[664] = bu(1, [{
      f: Ou,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1d051e", "#42261A", "#281818"]
    }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[666] = ᐃΔ[664];
    ᐃΔ[649] = bu(1, [{
      f: sm,
      x: -3,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
    }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[650] = ᐃΔ[649];
    ᐃΔ[674] = bu(1, [{
      f: Yd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
    }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[646] = bu(1, [{
      f: vm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[647] = ᐃΔ[646];
    ᐃΔ[685] = bu(1, [{
      f: _c,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[684] = ᐃΔ[685];
    ᐃΔ[870] = bu(1, [{
      f: Cd,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#e2d63b", "#ee71a9", "#42b672"]
    }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[871] = ᐃΔ[870];
    ᐃΔ[605] = bu(1, [{
      f: Zc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
    }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[604] = ᐃΔ[605];
    ᐃΔ[842] = bu(1, [{
      f: wd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[843] = ᐃΔ[842];
    ᐃΔ[652] = bu(1, [{
      f: Ym,
      x: -1,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
    ᐃΔ[654] = ᐃΔ[652];
    ᐃΔ[626] = bu(1, [{
      f: Ym,
      x: -1,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
    }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[627] = ᐃΔ[626];
    ᐃΔ[629] = bu(1, [{
      f: gc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[196] = bu(1, [{
      f: Eu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[898] = ᐃΔ[196];
    ᐃΔ[659] = bu(1, [{
      f: Mu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
    }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[660] = ᐃΔ[659];
    ᐃΔ[145] = bu(1, [{
      f: Kd,
      x: -2,
      y: -8,
      a: 1,
      r: 0,
      c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
    }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[730] = ᐃΔ[145];
    ᐃΔ[566] = [];
    ᐃΔ[566][0] = ⵠᐃ.ΔⲆⵠⵠⲆΔᐃ;
    ᐃΔ[566][1] = ⵠᐃ.ᐃⲆΔᐃᐃᐃΔ;
    ᐃΔ[566][2] = ⵠᐃ.ⵠⲆⲆᐃⲆᐃΔ;
    ᐃΔ[567] = ᐃΔ[566];
    ᐃΔ[568] = ᐃΔ[566];
    ᐃΔ[877] = [];
    ᐃΔ[877][0] = ⵠᐃ.ᐃᐃⵠᐃⲆᐃΔ;
    ᐃΔ[877][1] = ⵠᐃ.ⵠⵠⵠⵠⵠⲆᐃ;
    ᐃΔ[877][2] = ⵠᐃ.ⲆⵠⲆᐃᐃⵠᐃ;
    ᐃΔ[879] = ᐃΔ[877];
    ᐃΔ[878] = ᐃΔ[877];
    ᐃΔ[933] = ᐃΔ[932];
    ᐃΔ[934] = ᐃΔ[932];
    ᐃΔ[932] = [];
    ᐃΔ[932][0] = ⵠᐃ.ⲆΔᐃⲆᐃⵠⵠ;
    ᐃΔ[932][1] = ⵠᐃ.ⵠᐃⲆⲆⲆᐃΔ;
    ᐃΔ[932][2] = ⵠᐃ.ΔΔΔⲆⲆᐃᐃ;
    ᐃΔ[933] = ᐃΔ[932];
    ᐃΔ[934] = ᐃΔ[932];
    ᐃΔ[943] = [];
    ᐃΔ[943][0] = ⵠᐃ.ᐃᐃⲆⵠⵠΔᐃ;
    ᐃΔ[943][1] = ⵠᐃ.ⲆᐃⲆⵠᐃᐃᐃ;
    ᐃΔ[943][2] = ⵠᐃ.ⲆᐃⲆᐃⵠᐃᐃ;
    ᐃΔ[944] = ᐃΔ[943];
    ᐃΔ[945] = ᐃΔ[943];
    ᐃΔ[921] = [];
    ᐃΔ[921][0] = ⵠᐃ.ⲆΔᐃⲆⲆᐃⵠ;
    ᐃΔ[921][1] = ⵠᐃ.ⲆⵠᐃⲆΔⵠⵠ;
    ᐃΔ[921][2] = ⵠᐃ.ΔΔᐃᐃᐃᐃᐃ;
    ᐃΔ[922] = ᐃΔ[921];
    ᐃΔ[923] = ᐃΔ[921];
    ᐃΔ[925] = [];
    ᐃΔ[925][0] = ⵠᐃ.ᐃΔⵠⲆⲆⵠⵠ;
    ᐃΔ[925][1] = ⵠᐃ.ΔⲆⲆᐃΔⵠⲆ;
    ᐃΔ[925][2] = ⵠᐃ.ᐃΔᐃⵠΔᐃⵠ;
    ᐃΔ[926] = ᐃΔ[925];
    ᐃΔ[927] = ᐃΔ[925];
    ᐃΔ[929] = [];
    ᐃΔ[929][0] = ⵠᐃ.ΔᐃᐃΔⲆᐃᐃ;
    ᐃΔ[929][1] = ⵠᐃ.ΔᐃΔⲆⵠΔⲆ;
    ᐃΔ[929][2] = ⵠᐃ.ᐃⲆᐃΔⲆⵠΔ;
    ᐃΔ[930] = ᐃΔ[929];
    ᐃΔ[931] = ᐃΔ[929];
    ᐃΔ[946] = [];
    ᐃΔ[946][0] = ⵠᐃ.ᐃⲆⲆΔᐃⲆΔ;
    ᐃΔ[946][1] = ⵠᐃ.ⵠΔΔⲆᐃⲆⵠ;
    ᐃΔ[946][2] = ⵠᐃ.ΔⲆⵠⵠᐃⲆⵠ;
    ᐃΔ[947] = ᐃΔ[946];
    ᐃΔ[948] = ᐃΔ[946];
    ᐃΔ[735] = [];
    ᐃΔ[735][0] = ⵠᐃ.ⵠⲆΔᐃⲆⵠᐃ;
    ᐃΔ[735][1] = ⵠᐃ.ΔΔᐃⲆⲆⵠΔ;
    ᐃΔ[735][2] = ⵠᐃ.ⵠΔⲆᐃⵠΔⲆ;
    ᐃΔ[737] = ᐃΔ[735];
    ᐃΔ[736] = ᐃΔ[735];
    ᐃΔ[1164] = [];
    ᐃΔ[1164][0] = ⵠᐃ.ⲆΔⲆⲆⲆⵠΔ;
    ᐃΔ[1164][1] = ⵠᐃ.ⲆⲆᐃᐃⵠᐃΔ;
    ᐃΔ[1164][2] = ⵠᐃ.ΔΔᐃᐃⵠⵠⵠ;
    ᐃΔ[Cs.ΔⲆⵠᐃⵠⵠⲆᐃⵠ] = ᐃΔ[1164];
    ᐃΔ[1165] = ᐃΔ[1164];
    ᐃΔ[738] = [];
    ᐃΔ[738][0] = ⵠᐃ.ᐃⲆⲆΔᐃⲆⲆ;
    ᐃΔ[738][1] = ⵠᐃ.ᐃⲆᐃⵠΔⵠΔ;
    ᐃΔ[738][2] = ⵠᐃ.ⲆᐃⵠᐃᐃᐃⲆ;
    ᐃΔ[740] = ᐃΔ[738];
    ᐃΔ[739] = ᐃΔ[738];
    ᐃΔ[741] = [];
    ᐃΔ[741][0] = ⵠᐃ.ⲆⲆⲆⲆⵠᐃⲆ;
    ᐃΔ[741][1] = ⵠᐃ.ᐃΔᐃⵠⲆΔΔ;
    ᐃΔ[741][2] = ⵠᐃ.ⲆΔᐃᐃΔⵠⵠ;
    ᐃΔ[743] = ᐃΔ[741];
    ᐃΔ[742] = ᐃΔ[741];
    ᐃΔ[938] = [];
    ᐃΔ[938][0] = ⵠᐃ.ⵠΔⲆⵠᐃᐃᐃ;
    ᐃΔ[938][1] = ⵠᐃ.ⵠⵠΔⲆⲆⲆⵠ;
    ᐃΔ[938][2] = ⵠᐃ.ᐃⲆΔΔⵠΔᐃ;
    ᐃΔ[939] = ᐃΔ[938];
    ᐃΔ[936] = [];
    ᐃΔ[936][0] = ⵠᐃ.ⲆΔⵠⲆᐃᐃⵠ;
    ᐃΔ[936][1] = ⵠᐃ.ΔⲆᐃⵠΔⵠΔ;
    ᐃΔ[936][2] = ⵠᐃ.ΔΔⲆⲆᐃΔΔ;
    ᐃΔ[937] = ᐃΔ[936];
    ᐃΔ[617] = ᐃΔ[616];
    ᐃΔ[701] = ᐃΔ[699];
    ᐃΔ[703] = ᐃΔ[702];
    ᐃΔ[707] = ᐃΔ[705];
    ᐃΔ[348] = ᐃΔ[311];
    ᐃΔ[633] = ᐃΔ[631];
    ᐃΔ[645] = ᐃΔ[644];
    ᐃΔ[640] = ᐃΔ[639];
    ᐃΔ[273] = ᐃΔ[309];
    ᐃΔ[590] = ᐃΔ[252];
    ᐃΔ[752] = ᐃΔ[751];
    ᐃΔ[591] = ᐃΔ[253];
    ᐃΔ[754] = ᐃΔ[753];
    ᐃΔ[276] = ᐃΔ[328];
    ᐃΔ[863] = ᐃΔ[865];
    ᐃΔ[862] = ᐃΔ[860];
    ᐃΔ[831] = ᐃΔ[829];
    ᐃΔ[340] = ᐃΔ[261];
    ᐃΔ[596] = ᐃΔ[594];
    ᐃΔ[345] = ᐃΔ[292];
    ᐃΔ[346] = ᐃΔ[293];
    ᐃΔ[457] = ᐃΔ[455];
    ᐃΔ[274] = ᐃΔ[313];
    ᐃΔ[341] = ᐃΔ[312];
    ᐃΔ[272] = ᐃΔ[258];
    ᐃΔ[344] = ᐃΔ[296];
    ᐃΔ[459] = ᐃΔ[458];
    ᐃΔ[342] = ᐃΔ[315];
    ᐃΔ[270] = ᐃΔ[297];
    ᐃΔ[271] = ᐃΔ[298];
    ᐃΔ[343] = ᐃΔ[316];
    ᐃΔ[269] = ᐃΔ[277];
    ᐃΔ[358] = ᐃΔ[310];
    ᐃΔ[354] = ᐃΔ[329];
    ᐃΔ[356] = ᐃΔ[331];
    ᐃΔ[355] = ᐃΔ[330];
    ᐃΔ[494] = ᐃΔ[492];
    ᐃΔ[349] = ᐃΔ[317];
    ᐃΔ[350] = ᐃΔ[319];
    ᐃΔ[275] = ᐃΔ[300];
    ᐃΔ[351] = ᐃΔ[323];
    ᐃΔ[353] = ᐃΔ[305];
    ᐃΔ[514] = ᐃΔ[513];
    ᐃΔ[352] = ᐃΔ[303];
    ᐃΔ[520] = ᐃΔ[518];
    ᐃΔ[534] = ᐃΔ[532];
    ᐃΔ[531] = ᐃΔ[529];
    ᐃΔ[522] = ᐃΔ[521];
    ᐃΔ[524] = ᐃΔ[523];
    ᐃΔ[565] = ᐃΔ[563];
    ᐃΔ[554] = ᐃΔ[553];
    ᐃΔ[357] = ᐃΔ[335];
    ᐃΔ[359] = ᐃΔ[337];
    ᐃΔ[339] = jr(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      ud(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      md(e, c[0], c[1], 4);
      e.save();
      ud(e, a * 30, a * 115, a * 60, a * 5, a * 15);
      e.restore();
      md(e, c[2], c[3], 4);
      e.save();
      ud(e, a * 50, a * 117, a * 20, a * 10, a * 15);
      e.restore();
      md(e, c[2]);
      return d;
    }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ᐃΔ[366] = bu(0.5, [{
      f: zp,
      x: 0,
      y: 2,
      a: 1,
      r: 0,
      c: ["#ffffff"]
    }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
    ᐃΔ[382] = ᐃΔ[361];
    ᐃΔ[383] = ᐃΔ[362];
    ᐃΔ[384] = ᐃΔ[364];
    ᐃΔ[497] = ᐃΔ[495];
    ᐃΔ[385] = ᐃΔ[392];
    ᐃΔ[774] = ᐃΔ[178];
    ᐃΔ[775] = ᐃΔ[179];
    ᐃΔ[386] = ᐃΔ[368];
    ᐃΔ[625] = ᐃΔ[624];
    ᐃΔ[394] = ᐃΔ[393];
    ᐃΔ[1163] = ᐃΔ[1162];
    ᐃΔ[506] = ᐃΔ[505];
    ᐃΔ[387] = ᐃΔ[369];
    ᐃΔ[504] = ᐃΔ[502];
    ᐃΔ[388] = ᐃΔ[372];
    ᐃΔ[389] = ᐃΔ[375];
    ᐃΔ[390] = ᐃΔ[378];
    ᐃΔ[501] = ᐃΔ[499];
    ᐃΔ[391] = ᐃΔ[381];
    ᐃΔ[403] = ᐃΔ[401];
    ᐃΔ[397] = ᐃΔ[395];
    ᐃΔ[400] = ᐃΔ[398];
    ᐃΔ[406] = ᐃΔ[404];
    ᐃΔ[474] = ᐃΔ[472];
    ᐃΔ[875] = ᐃΔ[874];
    ᐃΔ[552] = ᐃΔ[550];
    ᐃΔ[710] = ᐃΔ[709];
    ᐃΔ[479] = ᐃΔ[477];
    ᐃΔ[482] = ᐃΔ[480];
    ᐃΔ[485] = ᐃΔ[483];
    ᐃΔ[488] = ᐃΔ[486];
    ᐃΔ[410] = ᐃΔ[408];
    ᐃΔ[719] = ᐃΔ[717];
    ᐃΔ[422] = ᐃΔ[420];
    ᐃΔ[431] = ᐃΔ[429];
    ᐃΔ[434] = ᐃΔ[432];
    ᐃΔ[437] = ᐃΔ[435];
    ᐃΔ[543] = ᐃΔ[541];
    ᐃΔ[733] = ᐃΔ[732];
    ᐃΔ[440] = ᐃΔ[438];
    ᐃΔ[443] = ᐃΔ[441];
    ᐃΔ[446] = ᐃΔ[418];
    ᐃΔ[606] = ᐃΔ[605];
    ᐃΔ[844] = ᐃΔ[842];
    ᐃΔ[683] = ᐃΔ[685];
    ᐃΔ[610] = ᐃΔ[609];
    ᐃΔ[689] = ᐃΔ[143];
    ᐃΔ[686] = ᐃΔ[142];
    ᐃΔ[682] = ᐃΔ[140];
    ᐃΔ[615] = ᐃΔ[613];
    ᐃΔ[614] = ᐃΔ[612];
    ᐃΔ[628] = ᐃΔ[626];
    ᐃΔ[630] = ᐃΔ[629];
    ᐃΔ[636] = ᐃΔ[634];
    ᐃΔ[868] = ᐃΔ[200];
    ᐃΔ[867] = ᐃΔ[866];
    ᐃΔ[648] = ᐃΔ[646];
    ᐃΔ[651] = ᐃΔ[649];
    ᐃΔ[653] = ᐃΔ[652];
    ᐃΔ[661] = ᐃΔ[659];
    ᐃΔ[898] = ᐃΔ[196];
    ᐃΔ[663] = ᐃΔ[662];
    ᐃΔ[665] = ᐃΔ[664];
    ᐃΔ[675] = ᐃΔ[674];
    ᐃΔ[731] = ᐃΔ[145];
    ᐃΔ[757] = ᐃΔ[756];
    ᐃΔ[759] = ᐃΔ[176];
    ᐃΔ[761] = ᐃΔ[760];
    ᐃΔ[763] = ᐃΔ[177];
    ᐃΔ[765] = ᐃΔ[764];
    ᐃΔ[766] = ᐃΔ[175];
    ᐃΔ[769] = ᐃΔ[767];
    ᐃΔ[773] = ᐃΔ[771];
    ᐃΔ[778] = ᐃΔ[776];
    ᐃΔ[781] = ᐃΔ[779];
    ᐃΔ[787] = ᐃΔ[181];
    ᐃΔ[786] = ᐃΔ[180];
    ᐃΔ[790] = ᐃΔ[789];
    ᐃΔ[801] = ᐃΔ[800];
    ᐃΔ[810] = ᐃΔ[808];
    ᐃΔ[836] = ᐃΔ[834];
    ᐃΔ[847] = ᐃΔ[845];
    ᐃΔ[828] = ᐃΔ[826];
  }
  function Rm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 144;
    d.height = a * 280;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    md(e, c[1], c[2], a * 6);
    return d;
  }
  function jm() {
    new Date().getTime();
    function b(a) {
      var b = 0;
      var c = 0;
      for (var d = 0; d < a.length; d++) {
        var e = a.charAt(d);
        if (e !== "_" && d !== 5) {
          if (e === "1") {
            b += Math.pow(2, c);
          }
          c++;
        }
      }
      return b;
    }
    ΔⲆΔⵠⲆᐃΔΔⲆ();
    ᐃΔ[1026] = [ⵠᐃ.ΔᐃⲆΔΔⵠᐃ, ⵠᐃ.Δᐃⵠᐃⵠᐃⵠ];
    ᐃΔ[1025] = [];
    ᐃΔ[1025][Cs.ⵠΔⵠ] = [];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("000_010_000")] = [ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⲆⵠΔΔᐃ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("000_010_010")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("000_010_000")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("000_011_000")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("000_010_000")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("000_011_010")] = [ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⵠΔΔⲆⵠⵠⵠ, ⵠᐃ.ⵠΔᐃⵠᐃᐃᐃ, ⵠᐃ.ΔⵠᐃⵠⲆⵠΔ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("000_011_011")] = [ⵠᐃ.ⲆⵠᐃⲆⲆᐃⵠ, ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⵠΔΔⲆⵠⵠⵠ, ⵠᐃ.ⵠΔᐃⵠᐃᐃᐃ, ⵠᐃ.ΔⵠᐃⵠⲆⵠΔ, ⵠᐃ.ΔⲆⵠΔΔ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("000_110_000")] = [ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ⲆⵠΔΔᐃ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("000_110_010")] = [ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ΔᐃᐃΔⵠⵠΔ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("000_110_110")] = [ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ⵠⵠᐃⲆⵠⵠⲆ, ⵠᐃ.ΔⵠΔΔΔⵠⲆ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ΔᐃᐃΔⵠⵠΔ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("000_111_000")] = [ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ᐃΔⲆᐃᐃΔⵠ, ⵠᐃ.ΔΔⲆⲆⵠᐃⲆ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("000_111_111")] = [ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ΔⵠΔΔΔⵠⲆ, ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ⲆⵠᐃⲆⲆᐃⵠ, ⵠᐃ.ᐃᐃⵠᐃⲆⵠⵠ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_010_000")] = [ⵠᐃ.ⲆⵠΔΔᐃ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_010_010")] = [ⵠᐃ.ΔΔΔⵠⲆⵠΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_011_000")] = [ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⲆᐃΔⲆⲆ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_110_000")] = [ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_110_110")] = [ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ΔⵠΔΔΔⵠⲆ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ᐃᐃⵠᐃⲆⵠⵠ, ⵠᐃ.ΔⵠⲆⲆⲆᐃΔ, ⵠᐃ.ΔΔΔⵠⲆⵠΔ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ᐃΔⲆᐃᐃΔⵠ, ⵠᐃ.ΔΔⲆⲆⵠᐃⲆ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⵠΔΔⲆⵠⵠⵠ, ⵠᐃ.ⵠΔᐃⵠᐃᐃᐃ, ⵠᐃ.ΔⵠᐃⵠⲆⵠΔ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_011_010")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_011_011")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("000_111_011")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_110_010")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_111_000")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_111_010")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_111_011")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_111_110")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_111_111")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("000_111_110")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("000_111_010")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("011_011_000")] = [ⵠᐃ.ΔΔⵠⵠΔⵠⲆ, ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⲆᐃΔⲆⲆ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("011_011_010")] = [ⵠᐃ.ΔΔⵠⵠΔⵠⲆ, ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ᐃΔⲆᐃᐃΔⵠ, ⵠᐃ.ΔΔⲆⲆⵠᐃⲆ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("011_011_011")] = [ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ⲆⵠᐃⲆⲆᐃⵠ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔΔⵠⵠΔⵠⲆ, ⵠᐃ.ΔⵠⲆⲆⲆᐃΔ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("011_111_000")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("011_011_010")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("011_111_010")] = [ⵠᐃ.ΔΔⵠⵠΔⵠⲆ, ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ᐃᐃⵠᐃⲆⵠⵠ, ⵠᐃ.ΔⵠⲆⲆⲆᐃΔ, ⵠᐃ.ΔΔΔⵠⲆⵠΔ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ᐃΔⲆᐃᐃΔⵠ, ⵠᐃ.ΔΔⲆⲆⵠᐃⲆ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⵠΔΔⲆⵠⵠⵠ, ⵠᐃ.ⵠΔᐃⵠᐃᐃᐃ, ⵠᐃ.ΔⵠᐃⵠⲆⵠΔ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("011_111_011")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("011_111_010")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("011_111_110")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("011_111_010")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("011_111_111")] = [ⵠᐃ.ΔΔⵠⵠΔⵠⲆ, ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ⲆⵠᐃⲆⲆᐃⵠ, ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ΔⵠΔΔΔⵠⲆ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ᐃᐃⵠᐃⲆⵠⵠ, ⵠᐃ.ΔⵠⲆⲆⲆᐃΔ, ⵠᐃ.ΔΔΔⵠⲆⵠΔ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ᐃΔⲆᐃᐃΔⵠ, ⵠᐃ.ΔΔⲆⲆⵠᐃⲆ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⵠΔΔⲆⵠⵠⵠ, ⵠᐃ.ⵠΔᐃⵠᐃᐃᐃ, ⵠᐃ.ΔⵠᐃⵠⲆⵠΔ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("110_110_000")] = [ⵠᐃ.ⵠΔⲆⵠⵠΔⵠ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ᐃᐃⵠΔᐃⲆΔ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("110_110_010")] = [ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ⵠΔⲆⵠⵠΔⵠ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ΔΔΔⵠⲆⵠΔ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("110_110_110")] = [ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ΔⵠΔΔΔⵠⲆ, ⵠᐃ.ⵠΔⲆⵠⵠΔⵠ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ΔΔΔⵠⲆⵠΔ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("110_111_000")] = [ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ⵠΔⲆⵠⵠΔⵠ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ᐃᐃⵠΔᐃⲆΔ, ⵠᐃ.ᐃⵠΔΔᐃᐃᐃ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ᐃΔⲆᐃᐃΔⵠ, ⵠᐃ.ΔΔⲆⲆⵠᐃⲆ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("110_111_110")] = [ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ΔⵠΔΔΔⵠⲆ, ⵠᐃ.ⵠΔⲆⵠⵠΔⵠ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ᐃᐃⵠᐃⲆⵠⵠ, ⵠᐃ.ᐃⵠΔΔᐃᐃᐃ, ⵠᐃ.ΔⵠⲆⲆⲆᐃΔ, ⵠᐃ.ΔΔΔⵠⲆⵠΔ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ᐃΔⲆᐃᐃΔⵠ, ⵠᐃ.ΔΔⲆⲆⵠᐃⲆ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⵠΔΔⲆⵠⵠⵠ, ⵠᐃ.ⵠΔᐃⵠᐃᐃᐃ, ⵠᐃ.ΔⵠᐃⵠⲆⵠΔ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("110_111_111")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("110_111_110")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("110_111_011")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("110_111_110")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("110_111_010")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("110_111_110")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("111_111_110")] = [ⵠᐃ.ⲆⲆᐃᐃᐃ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ΔⵠᐃⵠⲆⵠΔ, ⵠᐃ.ⵠΔᐃⵠᐃᐃᐃ, ⵠᐃ.ⵠΔΔⲆⵠⵠⵠ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ΔΔⲆⲆⵠᐃⲆ, ⵠᐃ.ᐃΔⲆᐃᐃΔⵠ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ΔΔΔⵠⲆⵠΔ, ⵠᐃ.ΔⵠⲆⲆⲆᐃΔ, ⵠᐃ.ᐃⵠΔΔᐃᐃᐃ, ⵠᐃ.ᐃᐃⵠᐃⲆⵠⵠ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ⵠΔⲆⵠⵠΔⵠ, ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔΔⵠⵠΔⵠⲆ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("111_111_011")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("111_111_110")];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("111_111_000")] = [ⵠᐃ.ᐃᐃⵠΔᐃⲆΔ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ⵠΔⲆⵠⵠΔⵠ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔΔⵠⵠΔⵠⲆ, ⵠᐃ.ᐃⵠΔΔᐃᐃᐃ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("111_111_111")] = [ⵠᐃ.ΔΔⵠⵠΔⵠⲆ, ⵠᐃ.ⲆΔⵠᐃᐃ, ⵠᐃ.ΔⵠᐃᐃΔ, ⵠᐃ.ⲆⵠᐃⲆⲆᐃⵠ, ⵠᐃ.ᐃⵠᐃⵠΔ, ⵠᐃ.ΔᐃⲆᐃΔ, ⵠᐃ.ΔΔᐃΔⲆ, ⵠᐃ.ΔⵠΔΔΔⵠⲆ, ⵠᐃ.ⵠΔⲆⵠⵠΔⵠ, ⵠᐃ.ΔⵠᐃΔⲆ, ⵠᐃ.ᐃᐃⵠᐃⲆⵠⵠ, ⵠᐃ.ΔⵠⲆⲆⲆᐃΔ, ⵠᐃ.ΔΔΔⵠⲆⵠΔ, ⵠᐃ.ⲆⵠᐃΔΔ, ⵠᐃ.ᐃΔⲆᐃᐃΔⵠ, ⵠᐃ.ΔΔⲆⲆⵠᐃⲆ, ⵠᐃ.ⲆⵠΔΔᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠ, ⵠᐃ.ⵠΔΔⲆⵠⵠⵠ, ⵠᐃ.ⵠΔᐃⵠᐃᐃᐃ, ⵠᐃ.ΔⵠᐃⵠⲆⵠΔ, ⵠᐃ.ΔⲆⵠΔΔ, ⵠᐃ.ⲆᐃΔⲆⲆ, ⵠᐃ.ⲆⲆᐃᐃᐃ];
    ᐃΔ[1025][Cs.ⵠΔⵠ][b("111_111_010")] = ᐃΔ[1025][Cs.ⵠΔⵠ][b("111_111_110")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("000_010_000")] = [ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ⵠᐃΔΔⵠ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("000_010_010")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("000_010_000")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("000_011_000")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("000_010_000")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("000_011_010")] = [ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔᐃᐃⲆⵠΔΔ, ⵠᐃ.ⵠᐃΔΔΔⵠⲆ, ⵠᐃ.ⵠⵠᐃᐃᐃⵠᐃ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("000_011_011")] = [ⵠᐃ.ᐃᐃΔΔⵠⵠⵠ, ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔᐃᐃⲆⵠΔΔ, ⵠᐃ.ⵠᐃΔΔΔⵠⲆ, ⵠᐃ.ⵠⵠᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃⵠᐃᐃⵠ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("000_110_000")] = [ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⵠᐃΔΔⵠ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("000_110_010")] = [ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⲆⲆⲆⵠⵠΔ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("000_110_110")] = [ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ΔⲆⵠᐃᐃⵠⲆ, ⵠᐃ.ⲆⲆⵠⵠⵠΔⵠ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⲆⲆⲆⵠⵠΔ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("000_111_000")] = [ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠΔᐃΔΔⵠⲆ, ⵠᐃ.ⲆΔΔΔΔⵠⵠ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("000_111_111")] = [ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆⲆⵠⵠⵠΔⵠ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ᐃᐃΔΔⵠⵠⵠ, ⵠᐃ.ⲆΔΔⵠᐃᐃⲆ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_010_000")] = [ⵠᐃ.ⵠᐃΔΔⵠ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_010_010")] = [ⵠᐃ.ⵠᐃᐃΔΔᐃᐃ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_011_000")] = [ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔⲆᐃᐃΔ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_110_000")] = [ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⵠΔΔⵠ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_110_110")] = [ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⲆⲆⵠⵠⵠΔⵠ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆΔΔⵠᐃᐃⲆ, ⵠᐃ.ᐃⵠⵠⲆⲆΔΔ, ⵠᐃ.ⵠᐃᐃΔΔᐃᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠΔᐃΔΔⵠⲆ, ⵠᐃ.ⲆΔΔΔΔⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔᐃᐃⲆⵠΔΔ, ⵠᐃ.ⵠᐃΔΔΔⵠⲆ, ⵠᐃ.ⵠⵠᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⵠΔΔⵠ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_011_010")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_011_011")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("000_111_011")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_110_010")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_111_000")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_111_010")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_111_011")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_111_110")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_111_111")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("000_111_110")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("000_111_010")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("010_110_110")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("011_011_000")] = [ⵠᐃ.ⲆⵠⲆⵠⵠⲆⵠ, ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔⲆᐃᐃΔ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("011_011_010")] = [ⵠᐃ.ⲆⵠⲆⵠⵠⲆⵠ, ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠΔᐃΔΔⵠⲆ, ⵠᐃ.ⲆΔΔΔΔⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⵠΔΔⵠ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("011_011_011")] = [ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ᐃᐃΔΔⵠⵠⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ⲆⵠⲆⵠⵠⲆⵠ, ⵠᐃ.ᐃⵠⵠⲆⲆΔΔ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("011_111_000")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("011_011_010")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("011_111_010")] = [ⵠᐃ.ⲆⵠⲆⵠⵠⲆⵠ, ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆΔΔⵠᐃᐃⲆ, ⵠᐃ.ᐃⵠⵠⲆⲆΔΔ, ⵠᐃ.ⵠᐃᐃΔΔᐃᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠΔᐃΔΔⵠⲆ, ⵠᐃ.ⲆΔΔΔΔⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔᐃᐃⲆⵠΔΔ, ⵠᐃ.ⵠᐃΔΔΔⵠⲆ, ⵠᐃ.ⵠⵠᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⵠΔΔⵠ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("011_111_011")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("011_111_010")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("011_111_110")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("011_111_010")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("011_111_111")] = [ⵠᐃ.ⲆⵠⲆⵠⵠⲆⵠ, ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ᐃᐃΔΔⵠⵠⵠ, ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⲆⲆⵠⵠⵠΔⵠ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆΔΔⵠᐃᐃⲆ, ⵠᐃ.ᐃⵠⵠⲆⲆΔΔ, ⵠᐃ.ⵠᐃᐃΔΔᐃᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠΔᐃΔΔⵠⲆ, ⵠᐃ.ⲆΔΔΔΔⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔᐃᐃⲆⵠΔΔ, ⵠᐃ.ⵠᐃΔΔΔⵠⲆ, ⵠᐃ.ⵠⵠᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⵠΔΔⵠ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("110_110_000")] = [ⵠᐃ.ⲆⵠᐃⲆΔΔⲆ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.Δⵠᐃᐃⵠⵠⵠ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠΔΔⵠ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("110_110_010")] = [ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⲆⵠᐃⲆΔΔⲆ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⵠᐃᐃΔΔᐃᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ΔⵠΔΔⵠ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("110_110_110")] = [ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⲆⲆⵠⵠⵠΔⵠ, ⵠᐃ.ⲆⵠᐃⲆΔΔⲆ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⵠᐃᐃΔΔᐃᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ΔⵠΔΔⵠ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("110_111_000")] = [ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ⲆⵠᐃⲆΔΔⲆ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.Δⵠᐃᐃⵠⵠⵠ, ⵠᐃ.ΔΔΔⲆᐃⲆᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠΔᐃΔΔⵠⲆ, ⵠᐃ.ⲆΔΔΔΔⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⵠΔΔⵠ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("110_111_110")] = [ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⲆⲆⵠⵠⵠΔⵠ, ⵠᐃ.ⲆⵠᐃⲆΔΔⲆ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆΔΔⵠᐃᐃⲆ, ⵠᐃ.ΔΔΔⲆᐃⲆᐃ, ⵠᐃ.ᐃⵠⵠⲆⲆΔΔ, ⵠᐃ.ⵠᐃᐃΔΔᐃᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠΔᐃΔΔⵠⲆ, ⵠᐃ.ⲆΔΔΔΔⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔᐃᐃⲆⵠΔΔ, ⵠᐃ.ⵠᐃΔΔΔⵠⲆ, ⵠᐃ.ⵠⵠᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⵠΔΔⵠ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("110_111_111")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("110_111_110")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("110_111_011")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("110_111_110")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("110_111_010")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("110_111_110")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("111_111_110")] = [ⵠᐃ.ΔⵠΔΔⵠ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ⵠⵠᐃᐃᐃⵠᐃ, ⵠᐃ.ⵠᐃΔΔΔⵠⲆ, ⵠᐃ.ΔᐃᐃⲆⵠΔΔ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ⲆΔΔΔΔⵠⵠ, ⵠᐃ.ⵠΔᐃΔΔⵠⲆ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠᐃᐃΔΔᐃᐃ, ⵠᐃ.ᐃⵠⵠⲆⲆΔΔ, ⵠᐃ.ΔΔΔⲆᐃⲆᐃ, ⵠᐃ.ⲆΔΔⵠᐃᐃⲆ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆⵠᐃⲆΔΔⲆ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ⲆⵠⲆⵠⵠⲆⵠ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("111_111_011")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("111_111_110")];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("111_111_000")] = [ⵠᐃ.Δⵠᐃᐃⵠⵠⵠ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆⵠᐃⲆΔΔⲆ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ⲆⵠⲆⵠⵠⲆⵠ, ⵠᐃ.ΔΔΔⲆᐃⲆᐃ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("111_111_111")] = [ⵠᐃ.ⲆⵠⲆⵠⵠⲆⵠ, ⵠᐃ.ⲆΔΔᐃⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠ, ⵠᐃ.ᐃᐃΔΔⵠⵠⵠ, ⵠᐃ.ΔⵠⲆΔⵠ, ⵠᐃ.ⵠΔⲆΔⵠ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⲆⲆⵠⵠⵠΔⵠ, ⵠᐃ.ⲆⵠᐃⲆΔΔⲆ, ⵠᐃ.ᐃⵠᐃΔᐃ, ⵠᐃ.ⲆΔΔⵠᐃᐃⲆ, ⵠᐃ.ᐃⵠⵠⲆⲆΔΔ, ⵠᐃ.ⵠᐃᐃΔΔᐃᐃ, ⵠᐃ.ⲆᐃⲆⵠⵠ, ⵠᐃ.ⵠΔᐃΔΔⵠⲆ, ⵠᐃ.ⲆΔΔΔΔⵠⵠ, ⵠᐃ.ⵠᐃΔΔⵠ, ⵠᐃ.ΔⵠⵠΔⲆ, ⵠᐃ.ΔᐃᐃⲆⵠΔΔ, ⵠᐃ.ⵠᐃΔΔΔⵠⲆ, ⵠᐃ.ⵠⵠᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃⵠᐃᐃⵠ, ⵠᐃ.ΔⲆᐃᐃΔ, ⵠᐃ.ΔⵠΔΔⵠ];
    ᐃΔ[1025][Cs.ⲆⲆⵠ][b("111_111_010")] = ᐃΔ[1025][Cs.ⲆⲆⵠ][b("111_111_110")];
    ᐃΔ[1024] = [];
    ᐃΔ[1024][Cs.ⵠΔⵠ] = [];
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("000_010_000")] = ⵠᐃ.ᐃⲆᐃⵠⲆΔᐃ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("000_010_010")] = ⵠᐃ.ΔⲆⲆⲆᐃᐃⲆ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("000_011_000")] = ⵠᐃ.ⲆᐃⵠΔᐃⵠⵠ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("000_011_010")] = ⵠᐃ.ⵠᐃΔⲆⵠⵠᐃ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("000_011_011")] = ⵠᐃ.ᐃⵠⵠᐃⲆⲆᐃ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("000_110_000")] = ⵠᐃ.ⵠⲆΔⲆΔᐃⲆ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("000_110_010")] = ⵠᐃ.ΔⵠⵠᐃΔⲆΔ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("000_110_110")] = ⵠᐃ.ᐃΔΔⲆΔΔᐃ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("000_111_000")] = ⵠᐃ.ⵠᐃⵠⲆᐃΔⵠ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("000_111_010")] = ⵠᐃ.ⲆΔⵠᐃΔᐃⵠ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("000_111_011")] = ⵠᐃ.ᐃⵠⵠⲆⵠᐃΔ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("000_111_110")] = ⵠᐃ.ⲆⲆⲆΔⵠᐃⵠ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("000_111_111")] = ⵠᐃ.ⵠᐃⵠᐃΔⵠΔ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("010_010_000")] = ⵠᐃ.ΔⵠᐃΔΔⲆᐃ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("010_010_010")] = ⵠᐃ.ΔΔᐃⲆᐃΔⵠ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("010_011_000")] = ⵠᐃ.ᐃΔⲆⲆⵠΔⲆ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("010_011_010")] = ⵠᐃ.ΔⵠⲆⵠᐃⲆⵠ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("010_011_011")] = ⵠᐃ.ⵠᐃⵠᐃⵠᐃΔ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("010_110_000")] = ⵠᐃ.ⲆⵠΔⲆᐃⲆᐃ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("010_110_010")] = ⵠᐃ.ᐃΔⲆΔΔΔⵠ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("010_110_110")] = ⵠᐃ.ᐃⵠⲆⵠᐃᐃᐃ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("010_111_000")] = ⵠᐃ.ⲆΔᐃᐃΔⵠᐃ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("010_111_010")] = ⵠᐃ.ᐃⵠⲆⲆᐃᐃᐃ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("010_111_011")] = ⵠᐃ.ΔⲆᐃⲆΔΔΔ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("010_111_110")] = ⵠᐃ.ᐃⲆᐃΔⵠⵠⲆ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("010_111_111")] = ⵠᐃ.ΔΔᐃⵠΔⲆΔ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("011_011_000")] = ⵠᐃ.ΔⵠⲆΔⲆⲆⲆ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("011_011_010")] = ⵠᐃ.ⲆⵠⵠΔⵠΔⲆ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("011_011_011")] = ⵠᐃ.ᐃᐃⵠⲆΔⲆⲆ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("011_111_000")] = ⵠᐃ.ⲆᐃⵠⵠⵠΔⵠ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("011_111_010")] = ⵠᐃ.ⵠΔⲆᐃⵠⵠⲆ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("011_111_011")] = ⵠᐃ.ⲆΔⲆⲆᐃⲆΔ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("011_111_110")] = ⵠᐃ.ᐃΔⲆΔᐃΔᐃ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("011_111_111")] = ⵠᐃ.ⵠⲆⵠⲆⵠⵠⲆ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("110_110_000")] = ⵠᐃ.ⲆᐃⵠΔΔᐃⵠ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("110_110_010")] = ⵠᐃ.ᐃⵠΔⵠⵠΔΔ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("110_110_110")] = ⵠᐃ.ᐃᐃⵠⲆⲆΔᐃ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("110_111_000")] = ⵠᐃ.ⲆΔᐃⵠⵠᐃᐃ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("110_111_010")] = ⵠᐃ.ᐃⵠΔΔΔΔⵠ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("110_111_011")] = ⵠᐃ.ⵠᐃⲆᐃΔΔᐃ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("110_111_110")] = ⵠᐃ.ⲆᐃⵠΔⵠⲆΔ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("110_111_111")] = ⵠᐃ.ⲆΔⲆΔⲆⲆⵠ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("111_111_011")] = ⵠᐃ.ᐃΔΔΔΔΔⲆ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("111_111_110")] = ⵠᐃ.ⵠᐃⵠᐃΔⲆⲆ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("111_111_011")] = ⵠᐃ.ᐃΔΔΔΔΔⲆ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("111_111_000")] = ⵠᐃ.ᐃⵠΔᐃᐃⲆⵠ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("111_111_111")] = ⵠᐃ.ⲆΔⵠⲆΔᐃᐃ;
    ᐃΔ[1024][Cs.ⵠΔⵠ][b("111_111_010")] = ⵠᐃ.ΔᐃⲆⵠⵠⲆⵠ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("000_010_000")] = ⵠᐃ.ⵠᐃⲆᐃⲆⲆⵠ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("000_010_010")] = ⵠᐃ.ΔⵠΔⵠΔⵠⵠ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("000_011_000")] = ⵠᐃ.ⵠᐃⲆⲆⲆⲆΔ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("000_011_010")] = ⵠᐃ.ⵠᐃᐃⲆⵠᐃᐃ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("000_011_011")] = ⵠᐃ.ᐃᐃⵠΔⲆᐃⲆ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("000_110_000")] = ⵠᐃ.ΔΔΔᐃⵠᐃⵠ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("000_110_010")] = ⵠᐃ.ⵠΔⲆⲆΔΔⲆ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("000_110_110")] = ⵠᐃ.ⲆΔᐃⲆΔᐃⲆ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("000_111_000")] = ⵠᐃ.ⵠᐃΔⵠΔΔⲆ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("000_111_010")] = ⵠᐃ.ᐃΔⲆⵠᐃᐃⲆ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("000_111_011")] = ⵠᐃ.ⲆⵠⵠⲆΔⵠⵠ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("000_111_110")] = ⵠᐃ.ⵠΔᐃⲆᐃⵠᐃ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("000_111_111")] = ⵠᐃ.ᐃⵠΔᐃⲆᐃⵠ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("010_010_000")] = ⵠᐃ.ⲆⵠⲆⲆΔΔΔ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("010_010_010")] = ⵠᐃ.ᐃⵠΔᐃⵠⵠⲆ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("010_011_000")] = ⵠᐃ.ⲆΔΔⵠΔⲆⵠ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("010_011_010")] = ⵠᐃ.ⵠⵠⲆΔᐃⵠⵠ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("010_011_011")] = ⵠᐃ.ΔΔΔΔᐃᐃᐃ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("010_110_000")] = ⵠᐃ.ⵠᐃΔᐃΔΔⲆ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("010_110_010")] = ⵠᐃ.ᐃᐃⲆΔⵠⲆⲆ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("010_110_110")] = ⵠᐃ.ⵠᐃᐃⲆⵠᐃⵠ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("010_111_000")] = ⵠᐃ.ⲆⲆⵠᐃⵠΔⵠ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("010_111_010")] = ⵠᐃ.ᐃΔⲆΔᐃⵠᐃ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("010_111_011")] = ⵠᐃ.ⵠᐃᐃⲆⵠⵠᐃ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("010_111_110")] = ⵠᐃ.ⲆΔⵠΔΔⵠⲆ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("010_111_111")] = ⵠᐃ.ΔⲆⵠⲆΔΔⵠ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("011_011_000")] = ⵠᐃ.ⲆⲆᐃⵠᐃⲆᐃ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("011_011_010")] = ⵠᐃ.ⲆⲆΔᐃΔⲆΔ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("011_011_011")] = ⵠᐃ.ᐃⲆΔΔⲆᐃⵠ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("011_111_000")] = ⵠᐃ.ΔⵠΔᐃᐃⲆᐃ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("011_111_010")] = ⵠᐃ.ⲆᐃΔⵠᐃΔΔ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("011_111_011")] = ⵠᐃ.ⲆΔΔΔⵠΔⲆ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("011_111_110")] = ⵠᐃ.ⲆΔΔΔⲆᐃⵠ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("011_111_111")] = ⵠᐃ.ⵠⲆⲆⵠᐃΔᐃ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("110_110_000")] = ⵠᐃ.ΔᐃⲆⵠⲆⵠⲆ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("110_110_010")] = ⵠᐃ.ΔⵠⵠⵠᐃΔⲆ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("110_110_110")] = ⵠᐃ.ΔⲆⲆΔᐃⵠᐃ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("110_111_000")] = ⵠᐃ.ⵠⲆⲆᐃⲆⵠᐃ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("110_111_010")] = ⵠᐃ.ΔⵠⵠⵠⵠⲆΔ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("110_111_011")] = ⵠᐃ.ⵠⲆᐃΔⲆⵠᐃ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("110_111_110")] = ⵠᐃ.ᐃΔⵠⵠᐃΔⵠ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("110_111_111")] = ⵠᐃ.ᐃΔᐃΔⲆⵠⲆ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("111_111_011")] = ⵠᐃ.ⲆΔᐃⵠᐃⵠⵠ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("111_111_110")] = ⵠᐃ.ⲆⵠⲆⲆⵠᐃᐃ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("111_111_011")] = ⵠᐃ.ⲆΔᐃⵠᐃⵠⵠ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("111_111_000")] = ⵠᐃ.ⲆⲆⲆⵠⵠΔᐃ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("111_111_111")] = ⵠᐃ.ᐃⲆΔᐃⵠⵠⲆ;
    ᐃΔ[1024][Cs.ⲆⲆⵠ][b("111_111_010")] = ⵠᐃ.ⵠⲆᐃᐃᐃⵠᐃ;
    ᐃΔ[32] = [];
    ᐃΔ[32][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆᐃΔᐃⵠΔⲆ;
    ᐃΔ[32][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆΔΔᐃⵠⲆⲆ;
    ᐃΔ[205] = [];
    ᐃΔ[205][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆᐃᐃΔᐃⲆᐃ;
    ᐃΔ[205][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔⲆᐃᐃⵠⵠᐃ;
    ᐃΔ[957] = [];
    ᐃΔ[957][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⵠᐃΔⵠⵠⵠ;
    ᐃΔ[957][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⵠⲆⵠᐃⲆⵠ;
    ᐃΔ[207] = [];
    ᐃΔ[207][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⵠⲆⲆΔᐃᐃ;
    ᐃΔ[207][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃΔⲆᐃᐃᐃΔ;
    ᐃΔ[954] = [];
    ᐃΔ[954][Cs.ⵠΔⵠ] = ⵠᐃ.ΔᐃᐃΔᐃⵠᐃ;
    ᐃΔ[954][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆΔⵠΔⵠΔᐃ;
    ᐃΔ[958] = [];
    ᐃΔ[958][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃΔΔΔΔᐃⲆ;
    ᐃΔ[958][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔᐃᐃᐃⲆΔⵠ;
    ᐃΔ[209] = [];
    ᐃΔ[209][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆᐃⵠⲆΔᐃⵠ;
    ᐃΔ[209][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆᐃⵠⲆⵠᐃⵠ;
    ᐃΔ[971] = [];
    ᐃΔ[971][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⵠᐃⲆᐃⲆΔ;
    ᐃΔ[971][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃⵠⲆⲆⵠΔ;
    ᐃΔ[211] = [];
    ᐃΔ[211][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⵠⵠⵠΔⲆⲆ;
    ᐃΔ[211][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⵠᐃⵠⵠᐃΔ;
    ᐃΔ[986] = [];
    ᐃΔ[986][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆᐃᐃⵠΔⲆⲆ;
    ᐃΔ[986][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆᐃΔΔᐃΔ;
    ᐃΔ[989] = [];
    ᐃΔ[989][Cs.ⵠΔⵠ] = [ⵠᐃ.ⲆΔⵠΔⲆⵠⲆ];
    ᐃΔ[989][Cs.ⲆⲆⵠ] = [ⵠᐃ.ⵠⵠⵠⲆⲆⲆΔ];
    ᐃΔ[217] = [];
    ᐃΔ[217][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⵠⵠⲆΔⵠⵠ;
    ᐃΔ[217][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃΔᐃⲆᐃᐃΔ;
    ᐃΔ[219] = [];
    ᐃΔ[219][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃᐃⲆΔⵠΔΔ;
    ᐃΔ[219][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠⲆᐃⵠⲆΔΔ;
    ᐃΔ[218] = [];
    ᐃΔ[218][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⲆᐃⵠΔᐃᐃ;
    ᐃΔ[218][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⵠᐃⵠⲆⵠ;
    ᐃΔ[212] = [];
    ᐃΔ[212][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⵠⲆᐃⲆⵠⵠ;
    ᐃΔ[212][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆᐃⵠⲆⲆΔ;
    ᐃΔ[213] = [];
    ᐃΔ[213][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⲆⲆⵠⲆΔᐃ;
    ᐃΔ[213][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠⵠΔⵠΔⵠΔ;
    ᐃΔ[214] = [];
    ᐃΔ[214][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆᐃⲆᐃᐃⵠⵠ;
    ᐃΔ[214][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⵠΔⵠⲆⲆ;
    ᐃΔ[215] = [];
    ᐃΔ[215][Cs.ⵠΔⵠ] = ⵠᐃ.ΔΔΔⵠⵠⵠⵠ;
    ᐃΔ[215][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃⲆⲆᐃⵠᐃ;
    ᐃΔ[216] = [];
    ᐃΔ[216][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⲆⲆⲆⲆᐃΔ;
    ᐃΔ[216][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠᐃᐃⵠⲆΔ;
    ᐃΔ[220] = [];
    ᐃΔ[220][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆᐃᐃᐃᐃᐃⲆ;
    ᐃΔ[220][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠⵠᐃⵠⵠⲆ;
    ᐃΔ[1020] = [];
    ᐃΔ[1020][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃⵠᐃⵠⲆⵠⵠ;
    ᐃΔ[1020][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔΔᐃΔⲆⵠⲆ;
    ᐃΔ[1021] = [];
    ᐃΔ[1021][Cs.ⵠΔⵠ] = ⵠᐃ.ΔᐃⵠᐃⵠⲆΔ;
    ᐃΔ[1021][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠⵠΔΔⵠᐃΔ;
    ᐃΔ[39] = [];
    ᐃΔ[39][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃⵠᐃⲆⲆΔΔ;
    ᐃΔ[39][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠΔᐃⵠⵠΔⲆ;
    ᐃΔ[1022] = ⵠᐃ.ᐃᐃⵠⲆⵠΔⵠ;
    ᐃΔ[1023] = ⵠᐃ.ΔⲆᐃΔⲆΔᐃ;
    ᐃΔ[1041] = [];
    ᐃΔ[1041][Cs.ⵠΔⵠ] = [];
    ᐃΔ[1041][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[1041][Cs.ⵠΔⵠ].push(ⵠᐃ.ΔⲆⲆⵠΔⲆⲆ);
    ᐃΔ[1041][Cs.ⵠΔⵠ].push(ⵠᐃ.ⲆⲆⵠⲆⵠⵠΔ);
    ᐃΔ[1041][Cs.ⵠΔⵠ].push(ⵠᐃ.ⲆᐃⵠⵠᐃⵠΔ);
    ᐃΔ[1041][Cs.ⲆⲆⵠ].push(ⵠᐃ.ᐃⵠᐃᐃΔⵠᐃ);
    ᐃΔ[1041][Cs.ⲆⲆⵠ].push(ⵠᐃ.ΔΔᐃᐃᐃᐃⵠ);
    ᐃΔ[1041][Cs.ⲆⲆⵠ].push(ⵠᐃ.ⵠᐃⵠⵠᐃⲆᐃ);
    ᐃΔ[244] = [];
    ᐃΔ[244][Cs.ⵠΔⵠ] = [];
    ᐃΔ[244][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[244][Cs.ⵠΔⵠ].push(ⵠᐃ.ⲆΔⵠᐃΔⲆᐃ);
    ᐃΔ[244][Cs.ⵠΔⵠ].push(ⵠᐃ.ΔᐃᐃⵠⵠⲆᐃ);
    ᐃΔ[244][Cs.ⵠΔⵠ].push(ⵠᐃ.ᐃⵠᐃⵠΔⲆΔ);
    ᐃΔ[244][Cs.ⲆⲆⵠ].push(ⵠᐃ.ⵠⲆⵠⵠᐃΔᐃ);
    ᐃΔ[244][Cs.ⲆⲆⵠ].push(ⵠᐃ.ⲆⲆᐃΔⲆᐃⵠ);
    ᐃΔ[244][Cs.ⲆⲆⵠ].push(ⵠᐃ.ΔⲆⲆⲆⲆΔⲆ);
    ᐃΔ[1052] = [];
    ᐃΔ[1052][Cs.ⵠΔⵠ] = [];
    ᐃΔ[1052][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[1052][Cs.ⵠΔⵠ].push(ⵠᐃ.ⵠᐃⵠⵠᐃΔᐃ);
    ᐃΔ[1052][Cs.ⵠΔⵠ].push(ⵠᐃ.ᐃΔⲆⲆⵠᐃᐃ);
    ᐃΔ[1052][Cs.ⵠΔⵠ].push(ⵠᐃ.ΔᐃⲆⲆⵠⲆΔ);
    ᐃΔ[1052][Cs.ⵠΔⵠ].push(ⵠᐃ.ⲆΔⵠΔΔᐃᐃ);
    ᐃΔ[1052][Cs.ⵠΔⵠ].push(ⵠᐃ.ⲆᐃⲆⲆΔⵠⵠ);
    ᐃΔ[1052][Cs.ⲆⲆⵠ].push(ⵠᐃ.ⲆΔⲆⲆⵠⲆᐃ);
    ᐃΔ[1052][Cs.ⲆⲆⵠ].push(ⵠᐃ.ⵠᐃⲆⲆΔΔⲆ);
    ᐃΔ[1052][Cs.ⲆⲆⵠ].push(ⵠᐃ.ᐃⵠΔΔᐃᐃⵠ);
    ᐃΔ[1052][Cs.ⲆⲆⵠ].push(ⵠᐃ.ᐃⲆΔⵠⲆΔⵠ);
    ᐃΔ[1052][Cs.ⲆⲆⵠ].push(ⵠᐃ.ⲆⲆⲆⲆΔΔⲆ);
    ᐃΔ[450] = [];
    ᐃΔ[450][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃⵠΔⵠΔⵠⵠ;
    ᐃΔ[450][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠⵠⵠⵠⲆⲆⲆ;
    ᐃΔ[453] = [];
    ᐃΔ[453][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠΔΔΔᐃΔᐃ;
    ᐃΔ[453][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃᐃᐃΔΔΔᐃ;
    ᐃΔ[454] = [];
    ᐃΔ[454][Cs.ⵠΔⵠ] = ⵠᐃ.ΔΔⵠΔⵠⵠᐃ;
    ᐃΔ[454][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃᐃΔΔᐃⲆⲆ;
    ᐃΔ[464] = ⵠᐃ.ⲆΔⵠⲆⲆⵠΔ;
    ᐃΔ[468] = ⵠᐃ.ⵠⵠⵠΔⵠᐃⵠ;
    ᐃΔ[469] = ⵠᐃ.ΔⲆⵠΔΔⲆΔ;
    ᐃΔ[20] = [];
    ᐃΔ[20][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃΔᐃⲆᐃΔⵠ;
    ᐃΔ[20][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆΔᐃΔΔⲆⵠ;
    ᐃΔ[920] = [];
    ᐃΔ[920][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⵠⵠⲆⲆⵠⲆ;
    ᐃΔ[920][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃᐃⲆⵠᐃⵠⲆ;
    ᐃΔ[21] = [];
    ᐃΔ[21][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⲆⵠΔⲆⵠⵠ;
    ᐃΔ[21][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃΔᐃⲆᐃⲆᐃ;
    ᐃΔ[924] = [];
    ᐃΔ[924][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⵠⵠⲆⲆⵠⲆ;
    ᐃΔ[924][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃᐃⲆⵠᐃⵠⲆ;
    ᐃΔ[44] = [];
    ᐃΔ[44][Cs.ⵠΔⵠ] = ⵠᐃ.ΔᐃᐃⲆⵠⵠⲆ;
    ᐃΔ[44][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔΔᐃⵠⲆᐃΔ;
    ᐃΔ[19] = [];
    ᐃΔ[19][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⲆⵠⵠⵠⵠΔ;
    ᐃΔ[19][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆᐃⲆΔᐃᐃⵠ;
    ᐃΔ[34] = [];
    ᐃΔ[34][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⵠⵠΔΔⲆⲆ;
    ᐃΔ[34][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⵠΔⲆⵠᐃ;
    ᐃΔ[17] = [];
    ᐃΔ[17][Cs.ⵠΔⵠ] = ⵠᐃ.ΔΔⲆⵠⵠᐃⲆ;
    ᐃΔ[17][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⵠΔⲆⲆⵠΔ;
    ᐃΔ[63] = [];
    ᐃΔ[63][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⲆⲆⲆⲆⲆᐃ;
    ᐃΔ[63][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃΔΔⲆᐃⵠ;
    ᐃΔ[60] = [];
    ᐃΔ[60][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⲆⵠⵠⵠΔⲆ;
    ᐃΔ[60][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔΔⲆⲆⲆᐃⵠ;
    ᐃΔ[94] = [];
    ᐃΔ[94][Cs.ⵠΔⵠ] = ⵠᐃ.ΔΔᐃΔⲆΔⲆⲆⲆ;
    ᐃΔ[94][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠΔΔΔΔⲆΔⲆⵠ;
    ᐃΔ[95] = [];
    ᐃΔ[95][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠΔᐃⵠΔⵠΔᐃⵠ;
    ᐃΔ[95][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⵠΔΔᐃⵠΔΔ;
    ᐃΔ[96] = [];
    ᐃΔ[96][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃⲆⲆⲆⲆΔⲆᐃΔ;
    ᐃΔ[96][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃⲆⵠΔⲆⲆᐃⵠⵠ;
    ᐃΔ[97] = [];
    ᐃΔ[97][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⵠΔΔⲆΔⵠⵠΔ;
    ᐃΔ[97][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆΔⵠⲆΔⵠᐃΔ;
    ᐃΔ[98] = [];
    ᐃΔ[98][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⲆⲆⲆⵠⵠΔⲆᐃ;
    ᐃΔ[98][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃⲆⵠⲆⵠᐃⲆⲆΔ;
    ᐃΔ[99] = [];
    ᐃΔ[99][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⲆᐃΔΔΔⲆⲆⵠ;
    ᐃΔ[99][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠⵠⵠⵠⵠᐃⲆᐃΔ;
    ᐃΔ[90] = [];
    ᐃΔ[90][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃⲆⵠᐃΔΔⲆ;
    ᐃΔ[90][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔΔⲆΔⵠᐃⵠ;
    ᐃΔ[91] = [];
    ᐃΔ[91][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃᐃΔᐃⵠⵠᐃ;
    ᐃΔ[91][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃⵠΔⵠᐃⲆ;
    ᐃΔ[71] = [];
    ᐃΔ[71][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃⵠΔᐃⵠΔᐃΔΔ;
    ᐃΔ[71][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⵠⲆⵠⲆᐃⵠⲆⲆ;
    ᐃΔ[72] = [];
    ᐃΔ[72][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⲆⵠⵠⵠΔᐃⲆⲆ;
    ᐃΔ[72][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆᐃᐃᐃᐃⵠⵠⲆⵠ;
    ᐃΔ[73] = [];
    ᐃΔ[73][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⵠΔᐃⵠᐃΔⲆΔ;
    ᐃΔ[73][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔⲆⲆΔᐃΔᐃΔⵠ;
    ᐃΔ[74] = [];
    ᐃΔ[74][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⵠⲆΔᐃⵠᐃΔᐃ;
    ᐃΔ[74][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔΔΔⲆⵠⵠⵠᐃᐃ;
    ᐃΔ[75] = [];
    ᐃΔ[75][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⲆⲆΔⵠⵠⵠᐃⲆ;
    ᐃΔ[75][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆᐃⵠⵠⲆᐃⵠⵠⲆ;
    ᐃΔ[76] = [];
    ᐃΔ[76][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠᐃⲆⲆΔΔⲆⲆΔ;
    ᐃΔ[76][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃΔⲆⲆⲆᐃΔᐃⲆ;
    ᐃΔ[101] = [];
    ᐃΔ[101][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃΔΔⵠᐃΔⲆ;
    ᐃΔ[101][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠᐃⲆⲆⲆᐃ;
    ᐃΔ[64] = [];
    ᐃΔ[64][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⲆⲆᐃᐃⵠⲆᐃΔ;
    ᐃΔ[64][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⵠⲆⲆᐃᐃⵠⵠ;
    ᐃΔ[102] = [];
    ᐃΔ[102][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⵠΔΔᐃΔⵠ;
    ᐃΔ[102][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔΔⲆᐃΔⲆᐃ;
    ᐃΔ[65] = [];
    ᐃΔ[65][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⲆΔΔᐃᐃᐃⵠᐃ;
    ᐃΔ[65][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃⲆΔⲆᐃⲆⲆⲆⲆ;
    ᐃΔ[103] = [];
    ᐃΔ[103][Cs.ⵠΔⵠ] = ⵠᐃ.ΔΔⲆᐃΔᐃΔ;
    ᐃΔ[103][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃⲆⵠⵠⲆⵠ;
    ᐃΔ[66] = [];
    ᐃΔ[66][Cs.ⵠΔⵠ] = ⵠᐃ.ΔᐃⵠᐃⵠⵠΔᐃᐃ;
    ᐃΔ[66][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔᐃΔⵠⲆᐃⵠΔΔ;
    ᐃΔ[104] = [];
    ᐃΔ[104][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃⲆⲆⲆⵠⵠⲆ;
    ᐃΔ[104][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔⲆΔΔᐃᐃΔ;
    ᐃΔ[67] = [];
    ᐃΔ[67][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⵠᐃⵠΔⵠⲆⵠᐃ;
    ᐃΔ[67][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃⲆᐃᐃᐃᐃⲆΔⵠ;
    ᐃΔ[105] = [];
    ᐃΔ[105][Cs.ⵠΔⵠ] = ⵠᐃ.ΔᐃᐃⵠΔⲆᐃ;
    ᐃΔ[105][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⲆΔΔⵠⲆ;
    ᐃΔ[68] = [];
    ᐃΔ[68][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆᐃᐃⵠⲆⵠΔΔᐃ;
    ᐃΔ[68][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠΔⵠᐃᐃΔΔΔ;
    ᐃΔ[106] = [];
    ᐃΔ[106][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠΔⵠᐃⵠΔⵠ;
    ᐃΔ[106][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆᐃΔᐃⲆᐃᐃⵠᐃ;
    ᐃΔ[69] = [];
    ᐃΔ[69][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⲆᐃⲆΔⵠΔⲆⲆ;
    ᐃΔ[69][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠⲆᐃΔᐃⵠᐃΔΔ;
    ᐃΔ[107] = [];
    ᐃΔ[107][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠΔᐃΔᐃⲆΔ;
    ᐃΔ[107][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠΔⲆᐃΔⲆⵠ;
    ᐃΔ[70] = [];
    ᐃΔ[70][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⵠⵠⲆⲆΔⲆᐃⵠ;
    ᐃΔ[70][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔᐃΔⵠᐃⵠⵠΔΔ;
    ᐃΔ[80] = [];
    ᐃΔ[80][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⵠⵠⵠᐃΔΔ;
    ᐃΔ[80][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔⲆΔⵠⵠⲆΔ;
    ᐃΔ[81] = [];
    ᐃΔ[81][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⵠᐃᐃΔⲆΔ;
    ᐃΔ[81][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠᐃᐃⵠᐃΔ;
    ᐃΔ[22] = [];
    ᐃΔ[22][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃΔⲆᐃⲆⲆⲆ;
    ᐃΔ[22][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃⲆᐃΔΔᐃΔ;
    ᐃΔ[928] = [];
    ᐃΔ[928][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃⲆΔΔᐃⲆᐃ;
    ᐃΔ[928][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆΔⲆᐃΔᐃ;
    ᐃΔ[935] = [];
    ᐃΔ[935][Cs.ⵠΔⵠ] = [];
    ᐃΔ[935][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[935][Cs.ⵠΔⵠ].push(ⵠᐃ.ⵠΔⵠΔⲆⵠᐃᐃⵠ);
    ᐃΔ[935][Cs.ⵠΔⵠ].push(ⵠᐃ.ⲆⲆⲆⵠⵠᐃⲆⵠⲆ);
    ᐃΔ[935][Cs.ⲆⲆⵠ].push(ⵠᐃ.ⲆⲆⲆⵠⵠᐃⲆⵠⲆ);
    ᐃΔ[935][Cs.ⲆⲆⵠ].push(ⵠᐃ.ᐃΔΔⵠⵠⵠⲆⵠⵠ);
    ᐃΔ[941] = [];
    ᐃΔ[941][Cs.ⵠΔⵠ] = [];
    ᐃΔ[941][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[941][Cs.ⵠΔⵠ].push(ⵠᐃ.ⵠⵠⵠⵠⲆᐃᐃ);
    ᐃΔ[941][Cs.ⵠΔⵠ].push(ⵠᐃ.ⲆᐃⵠⵠⲆᐃΔ);
    ᐃΔ[941][Cs.ⵠΔⵠ].push(ⵠᐃ.ᐃⵠⲆΔΔᐃΔ);
    ᐃΔ[941][Cs.ⲆⲆⵠ].push(ⵠᐃ.ΔⲆᐃΔΔΔΔ);
    ᐃΔ[941][Cs.ⲆⲆⵠ].push(ⵠᐃ.ⵠⲆΔⲆΔⲆΔ);
    ᐃΔ[941][Cs.ⲆⲆⵠ].push(ⵠᐃ.ᐃΔᐃⵠⲆΔⲆ);
    ᐃΔ[53] = [];
    ᐃΔ[53][Cs.ⵠΔⵠ] = ⵠᐃ.ΔᐃᐃᐃⲆᐃⲆ;
    ᐃΔ[53][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠΔᐃⵠⲆΔ;
    ᐃΔ[54] = [];
    ᐃΔ[54][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆᐃΔᐃΔⵠⵠ;
    ᐃΔ[54][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆᐃᐃᐃΔⵠⲆ;
    ᐃΔ[241] = [];
    ᐃΔ[241][Cs.ⵠΔⵠ] = [];
    ᐃΔ[241][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[241][Cs.ⵠΔⵠ].push(ⵠᐃ.ⵠⲆⲆⵠΔᐃᐃ);
    ᐃΔ[241][Cs.ⵠΔⵠ].push(ⵠᐃ.ΔᐃⵠⵠΔΔΔ);
    ᐃΔ[241][Cs.ⵠΔⵠ].push(ⵠᐃ.ⵠⲆᐃΔⵠⵠΔ);
    ᐃΔ[241][Cs.ⲆⲆⵠ].push(ⵠᐃ.ΔᐃⵠⵠᐃⵠⲆ);
    ᐃΔ[241][Cs.ⲆⲆⵠ].push(ⵠᐃ.ΔΔⲆᐃᐃⵠⲆ);
    ᐃΔ[241][Cs.ⲆⲆⵠ].push(ⵠᐃ.ᐃΔⵠᐃΔΔΔ);
    ᐃΔ[202] = [];
    ᐃΔ[202][Cs.ⵠΔⵠ] = [];
    ᐃΔ[202][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[202][Cs.ⵠΔⵠ].push(ⵠᐃ.ⲆⵠⲆⲆⵠⲆΔ);
    ᐃΔ[202][Cs.ⵠΔⵠ].push(ⵠᐃ.ⵠΔΔᐃⵠⲆᐃ);
    ᐃΔ[202][Cs.ⵠΔⵠ].push(ⵠᐃ.ⲆᐃΔᐃΔᐃⲆ);
    ᐃΔ[202][Cs.ⲆⲆⵠ].push(ⵠᐃ.ᐃⵠⵠᐃⲆΔᐃ);
    ᐃΔ[202][Cs.ⲆⲆⵠ].push(ⵠᐃ.ⵠᐃΔⵠᐃⲆⵠ);
    ᐃΔ[202][Cs.ⲆⲆⵠ].push(ⵠᐃ.ᐃⵠⵠΔᐃⲆⵠ);
    ᐃΔ[203] = [];
    ᐃΔ[203][Cs.ⵠΔⵠ] = [];
    ᐃΔ[203][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[203][Cs.ⵠΔⵠ].push(ⵠᐃ.ᐃⲆⵠᐃⵠΔᐃ);
    ᐃΔ[203][Cs.ⵠΔⵠ].push(ⵠᐃ.ᐃΔᐃⵠΔᐃᐃ);
    ᐃΔ[203][Cs.ⵠΔⵠ].push(ⵠᐃ.ⲆᐃⲆᐃⵠⵠΔ);
    ᐃΔ[203][Cs.ⵠΔⵠ].push(ⵠᐃ.ΔⵠⲆⵠΔⲆⲆ);
    ᐃΔ[203][Cs.ⵠΔⵠ].push(ⵠᐃ.ⵠᐃᐃⲆⲆᐃⲆ);
    ᐃΔ[203][Cs.ⵠΔⵠ].push(ⵠᐃ.ⲆᐃᐃΔⲆΔΔ);
    ᐃΔ[203][Cs.ⲆⲆⵠ].push(ⵠᐃ.ᐃᐃⲆΔΔⲆΔ);
    ᐃΔ[203][Cs.ⲆⲆⵠ].push(ⵠᐃ.ᐃⵠⲆᐃⵠⵠⲆ);
    ᐃΔ[203][Cs.ⲆⲆⵠ].push(ⵠᐃ.ᐃΔΔᐃΔⵠⲆ);
    ᐃΔ[203][Cs.ⲆⲆⵠ].push(ⵠᐃ.ⲆⲆΔⲆⵠⵠⲆ);
    ᐃΔ[203][Cs.ⲆⲆⵠ].push(ⵠᐃ.ⲆΔΔⲆᐃⵠⲆ);
    ᐃΔ[203][Cs.ⲆⲆⵠ].push(ⵠᐃ.ᐃⵠⲆⵠΔⲆΔ);
    ᐃΔ[Cs.ⵠⵠⵠΔⲆ] = [];
    ᐃΔ[Cs.ⵠⵠⵠΔⲆ][Cs.ⵠΔⵠ] = [];
    ᐃΔ[Cs.ⵠⵠⵠΔⲆ][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[Cs.ⵠⵠⵠΔⲆ][Cs.ⵠΔⵠ].push(ⵠᐃ.ⵠⵠⵠⵠᐃⲆⲆ);
    ᐃΔ[Cs.ⵠⵠⵠΔⲆ][Cs.ⵠΔⵠ].push(ⵠᐃ.ΔΔⲆΔᐃⵠⲆ);
    ᐃΔ[Cs.ⵠⵠⵠΔⲆ][Cs.ⵠΔⵠ].push(ⵠᐃ.ᐃⲆⲆⵠⵠⵠⵠ);
    ᐃΔ[Cs.ⵠⵠⵠΔⲆ][Cs.ⵠΔⵠ].push(ⵠᐃ.ⲆΔΔΔᐃᐃⲆ);
    ᐃΔ[Cs.ⵠⵠⵠΔⲆ][Cs.ⵠΔⵠ].push(ⵠᐃ.ⵠᐃⲆⵠⵠᐃⲆ);
    ᐃΔ[Cs.ⵠⵠⵠΔⲆ][Cs.ⵠΔⵠ].push(ⵠᐃ.ⲆᐃᐃᐃⵠΔᐃ);
    ᐃΔ[Cs.ⵠⵠⵠΔⲆ][Cs.ⲆⲆⵠ].push(ⵠᐃ.ⵠⵠⲆⵠΔⵠⲆ);
    ᐃΔ[Cs.ⵠⵠⵠΔⲆ][Cs.ⲆⲆⵠ].push(ⵠᐃ.ⵠⵠⲆⲆᐃᐃᐃ);
    ᐃΔ[Cs.ⵠⵠⵠΔⲆ][Cs.ⲆⲆⵠ].push(ⵠᐃ.ᐃⵠᐃⵠⲆⵠᐃ);
    ᐃΔ[Cs.ⵠⵠⵠΔⲆ][Cs.ⲆⲆⵠ].push(ⵠᐃ.ΔⵠⲆΔΔⵠΔ);
    ᐃΔ[Cs.ⵠⵠⵠΔⲆ][Cs.ⲆⲆⵠ].push(ⵠᐃ.ΔΔᐃⵠᐃᐃⲆ);
    ᐃΔ[Cs.ⵠⵠⵠΔⲆ][Cs.ⲆⲆⵠ].push(ⵠᐃ.ⲆⵠⵠᐃⵠⲆⲆ);
    ᐃΔ[918] = [];
    ᐃΔ[918][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⲆΔⲆΔΔⲆ;
    ᐃΔ[918][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃΔΔⲆᐃⲆ;
    ᐃΔ[919] = ⵠᐃ.ⲆᐃᐃᐃᐃⲆᐃ;
    ᐃΔ[56] = [];
    ᐃΔ[56][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⵠΔᐃᐃⵠΔⵠΔ;
    ᐃΔ[56][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠⵠⵠᐃⲆⵠΔⵠᐃ;
    ᐃΔ[223] = [];
    ᐃΔ[223][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⲆΔᐃⲆᐃⵠ;
    ᐃΔ[223][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃⲆⵠᐃᐃᐃ;
    ᐃΔ[224] = [];
    ᐃΔ[224][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠᐃᐃⲆⵠΔᐃ;
    ᐃΔ[224][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠⵠᐃⵠᐃΔ;
    ᐃΔ[236] = [];
    ᐃΔ[236][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠΔᐃᐃᐃᐃⵠ;
    ᐃΔ[236][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠΔᐃⲆΔΔⵠ;
    ᐃΔ[1033] = [];
    ᐃΔ[1033][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⲆΔⵠᐃⲆΔ;
    ᐃΔ[1033][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔΔΔΔⲆᐃⲆ;
    ᐃΔ[1034] = ⵠᐃ.ⲆⵠⲆΔⵠⵠⲆ;
    ᐃΔ[1150] = [];
    ᐃΔ[1150][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠΔⲆⲆΔⵠΔ;
    ᐃΔ[1150][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔⵠᐃⵠⵠⲆⵠ;
    ᐃΔ[1152] = [];
    ᐃΔ[1152][Cs.ⵠΔⵠ] = ⵠᐃ.ΔΔⵠⲆⲆⵠΔ;
    ᐃΔ[1152][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔⵠᐃΔⲆⲆⵠ;
    ᐃΔ[1149] = ⵠᐃ.ⵠⵠⲆⲆⵠⲆⲆ;
    ᐃΔ[1151] = ⵠᐃ.ⲆⵠⵠⵠⵠⲆⵠ;
    ᐃΔ[1153] = ⵠᐃ.ⵠⵠⲆⲆⲆⵠΔ;
    ᐃΔ[1143] = [];
    ᐃΔ[1143][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⲆⲆᐃⲆⵠⲆ;
    ᐃΔ[1143][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠΔᐃΔⵠΔⵠ;
    ᐃΔ[1145] = [];
    ᐃΔ[1145][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⵠⲆᐃⲆᐃΔ;
    ᐃΔ[1145][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆᐃⵠⵠⲆᐃ;
    ᐃΔ[1146] = [];
    ᐃΔ[1146][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆΔΔⵠᐃⲆΔ;
    ᐃΔ[1146][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔΔΔⵠⲆⵠⲆ;
    ᐃΔ[1144] = ⵠᐃ.ᐃⵠᐃΔⵠⲆᐃ;
    ᐃΔ[1148] = ⵠᐃ.ΔⵠᐃⲆΔⲆⲆ;
    ᐃΔ[1147] = ⵠᐃ.ΔⵠⲆⲆΔⲆΔ;
    ᐃΔ[1053] = [];
    ᐃΔ[1053][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⵠⲆᐃⵠⵠΔ;
    ᐃΔ[1053][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃⲆΔⲆᐃᐃᐃ;
    ᐃΔ[1055] = [];
    ᐃΔ[1055][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠᐃᐃⵠⲆᐃⲆ;
    ᐃΔ[1055][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔᐃΔⲆⲆⵠⲆ;
    ᐃΔ[231] = [];
    ᐃΔ[231][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⵠΔᐃᐃⵠᐃ;
    ᐃΔ[231][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃⲆⲆΔᐃΔⲆ;
    ᐃΔ[1060] = [];
    ᐃΔ[1060][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⵠΔⵠᐃⲆⵠ;
    ᐃΔ[1060][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃΔⲆΔⲆᐃⲆ;
    ᐃΔ[1063] = [];
    ᐃΔ[1063][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⲆⲆΔⵠΔᐃ;
    ᐃΔ[1063][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔᐃΔⲆΔⲆⲆ;
    ᐃΔ[1059] = [];
    ᐃΔ[1059][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⵠⵠⵠⲆΔⵠ;
    ᐃΔ[1059][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃⲆⲆⵠⲆᐃⲆ;
    ᐃΔ[1062] = [];
    ᐃΔ[1062][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠᐃⲆᐃⵠᐃⲆ;
    ᐃΔ[1062][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆᐃⲆΔᐃᐃ;
    ᐃΔ[1056] = ⵠᐃ.ⵠᐃΔⲆᐃᐃΔ;
    ᐃΔ[1057] = ⵠᐃ.ⲆᐃⵠⲆⵠⲆⲆ;
    ᐃΔ[1058] = ⵠᐃ.ⵠΔⵠⲆⵠⵠᐃ;
    ᐃΔ[1065] = ⵠᐃ.ⲆΔᐃᐃᐃⵠⵠ;
    ᐃΔ[1066] = ⵠᐃ.ᐃΔᐃΔⵠⲆΔ;
    ᐃΔ[1067] = ⵠᐃ.ᐃΔⲆΔΔⵠΔ;
    ᐃΔ[1222] = [];
    ᐃΔ[1222][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⲆᐃᐃΔΔⵠ;
    ᐃΔ[1222][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠΔᐃⵠΔⵠᐃ;
    ᐃΔ[248] = [];
    ᐃΔ[248][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆΔⲆⵠⲆΔΔ;
    ᐃΔ[248][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⲆⲆⲆΔΔ;
    ᐃΔ[1218] = [];
    ᐃΔ[1218][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠΔᐃⲆⵠⲆᐃᐃⵠ;
    ᐃΔ[1218][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠΔⲆⵠⵠΔⲆΔΔ;
    ᐃΔ[1221] = [];
    ᐃΔ[1221][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃᐃᐃⵠⲆᐃⵠ;
    ᐃΔ[1221][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔᐃⵠⵠᐃⵠΔ;
    ᐃΔ[1223] = ⵠᐃ.ⲆⲆΔⲆⲆΔᐃ;
    ᐃΔ[1219] = ⵠᐃ.ᐃΔⲆⵠⵠⵠᐃ;
    ᐃΔ[1068] = [];
    ᐃΔ[1068][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠΔⵠΔⵠᐃⵠ;
    ᐃΔ[1068][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔⲆⵠΔᐃᐃΔ;
    ᐃΔ[232] = [];
    ᐃΔ[232][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⲆΔᐃᐃⲆΔ;
    ᐃΔ[232][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠⲆΔᐃⲆΔⲆ;
    ᐃΔ[1070] = [];
    ᐃΔ[1070][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⲆⵠⵠΔⲆⲆ;
    ᐃΔ[1070][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃᐃⲆΔᐃⵠⲆ;
    ᐃΔ[1072] = [];
    ᐃΔ[1072][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆΔⲆᐃⲆΔⲆ;
    ᐃΔ[1072][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆᐃΔΔⵠⵠ;
    ᐃΔ[1075] = [];
    ᐃΔ[1075][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⲆᐃΔᐃⲆΔ;
    ᐃΔ[1075][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔᐃΔΔⲆⲆⲆ;
    ᐃΔ[1071] = [];
    ᐃΔ[1071][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠΔΔⵠⲆⵠⵠ;
    ᐃΔ[1071][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔΔⲆΔΔΔⵠ;
    ᐃΔ[1074] = [];
    ᐃΔ[1074][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃⲆⲆΔⲆⲆⲆ;
    ᐃΔ[1074][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔⵠᐃΔᐃⵠΔ;
    ᐃΔ[1073] = [];
    ᐃΔ[1073][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠΔⵠᐃΔΔⲆ;
    ᐃΔ[1073][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃΔⵠⵠⵠᐃᐃ;
    ᐃΔ[1076] = [];
    ᐃΔ[1076][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⲆⵠᐃᐃᐃᐃ;
    ᐃΔ[1076][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆΔⲆᐃᐃⲆ;
    ᐃΔ[1077] = ⵠᐃ.ⵠΔⵠⲆⵠΔᐃ;
    ᐃΔ[1078] = ⵠᐃ.ΔΔᐃⵠΔᐃⲆ;
    ᐃΔ[1079] = ⵠᐃ.ⵠⲆᐃⵠⵠᐃⵠ;
    ᐃΔ[1083] = [];
    ᐃΔ[1083][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⵠΔΔΔᐃᐃ;
    ᐃΔ[1083][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆΔⵠᐃΔΔΔ;
    ᐃΔ[233] = [];
    ᐃΔ[233][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⵠΔⵠⵠᐃⵠ;
    ᐃΔ[233][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔᐃΔᐃΔⲆⲆ;
    ᐃΔ[1085] = [];
    ᐃΔ[1085][Cs.ⵠΔⵠ] = ⵠᐃ.ΔΔⲆΔᐃⲆⵠ;
    ᐃΔ[1085][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔΔᐃⵠⵠⲆⲆ;
    ᐃΔ[1087] = [];
    ᐃΔ[1087][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⵠᐃΔⲆΔⵠ;
    ᐃΔ[1087][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⵠΔⵠⵠΔⵠ;
    ᐃΔ[1090] = [];
    ᐃΔ[1090][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⲆⲆᐃᐃⲆᐃ;
    ᐃΔ[1090][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠΔΔⲆⵠΔⲆ;
    ᐃΔ[1086] = [];
    ᐃΔ[1086][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃⲆᐃⲆᐃΔⲆ;
    ᐃΔ[1086][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔᐃⵠᐃᐃⲆᐃ;
    ᐃΔ[1089] = [];
    ᐃΔ[1089][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠΔΔⲆⲆᐃⲆ;
    ᐃΔ[1089][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔᐃⲆΔⵠΔΔ;
    ᐃΔ[1088] = [];
    ᐃΔ[1088][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠΔⵠΔΔⲆΔ;
    ᐃΔ[1088][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠΔΔᐃⲆⲆᐃ;
    ᐃΔ[1091] = [];
    ᐃΔ[1091][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⵠⲆⲆⵠⲆΔ;
    ᐃΔ[1091][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆΔⲆⵠΔⲆΔ;
    ᐃΔ[1092] = ⵠᐃ.ⲆᐃⲆⵠⵠΔᐃ;
    ᐃΔ[1093] = ⵠᐃ.ⲆΔⵠΔⵠⵠⲆ;
    ᐃΔ[1094] = ⵠᐃ.ⵠΔΔⵠᐃⵠⲆ;
    ᐃΔ[1098] = [];
    ᐃΔ[1098][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃΔΔΔΔⲆᐃ;
    ᐃΔ[1098][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⵠⵠⲆⲆⲆΔ;
    ᐃΔ[235] = [];
    ᐃΔ[235][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃⵠᐃⵠⵠΔΔ;
    ᐃΔ[235][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠⵠⲆⵠⲆⲆΔ;
    ᐃΔ[1115] = ⵠᐃ.ᐃᐃΔⲆⵠⲆΔ;
    ᐃΔ[1113] = [];
    ᐃΔ[1113][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃᐃΔᐃᐃΔᐃ;
    ᐃΔ[1113][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔⲆᐃⲆⲆᐃΔ;
    ᐃΔ[1114] = [];
    ᐃΔ[1114][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠΔΔⵠⵠⲆⲆ;
    ᐃΔ[1114][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠΔᐃΔΔᐃΔ;
    ᐃΔ[1100] = [];
    ᐃΔ[1100][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆΔᐃᐃᐃⲆⵠ;
    ᐃΔ[1100][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆΔᐃᐃᐃⵠᐃ;
    ᐃΔ[1102] = [];
    ᐃΔ[1102][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃᐃᐃⲆⲆⵠΔ;
    ᐃΔ[1102][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃΔⵠᐃΔᐃⵠ;
    ᐃΔ[1105] = [];
    ᐃΔ[1105][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⵠⲆⵠⵠⵠΔ;
    ᐃΔ[1105][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔᐃᐃⲆᐃᐃⵠ;
    ᐃΔ[1101] = [];
    ᐃΔ[1101][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⲆᐃⵠⵠⵠΔ;
    ᐃΔ[1101][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔⵠᐃⵠⵠΔᐃ;
    ᐃΔ[1104] = [];
    ᐃΔ[1104][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃᐃᐃⵠᐃᐃᐃ;
    ᐃΔ[1104][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆᐃⲆΔΔᐃⵠ;
    ᐃΔ[1103] = [];
    ᐃΔ[1103][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃⲆⵠⵠⲆΔΔ;
    ᐃΔ[1103][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔΔΔⵠⵠⲆΔ;
    ᐃΔ[1106] = [];
    ᐃΔ[1106][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃᐃᐃΔⲆⵠⲆ;
    ᐃΔ[1106][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃᐃΔⲆⵠⵠᐃ;
    ᐃΔ[1107] = ⵠᐃ.ΔⵠΔⵠΔⲆΔ;
    ᐃΔ[1108] = ⵠᐃ.ⵠⵠⲆⵠᐃⲆᐃ;
    ᐃΔ[1109] = ⵠᐃ.ⲆᐃⵠⵠⵠⵠⲆ;
    ᐃΔ[1119] = [];
    ᐃΔ[1119][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠΔᐃⲆᐃΔΔ;
    ᐃΔ[1119][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆᐃΔⲆⵠΔΔ;
    ᐃΔ[238] = [];
    ᐃΔ[238][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃⵠᐃᐃᐃⲆⵠ;
    ᐃΔ[238][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠΔΔⲆᐃᐃⲆ;
    ᐃΔ[1136] = ⵠᐃ.ⵠⲆᐃᐃΔᐃⲆ;
    ᐃΔ[1134] = [];
    ᐃΔ[1134][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⲆⵠᐃⵠⵠⵠ;
    ᐃΔ[1134][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃΔΔⲆΔᐃⵠ;
    ᐃΔ[1135] = [];
    ᐃΔ[1135][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⲆΔⵠⵠⲆᐃ;
    ᐃΔ[1135][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠΔⲆΔⵠⲆⵠ;
    ᐃΔ[1121] = [];
    ᐃΔ[1121][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃΔⲆᐃⲆᐃΔ;
    ᐃΔ[1121][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔⲆᐃⲆⵠᐃⵠ;
    ᐃΔ[1123] = [];
    ᐃΔ[1123][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆΔⲆⵠΔᐃⵠ;
    ᐃΔ[1123][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔᐃⵠⲆⵠⲆᐃ;
    ᐃΔ[1126] = [];
    ᐃΔ[1126][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⲆⲆΔⵠⵠⲆ;
    ᐃΔ[1126][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠΔΔⲆΔᐃⲆ;
    ᐃΔ[1122] = [];
    ᐃΔ[1122][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⵠⵠⲆⵠΔᐃ;
    ᐃΔ[1122][Cs.ⲆⲆⵠ] = ⵠᐃ.Ⲇᐃⵠⵠᐃⵠⵠ;
    ᐃΔ[1125] = [];
    ᐃΔ[1125][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠᐃⵠΔᐃⵠΔ;
    ᐃΔ[1125][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠⵠΔΔⵠᐃ;
    ᐃΔ[1124] = [];
    ᐃΔ[1124][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⵠΔⵠⲆⲆᐃ;
    ᐃΔ[1124][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔⲆⵠⲆⲆΔᐃ;
    ᐃΔ[1127] = [];
    ᐃΔ[1127][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃⵠΔⲆⵠᐃⵠ;
    ᐃΔ[1127][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆᐃᐃⵠⲆⵠⲆ;
    ᐃΔ[1128] = ⵠᐃ.ᐃⵠΔⲆΔᐃⵠ;
    ᐃΔ[1129] = ⵠᐃ.ⲆᐃⲆᐃⲆᐃⵠ;
    ᐃΔ[1130] = ⵠᐃ.ⵠᐃᐃⵠⵠᐃᐃ;
    ᐃΔ[1042] = [];
    ᐃΔ[1042][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠΔⲆΔΔⲆⲆ;
    ᐃΔ[1042][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠΔⲆⲆᐃⵠΔ;
    ᐃΔ[1043] = [];
    ᐃΔ[1043][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⲆΔᐃⲆᐃⲆ;
    ᐃΔ[1043][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃΔΔΔᐃⵠᐃ;
    ᐃΔ[1044] = [];
    ᐃΔ[1044][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠᐃΔΔⲆⵠⵠ;
    ᐃΔ[1044][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔⲆⵠⵠᐃᐃⵠ;
    ᐃΔ[228] = [];
    ᐃΔ[228][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⲆⲆⵠΔⵠΔ;
    ᐃΔ[228][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔⲆⲆⵠΔⵠΔ;
    ᐃΔ[234] = [];
    ᐃΔ[234][Cs.ⵠΔⵠ] = ⵠᐃ.ΔΔⲆΔΔΔᐃ;
    ᐃΔ[234][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔΔⲆΔΔΔᐃ;
    ᐃΔ[249] = [];
    ᐃΔ[249][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⵠⲆᐃⵠⲆⲆ;
    ᐃΔ[249][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠⵠⲆᐃⵠⲆⲆ;
    ᐃΔ[1045] = ⵠᐃ.ΔᐃⲆⵠⵠΔⵠ;
    ᐃΔ[89] = [];
    ᐃΔ[89][Cs.ⵠΔⵠ] = ⵠᐃ.ΔᐃᐃΔᐃⲆⵠ;
    ᐃΔ[89][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠΔⲆΔΔΔⵠ;
    ᐃΔ[92] = [];
    ᐃΔ[92][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃᐃⵠΔⲆⲆⲆ;
    ᐃΔ[92][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔⵠΔΔⲆᐃⵠ;
    ᐃΔ[247] = [];
    ᐃΔ[247][Cs.ⵠΔⵠ] = [ⵠᐃ.ⵠⲆᐃⵠⲆⲆⵠ, ⵠᐃ.ⲆΔᐃⲆΔΔᐃ, ⵠᐃ.ᐃΔΔⵠᐃΔⲆ, ⵠᐃ.ΔⵠΔΔᐃΔⵠ, ⵠᐃ.ΔΔⲆᐃΔᐃΔ, ⵠᐃ.ᐃⲆⲆⲆⵠⵠⲆ, ⵠᐃ.ΔᐃᐃⵠΔⲆᐃ, ⵠᐃ.ⵠΔⵠᐃⵠΔⵠ, ⵠᐃ.ⵠΔᐃΔᐃⲆΔ];
    ᐃΔ[247][Cs.ⲆⲆⵠ] = [ⵠᐃ.ΔᐃⵠᐃⵠⵠΔ, ⵠᐃ.ᐃⲆᐃᐃⲆᐃⲆ, ⵠᐃ.ᐃⵠᐃⲆⲆⲆᐃ, ⵠᐃ.ΔΔⲆᐃΔⲆᐃ, ⵠᐃ.ⵠᐃⲆⵠⵠⲆⵠ, ⵠᐃ.ΔⲆΔΔᐃᐃΔ, ⵠᐃ.ⲆⲆⲆΔΔⵠⲆ, ⵠᐃ.ⵠΔⵠᐃⵠΔⵠ, ⵠᐃ.ⵠΔⲆᐃΔⲆⵠ];
    ᐃΔ[93] = [];
    ᐃΔ[93][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⵠⲆⲆⲆⲆⲆ;
    ᐃΔ[93][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆΔⲆΔΔΔⵠ;
    ᐃΔ[225] = [];
    ᐃΔ[225][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆⵠⵠᐃᐃⵠⲆ;
    ᐃΔ[225][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔⵠΔⲆΔⵠⲆ;
    ᐃΔ[226] = [];
    ᐃΔ[226][Cs.ⵠΔⵠ] = ⵠᐃ.ΔᐃⵠᐃᐃⲆⲆ;
    ᐃΔ[226][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃΔΔᐃΔΔⵠ;
    ᐃΔ[24] = [];
    ᐃΔ[24][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃᐃΔᐃᐃᐃᐃ;
    ᐃΔ[24][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠⵠⲆᐃⵠΔΔ;
    ᐃΔ[88] = [];
    ᐃΔ[88][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃⵠΔΔⵠⲆΔΔⲆ;
    ᐃΔ[88][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔᐃⵠⲆⲆⵠⵠⵠⲆ;
    ᐃΔ[87] = [];
    ᐃΔ[87][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⵠΔⵠⲆⵠΔΔⲆ;
    ᐃΔ[87][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠⲆΔᐃⵠᐃⲆⵠΔ;
    ᐃΔ[82] = [];
    ᐃΔ[82][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⲆⵠΔⵠᐃᐃ;
    ᐃΔ[82][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃⲆⲆⲆᐃⲆ;
    ᐃΔ[621] = [];
    ᐃΔ[621][Cs.ⵠΔⵠ] = [];
    ᐃΔ[621][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[621][Cs.ⵠΔⵠ].push(ⵠᐃ.ᐃⲆᐃⵠⵠⲆΔⵠᐃ);
    ᐃΔ[621][Cs.ⵠΔⵠ].push(ⵠᐃ.ΔΔⲆΔΔΔⵠⲆⲆ);
    ᐃΔ[621][Cs.ⵠΔⵠ].push(ⵠᐃ.ⲆᐃⲆⵠⵠⵠΔᐃΔ);
    ᐃΔ[621][Cs.ⲆⲆⵠ].push(ⵠᐃ.ᐃΔⲆⵠⵠⵠΔΔⲆ);
    ᐃΔ[621][Cs.ⲆⲆⵠ].push(ⵠᐃ.ⲆᐃⲆⲆΔⲆⲆⵠⵠ);
    ᐃΔ[621][Cs.ⲆⲆⵠ].push(ⵠᐃ.ΔΔΔΔᐃᐃᐃΔⵠ);
    ᐃΔ[619] = [];
    ᐃΔ[619][Cs.ⵠΔⵠ] = [];
    ᐃΔ[619][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[619][Cs.ⵠΔⵠ].push(ⵠᐃ.ⵠΔᐃᐃⵠⵠⵠΔⲆ);
    ᐃΔ[619][Cs.ⵠΔⵠ].push(ⵠᐃ.ΔⲆⲆⵠⵠⲆⵠᐃᐃ);
    ᐃΔ[619][Cs.ⵠΔⵠ].push(ⵠᐃ.ⵠᐃⲆⲆΔᐃΔᐃΔ);
    ᐃΔ[619][Cs.ⲆⲆⵠ].push(ⵠᐃ.ᐃᐃΔⲆⲆⲆᐃᐃΔ);
    ᐃΔ[619][Cs.ⲆⲆⵠ].push(ⵠᐃ.ⵠⵠⵠⲆⵠⵠⵠⲆᐃ);
    ᐃΔ[619][Cs.ⲆⲆⵠ].push(ⵠᐃ.ⵠᐃΔⲆⵠΔⵠΔⵠ);
    ᐃΔ[620] = [];
    ᐃΔ[620][Cs.ⵠΔⵠ] = [];
    ᐃΔ[620][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[620][Cs.ⵠΔⵠ].push(ⵠᐃ.ⲆΔΔⲆᐃⲆⵠⵠⲆ);
    ᐃΔ[620][Cs.ⵠΔⵠ].push(ⵠᐃ.ⲆⲆⲆⵠⵠⵠΔⲆᐃ);
    ᐃΔ[620][Cs.ⵠΔⵠ].push(ⵠᐃ.ᐃⲆᐃΔᐃΔΔΔⲆ);
    ᐃΔ[620][Cs.ⲆⲆⵠ].push(ⵠᐃ.ⲆⲆᐃΔⲆⲆⵠᐃⵠ);
    ᐃΔ[620][Cs.ⲆⲆⵠ].push(ⵠᐃ.ⲆᐃⲆⵠⵠΔⵠΔΔ);
    ᐃΔ[620][Cs.ⲆⲆⵠ].push(ⵠᐃ.ΔⵠᐃⵠᐃⲆᐃⲆΔ);
    ᐃᐃᐃᐃ.g = [];
    ᐃᐃᐃᐃ.g[0] = [ⵠᐃ.ⲆⵠᐃΔⵠⵠΔ, ⵠᐃ.ᐃΔⵠⵠⲆⵠⲆ];
    ᐃᐃᐃᐃ.g[1] = ᐃᐃᐃᐃ.g[0];
    ᐃᐃᐃᐃ.g[2] = [ⵠᐃ.ⵠⲆⲆⵠⲆΔⵠ, ⵠᐃ.ⲆΔⲆΔⵠΔⲆ];
    ᐃᐃᐃᐃ.m = [];
    ᐃᐃᐃᐃ.m[0] = [ⵠᐃ.ᐃⲆΔⲆⵠᐃΔ, ⵠᐃ.ΔΔⲆΔⵠⲆⵠ];
    ᐃᐃᐃᐃ.m[1] = ᐃᐃᐃᐃ.m[0];
    ᐃᐃᐃᐃ.m[2] = [ⵠᐃ.ᐃⵠⵠΔⲆⵠⲆ, ⵠᐃ.ⲆᐃΔⵠᐃᐃⲆ];
    ᐃᐃᐃᐃ.la = [];
    ᐃᐃᐃᐃ.la[0] = [ⵠᐃ.ΔⲆⲆⲆᐃⲆⵠ, ⵠᐃ.ᐃⵠΔⵠⲆΔᐃ];
    ᐃᐃᐃᐃ.la[1] = ᐃᐃᐃᐃ.la[0];
    ᐃᐃᐃᐃ.la[2] = ᐃᐃᐃᐃ.la[0];
    ᐃᐃᐃᐃ.la[3] = ᐃᐃᐃᐃ.la[0];
    ᐃᐃᐃᐃ.la[4] = ᐃᐃᐃᐃ.la[0];
    ᐃᐃᐃᐃ.la[5] = ᐃᐃᐃᐃ.la[0];
    ᐃᐃᐃᐃ.s = [];
    ᐃᐃᐃᐃ.s[0] = [ⵠᐃ.ⵠᐃΔΔΔⵠⵠ, ⵠᐃ.ⵠᐃⵠⵠΔⵠⲆ];
    ᐃᐃᐃᐃ.s[1] = ᐃᐃᐃᐃ.s[0];
    ᐃᐃᐃᐃ.s[2] = [ⵠᐃ.ᐃⵠⵠⵠⵠΔΔ, ⵠᐃ.ⲆΔⵠⵠⵠⵠΔ];
    ᐃᐃᐃᐃ.p = [];
    ᐃᐃᐃᐃ.p[0] = [ⵠᐃ.ᐃⵠⲆᐃⵠᐃⲆ, ⵠᐃ.ᐃⵠⲆᐃⵠᐃⲆ];
    ᐃᐃᐃᐃ.a = [];
    ᐃᐃᐃᐃ.a[0] = [ⵠᐃ.ⵠⲆᐃⲆⵠⵠⵠ, ⵠᐃ.ΔΔΔΔΔⲆᐃ];
    ᐃᐃᐃᐃ.a[1] = ᐃᐃᐃᐃ.a[0];
    ᐃᐃᐃᐃ.a[2] = ᐃᐃᐃᐃ.a[0];
    ᐃᐃᐃᐃ.d = [];
    ᐃᐃᐃᐃ.d[0] = [ⵠᐃ.ⲆⲆΔⵠᐃⲆⲆ, ⵠᐃ.ΔⲆⵠⵠΔΔᐃ];
    ᐃᐃᐃᐃ.d[1] = ᐃᐃᐃᐃ.d[0];
    ᐃᐃᐃᐃ.d[2] = ᐃᐃᐃᐃ.d[0];
    ᐃᐃᐃᐃ.re = [];
    ᐃᐃᐃᐃ.re[0] = [ⵠᐃ.ΔⲆⲆⵠⵠⲆᐃ, ⵠᐃ.ᐃⲆⲆΔᐃᐃⵠ];
    ᐃᐃᐃᐃ.re[1] = ᐃᐃᐃᐃ.re[0];
    ᐃᐃᐃᐃ.re[2] = ᐃᐃᐃᐃ.re[0];
    ᐃᐃᐃᐃ.f = [];
    ᐃᐃᐃᐃ.f[0] = [ⵠᐃ.ⵠΔΔⵠᐃⵠᐃ, ⵠᐃ.ᐃⵠⲆⲆᐃⲆᐃ];
    ᐃᐃᐃᐃ.f[1] = ᐃᐃᐃᐃ.f[0];
    ᐃᐃᐃᐃ.f[2] = ᐃᐃᐃᐃ.f[0];
    ᐃᐃᐃᐃ.isl = [];
    ᐃᐃᐃᐃ.isl[0] = [ⵠᐃ.ⲆⵠᐃᐃⲆⲆⲆ, ⵠᐃ.ⵠⲆⲆⲆⵠⲆⲆ];
    ᐃᐃᐃᐃ.isl[1] = ᐃᐃᐃᐃ.isl[0];
    ᐃᐃᐃᐃ.isl[2] = ᐃᐃᐃᐃ.isl[0];
    ᐃᐃᐃᐃ.c = [];
    ᐃᐃᐃᐃ.c[0] = [ⵠᐃ.ⲆΔᐃΔⲆⵠⵠ, ⵠᐃ.ⵠⲆΔⲆᐃⲆⵠ];
    ᐃᐃᐃᐃ.c[1] = ᐃᐃᐃᐃ.c[0];
    ᐃᐃᐃᐃ.c[2] = ᐃᐃᐃᐃ.c[0];
    ᐃᐃᐃᐃ.wtb = [];
    ᐃᐃᐃᐃ.wtb[0] = [ⵠᐃ.ⵠⵠⵠΔΔⲆⵠ, ⵠᐃ.ⲆⲆᐃⵠΔΔΔ];
    ᐃᐃᐃᐃ.PIRANHA = [ⵠᐃ.ΔᐃΔΔⵠⲆᐃ, ⵠᐃ.Δᐃᐃⵠⵠⵠⵠ];
    ᐃᐃᐃᐃ.KRAKEN = [ⵠᐃ.ⵠⲆᐃⲆᐃⲆΔ, ⵠᐃ.ᐃᐃⲆᐃᐃⵠΔ];
    ᐃᐃᐃᐃ.FOX = [ⵠᐃ.ⲆΔⵠᐃΔᐃΔ, ⵠᐃ.ⵠⲆᐃΔⲆΔΔ];
    ᐃᐃᐃᐃ.WOLF = [ⵠᐃ.ⵠⵠⲆᐃⵠᐃⵠ, ⵠᐃ.ΔΔᐃᐃⲆᐃΔ];
    ᐃᐃᐃᐃ.SPIDER = [ⵠᐃ.ᐃΔⲆⲆⵠΔᐃ, ⵠᐃ.ⵠⵠⲆⲆΔᐃᐃ];
    ᐃᐃᐃᐃ.BEAR = [ⵠᐃ.ᐃΔᐃⲆⲆΔⲆ, ⵠᐃ.ΔᐃΔᐃΔⵠᐃ];
    ᐃᐃᐃᐃ.CAVE = [ⵠᐃ.ΔᐃⲆᐃⵠᐃΔ, ⵠᐃ.ᐃⵠⵠΔⲆΔⲆ];
    ᐃᐃᐃᐃ.MAP = [ⵠᐃ.ΔᐃⲆᐃΔⵠΔ, ⵠᐃ.ⵠⵠΔΔⵠᐃⵠ];
    ᐃᐃᐃᐃ.FOREST = [ⵠᐃ.ᐃΔΔⲆᐃΔΔ, ⵠᐃ.ᐃᐃⵠΔΔΔⲆ];
    ᐃᐃᐃᐃ.WINTER = [ⵠᐃ.ΔⵠⲆΔᐃⵠⲆ, ⵠᐃ.ⲆΔⵠⵠⵠᐃⵠ];
    ᐃᐃᐃᐃ.DESERT = [ⵠᐃ.ⵠΔⵠΔⵠⲆⵠ, ⵠᐃ.ΔΔⵠⵠΔᐃᐃ];
    ᐃᐃᐃᐃ.LAVA = [ⵠᐃ.ⵠⵠᐃΔΔⲆⲆ, ⵠᐃ.ΔⵠⵠⲆⵠⲆΔ];
    for (var c in ᐃᐃᐃᐃ) {
      for (var d = ᐃᐃᐃᐃ[c], e = 0; e < d.length; e++) {
        var f = d[e];
        if (f.ᐃⲆⵠᐃⲆΔⵠ !== Il) {
          f.ᐃⲆⵠᐃⲆΔⵠ();
        } else if (f.length > 0) {
          for (var g = 0; g < f.length; g++) {
            if (f[g].ᐃⲆⵠᐃⲆΔⵠ !== zo) {
              f[g].ᐃⲆⵠᐃⲆΔⵠ();
            }
          }
        }
      }
    }
    console.log(undefined, cq);
  }
  function Lm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    md(e, undefined, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    md(e, c[3], c[2], a * 12);
    e.translate(0, a * 25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    md(e, c[5]);
    e.translate(0, a * -25);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    md(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    md(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    md(e, Jh, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    md(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    md(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    md(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    md(e, lr, c[2], a * 11);
    return d;
  }
  function Wm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 790;
    e.translate(a * 5, a * 5);
    e.globalAlpha = 0;
    cd(e, a * 178.5, a * 172.828125, a * 150);
    md(e, undefined, c[0], a * 65);
    cd(e, a * 178.5, a * 172.828125, a * 150);
    md(e, Rg, c[0], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    ud(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    md(e, c[0]);
    e.save();
    e.translate(a * 136, a * 581.828125);
    ud(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    md(e, c[0]);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    ud(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 140, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
    e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
    e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
    e.closePath();
    md(e, c[0]);
    e.translate(3, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    md(e, c[0]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    md(e, c[0], c[0], a * 7);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * 15, a * 35);
    cd(e, a * 178.5, a * 172.828125, a * 150);
    md(e, bg, c[2], a * 95);
    cd(e, a * 178.5, a * 172.828125, a * 150);
    md(e, _o, c[1], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    ud(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    md(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 136, a * 581.828125);
    ud(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    md(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    ud(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    md(e, c[1], c[2], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    md(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 123, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
    e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
    e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
    e.closePath();
    md(e, c[1]);
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    md(e, c[1]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    md(e, c[1], c[1], a * 7);
    e.restore();
    return d;
  }
  function Gm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -200, a * -40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 344, a * 18.40625);
    d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
    d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
    d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
    d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
    d.closePath();
    md(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 335, a * 38.072906494140625);
    d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
    d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
    d.closePath();
    md(d, b[0]);
    return c;
  }
  function Nm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 320;
    d.translate(a * -60, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 3.953125);
    d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
    d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
    d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
    d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
    d.closePath();
    md(d, b[0]);
    return c;
  }
  function qm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 376;
    c.height = a * 371;
    d.globalAlpha = 0.5;
    d.translate(a * 5, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    md(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -4, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    md(d, Rg, b[1], a * 12);
    d.translate(a * -1, a * 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 270.633544921875, a * 88.98580932617188);
    d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
    d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
    d.closePath();
    md(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 275.633544921875, a * 281.9858093261719);
    d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
    d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
    d.closePath();
    md(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 124.633544921875, a * 291.9858093261719);
    d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
    d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
    d.closePath();
    md(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 113.633544921875, a * 80.98580932617188);
    d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
    d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
    d.closePath();
    md(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 202.633544921875, a * 20.985809326171875);
    d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
    d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
    d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
    d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
    d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
    d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
    d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
    d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
    d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
    d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
    d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
    d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
    d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
    d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
    d.closePath();
    md(d, b[2], b[3], a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 203.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
    d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
    d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
    d.closePath();
    md(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.633544921875, a * 25.985809326171875);
    d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
    d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
    d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
    d.closePath();
    md(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 26.633544921875, a * 96.98580932617188);
    d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
    d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
    d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
    d.closePath();
    md(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 351.633544921875, a * 99.98580932617188);
    d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
    d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
    d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
    d.closePath();
    md(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 350.633544921875, a * 302.9858093261719);
    d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
    d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
    d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
    d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
    d.closePath();
    md(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 95.633544921875, a * 224.98580932617188);
    d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
    d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
    d.closePath();
    md(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 253.98580932617188);
    d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
    d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
    d.closePath();
    md(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 251.98580932617188);
    d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
    d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
    d.closePath();
    md(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 316, a * 186.8020782470703);
    d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
    d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 340, a * 157.8020782470703);
    d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
    d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 349, a * 136.8020782470703);
    d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
    d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 278.75, a * 246.4375);
    d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
    d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
    d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 310.75, a * 277.4375);
    d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
    d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
    d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.75, a * 257.4375);
    d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
    d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
    d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 289.4375);
    d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
    d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 171.75, a * 256.4375);
    d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
    d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
    d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.75, a * 289.9375);
    d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
    d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.75, a * 314.4375);
    d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
    d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.75, a * 313.4375);
    d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
    d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 103.75, a * 244.4375);
    d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
    d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
    d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 86.75, a * 182.4375);
    d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
    d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
    d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44.75, a * 152.4375);
    d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
    d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31.75, a * 130.4375);
    d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
    d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
    d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 69.75, a * 274.4375);
    d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
    d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
    d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 165.75, a * 95.4375);
    d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
    d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 216.75, a * 94.4375);
    d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
    d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 68.4375);
    d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
    d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 169.75, a * 71.4375);
    d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
    d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
    d.closePath();
    md(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 193.75, a * 160.4375);
    d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
    d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
    d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
    d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
    d.closePath();
    md(d, b[8], b[9], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
    d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
    d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
    d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
    d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
    d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
    d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
    d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
    d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
    d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
    d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
    d.closePath();
    md(d, b[10]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 173.8125);
    d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
    d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
    d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
    d.closePath();
    md(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
    d.closePath();
    md(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
    d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
    d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
    d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
    d.closePath();
    md(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
    d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
    d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
    d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
    d.closePath();
    md(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 204.1999969482422, a * 201.8125);
    d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
    d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
    d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
    d.closePath();
    md(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
    d.closePath();
    md(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
    d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
    d.closePath();
    md(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
    d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
    d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
    d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
    d.closePath();
    md(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 183.1999969482422, a * 196.8125);
    d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
    d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
    d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
    d.closePath();
    md(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
    d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
    d.closePath();
    md(d, b[11]);
    cd(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
    md(d, b[12]);
    cd(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
    md(d, b[13]);
    cd(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
    md(d, b[12]);
    cd(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
    md(d, b[13]);
    return c;
  }
  function Om(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    md(e, undefined, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    md(e, c[3], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    md(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    md(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    md(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    md(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    md(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    md(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    md(e, undefined, c[2], a * 11);
    return d;
  }
  function Hm(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    var e;
    d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    cd(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
    md(d, undefined, c[2], a * 4);
    cd(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
    md(d, Rg, c[1], a * 4);
    cd(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
    md(d, undefined, c[1], a * 4);
    d.save();
    d.translate(a * 23, a * 38.734375);
    d.rotate(0);
    ud(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
    d.restore();
    md(d, c[2], c[1], a * 4);
    d.save();
    d.translate(a * 23.5, a * 43.734375);
    d.rotate(0.5235987755982988);
    vd(d, 3, a * 8.06225774829855, a * 0);
    d.restore();
    md(d, c[3]);
    cd(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
    md(d, c[3]);
    return e;
  }
  function Um(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 161;
    d.height = a * 184;
    e.translate(0, a * 10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    md(e, c[0]);
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    md(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    md(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104.5, a * 35.609375);
    e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
    e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
    e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
    md(e, cq, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.5, a * 72.609375);
    e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
    md(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.5, a * 85.609375);
    e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
    md(e, lj, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68.5, a * 122.609375);
    e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.5, a * 18.609375);
    e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
    e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146.5, a * 61.50892639160156);
    e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
    e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
    e.closePath();
    md(e, c[3]);
    return d;
  }
  function Ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 168;
    d.height = a * 100;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    ud(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    md(e, c[0]);
    cd(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    ud(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    md(e, undefined, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    md(e, undefined, c[3], a * 6);
    cd(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
    md(e, $k, c[3], a * 6);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    ud(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    md(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    md(e, c[1]);
    cd(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    md(e, c[2], c[1], a * 4);
    cd(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
    md(e, c[3], c[1], a * 4);
    cd(e, a * 78, a * 44, a * 20);
    md(e, c[4]);
    return d;
  }
  function Km(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 69;
    d.height = a * 120;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 30, a * 84);
    ud(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    md(e, c[0]);
    e.save();
    e.translate(a * 30, a * 45);
    ud(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    md(e, c[0]);
    e.save();
    e.translate(a * 30, a * 17);
    ud(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    md(e, c[0]);
    e.save();
    e.translate(a * 30, a * 31);
    ud(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 36, a * 79.140625);
    ud(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    md(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 35, a * 40.140625);
    ud(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    md(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 35, a * 12.140625);
    ud(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    md(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 34.5, a * 26.140625);
    ud(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    md(e, c[3], c[4], a * 3);
    return d;
  }
  ;
  function Vm(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    if (c == 0) {
      e.width = a * 566;
      e.height = a * 429;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 312.625, a * 39.046875);
      d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
      d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
      d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
      d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
      d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
      d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
      d.closePath();
      md(d, b[0]);
    } else if (c == 1) {
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 511;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 141.625, a * 49.296875);
      d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
      d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
      d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
      d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
      d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
      d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
      d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
      d.closePath();
      md(d, b[0]);
    } else if (c == 2) {
      var e;
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 504;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 153.625, a * 46.296875);
      d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
      d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
      d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
      d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
      d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
      d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
      d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
      d.closePath();
      md(d, b[0]);
    }
    return e;
  }
  function Zm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 115;
    d.height = a * 585;
    e.scale(-1, 1);
    e.translate(a * -110, 0);
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    ud(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    md(e, c[0]);
    e.translate(a * -10, a * -10);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    ud(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    md(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    md(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    md(e, c[5], c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    md(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 427);
    e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
    md(e, undefined, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 448);
    e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
    md(e, Ts, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    md(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    md(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    md(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    md(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    md(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    md(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    md(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    md(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 113);
    e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
    e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
    e.closePath();
    md(e, c[3], c[4], a * 6);
    return d;
  }
  function $m(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 372;
    d.height = a * 358;
    e.translate(a * 0, a * 10);
    e.globalAlpha = b ? 0.2 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    md(e, c[0], c[0], a * 10);
    e.translate(a * 0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
    e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
    e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
    e.closePath();
    md(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
    e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
    e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
    e.closePath();
    md(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
    e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
    e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
    e.closePath();
    md(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
    e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
    e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
    e.closePath();
    md(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.000030517578125, a * 122.3125);
    e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
    e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
    e.closePath();
    md(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 310.0000305175781, a * 127.3125);
    e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
    e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
    e.closePath();
    md(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
    e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
    e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
    e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
    e.closePath();
    md(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
    e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
    e.closePath();
    md(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
    e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
    e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
    e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
    e.closePath();
    md(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
    e.closePath();
    md(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
    e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
    e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
    e.closePath();
    md(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
    e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
    e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
    e.closePath();
    md(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
    e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
    e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
    e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
    e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
    e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
    e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
    e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
    e.closePath();
    md(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    md(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
    e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
    e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
    e.closePath();
    md(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
    e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
    e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
    e.closePath();
    md(e, c[1], c[1], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
    e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
    e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
    e.closePath();
    md(e, c[2], c[3], a * 10);
    cd(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
    md(e, c[4], c[5], a * 1);
    cd(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
    md(e, c[4], c[5], a * 1);
    cd(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
    md(e, c[4], c[5], a * 1);
    cd(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
    md(e, c[4], c[5], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
    e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
    e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
    e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
    e.closePath();
    md(e, c[4], c[5], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
    e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
    e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
    e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
    e.closePath();
    md(e, c[6]);
    return d;
  }
  function ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 92;
    d.height = a * 108;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 10);
    e.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
    e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
    e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
    e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
    e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
    e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
    e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
    e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
    e.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
    e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, a * 10);
    e.closePath();
    md(e, c[0], c[1], 4);
    return d;
  }
  function ic(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 405;
    e.globalAlpha = 1;
    e.translate(a * 6, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
    e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
    e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
    e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
    e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    md(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
    e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
    e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
    e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
    e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
    e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
    e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
    e.closePath();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    md(e, Ts, c[1], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
    e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
    e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
    e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
    e.closePath();
    md(e, c[0], c[1], a * 13);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
    e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
    e.closePath();
    md(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
    e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
    e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
    e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
    e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
    e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
    e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
    e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
    e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
    e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
    e.closePath();
    md(e, c[2], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
    e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
    e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
    e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
    e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
    e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
    e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
    e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
    e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
    e.closePath();
    md(e, c[0], c[1], a * 20);
    return d;
  }
  function tc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 139;
    d.height = a * 135;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    md(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    md(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    md(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    md(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
    e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
    e.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * 10);
    e.closePath();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 65);
    e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
    e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
    e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
    e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
    e.closePath();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
    e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
    e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
    e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
    e.closePath();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 69);
    e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
    e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
    e.closePath();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
    e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
    e.closePath();
    md(e, c[2]);
    return d;
  }
  function nc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 33;
    c.height = a * 35;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 12.75, a * 7.1328125);
    d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
    d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
    d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
    d.closePath();
    md(d, b[0]);
    return c;
  }
  function oc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 330;
    d.translate(a * -60, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 7.953125);
    d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
    d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
    d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
    d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
    d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
    d.closePath();
    md(d, b[0]);
    return c;
  }
  function ac(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      md(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      md(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      md(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      md(e, b[3], b[3], a * 32);
      cd(e, a * 41, a * 30, a * 14.7648230602334);
      md(e, b[3], b[3], a * 32);
      cd(e, a * 369, a * 30, a * 15.556349186104045);
      md(e, b[3], b[3], a * 32);
      cd(e, a * 364, a * 190, a * 15.620499351813308);
      md(e, b[3], b[3], a * 32);
      cd(e, a * 41, a * 186, a * 15.556349186104045);
      md(e, b[3], b[3], a * 32);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      md(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      md(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      md(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      md(e, b[3], b[3], a * 32);
      cd(e, a * 41, a * 30, a * 14.7648230602334);
      md(e, b[3], b[3], a * 32);
      cd(e, a * 369, a * 30, a * 15.556349186104045);
      md(e, b[3], b[3], a * 32);
      cd(e, a * 364, a * 190, a * 15.620499351813308);
      md(e, b[3], b[3], a * 32);
      cd(e, a * 41, a * 186, a * 15.556349186104045);
      md(e, b[3], b[3], a * 32);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    md(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    md(e, b[2], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    md(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    md(e, b[2], b[0], a * 12);
    cd(e, a * 41, a * 30, a * 14.7648230602334);
    md(e, b[2], b[0], a * 12);
    cd(e, a * 369, a * 30, a * 15.556349186104045);
    md(e, b[2], b[0], a * 12);
    cd(e, a * 364, a * 190, a * 15.620499351813308);
    md(e, b[2], b[0], a * 12);
    cd(e, a * 41, a * 186, a * 15.556349186104045);
    md(e, b[2], b[0], a * 12);
    return d;
  }
  function rc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 180;
    d.height = a * 120;
    e.translate(a * -65, a * -35);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    ud(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    md(e, c[0]);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    ud(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    ud(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    md(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    ud(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.5, a * 73.34375);
    e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
    e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
    e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
    e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
    e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137.5, a * 65.34375);
    e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 85.34375);
    e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
    e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 89.34375);
    e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
    e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 208.5, a * 104.34375);
    e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
    e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 117.34375);
    e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
    e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.5, a * 51.34375);
    e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
    e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
    e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 170.5, a * 52.34375);
    e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
    e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
    e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 69.34375);
    e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
    e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
    e.closePath();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222.5, a * 75.34375);
    e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
    e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
    e.closePath();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 100.34375);
    e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
    e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
    e.closePath();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112.5, a * 48.34375);
    e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
    e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
    e.closePath();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216.5, a * 109.34375);
    e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
    e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
    e.closePath();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86.5, a * 133.34375);
    e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
    e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
    e.closePath();
    md(e, c[2]);
    return d;
  }
  function sc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 110;
    c.height = a * 110;
    d.globalAlpha = 0.2;
    cd(d, a * 55, a * 55, a * 55);
    md(d, b[0]);
    return c;
  }
  function hc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.translate(0, b * 3);
    f.globalAlpha = c ? 0.5 : 1;
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    vd(f, 7, b * 60, b * 10);
    f.restore();
    md(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      vd(f, 3, b * 21, b * 4);
      md(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(0.2);
    vd(f, 9, b * 60, b * 10);
    md(f, d[3], d[4], b * 4);
    f.rotate(-0.32);
    vd(f, 9, b * 38, b * 10);
    md(f, d[5], d[6], b * 4);
    f.rotate(0.68);
    vd(f, 9, b * 20, b * 8);
    md(f, d[7], d[8], b * 6);
    f.restore();
    return e;
  }
  function gc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 170;
    e.translate(0, a * -170);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159.5, a * 322.0625);
    e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
    e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
    e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
    e.closePath();
    md(e, c[0], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212.5, a * 270.0625);
    e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
    e.closePath();
    md(e, undefined, c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 193.5, a * 226.0625);
    e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
    e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
    e.closePath();
    md(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164.5, a * 245.0625);
    e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
    e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
    e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
    e.closePath();
    md(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 260.0625);
    e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
    e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
    e.closePath();
    md(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 152.5, a * 278.0625);
    e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
    e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
    e.closePath();
    md(e, c[2], c[3], a * 12);
    return d;
  }
  function lc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 158;
    d.height = a * 201;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    md(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    md(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    md(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    md(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    md(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    md(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    md(e, c[8], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    md(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    md(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    md(e, c[3], c[2], a * 4);
    cd(e, a * 108.5, a * 148.421875, a * 9);
    md(e, c[5]);
    cd(e, a * 106.5, a * 144.421875, a * 3);
    md(e, c[6]);
    cd(e, a * 46.5, a * 148.421875, a * 9);
    md(e, c[5]);
    cd(e, a * 44.5, a * 144.421875, a * 3);
    md(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 114.421875);
    e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
    e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
    md(e, c[3], c[2], a * 4);
    e.beginPath();
    e.translate(0, a * -2);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.5, a * 131.421875);
    e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
    e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
    md(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 57.421875);
    e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
    e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
    e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
    e.closePath();
    md(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    md(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    md(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 154.421875);
    e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
    e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
    e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
    e.closePath();
    md(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 81.5, a * 164.421875);
    e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
    e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
    e.closePath();
    md(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 164.421875);
    e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
    e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
    e.closePath();
    md(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.5, a * 156.421875);
    e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
    e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
    e.closePath();
    md(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    md(e, c[3], c[2], a * 4);
    return d;
  }
  function uc(a, b) {
    nk(oh, a, b);
    d = sh[0];
    e = sh[1];
    Hj(oh, d, e);
    const c = (61538 + (fs(sh[0], sh[1]) ^ aq(sh[0], sh[1], sh[0], sh[1], sh[0]))) % 65349;
    var d;
    var e;
    mo(sh[0], sh[1], sh[0], sh[1], sh[0], sh[1]);
    return (c | 19086) & ~(c & 19086);
  }
  function bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 46;
    d.height = a * 140;
    e.scale(a * -1, a * 1);
    e.translate(a * -50, a * 40);
    e.translate(a * -20, 0);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    md(e, c[0]);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    ud(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    md(e, c[0]);
    e.translate(a * 0, 0);
    e.globalAlpha = 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    md(e, c[3], c[4], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    md(e, c[1], c[2], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    md(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    ud(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    md(e, c[1], c[2], a * 3);
    return d;
  }
  function dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 247;
    d.height = a * 247;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    md(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    md(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    md(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    md(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 137);
    e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
    e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
    e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
    e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
    e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
    e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
    e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
    e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
    e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
    e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
    e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
    e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
    e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
    e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    md(e, undefined, c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 63);
    e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
    e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
    e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 40);
    e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
    e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
    e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 43);
    e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
    e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
    e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 98);
    e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
    e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
    e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 180, a * 85);
    e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
    e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
    e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 114);
    e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
    e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
    e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 92);
    e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
    e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
    e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 130);
    e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
    e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
    e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 113, a * 189);
    e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
    e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
    e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 154);
    e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
    e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
    e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206, a * 152);
    e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
    e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
    e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 181, a * 184);
    e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
    e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
    e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 199);
    e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
    e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 143);
    e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
    e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 159);
    e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
    e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
    e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 214);
    e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
    e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
    e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 52);
    e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
    e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
    e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 81);
    e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
    e.bezierCurveTo(a * 23, a * 97, a * 19, a * 96, a * 16, a * 93);
    e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
    e.closePath();
    md(e, c[4], c[5], a * 5);
    return d;
  }
  function vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 648;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    ud(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 43);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
    e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
    e.closePath();
    md(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    ud(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    md(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    md(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    md(e, $k, c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    md(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    md(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    md(e, c[5], c[6], a * 8);
    e.save();
    e.translate(a * -46, a * -50);
    e.scale(2, 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 80);
    e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
    e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
    e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
    e.closePath();
    md(e, c[8]);
    e.restore();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    md(e, c[8], c[9], a * 8);
    e.scale(2, 2);
    e.translate(a * -23, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 69);
    e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
    e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
    e.closePath();
    md(e, c[10]);
    return d;
  }
  function mc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 80;
    d.height = a * 160;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    ud(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    md(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    ud(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    md(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 0, a * 1);
    e.moveTo(a * 180.5, a * 169.0625);
    e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
    e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
    e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
    e.closePath();
    md(e, c[5]);
    e.restore();
    return d;
  }
  function cc(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 600;
    var f = b * 22;
    var g = b * 4;
    var a = b * 4;
    c.width = e;
    c.height = f;
    ud(d, b * 5, b * 5, e - b * 10, f - b * 10, g);
    md(d, null, "#BBE8EF", a);
    return c;
  }
  function pc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 117;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 90);
    e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
    e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
    e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
    e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, a * 4);
    e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6, a * 76);
    e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
    e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
    e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
    e.closePath();
    md(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 62);
    e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
    e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
    e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
    e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
    e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
    e.closePath();
    md(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
    e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
    e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
    e.closePath();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 1, a * 89);
    e.bezierCurveTo(a * 18, a * 100, a * 34, a * 110, a * 35, a * 111);
    e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
    e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
    e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
    e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
    e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
    e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
    e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
    e.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * 4, a * 90);
    e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
    e.closePath();
    md(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 71);
    e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
    e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
    e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
    e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
    e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
    e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
    e.closePath();
    md(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 89);
    e.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
    e.closePath();
    md(e, _o, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 102);
    e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
    e.closePath();
    md(e, xj, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 62);
    e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
    e.closePath();
    md(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70, a * 41);
    e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
    e.closePath();
    md(e, Ur, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 33);
    e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
    e.closePath();
    md(e, cq, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 28);
    e.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
    e.closePath();
    md(e, undefined, c[4], a * 6);
    return d;
  }
  function Cc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 161;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    md(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, -8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    md(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 28, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    md(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    md(d, b[3]);
    cd(d, a * 103, a * 110, a * 11);
    md(d, b[4]);
    cd(d, a * 55, a * 111, a * 11);
    md(d, b[4]);
    cd(d, a * 99, a * 107, a * 5);
    md(d, b[1]);
    cd(d, a * 51, a * 108, a * 5);
    md(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 121);
    d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
    d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
    d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
    d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
    d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
    d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
    d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
    d.closePath();
    md(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.translate(-2, 0);
    d.moveTo(a * 71, a * 162);
    d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
    d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
    d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
    d.closePath();
    md(d, b[3]);
    d.translate(2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    md(d, undefined, b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 25, a * 63);
    d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
    d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
    d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
    md(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 91, a * 53);
    d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
    d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
    d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
    md(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    md(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    md(d, b[3]);
    return c;
  }
  function Tc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 147;
    c.height = a * 172;
    d.globalAlpha = 0.5;
    d.translate(0, a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    md(d, b[0]);
    d.translate(0, a * -8);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    md(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 14, a * 57);
    d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
    d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
    md(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 47);
    d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
    d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
    md(d, b[1], b[2], a * 4);
    cd(d, a * 51, a * 91, a * 9);
    md(d, b[3]);
    cd(d, a * 95, a * 91, a * 9);
    md(d, b[3]);
    cd(d, a * 91, a * 89, a * 4);
    md(d, b[4]);
    cd(d, a * 47, a * 89, a * 4);
    md(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 54, a * 133);
    d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
    d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
    d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
    d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
    d.closePath();
    md(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 65.25, a * 135);
    d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
    d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
    d.closePath();
    md(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 74, a * 145);
    d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
    d.closePath();
    md(d, undefined, b[6], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 19, a * 58);
    d.bezierCurveTo(a * 10, a * 38, a * 18, a * 33, a * 28, a * 34);
    d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
    d.closePath();
    md(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 51);
    d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
    d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
    d.closePath();
    md(d, b[6]);
    return c;
  }
  function fc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 160;
    d.height = a * 161;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80.5, a * 78);
    ud(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80.5, a * 78);
    ud(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    md(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 80, a * 78.5);
    ud(e, a * -17, a * -72.5, a * 34, a * 145, a * 10);
    e.restore();
    md(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80, a * 79.5);
    ud(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80, a * 79.5);
    ud(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    md(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    md(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    md(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    md(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    md(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 78.5, a * 78);
    ud(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 78.5, a * 78);
    ud(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    md(e, c[3], c[4], a * 6);
    return d;
  }
  function zc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 100;
    c.height = a * 100;
    d.globalAlpha = 0.5;
    d.fillStyle = b[0];
    d.fillRect(0, 0, c.width, c.height);
    return c;
  }
  function yc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 106;
    d.height = a * 681;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    ud(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    md(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    ud(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    md(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    md(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    md(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    md(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    md(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    md(e, c[8]);
    return d;
  }
  function wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 109;
    d.height = a * 110;
    cd(e, a * 54.5, a * 55, a * 48.038209575038294);
    md(e, b[0], b[1], a * 8);
    if (c == 0) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
      e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
      e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
      e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
      e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
      e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
      e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
      e.closePath();
      md(e, b[2]);
    } else if (c == 1) {
      e.save();
      e.translate(a * 55, a * 39.48748779296875);
      ud(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
      e.restore();
      md(e, b[2], b[3], a * 4);
      cd(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
      md(e, b[4], b[3], a * 4);
      e.save();
      e.translate(a * 55.5, a * 57.287506103515625);
      ud(e, a * -9, a * -16, a * 18, a * 32, a * 10);
      e.restore();
      md(e, b[4]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 25.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
      e.closePath();
      md(e, undefined, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 37.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
      e.closePath();
      md(e, undefined, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 50.287506103515625);
      e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
      e.closePath();
      md(e, undefined, b[5], a * 4);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
      e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
      e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
      e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
      e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
      e.closePath();
      md(e, b[2]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
      e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
      e.closePath();
      md(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
      e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
      e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
      e.closePath();
      md(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
      e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
      e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
      e.closePath();
      md(e, b[2]);
    } else if (c == 3) {
      e.scale(0.9, 0.9);
      e.translate(a * 6, 0);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54, a * 0.421875);
      e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
      e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
      e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
      e.closePath();
      md(e, b[2], b[3], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 74, a * 52.421875);
      e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
      e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
      e.closePath();
      md(e, b[3]);
    }
    return d;
  }
  function Pc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 173;
    c.height = a * 178;
    d.globalAlpha = 0.5;
    cd(d, a * 86.5, a * 98, a * 80);
    md(d, b[0]);
    d.globalAlpha = 1;
    cd(d, a * 86.5, a * 89, a * 81);
    md(d, b[1], b[2], a * 4);
    cd(d, a * 86.5, a * 86, a * 59);
    md(d, b[3], b[4], a * 4);
    d.globalAlpha = 0.5;
    cd(d, a * 86.5, a * 95, a * 34);
    md(d, b[0]);
    d.globalAlpha = 1;
    cd(d, a * 86.5, a * 89, a * 34);
    md(d, b[5]);
    return c;
  }
  function kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    cd(e, a * 220, a * 201, a * 170.41713528867922);
    md(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    cd(e, a * 220, a * 201, a * 170.41713528867922);
    md(e, c[1], c[2], a * 6);
    cd(e, a * 220, a * 201, a * 130);
    md(e, c[11], c[2], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    md(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    md(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    md(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    md(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    md(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    md(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142, a * 223);
    e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
    e.closePath();
    md(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 133);
    e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
    e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
    e.closePath();
    md(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 203, a * 102);
    e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
    e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
    e.closePath();
    md(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196, a * 324);
    e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
    e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
    e.closePath();
    md(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 266, a * 166);
    e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
    md(e, ph, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 269, a * 192);
    e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
    md(e, Ur, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 217);
    e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
    md(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 141);
    e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
    md(e, Ts, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 230);
    e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
    md(e, Ur, c[6], a * 6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 258);
    e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
    md(e, Ts, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 196);
    e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
    md(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    md(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    md(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    md(e, lj, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    md(e, Rg, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    md(e, Va, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    md(e, _o, c[6], a * 6);
    cd(e, a * 222, a * 199, a * 120.74767078498864);
    md(e, undefined, c[3], a * 40);
    cd(e, a * 220, a * 200, a * 95.44108130150245);
    md(e, undefined, c[2], a * 15);
    cd(e, a * 220, a * 201, a * 85);
    md(e, qg, c[4], a * 10);
    e.globalAlpha = 0.5;
    cd(e, a * 220, a * 201, a * 82);
    md(e, c[9]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    cd(e, a * 63, a * 136, a * 49.193495504995376);
    md(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    cd(e, a * 63, a * 136, a * 49.193495504995376);
    md(e, c[8], c[2], a * 4);
    cd(e, a * 63, a * 137, a * 25.632011235952593);
    md(e, c[7], c[2], a * 4);
    return d;
  }
  function Ac(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -80, -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 200.5, a * 14.953125);
    d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
    d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
    d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
    d.closePath();
    md(d, b[0]);
    return c;
  }
  function xc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 167;
    d.height = a * 136;
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    ud(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 0.8;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    ud(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    md(e, Ts, c[1], a * 7);
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    ud(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    ud(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    md(e, undefined, c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
    e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
    md(e, bg, c[1], a * 10);
    return d;
  }
  function Jc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 105;
    d.height = a * 144;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -5, a * 0);
    e.save();
    e.translate(a * 52.5, a * 91.5);
    ud(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    md(e, c[0], c[0], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    ud(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    md(e, c[0], c[0], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    ud(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    md(e, c[0], c[0], a * 4);
    e.translate(a * 5, a * 0);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 91.5);
    ud(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    md(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    ud(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    md(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    ud(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    md(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 60.5);
    e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
    e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
    e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
    e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
    e.closePath();
    md(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 40.5);
    e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
    e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
    e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
    e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
    e.closePath();
    md(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 33.5);
    e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
    e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
    e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
    e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
    e.closePath();
    md(e, c[9], c[8], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 47.5);
    e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
    e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
    e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
    e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
    e.closePath();
    md(e, c[11], c[10], a * 3);
    return d;
  }
  function Mc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 20;
    c.height = a * 35;
    ud(d, 0, 0, 20, 35, 7);
    md(d, b[0]);
    return c;
  }
  function Bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 187;
    d.height = a * 119;
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, 3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    md(e, c[5]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, -3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    md(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151, a * 60);
    e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
    e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
    e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
    e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
    e.closePath();
    md(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 53);
    e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
    e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
    e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
    e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
    e.closePath();
    md(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 36);
    e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
    e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
    e.closePath();
    md(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 43);
    e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
    md(e, undefined, c[1], a * 4);
    cd(e, a * 58, a * 50, a * 5);
    md(e, c[4]);
    cd(e, a * 43, a * 65, a * 5);
    md(e, c[4]);
    cd(e, a * 58, a * 73, a * 5);
    md(e, c[4]);
    cd(e, a * 58, a * 50, a * 2);
    md(e, c[5]);
    cd(e, a * 43, a * 65, a * 2);
    md(e, c[5]);
    cd(e, a * 58, a * 73, a * 2);
    md(e, c[5]);
    return d;
  }
  function Ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * 10, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    md(e, c[1], c[2], a * 10);
    return d;
  }
  function Dc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -20, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 50, a * 105);
    d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
    d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
    d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
    d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
    d.closePath();
    md(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 106);
    d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
    d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
    d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
    d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
    d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
    d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
    d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
    d.closePath();
    md(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 30, a * 159);
    d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
    d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
    d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
    d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
    d.closePath();
    md(d, b[2]);
    return c;
  }
  function Ic(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 198;
    f.height = b * 147;
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 76);
    g.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
    g.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
    g.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
    g.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
    g.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
    g.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
    g.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
    g.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
    g.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
    g.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
    g.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
    g.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
    g.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
    g.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
    g.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
    g.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
    g.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
    g.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
    g.closePath();
    md(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    md(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    md(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 49, b * 98);
    g.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
    g.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
    g.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
    g.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
    g.closePath();
    md(g, d[1]);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 54, b * 98);
    g.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
    g.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
    g.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
    g.closePath();
    md(g, d[0]);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 118, b * 47);
    g.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
    g.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
    g.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
    g.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
    g.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
    g.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
    g.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
    g.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
    g.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * 4);
    g.bezierCurveTo(b * 44, b * 0, b * 35, b * 20, b * 33, b * 37);
    g.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
    g.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
    g.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
    g.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
    g.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
    g.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
    g.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
    g.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
    g.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
    g.closePath();
    md(g, d[1], d[2], b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 62, b * 21);
    g.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
    g.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
    g.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
    g.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
    g.closePath();
    md(g, d[4]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 60, b * 29);
    g.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
    md(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 61, b * 37);
    g.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
    md(g, Rg, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 52, b * 31);
    g.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
    md(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 35);
    g.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
    md(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 58, b * 44);
    g.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
    md(g, cq, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 48);
    g.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
    md(g, qg, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 41);
    g.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
    md(g, bg, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 48);
    g.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
    md(g, undefined, d[3], b * 4);
    if (e == 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 99, b * 101);
      g.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
      md(g, undefined, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 97.6666259765625, b * 101.33331298828125);
      g.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
      md(g, undefined, d[5], b * 6);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
      md(g, undefined, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
      md(g, _o, d[5], b * 6);
      cd(g, b * 86, b * 114.39999389648438, b * 4.5);
      md(g, d[1], d[5], b * 6);
      cd(g, b * 121, b * 114.39999389648438, b * 4.5);
      md(g, d[1], d[5], b * 6);
    }
    return f;
  }
  function Sc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 185;
    e.height = b * 164;
    f.translate(0, 0);
    var g = function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 201;
      d.height = a * 164;
      e.translate(0, a * 5);
      e.globalAlpha = b ? 0.5 : 1;
      cd(e, a * 100.5, a * 82, a * 74.92746655359852);
      md(e, c[0], c[0], a * 4);
      cd(e, a * 100.5, a * 82, a * 65.9417374971317);
      md(e, c[0], c[0], a * 4);
      e.translate(0, -5);
      e.globalAlpha = 1;
      cd(e, a * 100.5, a * 82, a * 74.92746655359852);
      md(e, c[1], c[3], a * 4);
      cd(e, a * 100.5, a * 82, a * 65.9417374971317);
      md(e, c[1], c[2], a * 4);
      cd(e, a * 100.5, a * 82, a * 35.9417374971317);
      md(e, c[1], c[2], a * 20);
      cd(e, a * 100.5, a * 82, a * 15.9417374971317);
      md(e, c[1], c[2], a * 6);
      return d;
    }(b, c, d);
    f.drawImage(g, b * -10, b * 0);
    g = tp(b, c, d, 0);
    f.drawImage(g, b * -83, b * -40);
    g = tp(b, c, d, Math.PI / 1.4);
    f.drawImage(g, b * -15, b * -88);
    g = tp(b, c, d, Math.PI / -1.4);
    f.drawImage(g, b * 15, b * -8);
    return e;
  }
  function Qc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -165, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217, a * 103);
    d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
    d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
    d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
    d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
    d.closePath();
    md(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 231, a * 163);
    d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
    d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
    d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
    d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
    d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
    d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
    d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
    d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
    d.closePath();
    md(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 234, a * 154);
    d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
    d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
    d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
    d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
    d.closePath();
    md(d, b[2]);
    return c;
  }
  function _c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 163;
    d.height = a * 163;
    e.save();
    e.translate(a * 82.5, a * 81.1015625);
    e.rotate(0);
    ud(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
    e.restore();
    md(e, c[1]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    ud(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    ud(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    md(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    ud(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    ud(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    md(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    ud(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    ud(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    md(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    ud(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    ud(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    md(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    ud(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    ud(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    md(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    ud(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    ud(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    md(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    ud(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    ud(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    md(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    ud(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    ud(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    md(e, c[2], c[3], a * 3);
    return d;
  }
  function Fc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 310;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 192);
    e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
    e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
    e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
    e.closePath();
    md(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146, a * 239);
    e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
    e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
    e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
    e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
    e.closePath();
    md(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 193);
    e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
    e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
    e.closePath();
    md(e, Rg, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 230, a * 57);
    e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
    e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
    e.closePath();
    md(e, undefined, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 212);
    e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
    e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
    e.closePath();
    md(e, xk, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 239, a * 59);
    e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
    e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
    e.closePath();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 61);
    e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
    e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
    e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
    e.closePath();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 125);
    e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
    e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
    e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
    e.closePath();
    md(e, c[2]);
    return d;
  }
  function Rc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 48;
    c.height = a * 47;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 7.1875, a * 25.434661865234375);
    d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
    d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
    d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
    d.closePath();
    md(d, b[0]);
    return c;
  }
  function jc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 272;
    d.height = a * 264;
    e.translate(0, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    md(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    md(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
    e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
    e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
    e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
    e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
    e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
    e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
    e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
    e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
    e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
    e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
    e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
    e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
    e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
    e.closePath();
    md(e, c[4], c[5], a * 6);
    return d;
  }
  function Lc(b, c, d, e, f, i) {
    const a = ((42456 + b) * 214013 + 2531011) % 4294967296;
    const j = ~(c & 25588) & 25588 | ~(c & 25588) & c;
    const k = (24 << (d >> 24 & 255)) + (8 << (d >> 8 & 255)) + (16 << (d & 255)) + (0 << (d >> 16 & 255));
    const h = (e | 10001) & ~(e & 10001);
    const g = (8 << (i & 255)) + (0 << (i >> 8 & 255)) + (24 << (i >> 16 & 255)) + (16 << (i >> 24 & 255));
    return (12345 + (43333 + (Ko(a, j, k, h, (0 << (f >> 24 & 255)) + (16 << (f & 255)) + (24 << (f >> 16 & 255)) + (8 << (f >> 8 & 255))) ^ Nx(g, a, j, k, h))) * 1103515245) % 2147483648;
  }
  function Wc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 3);
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    vd(f, 7, b * 60, b * 10);
    f.restore();
    md(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      vd(f, 3, b * 21, b * 4);
      md(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1);
    vd(f, 8, b * 60, b * 10);
    md(f, d[3], d[4], b * 4);
    f.rotate(0.56);
    vd(f, 8, b * 40, b * 10);
    md(f, d[5], d[6], b * 4);
    f.rotate(0.28);
    vd(f, 8, b * 28, b * 8);
    md(f, d[7]);
    f.restore();
    return e;
  }
  function Gc() {
    var b = vx.time;
    if (ᐃΔ[285]) {
      Zo.drawImage(ᐃΔ[285][b][1], ua + 480, dq + 190);
      Zo.drawImage(ᐃΔ[285][b][2], ua + 180, dq - 430);
      Zo.drawImage(ᐃΔ[285][b][1], ua - 855, dq + 100);
      Zo.drawImage(ᐃΔ[285][b][0], ua - 550, dq - 300);
      Zo.drawImage(ᐃΔ[285][b][0], ua - 1020, dq - 520);
    }
    if (ᐃΔ[108]) {
      Zo.drawImage(ᐃΔ[108][b][1], ua - 80, dq - 640);
      Zo.drawImage(ᐃΔ[108][b][1], ua + 80, dq + 490);
      Zo.drawImage(ᐃΔ[108][b][2], ua - 180, dq - 700);
      Zo.drawImage(ᐃΔ[108][b][0], ua + 550, dq + 100);
      Zo.drawImage(ᐃΔ[108][b][1], ua + 450, dq + 300);
      Zo.drawImage(ᐃΔ[108][b][1], ua + 780, dq + 300);
      Zo.drawImage(ᐃΔ[108][b][2], ua + 980, dq + 200);
      Zo.drawImage(ᐃΔ[108][b][2], ua + 680, dq + 600);
      Zo.drawImage(ᐃΔ[108][b][2], ua - 380, dq + 100);
      Zo.drawImage(ᐃΔ[108][b][2], ua + 280, dq + 250);
    }
    if (ᐃΔ[110]) {
      Zo.drawImage(ᐃΔ[110][b][0], ua - 590, dq);
      Zo.drawImage(ᐃΔ[110][b][0], ua + 120, dq - 390);
      Zo.drawImage(ᐃΔ[110][b][0], ua - 270, dq + 340);
    }
    if (ᐃΔ[109]) {
      Zo.drawImage(ᐃΔ[109][b][4], ua - 700, dq - 600);
      Zo.drawImage(ᐃΔ[109][b][2], ua - 970, dq - 250);
      Zo.drawImage(ᐃΔ[109][b][5], ua - 720, dq - 200);
      Zo.drawImage(ᐃΔ[109][b][2], ua - 1020, dq + 340);
      Zo.drawImage(ᐃΔ[109][b][0], ua - 1120, dq - 0);
      Zo.drawImage(ᐃΔ[109][b][1], ua - 650, dq - 330);
      Zo.drawImage(ᐃΔ[109][b][4], ua - 495, dq - 90);
      Zo.drawImage(ᐃΔ[109][b][3], ua - 520, dq + 340);
      Zo.drawImage(ᐃΔ[109][b][2], ua + 830, dq - 520);
    }
    ᐃΔ[413];
    if (Ax && zx) {
      var c = Ax.ⲆⲆΔ.x;
      var d = Ax.ⲆⲆΔ.y;
      Ax.ⲆⲆΔ.x = ua;
      Ax.ⲆⲆΔ.y = dq;
      var e = zx.time;
      zx.time = vx.time;
      var f;
      var g = vx.items;
      g[2].x = 400;
      g[2].y = 100;
      g[2].ⵠᐃᐃⲆ(114);
      (f = g[1]).x = -500;
      f.y = 100;
      f.ⲆⵠΔⲆ[0].x = f.x - 20.5;
      f.ⲆⵠΔⲆ[0].y = f.y - 22.5;
      f.ⲆⵠΔⲆ[1].x = f.x - 35.5;
      f.ⲆⵠΔⲆ[1].y = f.y + 7.5;
      f.ⲆⵠΔⲆ[2].x = f.x + 7.5;
      f.ⲆⵠΔⲆ[2].y = f.y - 30;
      f.ⲆⵠΔⲆ[3].x = f.x + 22.5;
      f.ⲆⵠΔⲆ[3].y = f.y;
      f.ⲆⵠΔⲆ[4].x = f.x - 7.5;
      f.ⲆⵠΔⲆ[4].y = f.y + 14.5;
      for (var a = 0; f.info > a; a++) {
        f.ⲆⵠΔⲆ[a].ⵠᐃᐃⲆ(294);
      }
      (f = g[3]).x = 210;
      f.y = -290;
      f.ⲆⵠΔⲆ[0].x = f.x - 20.5;
      f.ⲆⵠΔⲆ[0].y = f.y - 22.5;
      f.ⲆⵠΔⲆ[1].x = f.x - 35.5;
      f.ⲆⵠΔⲆ[1].y = f.y + 7.5;
      f.ⲆⵠΔⲆ[2].x = f.x + 7.5;
      f.ⲆⵠΔⲆ[2].y = f.y - 30;
      f.ⲆⵠΔⲆ[3].x = f.x + 22.5;
      f.ⲆⵠΔⲆ[3].y = f.y;
      f.ⲆⵠΔⲆ[4].x = f.x - 7.5;
      f.ⲆⵠΔⲆ[4].y = f.y + 14.5;
      for (a = 0; f.info > a; a++) {
        f.ⲆⵠΔⲆ[a].ⵠᐃᐃⲆ(294);
      }
      g[0].x = 450;
      g[0].y = -100;
      g[0].ⵠⲆᐃΔⲆ(113);
      g[0].ΔⵠᐃⲆᐃ();
      Ax.ⲆⲆΔ.x = c;
      Ax.ⲆⲆΔ.y = d;
      zx.time = e;
    }
  }
  function Nc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 218;
    d.height = a * 185;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 53.135406494140625);
    e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
    e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
    e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
    e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
    e.bezierCurveTo(a * 13, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
    e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
    e.closePath();
    md(e, c[0], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 25.135406494140625);
    e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
    e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
    e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
    e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
    e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
    e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
    e.closePath();
    md(e, c[1]);
    return d;
  }
  function qc() {
    var a = 1;
    new Date().getTime();
    jm();
    Fm();
    ᐃΔ[540] = [];
    ᐃΔ[540][Cs.ⵠΔⵠ] = [];
    ᐃΔ[540][Cs.ⲆⲆⵠ] = [];
    for (var b = 0; Cs.ᐃⲆⲆΔΔⵠΔ > b; b++) {
      ᐃΔ[540][Cs.ⵠΔⵠ].push(jr(lm(a, 4 + b, "#59B8CE")));
      ᐃΔ[540][Cs.ⲆⲆⵠ].push(jr(lm(a, 4 + b, "#90DDD9")));
    }
    ᐃΔ[470] = [];
    ᐃΔ[470][Cs.ⵠΔⵠ] = [];
    ᐃΔ[470][Cs.ⲆⲆⵠ] = [];
    for (b = 0; Cs.ⲆΔΔⲆⲆⲆⲆ > b; b++) {
      ᐃΔ[470][Cs.ⵠΔⵠ].push(jr(lm(a, 4 + b, "#fff")));
      ᐃΔ[470][Cs.ⲆⲆⵠ].push(jr(lm(a, 4 + b, "#fff")));
    }
    ᐃΔ[471] = [];
    ᐃΔ[471][Cs.ⵠΔⵠ] = [];
    ᐃΔ[471][Cs.ⲆⲆⵠ] = [];
    for (b = 0; b < Cs.ⲆΔΔⲆⲆⲆⲆ; b++) {
      ᐃΔ[471][Cs.ⵠΔⵠ].push(jr(lm(a, 6 + b, "#DDCD8A")));
      ᐃΔ[471][Cs.ⲆⲆⵠ].push(jr(lm(a, 6 + b, "#155E57")));
    }
    ᐃΔ[942] = [];
    ᐃΔ[942][Cs.ⵠΔⵠ] = [];
    ᐃΔ[942][Cs.ⲆⲆⵠ] = [];
    for (b = 0; Cs.ᐃᐃⵠⲆΔᐃⵠ > b; b++) {
      ᐃΔ[942][Cs.ⵠΔⵠ].push(jr(lm(a, 4 + b, "#353326")));
      ᐃΔ[942][Cs.ⲆⲆⵠ].push(jr(lm(a, 4 + b, "#1D2526")));
    }
    ᐃΔ[201] = [];
    ᐃΔ[201][Cs.ⵠΔⵠ] = jr(kd(a * 1.5, 0, ["#ee71a9"]));
    ᐃΔ[201][Cs.ⲆⲆⵠ] = jr(kd(a * 1.5, 0, ["#ee71a9"]));
    ᐃΔ[872] = [ᐃΔ[201]];
    ᐃΔ[872][1] = [];
    ᐃΔ[872][2] = [];
    ᐃΔ[872][3] = [];
    ᐃΔ[872][4] = [];
    ᐃΔ[872][1][Cs.ⵠΔⵠ] = jr(kd(a * 1.5, 0, ["#e2d63b"]));
    ᐃΔ[872][1][Cs.ⲆⲆⵠ] = jr(kd(a * 1.5, 0, ["#e2d63b"]));
    ᐃΔ[872][2][Cs.ⵠΔⵠ] = jr(kd(a * 1.5, 0, ["#309cbd"]));
    ᐃΔ[872][2][Cs.ⲆⲆⵠ] = jr(kd(a * 1.5, 0, ["#309cbd"]));
    ᐃΔ[872][3][Cs.ⵠΔⵠ] = jr(kd(a * 1.5, 0, ["#cd232d"]));
    ᐃΔ[872][3][Cs.ⲆⲆⵠ] = jr(kd(a * 1.5, 0, ["#cd232d"]));
    ᐃΔ[872][4][Cs.ⵠΔⵠ] = jr(kd(a * 1.5, 0, ["#42b672"]));
    ᐃΔ[872][4][Cs.ⲆⲆⵠ] = jr(kd(a * 1.5, 0, ["#42b672"]));
    if (ΔⵠΔⵠ.ⲆⵠᐃⵠΔᐃᐃ("cti", ij.location.href)) {
      document.getElementById("version").innerHTML += "[CTI]";
    } else {
      jr = function (a) {
        a.loaded = 1;
        return a;
      };
    }
    ᐃΔ[797] = jr(function () {
      var a = document.createElement("canvas");
      var b = a.getContext("2d");
      a.width = 460;
      a.height = 220;
      b.fillStyle = "#3a2a0d";
      b.fillRect(0, 0, a.width, a.height);
      b.lineWidth = 4;
      b.beginPath();
      b.strokeStyle = "#513810";
      for (var c = 20; c < 220; c += 20) {
        b.moveTo(0, c);
        b.lineTo(460, c);
        b.closePath();
        b.stroke();
      }
      return a;
    }());
    ᐃΔ[108] = [];
    ᐃΔ[108][Cs.ⵠΔⵠ] = [];
    ᐃΔ[108][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[108][Cs.ⵠΔⵠ].push(jr(hm(a * 1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ᐃΔ[108][Cs.ⵠΔⵠ].push(jr(hm(a * 0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ᐃΔ[108][Cs.ⵠΔⵠ].push(jr(hm(a * 0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ᐃΔ[108][Cs.ⲆⲆⵠ].push(jr(hm(a * 1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ᐃΔ[108][Cs.ⲆⲆⵠ].push(jr(hm(a * 0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ᐃΔ[108][Cs.ⲆⲆⵠ].push(jr(hm(a * 0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ᐃΔ[111] = [];
    ᐃΔ[111][Cs.ⵠΔⵠ] = [];
    ᐃΔ[111][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[111][Cs.ⵠΔⵠ].push(jr(am(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[111][Cs.ⵠΔⵠ].push(jr(am(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[111][Cs.ⵠΔⵠ].push(jr(am(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[111][Cs.ⲆⲆⵠ].push(jr(am(a * 1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
    ᐃΔ[111][Cs.ⲆⲆⵠ].push(jr(am(a * 1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
    ᐃΔ[111][Cs.ⲆⲆⵠ].push(jr(am(a * 1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
    ᐃΔ[112] = [];
    ᐃΔ[112][Cs.ⵠΔⵠ] = [];
    ᐃΔ[112][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[112][Cs.ⵠΔⵠ].push(jr(Lu(a * 1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ᐃΔ[112][Cs.ⵠΔⵠ].push(jr(Lu(a * 0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ᐃΔ[112][Cs.ⵠΔⵠ].push(jr(Lu(a * 0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ᐃΔ[112][Cs.ⲆⲆⵠ].push(jr(Lu(a * 1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ᐃΔ[112][Cs.ⲆⲆⵠ].push(jr(Lu(a * 0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ᐃΔ[112][Cs.ⲆⲆⵠ].push(jr(Lu(a * 0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ᐃΔ[239] = [];
    ᐃΔ[239][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃⲆᐃΔⵠᐃᐃ;
    ᐃΔ[239][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃⲆⵠΔᐃⲆⵠ;
    ᐃΔ[286] = [];
    ᐃΔ[286][Cs.ⵠΔⵠ] = jr(su(a * 0.6, ["#0d1b1c"]));
    ᐃΔ[286][Cs.ⲆⲆⵠ] = jr(su(a * 0.6, ["#030d14"]));
    ᐃΔ[793] = [];
    ᐃΔ[793][Cs.ⵠΔⵠ] = jr(iu(a * 0.6, ["#2a2938", "#242330"]));
    ᐃΔ[793][Cs.ⲆⲆⵠ] = jr(iu(a * 0.6, ["#1b1e30", "#161921"]));
    ᐃΔ[820] = [];
    ᐃΔ[820][Cs.ⵠΔⵠ] = jr(Fd(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
    ᐃΔ[820][Cs.ⲆⲆⵠ] = jr(Fd(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
    ᐃΔ[821] = [];
    ᐃΔ[821][Cs.ⵠΔⵠ] = jr(Id(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
    ᐃΔ[821][Cs.ⲆⲆⵠ] = jr(Id(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
    ᐃΔ[822] = [];
    ᐃΔ[822][Cs.ⵠΔⵠ] = jr(eu(a * 0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
    ᐃΔ[822][Cs.ⲆⲆⵠ] = jr(eu(a * 0.4, ["#030d14", "#11635e", "#02373e"]));
    ᐃΔ[823] = jr(Jd(a * 0.6, ["#BB0000"]));
    ᐃΔ[824] = jr(Jd(a * 0.6, ["#DBE71C"]));
    ᐃΔ[825] = jr(Jd(a * 0.6, ["#00BB00"]));
    ᐃΔ[109] = [];
    ᐃΔ[109][Cs.ⵠΔⵠ] = [];
    ᐃΔ[109][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[109][Cs.ⵠΔⵠ].push(ou(a * 1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], false, 0));
    ᐃΔ[109][Cs.ⵠΔⵠ].push(ou(a * 1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], sn, 0));
    ᐃΔ[109][Cs.ⵠΔⵠ].push(ou(a * 0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], false, 0));
    ᐃΔ[109][Cs.ⵠΔⵠ].push(ou(a * 0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], ro, 0));
    ᐃΔ[109][Cs.ⵠΔⵠ].push(ou(a * 0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], cg, 0));
    ᐃΔ[109][Cs.ⵠΔⵠ].push(ou(a * 0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], true, 0));
    ᐃΔ[109][Cs.ⲆⲆⵠ].push(ou(a * 1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], D, 0));
    ᐃΔ[109][Cs.ⲆⲆⵠ].push(ou(a * 1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], true, 0));
    ᐃΔ[109][Cs.ⲆⲆⵠ].push(ou(a * 0.9, ["#030d14", "#0b3534", "#144443", "#174240"], Cj, 0));
    ᐃΔ[109][Cs.ⲆⲆⵠ].push(ou(a * 0.9, ["#030d14", "#0b3534", "#144443", "#174240"], true, 0));
    ᐃΔ[109][Cs.ⲆⲆⵠ].push(ou(a * 0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], cg, 0));
    ᐃΔ[109][Cs.ⲆⲆⵠ].push(ou(a * 0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 0));
    ᐃΔ[307] = [];
    ᐃΔ[307][Cs.ⵠΔⵠ] = [];
    ᐃΔ[307][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[307][Cs.ⵠΔⵠ].push(jr(qu(pu(a * 1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], false), ᐃΔ[109][Cs.ⵠΔⵠ][0])));
    ᐃΔ[307][Cs.ⵠΔⵠ].push(jr(qu(pu(a * 1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], _h), ᐃΔ[109][Cs.ⵠΔⵠ][1])));
    ᐃΔ[307][Cs.ⲆⲆⵠ].push(jr(qu(pu(a * 1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], kn), ᐃΔ[109][Cs.ⲆⲆⵠ][0])));
    ᐃΔ[307][Cs.ⲆⲆⵠ].push(jr(qu(pu(a * 1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], true), ᐃΔ[109][Cs.ⲆⲆⵠ][1])));
    ᐃΔ[307][Cs.ⵠΔⵠ].push(jr(qu(pu(a * 0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], false), ᐃΔ[109][Cs.ⵠΔⵠ][2])));
    ᐃΔ[307][Cs.ⵠΔⵠ].push(jr(qu(pu(a * 0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], Iq), ᐃΔ[109][Cs.ⵠΔⵠ][2])));
    ᐃΔ[307][Cs.ⲆⲆⵠ].push(jr(qu(pu(a * 0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], nl), ᐃΔ[109][Cs.ⲆⲆⵠ][2])));
    ᐃΔ[307][Cs.ⲆⲆⵠ].push(jr(qu(pu(a * 0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], Bk), ᐃΔ[109][Cs.ⲆⲆⵠ][3])));
    ᐃΔ[109][Cs.ⵠΔⵠ][5] = jr(ᐃΔ[109][Cs.ⵠΔⵠ][5]);
    ᐃΔ[109][Cs.ⵠΔⵠ][4] = jr(ᐃΔ[109][Cs.ⵠΔⵠ][4]);
    ᐃΔ[109][Cs.ⵠΔⵠ][3] = jr(ᐃΔ[109][Cs.ⵠΔⵠ][3]);
    ᐃΔ[109][Cs.ⵠΔⵠ][2] = jr(ᐃΔ[109][Cs.ⵠΔⵠ][2]);
    ᐃΔ[109][Cs.ⵠΔⵠ][1] = jr(ᐃΔ[109][Cs.ⵠΔⵠ][1]);
    ᐃΔ[109][Cs.ⵠΔⵠ][0] = jr(ᐃΔ[109][Cs.ⵠΔⵠ][0]);
    ᐃΔ[109][Cs.ⲆⲆⵠ][5] = jr(ᐃΔ[109][Cs.ⲆⲆⵠ][5]);
    ᐃΔ[109][Cs.ⲆⲆⵠ][4] = jr(ᐃΔ[109][Cs.ⲆⲆⵠ][4]);
    ᐃΔ[109][Cs.ⲆⲆⵠ][3] = jr(ᐃΔ[109][Cs.ⲆⲆⵠ][3]);
    ᐃΔ[109][Cs.ⲆⲆⵠ][2] = jr(ᐃΔ[109][Cs.ⲆⲆⵠ][2]);
    ᐃΔ[109][Cs.ⲆⲆⵠ][1] = jr(ᐃΔ[109][Cs.ⲆⲆⵠ][1]);
    ᐃΔ[109][Cs.ⲆⲆⵠ][0] = jr(ᐃΔ[109][Cs.ⲆⲆⵠ][0]);
    ᐃΔ[8] = [];
    ᐃΔ[8][Cs.ⵠΔⵠ] = jr(ld(4, mu(a * 0.75, Iq, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
    ᐃΔ[8][Cs.ⲆⲆⵠ] = jr(ld(4, mu(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
    ᐃΔ[1] = [];
    ᐃΔ[1][Cs.ⵠΔⵠ] = jr(ld(4, mu(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ᐃΔ[1][Cs.ⲆⲆⵠ] = jr(ld(4, mu(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
    ᐃΔ[3] = [];
    ᐃΔ[3][Cs.ⵠΔⵠ] = jr(ld(4, mu(a * 0.75, Pr, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ᐃΔ[3][Cs.ⲆⲆⵠ] = jr(ld(4, mu(a * 0.75, Bk, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
    ᐃΔ[4] = [];
    ᐃΔ[4][Cs.ⵠΔⵠ] = jr(ld(4, mu(a * 0.75, B, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ᐃΔ[4][Cs.ⲆⲆⵠ] = jr(ld(4, mu(a * 0.75, Iq, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ᐃΔ[31] = [];
    ᐃΔ[31][Cs.ⵠΔⵠ] = jr(ld(4, mu(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ᐃΔ[31][Cs.ⲆⲆⵠ] = jr(ld(4, mu(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ᐃΔ[9] = [];
    ᐃΔ[9][Cs.ⵠΔⵠ] = jr(ld(3, xu(a * 0.17, true, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
    ᐃΔ[9][Cs.ⲆⲆⵠ] = jr(ld(3, xu(a * 0.17, B, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
    ᐃΔ[199] = [];
    ᐃΔ[199][Cs.ⵠΔⵠ] = jr(ld(3, Iu(a * 0.32, ie, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
    ᐃΔ[199][Cs.ⲆⲆⵠ] = jr(ld(3, Iu(a * 0.42, true, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
    ᐃΔ[57] = [];
    ᐃΔ[57][Cs.ⵠΔⵠ] = jr(ld(3, ru(a * 0.4, ro, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
    ᐃΔ[57][Cs.ⲆⲆⵠ] = jr(ld(3, ru(a * 0.4, true, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
    ᐃΔ[0] = [];
    ᐃΔ[0][Cs.ⵠΔⵠ] = jr(ld(3, Au(a * 0.4, ie, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
    ᐃΔ[0][Cs.ⲆⲆⵠ] = jr(ld(3, Au(a * 0.4, sn, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
    ᐃΔ[5] = [];
    ᐃΔ[5][Cs.ⵠΔⵠ] = jr(ld(3, Gu(a * 0.4, Bk, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
    ᐃΔ[5][Cs.ⲆⲆⵠ] = jr(ld(3, Gu(a * 0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
    ᐃΔ[6] = [];
    ᐃΔ[6][Cs.ⵠΔⵠ] = jr(ld(3, Fu(a * 0.4, nr, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
    ᐃΔ[6][Cs.ⲆⲆⵠ] = jr(ld(3, Fu(a * 0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
    ᐃΔ[30] = [];
    ᐃΔ[30][Cs.ⵠΔⵠ] = jr(ld(3, Du(a * 0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
    ᐃΔ[30][Cs.ⲆⲆⵠ] = jr(ld(3, Du(a * 0.4, Mj, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
    ᐃΔ[285] = [];
    ᐃΔ[285][Cs.ⵠΔⵠ] = [];
    ᐃΔ[285][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[285][Cs.ⵠΔⵠ].push(jr(Qu(a * 0.9, 0, ["#0d4f35"], 0)));
    ᐃΔ[285][Cs.ⵠΔⵠ].push(jr(Qu(a * 0.9, 0, ["#0d4f35"], 1)));
    ᐃΔ[285][Cs.ⵠΔⵠ].push(jr(Qu(a * 0.9, 0, ["#0d4f35"], 2)));
    ᐃΔ[285][Cs.ⲆⲆⵠ].push(jr(Qu(a * 0.9, 0, ["#053339"], 0)));
    ᐃΔ[285][Cs.ⲆⲆⵠ].push(jr(Qu(a * 0.9, 0, ["#053339"], 1)));
    ᐃΔ[285][Cs.ⲆⲆⵠ].push(jr(Qu(a * 0.9, 0, ["#053339"], 2)));
    ᐃΔ[285][Cs.ⵠΔⵠ].push(jr(tm(a * 0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
    ᐃΔ[285][Cs.ⵠΔⵠ].push(jr(tm(a * 0.8, ["#292002", "#ba930e", "#6d5704"])));
    ᐃΔ[285][Cs.ⲆⲆⵠ].push(jr(tm(a * 0.9, ["#052919", "#0a4738", "#06321f"])));
    ᐃΔ[285][Cs.ⲆⲆⵠ].push(jr(tm(a * 0.8, ["#052918", "#08491c", "#063417"])));
    ᐃΔ[183] = [];
    ᐃΔ[183][Cs.ⵠΔⵠ] = jr(ld(Math.PI / 2, pp(a * 0.25, Zr, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
    ᐃΔ[183][Cs.ⲆⲆⵠ] = jr(ld(Math.PI / 2, pp(a * 0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
    ᐃΔ[803] = [];
    ᐃΔ[803].push(jr(ac(a * 0.25, ["#44301b", "#57442a", "#523e26"], 0)));
    ᐃΔ[803].push(jr(ac(a * 0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
    ᐃΔ[803].push(jr(ac(a * 0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
    ᐃΔ[802] = [];
    ᐃΔ[802][Cs.ⵠΔⵠ] = [];
    ᐃΔ[802][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[802][Cs.ⵠΔⵠ].push(jr(ld(Math.PI / 2, wp(a * 0.25, Pi, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
    ᐃΔ[802][Cs.ⲆⲆⵠ].push(jr(ld(Math.PI / 2, wp(a * 0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
    ᐃΔ[802][Cs.ⵠΔⵠ].push(jr(ld(Math.PI / 2, wp(a * 0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
    ᐃΔ[802][Cs.ⲆⲆⵠ].push(jr(ld(Math.PI / 2, wp(a * 0.25, Pi, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
    ᐃΔ[802][Cs.ⵠΔⵠ].push(jr(ld(Math.PI / 2, wp(a * 0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
    ᐃΔ[802][Cs.ⲆⲆⵠ].push(jr(ld(Math.PI / 2, wp(a * 0.25, Jo, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
    ᐃΔ[802][Cs.ⵠΔⵠ].push(jr(ld(Math.PI / 2, wp(a * 0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
    ᐃΔ[802][Cs.ⲆⲆⵠ].push(jr(ld(Math.PI / 2, wp(a * 0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
    ᐃΔ[110] = [];
    ᐃΔ[110][Cs.ⵠΔⵠ] = [jr(bm(a * 1.2, nq, ["#0e3022", "#0b8052", "#077b49"]))];
    ᐃΔ[110][Cs.ⲆⲆⵠ] = [jr(bm(a * 1.2, Bk, ["#030d14", "#084442", "#0a4049"]))];
    ᐃΔ[623] = [];
    ᐃΔ[623][Cs.ⵠΔⵠ] = jr(bm(a * 0.8, Mj, ["#0e3022", "#68622D", "#665329"]));
    ᐃΔ[623][Cs.ⲆⲆⵠ] = jr(bm(a * 0.8, true, ["#030d14", "#0F3A24", "#083326"]));
    ᐃΔ[189] = [];
    ᐃΔ[189][Cs.ⵠΔⵠ] = jr(jc(a * 0.5, Ja, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
    ᐃΔ[189][Cs.ⲆⲆⵠ] = jr(jc(a * 0.5, true, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
    ᐃΔ[192] = [];
    ᐃΔ[192][Cs.ⵠΔⵠ] = jr(Td(a * 0.5, ro, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
    ᐃΔ[192][Cs.ⲆⲆⵠ] = jr(Td(a * 0.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
    ᐃΔ[194] = [];
    ᐃΔ[194][Cs.ⵠΔⵠ] = jr(dc(a * 0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
    ᐃΔ[194][Cs.ⲆⲆⵠ] = jr(dc(a * 0.5, Zr, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
    ᐃΔ[287] = [];
    ᐃΔ[287][Cs.ⵠΔⵠ] = jr(bm(a * 0.8, _h, ["#1b170c", "#0b8052", "#077b49"]));
    ᐃΔ[287][Cs.ⲆⲆⵠ] = jr(bm(a * 0.8, true, ["#030d14", "#084442", "#0a4049"]));
    ᐃΔ[813] = [];
    ᐃΔ[813][Cs.ⵠΔⵠ] = jr(jc(a * 0.5, ro, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
    ᐃΔ[813][Cs.ⲆⲆⵠ] = jr(jc(a * 0.5, ie, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
    ᐃΔ[839] = [];
    ᐃΔ[839][Cs.ⵠΔⵠ] = jr(Td(a * 0.5, nr, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
    ᐃΔ[839][Cs.ⲆⲆⵠ] = jr(Td(a * 0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
    ᐃΔ[869] = [];
    ᐃΔ[869][Cs.ⵠΔⵠ] = jr(dc(a * 0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
    ᐃΔ[869][Cs.ⲆⲆⵠ] = jr(dc(a * 0.5, Iq, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
    ᐃΔ[854] = [];
    ᐃΔ[854][Cs.ⵠΔⵠ] = jr(fc(a * 0.45, true, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
    ᐃΔ[854][Cs.ⲆⲆⵠ] = jr(fc(a * 0.45, true, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
    ᐃΔ[859] = jr(fc(a * 0.65, true, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
    ᐃΔ[294] = [];
    ᐃΔ[294][Cs.ⵠΔⵠ] = jr(Pu(a * 1.4, 0, ["#ac222a", "#e6636a"]));
    ᐃΔ[294][Cs.ⲆⲆⵠ] = jr(Pu(a * 1.4, 0, ["#46195e", "#744188"]));
    ᐃΔ[288] = [];
    ᐃΔ[288][Cs.ⵠΔⵠ] = jr(cu(a * 0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
    ᐃΔ[288][Cs.ⲆⲆⵠ] = jr(cu(a * 0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
    ᐃΔ[118] = [];
    ᐃΔ[118][Cs.ⵠΔⵠ] = jr(au(a * 0.9, 0, ["#4d2d14", "#432516"]));
    ᐃΔ[118][Cs.ⲆⲆⵠ] = jr(au(a * 0.9, 0, ["#282404", "#0a0a01"]));
    ᐃΔ[113] = [];
    ᐃΔ[113][Cs.ⵠΔⵠ] = jr(_t(a * 0.9, 0, ["#4d2d14", "#432516"]));
    ᐃΔ[113][Cs.ⲆⲆⵠ] = jr(_t(a * 0.9, 0, ["#282404", "#0a0a01"]));
    ᐃΔ[289] = [];
    ᐃΔ[289][Cs.ⵠΔⵠ] = jr(gu(a * 0.9, 0, ["#efd435"]));
    ᐃΔ[289][Cs.ⲆⲆⵠ] = jr(gu(a * 0.9, 0, ["#fffabb"]));
    ᐃΔ[282] = [];
    ᐃΔ[282][Cs.ⵠΔⵠ] = jr(fu(a * 0.9, 0, ["#efd435"]));
    ᐃΔ[282][Cs.ⲆⲆⵠ] = jr(fu(a * 0.9, 0, ["#fffabb"]));
    ᐃΔ[816] = [];
    ᐃΔ[816][Cs.ⵠΔⵠ] = jr(gu(a * 0.9, 0, ["#efd435"]));
    ᐃΔ[816][Cs.ⲆⲆⵠ] = jr(gu(a * 0.9, 0, ["rgba(255, 84, 0, 1)"]));
    ᐃΔ[817] = [];
    ᐃΔ[817][Cs.ⵠΔⵠ] = jr(fu(a * 0.9, 0, ["#efd435"]));
    ᐃΔ[817][Cs.ⲆⲆⵠ] = jr(fu(a * 0.9, 0, ["#ff5704"]));
    ᐃΔ[324] = jr(Sd(a, "#ffffff"));
    ᐃΔ[301] = jr(Sd(a * 1.5, "#ffffff"));
    ᐃΔ[306] = jr(gm(a, "Your score:", a * 15, "#FFF"));
    ᐃΔ[655] = jr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 243;
      c.height = a * 172;
      cd(d, a * 119.5, a * 140.125, a * 19);
      md(d, undefined, b[1], a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 36.5, a * 20.125);
      d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
      d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
      d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
      d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
      d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
      d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
      d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
      d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
      d.closePath();
      md(d, b[0], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 15.5, a * 138.625);
      d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
      d.closePath();
      md(d, undefined, b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 13.5, a * 131.625);
      d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
      d.closePath();
      md(d, _o, b[3], a * 10);
      cd(d, a * 119.5, a * 140.125, a * 14.866068747318506);
      md(d, b[4], b[5], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 106.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
      d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
      d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
      d.closePath();
      md(d, b[6], b[7], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
      md(d, undefined, b[8], a * 5);
      d.save();
      d.translate(a * 75.5, a * 80.125);
      ud(d, a * -39, a * -40, a * 78, a * 78, a * 10);
      d.restore();
      md(d, b[9]);
      d.save();
      d.translate(a * 167, a * 80.125);
      ud(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
      d.restore();
      md(d, b[9]);
      return c;
    }(a * 0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
    ᐃΔ[656] = ⵠᐃ.ⲆΔΔᐃᐃᐃΔ;
    ᐃΔ[135] = [];
    ᐃΔ[135][Cs.ⵠΔⵠ] = jr($d(a * 1.5, Qo, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ᐃΔ[135][Cs.ⲆⲆⵠ] = jr($d(a * 1.5, Mj, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ᐃΔ[641] = [];
    ᐃΔ[641][Cs.ⵠΔⵠ] = jr(Tt(a * 2, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ᐃΔ[641][Cs.ⲆⲆⵠ] = jr(Tt(a * 2, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ᐃΔ[642] = [];
    ᐃΔ[642][Cs.ⵠΔⵠ] = jr(Wt(a * 1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ᐃΔ[642][Cs.ⲆⲆⵠ] = jr(Wt(a * 1.5, Qo, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ᐃΔ[134] = [];
    ᐃΔ[134][Cs.ⵠΔⵠ] = jr(Xd(a * 2.2, 0, ["#A89F67", "#9E8456"]));
    ᐃΔ[134][Cs.ⲆⲆⵠ] = jr(Xd(a * 2.2, 0, ["#0B4049", "#08383D"]));
    ᐃΔ[638] = [];
    ᐃΔ[638][Cs.ⵠΔⵠ] = jr(Xd(a * 2.2, 0, ["#68622D", "#665329"]));
    ᐃΔ[638][Cs.ⲆⲆⵠ] = jr(Xd(a * 2.2, 0, ["#0F3A24", "#083326"]));
    ᐃΔ[321] = [];
    ᐃΔ[321][Cs.ⵠΔⵠ] = jr(Ku(a * 0.8, 0, ["#A89F67", "#9E8456"]));
    ᐃΔ[321][Cs.ⲆⲆⵠ] = jr(Ku(a * 0.8, 0, ["#15514F", "#0F3F3D"]));
    ᐃΔ[811] = [];
    ᐃΔ[811][Cs.ⵠΔⵠ] = jr(Ku(a * 0.8, 0, ["#c67933", "#b17238"]));
    ᐃΔ[811][Cs.ⲆⲆⵠ] = jr(Ku(a * 0.8, 0, ["#043c37", "#032b23"]));
    ᐃΔ[984] = [];
    ᐃΔ[984][Cs.ⵠΔⵠ] = jr(Ku(a * 0.8, 0, ["#3a8214", "#4a9c1e"]));
    ᐃΔ[984][Cs.ⲆⲆⵠ] = jr(Ku(a * 0.8, 0, ["#032d29", "#044640"]));
    ᐃΔ[837] = [];
    ᐃΔ[837][Cs.ⵠΔⵠ] = jr(Ku(a * 0.8, 0, ["#e8e8e8", "#bbbbbb"]));
    ᐃΔ[837][Cs.ⲆⲆⵠ] = jr(Ku(a * 0.8, 0, ["#1c6161", "#07413f"]));
    ᐃΔ[848] = [];
    ᐃΔ[848][Cs.ⵠΔⵠ] = jr(Ku(a * 0.8, 0, ["#328a56", "#449573"]));
    ᐃΔ[848][Cs.ⲆⲆⵠ] = jr(Ku(a * 0.8, 0, ["#043c37", "#032b23"]));
    ᐃΔ[952] = [];
    ᐃΔ[952][Cs.ⵠΔⵠ] = jr(Ku(a * 0.8, 0, ["#c98e2f", "#a36b11"]));
    ᐃΔ[952][Cs.ⲆⲆⵠ] = jr(Ku(a * 0.8, 0, ["#043c37", "#032b23"]));
    ᐃΔ[962] = [];
    ᐃΔ[962][Cs.ⵠΔⵠ] = jr(Ku(a * 0.8, 0, ["#b22419", "#99110e"]));
    ᐃΔ[962][Cs.ⲆⲆⵠ] = jr(Ku(a * 0.8, 0, ["#04323c", "#03222b"]));
    ᐃΔ[969] = [];
    ᐃΔ[969][Cs.ⵠΔⵠ] = jr(Ku(a * 0.8, 0, ["#13a56d", "#098a58"]));
    ᐃΔ[969][Cs.ⲆⲆⵠ] = jr(Ku(a * 0.8, 0, ["#043c37", "#032b23"]));
    ᐃΔ[657] = bu(1, [{
      f: Xd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃΔ[723] = bu(1, [{
      f: _t,
      x: 0,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃΔ[724] = bu(1, [{
      f: ep,
      x: 0,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃΔ[334] = bu(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[115] = [];
    ᐃΔ[115][Cs.ⵠΔⵠ] = jr(Dd(a * 0.9, 0, ["#7d613e", "#9e7e5a"]));
    ᐃΔ[115][Cs.ⲆⲆⵠ] = jr(Dd(a * 0.9, 0, ["#084442", "#125e5a"]));
    ᐃΔ[132] = [];
    ᐃΔ[132][Cs.ⵠΔⵠ] = jr(Dd(a * 0.9, 0, ["#9E8456", "#A89F67"]));
    ᐃΔ[132][Cs.ⲆⲆⵠ] = jr(Dd(a * 0.9, 0, ["#1b6f6a", "#0d4e4c"]));
    ᐃΔ[668] = [];
    ᐃΔ[668][Cs.ⵠΔⵠ] = jr(Dd(a * 0.9, 0, ["#665329", "#68622D"]));
    ᐃΔ[668][Cs.ⲆⲆⵠ] = jr(Dd(a * 0.9, 0, ["#083326", "#0F3A24"]));
    ᐃΔ[188] = [];
    ᐃΔ[188][Cs.ⵠΔⵠ] = jr(Dd(a * 0.9, 0, ["#c67933", "#ec952d"]));
    ᐃΔ[188][Cs.ⲆⲆⵠ] = jr(Dd(a * 0.9, 0, ["#0e6553", "#094437"]));
    ᐃΔ[210] = [];
    ᐃΔ[210][Cs.ⵠΔⵠ] = jr(Dd(a * 0.9, 0, ["#375809", "#4b770e"]));
    ᐃΔ[210][Cs.ⲆⲆⵠ] = jr(Dd(a * 0.9, 0, ["#09542d", "#0d5d2f"]));
    ᐃΔ[985] = [];
    ᐃΔ[985][Cs.ⵠΔⵠ] = jr(Dd(a * 0.9, 0, ["#585809", "#72770e"]));
    ᐃΔ[985][Cs.ⲆⲆⵠ] = jr(Dd(a * 0.9, 0, ["#295209", "#305d0d"]));
    ᐃΔ[191] = [];
    ᐃΔ[191][Cs.ⵠΔⵠ] = jr(Dd(a * 0.9, 0, ["#b9b094", "#e2d2c0"]));
    ᐃΔ[191][Cs.ⲆⲆⵠ] = jr(Dd(a * 0.9, 0, ["#126366", "#0d484b"]));
    ᐃΔ[193] = [];
    ᐃΔ[193][Cs.ⵠΔⵠ] = jr(Dd(a * 0.9, 0, ["#3f8662", "#30915d"]));
    ᐃΔ[193][Cs.ⲆⲆⵠ] = jr(Dd(a * 0.9, 0, ["#0e6553", "#094437"]));
    ᐃΔ[812] = [];
    ᐃΔ[812][Cs.ⵠΔⵠ] = jr(Dd(a * 0.9, 0, ["#c79153", "#dfa868"]));
    ᐃΔ[812][Cs.ⲆⲆⵠ] = jr(Dd(a * 0.9, 0, ["#073927", "#075040"]));
    ᐃΔ[838] = [];
    ᐃΔ[838][Cs.ⵠΔⵠ] = jr(Dd(a * 0.9, 0, ["#768b5b", "#819984"]));
    ᐃΔ[838][Cs.ⲆⲆⵠ] = jr(Dd(a * 0.9, 0, ["#0c4540", "#0e5153"]));
    ᐃΔ[849] = [];
    ᐃΔ[849][Cs.ⵠΔⵠ] = jr(Dd(a * 0.9, 0, ["#567465", "#627c6e"]));
    ᐃΔ[849][Cs.ⲆⲆⵠ] = jr(Dd(a * 0.9, 0, ["#073927", "#075040"]));
    ᐃΔ[204] = [];
    ᐃΔ[204][Cs.ⵠΔⵠ] = jr(Dd(a * 0.9, 0, ["#996b3a", "#bf956b"]));
    ᐃΔ[204][Cs.ⲆⲆⵠ] = jr(Dd(a * 0.9, 0, ["#0e6553", "#094437"]));
    ᐃΔ[953] = [];
    ᐃΔ[953][Cs.ⵠΔⵠ] = jr(Dd(a * 0.9, 0, ["#7a634a", "#a68f77"]));
    ᐃΔ[953][Cs.ⲆⲆⵠ] = jr(Dd(a * 0.9, 0, ["#1e4d43", "#113c32"]));
    ᐃΔ[206] = [];
    ᐃΔ[206][Cs.ⵠΔⵠ] = jr(Dd(a * 0.9, 0, ["#99403c", "#bc796c"]));
    ᐃΔ[206][Cs.ⲆⲆⵠ] = jr(Dd(a * 0.9, 0, ["#1e434d", "#11303c"]));
    ᐃΔ[963] = [];
    ᐃΔ[963][Cs.ⵠΔⵠ] = jr(Dd(a * 0.9, 0, ["#88504e", "#b3857c"]));
    ᐃΔ[963][Cs.ⲆⲆⵠ] = jr(Dd(a * 0.9, 0, ["#253b41", "#162930"]));
    ᐃΔ[208] = [];
    ᐃΔ[208][Cs.ⵠΔⵠ] = jr(Dd(a * 0.9, 0, ["#0f8870", "#23af93"]));
    ᐃΔ[208][Cs.ⲆⲆⵠ] = jr(Dd(a * 0.9, 0, ["#032829", "#083233"]));
    ᐃΔ[970] = [];
    ᐃΔ[970][Cs.ⵠΔⵠ] = jr(Dd(a * 0.9, 0, ["#618a20", "#84a74e"]));
    ᐃΔ[970][Cs.ⲆⲆⵠ] = jr(Dd(a * 0.9, 0, ["#1f4632", "#335d47"]));
    ᐃΔ[114] = [];
    ᐃΔ[114][Cs.ⵠΔⵠ] = jr(_d(a * 1.2, nq, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
    ᐃΔ[114][Cs.ⲆⲆⵠ] = jr(_d(a * 1.2, B, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
    ᐃΔ[162] = [];
    ᐃΔ[162][Cs.ⵠΔⵠ] = jr(em(a * 1, ie, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ᐃΔ[162][Cs.ⲆⲆⵠ] = jr(em(a * 1, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ᐃΔ[165] = [];
    ᐃΔ[165][Cs.ⵠΔⵠ] = jr(im(a * 1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ᐃΔ[165][Cs.ⲆⲆⵠ] = jr(im(a * 1, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ᐃΔ[122] = [];
    ᐃΔ[122][Cs.ⵠΔⵠ] = jr(dm(a * 1, Mj, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ᐃΔ[122][Cs.ⲆⲆⵠ] = jr(dm(a * 1, B, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ᐃΔ[163] = [];
    ᐃΔ[163][Cs.ⵠΔⵠ] = jr(dm(a * 1, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ᐃΔ[163][Cs.ⲆⲆⵠ] = jr(dm(a * 1, ie, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ᐃΔ[164] = [];
    ᐃΔ[164][Cs.ⵠΔⵠ] = jr(pm(a * 1, ae, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ᐃΔ[164][Cs.ⲆⲆⵠ] = jr(pm(a * 1, $a, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ᐃΔ[160] = [];
    ᐃΔ[160][Cs.ⵠΔⵠ] = jr(np(a * 0.8, $a, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ᐃΔ[160][Cs.ⲆⲆⵠ] = jr(np(a * 0.8, Pr, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ᐃΔ[169] = [];
    ᐃΔ[169][Cs.ⵠΔⵠ] = jr(Wc(a * 0.8, true, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ᐃΔ[169][Cs.ⲆⲆⵠ] = jr(Wc(a * 0.8, nr, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ᐃΔ[170] = [];
    ᐃΔ[170][Cs.ⵠΔⵠ] = jr(hc(a * 0.8, true, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ᐃΔ[170][Cs.ⲆⲆⵠ] = jr(hc(a * 0.8, ge, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ᐃΔ[168] = [];
    ᐃΔ[168][Cs.ⵠΔⵠ] = jr(Dm(a * 0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ᐃΔ[168][Cs.ⲆⲆⵠ] = jr(Dm(a * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ᐃΔ[123] = [];
    ᐃΔ[123][Cs.ⵠΔⵠ] = jr(Dm(a * 0.8, Zr, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ᐃΔ[123][Cs.ⲆⲆⵠ] = jr(Dm(a * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ᐃΔ[166] = [];
    ᐃΔ[166][Cs.ⵠΔⵠ] = jr(ym(a * 1.5, Bk, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
    ᐃΔ[166][Cs.ⲆⲆⵠ] = jr(ym(a * 1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ᐃΔ[336] = [];
    ᐃΔ[336][Cs.ⵠΔⵠ] = jr(ym(a * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[336][Cs.ⲆⲆⵠ] = jr(ym(a * 1, cg, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
    ᐃΔ[171] = [];
    ᐃΔ[171][Cs.ⵠΔⵠ] = jr(fm(a * 1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
    ᐃΔ[171][Cs.ⲆⲆⵠ] = jr(fm(a * 1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
    ᐃΔ[373] = [];
    ᐃΔ[373][Cs.ⵠΔⵠ] = jr(fm(a * 1, D, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[373][Cs.ⲆⲆⵠ] = jr(fm(a * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃΔ[124] = [];
    ᐃΔ[124][Cs.ⵠΔⵠ] = jr(fm(a * 1.5, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ᐃΔ[124][Cs.ⲆⲆⵠ] = jr(fm(a * 1.5, Gn, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ᐃΔ[500] = [];
    ᐃΔ[500][Cs.ⵠΔⵠ] = jr(fm(a * 1, ln, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[500][Cs.ⲆⲆⵠ] = jr(fm(a * 1, rh, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃΔ[172] = [];
    ᐃΔ[172][Cs.ⵠΔⵠ] = jr(Cm(a * 1.5, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
    ᐃΔ[172][Cs.ⲆⲆⵠ] = jr(Cm(a * 1.5, Bk, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
    ᐃΔ[376] = [];
    ᐃΔ[376][Cs.ⵠΔⵠ] = jr(Cm(a * 1, kn, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[376][Cs.ⲆⲆⵠ] = jr(Cm(a * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃΔ[173] = [];
    ᐃΔ[173][Cs.ⵠΔⵠ] = jr(zm(a * 1.5, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ᐃΔ[173][Cs.ⲆⲆⵠ] = jr(zm(a * 1.5, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ᐃΔ[379] = [];
    ᐃΔ[379][Cs.ⵠΔⵠ] = jr(zm(a * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[379][Cs.ⲆⲆⵠ] = jr(zm(a * 1, Ma, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃΔ[167] = [];
    ᐃΔ[167][Cs.ⵠΔⵠ] = jr(Cp(a * 0.5, true, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ᐃΔ[167][Cs.ⲆⲆⵠ] = jr(Cp(a * 0.5, Mj, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
    ᐃΔ[691] = [];
    ᐃΔ[691][Cs.ⵠΔⵠ] = jr(hp(a * 0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
    ᐃΔ[691][Cs.ⲆⲆⵠ] = jr(hp(a * 0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
    ᐃΔ[264] = [];
    ᐃΔ[264][Cs.ⵠΔⵠ] = jr(Qd(a * 0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
    ᐃΔ[264][Cs.ⲆⲆⵠ] = jr(Qd(a * 0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
    ᐃΔ[260] = [];
    ᐃΔ[260][Cs.ⵠΔⵠ] = jr(ld(Math.PI, Hd(a * 0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
    ᐃΔ[260][Cs.ⲆⲆⵠ] = jr(ld(Math.PI, Hd(a * 0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
    ᐃΔ[266] = jr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 450;
      c.height = a * 470;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 226.5, a * 91.546875);
      d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
      d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
      d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
      d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
      d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
      d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
      d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
      d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
      d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
      d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
      d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
      d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
      d.closePath();
      md(d, bg, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 129.546875);
      d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
      d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
      d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
      d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
      d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
      d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
      d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
      d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
      d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
      d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
      d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
      d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
      d.closePath();
      md(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 160.546875);
      d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
      d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
      d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
      d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
      d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
      d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
      d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
      d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
      d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
      d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
      d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
      d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
      d.closePath();
      md(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 205.5, a * 194.546875);
      d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
      d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
      d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
      d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
      d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
      d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
      d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
      d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
      d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
      d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
      d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
      d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
      d.closePath();
      md(d, xk, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149.5, a * 93.546875);
      d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
      d.closePath();
      md(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 66.546875);
      d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
      d.closePath();
      md(d, Ur, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 302.5, a * 88.546875);
      d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
      d.closePath();
      md(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 361.5, a * 147.546875);
      d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
      d.closePath();
      md(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 379.5, a * 225.546875);
      d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
      d.closePath();
      md(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 90.5, a * 147.546875);
      d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
      d.closePath();
      md(d, Us, b[0], 4);
      return c;
    }(a * 0.6, ["#FFFFFF"]));
    ᐃΔ[299] = [];
    ᐃΔ[299][Cs.ⵠΔⵠ] = jr(Ld(a * 1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
    ᐃΔ[299][Cs.ⲆⲆⵠ] = jr(Ld(a * 1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
    ᐃΔ[10] = [];
    ᐃΔ[10][Cs.ⵠΔⵠ] = jr(_m(a * 0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
    ᐃΔ[10][Cs.ⲆⲆⵠ] = jr(_m(a * 0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
    ᐃΔ[11] = [];
    ᐃΔ[11][Cs.ⵠΔⵠ] = jr(km(a * 0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
    ᐃΔ[11][Cs.ⲆⲆⵠ] = jr(km(a * 0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
    ᐃΔ[40] = [];
    ᐃΔ[40][Cs.ⵠΔⵠ] = jr(Tp(a * 0.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
    ᐃΔ[40][Cs.ⲆⲆⵠ] = jr(Tp(a * 0.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
    ᐃΔ[41] = [];
    ᐃΔ[41][Cs.ⵠΔⵠ] = jr(ju(a * 0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
    ᐃΔ[41][Cs.ⲆⲆⵠ] = jr(ju(a * 0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
    ᐃΔ[42] = [];
    ᐃΔ[42][Cs.ⵠΔⵠ] = jr(hu(a * 0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
    ᐃΔ[42][Cs.ⲆⲆⵠ] = jr(hu(a * 0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
    ᐃΔ[716] = [];
    ᐃΔ[716][Cs.ⵠΔⵠ] = jr(kc(a * 0.42, ie, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
    ᐃΔ[716][Cs.ⲆⲆⵠ] = jr(kc(a * 0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
    ᐃΔ[720] = [];
    ᐃΔ[720][Cs.ⵠΔⵠ] = jr(sc(a * 0.9, ["#e4c027"]));
    ᐃΔ[720][Cs.ⲆⲆⵠ] = jr(sc(a * 0.9, ["#D8E57F"]));
    ᐃΔ[144] = [];
    ᐃΔ[144][Cs.ⵠΔⵠ] = jr(Jp(a * 0.42, B, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
    ᐃΔ[144][Cs.ⲆⲆⵠ] = jr(Jp(a * 0.42, Gn, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
    ᐃΔ[722] = jr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 149;
      c.height = a * 356;
      d.save();
      d.translate(a * 74.5, a * 177.5);
      ud(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
      d.restore();
      md(d, b[0], b[1], a * 4);
      d.save();
      d.translate(a * 74.5, a * 177.5);
      ud(d, a * -57.5, a * 50.5, a * 100, a * 105, a * 10);
      d.restore();
      md(d, b[6], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 125);
      d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
      d.closePath();
      md(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 120);
      d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
      d.closePath();
      md(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 228);
      d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
      d.closePath();
      md(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 224);
      d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
      d.closePath();
      md(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 72, a * 68.5);
      ud(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
      d.restore();
      md(d, b[4]);
      d.save();
      d.translate(a * 72, a * 175.5);
      ud(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
      d.restore();
      md(d, b[4]);
      d.save();
      d.translate(a * 72, a * 279.5);
      ud(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
      d.restore();
      md(d, b[4]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 338);
      d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
      d.closePath();
      md(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 333);
      d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
      d.closePath();
      md(d, b[3], b[3], a * 10);
      return c;
    }(a * 1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
    ᐃΔ[407] = [];
    ᐃΔ[407][Cs.ⵠΔⵠ] = jr(Tm(a * 0.5, Mj, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
    ᐃΔ[407][Cs.ⲆⲆⵠ] = jr(Tm(a * 0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
    ᐃΔ[119] = [];
    ᐃΔ[119][Cs.ⵠΔⵠ] = jr(wm(a * 0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
    ᐃΔ[119][Cs.ⲆⲆⵠ] = jr(wm(a * 0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
    ᐃΔ[411] = jr(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      ud(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      md(e, c[0], c[1], 4);
      return d;
    }(a * 0.8, 0, ["#5f6061", "#939393"]));
    ᐃΔ[412] = bu(1, [{
      f: _t,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
    ᐃΔ[198] = [];
    ᐃΔ[198][Cs.ⵠΔⵠ] = jr(Mm(a * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ᐃΔ[198][Cs.ⲆⲆⵠ] = jr(Mm(a * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ᐃΔ[913] = [];
    ᐃΔ[913][Cs.ⵠΔⵠ] = jr(xm(a * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ᐃΔ[913][Cs.ⲆⲆⵠ] = jr(xm(a * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ᐃΔ[18] = [];
    ᐃΔ[18][Cs.ⵠΔⵠ] = jr(ld(3, Zm(a * 0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
    ᐃΔ[18][Cs.ⲆⲆⵠ] = jr(ld(3, Zm(a * 0.7, Iq, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
    ᐃΔ[12] = [];
    ᐃΔ[12][Cs.ⵠΔⵠ] = jr(ld(3, rp(a * 0.7, _h, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
    ᐃΔ[12][Cs.ⲆⲆⵠ] = jr(ld(3, rp(a * 0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
    ᐃΔ[13] = [];
    ᐃΔ[13][Cs.ⵠΔⵠ] = jr(ld(3, vc(a * 0.65, Mj, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
    ᐃΔ[13][Cs.ⲆⲆⵠ] = jr(ld(3, vc(a * 0.65, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
    ᐃΔ[14] = [];
    ᐃΔ[14][Cs.ⵠΔⵠ] = jr(ld(3, Pp(a * 0.67, Mj, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
    ᐃΔ[14][Cs.ⲆⲆⵠ] = jr(ld(3, Pp(a * 0.67, true, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
    ᐃΔ[15] = [];
    ᐃΔ[15][Cs.ⵠΔⵠ] = jr(ld(3, yc(a * 0.67, Ja, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
    ᐃΔ[15][Cs.ⲆⲆⵠ] = jr(ld(3, yc(a * 0.67, Iq, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
    ᐃΔ[33] = [];
    ᐃΔ[33][Cs.ⵠΔⵠ] = jr(ld(3, bp(a * 0.67, true, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
    ᐃΔ[33][Cs.ⲆⲆⵠ] = jr(ld(3, bp(a * 0.67, nr, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
    ᐃΔ[16] = [];
    ᐃΔ[16][Cs.ⵠΔⵠ] = jr(ld(3, Em(a * 1, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
    ᐃΔ[16][Cs.ⲆⲆⵠ] = jr(ld(3, Em(a * 1, true, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
    ᐃΔ[35] = [];
    ᐃΔ[35][Cs.ⵠΔⵠ] = jr(ld(3, Km(a * 1, Ja, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ᐃΔ[35][Cs.ⲆⲆⵠ] = jr(ld(3, Km(a * 1, true, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
    ᐃΔ[55] = [];
    ᐃΔ[55][Cs.ⵠΔⵠ] = jr(ld(3, Rm(a * 0.5, true, ["#0d1b1c", "#939393", "#5f6061"])));
    ᐃΔ[55][Cs.ⲆⲆⵠ] = jr(ld(3, Rm(a * 0.5, nr, ["#030d14", "#485e66", "#1f343f"])));
    ᐃΔ[45] = [];
    ᐃΔ[45][Cs.ⵠΔⵠ] = jr(ld(3, Jc(a * 1, Gn, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
    ᐃΔ[45][Cs.ⲆⲆⵠ] = jr(ld(3, Jc(a * 1, Iq, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
    ᐃΔ[36] = [];
    ᐃΔ[36][Cs.ⵠΔⵠ] = jr(ld(3, Km(a * 1, B, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ᐃΔ[36][Cs.ⲆⲆⵠ] = jr(ld(3, Km(a * 1, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
    ᐃΔ[37] = [];
    ᐃΔ[37][Cs.ⵠΔⵠ] = jr(ld(3, Km(a * 1, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ᐃΔ[37][Cs.ⲆⲆⵠ] = jr(ld(3, Km(a * 1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ᐃΔ[38] = [];
    ᐃΔ[38][Cs.ⵠΔⵠ] = jr(ld(3, Km(a * 1, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ᐃΔ[38][Cs.ⲆⲆⵠ] = jr(ld(3, Km(a * 1, nq, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ᐃΔ[148] = [];
    ᐃΔ[148][Cs.ⵠΔⵠ] = jr(Hm(a * 0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
    ᐃΔ[148][Cs.ⲆⲆⵠ] = jr(Hm(a * 0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
    ᐃΔ[536] = [];
    ᐃΔ[536].push(jr(Hm(a * 0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
    ᐃΔ[536].push(jr(Hm(a * 0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
    ᐃΔ[536].push(jr(Hm(a * 0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
    ᐃΔ[538] = [];
    ᐃΔ[538].push(ᐃΔ[536][0]);
    ᐃΔ[538].push(ᐃΔ[536][0]);
    ᐃΔ[538].push(ᐃΔ[536][0]);
    ᐃΔ[158] = [];
    ᐃΔ[158][Cs.ⵠΔⵠ] = jr(Wm(a * 0.06, 0, ["#141414", "#c4a23a", "#816511"]));
    ᐃΔ[158][Cs.ⲆⲆⵠ] = jr(Wm(a * 0.06, 0, ["#030d14", "#2b6664", "#133d3c"]));
    ᐃΔ[535] = [];
    ᐃΔ[535].push(jr(Wm(a * 0.08, 0, ["#141414", "#c4a23a", "#816511"])));
    ᐃΔ[535].push(jr(Wm(a * 0.08, 0, ["#141414", "#e2bd4e", "#a38018"])));
    ᐃΔ[535].push(jr(Wm(a * 0.08, 0, ["#141414", "#b0902e", "#634d09"])));
    ᐃΔ[149] = bu(1.5, [{
      f: Um,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ᐃΔ[526] = [];
    ᐃΔ[526][Cs.ⵠΔⵠ] = jr(Qm(a * 0.8, 0, ["#347f93", "#54a4ba"]));
    ᐃΔ[526][Cs.ⲆⲆⵠ] = jr(Qm(a * 0.8, 0, ["#98ede3", "#94f2e7"]));
    ᐃΔ[527] = [];
    ᐃΔ[527][Cs.ⵠΔⵠ] = jr(ip(a * 0.8, Qo, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
    ᐃΔ[527][Cs.ⲆⲆⵠ] = jr(ip(a * 0.8, nq, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
    ᐃΔ[528] = [];
    ᐃΔ[528][Cs.ⵠΔⵠ] = jr(Vc(a * 0.8, Zr, ["#a9e4ed", "#86d4e0"]));
    ᐃΔ[528][Cs.ⲆⲆⵠ] = jr(Vc(a * 0.8, re, ["#83ddd4", "#485e66"]));
    ᐃΔ[151] = [];
    ᐃΔ[151][Cs.ⵠΔⵠ] = jr(up(a * 0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
    ᐃΔ[151][Cs.ⲆⲆⵠ] = jr(up(a * 0.8, nq, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
    ᐃΔ[1192] = [];
    ᐃΔ[1192][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃⲆⵠᐃΔΔⵠ;
    ᐃΔ[1192][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔⵠⲆᐃΔⵠᐃ;
    ᐃΔ[1193] = [];
    ᐃΔ[1193][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃᐃᐃⵠᐃΔⲆ;
    ᐃΔ[1193][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃΔΔΔᐃΔ;
    ᐃΔ[1194] = [];
    ᐃΔ[1194][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆᐃⲆΔⵠᐃᐃ;
    ᐃΔ[1194][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃΔⲆΔⵠⲆ;
    ᐃΔ[152] = [];
    ᐃΔ[152][Cs.ⵠΔⵠ] = ⵠᐃ.ΔΔⵠⲆⲆⵠⲆ;
    ᐃΔ[152][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠⲆΔᐃᐃᐃ;
    ᐃΔ[1198] = [];
    ᐃΔ[1198][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃⵠⵠⲆⵠᐃⲆ;
    ᐃΔ[1198][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃⲆⵠΔᐃΔ;
    ᐃΔ[153] = [];
    ᐃΔ[153][Cs.ⵠΔⵠ] = ⵠᐃ.ΔΔᐃⲆⲆΔⲆ;
    ᐃΔ[153][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃΔⵠΔΔᐃⲆ;
    ᐃΔ[1202] = [];
    ᐃΔ[1202][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⲆⵠⵠⵠᐃᐃ;
    ᐃΔ[1202][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠΔᐃᐃⲆⵠᐃ;
    ᐃΔ[154] = [];
    ᐃΔ[154][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆᐃⲆⲆⲆΔⵠ;
    ᐃΔ[154][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⵠⲆΔΔΔ;
    ᐃΔ[1206] = [];
    ᐃΔ[1206][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⲆⵠᐃΔΔΔ;
    ᐃΔ[1206][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃⵠⵠⵠⵠΔⲆ;
    ᐃΔ[155] = [];
    ᐃΔ[155][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃᐃΔᐃᐃΔⵠ;
    ᐃΔ[155][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔⲆⲆⵠΔᐃΔ;
    ᐃΔ[1210] = [];
    ᐃΔ[1210][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⲆΔΔⵠⲆᐃ;
    ᐃΔ[1210][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠⲆⲆⵠⵠⲆΔ;
    ᐃΔ[156] = [];
    ᐃΔ[156][Cs.ⵠΔⵠ] = ⵠᐃ.ΔⲆᐃΔᐃΔᐃ;
    ᐃΔ[156][Cs.ⲆⲆⵠ] = ⵠᐃ.ᐃᐃⵠⲆΔⵠⲆ;
    ᐃΔ[1214] = [];
    ᐃΔ[1214][Cs.ⵠΔⵠ] = ⵠᐃ.ᐃⵠΔⲆᐃⲆΔ;
    ᐃΔ[1214][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⲆΔⵠⲆⵠ;
    ᐃΔ[157] = [];
    ᐃΔ[157][Cs.ⵠΔⵠ] = ⵠᐃ.ⲆΔⲆᐃⲆᐃⵠ;
    ᐃΔ[157][Cs.ⲆⲆⵠ] = ⵠᐃ.ⲆⲆⵠᐃⵠⵠⵠ;
    ᐃΔ[245] = [];
    ᐃΔ[245][Cs.ⵠΔⵠ] = ⵠᐃ.ⵠⲆⵠΔΔⲆⲆ;
    ᐃΔ[245][Cs.ⲆⲆⵠ] = ⵠᐃ.ΔⲆΔΔᐃΔⲆ;
    ᐃΔ[246] = ⵠᐃ.ΔᐃΔΔⲆΔⲆ;
    ᐃΔ[159] = [];
    ᐃΔ[159][Cs.ⵠΔⵠ] = jr(Sc(a * 0.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
    ᐃΔ[159][Cs.ⲆⲆⵠ] = jr(Sc(a * 0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
    ᐃΔ[558] = jr(Xc(a * 0.3, ["#092813", "#1f773d"], 0));
    ᐃΔ[559] = jr(Xc(a * 0.3, ["#092813", "#1f773d"], 1));
    ᐃΔ[885] = jr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 60;
      c.height = a * 60;
      d.translate(a * -25, a * -25);
      d.translate(0, a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      md(d, b[0]);
      d.translate(0, a * -5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      md(d, b[1]);
      return c;
    }(a * 0.6, ["#092813", "#1f773d"]));
    ᐃΔ[556] = [];
    ᐃΔ[556].push(jr(fp(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
    ᐃΔ[556].push(jr(fp(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
    ᐃΔ[556].push(jr(fp(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
    ᐃΔ[560] = [];
    var c = jr(fp(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
    ᐃΔ[560].push(c);
    ᐃΔ[560].push(c);
    ᐃΔ[560].push(c);
    ᐃΔ[557] = [];
    ᐃΔ[557].push(jr(fp(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
    ᐃΔ[557].push(jr(fp(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
    ᐃΔ[557].push(jr(fp(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
    ᐃΔ[681] = jr(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 170;
      var g = b * 172;
      var a = f / 2;
      var i = g / 2;
      d.width = f;
      d.height = g;
      e.translate(a, i);
      e.save();
      for (var j = 0; j < 10; j++) {
        e.rotate(Math.PI / 5);
        e.save();
        e.translate(b * 65, 0);
        vd(e, 3, b * 18, b * 4);
        md(e, c[0]);
        e.restore();
      }
      e.restore();
      cd(e, 0, 0, b * 40);
      md(e, undefined, c[0], b * 6);
      cd(e, 0, 0, b * 20);
      md(e, c[0]);
      return d;
    }(a * 0.3, ["#FFFFFF"]));
    ᐃΔ[794] = jr(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 130;
      var g = b * 142;
      var a = f / 2;
      var h = g / 2;
      d.width = f;
      d.height = g;
      cd(e, a, h, b * 40);
      md(e, zo, c[0], b * 7);
      cd(e, a, h, b * 30);
      md(e, _o, c[0], b * 7);
      cd(e, a, h, b * 20);
      md(e, c[0]);
      return d;
    }(a * 0.3, ["#FFFFFF"]));
    ᐃΔ[562] = jr(Xc(a * 0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
    ᐃΔ[667] = jr(ld(Math.PI / 5, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 316;
      c.height = a * 365;
      d.save();
      d.translate(a * 156.07142639160156, a * 51.81248474121094);
      d.rotate(0);
      ud(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
      d.restore();
      md(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
      d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
      d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
      d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
      d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
      d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
      d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
      d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
      d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
      d.closePath();
      md(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
      d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
      d.closePath();
      md(d, b[0], b[0], a * 15);
      return c;
    }(a * 0.2, ["#FFFFFF"])));
    ᐃΔ[43] = [];
    ᐃΔ[43][Cs.ⵠΔⵠ] = jr(mp(a * 0.85, ro, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
    ᐃΔ[43][Cs.ⲆⲆⵠ] = jr(mp(a * 0.85, _h, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
    ᐃΔ[561] = [];
    ᐃΔ[561].push(jr(fp(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
    ᐃΔ[561].push(jr(fp(a * 0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
    ᐃΔ[561].push(jr(fp(a * 0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
    ᐃΔ[83] = [];
    ᐃΔ[83][Cs.ⵠΔⵠ] = jr(Fc(a * 0.37, 0, ["#2a2938", "#242330", "#313041"]));
    ᐃΔ[83][Cs.ⲆⲆⵠ] = jr(Fc(a * 0.37, 0, ["#1b1e30", "#161921", "#252f3e"]));
    ᐃΔ[85] = [];
    ᐃΔ[85][Cs.ⵠΔⵠ] = jr(ic(a * 0.17, 0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
    ᐃΔ[85][Cs.ⲆⲆⵠ] = jr(ic(a * 0.17, 0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
    ᐃΔ[86] = [];
    ᐃΔ[86][Cs.ⵠΔⵠ] = jr(Ic(a * 0.55, Iq, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
    ᐃΔ[86][Cs.ⲆⲆⵠ] = jr(Ic(a * 0.55, ge, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
    ᐃΔ[84] = [];
    ᐃΔ[84][Cs.ⵠΔⵠ] = jr(Ic(a * 0.55, true, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
    ᐃΔ[84][Cs.ⲆⲆⵠ] = jr(Ic(a * 0.55, Bk, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
    ᐃΔ[77] = [];
    ᐃΔ[77][Cs.ⵠΔⵠ] = jr($m(a * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
    ᐃΔ[77][Cs.ⲆⲆⵠ] = jr($m(a * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
    ᐃΔ[78] = [];
    ᐃΔ[78][Cs.ⵠΔⵠ] = jr($m(a * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
    ᐃΔ[78][Cs.ⲆⲆⵠ] = jr($m(a * 0.2, ae, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
    ᐃΔ[79] = [];
    ᐃΔ[79][Cs.ⵠΔⵠ] = jr($m(a * 0.2, sn, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
    ᐃΔ[79][Cs.ⲆⲆⵠ] = jr($m(a * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
    ᐃΔ[61] = [];
    ᐃΔ[61][Cs.ⵠΔⵠ] = jr(Jm(a * 0.24, ro, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    ᐃΔ[61][Cs.ⲆⲆⵠ] = jr(Jm(a * 0.24, Iq, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
    ᐃΔ[59] = [];
    ᐃΔ[59][Cs.ⵠΔⵠ] = jr(Ap(a * 0.32, B, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
    ᐃΔ[59][Cs.ⲆⲆⵠ] = jr(Ap(a * 0.32, Zr, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
    ᐃΔ[62] = [];
    ᐃΔ[62][Cs.ⵠΔⵠ] = jr(ld(3, bc(a * 0.9, Qo, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
    ᐃΔ[62][Cs.ⲆⲆⵠ] = jr(ld(3, bc(a * 0.9, true, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
    ᐃΔ[750] = [];
    ᐃΔ[750][Cs.ⵠΔⵠ] = jr(ld(3, bc(a * 1, true, [undefined, bg, undefined, "#c8efef", "#c8efef"])));
    ᐃΔ[750][Cs.ⲆⲆⵠ] = jr(ld(3, bc(a * 1, re, [undefined, lr, xk, "#87d2e6", "#87d2e6"])));
    ᐃΔ[755] = [];
    ᐃΔ[755].push(jr(xp(a * 0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
    ᐃΔ[755].push(jr(xp(a * 0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
    ᐃΔ[755].push(jr(xp(a * 0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
    ᐃΔ[795] = [];
    ᐃΔ[795].push(jr(Hc(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
    ᐃΔ[795].push(jr(Hc(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ᐃΔ[795].push(jr(Hc(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ᐃΔ[782] = [];
    ᐃΔ[782].push(jr(lu(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
    ᐃΔ[782].push(jr(lu(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
    ᐃΔ[782].push(jr(lu(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
    ᐃΔ[783] = [];
    ᐃΔ[783].push(jr(lu(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
    ᐃΔ[783].push(jr(lu(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
    ᐃΔ[783].push(jr(lu(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
    ᐃΔ[46] = [];
    ᐃΔ[46][Cs.ⵠΔⵠ] = jr(ld(3, mc(a * 0.7, true, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
    ᐃΔ[46][Cs.ⲆⲆⵠ] = jr(ld(3, mc(a * 0.7, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
    ᐃΔ[50] = [];
    ᐃΔ[50][Cs.ⵠΔⵠ] = jr(ld(3, mc(a * 0.7, Mj, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
    ᐃΔ[50][Cs.ⲆⲆⵠ] = jr(ld(3, mc(a * 0.7, _h, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
    ᐃΔ[51] = [];
    ᐃΔ[51][Cs.ⵠΔⵠ] = jr(ld(3, mc(a * 0.7, Bk, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
    ᐃΔ[51][Cs.ⲆⲆⵠ] = jr(ld(3, mc(a * 0.7, Zr, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
    ᐃΔ[52] = [];
    ᐃΔ[52][Cs.ⵠΔⵠ] = jr(ld(3, mc(a * 0.7, nr, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
    ᐃΔ[52][Cs.ⲆⲆⵠ] = jr(ld(3, mc(a * 0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
    ᐃΔ[592] = [];
    ᐃΔ[592].push(jr(Oc(a * 0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
    ᐃΔ[592].push(jr(Oc(a * 0.7, ["#524712", "#c7b11c", "#d9ba18"])));
    ᐃΔ[592].push(jr(Oc(a * 0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
    ᐃΔ[326] = jr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 188;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
      d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
      d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
      d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
      d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
      d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
      d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
      d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
      d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
      d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
      d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
      d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
      d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
      d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
      d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
      d.closePath();
      md(d, b[0], b[0], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
      d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
      d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
      d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
      d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
      d.closePath();
      md(d, b[0], b[0], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
      d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
      d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
      d.closePath();
      md(d, b[0], b[0], a * 2);
      return c;
    }(a * 1.1, ["#BB0000"]));
    ᐃΔ[333] = jr(ld(Math.PI, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 238;
      c.height = a * 230;
      d.translate(a * -93, a * -110);
      cd(d, a * 213.5, a * 256.75, a * 75);
      md(d, b);
      cd(d, a * 213.5, a * 175.75, a * 25);
      md(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 156.5, a * 137.75);
      d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217.5, a * 178.75);
      d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 130.5, a * 124.75);
      d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 183.75);
      d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107.5, a * 213.75);
      d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 212.5, a * 187.75);
      d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 102.5, a * 258.75);
      d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 192.75);
      d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 219.5, a * 158.75);
      d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 210.5, a * 160.75);
      d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      return c;
    }(a * 0.9, "#BB0000")));
    ᐃΔ[23] = [];
    ᐃΔ[23][Cs.ⵠΔⵠ] = jr(Bc(a * 0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
    ᐃΔ[23][Cs.ⲆⲆⵠ] = jr(Bc(a * 0.55, $a, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
    ᐃΔ[58] = [];
    ᐃΔ[58][Cs.ⵠΔⵠ] = jr(rc(a * 0.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
    ᐃΔ[58][Cs.ⲆⲆⵠ] = jr(rc(a * 0.55, nr, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
    ᐃΔ[25] = [];
    ᐃΔ[25][Cs.ⵠΔⵠ] = jr($c(a * 0.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
    ᐃΔ[25][Cs.ⲆⲆⵠ] = jr($c(a * 0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
    ᐃΔ[26] = [];
    ᐃΔ[26][Cs.ⵠΔⵠ] = jr(gp(a * 0.58, ro, ["#dbce71", "#b29c32", "#c4bc51"]));
    ᐃΔ[26][Cs.ⲆⲆⵠ] = jr(gp(a * 0.58, true, ["#2b7c57", "#15543c", "#1a7961"]));
    ᐃΔ[27] = [];
    ᐃΔ[27][Cs.ⵠΔⵠ] = jr(Kc(a * 0.69, Mj, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
    ᐃΔ[27][Cs.ⲆⲆⵠ] = jr(Kc(a * 0.69, true, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
    ᐃΔ[413] = [];
    ᐃΔ[413][Cs.ⵠΔⵠ] = [];
    ᐃΔ[413][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[413][Cs.ⵠΔⵠ].push(jr(vp(a * 1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
    ᐃΔ[413][Cs.ⵠΔⵠ].push(jr(Pc(a * 1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
    ᐃΔ[413][Cs.ⵠΔⵠ].push(jr(ap(a * 1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
    ᐃΔ[413][Cs.ⲆⲆⵠ].push(jr(vp(a * 1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
    ᐃΔ[413][Cs.ⲆⲆⵠ].push(jr(Pc(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
    ᐃΔ[413][Cs.ⲆⲆⵠ].push(jr(ap(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
    ᐃΔ[449] = [];
    ᐃΔ[449][Cs.ⵠΔⵠ] = jr(Sm(a * 1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
    ᐃΔ[449][Cs.ⲆⲆⵠ] = jr(Sm(a * 1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
    ᐃΔ[451] = [];
    ᐃΔ[451][Cs.ⵠΔⵠ] = jr(Dc(a * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ᐃΔ[451][Cs.ⲆⲆⵠ] = jr(Dc(a * 1, ["#050505", "#327570", "#021724", "#200333"]));
    ᐃΔ[452] = [];
    ᐃΔ[452][Cs.ⵠΔⵠ] = jr(Qc(a * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ᐃΔ[452][Cs.ⲆⲆⵠ] = jr(Qc(a * 1, ["#050505", "#327570", "#021724", "#200333"]));
    ᐃΔ[243] = [];
    ᐃΔ[243][Cs.ⵠΔⵠ] = [];
    ᐃΔ[243][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[243][Cs.ⵠΔⵠ] = [ⵠᐃ.ᐃΔᐃᐃᐃⵠᐃ, ⵠᐃ.ⵠⵠⵠᐃΔⵠⲆ, ⵠᐃ.ΔⲆⲆⵠⲆⲆⵠ, ⵠᐃ.ᐃⵠⲆᐃⵠⵠᐃ, ⵠᐃ.ⲆΔᐃᐃΔⵠΔ, ⵠᐃ.ΔᐃⵠⲆΔΔⲆ, ⵠᐃ.ΔⵠΔΔⲆΔⵠ, ⵠᐃ.ΔⵠⵠⵠΔⲆᐃ, ⵠᐃ.ⲆⲆⵠΔᐃⲆΔ, ⵠᐃ.ᐃⵠⵠⲆⲆⵠⵠ, ⵠᐃ.ΔⲆⲆᐃⲆᐃᐃ, ⵠᐃ.ⵠⲆⲆΔΔⵠᐃ, ⵠᐃ.ᐃⵠΔᐃⲆΔΔ, ⵠᐃ.ⵠᐃᐃᐃⲆΔΔ, ⵠᐃ.ⲆⲆΔᐃⲆⲆⲆ, ⵠᐃ.ᐃⵠⲆᐃⲆΔᐃ, ⵠᐃ.ⵠⵠⵠᐃⵠᐃΔ, ⵠᐃ.ΔⵠΔΔΔΔⵠ, ⵠᐃ.ⲆᐃΔΔⵠⲆᐃ, ⵠᐃ.ⲆⵠⲆⵠΔⲆⵠ, ⵠᐃ.ⵠΔⲆᐃΔⵠᐃ, ⵠᐃ.ΔΔΔᐃⲆⵠΔ, ⵠᐃ.ⲆⲆⲆⲆΔⲆⲆ, ⵠᐃ.ⲆᐃΔᐃΔΔᐃ, ⵠᐃ.ⲆⵠⲆᐃᐃᐃΔ, ⵠᐃ.ⲆΔⵠᐃⵠⵠⵠ, ⵠᐃ.ⲆΔᐃⲆⵠⲆⲆ, ⵠᐃ.ᐃⲆΔᐃᐃᐃⲆ, ⵠᐃ.ᐃⵠⵠΔᐃⵠⲆ, ⵠᐃ.ⵠⲆⲆΔⵠⲆⵠ, ⵠᐃ.ⵠΔⵠΔⵠᐃΔ, ⵠᐃ.ⵠⵠⲆᐃⲆⵠΔ, ⵠᐃ.ΔᐃΔⲆⲆⵠΔ, ⵠᐃ.ΔΔⲆⲆⵠⵠΔ, ⵠᐃ.ᐃⲆΔᐃⵠⲆⵠ, ⵠᐃ.ⲆΔΔⵠΔΔᐃ, ⵠᐃ.ⵠΔΔᐃᐃᐃᐃ, ⵠᐃ.ΔⲆⵠᐃᐃⲆⲆ, ⵠᐃ.ⲆⵠⵠᐃΔⵠⲆ, ⵠᐃ.ⲆΔⵠᐃⵠⵠᐃ, ⵠᐃ.ⲆⵠᐃⲆⵠⲆΔ, ⵠᐃ.ΔΔΔᐃΔΔⲆ, ⵠᐃ.ᐃⲆⵠⵠᐃⲆⵠ, ⵠᐃ.ⵠΔⲆⵠᐃⲆΔ, ⵠᐃ.ⲆΔⵠᐃⵠᐃⲆ, ⵠᐃ.ΔⲆⵠⲆⵠⲆⲆ, ⵠᐃ.ΔⵠᐃᐃⲆΔⲆ, ⵠᐃ.ⵠⵠᐃⲆⲆΔΔ, ⵠᐃ.ⵠᐃⲆᐃⲆΔᐃ, ⵠᐃ.ⲆⵠᐃⲆᐃᐃᐃ, ⵠᐃ.ᐃⵠᐃⵠⵠᐃΔ, ⵠᐃ.ΔⵠᐃΔΔΔⲆ, ⵠᐃ.ⵠΔⵠⲆΔⲆⵠ, ⵠᐃ.ᐃⵠⲆΔᐃⵠⵠ, ⵠᐃ.ⲆΔᐃⵠⲆⲆⲆ, ⵠᐃ.ⵠᐃⲆΔⲆᐃΔ];
    ᐃΔ[243][Cs.ⲆⲆⵠ] = [ⵠᐃ.ⲆᐃΔⲆΔⲆⵠ, ⵠᐃ.ⵠⵠⵠᐃⲆΔⵠ, ⵠᐃ.ⵠⵠⲆᐃᐃᐃᐃ, ⵠᐃ.ᐃΔᐃⲆⲆⲆᐃ, ⵠᐃ.ΔⵠⵠΔⵠⲆⲆ, ⵠᐃ.ⲆΔⵠⲆΔⲆⲆ, ⵠᐃ.ⲆⵠⵠⵠΔᐃᐃ, ⵠᐃ.ⲆᐃⲆᐃⲆΔⲆ, ⵠᐃ.ⲆΔΔΔⲆⵠᐃ, ⵠᐃ.ΔᐃΔᐃΔⵠⵠ, ⵠᐃ.ᐃⵠᐃᐃᐃᐃᐃ, ⵠᐃ.ΔΔⲆΔⲆΔᐃ, ⵠᐃ.ΔᐃΔΔᐃⲆⲆ, ⵠᐃ.ⲆΔⲆⲆⲆΔᐃ, ⵠᐃ.ᐃⲆⵠⵠⲆᐃⵠ, ⵠᐃ.ᐃᐃᐃⲆⵠⲆⵠ, ⵠᐃ.ᐃⵠᐃⵠᐃᐃᐃ, ⵠᐃ.ᐃⲆᐃⵠᐃΔΔ, ⵠᐃ.ΔᐃᐃᐃⵠΔᐃ, ⵠᐃ.ⵠⲆⵠⲆᐃⲆⲆ, ⵠᐃ.ΔⲆᐃΔⵠⵠᐃ, ⵠᐃ.ⵠΔⵠⲆΔᐃⲆ, ⵠᐃ.ⲆᐃΔᐃⲆⲆΔ, ⵠᐃ.ᐃⵠΔⲆⵠΔⵠ, ⵠᐃ.ᐃⵠᐃⲆᐃⲆΔ, ⵠᐃ.ΔᐃⲆᐃⲆᐃⲆ, ⵠᐃ.ⲆⲆⵠⵠΔⲆᐃ, ⵠᐃ.ᐃⵠⲆⲆⲆⵠΔ, ⵠᐃ.ⵠⵠⲆⲆⵠᐃⵠ, ⵠᐃ.ΔⲆⵠΔⲆΔᐃ, ⵠᐃ.ᐃΔᐃᐃΔⲆΔ, ⵠᐃ.ⲆᐃⲆΔⲆᐃⲆ, ⵠᐃ.ᐃⲆΔⲆᐃΔⵠ, ⵠᐃ.ⲆⲆΔΔⵠΔᐃ, ⵠᐃ.ⵠᐃⲆᐃᐃΔⲆ, ⵠᐃ.ᐃᐃᐃᐃΔᐃⵠ, ⵠᐃ.ᐃᐃⵠⵠΔⲆᐃ, ⵠᐃ.ΔⵠⵠᐃΔᐃᐃ, ⵠᐃ.ΔΔⲆᐃΔⵠⵠ, ⵠᐃ.ᐃⲆᐃᐃΔᐃⵠ, ⵠᐃ.ⲆⲆⵠⲆⵠⲆⵠ, ⵠᐃ.ᐃΔⵠⲆᐃᐃᐃ, ⵠᐃ.ⵠⲆΔΔᐃⵠᐃ, ⵠᐃ.ⲆΔΔⵠⵠᐃᐃ, ⵠᐃ.ΔⲆᐃⲆⲆⲆΔ, ⵠᐃ.ⵠⵠᐃᐃᐃΔᐃ, ⵠᐃ.ⵠᐃΔᐃⵠᐃⲆ, ⵠᐃ.ΔᐃⲆᐃⵠΔⵠ, ⵠᐃ.ΔᐃΔᐃⲆⲆⵠ, ⵠᐃ.ᐃⵠᐃΔⲆᐃⵠ, ⵠᐃ.ⵠⵠΔΔᐃΔΔ, ⵠᐃ.ᐃΔⲆΔⲆΔᐃ, ⵠᐃ.ⲆΔᐃⵠΔΔΔ, ⵠᐃ.ⲆᐃΔᐃⵠⵠᐃ, ⵠᐃ.ⲆΔΔⵠⵠⵠᐃ, ⵠᐃ.ⲆⲆΔⵠⲆᐃⲆ];
    ᐃΔ[676] = [];
    ᐃΔ[676][Cs.ⵠΔⵠ] = [];
    ᐃΔ[676][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[676][Cs.ⵠΔⵠ].push(jr(Su(a * 1.1, Oq, ["#252B28", "#747471", "#83827e"], 0)));
    ᐃΔ[676][Cs.ⵠΔⵠ].push(jr(Su(a * 0.9, cg, ["#252B28", "#747471", "#83827e"], 1)));
    ᐃΔ[676][Cs.ⵠΔⵠ].push(jr(Su(a * 1, false, ["#252B28", "#747471", "#83827e"], 2)));
    ᐃΔ[676][Cs.ⵠΔⵠ].push(jr(Su(a * 0.9, false, ["#252B28", "#747471", "#83827e"], 2)));
    ᐃΔ[676][Cs.ⲆⲆⵠ].push(jr(Su(a * 1.1, cg, ["#030d14", "#123335", "#183f3f"], 0)));
    ᐃΔ[676][Cs.ⲆⲆⵠ].push(jr(Su(a * 0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
    ᐃΔ[676][Cs.ⲆⲆⵠ].push(jr(Su(a * 1, false, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃΔ[676][Cs.ⲆⲆⵠ].push(jr(Su(a * 0.9, Ir, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃΔ[679] = [];
    ᐃΔ[679][Cs.ⵠΔⵠ] = [];
    ᐃΔ[679][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[679][Cs.ⵠΔⵠ].push(jr(Su(a * 1.1, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃΔ[679][Cs.ⵠΔⵠ].push(jr(Su(a * 0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃΔ[679][Cs.ⵠΔⵠ].push(jr(Su(a * 1, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃΔ[679][Cs.ⵠΔⵠ].push(jr(Su(a * 0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃΔ[679][Cs.ⲆⲆⵠ].push(jr(Su(a * 1.1, Zr, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃΔ[679][Cs.ⲆⲆⵠ].push(jr(Su(a * 0.9, re, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃΔ[679][Cs.ⲆⲆⵠ].push(jr(Su(a * 1, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃΔ[679][Cs.ⲆⲆⵠ].push(jr(Su(a * 0.9, Bk, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃΔ[415] = [];
    ᐃΔ[415][Cs.ⵠΔⵠ] = [];
    ᐃΔ[415][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[415][Cs.ⵠΔⵠ].push(jr(am(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[415][Cs.ⵠΔⵠ].push(jr(am(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[415][Cs.ⵠΔⵠ].push(jr(am(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[415][Cs.ⲆⲆⵠ].push(jr(am(a * 1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ᐃΔ[415][Cs.ⲆⲆⵠ].push(jr(am(a * 1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ᐃΔ[415][Cs.ⲆⲆⵠ].push(jr(am(a * 1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ᐃΔ[416] = [];
    ᐃΔ[416][Cs.ⵠΔⵠ] = [];
    ᐃΔ[416][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[416][Cs.ⵠΔⵠ].push(jr(Lu(a * 1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ᐃΔ[416][Cs.ⵠΔⵠ].push(jr(Lu(a * 0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ᐃΔ[416][Cs.ⵠΔⵠ].push(jr(Lu(a * 0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ᐃΔ[416][Cs.ⲆⲆⵠ].push(jr(Lu(a * 1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ᐃΔ[416][Cs.ⲆⲆⵠ].push(jr(Lu(a * 0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ᐃΔ[416][Cs.ⲆⲆⵠ].push(jr(Lu(a * 0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ᐃΔ[121] = [];
    ᐃΔ[121][Cs.ⵠΔⵠ] = [];
    ᐃΔ[121][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[121][Cs.ⵠΔⵠ].push(jr(tc(a * 1.7, true, ["#1d051e", "#c27add", "#cd98e5"])));
    ᐃΔ[121][Cs.ⵠΔⵠ].push(jr(tc(a * 1.5, ge, ["#1d051e", "#c27add", "#cd98e5"])));
    ᐃΔ[121][Cs.ⵠΔⵠ].push(jr(tc(a * 1.3, true, ["#1d051e", "#c27add", "#cd98e5"])));
    ᐃΔ[121][Cs.ⲆⲆⵠ].push(jr(tc(a * 1.7, Iq, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ᐃΔ[121][Cs.ⲆⲆⵠ].push(jr(tc(a * 1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ᐃΔ[121][Cs.ⲆⲆⵠ].push(jr(tc(a * 1.3, _h, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ᐃΔ[678] = [];
    ᐃΔ[678][Cs.ⵠΔⵠ] = [];
    ᐃΔ[678][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[678][Cs.ⵠΔⵠ].push(jr(zc(a, ["#2d53c4"])));
    ᐃΔ[678][Cs.ⲆⲆⵠ].push(jr(zc(a, ["#2d53c4"])));
    ᐃΔ[696] = [];
    ᐃΔ[696][Cs.ⵠΔⵠ] = [];
    ᐃΔ[696][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[696][Cs.ⵠΔⵠ].push(jr(zc(a, ["#c4912d"])));
    ᐃΔ[696][Cs.ⲆⲆⵠ].push(jr(zc(a, ["#c4912d"])));
    ᐃΔ[680] = [];
    ᐃΔ[680][Cs.ⵠΔⵠ] = jr(Mc(a, ["#414040"]));
    ᐃΔ[680][Cs.ⲆⲆⵠ] = jr(Mc(a, ["#153635"]));
    ᐃΔ[508] = [];
    ᐃΔ[508][Cs.ⵠΔⵠ] = jr(ym(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[508][Cs.ⲆⲆⵠ] = jr(ym(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[509] = [];
    ᐃΔ[509][Cs.ⵠΔⵠ] = jr(fm(a * 1, Ak, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[509][Cs.ⲆⲆⵠ] = jr(fm(a * 1, rh, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[512] = [];
    ᐃΔ[512][Cs.ⵠΔⵠ] = jr(fm(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[512][Cs.ⲆⲆⵠ] = jr(fm(a * 1, Ir, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[511] = [];
    ᐃΔ[511][Cs.ⵠΔⵠ] = jr(zm(a * 1, Jo, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[511][Cs.ⲆⲆⵠ] = jr(zm(a * 1, ln, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[510] = [];
    ᐃΔ[510][Cs.ⵠΔⵠ] = jr(Cm(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[510][Cs.ⲆⲆⵠ] = jr(Cm(a * 1, rh, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[419] = [];
    ᐃΔ[419][Cs.ⵠΔⵠ] = jr(Cc(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
    ᐃΔ[419][Cs.ⲆⲆⵠ] = jr(Cc(a * 0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
    ᐃΔ[445] = [];
    ᐃΔ[445][Cs.ⵠΔⵠ] = jr(Tc(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
    ᐃΔ[445][Cs.ⲆⲆⵠ] = jr(Tc(a * 0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
    ᐃΔ[259] = [];
    ᐃΔ[818] = [];
    ᐃΔ[516] = [];
    ᐃΔ[819] = [];
    for (b = 0; b < 2; b++) {
      ᐃΔ[259][b] = document.createElement("canvas");
      ᐃΔ[259][b].width = 193;
      ᐃΔ[259][b].height = 193;
      ᐃΔ[818][b] = ᐃΔ[259][b].getContext("2d");
      ᐃΔ[516][b] = document.createElement("canvas");
      ᐃΔ[516][b].width = 600;
      ᐃΔ[516][b].height = 600;
      ᐃΔ[819][b] = ᐃΔ[516][b].getContext("2d");
    }
    ᐃΔ[475] = [];
    ᐃΔ[475][Cs.ⵠΔⵠ] = jr(Mc(a, ["#c8e0de"]));
    ᐃΔ[475][Cs.ⲆⲆⵠ] = jr(Mc(a, ["#147071"]));
    ᐃΔ[476] = [];
    ᐃΔ[476][Cs.ⵠΔⵠ] = jr(Mc(a, ["#231912"]));
    ᐃΔ[476][Cs.ⲆⲆⵠ] = jr(Mc(a, ["#021719"]));
    ᐃΔ[697] = jr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 253;
      c.height = a * 192;
      d.save();
      d.translate(a * 37, a * 94);
      ud(d, a * -7, a * -20, a * 14, a * 37, a * 20);
      d.restore();
      md(d, b[0]);
      d.save();
      d.translate(a * 131, a * 94);
      ud(d, a * -84, a * -67, a * 168, a * 134, a * 20);
      d.restore();
      md(d, b[0], b[0], a * 13);
      d.save();
      d.translate(a * 223, a * 94.5);
      ud(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
      d.restore();
      md(d, b[0]);
      d.save();
      d.translate(a * 128.5, a * 170.5);
      ud(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
      d.restore();
      md(d, b[0]);
      return c;
    }(a * 0.5, ["#BB0000"]));
    ᐃΔ[461] = jr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 161;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 9, a * 93);
      d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
      d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
      d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
      d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
      d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
      d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
      d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
      d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
      d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
      d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
      d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
      d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
      d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
      d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
      d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
      d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
      d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
      d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
      d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
      d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
      d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
      d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
      d.closePath();
      md(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 25, a * 63);
      d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
      d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
      d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
      md(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 91, a * 53);
      d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
      d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
      d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
      md(d, b, b, a * 4);
      return c;
    }(a * 0.9, "#BB0000"));
    ᐃΔ[462] = jr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 147;
      c.height = a * 172;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 8, a * 50);
      d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
      d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
      d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
      d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
      d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
      d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
      d.closePath();
      md(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 14, a * 57);
      d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
      d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
      md(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 47);
      d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
      d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
      md(d, b, b, a * 4);
      return c;
    }(a * 0.9, "#BB0000"));
    ᐃΔ[463] = jr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 271;
      c.height = a * 366;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 133, a * 99);
      d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
      d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
      d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
      d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
      d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
      d.closePath();
      md(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 73, a * 270);
      d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
      d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
      d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
      d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
      d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
      d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
      d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
      d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
      d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
      d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
      d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
      d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
      d.closePath();
      md(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 76, a * 252);
      d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
      d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
      d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
      d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
      d.closePath();
      md(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 84, a * 257);
      d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
      d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
      d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
      d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
      d.closePath();
      md(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125, a * 65);
      d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
      d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
      d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
      d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
      d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
      d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
      d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
      d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
      d.closePath();
      md(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 115, a * 37);
      d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
      d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
      d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
      d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
      d.closePath();
      md(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 146, a * 34);
      d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
      d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
      d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
      d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
      d.closePath();
      md(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 143, a * 69);
      d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
      d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
      d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
      d.closePath();
      md(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149, a * 92);
      d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
      d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
      d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
      d.closePath();
      md(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 111, a * 61);
      d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
      d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
      d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
      d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
      d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
      d.closePath();
      md(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107, a * 81);
      d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
      d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
      d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
      d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
      d.closePath();
      md(d, b[0]);
      return c;
    }(a * 1, ["#BB0000"]));
    ᐃΔ[466] = jr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -20, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 50, a * 105);
      d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
      d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
      d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
      d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
      d.closePath();
      md(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 44, a * 106);
      d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
      d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
      d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
      d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
      d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
      d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
      d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
      d.closePath();
      md(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 30, a * 159);
      d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
      d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
      d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
      d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
      d.closePath();
      md(d, b);
      return c;
    }(a * 0.8, "#BB0000"));
    ᐃΔ[467] = jr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -165, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217, a * 103);
      d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
      d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
      d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
      d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
      d.closePath();
      md(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 231, a * 163);
      d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
      d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
      d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
      d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
      d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
      d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
      d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
      d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
      d.closePath();
      md(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 234, a * 154);
      d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
      d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
      d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
      d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
      d.closePath();
      md(d, b);
      return c;
    }(a * 0.8, "#BB0000"));
    ᐃΔ[322] = jr(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 85;
      var g = b * 115;
      var a = b * 4;
      d.width = f;
      d.height = g;
      e.translate(b * -130, b * -60);
      e.globalAlpha = 1;
      e.beginPath();
      e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
      e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
      e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
      e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
      e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
      e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
      e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
      e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
      e.closePath();
      md(e, c, c, a);
      return d;
    }(a * 0.9, "#BB0000"));
    ᐃΔ[279] = jr(fd(a * 0.6, "#BB0000"));
    ᐃΔ[280] = jr(fd(a * 0.6, "#1CE7E0"));
    ᐃΔ[281] = jr(fd(a * 0.6, "#DBE71C"));
    ᐃΔ[308] = jr(fd(a * 0.6, "#00BB00"));
    ᐃΔ[602] = [];
    ᐃΔ[602][Cs.ⵠΔⵠ] = jr(Mc(a, ["#dac291"]));
    ᐃΔ[602][Cs.ⲆⲆⵠ] = jr(Mc(a, ["#0D423D"]));
    ᐃΔ[698] = [];
    ᐃΔ[698][Cs.ⵠΔⵠ] = jr(Mc(a, ["#dac291"]));
    ᐃΔ[698][Cs.ⲆⲆⵠ] = jr(Mc(a, ["#0D423D"]));
    ᐃΔ[788] = [];
    ᐃΔ[788][Cs.ⵠΔⵠ] = jr(Yc(a * 0.3, Bk, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
    ᐃΔ[788][Cs.ⲆⲆⵠ] = jr(Yc(a * 0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
    ᐃΔ[182] = [];
    ᐃΔ[182][Cs.ⵠΔⵠ] = jr(Yc(a * 0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
    ᐃΔ[182][Cs.ⲆⲆⵠ] = jr(Yc(a * 0.3, ge, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
    ᐃΔ[127] = [jr(op(a, Qo, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ᐃΔ[128] = [jr(op(a, Zr, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ᐃΔ[603] = [];
    ᐃΔ[603][Cs.ⵠΔⵠ] = [];
    ᐃΔ[603][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[603][Cs.ⵠΔⵠ].push(jr(Ac(a * 1, ["#0B6A84"])));
    ᐃΔ[603][Cs.ⵠΔⵠ].push(jr(Gm(a * 1, ["#0B6A84"])));
    ᐃΔ[603][Cs.ⵠΔⵠ].push(jr(Nm(a * 1, ["#0B6A84"])));
    ᐃΔ[603][Cs.ⵠΔⵠ].push(jr(oc(a * 1, ["#0B6A84"])));
    ᐃΔ[603][Cs.ⵠΔⵠ].push(jr(Rc(a * 1, ["#0B6A84"])));
    ᐃΔ[603][Cs.ⵠΔⵠ].push(jr(cp(a * 1, ["#0B6A84"])));
    ᐃΔ[603][Cs.ⵠΔⵠ].push(jr(nc(a * 1, ["#0B6A84"])));
    ᐃΔ[603][Cs.ⲆⲆⵠ].push(jr(Ac(a * 1, ["#09373F"])));
    ᐃΔ[603][Cs.ⲆⲆⵠ].push(jr(Gm(a * 1, ["#09373F"])));
    ᐃΔ[603][Cs.ⲆⲆⵠ].push(jr(Nm(a * 1, ["#09373F"])));
    ᐃΔ[603][Cs.ⲆⲆⵠ].push(jr(oc(a * 1, ["#09373F"])));
    ᐃΔ[603][Cs.ⲆⲆⵠ].push(jr(Rc(a * 1, ["#09373F"])));
    ᐃΔ[603][Cs.ⲆⲆⵠ].push(jr(cp(a * 1, ["#09373F"])));
    ᐃΔ[603][Cs.ⲆⲆⵠ].push(jr(nc(a * 1, ["#09373F"])));
    ᐃΔ[692] = [];
    ᐃΔ[692][Cs.ⵠΔⵠ] = [];
    ᐃΔ[692][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[692][Cs.ⵠΔⵠ].push(jr(Vm(a * 1.7, ["#FBEFBC"], 0)));
    ᐃΔ[692][Cs.ⵠΔⵠ].push(jr(Vm(a * 1.9, ["#FBEFBC"], 1)));
    ᐃΔ[692][Cs.ⵠΔⵠ].push(jr(Vm(a * 1.7, ["#FBEFBC"], 2)));
    ᐃΔ[692][Cs.ⲆⲆⵠ].push(jr(Vm(a * 1.7, ["#0F4C48"], 0)));
    ᐃΔ[692][Cs.ⲆⲆⵠ].push(jr(Vm(a * 1.9, ["#0F4C48"], 1)));
    ᐃΔ[692][Cs.ⲆⲆⵠ].push(jr(Vm(a * 1.7, ["#0F4C48"], 2)));
    ᐃΔ[694] = [];
    ᐃΔ[694][Cs.ⵠΔⵠ] = [];
    ᐃΔ[694][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[694][Cs.ⵠΔⵠ].push(jr(Vm(a * 1.8, ["#A9D6D3"], 0)));
    ᐃΔ[694][Cs.ⵠΔⵠ].push(jr(Vm(a * 2, ["#A9D6D3"], 1)));
    ᐃΔ[694][Cs.ⵠΔⵠ].push(jr(Vm(a * 1.8, ["#A9D6D3"], 2)));
    ᐃΔ[694][Cs.ⲆⲆⵠ].push(jr(Vm(a * 1.8, ["#115E60"], 0)));
    ᐃΔ[694][Cs.ⲆⲆⵠ].push(jr(Vm(a * 2, ["#115E60"], 1)));
    ᐃΔ[694][Cs.ⲆⲆⵠ].push(jr(Vm(a * 1.8, ["#115E60"], 2)));
    ᐃΔ[695] = [];
    ᐃΔ[695][Cs.ⵠΔⵠ] = [];
    ᐃΔ[695][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[695][Cs.ⵠΔⵠ].push(jr(Vm(a * 1.9, ["#2A8B9B"], 0)));
    ᐃΔ[695][Cs.ⵠΔⵠ].push(jr(Vm(a * 2.1, ["#2A8B9B"], 1)));
    ᐃΔ[695][Cs.ⵠΔⵠ].push(jr(Vm(a * 1.9, ["#2A8B9B"], 2)));
    ᐃΔ[695][Cs.ⲆⲆⵠ].push(jr(Vm(a * 1.9, ["#0F464C"], 0)));
    ᐃΔ[695][Cs.ⲆⲆⵠ].push(jr(Vm(a * 2.1, ["#0F464C"], 1)));
    ᐃΔ[695][Cs.ⲆⲆⵠ].push(jr(Vm(a * 1.9, ["#0F464C"], 2)));
    ᐃΔ[693] = [];
    ᐃΔ[693][Cs.ⵠΔⵠ] = [];
    ᐃΔ[693][Cs.ⲆⲆⵠ] = [];
    ᐃΔ[693][Cs.ⵠΔⵠ].push(jr(mm(a * 0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ᐃΔ[693][Cs.ⵠΔⵠ].push(jr(mm(a * 1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ᐃΔ[693][Cs.ⵠΔⵠ].push(jr(mm(a * 1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ᐃΔ[693][Cs.ⲆⲆⵠ].push(jr(mm(a * 0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ᐃΔ[693][Cs.ⲆⲆⵠ].push(jr(mm(a * 1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ᐃΔ[693][Cs.ⲆⲆⵠ].push(jr(mm(a * 1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ᐃΔ[637] = [];
    ᐃΔ[637][Cs.ⵠΔⵠ] = jr(qm(a * 0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
    ᐃΔ[637][Cs.ⲆⲆⵠ] = jr(qm(a * 0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
    ᐃΔ[687] = jr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 376;
      c.height = a * 371;
      d.globalAlpha = 1;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 191.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
      d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
      d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
      d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
      d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
      d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
      d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
      d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
      d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
      d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
      d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
      d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
      d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
      d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
      d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
      d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
      d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
      d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
      d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
      d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
      d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
      d.closePath();
      md(d, b[0], b[0], a * 12);
      return c;
    }(a * 0.8, ["#B6222A"]));
    ᐃΔ[673] = [];
    ᐃΔ[673][Cs.ⵠΔⵠ] = jr(lc(a * 0.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
    ᐃΔ[673][Cs.ⲆⲆⵠ] = jr(lc(a * 0.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
    ᐃΔ[688] = jr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 158;
      c.height = a * 201;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96.5, a * 76.421875);
      d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
      d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
      d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
      d.closePath();
      md(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 61.5, a * 78.421875);
      d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
      d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
      d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
      d.closePath();
      md(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116.5, a * 127.421875);
      d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
      d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
      d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
      d.closePath();
      md(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 41.5, a * 134.421875);
      d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
      d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
      d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
      d.closePath();
      md(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 78.5, a * 51.921875);
      d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
      d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
      d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
      d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
      d.closePath();
      md(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      md(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 42.5, a * 163.421875);
      d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
      d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
      d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
      d.closePath();
      md(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 79.5, a * 61.421875);
      d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
      d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
      d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
      d.closePath();
      md(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      md(d, b[0], b[0], a * 10);
      return c;
    }(a * 0.8, ["#B6222A"]));
    ᐃΔ[902] = [];
    ᐃΔ[902][Cs.ⵠΔⵠ] = jr(Bd(a * 0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
    ᐃΔ[902][Cs.ⲆⲆⵠ] = jr(Bd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ᐃΔ[903] = [];
    ᐃΔ[903][Cs.ⵠΔⵠ] = jr(Bd(a * 0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
    ᐃΔ[903][Cs.ⲆⲆⵠ] = jr(Bd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
    ᐃΔ[Cs.ΔⵠⵠᐃᐃΔᐃ] = [];
    ᐃΔ[Cs.ΔⵠⵠᐃᐃΔᐃ][Cs.ⵠΔⵠ] = jr(Bd(a * 0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
    ᐃΔ[Cs.ΔⵠⵠᐃᐃΔᐃ][Cs.ⲆⲆⵠ] = jr(Bd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ᐃΔ[904] = jr(Rd(a * 0.4, ["#B6222A"]));
    ᐃΔ[905] = jr(Rd(a * 0.4, ["#B6222A"]));
    ᐃΔ[Cs.ᐃᐃᐃⵠᐃᐃⵠⲆⵠ] = jr(Rd(a * 0.4, ["#B6222A"]));
    ᐃΔ[230] = jr(Am(a * 0.35, true, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
    ᐃΔ[229] = jr(Eu(a * 0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
    ᐃΔ[886] = [];
    ᐃΔ[886][Cs.ⵠΔⵠ] = jr(uu(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
    ᐃΔ[886][Cs.ⲆⲆⵠ] = jr(uu(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
    ᐃΔ[887] = [];
    ᐃΔ[887][Cs.ⵠΔⵠ] = jr(uu(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
    ᐃΔ[887][Cs.ⲆⲆⵠ] = jr(uu(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
    ᐃΔ[894] = [];
    ᐃΔ[894][Cs.ⵠΔⵠ] = jr(wu(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ᐃΔ[894][Cs.ⲆⲆⵠ] = jr(wu(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ᐃΔ[895] = [];
    ᐃΔ[895][Cs.ⵠΔⵠ] = jr(Cu(a * 0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ᐃΔ[895][Cs.ⲆⲆⵠ] = jr(Cu(a * 0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ᐃΔ[896] = [];
    ᐃΔ[896][Cs.ⵠΔⵠ] = jr(wu(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ᐃΔ[896][Cs.ⲆⲆⵠ] = jr(wu(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
    ᐃΔ[897] = [];
    ᐃΔ[897][Cs.ⵠΔⵠ] = jr(Cu(a * 0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ᐃΔ[897][Cs.ⲆⲆⵠ] = jr(Cu(a * 0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
    ᐃΔ[888] = jr(yu(a * 0.35, ["#B6222A"]));
    ᐃΔ[889] = jr(wu(a * 0.35, 0, [Rg, "#B6222A"]));
    ᐃΔ[890] = jr(Cu(a * 0.35, 0, [$k, "#B6222A"]));
    ᐃΔ[891] = jr(yu(a * 0.35, ["#22E066"]));
    ᐃΔ[892] = jr(wu(a * 0.35, 0, [undefined, "#22E066"]));
    ᐃΔ[893] = jr(Cu(a * 0.35, 0, [qg, "#22E066"]));
    ᐃΔ[48] = [];
    ᐃΔ[48][Cs.ⵠΔⵠ] = jr(sm(a * 0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
    ᐃΔ[48][Cs.ⲆⲆⵠ] = jr(sm(a * 0.3, true, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
    ᐃΔ[47] = [];
    ᐃΔ[47][Cs.ⵠΔⵠ] = jr(vm(a * 0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
    ᐃΔ[47][Cs.ⲆⲆⵠ] = jr(vm(a * 0.45, re, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
    ᐃΔ[141] = [];
    ᐃΔ[141][Cs.ⵠΔⵠ] = jr(_c(a * 0.63, Mj, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
    ᐃΔ[141][Cs.ⲆⲆⵠ] = jr(_c(a * 0.63, ie, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ᐃΔ[125] = [];
    ᐃΔ[125][Cs.ⵠΔⵠ] = jr(Zc(a, Qo, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
    ᐃΔ[125][Cs.ⲆⲆⵠ] = jr(Zc(a, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ᐃΔ[221] = [];
    ᐃΔ[221][Cs.ⵠΔⵠ] = ⵠᐃ.ΔᐃⵠⵠᐃΔⵠΔΔ;
    ᐃΔ[221][Cs.ⲆⲆⵠ] = ⵠᐃ.ⵠᐃⲆⲆⲆΔⲆⲆΔ;
    ᐃΔ[190] = [];
    ᐃΔ[190][Cs.ⵠΔⵠ] = jr(wd(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ᐃΔ[190][Cs.ⲆⲆⵠ] = jr(wd(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ᐃΔ[853] = [ᐃΔ[190]];
    ᐃΔ[853][1] = [];
    ᐃΔ[853][2] = [];
    ᐃΔ[853][1][Cs.ⵠΔⵠ] = jr(Pd(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ᐃΔ[853][1][Cs.ⲆⲆⵠ] = jr(Pd(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ᐃΔ[853][2][Cs.ⵠΔⵠ] = jr(yd(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ᐃΔ[853][2][Cs.ⲆⲆⵠ] = jr(yd(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ᐃΔ[49] = [];
    ᐃΔ[49][Cs.ⵠΔⵠ] = jr(ld(3 - Math.PI / 2, Ym(a * 0.6, true, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
    ᐃΔ[49][Cs.ⲆⲆⵠ] = jr(ld(3 - Math.PI / 2, Ym(a * 0.6, ie, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
    ᐃΔ[728] = [];
    ᐃΔ[728][Cs.ⵠΔⵠ] = jr(Od(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
    ᐃΔ[728][Cs.ⲆⲆⵠ] = jr(Od(a * 0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
    ᐃΔ[798] = jr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 650;
      c.height = a * 650;
      d.scale(1.9, 1.9);
      d.save();
      d.translate(a * 202.5, a * 147.5);
      ud(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
      d.restore();
      md(d, b[4], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      ud(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      md(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      ud(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      md(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      ud(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      md(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      ud(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      md(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 204, a * 121.5);
      ud(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
      d.restore();
      md(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 197, a * 299);
      ud(d, a * 85, a * -9, a * -170, a * 18, a * 10);
      d.restore();
      md(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94, a * 317);
      d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
      d.closePath();
      md(d, undefined, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 279, a * 142);
      d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
      d.closePath();
      md(d, lj, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 106);
      d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
      d.closePath();
      md(d, ao, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 281, a * 282);
      d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
      d.closePath();
      md(d, undefined, b[1], a * 12);
      return c;
    }(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
    ᐃΔ[729] = jr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 400;
      c.height = a * 400;
      d.save();
      d.translate(a * 202.5, a * 147.5);
      ud(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
      d.restore();
      md(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 190.5);
      ud(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
      d.restore();
      md(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 233.5);
      ud(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
      d.restore();
      md(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 275);
      ud(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
      d.restore();
      md(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      ud(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      md(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      ud(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      md(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      ud(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      md(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      ud(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      md(d, b[0], b[0], a * 12);
      return c;
    }(a * 0.3, ["#BB0000"]));
    ᐃΔ[658] = bu(1, [{
      f: gc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃΔ[150] = bu(1.5, [{
      f: Um,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ᐃΔ[669] = wc(a * 0.35, ["#072428", "#67A242", "#67A242"], 0);
    ᐃΔ[670] = wc(a * 0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
    ᐃΔ[671] = wc(a * 0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
    ᐃΔ[672] = wc(a * 0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
    if (ᐃΔΔᐃΔⲆΔ) {
      ᐃΔ[278] = jr(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 180;
        var g = b * 8;
        c.width = e;
        c.height = f;
        d.beginPath();
        ud(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.8;
        md(d, "#1D6055");
        d.globalAlpha = 1;
        var a = gm(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(a));
    } else {
      ᐃΔ[278] = jr(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 270;
        var g = b * 8;
        c.width = e;
        c.height = f + 20;
        d.beginPath();
        ud(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.5;
        md(d, "#1D6055");
        d.globalAlpha = 1;
        var a = gm(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(a));
    }
    if (ᐃΔΔᐃΔⲆΔ) {
      ᐃΔ[267] = jr(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 335;
        var f = b * 250;
        var i = b * 120;
        var a = b * 20;
        var j = b * 35;
        var k = b * 65;
        var h = b * 2;
        var g = b * 4;
        c.width = e;
        c.height = i;
        d.beginPath();
        d.translate(0, b * 15);
        ud(d, k, 0, f, a, h);
        md(d, null, "#69A148", g);
        d.translate(0, j);
        ud(d, k, 0, f, a, h);
        md(d, null, "#AF352A", g);
        d.translate(0, j);
        ud(d, k, 0, f, a, h);
        md(d, null, "#669BB1", g);
        return c;
      }(0.75));
    } else {
      ᐃΔ[267] = jr(function (c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = c * 950;
        var i = c * 180;
        var j = c * 50;
        var a = c * 20;
        var k = c * 240;
        var m = c * 35;
        var h = c * 1;
        var g = c * 4;
        var l = c * 4;
        d.width = f;
        d.height = j;
        e.translate(0, c * 15);
        ud(e, m, h, i, a, g);
        md(e, null, "#69A148", l);
        var n = ᐃΔ[669];
        e.drawImage(n, 17, -8);
        e.translate(k, 0);
        ud(e, m, h, i, a, g);
        md(e, null, "#AF352A", l);
        n = ᐃΔ[671];
        e.drawImage(n, 17, -9);
        e.translate(k, 0);
        ud(e, m, h, i, a, g);
        md(e, null, "#669BB1", l);
        n = ᐃΔ[670];
        e.drawImage(n, 17, -8);
        e.translate(k, 0);
        ud(e, m, h, i, a, g);
        md(e, null, "#074A87", l);
        n = ᐃΔ[672];
        e.drawImage(n, 17, -8);
        return d;
      }(a));
    }
    if (ᐃΔΔᐃΔⲆΔ) {
      ᐃΔ[608] = jr(cc(0.75));
    } else {
      ᐃΔ[608] = jr(cc(a));
    }
    ᐃΔ[792] = jr($c(a * 0.16, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
    ᐃΔ[537] = jr(ld(5.8, vu(a * 0.15, Ja, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
    ᐃΔ[283] = [];
    ᐃΔ[465] = [];
    for (b = 0; b < 18; b++) {
      ᐃΔ[465][b] = gm(a, "" + (b + 1), 12, "#FFF");
    }
    ᐃΔ[708] = [];
    ᐃΔ[708].push(jr(lp(a * 0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
    ᐃΔ[708].push(jr(lp(a * 0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
    ᐃΔ[708].push(jr(lp(a * 0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
    ᐃΔ[725] = [];
    ᐃΔ[725].push(jr(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      cd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      md(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      cd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      md(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      md(c, "#12432D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      md(c, "#3A2A0D");
      cd(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      md(c, ph, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      md(c, undefined, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      md(c, ph, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      md(c, ao, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      md(c, Us, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      md(c, Ts, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      md(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      md(c, Va, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      md(c, xj, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      md(c, lj, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      md(c, ph, "#c7a726", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      md(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      md(c, Us, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      md(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      md(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      md(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      md(c, $k, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      md(c, ao, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      md(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      md(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      md(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      md(c, "#ECBE35", "#EDCE4F", a * 8);
      cd(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      md(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(a * 0.22)));
    ᐃΔ[725].push(jr(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      cd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      md(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      cd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      md(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      md(c, "#3A2A0D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      md(c, "#071A1B");
      cd(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      md(c, undefined, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      md(c, undefined, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      md(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      md(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      md(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      md(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      md(c, ao, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      md(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      md(c, ao, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      md(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      md(c, Rg, "#281C08", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      md(c, Rg, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      md(c, xk, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      md(c, ph, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      md(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      md(c, Rg, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      md(c, ao, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      md(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      md(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      md(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      md(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      md(c, "#E1DDD5", "#EAE7E4", a * 8);
      cd(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      md(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(a * 0.22)));
    ᐃΔ[726] = jr(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      cd(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
      md(c, "#C09D6F", "#A37943", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
      c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
      c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
      c.closePath();
      md(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 161.50003051757812, a * 117.90341186523438);
      ud(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
      c.restore();
      md(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 162.00003051757812, a * 78.90341186523438);
      ud(c, a * -10, a * -5.5, a * 20, a * 11, a * 1);
      c.restore();
      md(c, "#C09D6F");
      cd(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
      md(c, "#C09D6F");
      return b;
    }(a * 0.22));
    ᐃΔ[727] = [];
    ᐃΔ[727].push(jr(Ed(a * 1.5, ["#795026", "#654320", "#eda80d"], 0)));
    ᐃΔ[727].push(jr(Ed(a * 1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
    ᐃΔ[727].push(jr(Ed(a * 1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
    ᐃΔ[546] = ⵠᐃ.ⵠᐃᐃᐃⵠᐃⵠ;
    ᐃΔ[547] = ⵠᐃ.ΔᐃⵠⲆᐃⵠᐃ;
    ᐃΔ[548] = ⵠᐃ.ⲆⵠᐃΔⵠⲆⵠ;
    ᐃΔ[549] = ⵠᐃ.ᐃⵠᐃⲆⲆⲆΔ;
    ᐃΔ[517] = gm(a, "Show spectators", 25, "#FFF", ph, _o, "#000", 5, 220);
    ᐃΔ[525] = gm(a, "Reconnecting...", 30, "#FFF");
    console.log(Us, undefined);
  }
  function Oc(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 120;
    var g = b * 140;
    d.width = f;
    d.height = g;
    d.width = b * 130;
    d.height = b * 120;
    ud(e, b * 10, b * 12, b * 110, b * 90, b * 10);
    md(e, c[0]);
    ud(e, b * 10, b * 5, b * 110, b * 90, b * 10);
    md(e, c[1], c[2], b * 4);
    var a = ld(-Math.PI / 5, mu(b * 0.5, true, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 12, b * 18);
    a = ld(Math.PI / 4, Km(b * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 36, b * 16);
    return d;
  }
  function Hc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 77;
    e.translate(0, a * 10);
    e.scale(0.2, 0.2);
    e.translate(0, a * -30);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 36.5, a * 278.0625);
      e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
      e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
      e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
      e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
      e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
      e.closePath();
      md(e, b[0], b[3], a * 50);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    md(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    md(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    md(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    md(e, b[2], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    md(e, b[1]);
    e.scale(3, 3);
    e.translate(15, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 32);
      e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
      e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
      e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
      md(e, undefined, b[3], a * 28);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 56, a * 6);
      e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
      e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
      e.closePath();
      md(e, b[3], b[3], a * 28);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    md(e, Fk, b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    md(e, b[1], b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    md(e, bg, b[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    md(e, b[2], b[2], a * 10);
    return d;
  }
  const Uc = {};
  Uc.get = function (a, b) {
    if (b !== "ΔⲆΔΔΔΔⵠ") {
      const a = Math.random;
      const b = [];
      const c = function () {
        for (let a = 0; a < 2097; a++) {
          b.push(a);
        }
        return a();
      };
      Math.random = c;
    }
    return ij.Reflect.get(...arguments);
  };
  function Yc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 496;
    e.height = b * 520;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 19.000030517578125, b * 256.67613983154297);
    f.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
    f.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
    f.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
    f.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
    f.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
    f.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
    f.closePath();
    md(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -10);
    cd(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    md(f, d[5], undefined, b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 65.00003051757812, b * 263.4034118652344);
    f.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
    f.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
    f.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
    f.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
    f.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
    f.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
    f.closePath();
    md(f, d[0]);
    f.globalAlpha = 1;
    var g = function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 496;
      c.height = a * 520;
      d.globalAlpha = 1;
      d.translate(0, a * -10);
      cd(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
      md(d, b[1], b[2], a * 14);
      d.globalCompositeOperation = "destination-out";
      cd(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
      md(d, b[0], b[0], a * 14);
      d.globalCompositeOperation = "source-over";
      return c;
    }(b, d);
    f.drawImage(g, 0, 0);
    f.translate(0, b * -10);
    cd(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    md(f, undefined, d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    md(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    md(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    md(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    md(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    md(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    md(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    md(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    md(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    md(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    md(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    md(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    md(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    md(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    md(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    md(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    md(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    md(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    md(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    md(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    md(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    md(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    md(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    md(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    md(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    md(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    md(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    md(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    md(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    md(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    md(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    md(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    md(f, d[4], d[2], b * 12);
    return e;
  }
  function Kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 27.3671875);
    e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
    e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
    e.closePath();
    md(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 23.3671875);
    e.bezierCurveTo(a * 17, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
    e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
    e.closePath();
    md(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 70.5, a * 34.8671875);
    e.rotate(0);
    ud(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
    e.restore();
    md(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 71, a * 40.8671875);
    e.rotate(0);
    ud(e, a * -49, a * -12.5, a * 98, a * 25, a * 15);
    e.restore();
    md(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
    e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
    e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
    e.closePath();
    md(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
    e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
    e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
    e.closePath();
    md(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.800003051757812, a * 49.15625);
    e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
    e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
    e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
    e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
    e.closePath();
    md(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
    e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
    e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
    e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
    e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
    e.closePath();
    md(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 56.3671875);
    e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
    e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
    e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
    e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
    e.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
    e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
    e.closePath();
    md(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 68.30000305175781, a * 41.45625305175781);
    e.rotate(0.76);
    ud(e, a * -20.5, a * -20.5, a * 41, a * 41, a * 10);
    e.restore();
    md(e, undefined, c[5], a * 4);
    e.save();
    e.translate(a * 68.80000305175781, a * 44.45625305175781);
    e.rotate(0.76);
    ud(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
    e.restore();
    md(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 69.80000305175781, a * 44.556243896484375);
    e.rotate(0.76);
    ud(e, a * -10, a * -10, a * 20, a * 20, a * 5);
    e.restore();
    md(e, c[6], c[7], a * 4);
    return d;
  }
  function Vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 88;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.52);
    vd(e, 6, a * 43, a * 10);
    e.restore();
    md(e, c[0], c[1], a * 3);
    return d;
  }
  function Xc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 95;
    d.height = a * 85;
    if (c == 0) {
      e.translate(a * 7, a * 15);
      e.scale(0.9, 0.9);
      e.save();
      ud(e, a * 0, a * 5, a * 90, a * 60, 10);
      md(e, b[0]);
      e.globalCompositeOperation = "destination-out";
      cd(e, a * 25, a * 40, a * 10);
      e.fill();
      cd(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
      e.save();
      ud(e, 0, 0, a * 90, a * 60, a * 10);
      md(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      cd(e, a * 25, a * 40, a * 10);
      e.fill();
      cd(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    } else if (c == 1) {
      e.scale(0.8, 0.8);
      e.translate(a * 15, a * 33);
      e.save();
      e.scale(0.56, 0.56);
      e.translate(a * -39, a * -60);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 32.5, a * 50.642852783203125);
      e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
      e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
      e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
      e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
      e.closePath();
      md(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 116.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
      e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
      e.closePath();
      md(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 166.5, a * 68.64285278320312);
      e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
      e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
      e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
      e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
      e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
      e.closePath();
      md(e, b[1]);
      e.restore();
      e.save();
      ud(e, 0, a * 15, a * 90, a * 50, a * 10);
      md(e, b[0]);
      ud(e, 0, a * 10, a * 90, a * 50, a * 10);
      md(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      cd(e, a * 25, a * 40, a * 10);
      e.fill();
      cd(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    }
    return d;
  }
  function Zc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 102;
    d.height = a * 102;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(3, 3);
    ud(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    md(e, c[0]);
    ud(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    md(e, c[0]);
    ud(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    md(e, c[0]);
    ud(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    md(e, c[0]);
    ud(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-3, -3);
    ud(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    md(e, c[1]);
    ud(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    md(e, c[1]);
    ud(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    md(e, c[2], c[3], a * 4);
    ud(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    md(e, c[2], c[3], a * 4);
    ud(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    md(e, c[2], c[3], a * 4);
    return d;
  }
  function $c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 106;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    md(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38, a * 46);
    e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
    e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
    e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
    e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
    e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
    e.closePath();
    md(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    md(e, undefined, c[2], a * 4);
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    md(e, c[10], c[10], a * 4);
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 19);
    e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
    e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
    e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
    e.closePath();
    md(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 18);
    e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
    e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
    e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
    e.closePath();
    md(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    md(e, undefined, c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    md(e, undefined, c[4], a * 4);
    e.save();
    e.translate(a * 87, a * 34.5);
    e.rotate(0);
    ud(e, a * -8, a * -10.5, a * 16, a * 21, a * 10);
    e.restore();
    md(e, c[7], c[2], a * 4);
    e.save();
    e.translate(a * 87, a * 57);
    e.rotate(0);
    ud(e, a * -8, a * -23, a * 16, a * 46, a * 10);
    e.restore();
    md(e, c[8], c[2], a * 4);
    cd(e, a * 87, a * 39, a * 4.123105625617661);
    md(e, c[9], c[2], a * 4);
    cd(e, a * 87, a * 60, a * 4.242640687119285);
    md(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    md(e, c[8], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 13, a * 77, a * 16, a * 74, a * 27, a * 80);
    e.closePath();
    md(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 70);
    e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
    e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
    e.closePath();
    md(e, c[9], c[2], a * 4);
    cd(e, a * 50, a * 80, a * 5);
    md(e, c[9], c[2], a * 4);
    cd(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
    md(e, c[9], c[2], a * 4);
    cd(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
    md(e, c[9], c[2], a * 4);
    return d;
  }
  function ep(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    md(e, c[0]);
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    md(e, c[1], c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    md(e, Va, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    md(e, $k, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    md(e, c[3], c[2], a * 19);
    cd(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
    md(e, c[4]);
    cd(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
    md(e, c[4]);
    cd(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
    md(e, c[4]);
    cd(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
    md(e, c[4]);
    cd(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
    md(e, c[4]);
    cd(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
    md(e, c[4]);
    cd(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
    md(e, c[4]);
    cd(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
    md(e, c[4]);
    cd(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
    md(e, c[4]);
    cd(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
    md(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    md(e, c[5]);
    return d;
  }
  function ip(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 89;
    d.height = a * 89;
    e.save();
    e.translate(a * 44.5, a * 44.5);
    vd(e, 6, a * 40, a * 10);
    e.restore();
    md(e, c[0], c[1], a * 5);
    e.save();
    e.translate(a * 44.5, a * 44.5);
    vd(e, 6, a * 25.11521001172521, a * 10);
    e.restore();
    md(e, c[2], c[3], a * 5);
    return d;
  }
  function tp(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 501;
    f.height = b * 564;
    g.scale(0.5, 0.5);
    g.translate(b * 240, b * 255);
    g.rotate(e);
    g.globalAlpha = c ? 0.5 : 0.2;
    cd(g, b * 174, b * 87.984375, b * 20.8806130178211);
    md(g, d[0], d[0], b * 8);
    cd(g, b * 174, b * 87.984375, b * 12.165525060596439);
    md(g, d[0], d[0], b * 8);
    cd(g, b * 174, b * 87.484375, b * 6);
    md(g, d[0]);
    cd(g, b * 30, b * 87.984375, b * 20.8806130178211);
    md(g, d[0], d[0], b * 4);
    cd(g, b * 30, b * 87.984375, b * 12.165525060596439);
    md(g, d[0], d[0], b * 4);
    cd(g, b * 30, b * 87.484375, b * 6);
    md(g, d[0]);
    cd(g, b * 100, b * 30, b * 20.8806130178211);
    md(g, d[0], d[0], b * 4);
    cd(g, b * 100, b * 30, b * 12.165525060596439);
    md(g, d[0], d[0], b * 4);
    cd(g, b * 100, b * 30, b * 6);
    md(g, d[0]);
    cd(g, b * 100, b * 130, b * 20.8806130178211);
    md(g, d[0], d[0], b * 4);
    cd(g, b * 100, b * 130, b * 12.165525060596439);
    md(g, d[0], d[0], b * 4);
    cd(g, b * 100, b * 130, b * 6);
    md(g, d[0]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    g.rotate(0);
    ud(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    md(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 101, b * 64.984375);
    g.rotate(0);
    ud(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    md(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 102, b * 63.484375);
    g.rotate(0);
    ud(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    g.translate(5, -5);
    g.globalAlpha = 1;
    cd(g, b * 174, b * 87.984375, b * 20.8806130178211);
    md(g, d[1], d[3], b * 8);
    cd(g, b * 174, b * 87.984375, b * 12.165525060596439);
    md(g, d[1], d[3], b * 8);
    cd(g, b * 174, b * 87.484375, b * 6);
    md(g, d[2]);
    cd(g, b * 30, b * 87.984375, b * 20.8806130178211);
    md(g, d[1], d[3], b * 8);
    cd(g, b * 30, b * 87.984375, b * 12.165525060596439);
    md(g, d[1], d[3], b * 8);
    cd(g, b * 30, b * 87.484375, b * 6);
    md(g, d[2]);
    cd(g, b * 102, b * 30, b * 20.8806130178211);
    md(g, d[1], d[3], b * 8);
    cd(g, b * 102, b * 30, b * 12.165525060596439);
    md(g, d[1], d[3], b * 8);
    cd(g, b * 102, b * 30, b * 6);
    md(g, d[1]);
    cd(g, b * 102, b * 130, b * 20.8806130178211);
    md(g, d[1], d[3], b * 8);
    cd(g, b * 102, b * 130, b * 12.165525060596439);
    md(g, d[1], d[3], b * 8);
    cd(g, b * 102, b * 130, b * 6);
    md(g, d[1]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    ud(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    md(g, d[1], d[3], b * 8);
    g.save();
    g.translate(b * 101, b * 64.984375);
    ud(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    md(g, d[2], d[1], b * 8);
    g.save();
    g.translate(b * 102, b * 63.484375);
    ud(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    md(g, d[2], d[1], b * 8);
    cd(g, b * 135, b * 107.36605834960938, b * 21.095023109728988);
    md(g, d[1], d[3], b * 8);
    cd(g, b * 135, b * 107.36605834960938, b * 13);
    md(g, d[1], d[3], b * 8);
    cd(g, b * 135, b * 107.36605834960938, b * 6.082762530298219);
    md(g, d[2]);
    cd(g, b * 70, b * 107.36605834960938, b * 21.095023109728988);
    md(g, d[1], d[3], b * 8);
    cd(g, b * 70, b * 107.36605834960938, b * 13);
    md(g, d[1], d[3], b * 8);
    cd(g, b * 70, b * 107.36605834960938, b * 6.082762530298219);
    md(g, d[2]);
    return f;
  }
  function np(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 170;
    var a = b * 172;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    f.translate(j, k + b * 7);
    f.globalAlpha = c ? 0.5 : 0;
    cd(f, 0, 0, b * 60);
    md(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -7);
    f.save();
    for (var h = 0; h < 10; h++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      vd(f, 3, b * 20, b * 4);
      md(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.restore();
    cd(f, 0, 0, b * 60);
    md(f, d[3], d[4], b * 4);
    cd(f, 0, 0, b * 40);
    md(f, d[5]);
    cd(f, 0, 0, b * 25);
    md(f, d[6], d[7], b * 8);
    return e;
  }
  function op(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    ud(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    md(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
    e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
    e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
    e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
    e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
    e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
    e.closePath();
    md(e, c[3], c[4], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    md(e, bg, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    md(e, $k, c[6], a * 15);
    return d;
  }
  function ap(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 149;
    c.height = a * 153;
    d.globalAlpha = 0.5;
    cd(d, a * 74.5, a * 85, a * 66);
    md(d, b[0]);
    d.globalAlpha = 1;
    cd(d, a * 75.5, a * 72.5, a * 67);
    md(d, b[1], b[2], a * 4);
    cd(d, a * 75.5, a * 73.5, a * 54);
    md(d, b[3]);
    d.globalAlpha = 0.5;
    cd(d, a * 74.5, a * 80.5, a * 39);
    md(d, b[4]);
    d.globalAlpha = 1;
    cd(d, a * 74.5, a * 74.5, a * 37);
    md(d, b[5]);
    return c;
  }
  function rp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 626;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    md(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    md(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 129);
    e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
    e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
    e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
    e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
    e.closePath();
    md(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    md(e, cq, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 475);
    e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
    e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
    e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
    e.closePath();
    md(e, c[4], c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 496);
    e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
    md(e, undefined, c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 521);
    e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
    md(e, undefined, c[5], a * 8);
    return d;
  }
  function sp(b, c, d, e) {
    const f = ~(b & 39695) & b | ~(b & 39695) & 39695;
    const g = (0 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c & 255)) + (24 << (c >> 24 & 255));
    const a = (16 << (d & 255)) + (8 << (d >> 16 & 255)) + (0 << (d >> 24 & 255)) + (24 << (d >> 8 & 255));
    const i = ~(e & 47744) & 47744 | ~(e & 47744) & e;
    const j = Jb(f);
    fx(f, g, a, i, f);
    return ~(j & 3125) & 3125 | ~(j & 3125) & j;
  }
  function hp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 192;
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 42, a * 99);
    d.globalAlpha = 0.5;
    ud(d, a * -7, a * -20, a * 14, a * 39, a * 20);
    d.restore();
    md(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 37, a * 94);
    ud(d, a * -7, a * -20, a * 14, a * 37, a * 20);
    d.restore();
    md(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 136, a * 99);
    d.globalAlpha = 0.5;
    ud(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    md(d, b[0], b[0], a * 13);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 131, a * 94);
    ud(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    md(d, b[2], b[2], a * 13);
    d.save();
    d.translate(a * 131, a * 94);
    ud(d, a * -76, a * -61, a * 152, a * 122, a * 20);
    d.restore();
    md(d, b[3], b[1], a * 8);
    d.save();
    d.translate(a * 168.5, a * 93.5);
    ud(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
    d.restore();
    md(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 93.5, a * 95.5);
    ud(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
    d.restore();
    md(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 130.5, a * 94);
    ud(d, a * -36, a * -67, a * 73, a * 134, a * 20);
    d.restore();
    md(d, b[3], b[2], a * 8);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 133, a * 97);
    ud(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    md(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 133, a * 92);
    ud(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    md(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 228, a * 99.5);
    d.globalAlpha = 0.5;
    ud(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    md(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 223, a * 94.5);
    ud(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    md(d, b[2]);
    d.save();
    d.translate(a * 133.5, a * 175.5);
    d.globalAlpha = 0.5;
    ud(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    md(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 128.5, a * 170.5);
    ud(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    md(d, b[2]);
    return c;
  }
  function gp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.save();
    e.translate(a * 70.16665649414062, a * 38.20831298828125);
    ud(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
    e.restore();
    md(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 70, a * 42.70831298828125);
    ud(e, a * -61, a * -20, a * 122, a * 40, a * 20);
    e.restore();
    md(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 70.375);
    e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
    e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
    e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
    e.closePath();
    md(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 11, a * 68.375);
    e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
    e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
    e.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, a * 17, a * 68.375);
    e.closePath();
    md(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 32.375);
    e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
    e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
    e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
    e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
    e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
    e.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
    e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
    e.closePath();
    md(e, c[2], c[1], a * 4);
    cd(e, a * 71, a * 44.375, a * 16.55294535724685);
    md(e, c[2], c[1], a * 4);
    cd(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
    md(e, c[2], c[1], a * 4);
    return d;
  }
  function lp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 573;
    d.height = a * 350;
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 336, a * 72);
      e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
      e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
      e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
      e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
      e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
      e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
      e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
      e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
      e.bezierCurveTo(a * 323, a * 13, a * 322, a * 25, a * 337, a * 74);
      e.closePath();
      md(e, b[4], b[4], a * 35);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 168, a * 42);
    e.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
    e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
    e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
    e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
    e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
    e.closePath();
    md(e, b[0], b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188, a * 41);
    e.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
    e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
    e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
    e.closePath();
    md(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 336, a * 71);
    e.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
    e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
    e.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
    e.closePath();
    md(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 357, a * 76);
    e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
    e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
    e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
    e.closePath();
    md(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 309, a * 168);
    e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
    md(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 54);
    e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
    e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
    e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
    e.closePath();
    md(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 292, a * 198);
    e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
    md(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 245, a * 68);
    e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
    md(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 96);
    e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
    md(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 124);
    e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
    md(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 183);
    e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
    md(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 213);
    e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
    md(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 399, a * 257);
    e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
    e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
    e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
    md(e, b[3], b[3], a * 12);
    return d;
  }
  function up(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    ud(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    md(e, c[2]);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    ud(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    md(e, c[2]);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    ud(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    md(e, c[2]);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    ud(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    md(e, c[2]);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    ud(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    md(e, c[2]);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    ud(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    md(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    ud(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    md(e, cq, c[4], a * 5);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    ud(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    md(e, zo, c[4], a * 5);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    ud(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    md(e, Rg, c[4], a * 5);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    ud(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    md(e, ao, c[4], a * 5);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    ud(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    md(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    ud(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    md(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    md(e, undefined, c[4], a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 99);
    vd(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    md(e, c[2]);
    e.save();
    e.translate(a * 98, a * 99);
    vd(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    md(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 99);
    vd(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    md(e, c[5], c[6], a * 5);
    e.save();
    e.translate(a * 98, a * 99);
    vd(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    md(e, c[7], c[8], a * 7);
    return d;
  }
  function bp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 108;
    d.height = a * 669;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    ud(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    md(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    e.rotate(0);
    ud(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    md(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    md(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    md(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    md(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    md(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    md(e, c[8]);
    return d;
  }
  function dp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    md(e, undefined, c[2], a * 40);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    md(e, zo, c[1], a * 20);
    e.globalAlpha = 0.8;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    md(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
    e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
    e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
    e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
    e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
    e.closePath();
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
    e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
    e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
    e.closePath();
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.00003051757812, a * 49.625);
    e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
    e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
    e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
    e.closePath();
    md(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 36.625);
    e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
    e.closePath();
    md(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53.000030517578125, a * 52.625);
    e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
    e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
    e.closePath();
    md(e, c[3]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    md(e, Ur, c[3], a * 4);
    return d;
  }
  function vp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 260;
    d.globalAlpha = 0.5;
    cd(d, a * 126.5, a * 134, a * 119);
    md(d, b[0]);
    d.globalAlpha = 1;
    cd(d, a * 126.5, a * 124, a * 119);
    md(d, b[1], b[2], a * 4);
    cd(d, a * 126.5, a * 127, a * 100);
    md(d, b[3]);
    d.globalAlpha = 0.5;
    cd(d, a * 126.5, a * 135, a * 81);
    md(d, b[0]);
    d.globalAlpha = 1;
    cd(d, a * 126.5, a * 125, a * 84);
    md(d, b[4], b[5], a * 4);
    cd(d, a * 126.5, a * 125, a * 61);
    md(d, b[6], b[7], a * 4);
    d.globalAlpha = 0.5;
    cd(d, a * 126.5, a * 134, a * 40);
    md(d, b[8]);
    d.globalAlpha = 1;
    cd(d, a * 126.5, a * 125, a * 40);
    md(d, b[9]);
    return c;
  }
  function mp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 145;
    d.height = a * 120;
    e.beginPath();
    e.scale(0.6, 0.6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 18, a * -8);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    md(e, c[4], c[5], a * 4);
    e.beginPath();
    e.scale(1.1, 1.1);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -9, a * 4);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    md(e, c[4], c[5], a * 4);
    e.scale(1.1, 1.1);
    e.translate(a * -9, a * 4);
    e.save();
    e.translate(a * 100, a * 73.06874084472656);
    e.rotate(0);
    ud(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
    e.restore();
    md(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 100, a * 71.36874389648438);
    e.rotate(0);
    ud(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
    e.restore();
    md(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 144, a * 80);
    e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
    e.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * 100);
    e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
    e.closePath();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 75);
    e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
    e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
    e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
    e.closePath();
    md(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    md(e, c[4], c[5], a * 4);
    e.translate(0, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 116.07290649414062);
    e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
    e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
    e.closePath();
    md(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.5, a * 96.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
    e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
    e.closePath();
    md(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    md(e, c[3], c[2], a * 4);
    e.scale(0.5, 0.5);
    e.translate(a * 100, a * 71);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    md(e, c[6], c[2], a * 4);
    return d;
  }
  function cp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 280;
    d.translate(a * -100, a * -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 228.5, a * 331.953125);
    d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
    d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
    d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
    d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
    d.closePath();
    md(d, b[0]);
    return c;
  }
  function pp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    ud(e, 0, 0, a * 400, a * 220, a * 30);
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    md(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    md(e, c[3], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    md(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    md(e, c[3], c[1], a * 12);
    cd(e, a * 41, a * 30, a * 14.7648230602334);
    md(e, c[3], c[1], a * 12);
    cd(e, a * 369, a * 30, a * 15.556349186104045);
    md(e, c[3], c[1], a * 12);
    cd(e, a * 364, a * 190, a * 15.620499351813308);
    md(e, c[3], c[1], a * 12);
    cd(e, a * 41, a * 186, a * 15.556349186104045);
    md(e, c[3], c[1], a * 12);
    return d;
  }
  function Cp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 165;
    d.height = a * 123;
    e.save();
    e.translate(a * 81, a * 65);
    ud(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    md(e, c[0]);
    e.save();
    e.translate(a * 81, a * 58);
    ud(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    md(e, c[1], c[2], 4);
    e.save();
    e.translate(a * 81, a * 58);
    ud(e, a * -69, a * -47, a * 138, a * 93, a * 15);
    e.restore();
    md(e, c[3], c[4], 4);
    e.save();
    e.translate(a * 79, a * 54);
    ud(e, a * -34, a * -40, a * 68, a * 88, a * 13);
    e.restore();
    md(e, undefined, c[5], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 13);
    e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
    e.closePath();
    md(e, ph, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 13);
    e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
    e.closePath();
    md(e, undefined, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 6);
    e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
    e.closePath();
    md(e, undefined, c[7], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 6);
    e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
    e.closePath();
    md(e, undefined, c[7], 4);
    e.save();
    e.translate(a * 79, a * 113);
    ud(e, a * -18, a * -2, a * 36, a * 4, a * 20);
    e.restore();
    md(e, undefined, c[8], 4);
    e.save();
    e.translate(a * 75, a * 118);
    ud(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
    e.restore();
    md(e, c[8]);
    return d;
  }
  function Tp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 138;
    d.height = a * 133;
    e.globalAlpha = b ? 0.3 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    md(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 73.640625);
    e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
    e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
    e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
    e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
    e.closePath();
    md(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 28.640625);
    e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
    e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
    e.closePath();
    md(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 26.640625);
    e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
    md(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 26.640625);
    e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
    md(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    md(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    md(e, c[3], c[4], a * 4);
    return d;
  }
  function fp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 120;
    e.height = b * 100;
    ud(f, b * 10, b * 10, b * 95, b * 80, b * 10);
    md(f, c[2]);
    ud(f, b * 10, b * 5, b * 95, b * 80, b * 10);
    md(f, c[3], c[4], b * 4);
    if (d == 0) {
      var g = Xc(b * 0.75, c, 0);
      f.drawImage(g, b * 22, b * 18);
    } else if (d == 1) {
      g = Xc(b * 0.75, c, 1);
      f.drawImage(g, b * 22, b * 18);
    }
    return e;
  }
  function zp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 200;
    d.height = a * 200;
    e.save();
    e.translate(a * 112, a * 158);
    ud(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
    e.restore();
    md(e, c[0]);
    e.save();
    e.translate(a * 170, a * 100);
    ud(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
    e.restore();
    md(e, c[0]);
    return d;
  }
  function yp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    ud(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    md(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    md(e, undefined, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    md(e, ao, c[6], a * 15);
    return d;
  }
  function wp(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 450;
    f.height = b * 260;
    var a = pp(b * 1, true, d);
    g.drawImage(a, b * 0, b * 0);
    if (e == 1) {
      g.translate(b * 100, b * 0);
      cd(g, b * 113, b * 120, b * 66);
      md(g, zo, d[4], b * 13);
      a = vu(b * 0.65, ie, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
      g.rotate(0.7);
      g.drawImage(a, b * 133, b * -64);
      g.rotate(-0.7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      md(g, undefined, d[4], b * 13);
    } else if (e == 2) {
      g.translate(b * 100, b * 0);
      cd(g, b * 113, b * 120, b * 66);
      md(g, xk, d[4], b * 13);
      g.translate(b * 30, b * 40);
      g.save();
      g.translate(b * 83.5, b * 66.5);
      ud(g, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
      g.restore();
      md(g, "#dff2f7", "#187484", b * 7);
      cd(g, b * 22, b * 82, b * 12);
      md(g, "#dff2f7", "#187484", b * 7);
      cd(g, b * 145, b * 82, b * 12);
      md(g, "#dff2f7", "#187484", b * 7);
      a = bm(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 10, b * 85);
      a = bm(b * 0.5, ge, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 50, b * 85);
      a = bm(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 90, b * 85);
      a = Pu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = Pu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = Pu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 125);
      a = Pu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 50, b * 115);
      a = Pu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 100);
      a = Pu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 80, b * 120);
      a = Pu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 110, b * 125);
      a = Pu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 120, b * 105);
    } else if (e == 3) {
      g.translate(b * 100, b * 0);
      cd(g, b * 113, b * 120, b * 66);
      md(g, Il, d[4], b * 13);
      g.translate(b * 40, b * 50);
      g.save();
      g.translate(b * 71, b * 69);
      ud(g, b * -30, b * -42, b * 60, b * 84, b * 10);
      g.restore();
      md(g, undefined, d[5], b * 4);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 42, b * 28);
      g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
      g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
      g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
      g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
      g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
      g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
      g.closePath();
      md(g, d[5], d[5], b * 4);
      g.translate(b * -40, b * -50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      md(g, undefined, d[4], b * 13);
    } else if (e == 4) {
      g.scale(1, 1);
      g.translate(b * 70, b * 50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 23, b * 6);
      g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
      md(g, $k, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 59, b * 10);
      g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
      md(g, xk, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 7, b * 55);
      g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
      md(g, lr, d[5], b * 14);
      g.translate(b * 10, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 123, b * 16);
      g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
      g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
      g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
      md(g, Us, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 72, b * 63);
      g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
      md(g, Jh, d[5], b * 14);
      g.translate(b * 10, b * 10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 141, b * 8);
      g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
      g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
      md(g, Us, d[5], b * 14);
      g.translate(b * 10, b * -10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 205, b * 124);
      g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
      g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
      g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
      md(g, Ts, d[5], b * 14);
    }
    return f;
  }
  function Pp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 647;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    ud(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    md(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    md(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    ud(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    md(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    md(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    md(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    md(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    md(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    md(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    md(e, c[8]);
    return d;
  }
  function kp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 204, a * 195.0833282470703);
    e.rotate(10.16);
    ud(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
    e.restore();
    md(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.5, a * 226.5833282470703);
    e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
    e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
    e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
    e.closePath();
    md(e, c[2], c[3], a * 4);
    e.save();
    e.translate(a * 197, a * 169.0833282470703);
    e.rotate(10.16);
    ud(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
    e.restore();
    md(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 24.583328247070312);
    e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
    e.closePath();
    md(e, lr, c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
    e.closePath();
    md(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
    e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
    e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
    e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
    e.closePath();
    md(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
    e.closePath();
    md(e, c[4], c[1], a * 8);
    e.save();
    e.translate(a * 249.63333129882812, a * 120.89999389648438);
    e.rotate(7.04);
    ud(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
    e.restore();
    md(e, c[5]);
    return d;
  }
  function Ap(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 345;
    d.height = a * 250;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 58);
    e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
    e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
    e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
    e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
    e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
    e.closePath();
    md(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 108, a * 51);
    e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
    e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
    e.closePath();
    md(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 249, a * 27);
    e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
    e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
    e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
    e.closePath();
    md(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 78);
    e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
    e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
    e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
    e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
    e.closePath();
    md(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 105);
    e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
    e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
    e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
    e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
    e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
    e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
    e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
    e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
    e.closePath();
    md(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 48, a * 130);
    e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
    e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
    e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
    e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
    e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
    e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
    e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
    e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
    e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
    e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
    e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
    e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
    e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
    e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
    e.closePath();
    md(e, c[1], c[2], a * 8);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    md(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    md(e, c[7], c[8], a * 8);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    md(e, $k, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    md(e, undefined, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 66);
    e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
    e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
    e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
    e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
    e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
    e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
    e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
    e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
    e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
    e.closePath();
    md(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 185);
    e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
    e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
    e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
    e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
    e.closePath();
    md(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226, a * 186);
    e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
    e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
    e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
    e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
    e.closePath();
    md(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 172, a * 110);
    e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
    e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
    e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
    e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
    e.closePath();
    md(e, c[3], c[4], a * 8);
    return d;
  }
  function xp(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 170;
    f.height = b * 200;
    g.translate(b * 5, b * 15);
    if (e == 1) {
      g.translate(0, b * -5);
      cd(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
      md(g, d[1], d[5], b * 20);
      cd(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
      md(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 31.267044067382812);
      ud(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
      g.restore();
      md(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 13.267044067382812);
      ud(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
      g.restore();
      md(g, d[1], d[5], b * 20);
    }
    cd(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
    md(g, d[1], d[2], b * 7);
    cd(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
    md(g, d[1], d[2], b * 7);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 18.000030517578125, b * 105.85795593261719);
    g.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
    g.closePath();
    md(g, d[1], d[2], b * 8);
    cd(g, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
    md(g, d[1], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 112.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
    g.closePath();
    md(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 48.03977966308594);
    g.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
    g.closePath();
    md(g, d[3], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 80.00003051757812, b * 111.6761474609375);
    g.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
    g.closePath();
    md(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 107.00003051757812, b * 76.6761474609375);
    g.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
    g.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
    g.closePath();
    md(g, d[3], d[2], b * 4);
    cd(g, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
    md(g, d[3], d[2], b * 4);
    g.save();
    g.translate(b * 77.00003051757812, b * 31.267044067382812);
    g.rotate(0);
    ud(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
    g.restore();
    md(g, d[1], d[2], b * 7);
    g.save();
    g.translate(b * 77.00003051757812, b * 13.267044067382812);
    g.rotate(0);
    ud(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
    g.restore();
    md(g, d[1], d[2], b * 7);
    return f;
  }
  function Jp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    cd(e, a * 220, a * 201, a * 170.41713528867922);
    md(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    cd(e, a * 220, a * 201, a * 170.41713528867922);
    md(e, c[1], c[2], a * 6);
    cd(e, a * 220, a * 201, a * 130);
    md(e, c[11], c[2], a * 6);
    cd(e, a * 222, a * 199, a * 120.74767078498864);
    md(e, _o, c[3], a * 40);
    cd(e, a * 220, a * 200, a * 95.44108130150245);
    md(e, $k, c[2], a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    cd(e, a * 63, a * 136, a * 49.193495504995376);
    md(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    cd(e, a * 63, a * 136, a * 49.193495504995376);
    md(e, c[8], c[2], a * 4);
    cd(e, a * 63, a * 137, a * 25.632011235952593);
    md(e, c[7], c[2], a * 4);
    return d;
  }
  function Mp() {
    Ax.ΔΔᐃᐃΔ.open = false;
    var a = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
    var b = 100;
    if (a) {
      for (var c = 0; zx.ⲆΔΔ[22].length > c; c++) {
        var d = zx.ⲆΔΔ[22][c];
        var e = ΔⵠΔⵠ.ΔⲆⲆᐃ(d, a);
        if (b > e) {
          b = e;
          Ax.ΔΔᐃᐃΔ.open = _h;
          Ax.ΔΔᐃᐃΔ.ⵠⵠΔᐃ = d.ⵠⵠΔᐃ;
          Ax.ΔΔᐃᐃΔ.ⲆᐃΔΔᐃ = d.id;
        }
      }
      if (b < 100) {
        Cx.ΔΔᐃᐃΔ.ⵠᐃᐃⲆ(Zo);
      }
    }
  }
  function Bp() {
    Ax.ⵠᐃⲆΔ.id = -1;
    Ax.ⵠᐃⲆΔ.lock = false;
    Ax.ⵠᐃⲆΔ.locked = cg;
    Ax.ⵠᐃⲆΔ.ᐃᐃⲆᐃΔᐃⲆ = false;
    Ax.ⵠᐃⲆΔ.ΔΔΔⲆᐃⲆΔ = false;
    Ax.ⵠᐃⲆΔ.open = false;
    var b = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
    var c = 100;
    if (b) {
      for (var d = 0; d < zx.ⲆΔΔ[11].length; d++) {
        var e = zx.ⲆΔΔ[11][d];
        var f = ΔⵠΔⵠ.ΔⲆⲆᐃ(e, b);
        if (f < c) {
          c = f;
          Ax.ⵠᐃⲆΔ.open = sn;
          Ax.ⵠᐃⲆΔ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
          Ax.ⵠᐃⲆΔ.ΔⲆⵠΔ = e.info;
          Ax.ⵠᐃⲆΔ.ⵠⵠΔᐃ = e.ⵠⵠΔᐃ;
          Ax.ⵠᐃⲆΔ.ⲆᐃΔΔᐃ = e.id;
          Ax.ⵠᐃⲆΔ.locked = e.lock;
          Ax.ⵠᐃⲆΔ.lock = !!e.lock && e.ⵠⵠΔᐃ != Ax.id && !Ax.ⵠⵠΔⵠΔⵠⵠ(e.ⵠⵠΔᐃ);
          Ax.ⵠᐃⲆΔ.ΔΔΔⲆᐃⲆΔ = Ax.id === e.ⵠⵠΔᐃ && !Ax.ⵠᐃⲆΔ.locked && Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(148) != -1;
          if (Ax.ⵠᐃⲆΔ.locked && Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(158) != -1) {
            Ax.ⵠᐃⲆΔ.ᐃᐃⲆᐃΔᐃⲆ = true;
          }
        }
      }
      if (c < 100) {
        var j = ᐃΔ[339];
        var a = Cx.ᐃⵠΔ[0];
        var k = Math.floor(a.info.translate.x + (a.info.ᐃᐃ[0].width - j.width) / 2);
        var l = Math.floor(a.info.translate.y + (a.info.ᐃᐃ[0].height - j.height) / 2) + 3;
        Qp(Zo, j, k, l);
        if ((!Ax.ⵠᐃⲆΔ.lock || Ax.ⵠᐃⲆΔ.ⵠⵠΔᐃ === Ax.id) && Ax.ⵠᐃⲆΔ.id >= 0) {
          (a = Cx.ᐃⵠΔ[Ax.ⵠᐃⲆΔ.id]).ⵠᐃᐃⲆ(Zo);
          var h = Ax.ⵠᐃⲆΔ.ΔⲆⵠΔ;
          if (h > 1) {
            Fp(h, a);
          }
        }
        if (Ax.ⵠᐃⲆΔ.lock) {
          Cx.ΔΔⵠᐃⲆᐃⵠ.ⵠᐃᐃⲆ(Zo);
        } else if (Ax.ⵠᐃⲆΔ.ΔΔΔⲆᐃⲆΔ) {
          Cx.ⲆⵠⵠΔΔΔⵠ.ⵠᐃᐃⲆ(Zo);
        }
        if (Ax.ⵠᐃⲆΔ.ᐃᐃⲆᐃΔᐃⲆ) {
          Cx.ΔΔΔⲆⵠΔΔ.ⵠᐃᐃⲆ(Zo);
        }
      }
    }
  }
  function Ep() {
    if (Ax.ⲆᐃⲆᐃΔⵠⵠ) {
      Zo.globalAlpha = 0.5;
      Zo.fillStyle = "#000";
      Zo.fillRect(0, 0, $o, sa);
      Zo.globalAlpha = 0.8;
      var b = ᐃΔ[516][zx.time];
      var c = ua - b.width / 2;
      var d = dq - b.height / 2;
      Qp(Zo, b, c, d);
      Zo.globalAlpha = 1;
      if (Cx.Δⵠⵠⵠⵠ.ⲆⵠⲆⵠΔ.x > -1) {
        Zo.fillStyle = "#660000";
        cd(Zo, c + fq * (Cx.Δⵠⵠⵠⵠ.ⲆⵠⲆⵠΔ.x * 3), d + fq * (Cx.Δⵠⵠⵠⵠ.ⲆⵠⲆⵠΔ.y * 3), fq * 14);
        Zo.fill();
      }
      for (var e = Cx.Δⵠⵠⵠⵠ.ⵠΔᐃΔ, f = 0; f < e.length; f++) {
        var g = e[f];
        zx.time;
        Zo.fillStyle = "#ff0000";
        cd(Zo, c + g.x / (zx.ΔᐃᐃⵠΔ * 100) * 600 * fq, d + fq * (g.y / (zx.ᐃⵠᐃᐃᐃ * 100) * 600), fq * 6);
        Zo.fill();
      }
      var h = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
      if (h) {
        Zo.fillStyle = zx.time ? "#fff" : "#e39716";
        cd(Zo, c + h.x / (zx.ΔᐃᐃⵠΔ * 100) * 600 * fq, d + h.y / (zx.ᐃⵠᐃᐃᐃ * 100) * 600 * fq, fq * 12);
        Zo.fill();
      }
    }
  }
  function Dp() {
    if (!Ax.ⵠᐃⲆΔ.open && !Ax.ᐃⲆᐃⵠᐃ.open) {
      Ax.ᐃᐃΔⲆ.open = ks;
      var b = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; d < Ff.length; d++) {
          for (var e = Ff[d][0], f = Ff[d][1], j = 0; zx.ⲆΔΔ[e].length > j; j++) {
            var k = zx.ⲆΔΔ[e][j];
            var m = ΔⵠΔⵠ.ΔⲆⲆᐃ(k, b);
            if (c > m) {
              c = m;
              Ax.ᐃᐃΔⲆ.ⵠⲆᐃᐃⲆⵠⲆ = f;
              Ax.ᐃᐃΔⲆ.type = e;
              Ax.ᐃᐃΔⲆ.open = true;
              Ax.ᐃᐃΔⲆ.ⵠⵠⵠΔⵠΔⲆ = k.info & 255;
              Ax.ᐃᐃΔⲆ.ⵠⲆΔᐃⵠᐃⵠ = (k.info & 65280) >> 8;
              Ax.ᐃᐃΔⲆ.ⵠⵠΔᐃ = k.ⵠⵠΔᐃ;
              Ax.ᐃᐃΔⲆ.ⲆᐃΔΔᐃ = k.id;
            }
          }
        }
        if (c < 100) {
          var p;
          var q = ᐃΔ[656];
          var g = (l = Cx.ΔⵠⲆⵠΔᐃⵠ).info.translate.x - 33;
          Qp(Zo, q, g, 0);
          if (Ax.ᐃᐃΔⲆ.ⵠⵠⵠΔⵠΔⲆ > 0) {
            l.ⵠᐃᐃⲆ(Zo);
            if ((p = Ax.ᐃᐃΔⲆ.ⵠⵠⵠΔⵠΔⲆ) > 1) {
              Fp(p, l);
            }
          }
          switch (Ax.ᐃᐃΔⲆ.ⵠⲆᐃᐃⲆⵠⲆ) {
            case 108:
              var l = Cx.ⲆⵠⵠΔΔⵠⲆ;
              break;
            case 111:
              l = Cx.ⵠᐃᐃⵠⲆⵠᐃ;
              break;
            case 112:
              l = Cx.ⵠⲆⲆⲆΔΔΔ;
              break;
            case 121:
              l = Cx.ⵠⵠΔΔᐃⵠⵠ;
              break;
            case 202:
              l = Cx.ΔΔΔΔΔⲆΔ;
          }
          if (Ax.ᐃᐃΔⲆ.ⵠⲆΔᐃⵠᐃⵠ > 0) {
            l.ⵠᐃᐃⲆ(Zo);
            if ((p = Ax.ᐃᐃΔⲆ.ⵠⲆΔᐃⵠᐃⵠ) > 1) {
              Fp(p, l);
            }
          }
        }
      }
    }
  }
  function Ip(b, c, d) {
    var e = ᐃΔ[465][b];
    var f = c.info.translate.x + fq * 5;
    var g = c.info.translate.y + fq * 5;
    if (c.info.state == vf || d) {
      g += fq * 5;
    }
    Qp(Zo, e, f, g);
  }
  function Sp() {
    if (!Ax.ⵠᐃⲆΔ.open && !Ax.ᐃⲆᐃⵠᐃ.open) {
      Ax.ⲆᐃⲆⵠ.open = false;
      var b = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; zx.ⲆΔΔ[32].length > d; d++) {
          var e = zx.ⲆΔΔ[32][d];
          var f = ΔⵠΔⵠ.ΔⲆⲆᐃ(e, b);
          if (c > f) {
            c = f;
            Ax.ⲆᐃⲆⵠ.open = true;
            Ax.ⲆᐃⲆⵠ.ΔΔᐃⲆⲆᐃΔ = e.info & 255;
            Ax.ⲆᐃⲆⵠ.ΔⲆⲆΔᐃ = (e.info & 65280) >> 8;
            Ax.ⲆᐃⲆⵠ.ⵠⵠΔᐃ = e.ⵠⵠΔᐃ;
            Ax.ⲆᐃⲆⵠ.ⲆᐃΔΔᐃ = e.id;
          }
        }
        if (c < 100) {
          var g = ᐃΔ[655];
          var a = (k = Cx.ⲆΔⵠΔΔⵠᐃ).info.translate.x - 33;
          Qp(Zo, g, a, 0);
          if (Ax.ⲆᐃⲆⵠ.ΔΔᐃⲆⲆᐃΔ > 0) {
            k.ⵠᐃᐃⲆ(Zo);
            var j = Ax.ⲆᐃⲆⵠ.ΔΔᐃⲆⲆᐃΔ;
            if (j > 1) {
              Fp(j, k);
            }
          }
          var k = Cx.ΔᐃᐃⵠⵠⵠⲆ;
          if (Ax.ⲆᐃⲆⵠ.ΔⲆⲆΔᐃ > 0) {
            k.ⵠᐃᐃⲆ(Zo);
            if ((j = Ax.ⲆᐃⲆⵠ.ΔⲆⲆΔᐃ) > 1) {
              Fp(j, k);
            }
          }
        }
      }
    }
  }
  function Qp(b, c, d, e, f, i, a, j, k, h) {
    if (c.ᐃⲆⵠᐃⲆΔⵠ === undefined || c.ᐃⲆⵠᐃⲆΔⵠ() === 1) {
      if (h !== xj) {
        b.drawImage(c, d, e, Math.max(1, f), Math.max(1, i), a, j, k, h);
      } else if (ao !== i) {
        b.drawImage(c, d, e, f, i);
      } else {
        b.drawImage(c, d, e);
      }
    }
  }
  function _p() {
    if (Ax.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ.length > 0) {
      var b = {
        x: Cx.Δⵠⵠⵠⵠ.translate.x,
        y: Cx.Δⵠⵠⵠⵠ.translate.y - fq * 120
      };
    } else {
      b = {
        x: Cx.Δⵠⵠⵠⵠ.translate.x,
        y: Cx.Δⵠⵠⵠⵠ.translate.y - fq * 50
      };
    }
    Zo.globalAlpha = 0.8;
    var c = ᐃΔ[259][zx.time];
    Qp(Zo, c, b.x, b.y);
    Zo.globalAlpha = 1;
    if (Cx.Δⵠⵠⵠⵠ.ⲆⵠⲆⵠΔ.x > -1) {
      Zo.fillStyle = "#660000";
      cd(Zo, b.x + Cx.Δⵠⵠⵠⵠ.ⲆⵠⲆⵠΔ.x * fq, b.y + fq * Cx.Δⵠⵠⵠⵠ.ⲆⵠⲆⵠΔ.y, fq * 5);
      Zo.fill();
    }
    var d = fq;
    for (var f = Cx.Δⵠⵠⵠⵠ.ⵠΔᐃΔ, g = 0; g < f.length; g++) {
      var h = f[g];
      zx.time;
      Zo.fillStyle = "#ff0000";
      cd(Zo, b.x + fq * (h.x / (zx.ΔᐃᐃⵠΔ * 100) * 193), b.y + h.y / (zx.ᐃⵠᐃᐃᐃ * 100) * 193 * fq, fq * 2);
      Zo.fill();
    }
    var i = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
    if (i) {
      Zo.fillStyle = zx.time ? "#fff" : "#e39716";
      cd(Zo, b.x + fq * (i.x / (zx.ΔᐃᐃⵠΔ * 100) * 193), b.y + fq * (i.y / (zx.ᐃⵠᐃᐃᐃ * 100) * 193), fq * 4);
      Zo.fill();
    }
    fq = d;
  }
  function Fp(a, b) {
    if (!ᐃΔ[283][a]) {
      ᐃΔ[283][a] = gm(fq, "x" + a, 17, "#FFF");
    }
    var c = ᐃΔ[283][a];
    var d = b.info.translate.x + b.info.ᐃᐃ[0].width - c.width - fq * 14;
    var e = b.info.translate.y + b.info.ᐃᐃ[0].height - c.height - fq * 19;
    if (vf == b.info.state) {
      e += fq * 5;
    }
    Qp(Zo, c, d, e);
  }
  function Rp() {
    if (!Ax.ⵠᐃⲆΔ.open && !Ax.ᐃⲆᐃⵠᐃ.open && !Ax.ⲆᐃⲆⵠ.open && !Ax.ᐃᐃΔⲆ.open) {
      Ax.ᐃⵠᐃᐃ.open = cg;
      var b = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; zx.ⲆΔΔ[34].length > d; d++) {
          var e = zx.ⲆΔΔ[34][d];
          var f = ΔⵠΔⵠ.ΔⲆⲆᐃ(e, b);
          if (c > f) {
            c = f;
            Ax.ᐃⵠᐃᐃ.open = Ja;
            Ax.ᐃⵠᐃᐃ.ⵠⵠⵠΔⵠΔⲆ = e.info & 31;
            Ax.ᐃⵠᐃᐃ.ΔⲆⲆΔᐃ = (e.info & 992) >> 5;
            Ax.ᐃⵠᐃᐃ.ⲆⲆⵠΔΔᐃᐃ = (e.info & 31744) >> 10;
            Ax.ᐃⵠᐃᐃ.ⵠⵠΔᐃ = e.ⵠⵠΔᐃ;
            Ax.ᐃⵠᐃᐃ.ⲆᐃΔΔᐃ = e.id;
          }
        }
        if (c < 100) {
          var g = ᐃΔ[722];
          var a = (j = Cx.ΔΔᐃΔᐃⵠᐃ).info.translate.x - 32;
          Qp(Zo, g, a, 0);
          if (Ax.ᐃⵠᐃᐃ.ⵠⵠⵠΔⵠΔⲆ > 0) {
            j.ⵠᐃᐃⲆ(Zo);
            if ((k = Ax.ᐃⵠᐃᐃ.ⵠⵠⵠΔⵠΔⲆ) > 1) {
              Fp(k, j);
            }
          }
          var j = Cx.ⵠΔⵠᐃⲆᐃⲆ;
          if (Ax.ᐃⵠᐃᐃ.ⲆⲆⵠΔΔᐃᐃ > 0) {
            j.ⵠᐃᐃⲆ(Zo);
            if ((k = Ax.ᐃⵠᐃᐃ.ⲆⲆⵠΔΔᐃᐃ) > 1) {
              Fp(k, j);
            }
          }
          j = Cx.ᐃᐃΔⲆΔΔⵠ;
          if (Ax.ᐃⵠᐃᐃ.ΔⲆⲆΔᐃ > 0) {
            j.ⵠᐃᐃⲆ(Zo);
            var k = Ax.ᐃⵠᐃᐃ.ΔⲆⲆΔᐃ;
            if (k > 1) {
              Fp(k, j);
            }
          }
        }
      }
    }
  }
  function jp() {
    Ax.ⵠⲆⲆⲆⵠ.id = -1;
    Ax.ⵠⲆⲆⲆⵠ.ⵠⵠΔᐃ = -1;
    if (!Ax.ⲆⵠΔⵠΔⲆΔ && !Ax.ⵠⲆⲆⲆⵠ.wait && !Ax.ΔΔΔⵠⵠ) {
      var b = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; zx.ⲆΔΔ[29].length > d; d++) {
          var e = zx.ⲆΔΔ[29][d];
          var f = ΔⵠΔⵠ.ΔⲆⲆᐃ(e, b);
          if (c > f) {
            c = f;
            Ax.ⵠⲆⲆⲆⵠ.id = e.id;
            Ax.ⵠⲆⲆⲆⵠ.ⵠⵠΔᐃ = e.ⵠⵠΔᐃ;
            Ax.ⵠⲆⲆⲆⵠ.info = e.info;
            Ax.ⵠⲆⲆⲆⵠ.lock = (e.info & 16) >> 4;
          }
        }
      }
      var g = Cx.ⲆⵠⲆⲆⲆ;
      Cx.ⲆⵠⲆⲆⲆ = -1;
      if (Ax.ⵠⲆⲆⲆⵠ.ⵠⵠΔᐃ == -1 || Ax.ᐃΔⵠⵠᐃ.length != 0 && Ax.ⵠⲆⲆⲆⵠ.ⵠⵠΔᐃ != Ax.id) {
        if (Ax.ᐃΔⵠⵠᐃ.length != 0 && Ax.ᐃΔⵠⵠᐃ[0] != Ax.id) {
          Cx.ⲆⵠⲆⲆⲆ = 2;
        } else if (Ax.ᐃΔⵠⵠᐃ.length != 0 && Ax.id == Ax.ᐃΔⵠⵠᐃ[0]) {
          Cx.ⲆⵠⲆⲆⲆ = 1;
        } else if (Ax.ᐃΔⵠⵠᐃ.length != 0) {
          Cx.ⲆⵠⲆⲆⲆ = 3;
        }
      } else if (Ax.ᐃΔⵠⵠᐃ.length == 0 && Ax.ⵠⲆⲆⲆⵠ.info >= 8) {
        Cx.ⲆⵠⲆⲆⲆ = 4;
      } else if (Ax.ᐃΔⵠⵠᐃ.length == 0) {
        Cx.ⲆⵠⲆⲆⲆ = 3;
      } else {
        Cx.ⲆⵠⲆⲆⲆ = 0;
      }
      if (Cx.ⲆⵠⲆⲆⲆ != -1) {
        Cx.ΔⵠⲆⵠΔ[Cx.ⲆⵠⲆⲆⲆ].button.ⵠᐃᐃⲆ(Zo);
      }
      var a = document.getElementById("team_box").style;
      if (Cx.ⲆⵠⲆⲆⲆ != -1 && g != Cx.ⲆⵠⲆⲆⲆ && a.display == "inline-block") {
        Cx.ΔⵠⲆⵠΔ[Cx.ⲆⵠⲆⲆⲆ].action();
      }
    }
  }
  function Lp() {
    if (!Ax.ⵠᐃⲆΔ.open) {
      Ax.ᐃⲆᐃⵠᐃ.ΔⲆⵠΔ = 0;
      Ax.ᐃⲆᐃⵠᐃ.open = false;
      var b = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; d < zx.ⲆΔΔ[18].length; d++) {
          var e = zx.ⲆΔΔ[18][d];
          var f = ΔⵠΔⵠ.ΔⲆⲆᐃ(e, b);
          if (f < c) {
            c = f;
            Ax.ᐃⲆᐃⵠᐃ.open = $a;
            Ax.ᐃⲆᐃⵠᐃ.ΔⲆⵠΔ = e.info;
            Ax.ᐃⲆᐃⵠᐃ.ⵠⵠΔᐃ = e.ⵠⵠΔᐃ;
            Ax.ᐃⲆᐃⵠᐃ.ⲆᐃΔΔᐃ = e.id;
          }
        }
        if (c < 100) {
          var j = ᐃΔ[411];
          var a = Cx.ΔⲆᐃⵠⵠⲆΔ;
          var k = Math.floor(a.info.translate.x + (a.info.ᐃᐃ[0].width - j.width) / 2);
          var l = Math.floor(a.info.translate.y + (a.info.ᐃᐃ[0].height - j.height) / 2) + 3;
          Qp(Zo, j, k, l);
          if (Ax.ᐃⲆᐃⵠᐃ.ΔⲆⵠΔ > 0) {
            a.ⵠᐃᐃⲆ(Zo);
            var h = Ax.ᐃⲆᐃⵠᐃ.ΔⲆⵠΔ;
            if (h > 1) {
              Fp(h, a);
            }
          }
        }
      }
    }
  }
  function Wp() {
    if (!Ax.ⵠᐃⲆΔ.open && !Ax.ᐃⲆᐃⵠᐃ.open && !Ax.ⲆᐃⲆⵠ.open && !Ax.ᐃⵠᐃᐃ.open && !Ax.ᐃᐃΔⲆ.open) {
      Ax.sign.open = rh;
      var a = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
      var b = 100;
      if (a) {
        for (var c = 0; zx.ⲆΔΔ[36].length > c; c++) {
          var d = zx.ⲆΔΔ[36][c];
          var e = ΔⵠΔⵠ.ΔⲆⲆᐃ(d, a);
          if (e < b && d.info === 0 && d.ⵠⵠΔᐃ === Ax.id) {
            Ax.sign.open = true;
            b = e;
            Ax.sign.ⲆᐃΔΔᐃ = d.id;
          }
        }
        if (b < 100) {
          Cx.sign.button.ⵠᐃᐃⲆ(Zo);
        }
      }
    }
  }
  function Gp() {
    var a = Cx.ⲆⲆⵠⲆᐃ;
    var b = a.id;
    if (a.ᐃⲆᐃⲆⲆ === 1 && a.display === 1) {
      if (ⲆⵠᐃⲆᐃ[b] === undefined) {
        ⲆⵠᐃⲆᐃ[b] = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          var e = _b[b];
          d.font = "20px Baloo Paaji";
          var f = 0;
          if (e.length >= 1) {
            f = Math.max(0, d.measureText(e[0]).width);
          }
          d.font = "17px Baloo Paaji";
          if (e.length >= 2) {
            f = Math.max(f, d.measureText(e[1]).width);
          }
          d.font = "14px Baloo Paaji";
          Fb = 2;
          for (; Fb < e.length; Fb++) {
            f = Math.max(f, d.measureText(e[Fb]).width);
          }
          var g = f + 35;
          var a = 0;
          a = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
          c.width = g;
          c.height = a;
          ud(d, 0, 0, g, a, 10);
          d.fillStyle = "#000000";
          d.globalAlpha = 0.5;
          d.fill();
          if (e.length >= 1) {
            d.textBaseline = "middle";
            d.font = "20px Baloo Paaji";
            d.globalAlpha = 1;
            d.fillStyle = "#e2c340";
            d.fillText(e[0], 15, 28);
          }
          if (e.length >= 2) {
            d.font = "17px Baloo Paaji";
            d.fillStyle = "#ffffff";
            d.fillText(e[1], 15, 55);
            a = 55;
          }
          if (e.length >= 3) {
            d.font = "14px Baloo Paaji";
            d.globalAlpha = 0.7;
            Fb = 2;
            for (; Fb < e.length; Fb++) {
              d.fillText(e[Fb], 15, a + 28);
              a += 26;
            }
          }
          return c;
        }(b);
      }
      if (a.ᐃⵠⲆᐃ === 1) {
        Qp(Zo, ⲆⵠᐃⲆᐃ[b], a.x, a.y);
      } else if ($o < a.x - 80 + ⲆⵠᐃⲆᐃ[b].width) {
        Qp(Zo, ⲆⵠᐃⲆᐃ[b], $o - ⲆⵠᐃⲆᐃ[b].width - 10, a.y - ⲆⵠᐃⲆᐃ[b].height - 10);
      } else {
        Qp(Zo, ⲆⵠᐃⲆᐃ[b], a.x - 80, a.y - ⲆⵠᐃⲆᐃ[b].height - 10);
      }
    }
  }
  function Np() {
    if (Ax.reconnect.enabled) {
      Zo.globalAlpha = 0.9;
      Zo.fillStyle = "#000";
      ud(Zo, ua - 150, dq - 90, 300, 180, 15);
      Zo.fill();
      Zo.globalAlpha = 1;
      var a = ᐃΔ[301];
      Zo.save();
      Ax.reconnect.rotate = (Ax.reconnect.rotate + Hx * 2) % (Math.PI * 2);
      Zo.translate($o / 2, sa / 2 - 25);
      Zo.rotate(Ax.reconnect.rotate);
      Qp(Zo, a, -a.width / 2, -a.height / 2);
      Zo.restore();
      a = ᐃΔ[525];
      Qp(Zo, a, ($o - a.width) / 2, (sa - a.height) / 2 + 25);
    }
  }
  ⲆⵠᐃⲆᐃ = [];
  ΔⵠᐃΔΔⲆⲆ = [];
  var qp = [];
  function Op() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    ᐃᐃ = ᐃΔ[848][zx.time];
    ⲆⲆᐃ = -ᐃᐃ.width;
    ⲆΔⲆ = -ᐃᐃ.height;
    Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    Zo.restore();
  }
  function Hp() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    ᐃᐃ = ᐃΔ[239][zx.time];
    ⲆⲆᐃ = -ᐃᐃ.width;
    ⲆΔⲆ = -ᐃᐃ.height;
    Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    Zo.restore();
  }
  function Up() {
    var a = -8;
    if (Ax.ⲆᐃΔΔⵠ.enabled) {
      var b = ᐃΔ[546];
      Qp(Zo, b, Ax.ⲆᐃΔΔⵠ.translate.x, Ax.ⲆᐃΔΔⵠ.translate.y + a);
      a += 70;
    }
    if (Ax.ⵠΔᐃᐃⵠΔⲆ === 1) {
      b = ᐃΔ[549];
      Qp(Zo, b, Ax.ⲆᐃΔΔⵠ.translate.x, Ax.ⲆᐃΔΔⵠ.translate.y + a);
      a += 70;
    } else if (Ax.ⲆᐃⵠⲆ.ⵠᐃΔᐃⵠ.x < 0.25 || Ax.ⲆᐃⵠⲆ.ᐃⵠΔⵠᐃᐃΔ.x < 0.25 || Ax.ⲆᐃⵠⲆ.ᐃΔⵠᐃⵠΔⲆ.x < 0.25 || Ax.ⲆᐃⵠⲆ.ᐃⲆⲆⵠΔⲆⲆ.x < 0.25 || Ax.ⲆᐃⵠⲆ.ᐃᐃⵠᐃⵠ.x < 0.25) {
      b = ᐃΔ[548];
      Qp(Zo, b, Ax.ⲆᐃΔΔⵠ.translate.x, Ax.ⲆᐃΔΔⵠ.translate.y + a);
      a += 70;
    }
    if (Ax.ⵠᐃᐃⵠⵠ > 0) {
      b = ᐃΔ[547];
      Qp(Zo, b, Ax.ⲆᐃΔΔⵠ.translate.x, Ax.ⲆᐃΔΔⵠ.translate.y + a);
      var c = qp[Ax.ⵠᐃᐃⵠⵠ];
      if (c === undefined) {
        c = gm(fq, Ax.ⵠᐃᐃⵠⵠ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
        qp[Ax.ⵠᐃᐃⵠⵠ] = c;
      }
      if (Ax.ⵠᐃᐃⵠⵠ < 9) {
        Qp(Zo, c, Ax.ⲆᐃΔΔⵠ.translate.x - 39, Ax.ⲆᐃΔΔⵠ.translate.y + a + 20);
      } else {
        Qp(Zo, c, Ax.ⲆᐃΔΔⵠ.translate.x - 46, Ax.ⲆᐃΔΔⵠ.translate.y + a + 20);
      }
    }
  }
  function Yp() {
    var a = Ax.ⲆΔⵠⲆΔ;
    if (a.wait) {
      var b = a.timeout.ⲆᐃⲆ();
      Zo.save();
      var c = ᐃΔ[537];
      Zo.translate(c.width - fq * 2, Cx.ⲆᐃⵠⲆ.translate.y - fq * 60);
      var d = -c.width / 2 - 2;
      var e = -c.height / 2 - 4;
      Qp(Zo, c, d, e);
      Zo.beginPath();
      Zo.lineWidth = fq * 5;
      Zo.strokeStyle = Cs.ΔⲆⲆΔᐃⲆⵠ[zx.time];
      Zo.lineCap = "round";
      Zo.arc(0, e + c.height / 2, fq * 25, 0, a.timeout.ⲆⵠⲆ * (Math.PI * 2));
      Zo.stroke();
      Zo.restore();
      if (b) {
        a.wait = ln;
        a.timeout.ⲆⵠⲆ = 0;
        a.timeout.Ⲇⵠⵠ = ks;
      }
    }
  }
  function Kp(b) {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == $h) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = hl;
      }
      var c = (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * Hx * 600 * fq;
      var d = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * c;
      var e = c * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      d = 0;
      e = 0;
    }
    var f = ᐃΔ[853].length;
    ᐃᐃ = ᐃΔ[853][(this.ⲆⲆᐃⲆ + this.Ⲇᐃ % 2) % f][zx.time];
    ⲆⲆᐃ = -ᐃᐃ.width;
    ⲆΔⲆ = -ᐃᐃ.height;
    var g = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
    if (g && (this.ⵠⵠΔᐃ === Ax.id || Ax.ⵠⵠΔⵠΔⵠⵠ(this.ⵠⵠΔᐃ))) {
      if (ΔⵠΔⵠ.ΔⲆⲆᐃ(this, g) < 550) {
        this.opacity = Math.max(this.opacity - Hx, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + Hx, 1);
      }
    } else if (g && ΔⵠΔⵠ.ΔⲆⲆᐃ(this, zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ]) < 150) {
      this.opacity = Math.max(this.opacity - Hx, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + Hx, 1);
    }
    var a = Zo.globalAlpha;
    Zo.globalAlpha *= this.opacity;
    Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2 + d, -ⲆΔⲆ / 2 + e, ⲆⲆᐃ, ⲆΔⲆ);
    Zo.globalAlpha = a;
    Zo.restore();
  }
  function Vp(a) {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = hl;
      }
      var b = fq * (Hx * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600);
      var c = b * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var d = b * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    ᐃᐃ = ᐃΔ[a][zx.time];
    ⲆⲆᐃ = -ᐃᐃ.width;
    ⲆΔⲆ = -ᐃᐃ.height;
    Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2 + c, -ⲆΔⲆ / 2 + d, ⲆⲆᐃ, ⲆΔⲆ);
    Zo.restore();
  }
  function Xp(a) {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = false;
      }
      var b = fq * (Hx * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600);
      var c = b * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var d = b * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = ᐃΔ[a][zx.time];
    ⲆⲆᐃ = -e.width;
    ⲆΔⲆ = -e.height;
    Qp(Zo, e, -ⲆⲆᐃ / 2 + c, -ⲆΔⲆ / 2 + d, ⲆⲆᐃ, ⲆΔⲆ);
    Zo.restore();
  }
  function Zp() {
    Zo.save();
    var a = fq;
    if (Ax.ⲆᐃⵠⲆ.ᐃΔᐃᐃⵠ.x < 0.25) {
      Zo.globalAlpha = Ax.ⲆᐃⵠⲆ.ⵠᐃⲆᐃᐃⲆᐃ.ⲆⵠⲆ;
    }
    var b = Ax.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ.length > 0 ? -70 : 0;
    if (Ax.ⵠᐃⲆΔ.open || Ax.ᐃⲆᐃⵠᐃ.open && Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(109) != -1 || Ax.ⲆᐃⲆⵠ.open && Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(134) != -1 || Ax.ᐃᐃΔⲆ.open && Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(109) != -1 || Ax.ⵠⵠΔΔᐃ.open && Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(180) != -1 || Ax.ᐃⵠᐃᐃ.open && (Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(109) != -1 || Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(131) != -1)) {
      b -= fq * 50;
    }
    Zo.translate(($o - fq * 950) / 2, b);
    Zo.fillStyle = "#69A148";
    Zo.fillRect(this.translate.x + fq * 37, this.translate.y + fq * 17, fq * (Ax.ⲆᐃⵠⲆ.ᐃΔᐃᐃⵠ.x * 178), fq * 18);
    Zo.globalAlpha = 1;
    if (Ax.ⲆᐃⵠⲆ.ᐃⵠΔⵠᐃᐃΔ.x < 0.35) {
      Zo.fillStyle = "#8F050A";
      Zo.globalAlpha = Ax.ⲆᐃⵠⲆ.ΔⵠⲆⵠⲆᐃⵠ.ⲆⵠⲆ;
      Zo.fillRect(this.translate.x + fq * 277, this.translate.y + fq * 17, fq * 178, fq * 18);
      Zo.globalAlpha = 1;
    }
    Zo.fillStyle = "#AF352A";
    Zo.fillRect(this.translate.x + fq * 277, this.translate.y + fq * 17, Ax.ⲆᐃⵠⲆ.ᐃⵠΔⵠᐃᐃΔ.x * 178 * fq, fq * 18);
    if (Ax.ⲆᐃⵠⲆ.ⵠᐃΔᐃⵠ.x < 0.35) {
      Zo.fillStyle = "#366B91";
      Zo.globalAlpha = Ax.ⲆᐃⵠⲆ.ⲆΔⲆⵠᐃΔᐃ.ⲆⵠⲆ;
      Zo.fillRect(this.translate.x + fq * 517, this.translate.y + fq * 17, fq * 178, fq * 18);
      Zo.globalAlpha = 1;
    }
    Zo.fillStyle = "#669BB1";
    Zo.fillRect(this.translate.x + fq * 517, this.translate.y + fq * 17, fq * (Ax.ⲆᐃⵠⲆ.ⵠᐃΔᐃⵠ.x * 178), fq * 18);
    if (Ax.ⲆᐃⵠⲆ.ⵠᐃΔᐃⵠ.x > 0.99) {
      if (Ax.ⲆᐃⵠⲆ.ᐃᐃⵠᐃⵠ.x < 0.35) {
        Zo.fillStyle = "#6C4036";
        Zo.globalAlpha = Ax.ⲆᐃⵠⲆ.ΔⲆⵠΔⵠⵠⵠ.ⲆⵠⲆ;
        Zo.fillRect(this.translate.x + fq * 517, this.translate.y + fq * 17, fq * 178, fq * 18);
        Zo.globalAlpha = 1;
      }
      Zo.fillStyle = "#9C4036";
      Zo.fillRect(this.translate.x + fq * 517, this.translate.y + fq * 17, (1 - Ax.ⲆᐃⵠⲆ.ᐃᐃⵠᐃⵠ.x) * 178 * fq, fq * 18);
    }
    if (Ax.ⲆᐃⵠⲆ.ᐃΔⵠᐃⵠΔⲆ.x < 0.35) {
      Zo.fillStyle = "#001A57";
      Zo.globalAlpha = Ax.ⲆᐃⵠⲆ.ⲆᐃⲆΔⲆᐃⵠ.ⲆⵠⲆ;
      Zo.fillRect(this.translate.x + fq * 757, this.translate.y + fq * 17, fq * 178, fq * 18);
      Zo.globalAlpha = 1;
    }
    Zo.fillStyle = "#074A87";
    Zo.fillRect(this.translate.x + fq * 757, this.translate.y + fq * 17, Ax.ⲆᐃⵠⲆ.ᐃΔⵠᐃⵠΔⲆ.x * 178 * fq, fq * 18);
    fq = a;
    Qp(Zo, this.ᐃᐃ, this.translate.x, this.translate.y);
    this.y = this.translate.y + b;
    Zo.restore();
    if (Ax.ⲆᐃⵠⲆ.ᐃⲆⲆⵠΔⲆⲆ.x < 0.99) {
      var c = Math.floor(ua - ᐃΔ[608].width / 2);
      b += this.translate.y - ᐃΔ[608].height - fq * 5;
      Zo.fillStyle = "#BBE8EF";
      Zo.fillRect(c + 5, b + fq * 5, Ax.ⲆᐃⵠⲆ.ᐃⲆⲆⵠΔⲆⲆ.x * (fq * 588), fq * 10);
      if (Ax.ⲆᐃⵠⲆ.ᐃⲆⲆⵠΔⲆⲆ.x < 0.35) {
        Zo.fillStyle = "#9BA8AF";
        Zo.globalAlpha = Ax.ⲆᐃⵠⲆ.ⵠⵠᐃᐃⲆⲆⲆ.ⲆⵠⲆ;
        Zo.fillRect(c + 5, b + 5, fq * 588, fq * 10);
        Zo.globalAlpha = 1;
      }
      Qp(Zo, ᐃΔ[608], c, b);
      this.y = b;
    }
  }
  function $p() {
    var a = Ax.ⲆΔΔΔⲆ;
    if (a.wait) {
      var b = a.timeout.ⲆᐃⲆ();
      Zo.save();
      var c = ᐃΔ[792];
      Zo.translate(c.width - fq * 2, Cx.ⲆᐃⵠⲆ.translate.y - fq * 125);
      var d = -c.width / 2 + 10;
      var e = -c.height / 2 - 4;
      Qp(Zo, c, d, e);
      Zo.beginPath();
      Zo.lineWidth = fq * 5;
      Zo.strokeStyle = Cs.ΔⲆⲆᐃⵠᐃΔ[zx.time];
      Zo.lineCap = "round";
      Zo.arc(9, e + c.height / 2, fq * 25, 0, Math.PI * 2 * a.timeout.ⲆⵠⲆ);
      Zo.stroke();
      Zo.restore();
      if (b) {
        a.wait = Pi;
        a.timeout.ⲆⵠⲆ = 0;
        a.timeout.Ⲇⵠⵠ = Ir;
      }
    }
  }
  function Tu() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = Cj;
      }
      var a = fq * (Hx * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600);
      var b = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * a;
      var c = a * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    ᐃᐃ = ᐃΔ[167][zx.time];
    ⲆⲆᐃ = -ᐃᐃ.width;
    ⲆΔⲆ = -ᐃᐃ.height;
    Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2 + b, -ⲆΔⲆ / 2 + c, ⲆⲆᐃ, ⲆΔⲆ);
    if (this.lock) {
      ᐃᐃ = ᐃΔ[148][zx.time];
      ⲆⲆᐃ = -ᐃᐃ.width;
      ⲆΔⲆ = -ᐃᐃ.height;
      Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2 + b - fq * 1, -ⲆΔⲆ / 2 + c, ⲆⲆᐃ, ⲆΔⲆ);
    }
    Zo.restore();
  }
  function Uu() {
    var b = Ax.ᐃⵠⲆᐃ;
    if (!b.ᐃΔⵠᐃΔ && b.ᐃⵠⲆⲆ > 0) {
      var c = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
      if (!c) {
        return;
      }
      Zo.save();
      if (Ih[b.ᐃⵠⲆⲆ].ⵠⵠⲆΔ === 0 && b.mode === 0) {
        Zo.translate(Ax.ⲆⲆΔ.x + c.x, Ax.ⲆⲆΔ.y + c.y);
        Zo.rotate(c.angle);
        Zo.translate(120, 0);
      } else {
        var d = Math.floor(c.x + Math.sin(c.angle) * 120);
        var e = Math.floor(c.y + Math.cos(c.angle) * 120);
        d = Ax.ⲆⲆΔ.x + (d - d % 100 + 50);
        e = Ax.ⲆⲆΔ.y + (e - e % 100 + 50);
        Zo.translate(d, e);
      }
      var f = ᐃΔ[b.ᐃⵠⲆⲆ][zx.time];
      Zo.globalAlpha = 0.5;
      Qp(Zo, f, -f.width / 2, -f.height / 2);
      Zo.globalAlpha = 1;
      Zo.restore();
      if (Ih[b.ᐃⵠⲆⲆ].ⵠⵠⲆΔ === 0) {
        if (!b.label[b.mode]) {
          if (b.mode === 0) {
            b.label[0] = gm(fq, _b[336], 20, "#e2c340");
          } else {
            b.label[1] = gm(fq, _b[337], 20, "#e2c340");
          }
        }
        f = b.label[b.mode];
        Qp(Zo, f, ua + -f.width / 2, Cx.ⲆᐃⵠⲆ.y - 26);
      }
    }
    if (b.ᐃΔⵠᐃΔ) {
      var i = b.timeout.ⲆᐃⲆ();
      for (var a = 0; b.ᐃΔᐃⲆᐃ.length > a; a++) {
        var j = b.ᐃΔᐃⲆᐃ[a];
        if (j.id == b.id) {
          var k = fq * 42;
          var l = fq * 17;
          ud(Zo, j.info.translate.x, j.info.translate.y + (1 - b.timeout.ⲆⵠⲆ) * k, j.info.width, b.timeout.ⲆⵠⲆ * k + l, fq * 10);
          Zo.fillStyle = "#55B973";
          Zo.fill();
          Zo.globalAlpha = 0.8;
          j.ⵠᐃᐃⲆ(Zo);
        } else {
          Zo.globalAlpha = 0.5;
          j.ⵠᐃᐃⲆ(Zo);
        }
        Zo.globalAlpha = 1;
      }
      if (i) {
        b.ᐃΔⵠᐃΔ = false;
        b.timeout.ⲆⵠⲆ = 0;
        b.timeout.Ⲇⵠⵠ = cg;
      }
      return ie;
    }
    for (a = 0; b.ᐃΔᐃⲆᐃ.length > a; a++) {
      b.ᐃΔᐃⲆᐃ[a].ⵠᐃᐃⲆ(Zo);
    }
    return false;
  }
  function Vu(b) {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = Sl;
      }
      var c = (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * Hx * 600 * fq;
      var d = c * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var e = c * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      d = 0;
      e = 0;
    }
    if (b === 913 && !zx.transition) {
      var f = 0;
      for (var g = zx.ⲆΔΔ[0], a = 0; a < g.length; a++) {
        var h = ΔⵠΔⵠ.ΔⲆⲆᐃ(g[a], this);
        if (h < 140 && h > 35) {
          f = 0;
          break;
        }
        if (h <= 35) {
          f = 1;
        }
      }
      this.opacity = f === 0 ? Math.max(0.5, this.opacity - Hx / 1.5) : Math.min(1, this.opacity + Hx / 1.5);
      Zo.globalAlpha = this.opacity;
    }
    ᐃᐃ = ᐃΔ[b][zx.time];
    ⲆⲆᐃ = -ᐃᐃ.width;
    ⲆΔⲆ = -ᐃᐃ.height;
    Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2 + d, -ⲆΔⲆ / 2 + e, ⲆⲆᐃ, ⲆΔⲆ);
    Zo.globalAlpha = 1;
    Zo.restore();
  }
  function Wu() {
    var a = zx.ⵠΔⵠΔⲆ;
    var b = ᐃΔ[725][zx.time];
    Qp(Zo, b, a.translate.x, a.translate.y);
    Zo.save();
    Zo.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
    zx.ⵠΔⵠΔⲆ.now = (new Date().getTime() - a.ⵠΔⲆΔⲆ + a.ΔᐃΔΔⵠ) % 480000;
    var c = zx.ⵠΔⵠΔⲆ.now * (Math.PI * 2) / 480000 - Math.PI / 2;
    Zo.rotate(c);
    Qp(Zo, ᐃΔ[726], -b.width / 2, -b.height / 2);
    Zo.restore();
  }
  function Xu() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    ᐃᐃ = ᐃΔ[837][zx.time];
    ⲆⲆᐃ = -ᐃᐃ.width;
    ⲆΔⲆ = -ᐃᐃ.height;
    Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    Zo.restore();
  }
  function Yu() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    ᐃᐃ = ᐃΔ[321][zx.time];
    ⲆⲆᐃ = -ᐃᐃ.width;
    ⲆΔⲆ = -ᐃᐃ.height;
    Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    Zo.restore();
  }
  function Zu() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    ᐃᐃ = ᐃΔ[811][zx.time];
    ⲆⲆᐃ = -ᐃᐃ.width;
    ⲆΔⲆ = -ᐃᐃ.height;
    Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    Zo.restore();
  }
  function $u() {
    for (var b = Ax.ᐃΔΔⲆ, c = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ], d = 0; d < b.ⵠΔᐃᐃᐃ.length; d++) {
      var e = b.ⵠΔᐃᐃᐃ[d];
      var f = kg;
      if ((c = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ]) && (e.id == c.right || c.ⵠΔⲆᐃΔ == e.id && c.ⵠΔⲆᐃΔ > 0)) {
        f = ge;
        Qp(Zo, e.info.ᐃᐃ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
      } else {
        e.ⵠᐃᐃⲆ(Zo);
      }
      var g = Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[e.id];
      if (g > 1) {
        Fp(g, e);
      }
      if (g > 0) {
        Ip(d, e, f);
      }
      var h = Ax.ⵠᐃⲆΔ;
      if (!!h.open && (h.id < 0 || e.id == h.id) && (!h.lock || h.ⵠⵠΔᐃ == Ax.id)) {
        Cx.ⵠⵠⲆⲆⲆ[e.id].ⵠᐃᐃⲆ(Zo);
      }
      if (Ax.ᐃⲆᐃⵠᐃ.open && e.id == 109) {
        Cx.ⵠⵠⲆⲆⲆ[e.id].ⵠᐃᐃⲆ(Zo);
      }
      if (Ax.ⵠⵠΔΔᐃ.open && e.id == 180) {
        Cx.ⵠⵠⲆⲆⲆ[e.id].ⵠᐃᐃⲆ(Zo);
      }
      if (Ax.ⲆᐃⲆⵠ.open && e.id == 134) {
        Cx.ⵠⵠⲆⲆⲆ[e.id].ⵠᐃᐃⲆ(Zo);
      }
      if (Ax.ᐃᐃΔⲆ.open && e.id == 109) {
        Cx.ⵠⵠⲆⲆⲆ[e.id].ⵠᐃᐃⲆ(Zo);
      }
      if (Ax.ᐃⵠᐃᐃ.open && (e.id == 109 || e.id == 131)) {
        Cx.ⵠⵠⲆⲆⲆ[e.id].ⵠᐃᐃⲆ(Zo);
      }
    }
    if (e && b.max > d) {
      var j = ᐃΔ[334][2];
      Ⲇⵠ = e.info.translate.x;
      ᐃⵠⲆ = e.info.translate.y;
      ⲆⲆᐃⲆ = 1;
      for (; d < b.max; d++, ⲆⲆᐃⲆ++) {
        Qp(Zo, j, Ⲇⵠ + ⲆⲆᐃⲆ * (j.width + 5), ᐃⵠⲆ);
      }
    }
  }
  function _u() {
    var a = Ax.ⵠⲆᐃⲆΔ;
    if (a.wait) {
      var b = a.timeout.ⲆᐃⲆ();
      Zo.save();
      var c = ᐃΔ[794];
      Zo.translate(c.width - fq * 12, Cx.ⲆᐃⵠⲆ.translate.y - fq * 190);
      var d = -c.width / 2 + 9;
      var e = -c.height / 2 - 4;
      Qp(Zo, c, d, e);
      Zo.beginPath();
      Zo.lineWidth = fq * 5;
      Zo.strokeStyle = Cs.ΔⲆⲆᐃⵠᐃΔ[zx.time];
      Zo.lineCap = "round";
      Zo.arc(9, e + c.height / 2, fq * 25, 0, a.timeout.ⲆⵠⲆ * (Math.PI * 2));
      Zo.stroke();
      Zo.restore();
      if (b) {
        a.wait = rh;
        a.timeout.ⲆⵠⲆ = 0;
        a.timeout.Ⲇⵠⵠ = es;
      }
    }
  }
  function av() {
    var a = Ax.ᐃⵠⲆᐃ;
    if (a.ᐃΔⵠᐃΔ) {
      var b = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
      Zo.save();
      Zo.translate(Ax.ⲆⲆΔ.x + b.x, Ax.ⲆⲆΔ.y + b.y);
      var c = ᐃΔ[324];
      var d = -c.width / 2;
      var e = -c.height / 2 - fq * 125;
      Qp(Zo, c, d, e);
      Zo.beginPath();
      Zo.lineWidth = fq * 5;
      Zo.strokeStyle = Cs.ᐃⵠⵠⵠⲆᐃΔ[zx.time];
      Zo.lineCap = "round";
      Zo.arc(0, e + c.height / 2, fq * 25, 0, Math.PI * 2 * a.timeout.ⲆⵠⲆ);
      Zo.stroke();
      Zo.restore();
    }
  }
  function bv() {
    var b = Ax.ᐃⲆᐃⲆΔ;
    var c = Cx.ⵠΔᐃⲆ;
    if (b.ⲆᐃⲆ) {
      b.ⲆᐃⲆ = false;
      var d = b.ᐃⲆⵠΔⲆ;
      var e = c.ΔⲆ.width;
      var f = c.ΔⲆ.height;
      var i = c.Ⲇ;
      var a = zx.ⵠΔᐃΔ;
      var j = kg;
      i.clearRect(0, 0, e, f);
      i.drawImage(c.ᐃᐃ, 0, 0);
      for (var k = 0; k < d.length; k++) {
        var l = a[d[k]];
        if ((zx.mode !== 1 || l.ⲆⲆΔⵠⵠ !== "spectator") && (zx.mode !== 2 || l.ⲆΔⵠⵠ !== 0)) {
          if (Ax.id == d[k]) {
            j = Ja;
            if (zx.mode === 3 && l.ⲆΔⵠⵠ === 0) {
              Δⵠ = "#FF0000";
            } else {
              Δⵠ = "#FFF";
            }
          } else if (zx.mode === 3 && l.ⲆΔⵠⵠ === 0) {
            Δⵠ = "#990000";
          } else {
            Δⵠ = "#A1BDCD";
          }
          i.drawImage(gm(fq, "" + (k + 1), fq * 15, Δⵠ), fq * 20, (40 + k * 22) * fq);
          if (!l.ΔⵠⵠⵠⲆᐃⲆ) {
            l.ΔⵠⵠⵠⲆᐃⲆ = gm(fq, l.ⲆⲆΔⵠⵠ, fq * 15, Δⵠ, Us, undefined, undefined, Jh, fq * 110);
          }
          i.drawImage(l.ΔⵠⵠⵠⲆᐃⲆ, fq * 39, (40 + k * 22) * fq);
          i.drawImage(gm(fq, ΔⵠΔⵠ.ⵠⵠᐃᐃᐃⲆΔ(l.ᐃⲆⲆⲆⲆ), fq * 15, Δⵠ), fq * 156, fq * (40 + k * 22));
        }
      }
      if (!j) {
        if (zx.mode === 0 || zx.mode === 3 || zx.mode === 4 || zx.mode === 5 || zx.mode === 7 || zx.mode === 1 && !Ax.ⲆⵠΔⵠΔⲆΔ || zx.mode === 2 && !Ax.ΔΔΔⵠⵠ) {
          i.drawImage(ᐃΔ[306], fq * 15, fq * (46 + k * 22));
          i.drawImage(gm(fq, ΔⵠΔⵠ.ⵠⵠᐃᐃᐃⲆΔ(zx.ⵠΔᐃΔ[Ax.id].ᐃⲆⲆⲆⲆ), fq * 15, "#FFF"), fq * 100, (46 + k * 22) * fq);
        }
      }
    }
    Qp(Zo, c.ΔⲆ, c.translate.x, c.translate.y);
  }
  function cv(a) {
    if ((a = a / 100) <= 0.95) {
      Zo.save();
      Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
      Zo.rotate(this.angle);
      if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
        if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && Ma == this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ) {
          this.ⵠⵠᐃ.ⲆᐃⲆ = nl;
        }
        var b = fq * (Hx * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600);
        var c = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * b;
        var d = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      Zo.globalAlpha = 0.5;
      dd(Zo, c, d, fq * 28, a);
      md(Zo, null, "#000000", fq * 18);
      Zo.globalAlpha = 1;
      dd(Zo, c, d, fq * 28, a);
      md(Zo, null, Cs.ᐃⵠⵠⵠⲆᐃΔ[zx.time], fq * 6);
      Zo.restore();
    }
  }
  function dv(a) {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = false;
      }
      var b = (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * Hx * 600 * fq;
      var c = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * b;
      var d = b * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    if (this.ⵠᐃⵠᐃᐃ.ⲆᐃⲆ()) {
      this.color += 0.2 + Math.random() * 0.3;
    }
    ᐃᐃ = ᐃΔ[872][Math.floor(this.id + this.color) % 5][zx.time];
    ⲆⲆᐃ = this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ * -ᐃᐃ.width;
    ⲆΔⲆ = -ᐃᐃ.height * this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ;
    Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2 + c, -ⲆΔⲆ / 2 + d, ⲆⲆᐃ, ⲆΔⲆ);
    Zo.restore();
  }
  function ev(a) {
    if ((a = a / 100) <= 0.8) {
      Zo.save();
      Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
      Zo.rotate(this.angle);
      if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
        if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
          this.ⵠⵠᐃ.ⲆᐃⲆ = es;
        }
        var b = (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * Hx * 600 * fq;
        var c = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * b;
        var d = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      Zo.globalAlpha = 0.5;
      dd(Zo, c, d, fq * 18, a);
      md(Zo, null, "#000000", fq * 18);
      Zo.globalAlpha = 1;
      dd(Zo, c, d, fq * 18, a);
      md(Zo, null, Cs.ᐃⲆᐃᐃΔΔΔ[zx.time], fq * 6);
      Zo.restore();
    }
  }
  function fv() {
    var b = Ax.ⵠⲆⲆⲆⵠ;
    if (b.wait) {
      var c = b.timeout.ⲆᐃⲆ();
      Zo.save();
      var d = ᐃΔ[562];
      var e = ᐃΔ[537].height + fq * 25;
      Zo.translate(d.width, Cx.ⲆᐃⵠⲆ.translate.y - fq * 188 - e);
      var f = -d.width / 2 - 2;
      var g = -d.height / 2 - 4;
      Qp(Zo, d, f + 2, g);
      Zo.beginPath();
      Zo.lineWidth = fq * 5;
      Zo.strokeStyle = Cs.ΔⲆⲆΔᐃⲆⵠ[zx.time];
      Zo.lineCap = "round";
      Zo.arc(0, g + d.height / 2, fq * 25, 0, b.timeout.ⲆⵠⲆ * (Math.PI * 2));
      Zo.stroke();
      Zo.restore();
      if (c) {
        b.wait = false;
        b.timeout.ⲆⵠⲆ = 0;
        b.timeout.Ⲇⵠⵠ = false;
      }
    }
  }
  var gv = 0;
  function hv() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == rh) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = false;
      }
      var b = fq * (Hx * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600);
      var c = b * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var d = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Zo.rotate(this.angle);
      this.ΔⵠⲆΔ.ⲆᐃⲆ();
      if (this.info & 16) {
        var f = ᐃΔ[970][zx.time];
      } else {
        f = ᐃΔ[208][zx.time];
      }
      var g = -f.width * this.ΔⵠⲆΔ.ⲆⵠⲆ;
      var a = -f.height * this.ΔⵠⲆΔ.ⲆⵠⲆ;
      Qp(Zo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[971][zx.time];
      } else {
        f = ᐃΔ[209][zx.time];
      }
      Zo.translate(0, f.height / 2);
      Qp(Zo, f, c - f.width / 2, -f.height + d);
    }
    Zo.restore();
  }
  function iv() {
    if (this.info >= 10) {
      Zo.save();
      Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
      Zo.rotate(this.angle);
      if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
        if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == ln) {
          this.ⵠⵠᐃ.ⲆᐃⲆ = false;
        }
        var b = fq * (Hx * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600);
        var c = b * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
        var d = b * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      this.ΔⵠⲆΔ.ⲆᐃⲆ();
      var e = ᐃΔ[115][zx.time];
      var f = this.ΔⵠⲆΔ.ⲆⵠⲆ * -e.width;
      var g = this.ΔⵠⲆΔ.ⲆⵠⲆ * -e.height;
      Qp(Zo, e, -f / 2 + c, -g / 2 + d, f, g);
      Zo.restore();
    }
  }
  function jv() {
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      var a = (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * Hx * 600 * fq;
      var b = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * a;
      var c = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Hx * 0.5) % (Math.PI * 2);
    }
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x + b, Ax.ⲆⲆΔ.y + this.y + c);
    Zo.save();
    Zo.rotate(this.rotate);
    ᐃᐃ = ᐃΔ[641][zx.time];
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
    Zo.restore();
    Zo.save();
    Zo.rotate(this.ⲆⲆΔΔᐃⵠⵠΔᐃ);
    ᐃᐃ = ᐃΔ[642][zx.time];
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
    Zo.restore();
    Zo.restore();
  }
  function kv() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = false;
      }
      var b = fq * (Hx * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600);
      var c = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * b;
      var d = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Zo.rotate(this.angle);
      this.ΔⵠⲆΔ.ⲆᐃⲆ();
      if (this.info & 16) {
        var f = ᐃΔ[953][zx.time];
      } else {
        f = ᐃΔ[204][zx.time];
      }
      var g = -f.width * this.ΔⵠⲆΔ.ⲆⵠⲆ;
      var a = -f.height * this.ΔⵠⲆΔ.ⲆⵠⲆ;
      Qp(Zo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[954][zx.time];
      } else {
        f = ᐃΔ[205][zx.time];
      }
      Zo.translate(0, f.height / 2);
      Qp(Zo, f, c - f.width / 2, -f.height + d);
    }
    Zo.restore();
  }
  function lv() {
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = Pi;
      }
      var a = fq * ((1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * Hx * 600);
      var b = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * a;
      var c = a * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    this.ΔⵠᐃⵠᐃΔᐃ = (this.ΔⵠᐃⵠᐃΔᐃ + Hx * 3) % (Math.PI * 2);
    this.ΔΔⵠΔᐃⵠⵠ = (this.ΔΔⵠΔᐃⵠⵠ - Hx * 3) % (Math.PI * 2);
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x + b, Ax.ⲆⲆΔ.y + this.y + c);
    Zo.save();
    Zo.rotate(this.angle);
    ᐃᐃ = ᐃΔ[152][zx.time];
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
    Zo.restore();
    Zo.save();
    Zo.rotate(this.ΔⵠᐃⵠᐃΔᐃ);
    ᐃᐃ = ᐃΔ[1194][zx.time];
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
    Zo.restore();
    Zo.save();
    Zo.rotate(this.ΔΔⵠΔᐃⵠⵠ);
    ᐃᐃ = ᐃΔ[1193][zx.time];
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
    Zo.restore();
    Zo.restore();
  }
  function mv() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    var a = ΔⵠΔⵠ.ΔⲆⲆᐃ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + Hx / 2, 1.8) : Math.max(this.scale - Hx, 1);
    this.ⵠΔΔⲆ.ⲆᐃⲆ();
    this.rotate.ⲆᐃⲆ();
    this.ⲆⲆΔᐃ = a < 350 ? Math.max(0, this.ⲆⲆΔᐃ - Hx * 2.2) : Math.min(1, this.ⲆⲆΔᐃ + Hx * 2.2);
    b = (this.info & 1) === 0 ? ᐃΔ[1113][zx.time] : ᐃΔ[1114][zx.time];
    ⲆⲆᐃ = this.scale * (-b.width * this.ⵠΔΔⲆ.ⲆⵠⲆ);
    ⲆΔⲆ = this.scale * (-b.height * this.ⵠΔΔⲆ.ⲆⵠⲆ);
    Zo.globalAlpha = 1 - this.ⲆⲆΔᐃ;
    Qp(Zo, b, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
    b = this.info & 1 ? ᐃΔ[1098][zx.time] : ᐃΔ[235][zx.time];
    ⲆⲆᐃ = this.scale * (this.ⵠΔΔⲆ.ⲆⵠⲆ * -b.width);
    ⲆΔⲆ = -b.height * this.ⵠΔΔⲆ.ⲆⵠⲆ * this.scale;
    Zo.globalAlpha = this.ⲆⲆΔᐃ;
    Qp(Zo, b, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == 0) {
        this.action -= 2;
      }
      Zo.globalAlpha = (0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ) * (1 - this.ⲆⲆΔᐃ);
      var b = ᐃΔ[1115];
      ⲆⲆᐃ = this.scale * (this.ⵠΔΔⲆ.ⲆⵠⲆ * -b.width);
      ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -b.height * this.scale;
      Qp(Zo, b, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      Zo.globalAlpha = (0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ) * this.ⲆⲆΔᐃ;
      b = ᐃΔ[1107];
      ⲆⲆᐃ = this.scale * (this.ⵠΔΔⲆ.ⲆⵠⲆ * -b.width);
      ⲆΔⲆ = this.scale * (this.ⵠΔΔⲆ.ⲆⵠⲆ * -b.height);
      Qp(Zo, b, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      Zo.globalAlpha = 1;
    }
    b = this.info & 1 ? ᐃΔ[1101][zx.time] : ᐃΔ[1102][zx.time];
    ⲆⲆᐃ = -b.width * this.ⵠΔΔⲆ.ⲆⵠⲆ * this.scale;
    ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -b.height * this.scale;
    Zo.save();
    Zo.translate(fq * -20, fq * 0);
    Zo.rotate(this.rotate.ⲆⵠⲆ);
    Zo.globalAlpha = this.ⲆⲆΔᐃ;
    Qp(Zo, b, fq * -ⲆⲆᐃ / 4, -ⲆΔⲆ * fq / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Zo.globalAlpha = this.ⲆⲆΔᐃ * (0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ);
      b = ᐃΔ[1108];
      Qp(Zo, b, fq * -ⲆⲆᐃ / 4, -ⲆΔⲆ * fq / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
    b = (this.info & 1) === 0 ? ᐃΔ[1105][zx.time] : ᐃΔ[1104][zx.time];
    Zo.save();
    Zo.translate(fq * 20, fq * 0);
    Zo.rotate(-this.rotate.ⲆⵠⲆ);
    Zo.globalAlpha = this.ⲆⲆΔᐃ;
    Qp(Zo, b, -ⲆⲆᐃ * fq / 4, -ⲆΔⲆ * fq / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Zo.globalAlpha = (0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ) * this.ⲆⲆΔᐃ;
      b = ᐃΔ[1109];
      Qp(Zo, b, -ⲆⲆᐃ * fq / 4, fq * -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      Zo.globalAlpha = 1;
    }
    Zo.globalAlpha = 1;
    Zo.restore();
    Zo.restore();
  }
  function nv() {
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && Ma == this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = cg;
      }
      var a = fq * (Hx * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600);
      var b = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * a;
      var c = a * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Zo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Zo.translate(Ax.ⲆⲆΔ.x + this.x + b, Ax.ⲆⲆΔ.y + this.y + c);
    Zo.rotate(this.angle);
    ᐃᐃ = ᐃΔ[154][zx.time];
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Hx * 3) % (Math.PI * 2);
    }
    Zo.rotate(this.rotate);
    ᐃᐃ = ᐃΔ[1202][zx.time];
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
    Zo.restore();
  }
  function ov(a) {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    this.ⵠΔΔⲆ.ⲆᐃⲆ();
    ᐃᐃ = ᐃΔ[a][zx.time];
    ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width;
    ⲆΔⲆ = -ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ;
    Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    Zo.restore();
  }
  function pv() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == es) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = Ir;
      }
      var b = fq * (Hx * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600);
      var c = b * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var d = b * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
      e = ᐃΔ[716][zx.time];
      Qp(Zo, e, -e.width / 2 + c, -e.height / 2 + d);
      this.up.ⲆᐃⲆ();
      var e = ᐃΔ[720][zx.time];
      var f = -e.width * this.up.ⲆⵠⲆ;
      var g = this.up.ⲆⵠⲆ * -e.height;
      Qp(Zo, e, -f / 2 + fq * 1, -g / 2 + fq * 3, f, g);
    } else {
      e = ᐃΔ[144][zx.time];
      Qp(Zo, e, -e.width / 2 + c, -e.height / 2 + d);
    }
    Zo.restore();
  }
  function qv(a, b, c) {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + b, Ax.ⲆⲆΔ.y + c);
    Zo.rotate(this.angle);
    Zo.translate(this.x - b, this.y - c);
    this.ⵠΔΔⲆ.ⲆᐃⲆ();
    ᐃᐃ = ᐃΔ[a][zx.time];
    ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width;
    ⲆΔⲆ = -ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ;
    Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    Zo.restore();
  }
  function rv() {
    if (~this.info & 1) {
      this.ᐃΔᐃᐃᐃ = Math.max(this.ᐃΔᐃᐃᐃ - Hx, 0);
      this.ⵠΔⲆΔⵠᐃᐃ += Hx;
      if (this.ⵠΔⲆΔⵠᐃᐃ > 0.1) {
        this.ⵠΔⲆΔⵠᐃᐃ = 0;
        var a = {
          x: this.x + Math.random() * 60 - 30,
          y: this.y + Math.random() * 60 - 30,
          a: 0,
          r: Math.random() * 30 + 30
        };
        this.ΔⵠⲆΔ.push(a);
      }
    } else {
      this.ᐃΔᐃᐃᐃ = Math.min(this.ᐃΔᐃᐃᐃ + Hx, 2.2);
    }
    for (var b = 0; b < this.ΔⵠⲆΔ.length; b++) {
      a = this.ΔⵠⲆΔ[b];
      Zo.save();
      Zo.translate(Ax.ⲆⲆΔ.x + a.x, Ax.ⲆⲆΔ.y + a.y);
      a.a = Math.min(1, 0 + Hx / 2);
      var c = 0;
      if (c < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      Zo.globalAlpha = c * 0.8;
      cd(Zo, 0, 0, a.r);
      md(Zo, Cs.ᐃⵠᐃⵠᐃⲆⵠ[zx.time]);
      Zo.restore();
      if (1 === 0) {
        this.ΔⵠⲆΔ.splice(b, 1);
        b--;
      }
    }
  }
  function sv(a, b) {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    c = ᐃΔ[a][zx.time];
    ⲆⲆᐃ = -c.width;
    ⲆΔⲆ = -c.height;
    Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆ() && ln == this.ⵠⵠᐃ.Ⲇⵠⵠ) {
        this.action -= 2;
      }
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      var c = ᐃΔ[b];
      Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
  }
  function tv() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ⵠΔΔⲆ.ⲆᐃⲆ();
    this.ⵠΔΔᐃⵠⵠⵠ.ⲆᐃⲆ();
    this.ⵠᐃΔⵠⲆΔⲆ.ⲆᐃⲆ();
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    c = this.info === 0 ? ᐃΔ[231][zx.time] : ᐃΔ[1053][zx.time];
    ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -c.width;
    ⲆΔⲆ = -c.height * this.ⵠΔΔⲆ.ⲆⵠⲆ;
    Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == Oq) {
        this.action -= 2;
      }
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      var c = ᐃΔ[1056];
      Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ᐃⵠⵠⲆⲆ.ⲆᐃⲆ() && hl == this.ᐃⵠⵠⲆⲆ.Ⲇⵠⵠ) {
        this.action -= 4;
      }
      Zo.globalAlpha = 0.6 - this.ᐃⵠⵠⲆⲆ.ⲆⵠⲆ;
      c = ᐃΔ[1065];
      Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle + b);
    Zo.translate(100, 0);
    Zo.rotate(a);
    c = this.info === 0 ? ᐃΔ[1060][zx.time] : ᐃΔ[1059][zx.time];
    ⲆⲆᐃ = this.ⵠΔΔᐃⵠⵠⵠ.ⲆⵠⲆ * -c.width;
    ⲆΔⲆ = this.ⵠΔΔᐃⵠⵠⵠ.ⲆⵠⲆ * -c.height;
    Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    if (this.action & 2) {
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      c = ᐃΔ[1057];
      Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Zo.globalAlpha = 0.6 - this.ᐃⵠⵠⲆⲆ.ⲆⵠⲆ;
      c = ᐃΔ[1066];
      Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle + a + b);
    Zo.translate(100, 0);
    Zo.rotate(a);
    c = this.info === 0 ? ᐃΔ[1063][zx.time] : ᐃΔ[1062][zx.time];
    ⲆⲆᐃ = -c.width * this.ⵠᐃΔⵠⲆΔⲆ.ⲆⵠⲆ;
    ⲆΔⲆ = -c.height * this.ⵠᐃΔⵠⲆΔⲆ.ⲆⵠⲆ;
    Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    if (this.action & 2) {
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      c = ᐃΔ[1058];
      Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Zo.globalAlpha = 0.6 - this.ᐃⵠⵠⲆⲆ.ⲆⵠⲆ;
      c = ᐃΔ[1067];
      Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
  }
  function uv() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    if (ΔⵠΔⵠ.ΔⲆⲆᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Hx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Hx, 1);
    }
    this.ⵠΔΔⲆ.ⲆᐃⲆ();
    this.rotate.ⲆᐃⲆ();
    a = ᐃΔ[450][zx.time];
    ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -a.width * this.scale;
    ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -a.height * this.scale;
    Qp(Zo, a, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == cg) {
        this.action -= 2;
      }
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      var a = ᐃΔ[464];
      Qp(Zo, a, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      Zo.globalAlpha = 1;
    }
    a = ᐃΔ[453][zx.time];
    ⲆⲆᐃ = this.scale * (-a.width * this.ⵠΔΔⲆ.ⲆⵠⲆ);
    ⲆΔⲆ = this.scale * (-a.height * this.ⵠΔΔⲆ.ⲆⵠⲆ);
    Zo.save();
    Zo.translate(fq * -60, fq * 20);
    Zo.rotate(this.rotate.ⲆⵠⲆ);
    Qp(Zo, a, fq * -ⲆⲆᐃ / 4, fq * -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      a = ᐃΔ[468];
      Qp(Zo, a, -ⲆⲆᐃ * fq / 4, -ⲆΔⲆ * fq / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
    a = ᐃΔ[454][zx.time];
    Zo.save();
    Zo.translate(fq * 60, fq * 20);
    Zo.rotate(-this.rotate.ⲆⵠⲆ);
    Qp(Zo, a, fq * -ⲆⲆᐃ / 4, fq * -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      a = ᐃΔ[469];
      Qp(Zo, a, fq * -ⲆⲆᐃ / 4, fq * -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
    Zo.restore();
  }
  function vv() {
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = rh;
      }
      var a = fq * ((1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * Hx * 600);
      var b = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * a;
      var c = a * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    this.ΔⵠᐃⵠᐃΔᐃ = (this.ΔⵠᐃⵠᐃΔᐃ + Hx * 3) % (Math.PI * 2);
    this.ΔΔⵠΔᐃⵠⵠ = (this.ΔΔⵠΔᐃⵠⵠ - Hx * 3) % (Math.PI * 2);
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x + b, Ax.ⲆⲆΔ.y + this.y + c);
    Zo.save();
    Zo.rotate(this.angle);
    ᐃᐃ = ᐃΔ[151][zx.time];
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
    Zo.restore();
    Zo.save();
    Zo.rotate(this.ΔⵠᐃⵠᐃΔᐃ);
    ᐃᐃ = ᐃΔ[528][zx.time];
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
    Zo.restore();
    Zo.save();
    Zo.rotate(this.ΔΔⵠΔᐃⵠⵠ);
    ᐃᐃ = ᐃΔ[527][zx.time];
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
    Zo.restore();
    Zo.restore();
  }
  function wv(a, b, c) {
    if (a >= 0) {
      ᐃᐃ = ᐃΔ[a][zx.time];
      switch (a) {
        case 1:
        case 3:
        case 4:
        case 8:
        case 31:
        case 32:
          af(a, ᐃᐃ, -ᐃᐃ.width / 2 - (45 + b) * fq, -ᐃᐃ.height / 2 + (c + 22) * fq);
          break;
        case 94:
        case 95:
        case 96:
        case 97:
          Kw(a, ᐃᐃ, -ᐃᐃ.width / 4 - fq * (52 + b), -ᐃᐃ.height / 4 + fq * (c + 20));
          break;
        case 98:
        case 99:
          Kw(a, ᐃᐃ, -ᐃᐃ.width / 4 - fq * (57 + b), -ᐃᐃ.height / 4 + fq * (c + 20));
          break;
        case 57:
        case 0:
        case 5:
        case 6:
          Kw(a, ᐃᐃ, -ᐃᐃ.width / 4 - fq * (47 + b), -ᐃᐃ.height / 4 + (c + 45) * fq);
          break;
        case 30:
          Kw(a, ᐃᐃ, -ᐃᐃ.width / 4 - (52 + b) * fq, -ᐃᐃ.height / 4 + fq * (c + 45));
          break;
        case 19:
          Kw(a, ᐃᐃ, -ᐃᐃ.width / 4 - (47 + b) * fq, -ᐃᐃ.height / 4 + fq * (c + 44));
          break;
        case 9:
          af(a, ᐃᐃ, -ᐃᐃ.width / 2 - fq * (47 + b), -ᐃᐃ.height / 2 + (c + 44) * fq);
          break;
        case 62:
          af(a, ᐃᐃ, -ᐃᐃ.width / 2 - (40 + b) * fq, -ᐃᐃ.height / 2 + fq * (c + 65));
          break;
        case 12:
          Kw(a, ᐃᐃ, -ᐃᐃ.width / 4 - fq * (37 + b), -ᐃᐃ.height / 4 + fq * (c + 85));
          break;
        case 34:
          Kw(a, ᐃᐃ, -ᐃᐃ.width / 4 - (37 + b) * fq, -ᐃᐃ.height / 4 + fq * (c + 85));
          break;
        case 54:
        case 53:
          Kw(a, ᐃᐃ, -ᐃᐃ.width / 4 - (26 + b) * fq, -ᐃᐃ.height / 4 + (c + 77) * fq);
          break;
        case 17:
          Kw(a, ᐃᐃ, -ᐃᐃ.width / 4 - fq * (37 + b), -ᐃᐃ.height / 4 + (c + 85) * fq);
          break;
        case 63:
          Kw(a, ᐃᐃ, -ᐃᐃ.width / 4 - (47 + b) * fq, -ᐃᐃ.height / 4 + (c + 44) * fq);
          break;
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
          Kw(a, ᐃᐃ, -ᐃᐃ.width / 4 - (37 + b) * fq, -ᐃᐃ.height / 4 + fq * (c + 30));
          break;
        case 56:
          Kw(a, ᐃᐃ, -ᐃᐃ.width / 4 - fq * (47 + b), -ᐃᐃ.height / 4 + (c + 35) * fq);
          break;
        case 92:
        case 93:
          Kw(a, ᐃᐃ, -ᐃᐃ.width / 4 - (47 + b) * fq, -ᐃᐃ.height / 4 + fq * (c + 40));
          break;
        case 89:
          Kw(a, ᐃᐃ, -ᐃᐃ.width / 4 - fq * (47 + b), -ᐃᐃ.height / 4 + fq * (c + 34));
          break;
        case 13:
        case 14:
        case 15:
        case 33:
          Kw(a, ᐃᐃ, -ᐃᐃ.width / 4 - fq * (37 + b), -ᐃᐃ.height / 4 + fq * (c + 90));
          break;
        case 18:
          Kw(a, ᐃᐃ, -ᐃᐃ.width / 4 - fq * (40 + b), -ᐃᐃ.height / 4 + fq * (c + 85));
          break;
        case 16:
          af(a, ᐃᐃ, -ᐃᐃ.width / 2 - (39 + b) * fq, -ᐃᐃ.height / 2 + fq * (c + 90));
          break;
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 45:
          af(a, ᐃᐃ, -ᐃᐃ.width / 2 - (46 + b) * fq, -ᐃᐃ.height / 2 + (c + 35) * fq);
          break;
        case 49:
          af(a, ᐃᐃ, -ᐃᐃ.width / 2 - fq * (47 + b), -ᐃᐃ.height / 2 + (c + 54) * fq);
          break;
        case 46:
        case 50:
        case 51:
        case 52:
          af(a, ᐃᐃ, -ᐃᐃ.width / 2 - (46 + b) * fq, -ᐃᐃ.height / 2 + fq * (c + 35));
          break;
        case 55:
          af(a, ᐃᐃ, -ᐃᐃ.width / 2 - (47 + b) * fq, -ᐃᐃ.height / 2 + fq * (c + 20));
      }
    }
  }
  function xv() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    this.ᐃᐃΔᐃᐃ.ⲆᐃⲆ();
    ᐃᐃ = ᐃΔ[288][zx.time];
    ⲆⲆᐃ = this.ᐃᐃΔᐃᐃ.ⲆⵠⲆ * -ᐃᐃ.width;
    ⲆΔⲆ = this.ᐃᐃΔᐃᐃ.ⲆⵠⲆ * -ᐃᐃ.height;
    Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    this.ⵠᐃⵠᐃᐃ.ⲆᐃⲆ();
    ᐃᐃ = ᐃΔ[289][zx.time];
    ⲆⲆᐃ = -ᐃᐃ.width * this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ;
    ⲆΔⲆ = -ᐃᐃ.height * this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ;
    Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    Zo.restore();
  }
  function yv() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    var a = ΔⵠΔⵠ.ΔⲆⲆᐃ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + Hx / 2, 1.8) : Math.max(this.scale - Hx, 1);
    this.ⵠΔΔⲆ.ⲆᐃⲆ();
    this.rotate.ⲆᐃⲆ();
    this.ⲆⲆΔᐃ = a < 350 ? Math.max(0, this.ⲆⲆΔᐃ - Hx * 2.2) : Math.min(1, this.ⲆⲆΔᐃ + Hx * 2.2);
    b = ᐃΔ[1135][zx.time];
    ⲆⲆᐃ = this.scale * (this.ⵠΔΔⲆ.ⲆⵠⲆ * -b.width);
    ⲆΔⲆ = this.scale * (-b.height * this.ⵠΔΔⲆ.ⲆⵠⲆ);
    Zo.globalAlpha = 1 - this.ⲆⲆΔᐃ;
    Qp(Zo, b, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
    b = ᐃΔ[1119][zx.time];
    ⲆⲆᐃ = this.scale * (-b.width * this.ⵠΔΔⲆ.ⲆⵠⲆ);
    ⲆΔⲆ = this.scale * (-b.height * this.ⵠΔΔⲆ.ⲆⵠⲆ);
    Zo.globalAlpha = this.ⲆⲆΔᐃ;
    Qp(Zo, b, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆ() && nl == this.ⵠⵠᐃ.Ⲇⵠⵠ) {
        this.action -= 2;
      }
      Zo.globalAlpha = (0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ) * (1 - this.ⲆⲆΔᐃ);
      var b = ᐃΔ[1136];
      ⲆⲆᐃ = -b.width * this.ⵠΔΔⲆ.ⲆⵠⲆ * this.scale;
      ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -b.height * this.scale;
      Qp(Zo, b, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      Zo.globalAlpha = (0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ) * this.ⲆⲆΔᐃ;
      b = ᐃΔ[1128];
      ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -b.width * this.scale;
      ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -b.height * this.scale;
      Qp(Zo, b, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      Zo.globalAlpha = 1;
    }
    b = ᐃΔ[1122][zx.time];
    ⲆⲆᐃ = -b.width * this.ⵠΔΔⲆ.ⲆⵠⲆ * this.scale;
    ⲆΔⲆ = this.scale * (this.ⵠΔΔⲆ.ⲆⵠⲆ * -b.height);
    Zo.save();
    Zo.translate(fq * -40, fq * 80);
    Zo.rotate(this.rotate.ⲆⵠⲆ);
    Zo.globalAlpha = this.ⲆⲆΔᐃ;
    Qp(Zo, b, fq * -ⲆⲆᐃ / 4, fq * -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Zo.globalAlpha = (0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ) * this.ⲆⲆΔᐃ;
      b = ᐃΔ[1129];
      Qp(Zo, b, fq * -ⲆⲆᐃ / 4, -ⲆΔⲆ * fq / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
    b = ᐃΔ[1125][zx.time];
    Zo.save();
    Zo.translate(fq * 40, fq * 80);
    Zo.rotate(-this.rotate.ⲆⵠⲆ);
    Zo.globalAlpha = this.ⲆⲆΔᐃ;
    Qp(Zo, b, -ⲆⲆᐃ * fq / 4, fq * -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Zo.globalAlpha = (0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ) * this.ⲆⲆΔᐃ;
      b = ᐃΔ[1130];
      Qp(Zo, b, -ⲆⲆᐃ * fq / 4, -ⲆΔⲆ * fq / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      Zo.globalAlpha = 1;
    }
    Zo.globalAlpha = 1;
    Zo.restore();
    Zo.restore();
  }
  function zv() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    this.ⵠᐃⵠᐃᐃ.ⲆᐃⲆ();
    ᐃᐃ = ᐃΔ[526][zx.time];
    ⲆⲆᐃ = this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ * -ᐃᐃ.width;
    ⲆΔⲆ = this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ * -ᐃᐃ.height;
    Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    Zo.restore();
  }
  function Av(a, b) {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    if (a === 854) {
      a = 250;
      this.info = 36;
    }
    ᐃᐃ = ᐃΔ[a][this.info][zx.time];
    ⲆⲆᐃ = -ᐃᐃ.width / 2;
    ⲆΔⲆ = -ᐃᐃ.height / 2;
    Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == 0) {
        this.action -= 2;
      }
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      var c = lw(this.info, ᐃᐃ, ⵠⲆⲆᐃⲆⲆⲆΔⵠ);
      Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
  }
  function Bv(f, e, i, j, k, n, a, o = 0, p) {
    for (var h = f; e >= h; h++) {
      for (var q = i; j >= q; q++) {
        var r = ux.ΔᐃⲆΔ[h][q];
        if (r !== ao && r[n] !== Va) {
          var s = r[n];
          var t = ᐃΔ[k][zx.time][s.ᐃᐃⵠⵠⵠⵠᐃ];
          Qp(Zo, t, Ax.ⲆⲆΔ.x + s.x - t.width / (ΔⲆⵠᐃⵠ * 4), Ax.ⲆⲆΔ.y + s.y - t.height / (ΔⲆⵠᐃⵠ * 4), t.width / (ΔⲆⵠᐃⵠ * 2), t.height / (ΔⲆⵠᐃⵠ * 2));
          if (yx.ΔΔⲆᐃⲆ) {
            var w = 2147483648;
            var x = ((h * 1000 + q) * 1103515245 + 12345) % w / w;
            if (x < 0.2) {
              x = Math.floor(ᐃΔ[1025][zx.time][s.ᐃᐃⵠⵠⵠⵠᐃ].length * (x * 5));
              t = ᐃΔ[1025][zx.time][s.ᐃᐃⵠⵠⵠⵠᐃ][x];
              Qp(Zo, t, Ax.ⲆⲆΔ.x + s.x - t.width / (ΔⲆⵠᐃⵠ * 4), Ax.ⲆⲆΔ.y + s.y - t.height / (ΔⲆⵠᐃⵠ * 4), t.width / (ΔⲆⵠᐃⵠ * 2), t.height / (ΔⲆⵠᐃⵠ * 2));
            } else if (s.ᐃᐃᐃⵠΔⵠⵠ !== 0) {
              t = ᐃΔ[1026][zx.time];
              var y = (gv + h % 2 * 30) % 60;
              Zo.globalAlpha = y < 30 ? y / 30 : 1 - (y - 30) / 30;
              Qp(Zo, t, Ax.ⲆⲆΔ.x + s.x - t.width / (ΔⲆⵠᐃⵠ * 4), Ax.ⲆⲆΔ.y + s.y - t.height / (ΔⲆⵠᐃⵠ * 4) - 30 + y, t.width / (ΔⲆⵠᐃⵠ * 2), t.height / (ΔⲆⵠᐃⵠ * 2));
              Zo.globalAlpha = 1;
            }
          }
        }
      }
    }
  }
  function Cv() {
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = hl;
      }
      var a = fq * ((1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * Hx * 600);
      var b = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * a;
      var c = a * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Zo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Zo.translate(Ax.ⲆⲆΔ.x + this.x + b, Ax.ⲆⲆΔ.y + this.y + c);
    Zo.rotate(this.angle);
    ᐃᐃ = ᐃΔ[157][zx.time];
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Hx * 3) % (Math.PI * 2);
    }
    Zo.rotate(this.rotate);
    ᐃᐃ = ᐃΔ[1214][zx.time];
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
    Zo.restore();
  }
  function Dv() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    if (ΔⵠΔⵠ.ΔⲆⲆᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Hx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Hx, 1);
    }
    this.ⵠΔΔⲆ.ⲆᐃⲆ();
    this.rotate.ⲆᐃⲆ();
    a = ᐃΔ[449][zx.time];
    ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -a.width * this.scale;
    ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -a.height * this.scale;
    Qp(Zo, a, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆ() && hl == this.ⵠⵠᐃ.Ⲇⵠⵠ) {
        this.action -= 2;
      }
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      var a = ᐃΔ[463];
      Qp(Zo, a, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    a = ᐃΔ[451][zx.time];
    ⲆⲆᐃ = this.scale * (this.ⵠΔΔⲆ.ⲆⵠⲆ * -a.width);
    ⲆΔⲆ = -a.height * this.ⵠΔΔⲆ.ⲆⵠⲆ * this.scale;
    Zo.save();
    Zo.translate(fq * -30, fq * 70);
    Zo.rotate(this.rotate.ⲆⵠⲆ);
    Qp(Zo, a, fq * -10, fq * -40, ⲆⲆᐃ, ⲆΔⲆ);
    if (this.action & 2) {
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      a = ᐃΔ[466];
      Qp(Zo, a, fq * -10, fq * -40, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
    a = ᐃΔ[452][zx.time];
    Zo.save();
    Zo.translate(fq * 30, fq * 70);
    Zo.rotate(-this.rotate.ⲆⵠⲆ);
    Qp(Zo, a, fq * 10 - ⲆⲆᐃ, fq * -40, ⲆⲆᐃ, ⲆΔⲆ);
    if (this.action & 2) {
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      a = ᐃΔ[467];
      Qp(Zo, a, fq * 10 - ⲆⲆᐃ, fq * -40, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
    Zo.restore();
  }
  const Ev = 1956818;
  const Fv = 1956818 .ΔᐃⲆⲆΔᐃΔᐃⲆ;
  const Gv = `const ᐃΔΔⵠΔⵠⲆ = (typeof ⵠⲆⵠΔᐃΔᐃᐃⵠ === "${Fv}") ? 1 : 0; return ᐃΔΔⵠΔⵠⲆ;`;
  function Hv() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ⵠΔΔⲆ.ⲆᐃⲆ();
    this.ⵠΔΔᐃⵠⵠⵠ.ⲆᐃⲆ();
    this.ⵠᐃΔⵠⲆΔⲆ.ⲆᐃⲆ();
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    c = this.info === 0 ? ᐃΔ[887][zx.time] : ᐃΔ[886][zx.time];
    ⲆⲆᐃ = -c.width * this.ⵠΔΔⲆ.ⲆⵠⲆ;
    ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -c.height;
    Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == 0) {
        this.action -= 2;
      }
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      var c = ᐃΔ[888];
      Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ᐃⵠⵠⲆⲆ.ⲆᐃⲆ() && this.ᐃⵠⵠⲆⲆ.Ⲇⵠⵠ == 0) {
        this.action -= 4;
      }
      Zo.globalAlpha = 0.6 - this.ᐃⵠⵠⲆⲆ.ⲆⵠⲆ;
      c = ᐃΔ[891];
      Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle + b);
    Zo.translate(55, 0);
    Zo.rotate(a);
    c = this.info === 0 ? ᐃΔ[894][zx.time] : ᐃΔ[896][zx.time];
    ⲆⲆᐃ = -c.width * this.ⵠΔΔᐃⵠⵠⵠ.ⲆⵠⲆ;
    ⲆΔⲆ = this.ⵠΔΔᐃⵠⵠⵠ.ⲆⵠⲆ * -c.height;
    Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    if (this.action & 2) {
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      c = ᐃΔ[889];
      Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Zo.globalAlpha = 0.6 - this.ᐃⵠⵠⲆⲆ.ⲆⵠⲆ;
      c = ᐃΔ[892];
      Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle + a + b);
    Zo.translate(55, 0);
    Zo.rotate(a);
    c = this.info === 0 ? ᐃΔ[895][zx.time] : ᐃΔ[897][zx.time];
    ⲆⲆᐃ = this.ⵠᐃΔⵠⲆΔⲆ.ⲆⵠⲆ * -c.width;
    ⲆΔⲆ = -c.height * this.ⵠᐃΔⵠⲆΔⲆ.ⲆⵠⲆ;
    Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    if (this.action & 2) {
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      c = ᐃΔ[890];
      Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Zo.globalAlpha = 0.6 - this.ᐃⵠⵠⲆⲆ.ⲆⵠⲆ;
      c = ᐃΔ[893];
      Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
  }
  function Iv() {
    if (this.info >= 10) {
      Zo.save();
      Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
      Zo.rotate(this.angle);
      if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
        if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
          this.ⵠⵠᐃ.ⲆᐃⲆ = false;
        }
        var b = fq * ((1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * Hx * 600);
        var c = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * b;
        var d = b * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      this.ΔⵠⲆΔ.ⲆᐃⲆ();
      var e = ᐃΔ[206][zx.time];
      var f = this.ΔⵠⲆΔ.ⲆⵠⲆ * -e.width;
      var g = -e.height * this.ΔⵠⲆΔ.ⲆⵠⲆ;
      Qp(Zo, e, -f / 2 + c, -g / 2 + d, f, g);
      Zo.restore();
    }
  }
  function Jv() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = false;
      }
      var b = (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * Hx * 600 * fq;
      var c = b * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var d = b * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Zo.rotate(this.angle);
      this.ΔⵠⲆΔ.ⲆᐃⲆ();
      if (this.info & 16) {
        var f = ᐃΔ[985][zx.time];
      } else {
        f = ᐃΔ[210][zx.time];
      }
      var g = -f.width * this.ΔⵠⲆΔ.ⲆⵠⲆ;
      var a = -f.height * this.ΔⵠⲆΔ.ⲆⵠⲆ;
      Qp(Zo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[986][zx.time];
      } else {
        f = ᐃΔ[211][zx.time];
      }
      Zo.translate(0, f.height / 2);
      Qp(Zo, f, c - f.width / 2, -f.height + d);
    }
    Zo.restore();
  }
  function Kv(a, b) {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    this.ⵠΔΔⲆ.ⲆᐃⲆ();
    c = ᐃΔ[a][zx.time];
    ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -c.width;
    ⲆΔⲆ = -c.height * this.ⵠΔΔⲆ.ⲆⵠⲆ;
    Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == 0) {
        this.action -= 2;
      }
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      var c = ᐃΔ[b];
      Qp(Zo, c, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
  }
  function Lv() {
    if (this.info !== 10) {
      Zo.save();
      Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
      Zo.rotate(this.angle);
      if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
        if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == cg) {
          this.ⵠⵠᐃ.ⲆᐃⲆ = ks;
        }
        var b = fq * (Hx * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600);
        var c = b * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
        var d = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      if (this.info & 16) {
        var e = ᐃΔ[623][zx.time];
      } else {
        e = ᐃΔ[287][zx.time];
      }
      Qp(Zo, e, -e.width / 2 + c, -e.width / 2 + d);
      Zo.restore();
      for (var f = this.info & 15, g = 0; f > g; g++) {
        this.ⲆⵠΔⲆ[g].ⵠᐃᐃⲆ(294);
      }
    }
  }
  function Mv(a, b, c) {
    if (a >= 0) {
      ᐃᐃ = ᐃΔ[a][zx.time];
      switch (a) {
        case 71:
        case 72:
        case 73:
          Kw(a, ᐃᐃ, -ᐃᐃ.width / 4 - (0 + b) * fq, -ᐃᐃ.height / 4 + (c + 35) * fq);
          break;
        case 74:
          Kw(a, ᐃᐃ, -ᐃᐃ.width / 4 - fq * (1 + b), -ᐃᐃ.height / 4 + fq * (c + 45));
          break;
        case 75:
        case 76:
          Kw(a, ᐃᐃ, -ᐃᐃ.width / 4 - (1 + b) * fq, -ᐃᐃ.height / 4 + fq * (c + 40));
      }
    }
  }
  function Nv() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    this.ΔⵠⲆΔ.ⲆᐃⲆ();
    Zo.globalAlpha = 0.3;
    var a = ᐃΔ[282][zx.time];
    var b = this.ΔⵠⲆΔ.ⲆⵠⲆ * -a.width;
    var c = -a.height * this.ΔⵠⲆΔ.ⲆⵠⲆ;
    Qp(Zo, a, -b / 2, -c / 2, b, c);
    Zo.globalAlpha = 1;
    Zo.restore();
  }
  function Ov() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && nl == this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = Pi;
      }
      var b = fq * ((1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * Hx * 600);
      var c = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * b;
      var d = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Zo.rotate(this.angle);
      this.ΔⵠⲆΔ.ⲆᐃⲆ();
      if (this.info & 16) {
        var f = ᐃΔ[668][zx.time];
      } else {
        f = ᐃΔ[132][zx.time];
      }
      var g = this.ΔⵠⲆΔ.ⲆⵠⲆ * -f.width;
      var a = -f.height * this.ΔⵠⲆΔ.ⲆⵠⲆ;
      Qp(Zo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      this.ᐃⲆᐃΔⵠΔⲆ.ⲆᐃⲆ();
      if (this.info & 16) {
        f = ᐃΔ[638][zx.time];
      } else {
        f = ᐃΔ[134][zx.time];
      }
      Zo.translate(0, f.height / 2);
      Zo.rotate(this.ᐃⲆᐃΔⵠΔⲆ.ⲆⵠⲆ);
      Qp(Zo, f, c - f.width / 2, -f.height + d);
    }
    Zo.restore();
  }
  function Pv() {
    if (this.info !== 10) {
      for (var b = this.info & 15, c = 0; b > c; c++) {
        this.ⲆⵠΔⲆ[c].ⵠᐃᐃⲆ(207, this.x, this.y);
      }
      Zo.save();
      Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
      Zo.rotate(this.angle);
      if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
        if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
          this.ⵠⵠᐃ.ⲆᐃⲆ = false;
        }
        var d = Hx * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600 * fq;
        var e = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * d;
        var f = d * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
      } else {
        e = 0;
        f = 0;
      }
      if (this.info & 16) {
        var g = ᐃΔ[958][zx.time];
      } else {
        g = ᐃΔ[957][zx.time];
      }
      Qp(Zo, g, -g.width / 2 + e, -g.width / 2 + f);
      Zo.restore();
    }
  }
  function Qv() {
    this.ⵠΔΔⲆ.ⲆᐃⲆ();
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    a = this.info === 0 ? ᐃΔ[248][zx.time] : ᐃΔ[1222][zx.time];
    ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -a.width;
    ⲆΔⲆ = -a.height * this.ⵠΔΔⲆ.ⲆⵠⲆ;
    Qp(Zo, a, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆ() && ks == this.ⵠⵠᐃ.Ⲇⵠⵠ) {
        this.action -= 2;
      }
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      var a = ᐃΔ[1223];
      Qp(Zo, a, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
  }
  function Rv() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = false;
      }
      var b = Hx * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600 * fq;
      var c = b * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var d = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Zo.rotate(this.angle);
      this.ΔⵠⲆΔ.ⲆᐃⲆ();
      if (this.info & 16) {
        var f = ᐃΔ[849][zx.time];
      } else {
        f = ᐃΔ[193][zx.time];
      }
      var g = this.ΔⵠⲆΔ.ⲆⵠⲆ * -f.width;
      var a = -f.height * this.ΔⵠⲆΔ.ⲆⵠⲆ;
      Qp(Zo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[869][zx.time];
      } else {
        f = ᐃΔ[194][zx.time];
      }
      Zo.translate(0, f.height / 2);
      Qp(Zo, f, c - f.width / 2, -f.height + d);
    }
    Zo.restore();
  }
  function Sv() {
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = false;
      }
      var a = (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * Hx * 600 * fq;
      var b = a * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var c = a * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Zo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Zo.translate(Ax.ⲆⲆΔ.x + this.x + b, Ax.ⲆⲆΔ.y + this.y + c);
    Zo.rotate(this.angle);
    ᐃᐃ = ᐃΔ[156][zx.time];
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Hx * 3) % (Math.PI * 2);
    }
    Zo.rotate(this.rotate);
    ᐃᐃ = ᐃΔ[1210][zx.time];
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
    Zo.restore();
  }
  function Tv() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = Cj;
      }
      var b = (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * Hx * 600 * fq;
      var c = b * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var d = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Zo.rotate(this.angle);
      this.ΔⵠⲆΔ.ⲆᐃⲆ();
      if (this.info & 16) {
        var f = ᐃΔ[812][zx.time];
      } else {
        f = ᐃΔ[188][zx.time];
      }
      var g = this.ΔⵠⲆΔ.ⲆⵠⲆ * -f.width;
      var a = this.ΔⵠⲆΔ.ⲆⵠⲆ * -f.height;
      Qp(Zo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[813][zx.time];
      } else {
        f = ᐃΔ[189][zx.time];
      }
      Zo.translate(0, f.height / 2);
      Qp(Zo, f, c - f.width / 2, -f.height + d);
    }
    Zo.restore();
  }
  function Uv() {
    this.ⵠΔΔⲆ.ⲆᐃⲆ();
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    a = this.info === 0 ? ᐃΔ[1042][zx.time] : ᐃΔ[1044][zx.time];
    ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -a.width;
    ⲆΔⲆ = -a.height * this.ⵠΔΔⲆ.ⲆⵠⲆ;
    Qp(Zo, a, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == 0) {
        this.action -= 2;
      }
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      var a = ᐃΔ[1045];
      Qp(Zo, a, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
  }
  function Vv() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    this.ⲆⲆⵠⲆⲆⲆⵠ = Math.min(1, this.ⲆⲆⵠⲆⲆⲆⵠ + Hx * 2);
    Zo.globalAlpha = Math.min(1, Math.max(0, ΔⵠΔⵠ.ΔⲆⲆᐃ(this, this.r) / 80)) * this.ⲆⲆⵠⲆⲆⲆⵠ;
    this.ⵠΔΔⲆ.ⲆᐃⲆ();
    ᐃᐃ = ᐃΔ[247][zx.time][this.ⵠΔⵠΔⵠ];
    if (this.ⵠΔⵠΔⵠ < 2) {
      ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -ᐃᐃ.width;
      ⲆΔⲆ = -ᐃᐃ.height * this.ⵠΔΔⲆ.ⲆⵠⲆ;
    } else if (this.ⲆⲆᐃᐃᐃⵠΔ === 0) {
      ⲆⲆᐃ = -ᐃᐃ.width;
      ⲆΔⲆ = -ᐃᐃ.height;
    } else {
      ⲆⲆᐃ = -ᐃᐃ.width * 1.35;
      ⲆΔⲆ = -ᐃᐃ.height * 1.35;
    }
    Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    Zo.globalAlpha = 1;
    Zo.restore();
  }
  function Wv() {
    var a = undefined;
    var b = ph;
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    this.ⵠΔΔⲆ.ⲆᐃⲆ();
    this.rotate.ⲆᐃⲆ();
    if (this.ᐃΔᐃᐃᐃ >= 0.1 && this.ᐃΔᐃᐃᐃ <= 1.1) {
      if ((c = Math.max(0, Math.min(1, this.ᐃΔᐃᐃᐃ - 0.1))) < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      a = ᐃΔ[1150][zx.time];
      ⲆⲆᐃ = -a.width * this.ⵠΔΔⲆ.ⲆⵠⲆ;
      ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -a.height;
      Zo.globalAlpha = c;
      Qp(Zo, a, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      b = ᐃΔ[1151];
    }
    if (this.ᐃΔᐃᐃᐃ >= 0.9) {
      var c;
      if ((c = Math.max(0, Math.min(1, this.ᐃΔᐃᐃᐃ - 0.9))) < 0.2) {
        c *= 5;
      } else {
        c = 1;
      }
      a = ᐃΔ[1152][zx.time];
      ⲆⲆᐃ = -a.width * this.ⵠΔΔⲆ.ⲆⵠⲆ;
      ⲆΔⲆ = -a.height * this.ⵠΔΔⲆ.ⲆⵠⲆ;
      Zo.globalAlpha = c;
      Qp(Zo, a, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      b = ᐃΔ[1153];
    }
    if (this.action & 2 && $k !== b) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆ() && nl == this.ⵠⵠᐃ.Ⲇⵠⵠ) {
        this.action -= 2;
      }
      Zo.globalAlpha = (0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ) * c;
      ⲆⲆᐃ = -b.width * this.ⵠΔΔⲆ.ⲆⵠⲆ;
      ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -b.height;
      Qp(Zo, b, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
    }
    Zo.globalAlpha = 1;
    Zo.restore();
  }
  function Xv() {
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == Ak) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = Jo;
      }
      var a = fq * ((1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * Hx * 600);
      var b = a * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var c = a * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Zo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Zo.translate(Ax.ⲆⲆΔ.x + this.x + b, Ax.ⲆⲆΔ.y + this.y + c);
    Zo.rotate(this.angle);
    ᐃᐃ = ᐃΔ[153][zx.time];
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Hx * 3) % (Math.PI * 2);
    }
    Zo.rotate(this.rotate);
    ᐃᐃ = ᐃΔ[1198][zx.time];
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
    Zo.restore();
  }
  function Yv() {
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = nl;
      }
      var a = fq * ((1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * Hx * 600);
      var b = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * a;
      var c = a * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Zo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Zo.translate(Ax.ⲆⲆΔ.x + this.x + b, Ax.ⲆⲆΔ.y + this.y + c);
    Zo.rotate(this.angle);
    ᐃᐃ = ᐃΔ[155][zx.time];
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Hx * 3) % (Math.PI * 2);
    }
    Zo.rotate(this.rotate);
    ᐃᐃ = ᐃΔ[1206][zx.time];
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
    Zo.restore();
  }
  function Zv(a) {
    return ij.String.fromCharCode(a);
  }
  function $v() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = Dh;
      }
      var a = fq * ((1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * Hx * 600);
      var b = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * a;
      var c = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    if (this.info === 0) {
      ᐃᐃ = ᐃΔ[183][zx.time];
    } else {
      ᐃᐃ = ᐃΔ[802][zx.time][this.info - 1];
    }
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2 + b, -ᐃᐃ.height / 2 + c);
    Zo.restore();
  }
  function _v() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    if (ΔⵠΔⵠ.ΔⲆⲆᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Hx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Hx, 1);
    }
    this.ⵠΔΔⲆ.ⲆᐃⲆ();
    this.rotate.ⲆᐃⲆ();
    a = this.info === 0 ? ᐃΔ[232][zx.time] : ᐃΔ[1068][zx.time];
    ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -a.width * this.scale;
    ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -a.height * this.scale;
    Qp(Zo, a, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == ln) {
        this.action -= 2;
      }
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      var a = ᐃΔ[1077];
      Qp(Zo, a, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      Zo.globalAlpha = 1;
    }
    a = this.info === 0 ? ᐃΔ[1072][zx.time] : ᐃΔ[1071][zx.time];
    ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -a.width * this.scale;
    ⲆΔⲆ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -a.height * this.scale;
    Zo.save();
    Zo.translate(fq * -40, fq * 10);
    Zo.rotate(this.rotate.ⲆⵠⲆ);
    Qp(Zo, a, -ⲆⲆᐃ * fq / 4, -ⲆΔⲆ * fq / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      a = ᐃΔ[1078];
      Qp(Zo, a, -ⲆⲆᐃ * fq / 4, -ⲆΔⲆ * fq / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
    a = this.info === 0 ? ᐃΔ[1075][zx.time] : ᐃΔ[1074][zx.time];
    Zo.save();
    Zo.translate(fq * 40, fq * 10);
    Zo.rotate(-this.rotate.ⲆⵠⲆ);
    Qp(Zo, a, fq * -ⲆⲆᐃ / 4, fq * -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      a = ᐃΔ[1079];
      Qp(Zo, a, -ⲆⲆᐃ * fq / 4, -ⲆΔⲆ * fq / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
    Zo.restore();
  }
  function aw() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == $h) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = false;
      }
      var b = Hx * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600 * fq;
      var c = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * b;
      var d = b * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Zo.rotate(this.angle);
      this.ΔⵠⲆΔ.ⲆᐃⲆ();
      if (this.info & 16) {
        var f = ᐃΔ[838][zx.time];
      } else {
        f = ᐃΔ[191][zx.time];
      }
      var g = this.ΔⵠⲆΔ.ⲆⵠⲆ * -f.width;
      var a = -f.height * this.ΔⵠⲆΔ.ⲆⵠⲆ;
      Qp(Zo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[839][zx.time];
      } else {
        f = ᐃΔ[192][zx.time];
      }
      Zo.translate(0, f.height / 2);
      Qp(Zo, f, c - f.width / 2, -f.height + d);
    }
    Zo.restore();
  }
  function bw(b) {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    this.ΔⵠⲆΔ.ⲆᐃⲆ();
    Zo.globalAlpha = 0.3;
    var c = ᐃΔ[282][zx.time];
    var d = -c.width * this.ΔⵠⲆΔ.ⲆⵠⲆ;
    var e = this.ΔⵠⲆΔ.ⲆⵠⲆ * -c.height;
    Qp(Zo, c, -d / 2, -e / 2, d, e);
    Zo.globalAlpha = 1;
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = false;
      }
      var f = fq * ((1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * Hx * 600);
      var g = f * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var h = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * f;
    } else {
      g = 0;
      h = 0;
    }
    c = ᐃΔ[b][zx.time];
    Qp(Zo, c, -c.width / 2 + g, -c.height / 2 + h);
    Zo.restore();
  }
  function cw() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    if (ΔⵠΔⵠ.ΔⲆⲆᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Hx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Hx, 1);
    }
    this.ⵠΔΔⲆ.ⲆᐃⲆ();
    this.rotate.ⲆᐃⲆ();
    a = this.info === 0 ? ᐃΔ[233][zx.time] : ᐃΔ[1083][zx.time];
    ⲆⲆᐃ = this.scale * (-a.width * this.ⵠΔΔⲆ.ⲆⵠⲆ);
    ⲆΔⲆ = this.scale * (-a.height * this.ⵠΔΔⲆ.ⲆⵠⲆ);
    Qp(Zo, a, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == 0) {
        this.action -= 2;
      }
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      var a = ᐃΔ[1092];
      Qp(Zo, a, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      Zo.globalAlpha = 1;
    }
    a = this.info === 0 ? ᐃΔ[1087][zx.time] : ᐃΔ[1086][zx.time];
    ⲆⲆᐃ = this.ⵠΔΔⲆ.ⲆⵠⲆ * -a.width * this.scale;
    ⲆΔⲆ = -a.height * this.ⵠΔΔⲆ.ⲆⵠⲆ * this.scale;
    Zo.save();
    Zo.translate(fq * -40, fq * 10);
    Zo.rotate(this.rotate.ⲆⵠⲆ);
    Qp(Zo, a, fq * -ⲆⲆᐃ / 4, fq * -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      a = ᐃΔ[1093];
      Qp(Zo, a, -ⲆⲆᐃ * fq / 4, fq * -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
    a = this.info === 0 ? ᐃΔ[1090][zx.time] : ᐃΔ[1089][zx.time];
    Zo.save();
    Zo.translate(fq * 40, fq * 10);
    Zo.rotate(-this.rotate.ⲆⵠⲆ);
    Qp(Zo, a, fq * -ⲆⲆᐃ / 4, -ⲆΔⲆ * fq / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      a = ᐃΔ[1094];
      Qp(Zo, a, fq * -ⲆⲆᐃ / 4, fq * -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
    Zo.restore();
  }
  function dw() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    this.ⵠᐃⵠᐃᐃ.ⲆᐃⲆ();
    ᐃᐃ = ᐃΔ[289][zx.time];
    ⲆⲆᐃ = this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ * -ᐃᐃ.width;
    ⲆΔⲆ = -ᐃᐃ.height * this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ;
    Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    Zo.restore();
  }
  function ew() {
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ == 0) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = false;
      }
      var a = fq * (Hx * (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * 600);
      var b = a * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var c = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x + b, Ax.ⲆⲆΔ.y + this.y + c);
    Zo.rotate(this.angle);
    ᐃᐃ = ᐃΔ[135][zx.time];
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2, -ᐃᐃ.height / 2);
    Zo.restore();
  }
  function fw() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    if (this.ⵠⵠᐃ.ⲆᐃⲆ) {
      if (this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆᐃⲆ() && Ir == this.ⵠⵠᐃ.ⵠⲆᐃⲆ.Ⲇⵠⵠ) {
        this.ⵠⵠᐃ.ⲆᐃⲆ = false;
      }
      var a = (1 - this.ⵠⵠᐃ.ⵠⲆᐃⲆ.ⲆⵠⲆ) * Hx * 600 * fq;
      var b = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * a;
      var c = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    if (this.action == 2) {
      ᐃᐃ = ᐃΔ[407][zx.time];
    } else {
      ᐃᐃ = ᐃΔ[119][zx.time];
    }
    Qp(Zo, ᐃᐃ, -ᐃᐃ.width / 2 + b, -ᐃᐃ.height / 2 + c);
    Zo.restore();
  }
  function gw() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ᐃΔΔᐃᐃ.length == 0 || this.ᐃΔΔᐃᐃ[this.ᐃΔΔᐃᐃ.length - 1] <= Cs.ΔΔⵠⲆΔᐃᐃ)) {
      this.ᐃΔΔᐃᐃ.push(Cs.ΔⵠⵠⵠᐃⲆⲆ);
    }
    for (var a = 0; a < this.ᐃΔΔᐃᐃ.length; a++) {
      this.ᐃΔΔᐃᐃ[a] = Math.max(0, this.ᐃΔΔᐃᐃ[a] - Hx * Cs.ᐃᐃᐃⵠⲆᐃᐃ);
      Zo.globalAlpha = this.ᐃΔΔᐃᐃ[a] / 1.3;
      var b = (1 - this.ᐃΔΔᐃᐃ[a]) * 40;
      var c = (1 - this.ᐃΔΔᐃᐃ[a]) * 35 + 10;
      cd(Zo, fq * -68 + Math.sin(-this.angle - Math.PI / 2) * b, fq * -20 + b * Math.cos(-this.angle - Math.PI / 2), c);
      md(Zo, "#333333");
    }
    Zo.globalAlpha = 1;
    if (this.ᐃΔΔᐃᐃ.length > 0 && this.ᐃΔΔᐃᐃ[0] === 0) {
      this.ᐃΔΔᐃᐃ.shift();
    }
    Zo.restore();
  }
  function hw() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    this.ⵠᐃⵠᐃᐃ.ⲆᐃⲆ();
    ᐃᐃ = ᐃΔ[1192][zx.time];
    ⲆⲆᐃ = -ᐃᐃ.width * this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ;
    ⲆΔⲆ = this.ⵠᐃⵠᐃᐃ.ⲆⵠⲆ * -ᐃᐃ.height;
    Qp(Zo, ᐃᐃ, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
    Zo.restore();
  }
  function iw(a, b) {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    Zo.rotate(this.angle);
    this.ⵠΔΔⲆ.ⲆᐃⲆ();
    c = ᐃΔ[a][zx.time];
    ⲆⲆᐃ = -c.width * this.ⵠΔΔⲆ.ⲆⵠⲆ;
    ⲆΔⲆ = -c.height * this.ⵠΔΔⲆ.ⲆⵠⲆ;
    Qp(Zo, c, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == 0) {
        this.action -= 2;
      }
      Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
      var c = ᐃΔ[b];
      Qp(Zo, c, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
      Zo.globalAlpha = 1;
    }
    Zo.restore();
  }
  (function () {
    const a = {
      ᐃⵠᐃⵠᐃⲆᐃ: 2745613,
      ΔⵠᐃᐃΔⵠⵠ: 9712128,
      ⵠΔΔⲆΔΔᐃ: 8963893,
      ᐃⵠᐃⵠ: 2558066
    };
  })();
  function jw(a) {
    if (a > 0) {
      var b = ᐃΔ[a][zx.time];
      switch (a) {
        case 58:
          af(a, b, -b.width / 2 + fq * 2, -b.height / 2 - fq * 5);
          break;
        case 10:
          af(a, b, -b.width / 2, -b.height / 2 - fq * 18);
          break;
        case 11:
          af(a, b, -b.width / 2, -b.height / 2 - fq * 10);
          break;
        case 23:
          af(a, b, -b.width / 2, -b.height / 2 - fq * 19);
          break;
        case 24:
          Kw(a, b, -b.width / 4, -b.height / 4 - fq * 20);
          break;
        case 25:
          af(a, b, -b.width / 2 - fq * 1, -b.height / 2 - fq * 23);
          break;
        case 26:
          af(a, b, -b.width / 2, -b.height / 2 - fq * 5);
          break;
        case 27:
          af(a, b, -b.width / 2, -b.height / 2 - fq * 2);
          break;
        case 43:
          af(a, b, -b.width / 2 + fq * 1.5, -b.height / 2 - fq * 1);
          break;
        case 44:
        case 20:
        case 21:
        case 22:
        case 80:
        case 81:
        case 82:
        case 60:
        case 90:
        case 88:
        case 87:
          Kw(a, b, -b.width / 4, -b.height / 4 + fq * 2);
          break;
        case 41:
        case 42:
          af(a, b, -b.width / 2 - fq * 5, -b.height / 2 - fq * 2);
          break;
        case 40:
          af(a, b, -b.width / 2, -b.height / 2 - fq * 2);
          break;
        case 85:
          af(a, b, -b.width / 2, -b.height / 2 - fq * 2);
          break;
        case 48:
          af(a, b, -b.width / 2, -b.height / 2 - fq * 2);
          break;
        case 47:
          af(a, b, -b.width / 2 + fq * 2, -b.height / 2);
          break;
        case 59:
          af(a, b, -b.width / 2, -b.height / 2 - fq * 5);
          break;
        case 77:
        case 78:
        case 79:
          af(a, b, -b.width / 2 - fq * 1, -b.height / 2);
          break;
        case 83:
          af(a, b, -b.width / 2, -b.height / 2 + fq * 2);
          break;
        case 84:
        case 86:
          af(a, b, -b.width / 2, -b.height / 2 + fq * 8);
          break;
        case 61:
          af(a, b, -b.width / 2, -b.height / 2 - fq * 4);
      }
    }
  }
  function kw() {
    if (!this.ΔⲆⲆΔⵠ && this.ΔⲆᐃᐃⵠ !== 0) {
      if (this.r.x != this.x || this.y != this.r.y) {
        var a = (ΔⵠΔⵠ.ⲆΔᐃⵠΔΔᐃ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
        this.ΔⲆᐃⵠᐃ = ΔⵠΔⵠ.ⵠⵠΔΔᐃⵠⲆ(a, this.ΔⲆᐃⵠᐃ);
        this.ΔⲆᐃⵠᐃ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(this.ΔⲆᐃⵠᐃ, a, 0.018);
      }
      Zo.save();
      Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
      Zo.rotate(this.ΔⲆᐃⵠᐃ);
      if (this.ΔⲆᐃᐃⵠ === 223) {
        if (this.ⲆⲆⲆΔᐃ > 50 || this.ᐃⵠΔⵠⲆ > 0) {
          if (this.ⲆⲆⲆΔᐃ > 50) {
            this.ᐃⵠΔⵠⲆ = Math.min(1, this.ᐃⵠΔⵠⲆ + Hx);
          } else {
            this.ᐃⵠΔⵠⲆ = Math.max(0, this.ᐃⵠΔⵠⲆ - Hx);
          }
          Zo.globalAlpha = this.ᐃⵠΔⵠⲆ;
          var b = ᐃΔ[225][zx.time];
          Kw(225, b, -b.width / 4, -b.height / 4);
          Zo.globalAlpha = 1;
        }
        b = ᐃΔ[223][zx.time];
        Kw(223, b, -b.width / 4, -b.height / 4);
      } else if (this.ΔⲆᐃᐃⵠ === 229) {
        this.ⲆᐃⵠⵠΔ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(this.ⲆᐃⵠⵠΔ, this.ⲆⲆⲆΔᐃ, 0.018);
        this.ᐃⵠΔⵠᐃΔⵠ.ⲆᐃⲆ();
        if (this.ⲆⲆⲆΔᐃ > 85) {
          this.ᐃⵠΔⵠⲆ = Math.min(1, this.ᐃⵠΔⵠⲆ + Hx / 4);
        } else {
          this.ᐃⵠΔⵠⲆ = Math.max(0.1, this.ᐃⵠΔⵠⲆ - Hx);
        }
        b = ᐃΔ[1100][zx.time];
        Kw(1100, b, -b.width / 4, -b.height / 4);
        b = ᐃΔ[1103][zx.time];
        ⲆⲆᐃ = -b.width;
        ⲆΔⲆ = -b.height;
        Zo.save();
        Zo.translate(fq * -20, fq * -20);
        Zo.rotate(this.ᐃⵠΔⵠᐃΔⵠ.ⲆⵠⲆ * this.ᐃⵠΔⵠⲆ);
        Qp(Zo, b, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
        Zo.restore();
        b = ᐃΔ[1106][zx.time];
        Zo.save();
        Zo.translate(fq * 20, fq * -20);
        Zo.rotate(-this.ᐃⵠΔⵠᐃΔⵠ.ⲆⵠⲆ * this.ᐃⵠΔⵠⲆ);
        Qp(Zo, b, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
        Zo.restore();
      } else if (this.ΔⲆᐃᐃⵠ === 228) {
        this.ⲆᐃⵠⵠΔ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(this.ⲆᐃⵠⵠΔ, this.ⲆⲆⲆΔᐃ, 0.018);
        this.ᐃⵠΔⵠᐃΔⵠ.ⲆᐃⲆ();
        if (this.ⲆⲆⲆΔᐃ > 85) {
          this.ᐃⵠΔⵠⲆ = Math.min(1, this.ᐃⵠΔⵠⲆ + Hx / 4);
        } else {
          this.ᐃⵠΔⵠⲆ = Math.max(0.1, this.ᐃⵠΔⵠⲆ - Hx);
        }
        b = ᐃΔ[1085][zx.time];
        Kw(1085, b, -b.width / 4, -b.height / 4);
        b = ᐃΔ[1088][zx.time];
        ⲆⲆᐃ = -b.width;
        ⲆΔⲆ = -b.height;
        Zo.save();
        Zo.translate(fq * -40, fq * -45);
        Zo.rotate(this.ᐃⵠΔⵠᐃΔⵠ.ⲆⵠⲆ * this.ᐃⵠΔⵠⲆ);
        Qp(Zo, b, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
        Zo.restore();
        b = ᐃΔ[1091][zx.time];
        Zo.save();
        Zo.translate(fq * 40, fq * -45);
        Zo.rotate(-this.ᐃⵠΔⵠᐃΔⵠ.ⲆⵠⲆ * this.ᐃⵠΔⵠⲆ);
        Qp(Zo, b, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
        Zo.restore();
      } else if (this.ΔⲆᐃᐃⵠ === 227) {
        this.ⲆᐃⵠⵠΔ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(this.ⲆᐃⵠⵠΔ, this.ⲆⲆⲆΔᐃ, 0.018);
        this.ᐃⵠΔⵠᐃΔⵠ.ⲆᐃⲆ();
        if (this.ⲆⲆⲆΔᐃ > 85) {
          this.ᐃⵠΔⵠⲆ = Math.min(1, this.ᐃⵠΔⵠⲆ + Hx / 4);
        } else {
          this.ᐃⵠΔⵠⲆ = Math.max(0.1, this.ᐃⵠΔⵠⲆ - Hx);
        }
        b = ᐃΔ[1070][zx.time];
        Kw(1070, b, -b.width / 4, -b.height / 4);
        b = ᐃΔ[1073][zx.time];
        ⲆⲆᐃ = -b.width;
        ⲆΔⲆ = -b.height;
        Zo.save();
        Zo.translate(fq * -40, fq * -45);
        Zo.rotate(this.ᐃⵠΔⵠⲆ * this.ᐃⵠΔⵠᐃΔⵠ.ⲆⵠⲆ);
        Qp(Zo, b, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
        Zo.restore();
        b = ᐃΔ[1076][zx.time];
        Zo.save();
        Zo.translate(fq * 40, fq * -45);
        Zo.rotate(-this.ᐃⵠΔⵠᐃΔⵠ.ⲆⵠⲆ * this.ᐃⵠΔⵠⲆ);
        Qp(Zo, b, -ⲆⲆᐃ / 4, -ⲆΔⲆ / 4, ⲆⲆᐃ / 2, ⲆΔⲆ / 2);
        Zo.restore();
      } else if (this.ΔⲆᐃᐃⵠ === 91) {
        this.ⲆᐃⵠⵠΔ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(this.ⲆᐃⵠⵠΔ, this.ⲆⲆⲆΔᐃ, 0.018);
        b = ᐃΔ[91][zx.time];
        Kw(91, b, -b.width / 4, -b.height / 4);
      } else if (this.ΔⲆᐃᐃⵠ === 230) {
        this.ⲆᐃⵠⵠΔ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(this.ⲆᐃⵠⵠΔ, this.ⲆⲆⲆΔᐃ, 0.018);
        b = ᐃΔ[236][zx.time];
        Kw(236, b, -b.width / 4, -b.height / 4);
      } else if (this.ΔⲆᐃᐃⵠ === 224) {
        b = ᐃΔ[224][zx.time];
        Kw(224, b, -b.width / 4, -b.height / 4);
      } else if (this.ΔⲆᐃᐃⵠ === 239) {
        b = ᐃΔ[1221][zx.time];
        if (this.ⲆⲆⲆΔᐃ > 85) {
          this.ᐃⵠΔⵠⲆ = Math.min(1, this.ᐃⵠΔⵠⲆ + Hx / 4);
        } else {
          this.ᐃⵠΔⵠⲆ = Math.max(0, this.ᐃⵠΔⵠⲆ - Hx);
        }
        this.ΔᐃⲆᐃᐃ += Hx * 60;
        if (this.ΔᐃⲆᐃᐃ > 60) {
          this.ΔᐃⲆᐃᐃ -= 60;
        }
        var c = (-6 + (this.ΔᐃⲆᐃᐃ < 30 ? this.ΔᐃⲆᐃᐃ / 30 : 1 - (this.ΔᐃⲆᐃᐃ - 30) / 30) * 12) * this.ᐃⵠΔⵠⲆ;
        Kw(1221, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ΔⲆᐃᐃⵠ === 225) {
        b = ᐃΔ[1043][zx.time];
        if (this.ⲆⲆⲆΔᐃ > 85) {
          this.ᐃⵠΔⵠⲆ = Math.min(1, this.ᐃⵠΔⵠⲆ + Hx / 4);
        } else {
          this.ᐃⵠΔⵠⲆ = Math.max(0, this.ᐃⵠΔⵠⲆ - Hx);
        }
        this.ΔᐃⲆᐃᐃ += Hx * 60;
        if (this.ΔᐃⲆᐃᐃ > 60) {
          this.ΔᐃⲆᐃᐃ -= 60;
        }
        c = this.ᐃⵠΔⵠⲆ * (-6 + (this.ΔᐃⲆᐃᐃ < 30 ? this.ΔᐃⲆᐃᐃ / 30 : 1 - (this.ΔᐃⲆᐃᐃ - 30) / 30) * 12);
        Kw(1043, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ΔⲆᐃᐃⵠ === 226) {
        var d = Math.PI / 2;
        var e = Math.PI / 4;
        b = ᐃΔ[1055][zx.time];
        if (this.ⲆⲆⲆΔᐃ > 85) {
          this.ᐃⵠΔⵠⲆ = Math.min(1, this.ᐃⵠΔⵠⲆ + Hx / 4);
        } else {
          this.ᐃⵠΔⵠⲆ = Math.max(0, this.ᐃⵠΔⵠⲆ - Hx);
        }
        this.ΔᐃⲆᐃᐃ += Hx * 60;
        if (this.ΔᐃⲆᐃᐃ > 60) {
          this.ΔᐃⲆᐃᐃ -= 60;
        }
        c = ((this.ΔᐃⲆᐃᐃ < 30 ? this.ΔᐃⲆᐃᐃ / 30 : 1 - (this.ΔᐃⲆᐃᐃ - 30) / 30) * 12 - 6) * this.ᐃⵠΔⵠⲆ;
        Kw(1055, b, -b.width / 4 + c, -b.height / 4);
        Zo.restore();
        Zo.save();
        Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
        Zo.rotate(Math.PI + this.ΔⲆᐃⵠᐃ + e);
        Zo.translate(120, c);
        Zo.rotate(d);
        b = ᐃΔ[1060][zx.time];
        ⲆⲆᐃ = -b.width;
        ⲆΔⲆ = -b.height;
        Qp(Zo, b, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
        Zo.restore();
        Zo.save();
        Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
        Zo.rotate(Math.PI + this.ΔⲆᐃⵠᐃ + d + e);
        Zo.translate(120, c);
        Zo.rotate(d);
        b = ᐃΔ[1063][zx.time];
        ⲆⲆᐃ = -b.width;
        ⲆΔⲆ = -b.height;
        Qp(Zo, b, -ⲆⲆᐃ / 2, -ⲆΔⲆ / 2, ⲆⲆᐃ, ⲆΔⲆ);
      }
      Zo.restore();
    }
  }
  function lw(b, c, d) {
    if (c.ᐃⲆⵠᐃⲆΔⵠ() !== 1) {
      return c;
    }
    var e = ᐃⲆⲆⲆⵠⲆΔ[d][b];
    if (e === Jh) {
      var f = (e = document.createElement("canvas")).getContext("2d");
      var g = c.width;
      var a = c.height;
      e.width = g;
      e.height = a;
      f.drawImage(c, 0, 0);
      f.globalCompositeOperation = "source-in";
      f.fillStyle = ΔⲆⲆⵠⲆⲆⲆⵠᐃ[d];
      f.fillRect(0, 0, g, a);
      ᐃⲆⲆⲆⵠⲆΔ[d][b] = e;
    }
    return e;
  }
  function mw() {
    var c = 0;
    switch (this.right) {
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
        c = 1;
    }
    if (this.ΔⲆⲆΔⵠ) {
      for (var f = 0; this.bubbles.length > f; f++) {
        var j = this.bubbles[f];
        if (j.ᐃΔᐃᐃⵠ > 0.5) {
          var k = 1 - (j.ᐃΔᐃᐃⵠ - 0.5) * 2;
        } else {
          k = j.ᐃΔᐃᐃⵠ * 2;
        }
        Zo.globalAlpha = k;
        var m = ᐃΔ[540][zx.time][j.id];
        Qp(Zo, m, Ax.ⲆⲆΔ.x + j.x - m.width / 2, Ax.ⲆⲆΔ.y + j.y - m.height / 2);
        Zo.globalAlpha = 1;
      }
    } else {
      Zo.save();
      Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
      zx.ⲆΔⲆⵠⵠⵠⲆᐃⵠ(this);
      if (this.action & 16) {
        (function (a) {
          if (a.right >= 0) {
            switch (a.right) {
              case 49:
                Zo.save();
                var b = a.attack.ⲆⵠⲆ * -3 / Math.PI;
                if (a.attack.Ⲇⵠⵠ) {
                  var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.ⲆⵠⲆ) / 3;
                } else {
                  c = a.attack.ⲆⵠⲆ;
                }
                Zo.rotate(a.angle - Math.PI / 2 + c);
                Zo.globalAlpha = b / 1.2;
                cd(Zo, fq * -40, fq * 90, fq * 5);
                md(Zo, "#0B6A84");
                Zo.globalAlpha = b / 1.2;
                cd(Zo, fq * -52, fq * 100, fq * 8);
                md(Zo, "#0B6A84");
                Zo.globalAlpha = b / 1.2;
                cd(Zo, fq * -30, fq * 95, fq * 4);
                md(Zo, "#0B6A84");
                Zo.globalAlpha = 1;
                Zo.restore();
                break;
              case 46:
              case 50:
              case 51:
              case 52:
                if (a.ⲆⲆᐃᐃᐃⵠΔ === 1) {
                  break;
                }
                if (a.ΔΔⵠⲆⵠ > 0) {
                  var d = Cs.ⲆⵠⵠΔΔⵠᐃ[zx.time];
                } else {
                  d = a.ⵠᐃΔᐃᐃⲆΔ > 0 || a.ⲆᐃⲆⲆⲆ > 0 ? Cs.ⲆΔΔᐃⵠᐃᐃ[zx.time] : Cs.ⵠΔΔᐃᐃⲆⲆ[zx.time];
                }
                b = a.attack.ⲆⵠⲆ * -3 / Math.PI;
                if ((c = a.attack.Ⲇⵠⵠ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0)) === 0) {
                  a.ⲆᐃΔᐃΔⵠΔ = a.angle;
                }
                Zo.save();
                Zo.rotate(a.ⲆᐃΔᐃΔⵠΔ - Math.PI / 2);
                Zo.globalAlpha = b;
                var e = fq * 25 + c * 25;
                cd(Zo, e, fq * 80, fq * 15);
                md(Zo, d);
                cd(Zo, -e, fq * 80, fq * 15);
                md(Zo, d);
                Zo.globalAlpha = 1;
                Zo.restore();
            }
          }
        })(this);
      }
      Zo.save();
      Zo.rotate(this.angle - Math.PI / 2);
      if (!(this.action & 16)) {
        if (this.action & 64 || this.ΔⲆᐃᐃⵠ !== 0) {
          this.ⵠΔΔΔᐃΔΔ.ⲆᐃⲆ();
        } else if (this.action & 32) {
          this.ᐃⲆⵠⲆⲆⲆⲆ.ⲆᐃⲆ();
        }
      }
      var p;
      var q = this.ⵠΔΔΔᐃΔΔ.ⲆⵠⲆ;
      var v = this.ᐃⲆⵠⲆⲆⲆⲆ.ⲆⵠⲆ;
      if (this.ⵠΔⲆᐃΔ === 85) {
        m = ᐃΔ[793][zx.time];
        p = 793;
      } else if (this.ⵠΔⲆᐃΔ === 20) {
        m = ᐃΔ[920][zx.time];
        p = 920;
      } else if (this.ⵠΔⲆᐃΔ === 21) {
        m = ᐃΔ[924][zx.time];
        p = 924;
      } else if (this.ⵠΔⲆᐃΔ === 22) {
        m = ᐃΔ[928][zx.time];
        p = 928;
      } else if (this.ⲆᐃᐃᐃⲆᐃΔ) {
        m = ᐃΔ[822][zx.time];
        p = 822;
      } else {
        m = ᐃΔ[7][this.ⲆΔⵠⵠ][zx.time];
        p = 7;
      }
      ⲆⲆⵠᐃ = ᐃΔ[286][zx.time];
      var w = m;
      var h = p;
      if (this.action & 16) {
        if (this.attack.ⲆᐃⲆ() && cg == this.attack.Ⲇⵠⵠ) {
          this.ⵠⲆⲆⵠⵠ = !this.ⵠⲆⲆⵠⵠ;
          this.action -= 16;
          if (this.Ⲇᐃᐃⵠ == Ax.Ⲇᐃᐃⵠ) {
            Ax.control.ⵠΔΔΔ = 0;
          }
        }
        if (this.right >= 0) {
          this.ⵠⲆⲆⵠⵠ = true;
        }
        var g = this.ⵠⲆⲆⵠⵠ ? this.attack.ⲆⵠⲆ : -this.attack.ⲆⵠⲆ / 3;
        var x = this.ⵠⲆⲆⵠⵠ ? this.attack.ⲆⵠⲆ / 3 : -this.attack.ⲆⵠⲆ;
        if (this.ⲆᐃᐃᐃⲆᐃΔ) {
          Zo.save();
          Zo.rotate(g);
          af(p, m, -m.width / 2 - (66 + q) * fq, -m.height / 2 + (5 + v) * fq);
          Zo.restore();
          Zo.save();
          Zo.rotate(x);
          af(p, m, -m.width / 2 + fq * (66 + q), -m.height / 2 + fq * (5 + v));
          Zo.restore();
        } else if (c === 0) {
          if (this.right === 64) {
            g = -ΔⵠΔⵠ.ⲆΔⲆΔᐃΔᐃ(-g);
          }
          Zo.save();
          Zo.rotate(g);
          af(286, ⲆⲆⵠᐃ, -ⲆⲆⵠᐃ.width / 2 - (49 + q) * fq, -ⲆⲆⵠᐃ.height / 2 + (15 + v) * fq);
          if (this.right === 28) {
            var u = ᐃΔ[this.right][this.ⵠΔⲆΔᐃ][zx.time];
            Sw(this.right, this.ⵠΔⲆΔᐃ, u, -u.width / 4 - fq * (62 + q), -u.height / 4 + fq * (v + 18));
          } else {
            wv(this.right, q, v);
          }
          if (p >= 920) {
            Kw(p, m, -m.width / 4 - fq * (49 + q), -m.height / 4 + (11 + v) * fq);
          } else if (p !== 793) {
            Sw(p, this.ⲆΔⵠⵠ, m, -m.width / 4 - fq * (49 + q), -m.height / 4 + (11 + v) * fq);
          } else {
            af(p, m, -m.width / 2 - (49 + q) * fq, -m.height / 2 + (11 + v) * fq);
          }
          Zo.restore();
          Zo.save();
          Zo.rotate(x);
          af(286, ⲆⲆⵠᐃ, -ⲆⲆⵠᐃ.width / 2 + (49 + q) * fq, -ⲆⲆⵠᐃ.height / 2 + (15 + v) * fq);
          if (p >= 920) {
            Kw(p, m, -m.width / 4 + fq * (49 + q), -m.height / 4 + fq * (11 + v));
          } else if (p !== 793) {
            Sw(p, this.ⲆΔⵠⵠ, m, -m.width / 4 + fq * (49 + q), -m.height / 4 + (11 + v) * fq);
          } else {
            af(p, m, -m.width / 2 + (49 + q) * fq, -m.height / 2 + fq * (11 + v));
          }
          Zo.restore();
        }
      } else if (this.ⲆᐃᐃᐃⲆᐃΔ) {
        af(p, m, -m.width / 2 - (66 + q) * fq, -m.height / 2 + (5 + v) * fq);
        af(p, m, -m.width / 2 + fq * (66 + q), -m.height / 2 + (5 + v) * fq);
      } else if (c === 0) {
        af(286, ⲆⲆⵠᐃ, -ⲆⲆⵠᐃ.width / 2 - (49 + q) * fq, -ⲆⲆⵠᐃ.height / 2 + fq * (15 + v));
        if (this.right === 28) {
          u = ᐃΔ[this.right][this.ⵠΔⲆΔᐃ][zx.time];
          Sw(this.right, this.ⵠΔⲆΔᐃ, u, -u.width / 4 - (62 + q) * fq, -u.height / 4 + fq * (v + 18));
        } else {
          wv(this.right, q, v);
        }
        if (p >= 920) {
          Kw(p, m, -m.width / 4 - (49 + q) * fq, -m.height / 4 + (11 + v) * fq);
        } else if (p !== 793) {
          Sw(p, this.ⲆΔⵠⵠ, m, -m.width / 4 - (49 + q) * fq, -m.height / 4 + (11 + v) * fq);
        } else {
          af(p, m, -m.width / 2 - (49 + q) * fq, -m.height / 2 + fq * (11 + v));
        }
        af(286, ⲆⲆⵠᐃ, -ⲆⲆⵠᐃ.width / 2 + fq * (49 + q), -ⲆⲆⵠᐃ.height / 2 + (15 + v) * fq);
        if (p >= 920) {
          Kw(p, m, -m.width / 4 + fq * (49 + q), -m.height / 4 + fq * (11 + v));
        } else if (p !== 793) {
          Sw(p, this.ⲆΔⵠⵠ, m, -m.width / 4 + (49 + q) * fq, -m.height / 4 + (11 + v) * fq);
        } else {
          af(p, m, -m.width / 2 + fq * (49 + q), -m.height / 2 + (11 + v) * fq);
        }
      }
      if (this.ⲆⲆⲆᐃⵠ && this.ⵠΔⲆᐃΔ < 1) {
        m = ᐃΔ[29][this.ⵠⵠⵠΔⲆⵠⲆ][zx.time];
        Sw(29, this.ⵠⵠⵠΔⲆⵠⲆ, m, -m.width / 4, -m.height / 4 - fq * 39);
      }
      if (this.ⲆᐃᐃᐃⲆᐃΔ) {
        m = ᐃΔ[820][zx.time];
        af(820, m, -m.width / 2, -m.height / 2);
        this.ⵠⵠΔⵠⲆᐃΔ.ⲆᐃⲆ();
        m = ᐃΔ[821][zx.time];
        af(821, m, -m.width / 2, -m.height / 2 + this.ⵠⵠΔⵠⲆᐃΔ.ⲆⵠⲆ);
      } else {
        m = ᐃΔ[255][this.ⲆΔⵠⵠ][zx.time];
        if (this.ⵠΔⲆᐃΔ !== 85 && (Sw(255, this.ⲆΔⵠⵠ, m, -m.width / 4, -m.height / 4), this.ⵠⵠΔΔⵠ > 0)) {
          m = ᐃΔ[796][this.ⵠⵠΔΔⵠ][zx.time];
          Sw(796, this.ⵠⵠΔΔⵠ, m, -m.width / 4, -m.height / 4);
        }
      }
      if (this.action & 128) {
        if (this.ᐃⵠⵠⲆⲆ.ⲆᐃⲆ() && Dh == this.ᐃⵠⵠⲆⲆ.Ⲇⵠⵠ) {
          this.action -= 128;
        }
        Zo.globalAlpha = 0.6 - this.ᐃⵠⵠⲆⲆ.ⲆⵠⲆ;
        if (this.ⲆᐃᐃᐃⲆᐃΔ) {
          m = ᐃΔ[825];
          Qp(Zo, m, -m.width / 2, -m.height / 2);
        } else {
          m = lw(this.ⲆΔⵠⵠ, ᐃΔ[255][this.ⲆΔⵠⵠ][0], ᐃⵠᐃΔⵠⲆᐃⲆⵠ);
          Qp(Zo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        Zo.globalAlpha = 1;
      }
      if (this.action & 256) {
        if (this.ⵠᐃΔΔΔΔⵠ.ⲆᐃⲆ() && nl == this.ⵠᐃΔΔΔΔⵠ.Ⲇⵠⵠ) {
          this.action -= 256;
        }
        Zo.globalAlpha = 0.6 - this.ⵠᐃΔΔΔΔⵠ.ⲆⵠⲆ;
        m = ᐃΔ[266];
        Qp(Zo, m, -m.width / 2, -m.height / 2);
        Zo.globalAlpha = 1;
      }
      if (this.action & 2) {
        if (this.ⵠⵠᐃ.ⲆᐃⲆ() && this.ⵠⵠᐃ.Ⲇⵠⵠ == rh) {
          this.action -= 2;
        }
        Zo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ⲆⵠⲆ;
        if (this.ⲆᐃᐃᐃⲆᐃΔ) {
          m = ᐃΔ[823];
          Qp(Zo, m, -m.width / 2, -m.height / 2);
        } else {
          m = lw(this.ⲆΔⵠⵠ, ᐃΔ[255][this.ⲆΔⵠⵠ][0], ⲆΔⵠᐃⲆΔⲆᐃΔ);
          Qp(Zo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        Zo.globalAlpha = 1;
      }
      if (this.action & 4) {
        if (this.freeze.ⲆᐃⲆ() && this.freeze.Ⲇⵠⵠ == hl) {
          this.action -= 4;
        }
        Zo.globalAlpha = 0.6 - this.freeze.ⲆⵠⲆ;
        m = lw(this.ⲆΔⵠⵠ, ᐃΔ[255][this.ⲆΔⵠⵠ][0], ⲆᐃⲆΔᐃᐃΔΔᐃ);
        Qp(Zo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        Zo.globalAlpha = 1;
      }
      if (this.action & 8) {
        if (this.ᐃⲆⵠⲆⲆⵠⵠ.ⲆᐃⲆ() && this.ᐃⲆⵠⲆⲆⵠⵠ.Ⲇⵠⵠ == 0) {
          this.action -= 8;
        }
        Zo.globalAlpha = 0.6 - this.ᐃⲆⵠⲆⲆⵠⵠ.ⲆⵠⲆ;
        if (this.ⲆᐃᐃᐃⲆᐃΔ) {
          m = ᐃΔ[824];
          Qp(Zo, m, -m.width / 2, -m.height / 2);
        } else {
          m = lw(this.ⲆΔⵠⵠ, ᐃΔ[255][this.ⲆΔⵠⵠ][0], ᐃΔΔᐃᐃⲆⲆᐃᐃ);
          Qp(Zo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        Zo.globalAlpha = 1;
      }
      jw(this.ⵠΔⲆᐃΔ);
      if (c === 1) {
        if (this.action & 16) {
          q += this.attack.ⲆⵠⲆ * 15;
        }
        af(286, ⲆⲆⵠᐃ, -ⲆⲆⵠᐃ.width / 2 - fq * 26, -ⲆⲆⵠᐃ.height / 2 + (31 + v + q) * fq);
        if (h >= 920) {
          Kw(h, w, -w.width / 4 - fq * 26, -w.height / 4 + (27 + v + q) * fq);
        } else if (h !== 793) {
          Sw(h, this.ⲆΔⵠⵠ, w, -w.width / 4 - fq * 26, -w.height / 4 + (27 + v + q) * fq);
        } else {
          af(h, w, -w.width / 2 - fq * 26, -w.height / 2 + fq * (27 + v + q));
        }
        af(286, ⲆⲆⵠᐃ, -ⲆⲆⵠᐃ.width / 2 + fq * 26, -ⲆⲆⵠᐃ.height / 2 + (31 + v + q) * fq);
        if (h >= 920) {
          Kw(h, w, -w.width / 4 + fq * 26, -w.height / 4 + (27 + v + q) * fq);
        } else if (h !== 793) {
          Sw(h, this.ⲆΔⵠⵠ, w, -w.width / 4 + fq * 26, -w.height / 4 + (27 + v + q) * fq);
        } else {
          af(h, w, -w.width / 2 + fq * 26, -w.height / 2 + fq * (27 + v + q));
        }
        Mv(this.right, 0, v + q);
      }
      Zo.restore();
      if (this.ⵠΔⲆᐃΔ !== 83 && this.ⵠΔⲆᐃΔ !== 85) {
        if (this.ΔΔⵠⲆⵠ > 0) {
          this.ΔⵠⲆⵠ.ᐃⲆⵠⵠΔⲆΔ ||= gm(fq, this.ΔⵠⲆⵠ.ⲆⲆΔⵠⵠ, 20, "#187484", "#000", 2, null, null, fq * 300);
          m = this.ΔⵠⲆⵠ.ᐃⲆⵠⵠΔⲆΔ;
        } else {
          this.ΔⵠⲆⵠ.label ||= gm(fq, this.ΔⵠⲆⵠ.ⲆⲆΔⵠⵠ, 20, "#FFF", "#000", 2, null, null, fq * 300);
          m = this.ΔⵠⲆⵠ.label;
        }
        if (Cs.ⲆⲆⵠ == zx.ⲆΔᐃ) {
          Zo.globalAlpha = 0.5;
        }
        q = Math.floor(-m.width / 2);
        v = Math.floor(-m.height / 2 - fq * 70);
        Qp(Zo, m, q, v);
        if (this.ΔⵠⲆⵠ.level > 0) {
          var y = q + m.width + 5;
          m = ᐃΔ[885];
          if (ΔⵠᐃΔΔⲆⲆ[this.ΔⵠⲆⵠ.level] === Us) {
            ΔⵠᐃΔΔⲆⲆ[this.ΔⵠⲆⵠ.level] = gm(fq, "[" + this.ΔⵠⲆⵠ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, fq * 50);
          }
          Qp(Zo, ΔⵠᐃΔΔⲆⲆ[this.ΔⵠⲆⵠ.level], y, v);
        }
        Zo.globalAlpha = 1;
      } else {
        v = Math.floor(fq * -70);
        q = Math.floor(ᐃΔ[558].width / 1.5);
      }
      if (Ax.ⵠⵠΔⵠΔⵠⵠ(this.ⵠⵠΔᐃ)) {
        if (this.ⵠⵠΔᐃ == Ax.ᐃΔⵠⵠᐃ[0]) {
          m = ᐃΔ[559];
        } else {
          m = ᐃΔ[558];
        }
        Qp(Zo, m, q - m.width - 5, v - 6);
      }
      Zo.restore();
    }
  }
  function nw() {
    if (this.enabled && this.ⵠᐃᐃⵠᐃ >= 0) {
      var a = new Date().getTime() - this.ⵠᐃᐃⵠᐃ;
      var b = a % 1000 / 1000;
      if (b > 0.5) {
        b = 1 - (b - 0.5) * 2;
      } else {
        b *= 2;
      }
      a = Math.floor(a / 1000);
      if (a < 60) {
        a = 60 - a;
        if (!this.label) {
          this.label = gm(fq, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
        }
        if (this.now != a || !this.ⵠΔᐃⵠᐃⵠΔ) {
          this.now = a;
          this.ⵠΔᐃⵠᐃⵠΔ = gm(fq, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
        }
        Qp(Zo, this.label, ($o - this.label.width) / 2, fq * 100);
        Zo.globalAlpha = b;
        Qp(Zo, this.ⵠΔᐃⵠᐃⵠΔ, ($o - this.label.width) / 2 - this.ⵠΔᐃⵠᐃⵠΔ.width + fq * 15, fq * 100);
        Zo.globalAlpha = 1;
      }
    }
  }
  function ow(a, b) {
    if (this.text) {
      if (this.timeout.Ⲇⵠⵠ) {
        Zo.globalAlpha = 1 - this.timeout.ⲆⵠⲆ;
      } else {
        Zo.globalAlpha = 1;
      }
      if (!this.label) {
        this.label = gm(fq, this.text, 40, a, null, null, null, null, null, b, 10);
      }
      Qp(Zo, this.label, ($o - this.label.width) / 2, fq * 50);
      Zo.globalAlpha = 1;
      if (this.timeout.ⲆᐃⲆ() && this.timeout.Ⲇⵠⵠ == kn) {
        this.text = this.list.shift();
        this.label = null;
      }
    }
  }
  function pw() {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + this.x, Ax.ⲆⲆΔ.y + this.y);
    if (this.text.length > 0) {
      for (var a = 0; a < this.text.length && a < 2; a++) {
        if (!this.label[a]) {
          this.label[a] = bd(fq, this.text[a]);
          this.ᐃΔⲆⵠΔΔᐃ[a] = 0;
          this.ⵠΔⲆΔΔⵠΔ[a] = 0;
        }
        if (a === 1) {
          this.ⵠΔⲆΔΔⵠΔ[0] = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(this.ΔΔⵠⵠΔⲆⲆ) * 30;
        }
      }
      this.ᐃΔⲆⵠΔΔᐃ[0] += Hx;
      if (this.text.length > 1) {
        this.ΔΔⵠⵠΔⲆⲆ = Math.min(this.ΔΔⵠⵠΔⲆⲆ + Hx, 1);
        if (this.ᐃΔⲆⵠΔΔᐃ[0] > 1 && this.ΔΔⵠⵠΔⲆⲆ > 0.5) {
          this.ᐃΔⲆⵠΔΔᐃ[1] += Hx;
        }
      }
      for (a = 0; a < this.text.length && a < 2; a++) {
        var b = this.ᐃΔⲆⵠΔΔᐃ[a];
        if (b > 0) {
          Zo.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * 4, 0) : 1;
          Qp(Zo, this.label[a], -this.label[a].width / 2, -this.ⵠΔⲆΔΔⵠΔ[a] + -this.label[a].height / 2 - fq * 110);
        }
      }
      if (this.ᐃΔⲆⵠΔΔᐃ[0] > 4) {
        this.ᐃΔⲆⵠΔΔᐃ.shift();
        this.text.shift();
        this.ⵠΔⲆΔΔⵠΔ.shift();
        this.label.shift();
        this.ΔΔⵠⵠΔⲆⲆ = 0;
      }
    }
    Zo.restore();
  }
  function qw() {
    if (this.message !== qg) {
      var a = Ax.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ.length > 0 ? -95 : 0;
      Qp(Zo, this.message, 0, sa - this.message.height + a);
    }
  }
  ⲆΔⵠᐃⲆΔⲆᐃΔ = 0;
  ᐃⵠᐃΔⵠⲆᐃⲆⵠ = 1;
  ⲆᐃⲆΔᐃᐃΔΔᐃ = 2;
  ᐃΔΔᐃᐃⲆⲆᐃᐃ = 3;
  ⵠⲆⲆᐃⲆⲆⲆΔⵠ = 4;
  ᐃⲆⲆⲆⵠⲆΔ = [[], [], [], [], []];
  ΔⲆⲆⵠⲆⲆⲆⵠᐃ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
  var rw = 0;
  function sw(j, e, i, k, n, o, a, q) {
    if (q === Il) {
      q = 0;
    }
    zx.ⵠΔΔⲆ[n].ⲆᐃⲆ();
    for (var r = a; q <= r; r--) {
      for (var t = j; t <= e; t++) {
        for (var w = i; k >= w; w++) {
          var x = ux.ΔᐃⲆΔ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (y !== undefined) {
              for (var z = 0; y.length > z; z++) {
                var A = y[z];
                if (A.ⲆᐃⲆ) {
                  if (A.ⵠⵠᐃ.ⲆᐃⲆ() && A.ⵠⵠᐃ.Ⲇⵠⵠ == Oq) {
                    A.ⲆᐃⲆ = false;
                  }
                  var B = Hx * (1 - A.ⵠⵠᐃ.ⲆⵠⲆ) * 600 * fq;
                  var D = Math.sin(A.angle) * B;
                  var E = B * Math.cos(A.angle);
                } else {
                  D = 0;
                  E = 0;
                }
                var F = ᐃΔ[n][zx.time][r];
                var G = zx.ⵠΔΔⲆ[n].ⲆⵠⲆ * -F.width;
                var H = zx.ⵠΔΔⲆ[n].ⲆⵠⲆ * -F.height;
                Qp(Zo, F, Ax.ⲆⲆΔ.x + A.x - G / 2 + D, Ax.ⲆⲆΔ.y + A.y - H / 2 + E, G, H);
              }
            }
          }
        }
      }
    }
  }
  function tw(j, e, i, k, n, o, a, q) {
    if ($k === q) {
      q = 0;
    }
    for (var r = a; q <= r; r--) {
      for (var t = j; e >= t; t++) {
        for (var w = i; k >= w; w++) {
          var x = ux.ΔᐃⲆΔ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (y !== $k) {
              for (var z = 0; z < y.length; z++) {
                var A = y[z];
                var B = ᐃΔ[n][zx.time][r];
                var D = (rw + (t + w) * 3) % 60;
                var E = D < 30 ? D / 30 : 1 - (D - 30) / 30;
                var F = -B.width * (1 + E * 0.9 / 30);
                var G = -B.height * (1 + E * 0.9 / 30);
                E = (D = (rw + (t + w) * 7) % 60) < 30 ? D / 30 : 1 - (D - 30) / 30;
                var H = Zo.globalAlpha;
                Zo.globalAlpha = (0.9 + E * 0.1) * H;
                Qp(Zo, B, Ax.ⲆⲆΔ.x + A.x - F / 2, Ax.ⲆⲆΔ.y + A.y - G / 2, F, G);
                Zo.globalAlpha = H;
              }
            }
          }
        }
      }
    }
  }
  var uw = [];
  for (Fb = 0; Fb < 100; Fb++) {
    var vw = 1;
    if (Math.random() < 0.25) {
      vw = 0;
    }
    uw.push(vw);
  }
  function ww(j, e, i, k, n, o, a, q, r) {
    if (ph === q) {
      q = 0;
    }
    for (var h = a; q <= h; h--) {
      for (var t = j; t <= e; t++) {
        for (var w = i; w <= k; w++) {
          var x = ux.ΔᐃⲆΔ[t][w];
          if (x !== _o && x[o] !== ao) {
            var A = x[o][h];
            if (xj !== A) {
              for (var B = 0; A.length > B; B++) {
                var D = A[B];
                if (D.ⲆᐃⲆ) {
                  if (D.ⵠⵠᐃ.ⲆᐃⲆ() && D.ⵠⵠᐃ.Ⲇⵠⵠ == 0) {
                    D.ⲆᐃⲆ = false;
                  }
                  var E = Hx * (1 - D.ⵠⵠᐃ.ⲆⵠⲆ) * 600 * fq;
                  var F = Math.sin(D.angle) * E;
                  var G = Math.cos(D.angle) * E;
                } else {
                  F = 0;
                  G = 0;
                }
                for (var H = 0; H < ⵠⵠⲆΔΔⲆⲆ[h].ΔⲆⵠΔ; H++) {
                  if (zx.ⵠⵠⲆⲆΔ[H].ⲆᐃⲆΔᐃ !== Gx) {
                    zx.ⵠⵠⲆⲆΔ[H].ⲆᐃⲆ();
                    zx.ⵠⵠⲆⲆΔ[H].ⲆᐃⲆΔᐃ = Gx;
                  }
                  var I = ᐃΔ[941][zx.time][ⵠⵠⲆΔΔⲆⲆ[h].ⲆⲆⲆⵠ[H].Δᐃᐃ];
                  var J = zx.ⵠⵠⲆⲆΔ[H].ⲆⵠⲆ * -I.width;
                  var K = zx.ⵠⵠⲆⲆΔ[H].ⲆⵠⲆ * -I.height;
                  Qp(Zo, I, Ax.ⲆⲆΔ.x + D.x - J / 4 + F + ⵠⵠⲆΔΔⲆⲆ[h].ⲆⲆⲆⵠ[H].x, Ax.ⲆⲆΔ.y + D.y - K / 4 + G + ⵠⵠⲆΔΔⲆⲆ[h].ⲆⲆⲆⵠ[H].y, J / 2, K / 2);
                }
              }
            }
          }
        }
      }
    }
  }
  function xw(f, e, i, j, k, n, a, o = 0, q) {
    for (var h = a; h >= o; h--) {
      for (var r = f; r <= e; r++) {
        for (var s = i; j >= s; s++) {
          if (q <= 0 || uw[(r + s * q) % uw.length] !== 1) {
            var t = ux.ΔᐃⲆΔ[r][s];
            if (xk !== t && t[n] !== undefined) {
              var w = t[n][h];
              if (cq !== w) {
                for (var x = 0; x < w.length; x++) {
                  var y = w[x];
                  if (y.ⲆᐃⲆ) {
                    if (y.ⵠⵠᐃ.ⲆᐃⲆ() && y.ⵠⵠᐃ.Ⲇⵠⵠ == 0) {
                      y.ⲆᐃⲆ = ln;
                    }
                    var z = (1 - y.ⵠⵠᐃ.ⲆⵠⲆ) * Hx * 600 * fq;
                    var A = z * Math.sin(y.angle);
                    var B = Math.cos(y.angle) * z;
                  } else {
                    A = 0;
                    B = 0;
                  }
                  var D = ᐃΔ[k][zx.time][h];
                  Qp(Zo, D, Ax.ⲆⲆΔ.x + y.x - D.width / (ΔⲆⵠᐃⵠ * 2) + A, Ax.ⲆⲆΔ.y + y.y - D.height / (ΔⲆⵠᐃⵠ * 2) + B, D.width / ΔⲆⵠᐃⵠ, D.height / ΔⲆⵠᐃⵠ);
                }
              }
            }
          }
        }
      }
    }
  }
  function yw(c, e, f, i, j, k, a, m, n) {
    if (qg === m) {
      m = 0;
    }
    for (var h = c; e >= h; h++) {
      for (var o = f; o <= i; o++) {
        var p = ux.ΔᐃⲆΔ[h][o];
        if (Fk !== p && $k !== p[k]) {
          var q = p[k];
          if (Us !== q) {
            if (q.scale === 1) {
              var r = ᐃΔ[j][zx.time][q.ΔᐃᐃᐃⲆ];
              Zo.save();
              Zo.translate(Ax.ⲆⲆΔ.x + q.x, Ax.ⲆⲆΔ.y + q.y);
              Zo.rotate(q.angle);
              Qp(Zo, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
              Zo.restore();
            } else if (q.scale === 3) {
              for (var t = 0; t < q.ΔⲆⵠ.length; t++) {
                Zo.save();
                Zo.translate(Ax.ⲆⲆΔ.x + q.x, Ax.ⲆⲆΔ.y + q.y);
                Zo.rotate(q.ΔⲆⵠ[t].angle);
                r = ᐃΔ[j][zx.time][q.ΔⲆⵠ[t].ΔᐃᐃᐃⲆ];
                Qp(Zo, r, -r.width / 3 + q.ΔⲆⵠ[t].x, -r.height / 3 + q.ΔⲆⵠ[t].y, r.width / 1.5, r.height / 1.5);
                Zo.restore();
              }
            } else {
              r = ᐃΔ[j][zx.time][q.ΔᐃᐃᐃⲆ];
              Zo.save();
              Zo.translate(Ax.ⲆⲆΔ.x + q.x, Ax.ⲆⲆΔ.y + q.y);
              Zo.rotate(q.angle);
              Qp(Zo, r, -r.width / 2, -r.height / 2, r.width, r.height);
              Zo.restore();
            }
          }
        }
      }
    }
  }
  ΔⲆⵠᐃⵠ = 1;
  ⵠⵠⲆΔΔⲆⲆ = [{
    ΔⲆⵠΔ: 10,
    ⲆⲆⲆⵠ: [{
      x: -128,
      y: -20,
      Δᐃᐃ: 0
    }, {
      x: -86,
      y: -4,
      Δᐃᐃ: 1
    }, {
      Δᐃᐃ: 2,
      x: -60,
      y: -74
    }, {
      Δᐃᐃ: 0,
      y: -144,
      x: -22
    }, {
      x: -58,
      Δᐃᐃ: 0,
      y: 86
    }, {
      Δᐃᐃ: 0,
      y: -30,
      x: 3
    }, {
      y: -115,
      Δᐃᐃ: 1,
      x: 65
    }, {
      Δᐃᐃ: 0,
      y: -50,
      x: 118
    }, {
      Δᐃᐃ: 1,
      x: 73,
      y: 15
    }, {
      y: 79,
      x: 67,
      Δᐃᐃ: 0
    }]
  }, {
    ⲆⲆⲆⵠ: [{
      x: -45,
      Δᐃᐃ: 0,
      y: -26
    }, {
      Δᐃᐃ: 2,
      y: 20,
      x: -45
    }, {
      y: -60,
      x: 10,
      Δᐃᐃ: 1
    }, {
      y: -17,
      Δᐃᐃ: 1,
      x: 52
    }, {
      Δᐃᐃ: 0,
      y: 45,
      x: 14
    }],
    ΔⲆⵠΔ: 5
  }, {
    ⲆⲆⲆⵠ: [{
      Δᐃᐃ: 2,
      y: 3,
      x: -30
    }, {
      Δᐃᐃ: 2,
      y: -38,
      x: 7
    }, {
      x: 37,
      y: 5,
      Δᐃᐃ: 2
    }],
    ΔⲆⵠΔ: 3
  }, {
    ΔⲆⵠΔ: 11,
    ⲆⲆⲆⵠ: [{
      x: -74,
      y: -87,
      Δᐃᐃ: 2
    }, {
      x: -11,
      y: -10,
      Δᐃᐃ: 1
    }, {
      y: 17,
      Δᐃᐃ: 1,
      x: -99
    }, {
      Δᐃᐃ: 0,
      x: -66,
      y: 84
    }, {
      Δᐃᐃ: 1,
      y: 123,
      x: -55
    }, {
      y: 81,
      x: 10,
      Δᐃᐃ: 2
    }, {
      y: 50,
      Δᐃᐃ: 0,
      x: 52
    }, {
      y: 9,
      x: 138,
      Δᐃᐃ: 1
    }, {
      x: 104,
      y: -28,
      Δᐃᐃ: 0
    }, {
      Δᐃᐃ: 2,
      y: -56,
      x: 67
    }, {
      y: -112,
      x: 5,
      Δᐃᐃ: 0
    }]
  }, {
    ⲆⲆⲆⵠ: [{
      x: -33,
      y: -66,
      Δᐃᐃ: 2
    }, {
      y: 10,
      x: -58,
      Δᐃᐃ: 0
    }, {
      Δᐃᐃ: 1,
      x: -19,
      y: 44
    }, {
      x: 44,
      Δᐃᐃ: 0,
      y: 20
    }, {
      Δᐃᐃ: 2,
      x: 53,
      y: -36
    }, {
      y: -62,
      x: 7,
      Δᐃᐃ: 0
    }],
    ΔⲆⵠΔ: 6
  }, {
    ΔⲆⵠΔ: 3,
    ⲆⲆⲆⵠ: [{
      x: -19,
      y: -25,
      Δᐃᐃ: 1
    }, {
      x: -29,
      Δᐃᐃ: 2,
      y: 13
    }, {
      y: 12,
      x: 12,
      Δᐃᐃ: 0
    }]
  }];
  var zw = 0;
  var Aw = 0;
  var Bw = 0;
  var Cw = 0;
  function Dw(a, b, c, d, e) {
    if (zx.transition && e == 1) {
      Zo.globalAlpha = 1;
      Qp(Zo, ᐃΔ[a][zx.time][b], c, d);
      zx.time = zx.time ? 0 : 1;
      Zo.globalAlpha = 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
      Qp(Zo, ᐃΔ[a][zx.time][b], c, d);
      zx.time = zx.time ? 0 : 1;
      Zo.globalAlpha = 1;
    } else {
      Zo.globalAlpha = e;
      Qp(Zo, ᐃΔ[a][zx.time][b], c, d);
      Zo.globalAlpha = 1;
    }
  }
  function Ew(a, b) {
    if (zx.transition) {
      Zo.globalAlpha = 1;
      a.ΔⵠᐃⲆᐃ(b);
      zx.time = zx.time ? 0 : 1;
      Zo.globalAlpha = 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
      a.ΔⵠᐃⲆᐃ(b);
      zx.time = zx.time ? 0 : 1;
      Zo.globalAlpha = 1;
    } else {
      a.ΔⵠᐃⲆᐃ(b);
    }
  }
  function Fw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = Ax.ⲆⲆΔ.x + f - 700;
    var g = Math.max(Ax.ⲆⲆΔ.y + e, 0);
    var l = Math.max(-Ax.ⲆⲆΔ.y + sa - i - 100, 0);
    var r = g;
    var b = sa - g - l;
    if (n) {
      var d = j.Δᐃᐃ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += d + 0 - 2;
    if (n) {
      d = j.Δᐃᐃ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h + 250 - s + d;
    var u = (s += t - 2) - 2;
    if (n) {
      d = j.Δᐃᐃ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h + 350 - s + d) - 3 > u) {
      s += t - 2;
    } else {
      s = u;
    }
    t = h + 700 - s;
    if (n > 0 && k.ΔΔΔⵠⵠᐃⵠ === 1) {
      if (zx.transition) {
        var p = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
        Zo.fillStyle = Hw(15, 77, 72, 252, 239, 187, p);
      } else {
        Zo.fillStyle = Cs.ᐃΔⵠᐃⲆⵠⲆ[zx.time];
      }
      Zo.fillRect(s, r, t, b);
    } else {
      if (zx.transition) {
        p = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
        Zo.fillStyle = Hw(k.ΔⲆᐃ[0], k.ΔⲆᐃ[1], k.ΔⲆᐃ[2], k.ⲆΔᐃ[0], k.ⲆΔᐃ[1], k.ⲆΔᐃ[2], p);
      } else {
        Zo.fillStyle = k.ⲆⲆⲆⵠᐃ[zx.time];
      }
      Zo.fillRect(s, r, t, b);
    }
  }
  function Gw(a) {
    Zo.save();
    Zo.translate(Ax.ⲆⲆΔ.x + a.x, Ax.ⲆⲆΔ.y + a.y);
    Zo.rotate(a.angle);
    Zo.globalAlpha = a.alpha;
    var b = ᐃΔ[a.id][zx.time];
    Qp(Zo, b, -b.width / 2, -b.height / 2);
    Zo.globalAlpha = 1;
    Zo.restore();
  }
  function Hw(b, c, d, e, f, g, a) {
    var i;
    var j = "#";
    j += (i = Math.floor(a * e + b * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
    j += (i = Math.floor(a * f + (1 - a) * c)) < 16 ? "0" + i.toString(16) : i.toString(16);
    return j += (i = Math.floor(a * g + (1 - a) * d)) < 16 ? "0" + i.toString(16) : i.toString(16);
  }
  function Iw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = Ax.ⲆⲆΔ.y + f + 710;
    var g = Math.max(Ax.ⲆⲆΔ.x + e, 0);
    var l = Math.max(-Ax.ⲆⲆΔ.x + $o - i - 100, 0);
    var r = g;
    var b = $o - g - l;
    if (n) {
      var d = j.Δᐃᐃ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += -d + 0 + 2;
    if (n) {
      d = j.Δᐃᐃ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h - 250 - s - d;
    var u = (s += t + 2) - 2;
    if (n) {
      d = j.Δᐃᐃ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h - 350 - s - d) < u) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (n > 0 && k.ΔΔΔⵠⵠᐃⵠ === 1) {
      if (zx.transition) {
        var p = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
        Zo.fillStyle = Hw(15, 77, 72, 252, 239, 187, p);
      } else {
        Zo.fillStyle = Cs.ᐃΔⵠᐃⲆⵠⲆ[zx.time];
      }
      Zo.fillRect(r, s, b, t);
    } else {
      if (zx.transition) {
        p = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
        Zo.fillStyle = Hw(k.ΔⲆᐃ[0], k.ΔⲆᐃ[1], k.ΔⲆᐃ[2], k.ⲆΔᐃ[0], k.ⲆΔᐃ[1], k.ⲆΔᐃ[2], p);
      } else {
        Zo.fillStyle = k.ⲆⲆⲆⵠᐃ[zx.time];
      }
      Zo.fillRect(r, s, b, t);
    }
  }
  function Jw(b, c, d) {
    const e = (2531011 + (5328 + b) * 214013) % 4294967296;
    const f = ((c + 19994) * 22695477 + 1) % 4294967296;
    const g = ~(d & 8802) & d | ~(d & 8802) & 8802;
    const a = rx(e, f, g, e, f, g);
    (function (b, c, d, e, f, i) {
      const a = ~(b & 439) & 439 | ~(b & 439) & b;
      const j = (16 << (c & 255)) + (24 << (c >> 24 & 255)) + (0 << (c >> 16 & 255)) + (8 << (c >> 8 & 255));
      const k = (16 << (d >> 16 & 255)) + (8 << (d & 255)) + (0 << (d >> 24 & 255)) + (24 << (d >> 8 & 255));
      const h = e ^ 64393;
      const g = rx(a, j, k, h, f ^ 25606, (i | 41027) & ~(i & 41027));
      const l = dx(a, j, k, h);
    })(e, f, g, e, f, g);
    return a ^ 33598;
  }
  function Kw(b, c, d, e) {
    var f = c.width;
    var g = c.height;
    var a = Math.floor(f / 2);
    var h = Math.floor(g / 2);
    if (zx.transition) {
      Zo.globalAlpha = 1;
      Qp(Zo, ᐃΔ[b][zx.time], 0, 0, f, g, d, e, a, h);
      zx.time = zx.time ? 0 : 1;
      Zo.globalAlpha = 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
      Qp(Zo, ᐃΔ[b][zx.time], 0, 0, f, g, d, e, a, h);
      zx.time = zx.time ? 0 : 1;
      Zo.globalAlpha = 1;
    } else {
      Qp(Zo, c, 0, 0, f, g, d, e, a, h);
    }
  }
  function Lw(a, b) {
    if (zx.transition) {
      Zo.globalAlpha = 1;
      a.ⵠⲆᐃΔⲆ(b);
      zx.time = zx.time ? 0 : 1;
      Zo.globalAlpha = 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
      a.ⵠⲆᐃΔⲆ(b);
      zx.time = zx.time ? 0 : 1;
      Zo.globalAlpha = 1;
    } else {
      a.ⵠⲆᐃΔⲆ(b);
    }
  }
  function Mw(a) {
    Zo.globalAlpha = a.alpha;
    cd(Zo, a.x + Ax.ⲆⲆΔ.x, a.y + Ax.ⲆⲆΔ.y, a.r);
    md(Zo, Cs.ΔⵠΔⲆⲆΔⲆ[zx.time]);
    Zo.globalAlpha = 1;
  }
  function Nw(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = Ax.ⲆⲆΔ.x + j + 820;
    var g = Math.max(Ax.ⲆⲆΔ.y + e, 0);
    var l = Math.max(-Ax.ⲆⲆΔ.y + sa - i - 100, 0);
    var t = g;
    var b = sa - g - l;
    if (o) {
      var d = q.Δᐃᐃ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var c = t;
    var p = -d.x + 0;
    var C = b;
    var G = u += -d.x + 0 + 2;
    if (o) {
      d = q.Δᐃᐃ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - u - d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f + 2) - 2;
    if (o) {
      d = q.Δᐃᐃ(s);
    } else {
      d = s.r;
    }
    if (u + (f = h - 350 - u - d.x) < k) {
      var A = true;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var E = u += f + 2;
    } else {
      A = Ak;
      u = k;
      E = -1;
    }
    f = h - 700 - u;
    if (zx.transition) {
      var N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
      Zo.fillStyle = Hw(9, 55, 63, 11, 106, 132, N);
    } else {
      Zo.fillStyle = Cs.ᐃⲆΔⵠᐃ[zx.time];
    }
    Zo.fillRect(F, c, p, C);
    if (o) {
      if (zx.transition) {
        N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
        Zo.fillStyle = Hw(15, 70, 76, 42, 139, 155, N);
      } else {
        Zo.fillStyle = Cs.ⵠΔΔΔΔⲆⵠ[zx.time];
      }
    } else if (zx.transition) {
      N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
      Zo.fillStyle = Hw(9, 55, 63, 11, 106, 132, N);
    } else {
      Zo.fillStyle = Cs.ᐃⲆΔⵠᐃ[zx.time];
    }
    Zo.fillRect(H, y, w, K);
    if (A) {
      if (o) {
        if (zx.transition) {
          N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
          Zo.fillStyle = Hw(17, 94, 96, 169, 214, 211, N);
        } else {
          Zo.fillStyle = Cs.ᐃᐃΔⵠΔΔᐃ[zx.time];
        }
      } else if (zx.transition) {
        N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
        Zo.fillStyle = Hw(9, 55, 63, 11, 106, 132, N);
      } else {
        Zo.fillStyle = Cs.ᐃⲆΔⵠᐃ[zx.time];
      }
      Zo.fillRect(L, J, M, B);
    }
    if (yx.ΔΔⲆᐃⲆ && o) {
      q.ᐃⲆΔΔⲆᐃⵠⵠᐃ(k, E, G, h, -Ax.ⲆⲆΔ.y + c, -Ax.ⲆⲆΔ.y + c + C);
    }
  }
  function Ow(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = Ax.ⲆⲆΔ.y + j + 710;
    var g = Math.max(Ax.ⲆⲆΔ.x + e, 0);
    var l = Math.max(-Ax.ⲆⲆΔ.x + $o - i - 100, 0);
    var t = g;
    var b = $o - g - l;
    if (o) {
      var d = q.Δᐃᐃ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var c = t;
    var p = -d.x + 0;
    var C = b;
    var G = u += -d.x + 0 + 2;
    if (o) {
      d = q.Δᐃᐃ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - u - d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f + 2) - 2;
    if (o) {
      d = q.Δᐃᐃ(s);
    } else {
      d = s.r;
    }
    if (u + (f = h - 350 - u - d.x) < k) {
      var A = true;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var E = u += f + 2;
    } else {
      A = $h;
      u = k;
      E = -1;
    }
    f = h - 700 - u;
    if (zx.transition) {
      var N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
      Zo.fillStyle = Hw(9, 55, 63, 11, 106, 132, N);
    } else {
      Zo.fillStyle = Cs.ᐃⲆΔⵠᐃ[zx.time];
    }
    Zo.fillRect(c, F, C, p);
    if (o) {
      if (zx.transition) {
        N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
        Zo.fillStyle = Hw(15, 70, 76, 42, 139, 155, N);
      } else {
        Zo.fillStyle = Cs.ⵠΔΔΔΔⲆⵠ[zx.time];
      }
    } else if (zx.transition) {
      N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
      Zo.fillStyle = Hw(9, 55, 63, 11, 106, 132, N);
    } else {
      Zo.fillStyle = Cs.ᐃⲆΔⵠᐃ[zx.time];
    }
    Zo.fillRect(y, H, K, w);
    if (A) {
      if (o) {
        if (zx.transition) {
          N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
          Zo.fillStyle = Hw(17, 94, 96, 169, 214, 211, N);
        } else {
          Zo.fillStyle = Cs.ᐃᐃΔⵠΔΔᐃ[zx.time];
        }
      } else if (zx.transition) {
        N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
        Zo.fillStyle = Hw(9, 55, 63, 11, 106, 132, N);
      } else {
        Zo.fillStyle = Cs.ᐃⲆΔⵠᐃ[zx.time];
      }
      Zo.fillRect(J, L, B, M);
    }
    if (yx.ΔΔⲆᐃⲆ && o) {
      q.ⲆⲆΔⲆᐃⲆⵠΔⵠ(k, E, G, h, -Ax.ⲆⲆΔ.x + c, -Ax.ⲆⲆΔ.x + c + C);
    }
  }
  function Pw(b, c, d, e, f, i, a, j, k, h) {
    if (zx.transition) {
      Zo.globalAlpha = 1;
      b(c, d, e, f, i, a, j, k, h);
      zx.time = zx.time ? 0 : 1;
      Zo.globalAlpha = 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
      b(c, d, e, f, i, a, j, k, h);
      zx.time = zx.time ? 0 : 1;
      Zo.globalAlpha = 1;
    } else {
      b(c, d, e, f, i, a, j, k, h);
    }
  }
  function Qw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = Ax.ⲆⲆΔ.y + f - 700;
    var g = Math.max(Ax.ⲆⲆΔ.x + e, 0);
    var l = Math.max(-Ax.ⲆⲆΔ.x + $o - i - 100, 0);
    var r = g;
    var b = $o - g - l;
    if (n) {
      var d = j.Δᐃᐃ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += d + 0 - 2;
    if (n) {
      d = j.Δᐃᐃ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h + 250 - s + d;
    var u = (s += t - 2) - 2;
    if (n) {
      d = j.Δᐃᐃ(q).x;
    } else {
      d = q.r.x;
    }
    if (u < s + (t = h + 350 - s + d) - 3) {
      s += t - 2;
    } else {
      s = u;
    }
    t = h + 700 - s;
    if (n > 0 && k.ΔΔΔⵠⵠᐃⵠ === 1) {
      if (zx.transition) {
        var p = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
        Zo.fillStyle = Hw(15, 77, 72, 252, 239, 187, p);
      } else {
        Zo.fillStyle = Cs.ᐃΔⵠᐃⲆⵠⲆ[zx.time];
      }
      Zo.fillRect(r, s, b, t);
    } else {
      if (zx.transition) {
        p = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
        Zo.fillStyle = Hw(k.ΔⲆᐃ[0], k.ΔⲆᐃ[1], k.ΔⲆᐃ[2], k.ⲆΔᐃ[0], k.ⲆΔᐃ[1], k.ⲆΔᐃ[2], p);
      } else {
        Zo.fillStyle = k.ⲆⲆⲆⵠᐃ[zx.time];
      }
      Zo.fillRect(r, s, b, t);
    }
  }
  function Rw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = Ax.ⲆⲆΔ.x + f + 820;
    var g = Math.max(Ax.ⲆⲆΔ.y + e, 0);
    var l = Math.max(-Ax.ⲆⲆΔ.y + sa - i - 100, 0);
    var r = g;
    var b = sa - g - l;
    if (n) {
      var d = j.Δᐃᐃ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += -d + 0 + 2;
    if (n) {
      d = j.Δᐃᐃ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h - 250 - s - d;
    var u = (s += t + 2) - 2;
    if (n) {
      d = j.Δᐃᐃ(q).x;
    } else {
      d = q.r.x;
    }
    if (u > s + (t = h - 350 - s - d)) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (n > 0 && k.ΔΔΔⵠⵠᐃⵠ === 1) {
      if (zx.transition) {
        var p = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
        Zo.fillStyle = Hw(15, 77, 72, 252, 239, 187, p);
      } else {
        Zo.fillStyle = Cs.ᐃΔⵠᐃⲆⵠⲆ[zx.time];
      }
      Zo.fillRect(s, r, t, b);
    } else {
      if (zx.transition) {
        p = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
        Zo.fillStyle = Hw(k.ΔⲆᐃ[0], k.ΔⲆᐃ[1], k.ΔⲆᐃ[2], k.ⲆΔᐃ[0], k.ⲆΔᐃ[1], k.ⲆΔᐃ[2], p);
      } else {
        Zo.fillStyle = k.ⲆⲆⲆⵠᐃ[zx.time];
      }
      Zo.fillRect(s, r, t, b);
    }
  }
  function Sw(b, c, d, e, f) {
    var g = d.width;
    var a = d.height;
    var i = Math.floor(g / 2);
    var j = Math.floor(a / 2);
    if (zx.transition) {
      Zo.globalAlpha = 1;
      Qp(Zo, ᐃΔ[b][c][zx.time], 0, 0, g, a, e, f, i, j);
      zx.time = zx.time ? 0 : 1;
      Zo.globalAlpha = 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
      Qp(Zo, ᐃΔ[b][c][zx.time], 0, 0, g, a, e, f, i, j);
      zx.time = zx.time ? 0 : 1;
      Zo.globalAlpha = 1;
    } else {
      Qp(Zo, ᐃΔ[b][c][zx.time], 0, 0, g, a, e, f, i, j);
    }
  }
  function ef() {
    Zo.globalAlpha = 1;
    if (zx.transition) {
      var a = zx.ᐃᐃⵠⵠ.ⲆᐃⲆ();
    }
    zx.ⲆⲆΔᐃⵠⲆⲆΔⲆ(-Ax.ⲆⲆΔ.x, -Ax.ⲆⲆΔ.y);
    zw = Math.max(Math.floor(-Ax.ⲆⲆΔ.x / zx.ᐃᐃⵠΔⲆᐃᐃ) - 5, 0);
    Aw = Math.min(Math.floor((-Ax.ⲆⲆΔ.x + Ax.ⲆⲆΔ.w) / zx.ᐃᐃⵠΔⲆᐃᐃ) + 4, zx.ΔᐃᐃⵠΔ - 1);
    Bw = Math.max(Math.floor(-Ax.ⲆⲆΔ.y / zx.ᐃⲆⵠⲆᐃⵠⲆ) - 3, 0);
    Cw = Math.min(Math.floor((-Ax.ⲆⲆΔ.y + Ax.ⲆⲆΔ.ⲆΔⲆ) / zx.ᐃⲆⵠⲆᐃⵠⲆ) + 3, zx.ᐃⵠᐃᐃᐃ - 1);
    (function () {
      for (var c = zx.ᐃΔⲆᐃ.length - 1; c >= 0; c--) {
        if ((A = zx.ᐃΔⲆᐃ[c]).Δᐃᐃ === zx.ΔⲆⵠⲆΔ) {
          var f = zx.ⵠⵠᐃⲆᐃ[A.Δᐃᐃ];
          if (-Ax.ⲆⲆΔ.x >= A.x1 - 230 - $o && -Ax.ⲆⲆΔ.x <= A.x2 + 330 && -Ax.ⲆⲆΔ.y >= A.y1 - sa && -Ax.ⲆⲆΔ.y <= A.y2 + 100) {
            var j = A.x2;
            if (A.Δᐃᐃ !== zx.ΔⲆⵠⲆΔ) {
              j -= 610;
            }
            var k = A.x1;
            if (A.Δᐃᐃ !== zx.ΔⲆⵠⲆΔ) {
              k += 610;
            }
            var m = A.y2;
            if (zx.ΔⲆⵠⲆΔ !== A.Δᐃᐃ) {
              m -= 610;
            }
            var p = A.y1;
            if (zx.ΔⲆⵠⲆΔ !== A.Δᐃᐃ) {
              p += 610;
            }
            if (zx.transition) {
              var q = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
              Zo.fillStyle = Hw(f.ΔⲆᐃ[0], f.ΔⲆᐃ[1], f.ΔⲆᐃ[2], f.ⲆΔᐃ[0], f.ⲆΔᐃ[1], f.ⲆΔᐃ[1], q);
            } else {
              Zo.fillStyle = f.ⲆⲆⲆⵠᐃ[zx.time];
            }
            var w = Math.max(Ax.ⲆⲆΔ.x + k - 2 - 230, 0);
            var x = Math.max(-Ax.ⲆⲆΔ.x + $o - j - 330 - 2, 0);
            var y = Math.max(Ax.ⲆⲆΔ.y + p - 2, 0);
            var z = Math.max(-Ax.ⲆⲆΔ.y + sa - m - 100 - 2, 0);
            Zo.beginPath();
            Zo.fillRect(w, y, $o - x - w, sa - y - z);
          }
        }
      }
      for (c = zx.ᐃΔⲆᐃ.length - 1; c >= 0; c--) {
        var A = zx.ᐃΔⲆᐃ[c];
        if (zx.ΔⲆⵠⲆΔ !== A.Δᐃᐃ) {
          j = A.x2;
          if (zx.ΔⲆⵠⲆΔ !== A.Δᐃᐃ) {
            j -= 400;
          }
          k = A.x1;
          if (zx.ΔⲆⵠⲆΔ !== A.Δᐃᐃ) {
            k += 400;
          }
          m = A.y2;
          if (A.Δᐃᐃ !== zx.ΔⲆⵠⲆΔ) {
            m -= 300;
          }
          p = A.y1;
          if (zx.ΔⲆⵠⲆΔ !== A.Δᐃᐃ) {
            p += 300;
          }
          if (!(A.ⲆⵠⲆ & 8) && -Ax.ⲆⲆΔ.x >= j - $o + 120 && -Ax.ⲆⲆΔ.x <= j + 820 && -Ax.ⲆⲆΔ.y >= p + 88 - sa && m + 50 >= -Ax.ⲆⲆΔ.y) {
            Rw(j, p + 88, m - 88, Ax.ΔΔⲆΔ[0], zx.ⵠⵠᐃⲆᐃ[A.Δᐃᐃ], A.ⲆⵠⲆ & 8);
            Nw(j, p + 88, m - 88, Ax.ΔΔⲆΔ[0], zx.ⵠⵠᐃⲆᐃ[A.Δᐃᐃ], A.ⲆⵠⲆ & 8);
          }
          if (!(A.ⲆⵠⲆ & 4) && k - $o - 700 <= -Ax.ⲆⲆΔ.x && k - 20 >= -Ax.ⲆⲆΔ.x && p + 88 - sa <= -Ax.ⲆⲆΔ.y && m + 50 >= -Ax.ⲆⲆΔ.y) {
            Fw(k, p + 88, m - 88, Ax.ΔΔⲆΔ[1], zx.ⵠⵠᐃⲆᐃ[A.Δᐃᐃ], A.ⲆⵠⲆ & 4);
            nf(k, p + 88, m - 88, Ax.ΔΔⲆΔ[1], zx.ⵠⵠᐃⲆᐃ[A.Δᐃᐃ], A.ⲆⵠⲆ & 4);
          }
          if ((A.ⲆⵠⲆ & 2) === 0 && k - 235 - $o <= -Ax.ⲆⲆΔ.x && j + 350 >= -Ax.ⲆⲆΔ.x && m - sa - 275 <= -Ax.ⲆⲆΔ.y && m + 490 >= -Ax.ⲆⲆΔ.y) {
            Iw(m - 230, k - 230, j + 230, Ax.ΔΔⲆΔ[2], zx.ⵠⵠᐃⲆᐃ[A.Δᐃᐃ], A.ⲆⵠⲆ & 2);
            Ow(m - 230, k - 230, j + 230, Ax.ΔΔⲆΔ[2], zx.ⵠⵠᐃⲆᐃ[A.Δᐃᐃ], A.ⲆⵠⲆ & 2);
          }
          if ((A.ⲆⵠⲆ & 1) === 0 && k - 235 - $o <= -Ax.ⲆⲆΔ.x && -Ax.ⲆⲆΔ.x <= j + 350 && p - sa - 390 <= -Ax.ⲆⲆΔ.y && -Ax.ⲆⲆΔ.y <= p + 315) {
            Qw(p + 310, k - 230, j + 230, Ax.ΔΔⲆΔ[3], zx.ⵠⵠᐃⲆᐃ[A.Δᐃᐃ], A.ⲆⵠⲆ & 1);
            rf(p + 310, k - 230, j + 230, Ax.ΔΔⲆΔ[3], zx.ⵠⵠᐃⲆᐃ[A.Δᐃᐃ], A.ⲆⵠⲆ & 1);
          }
        }
      }
      for (c = zx.ᐃΔⲆᐃ.length - 1; c >= 0; c--) {
        if ((A = zx.ᐃΔⲆᐃ[c]).Δᐃᐃ !== zx.ΔⲆⵠⲆΔ) {
          j = A.x2;
          if (A.Δᐃᐃ !== zx.ΔⲆⵠⲆΔ) {
            j -= 400;
          }
          k = A.x1;
          if (zx.ΔⲆⵠⲆΔ !== A.Δᐃᐃ) {
            k += 400;
          }
          m = A.y2;
          if (zx.ΔⲆⵠⲆΔ !== A.Δᐃᐃ) {
            m -= 300;
          }
          p = A.y1;
          if (zx.ΔⲆⵠⲆΔ !== A.Δᐃᐃ) {
            p += 300;
          }
          if (A.ⲆⵠⲆ & 8 && -Ax.ⲆⲆΔ.x >= j - $o + 120 && -Ax.ⲆⲆΔ.x <= j + 820 && p + 88 - sa <= -Ax.ⲆⲆΔ.y && -Ax.ⲆⲆΔ.y <= m + 50) {
            Rw(j, p + 88, m - 88, Ax.ΔΔⲆΔ[0], zx.ⵠⵠᐃⲆᐃ[A.Δᐃᐃ], A.ⲆⵠⲆ & 8);
          }
          if (A.ⲆⵠⲆ & 4 && -Ax.ⲆⲆΔ.x >= k - $o - 700 && -Ax.ⲆⲆΔ.x <= k - 20 && p + 88 - sa <= -Ax.ⲆⲆΔ.y && -Ax.ⲆⲆΔ.y <= m + 50) {
            Fw(k, p + 88, m - 88, Ax.ΔΔⲆΔ[1], zx.ⵠⵠᐃⲆᐃ[A.Δᐃᐃ], A.ⲆⵠⲆ & 4);
          }
          if (A.ⲆⵠⲆ & 2 && -Ax.ⲆⲆΔ.x >= k - 235 - $o && -Ax.ⲆⲆΔ.x <= j + 350 && m - sa - 275 <= -Ax.ⲆⲆΔ.y && m + 490 >= -Ax.ⲆⲆΔ.y) {
            Iw(m - 230, k - 230, j + 230, Ax.ΔΔⲆΔ[2], zx.ⵠⵠᐃⲆᐃ[A.Δᐃᐃ], A.ⲆⵠⲆ & 2);
          }
          if (A.ⲆⵠⲆ & 1 && -Ax.ⲆⲆΔ.x >= k - 235 - $o && -Ax.ⲆⲆΔ.x <= j + 350 && p - sa - 390 <= -Ax.ⲆⲆΔ.y && p + 315 >= -Ax.ⲆⲆΔ.y) {
            Qw(p + 310, k - 230, j + 230, Ax.ΔΔⲆΔ[3], zx.ⵠⵠᐃⲆᐃ[A.Δᐃᐃ], A.ⲆⵠⲆ & 1);
          }
        }
      }
      for (c = zx.ᐃΔⲆᐃ.length - 1; c >= 0; c--) {
        A = zx.ᐃΔⲆᐃ[c];
        if (zx.ΔⲆⵠⲆΔ !== A.Δᐃᐃ) {
          f = zx.ⵠⵠᐃⲆᐃ[A.Δᐃᐃ];
          if (-Ax.ⲆⲆΔ.x >= A.x1 - 230 - $o && -Ax.ⲆⲆΔ.x <= A.x2 + 330 && -Ax.ⲆⲆΔ.y >= A.y1 - sa && A.y2 + 100 >= -Ax.ⲆⲆΔ.y) {
            j = A.x2;
            if (zx.ΔⲆⵠⲆΔ !== A.Δᐃᐃ) {
              if ((A.ⲆⵠⲆ & 8) === 0) {
                j -= 414;
              } else {
                j -= 610;
              }
            }
            k = A.x1;
            if (zx.ΔⲆⵠⲆΔ !== A.Δᐃᐃ) {
              if (A.ⲆⵠⲆ & 4) {
                k += 610;
              } else {
                k += 414;
              }
            }
            m = A.y2;
            if (A.Δᐃᐃ !== zx.ΔⲆⵠⲆΔ) {
              if (A.ⲆⵠⲆ & 2) {
                m -= 610;
              } else {
                m -= 414;
              }
            }
            p = A.y1;
            if (zx.ΔⲆⵠⲆΔ !== A.Δᐃᐃ) {
              if (A.ⲆⵠⲆ & 1) {
                p += 610;
              } else {
                p += 414;
              }
            }
            if (zx.transition) {
              q = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
              Zo.fillStyle = Hw(f.ΔⲆᐃ[0], f.ΔⲆᐃ[1], f.ΔⲆᐃ[2], f.ⲆΔᐃ[0], f.ⲆΔᐃ[1], f.ⲆΔᐃ[2], q);
            } else {
              Zo.fillStyle = f.ⲆⲆⲆⵠᐃ[zx.time];
            }
            w = Math.max(Ax.ⲆⲆΔ.x + k - 2 - 230, 0);
            x = Math.max(-Ax.ⲆⲆΔ.x + $o - j - 330 - 2, 0);
            y = Math.max(Ax.ⲆⲆΔ.y + p - 2, 0);
            z = Math.max(-Ax.ⲆⲆΔ.y + sa - m - 100 - 2, 0);
            Zo.beginPath();
            Zo.fillRect(w, y, $o - x - w, sa - y - z);
          }
        }
      }
      if (yx.ΔΔⲆᐃⲆ) {
        Pw(sw, Bw, Cw, zw, Aw, 695, "isl", 2);
        Pw(sw, Bw, Cw, zw, Aw, 694, "isl", 2);
      }
      Pw(xw, Bw, Cw, zw, Aw, 692, "isl", 2);
      if (yx.ΔΔⲆᐃⲆ) {
        Pw(yw, Bw, Cw, zw, Aw, 243, "de");
      }
      var B = zx.ⲆΔΔ[0];
      for (c = 0; c < B.length; c++) {
        for (var b = B[c], C = 0; b.ⲆⵠΔΔⵠ.length > C; C++) {
          Gw(b.ⲆⵠΔΔⵠ[C]);
        }
      }
      if ((gv += Hx * 40) > 60) {
        gv -= 60;
      }
      Pw(Bv, Bw, Cw, zw, Aw, 1024, "r", 0);
      for (c = 0; c < zx.ᐃΔⲆᐃ.length; c++) {
        if ((A = zx.ᐃΔⲆᐃ[c]).Δᐃᐃ !== zx.ΔⲆⵠⲆΔ) {
          j = A.x2;
          if (zx.ΔⲆⵠⲆΔ !== A.Δᐃᐃ) {
            j -= 400;
          }
          k = A.x1;
          if (zx.ΔⲆⵠⲆΔ !== A.Δᐃᐃ) {
            k += 400;
          }
          m = A.y2;
          if (A.Δᐃᐃ !== zx.ΔⲆⵠⲆΔ) {
            m -= 300;
          }
          p = A.y1;
          if (A.Δᐃᐃ !== zx.ΔⲆⵠⲆΔ) {
            p += 300;
          }
          if ((A.ⲆⵠⲆ & 8) > 0 && j - $o + 120 <= -Ax.ⲆⲆΔ.x && -Ax.ⲆⲆΔ.x <= j + 820 && -Ax.ⲆⲆΔ.y >= p + 88 - sa && m + 50 >= -Ax.ⲆⲆΔ.y) {
            Nw(j, p + 88, m - 88, Ax.ΔΔⲆΔ[0], zx.ⵠⵠᐃⲆᐃ[A.Δᐃᐃ], A.ⲆⵠⲆ & 8);
          }
          if ((A.ⲆⵠⲆ & 4) > 0 && -Ax.ⲆⲆΔ.x >= k - $o - 700 && k - 20 >= -Ax.ⲆⲆΔ.x && p + 88 - sa <= -Ax.ⲆⲆΔ.y && m + 50 >= -Ax.ⲆⲆΔ.y) {
            nf(k, p + 88, m - 88, Ax.ΔΔⲆΔ[1], zx.ⵠⵠᐃⲆᐃ[A.Δᐃᐃ], A.ⲆⵠⲆ & 4);
          }
          if ((A.ⲆⵠⲆ & 2) > 0 && -Ax.ⲆⲆΔ.x >= k - 235 - $o && j + 350 >= -Ax.ⲆⲆΔ.x && m - sa - 275 <= -Ax.ⲆⲆΔ.y && -Ax.ⲆⲆΔ.y <= m + 490) {
            Ow(m - 230, k - 230, j + 230, Ax.ΔΔⲆΔ[2], zx.ⵠⵠᐃⲆᐃ[A.Δᐃᐃ], A.ⲆⵠⲆ & 2);
          }
          if ((A.ⲆⵠⲆ & 1) > 0 && k - 235 - $o <= -Ax.ⲆⲆΔ.x && j + 350 >= -Ax.ⲆⲆΔ.x && p - sa - 390 <= -Ax.ⲆⲆΔ.y && p + 315 >= -Ax.ⲆⲆΔ.y) {
            rf(p + 310, k - 230, j + 230, Ax.ΔΔⲆΔ[3], zx.ⵠⵠᐃⲆᐃ[A.Δᐃᐃ], A.ⲆⵠⲆ & 1);
          }
        }
      }
    })();
    (function () {
      var w = zw;
      var e = Aw;
      var i = Bw;
      var t = Cw;
      if (yx.ΔΔⲆᐃⲆ) {
        Pw(xw, i, t, w, e, 621, "l", 2);
      }
      if (yx.ΔΔⲆᐃⲆ) {
        Pw(xw, i, t, w, e, Cs.ⵠⵠⵠΔⲆ, "la", 5);
      }
      Pw(xw, i, t, w, e, 203, "la", 5);
      Pw(sw, i, t, w, e, 620, "l", 2);
      if (yx.ΔΔⲆᐃⲆ) {
        Pw(ww, i, t, w, e, 203, "la", 5);
        Pw(sw, i, t, w, e, 619, "l", 2);
      }
      Pw(xw, i, t, w, e, 1052, "ma", 4);
      for (var n = zx.ⲆΔΔ[76], A = 0; n.length > A; A++) {
        n[A].ⲆⵠᐃⵠΔᐃⵠ();
      }
      var aa = zx.ⲆΔΔ[0];
      for (A = 0; aa.length > A; A++) {
        for (var ba = aa[A], ca = 0; ba.ᐃⲆⵠⲆⵠ.length > ca; ca++) {
          Mw(ba.ᐃⲆⵠⲆⵠ[ca]);
        }
      }
      var da = zx.ⲆΔΔ[30];
      for (A = 0; da.length > A; A++) {
        of(da[A], 125);
        da[A].ΔⵠΔᐃΔ(da[A].info);
      }
      var g = zx.ⲆΔΔ[18];
      for (A = 0; g.length > A; A++) {
        if (g[A].action == 2) {
          Lw(g[A]);
        }
      }
      var ea = zx.ⲆΔΔ[1];
      for (A = 0; ea.length > A; A++) {
        Lw(ea[A], 113);
      }
      var fa = zx.ⲆΔΔ[22];
      for (A = 0; A < fa.length; A++) {
        Lw(fa[A]);
      }
      var ha = zx.ⲆΔΔ[23];
      for (A = 0; ha.length > A; A++) {
        Lw(ha[A]);
      }
      var ia = zx.ⲆΔΔ[6];
      for (A = 0; ia.length > A; A++) {
        Lw(ia[A], 118);
      }
      var v = zx.ⲆΔΔ[36];
      for (A = 0; A < v.length; A++) {
        of(v[A]);
      }
      var m = zx.ⲆΔΔ[33];
      for (A = 0; m.length > A; A++) {
        of(m[A], 141);
      }
      var c = zx.ⲆΔΔ[3];
      for (A = 0; A < c.length; A++) {
        Lw(c[A]);
      }
      c = zx.ⲆΔΔ[43];
      A = 0;
      for (; c.length > A; A++) {
        Lw(c[A]);
      }
      c = zx.ⲆΔΔ[3];
      A = 0;
      for (; A < c.length; A++) {
        Ew(c[A]);
      }
      var ja = zx.ⲆΔΔ[44];
      for (A = 0; A < ja.length; A++) {
        if (!(ja[A].info & 15) || ja[A].info === 10) {
          of(ja[A]);
        }
      }
      var ka = zx.ⲆΔΔ[54];
      for (A = 0; ka.length > A; A++) {
        if (!(ka[A].info & 15) || ka[A].info === 10) {
          of(ka[A]);
        }
      }
      var la = zx.ⲆΔΔ[55];
      for (A = 0; A < la.length; A++) {
        if ((la[A].info & 15) === 0 || la[A].info === 10) {
          of(la[A]);
        }
      }
      var ma = zx.ⲆΔΔ[79];
      for (A = 0; ma.length > A; A++) {
        of(ma[A], 132);
      }
      var na = zx.ⲆΔΔ[39];
      for (A = 0; A < na.length; A++) {
        if ((na[A].info & 15) === 0 || na[A].info === 10) {
          of(na[A]);
        }
      }
      var oa = zx.ⲆΔΔ[40];
      for (A = 0; A < oa.length; A++) {
        if (!(oa[A].info & 15) || oa[A].info === 10) {
          of(oa[A]);
        }
      }
      var pa = zx.ⲆΔΔ[37];
      for (A = 0; pa.length > A; A++) {
        if (!(pa[A].info & 15) || pa[A].info === 10) {
          of(pa[A]);
        }
      }
      ma = zx.ⲆΔΔ[31];
      A = 0;
      for (; A < ma.length; A++) {
        of(ma[A]);
      }
      var qa = zx.ⲆΔΔ[86];
      for (A = 0; qa.length > A; A++) {
        of(qa[A], 250, 729);
      }
      var x = zx.ⲆΔΔ[82];
      for (A = 0; x.length > A; A++) {
        of(x[A], 250, 729);
      }
      var J = zx.ⲆΔΔ[87];
      for (A = 0; J.length > A; A++) {
        of(J[A], 854, 859);
      }
      var M = zx.ⲆΔΔ[45];
      for (A = 0; M.length > A; A++) {
        if (M[A].info & 1) {
          of(M[A], 336);
        }
      }
      M = zx.ⲆΔΔ[46];
      A = 0;
      for (; A < M.length; A++) {
        if (M[A].info & 1) {
          of(M[A], 373);
        }
      }
      M = zx.ⲆΔΔ[47];
      A = 0;
      for (; M.length > A; A++) {
        if (M[A].info) {
          of(M[A], 376);
        }
      }
      M = zx.ⲆΔΔ[48];
      A = 0;
      for (; A < M.length; A++) {
        if (M[A].info) {
          of(M[A], 379);
        }
      }
      M = zx.ⲆΔΔ[49];
      A = 0;
      for (; A < M.length; A++) {
        if (M[A].info) {
          of(M[A], 500);
        }
      }
      M = zx.ⲆΔΔ[53];
      A = 0;
      for (; A < M.length; A++) {
        if (M[A].info) {
          of(M[A], 376);
        }
      }
      M = zx.ⲆΔΔ[10];
      A = 0;
      for (; A < M.length; A++) {
        if (M[A].info & 1) {
          of(M[A], 336);
        }
      }
      M = zx.ⲆΔΔ[15];
      A = 0;
      for (; A < M.length; A++) {
        if (M[A].info & 1) {
          of(M[A], 373);
        }
      }
      M = zx.ⲆΔΔ[16];
      A = 0;
      for (; M.length > A; A++) {
        if (M[A].info) {
          of(M[A], 376);
        }
      }
      M = zx.ⲆΔΔ[17];
      A = 0;
      for (; A < M.length; A++) {
        if (M[A].info) {
          of(M[A], 379);
        }
      }
      M = zx.ⲆΔΔ[21];
      A = 0;
      for (; M.length > A; A++) {
        if (M[A].info) {
          of(M[A], 500);
        }
      }
      M = zx.ⲆΔΔ[51];
      A = 0;
      for (; M.length > A; A++) {
        if (M[A].info) {
          of(M[A], 376);
        }
      }
      var ra = zx.ⲆΔΔ[80];
      for (A = 0; A < ra.length; A++) {
        of(ra[A], 264, 322);
      }
      var E = zx.ⲆΔΔ[41];
      for (A = 0; A < E.length; A++) {
        of(E[A], 198);
      }
      n = zx.ⲆΔΔ[76];
      A = 0;
      for (; n.length > A; A++) {
        of(n[A], Cs.ᐃⲆΔⵠⲆᐃⲆ, Cs.ⵠΔΔⲆⵠⵠⲆᐃⲆ);
      }
      var sa = zx.ⲆΔΔ[91];
      for (A = 0; A < sa.length; A++) {
        if (sa[A].ⲆⲆᐃᐃᐃⵠΔ === 0) {
          of(sa[A]);
        }
      }
      aa = zx.ⲆΔΔ[0];
      A = 0;
      for (; A < aa.length; A++) {
        ba = aa[A];
        if (aa[A].ΔⲆᐃᐃⵠ !== 227 && aa[A].ΔⲆᐃᐃⵠ !== 228 && aa[A].ΔⲆᐃᐃⵠ !== 229 && aa[A].ΔⲆᐃᐃⵠ !== 230 && aa[A].ΔⲆᐃᐃⵠ !== 91) {
          if (ba.ⵠⲆⵠⵠⵠⲆⵠ === 0) {
            if (ba.ᐃΔⲆⵠΔᐃⲆ > 0.001) {
              ba.ᐃΔⲆⵠΔᐃⲆ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(ba.ᐃΔⲆⵠΔᐃⲆ, 0, 0.018);
              var ta = 1 + Math.min(1, Math.max(ba.ᐃΔⲆⵠΔᐃⲆ, 0) / 100) * 0.18;
              Zo.save();
              Zo.scale(ta, ta);
              Ax.ⲆⲆΔ.x /= ta;
              Ax.ⲆⲆΔ.y /= ta;
              ba.x /= ta;
              ba.y /= ta;
              ba.r.x /= ta;
              ba.r.y /= ta;
              ba.ⵠⵠᐃΔΔΔⵠ();
              ba.ⵠᐃᐃⲆ();
              Ax.ⲆⲆΔ.x *= ta;
              Ax.ⲆⲆΔ.y *= ta;
              ba.x *= ta;
              ba.y *= ta;
              ba.r.x *= ta;
              ba.r.y *= ta;
              Zo.restore();
            } else {
              ba.ⲆⲆᐃᐃᐃⵠΔ = 0;
              ba.ⵠⵠᐃΔΔΔⵠ();
              ba.ⵠᐃᐃⲆ();
            }
          }
        } else if (ba.ⲆⲆⲆΔᐃ <= 180) {
          Zo.save();
          ta = 1 + Math.min(1, Math.max(ba.ⲆᐃⵠⵠΔ - 30, 0) / 180) * 0.35;
          Zo.scale(ta, ta);
          Ax.ⲆⲆΔ.x /= ta;
          Ax.ⲆⲆΔ.y /= ta;
          ba.x /= ta;
          ba.y /= ta;
          ba.r.x /= ta;
          ba.r.y /= ta;
          ba.ⲆⲆᐃᐃᐃⵠΔ = 0;
          ba.ⵠⵠᐃΔΔΔⵠ();
          ba.ⵠᐃᐃⲆ();
          Ax.ⲆⲆΔ.x *= ta;
          Ax.ⲆⲆΔ.y *= ta;
          ba.x *= ta;
          ba.y *= ta;
          ba.r.x *= ta;
          ba.r.y *= ta;
          Zo.restore();
        }
      }
      E = zx.ⲆΔΔ[41];
      A = 0;
      for (; A < E.length; A++) {
        of(E[A], 913);
      }
      var ua = zx.ⲆΔΔ[67];
      for (A = 0; ua.length > A; A++) {
        of(ua[A]);
      }
      var Q = zx.ⲆΔΔ[62];
      for (A = 0; A < Q.length; A++) {
        of(Q[A], 419, 461);
      }
      var _ = zx.ⲆΔΔ[70];
      for (A = 0; A < _.length; A++) {
        of(_[A]);
      }
      var F = zx.ⲆΔΔ[60];
      for (A = 0; A < F.length; A++) {
        of(F[A], 299, 326);
      }
      var R = zx.ⲆΔΔ[72];
      for (A = 0; R.length > A; A++) {
        of(R[A], 232, 1077);
      }
      var j = zx.ⲆΔΔ[73];
      for (A = 0; A < j.length; A++) {
        of(j[A], 233, 1092);
      }
      ja = zx.ⲆΔΔ[44];
      A = 0;
      for (; A < ja.length; A++) {
        if ((ja[A].info & 15) !== 0 && ja[A].info !== 10) {
          of(ja[A]);
        }
      }
      ka = zx.ⲆΔΔ[54];
      A = 0;
      for (; A < ka.length; A++) {
        if (ka[A].info & 15 && ka[A].info !== 10) {
          of(ka[A]);
        }
      }
      la = zx.ⲆΔΔ[89];
      A = 0;
      for (; la.length > A; A++) {
        of(la[A], 239);
      }
      la = zx.ⲆΔΔ[55];
      A = 0;
      for (; la.length > A; A++) {
        if (la[A].info & 15 && la[A].info !== 10) {
          of(la[A]);
        }
      }
      c = zx.ⲆΔΔ[43];
      A = 0;
      for (; c.length > A; A++) {
        Ew(c[A]);
      }
      na = zx.ⲆΔΔ[39];
      A = 0;
      for (; na.length > A; A++) {
        if ((na[A].info & 15) !== 0 && na[A].info !== 10) {
          of(na[A]);
        }
      }
      oa = zx.ⲆΔΔ[40];
      A = 0;
      for (; oa.length > A; A++) {
        if ((oa[A].info & 15) !== 0 && oa[A].info !== 10) {
          of(oa[A]);
        }
      }
      pa = zx.ⲆΔΔ[37];
      A = 0;
      for (; A < pa.length; A++) {
        if ((pa[A].info & 15) !== 0 && pa[A].info !== 10) {
          of(pa[A]);
        }
      }
      var L = zx.ⲆΔΔ[81];
      for (A = 0; A < L.length; A++) {
        of(L[A], 691, 697);
      }
      var W = zx.ⲆΔΔ[66];
      for (A = 0; W.length > A; A++) {
        of(W[A], 637, 687);
      }
      var G = zx.ⲆΔΔ[65];
      for (A = 0; G.length > A; A++) {
        of(G[A], 673, 688);
      }
      var N = zx.ⲆΔΔ[61];
      for (A = 0; N.length > A; A++) {
        of(N[A], 260, 333);
      }
      var q = zx.ⲆΔΔ[88];
      for (A = 0; q.length > A; A++) {
        of(q[A], 1033, 1034);
      }
      var O = zx.ⲆΔΔ[63];
      for (A = 0; A < O.length; A++) {
        of(O[A], 445, 462);
      }
      var H = zx.ⲆΔΔ[77];
      for (A = 0; A < H.length; A++) {
        of(H[A]);
      }
      var U = zx.ⲆΔΔ[68];
      for (A = 0; U.length > A; A++) {
        of(U[A], 918, 919);
      }
      var Y = zx.ⲆΔΔ[71];
      for (A = 0; Y.length > A; A++) {
        of(Y[A]);
      }
      var K = zx.ⲆΔΔ[78];
      for (A = 0; A < K.length; A++) {
        of(K[A], 1218, 1219);
      }
      var V = zx.ⲆΔΔ[64];
      for (A = 0; A < V.length; A++) {
        if (V[A].scale === 1) {
          of(V[A], 449, 463);
        }
      }
      V = zx.ⲆΔΔ[69];
      A = 0;
      for (; A < V.length; A++) {
        if (V[A].scale === 1) {
          of(V[A], 450, 464);
        }
      }
      var va = zx.ⲆΔΔ[11];
      for (A = 0; va.length > A; A++) {
        of(va[A]);
      }
      var Z = zx.ⲆΔΔ[2];
      for (A = 0; Z.length > A; A++) {
        of(Z[A], 114);
      }
      g = zx.ⲆΔΔ[18];
      A = 0;
      for (; g.length > A; A++) {
        of(g[A]);
      }
      var wa = zx.ⲆΔΔ[34];
      for (A = 0; wa.length > A; A++) {
        of(wa[A]);
      }
      M = zx.ⲆΔΔ[10];
      A = 0;
      for (; M.length > A; A++) {
        if (!(M[A].info & 1)) {
          of(M[A], 166);
        }
        M[A].ΔⵠΔᐃΔ(M[A].info >> 1);
      }
      M = zx.ⲆΔΔ[15];
      A = 0;
      for (; A < M.length; A++) {
        if (!(M[A].info & 1)) {
          of(M[A], 171);
        }
        M[A].ΔⵠΔᐃΔ(M[A].info >> 1);
      }
      M = zx.ⲆΔΔ[16];
      A = 0;
      for (; M.length > A; A++) {
        if (!(M[A].info & 1)) {
          of(M[A], 172);
        }
        M[A].ΔⵠΔᐃΔ(M[A].info >> 1);
      }
      M = zx.ⲆΔΔ[17];
      A = 0;
      for (; M.length > A; A++) {
        if (!(M[A].info & 1)) {
          of(M[A], 173);
        }
        M[A].ΔⵠΔᐃΔ(M[A].info >> 1);
      }
      M = zx.ⲆΔΔ[21];
      A = 0;
      for (; A < M.length; A++) {
        if (!(M[A].info & 1)) {
          of(M[A], 124);
        }
        M[A].ΔⵠΔᐃΔ(M[A].info >> 1);
      }
      M = zx.ⲆΔΔ[51];
      A = 0;
      for (; M.length > A; A++) {
        if (!(M[A].info & 1)) {
          of(M[A], 218);
        }
        M[A].ΔⵠΔᐃΔ(M[A].info >> 1);
      }
      M = zx.ⲆΔΔ[45];
      A = 0;
      for (; M.length > A; A++) {
        if (!(M[A].info & 1)) {
          of(M[A], 212);
        }
        M[A].ΔⵠΔᐃΔ(M[A].info >> 1);
      }
      M = zx.ⲆΔΔ[46];
      A = 0;
      for (; M.length > A; A++) {
        if (!(M[A].info & 1)) {
          of(M[A], 213);
        }
        M[A].ΔⵠΔᐃΔ(M[A].info >> 1);
      }
      M = zx.ⲆΔΔ[47];
      A = 0;
      for (; M.length > A; A++) {
        if (!(M[A].info & 1)) {
          of(M[A], 214);
        }
        M[A].ΔⵠΔᐃΔ(M[A].info >> 1);
      }
      M = zx.ⲆΔΔ[48];
      A = 0;
      for (; M.length > A; A++) {
        if (!(M[A].info & 1)) {
          of(M[A], 215);
        }
        M[A].ΔⵠΔᐃΔ(M[A].info >> 1);
      }
      M = zx.ⲆΔΔ[49];
      A = 0;
      for (; A < M.length; A++) {
        if (!(M[A].info & 1)) {
          of(M[A], 216);
        }
        M[A].ΔⵠΔᐃΔ(M[A].info >> 1);
      }
      M = zx.ⲆΔΔ[53];
      A = 0;
      for (; A < M.length; A++) {
        if (!(M[A].info & 1)) {
          of(M[A], 220);
        }
        M[A].ΔⵠΔᐃΔ(M[A].info >> 1);
      }
      var xa = zx.ⲆΔΔ[4];
      for (A = 0; xa.length > A; A++) {
        of(xa[A], 162);
        xa[A].ΔⵠΔᐃΔ(xa[A].info);
      }
      xa = zx.ⲆΔΔ[7];
      A = 0;
      for (; A < xa.length; A++) {
        of(xa[A], 163);
        xa[A].ΔⵠΔᐃΔ(xa[A].info);
      }
      xa = zx.ⲆΔΔ[8];
      A = 0;
      for (; A < xa.length; A++) {
        of(xa[A], 164);
        xa[A].ΔⵠΔᐃΔ(xa[A].info);
      }
      xa = zx.ⲆΔΔ[9];
      A = 0;
      for (; xa.length > A; A++) {
        of(xa[A], 165);
        xa[A].ΔⵠΔᐃΔ(xa[A].info);
      }
      xa = zx.ⲆΔΔ[19];
      A = 0;
      for (; xa.length > A; A++) {
        of(xa[A], 122);
        xa[A].ΔⵠΔᐃΔ(xa[A].info);
      }
      xa = zx.ⲆΔΔ[50];
      A = 0;
      for (; A < xa.length; A++) {
        of(xa[A], 217);
        xa[A].ΔⵠΔᐃΔ(xa[A].info);
      }
      var ya = zx.ⲆΔΔ[5];
      for (A = 0; A < ya.length; A++) {
        of(ya[A], 160);
        ya[A].ΔⵠΔᐃΔ(ya[A].info);
      }
      ya = zx.ⲆΔΔ[12];
      A = 0;
      for (; ya.length > A; A++) {
        of(ya[A], 168);
        ya[A].ΔⵠΔᐃΔ(ya[A].info);
      }
      ya = zx.ⲆΔΔ[13];
      A = 0;
      for (; A < ya.length; A++) {
        of(ya[A], 169);
        ya[A].ΔⵠΔᐃΔ(ya[A].info);
      }
      ya = zx.ⲆΔΔ[14];
      A = 0;
      for (; A < ya.length; A++) {
        of(ya[A], 170);
        ya[A].ΔⵠΔᐃΔ(ya[A].info);
      }
      ya = zx.ⲆΔΔ[20];
      A = 0;
      for (; ya.length > A; A++) {
        of(ya[A], 123);
        ya[A].ΔⵠΔᐃΔ(ya[A].info);
      }
      ya = zx.ⲆΔΔ[52];
      A = 0;
      for (; A < ya.length; A++) {
        of(ya[A], 219);
        ya[A].ΔⵠΔᐃΔ(ya[A].info);
      }
      var za = zx.ⲆΔΔ[35];
      for (A = 0; A < za.length; A++) {
        var Aa = za[A];
        if (Aa.info > 0) {
          of(Aa, 788);
        } else {
          of(Aa, 182);
        }
      }
      var Ba = zx.ⲆΔΔ[29];
      for (A = 0; A < Ba.length; A++) {
        of(Ba[A], 159);
      }
      Pw(xw, i, t, w, e, 111, "g", 2);
      Pw(xw, i, t, w, e, 415, "gw", 2);
      Pw(xw, i, t, w, e, 112, "d", 2);
      Pw(xw, i, t, w, e, 416, "dw", 2);
      Pw(xw, i, t, w, e, 110, "p", 0);
      Pw(xw, i, t, w, e, 241, "m", 2);
      Pw(xw, i, t, w, e, 121, "a", 2);
      Pw(xw, i, t, w, e, 202, "re", 2);
      Pw(xw, i, t, w, e, 679, "cs", 3, 3);
      Pw(xw, i, t, w, e, 679, "cs", 2, 2);
      Pw(xw, i, t, w, e, 679, "cs", 1, 1);
      Pw(xw, i, t, w, e, 679, "cs", 0, 0);
      Pw(xw, i, t, w, e, 676, "cs", 3, 3);
      Pw(xw, i, t, w, e, 676, "cs", 2, 2);
      Pw(xw, i, t, w, e, 676, "cs", 1, 1);
      Pw(xw, i, t, w, e, 676, "cs", 0, 0);
      var Ca = zx.ⲆΔΔ[100];
      for (A = 0; Ca.length > A; A++) {
        for (ca = 0; ca < Ca[A].info; ca++) {
          of(Ca[A].ⲆⵠΔⲆ[ca], 294);
        }
      }
      Pw(xw, i, t, w, e, 108, "s", 2);
      var Da = zx.ⲆΔΔ[24];
      for (A = 0; A < Da.length; A++) {
        of(Da[A]);
      }
      Da = zx.ⲆΔΔ[25];
      A = 0;
      for (; Da.length > A; A++) {
        of(Da[A]);
      }
      Da = zx.ⲆΔΔ[26];
      A = 0;
      for (; A < Da.length; A++) {
        of(Da[A]);
      }
      Da = zx.ⲆΔΔ[27];
      A = 0;
      for (; Da.length > A; A++) {
        of(Da[A]);
      }
      Da = zx.ⲆΔΔ[28];
      A = 0;
      for (; Da.length > A; A++) {
        of(Da[A]);
      }
      var Ea = zx.ⲆΔΔ[32];
      for (A = 0; A < Ea.length; A++) {
        Lw(Ea[A]);
      }
      ea = zx.ⲆΔΔ[1];
      A = 0;
      for (; ea.length > A; A++) {
        Ew(ea[A]);
      }
      ea = zx.ⲆΔΔ[6];
      A = 0;
      for (; A < ea.length; A++) {
        Ew(ea[A]);
      }
      g = zx.ⲆΔΔ[18];
      A = 0;
      for (; A < g.length; A++) {
        if (g[A].action == 2) {
          Ew(g[A]);
        }
      }
      wa = zx.ⲆΔΔ[34];
      A = 0;
      for (; wa.length > A; A++) {
        Ew(wa[A]);
      }
      fa = zx.ⲆΔΔ[22];
      A = 0;
      for (; A < fa.length; A++) {
        Ew(fa[A]);
      }
      ha = zx.ⲆΔΔ[23];
      A = 0;
      for (; A < ha.length; A++) {
        Ew(ha[A]);
        ha[A].ΔⵠΔᐃΔ(ha[A].info);
      }
      Pw(xw, i, t, w, e, 989, "c", 0);
      Pw(xw, i, t, w, e, 109, "t", 5, 4);
      Pw(xw, i, t, w, e, 413, "f", 2, 2);
      Pw(xw, i, t, w, e, 693, "plm", 0, 0);
      Pw(xw, i, t, w, e, 307, "b", 3, 2);
      Pw(xw, i, t, w, e, 109, "t", 3, 2);
      Pw(xw, i, t, w, e, 307, "b", 1, 0);
      Pw(xw, i, t, w, e, 413, "f", 1, 1);
      Pw(xw, i, t, w, e, 693, "plm", 1, 1);
      Pw(xw, i, t, w, e, 109, "t", 1, 0);
      Pw(xw, i, t, w, e, 413, "f", 0, 0);
      Pw(xw, i, t, w, e, 693, "plm", 2, 2);
      Ea = zx.ⲆΔΔ[32];
      A = 0;
      for (; A < Ea.length; A++) {
        Ew(Ea[A]);
      }
      var Fa = zx.ⲆΔΔ[56];
      for (A = 0; A < Fa.length; A++) {
        of(Fa[A], 221);
      }
      aa = zx.ⲆΔΔ[0];
      A = 0;
      for (; A < aa.length; A++) {
        if ((ba = aa[A]).ⵠⲆⵠⵠⵠⲆⵠ === 1 && (ba.ⲆⲆⲆΔᐃ < 180 || ba.ΔⲆᐃᐃⵠ !== 227 && ba.ΔⲆᐃᐃⵠ !== 228 && ba.ΔⲆᐃᐃⵠ !== 91 && ba.ΔⲆᐃᐃⵠ !== 229 && ba.ΔⲆᐃᐃⵠ !== 230)) {
          ba.ᐃΔⲆⵠΔᐃⲆ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(ba.ᐃΔⲆⵠΔᐃⲆ, 100, 0.018);
          ta = 1 + Math.min(1, Math.max(ba.ᐃΔⲆⵠΔᐃⲆ, 0) / 100) * 0.18;
          Zo.save();
          Zo.scale(ta, ta);
          Ax.ⲆⲆΔ.x /= ta;
          Ax.ⲆⲆΔ.y /= ta;
          ba.x /= ta;
          ba.y /= ta;
          ba.r.x /= ta;
          ba.r.y /= ta;
          ba.ⵠⵠᐃΔΔΔⵠ();
          ba.ⵠᐃᐃⲆ();
          Ax.ⲆⲆΔ.x *= ta;
          Ax.ⲆⲆΔ.y *= ta;
          ba.x *= ta;
          ba.y *= ta;
          ba.r.x *= ta;
          ba.r.y *= ta;
          Zo.restore();
        }
      }
      var Ga = zx.ⲆΔΔ[38];
      for (A = 0; Ga.length > A; A++) {
        of(Ga[A], 190);
        Ga[A].ΔⵠΔᐃΔ(Ga[A].info);
      }
      var Ha = zx.ⲆΔΔ[90];
      for (A = 0; Ha.length > A; A++) {
        of(Ha[A], 245, 246);
      }
      var Ia = zx.ⲆΔΔ[42];
      for (A = 0; Ia.length > A; A++) {
        of(Ia[A], 201);
      }
      aa = zx.ⲆΔΔ[0];
      A = 0;
      for (; A < aa.length; A++) {
        if (((ba = aa[A]).ΔⲆᐃᐃⵠ === 227 || ba.ΔⲆᐃᐃⵠ === 228 || ba.ΔⲆᐃᐃⵠ === 91 || ba.ΔⲆᐃᐃⵠ === 229 || ba.ΔⲆᐃᐃⵠ === 230) && ba.ⲆⲆⲆΔᐃ > 180) {
          ba.ⲆⲆᐃᐃᐃⵠΔ = 1;
          Zo.save();
          ta = 1 + Math.min(1, Math.max(ba.ⲆᐃⵠⵠΔ - 30, 0) / 180) * 0.35;
          Zo.scale(ta, ta);
          Ax.ⲆⲆΔ.x /= ta;
          Ax.ⲆⲆΔ.y /= ta;
          ba.x /= ta;
          ba.y /= ta;
          ba.r.x /= ta;
          ba.r.y /= ta;
          ba.ⵠⵠᐃΔΔΔⵠ();
          ba.ⵠᐃᐃⲆ();
          Ax.ⲆⲆΔ.x *= ta;
          Ax.ⲆⲆΔ.y *= ta;
          ba.x *= ta;
          ba.y *= ta;
          ba.r.x *= ta;
          ba.r.y *= ta;
          Zo.restore();
        }
      }
      sa = zx.ⲆΔΔ[91];
      A = 0;
      for (; sa.length > A; A++) {
        if (sa[A].ⲆⲆᐃᐃᐃⵠΔ === 1) {
          of(sa[A]);
        }
      }
      V = zx.ⲆΔΔ[64];
      A = 0;
      for (; A < V.length; A++) {
        if (V[A].scale > 1) {
          of(V[A], 449, 463);
        }
      }
      V = zx.ⲆΔΔ[69];
      A = 0;
      for (; V.length > A; A++) {
        if (V[A].scale > 1) {
          of(V[A], 450, 464);
        }
      }
      var Ja = zx.ⲆΔΔ[74];
      for (A = 0; Ja.length > A; A++) {
        of(Ja[A], 235, 1107);
      }
      var Ka = zx.ⲆΔΔ[75];
      for (A = 0; Ka.length > A; A++) {
        of(Ka[A], 238, 1128);
      }
      if ((rw += Hx * 15) > 60) {
        rw -= 60;
      }
      Pw(tw, i, t, w, e, 1041, "fo", 2);
      Pw(tw, i, t, w, e, 244, "fod", 2);
    })();
    if (yx.ΔΔⲆᐃⲆ && zx.mode !== 2 && zx.mode !== 4 && zx.mode !== 5) {
      (function () {
        var a = Ax.ᐃⲆΔΔⲆ;
        if (a.ᐃᐃᐃⵠΔ === 0) {
          a.ᐃΔᐃⵠΔ = Math.max(0, a.ᐃΔᐃⵠΔ - Hx / 10);
        } else {
          a.ᐃΔᐃⵠΔ = Math.min(1, a.ᐃΔᐃⵠΔ + Hx / 10);
        }
        for (var b = a.ⲆⵠΔⲆⵠ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ⲆᐃⲆ(d);
          Dw(471, d.id, Ax.ⲆⲆΔ.x + d.x, Ax.ⲆⲆΔ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).ᐃΔᐃᐃⵠ <= 0 || d.x > -Ax.ⲆⲆΔ.x + $o || d.x < -Ax.ⲆⲆΔ.x - Ax.ⲆⲆΔ.w / 2 || -Ax.ⲆⲆΔ.y + sa < d.y) {
            b.splice(c, 1);
          }
        }
        var e = -Ax.ⲆⲆΔ.y;
        if (zx.ⲆᐃⲆⲆⲆ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = Ax.ΔⵠⲆⲆⵠ;
        if (a.ᐃᐃᐃⵠΔ === 0) {
          a.ᐃΔᐃⵠΔ = Math.max(0, a.ᐃΔᐃⵠΔ - Hx / 10);
        } else {
          a.ᐃΔᐃⵠΔ = Math.min(1, a.ᐃΔᐃⵠΔ + Hx / 10);
        }
        for (var b = a.ⲆⵠΔⲆⵠ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ⲆᐃⲆ(d);
          Dw(470, d.id, Ax.ⲆⲆΔ.x + d.x, Ax.ⲆⲆΔ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          if ((d = b[c]).ᐃΔᐃᐃⵠ <= 0 || -Ax.ⲆⲆΔ.x + $o < d.x || d.x < -Ax.ⲆⲆΔ.x || -Ax.ⲆⲆΔ.y + sa < d.y) {
            b.splice(c, 1);
          }
        }
        var e = -Ax.ⲆⲆΔ.y;
        if (zx.ΔΔⵠⲆⵠ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = Ax.ΔᐃⲆᐃⲆⵠΔ;
        for (var b = a.ⲆⵠΔⲆⵠ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ⲆᐃⲆ(d);
          Dw(942, d.id, Ax.ⲆⲆΔ.x + d.x, Ax.ⲆⲆΔ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          if ((d = b[c]).ᐃΔᐃᐃⵠ <= 0 || d.x > -Ax.ⲆⲆΔ.x + $o || -Ax.ⲆⲆΔ.x > d.x || d.y > -Ax.ⲆⲆΔ.y + sa) {
            b.splice(c, 1);
          }
        }
        var e = -Ax.ⲆⲆΔ.y;
        if (zx.ⲆⲆⵠᐃⲆ > -1000) {
          a.add(e);
        }
      })();
    }
    if (zx.transition && a) {
      zx.transition = Jo;
      zx.ᐃᐃⵠⵠ.ⲆⵠⲆ = 0;
      zx.ᐃᐃⵠⵠ.Ⲇⵠⵠ = false;
    }
  }
  function tf(b, c, d, e, f, g) {
    const a = (b | 27127) & ~(b & 27127);
    const i = (24 << (c >> 16 & 255)) + (16 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (0 << (c & 255));
    const j = is(a, i, (24 << (d & 255)) + (8 << (d >> 24 & 255)) + (0 << (d >> 16 & 255)) + (16 << (d >> 8 & 255)), e ^ 9296, (1013904223 + (f + 3450) * 1664525) % 4294967296, (2531011 + (60134 + g) * 214013) % 4294967296);
    Mb(a, i);
    return ~(j & 25831) & j | ~(j & 25831) & 25831;
  }
  function nf(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = Ax.ⲆⲆΔ.x + j - 700;
    var g = Math.max(Ax.ⲆⲆΔ.y + e, 0);
    var l = Math.max(-Ax.ⲆⲆΔ.y + sa - i - 100, 0);
    var t = g;
    var b = sa - g - l;
    if (o) {
      var d = q.Δᐃᐃ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var E = u;
    var c = t;
    var p = d.x + 0;
    var C = b;
    var F = u += d.x + 0 - 2;
    if (o) {
      d = q.Δᐃᐃ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - u + d.x;
    var G = u;
    var y = t;
    var w = f;
    var H = b;
    var k = (u += f - 2) - 2;
    if (o) {
      d = q.Δᐃᐃ(s);
    } else {
      d = s.r;
    }
    if (u + (f = h + 350 - u + d.x) - 3 > k) {
      var A = B;
      var K = u;
      var J = t;
      var L = f;
      var M = b;
      var D = u += f - 2;
    } else {
      A = ks;
      u = k;
      D = -1;
    }
    f = h + 700 - u;
    if (zx.transition) {
      var N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
      Zo.fillStyle = Hw(9, 55, 63, 11, 106, 132, N);
    } else {
      Zo.fillStyle = Cs.ᐃⲆΔⵠᐃ[zx.time];
    }
    Zo.fillRect(E, c, p, C);
    if (o) {
      if (zx.transition) {
        N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
        Zo.fillStyle = Hw(15, 70, 76, 42, 139, 155, N);
      } else {
        Zo.fillStyle = Cs.ⵠΔΔΔΔⲆⵠ[zx.time];
      }
    } else if (zx.transition) {
      N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
      Zo.fillStyle = Hw(9, 55, 63, 11, 106, 132, N);
    } else {
      Zo.fillStyle = Cs.ᐃⲆΔⵠᐃ[zx.time];
    }
    Zo.fillRect(G, y, w, H);
    if (A) {
      if (o) {
        if (zx.transition) {
          N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
          Zo.fillStyle = Hw(17, 94, 96, 169, 214, 211, N);
        } else {
          Zo.fillStyle = Cs.ᐃᐃΔⵠΔΔᐃ[zx.time];
        }
      } else if (zx.transition) {
        N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
        Zo.fillStyle = Hw(9, 55, 63, 11, 106, 132, N);
      } else {
        Zo.fillStyle = Cs.ᐃⲆΔⵠᐃ[zx.time];
      }
      Zo.fillRect(K, J, L, M);
    }
    if (yx.ΔΔⲆᐃⲆ && o) {
      q.ⲆΔⵠⵠΔⵠⲆΔⵠ(k, D, F, h, -Ax.ⲆⲆΔ.y + c, -Ax.ⲆⲆΔ.y + c + C);
    }
  }
  function of(a, b, c) {
    if (zx.transition) {
      Zo.globalAlpha = 1;
      a.ⵠᐃᐃⲆ(b, c);
      zx.time = zx.time ? 0 : 1;
      Zo.globalAlpha = 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
      a.ⵠᐃᐃⲆ(b, c);
      zx.time = zx.time ? 0 : 1;
      Zo.globalAlpha = 1;
    } else {
      a.ⵠᐃᐃⲆ(b, c);
    }
  }
  function af(a, b, c, d) {
    if (zx.transition) {
      Zo.globalAlpha = 1;
      Qp(Zo, ᐃΔ[a][zx.time], c, d);
      zx.time = zx.time ? 0 : 1;
      Zo.globalAlpha = 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
      Qp(Zo, ᐃΔ[a][zx.time], c, d);
      zx.time = zx.time ? 0 : 1;
      Zo.globalAlpha = 1;
    } else {
      Qp(Zo, b, c, d);
    }
  }
  function rf(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = Ax.ⲆⲆΔ.y + j - 700;
    var g = Math.max(Ax.ⲆⲆΔ.x + e, 0);
    var l = Math.max(-Ax.ⲆⲆΔ.x + $o - i - 100, 0);
    var t = g;
    var b = $o - g - l;
    if (o) {
      var d = q.Δᐃᐃ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = t;
    var c = u;
    var p = d.x + 0;
    var C = b;
    var G = u += d.x + 0 - 2;
    if (o) {
      d = q.Δᐃᐃ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - u + d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f - 2) - 2;
    if (o) {
      d = q.Δᐃᐃ(s);
    } else {
      d = s.r;
    }
    if (k < u + (f = h + 350 - u + d.x) - 3) {
      var A = true;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var E = u += f - 2;
    } else {
      A = Ak;
      u = k;
      E = -1;
    }
    f = h + 700 - u;
    if (zx.transition) {
      var N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
      Zo.fillStyle = Hw(9, 55, 63, 11, 106, 132, N);
    } else {
      Zo.fillStyle = Cs.ᐃⲆΔⵠᐃ[zx.time];
    }
    Zo.fillRect(F, c, C, p);
    if (o) {
      if (zx.transition) {
        N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
        Zo.fillStyle = Hw(15, 70, 76, 42, 139, 155, N);
      } else {
        Zo.fillStyle = Cs.ⵠΔΔΔΔⲆⵠ[zx.time];
      }
    } else if (zx.transition) {
      N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
      Zo.fillStyle = Hw(9, 55, 63, 11, 106, 132, N);
    } else {
      Zo.fillStyle = Cs.ᐃⲆΔⵠᐃ[zx.time];
    }
    Zo.fillRect(y, H, K, w);
    if (A) {
      if (o) {
        if (zx.transition) {
          N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
          Zo.fillStyle = Hw(17, 94, 96, 169, 214, 211, N);
        } else {
          Zo.fillStyle = Cs.ᐃᐃΔⵠΔΔᐃ[zx.time];
        }
      } else if (zx.transition) {
        N = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
        Zo.fillStyle = Hw(9, 55, 63, 11, 106, 132, N);
      } else {
        Zo.fillStyle = Cs.ᐃⲆΔⵠᐃ[zx.time];
      }
      Zo.fillRect(J, L, B, M);
    }
    if (yx.ΔΔⲆᐃⲆ && o) {
      q.ⲆᐃᐃⵠΔΔΔᐃᐃ(k, E, G, h, -Ax.ⲆⲆΔ.x + F, -Ax.ⲆⲆΔ.x + F + C);
    }
  }
  var sf = 0;
  if (ij.ⲆⵠⲆⲆΔⲆᐃⲆᐃ) {
    var hf = ij.Math.acos;
    ij.Math.acos = ij.Math.asin;
    ij.Math.asin = hf;
    var gf = ij.Math.acos;
    ij.Math.acos = ij.Math.asin;
    ij.Math.asin = gf;
  }
  var lf = 1;
  var uf = 2;
  var bf = 0;
  var df = 1;
  var vf = 2;
  function mf(a, b, c, d, e) {
    Vj(oh, a, b, c, d, e);
    return ((225 + (mo(sh[0], sh[1], sh[2], sh[3], sh[4], sh[0]) ^ th(sh[1], sh[2]))) * 48271 + 0) % 2147483647;
  }
  function cf(b, c, d, e, f) {
    var g = {
      x: d,
      y: e,
      ⲆΔΔⵠⲆ: d,
      ⲆⵠΔⵠΔ: e
    };
    return {
      translate: g,
      ⵠᐃᐃⲆ: function (a) {
        Qp(a, b, g.x, g.y, b.width / 2, b.height / 2);
      },
      active: c,
      position: f
    };
  }
  function pf(c, e, f, i, j, k, n, p, q, r, t) {
    if (Ur === q) {
      q = 0;
    }
    if (p === undefined) {
      p = 0;
    }
    if (ph === r) {
      r = 0;
    }
    if (t === undefined) {
      t = 1;
    }
    if (k !== 1) {
      k = 0;
    }
    if (i) {
      var w = i;
    }
    var u;
    var x = {
      width: c,
      height: e,
      ᐃᐃ: w,
      state: bf,
      translate: {
        x: p,
        y: q,
        ⲆΔΔⵠⲆ: p,
        ⲆⵠΔⵠΔ: q
      },
      ΔⵠΔΔΔᐃⵠⵠΔ: k,
      ⵠΔΔⲆ: 0,
      callback: n,
      position: r,
      active: t
    };
    function d() {
      return x.ᐃᐃ[x.state];
    }
    function v(a) {
      var b = x.translate;
      if (x.width === 0 || x.height === 0) {
        x.width = x.ᐃᐃ[0].width;
        x.height = x.ᐃᐃ[0].height;
      }
      return a.x > b.x && a.x < b.x + x.width / j && a.y > b.y && a.y < b.y + x.height / j;
    }
    k = function () {
      var a = 0;
      if (x.ΔⵠΔΔΔᐃⵠⵠΔ === 1) {
        if (x.state === df || vf === x.state) {
          x.ⵠΔΔⲆ = (0 + Hx * 1000) % 1000;
        } else if (0 > 0) {
          x.ⵠΔΔⲆ = 500 < 0 ? 0 + Hx * 1000 : 0 - Hx * 1000;
          if (0 < 0 || 0 > 1000) {
            x.ⵠΔΔⲆ = 0;
          }
        }
        a = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(500 < 0 ? 2 : 0) * 0.2;
      }
      return a;
    };
    if ((j = j === 3 ? 3 : j === 1 ? 2 : 1) === 2) {
      u = function (a) {
        var b = 1 + k();
        var c = d();
        var e = x.width * b / 2;
        var f = b * x.height / 2;
        var g = (e - x.width / 2) / 2;
        var h = (f - x.height / 2) / 2;
        Qp(a, c, x.translate.x - g, x.translate.y - h, e, f);
      };
    } else if (j === 3) {
      u = function (b) {
        var c = d();
        var e = x.width;
        var f = x.height;
        var g = (e - x.width) / 2;
        var h = (f - x.height) / 2;
        Qp(b, c, x.translate.x - g, x.translate.y - h, e, f);
      };
      j = 1;
    } else {
      u = function (a) {
        Qp(a, d(), x.translate.x, x.translate.y);
      };
    }
    return {
      info: x,
      ΔⵠΔΔ: function (a, b, c) {
        if (v(b)) {
          if (c == lf) {
            x.state = vf;
          } else if (c == uf || sf == c && vf != x.state) {
            x.state = df;
          }
          return true;
        } else {
          x.state = bf;
          return hl;
        }
      },
      ⵠᐃᐃⲆ: u,
      ΔΔⲆΔΔⲆⲆ: v
    };
  }
  function Cf(a, b) {
    var c = a.getBoundingClientRect();
    return {
      x: b.clientX - c.left,
      y: b.clientY - c.top
    };
  }
  function Tf(f, j, i, k, n, p, a, q, t, w, g, l, u, b, x) {
    if (f.length === 0) {
      f = " ";
    }
    if (xj === a) {
      a = 0;
    }
    if (Va === q) {
      q = 0;
    }
    if (t === undefined) {
      t = 0;
    }
    if (Jh === b) {
      b = 0;
    }
    var v = document.createElement("canvas");
    var m = v.getContext("2d");
    m.textBaseline = "middle";
    m.font = (xk !== x ? x + " " : "") + k + "px " + j;
    n = n !== undefined ? Math.min(m.measureText(f).width, n) : m.measureText(f).width;
    v.width = n + a;
    v.height = k + q;
    if (p !== undefined) {
      if (g !== ao) {
        m.globalAlpha = g;
      }
      m.fillStyle = p;
      if (Va !== l) {
        ⵠⲆⲆⲆⵠΔΔⲆⲆ(m, t + 2, t, n + a - t * 2 - 4, k + q - t * 2, l);
        m.fill();
      } else {
        m.fillRect(t, t, n + a - t * 2, k + q - t * 2);
      }
      m.globalAlpha = 1;
      if (t !== 0) {
        m.lineWidth = t;
        m.strokeStyle = w;
        m.stroke();
      }
    }
    m.textBaseline = "middle";
    m.font = (Rg !== x ? x + " " : "") + k + "px " + j;
    if (u !== undefined) {
      m.strokeStyle = u;
      m.lineWidth = b;
      m.lineJoin = "miter";
      m.miterLimit = 2;
      m.strokeText(f, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(k / 2), n);
    }
    m.fillStyle = i;
    m.fillText(f, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(k / 2), n);
    v.w2 = v.width / 2;
    v.ⲆⲆⲆΔΔ = v.height / 2;
    return v;
  }
  var ff = "send";
  var zf = ΔⵠΔⵠ.ΔⲆΔΔⲆⲆⵠ("id") === "1" ? 1 : 0;
  var yf = ΔⵠΔⵠ.ΔⲆΔΔⲆⲆⵠ("password");
  var wf = ΔⵠΔⵠ.ΔⲆΔΔⲆⲆⵠ("debug") || Il;
  if (wf !== Fk) {
    wf = JSON.parse(ij.decodeURIComponent(wf));
  }
  var Tw = ΔⵠΔⵠ.ΔⲆΔΔⲆⲆⵠ("server") || undefined;
  var kf = ΔⵠΔⵠ.ΔⲆΔΔⲆⲆⵠ("region") || undefined;
  var Af = "starve.io";
  var xf = "https://" + Af;
  var Jf = {
    ⵠᐃᐃᐃᐃⲆΔ: 128,
    ⲆⲆᐃⵠᐃΔᐃ: 16,
    ᐃⲆⵠΔⲆᐃᐃ: 256,
    ᐃᐃⵠΔⵠΔⲆ: 32,
    ⵠᐃᐃᐃΔΔΔ: 8,
    IDLE: 64,
    ᐃⲆⵠΔⲆΔΔⲆⵠ: 1,
    ⲆΔᐃΔ: 2,
    ⵠⲆᐃΔⵠ: 4
  };
  var Mf = [{
    ⵠⵠᐃⵠⵠ: 1000,
    items: [[2, 113], [1, 117], [8, 110], [1, 143]]
  }, {
    ⵠⵠᐃⵠⵠ: 2000,
    items: [[2, 118], [1, 8], [2, 117], [16, 110], [2, 143]]
  }, {
    ⵠⵠᐃⵠⵠ: 4000,
    items: [[3, 118], [1, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
  }, {
    ⵠⵠᐃⵠⵠ: 8000,
    items: [[1, 29], [4, 118], [1, 3], [6, 117], [30, 110], [6, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
  }, {
    ⵠⵠᐃⵠⵠ: 16000,
    items: [[1, 29], [1, 4], [1, 198], [7, 136], [2, 127], [2, 118], [1, 119], [15, 163], [2, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
  }, {
    ⵠⵠᐃⵠⵠ: 16000,
    items: [[1, 29], [1, 11], [1, 50], [1, 3], [10, 136], [4, 127], [6, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
  }, {
    ⵠⵠᐃⵠⵠ: 16000,
    items: [[1, 29], [1, 83], [1, 36], [3, 195], [1, 0], [1, 3], [7, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
  }, {
    ⵠⵠᐃⵠⵠ: 16000,
    items: [[1, 29], [1, 84], [1, 3], [7, 136], [2, 127], [4, 118], [2, 135], [4, 144], [10, 141], [6, 132], [4, 115], [1, 49], [500, 109]]
  }, {
    ⵠⵠᐃⵠⵠ: 16000,
    items: [[1, 29], [1, 3], [16, 138], [1, 127], [6, 118], [3, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
  }, {
    ⵠⵠᐃⵠⵠ: 20000,
    items: [[1, 29], [1, 3], [1, 136], [1, 127], [3, 118], [3, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
  }];
  let Bf = 0;
  const Uw = [];
  var Df = {
    ⵠⲆᐃⵠᐃⵠⲆᐃΔ: 125000,
    ⵠⵠⲆⵠⵠΔΔᐃⲆ: 14,
    ΔⵠᐃΔᐃⲆⲆⲆⵠ: "[21]",
    ⵠΔΔΔⵠΔΔΔᐃ: 8000,
    ⵠⲆⲆᐃᐃⵠⵠΔᐃ: 14,
    ᐃᐃⵠⲆᐃΔⲆᐃⲆ: 200,
    ⲆⲆᐃⵠᐃΔᐃ: 0.2,
    ⲆⲆΔᐃΔⵠᐃⵠⵠ: 5,
    ⵠᐃⲆᐃⵠⵠⲆ: 4,
    ⲆᐃⲆΔΔΔⵠ: 600000,
    ⲆⲆΔᐃⵠΔᐃⲆⵠ: 5,
    ᐃⲆᐃⵠⵠΔᐃ: 2,
    ᐃⵠΔᐃᐃⵠΔΔᐃ: 0.58,
    ⵠᐃⵠⵠᐃⵠⵠⲆⵠ: 50,
    ᐃⵠΔⵠⵠΔΔⵠⵠ: 2000,
    ⵠⵠⲆⵠΔⲆΔ: 0.2,
    ⲆΔᐃⲆΔⲆⵠⲆΔ: 60000,
    ΔⲆΔᐃΔⲆΔ: 52,
    ⲆⵠΔⵠⲆᐃᐃΔⵠ: 3,
    Ⲇᐃⵠᐃⵠᐃᐃ: 0,
    ΔⵠΔⵠΔⲆⵠⲆⵠ: 20,
    ΔⲆΔⲆⲆᐃΔ: 1,
    ⲆᐃΔΔΔΔᐃ: 4,
    ᐃΔΔᐃⲆⲆΔΔΔ: 5,
    ⲆᐃⵠⵠΔⵠⵠ: 3
  };
  var If = {
    ⵠΔⵠ: 480000,
    ⵠⵠⲆⵠⵠΔᐃ: 10,
    ᐃⵠⲆⵠⵠΔᐃ: 16,
    ⲆⲆⵠⲆΔΔΔⵠⲆ: 6,
    ⵠᐃΔⵠΔⲆⵠ: 60,
    ΔᐃΔⲆⵠ: 1,
    ⵠΔᐃⵠΔ: 2,
    ΔΔⲆΔⲆ: 4,
    ⵠΔⵠⵠΔ: 8,
    ⵠⵠⲆⵠΔⲆΔ: 10,
    ᐃᐃΔᐃⵠⵠΔ: 100,
    ΔⲆΔⵠᐃⲆⵠ: 100,
    ⵠΔΔⵠⲆⲆᐃ: 100,
    ᐃⵠⵠⲆⲆΔⵠᐃᐃ: 100,
    ⵠᐃΔᐃΔⵠᐃ: 100,
    ⵠᐃΔⲆⲆᐃΔ: 100,
    ᐃⲆⵠᐃⵠᐃⲆᐃᐃ: 100,
    ⵠᐃΔⲆⲆᐃΔ: 100,
    ΔᐃⵠⲆⲆᐃⵠ: 100,
    ᐃⵠⵠⵠᐃᐃᐃ: 100,
    ᐃΔⵠᐃᐃ: 0,
    ᐃΔΔⲆⲆᐃᐃ: 1,
    ᐃΔⲆⲆᐃ: 2,
    ᐃᐃΔⲆΔ: 3,
    ⲆⵠⲆᐃⵠ: 4,
    ⵠᐃΔⵠΔᐃⵠ: 5,
    ⲆⵠᐃΔᐃ: 6,
    Δᐃⵠᐃᐃ: 7,
    ⵠⲆᐃᐃⵠΔⲆⵠⵠ: {
      sydney: "Sydney",
      losangeles: "Los Angeles",
      atlanta: "Atlanta",
      frankfurt: "Frankfurt",
      osaka: "Osaka"
    },
    ⵠᐃᐃΔⲆΔᐃ: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      6: "community",
      7: "experimental"
    },
    ᐃⵠⵠᐃⵠᐃᐃ: 0,
    ᐃⲆᐃᐃⵠⲆⵠ: 0,
    ⵠΔⲆΔⵠⲆⲆ: 30,
    ⲆᐃᐃⵠᐃⵠⲆⲆΔ: 2,
    ⵠᐃΔⵠΔⲆⵠ: 60000,
    ΔΔΔⲆⲆⲆΔᐃⲆ: 0,
    ⵠᐃⵠΔⲆⲆⵠⵠΔ: 0,
    ⵠᐃⵠⵠⵠᐃᐃΔⲆ: 50,
    ⵠᐃⲆⵠⵠᐃΔⲆΔ: 0,
    ⲆⵠΔᐃⵠⵠᐃⲆΔ: 40,
    ΔⲆⵠⵠⲆΔⵠⲆΔ: 39,
    ⲆᐃΔᐃᐃᐃᐃⵠⵠ: 830,
    ⲆⲆΔᐃΔᐃΔ: 25,
    ⵠΔΔᐃⵠΔᐃ: 8,
    ΔⲆΔⲆⵠ: 0,
    ⲆⵠᐃᐃⲆ: 0,
    ⵠᐃᐃᐃⲆΔⵠ: 200,
    ⵠⵠⲆⲆᐃⵠᐃ: 0,
    ΔⲆⲆᐃⵠ: 250,
    ⵠⵠΔᐃⲆⲆⲆ: 150,
    ᐃᐃⵠΔᐃⲆⲆ: 0,
    ΔᐃⲆᐃⲆ: 350,
    ⲆⵠΔΔⵠᐃⲆ: 100,
    ⲆΔΔⲆⵠⵠⲆ: 700,
    ⵠᐃΔΔᐃ: 39879
  };
  var Sf = [];
  for (Fb = 0; Fb < 500; Fb++) {
    Sf[Fb] = 0;
  }
  Sf[47] = 1;
  Sf[57] = 1;
  Sf[0] = 1;
  Sf[5] = 1;
  Sf[6] = 1;
  Sf[30] = 1;
  Sf[19] = 1;
  Sf[9] = 1;
  Sf[62] = 1;
  Sf[63] = 1;
  Sf[13] = 1;
  Sf[14] = 1;
  Sf[15] = 1;
  Sf[33] = 1;
  Sf[34] = 1;
  Sf[16] = 1;
  Sf[17] = 1;
  Sf[12] = 1;
  Sf[18] = 1;
  var Qf = [{
    time: 2880000
  }, {
    time: 1440000
  }, {
    time: 1920000
  }, {
    time: 1440000
  }, {
    time: 2880000
  }, {
    time: 2400000
  }, {
    time: 2400000
  }, {
    time: 4800000
  }, {
    time: 2880000
  }, {
    time: 3360000
  }, {
    time: 2880000
  }, {
    time: 3840000
  }, {
    time: 3360000
  }];
  var _f = {
    ΔᐃΔⲆⲆ: 36,
    ᐃⲆΔⲆΔ: 37,
    ΔⲆⵠⲆᐃ: 66,
    ᐃΔⲆⵠⲆ: 10,
    ΔᐃⵠΔᐃ: 68,
    ⵠΔΔΔⲆ: 78,
    ⲆᐃⲆΔⲆ: 82,
    ΔⵠᐃⲆⲆ: 30,
    ⵠⵠᐃᐃΔ: 49,
    ᐃⲆⵠΔΔ: 6,
    ᐃⲆⲆⲆΔ: 18,
    ⵠⵠᐃⵠΔ: 69,
    ⲆⲆᐃᐃΔ: 56,
    ⵠⵠᐃΔΔ: 27,
    ᐃᐃᐃᐃᐃ: 8,
    ᐃᐃⵠⵠΔ: 86,
    ᐃⵠᐃⲆⵠΔⲆ: 83,
    ΔⵠⲆΔᐃ: 74,
    ΔⲆⵠΔⲆ: 25,
    ⲆΔᐃΔᐃⲆᐃ: 89,
    Δⵠᐃⵠⵠ: 16,
    ᐃᐃⲆΔⲆ: 29,
    ᐃᐃⲆᐃⵠ: 100,
    ΔⲆⲆⵠᐃ: 67,
    ⵠᐃⵠΔⵠ: 63,
    ΔⲆΔᐃⵠ: 9,
    ΔᐃΔᐃΔ: 35,
    ᐃⵠᐃⲆΔᐃⵠ: 85,
    ⲆⵠⵠΔⵠ: 62,
    ⲆⵠⲆⵠᐃ: 72,
    ᐃΔΔᐃⵠ: 75,
    ⵠⲆⲆΔⲆ: 28,
    ⲆᐃᐃⲆⵠ: 39,
    ⵠⵠΔⲆΔ: 47,
    ⲆΔᐃΔΔ: 81,
    ΔᐃⲆⵠᐃ: 31,
    ⲆᐃᐃΔᐃ: 42,
    ΔᐃΔⵠⵠ: 7,
    ⵠⲆᐃⵠΔ: 0,
    ⵠⲆⲆᐃⵠ: 15,
    ⵠⲆᐃⵠⲆ: 54,
    ΔⵠΔᐃⲆ: 65,
    ΔᐃᐃⲆⲆ: 55,
    ᐃᐃⲆᐃΔ: 23,
    ⵠⲆⲆⵠᐃ: 71,
    ⵠΔΔᐃⲆ: 79,
    ΔᐃΔⵠᐃ: 34,
    ⵠⲆΔⲆⵠ: 51,
    ΔΔⲆⲆᐃ: 43,
    ⲆΔᐃΔᐃ: 45,
    ⲆⵠᐃⲆⲆ: 41,
    ᐃⵠⵠⲆᐃ: 2,
    ⵠΔᐃΔΔ: 24,
    ᐃⲆΔⵠⲆᐃⲆ: 76,
    ⵠΔΔⵠΔ: 14,
    ⲆⵠⲆᐃᐃ: 22,
    ⵠᐃΔΔᐃ: 3,
    ΔΔⲆΔⵠ: 61,
    ⵠᐃⲆⲆᐃ: 64,
    ⲆⲆΔⵠⲆ: 1,
    ᐃⵠⵠᐃΔ: 21,
    ⵠΔᐃⵠᐃ: 80,
    ⲆⲆⲆⲆⵠ: 17,
    ⵠⵠⵠᐃΔ: 13,
    ⲆⲆⲆⵠⲆ: 20,
    ᐃⵠⲆΔⵠ: 12,
    ⲆΔΔⵠΔ: 46,
    ⲆᐃⵠΔⲆ: 40,
    ᐃⵠᐃⲆΔ: 11,
    ⵠⲆⲆΔᐃ: 88,
    ᐃⲆⵠⲆⲆ: 50,
    ᐃΔⲆΔⲆ: 70,
    ⲆᐃΔⵠᐃ: 38,
    ⲆᐃⵠⲆᐃ: 60,
    ΔΔⵠⵠΔ: 52,
    ᐃⲆⲆΔⲆ: 19,
    ⲆᐃⲆⲆΔ: 73,
    ᐃⲆⵠⵠⲆⵠᐃ: 84,
    ᐃⲆΔᐃⵠ: 90,
    ⲆΔΔᐃⲆ: 77,
    ΔⵠⵠⲆΔ: 4,
    ΔⵠᐃΔΔ: 33,
    ᐃⵠΔᐃⲆ: 32,
    ⲆⵠΔⵠⵠ: 53,
    ⵠΔᐃⵠⵠ: 44,
    ⵠΔΔᐃΔ: 87,
    ᐃΔⲆᐃΔ: 26,
    ΔⲆΔΔΔ: 91,
    ⲆᐃⵠΔΔ: 48,
    ⲆⲆᐃⵠΔ: 5
  };
  var Ff = [[24, 108], [25, 111], [26, 112], [27, 121], [28, 202]];
  function Rf() {
    this.ⲆⲆΔⵠⵠ = "";
    this.ⲆΔⵠⵠ = 0;
    this.ⵠⵠΔΔⵠ = 0;
    this.ⲆⲆⲆᐃⵠ = 0;
    this.ⵠⵠⵠΔⲆⵠⲆ = 0;
    this.ⵠΔⲆΔᐃ = 0;
    this.ⵠⲆΔΔⲆ = 0;
    this.ΔⵠᐃⲆΔ = 0;
    this.level = 0;
    this.label = null;
    this.ᐃⲆⵠⵠΔⲆΔ = null;
    this.ΔⵠⵠⵠⲆᐃⲆ = null;
    this.ⲆⲆΔᐃⵠ = Oq;
    this.ᐃⲆⲆⲆⲆ = 0;
  }
  function jf(a, b, c, d) {
    this.id = a;
    this.ⲆⲆⲆΔᐃ = (a + 5) * 8;
    this.ᐃΔᐃᐃⵠ = $o / 1366;
    this.x = b;
    this.y = c;
    this.c = Math.sin(d);
    this.ⵠᐃᐃⵠ = Math.cos(d);
    this.alpha = 0;
  }
  function Lf(f) {
    function e(b, c, d, e, f) {
      for (var a = 0; a < f && j(b, c, d, e, 8) !== 1; a++);
      if (a === f) {
        return 0;
      } else {
        return 1;
      }
    }
    function i(b, c, d) {
      var e = c;
      for (var f = d; zx.ᐃⵠᐃᐃᐃ > f; f++) {
        for (var g = c; zx.ΔᐃᐃⵠΔ > g && (d === f && (e = Math.max(g, e)), e >= g) && b[f][g] !== 1; g++) {
          b[f][g] = 1;
        }
        if (e > g) {
          break;
        }
      }
      zx.ᐃΔⲆᐃ.push(new zx.ᐃⵠⲆΔⲆⵠⲆ(zx.ΔⲆⵠⲆΔ, c, d, e - c + 1, f - d, 15));
    }
    function j(c, d, e, f, i) {
      var j = d + Math.floor(zx.ⵠⲆΔᐃⲆ.get() * f);
      var a = e + Math.floor(f * zx.ⵠⲆΔᐃⲆ.get());
      var k = 10 + Math.floor(zx.ⵠⲆΔᐃⲆ.get() * (zx.ΔᐃᐃⵠΔ - j - 20));
      var m = 10 + Math.floor(zx.ⵠⲆΔᐃⲆ.get() * (zx.ᐃⵠᐃᐃᐃ - a - 20));
      var h = k + j;
      var g = m + a;
      for (var l = 0; l < zx.ᐃΔⲆᐃ.length; l++) {
        var n = zx.ᐃΔⲆᐃ[l];
        if (ΔⵠΔⵠ.ΔΔⲆⵠᐃᐃⵠ(k, h, m, g, n.x1 / 100 - i, n.x2 / 100 + i, n.y1 / 100 - i, n.y2 / 100 + i) === 1) {
          return 0;
        }
      }
      zx.ᐃΔⲆᐃ.push(new zx.ᐃⵠⲆΔⲆⵠⲆ(c, k, m, j, a, 15));
      return 1;
    }
    function k(c, e) {
      var f = zx.ᐃΔⲆᐃ[c];
      var i = Math.floor(f.y1 / 100);
      var j = Math.floor(f.x1 / 100);
      var k = Math.floor(f.ⲆΔⲆ / 100);
      var n = j + (z = Math.floor(f.w / 100));
      var o = 2;
      var q = k;
      var r = i;
      for (var s = j + 10 + Math.floor((z - 20) * zx.ⵠⲆΔᐃⲆ.get()), t = s - 4; s + 4 > t; t++) {
        m(i - 1, t, "wtb", 0, 1);
      }
      while (q > 0) {
        if (o !== 2) {
          if (q < 10) {
            for (A = 1; q > 0; A++) {
              a(r, s, 1, 1, 0, e, A, 1);
              q -= 1;
              r += 1;
            }
          } else if (o !== 1) {
            o = 1;
            var w = Math.floor(1 + zx.ⵠⲆΔᐃⲆ.get() * 2);
            var x = 1 + Math.floor(zx.ⵠⲆΔᐃⲆ.get() * 4);
            if (j + 16 > s) {
              a(r, s, w, 0, 1, e, x, x);
              s += w;
            } else if (s > n - 16) {
              a(r, s, w, 0, -1, e, x, x);
              s -= w;
            } else if (zx.ⵠⲆΔᐃⲆ.get() > 0.5) {
              a(r, s, w, 0, 1, e, x, x);
              s += w;
            } else {
              a(r, s, w, 0, -1, e, x, x);
              s -= w;
            }
          } else {
            var y = Math.min(q, Math.floor(1 + zx.ⵠⲆΔᐃⲆ.get() * 4));
            var z = 1 + Math.floor(zx.ⵠⲆΔᐃⲆ.get() * 4);
            a(r, s, y, 1, 0, e, z, z);
            o = 0;
            q -= y;
            r += y;
          }
        } else {
          for (var A = 10; A > 1; A--) {
            a(r, s, 1, 1, 0, e, A, 1);
            q -= 1;
            r += 1;
          }
          o = 0;
        }
      }
      for (t = s - 1; t < s + 2; t++) {
        m(r, t, "wtb", 0, 1);
      }
    }
    function q(a, b) {
      for (var c = 0; c < b.length; c++) {
        s(b[c][0], b[c][1], a, b[c][2]);
      }
    }
    function a(c, f, j, k, n, o, a, p) {
      var q = Math.floor(a / 2);
      var h = Math.max(1, Math.floor(a / 2));
      var g = Math.floor(p / 2);
      var l = Math.max(1, Math.floor(p / 2));
      for (var r = 0; r < j; r++) {
        for (var s = c - g; c + l > s; s++) {
          for (var t = f - q; f + h > t; t++) {
            if (m(s, t, "wtb", 0, 1) === 1) {
              o.push([s, t, 1]);
            }
          }
        }
        c += k;
        f += n;
      }
    }
    function o(a) {
      var b = zx.ᐃΔⲆᐃ[a];
      m(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      m(3 + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      m(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
      m(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
    }
    function n(a, b) {
      for (var c = 0; c < 3; c++) {
        g(a, "s", c, Math.floor(b * 18));
      }
      for (c = 0; c < 3; c++) {
        g(a, "f", c, Math.floor(b * 24));
      }
      for (c = 0; c < 3; c++) {
        g(a, "d", c, Math.max(1, Math.floor(b * 2)), 0.3);
      }
      for (c = 0; c < 3; c++) {
        g(a, "g", c, Math.floor(b * 6));
      }
      o(a);
    }
    function h(a, b) {
      return a >= 0 && b >= 0 && a < zx.ᐃⵠᐃᐃᐃ && b < zx.ΔᐃᐃⵠΔ;
    }
    function g(c, e, f, i, j) {
      var k = zx.ᐃΔⲆᐃ[c];
      var a = Math.floor(k.x1 / 100);
      var n = Math.floor(k.y1 / 100);
      var p = Math.floor(k.w / 100);
      var q = Math.floor(k.ⲆΔⲆ / 100);
      if (ao !== j) {
        j = 1 - j;
        a += Math.floor(p * j / 2);
        n += Math.floor(q * j / 2);
        p -= Math.floor(j * p);
        q -= Math.floor(j * q);
      }
      var t = ux.ΔᐃⲆΔ;
      for (var l = 0, w = 0; l < i && w <= 50000; w++) {
        var x = n + Math.floor(q * zx.ⵠⲆΔᐃⲆ.get());
        var y = a + Math.floor(zx.ⵠⲆΔᐃⲆ.get() * p);
        if (zx.ⵠⵠⵠⵠⲆ(c, y * 100 + 50, x * 100 + 50) >= 400 && ((z = t[x][y + 1]) === Va || z[e] === undefined || z[e][f] === ao) && ((z = t[x][y - 1]) === $k || z[e] === $k || z[e][f] === undefined) && ((z = t[x + 1][y]) === zo || z[e] === undefined || z[e][f] === undefined) && ((z = t[x - 1][y]) === _o || z[e] === undefined || z[e][f] === ph) && ((z = t[x + 1][y - 1]) === undefined || z[e] === Il || z[e][f] === zo) && ((z = t[x - 1][y + 1]) === undefined || Ts === z[e] || z[e][f] === undefined)) {
          var z = t[x + 1][y + 1];
          if (Ts === z || Us === z[e] || _o === z[e][f]) {
            if ((z = t[x - 1][y - 1]) === undefined || z[e] === undefined || z[e][f] === undefined) {
              if (t[x][y] === xk) {
                m(x, y, e, f, 1);
                l++;
              }
            }
          }
        }
      }
    }
    function l(a, b) {
      for (var c = 0; c < 3; c++) {
        g(a, "s", c, Math.floor(b * 12));
      }
      for (c = 0; c < 3; c++) {
        g(a, "m", c, Math.max(1, Math.floor(b * 1)), 0.2);
      }
      g(a, "c", 0, Math.floor(b * 36));
      var d = [];
      (function (b, c) {
        var d = zx.ᐃΔⲆᐃ[b];
        var e = Math.floor(d.y1 / 100);
        var f = Math.floor(d.x1 / 100);
        var i = Math.floor(d.ⲆΔⲆ / 100);
        var a = Math.floor(d.w / 100);
        var j = e + Math.floor(i / 2);
        var k = f + Math.floor(a / 2);
        for (var h = 0; h < 3; h++) {
          m(n = Math.floor(j - 3 + zx.ⵠⲆΔᐃⲆ.get() * 6), o = Math.floor(k - 3 + zx.ⵠⲆΔᐃⲆ.get() * 6), "plm", h, 1);
        }
        for (h = 0; h < 80; h++) {
          var n = Math.floor(j - 3 + zx.ⵠⲆΔᐃⲆ.get() * 6);
          var o = Math.floor(k - 3 + zx.ⵠⲆΔᐃⲆ.get() * 6);
          if (m(n, o, "wtb", 0, 1) === 1) {
            c.push([n, o, 0]);
          }
        }
      })(a, d);
      q(a, d);
      d = [];
    }
    function r(a, b) {
      (function (b, c) {
        var d = zx.ᐃΔⲆᐃ[c];
        for (var e = 0, f = 0; b > f && e < 10000; e++) {
          var i = d.y1 + zx.ⵠⲆΔᐃⲆ.get() * d.ⲆΔⲆ;
          var j = d.x1 + d.w * zx.ⵠⲆΔᐃⲆ.get();
          var k = Math.floor(i / 100);
          var p = Math.floor(j / 100);
          if (zx.ⵠⵠⵠⵠⲆ(c, p * 100 + 50, k * 100 + 50) >= 600) {
            for (var q = 1, t = k - 4; q === 1 && t <= k + 4; t++) {
              for (var v = p - 4; q === 1 && v <= p + 4; v++) {
                if (ux.ΔᐃⲆΔ[t][v] !== undefined) {
                  q = 0;
                }
              }
            }
            if (q !== 0) {
              m(k, p, "la", f % 6, 0);
              f++;
            }
          }
        }
      })(b * 80, a);
      for (var c = 0; c < 3; c++) {
        g(a, "s", c, Math.floor(b * 12));
      }
      for (c = 0; c < 3; c++) {
        g(a, "g", c, Math.floor(b * 6));
      }
      for (c = 0; c < 3; c++) {
        g(a, "re", c, Math.max(1, Math.floor(b * 1)), 0.2);
      }
      for (c = 0; c < 3; c++) {
        g(a, "a", c, Math.max(1, Math.floor(b * 2)));
      }
      o(a);
    }
    function b(a, b) {
      for (var c = 0; c < 6; c++) {
        g(a, "t", c, Math.floor(b * 20));
      }
      for (c = 0; c < 4; c++) {
        g(a, "b", c, Math.floor(b * 20));
      }
      for (c = 0; c < 3; c++) {
        g(a, "s", c, Math.floor(b * 20));
      }
      var d = [];
      k(a, d);
      q(a, d);
      d = [];
      g(a, "p", 0, Math.floor(b * 24));
      for (c = 0; c < 3; c++) {
        g(a, "g", c, Math.floor(b * 5));
      }
      if (zx.mode === 2) {
        for (c = 0; c < 3; c++) {
          g(a, "d", c, Math.floor(b * 3));
        }
        for (c = 0; c < 3; c++) {
          g(a, "a", c, Math.floor(b * 2));
        }
      }
      o(a);
    }
    function d(a, b) {
      for (var c = 0; c < 6; c++) {
        g(a, "t", c, Math.floor(b * 80));
      }
      for (c = 0; c < 4; c++) {
        g(a, "b", c, Math.floor(b * 80));
      }
      for (c = 0; c < 3; c++) {
        g(a, "s", c, Math.floor(b * 50));
      }
      var d = [];
      for (c = 0; c < 6; c++) {
        k(a, d);
      }
      q(a, d);
      d = [];
      g(a, "p", 0, Math.floor(b * 28));
      for (c = 0; c < 3; c++) {
        g(a, "g", c, Math.floor(b * 7));
      }
      for (c = 0; c < 3; c++) {
        g(a, "d", c, Math.floor(b * 2));
      }
      for (c = 0; c < 3; c++) {
        g(a, "a", c, Math.floor(b * 1));
      }
      for (c = 0; c < 3; c++) {
        g(a, "m", c, Math.floor(b * 1));
      }
      g(a, "a", 0, Math.floor(b * 1));
      o(a);
    }
    function s(a, b, c, d) {
      if (h(a, b) && (ΔᐃⲆΔ = ux.ΔᐃⲆΔ, ΔᐃⲆΔ[a][b] === undefined && (ΔᐃⲆΔ[a][b] = {}), ΔᐃⲆΔ[a][b].r === undefined)) {
        var e = 0;
        if (h(a - 1, b) && ΔᐃⲆΔ[a - 1][b] !== Va && ΔᐃⲆΔ[a - 1][b].wtb !== undefined) {
          e += 2;
        }
        if (h(a, b - 1) && ΔᐃⲆΔ[a][b - 1] !== undefined && xj !== ΔᐃⲆΔ[a][b - 1].wtb) {
          e += 8;
        }
        if (h(a, b + 1) && lr !== ΔᐃⲆΔ[a][b + 1] && ΔᐃⲆΔ[a][b + 1].wtb !== undefined) {
          e += 16;
        }
        if (h(a + 1, b) && ΔᐃⲆΔ[a + 1][b] !== undefined && ΔᐃⲆΔ[a + 1][b].wtb !== undefined) {
          e += 64;
        }
        if (h(a - 1, b - 1) && (e & 10) === 10 && ΔᐃⲆΔ[a - 1][b - 1] !== Fk && ΔᐃⲆΔ[a - 1][b - 1].wtb !== zo) {
          e += 1;
        }
        if (h(a - 1, b + 1) && (e & 18) == 18 && cq !== ΔᐃⲆΔ[a - 1][b + 1] && ΔᐃⲆΔ[a - 1][b + 1].wtb !== $k) {
          e += 4;
        }
        if (h(a + 1, b - 1) && (e & 72) === 72 && ΔᐃⲆΔ[a + 1][b - 1] !== qg && ΔᐃⲆΔ[a + 1][b - 1].wtb !== $k) {
          e += 32;
        }
        if (h(a + 1, b + 1) && (e & 80) == 80 && ΔᐃⲆΔ[a + 1][b + 1] !== undefined && ΔᐃⲆΔ[a + 1][b + 1].wtb !== undefined) {
          e += 128;
        }
        ΔᐃⲆΔ[a][b].r = {};
        ΔᐃⲆΔ[a][b].r.ᐃᐃⵠⵠⵠⵠᐃ = e;
        ΔᐃⲆΔ[a][b].r.ᐃᐃᐃⵠΔⵠⵠ = d;
        ΔᐃⲆΔ[a][b].r.ΔⲆⲆᐃ = zx.ⵠⵠⵠⵠⲆ(c, b * 100 + 50, a * 100 + 50) - 400;
        ΔᐃⲆΔ[a][b].r.x = b * 100 + 50;
        ΔᐃⲆΔ[a][b].r.y = a * 100 + 50;
      }
    }
    function m(a, b, c, d, e) {
      if (a >= 0 && b >= 0 && a < zx.ᐃⵠᐃᐃᐃ && b < zx.ΔᐃᐃⵠΔ) {
        ΔᐃⲆΔ = ux.ΔᐃⲆΔ;
        if (ao === ΔᐃⲆΔ[a][b]) {
          ΔᐃⲆΔ[a][b] = {};
        }
        if (ΔᐃⲆΔ[a][b][c] !== Rg) {
          return 0;
        } else {
          ΔᐃⲆΔ[a][b][c] = [];
          ΔᐃⲆΔ[a][b][c][d] = [{
            x: b * 100 + 50,
            y: a * 100 + 50
          }];
          if (e === 1) {
            (function (a, b, c, d) {
              td.push([a, b, c, d]);
            })(c, d, a, b);
          }
          return 1;
        }
      }
    }
    function c(a) {
      for (var b = 0; b < 3; b++) {
        g(a, "s", b, 15);
      }
      for (b = 0; b < 3; b++) {
        g(a, "a", b, 1);
      }
      for (b = 0; b < 3; b++) {
        g(a, "d", b, 1);
      }
      o(a);
    }
    function p(a, b, c) {
      if (a[b]) {
        for (tn = 0; a[b].length > tn; tn++) {
          if (a[b][tn]) {
            for (ᐃᐃⲆᐃ = 0; a[b][tn].length > ᐃᐃⲆᐃ; ᐃᐃⲆᐃ++) {
              a[b][tn][ᐃᐃⲆᐃ].ⵠⵠᐃ = c;
              a[b][tn][ᐃᐃⲆᐃ].ⲆᐃⲆ = false;
              a[b][tn][ᐃᐃⲆᐃ].time = 0;
              a[b][tn][ᐃᐃⲆᐃ].angle = 0;
            }
          }
        }
      }
    }
    this.mode = 0;
    this.ⲆⵠᐃΔᐃΔⵠ = f;
    this.ⵠᐃⵠΔΔ = 0;
    this.ΔᐃⲆⲆᐃⵠⵠ = 6;
    this.ⵠΔᐃΔ = [];
    this.ⲆΔΔ = [];
    this.ⲆΔΔ[0] = [];
    this.ⲆΔΔ[100] = [];
    this.ⲆΔΔ[80] = [];
    this.ⲆΔΔ[60] = [];
    this.ⲆΔΔ[67] = [];
    this.ⲆΔΔ[70] = [];
    this.ⲆΔΔ[77] = [];
    this.ⲆΔΔ[71] = [];
    this.ⲆΔΔ[72] = [];
    this.ⲆΔΔ[73] = [];
    this.ⲆΔΔ[74] = [];
    this.ⲆΔΔ[65] = [];
    this.ⲆΔΔ[66] = [];
    this.ⲆΔΔ[62] = [];
    this.ⲆΔΔ[88] = [];
    this.ⲆΔΔ[91] = [];
    this.ⲆΔΔ[90] = [];
    this.ⲆΔΔ[63] = [];
    this.ⲆΔΔ[78] = [];
    this.ⲆΔΔ[64] = [];
    this.ⲆΔΔ[69] = [];
    this.ⲆΔΔ[68] = [];
    this.ⲆΔΔ[79] = [];
    this.ⲆΔΔ[89] = [];
    this.ⲆΔΔ[83] = [];
    this.ⲆΔΔ[84] = [];
    this.ⲆΔΔ[85] = [];
    this.ⲆΔΔ[81] = [];
    this.ⲆΔΔ[82] = [];
    this.ⲆΔΔ[86] = [];
    this.ⲆΔΔ[34] = [];
    this.ⲆΔΔ[36] = [];
    this.ⲆΔΔ[61] = [];
    this.ⲆΔΔ[2] = [];
    this.ⲆΔΔ[1] = [];
    this.ⲆΔΔ[6] = [];
    this.ⲆΔΔ[3] = [];
    this.ⲆΔΔ[5] = [];
    this.ⲆΔΔ[12] = [];
    this.ⲆΔΔ[13] = [];
    this.ⲆΔΔ[14] = [];
    this.ⲆΔΔ[20] = [];
    this.ⲆΔΔ[52] = [];
    this.ⲆΔΔ[4] = [];
    this.ⲆΔΔ[7] = [];
    this.ⲆΔΔ[8] = [];
    this.ⲆΔΔ[9] = [];
    this.ⲆΔΔ[19] = [];
    this.ⲆΔΔ[50] = [];
    this.ⲆΔΔ[41] = [];
    this.ⲆΔΔ[10] = [];
    this.ⲆΔΔ[15] = [];
    this.ⲆΔΔ[16] = [];
    this.ⲆΔΔ[17] = [];
    this.ⲆΔΔ[21] = [];
    this.ⲆΔΔ[51] = [];
    this.ⲆΔΔ[45] = [];
    this.ⲆΔΔ[46] = [];
    this.ⲆΔΔ[47] = [];
    this.ⲆΔΔ[48] = [];
    this.ⲆΔΔ[49] = [];
    this.ⲆΔΔ[53] = [];
    this.ⲆΔΔ[18] = [];
    this.ⲆΔΔ[29] = [];
    this.ⲆΔΔ[56] = [];
    this.ⲆΔΔ[11] = [];
    this.ⲆΔΔ[22] = [];
    this.ⲆΔΔ[23] = [];
    this.ⲆΔΔ[30] = [];
    this.ⲆΔΔ[38] = [];
    this.ⲆΔΔ[33] = [];
    this.ⲆΔΔ[31] = [];
    this.ⲆΔΔ[55] = [];
    this.ⲆΔΔ[37] = [];
    this.ⲆΔΔ[43] = [];
    this.ⲆΔΔ[44] = [];
    this.ⲆΔΔ[54] = [];
    this.ⲆΔΔ[39] = [];
    this.ⲆΔΔ[40] = [];
    this.ⲆΔΔ[32] = [];
    this.ⲆΔΔ[24] = [];
    this.ⲆΔΔ[25] = [];
    this.ⲆΔΔ[26] = [];
    this.ⲆΔΔ[27] = [];
    this.ⲆΔΔ[28] = [];
    this.ⲆΔΔ[35] = [];
    this.ⲆΔΔ[87] = [];
    this.ⲆΔΔ[42] = [];
    this.ⵠⵠⲆⵠⲆ = [];
    this.ΔᐃᐃⵠΔ = 260;
    this.ᐃⵠᐃᐃᐃ = 260;
    this.ᐃᐃⵠΔⲆᐃᐃ = 100;
    this.ᐃⲆⵠⲆᐃⵠⲆ = 100;
    this.w = this.ΔᐃᐃⵠΔ * this.ᐃᐃⵠΔⲆᐃᐃ;
    this.ⲆΔⲆ = this.ᐃⲆⵠⲆᐃⵠⲆ * this.ᐃⵠᐃᐃᐃ;
    this.ⵠⲆΔᐃⲆ = new Wk.ⲆⲆᐃⵠⲆⵠᐃ();
    this.ᐃΔⲆᐃ = [];
    this.ᐃᐃⵠⵠ = new ΔⵠΔⵠ.ΔᐃΔⵠ(nl, 0, 1, 0, 1, 1);
    this.transition = Ma;
    this.ⵠⵠᐃⲆᐃ = [];
    this.ᐃΔΔΔⵠ = 0;
    this.ⵠᐃᐃᐃⲆⲆᐃ = 1;
    this.ΔΔⵠⵠᐃΔⵠ = 2;
    this.ⲆⵠⵠⲆⵠᐃΔ = 3;
    this.ΔⲆⵠⲆΔ = 4;
    this.ᐃᐃΔⲆᐃᐃⵠ = 10;
    this.ⵠⵠᐃⲆᐃ[this.ᐃΔΔΔⵠ] = {
      ΔΔΔⵠⵠᐃⵠ: 1,
      ⲆΔᐃ: [19, 58, 43],
      ΔⲆᐃ: [4, 43, 48],
      ⲆⲆⲆⵠᐃ: ["#133a2b", "#042b30"]
    };
    this.ⵠⵠᐃⲆᐃ[this.ΔⲆⵠⲆΔ] = {
      ΔΔΔⵠⵠᐃⵠ: 0,
      ⲆΔᐃ: [11, 106, 132],
      ΔⲆᐃ: [9, 55, 63],
      ⲆⲆⲆⵠᐃ: ["#0B6A84", "#09373F"]
    };
    this.ⵠⵠᐃⲆᐃ[this.ⵠᐃᐃᐃⲆⲆᐃ] = {
      ΔΔΔⵠⵠᐃⵠ: 0,
      ⲆΔᐃ: [235, 242, 240],
      ΔⲆᐃ: [19, 97, 103],
      ⲆⲆⲆⵠᐃ: ["#EBF2F0", "#136167"]
    };
    this.ⵠⵠᐃⲆᐃ[this.ΔΔⵠⵠᐃΔⵠ] = {
      ΔΔΔⵠⵠᐃⵠ: 0,
      ΔⲆᐃ: [3, 28, 30],
      ⲆⲆⲆⵠᐃ: ["#2D2017", "#031C1E"],
      ⲆΔᐃ: [45, 32, 23]
    };
    this.ⵠⵠᐃⲆᐃ[this.ⲆⵠⵠⲆⵠᐃΔ] = {
      ΔⲆᐃ: [24, 61, 60],
      ⲆΔᐃ: [74, 74, 74],
      ⲆⲆⲆⵠᐃ: ["#4A4A4A", "#183D3C"],
      ΔΔΔⵠⵠᐃⵠ: 0
    };
    this.ⵠⵠᐃⲆᐃ[this.ᐃᐃΔⲆᐃᐃⵠ] = {
      ⲆⲆⲆⵠᐃ: ["#EBD8A6", "#093D38"],
      ΔΔΔⵠⵠᐃⵠ: 0,
      ⲆΔᐃ: [235, 216, 166],
      ΔⲆᐃ: [9, 61, 56]
    };
    this.ᐃⵠⲆΔⲆⵠⲆ = function (b, c, d, e, f, g) {
      this.x1 = c * 100;
      this.y1 = d * 100;
      this.w = e * 100;
      this.ⲆΔⲆ = f * 100;
      this.x2 = (c + e) * 100;
      this.y2 = (d + f) * 100;
      this.Δᐃᐃ = b;
      this.ⲆⵠⲆ = g === undefined ? 15 : g;
    };
    this.ᐃⲆⵠᐃⲆ = -1000000;
    this.ΔΔⵠⲆⵠ = this.ᐃⲆⵠᐃⲆ;
    this.ⲆᐃⲆⲆⲆ = this.ᐃⲆⵠᐃⲆ;
    this.ⲆⲆⵠᐃⲆ = this.ᐃⲆⵠᐃⲆ;
    this.Δᐃⵠᐃⵠⵠᐃ = this.ᐃⲆⵠᐃⲆ;
    this.ⲆΔⵠΔᐃΔΔ = this.ᐃⲆⵠᐃⲆ;
    this.ⲆᐃⵠⲆⵠ = this.ᐃⲆⵠᐃⲆ;
    this.ⲆΔⲆⵠⵠⵠⲆᐃⵠ = function (b) {
      var c = b.r.x;
      var d = b.r.y;
      var e = Math.floor(d / 100);
      var f = Math.floor(c / 100);
      b.ΔΔⵠⲆⵠ = zx.ᐃⲆⵠᐃⲆ;
      b.ⲆᐃⲆⲆⲆ = zx.ᐃⲆⵠᐃⲆ;
      b.ⲆⲆⵠᐃⲆ = zx.ᐃⲆⵠᐃⲆ;
      b.Δᐃⵠᐃⵠⵠᐃ = zx.ᐃⲆⵠᐃⲆ;
      b.ⲆᐃⵠⲆⵠ = zx.ᐃⲆⵠᐃⲆ;
      b.ⵠᐃΔᐃᐃⲆΔ = zx.ᐃⲆⵠᐃⲆ;
      for (var g = 0; zx.ᐃΔⲆᐃ[g].Δᐃᐃ !== zx.ΔⲆⵠⲆΔ; g++) {
        if (zx.ᐃΔΔΔⵠ === zx.ᐃΔⲆᐃ[g].Δᐃᐃ) {
          var h = zx.ⵠⵠⵠⵠⲆ(g, c, d);
          b.Δᐃⵠᐃⵠⵠᐃ = Math.max(b.Δᐃⵠᐃⵠⵠᐃ, h);
          if (h > 0 && zx.ⵠᐃⲆⲆΔⲆΔⵠᐃ(g, c, d) === 1) {
            b.ⵠᐃΔᐃᐃⲆΔ = 1;
          }
        } else if (zx.ᐃΔⲆᐃ[g].Δᐃᐃ === zx.ⵠᐃᐃᐃⲆⲆᐃ) {
          b.ΔΔⵠⲆⵠ = Math.max(b.ΔΔⵠⲆⵠ, zx.ⵠⵠⵠⵠⲆ(g, c, d));
        } else if (zx.ᐃᐃΔⲆᐃᐃⵠ === zx.ᐃΔⲆᐃ[g].Δᐃᐃ) {
          b.ⲆᐃⲆⲆⲆ = Math.max(b.ⲆᐃⲆⲆⲆ, zx.ⵠⵠⵠⵠⲆ(g, c, d));
        } else if (zx.ᐃΔⲆᐃ[g].Δᐃᐃ === zx.ΔΔⵠⵠᐃΔⵠ) {
          b.ⲆⲆⵠᐃⲆ = Math.max(b.ⲆⲆⵠᐃⲆ, zx.ⵠⵠⵠⵠⲆ(g, c, d));
        } else if (zx.ᐃΔⲆᐃ[g].Δᐃᐃ === zx.ⲆⵠⵠⲆⵠᐃΔ) {
          b.ⲆᐃⵠⲆⵠ = Math.max(b.ⲆᐃⵠⲆⵠ, zx.ⵠⵠⵠⵠⲆ(g, c, d));
        }
      }
      if (ux.ΔᐃⲆΔ[e][f].iblk) {
        b.ⵠᐃΔᐃᐃⲆΔ = 1;
      }
      if (zx.ΔⲆᐃΔᐃⲆⲆⵠⲆ(f, e)) {
        b.ⲆΔⵠΔᐃΔΔ = b.ᐃⲆⵠᐃⲆ;
      } else if (ux.ΔᐃⲆΔ[e][f].wtb || b.ΔΔⵠⲆⵠ < 0 && b.ⲆⲆⵠᐃⲆ < 0 && b.Δᐃⵠᐃⵠⵠᐃ < 0 && b.ⵠᐃΔᐃᐃⲆΔ < 0 && b.ⲆᐃⵠⲆⵠ < 0 && b.ⲆᐃⲆⲆⲆ < 0) {
        b.ⲆΔⵠΔᐃΔΔ = 1;
      } else {
        b.ⲆΔⵠΔᐃΔΔ = b.ᐃⲆⵠᐃⲆ;
      }
    };
    this.ⲆⲆΔᐃⵠⲆⲆΔⲆ = function (a, b) {
      zx.ΔΔⵠⲆⵠ = zx.ᐃⲆⵠᐃⲆ;
      zx.ⲆᐃⲆⲆⲆ = zx.ᐃⲆⵠᐃⲆ;
      zx.ⲆⲆⵠᐃⲆ = zx.ᐃⲆⵠᐃⲆ;
      zx.ⲆᐃⵠⲆⵠ = zx.ᐃⲆⵠᐃⲆ;
      zx.Δᐃⵠᐃⵠⵠᐃ = zx.ᐃⲆⵠᐃⲆ;
      for (var c = 0; zx.ᐃΔⲆᐃ[c].Δᐃᐃ !== zx.ΔⲆⵠⲆΔ; c++) {
        if (zx.ᐃΔⲆᐃ[c].Δᐃᐃ === zx.ᐃΔΔΔⵠ) {
          zx.Δᐃⵠᐃⵠⵠᐃ = Math.max(zx.Δᐃⵠᐃⵠⵠᐃ, zx.ⵠⵠⵠⵠⲆ(c, a, b));
        } else if (zx.ᐃΔⲆᐃ[c].Δᐃᐃ === zx.ⵠᐃᐃᐃⲆⲆᐃ) {
          zx.ΔΔⵠⲆⵠ = Math.max(zx.ΔΔⵠⲆⵠ, zx.ⵠⵠⵠⵠⲆ(c, a, b));
        } else if (zx.ᐃᐃΔⲆᐃᐃⵠ === zx.ᐃΔⲆᐃ[c].Δᐃᐃ) {
          zx.ⲆᐃⲆⲆⲆ = Math.max(zx.ⲆᐃⲆⲆⲆ, zx.ⵠⵠⵠⵠⲆ(c, a, b));
        } else if (zx.ᐃΔⲆᐃ[c].Δᐃᐃ === zx.ΔΔⵠⵠᐃΔⵠ) {
          zx.ⲆⲆⵠᐃⲆ = Math.max(zx.ⲆⲆⵠᐃⲆ, zx.ⵠⵠⵠⵠⲆ(c, a, b));
        } else if (zx.ⲆⵠⵠⲆⵠᐃΔ === zx.ᐃΔⲆᐃ[c].Δᐃᐃ) {
          zx.ⲆᐃⵠⲆⵠ = Math.max(zx.ⲆᐃⵠⲆⵠ, zx.ⵠⵠⵠⵠⲆ(c, a, b));
        }
      }
      if (zx.ΔΔⵠⲆⵠ < 0 && zx.ⲆᐃⵠⲆⵠ < 0 && zx.Δᐃⵠᐃⵠⵠᐃ < 0 && zx.ⲆᐃⵠⲆⵠ < 0 && zx.ⲆᐃⲆⲆⲆ < 0) {
        zx.ⲆΔⵠΔᐃΔΔ = 1;
      } else {
        zx.ⲆΔⵠΔᐃΔΔ = zx.ᐃⲆⵠᐃⲆ;
      }
    };
    this.ⵠᐃⲆⲆΔⲆΔⵠᐃ = function (b, c, d) {
      var e = zx.ᐃΔⲆᐃ[b];
      var f = 0;
      ⲆᐃΔΔ = e.x1 + 30 + ((e.ⲆⵠⲆ & 4) === 0 ? 150 : 0);
      var g = c - ⲆᐃΔΔ;
      if ((e.ⲆⵠⲆ & 4) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      Δⵠᐃⵠ = e.y1 + 250 + ((e.ⲆⵠⲆ & 1) === 0 ? 150 : 0);
      g = d - Δⵠᐃⵠ;
      if ((e.ⲆⵠⲆ & 1) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ⲆΔΔⵠ = e.x2 + 80 + ((e.ⲆⵠⲆ & 8) === 0 ? -200 : 0);
      g = ⲆΔΔⵠ - c;
      if ((e.ⲆⵠⲆ & 8) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ⲆⵠⲆⵠ = e.y2 - 200 + ((e.ⲆⵠⲆ & 2) === 0 ? -200 : 0);
      g = ⲆⵠⲆⵠ - d;
      if ((e.ⲆⵠⲆ & 2) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      if (c >= ⲆᐃΔΔ && ⲆΔΔⵠ >= c && Δⵠᐃⵠ <= d && d <= ⲆⵠⲆⵠ) {
        return f;
      } else {
        return 0;
      }
    };
    this.ⵠⵠⵠⵠⲆ = function (a, b, c) {
      var d = zx.ᐃΔⲆᐃ[a];
      ⲆᐃΔΔ = d.x1 + 30;
      Δⵠᐃⵠ = d.y1 + 250;
      ⲆΔΔⵠ = d.x2 + 80;
      ⲆⵠⲆⵠ = d.y2 - 200;
      if (b >= ⲆᐃΔΔ && ⲆΔΔⵠ >= b && Δⵠᐃⵠ <= c && ⲆⵠⲆⵠ >= c) {
        return Math.min(b - ⲆᐃΔΔ, ⲆΔΔⵠ - b, c - Δⵠᐃⵠ, ⲆⵠⲆⵠ - c);
      }
      var e = -1000000;
      if (b - ⲆᐃΔΔ < 0) {
        e = Math.max(e, b - ⲆᐃΔΔ);
      } else if (ⲆΔΔⵠ - b < 0) {
        e = Math.max(e, ⲆΔΔⵠ - b);
      }
      ⵠᐃⲆᐃⵠⵠᐃ = -1000000;
      if (Δⵠᐃⵠ > c || c > ⲆⵠⲆⵠ) {
        if (c - Δⵠᐃⵠ < 0) {
          ⵠᐃⲆᐃⵠⵠᐃ = Math.max(ⵠᐃⲆᐃⵠⵠᐃ, c - Δⵠᐃⵠ);
        } else {
          ⵠᐃⲆᐃⵠⵠᐃ = Math.max(ⵠᐃⲆᐃⵠⵠᐃ, ⲆⵠⲆⵠ - c);
        }
        e = e !== -1000000 && ⵠᐃⲆᐃⵠⵠᐃ !== -1000000 ? Math.min(e, ⵠᐃⲆᐃⵠⵠᐃ) : ⵠᐃⲆᐃⵠⵠᐃ;
      }
      return e;
    };
    this.ΔᐃΔΔⵠΔⲆ = function (b, c, d) {
      var e = d;
      var f = c;
      m(e, f, "isl", b, 1);
      for (var g = 0; g < 4; g++) {
        for (var h = 0; h < 3; h++) {
          m(e - h, f - g, "iblk", 0);
          m(e + h, f - g, "iblk", 0);
          m(e + h, f + g, "iblk", 0);
          m(e - h, f + g, "iblk", 0);
        }
      }
      if (b === 0) {
        for (g = 0; g < 2; g++) {
          m(e - g, f - 4, "iblk", 0);
          m(e + g, f - 4, "iblk", 0);
          m(e - g, f + 4, "iblk", 0);
          m(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 3; g++) {
          m(e - 3, f + g, "iblk", 0);
          m(e + 3, f + g, "iblk", 0);
          m(e - 3, f - g, "iblk", 0);
          m(e + 3, f - g, "iblk", 0);
        }
        m(e - 2, f - 4, "iblk", 0);
        m(e - 3, f - 3, "iblk", 0);
        m(e + 2, f + 4, "iblk", 0);
        m(e + 3, f + 3, "iblk", 0);
      } else if (b === 1) {
        for (g = 0; g < 3; g++) {
          m(e - g, f - 4, "iblk", 0);
          m(e + g, f - 4, "iblk", 0);
          m(e - g, f + 4, "iblk", 0);
          m(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 4; g++) {
          m(e - 3, f + g, "iblk", 0);
          m(e + 3, f + g, "iblk", 0);
          m(e - 3, f - g, "iblk", 0);
          m(e + 3, f - g, "iblk", 0);
        }
      } else if (b === 2) {
        for (g = 0; g < 2; g++) {
          m(e - g, f - 4, "iblk", 0);
          m(e + g, f - 4, "iblk", 0);
          m(e - g, f + 4, "iblk", 0);
          m(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 3; g++) {
          m(e - 3, f + g, "iblk", 0);
          m(e + 3, f + g, "iblk", 0);
          m(e - 3, f - g, "iblk", 0);
          m(e + 3, f - g, "iblk", 0);
        }
      }
    };
    this.ⲆⵠⲆᐃΔⲆⲆᐃⲆ = function (b) {
      for (var c = 0; c < zx.ᐃΔⲆᐃ.length && b > 0; c++) {
        var d = zx.ᐃΔⲆᐃ[c];
        if (zx.ΔⲆⵠⲆΔ === d.Δᐃᐃ && d.w > 1800 && d.ⲆΔⲆ > 1000) {
          var f = Math.floor((d.x1 + d.w / 2) / 100);
          var g = Math.floor((d.y1 + d.ⲆΔⲆ / 2) / 100);
          zx.ΔᐃΔΔⵠΔⲆ(b % 3, f, g);
          for (var h = 0; h < 3; h++) {
            var j = g - 2 + Math.floor(zx.ⵠⲆΔᐃⲆ.get() * 4);
            var k = f - 3 + Math.floor(zx.ⵠⲆΔᐃⲆ.get() * 6);
            if (Il === ux.ΔᐃⲆΔ[j][k].s) {
              m(j, k, "plm", h);
            }
            j = g - 2 + Math.floor(zx.ⵠⲆΔᐃⲆ.get() * 4);
            k = f - 3 + Math.floor(zx.ⵠⲆΔᐃⲆ.get() * 6);
            if (ux.ΔᐃⲆΔ[j][k].plm === undefined) {
              m(j, k, "s", h);
            }
          }
          j = g - 2 + Math.floor(zx.ⵠⲆΔᐃⲆ.get() * 4);
          k = f - 3 + Math.floor(zx.ⵠⲆΔᐃⲆ.get() * 6);
          if (Us === ux.ΔᐃⲆΔ[j][k].plm && ux.ΔᐃⲆΔ[j][k].s === undefined) {
            m(j, k, "p", 0, 1);
          }
          b--;
        }
      }
    };
    this.ⵠᐃᐃᐃⲆⲆⵠⵠⲆ = function (a) {
      zx.ⵠⲆΔᐃⲆ.ⵠΔⲆΔⲆ(a);
      var h = 0;
      while (true) {
        if (++h > 10000) {
          return;
        }
        zx.ᐃΔⲆᐃ = [];
        if (zx.ⵠᐃⵠΔΔ === 0 && (zx.mode === 3 || zx.mode === 7 || zx.mode === 0)) {
          zx.ⵠᐃⵠΔΔ = ch;
        }
        if (zx.mode === 2) {
          zx.ᐃΔⲆᐃ.push(new zx.ᐃⵠⲆΔⲆⵠⲆ(zx.ᐃΔΔΔⵠ, 2, 2, 80, 80, 15));
        } else if (zx.mode === 4) {
          zx.ᐃΔⲆᐃ.push(new zx.ᐃⵠⲆΔⲆⵠⲆ(zx.ᐃΔΔΔⵠ, 2, 2, 150, 150, 15));
        } else if (zx.ⵠᐃⵠΔΔ !== 0 && zx.ⵠᐃⵠΔΔ.length > 0 && zx.ⵠᐃⵠΔΔ[0].length > 3) {
          for (var j = 0; zx.ⵠᐃⵠΔΔ.length > j; j++) {
            var k = zx.ⵠᐃⵠΔΔ[j];
            if (k[0] !== 0) {
              break;
            }
            var p = If.ᐃΔΔΔⵠ;
            switch (k[1]) {
              case "FOREST":
                p = zx.ᐃΔΔΔⵠ;
                break;
              case "WINTER":
                p = zx.ⵠᐃᐃᐃⲆⲆᐃ;
                break;
              case "DESERT":
                p = zx.ᐃᐃΔⲆᐃᐃⵠ;
                break;
              case "LAVA":
                p = zx.ΔΔⵠⵠᐃΔⵠ;
                break;
              case "DRAGON":
                p = zx.ⲆⵠⵠⲆⵠᐃΔ;
            }
            zx.ᐃΔⲆᐃ.push(new zx.ᐃⵠⲆΔⲆⵠⲆ(p, k[2], k[3], k[4], k[5], k[6], k[7]));
          }
        } else if (zx.ⵠᐃⵠΔΔ !== 0) {
          for (j = 0; zx.ⵠᐃⵠΔΔ.length > j; j++) {
            var t = zx.ⵠᐃⵠΔΔ[j];
            p = If.ᐃΔΔΔⵠ;
            switch (t[0]) {
              case "FOREST":
                p = zx.ᐃΔΔΔⵠ;
                break;
              case "WINTER":
                p = zx.ⵠᐃᐃᐃⲆⲆᐃ;
                break;
              case "DESERT":
                p = zx.ᐃᐃΔⲆᐃᐃⵠ;
                break;
              case "LAVA":
                p = zx.ΔΔⵠⵠᐃΔⵠ;
                break;
              case "DRAGON":
                p = zx.ⲆⵠⵠⲆⵠᐃΔ;
            }
            if (e(p, t[1], t[2], 0, (j + 1) * 10) === 0) {
              break;
            }
          }
          if (j !== zx.ⵠᐃⵠΔΔ.length) {
            continue;
          }
        }
        break;
      }
      ⲆΔⵠⵠⲆᐃⲆⲆΔ();
      var u = [];
      for (var v = 0; zx.ᐃⵠᐃᐃᐃ > v; v++) {
        u[v] = new Array(zx.ΔᐃᐃⵠΔ);
        for (var w = 0; zx.ΔᐃᐃⵠΔ > w; w++) {
          u[v][w] = 0;
        }
      }
      for (v = 0; v < zx.ᐃΔⲆᐃ.length; v++) {
        for (var x = (t = zx.ᐃΔⲆᐃ[v]).x2 / 100, A = t.y2 / 100, B = t.x1 / 100; x >= B; B++) {
          for (var D = t.y1 / 100; D <= A; D++) {
            u[D][B] = 1;
          }
        }
      }
      for (D = 0; D < zx.ᐃⵠᐃᐃᐃ; D++) {
        for (B = 0; zx.ΔᐃᐃⵠΔ > B; B++) {
          if (u[D][B] === 0) {
            i(u, B, D);
          }
        }
      }
      ux = {
        w: zx.ΔᐃᐃⵠΔ,
        ⲆΔⲆ: zx.ᐃⵠᐃᐃᐃ,
        ΔᐃⲆΔ: []
      };
      for (v = 0; zx.ᐃⵠᐃᐃᐃ > v; v++) {
        ux.ΔᐃⲆΔ[v] = [];
      }
      if (zx.ⵠᐃⵠΔΔ !== 0 && zx.ⵠᐃⵠΔΔ.length > 0 && zx.ⵠᐃⵠΔΔ[0].length > 3) {
        for (j = 0; zx.ⵠᐃⵠΔΔ.length > j; j++) {
          if ((k = zx.ⵠᐃⵠΔΔ[j])[1] === "isl") {
            zx.ΔᐃΔΔⵠΔⲆ(k[2], k[3], k[4]);
          }
        }
      } else {
        zx.ⲆⵠⲆᐃΔⲆⲆᐃⲆ(zx.ΔᐃⲆⲆᐃⵠⵠ);
      }
      if (zx.ⵠᐃⵠΔΔ !== 0 && zx.ⵠᐃⵠΔΔ.length > 0 && zx.ⵠᐃⵠΔΔ[0].length > 3) {
        var E = [];
        for (j = 0; zx.ⵠᐃⵠΔΔ.length > j; j++) {
          if ((k = zx.ⵠᐃⵠΔΔ[j])[0] === 1) {
            if (k[1] === "r") {
              m(k[3], k[2], "wtb", 0, 1);
              E.push([k[3], k[2], k[4]]);
            } else {
              m(k[4], k[3], k[1], k[2], k[5]);
            }
          }
        }
        q(0, E);
        E = [];
      } else {
        for (v = 0; v < zx.ᐃΔⲆᐃ.length; v++) {
          t = zx.ᐃΔⲆᐃ[v];
          if (zx.mode === 4) {
            if (t.Δᐃᐃ === zx.ᐃΔΔΔⵠ) {
              d(v, t.w / 10000);
            }
          } else {
            if (t.Δᐃᐃ === zx.ᐃΔΔΔⵠ) {
              b(v, t.w / 10000);
            }
            if (t.Δᐃᐃ === zx.ΔΔⵠⵠᐃΔⵠ) {
              r(v, t.w / 10000);
            }
            if (t.Δᐃᐃ === zx.ⵠᐃᐃᐃⲆⲆᐃ) {
              n(v, t.w / 10000);
            }
            if (zx.ᐃᐃΔⲆᐃᐃⵠ === t.Δᐃᐃ) {
              l(v, t.w / 10000);
            }
            if (zx.ⲆⵠⵠⲆⵠᐃΔ === t.Δᐃᐃ) {
              c(v);
            }
          }
        }
      }
      od("isl", 1);
      od("wtb", 20);
      od("la", 1);
      od("c", 1);
      od("s", 1);
      od("f", 1);
      od("p", 1);
      od("g", 1);
      od("d", 1);
      od("a", 1);
      od("re", 1);
      od("m", 1);
      td = [];
      zx.ΔⲆΔⲆⲆⵠΔⵠᐃ(ux);
    };
    this.Ⲇⵠᐃⵠ = m;
    this.ΔⲆΔⲆⲆⵠΔⵠᐃ = function (b) {
      for (var c = 0; c < this.ᐃⵠᐃᐃᐃ; c++) {
        for (var d = 0; this.ΔᐃᐃⵠΔ > d; d++) {
          b.ΔᐃⲆΔ[c] ||= [];
          if (b.ΔᐃⲆΔ[c][d]) {
            var e = b.ΔᐃⲆΔ[c][d];
            if (e.de && e.de.length > 0) {
              for (var f = 0; e.de.length > f; f++) {
                if (e.de[f] && e.de[f].length > 0) {
                  e.de = e.de[f][0];
                  if (f >= 41 && f <= 49) {
                    e.de.scale = 3;
                    var g = Math.floor(Math.random() * 3 + 1);
                    e.de.ΔⲆⵠ = [];
                    for (var h = 0; g > h; h++) {
                      e.de.ΔⲆⵠ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.random() * Math.PI * 2,
                        ΔᐃᐃᐃⲆ: 41 + Math.floor(Math.random() * 9)
                      });
                    }
                  } else if (f >= 19 && f <= 26) {
                    e.de.scale = 3;
                    g = Math.floor(Math.random() * 3 + 1);
                    e.de.ΔⲆⵠ = [];
                    for (h = 0; g > h; h++) {
                      e.de.ΔⲆⵠ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.random() * Math.PI * 2,
                        ΔᐃᐃᐃⲆ: 19 + Math.floor(Math.random() * 8)
                      });
                    }
                  } else if (f <= 15 || f >= 27 && f <= 40) {
                    e.de.angle = 0;
                    e.de.scale = 2;
                    e.de.ΔᐃᐃᐃⲆ = f;
                  } else {
                    e.de.angle = Math.random() * Math.PI * 2;
                    e.de.scale = 1;
                    e.de.ΔᐃᐃᐃⲆ = f;
                  }
                }
              }
            }
            p(e, "p", new ΔⵠΔⵠ.ΔᐃΔⵠ(rh, 1, 1, 0, 10, 10));
            p(e, "t", new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10));
            p(e, "s", new ΔⵠΔⵠ.ΔᐃΔⵠ($h, 1, 1, 0, 10, 10));
            p(e, "g", new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10));
            p(e, "d", new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10));
            p(e, "b", new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10));
            p(e, "f", new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10));
            p(e, "sw", new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10));
            p(e, "gw", new ΔⵠΔⵠ.ΔᐃΔⵠ(Ak, 1, 1, 0, 10, 10));
            p(e, "dw", new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10));
            p(e, "a", new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10));
            p(e, "cs", new ΔⵠΔⵠ.ΔᐃΔⵠ(Pi, 1, 1, 0, 10, 10));
            p(e, "plm", new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10));
            p(e, "re", new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10));
            p(e, "c", new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10));
            p(e, "m", new ΔⵠΔⵠ.ΔᐃΔⵠ(Ir, 1, 1, 0, 10, 10));
          } else {
            b.ΔᐃⲆΔ[c][d] = [];
          }
        }
      }
    };
    this.time = Cs.ⵠΔⵠ;
    this.ⵠΔⵠΔⲆ = {
      ΔᐃΔΔⵠ: 0,
      ⵠΔⲆΔⲆ: 0,
      now: 0,
      translate: {
        x: 0,
        y: 0
      }
    };
    this.ΔⲆΔΔⲆⲆᐃⵠᐃ = function () {
      this.ⵠⵠⲆⵠⲆ = [];
      this.ⲆΔΔ[0] = [];
      this.ⲆΔΔ[2] = [];
      this.ⲆΔΔ[1] = [];
      this.ⲆΔΔ[6] = [];
      this.ⲆΔΔ[3] = [];
      this.ⲆΔΔ[5] = [];
      this.ⲆΔΔ[12] = [];
      this.ⲆΔΔ[13] = [];
      this.ⲆΔΔ[14] = [];
      this.ⲆΔΔ[20] = [];
      this.ⲆΔΔ[52] = [];
      this.ⲆΔΔ[30] = [];
      this.ⲆΔΔ[56] = [];
      this.ⲆΔΔ[38] = [];
      this.ⲆΔΔ[33] = [];
      this.ⲆΔΔ[31] = [];
      this.ⲆΔΔ[55] = [];
      this.ⲆΔΔ[37] = [];
      this.ⲆΔΔ[43] = [];
      this.ⲆΔΔ[44] = [];
      this.ⲆΔΔ[54] = [];
      this.ⲆΔΔ[39] = [];
      this.ⲆΔΔ[40] = [];
      this.ⲆΔΔ[32] = [];
      this.ⲆΔΔ[24] = [];
      this.ⲆΔΔ[25] = [];
      this.ⲆΔΔ[26] = [];
      this.ⲆΔΔ[27] = [];
      this.ⲆΔΔ[28] = [];
      this.ⲆΔΔ[35] = [];
      this.ⲆΔΔ[4] = [];
      this.ⲆΔΔ[7] = [];
      this.ⲆΔΔ[8] = [];
      this.ⲆΔΔ[9] = [];
      this.ⲆΔΔ[19] = [];
      this.ⲆΔΔ[50] = [];
      this.ⲆΔΔ[41] = [];
      this.ⲆΔΔ[10] = [];
      this.ⲆΔΔ[15] = [];
      this.ⲆΔΔ[16] = [];
      this.ⲆΔΔ[17] = [];
      this.ⲆΔΔ[21] = [];
      this.ⲆΔΔ[51] = [];
      this.ⲆΔΔ[45] = [];
      this.ⲆΔΔ[46] = [];
      this.ⲆΔΔ[47] = [];
      this.ⲆΔΔ[48] = [];
      this.ⲆΔΔ[49] = [];
      this.ⲆΔΔ[53] = [];
      this.ⲆΔΔ[18] = [];
      this.ⲆΔΔ[29] = [];
      this.ⲆΔΔ[56] = [];
      this.ⲆΔΔ[11] = [];
      this.ⲆΔΔ[22] = [];
      this.ⲆΔΔ[23] = [];
      this.ⲆΔΔ[100] = [];
      this.ⲆΔΔ[80] = [];
      this.ⲆΔΔ[60] = [];
      this.ⲆΔΔ[67] = [];
      this.ⲆΔΔ[70] = [];
      this.ⲆΔΔ[77] = [];
      this.ⲆΔΔ[71] = [];
      this.ⲆΔΔ[72] = [];
      this.ⲆΔΔ[73] = [];
      this.ⲆΔΔ[74] = [];
      this.ⲆΔΔ[65] = [];
      this.ⲆΔΔ[66] = [];
      this.ⲆΔΔ[62] = [];
      this.ⲆΔΔ[88] = [];
      this.ⲆΔΔ[91] = [];
      this.ⲆΔΔ[90] = [];
      this.ⲆΔΔ[63] = [];
      this.ⲆΔΔ[78] = [];
      this.ⲆΔΔ[75] = [];
      this.ⲆΔΔ[76] = [];
      this.ⲆΔΔ[64] = [];
      this.ⲆΔΔ[69] = [];
      this.ⲆΔΔ[68] = [];
      this.ⲆΔΔ[79] = [];
      this.ⲆΔΔ[89] = [];
      this.ⲆΔΔ[83] = [];
      this.ⲆΔΔ[84] = [];
      this.ⲆΔΔ[85] = [];
      this.ⲆΔΔ[81] = [];
      this.ⲆΔΔ[82] = [];
      this.ⲆΔΔ[86] = [];
      this.ⲆΔΔ[34] = [];
      this.ⲆΔΔ[36] = [];
      this.ⲆΔΔ[61] = [];
      this.ⲆΔΔ[87] = [];
      this.ⲆΔΔ[42] = [];
    };
    this.ᐃᐃⲆᐃΔⵠⵠⵠⵠ = function (a) {
      if (this.ⵠⵠⲆⵠⲆ[a]) {
        ⲆΔⲆᐃ = this.ⵠⵠⲆⵠⲆ[a].type;
        this.ⵠⵠⲆⵠⲆ[a] = null;
        for (var b = this.ⲆΔΔ[ⲆΔⲆᐃ], c = 0; c < b.length; c++) {
          if (b[c].Ⲇᐃᐃⵠ == a) {
            b.splice(c, 1);
            return;
          }
        }
      }
    };
    this.ⲆΔⲆΔΔⵠⵠⲆᐃ = function (a, b) {
      for (var c = 0; this.ⲆΔΔ[56].length > c; c++) {
        var d = this.ⲆΔΔ[56][c];
        if (Math.floor(d.x / 100) === b && Math.floor(d.y / 100) === a) {
          return 1;
        }
      }
      return 0;
    };
    this.ΔⲆᐃΔᐃⲆⲆⵠⲆ = function (a, b) {
      for (var c = 0; this.ⲆΔΔ[30].length > c; c++) {
        var d = this.ⲆΔΔ[30][c];
        if (a == Math.floor(d.x / 100) && Math.floor(d.y / 100) == b) {
          return Ja;
        }
      }
      return false;
    };
    this.ⵠᐃⲆᐃᐃ = function (j) {
      for (var e = 0; j.length > e; e++) {
        ⲆⲆᐃΔ = j[e];
        if (ⲆⲆᐃΔ.ⲆⲆᐃⲆᐃⲆᐃ != ⲆⲆᐃΔ.angle) {
          var q = Math.PI * 2;
          ⲆⲆᐃΔ.angle = (ⲆⲆᐃΔ.angle + q) % q;
          ⲆⲆᐃΔ.ⲆⲆᐃⲆᐃⲆᐃ = (ⲆⲆᐃΔ.ⲆⲆᐃⲆᐃⲆᐃ + q) % q;
          if (ⲆⲆᐃΔ.ⲆⲆᐃⲆᐃⲆᐃ != ⲆⲆᐃΔ.angle) {
            var B = ⲆⲆᐃΔ.ⲆⲆᐃⲆᐃⲆᐃ - ⲆⲆᐃΔ.angle;
            var D = Math.abs(B);
            if (Math.PI < D) {
              D = Math.PI * 2 - D;
            }
            var E = Hx * (D / Math.PI * 3 * 10);
            if (B > Math.PI) {
              ⲆⲆᐃΔ.angle -= E;
            } else if (B < -Math.PI) {
              ⲆⲆᐃΔ.angle += E;
            } else if (B < 0) {
              ⲆⲆᐃΔ.angle -= E;
            } else {
              ⲆⲆᐃΔ.angle += E;
            }
            ⲆⲆᐃΔ.angle = (ⲆⲆᐃΔ.angle + q) % q;
            if (Math.abs(ⲆⲆᐃΔ.angle - ⲆⲆᐃΔ.ⲆⲆᐃⲆᐃⲆᐃ) < E) {
              ⲆⲆᐃΔ.angle = ⲆⲆᐃΔ.ⲆⲆᐃⲆᐃⲆᐃ;
            }
          }
        }
        Math.floor(ⲆⲆᐃΔ.r.y / 100);
        Math.floor(ⲆⲆᐃΔ.r.x / 100);
        if (ⲆⲆᐃΔ.x != ⲆⲆᐃΔ.r.x || ⲆⲆᐃΔ.r.y != ⲆⲆᐃΔ.y) {
          if (ⲆⲆᐃΔ.action & 64) {
            ⲆⲆᐃΔ.action -= 64;
          }
          ⲆⲆᐃΔ.action |= 32;
          var F = ΔⵠΔⵠ.ⵠΔᐃⵠⲆⲆᐃ(ⲆⲆᐃΔ, ⲆⲆᐃΔ.r) + Math.PI;
          var G = ⲆⲆᐃΔ.ⲆⲆⲆΔᐃ * Hx;
          var H = ΔⵠΔⵠ.ᐃⵠⵠᐃᐃⲆⵠ(G, F);
          if (ΔⵠΔⵠ.ᐃⲆⵠⵠᐃᐃᐃ(ΔⵠΔⵠ.ⵠⲆⵠⵠΔⵠⵠ(ⲆⲆᐃΔ, ⲆⲆᐃΔ.r)) > ΔⵠΔⵠ.ᐃⲆⵠⵠᐃᐃᐃ(H)) {
            ΔⵠΔⵠ.ΔᐃⵠⲆⵠⲆⵠ(ⲆⲆᐃΔ, H);
          } else {
            if (ⲆⲆᐃΔ.action & 32) {
              ⲆⲆᐃΔ.action -= 32;
            }
            ⲆⲆᐃΔ.action |= 64;
            ΔⵠΔⵠ.ⵠⲆᐃᐃΔΔᐃ(ⲆⲆᐃΔ.r, ⲆⲆᐃΔ);
          }
        }
        if (ⲆⲆᐃΔ.ΔⲆⲆΔⵠ) {
          var I = ⲆⲆᐃΔ.bubbles;
          if ((M = I.length) === 0 || M < Cs.ⲆⲆΔΔⲆΔⲆ && I[M - 1].ᐃΔᐃᐃⵠ < 0.95) {
            I.push({
              id: Math.floor(Math.random() * ᐃΔ[540][0].length),
              x: Math.floor(ⲆⲆᐃΔ.x + Math.random() * 80 - 40),
              y: Math.floor(ⲆⲆᐃΔ.y + Math.random() * 80 - 40),
              ᐃΔᐃᐃⵠ: 1
            });
          }
          for (var J = 0; M > J; J++) {
            I[J].ᐃΔᐃᐃⵠ = Math.max(0, I[J].ᐃΔᐃᐃⵠ - Hx);
          }
          for (J = 0; M > J; J++) {
            if (I[J].ᐃΔᐃᐃⵠ === 0) {
              I.splice(J, 1);
              break;
            }
          }
        }
        var K = 0;
        if (ⲆⲆᐃΔ.ⵠⲆⲆΔ && yx.ΔΔⲆᐃⲆ) {
          var L = ⲆⲆᐃΔ.ᐃⲆⵠⲆⵠ;
          var M = L.length;
          if (ⲆⲆᐃΔ.ⲆΔⵠΔᐃΔΔ > 0 && ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ !== 227 && ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ !== 228 && ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ !== 230 && ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ !== 229 && ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ !== 91 && !ⲆⲆᐃΔ.ΔⲆⲆΔⵠ && (K = 1, M === 0 || Cs.ΔⵠⲆᐃᐃΔⲆ < ΔⵠΔⵠ.ΔⲆⲆᐃ(L[M - 1], ⲆⲆᐃΔ))) {
            var N = -ⲆⲆᐃΔ.angle;
            var O = Math.cos(N) * 45 * fq;
            var Q = fq * (Math.sin(N) * 45);
            L.push({
              x: ⲆⲆᐃΔ.x + O,
              y: ⲆⲆᐃΔ.y + Q,
              r: 8,
              alpha: 0.8
            });
            L.push({
              x: ⲆⲆᐃΔ.x - O,
              y: ⲆⲆᐃΔ.y - Q,
              r: 8,
              alpha: 0.8
            });
            L.push({
              x: ⲆⲆᐃΔ.x,
              y: ⲆⲆᐃΔ.y,
              r: 24,
              alpha: 1
            });
          }
          for (J = 0; J < M; J++) {
            L[J].alpha = Math.max(0, L[J].alpha - Hx / 2.2);
            L[J].r += Hx * 20;
          }
          if (L.length > 0 && L[0].alpha === 0) {
            L.splice(0, 1);
          }
          var R = ⲆⲆᐃΔ.ⲆⵠΔΔⵠ;
          M = R.length;
          var S = -1;
          var U = Math.max(0, Math.sign(ⲆⲆᐃΔ.ⵠᐃΔᐃᐃⲆΔ));
          var V = Math.max(0, Math.sign(ⲆⲆᐃΔ.ΔΔⵠⲆⵠ));
          Math.max(0, Math.sign(ⲆⲆᐃΔ.ⲆᐃⲆⲆⲆ));
          var W = Math.max(0, Math.sign(ⲆⲆᐃΔ.ⲆⲆⵠᐃⲆ));
          var X = Math.max(0, Math.sign(ⲆⲆᐃΔ.ⲆᐃⵠⲆⵠ));
          if (ⲆⲆᐃΔ.ⵠᐃΔᐃᐃⲆΔ > 0 || ⲆⲆᐃΔ.ⲆᐃⲆⲆⲆ > 0) {
            S = 602;
          } else if (ⲆⲆᐃΔ.ⲆᐃⵠⲆⵠ > 0) {
            S = 680;
          } else if (ⲆⲆᐃΔ.ΔΔⵠⲆⵠ > 0) {
            S = 475;
          } else if (ⲆⲆᐃΔ.ⲆⲆⵠᐃⲆ > 0) {
            S = 476;
          }
          if (ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ === 225 && (U | V | W | X) == 1) {
            S = 228;
            var Y = ⲆⲆᐃΔ.ΔⲆᐃⵠᐃ - Math.PI / 2;
            var Z = 15;
            var _ = 11;
            var aa = Cs.ⵠΔⲆᐃᐃᐃᐃ;
          } else if (ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ === 239 && (U | V | W | X) === 1) {
            S = 249;
            Y = ⲆⲆᐃΔ.ΔⲆᐃⵠᐃ - Math.PI / 2;
            Z = 21;
            _ = 16;
            aa = Cs.ⵠΔⲆᐃᐃᐃᐃ;
          } else if (ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ === 226 && (U | V | W | X) == 1) {
            S = 234;
            Y = ⲆⲆᐃΔ.ΔⲆᐃⵠᐃ - Math.PI / 2;
            var ba = Math.random() * 50;
            Z = 10 + ba;
            _ = 0 + ba;
            aa = Cs.ⵠΔⲆᐃᐃᐃᐃ * 0.9;
          } else {
            Y = ⲆⲆᐃΔ.angle;
            Z = 15;
            _ = 11;
            aa = Cs.ⵠΔⲆᐃᐃᐃᐃ;
          }
          if (ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ === 227 || ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ === 228 || ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ === 91 || ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ === 229 || ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ === 230 || ⲆⲆᐃΔ.ΔⲆⲆΔⵠ); else if (ⲆⲆᐃΔ.ΔⲆᐃᐃⵠ === 224) {
            if (M === 0 || Cs.ΔⵠⵠⲆⵠΔⲆ < ΔⵠΔⵠ.ΔⲆⲆᐃ(R[M - 1], ⲆⲆᐃΔ)) {
              R.push({
                x: ⲆⲆᐃΔ.x,
                y: ⲆⲆᐃΔ.y,
                angle: ⲆⲆᐃΔ.ΔⲆᐃⵠᐃ,
                alpha: 1,
                id: 226
              });
            }
          } else if (S != -1 && K === 0 && (M === 0 || aa < ΔⵠΔⵠ.ΔⲆⲆᐃ(R[M - 1], ⲆⲆᐃΔ))) {
            ⲆⲆᐃΔ.ᐃΔⵠⲆⲆⲆⵠ++;
            if (Math.abs(ⲆⲆᐃΔ.x - ⲆⲆᐃΔ.r.x) > 1 && Math.abs(ⲆⲆᐃΔ.y - ⲆⲆᐃΔ.r.y) > 1) {
              if (ⲆⲆᐃΔ.x < ⲆⲆᐃΔ.r.x && ⲆⲆᐃΔ.r.y < ⲆⲆᐃΔ.y || ⲆⲆᐃΔ.x > ⲆⲆᐃΔ.r.x && ⲆⲆᐃΔ.r.y > ⲆⲆᐃΔ.y) {
                if (ⲆⲆᐃΔ.ᐃΔⵠⲆⲆⲆⵠ % 2) {
                  O = -_ * fq;
                  Q = -_ * fq;
                } else {
                  Q = _ * fq;
                  O = _ * fq;
                }
              } else if (ⲆⲆᐃΔ.ᐃΔⵠⲆⲆⲆⵠ % 2) {
                O = _ * fq;
                Q = fq * -_;
              } else {
                Q = _ * fq;
                O = -_ * fq;
              }
            } else if (ⲆⲆᐃΔ.ᐃΔⵠⲆⲆⲆⵠ % 2) {
              O = fq * (Math.cos(Y) * Z);
              Q = fq * (Math.sin(Y) * Z);
            } else {
              O = fq * (-Math.cos(Y) * Z);
              Q = fq * (-Math.sin(Y) * Z);
            }
            R.push({
              x: ⲆⲆᐃΔ.x + O,
              y: ⲆⲆᐃΔ.y + Q,
              angle: Y + Math.PI / 2,
              alpha: 1,
              id: S
            });
          }
          for (J = 0; M > J; J++) {
            if (R[J].id === 226) {
              R[J].alpha = Math.max(0, R[J].alpha - Hx * 1.5);
            } else {
              R[J].alpha = Math.max(0, R[J].alpha - Hx / 2.85);
            }
          }
          if (R.length > 0 && R[0].alpha === 0) {
            R.splice(0, 1);
          }
        }
      }
    };
    this.ⲆᐃⲆ = function () {
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[0]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[80]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[60]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[67]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[70]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[77]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[71]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[72]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[73]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[74]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[61]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[62]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[88]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[91]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[90]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[63]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[78]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[75]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[76]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[64]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[68]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[65]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[66]);
      this.ⵠᐃⲆᐃᐃ(this.ⲆΔΔ[69]);
    };
    this.ⵠΔΔⲆ = [];
    this.ⵠΔΔⲆ[620] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1.05, 1, 0.008, 0.008);
    this.ⵠΔΔⲆ[619] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1.08, 1, 0.006, 0.006);
    this.ⵠΔΔⲆ[694] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1.02, 1, 0.008, 0.008);
    this.ⵠΔΔⲆ[695] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1.08, 1, 0.006, 0.006);
    this.ⵠⵠⲆⲆΔ = [];
    this.ⵠⵠⲆⲆΔ[0] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.1, 1, 0, 0.6, 0.6);
    this.ⵠⵠⲆⲆΔ[1] = new ΔⵠΔⵠ.ΔᐃΔⵠ(Ir, 0.4, 1, 0, 0.6, 0.6);
    this.ⵠⵠⲆⲆΔ[2] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.3, 1, 0, 0.6, 0.6);
    this.ⵠⵠⲆⲆΔ[3] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.8, 1, 0, 0.6, 0.6);
    this.ⵠⵠⲆⲆΔ[4] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.3, 1, 0, 0.6, 0.6);
    this.ⵠⵠⲆⲆΔ[5] = new ΔⵠΔⵠ.ΔᐃΔⵠ(Sl, 0.8, 1, 0, 0.6, 0.6);
    this.ⵠⵠⲆⲆΔ[6] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.5, 1, 0, 0.6, 0.6);
    this.ⵠⵠⲆⲆΔ[7] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9, 1, 0, 0.6, 0.6);
    this.ⵠⵠⲆⲆΔ[8] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.6, 1, 0, 0.6, 0.6);
    this.ⵠⵠⲆⲆΔ[9] = new ΔⵠΔⵠ.ΔᐃΔⵠ(Dh, 0.2, 1, 0, 0.6, 0.6);
    this.ⵠⵠⲆⲆΔ[10] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.6, 1, 0, 0.6, 0.6);
    this.ⵠⵠⲆⲆΔ[11] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.4, 1, 0, 0.6, 0.6);
    this.ⵠⵠⲆⲆΔ[12] = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.8, 1, 0, 0.6, 0.6);
    this.ⵠⵠⲆⲆΔ[13] = new ΔⵠΔⵠ.ΔᐃΔⵠ(Pi, 0.2, 1, 0, 0.6, 0.6);
    this.ⵠⵠⲆⲆΔ[14] = new ΔⵠΔⵠ.ΔᐃΔⵠ(Dh, 0.7, 1, 0, 0.6, 0.6);
  }
  function Wf(b, c, d, e, f, i, a, j, k, h) {
    this.type = b;
    this.ⵠⵠΔᐃ = c;
    this.id = d;
    this.x = e;
    this.y = f;
    this.angle = i;
    this.ⲆⲆᐃⲆᐃⲆᐃ = i;
    this.action = a;
    this.info = j;
    this.ⵠⵠΔᐃᐃ = h;
    this.r = {
      x: e,
      y: f
    };
    this.ⲆⲆⲆΔᐃ = k;
    if (zx) {
      this.Ⲇᐃᐃⵠ = zx.ⲆⵠᐃΔᐃΔⵠ * c + d;
    }
    switch (b) {
      case 0:
        this.ΔⵠⲆⵠ = zx.ⵠΔᐃΔ[this.ⵠⵠΔᐃ];
        this.ⲆΔⵠⵠ = this.ΔⵠⲆⵠ.ⲆΔⵠⵠ;
        this.ⵠⵠⵠΔⲆⵠⲆ = this.ΔⵠⲆⵠ.ⵠⵠⵠΔⲆⵠⲆ;
        this.ⵠΔⲆΔᐃ = this.ΔⵠⲆⵠ.ⵠΔⲆΔᐃ;
        this.ⵠⵠΔΔⵠ = this.ΔⵠⲆⵠ.ⵠⵠΔΔⵠ;
        this.Δᐃⵠᐃⵠⵠᐃ = -1000000;
        this.ⲆⲆⵠᐃⲆ = -1000000;
        this.ΔΔⵠⲆⵠ = -1000000;
        this.ⲆᐃⲆⲆⲆ = -1000000;
        this.ⲆΔⵠΔᐃΔΔ = -1000000;
        this.ⵠᐃΔᐃᐃⲆΔ = -1000000;
        this.ⲆᐃⵠⲆⵠ = -1000000;
        this.ΔΔΔⵠⵠ = zx.mode === 2 && this.ⲆΔⵠⵠ === 0;
        this.ᐃⲆΔΔΔⵠΔ = zx.mode === 3 && this.ⲆΔⵠⵠ === 0 && ro;
        this.ⲆᐃᐃᐃⲆᐃΔ = this.ΔΔΔⵠⵠ && this.ΔⵠⲆⵠ.ⲆⲆΔⵠⵠ === "  " ? Gn : ks;
        this.ⲆⵠΔΔⵠ = [];
        this.ⵠⲆⵠⵠⵠⲆⵠ = 0;
        this.ⵠⲆⲆΔ = Bk;
        this.ᐃΔⵠⲆⲆⲆⵠ = 0;
        this.ⲆⲆᐃᐃᐃⵠΔ = 0;
        this.ᐃⲆⵠⲆⵠ = [];
        this.r = {
          x: e,
          y: f
        };
        this.ⵠᐃᐃⲆ = mw;
        this.ⵠⵠᐃΔΔΔⵠ = kw;
        this.ᐃⵠΔⵠⲆ = 0;
        this.ΔⲆᐃⵠᐃ = 0;
        this.ΔᐃⲆᐃᐃ = 0;
        this.ᐃⵠΔⵠᐃΔⵠ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⲆᐃⵠⵠΔ = 0;
        this.ᐃΔⲆⵠΔᐃⲆ = 0;
        this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(hl, 0.6, 0.6, 0, 5, 3);
        this.ᐃⵠⵠⲆⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.6, 0.6, 0, 5, 3);
        this.freeze = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.6, 0.6, 0, 5, 3);
        this.ᐃⲆⵠⲆⲆⵠⵠ = new ΔⵠΔⵠ.ΔᐃΔⵠ(Dh, 0.6, 0.6, 0, 5, 3);
        this.ⵠΔΔΔᐃΔΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(_h, 0, 2.25, -1.5, 3.75, 7.5);
        this.ᐃⲆⵠⲆⲆⲆⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(true, 0, 7.5, -3, 22.5, 33.75);
        this.attack = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0, 0, -Math.PI / 3, 6, 9);
        this.ΔⲆᐃⵠⲆᐃᐃⲆⵠ = 0;
        this.ⵠᐃΔΔΔΔⵠ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.6, 0.6, 0, 1, 3);
        this.ⵠⵠΔⵠⲆᐃΔ = this.ⲆᐃᐃᐃⲆᐃΔ ? new ΔⵠΔⵠ.ΔᐃΔⵠ(true, 0, 2.25, -1.5, 2.75, 5.5) : 0;
        this.ⲆᐃΔᐃΔⵠΔ = 0;
        this.ΔΔⵠⵠΔⲆⲆ = 0;
        this.ᐃΔⲆⵠΔΔᐃ = [];
        this.ⵠΔⲆΔΔⵠΔ = [];
        this.text = [];
        this.label = [];
        this.ΔⵠᐃⵠΔⵠⵠ = pw;
        this.ⵠⲆⲆⵠⵠ = true;
        this.right = -1;
        this.ΔⲆᐃᐃⵠ = -1;
        this.action = 64;
        this.ⲆⲆΔΔⵠⵠᐃ = false;
        this.ⵠΔⲆᐃΔ = 0;
        this.ΔⲆⲆΔⵠ = false;
        this.bubbles = [];
        this.ⲆⲆⲆᐃⵠ = 0;
        this.ᐃᐃⵠᐃⲆ = -1;
        this.ⲆᐃⲆ = function (a) {
          if (this.info & 32768) {
            this.ⲆⲆΔΔⵠⵠᐃ = ae;
            this.info = this.info & -32769;
          } else {
            this.ⲆⲆΔΔⵠⵠᐃ = false;
          }
          if (this.info & 16384) {
            this.info = this.info & -16385;
            this.ⲆⲆⲆᐃⵠ = 1;
          } else {
            this.ⲆⲆⲆᐃⵠ = 0;
          }
          this.ⵠΔⲆᐃΔ = Math.floor(this.info / 128);
          this.info -= this.ⵠΔⲆᐃΔ * 128;
          if (this.info === 7 || this.ⲆᐃᐃᐃⲆᐃΔ) {
            this.right = -1;
          } else {
            this.right = this.info;
          }
          this.ⵠⲆⵠⵠⵠⲆⵠ = zx.ⲆΔⲆΔΔⵠⵠⲆᐃ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
          this.ΔⲆᐃᐃⵠ = this.ⵠⵠΔᐃᐃ & 255;
          if (this.right === 2) {
            this.ΔⲆⲆΔⵠ = ro;
          } else {
            this.ΔⲆⲆΔⵠ = cg;
          }
          if (Sf[this.right]) {
            this.ⲆΔⵠⲆΔ = $a;
          } else {
            this.ⲆΔⵠⲆΔ = false;
          }
          if (a & 256) {
            this.ⵠᐃΔΔΔΔⵠ.Ⲇⵠⵠ = false;
            this.ⵠᐃΔΔΔΔⵠ.ⲆⵠⲆ = 0.6;
          } else if (a & 4) {
            this.freeze.Ⲇⵠⵠ = false;
            this.freeze.ⲆⵠⲆ = 0.6;
          } else if (a & 128) {
            this.ᐃⵠⵠⲆⲆ.Ⲇⵠⵠ = D;
            this.ᐃⵠⵠⲆⲆ.ⲆⵠⲆ = 0.6;
          }
          if (a & 8) {
            this.ᐃⲆⵠⲆⲆⵠⵠ.Ⲇⵠⵠ = Oq;
            this.ᐃⲆⵠⲆⲆⵠⵠ.ⲆⵠⲆ = 0.6;
          }
          if (a & 2) {
            this.ⵠⵠᐃ.Ⲇⵠⵠ = rh;
            this.ⵠⵠᐃ.ⲆⵠⲆ = 0.6;
          }
          if (a & 16) {
            this.ΔⲆᐃⵠⲆᐃᐃⲆⵠ = 0.58;
            if (Dx.ⵠΔΔᐃᐃ && this.ᐃᐃⵠᐃⲆ !== -1) {
              Dx.ⵠΔᐃΔ[this.ᐃᐃⵠᐃⲆ].ⲆⲆΔⲆΔⲆⵠⵠⲆ(kx[this.right]);
            }
          }
        };
        this.ⲆᐃⲆ();
        break;
      case 23:
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(cg, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: false,
          angle: 0
        };
        this.ⵠⲆᐃΔⲆ = hw;
        this.ΔⵠᐃⲆᐃ = lv;
        this.ⵠᐃⵠᐃᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(Dh, 1, 1.23, 1.18, 0.01, 0.01);
        this.ΔⵠᐃⵠᐃΔᐃ = 0;
        this.ΔΔⵠΔᐃⵠⵠ = 0;
        this.ΔⵠΔᐃΔ = cv;
        break;
      case 22:
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(ks, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: ks,
          angle: 0
        };
        this.ⵠⲆᐃΔⲆ = zv;
        this.ΔⵠᐃⲆᐃ = vv;
        this.ⵠᐃⵠᐃᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(Cj, 1, 1.23, 1.18, 0.01, 0.01);
        this.ΔⵠᐃⵠᐃΔᐃ = 0;
        this.ΔΔⵠΔᐃⵠⵠ = 0;
        break;
      case 1:
      case 6:
        this.ⵠⲆᐃΔⲆ = bw;
        this.ΔⵠᐃⲆᐃ = xv;
        this.ᐃᐃΔᐃᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1.03, 0.98, 0.3, 0.3);
        this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⵠᐃⵠᐃᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(Cj, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: false,
          angle: 0
        };
        break;
      case 43:
        this.ⵠⲆᐃΔⲆ = Iv;
        this.ΔⵠᐃⲆᐃ = Pv;
        this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(rh, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: $h,
          angle: 0
        };
        this.ⲆⵠΔⲆ = [];
        for (var g = 0; g < 3; g++) {
          this.ⲆⵠΔⲆ.push({
            ⵠᐃᐃⲆ: qv,
            ⵠΔΔⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ⲆⵠΔⲆ[0].x = this.x - 16.5;
        this.ⲆⵠΔⲆ[0].y = this.y - 15.5;
        this.ⲆⵠΔⲆ[0].angle = this.angle;
        this.ⲆⵠΔⲆ[1].x = this.x + 36;
        this.ⲆⵠΔⲆ[1].y = this.y + 17;
        this.ⲆⵠΔⲆ[1].angle = this.angle;
        this.ⲆⵠΔⲆ[2].x = this.x - 18.5;
        this.ⲆⵠΔⲆ[2].y = this.y + 39;
        this.ⲆⵠΔⲆ[2].angle = this.angle;
        break;
      case 3:
        this.ⵠⲆᐃΔⲆ = iv;
        this.ΔⵠᐃⲆᐃ = Lv;
        this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: false,
          angle: 0
        };
        this.ⲆⵠΔⲆ = [];
        for (g = 0; g < 3; g++) {
          this.ⲆⵠΔⲆ.push({
            ⵠᐃᐃⲆ: ov,
            ⵠΔΔⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(ks, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ⲆⵠΔⲆ[0].x = this.x - 16.5;
        this.ⲆⵠΔⲆ[0].y = this.y - 15.5;
        this.ⲆⵠΔⲆ[1].x = this.x - 5.5;
        this.ⲆⵠΔⲆ[1].y = this.y + 7.5;
        this.ⲆⵠΔⲆ[2].x = this.x + 18;
        this.ⲆⵠΔⲆ[2].y = this.y - 5;
        break;
      case 77:
        this.ⵠᐃᐃⲆ = Qv;
        this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 70:
        this.ⵠᐃᐃⲆ = Uv;
        this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ks, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 71:
        this.ⵠᐃᐃⲆ = tv;
        this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠΔΔᐃⵠⵠⵠ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠᐃΔⵠⲆΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(rh, 0.6, 0.6, 0, 5, 3);
        this.ᐃⵠⵠⲆⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 67:
        this.ⵠᐃᐃⲆ = Hv;
        this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠΔΔᐃⵠⵠⵠ = new ΔⵠΔⵠ.ΔᐃΔⵠ(rh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠᐃΔⵠⲆΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(cg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.6, 0.6, 0, 5, 3);
        this.ᐃⵠⵠⲆⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 68:
        this.ⵠᐃᐃⲆ = iw;
        this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(Oq, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(nl, 0.6, 0.6, 0, 5, 3);
        break;
      case 90:
        this.ⵠᐃᐃⲆ = Kv;
        this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ks, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
        this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 91:
        this.ⵠΔⵠΔⵠ = this.info & 15;
        this.ⲆⲆᐃᐃᐃⵠΔ = this.ⵠⵠΔᐃᐃ & 1;
        this.ⲆⲆⵠⲆⲆⲆⵠ = 0;
        this.x = this.info;
        this.y = this.ⵠⵠΔᐃᐃ;
        this.ⵠᐃᐃⲆ = Vv;
        this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
        break;
      case 80:
      case 60:
      case 61:
      case 62:
      case 63:
      case 78:
      case 65:
      case 66:
      case 88:
        this.ⵠᐃᐃⲆ = Kv;
        this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 36:
        this.ⵠᐃᐃⲆ = $v;
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: false,
          angle: 0
        };
        break;
      case 34:
        this.ΔⵠᐃⲆᐃ = gw;
        this.ⵠᐃᐃⲆ = pv;
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(Sl, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: Dh,
          angle: 0
        };
        this.up = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1.03, 0.98, 0.1, 0.1);
        this.ᐃΔΔᐃᐃ = [];
        break;
      case 87:
        this.angle = Math.random() * Math.PI / 2;
      case 86:
      case 82:
        this.ⵠᐃᐃⲆ = Av;
        this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(kg, 0.6, 0.6, 0, 5, 3);
        break;
      case 81:
        this.ⵠᐃᐃⲆ = sv;
        this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(D, 0.6, 0.6, 0, 5, 3);
        break;
      case 69:
        this.scale = 1;
        this.ⵠᐃᐃⲆ = uv;
        this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⵠΔⵠ.ΔᐃΔⵠ(es, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(kn, 0.6, 0.6, 0, 5, 3);
        break;
      case 76:
        this.ᐃΔᐃᐃᐃ = 0;
        this.ΔⵠⲆΔ = [];
        this.ⵠΔⲆΔⵠᐃᐃ = 0;
        this.ⲆⵠᐃⵠΔᐃⵠ = rv;
        this.ⵠᐃᐃⲆ = Wv;
        this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⵠΔⵠ.ΔᐃΔⵠ(Oq, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 75:
        this.x = this.info;
        this.y = this.ⵠⵠΔᐃᐃ;
        this.scale = 1;
        this.ⲆⲆΔᐃ = 0;
        this.ⵠᐃᐃⲆ = yv;
        this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(Cj, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⵠΔⵠ.ΔᐃΔⵠ($h, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 74:
        this.x = this.info;
        this.y = this.ⵠⵠΔᐃᐃ;
        this.scale = 1;
        this.ⲆⲆΔᐃ = 0;
        this.ⵠᐃᐃⲆ = mv;
        this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⵠΔⵠ.ΔᐃΔⵠ(D, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ($h, 0.6, 0.6, 0, 5, 3);
        break;
      case 73:
        this.scale = 1;
        this.ⵠᐃᐃⲆ = cw;
        this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ks, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⵠΔⵠ.ΔᐃΔⵠ(ln, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(Ak, 0.6, 0.6, 0, 5, 3);
        break;
      case 72:
        this.scale = 1;
        this.ⵠᐃᐃⲆ = _v;
        this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(Ma, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⵠΔⵠ.ΔᐃΔⵠ(ln, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(es, 0.6, 0.6, 0, 5, 3);
        break;
      case 64:
        this.scale = 1;
        this.ⵠᐃᐃⲆ = Dv;
        this.ⵠΔΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(ln, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ΔⵠΔⵠ.ΔᐃΔⵠ($h, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠⵠᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 100:
        this.ⲆⵠΔⲆ = [];
        for (g = 0; g < 5; g++) {
          this.ⲆⵠΔⲆ.push({
            ⵠᐃᐃⲆ: ov,
            ⵠΔΔⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        switch (this.id % 3) {
          case 0:
            this.ⲆⵠΔⲆ[0].x = this.x - 20.5;
            this.ⲆⵠΔⲆ[0].y = this.y - 22.5;
            this.ⲆⵠΔⲆ[1].x = this.x - 35.5;
            this.ⲆⵠΔⲆ[1].y = this.y + 7.5;
            this.ⲆⵠΔⲆ[2].x = this.x + 7.5;
            this.ⲆⵠΔⲆ[2].y = this.y - 30;
            this.ⲆⵠΔⲆ[3].x = this.x + 22.5;
            this.ⲆⵠΔⲆ[3].y = this.y;
            this.ⲆⵠΔⲆ[4].x = this.x - 7.5;
            this.ⲆⵠΔⲆ[4].y = this.y + 14.5;
            break;
          case 1:
            this.ⲆⵠΔⲆ[0].x = this.x - 30.5;
            this.ⲆⵠΔⲆ[0].y = this.y - 22.5;
            this.ⲆⵠΔⲆ[1].x = this.x - 15.5;
            this.ⲆⵠΔⲆ[1].y = this.y + 7.5;
            this.ⲆⵠΔⲆ[2].x = this.x + 15.5;
            this.ⲆⵠΔⲆ[2].y = this.y - 30;
            this.ⲆⵠΔⲆ[3].x = this.x + 12.5;
            this.ⲆⵠΔⲆ[3].y = this.y + 5;
            this.ⲆⵠΔⲆ[4].x = this.x - 40.5;
            this.ⲆⵠΔⲆ[4].y = this.y + 14.5;
            break;
          case 2:
            this.ⲆⵠΔⲆ[0].x = this.x - 20.5;
            this.ⲆⵠΔⲆ[0].y = this.y - 20.5;
            this.ⲆⵠΔⲆ[1].x = this.x - 35.5;
            this.ⲆⵠΔⲆ[1].y = this.y + 15.5;
            this.ⲆⵠΔⲆ[2].x = this.x + 7.5;
            this.ⲆⵠΔⲆ[2].y = this.y - 17;
            this.ⲆⵠΔⲆ[3].x = this.x + 22.5;
            this.ⲆⵠΔⲆ[3].y = this.y + 5;
            this.ⲆⵠΔⲆ[4].x = this.x - 7.5;
            this.ⲆⵠΔⲆ[4].y = this.y + 1.5;
        }
        break;
      case 31:
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: Cj,
          angle: 0
        };
        this.ⵠᐃᐃⲆ = Ov;
        this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆᐃΔⵠΔⲆ = new ΔⵠΔⵠ.ΔᐃΔⵠ(cg, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
        break;
      case 40:
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: false,
          angle: 0
        };
        this.ⵠᐃᐃⲆ = Rv;
        this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 39:
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(rh, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: hl,
          angle: 0
        };
        this.ⵠᐃᐃⲆ = aw;
        this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 44:
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: hl,
          angle: 0
        };
        this.ⵠᐃᐃⲆ = kv;
        this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(Cj, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 55:
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(es, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: D,
          angle: 0
        };
        this.ⵠᐃᐃⲆ = Jv;
        this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 54:
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: false,
          angle: 0
        };
        this.ⵠᐃᐃⲆ = hv;
        this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 37:
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(kn, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: Dh,
          angle: 0
        };
        this.ⵠᐃᐃⲆ = Tv;
        this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 24:
        this.ⵠᐃᐃⲆ = Xv;
        this.rotate = 0;
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(es, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: Ak,
          angle: 0
        };
        break;
      case 25:
        this.ⵠᐃᐃⲆ = nv;
        this.rotate = 0;
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: false,
          angle: 0
        };
        break;
      case 26:
        this.ⵠᐃᐃⲆ = Yv;
        this.rotate = 0;
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: Jo,
          angle: 0
        };
        break;
      case 27:
        this.ⵠᐃᐃⲆ = Sv;
        this.rotate = 0;
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: false,
          angle: 0
        };
        break;
      case 28:
        this.ⵠᐃᐃⲆ = Cv;
        this.rotate = 0;
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: false,
          angle: 0
        };
        break;
      case 32:
        this.ⵠⲆᐃΔⲆ = ew;
        this.ΔⵠᐃⲆᐃ = jv;
        this.rotate = 0;
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: kn,
          angle: 0
        };
        break;
      case 38:
        this.ⵠᐃᐃⲆ = Kp;
        this.ⲆⲆᐃⲆ = Math.floor(this.x / 100);
        this.Ⲇᐃ = Math.floor(this.y / 100);
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: false,
          angle: 0
        };
        this.opacity = 1;
        this.ΔⵠΔᐃΔ = ev;
        break;
      case 42:
        this.ⵠᐃᐃⲆ = dv;
        this.ⵠᐃⵠᐃᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1.15, 1, 0.3, 0.3);
        this.color = 0;
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(kg, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: Cj,
          angle: 0
        };
        break;
      case 33:
      case 2:
      case 56:
      case 35:
      case 29:
        this.ⵠᐃᐃⲆ = Vp;
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: false,
          angle: 0
        };
        break;
      case 30:
        this.ⵠᐃᐃⲆ = Vp;
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(hl, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: nl,
          angle: 0
        };
        this.ΔⵠΔᐃΔ = ev;
        break;
      case 4:
      case 7:
      case 8:
      case 9:
      case 19:
      case 50:
      case 5:
      case 12:
      case 13:
      case 14:
      case 20:
      case 52:
        this.ⵠᐃᐃⲆ = Vp;
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: cg,
          angle: 0
        };
        this.ΔⵠΔᐃΔ = cv;
        break;
      case 41:
        this.ⵠᐃᐃⲆ = Vu;
        this.opacity = 1;
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(kn, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: false,
          angle: 0
        };
        var m = this.angle % (Math.PI / 2);
        if (Math.PI / 4 > m) {
          this.angle -= m;
        } else {
          this.angle += Math.PI / 2 - m;
        }
        break;
      case 79:
        this.ⵠᐃᐃⲆ = Yu;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 89:
        this.ⵠᐃᐃⲆ = Hp;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 83:
        this.ⵠᐃᐃⲆ = Zu;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 84:
        this.ⵠᐃᐃⲆ = Xu;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 85:
        this.ⵠᐃᐃⲆ = Op;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 11:
        this.ⲆᐃⲆ = function (a) {
          this.lock = this.info & 8192 ? 1 : 0;
          this.info = this.info & 8191;
          this.action = a;
        };
        this.ⵠᐃᐃⲆ = Tu;
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: false,
          angle: 0
        };
        this.lock = 0;
        this.ⲆᐃⲆ(this.action);
        break;
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 53:
      case 10:
      case 15:
      case 16:
      case 17:
      case 21:
      case 51:
        this.ⵠᐃᐃⲆ = Xp;
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(rh, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: false,
          angle: 0
        };
        this.ΔⵠΔᐃΔ = cv;
        break;
      case 18:
        this.ⵠⲆᐃΔⲆ = Nv;
        this.ⵠᐃᐃⲆ = fw;
        this.ΔⵠᐃⲆᐃ = dw;
        this.ΔⵠⲆΔ = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 1, 1.23, 1.18, 0.02, 0.02);
        this.ⵠᐃⵠᐃᐃ = new ΔⵠΔⵠ.ΔᐃΔⵠ(D, 1, 1.23, 1.18, 0.04, 0.04);
        this.ⵠⵠᐃ = {
          ⵠⲆᐃⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(kn, 1, 1, 0, 10, 10),
          ⲆᐃⲆ: false,
          angle: 0
        };
        this.ⲆᐃⲆ = function (a) {
          this.action = a;
        };
    }
  }
  function Gf() {
    Math.random();
    return "a";
  }
  function Gf() {
    Math.random();
    return "a";
  }
  function Vw() {
    Math.random();
    return "d";
  }
  function qf() {
    Math.random();
    return "o";
  }
  function qf() {
    Math.random();
    return "o";
  }
  function Ww() {
    Math.random();
    return "p";
  }
  function Xw() {
    this.ⵠΔⲆΔⲆ = function () { };
    this.ΔΔᐃᐃΔ = {
      ⲆᐃΔΔᐃ: 1,
      ⵠⵠΔᐃ: 1,
      open: false
    };
    this.ⵠⵠΔΔᐃ = {
      ⵠⵠΔᐃ: 1,
      ⲆᐃΔΔᐃ: -1,
      open: Oq
    };
    this.ⲆᐃⲆⵠ = {
      ΔΔᐃⲆⲆᐃΔ: 0,
      ΔⲆⲆΔᐃ: 0,
      ⵠⵠΔᐃ: 1,
      ⲆᐃΔΔᐃ: -1,
      open: es
    };
    this.ᐃᐃΔⲆ = {
      type: 0,
      ⲆᐃΔΔᐃ: -1,
      ⵠⵠⵠΔⵠΔⲆ: 0,
      open: false,
      ⵠⲆΔᐃⵠᐃⵠ: 0,
      ⵠⵠΔᐃ: 1,
      ⵠⲆᐃᐃⲆⵠⲆ: 0
    };
    this.ᐃⵠᐃᐃ = {
      ⵠⵠⵠΔⵠΔⲆ: 0,
      ⲆⲆⵠΔΔᐃᐃ: 0,
      ΔⲆⲆΔᐃ: 0,
      ⵠⵠΔᐃ: 1,
      ⲆᐃΔΔᐃ: -1,
      open: Oq
    };
    this.sign = {
      ⲆᐃΔΔᐃ: -1,
      open: false
    };
    this.ᐃⲆᐃⵠᐃ = {
      ⵠⵠΔᐃ: 1,
      ΔⲆⵠΔ: 0,
      ⲆᐃΔΔᐃ: -1,
      open: Cj
    };
    this.ΔⲆⲆΔⵠ = {
      enabled: hl,
      ⵠᐃᐃⵠᐃ: -1,
      label: false,
      now: -1,
      ⵠᐃᐃⲆ: nw
    };
    this.ⵠᐃⲆΔ = {
      id: -1,
      ΔⲆⵠΔ: 0,
      ⵠⵠΔᐃ: 1,
      ⲆᐃΔΔᐃ: -1,
      open: es,
      lock: nl,
      locked: false,
      ᐃᐃⲆᐃΔᐃⲆ: Oq,
      ΔΔΔⲆᐃⲆΔ: Ak
    };
    this.ⲆⲆΔᐃⵠ = re;
    this.reconnect = {
      rotate: 0,
      enabled: kg
    };
    this.key = ΔⵠΔⵠ.ⲆⵠᐃⵠΔᐃᐃ("key", ij.location.href);
    var a = ΔⵠΔⵠ.ⲆⵠᐃⵠΔᐃᐃ("egg", ij.location.href);
    if (a) {
      yx.ⲆΔⵠⵠ = parseInt(a);
    }
    this.beta = ij.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
    if (this.key && this.beta) {
      ᐃΔΔⵠ.set("starve_beta", this.key);
    } else if (this.beta) {
      this.key = ᐃΔΔⵠ.get("starve_beta");
    }
    this.ΔⲆⵠⵠᐃ = ᐃΔΔⵠ.get("starve_token") ? ᐃΔΔⵠ.get("starve_token") : ΔⵠΔⵠ.ΔⲆⵠΔᐃⵠᐃ(14);
    ij.baguette();
    var b = ij.kot2;
    function c() {
      this.seed = 1;
      this.ᐃᐃᐃΔΔΔⵠ = 2;
      this.ΔⵠᐃⵠΔⲆᐃ = 3;
      this.ⵠⵠⵠᐃⲆΔⲆΔⵠ = 1;
      this.ⵠⵠⵠΔΔᐃⲆⵠⵠ = 2;
      this.ⲆᐃᐃⲆⲆⲆⲆⲆⵠ = 3;
      this.ⵠⲆⲆⲆᐃᐃΔ = function (a) {
        this.seed = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆΔⲆΔᐃⲆⵠ = function (a) {
        this.ᐃᐃᐃΔΔΔⵠ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆᐃⲆⲆᐃⵠᐃ = function (a) {
        this.ΔⵠᐃⵠΔⲆᐃ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃⵠᐃᐃᐃᐃΔⵠᐃ = function (a) {
        this.ⵠⵠⵠᐃⲆΔⲆΔⵠ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ΔⲆⵠⵠΔⲆᐃᐃⲆ = function (a) {
        this.ⵠⵠⵠΔΔᐃⲆⵠⵠ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃⲆᐃᐃⲆᐃⵠⵠⲆ = function (a) {
        this.ⲆᐃᐃⲆⲆⲆⲆⲆⵠ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆⲆⵠⲆⵠⲆᐃ = function (c, e, f, i, j, k, a) {
        for (var m = 1; a > m;) {
          var n = f * m % ΔᐃᐃⵠᐃᐃΔ;
          var o = ⲆᐃⲆⵠΔⲆΔ[n];
          if (o < 0.1) {
            p += 50;
            m += 50;
          } else {
            var p = Math.floor(i * o + j);
            if (m > k && a > m) {
              var q = Math.random() > 0.5 ? Hx * -10 : Hx * 10;
              var r = p * e;
              this.ⵠⵠᐃⲆⵠⲆⵠ[n] = Math.max(-25, Math.min(25, this.ⵠⵠᐃⲆⵠⲆⵠ[n] + q));
              this.ⲆΔᐃⲆΔⲆΔ[n] = Math.max(-8, Math.min(8, this.ⲆΔᐃⲆΔⲆΔ[n] + q));
              if (r > 0) {
                Zo.beginPath();
                Zo.arc(m + Ax.ⲆⲆΔ.x + this.ⲆΔᐃⲆΔⲆΔ[n], c + this.ⵠⵠᐃⲆⵠⲆⵠ[n] - 20, r, 0, Math.PI * 2);
                if (zx.transition) {
                  var t = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
                  Zo.fillStyle = Hw(83, 156, 160, 236, 247, 249, t);
                } else {
                  Zo.fillStyle = Cs.ⲆΔⲆⵠΔⵠΔ[zx.time];
                }
                Zo.fill();
              }
            }
            m += p * 2;
          }
        }
      };
      this.ΔᐃᐃᐃΔⵠᐃ = function (c, e, f, i, j, k, a) {
        for (var m = 1; m < a;) {
          var n = f * m % ΔᐃᐃⵠᐃᐃΔ;
          var o = ⲆᐃⲆⵠΔⲆΔ[n];
          if (o < 0.1) {
            p += 50;
            m += 50;
          } else {
            var p = Math.floor(i * o + j);
            if (m > k && m < a) {
              var q = Math.random() > 0.5 ? Hx * -10 : Hx * 10;
              var r = e * p;
              this.ⵠΔᐃⲆᐃ[n] = Math.max(-25, Math.min(25, this.ⵠΔᐃⲆᐃ[n] + q));
              this.ⵠΔⲆᐃⵠ[n] = Math.max(-8, Math.min(8, this.ⵠΔⲆᐃⵠ[n] + q));
              if (r > 0) {
                Zo.beginPath();
                Zo.arc(c + this.ⵠΔᐃⲆᐃ[n] - 20, m + Ax.ⲆⲆΔ.y + this.ⵠΔⲆᐃⵠ[n], r, 0, Math.PI * 2);
                if (zx.transition) {
                  var t = zx.time ? 1 - zx.ᐃᐃⵠⵠ.ⲆⵠⲆ : zx.ᐃᐃⵠⵠ.ⲆⵠⲆ;
                  Zo.fillStyle = Hw(83, 156, 160, 236, 247, 249, t);
                } else {
                  Zo.fillStyle = Cs.ⲆΔⲆⵠΔⵠΔ[zx.time];
                }
                Zo.fill();
              }
            }
            m += p * 2;
          }
        }
      };
      this.ⲆⲆΔⲆᐃⲆⵠΔⵠ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - 0 - e - 2) / 200) === 0) {
          this.ⲆᐃⲆⲆᐃⵠᐃ();
        }
        Zo.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(h);
        this.ⲆⲆⵠⲆⵠⲆᐃ(d, h, this.ΔⵠᐃⵠΔⲆᐃ, 18, 16, f, g);
        Zo.globalAlpha = 1;
        if ((h = -(b - 250 - e + 500) / 150) === 0) {
          this.ⵠⲆⲆⲆᐃᐃΔ();
        }
        Zo.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(h);
        this.ⲆⲆⵠⲆⵠⲆᐃ(b, h, this.seed, 12, 10, f, g);
        Zo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.ⲆΔⲆΔᐃⲆⵠ();
          }
          Zo.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(h);
          this.ⲆⲆⵠⲆⵠⲆᐃ(c, h, this.ᐃᐃᐃΔΔΔⵠ, 6, 6, f, g);
          Zo.globalAlpha = 1;
        }
      };
      this.ⲆᐃᐃⵠΔΔΔᐃᐃ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        var h = -(-d + 0 + e + 2) / 200;
        if (h === 0) {
          this.ⲆᐃⲆⲆᐃⵠᐃ();
        }
        Zo.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(h);
        this.ⲆⲆⵠⲆⵠⲆᐃ(d, h, this.ΔⵠᐃⵠΔⲆᐃ, 18, 16, f, g);
        Zo.globalAlpha = 1;
        h = -(-b + 250 + e) / 150;
        if (h === 0) {
          this.ⵠⲆⲆⲆᐃᐃΔ();
        }
        Zo.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(h);
        this.ⲆⲆⵠⲆⵠⲆᐃ(b, h, this.seed, 12, 10, f, g);
        Zo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.ⲆΔⲆΔᐃⲆⵠ();
          }
          Zo.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(h);
          this.ⲆⲆⵠⲆⵠⲆᐃ(c, h, this.ᐃᐃᐃΔΔΔⵠ, 6, 6, f, g);
          Zo.globalAlpha = 1;
        }
      };
      this.ⲆΔⵠⵠΔⵠⲆΔⵠ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(-d + 0 + e + 2) / 200) === 0) {
          this.ⲆᐃⲆⲆᐃⵠᐃ();
        }
        Zo.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(h);
        this.ΔᐃᐃᐃΔⵠᐃ(d, h, this.ΔⵠᐃⵠΔⲆᐃ, 18, 16, f, g);
        Zo.globalAlpha = 1;
        if ((h = -(-b + 250 + e) / 150) === 0) {
          this.ⵠⲆⲆⲆᐃᐃΔ();
        }
        Zo.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(h);
        this.ΔᐃᐃᐃΔⵠᐃ(b, h, this.seed, 12, 10, f, g);
        Zo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.ⲆΔⲆΔᐃⲆⵠ();
          }
          Zo.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(h);
          this.ΔᐃᐃᐃΔⵠᐃ(c, h, this.ᐃᐃᐃΔΔΔⵠ, 6, 6, f, g);
          Zo.globalAlpha = 1;
        }
      };
      this.ᐃⲆΔΔⲆᐃⵠⵠᐃ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - 0 - e - 2) / 200) === 0) {
          this.ⲆᐃⲆⲆᐃⵠᐃ();
        }
        Zo.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(h);
        this.ΔᐃᐃᐃΔⵠᐃ(d, h, this.ΔⵠᐃⵠΔⲆᐃ, 18, 16, f, g);
        Zo.globalAlpha = 1;
        if ((h = -(b - 250 - e + 500) / 150) === 0) {
          this.ⵠⲆⲆⲆᐃᐃΔ();
        }
        Zo.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(h);
        this.ΔᐃᐃᐃΔⵠᐃ(b, h, this.seed, 12, 10, f, g);
        Zo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.ⲆΔⲆΔᐃⲆⵠ();
          }
          Zo.globalAlpha = ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(h);
          this.ΔᐃᐃᐃΔⵠᐃ(c, h, this.ᐃᐃᐃΔΔΔⵠ, 6, 6, f, g);
          Zo.globalAlpha = 1;
        }
      };
      this.w1 = {
        r: new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ⲆⲆⵠᐃⲆΔΔ, 0, 10, 0, 0, 200),
        ᐃᐃⲆᐃ: new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ΔᐃⵠᐃⵠⵠⲆ, 0, 10, 200, 200, 0)
      };
      this.w2 = {
        r: new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.Ⲇⵠᐃᐃᐃⵠᐃ, 0, 10, 0, 0, 150),
        ᐃᐃⲆᐃ: new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ᐃⵠⵠΔⵠ, 0, 10, 150, 150, 0)
      };
      this.w3 = {
        r: new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ᐃΔⵠΔᐃΔᐃ, 0, 10, 0, 0, 100),
        ᐃᐃⲆᐃ: new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ᐃⵠⵠΔⵠ, 0, 10, 100, 100, 0)
      };
      this.ᐃⵠᐃΔⲆⲆⵠᐃᐃ = function (a) {
        if (a.r.x === a.r.ΔⵠΔⲆⲆ) {
          if (a.ᐃᐃⲆᐃ.x === a.ᐃᐃⲆᐃ.ΔⵠΔⲆⲆ) {
            return a.r;
          } else {
            return a.ᐃᐃⲆᐃ;
          }
        } else {
          return a.r;
        }
      };
      this.Δᐃᐃ = function (a) {
        var b;
        if (a.r.ΔⵠΔⲆⲆ === a.r.x) {
          if (a.ᐃᐃⲆᐃ.x === a.ᐃᐃⲆᐃ.ΔⵠΔⲆⲆ) {
            a.r.ⵠⵠᐃᐃᐃⲆᐃ();
            a.ᐃᐃⲆᐃ.ⵠⵠᐃᐃᐃⲆᐃ();
            b = a.r;
          } else {
            b = a.ᐃᐃⲆᐃ;
          }
        } else {
          b = a.r;
        }
        b.ⲆᐃⲆᐃΔ(b.ΔⵠΔⲆⲆ);
        return b;
      };
      this.ⵠΔᐃⲆᐃ = [];
      this.ⵠΔⲆᐃⵠ = [];
      this.ⵠⵠᐃⲆⵠⲆⵠ = [];
      this.ⲆΔᐃⲆΔⲆΔ = [];
      this.ⵠΔⲆΔⲆ = function () {
        for (var a = 0; a < ΔᐃᐃⵠᐃᐃΔ; a++) {
          this.ⵠΔᐃⲆᐃ[a] = Math.floor(ⲆᐃⲆⵠΔⲆΔ[a] * 25);
          this.ⵠΔⲆᐃⵠ[a] = Math.floor(ⲆᐃⲆⵠΔⲆΔ[a] * 8);
          this.ⵠⵠᐃⲆⵠⲆⵠ[a] = Math.floor(ⲆᐃⲆⵠΔⲆΔ[a] * 25);
          this.ⲆΔᐃⲆΔⲆΔ[a] = Math.floor(ⲆᐃⲆⵠΔⲆΔ[a] * 8);
        }
        this.w1.r.x = this.w1.r.ΔⵠΔⲆⲆ;
        this.w2.r.ⵠⲆᐃⲆᐃ = 3.5;
        this.w3.r.ⵠⲆᐃⲆᐃ = 2;
      };
      this.ⵠΔⲆΔⲆ();
    }
    this.ΔⲆⵠⵠᐃ = b.substring(0, 6) + this.ΔⲆⵠⵠᐃ.substring(6);
    this.ⲆⵠᐃᐃⵠⲆᐃ = ᐃΔΔⵠ.get("starve_token_id") ? ᐃΔΔⵠ.get("starve_token_id") : "";
    this.id = 0;
    this.Ⲇᐃᐃⵠ = 0;
    this.ⲆΔᐃ = 0;
    this.ᐃⵠᐃᐃᐃΔΔ = {
      ᐃⲆⲆⲆⲆ: 0,
      ΔᐃΔⵠⲆ: 0,
      ⵠⵠⲆᐃⲆⲆⲆ: 0,
      ᐃⵠⲆⵠⲆⲆⵠ: ""
    };
    this.ᐃᐃⲆⵠΔᐃΔΔⵠ = {
      connected: 0,
      ⲆᐃⲆΔᐃ: new Date().getTime()
    };
    this.ᐃΔⵠⵠᐃ = [];
    this.ⵠⵠΔⵠΔⵠⵠ = function (a) {
      for (var b = 0; this.ᐃΔⵠⵠᐃ.length > b; b++) {
        if (this.ᐃΔⵠⵠᐃ[b] == a) {
          return Zr;
        }
      }
      return Pi;
    };
    this.ΔⵠⲆᐃⵠ = {
      ⵠᐃᐃⵠᐃ: 0,
      time: 0,
      value: 0,
      open: false,
      ⵠᐃᐃⲆ: function () {
        if (this.open) {
          var a = new Date().getTime();
          this.time = Math.floor((a - this.ⵠᐃᐃⵠᐃ) / 1000);
          if (this.time < 60) {
            Cx.ΔⵠⲆᐃⵠ.button.ⵠᐃᐃⲆ(Zo);
          } else {
            document.getElementById("shop_starterkit").style.display = "none";
            this.open = Oq;
          }
        }
      }
    };
    this.ⵠⲆⲆⲆⵠ = {
      id: -1,
      ⵠⵠΔᐃ: -1,
      lock: 0,
      timeout: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0, 1, 0, 1 / 30, 1),
      wait: false
    };
    this.ⲆΔΔΔⲆ = {
      timeout: new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0, 1, 0, 0.2, 1),
      wait: false
    };
    this.ⵠⲆᐃⲆΔ = {
      timeout: new ΔⵠΔⵠ.ΔᐃΔⵠ(kg, 0, 1, 0, 1, 1),
      wait: false
    };
    this.ⲆΔⵠⲆΔ = {
      timeout: new ΔⵠΔⵠ.ΔᐃΔⵠ(D, 0, 1, 0, 1 / 10, 1),
      wait: false
    };
    this.ⲆⲆΔ = new ΔⵠΔⵠ.ⵠΔΔⲆⲆΔΔ(ΔⵠΔⵠ.ⲆΔⲆΔᐃΔᐃ, 0, 0.4, 0, 0, ua, dq, ua, dq);
    this.ⲆⲆΔ.ⵠᐃᐃⵠᐃ = 0;
    this.ⲆⲆΔ.ΔΔᐃⵠΔΔΔ = 0;
    this.ⲆⲆΔ.ⲆᐃⲆ = function () {
      if (this.ΔΔᐃⵠΔΔΔ > 0) {
        this.ΔΔᐃⵠΔΔΔ -= Hx;
      } else {
        var a = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
        if (a) {
          this.ⵠᐃᐃⵠᐃ = 0;
          var b = Math.max(Math.min(ua - a.x, -2), 2 - zx.w + $o);
          var c = Math.max(Math.min(dq - a.y, -2), -zx.ⲆΔⲆ + 2 + sa);
          this.ⲆᐃⲆᐃΔ({
            x: b,
            y: c
          });
        } else {
          this.ⵠᐃᐃⵠᐃ += Hx;
          if (this.ⵠᐃᐃⵠᐃ > 3) {
            this.ⵠᐃᐃⵠᐃ = 0;
            if (!Ax.reconnect.enabled) {
              wx.ⲆᐃⵠⵠⲆⲆⲆⵠΔ();
            }
          }
        }
      }
    };
    this.ⲆⲆΔ.w = screen.width;
    this.ⲆⲆΔ.ⲆΔⲆ = screen.height;
    this.ⲆⲆΔ.ⲆⵠΔΔΔⵠⵠ = this.ⲆⲆΔ.w;
    this.ⲆⲆΔ.ⵠΔⲆⲆⵠΔⵠ = this.ⲆⲆΔ.ⲆΔⲆ;
    this.ⲆⲆΔ.rx = 0;
    this.ⲆⲆΔ.ry = 0;
    this.ⲆⲆΔ.ⲆⵠΔⲆΔΔᐃⲆᐃ = 0;
    this.ⲆⲆΔ.ᐃΔⲆᐃⲆΔⲆΔⵠ = 0;
    this.ⲆⲆΔ.ⲆΔΔⲆΔ = function (a, b) {
      this.x = -Math.min(Math.max(-zx.ᐃᐃⵠΔⲆᐃᐃ * 2, a - zx.ᐃᐃⵠΔⲆᐃᐃ - this.ⲆⵠΔΔΔⵠⵠ / 2), zx.w - this.ⲆⵠΔΔΔⵠⵠ);
      this.y = -Math.min(Math.max(-zx.ᐃⲆⵠⲆᐃⵠⲆ * 2, b - (zx.ᐃⲆⵠⲆᐃⵠⲆ + this.ⵠΔⲆⲆⵠΔⵠ) / 2), zx.ⲆΔⲆ - this.ⵠΔⲆⲆⵠΔⵠ + zx.ᐃⲆⵠⲆᐃⵠⲆ);
      this.ΔⵠΔⲆⲆ = this.x;
      this.ⲆΔΔⲆΔΔΔ = this.y;
    };
    this.control = {
      angle: 0,
      timeout: 0,
      ⵠᐃΔᐃⲆᐃⵠ: 0,
      ⵠΔΔΔ: 0,
      attack: 0,
      ⲆᐃⲆ: function () {
        var a = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
        if (a) {
          var b = {
            x: Ax.ⲆⲆΔ.x + a.x,
            y: Ax.ⲆⲆΔ.y + a.y
          };
        } else {
          b = eq;
        }
        var c = ΔⵠΔⵠ.ⵠΔᐃⵠⲆⲆᐃ(Fx.ⲆⲆⲆⵠ, b);
        var d = false;
        this.ⵠΔΔΔ += Hx;
        if (!Fx.state) {
          if (a && !(a.action & 16) && this.ⵠΔΔΔ > 0.2) {
            this.attack = 1;
            d = ge;
            this.ⵠΔΔΔ = 0;
            wx.ⵠΔΔⵠᐃⵠᐃΔᐃ(c);
          }
        }
        if (a) {
          a.angle = c;
          a.ⲆⲆᐃⲆᐃⲆᐃ = c;
        }
        if (!d) {
          this.timeout += Hx;
          if (this.timeout > 0.2) {
            this.timeout = 0;
            if (Math.abs(this.angle - c) > 0.005) {
              wx.ⵠᐃᐃⲆⲆᐃⲆΔᐃ(c);
              this.angle = c;
            }
          }
        }
        if (!Ax.Ⲇⵠⵠⵠᐃ.open && !Ax.ᐃⵠΔⵠΔ.open) {
          var e = 0;
          if (Ex.ΔⵠⵠᐃⲆᐃΔ()) {
            e |= 1;
          }
          if (Ex.ⵠⲆᐃᐃⲆΔᐃ()) {
            e |= 2;
          }
          if (Ex.ⵠⵠⵠΔⲆΔᐃ()) {
            e |= 4;
          }
          if (Ex.ᐃΔΔᐃΔΔᐃ()) {
            e |= 8;
          }
          if (this.ⵠᐃΔᐃⲆᐃⵠ != e) {
            wx.ᐃᐃⲆᐃᐃΔΔⵠⵠ(e);
          }
          this.ⵠᐃΔᐃⲆᐃⵠ = e;
        }
      }
    };
    this.ⲆᐃⵠⲆ = {
      c: 1,
      ᐃᐃⲆᐃ: 1,
      ⲆΔⲆ: 1,
      Δᐃᐃ: 1,
      Ⲇⵠⵠ: 1,
      ᐃᐃᐃΔⲆⵠᐃ: 1,
      ⲆΔⲆⵠᐃΔᐃ: new ΔⵠΔⵠ.ΔᐃΔⵠ(true, 0, 1, 0, 3, 3),
      ⵠᐃⲆᐃᐃⲆᐃ: new ΔⵠΔⵠ.ΔᐃΔⵠ(true, 0, 1, 0, 2, 2),
      ΔⵠⲆⵠⲆᐃⵠ: new ΔⵠΔⵠ.ΔᐃΔⵠ(true, 0, 1, 0, 3, 3),
      ⲆᐃⲆΔⲆᐃⵠ: new ΔⵠΔⵠ.ΔᐃΔⵠ(true, 0, 1, 0, 3, 3),
      ⵠⵠᐃᐃⲆⲆⲆ: new ΔⵠΔⵠ.ΔᐃΔⵠ(true, 0, 1, 0, 3, 3),
      ΔⲆⵠΔⵠⵠⵠ: new ΔⵠΔⵠ.ΔᐃΔⵠ(Pr, 0, 1, 0, 3, 3),
      ⵠᐃΔᐃⵠ: new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ⲆΔⲆΔᐃΔᐃ, 0, 1, 0, 0, 1),
      ᐃΔᐃᐃⵠ: new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ⲆΔⲆΔᐃΔᐃ, 0, 1, 0, 0, 1),
      ᐃⵠΔⵠᐃᐃΔ: new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ⲆΔⲆΔᐃΔᐃ, 0, 1, 0, 0, 1),
      ᐃΔⵠᐃⵠΔⲆ: new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ⲆΔⲆΔᐃΔᐃ, 0, 1, 0, 0, 1),
      ᐃⲆⲆⵠΔⲆⲆ: new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ⲆΔⲆΔᐃΔᐃ, 0, 1, 0, 0, 1),
      ᐃᐃⵠᐃⵠ: new ΔⵠΔⵠ.ⲆⲆⲆⲆΔ(ΔⵠΔⵠ.ⲆΔⲆΔᐃΔᐃ, 0, 1, 0, 0, 1),
      ⲆᐃⲆ: function () {
        this.ⲆΔⲆⵠᐃΔᐃ.ⲆᐃⲆ();
        this.ⵠᐃⲆᐃᐃⲆᐃ.ⲆᐃⲆ();
        this.ΔⵠⲆⵠⲆᐃⵠ.ⲆᐃⲆ();
        this.ⲆᐃⲆΔⲆᐃⵠ.ⲆᐃⲆ();
        this.ⵠⵠᐃᐃⲆⲆⲆ.ⲆᐃⲆ();
        this.ΔⲆⵠΔⵠⵠⵠ.ⲆᐃⲆ();
        this.ⵠᐃΔᐃⵠ.ⲆᐃⲆᐃΔ(this.c);
        this.ᐃΔᐃᐃⵠ.ⲆᐃⲆᐃΔ(this.ᐃᐃⲆᐃ);
        this.ᐃⵠΔⵠᐃᐃΔ.ⲆᐃⲆᐃΔ(this.ⲆΔⲆ);
        this.ᐃΔⵠᐃⵠΔⲆ.ⲆᐃⲆᐃΔ(this.Δᐃᐃ);
        this.ᐃⲆⲆⵠΔⲆⲆ.ⲆᐃⲆᐃΔ(this.Ⲇⵠⵠ);
        this.ᐃᐃⵠᐃⵠ.ⲆᐃⲆᐃΔ(this.ᐃᐃᐃΔⲆⵠᐃ);
      }
    };
    this.ⲆᐃⲆᐃΔⵠⵠ = Ak;
    this.ⲆⵠΔⵠΔⲆΔ = false;
    this.ΔΔΔⵠⵠ = Ir;
    this.ᐃⲆΔΔΔⵠΔ = false;
    this.ᐃΔΔⲆ = {
      max: 10,
      ⵠⲆⵠⵠᐃᐃΔ: 0,
      ⲆⲆⲆᐃⵠ: 0,
      ⵠᐃΔⵠ: [],
      ⵠΔᐃᐃᐃ: [],
      ⵠⲆⵠΔⲆⵠᐃ: function (a, b) {
        if (a === 1) {
          this.ⲆⲆⲆᐃⵠ = 6;
        }
        this.ⵠⲆⵠⵠᐃᐃΔ += b;
        this.max = 10 + this.ⵠⲆⵠⵠᐃᐃΔ + this.ⲆⲆⲆᐃⵠ;
      },
      ᐃⵠΔᐃⵠᐃⵠ: {
        item: -1,
        ᐃᐃ: null,
        ⲆᐃⵠⲆΔⵠⲆ: 0,
        ⵠᐃⵠᐃⵠⲆⲆ: 0,
        ⲆΔΔⵠⲆ: -1,
        ⲆⵠΔⵠΔ: -1,
        ⵠᐃΔⲆⵠ: function (a) {
          if (!!this.ⲆᐃⵠⲆΔⵠⲆ && (a.x !== this.ⲆΔΔⵠⲆ || a.y !== this.ⲆⵠΔⵠΔ)) {
            this.ⵠᐃⵠᐃⵠⲆⲆ = 1;
          }
        },
        start: function (a, b) {
          this.ⲆΔΔⵠⲆ = b.x;
          this.ⲆⵠΔⵠΔ = b.y;
          this.item = a;
          this.ᐃᐃ = Ax.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ[a].info.ᐃᐃ[2];
          this.ⲆᐃⵠⲆΔⵠⲆ = 1;
        },
        stop: function () {
          this.ⲆᐃⵠⲆΔⵠⲆ = 0;
          this.ⵠᐃⵠᐃⵠⲆⲆ = 0;
          this.ⲆΔΔⵠⲆ = -1;
          this.ⲆⵠΔⵠΔ = -1;
        },
        release: function () {
          var a = -1;
          var b = Ax.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ;
          var c = 0;
          if (this.ⲆᐃⵠⲆΔⵠⲆ && this.ⵠᐃⵠᐃⵠⲆⲆ) {
            for (var d = 0; d < b.length; d++) {
              if (b[d].info.state === df) {
                a = d;
                break;
              }
            }
            if (a !== -1 && a !== this.item && b[this.item]) {
              c = 1;
              var f = b[a];
              b[a] = b[this.item];
              b[this.item] = f;
              Cx.ᐃⲆΔⵠΔᐃⵠ();
            }
          }
          this.stop();
          return c;
        },
        ⵠᐃᐃⲆ: function (a, b) {
          if (this.ⲆᐃⵠⲆΔⵠⲆ && this.ⵠᐃⵠᐃⵠⲆⲆ) {
            Qp(Zo, this.ᐃᐃ, Math.floor(a - this.ᐃᐃ.width / 2), Math.floor(b - this.ᐃᐃ.height / 2));
          }
        }
      },
      ΔΔⵠⵠⵠΔΔᐃᐃ: function (a) {
        for (d = 0; d < a.length; d++) {
          if (this.ⵠᐃΔⵠ[a[d][0]] == a[d][1]) {
            return nq;
          }
        }
        return false;
      },
      ⵠⵠⲆᐃΔ: function (a) {
        for (var b = 0; b < this.ⵠΔᐃᐃᐃ.length; b++) {
          if (this.ⵠΔᐃᐃᐃ[b].id == a) {
            return b;
          }
        }
        return -1;
      },
      ΔᐃΔᐃᐃⲆᐃ: function (a, b) {
        this.ⵠᐃΔⵠ[a] = 0;
        this.ⵠΔᐃᐃᐃ.splice(b, 1);
        Cx.ᐃⲆΔⵠΔᐃⵠ();
      },
      ⲆⵠⵠᐃⵠⲆᐃ: function (a, b, c) {
        ⲆᐃⲆ = ie;
        this.ⵠᐃΔⵠ[a] = Math.max(0, this.ⵠᐃΔⵠ[a] - b);
        if (!this.ⵠᐃΔⵠ[a] && c >= 0) {
          this.ΔᐃΔᐃᐃⲆᐃ(a, c);
        }
      }
    };
    this.ᐃᐃΔⵠⵠ = {
      enabled: Dh,
      translate: {
        x: 0,
        y: 0
      },
      ⵠⵠⵠⵠΔⲆⵠ: function () {
        if (zx.mode == 1 && !Ax.ⲆⵠΔⵠΔⲆΔ) {
          Ax.ᐃᐃΔⵠⵠ.enabled = !Ax.ᐃᐃΔⵠⵠ.enabled;
          if (Ax.ᐃᐃΔⵠⵠ.enabled) {
            Cx.options.ΔⵠΔⵠⵠⲆⲆ.display = "inline-block";
          } else {
            Cx.options.ΔⵠΔⵠⵠⲆⲆ.display = "none";
          }
        }
      }
    };
    Cx.options.ΔⵠΔⵠⵠⲆⲆ.display = "none";
    this.ⲆᐃΔΔⵠ = {
      enabled: false,
      translate: {
        x: 0,
        y: 0
      },
      ⵠᐃᐃⵠᐃ: 0,
      ⵠⵠⵠⵠΔⲆⵠ: function () {
        Ax.ⲆᐃΔΔⵠ.enabled = !Ax.ⲆᐃΔΔⵠ.enabled;
        if (Ax.ⲆᐃΔΔⵠ.enabled) {
          Cx.options.ΔΔⲆᐃⵠⵠᐃ.display = "inline-block";
        } else {
          Cx.options.ΔΔⲆᐃⵠⵠᐃ.display = "none";
        }
      },
      ⲆᐃⲆ: function () {
        if (!!this.enabled && Ax.ᐃⵠⲆᐃ.id < 0 && !Cx.ΔΔⵠⲆ.open) {
          if (Ax.ⲆᐃⵠⲆ.ⲆΔⲆ < 0.35) {
            if (Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[110]) {
              wx.ⵠⲆⲆᐃⲆ(110, Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(110));
            } else if (Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[192]) {
              wx.ⵠⲆⲆᐃⲆ(192, Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(192));
            } else if (Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[196]) {
              wx.ⵠⲆⲆᐃⲆ(196, Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(196));
            } else if (Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[189]) {
              wx.ⵠⲆⲆᐃⲆ(189, Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(189));
            } else if (Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[207]) {
              wx.ⵠⲆⲆᐃⲆ(207, Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(207));
            } else if (Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[205]) {
              wx.ⵠⲆⲆᐃⲆ(205, Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(205));
            } else if (Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[209]) {
              wx.ⵠⲆⲆᐃⲆ(209, Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(209));
            } else if (Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[143]) {
              wx.ⵠⲆⲆᐃⲆ(143, Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(143));
            } else if (Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[117]) {
              wx.ⵠⲆⲆᐃⲆ(117, Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(117));
            } else if (Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[138]) {
              wx.ⵠⲆⲆᐃⲆ(138, Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(138));
            } else if (Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[133]) {
              wx.ⵠⲆⲆᐃⲆ(133, Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(133));
            } else if (Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[145]) {
              wx.ⵠⲆⲆᐃⲆ(145, Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(145));
            } else if (Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[136]) {
              wx.ⵠⲆⲆᐃⲆ(136, Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(136));
            } else if (Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[197]) {
              wx.ⵠⲆⲆᐃⲆ(197, Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(197));
            }
          } else if (Ax.ⲆᐃⵠⲆ.Δᐃᐃ < 0.35 && Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[127]) {
            wx.ⵠⲆⲆᐃⲆ(127, Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(127));
          }
        }
      }
    };
    Cx.options.ΔΔⲆᐃⵠⵠᐃ.display = "none";
    this.ᐃⵠⲆᐃ = {
      id: -1,
      ᐃΔΔᐃ: -1,
      timeout: new ΔⵠΔⵠ.ΔᐃΔⵠ($h, 0, 1, 0, 1, 1),
      ᐃΔⵠᐃΔ: Ir,
      ᐃⵠⲆⲆ: -1,
      mode: 0,
      label: [],
      ᐃΔᐃⲆᐃ: [],
      ⲆΔⵠΔⲆ: false,
      ᐃᐃΔᐃᐃ: false,
      ⲆᐃᐃΔᐃΔᐃ: Ir,
      ⵠⵠΔΔᐃ: es,
      ⵠⲆⲆⵠΔᐃΔΔΔ: function () {
        this.mode = this.mode === 0 ? 1 : 0;
      },
      ᐃⵠⲆᐃᐃᐃⵠᐃΔ: function (a) {
        this.ⲆΔⵠΔⲆ = a;
        var b = Cx.ΔΔⵠⲆ;
        if (b.open) {
          b.ⲆⵠΔⵠΔᐃⲆ(b.button);
        }
        this.ⲆᐃⲆ();
      },
      ⲆᐃᐃⲆⵠⵠΔΔⲆ: function (a) {
        var b = Nt[a];
        this.id = a;
        this.ᐃΔⵠᐃΔ = true;
        zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
        this.timeout.ⵠᐃⵠΔⵠᐃⵠ = b.time * 8;
        this.ᐃΔΔᐃ = b.ᐃΔΔᐃ;
      },
      ΔᐃⲆΔᐃⵠΔⵠⲆ: function (a) {
        var b = Nt[a];
        this.id = a;
        this.ᐃΔⵠᐃΔ = Zr;
        var c = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
        if (c && c.right == 28) {
          this.timeout.ⵠᐃⵠΔⵠᐃⵠ = b.time * 3;
        } else {
          this.timeout.ⵠᐃⵠΔⵠᐃⵠ = b.time;
        }
        this.ᐃΔΔᐃ = b.ᐃΔΔᐃ;
        for (var d = 0; d < b.r.length; d++) {
          var e = b.r[d];
          Ax.ᐃΔΔⲆ.ⲆⵠⵠᐃⵠⲆᐃ(e[0], e[1], Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(e[0]));
        }
        Cx.ᐃⲆΔⵠΔᐃⵠ();
      },
      ⲆᐃⲆ: function () {
        this.ᐃΔᐃⲆᐃ = [];
        if (Cx.ⲆⲆⵠⲆᐃ.ᐃⵠⲆᐃ === 1) {
          Cx.ⲆⲆⵠⲆᐃ.display = 0;
        }
        for (var a in Nt) {
          var b = Nt[a];
          var c = Qo;
          if (b.r) {
            for (var d = 0; d < b.r.length; d++) {
              if (Ax.ᐃΔΔⲆ.max >= 16 && b.id === 100) {
                c = Ak;
                break;
              }
              if (b.w > this.ⲆΔⵠΔⲆ || b.f > this.ᐃᐃΔᐃᐃ || b.Ⲇⵠⵠ > this.ⲆᐃᐃΔᐃΔᐃ || b.e > this.ⵠⵠΔΔᐃ) {
                c = false;
                break;
              }
              var f = b.r[d];
              if (!Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[f[0]] || Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[f[0]] < f[1]) {
                c = false;
                break;
              }
            }
            if (c) {
              this.ᐃΔᐃⲆᐃ.push(Cx.ᐃᐃⵠ[b.id]);
            }
          }
        }
        Cx.ᐃᐃⲆΔΔⲆⵠ();
        Cx.ⲆΔᐃΔᐃΔᐃ();
        Cx.ⲆΔⵠⵠᐃⵠᐃ();
        Cx.ⵠᐃⲆⲆΔΔⵠ();
        Cx.ᐃⵠΔᐃⲆⵠᐃ();
        Cx.ⵠᐃⵠⲆⵠΔⲆ();
        Cx.sign.ΔᐃᐃᐃⵠⲆⵠ();
      },
      ⵠⵠᐃᐃᐃⲆᐃ: function () {
        this.id = -1;
        this.ᐃΔⵠᐃΔ = $h;
        this.timeout.ⲆⵠⲆ = 0;
        this.timeout.Ⲇⵠⵠ = false;
        this.ⲆᐃⲆ();
      }
    };
    this.ΔⵠΔᐃⲆⲆⵠ = {
      message: undefined,
      ⵠᐃᐃⲆ: qw
    };
    this.alert = {
      timeout: new ΔⵠΔⵠ.ΔᐃΔⵠ(Dh, 1, 1, 0, 4, 0.3),
      text: "",
      label: null,
      ⵠᐃᐃⲆ: ow,
      list: []
    };
    this.ᐃⲆᐃⲆΔ = {
      ΔⲆ: document.createElement("canvas"),
      ᐃⲆⵠΔⲆ: [],
      ⲆᐃⲆ: true,
      translate: {
        x: 0,
        y: 0
      },
      sort: function () {
        var a = [];
        for (var b = zx.ⵠΔᐃΔ, c = 0; c < b.length; c++) {
          if (b[c].ⲆⲆΔᐃⵠ) {
            a.push({
              id: c,
              ⵠᐃᐃⵠ: b[c].ᐃⲆⲆⲆⲆ
            });
          }
        }
        a.sort(function (a, b) {
          return b.ⵠᐃᐃⵠ - a.ⵠᐃᐃⵠ;
        });
        this.ᐃⲆⵠΔⲆ = [];
        for (c = 0; c < a.length && c < 10; c++) {
          this.ᐃⲆⵠΔⲆ.push(a[c].id);
        }
        this.ⲆᐃⲆ = true;
      },
      ⵠΔⲆΔⲆ: function (a) {
        for (var b = zx.ⵠΔᐃΔ, c = 0; c < b.length; c++) {
          b[c].ᐃⲆⲆⲆⲆ = 0;
        }
        b[Ax.id].ᐃⲆⲆⲆⲆ = ΔⵠΔⵠ.ⲆᐃΔⵠΔᐃⲆ(a[1]);
        this.ᐃⲆⵠΔⲆ = [];
        for (c = 2; c < a.length; c += 2) {
          this.ᐃⲆⵠΔⲆ.push(a[c]);
          b[a[c]].ᐃⲆⲆⲆⲆ = ΔⵠΔⵠ.ⲆᐃΔⵠΔᐃⲆ(a[c + 1]);
        }
        this.ⲆᐃⲆ = nq;
      }
    };
    this.ᐃⲆᐃⲆΔ.ΔⲆ.width = fq * 180;
    this.ᐃⲆᐃⲆΔ.ΔⲆ.height = fq * 300;
    this.ᐃⲆᐃⲆΔ.Ⲇ = this.ᐃⲆᐃⲆΔ.ΔⲆ.getContext("2d");
    this.ᐃⵠΔⵠΔ = {
      open: false,
      input: document.getElementById("commandInput"),
      ⵠⲆⲆⲆᐃⵠⲆ: document.getElementById("commandsBox"),
      style: document.getElementById("commandMainBox").style,
      ⲆⵠⲆᐃⲆⵠᐃⵠⵠ: function (a) {
        this.ⵠⲆⲆⲆᐃⵠⲆ.innerHTML += a;
      },
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor($o / 2 - 300) + "px";
        this.style.top = Math.floor(sa / 2 - 250) + "px";
      },
      ᐃΔⲆᐃⵠⵠΔᐃΔ: function () {
        this.ⵠⲆⲆⲆᐃⵠⲆ.innerHTML = "";
      },
      ⲆⵠᐃΔⲆ: function () {
        this.open = Ir;
        this.style.display = "none";
      },
      ᐃᐃΔⲆⲆ: function (a) {
        var b = "<table class=\"tableList\">";
        for (var c = 0; c < a.length; c++) {
          if (c % 3 === 0) {
            b += "<tr>";
          }
          b += "<td class=\"tableList\">" + a[c] + "</td>";
          if ((c + 1) % 3 == 0 || c + 1 === a.length) {
            b += "</tr>";
          }
        }
        return b += "</table>";
      },
      ⵠⵠΔⵠⲆ: function (a, b, c, d) {
        d = d || "";
        var f = "<div class=commandWritten>" + (a = a || "");
        f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
        f += (c = c || "") + "</div>" + d + "</div>";
        this.ⲆⵠⲆᐃⲆⵠᐃⵠⵠ(f);
        this.ⵠⲆΔΔⲆⲆⲆⲆⲆ();
      },
      ⵠⲆΔΔⲆⲆⲆⲆⲆ: function () {
        this.ⵠⲆⲆⲆᐃⵠⲆ.scrollTop = this.ⵠⲆⲆⲆᐃⵠⲆ.scrollHeight;
      },
      ᐃΔᐃⲆⲆⲆⵠ: function (b) {
        switch (b) {
          case "clean":
            this.ᐃΔⲆᐃⵠⵠΔᐃΔ();
            return true;
          case "list":
            var c = "";
            const a = ij.document.createElement("div");
            for (var d = zx.ⵠΔᐃΔ, f = 0; f < d.length; f++) {
              var g = d[f];
              if (g.ⲆⲆΔᐃⵠ) {
                a.innerText = g.ⲆⲆΔⵠⵠ;
                c += a.innerHTML + " <span style=\"color:green\">#" + f + "</span><br />";
              }
            }
            this.ⵠⵠΔⵠⲆ("list", 1, "List all connected players", c);
            return true;
          case "weapon-list":
            this.ⵠⵠΔⵠⲆ("Weapons", 1, "List all weapons in the game", this.ᐃᐃΔⲆⲆ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow", "wood_axe", "stone_axe", "gold_axe", "diamond_axe", "amethyst_axe", "reidite_axe"]));
            return true;
          case "tool-list":
            this.ⵠⵠΔⵠⲆ("Tools", 1, "List all tools in the game", this.ᐃᐃΔⲆⲆ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
            return Qo;
          case "survival-list":
            this.ⵠⵠΔⵠⲆ("Survival Items", 1, "List all survival items in the game", this.ᐃᐃΔⲆⲆ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
            return true;
          case "resource-list":
            this.ⵠⵠΔⵠⲆ("Resources", 1, "List all resources in the game", this.ᐃᐃΔⲆⲆ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
            return true;
          case "food-list":
            this.ⵠⵠΔⵠⲆ("Food", 1, "List all food in the game", this.ᐃᐃΔⲆⲆ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
            return true;
          case "hat-list":
            this.ⵠⵠΔⵠⲆ("Hats", 1, "List all hats in the game", this.ᐃᐃΔⲆⲆ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
            return ge;
          case "building-list":
            this.ⵠⵠΔⵠⲆ("Buildings", 1, "List all buildings in the game", this.ᐃᐃΔⲆⲆ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
            return true;
          case "biome-list":
            this.ⵠⵠΔⵠⲆ("Biomes list", 1, "List all available biomes in the game", this.ᐃᐃΔⲆⲆ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
            return true;
          case "help-config":
            this.ⵠⵠΔⵠⲆ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
            return true;
          case "pos":
            d = zx.ⲆΔΔ[0];
            f = 0;
            for (; f < d.length; f++) {
              var e = d[f];
              if (e.ⵠⵠΔᐃ === Ax.id) {
                this.ⵠⵠΔⵠⲆ("pos", 1, "Your position is " + Math.floor(e.x / 100) + ":" + Math.floor(e.y / 100));
                return true;
              }
            }
            break;
          case "help-admin":
            this.ⵠⵠΔⵠⲆ("help-admin", 1, "List all available commands for admin only", this.ᐃᐃΔⲆⲆ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
            return true;
          case "help":
            this.ⵠⵠΔⵠⲆ("help", 1, "List all available commands", this.ᐃᐃΔⲆⲆ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
            return B;
        }
        return Jo;
      },
      ⲆΔΔΔᐃΔⵠᐃⵠ: function () {
        if (!this.open) {
          this.open = ge;
          this.style.display = "inline-block";
          this.input.focus();
        }
      },
      ⵠΔⵠⲆᐃⵠᐃ: function () {
        var a = this.input.value;
        if (a && a.length > 0) {
          if (!this.ᐃΔᐃⲆⲆⲆⵠ(a)) {
            wx.ⲆⲆⵠⵠΔⲆᐃᐃᐃ(this.input.value);
          }
          this.input.value = "";
        }
      }
    };
    this.Ⲇⵠⵠⵠᐃ = {
      open: $h,
      input: document.getElementById("chat_input"),
      style: document.getElementById("chat_block").style,
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor($o / 2 - 150) + "px";
        this.style.top = Math.floor(sa / 2 + 80) + "px";
      },
      ⲆⵠᐃΔⲆ: function () {
        this.open = Pi;
        this.style.display = "none";
        this.input.value = "";
      },
      prefix: "!",
      cmd: {
        hud: function (a) {
          if (a === "off") {
            var b = "Enter \"!hud\" without the quotes to restore the HUD";
            if (Ax.alert.text) {
              Ax.alert.list.push(b);
            } else {
              Ax.alert.text = b;
            }
            Cx.ΔⵠᐃⵠᐃⵠⲆ = 0;
          } else {
            Cx.ΔⵠᐃⵠᐃⵠⲆ = 1;
          }
        }
      },
      ᐃΔᐃⲆⲆⲆⵠ: function (a) {
        if (a.charAt(0) == this.prefix) {
          var b = "";
          var c = "";
          for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
            b += a.charAt(d);
          }
          for (d++; d < a.length; d++) {
            c += a.charAt(d);
          }
          var e = this.cmd[b];
          if (e) {
            e(c);
          }
          return ae;
        }
        return false;
      },
      ⵠΔΔᐃᐃ: function () {
        if (this.open) {
          this.open = false;
          this.style.display = "none";
          var a = this.input.value;
          if (a) {
            if (!this.ᐃΔᐃⲆⲆⲆⵠ(a)) {
              wx.ᐃⲆⵠⲆΔΔᐃᐃΔ(this.input.value);
            }
            this.input.value = "";
          }
        } else {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      }
    };
    this.ΔᐃⲆᐃⲆⵠΔ = {
      ⲆⵠΔⲆⵠ: [],
      ⲆᐃⲆ: function (a) {
        a.y += Hx * 80 * a.ⵠᐃᐃⵠ;
        a.x += Hx * 80 * a.c;
        a.ᐃΔᐃᐃⵠ -= Hx / 6;
        if (a.ᐃΔᐃᐃⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + Hx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - Hx * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min(Cs.ⲆⵠⵠΔⵠⵠᐃ * ($o / 1366), Cs.ⲆⵠⵠΔⵠⵠᐃ + 10) * Math.max(Math.min(zx.ⲆⲆⵠᐃⲆ + 1000, 3000) / 3000, 0));
        if (this.ⲆⵠΔⲆⵠ.length < c) {
          var d = Math.floor(Math.random() * Cs.ᐃᐃⵠⲆΔᐃⵠ);
          var e = -Ax.ⲆⲆΔ.x + Math.floor(Math.random() * Ax.ⲆⲆΔ.w);
          var f = -Ax.ⲆⲆΔ.y + Math.floor(Math.random() * Ax.ⲆⲆΔ.ⲆΔⲆ);
          var g = Math.random(Math.PI);
          this.ⲆⵠΔⲆⵠ.push(new jf(d, e, f, g));
        }
      }
    };
    this.ⵠΔᐃᐃⵠΔⲆ = 0;
    this.ⵠᐃᐃⵠⵠ = 0;
    this.ᐃⲆΔΔⲆ = {
      ⲆⵠΔⲆⵠ: [],
      ᐃᐃᐃⵠΔ: 0,
      ᐃΔᐃⵠΔ: 0,
      ⲆᐃⲆ: function (a) {
        a.y += Hx * (200 + this.ᐃΔᐃⵠΔ * 800) * a.ⵠᐃᐃⵠ;
        a.x += Hx * (200 + this.ᐃΔᐃⵠΔ * 800) * a.c;
        a.ᐃΔᐃᐃⵠ -= Hx / 6;
        if (a.ᐃΔᐃᐃⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + Hx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - Hx * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min((this.ᐃΔᐃⵠΔ + 0.1) * Cs.ⵠⲆΔⵠⵠΔⵠ * ($o / 1366), (this.ᐃΔᐃⵠΔ + 0.1) * Cs.ⵠⲆΔⵠⵠΔⵠ + 10) * Math.max(Math.min(zx.ⲆᐃⲆⲆⲆ + 1000, 3000) / 3000, 0));
        if (this.ⲆⵠΔⲆⵠ.length < c) {
          var d = Math.floor(Math.random() * Cs.ᐃᐃⵠⲆΔᐃⵠ);
          var e = -Ax.ⲆⲆΔ.x + Math.floor(Math.random() * Ax.ⲆⲆΔ.w);
          var f = -Ax.ⲆⲆΔ.y + Math.floor(Math.random() * Ax.ⲆⲆΔ.ⲆΔⲆ);
          var g = Math.random(Math.PI);
          if (Ax.ᐃⲆΔΔⲆ.ᐃᐃᐃⵠΔ !== 0) {
            e -= Ax.ⲆⲆΔ.w / 2;
          }
          this.ⲆⵠΔⲆⵠ.push(new jf(d, e, f, g));
        }
      }
    };
    this.ΔⵠⲆⲆⵠ = {
      ⲆⵠΔⲆⵠ: [],
      ᐃᐃᐃⵠΔ: 0,
      ᐃΔᐃⵠΔ: 0,
      ⲆᐃⲆ: function (a) {
        if (Ex.ⵠⵠⵠΔⲆΔᐃ()) {
          a.y += Hx * a.ⲆⲆⲆΔᐃ * (5.5 + this.ᐃΔᐃⵠΔ * 10);
        } else {
          a.y += Hx * a.ⲆⲆⲆΔᐃ * (5 + this.ᐃΔᐃⵠΔ * 10);
        }
        a.ᐃΔᐃᐃⵠ -= Hx / 2;
        if (Ex.ΔⵠⵠᐃⲆᐃΔ()) {
          a.x += Hx * (100 + this.ᐃΔᐃⵠΔ * 400);
        } else if (Ex.ⵠⲆᐃᐃⲆΔᐃ()) {
          a.x -= Hx * (130 - this.ᐃΔᐃⵠΔ * 400);
        } else {
          a.x -= Hx * (30 - this.ᐃΔᐃⵠΔ * 400);
        }
        if (a.ᐃΔᐃᐃⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + Hx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - Hx * 5, 0);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ᐃΔᐃⵠΔ * 1.5 + 0.5) * Cs.ΔⲆⲆⵠⵠΔⵠ * ($o / 1366), (this.ᐃΔᐃⵠΔ * 1.5 + 0.5) * Cs.ΔⲆⲆⵠⵠΔⵠ + 10) * Math.max(Math.min(zx.ΔΔⵠⲆⵠ + 1000, 3000) / 3000, 0));
        if (this.ⲆⵠΔⲆⵠ.length < b) {
          var c = Math.floor(Math.random() * Cs.ⲆΔΔⲆⲆⲆⲆ);
          var d = -Ax.ⲆⲆΔ.x + Math.floor(Math.random() * Ax.ⲆⲆΔ.w);
          var e = -Ax.ⲆⲆΔ.y + Math.floor(Math.random() * 400 * fq - fq * 200);
          this.ⲆⵠΔⲆⵠ.push(new jf(c, d, e, 0));
        }
      }
    };
    this.ΔΔⲆΔ = [];
    for (var d = 0; d < 4; d++) {
      this.ΔΔⲆΔ.push(new c());
    }
  }
  function Uf() {
    Math.random();
    return "i";
  }
  function Yf() {
    Math.random();
    return "C";
  }
  function Kf() {
    Math.random();
    return "g";
  }
  function Vf() {
    Math.random();
    return "n";
  }
  function Xf() {
    Math.random();
    return "e";
  }
  function Zf() {
    Math.random();
    return "r";
  }
  function $f() {
    Math.random();
    return "t";
  }
  function $f() {
    Math.random();
    return "t";
  }
  function Ww() {
    Math.random();
    return "p";
  }
  function Yw() {
    Math.random();
    return "s";
  }
  ⲆⵠᐃⵠᐃᐃⲆᐃᐃ = 1;
  function Zw() {
    ΔⵠΔⵠ.ⵠⵠⵠⲆΔΔΔ("https://twitter.com/intent/tweet?text=I%20survived%20" + Ax.ⲆΔᐃ + "%20days%20with%20" + Ax.ᐃⵠᐃᐃᐃΔΔ.ᐃⲆⲆⲆⲆ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
  }
  function $w() {
    ΔⵠΔⵠ.ⵠⵠⵠⲆΔΔΔ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
  }
  function _w(b, c, d, e) {
    const f = (b + 8959) % 65429;
    const i = ~(c & 5136) & c | ~(c & 5136) & 5136;
    const a = (d | 50465) & ~(d & 50465);
    const j = ((e + 51219) * 214013 + 2531011) % 4294967296;
    const k = function (b, c, d, e) {
      const f = (12345 + (b + 33066) * 1103515245) % 2147483648;
      const g = (24 << (d >> 8 & 255)) + (16 << (d >> 16 & 255)) + (0 << (d & 255)) + (8 << (d >> 24 & 255));
      const a = ~(e & 46237) & 46237 | ~(e & 46237) & e;
      const i = xo(f, (31734 + c) % 65350);
      const j = Fo(g, a, f);
      return (16 << ((i ^ j) & 255)) + (8 << ((i ^ j) >> 16 & 255)) + (24 << ((i ^ j) >> 8 & 255)) + (0 << ((i ^ j) >> 24 & 255));
    }(f, i, a, j);
    const h = $r(f, i, a, j, f, i);
    return (16 << ((k ^ h) >> 24 & 255)) + (0 << ((k ^ h) >> 8 & 255)) + (8 << ((k ^ h) >> 16 & 255)) + (24 << ((k ^ h) & 255));
  }
  function ax(a, b, c, d) {
    fk(oh, a, b, c, d);
    const e = mo(sh[0], sh[1], sh[2], sh[3], sh[0], sh[1]);
    Bo(sh[2], sh[3], sh[0]);
    return e ^ 28446;
  }
  function bx(c, d) {
    var f = this;
    this.ΔⲆ = c;
    this.Ⲇ = d;
    if (ij.navigator.userAgent.indexOf("Edge") > -1) {
      this.ⵠᐃⵠΔΔΔᐃ = "default";
      this.ⲆⲆⵠⲆΔⵠⵠ = "pointer";
    } else {
      this.ⵠᐃⵠΔΔΔᐃ = "url('img/cursor0.png'), default";
      this.ⲆⲆⵠⲆΔⵠⵠ = "url('img/cursor1.png'), pointer";
    }
    this.ΔⵠᐃⵠᐃⵠⲆ = 1;
    this.ⵠⲆⲆΔᐃΔⲆ = 1;
    this.ⲆᐃΔᐃⲆΔᐃ = 1;
    this.ⲆΔⲆⲆⲆΔⲆ = 1;
    this.ΔⲆΔΔᐃᐃⲆⵠΔ = {
      id: document.getElementById("team_box"),
      style: document.getElementById("team_box").style,
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(ua - 125) + "px";
        this.style.top = "110px";
      }
    };
    this.ⲆΔⵠⲆ = {
      ᐃⵠⵠᐃⵠΔᐃ: pf(60, 60, 0, ᐃΔ[782]),
      ⵠΔⵠⲆⵠᐃΔ: pf(60, 60, 0, ᐃΔ[783])
    };
    this.sign = {
      open: false,
      ᐃⵠᐃⵠΔⲆΔⵠⵠ: 0,
      ⵠᐃⵠⲆΔΔⲆ: document.getElementById("sign_object"),
      ⵠΔⵠΔⲆⲆⲆ: 0,
      id: document.getElementById("sign_window"),
      style: document.getElementById("sign_window").style,
      button: pf(60, 60, 0, ᐃΔ[803]),
      ΔᐃᐃᐃⵠⲆⵠ: function () {
        var a = Math.floor(Math.floor((3 + Ax.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ.length) / 4) * (10 + ᐃΔ[316][0].width) + 35);
        this.button.info.translate.x = a;
        this.button.info.translate.y = 22;
      },
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(ua - 150) + "px";
        this.style.top = Math.floor(dq - 115) + "px";
      },
      ⲆⵠᐃΔⲆ: function () {
        Cx.sign.style.display = "none";
        Cx.sign.open = false;
      },
      select: function () {
        Cx.sign.open = !Cx.sign.open;
        if (Cx.sign.open) {
          Cx.sign.style.display = "inline-block";
        } else {
          Cx.sign.style.display = "none";
        }
      },
      ok: function () {
        wx.ⵠⲆᐃⵠⲆᐃΔΔΔ(Ax.sign.ⲆᐃΔΔᐃ, Cx.sign.ⵠΔⵠΔⲆⲆⲆ);
        Cx.sign.select();
      },
      up: function () {
        Cx.sign.ⵠΔⵠΔⲆⲆⲆ = Cx.sign.ⵠΔⵠΔⲆⲆⲆ === 0 ? 3 : Cx.sign.ⵠΔⵠΔⲆⲆⲆ - 1;
        Cx.sign.ⵠᐃⵠⲆΔΔⲆ.src = "./img/sign" + Cx.sign.ⵠΔⵠΔⲆⲆⲆ + ".png";
      },
      down: function () {
        Cx.sign.ⵠΔⵠΔⲆⲆⲆ = (Cx.sign.ⵠΔⵠΔⲆⲆⲆ + 1) % 4;
        Cx.sign.ⵠᐃⵠⲆΔΔⲆ.src = "./img/sign" + Cx.sign.ⵠΔⵠΔⲆⲆⲆ + ".png";
      }
    };
    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, Sl);
    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, false);
    document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, hl);
    document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, false);
    this.ΔⵠⲆⲆΔ = {
      open: Cj,
      id: document.getElementById("shop_market"),
      style: document.getElementById("shop_market").style,
      items: [{
        id: 0,
        name: "wood",
        ⲆΔⵠΔᐃ: 1,
        b: 1,
        a: 3,
        ᐃΔⵠⲆᐃ: 316
      }, {
        id: 1,
        name: "stone",
        ⲆΔⵠΔᐃ: 1,
        b: 1,
        a: 4,
        ᐃΔⵠⲆᐃ: 315
      }, {
        id: 2,
        name: "gold",
        ⲆΔⵠΔᐃ: 1,
        b: 1,
        a: 6,
        ᐃΔⵠⲆᐃ: 297
      }, {
        id: 3,
        name: "diamond",
        ⲆΔⵠΔᐃ: 4,
        b: 4,
        a: 1,
        ᐃΔⵠⲆᐃ: 298
      }, {
        id: 4,
        name: "amethyst",
        ⲆΔⵠΔᐃ: 8,
        b: 8,
        a: 1,
        ᐃΔⵠⲆᐃ: 418
      }, {
        id: 5,
        name: "reidite",
        ⲆΔⵠΔᐃ: 16,
        b: 16,
        a: 1,
        ᐃΔⵠⲆᐃ: 938
      }, {
        id: 6,
        name: "pumpkin_seed",
        ⲆΔⵠΔᐃ: 10,
        b: 10,
        a: 1,
        ᐃΔⵠⲆᐃ: 808
      }, {
        id: 7,
        name: "carrot_seed",
        ⲆΔⵠΔᐃ: 16,
        b: 16,
        a: 1,
        ᐃΔⵠⲆᐃ: 949
      }, {
        id: 8,
        name: "tomato_seed",
        ⲆΔⵠΔᐃ: 20,
        b: 20,
        a: 1,
        ᐃΔⵠⲆᐃ: 959
      }, {
        id: 9,
        name: "thornbush_seed",
        ⲆΔⵠΔᐃ: 30,
        b: 30,
        a: 1,
        ᐃΔⵠⲆᐃ: 845
      }, {
        id: 10,
        name: "garlic_seed",
        ⲆΔⵠΔᐃ: 40,
        b: 40,
        a: 1,
        ᐃΔⵠⲆᐃ: 834
      }, {
        id: 11,
        name: "watermelon_seed",
        ⲆΔⵠΔᐃ: 60,
        b: 60,
        a: 1,
        ᐃΔⵠⲆᐃ: 966
      }],
      button: pf(60, 60, 0, ᐃΔ[795]),
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(ua - 450) + "px";
        this.style.top = Math.floor(dq - 270) + "px";
      },
      select: function () {
        Cx.ΔⵠⲆⲆΔ.open = !Cx.ΔⵠⲆⲆΔ.open;
        if (Cx.ΔⵠⲆⲆΔ.open) {
          Cx.ΔⵠⲆⲆΔ.style.display = "inline-block";
        } else {
          Cx.ΔⵠⲆⲆΔ.style.display = "none";
        }
      },
      ⲆⵠᐃΔⲆ: function () {
        Cx.ΔⵠⲆⲆΔ.style.display = "none";
        Cx.ΔⵠⲆⲆΔ.open = false;
      },
      ⲆⲆᐃᐃⲆⵠⲆ: function () {
        wx.ⲆΔᐃⵠᐃΔᐃⵠᐃ(this.ᐃᐃⲆⲆⲆΔⵠ);
      },
      ⲆΔΔⲆΔ: function () {
        this.id;
        if (this.ᐃᐃⲆⲆⲆΔⵠ.a === 1) {
          var a = Math.floor(Number(this.value) * this.ᐃᐃⲆⲆⲆΔⵠ.b);
          this.ᐃᐃⲆⲆⲆΔⵠ.ⲆΔⵠΔᐃ = a;
          document.getElementById(this.ᐃᐃⲆⲆⲆΔⵠ.name + "_trad_number").innerHTML = a + "";
        } else {
          a = Math.floor(Number(this.value) / this.ᐃᐃⲆⲆⲆΔⵠ.a);
          this.ᐃᐃⲆⲆⲆΔⵠ.ⲆΔⵠΔᐃ = a;
          document.getElementById(this.ᐃᐃⲆⲆⲆΔⵠ.name + "_trad_number").innerHTML = a + "";
        }
      }
    };
    document.getElementById("quit_market").addEventListener("mouseup", this.ΔⵠⲆⲆΔ.ⲆⵠᐃΔⲆ, false);
    var e = [["mouseup", this.ΔⵠⲆⲆΔ.ⲆⲆᐃᐃⲆⵠⲆ, "buy_"], ["click", this.ΔⵠⲆⲆΔ.ⲆΔΔⲆΔ, ""], ["change", this.ΔⵠⲆⲆΔ.ⲆΔΔⲆΔ, ""], ["keypress", this.ΔⵠⲆⲆΔ.keypress, ""]];
    for (var i = 0; i < this.ΔⵠⲆⲆΔ.items.length; i++) {
      var j = this.ΔⵠⲆⲆΔ.items[i];
      document.getElementById(j.name + "_market").src = ᐃΔ[j.ᐃΔⵠⲆᐃ][0].ⵠⵠⵠΔᐃ === lr ? ᐃΔ[j.ᐃΔⵠⲆᐃ][0].src : ᐃΔ[j.ᐃΔⵠⲆᐃ][0].ⵠⵠⵠΔᐃ;
      if (j.a === 1) {
        document.getElementById(j.name + "_trad_number").innerHTML = j.b;
        document.getElementById(j.name + "_number").value = 1;
        document.getElementById(j.name + "_number").step = 1;
        document.getElementById(j.name + "_number").min = 1;
        document.getElementById(j.name + "_number").max = Math.floor(255 / j.b);
      } else {
        document.getElementById(j.name + "_trad_number").innerHTML = 1;
        document.getElementById(j.name + "_number").value = j.a;
        document.getElementById(j.name + "_number").step = j.a;
        document.getElementById(j.name + "_number").min = j.a;
      }
      document.getElementById("buy_" + j.name + "_number").ᐃᐃⲆⲆⲆΔⵠ = j;
      document.getElementById(j.name + "_number").ᐃᐃⲆⲆⲆΔⵠ = j;
      for (var k = 0; e.length > k; k++) {
        document.getElementById(e[k][2] + j.name + "_number").addEventListener(e[k][0], e[k][1], false);
      }
    }
    $("[type='number']").keypress(function (a) {
      a.preventDefault();
    });
    this.options = {
      open: false,
      id: document.getElementById("option_in_game"),
      style: document.getElementById("option_in_game").style,
      ΔΔⲆⵠᐃ: document.getElementById("agree_ing").style,
      ⲆⵠᐃⵠᐃᐃΔ: document.getElementById("cancel_agree_ing").style,
      ΔᐃⵠΔᐃΔᐃ: document.getElementById("quest_agree_ing").style,
      ΔⵠΔⵠⵠⲆⲆ: document.getElementById("spectator_agree_ing").style,
      ΔΔⲆᐃⵠⵠᐃ: document.getElementById("auto_feed_agree_ing").style,
      ᐃⲆⵠⵠⲆⲆⵠ: document.getElementById("info_agree_ing").style,
      ᐃᐃᐃⵠⲆᐃΔ: document.getElementById("pixelated_agree_ing").style,
      button: pf(60, 60, 0, ᐃΔ[727]),
      ΔⲆᐃΔⲆΔᐃⲆⲆ: function () {
        Cx.options.open = !Cx.options.open;
        if (Cx.options.open) {
          Cx.options.style.display = "inline-block";
        } else {
          Cx.options.style.display = "none";
        }
      },
      ᐃᐃⲆΔⵠⲆᐃⵠΔ: function () {
        yx.ⲆᐃⲆΔⲆΔᐃ();
      },
      ⲆⲆᐃⲆⵠⵠᐃΔᐃ: function () {
        yx.ΔᐃⵠⵠᐃΔⲆ();
      },
      high: function () {
        yx.ᐃⵠΔⲆⵠⵠⲆⲆⲆ();
      },
      low: function () {
        yx.ⲆᐃΔᐃⲆⲆⲆΔΔ();
      },
      ⵠⲆⲆⲆΔ: function () {
        Cx.ΔΔⵠⲆ.ⵠⲆⲆⲆΔ();
      },
      ⲆⲆⵠΔᐃᐃⲆᐃΔ: function () {
        Cx.ΔⲆΔⵠⵠ.ⵠⲆⲆⲆΔ();
      },
      ᐃᐃΔⲆⵠᐃᐃⲆᐃ: function () {
        Cx.ᐃⲆⲆⲆ.ⵠⲆⲆⲆΔ();
      },
      ΔᐃΔⵠⵠΔΔⵠⲆ: function () {
        Ax.ᐃᐃΔⵠⵠ.ⵠⵠⵠⵠΔⲆⵠ();
      },
      ⲆⲆᐃⵠΔᐃΔΔⵠ: function () {
        Ax.ⲆᐃΔΔⵠ.ⵠⵠⵠⵠΔⲆⵠ();
      },
      ⲆⵠᐃΔⲆ: function () {
        Cx.options.style.display = "none";
        Cx.options.open = false;
      },
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(ua - 235) + "px";
        this.style.top = Math.floor(dq - 170) + "px";
      }
    };
    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ᐃᐃⲆΔⵠⲆᐃⵠΔ, es);
    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ⲆⲆᐃⲆⵠⵠᐃΔᐃ, false);
    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, false);
    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, Oq);
    document.getElementById("quit_opt").addEventListener("mouseup", this.options.ⲆⵠᐃΔⲆ, hl);
    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ⵠⲆⲆⲆΔ, es);
    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ᐃᐃΔⲆⵠᐃᐃⲆᐃ, false);
    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ⲆⲆⵠΔᐃᐃⲆᐃΔ, false);
    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ΔᐃΔⵠⵠΔΔⵠⲆ, hl);
    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ⲆⲆᐃⵠΔᐃΔΔⵠ, false);
    this.ΔⲆΔⵠⵠ = {
      open: false,
      ᐃⲆᐃⲆⲆ: ᐃΔΔⵠ.get("starve_cancel") && ᐃΔΔⵠ.get("starve_cancel") === "0" ? 0 : 1,
      id: document.getElementById("cancel_sure_delete"),
      style: document.getElementById("cancel_sure_delete").style,
      ΔΔⲆⵠᐃ: document.getElementById("cancel_agree").style,
      button: 0,
      Ⲇᐃ: 0,
      ⲆⵠᐃΔⲆ: function () {
        Cx.ΔⲆΔⵠⵠ.style.display = "none";
        Cx.ΔⲆΔⵠⵠ.open = Oq;
      },
      ΔⲆⲆΔⵠΔΔ: function () {
        if (Ax.ᐃⵠⲆᐃ.ᐃΔⵠᐃΔ) {
          wx.ⵠᐃⲆᐃⲆⵠⲆⲆΔ();
        }
        Cx.ΔⲆΔⵠⵠ.ⲆⵠᐃΔⲆ();
      },
      ⵠⲆⲆⲆΔ: function () {
        if (Cx.ΔⲆΔⵠⵠ.ᐃⲆᐃⲆⲆ) {
          ᐃΔΔⵠ.set("starve_cancel", "0");
          Cx.ΔⲆΔⵠⵠ.ΔΔⲆⵠᐃ.display = "inline-block";
          Cx.options.ⲆⵠᐃⵠᐃᐃΔ.display = "none";
        } else {
          ᐃΔΔⵠ.set("starve_cancel", "1");
          Cx.ΔⲆΔⵠⵠ.ΔΔⲆⵠᐃ.display = "none";
          Cx.options.ⲆⵠᐃⵠᐃᐃΔ.display = "inline-block";
        }
        Cx.ΔⲆΔⵠⵠ.ᐃⲆᐃⲆⲆ = !Cx.ΔⲆΔⵠⵠ.ᐃⲆᐃⲆⲆ;
      },
      ⲆⵠΔⵠΔᐃⲆ: function () {
        if (this.ᐃⲆᐃⲆⲆ) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.ΔⲆⲆΔⵠΔΔ();
        }
      },
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(ua - 235) + "px";
        this.style.top = Math.floor(dq - 130) + "px";
      }
    };
    this.ΔⲆΔⵠⵠ.id.oncontextmenu = function () {
      return Ir;
    };
    this.ΔⲆΔⵠⵠ.ΔΔⲆⵠᐃ.display = "none";
    if (this.ΔⲆΔⵠⵠ.ᐃⲆᐃⲆⲆ) {
      this.options.ⲆⵠᐃⵠᐃᐃΔ.display = "inline-block";
    } else {
      this.options.ⲆⵠᐃⵠᐃᐃΔ.display = "none";
    }
    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ΔⲆΔⵠⵠ.ΔⲆⲆΔⵠΔΔ, false);
    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ΔⲆΔⵠⵠ.ⲆⵠᐃΔⲆ, false);
    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ΔⲆΔⵠⵠ.ⵠⲆⲆⲆΔ, rh);
    document.addEventListener("cancel_sure_delete", function (a) {
      a.preventDefault();
    }, Cj);
    this.ᐃⵠᐃⵠⲆⲆᐃ = {
      ᐃⲆᐃⲆⲆ: ᐃΔΔⵠ.get("starve_aliasing") && ᐃΔΔⵠ.get("starve_aliasing") === "0" ? 0 : 1,
      ΔⵠᐃΔⵠⲆᐃ: function (a) {
        document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
      },
      ⵠⲆⲆⲆΔ: function () {
        if (Cx.ᐃⵠᐃⵠⲆⲆᐃ.ᐃⲆᐃⲆⲆ === 0) {
          ᐃΔΔⵠ.set("starve_aliasing", "1");
          Cx.ᐃⵠᐃⵠⲆⲆᐃ.ΔⵠᐃΔⵠⲆᐃ(1);
          Cx.options.ᐃᐃᐃⵠⲆᐃΔ.display = "inline-block";
        } else {
          ᐃΔΔⵠ.set("starve_aliasing", "0");
          Cx.ᐃⵠᐃⵠⲆⲆᐃ.ΔⵠᐃΔⵠⲆᐃ(0);
          Cx.options.ᐃᐃᐃⵠⲆᐃΔ.display = "none";
        }
        Cx.ᐃⵠᐃⵠⲆⲆᐃ.ᐃⲆᐃⲆⲆ = (Cx.ᐃⵠᐃⵠⲆⲆᐃ.ᐃⲆᐃⲆⲆ + 1) % 2;
      }
    };
    if (this.ᐃⵠᐃⵠⲆⲆᐃ.ᐃⲆᐃⲆⲆ === 1) {
      this.options.ᐃᐃᐃⵠⲆᐃΔ.display = "inline-block";
    } else {
      this.ᐃⵠᐃⵠⲆⲆᐃ.ΔⵠᐃΔⵠⲆᐃ(0);
      this.options.ᐃᐃᐃⵠⲆᐃΔ.display = "none";
    }
    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ᐃⵠᐃⵠⲆⲆᐃ.ⵠⲆⲆⲆΔ, D);
    this.ⲆⲆⵠⲆᐃ = {
      ᐃⲆᐃⲆⲆ: ᐃΔΔⵠ.get("starve_info_box") ? ᐃΔΔⵠ.get("starve_info_box") === "0" ? 0 : 1 : 1,
      display: 0,
      x: 0,
      y: 0,
      id: 0,
      ᐃⵠⲆᐃ: 0,
      ⵠⲆⲆⲆΔ: function () {
        if (Cx.ⲆⲆⵠⲆᐃ.ᐃⲆᐃⲆⲆ === 0) {
          ᐃΔΔⵠ.set("starve_info_box", "1");
          Cx.options.ᐃⲆⵠⵠⲆⲆⵠ.display = "inline-block";
        } else {
          ᐃΔΔⵠ.set("starve_info_box", "0");
          Cx.options.ᐃⲆⵠⵠⲆⲆⵠ.display = "none";
        }
        Cx.ⲆⲆⵠⲆᐃ.ᐃⲆᐃⲆⲆ = (Cx.ⲆⲆⵠⲆᐃ.ᐃⲆᐃⲆⲆ + 1) % 2;
      },
      ΔⵠΔΔ: function (a, b, c) {
        if (a && this.ᐃⲆᐃⲆⲆ) {
          this.display = 1;
          this.id = c === 0 ? b.id : Nt[b.id].ᐃΔΔᐃ;
          this.x = b.info.translate.x + 80;
          this.y = b.info.translate.y;
          this.ᐃⵠⲆᐃ = c;
        }
        return a;
      }
    };
    if (this.ⲆⲆⵠⲆᐃ.ᐃⲆᐃⲆⲆ === 1) {
      this.options.ᐃⲆⵠⵠⲆⲆⵠ.display = "inline-block";
    } else {
      this.options.ᐃⲆⵠⵠⲆⲆⵠ.display = "none";
    }
    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ⲆⲆⵠⲆᐃ.ⵠⲆⲆⲆΔ, false);
    if (ᐃΔΔⵠ.get("starve_scale")) {
      hq = Number(ᐃΔΔⵠ.get("starve_scale"));
      document.getElementById("input_ratio").value = hq;
      hq *= Lr / Nr;
      Or();
    }
    this.ᐃⲆᐃΔΔΔⲆ = function () {
      ᐃΔΔⵠ.set("starve_scale", "" + document.getElementById("input_ratio").value);
      hq = Lr / Nr * document.getElementById("input_ratio").value;
      Or();
    };
    document.getElementById("input_ratio").addEventListener("input", this.ᐃⲆᐃΔΔΔⲆ, false);
    this.ΔΔⵠⲆ = {
      open: nl,
      ᐃⲆᐃⲆⲆ: ᐃΔΔⵠ.get("starve_safe") ? ᐃΔΔⵠ.get("starve_safe") === "0" ? 0 : 1 : 1,
      id: document.getElementById("sure_delete"),
      style: document.getElementById("sure_delete").style,
      ΔΔⲆⵠᐃ: document.getElementById("agree").style,
      button: 0,
      Ⲇᐃ: 0,
      ⲆⵠᐃΔⲆ: function () {
        Cx.ΔΔⵠⲆ.style.display = "none";
        Cx.ΔΔⵠⲆ.open = false;
      },
      all: function () {
        if (!Ax.ⵠⲆᐃⲆΔ.wait) {
          if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && Ax.ᐃⵠⲆᐃ.id < 0 && !Ax.ΔⲆⲆΔⵠ.enabled) {
            wx.ᐃᐃᐃⲆⲆⲆΔᐃΔ(Cx.ΔΔⵠⲆ.button);
          }
          Cx.ΔΔⵠⲆ.ⲆⵠᐃΔⲆ();
        }
      },
      ᐃⲆΔⵠ: function () {
        if (Ax.ᐃⵠⲆᐃ.ⲆΔⵠΔⲆ && !Ax.ⵠⲆᐃⲆΔ.wait) {
          if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && Ax.ᐃⵠⲆᐃ.id < 0 && !Ax.ΔⲆⲆΔⵠ.enabled) {
            wx.ᐃΔⵠⲆⵠⲆⵠΔⲆ(Cx.ΔΔⵠⲆ.button);
          }
          Cx.ΔΔⵠⲆ.ⲆⵠᐃΔⲆ();
        }
      },
      ⲆᐃᐃⲆᐃⲆΔᐃⲆ: function () {
        if (!Ax.ⵠⲆᐃⲆΔ.wait) {
          if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && Ax.ᐃⵠⲆᐃ.id < 0 && !Ax.ΔⲆⲆΔⵠ.enabled) {
            wx.ⲆⵠⲆᐃΔⵠⲆⵠⲆ(Cx.ΔΔⵠⲆ.button);
          }
          Cx.ΔΔⵠⲆ.ⲆⵠᐃΔⲆ();
        }
      },
      ⵠⲆⲆⲆΔ: function () {
        if (Cx.ΔΔⵠⲆ.ᐃⲆᐃⲆⲆ) {
          ᐃΔΔⵠ.set("starve_safe", "0");
          Cx.ΔΔⵠⲆ.ΔΔⲆⵠᐃ.display = "inline-block";
          Cx.options.ΔΔⲆⵠᐃ.display = "none";
        } else {
          ᐃΔΔⵠ.set("starve_safe", "1");
          Cx.ΔΔⵠⲆ.ΔΔⲆⵠᐃ.display = "none";
          Cx.options.ΔΔⲆⵠᐃ.display = "inline-block";
        }
        Cx.ΔΔⵠⲆ.ᐃⲆᐃⲆⲆ = !Cx.ΔΔⵠⲆ.ᐃⲆᐃⲆⲆ;
      },
      ⲆⵠΔⵠΔᐃⲆ: function (a) {
        this.button = a;
        document.getElementById("item_to_del").src = ᐃΔ[Ih[a].ᐃᐃ][0].ⵠⵠⵠΔᐃ === undefined ? ᐃΔ[Ih[a].ᐃᐃ][0].src : ᐃΔ[Ih[a].ᐃᐃ][0].ⵠⵠⵠΔᐃ;
        if (Ih[a].ᐃⲆΔⵠ && !Ax.ΔΔΔⵠⵠ && Ax.ᐃⵠⲆᐃ.ⲆΔⵠΔⲆ) {
          document.getElementById("recycle_delete").style.display = "inline-block";
        } else {
          document.getElementById("recycle_delete").style.display = "none";
        }
        if (this.ᐃⲆᐃⲆⲆ) {
          this.style.display = "inline-block";
          this.open = Bk;
        } else {
          this.all();
        }
      },
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(ua - 235) + "px";
        this.style.top = Math.floor(dq - 175) + "px";
      }
    };
    this.ΔΔⵠⲆ.ΔΔⲆⵠᐃ.display = "none";
    if (this.ΔΔⵠⲆ.ᐃⲆᐃⲆⲆ) {
      this.options.ΔΔⲆⵠᐃ.display = "inline-block";
    } else {
      this.options.ΔΔⲆⵠᐃ.display = "none";
    }
    document.getElementById("one_delete").addEventListener("mouseup", this.ΔΔⵠⲆ.ⲆᐃᐃⲆᐃⲆΔᐃⲆ, false);
    document.getElementById("yes_delete").addEventListener("mouseup", this.ΔΔⵠⲆ.all, false);
    document.getElementById("recycle_delete").addEventListener("mouseup", this.ΔΔⵠⲆ.ᐃⲆΔⵠ, false);
    document.getElementById("no_delete").addEventListener("mouseup", this.ΔΔⵠⲆ.ⲆⵠᐃΔⲆ, false);
    document.getElementById("case_agree").addEventListener("mouseup", this.ΔΔⵠⲆ.ⵠⲆⲆⲆΔ, hl);
    this.ΔⵠⲆᐃⵠ = {
      open: false,
      ⵠⲆᐃΔᐃ: -1,
      button: pf(60, 60, 0, ᐃΔ[592]),
      id: document.getElementById("shop_starterkit"),
      style: document.getElementById("shop_starterkit").style,
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(ua - 300) + "px";
        this.style.top = Math.floor(dq - 215) + "px";
      },
      ⲆⵠᐃΔⲆ: function () {
        Cx.ΔⵠⲆᐃⵠ.open = kn;
        Cx.ΔⵠⲆᐃⵠ.style.display = "none";
      },
      select: function () {
        Cx.ΔⵠⲆᐃⵠ.open = !Cx.ΔⵠⲆᐃⵠ.open;
        if (Cx.ΔⵠⲆᐃⵠ.open) {
          Cx.ΔⵠⲆᐃⵠ.style.display = "inline-block";
        } else {
          Cx.ΔⵠⲆᐃⵠ.style.display = "none";
        }
      },
      ⲆⲆᐃᐃⲆⵠⲆ: function () {
        if (Cx.ΔⵠⲆᐃⵠ.ⵠⲆᐃΔᐃ >= 0) {
          wx.ⲆⵠⵠⲆⵠⲆΔᐃᐃ(Cx.ΔⵠⲆᐃⵠ.ⵠⲆᐃΔᐃ);
          Cx.ΔⵠⲆᐃⵠ.ⲆⵠᐃΔⲆ();
          if (ga) {
            ga("send", "event", "Game", "kit", "" + Cx.ΔⵠⲆᐃⵠ.ⵠⲆᐃΔᐃ);
          }
        }
      },
      ⵠΔⲆΔⲆ: function () {
        var a = Ax.ΔⵠⲆᐃⵠ.value;
        document.getElementById("points_bank").innerHTML = ΔⵠΔⵠ.ⵠⵠᐃᐃᐃⲆΔ(a) + " points";
        for (var b = 0; b < Mf.length; b++) {
          if (Mf[b].ⵠⵠᐃⵠⵠ > a) {
            document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
          } else {
            document.getElementById("starter" + (b + 1)).style.opacity = "1";
          }
        }
        for (b = 1; b < 13; b++) {
          document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + b).innerHTML = "";
        }
        document.getElementById("buy_kit").style.opacity = "0.2";
      },
      ⲆᐃⵠⲆᐃᐃᐃⲆᐃ: function () {
        if (this.id.length > 8) {
          var a = Number(this.id.charAt(7) + this.id.charAt(8));
        } else {
          a = Number(this.id.charAt(7));
        }
        var b = Mf[a - 1];
        if (Ax.ΔⵠⲆᐃⵠ.value >= b.ⵠⵠᐃⵠⵠ) {
          Cx.ΔⵠⲆᐃⵠ.ⵠⲆᐃΔᐃ = a;
          document.getElementById("buy_kit").style.opacity = "1";
        } else {
          Cx.ΔⵠⲆᐃⵠ.ⵠⲆᐃΔᐃ = -1;
          document.getElementById("buy_kit").style.opacity = "0.2";
        }
        b = b.items;
        for (var c = 1, d = 1; c < b.length + 1; c++) {
          if (b[c - 1][1] !== 29) {
            document.getElementById("inv_shop" + d).style.display = "inline-block";
            document.getElementById("inv_shop" + d).src = ᐃΔ[Ih[b[c - 1][1]].ᐃᐃ][0].ⵠⵠⵠΔᐃ === $k ? ᐃΔ[Ih[b[c - 1][1]].ᐃᐃ][0].src : ᐃΔ[Ih[b[c - 1][1]].ᐃᐃ][0].ⵠⵠⵠΔᐃ;
            document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][0];
            d++;
          }
        }
        for (; d < 13; d++) {
          document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + d).innerHTML = "";
        }
      }
    };
    document.getElementById("quit3").addEventListener("mouseup", this.ΔⵠⲆᐃⵠ.ⲆⵠᐃΔⲆ, $h);
    document.getElementById("buy_kit").addEventListener("mouseup", this.ΔⵠⲆᐃⵠ.ⲆⲆᐃᐃⲆⵠⲆ, false);
    for (k = 1; k < 11; k++) {
      document.getElementById("starter" + k).addEventListener("mouseup", this.ΔⵠⲆᐃⵠ.ⲆᐃⵠⲆᐃᐃᐃⲆᐃ, false);
    }
    this.ᐃⲆⲆⲆ = {
      open: Ma,
      ᐃⲆᐃⲆⲆ: ᐃΔΔⵠ.get("starve_quests") ? ᐃΔΔⵠ.get("starve_quests") === "1" ? 1 : 0 : 0,
      button: pf(60, 60, 0, ᐃΔ[755]),
      id: document.getElementById("chronoquest"),
      style: document.getElementById("chronoquest").style,
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(ua - 420) + "px";
        this.style.top = Math.floor(dq - 270) + "px";
      },
      ⲆⵠᐃΔⲆ: function () {
        Cx.ᐃⲆⲆⲆ.style.display = "none";
        Cx.ᐃⲆⲆⲆ.open = false;
      },
      select: function () {
        Cx.ᐃⲆⲆⲆ.open = !Cx.ᐃⲆⲆⲆ.open;
        if (Cx.ᐃⲆⲆⲆ.open) {
          Cx.ᐃⲆⲆⲆ.style.display = "inline-block";
        } else {
          Cx.ᐃⲆⲆⲆ.style.display = "none";
        }
      },
      list: [],
      reset: function () {
        for (var a = 0; a < Qf.length; a++) {
          this.list[a] = 1;
          document.getElementById("timeremain_" + a).style.display = "inline-block";
          document.getElementById("time_finished_" + a).style.display = "none";
          document.getElementById("claim_reward_" + a).style.display = "none";
        }
      },
      ⲆⲆⵠᐃⵠⵠᐃ: 0,
      ⲆⲆⵠⲆⲆⲆⵠ: 0,
      ΔⵠᐃΔⵠᐃⵠⵠΔ: function () {
        if (Cx.ᐃⲆⲆⲆ.open) {
          var a = new Date().getTime();
          if (a - this.ⲆⲆⵠᐃⵠⵠᐃ >= 1000) {
            this.ⲆⲆⵠᐃⵠⵠᐃ = a;
            for (var b = 0; b < Qf.length; b++) {
              if (Cx.ᐃⲆⲆⲆ.list[b]) {
                var c = Qf[b].time - (a - zx.ⵠΔⵠΔⲆ.ⵠΔⲆΔⲆ + Cx.ᐃⲆⲆⲆ.ⲆⲆⵠⲆⲆⲆⵠ);
                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
              }
            }
          }
        }
      },
      restore: function (a) {
        for (var b = 0; b < a.length; b++) {
          if (a[b] != 1) {
            Cx.ᐃⲆⲆⲆ.ΔⵠΔⲆⵠᐃⲆ(b, a[b]);
          }
        }
      },
      ΔⵠΔⲆⵠᐃⲆ: function (a, b) {
        if (b === 3 && (a === 11 || a === 12)) {
          Ax.ᐃΔΔⲆ.ⵠⲆⵠΔⲆⵠᐃ(0, 1);
          Cx.ᐃⲆΔⵠΔᐃⵠ();
        }
        document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        if (b > 1) {
          document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
          document.getElementById("timeremain_" + a).style.display = "none";
        } else if (b === 0) {
          document.getElementById("time_finished_" + a).innerHTML = "FAILED";
          document.getElementById("timeremain_" + a).style.display = "none";
        }
        document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
        document.getElementById("time_finished_" + a).style.display = "inline";
        Cx.ᐃⲆⲆⲆ.list[a] = 0;
      },
      modify: function (a, b) {
        Cx.ᐃⲆⲆⲆ.ΔⵠΔⲆⵠᐃⲆ(a, b);
        if (Cx.ᐃⲆⲆⲆ.ᐃⲆᐃⲆⲆ) {
          Cx.ᐃⲆⲆⲆ.open = true;
          Cx.ᐃⲆⲆⲆ.style.display = "inline-block";
        }
      },
      ⵠⲆⲆⲆΔ: function () {
        if (Cx.ᐃⲆⲆⲆ.ᐃⲆᐃⲆⲆ) {
          ᐃΔΔⵠ.set("starve_quests", "0");
          Cx.options.ΔᐃⵠΔᐃΔᐃ.display = "none";
        } else {
          ᐃΔΔⵠ.set("starve_quests", "1");
          Cx.options.ΔᐃⵠΔᐃΔᐃ.display = "inline-block";
        }
        Cx.ᐃⲆⲆⲆ.ᐃⲆᐃⲆⲆ = !Cx.ᐃⲆⲆⲆ.ᐃⲆᐃⲆⲆ;
      },
      ⵠⵠⵠⵠⲆΔⲆⲆᐃ: function () {
        var a = Number(this.id.charAt(13));
        var b = Number(this.id.charAt(14));
        if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
          a = a * 10 + b;
        }
        wx.ᐃⲆΔⲆⵠⲆⲆⵠⲆ(a);
      }
    };
    if (this.ᐃⲆⲆⲆ.ᐃⲆᐃⲆⲆ) {
      this.options.ΔᐃⵠΔᐃΔᐃ.display = "inline-block";
    } else {
      this.options.ΔᐃⵠΔᐃΔᐃ.display = "none";
    }
    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ᐃⲆⲆⲆ.ⲆⵠᐃΔⲆ, Ak);
    for (k = 0; Qf.length > k; k++) {
      document.getElementById("claim_reward_" + k).addEventListener("mouseup", this.ᐃⲆⲆⲆ.ⵠⵠⵠⵠⲆΔⲆⲆᐃ, $h);
    }
    this.ΔⲆΔΔ = {
      open: false,
      button: pf(60, 60, 0, ᐃΔ[708]),
      list: {
        id: document.getElementById("recipe_craft"),
        style: document.getElementById("recipe_craft").style,
        ΔⲆᐃᐃΔⵠΔ: [],
        ⲆⵠᐃΔΔⲆⵠ: 0,
        ⲆᐃⲆ: function () {
          this.style.left = Math.floor(ua - 335) + "px";
          this.style.top = Math.floor(dq - 215) + "px";
        },
        ⲆⵠᐃΔⲆ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          Cx.ΔⲆΔΔ.open = D;
        },
        ⵠᐃΔᐃⲆᐃⵠ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          document.getElementById("home_craft").style.display = "inline-block";
        },
        ⵠᐃΔᐃ: function (a) {
          if ((b = this.ΔⲆᐃᐃΔⵠΔ[a]).Ⲇⵠⵠ) {
            document.getElementById("watercraft").style.display = "inline-block";
          } else {
            document.getElementById("watercraft").style.display = "none";
          }
          if (b.f) {
            document.getElementById("firecraft").style.display = "inline-block";
          } else {
            document.getElementById("firecraft").style.display = "none";
          }
          if (b.w) {
            document.getElementById("workcraft").style.display = "inline-block";
          } else {
            document.getElementById("workcraft").style.display = "none";
          }
          if (b.e) {
            document.getElementById("wellcraft").style.display = "inline-block";
          } else {
            document.getElementById("wellcraft").style.display = "none";
          }
          for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
            document.getElementById("inv" + c).style.display = "inline-block";
            document.getElementById("inv" + c).src = ᐃΔ[Ih[b[a][0]].ᐃᐃ][0].ⵠⵠⵠΔᐃ === qg ? ᐃΔ[Ih[b[a][0]].ᐃᐃ][0].src : ᐃΔ[Ih[b[a][0]].ᐃᐃ][0].ⵠⵠⵠΔᐃ;
            document.getElementById("numb" + c).innerHTML = "" + b[a][1];
            c++;
          }
          for (; c < 6; c++) {
            document.getElementById("inv" + c).style.display = "none";
            document.getElementById("numb" + c).innerHTML = "";
          }
        },
        select: function (a) {
          this.ⲆⵠᐃΔΔⲆⵠ = a;
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("workcraft").style.display = "none";
          document.getElementById("firecraft").style.display = "none";
          document.getElementById("watercraft").style.display = "none";
          document.getElementById("wellcraft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "inline-block";
          document.getElementById("inv1").style.display = "none";
          document.getElementById("inv2").style.display = "none";
          document.getElementById("inv3").style.display = "none";
          document.getElementById("inv4").style.display = "none";
          document.getElementById("inv5").style.display = "none";
          document.getElementById("numb1").innerHTML = "";
          document.getElementById("numb2").innerHTML = "";
          document.getElementById("numb3").innerHTML = "";
          document.getElementById("numb4").innerHTML = "";
          document.getElementById("numb5").innerHTML = "";
          for (var b = 0, c = 0; b < Nt.length; b++) {
            var d = Nt[b];
            if (a === d.Δᐃᐃ) {
              this.ΔⲆᐃᐃΔⵠΔ[c] = d;
              c++;
              document.getElementById("img_" + c).style.display = "inline-block";
              document.getElementById("img_" + c).src = ᐃΔ[Ih[d.ᐃΔΔᐃ].ᐃᐃ][0].ⵠⵠⵠΔᐃ === undefined ? ᐃΔ[Ih[d.ᐃΔΔᐃ].ᐃᐃ][0].src : ᐃΔ[Ih[d.ᐃΔΔᐃ].ᐃᐃ][0].ⵠⵠⵠΔᐃ;
            }
          }
          for (c++; c < 49; c++) {
            document.getElementById("img_" + c).style.display = "none";
          }
        }
      },
      ⲆⲆⲆΔᐃᐃⲆ: {
        id: document.getElementById("home_craft"),
        style: document.getElementById("home_craft").style,
        ⲆᐃⲆ: function () {
          this.style.left = Math.floor(ua - 285) + "px";
          this.style.top = Math.floor(dq - 170) + "px";
        },
        ⲆⵠᐃΔⲆ: function () {
          document.getElementById("home_craft").style.display = "none";
          Cx.ΔⲆΔΔ.open = false;
        }
      },
      ⲆΔΔᐃᐃⵠΔⵠᐃ: function () {
        this.open = !this.open;
        if (this.open) {
          document.getElementById("home_craft").style.display = "inline-block";
        } else {
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "none";
        }
      }
    };
    document.getElementById("quit").addEventListener("mouseup", this.ΔⲆΔΔ.ⲆⲆⲆΔᐃᐃⲆ.ⲆⵠᐃΔⲆ, false);
    document.getElementById("quitmenu").addEventListener("mouseup", this.ΔⲆΔΔ.list.ⲆⵠᐃΔⲆ, false);
    document.getElementById("backhome").addEventListener("mouseup", this.ΔⲆΔΔ.list.ⵠᐃΔᐃⲆᐃⵠ, false);
    document.getElementById("hatcategory").addEventListener("mouseup", function () {
      Cx.ΔⲆΔΔ.list.select(2);
    }, false);
    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
      Cx.ΔⲆΔΔ.list.select(1);
    }, nl);
    document.getElementById("toolcategory").addEventListener("mouseup", function () {
      Cx.ΔⲆΔΔ.list.select(0);
    }, false);
    document.getElementById("foodcategory").addEventListener("mouseup", function () {
      Cx.ΔⲆΔΔ.list.select(3);
    }, es);
    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
      Cx.ΔⲆΔΔ.list.select(4);
    }, Ak);
    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
      Cx.ΔⲆΔΔ.list.select(5);
    }, Cj);
    document.getElementById("img_1").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(0);
    }, false);
    document.getElementById("img_2").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(1);
    }, false);
    document.getElementById("img_3").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(2);
    }, false);
    document.getElementById("img_4").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(3);
    }, false);
    document.getElementById("img_5").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(4);
    }, false);
    document.getElementById("img_6").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(5);
    }, false);
    document.getElementById("img_7").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(6);
    }, false);
    document.getElementById("img_8").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(7);
    }, false);
    document.getElementById("img_9").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(8);
    }, Dh);
    document.getElementById("img_10").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(9);
    }, rh);
    document.getElementById("img_11").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(10);
    }, ln);
    document.getElementById("img_12").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(11);
    }, false);
    document.getElementById("img_13").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(12);
    }, false);
    document.getElementById("img_14").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(13);
    }, false);
    document.getElementById("img_15").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(14);
    }, Sl);
    document.getElementById("img_16").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(15);
    }, Ir);
    document.getElementById("img_17").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(16);
    }, Ir);
    document.getElementById("img_18").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(17);
    }, false);
    document.getElementById("img_19").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(18);
    }, false);
    document.getElementById("img_20").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(19);
    }, cg);
    document.getElementById("img_21").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(20);
    }, false);
    document.getElementById("img_22").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(21);
    }, ks);
    document.getElementById("img_23").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(22);
    }, nl);
    document.getElementById("img_24").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(23);
    }, Oq);
    document.getElementById("img_25").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(24);
    }, false);
    document.getElementById("img_26").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(25);
    }, false);
    document.getElementById("img_27").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(26);
    }, false);
    document.getElementById("img_28").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(27);
    }, false);
    document.getElementById("img_29").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(28);
    }, false);
    document.getElementById("img_30").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(29);
    }, false);
    document.getElementById("img_31").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(30);
    }, Cj);
    document.getElementById("img_32").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(31);
    }, D);
    document.getElementById("img_33").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(32);
    }, ks);
    document.getElementById("img_34").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(33);
    }, false);
    document.getElementById("img_35").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(34);
    }, Dh);
    document.getElementById("img_36").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(35);
    }, false);
    document.getElementById("img_37").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(36);
    }, false);
    document.getElementById("img_38").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(37);
    }, false);
    document.getElementById("img_39").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(38);
    }, hl);
    document.getElementById("img_40").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(39);
    }, cg);
    document.getElementById("img_41").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(40);
    }, false);
    document.getElementById("img_42").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(41);
    }, false);
    document.getElementById("img_43").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(42);
    }, false);
    document.getElementById("img_44").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(43);
    }, false);
    document.getElementById("img_45").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(44);
    }, false);
    document.getElementById("img_46").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(45);
    }, false);
    document.getElementById("img_47").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(46);
    }, Ak);
    document.getElementById("img_48").addEventListener("mousedown", function () {
      Cx.ΔⲆΔΔ.list.ⵠᐃΔᐃ(47);
    }, kn);
    this.Δⵠⵠⵠⵠ = {
      translate: {
        x: 0,
        y: 0
      },
      ⲆⵠⲆⵠΔ: {
        x: -1,
        y: -1
      },
      ⵠΔᐃΔ: [],
      focus: function (a) {
        var b = this.translate.y + (Ax.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ.length > 0 ? -120 : -50);
        if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
          this.ⲆⵠⲆⵠΔ.x = a.x - this.translate.x;
          this.ⲆⵠⲆⵠΔ.y = a.y - b;
        }
      }
    };
    this.ⵠΔᐃⲆ = {
      translate: {
        y: 0,
        x: 0
      },
      ᐃᐃ: ᐃΔ[278],
      ΔⲆ: document.createElement("canvas")
    };
    this.ⵠΔᐃⲆ.ΔⲆ.width = this.ⵠΔᐃⲆ.ᐃᐃ.width;
    this.ⵠΔᐃⲆ.ΔⲆ.height = this.ⵠΔᐃⲆ.ᐃᐃ.height;
    this.ⵠΔᐃⲆ.Ⲇ = this.ⵠΔᐃⲆ.ΔⲆ.getContext("2d");
    this.ⲆᐃⵠⲆ = {
      translate: {
        x: 0,
        y: 0
      },
      ᐃᐃ: ᐃΔ[267],
      ⵠᐃᐃⲆ: Zp,
      y: 0
    };
    var m = ij.document.createElement("div");
    this.ⵠΔⵠⵠⵠᐃᐃ = function () {
      ᐃᐃΔΔⲆ = document.getElementById("team_box");
      ᐃᐃΔΔⲆ.innerHTML = "";
      ᐃᐃΔΔⲆ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((m.innerText = zx.ⵠΔᐃΔ[Ax.ᐃΔⵠⵠᐃ[0]].ⲆⲆΔⵠⵠ) && m.innerHTML) + "</div";
      for (var a = 1; a < Ax.ᐃΔⵠⵠᐃ.length; a++) {
        ᐃᐃΔΔⲆ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((m.innerText = zx.ⵠΔᐃΔ[Ax.ᐃΔⵠⵠᐃ[a]].ⲆⲆΔⵠⵠ) && m.innerHTML) + "</div></div>";
      }
      ᐃᐃΔΔⲆ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
      ᐃᐃΔΔⲆ.style.display = "inline-block";
      document.getElementById("leave").addEventListener("click", wx.ⵠΔⵠⵠⵠᐃᐃ, false);
    };
    this.ᐃΔᐃᐃΔⵠⲆᐃΔ = function () {
      ᐃᐃΔΔⲆ = document.getElementById("team_box");
      ᐃᐃΔΔⲆ.innerHTML = "";
      ᐃᐃΔΔⲆ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((m.innerText = zx.ⵠΔᐃΔ[Ax.ᐃΔⵠⵠᐃ[0]].ⲆⲆΔⵠⵠ) && m.innerHTML) + "</div";
      for (var a = 1; Ax.ᐃΔⵠⵠᐃ.length > a; a++) {
        ᐃᐃΔΔⲆ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((m.innerText = zx.ⵠΔᐃΔ[Ax.ᐃΔⵠⵠᐃ[a]].ⲆⲆΔⵠⵠ) && m.innerHTML) + "</div></div>";
      }
      ᐃᐃΔΔⲆ.innerHTML += "</div>";
      ᐃᐃΔΔⲆ.style.display = "inline-block";
    };
    this.ⲆⵠⲆⵠⵠΔᐃⵠⲆ = function () {
      ᐃᐃΔΔⲆ = document.getElementById("team_box");
      ᐃᐃΔΔⲆ.innerHTML = "";
      ᐃᐃΔΔⲆ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((m.innerText = zx.ⵠΔᐃΔ[Ax.ᐃΔⵠⵠᐃ[0]].ⲆⲆΔⵠⵠ) && m.innerHTML) + "</div";
      for (var a = 1; Ax.ᐃΔⵠⵠᐃ.length > a; a++) {
        ᐃᐃΔΔⲆ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((m.innerText = zx.ⵠΔᐃΔ[Ax.ᐃΔⵠⵠᐃ[a]].ⲆⲆΔⵠⵠ) && m.innerHTML) + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
      }
      if (Ax.ⵠⲆⲆⲆⵠ.lock === 0) {
        ᐃᐃΔΔⲆ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
      } else {
        ᐃᐃΔΔⲆ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
      }
      document.getElementById("lock_team").addEventListener("click", wx.ᐃΔⵠⲆⲆᐃⵠᐃᐃ, hl);
      ᐃᐃΔΔⲆ.style.display = "inline-block";
      for (a = 1; Ax.ᐃΔⵠⵠᐃ.length > a; a++) {
        switch (a) {
          case 1:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              wx.ⵠⵠⵠⵠⲆⵠΔ(1);
            }, false);
            break;
          case 2:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              wx.ⵠⵠⵠⵠⲆⵠΔ(2);
            }, rh);
            break;
          case 3:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              wx.ⵠⵠⵠⵠⲆⵠΔ(3);
            }, Ak);
            break;
          case 4:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              wx.ⵠⵠⵠⵠⲆⵠΔ(4);
            }, nl);
            break;
          case 5:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              wx.ⵠⵠⵠⵠⲆⵠΔ(5);
            }, Dh);
            break;
          case 6:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              wx.ⵠⵠⵠⵠⲆⵠΔ(6);
            }, Oq);
            break;
          case 7:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              wx.ⵠⵠⵠⵠⲆⵠΔ(7);
            }, Dh);
            break;
          case 8:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              wx.ⵠⵠⵠⵠⲆⵠΔ(8);
            }, D);
        }
      }
    };
    this.ΔⵠⲆⵠΔ = [];
    this.ΔⵠⲆⵠΔ[2] = {
      button: pf(60, 60, 0, ᐃΔ[556]),
      action: this.ⵠΔⵠⵠⵠᐃᐃ
    };
    this.ΔⵠⲆⵠΔ[3] = {
      button: pf(60, 60, 0, ᐃΔ[556]),
      action: wx.ᐃᐃᐃΔΔⵠΔΔⲆ
    };
    this.ΔⵠⲆⵠΔ[0] = {
      button: pf(60, 60, 0, ᐃΔ[557]),
      action: this.ⲆⵠⲆⵠⵠΔᐃⵠⲆ
    };
    this.ΔⵠⲆⵠΔ[1] = {
      button: pf(60, 60, 0, ᐃΔ[561]),
      action: this.ᐃΔᐃᐃΔⵠⲆᐃΔ
    };
    this.ΔⵠⲆⵠΔ[4] = {
      button: pf(60, 60, 0, ᐃΔ[560]),
      action: function () { }
    };
    this.ⲆⵠⲆⲆⲆ = -1;
    this.ΔΔᐃΔᐃⵠᐃ = pf(60, 60, 0, ᐃΔ[723]);
    this.ⵠΔⵠᐃⲆᐃⲆ = pf(60, 60, 0, ᐃΔ[724]);
    this.ᐃᐃΔⲆΔΔⵠ = pf(60, 60, 0, ᐃΔ[658]);
    this.ⲆΔⵠΔΔⵠᐃ = pf(60, 60, 0, ᐃΔ[657]);
    this.ΔᐃᐃⵠⵠⵠⲆ = pf(60, 60, 0, ᐃΔ[658]);
    this.ΔⵠⲆⵠΔᐃⵠ = pf(60, 60, 0, ᐃΔ[316]);
    this.ⲆⵠⵠΔΔⵠⲆ = pf(60, 60, 0, ᐃΔ[315]);
    this.ⵠᐃᐃⵠⲆⵠᐃ = pf(60, 60, 0, ᐃΔ[297]);
    this.ⵠⲆⲆⲆΔΔΔ = pf(60, 60, 0, ᐃΔ[298]);
    this.ⵠⵠΔΔᐃⵠⵠ = pf(60, 60, 0, ᐃΔ[418]);
    this.ΔΔΔΔΔⲆΔ = pf(60, 60, 0, ᐃΔ[938]);
    this.ΔⲆᐃⵠⵠⲆΔ = pf(60, 60, 0, ᐃΔ[412]);
    this.ⲆⵠⵠΔΔΔⵠ = pf(60, 60, 0, ᐃΔ[536]);
    this.ΔΔΔⲆⵠΔΔ = pf(60, 60, 0, ᐃΔ[535]);
    this.ΔΔⵠᐃⲆᐃⵠ = pf(60, 60, 0, ᐃΔ[538]);
    this.ΔΔᐃᐃΔ = pf(120, 120, 0, ᐃΔ[149]);
    this.ΔΔᐃᐃΔ.info.translate.x = 10;
    this.ΔΔᐃᐃΔ.info.translate.y = 10;
    this.ᐃⵠΔ = [];
    this.ᐃⵠΔ[0] = pf(68, 68, 0, ᐃΔ[340], 3);
    this.ᐃⵠΔ[0].id = 0;
    this.ᐃⵠΔ[1] = pf(68, 68, 0, ᐃΔ[341], 3);
    this.ᐃⵠΔ[1].id = 1;
    this.ᐃⵠΔ[108] = pf(68, 68, 0, ᐃΔ[342], 3);
    this.ᐃⵠΔ[108].id = 108;
    this.ᐃⵠΔ[109] = pf(68, 68, 0, ᐃΔ[343], 3);
    this.ᐃⵠΔ[109].id = 109;
    this.ᐃⵠΔ[110] = pf(68, 68, 0, ᐃΔ[269], 3);
    this.ᐃⵠΔ[110].id = 110;
    this.ᐃⵠΔ[233] = pf(68, 68, 0, ᐃΔ[1155], 3);
    this.ᐃⵠΔ[233].id = 233;
    this.ᐃⵠΔ[111] = pf(68, 68, 0, ᐃΔ[270], 3);
    this.ᐃⵠΔ[111].id = 111;
    this.ᐃⵠΔ[112] = pf(68, 68, 0, ᐃΔ[271], 3);
    this.ᐃⵠΔ[112].id = 112;
    this.ᐃⵠΔ[3] = pf(68, 68, 0, ᐃΔ[272], 3);
    this.ᐃⵠΔ[3].id = 3;
    this.ᐃⵠΔ[4] = pf(68, 68, 0, ᐃΔ[344], 3);
    this.ᐃⵠΔ[4].id = 4;
    this.ᐃⵠΔ[5] = pf(68, 68, 0, ᐃΔ[345], 3);
    this.ᐃⵠΔ[5].id = 5;
    this.ᐃⵠΔ[57] = pf(68, 68, 0, ᐃΔ[831], 3);
    this.ᐃⵠΔ[57].id = 57;
    this.ᐃⵠΔ[6] = pf(68, 68, 0, ᐃΔ[346], 3);
    this.ᐃⵠΔ[6].id = 6;
    this.ᐃⵠΔ[113] = pf(68, 68, 0, ᐃΔ[273], 3);
    this.ᐃⵠΔ[113].id = 113;
    this.ᐃⵠΔ[114] = pf(68, 68, 0, ᐃΔ[358], 3);
    this.ᐃⵠΔ[114].id = 114;
    this.ᐃⵠΔ[115] = pf(68, 68, 0, ᐃΔ[348], 3);
    this.ᐃⵠΔ[115].id = 115;
    this.ᐃⵠΔ[162] = pf(68, 68, 0, ᐃΔ[349], 3);
    this.ᐃⵠΔ[162].id = 162;
    this.ᐃⵠΔ[160] = pf(68, 68, 0, ᐃΔ[350], 3);
    this.ᐃⵠΔ[160].id = 160;
    this.ᐃⵠΔ[8] = pf(68, 68, 0, ᐃΔ[274], 3);
    this.ᐃⵠΔ[8].id = 8;
    this.ᐃⵠΔ[117] = pf(68, 68, 0, ᐃΔ[351], 3);
    this.ᐃⵠΔ[117].id = 117;
    this.ᐃⵠΔ[116] = pf(68, 68, 0, ᐃΔ[275], 3);
    this.ᐃⵠΔ[116].id = 116;
    this.ᐃⵠΔ[118] = pf(68, 68, 0, ᐃΔ[276], 3);
    this.ᐃⵠΔ[118].id = 118;
    this.ᐃⵠΔ[195] = pf(68, 68, 0, ᐃΔ[352], 3);
    this.ᐃⵠΔ[195].id = 195;
    this.ᐃⵠΔ[161] = pf(68, 68, 0, ᐃΔ[353], 3);
    this.ᐃⵠΔ[161].id = 161;
    this.ᐃⵠΔ[163] = pf(68, 68, 0, ᐃΔ[354], 3);
    this.ᐃⵠΔ[163].id = 163;
    this.ᐃⵠΔ[164] = pf(68, 68, 0, ᐃΔ[355], 3);
    this.ᐃⵠΔ[164].id = 164;
    this.ᐃⵠΔ[165] = pf(68, 68, 0, ᐃΔ[356], 3);
    this.ᐃⵠΔ[165].id = 165;
    this.ᐃⵠΔ[166] = pf(68, 68, 0, ᐃΔ[357], 3);
    this.ᐃⵠΔ[166].id = 166;
    this.ᐃⵠΔ[167] = pf(68, 68, 0, ᐃΔ[359], 3);
    this.ᐃⵠΔ[167].id = 167;
    this.ᐃⵠΔ[168] = pf(68, 68, 0, ᐃΔ[382], 3);
    this.ᐃⵠΔ[168].id = 168;
    this.ᐃⵠΔ[169] = pf(68, 68, 0, ᐃΔ[383], 3);
    this.ᐃⵠΔ[169].id = 169;
    this.ᐃⵠΔ[170] = pf(68, 68, 0, ᐃΔ[384], 3);
    this.ᐃⵠΔ[170].id = 170;
    this.ᐃⵠΔ[2] = pf(68, 68, 0, ᐃΔ[386], 3);
    this.ᐃⵠΔ[2].id = 2;
    this.ᐃⵠΔ[237] = pf(68, 68, 0, ᐃΔ[1163], 3);
    this.ᐃⵠΔ[237].id = 237;
    this.ᐃⵠΔ[174] = pf(68, 68, 0, ᐃΔ[394], 3);
    this.ᐃⵠΔ[174].id = 174;
    this.ᐃⵠΔ[222] = pf(68, 68, 0, ᐃΔ[1036], 3);
    this.ᐃⵠΔ[222].id = 222;
    this.ᐃⵠΔ[231] = pf(68, 68, 0, ᐃΔ[1038], 3);
    this.ᐃⵠΔ[231].id = 231;
    this.ᐃⵠΔ[232] = pf(68, 68, 0, ᐃΔ[1040], 3);
    this.ᐃⵠΔ[232].id = 232;
    this.ᐃⵠΔ[234] = pf(68, 68, 0, ᐃΔ[1157], 3);
    this.ᐃⵠΔ[234].id = 234;
    this.ᐃⵠΔ[10] = pf(68, 68, 0, ᐃΔ[387], 3);
    this.ᐃⵠΔ[10].id = 10;
    this.ᐃⵠΔ[171] = pf(68, 68, 0, ᐃΔ[388], 3);
    this.ᐃⵠΔ[171].id = 171;
    this.ᐃⵠΔ[172] = pf(68, 68, 0, ᐃΔ[389], 3);
    this.ᐃⵠΔ[172].id = 172;
    this.ᐃⵠΔ[173] = pf(68, 68, 0, ᐃΔ[390], 3);
    this.ᐃⵠΔ[173].id = 173;
    this.ᐃⵠΔ[11] = pf(68, 68, 0, ᐃΔ[391], 3);
    this.ᐃⵠΔ[11].id = 11;
    this.ᐃⵠΔ[12] = pf(68, 68, 0, ᐃΔ[403], 3);
    this.ᐃⵠΔ[12].id = 12;
    this.ᐃⵠΔ[13] = pf(68, 68, 0, ᐃΔ[397], 3);
    this.ᐃⵠΔ[13].id = 13;
    this.ᐃⵠΔ[14] = pf(68, 68, 0, ᐃΔ[400], 3);
    this.ᐃⵠΔ[14].id = 14;
    this.ᐃⵠΔ[15] = pf(68, 68, 0, ᐃΔ[406], 3);
    this.ᐃⵠΔ[15].id = 15;
    this.ᐃⵠΔ[16] = pf(68, 68, 0, ᐃΔ[875], 3);
    this.ᐃⵠΔ[16].id = 16;
    this.ᐃⵠΔ[119] = pf(68, 68, 0, ᐃΔ[410], 3);
    this.ᐃⵠΔ[119].id = 119;
    this.ᐃⵠΔ[23] = pf(68, 68, 0, ᐃΔ[422], 3);
    this.ᐃⵠΔ[23].id = 23;
    this.ᐃⵠΔ[24] = pf(68, 68, 0, ᐃΔ[425], 3);
    this.ᐃⵠΔ[24].id = 24;
    this.ᐃⵠΔ[87] = pf(68, 68, 0, ᐃΔ[1229], 3);
    this.ᐃⵠΔ[87].id = 87;
    this.ᐃⵠΔ[88] = pf(68, 68, 0, ᐃΔ[1232], 3);
    this.ᐃⵠΔ[88].id = 88;
    this.ᐃⵠΔ[80] = pf(68, 68, 0, ᐃΔ[1139], 3);
    this.ᐃⵠΔ[80].id = 80;
    this.ᐃⵠΔ[81] = pf(68, 68, 0, ᐃΔ[1142], 3);
    this.ᐃⵠΔ[81].id = 81;
    this.ᐃⵠΔ[101] = pf(68, 68, 0, ᐃΔ[1167], 3);
    this.ᐃⵠΔ[101].id = 101;
    this.ᐃⵠΔ[64] = pf(68, 68, 0, ᐃΔ[571], 3);
    this.ᐃⵠΔ[64].id = 64;
    this.ᐃⵠΔ[71] = pf(68, 68, 0, ᐃΔ[1240], 3);
    this.ᐃⵠΔ[71].id = 71;
    this.ᐃⵠΔ[102] = pf(68, 68, 0, ᐃΔ[1170], 3);
    this.ᐃⵠΔ[102].id = 102;
    this.ᐃⵠΔ[65] = pf(68, 68, 0, ᐃΔ[574], 3);
    this.ᐃⵠΔ[65].id = 65;
    this.ᐃⵠΔ[72] = pf(68, 68, 0, ᐃΔ[1243], 3);
    this.ᐃⵠΔ[72].id = 72;
    this.ᐃⵠΔ[103] = pf(68, 68, 0, ᐃΔ[1173], 3);
    this.ᐃⵠΔ[103].id = 103;
    this.ᐃⵠΔ[66] = pf(68, 68, 0, ᐃΔ[577], 3);
    this.ᐃⵠΔ[66].id = 66;
    this.ᐃⵠΔ[73] = pf(68, 68, 0, ᐃΔ[1246], 3);
    this.ᐃⵠΔ[73].id = 73;
    this.ᐃⵠΔ[104] = pf(68, 68, 0, ᐃΔ[1176], 3);
    this.ᐃⵠΔ[104].id = 104;
    this.ᐃⵠΔ[67] = pf(68, 68, 0, ᐃΔ[580], 3);
    this.ᐃⵠΔ[67].id = 67;
    this.ᐃⵠΔ[74] = pf(68, 68, 0, ᐃΔ[1249], 3);
    this.ᐃⵠΔ[74].id = 74;
    this.ᐃⵠΔ[105] = pf(68, 68, 0, ᐃΔ[1179], 3);
    this.ᐃⵠΔ[105].id = 105;
    this.ᐃⵠΔ[68] = pf(68, 68, 0, ᐃΔ[583], 3);
    this.ᐃⵠΔ[68].id = 68;
    this.ᐃⵠΔ[75] = pf(68, 68, 0, ᐃΔ[1252], 3);
    this.ᐃⵠΔ[75].id = 75;
    this.ᐃⵠΔ[106] = pf(68, 68, 0, ᐃΔ[1182], 3);
    this.ᐃⵠΔ[106].id = 106;
    this.ᐃⵠΔ[69] = pf(68, 68, 0, ᐃΔ[586], 3);
    this.ᐃⵠΔ[69].id = 69;
    this.ᐃⵠΔ[76] = pf(68, 68, 0, ᐃΔ[1255], 3);
    this.ᐃⵠΔ[76].id = 76;
    this.ᐃⵠΔ[107] = pf(68, 68, 0, ᐃΔ[1185], 3);
    this.ᐃⵠΔ[107].id = 107;
    this.ᐃⵠΔ[70] = pf(68, 68, 0, ᐃΔ[589], 3);
    this.ᐃⵠΔ[70].id = 70;
    this.ᐃⵠΔ[94] = pf(68, 68, 0, ᐃΔ[1258], 3);
    this.ᐃⵠΔ[94].id = 94;
    this.ᐃⵠΔ[95] = pf(68, 68, 0, ᐃΔ[1261], 3);
    this.ᐃⵠΔ[95].id = 95;
    this.ᐃⵠΔ[96] = pf(68, 68, 0, ᐃΔ[1264], 3);
    this.ᐃⵠΔ[96].id = 96;
    this.ᐃⵠΔ[97] = pf(68, 68, 0, ᐃΔ[1267], 3);
    this.ᐃⵠΔ[97].id = 97;
    this.ᐃⵠΔ[98] = pf(68, 68, 0, ᐃΔ[1270], 3);
    this.ᐃⵠΔ[98].id = 98;
    this.ᐃⵠΔ[99] = pf(68, 68, 0, ᐃΔ[1273], 3);
    this.ᐃⵠΔ[99].id = 99;
    this.ᐃⵠΔ[58] = pf(68, 68, 0, ᐃΔ[828], 3);
    this.ᐃⵠΔ[58].id = 58;
    this.ᐃⵠΔ[25] = pf(68, 68, 0, ᐃΔ[431], 3);
    this.ᐃⵠΔ[25].id = 25;
    this.ᐃⵠΔ[26] = pf(68, 68, 0, ᐃΔ[434], 3);
    this.ᐃⵠΔ[26].id = 26;
    this.ᐃⵠΔ[27] = pf(68, 68, 0, ᐃΔ[437], 3);
    this.ᐃⵠΔ[27].id = 27;
    this.ᐃⵠΔ[28] = pf(68, 68, 0, ᐃΔ[440], 3);
    this.ᐃⵠΔ[28].id = 28;
    this.ᐃⵠΔ[120] = pf(68, 68, 0, ᐃΔ[443], 3);
    this.ᐃⵠΔ[120].id = 120;
    this.ᐃⵠΔ[29] = pf(68, 68, 0, ᐃΔ[385], 3);
    this.ᐃⵠΔ[29].id = 29;
    this.ᐃⵠΔ[121] = pf(68, 68, 0, ᐃΔ[446], 3);
    this.ᐃⵠΔ[121].id = 121;
    this.ᐃⵠΔ[30] = pf(68, 68, 0, ᐃΔ[457], 3);
    this.ᐃⵠΔ[30].id = 30;
    this.ᐃⵠΔ[9] = pf(68, 68, 0, ᐃΔ[862], 3);
    this.ᐃⵠΔ[9].id = 9;
    this.ᐃⵠΔ[31] = pf(68, 68, 0, ᐃΔ[459], 3);
    this.ᐃⵠΔ[31].id = 31;
    this.ᐃⵠΔ[32] = pf(68, 68, 0, ᐃΔ[1018], 3);
    this.ᐃⵠΔ[32].id = 32;
    this.ᐃⵠΔ[33] = pf(68, 68, 0, ᐃΔ[474], 3);
    this.ᐃⵠΔ[33].id = 33;
    this.ᐃⵠΔ[35] = pf(68, 68, 0, ᐃΔ[479], 3);
    this.ᐃⵠΔ[35].id = 35;
    this.ᐃⵠΔ[36] = pf(68, 68, 0, ᐃΔ[482], 3);
    this.ᐃⵠΔ[36].id = 36;
    this.ᐃⵠΔ[37] = pf(68, 68, 0, ᐃΔ[485], 3);
    this.ᐃⵠΔ[37].id = 37;
    this.ᐃⵠΔ[38] = pf(68, 68, 0, ᐃΔ[488], 3);
    this.ᐃⵠΔ[38].id = 38;
    this.ᐃⵠΔ[39] = pf(68, 68, 0, ᐃΔ[491], 3);
    this.ᐃⵠΔ[39].id = 39;
    this.ᐃⵠΔ[122] = pf(68, 68, 0, ᐃΔ[494], 3);
    this.ᐃⵠΔ[122].id = 122;
    this.ᐃⵠΔ[123] = pf(68, 68, 0, ᐃΔ[497], 3);
    this.ᐃⵠΔ[123].id = 123;
    this.ᐃⵠΔ[124] = pf(68, 68, 0, ᐃΔ[501], 3);
    this.ᐃⵠΔ[124].id = 124;
    this.ᐃⵠΔ[40] = pf(68, 68, 0, ᐃΔ[504], 3);
    this.ᐃⵠΔ[40].id = 40;
    this.ᐃⵠΔ[146] = pf(68, 68, 0, ᐃΔ[506], 3);
    this.ᐃⵠΔ[146].id = 146;
    this.ᐃⵠΔ[240] = pf(68, 68, 0, ᐃΔ[1234], 3);
    this.ᐃⵠΔ[240].id = 240;
    this.ᐃⵠΔ[147] = pf(68, 68, 0, ᐃΔ[514], 3);
    this.ᐃⵠΔ[147].id = 147;
    this.ᐃⵠΔ[148] = pf(68, 68, 0, ᐃΔ[520], 3);
    this.ᐃⵠΔ[148].id = 148;
    this.ᐃⵠΔ[149] = pf(68, 68, 0, ᐃΔ[522], 3);
    this.ᐃⵠΔ[149].id = 149;
    this.ᐃⵠΔ[150] = pf(68, 68, 0, ᐃΔ[524], 3);
    this.ᐃⵠΔ[150].id = 150;
    this.ᐃⵠΔ[151] = pf(68, 68, 0, ᐃΔ[531], 3);
    this.ᐃⵠΔ[151].id = 151;
    this.ᐃⵠΔ[158] = pf(68, 68, 0, ᐃΔ[534], 3);
    this.ᐃⵠΔ[158].id = 158;
    this.ᐃⵠΔ[159] = pf(68, 68, 0, ᐃΔ[554], 3);
    this.ᐃⵠΔ[159].id = 159;
    this.ᐃⵠΔ[43] = pf(68, 68, 0, ᐃΔ[543], 3);
    this.ᐃⵠΔ[43].id = 43;
    this.ᐃⵠΔ[45] = pf(68, 68, 0, ᐃΔ[552], 3);
    this.ᐃⵠΔ[45].id = 45;
    this.ᐃⵠΔ[125] = pf(68, 68, 0, ᐃΔ[606], 3);
    this.ᐃⵠΔ[125].id = 125;
    this.ᐃⵠΔ[221] = pf(68, 68, 0, ᐃΔ[1237], 3);
    this.ᐃⵠΔ[221].id = 221;
    this.ᐃⵠΔ[223] = pf(68, 68, 0, ᐃΔ[1029], 3);
    this.ᐃⵠΔ[223].id = 223;
    this.ᐃⵠΔ[224] = pf(68, 68, 0, ᐃΔ[1032], 3);
    this.ᐃⵠΔ[224].id = 224;
    this.ᐃⵠΔ[230] = pf(68, 68, 0, ᐃΔ[1118], 3);
    this.ᐃⵠΔ[230].id = 230;
    this.ᐃⵠΔ[89] = pf(68, 68, 0, ᐃΔ[1047], 3);
    this.ᐃⵠΔ[89].id = 89;
    this.ᐃⵠΔ[225] = pf(68, 68, 0, ᐃΔ[1050], 3);
    this.ᐃⵠΔ[225].id = 225;
    this.ᐃⵠΔ[227] = pf(68, 68, 0, ᐃΔ[1081], 3);
    this.ᐃⵠΔ[227].id = 227;
    this.ᐃⵠΔ[239] = pf(68, 68, 0, ᐃΔ[1225], 3);
    this.ᐃⵠΔ[239].id = 239;
    this.ᐃⵠΔ[228] = pf(68, 68, 0, ᐃΔ[1096], 3);
    this.ᐃⵠΔ[228].id = 228;
    this.ᐃⵠΔ[229] = pf(68, 68, 0, ᐃΔ[1111], 3);
    this.ᐃⵠΔ[229].id = 229;
    this.ᐃⵠΔ[226] = pf(68, 68, 0, ᐃΔ[1190], 3);
    this.ᐃⵠΔ[226].id = 226;
    this.ᐃⵠΔ[126] = pf(68, 68, 0, ᐃΔ[610], 3);
    this.ᐃⵠΔ[126].id = 126;
    this.ᐃⵠΔ[127] = pf(68, 68, 0, ᐃΔ[615], 3);
    this.ᐃⵠΔ[127].id = 127;
    this.ᐃⵠΔ[128] = pf(68, 68, 0, ᐃΔ[614], 3);
    this.ᐃⵠΔ[128].id = 128;
    this.ᐃⵠΔ[46] = pf(68, 68, 0, ᐃΔ[617], 3);
    this.ᐃⵠΔ[46].id = 46;
    this.ᐃⵠΔ[50] = pf(68, 68, 0, ᐃΔ[701], 3);
    this.ᐃⵠΔ[50].id = 50;
    this.ᐃⵠΔ[51] = pf(68, 68, 0, ᐃΔ[703], 3);
    this.ᐃⵠΔ[51].id = 51;
    this.ᐃⵠΔ[52] = pf(68, 68, 0, ᐃΔ[707], 3);
    this.ᐃⵠΔ[52].id = 52;
    this.ᐃⵠΔ[55] = pf(68, 68, 0, ᐃΔ[710], 3);
    this.ᐃⵠΔ[55].id = 55;
    this.ᐃⵠΔ[129] = pf(68, 68, 0, ᐃΔ[625], 3);
    this.ᐃⵠΔ[129].id = 129;
    this.ᐃⵠΔ[130] = pf(68, 68, 0, ᐃΔ[628], 3);
    this.ᐃⵠΔ[130].id = 130;
    this.ᐃⵠΔ[131] = pf(68, 68, 0, ᐃΔ[630], 3);
    this.ᐃⵠΔ[131].id = 131;
    this.ᐃⵠΔ[132] = pf(68, 68, 0, ᐃΔ[633], 3);
    this.ᐃⵠΔ[132].id = 132;
    this.ᐃⵠΔ[133] = pf(68, 68, 0, ᐃΔ[636], 3);
    this.ᐃⵠΔ[133].id = 133;
    this.ᐃⵠΔ[134] = pf(68, 68, 0, ᐃΔ[640], 3);
    this.ᐃⵠΔ[134].id = 134;
    this.ᐃⵠΔ[135] = pf(68, 68, 0, ᐃΔ[645], 3);
    this.ᐃⵠΔ[135].id = 135;
    this.ᐃⵠΔ[47] = pf(68, 68, 0, ᐃΔ[648], 3);
    this.ᐃⵠΔ[47].id = 47;
    this.ᐃⵠΔ[48] = pf(68, 68, 0, ᐃΔ[651], 3);
    this.ᐃⵠΔ[48].id = 48;
    this.ᐃⵠΔ[49] = pf(68, 68, 0, ᐃΔ[653], 3);
    this.ᐃⵠΔ[49].id = 49;
    this.ᐃⵠΔ[136] = pf(68, 68, 0, ᐃΔ[661], 3);
    this.ᐃⵠΔ[136].id = 136;
    this.ᐃⵠΔ[143] = pf(68, 68, 0, ᐃΔ[689], 3);
    this.ᐃⵠΔ[143].id = 143;
    this.ᐃⵠΔ[137] = pf(68, 68, 0, ᐃΔ[663], 3);
    this.ᐃⵠΔ[137].id = 137;
    this.ᐃⵠΔ[138] = pf(68, 68, 0, ᐃΔ[665], 3);
    this.ᐃⵠΔ[138].id = 138;
    this.ᐃⵠΔ[139] = pf(68, 68, 0, ᐃΔ[675], 3);
    this.ᐃⵠΔ[139].id = 139;
    this.ᐃⵠΔ[140] = pf(68, 68, 0, ᐃΔ[682], 3);
    this.ᐃⵠΔ[140].id = 140;
    this.ᐃⵠΔ[141] = pf(68, 68, 0, ᐃΔ[683], 3);
    this.ᐃⵠΔ[141].id = 141;
    this.ᐃⵠΔ[142] = pf(68, 68, 0, ᐃΔ[686], 3);
    this.ᐃⵠΔ[142].id = 142;
    this.ᐃⵠΔ[144] = pf(68, 68, 0, ᐃΔ[719], 3);
    this.ᐃⵠΔ[144].id = 144;
    this.ᐃⵠΔ[145] = pf(68, 68, 0, ᐃΔ[731], 3);
    this.ᐃⵠΔ[145].id = 145;
    this.ᐃⵠΔ[59] = pf(68, 68, 0, ᐃΔ[733], 3);
    this.ᐃⵠΔ[59].id = 59;
    this.ᐃⵠΔ[62] = pf(68, 68, 0, ᐃΔ[565], 3);
    this.ᐃⵠΔ[62].id = 62;
    this.ᐃⵠΔ[185] = pf(68, 68, 0, ᐃΔ[590], 3);
    this.ᐃⵠΔ[185].id = 185;
    this.ᐃⵠΔ[184] = pf(68, 68, 0, ᐃΔ[752], 3);
    this.ᐃⵠΔ[184].id = 184;
    this.ᐃⵠΔ[187] = pf(68, 68, 0, ᐃΔ[591], 3);
    this.ᐃⵠΔ[187].id = 187;
    this.ᐃⵠΔ[186] = pf(68, 68, 0, ᐃΔ[754], 3);
    this.ᐃⵠΔ[186].id = 186;
    this.ᐃⵠΔ[77] = pf(68, 68, 0, ᐃΔ[757], 3);
    this.ᐃⵠΔ[77].id = 77;
    this.ᐃⵠΔ[175] = pf(68, 68, 0, ᐃΔ[759], 3);
    this.ᐃⵠΔ[175].id = 175;
    this.ᐃⵠΔ[176] = pf(68, 68, 0, ᐃΔ[763], 3);
    this.ᐃⵠΔ[176].id = 176;
    this.ᐃⵠΔ[78] = pf(68, 68, 0, ᐃΔ[761], 3);
    this.ᐃⵠΔ[78].id = 78;
    this.ᐃⵠΔ[177] = pf(68, 68, 0, ᐃΔ[766], 3);
    this.ᐃⵠΔ[177].id = 177;
    this.ᐃⵠΔ[79] = pf(68, 68, 0, ᐃΔ[765], 3);
    this.ᐃⵠΔ[79].id = 79;
    this.ᐃⵠΔ[83] = pf(68, 68, 0, ᐃΔ[769], 3);
    this.ᐃⵠΔ[83].id = 83;
    this.ᐃⵠΔ[84] = pf(68, 68, 0, ᐃΔ[773], 3);
    this.ᐃⵠΔ[84].id = 84;
    this.ᐃⵠΔ[178] = pf(68, 68, 0, ᐃΔ[774], 3);
    this.ᐃⵠΔ[178].id = 178;
    this.ᐃⵠΔ[179] = pf(68, 68, 0, ᐃΔ[775], 3);
    this.ᐃⵠΔ[179].id = 179;
    this.ᐃⵠΔ[86] = pf(68, 68, 0, ᐃΔ[778], 3);
    this.ᐃⵠΔ[86].id = 86;
    this.ᐃⵠΔ[85] = pf(68, 68, 0, ᐃΔ[781], 3);
    this.ᐃⵠΔ[85].id = 85;
    this.ᐃⵠΔ[180] = pf(68, 68, 0, ᐃΔ[786], 3);
    this.ᐃⵠΔ[180].id = 180;
    this.ᐃⵠΔ[181] = pf(68, 68, 0, ᐃΔ[787], 3);
    this.ᐃⵠΔ[181].id = 181;
    this.ᐃⵠΔ[182] = pf(68, 68, 0, ᐃΔ[790], 3);
    this.ᐃⵠΔ[182].id = 182;
    this.ᐃⵠΔ[183] = pf(68, 68, 0, ᐃΔ[801], 3);
    this.ᐃⵠΔ[183].id = 183;
    this.ᐃⵠΔ[188] = pf(68, 68, 0, ᐃΔ[810], 3);
    this.ᐃⵠΔ[188].id = 188;
    this.ᐃⵠΔ[189] = pf(68, 68, 0, ᐃΔ[815], 3);
    this.ᐃⵠΔ[189].id = 189;
    this.ᐃⵠΔ[190] = pf(68, 68, 0, ᐃΔ[844], 3);
    this.ᐃⵠΔ[190].id = 190;
    this.ᐃⵠΔ[191] = pf(68, 68, 0, ᐃΔ[836], 3);
    this.ᐃⵠΔ[191].id = 191;
    this.ᐃⵠΔ[192] = pf(68, 68, 0, ᐃΔ[841], 3);
    this.ᐃⵠΔ[192].id = 192;
    this.ᐃⵠΔ[193] = pf(68, 68, 0, ᐃΔ[847], 3);
    this.ᐃⵠΔ[193].id = 193;
    this.ᐃⵠΔ[194] = pf(68, 68, 0, ᐃΔ[851], 3);
    this.ᐃⵠΔ[194].id = 194;
    this.ᐃⵠΔ[206] = pf(68, 68, 0, ᐃΔ[961], 3);
    this.ᐃⵠΔ[206].id = 206;
    this.ᐃⵠΔ[207] = pf(68, 68, 0, ᐃΔ[974], 3);
    this.ᐃⵠΔ[207].id = 207;
    this.ᐃⵠΔ[204] = pf(68, 68, 0, ᐃΔ[951], 3);
    this.ᐃⵠΔ[204].id = 204;
    this.ᐃⵠΔ[205] = pf(68, 68, 0, ᐃΔ[956], 3);
    this.ᐃⵠΔ[205].id = 205;
    this.ᐃⵠΔ[208] = pf(68, 68, 0, ᐃΔ[968], 3);
    this.ᐃⵠΔ[208].id = 208;
    this.ᐃⵠΔ[209] = pf(68, 68, 0, ᐃΔ[973], 3);
    this.ᐃⵠΔ[209].id = 209;
    this.ᐃⵠΔ[210] = pf(68, 68, 0, ᐃΔ[983], 3);
    this.ᐃⵠΔ[210].id = 210;
    this.ᐃⵠΔ[211] = pf(68, 68, 0, ᐃΔ[988], 3);
    this.ᐃⵠΔ[211].id = 211;
    this.ᐃⵠΔ[41] = pf(68, 68, 0, ᐃΔ[881], 3);
    this.ᐃⵠΔ[41].id = 41;
    this.ᐃⵠΔ[42] = pf(68, 68, 0, ᐃΔ[883], 3);
    this.ᐃⵠΔ[42].id = 42;
    this.ᐃⵠΔ[12] = pf(68, 68, 0, ᐃΔ[403], 3);
    this.ᐃⵠΔ[12].id = 12;
    this.ᐃⵠΔ[16] = pf(68, 68, 0, ᐃΔ[875], 3);
    this.ᐃⵠΔ[16].id = 16;
    this.ᐃⵠΔ[196] = pf(68, 68, 0, ᐃΔ[898], 3);
    this.ᐃⵠΔ[196].id = 196;
    this.ᐃⵠΔ[18] = pf(68, 68, 0, ᐃΔ[899], 3);
    this.ᐃⵠΔ[18].id = 18;
    this.ᐃⵠΔ[197] = pf(68, 68, 0, ᐃΔ[906], 3);
    this.ᐃⵠΔ[197].id = 197;
    this.ᐃⵠΔ[198] = pf(68, 68, 0, ᐃΔ[908], 3);
    this.ᐃⵠΔ[198].id = 198;
    this.ᐃⵠΔ[61] = pf(68, 68, 0, ᐃΔ[911], 3);
    this.ᐃⵠΔ[61].id = 61;
    this.ᐃⵠΔ[201] = pf(68, 68, 0, ᐃΔ[871], 3);
    this.ᐃⵠΔ[201].id = 201;
    this.ᐃⵠΔ[199] = pf(68, 68, 0, ᐃΔ[863], 3);
    this.ᐃⵠΔ[199].id = 199;
    this.ᐃⵠΔ[200] = pf(68, 68, 0, ᐃΔ[868], 3);
    this.ᐃⵠΔ[200].id = 200;
    this.ⵠⵠⲆⲆⲆ = [];
    for (k = 0; k < 250; k++) {
      this.ⵠⵠⲆⲆⲆ[k] = pf(0, 0, 0, ᐃΔ[366]);
    }
    this.ᐃⵠⵠ = [];
    this.ᐃⵠⵠ[0] = pf(60, 60, 0, ᐃΔ[261], 3);
    this.ᐃⵠⵠ[0].id = 0;
    this.ᐃⵠⵠ[1] = pf(60, 60, 0, ᐃΔ[312], 3);
    this.ᐃⵠⵠ[1].id = 1;
    this.ᐃⵠⵠ[108] = pf(60, 60, 0, ᐃΔ[315], 3);
    this.ᐃⵠⵠ[108].id = 108;
    this.ᐃⵠⵠ[108].info.ᐃᐃ[2] = this.ᐃⵠⵠ[108].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[109] = pf(60, 60, 0, ᐃΔ[316], 3);
    this.ᐃⵠⵠ[109].id = 109;
    this.ᐃⵠⵠ[109].info.ᐃᐃ[2] = this.ᐃⵠⵠ[109].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[110] = pf(60, 60, 0, ᐃΔ[277], 3);
    this.ᐃⵠⵠ[110].id = 110;
    this.ᐃⵠⵠ[233] = pf(60, 60, 0, ᐃΔ[1154], 3);
    this.ᐃⵠⵠ[233].id = 233;
    this.ᐃⵠⵠ[111] = pf(60, 60, 0, ᐃΔ[297], 3);
    this.ᐃⵠⵠ[111].id = 111;
    this.ᐃⵠⵠ[111].info.ᐃᐃ[2] = this.ᐃⵠⵠ[111].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[112] = pf(60, 60, 0, ᐃΔ[298], 3);
    this.ᐃⵠⵠ[112].id = 112;
    this.ᐃⵠⵠ[112].info.ᐃᐃ[2] = this.ᐃⵠⵠ[112].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[3] = pf(60, 60, 0, ᐃΔ[258], 3);
    this.ᐃⵠⵠ[3].id = 3;
    this.ᐃⵠⵠ[4] = pf(60, 60, 0, ᐃΔ[296], 3);
    this.ᐃⵠⵠ[4].id = 4;
    this.ᐃⵠⵠ[5] = pf(60, 60, 0, ᐃΔ[292], 3);
    this.ᐃⵠⵠ[5].id = 5;
    this.ᐃⵠⵠ[57] = pf(60, 60, 0, ᐃΔ[829], 3);
    this.ᐃⵠⵠ[57].id = 57;
    this.ᐃⵠⵠ[6] = pf(60, 60, 0, ᐃΔ[293], 3);
    this.ᐃⵠⵠ[6].id = 6;
    this.ᐃⵠⵠ[113] = pf(60, 60, 0, ᐃΔ[309], 3);
    this.ᐃⵠⵠ[113].id = 113;
    this.ᐃⵠⵠ[114] = pf(60, 60, 0, ᐃΔ[310], 3);
    this.ᐃⵠⵠ[114].id = 114;
    this.ᐃⵠⵠ[115] = pf(60, 60, 0, ᐃΔ[311], 3);
    this.ᐃⵠⵠ[115].id = 115;
    this.ᐃⵠⵠ[162] = pf(60, 60, 0, ᐃΔ[317], 3);
    this.ᐃⵠⵠ[162].id = 162;
    this.ᐃⵠⵠ[160] = pf(60, 60, 0, ᐃΔ[319], 3);
    this.ᐃⵠⵠ[160].id = 160;
    this.ᐃⵠⵠ[8] = pf(60, 60, 0, ᐃΔ[313], 3);
    this.ᐃⵠⵠ[8].id = 8;
    this.ᐃⵠⵠ[117] = pf(60, 60, 0, ᐃΔ[323], 3);
    this.ᐃⵠⵠ[117].id = 117;
    this.ᐃⵠⵠ[116] = pf(60, 60, 0, ᐃΔ[300], 3);
    this.ᐃⵠⵠ[116].id = 116;
    this.ᐃⵠⵠ[118] = pf(60, 60, 0, ᐃΔ[328], 3);
    this.ᐃⵠⵠ[118].id = 118;
    this.ᐃⵠⵠ[195] = pf(60, 60, 0, ᐃΔ[303], 3);
    this.ᐃⵠⵠ[195].id = 195;
    this.ᐃⵠⵠ[161] = pf(60, 60, 0, ᐃΔ[305], 3);
    this.ᐃⵠⵠ[161].id = 161;
    this.ᐃⵠⵠ[161].info.ᐃᐃ[2] = this.ᐃⵠⵠ[161].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[163] = pf(60, 60, 0, ᐃΔ[329], 3);
    this.ᐃⵠⵠ[163].id = 163;
    this.ᐃⵠⵠ[164] = pf(60, 60, 0, ᐃΔ[330], 3);
    this.ᐃⵠⵠ[164].id = 164;
    this.ᐃⵠⵠ[165] = pf(60, 60, 0, ᐃΔ[331], 3);
    this.ᐃⵠⵠ[165].id = 165;
    this.ᐃⵠⵠ[166] = pf(60, 60, 0, ᐃΔ[335], 3);
    this.ᐃⵠⵠ[166].id = 166;
    this.ᐃⵠⵠ[167] = pf(60, 60, 0, ᐃΔ[337], 3);
    this.ᐃⵠⵠ[167].id = 167;
    this.ᐃⵠⵠ[168] = pf(60, 60, 0, ᐃΔ[361], 3);
    this.ᐃⵠⵠ[168].id = 168;
    this.ᐃⵠⵠ[169] = pf(60, 60, 0, ᐃΔ[362], 3);
    this.ᐃⵠⵠ[169].id = 169;
    this.ᐃⵠⵠ[170] = pf(60, 60, 0, ᐃΔ[364], 3);
    this.ᐃⵠⵠ[170].id = 170;
    this.ᐃⵠⵠ[29] = pf(60, 60, 0, ᐃΔ[392], 3);
    this.ᐃⵠⵠ[29].id = 29;
    this.ᐃⵠⵠ[10] = pf(60, 60, 0, ᐃΔ[369], 3);
    this.ᐃⵠⵠ[10].id = 10;
    this.ᐃⵠⵠ[171] = pf(60, 60, 0, ᐃΔ[372], 3);
    this.ᐃⵠⵠ[171].id = 171;
    this.ᐃⵠⵠ[172] = pf(60, 60, 0, ᐃΔ[375], 3);
    this.ᐃⵠⵠ[172].id = 172;
    this.ᐃⵠⵠ[173] = pf(60, 60, 0, ᐃΔ[378], 3);
    this.ᐃⵠⵠ[173].id = 173;
    this.ᐃⵠⵠ[2] = pf(60, 60, 0, ᐃΔ[368], 3);
    this.ᐃⵠⵠ[2].id = 2;
    this.ᐃⵠⵠ[2].info.ᐃᐃ[2] = this.ᐃⵠⵠ[2].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[237] = pf(60, 60, 0, ᐃΔ[1162], 3);
    this.ᐃⵠⵠ[237].id = 237;
    this.ᐃⵠⵠ[237].info.ᐃᐃ[2] = this.ᐃⵠⵠ[237].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[174] = pf(60, 60, 0, ᐃΔ[393], 3);
    this.ᐃⵠⵠ[174].id = 174;
    this.ᐃⵠⵠ[174].info.ᐃᐃ[2] = this.ᐃⵠⵠ[174].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[222] = pf(60, 60, 0, ᐃΔ[1035], 3);
    this.ᐃⵠⵠ[222].id = 222;
    this.ᐃⵠⵠ[231] = pf(60, 60, 0, ᐃΔ[1037], 3);
    this.ᐃⵠⵠ[231].id = 231;
    this.ᐃⵠⵠ[232] = pf(60, 60, 0, ᐃΔ[1039], 3);
    this.ᐃⵠⵠ[232].id = 232;
    this.ᐃⵠⵠ[234] = pf(60, 60, 0, ᐃΔ[1156], 3);
    this.ᐃⵠⵠ[234].id = 234;
    this.ᐃⵠⵠ[10] = pf(60, 60, 0, ᐃΔ[369], 3);
    this.ᐃⵠⵠ[10].id = 10;
    this.ᐃⵠⵠ[11] = pf(60, 60, 0, ᐃΔ[381], 3);
    this.ᐃⵠⵠ[11].id = 11;
    this.ᐃⵠⵠ[12] = pf(60, 60, 0, ᐃΔ[401], 3);
    this.ᐃⵠⵠ[12].id = 12;
    this.ᐃⵠⵠ[13] = pf(60, 60, 0, ᐃΔ[395], 3);
    this.ᐃⵠⵠ[13].id = 13;
    this.ᐃⵠⵠ[14] = pf(60, 60, 0, ᐃΔ[398], 3);
    this.ᐃⵠⵠ[14].id = 14;
    this.ᐃⵠⵠ[15] = pf(60, 60, 0, ᐃΔ[404], 3);
    this.ᐃⵠⵠ[15].id = 15;
    this.ᐃⵠⵠ[16] = pf(60, 60, 0, ᐃΔ[874], 3);
    this.ᐃⵠⵠ[16].id = 16;
    this.ᐃⵠⵠ[119] = pf(60, 60, 0, ᐃΔ[408], 3);
    this.ᐃⵠⵠ[119].id = 119;
    this.ᐃⵠⵠ[23] = pf(60, 60, 0, ᐃΔ[420], 3);
    this.ᐃⵠⵠ[23].id = 23;
    this.ᐃⵠⵠ[24] = pf(60, 60, 0, ᐃΔ[423], 3);
    this.ᐃⵠⵠ[24].id = 24;
    this.ᐃⵠⵠ[87] = pf(60, 60, 0, ᐃΔ[1227], 3);
    this.ᐃⵠⵠ[87].id = 87;
    this.ᐃⵠⵠ[88] = pf(60, 60, 0, ᐃΔ[1230], 3);
    this.ᐃⵠⵠ[88].id = 88;
    this.ᐃⵠⵠ[80] = pf(60, 60, 0, ᐃΔ[1137], 3);
    this.ᐃⵠⵠ[80].id = 80;
    this.ᐃⵠⵠ[81] = pf(60, 60, 0, ᐃΔ[1140], 3);
    this.ᐃⵠⵠ[81].id = 81;
    this.ᐃⵠⵠ[64] = pf(60, 60, 0, ᐃΔ[569], 3);
    this.ᐃⵠⵠ[64].id = 64;
    this.ᐃⵠⵠ[101] = pf(60, 60, 0, ᐃΔ[1166], 3);
    this.ᐃⵠⵠ[101].id = 101;
    this.ᐃⵠⵠ[71] = pf(60, 60, 0, ᐃΔ[1239], 3);
    this.ᐃⵠⵠ[71].id = 71;
    this.ᐃⵠⵠ[65] = pf(60, 60, 0, ᐃΔ[572], 3);
    this.ᐃⵠⵠ[65].id = 65;
    this.ᐃⵠⵠ[102] = pf(60, 60, 0, ᐃΔ[1169], 3);
    this.ᐃⵠⵠ[102].id = 102;
    this.ᐃⵠⵠ[72] = pf(60, 60, 0, ᐃΔ[1242], 3);
    this.ᐃⵠⵠ[72].id = 72;
    this.ᐃⵠⵠ[66] = pf(60, 60, 0, ᐃΔ[575], 3);
    this.ᐃⵠⵠ[66].id = 66;
    this.ᐃⵠⵠ[103] = pf(60, 60, 0, ᐃΔ[1172], 3);
    this.ᐃⵠⵠ[103].id = 103;
    this.ᐃⵠⵠ[73] = pf(60, 60, 0, ᐃΔ[1245], 3);
    this.ᐃⵠⵠ[73].id = 73;
    this.ᐃⵠⵠ[67] = pf(60, 60, 0, ᐃΔ[578], 3);
    this.ᐃⵠⵠ[67].id = 67;
    this.ᐃⵠⵠ[104] = pf(60, 60, 0, ᐃΔ[1175], 3);
    this.ᐃⵠⵠ[104].id = 104;
    this.ᐃⵠⵠ[74] = pf(60, 60, 0, ᐃΔ[1248], 3);
    this.ᐃⵠⵠ[74].id = 74;
    this.ᐃⵠⵠ[68] = pf(60, 60, 0, ᐃΔ[581], 3);
    this.ᐃⵠⵠ[68].id = 68;
    this.ᐃⵠⵠ[105] = pf(60, 60, 0, ᐃΔ[1178], 3);
    this.ᐃⵠⵠ[105].id = 105;
    this.ᐃⵠⵠ[75] = pf(60, 60, 0, ᐃΔ[1251], 3);
    this.ᐃⵠⵠ[75].id = 75;
    this.ᐃⵠⵠ[69] = pf(60, 60, 0, ᐃΔ[584], 3);
    this.ᐃⵠⵠ[69].id = 69;
    this.ᐃⵠⵠ[106] = pf(60, 60, 0, ᐃΔ[1181], 3);
    this.ᐃⵠⵠ[106].id = 106;
    this.ᐃⵠⵠ[76] = pf(60, 60, 0, ᐃΔ[1254], 3);
    this.ᐃⵠⵠ[76].id = 76;
    this.ᐃⵠⵠ[70] = pf(60, 60, 0, ᐃΔ[587], 3);
    this.ᐃⵠⵠ[70].id = 70;
    this.ᐃⵠⵠ[107] = pf(60, 60, 0, ᐃΔ[1184], 3);
    this.ᐃⵠⵠ[107].id = 107;
    this.ᐃⵠⵠ[94] = pf(60, 60, 0, ᐃΔ[1257], 3);
    this.ᐃⵠⵠ[94].id = 94;
    this.ᐃⵠⵠ[95] = pf(60, 60, 0, ᐃΔ[1260], 3);
    this.ᐃⵠⵠ[95].id = 95;
    this.ᐃⵠⵠ[96] = pf(60, 60, 0, ᐃΔ[1263], 3);
    this.ᐃⵠⵠ[96].id = 96;
    this.ᐃⵠⵠ[97] = pf(60, 60, 0, ᐃΔ[1266], 3);
    this.ᐃⵠⵠ[97].id = 97;
    this.ᐃⵠⵠ[98] = pf(60, 60, 0, ᐃΔ[1269], 3);
    this.ᐃⵠⵠ[98].id = 98;
    this.ᐃⵠⵠ[99] = pf(60, 60, 0, ᐃΔ[1272], 3);
    this.ᐃⵠⵠ[99].id = 99;
    this.ᐃⵠⵠ[58] = pf(60, 60, 0, ᐃΔ[826], 3);
    this.ᐃⵠⵠ[58].id = 58;
    this.ᐃⵠⵠ[25] = pf(60, 60, 0, ᐃΔ[429], 3);
    this.ᐃⵠⵠ[25].id = 25;
    this.ᐃⵠⵠ[26] = pf(60, 60, 0, ᐃΔ[432], 3);
    this.ᐃⵠⵠ[26].id = 26;
    this.ᐃⵠⵠ[27] = pf(60, 60, 0, ᐃΔ[435], 3);
    this.ᐃⵠⵠ[27].id = 27;
    this.ᐃⵠⵠ[28] = pf(60, 60, 0, ᐃΔ[438], 3);
    this.ᐃⵠⵠ[28].id = 28;
    this.ᐃⵠⵠ[120] = pf(60, 60, 0, ᐃΔ[441], 3);
    this.ᐃⵠⵠ[120].id = 120;
    this.ᐃⵠⵠ[120].info.ᐃᐃ[2] = this.ᐃⵠⵠ[120].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[29] = pf(60, 60, 0, ᐃΔ[392], 3);
    this.ᐃⵠⵠ[29].id = 29;
    this.ᐃⵠⵠ[121] = pf(60, 60, 0, ᐃΔ[418], 3);
    this.ᐃⵠⵠ[121].id = 121;
    this.ᐃⵠⵠ[121].info.ᐃᐃ[2] = this.ᐃⵠⵠ[121].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[30] = pf(60, 60, 0, ᐃΔ[455], 3);
    this.ᐃⵠⵠ[30].id = 30;
    this.ᐃⵠⵠ[9] = pf(60, 60, 0, ᐃΔ[860], 3);
    this.ᐃⵠⵠ[9].id = 9;
    this.ᐃⵠⵠ[31] = pf(60, 60, 0, ᐃΔ[458], 3);
    this.ᐃⵠⵠ[31].id = 31;
    this.ᐃⵠⵠ[32] = pf(60, 60, 0, ᐃΔ[1017], 3);
    this.ᐃⵠⵠ[32].id = 32;
    this.ᐃⵠⵠ[33] = pf(60, 60, 0, ᐃΔ[472], 3);
    this.ᐃⵠⵠ[33].id = 33;
    this.ᐃⵠⵠ[35] = pf(60, 60, 0, ᐃΔ[477], 3);
    this.ᐃⵠⵠ[35].id = 35;
    this.ᐃⵠⵠ[36] = pf(60, 60, 0, ᐃΔ[480], 3);
    this.ᐃⵠⵠ[36].id = 36;
    this.ᐃⵠⵠ[37] = pf(60, 60, 0, ᐃΔ[483], 3);
    this.ᐃⵠⵠ[37].id = 37;
    this.ᐃⵠⵠ[38] = pf(60, 60, 0, ᐃΔ[486], 3);
    this.ᐃⵠⵠ[38].id = 38;
    this.ᐃⵠⵠ[39] = pf(60, 60, 0, ᐃΔ[489], 3);
    this.ᐃⵠⵠ[39].id = 39;
    this.ᐃⵠⵠ[122] = pf(60, 60, 0, ᐃΔ[492], 3);
    this.ᐃⵠⵠ[122].id = 122;
    this.ᐃⵠⵠ[123] = pf(60, 60, 0, ᐃΔ[495], 3);
    this.ᐃⵠⵠ[123].id = 123;
    this.ᐃⵠⵠ[124] = pf(60, 60, 0, ᐃΔ[499], 3);
    this.ᐃⵠⵠ[124].id = 124;
    this.ᐃⵠⵠ[40] = pf(60, 60, 0, ᐃΔ[502], 3);
    this.ᐃⵠⵠ[40].id = 40;
    this.ᐃⵠⵠ[146] = pf(60, 60, 0, ᐃΔ[505], 3);
    this.ᐃⵠⵠ[146].id = 146;
    this.ᐃⵠⵠ[146].info.ᐃᐃ[2] = this.ᐃⵠⵠ[146].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[240] = pf(60, 60, 0, ᐃΔ[1233], 3);
    this.ᐃⵠⵠ[240].id = 240;
    this.ᐃⵠⵠ[240].info.ᐃᐃ[2] = this.ᐃⵠⵠ[240].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[147] = pf(60, 60, 0, ᐃΔ[513], 3);
    this.ᐃⵠⵠ[147].id = 147;
    this.ᐃⵠⵠ[147].info.ᐃᐃ[2] = this.ᐃⵠⵠ[147].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[148] = pf(60, 60, 0, ᐃΔ[518], 3);
    this.ᐃⵠⵠ[148].id = 148;
    this.ᐃⵠⵠ[148].info.ᐃᐃ[2] = this.ᐃⵠⵠ[148].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[149] = pf(60, 60, 0, ᐃΔ[521], 3);
    this.ᐃⵠⵠ[149].id = 149;
    this.ᐃⵠⵠ[150] = pf(60, 60, 0, ᐃΔ[523], 3);
    this.ᐃⵠⵠ[150].id = 150;
    this.ᐃⵠⵠ[151] = pf(60, 60, 0, ᐃΔ[529], 3);
    this.ᐃⵠⵠ[151].id = 151;
    this.ᐃⵠⵠ[158] = pf(60, 60, 0, ᐃΔ[532], 3);
    this.ᐃⵠⵠ[158].id = 158;
    this.ᐃⵠⵠ[159] = pf(60, 60, 0, ᐃΔ[553], 3);
    this.ᐃⵠⵠ[159].id = 159;
    this.ᐃⵠⵠ[43] = pf(60, 60, 0, ᐃΔ[541], 3);
    this.ᐃⵠⵠ[43].id = 43;
    this.ᐃⵠⵠ[45] = pf(60, 60, 0, ᐃΔ[550], 3);
    this.ᐃⵠⵠ[45].id = 45;
    this.ᐃⵠⵠ[125] = pf(60, 60, 0, ᐃΔ[605], 3);
    this.ᐃⵠⵠ[125].id = 125;
    this.ᐃⵠⵠ[221] = pf(60, 60, 0, ᐃΔ[1236], 3);
    this.ᐃⵠⵠ[221].id = 221;
    this.ᐃⵠⵠ[223] = pf(60, 60, 0, ᐃΔ[1028], 3);
    this.ᐃⵠⵠ[223].id = 223;
    this.ᐃⵠⵠ[224] = pf(60, 60, 0, ᐃΔ[1031], 3);
    this.ᐃⵠⵠ[224].id = 224;
    this.ᐃⵠⵠ[230] = pf(60, 60, 0, ᐃΔ[1117], 3);
    this.ᐃⵠⵠ[230].id = 230;
    this.ᐃⵠⵠ[89] = pf(60, 60, 0, ᐃΔ[1046], 3);
    this.ᐃⵠⵠ[89].id = 89;
    this.ᐃⵠⵠ[225] = pf(60, 60, 0, ᐃΔ[1049], 3);
    this.ᐃⵠⵠ[225].id = 225;
    this.ᐃⵠⵠ[226] = pf(60, 60, 0, ᐃΔ[1189], 3);
    this.ᐃⵠⵠ[226].id = 226;
    this.ᐃⵠⵠ[227] = pf(60, 60, 0, ᐃΔ[1080], 3);
    this.ᐃⵠⵠ[227].id = 227;
    this.ᐃⵠⵠ[239] = pf(60, 60, 0, ᐃΔ[1224], 3);
    this.ᐃⵠⵠ[239].id = 239;
    this.ᐃⵠⵠ[228] = pf(60, 60, 0, ᐃΔ[1095], 3);
    this.ᐃⵠⵠ[228].id = 228;
    this.ᐃⵠⵠ[229] = pf(60, 60, 0, ᐃΔ[1110], 3);
    this.ᐃⵠⵠ[229].id = 229;
    this.ᐃⵠⵠ[126] = pf(60, 60, 0, ᐃΔ[609], 3);
    this.ᐃⵠⵠ[126].id = 126;
    this.ᐃⵠⵠ[126].info.ᐃᐃ[2] = this.ᐃⵠⵠ[126].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[127] = pf(60, 60, 0, ᐃΔ[613], 3);
    this.ᐃⵠⵠ[127].id = 127;
    this.ᐃⵠⵠ[128] = pf(60, 60, 0, ᐃΔ[612], 3);
    this.ᐃⵠⵠ[128].id = 128;
    this.ᐃⵠⵠ[46] = pf(60, 60, 0, ᐃΔ[616], 3);
    this.ᐃⵠⵠ[46].id = 46;
    this.ᐃⵠⵠ[50] = pf(60, 60, 0, ᐃΔ[699], 3);
    this.ᐃⵠⵠ[50].id = 50;
    this.ᐃⵠⵠ[51] = pf(60, 60, 0, ᐃΔ[702], 3);
    this.ᐃⵠⵠ[51].id = 51;
    this.ᐃⵠⵠ[52] = pf(60, 60, 0, ᐃΔ[705], 3);
    this.ᐃⵠⵠ[52].id = 52;
    this.ᐃⵠⵠ[55] = pf(60, 60, 0, ᐃΔ[709], 3);
    this.ᐃⵠⵠ[55].id = 55;
    this.ᐃⵠⵠ[129] = pf(60, 60, 0, ᐃΔ[624], 3);
    this.ᐃⵠⵠ[129].id = 129;
    this.ᐃⵠⵠ[129].info.ᐃᐃ[2] = this.ᐃⵠⵠ[129].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[130] = pf(60, 60, 0, ᐃΔ[626], 3);
    this.ᐃⵠⵠ[130].id = 130;
    this.ᐃⵠⵠ[131] = pf(60, 60, 0, ᐃΔ[629], 3);
    this.ᐃⵠⵠ[131].id = 131;
    this.ᐃⵠⵠ[131].info.ᐃᐃ[2] = this.ᐃⵠⵠ[131].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[132] = pf(60, 60, 0, ᐃΔ[631], 3);
    this.ᐃⵠⵠ[132].id = 132;
    this.ᐃⵠⵠ[133] = pf(60, 60, 0, ᐃΔ[634], 3);
    this.ᐃⵠⵠ[133].id = 133;
    this.ᐃⵠⵠ[134] = pf(60, 60, 0, ᐃΔ[639], 3);
    this.ᐃⵠⵠ[134].id = 134;
    this.ᐃⵠⵠ[134].info.ᐃᐃ[2] = this.ᐃⵠⵠ[134].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[135] = pf(60, 60, 0, ᐃΔ[644], 3);
    this.ᐃⵠⵠ[135].id = 135;
    this.ᐃⵠⵠ[47] = pf(60, 60, 0, ᐃΔ[646], 3);
    this.ᐃⵠⵠ[47].id = 47;
    this.ᐃⵠⵠ[48] = pf(60, 60, 0, ᐃΔ[649], 3);
    this.ᐃⵠⵠ[48].id = 48;
    this.ᐃⵠⵠ[49] = pf(60, 60, 0, ᐃΔ[652], 3);
    this.ᐃⵠⵠ[49].id = 49;
    this.ᐃⵠⵠ[136] = pf(60, 60, 0, ᐃΔ[659], 3);
    this.ᐃⵠⵠ[136].id = 136;
    this.ᐃⵠⵠ[143] = pf(60, 60, 0, ᐃΔ[143], 3);
    this.ᐃⵠⵠ[143].id = 143;
    this.ᐃⵠⵠ[137] = pf(60, 60, 0, ᐃΔ[662], 3);
    this.ᐃⵠⵠ[137].id = 137;
    this.ᐃⵠⵠ[138] = pf(60, 60, 0, ᐃΔ[664], 3);
    this.ᐃⵠⵠ[138].id = 138;
    this.ᐃⵠⵠ[139] = pf(60, 60, 0, ᐃΔ[674], 3);
    this.ᐃⵠⵠ[139].id = 139;
    this.ᐃⵠⵠ[139].info.ᐃᐃ[2] = this.ᐃⵠⵠ[139].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[140] = pf(60, 60, 0, ᐃΔ[140], 3);
    this.ᐃⵠⵠ[140].id = 140;
    this.ᐃⵠⵠ[140].info.ᐃᐃ[2] = this.ᐃⵠⵠ[140].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[141] = pf(60, 60, 0, ᐃΔ[685], 3);
    this.ᐃⵠⵠ[141].id = 141;
    this.ᐃⵠⵠ[142] = pf(60, 60, 0, ᐃΔ[142], 3);
    this.ᐃⵠⵠ[142].id = 142;
    this.ᐃⵠⵠ[142].info.ᐃᐃ[2] = this.ᐃⵠⵠ[142].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[144] = pf(60, 60, 0, ᐃΔ[717], 3);
    this.ᐃⵠⵠ[144].id = 144;
    this.ᐃⵠⵠ[145] = pf(60, 60, 0, ᐃΔ[145], 3);
    this.ᐃⵠⵠ[145].id = 145;
    this.ᐃⵠⵠ[59] = pf(60, 60, 0, ᐃΔ[732], 3);
    this.ᐃⵠⵠ[59].id = 59;
    this.ᐃⵠⵠ[62] = pf(60, 60, 0, ᐃΔ[563], 3);
    this.ᐃⵠⵠ[62].id = 62;
    this.ᐃⵠⵠ[185] = pf(60, 60, 0, ᐃΔ[252], 3);
    this.ᐃⵠⵠ[185].id = 185;
    this.ᐃⵠⵠ[185].info.ᐃᐃ[2] = this.ᐃⵠⵠ[185].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[184] = pf(60, 60, 0, ᐃΔ[751], 3);
    this.ᐃⵠⵠ[184].id = 184;
    this.ᐃⵠⵠ[184].info.ᐃᐃ[2] = this.ᐃⵠⵠ[184].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[17] = pf(60, 60, 0, ᐃΔ[877], 3);
    this.ᐃⵠⵠ[17].id = 17;
    this.ᐃⵠⵠ[63] = pf(60, 60, 0, ᐃΔ[566], 3);
    this.ᐃⵠⵠ[63].id = 63;
    this.ᐃⵠⵠ[187] = pf(60, 60, 0, ᐃΔ[253], 3);
    this.ᐃⵠⵠ[187].id = 187;
    this.ᐃⵠⵠ[187].info.ᐃᐃ[2] = this.ᐃⵠⵠ[187].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[186] = pf(60, 60, 0, ᐃΔ[753], 3);
    this.ᐃⵠⵠ[186].id = 186;
    this.ᐃⵠⵠ[186].info.ᐃᐃ[2] = this.ᐃⵠⵠ[186].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[77] = pf(60, 60, 0, ᐃΔ[756], 3);
    this.ᐃⵠⵠ[77].id = 77;
    this.ᐃⵠⵠ[175] = pf(60, 60, 0, ᐃΔ[176], 3);
    this.ᐃⵠⵠ[175].id = 175;
    this.ᐃⵠⵠ[175].info.ᐃᐃ[2] = this.ᐃⵠⵠ[175].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[176] = pf(60, 60, 0, ᐃΔ[177], 3);
    this.ᐃⵠⵠ[176].id = 176;
    this.ᐃⵠⵠ[176].info.ᐃᐃ[2] = this.ᐃⵠⵠ[176].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[78] = pf(60, 60, 0, ᐃΔ[760], 3);
    this.ᐃⵠⵠ[78].id = 78;
    this.ᐃⵠⵠ[177] = pf(60, 60, 0, ᐃΔ[175], 3);
    this.ᐃⵠⵠ[177].id = 177;
    this.ᐃⵠⵠ[177].info.ᐃᐃ[2] = this.ᐃⵠⵠ[177].info.ᐃᐃ[0];
    this.ᐃⵠⵠ[79] = pf(60, 60, 0, ᐃΔ[764], 3);
    this.ᐃⵠⵠ[79].id = 79;
    this.ᐃⵠⵠ[83] = pf(60, 60, 0, ᐃΔ[767], 3);
    this.ᐃⵠⵠ[83].id = 83;
    this.ᐃⵠⵠ[84] = pf(60, 60, 0, ᐃΔ[771], 3);
    this.ᐃⵠⵠ[84].id = 84;
    this.ᐃⵠⵠ[178] = pf(60, 60, 0, ᐃΔ[178], 3);
    this.ᐃⵠⵠ[178].id = 178;
    this.ᐃⵠⵠ[179] = pf(60, 60, 0, ᐃΔ[179], 3);
    this.ᐃⵠⵠ[179].id = 179;
    this.ᐃⵠⵠ[86] = pf(60, 60, 0, ᐃΔ[776], 3);
    this.ᐃⵠⵠ[86].id = 86;
    this.ᐃⵠⵠ[85] = pf(60, 60, 0, ᐃΔ[779], 3);
    this.ᐃⵠⵠ[85].id = 85;
    this.ᐃⵠⵠ[180] = pf(60, 60, 0, ᐃΔ[180], 3);
    this.ᐃⵠⵠ[180].id = 180;
    this.ᐃⵠⵠ[181] = pf(60, 60, 0, ᐃΔ[181], 3);
    this.ᐃⵠⵠ[181].id = 181;
    this.ᐃⵠⵠ[182] = pf(60, 60, 0, ᐃΔ[789], 3);
    this.ᐃⵠⵠ[182].id = 182;
    this.ᐃⵠⵠ[183] = pf(60, 60, 0, ᐃΔ[800], 3);
    this.ᐃⵠⵠ[183].id = 183;
    this.ᐃⵠⵠ[188] = pf(60, 60, 0, ᐃΔ[808], 3);
    this.ᐃⵠⵠ[188].id = 188;
    this.ᐃⵠⵠ[189] = pf(60, 60, 0, ᐃΔ[814], 3);
    this.ᐃⵠⵠ[189].id = 189;
    this.ᐃⵠⵠ[191] = pf(60, 60, 0, ᐃΔ[834], 3);
    this.ᐃⵠⵠ[191].id = 191;
    this.ᐃⵠⵠ[192] = pf(60, 60, 0, ᐃΔ[840], 3);
    this.ᐃⵠⵠ[192].id = 192;
    this.ᐃⵠⵠ[190] = pf(60, 60, 0, ᐃΔ[842], 3);
    this.ᐃⵠⵠ[190].id = 190;
    this.ᐃⵠⵠ[193] = pf(60, 60, 0, ᐃΔ[845], 3);
    this.ᐃⵠⵠ[193].id = 193;
    this.ᐃⵠⵠ[194] = pf(60, 60, 0, ᐃΔ[850], 3);
    this.ᐃⵠⵠ[194].id = 194;
    this.ᐃⵠⵠ[204] = pf(60, 60, 0, ᐃΔ[949], 3);
    this.ᐃⵠⵠ[204].id = 204;
    this.ᐃⵠⵠ[205] = pf(60, 60, 0, ᐃΔ[955], 3);
    this.ᐃⵠⵠ[205].id = 205;
    this.ᐃⵠⵠ[206] = pf(60, 60, 0, ᐃΔ[959], 3);
    this.ᐃⵠⵠ[206].id = 206;
    this.ᐃⵠⵠ[207] = pf(60, 60, 0, ᐃΔ[965], 3);
    this.ᐃⵠⵠ[207].id = 207;
    this.ᐃⵠⵠ[208] = pf(60, 60, 0, ᐃΔ[966], 3);
    this.ᐃⵠⵠ[208].id = 208;
    this.ᐃⵠⵠ[209] = pf(60, 60, 0, ᐃΔ[972], 3);
    this.ᐃⵠⵠ[209].id = 209;
    this.ᐃⵠⵠ[210] = pf(60, 60, 0, ᐃΔ[981], 3);
    this.ᐃⵠⵠ[210].id = 210;
    this.ᐃⵠⵠ[211] = pf(60, 60, 0, ᐃΔ[987], 3);
    this.ᐃⵠⵠ[211].id = 211;
    this.ᐃⵠⵠ[41] = pf(60, 60, 0, ᐃΔ[880], 3);
    this.ᐃⵠⵠ[41].id = 41;
    this.ᐃⵠⵠ[42] = pf(60, 60, 0, ᐃΔ[882], 3);
    this.ᐃⵠⵠ[42].id = 42;
    this.ᐃⵠⵠ[12] = pf(60, 60, 0, ᐃΔ[401], 3);
    this.ᐃⵠⵠ[12].id = 12;
    this.ᐃⵠⵠ[16] = pf(60, 60, 0, ᐃΔ[874], 3);
    this.ᐃⵠⵠ[16].id = 16;
    this.ᐃⵠⵠ[196] = pf(60, 60, 0, ᐃΔ[196], 3);
    this.ᐃⵠⵠ[196].id = 196;
    this.ᐃⵠⵠ[18] = pf(60, 60, 0, ᐃΔ[901], 3);
    this.ᐃⵠⵠ[18].id = 18;
    this.ᐃⵠⵠ[197] = pf(60, 60, 0, ᐃΔ[197], 3);
    this.ᐃⵠⵠ[197].id = 197;
    this.ᐃⵠⵠ[198] = pf(60, 60, 0, ᐃΔ[907], 3);
    this.ᐃⵠⵠ[198].id = 198;
    this.ᐃⵠⵠ[61] = pf(60, 60, 0, ᐃΔ[910], 3);
    this.ᐃⵠⵠ[61].id = 61;
    this.ᐃⵠⵠ[201] = pf(60, 60, 0, ᐃΔ[870], 3);
    this.ᐃⵠⵠ[201].id = 201;
    this.ᐃⵠⵠ[200] = pf(60, 60, 0, ᐃΔ[200], 3);
    this.ᐃⵠⵠ[200].id = 200;
    this.ᐃⵠⵠ[199] = pf(60, 60, 0, ᐃΔ[865], 3);
    this.ᐃⵠⵠ[199].id = 199;
    this.ᐃᐃⵠ = [];
    this.ᐃᐃⵠ[35] = pf(60, 60, 0, ᐃΔ[254], 3);
    this.ᐃᐃⵠ[35].id = 35;
    this.ᐃᐃⵠ[5] = pf(60, 60, 0, ᐃΔ[256], 3);
    this.ᐃᐃⵠ[5].id = 5;
    this.ᐃᐃⵠ[0] = pf(60, 60, 0, ᐃΔ[302], 3);
    this.ᐃᐃⵠ[0].id = 0;
    this.ᐃᐃⵠ[3] = pf(60, 60, 0, ᐃΔ[262], 3);
    this.ᐃᐃⵠ[3].id = 3;
    this.ᐃᐃⵠ[55] = pf(60, 60, 0, ᐃΔ[318], 3);
    this.ᐃᐃⵠ[55].id = 55;
    this.ᐃᐃⵠ[67] = pf(60, 60, 0, ᐃΔ[320], 3);
    this.ᐃᐃⵠ[67].id = 67;
    this.ᐃᐃⵠ[40] = pf(60, 60, 0, ᐃΔ[284], 3);
    this.ᐃᐃⵠ[40].id = 40;
    this.ᐃᐃⵠ[6] = pf(60, 60, 0, ᐃΔ[295], 3);
    this.ᐃᐃⵠ[6].id = 6;
    this.ᐃᐃⵠ[7] = pf(60, 60, 0, ᐃΔ[257], 3);
    this.ᐃᐃⵠ[7].id = 7;
    this.ᐃᐃⵠ[36] = pf(60, 60, 0, ᐃΔ[290], 3);
    this.ᐃᐃⵠ[36].id = 36;
    this.ᐃᐃⵠ[34] = pf(60, 60, 0, ᐃΔ[830], 3);
    this.ᐃᐃⵠ[34].id = 34;
    this.ᐃᐃⵠ[37] = pf(60, 60, 0, ᐃΔ[291], 3);
    this.ᐃᐃⵠ[37].id = 37;
    this.ᐃᐃⵠ[4] = pf(60, 60, 0, ᐃΔ[314], 3);
    this.ᐃᐃⵠ[4].id = 4;
    this.ᐃᐃⵠ[49] = pf(60, 60, 0, ᐃΔ[325], 3);
    this.ᐃᐃⵠ[49].id = 49;
    this.ᐃᐃⵠ[1] = pf(60, 60, 0, ᐃΔ[327], 3);
    this.ᐃᐃⵠ[1].id = 1;
    this.ᐃᐃⵠ[54] = pf(60, 60, 0, ᐃΔ[304], 3);
    this.ᐃᐃⵠ[54].id = 54;
    this.ᐃᐃⵠ[56] = pf(60, 60, 0, ᐃΔ[263], 3);
    this.ᐃᐃⵠ[56].id = 56;
    this.ᐃᐃⵠ[57] = pf(60, 60, 0, ᐃΔ[265], 3);
    this.ᐃᐃⵠ[57].id = 57;
    this.ᐃᐃⵠ[58] = pf(60, 60, 0, ᐃΔ[332], 3);
    this.ᐃᐃⵠ[58].id = 58;
    this.ᐃᐃⵠ[61] = pf(60, 60, 0, ᐃΔ[268], 3);
    this.ᐃᐃⵠ[61].id = 61;
    this.ᐃᐃⵠ[79] = pf(60, 60, 0, ᐃΔ[338], 3);
    this.ᐃᐃⵠ[79].id = 79;
    this.ᐃᐃⵠ[68] = pf(60, 60, 0, ᐃΔ[360], 3);
    this.ᐃᐃⵠ[68].id = 68;
    this.ᐃᐃⵠ[69] = pf(60, 60, 0, ᐃΔ[363], 3);
    this.ᐃᐃⵠ[69].id = 69;
    this.ᐃᐃⵠ[70] = pf(60, 60, 0, ᐃΔ[365], 3);
    this.ᐃᐃⵠ[70].id = 70;
    this.ᐃᐃⵠ[100] = pf(60, 60, 0, ᐃΔ[367], 3);
    this.ᐃᐃⵠ[100].id = 100;
    this.ᐃᐃⵠ[83] = pf(60, 60, 0, ᐃΔ[370], 3);
    this.ᐃᐃⵠ[83].id = 83;
    this.ᐃᐃⵠ[62] = pf(60, 60, 0, ᐃΔ[371], 3);
    this.ᐃᐃⵠ[62].id = 62;
    this.ᐃᐃⵠ[63] = pf(60, 60, 0, ᐃΔ[374], 3);
    this.ᐃᐃⵠ[63].id = 63;
    this.ᐃᐃⵠ[64] = pf(60, 60, 0, ᐃΔ[377], 3);
    this.ᐃᐃⵠ[64].id = 64;
    this.ᐃᐃⵠ[83] = pf(60, 60, 0, ᐃΔ[370], 3);
    this.ᐃᐃⵠ[83].id = 83;
    this.ᐃᐃⵠ[84] = pf(60, 60, 0, ᐃΔ[380], 3);
    this.ᐃᐃⵠ[84].id = 84;
    this.ᐃᐃⵠ[25] = pf(60, 60, 0, ᐃΔ[402], 3);
    this.ᐃᐃⵠ[25].id = 25;
    this.ᐃᐃⵠ[26] = pf(60, 60, 0, ᐃΔ[396], 3);
    this.ᐃᐃⵠ[26].id = 26;
    this.ᐃᐃⵠ[27] = pf(60, 60, 0, ᐃΔ[399], 3);
    this.ᐃᐃⵠ[27].id = 27;
    this.ᐃᐃⵠ[28] = pf(60, 60, 0, ᐃΔ[405], 3);
    this.ᐃᐃⵠ[28].id = 28;
    this.ᐃᐃⵠ[31] = pf(60, 60, 0, ᐃΔ[876], 3);
    this.ᐃᐃⵠ[31].id = 31;
    this.ᐃᐃⵠ[2] = pf(60, 60, 0, ᐃΔ[409], 3);
    this.ᐃᐃⵠ[2].id = 2;
    this.ᐃᐃⵠ[80] = pf(60, 60, 0, ᐃΔ[421], 3);
    this.ᐃᐃⵠ[80].id = 80;
    this.ᐃᐃⵠ[81] = pf(60, 60, 0, ᐃΔ[424], 3);
    this.ᐃᐃⵠ[81].id = 81;
    this.ᐃᐃⵠ[fh.ᐃⲆⲆⲆⵠ] = pf(60, 60, 0, ᐃΔ[1228], 3);
    this.ᐃᐃⵠ[fh.ᐃⲆⲆⲆⵠ].id = fh.ᐃⲆⲆⲆⵠ;
    this.ᐃᐃⵠ[86] = pf(60, 60, 0, ᐃΔ[1231], 3);
    this.ᐃᐃⵠ[86].id = 86;
    this.ᐃᐃⵠ[98] = pf(60, 60, 0, ᐃΔ[1138], 3);
    this.ᐃᐃⵠ[98].id = 98;
    this.ᐃᐃⵠ[99] = pf(60, 60, 0, ᐃΔ[1141], 3);
    this.ᐃᐃⵠ[99].id = 99;
    this.ᐃᐃⵠ[131] = pf(60, 60, 0, ᐃΔ[570], 3);
    this.ᐃᐃⵠ[131].id = 131;
    this.ᐃᐃⵠ[132] = pf(60, 60, 0, ᐃΔ[1168], 3);
    this.ᐃᐃⵠ[132].id = 132;
    this.ᐃᐃⵠ[145] = pf(60, 60, 0, ᐃΔ[1238], 3);
    this.ᐃᐃⵠ[145].id = 145;
    this.ᐃᐃⵠ[133] = pf(60, 60, 0, ᐃΔ[573], 3);
    this.ᐃᐃⵠ[133].id = 133;
    this.ᐃᐃⵠ[134] = pf(60, 60, 0, ᐃΔ[1171], 3);
    this.ᐃᐃⵠ[134].id = 134;
    this.ᐃᐃⵠ[146] = pf(60, 60, 0, ᐃΔ[1241], 3);
    this.ᐃᐃⵠ[146].id = 146;
    this.ᐃᐃⵠ[135] = pf(60, 60, 0, ᐃΔ[576], 3);
    this.ᐃᐃⵠ[135].id = 135;
    this.ᐃᐃⵠ[136] = pf(60, 60, 0, ᐃΔ[1174], 3);
    this.ᐃᐃⵠ[136].id = 136;
    this.ᐃᐃⵠ[147] = pf(60, 60, 0, ᐃΔ[1244], 3);
    this.ᐃᐃⵠ[147].id = 147;
    this.ᐃᐃⵠ[137] = pf(60, 60, 0, ᐃΔ[579], 3);
    this.ᐃᐃⵠ[137].id = 137;
    this.ᐃᐃⵠ[138] = pf(60, 60, 0, ᐃΔ[1177], 3);
    this.ᐃᐃⵠ[138].id = 138;
    this.ᐃᐃⵠ[167] = pf(60, 60, 0, ᐃΔ[1256], 3);
    this.ᐃᐃⵠ[167].id = 167;
    this.ᐃᐃⵠ[168] = pf(60, 60, 0, ᐃΔ[1259], 3);
    this.ᐃᐃⵠ[168].id = 168;
    this.ᐃᐃⵠ[169] = pf(60, 60, 0, ᐃΔ[1262], 3);
    this.ᐃᐃⵠ[169].id = 169;
    this.ᐃᐃⵠ[170] = pf(60, 60, 0, ᐃΔ[1265], 3);
    this.ᐃᐃⵠ[170].id = 170;
    this.ᐃᐃⵠ[171] = pf(60, 60, 0, ᐃΔ[1268], 3);
    this.ᐃᐃⵠ[171].id = 171;
    this.ᐃᐃⵠ[172] = pf(60, 60, 0, ᐃΔ[1271], 3);
    this.ᐃᐃⵠ[172].id = 172;
    this.ᐃᐃⵠ[148] = pf(60, 60, 0, ᐃΔ[1247], 3);
    this.ᐃᐃⵠ[148].id = 148;
    this.ᐃᐃⵠ[139] = pf(60, 60, 0, ᐃΔ[582], 3);
    this.ᐃᐃⵠ[139].id = 139;
    this.ᐃᐃⵠ[140] = pf(60, 60, 0, ᐃΔ[1180], 3);
    this.ᐃᐃⵠ[140].id = 140;
    this.ᐃᐃⵠ[149] = pf(60, 60, 0, ᐃΔ[1250], 3);
    this.ᐃᐃⵠ[149].id = 149;
    this.ᐃᐃⵠ[141] = pf(60, 60, 0, ᐃΔ[585], 3);
    this.ᐃᐃⵠ[141].id = 141;
    this.ᐃᐃⵠ[142] = pf(60, 60, 0, ᐃΔ[1183], 3);
    this.ᐃᐃⵠ[142].id = 142;
    this.ᐃᐃⵠ[150] = pf(60, 60, 0, ᐃΔ[1253], 3);
    this.ᐃᐃⵠ[150].id = 150;
    this.ᐃᐃⵠ[143] = pf(60, 60, 0, ᐃΔ[588], 3);
    this.ᐃᐃⵠ[143].id = 143;
    this.ᐃᐃⵠ[144] = pf(60, 60, 0, ᐃΔ[1186], 3);
    this.ᐃᐃⵠ[144].id = 144;
    this.ᐃᐃⵠ[87] = pf(60, 60, 0, ᐃΔ[827], 3);
    this.ᐃᐃⵠ[87].id = 87;
    this.ᐃᐃⵠ[88] = pf(60, 60, 0, ᐃΔ[430], 3);
    this.ᐃᐃⵠ[88].id = 88;
    this.ᐃᐃⵠ[89] = pf(60, 60, 0, ᐃΔ[433], 3);
    this.ᐃᐃⵠ[89].id = 89;
    this.ᐃᐃⵠ[90] = pf(60, 60, 0, ᐃΔ[436], 3);
    this.ᐃᐃⵠ[90].id = 90;
    this.ᐃᐃⵠ[24] = pf(60, 60, 0, ᐃΔ[439], 3);
    this.ᐃᐃⵠ[24].id = 24;
    this.ᐃᐃⵠ[101] = pf(60, 60, 0, ᐃΔ[442], 3);
    this.ᐃᐃⵠ[101].id = 101;
    this.ᐃᐃⵠ[100] = pf(60, 60, 0, ᐃΔ[367], 3);
    this.ᐃᐃⵠ[100].id = 100;
    this.ᐃᐃⵠ[38] = pf(60, 60, 0, ᐃΔ[456], 3);
    this.ᐃᐃⵠ[38].id = 38;
    this.ᐃᐃⵠ[fh.ⲆΔⵠⵠᐃ] = pf(60, 60, 0, ᐃΔ[861], 3);
    this.ᐃᐃⵠ[fh.ⲆΔⵠⵠᐃ].id = fh.ⲆΔⵠⵠᐃ;
    this.ᐃᐃⵠ[8] = pf(60, 60, 0, ᐃΔ[460], 3);
    this.ᐃᐃⵠ[8].id = 8;
    this.ᐃᐃⵠ[9] = pf(60, 60, 0, ᐃΔ[1019], 3);
    this.ᐃᐃⵠ[9].id = 9;
    this.ᐃᐃⵠ[29] = pf(60, 60, 0, ᐃΔ[473], 3);
    this.ᐃᐃⵠ[29].id = 29;
    this.ᐃᐃⵠ[10] = pf(60, 60, 0, ᐃΔ[478], 3);
    this.ᐃᐃⵠ[10].id = 10;
    this.ᐃᐃⵠ[11] = pf(60, 60, 0, ᐃΔ[481], 3);
    this.ᐃᐃⵠ[11].id = 11;
    this.ᐃᐃⵠ[12] = pf(60, 60, 0, ᐃΔ[484], 3);
    this.ᐃᐃⵠ[12].id = 12;
    this.ᐃᐃⵠ[13] = pf(60, 60, 0, ᐃΔ[487], 3);
    this.ᐃᐃⵠ[13].id = 13;
    this.ᐃᐃⵠ[14] = pf(60, 60, 0, ᐃΔ[490], 3);
    this.ᐃᐃⵠ[14].id = 14;
    this.ᐃᐃⵠ[59] = pf(60, 60, 0, ᐃΔ[493], 3);
    this.ᐃᐃⵠ[59].id = 59;
    this.ᐃᐃⵠ[71] = pf(60, 60, 0, ᐃΔ[496], 3);
    this.ᐃᐃⵠ[71].id = 71;
    this.ᐃᐃⵠ[65] = pf(60, 60, 0, ᐃΔ[498], 3);
    this.ᐃᐃⵠ[65].id = 65;
    this.ᐃᐃⵠ[85] = pf(60, 60, 0, ᐃΔ[503], 3);
    this.ᐃᐃⵠ[85].id = 85;
    this.ᐃᐃⵠ[102] = pf(60, 60, 0, ᐃΔ[515], 3);
    this.ᐃᐃⵠ[102].id = 102;
    this.ᐃᐃⵠ[103] = pf(60, 60, 0, ᐃΔ[519], 3);
    this.ᐃᐃⵠ[103].id = 103;
    this.ᐃᐃⵠ[115] = pf(60, 60, 0, ᐃΔ[530], 3);
    this.ᐃᐃⵠ[115].id = 115;
    this.ᐃᐃⵠ[104] = pf(60, 60, 0, ᐃΔ[533], 3);
    this.ᐃᐃⵠ[104].id = 104;
    this.ᐃᐃⵠ[105] = pf(60, 60, 0, ᐃΔ[555], 3);
    this.ᐃᐃⵠ[105].id = 105;
    this.ᐃᐃⵠ[91] = pf(60, 60, 0, ᐃΔ[542], 3);
    this.ᐃᐃⵠ[91].id = 91;
    this.ᐃᐃⵠ[15] = pf(60, 60, 0, ᐃΔ[551], 3);
    this.ᐃᐃⵠ[15].id = 15;
    this.ᐃᐃⵠ[106] = pf(60, 60, 0, ᐃΔ[604], 3);
    this.ᐃᐃⵠ[106].id = 106;
    this.ᐃᐃⵠ[108] = pf(60, 60, 0, ᐃΔ[1235], 3);
    this.ᐃᐃⵠ[108].id = 108;
    this.ᐃᐃⵠ[163] = pf(60, 60, 0, ᐃΔ[1027], 3);
    this.ᐃᐃⵠ[163].id = 163;
    this.ᐃᐃⵠ[164] = pf(60, 60, 0, ᐃΔ[1030], 3);
    this.ᐃᐃⵠ[164].id = 164;
    this.ᐃᐃⵠ[166] = pf(60, 60, 0, ᐃΔ[1116], 3);
    this.ᐃᐃⵠ[166].id = 166;
    this.ᐃᐃⵠ[165] = pf(60, 60, 0, ᐃΔ[1048], 3);
    this.ᐃᐃⵠ[165].id = 165;
    this.ᐃᐃⵠ[fh.ⲆⲆᐃΔΔ] = pf(60, 60, 0, ᐃΔ[1051], 3);
    this.ᐃᐃⵠ[fh.ⲆⲆᐃΔΔ].id = fh.ⲆⲆᐃΔΔ;
    this.ᐃᐃⵠ[fh.ⲆⵠⲆⵠᐃ] = pf(60, 60, 0, ᐃΔ[1082], 3);
    this.ᐃᐃⵠ[fh.ⲆⵠⲆⵠᐃ].id = fh.ⲆⵠⲆⵠᐃ;
    this.ᐃᐃⵠ[fh.ⲆΔΔᐃⲆ] = pf(60, 60, 0, ᐃΔ[1226], 3);
    this.ᐃᐃⵠ[fh.ⲆΔΔᐃⲆ].id = fh.ⲆΔΔᐃⲆ;
    this.ᐃᐃⵠ[fh.ⵠⲆⲆⵠᐃ] = pf(60, 60, 0, ᐃΔ[1191], 3);
    this.ᐃᐃⵠ[fh.ⵠⲆⲆⵠᐃ].id = fh.ⵠⲆⲆⵠᐃ;
    this.ᐃᐃⵠ[110] = pf(60, 60, 0, ᐃΔ[611], 3);
    this.ᐃᐃⵠ[110].id = 110;
    this.ᐃᐃⵠ[111] = pf(60, 60, 0, ᐃΔ[715], 3);
    this.ᐃᐃⵠ[111].id = 111;
    this.ᐃᐃⵠ[112] = pf(60, 60, 0, ᐃΔ[715], 3);
    this.ᐃᐃⵠ[112].id = 112;
    this.ᐃᐃⵠ[113] = pf(60, 60, 0, ᐃΔ[715], 3);
    this.ᐃᐃⵠ[113].id = 113;
    this.ᐃᐃⵠ[16] = pf(60, 60, 0, ᐃΔ[618], 3);
    this.ᐃᐃⵠ[16].id = 16;
    this.ᐃᐃⵠ[17] = pf(60, 60, 0, ᐃΔ[700], 3);
    this.ᐃᐃⵠ[17].id = 17;
    this.ᐃᐃⵠ[18] = pf(60, 60, 0, ᐃΔ[704], 3);
    this.ᐃᐃⵠ[18].id = 18;
    this.ᐃᐃⵠ[19] = pf(60, 60, 0, ᐃΔ[706], 3);
    this.ᐃᐃⵠ[19].id = 19;
    this.ᐃᐃⵠ[122] = pf(60, 60, 0, ᐃΔ[711], 3);
    this.ᐃᐃⵠ[122].id = 122;
    this.ᐃᐃⵠ[20] = pf(60, 60, 0, ᐃΔ[627], 3);
    this.ᐃᐃⵠ[20].id = 20;
    this.ᐃᐃⵠ[41] = pf(60, 60, 0, ᐃΔ[632], 3);
    this.ᐃᐃⵠ[41].id = 41;
    this.ᐃᐃⵠ[52] = pf(60, 60, 0, ᐃΔ[635], 3);
    this.ᐃᐃⵠ[52].id = 52;
    this.ᐃᐃⵠ[114] = pf(60, 60, 0, ᐃΔ[643], 3);
    this.ᐃᐃⵠ[114].id = 114;
    this.ᐃᐃⵠ[94] = pf(60, 60, 0, ᐃΔ[647], 3);
    this.ᐃᐃⵠ[94].id = 94;
    this.ᐃᐃⵠ[93] = pf(60, 60, 0, ᐃΔ[650], 3);
    this.ᐃᐃⵠ[93].id = 93;
    this.ᐃᐃⵠ[21] = pf(60, 60, 0, ᐃΔ[654], 3);
    this.ᐃᐃⵠ[21].id = 21;
    this.ᐃᐃⵠ[53] = pf(60, 60, 0, ᐃΔ[660], 3);
    this.ᐃᐃⵠ[53].id = 53;
    this.ᐃᐃⵠ[51] = pf(60, 60, 0, ᐃΔ[690], 3);
    this.ᐃᐃⵠ[51].id = 51;
    this.ᐃᐃⵠ[50] = pf(60, 60, 0, ᐃΔ[666], 3);
    this.ᐃᐃⵠ[50].id = 50;
    this.ᐃᐃⵠ[109] = pf(60, 60, 0, ᐃΔ[684], 3);
    this.ᐃᐃⵠ[109].id = 109;
    this.ᐃᐃⵠ[124] = pf(60, 60, 0, ᐃΔ[718], 3);
    this.ᐃᐃⵠ[124].id = 124;
    this.ᐃᐃⵠ[125] = pf(60, 60, 0, ᐃΔ[730], 3);
    this.ᐃᐃⵠ[125].id = 125;
    this.ᐃᐃⵠ[126] = pf(60, 60, 0, ᐃΔ[734], 3);
    this.ᐃᐃⵠ[126].id = 126;
    this.ᐃᐃⵠ[129] = pf(60, 60, 0, ᐃΔ[563], 3);
    this.ᐃᐃⵠ[129].id = 129;
    this.ᐃᐃⵠ[151] = pf(60, 60, 0, ᐃΔ[758], 3);
    this.ᐃᐃⵠ[151].id = 151;
    this.ᐃᐃⵠ[152] = pf(60, 60, 0, ᐃΔ[762], 3);
    this.ᐃᐃⵠ[152].id = 152;
    this.ᐃᐃⵠ[153] = pf(60, 60, 0, ᐃΔ[770], 3);
    this.ᐃᐃⵠ[153].id = 153;
    this.ᐃᐃⵠ[154] = pf(60, 60, 0, ᐃΔ[768], 3);
    this.ᐃᐃⵠ[154].id = 154;
    this.ᐃᐃⵠ[155] = pf(60, 60, 0, ᐃΔ[772], 3);
    this.ᐃᐃⵠ[155].id = 155;
    this.ᐃᐃⵠ[157] = pf(60, 60, 0, ᐃΔ[777], 3);
    this.ᐃᐃⵠ[157].id = 157;
    this.ᐃᐃⵠ[156] = pf(60, 60, 0, ᐃΔ[780], 3);
    this.ᐃᐃⵠ[156].id = 156;
    this.ᐃᐃⵠ[158] = pf(60, 60, 0, ᐃΔ[784], 3);
    this.ᐃᐃⵠ[158].id = 158;
    this.ᐃᐃⵠ[159] = pf(60, 60, 0, ᐃΔ[785], 3);
    this.ᐃᐃⵠ[159].id = 159;
    this.ᐃᐃⵠ[160] = pf(60, 60, 0, ᐃΔ[791], 3);
    this.ᐃᐃⵠ[160].id = 160;
    this.ᐃᐃⵠ[161] = pf(60, 60, 0, ᐃΔ[799], 3);
    this.ᐃᐃⵠ[161].id = 161;
    this.ᐃᐃⵠ[42] = pf(60, 60, 0, ᐃΔ[809], 3);
    this.ᐃᐃⵠ[42].id = 42;
    this.ᐃᐃⵠ[43] = pf(60, 60, 0, ᐃΔ[835], 3);
    this.ᐃᐃⵠ[43].id = 43;
    this.ᐃᐃⵠ[107] = pf(60, 60, 0, ᐃΔ[843], 3);
    this.ᐃᐃⵠ[107].id = 107;
    this.ᐃᐃⵠ[44] = pf(60, 60, 0, ᐃΔ[846], 3);
    this.ᐃᐃⵠ[44].id = 44;
    this.ᐃᐃⵠ[46] = pf(60, 60, 0, ᐃΔ[960], 3);
    this.ᐃᐃⵠ[46].id = 46;
    this.ᐃᐃⵠ[45] = pf(60, 60, 0, ᐃΔ[950], 3);
    this.ᐃᐃⵠ[45].id = 45;
    this.ᐃᐃⵠ[47] = pf(60, 60, 0, ᐃΔ[967], 3);
    this.ᐃᐃⵠ[47].id = 47;
    this.ᐃᐃⵠ[48] = pf(60, 60, 0, ᐃΔ[982], 3);
    this.ᐃᐃⵠ[48].id = 48;
    this.ᐃᐃⵠ[25] = pf(60, 60, 0, ᐃΔ[402], 3);
    this.ᐃᐃⵠ[25].id = 25;
    this.ᐃᐃⵠ[31] = pf(60, 60, 0, ᐃΔ[876], 3);
    this.ᐃᐃⵠ[31].id = 31;
    this.ᐃᐃⵠ[33] = pf(60, 60, 0, ᐃΔ[900], 3);
    this.ᐃᐃⵠ[33].id = 33;
    this.ᐃᐃⵠ[162] = pf(60, 60, 0, ᐃΔ[909], 3);
    this.ᐃᐃⵠ[162].id = 162;
    this.ᐃᐃⵠ[128] = pf(60, 60, 0, ᐃΔ[912], 3);
    this.ᐃᐃⵠ[128].id = 128;
    this.ᐃⵠΔ[53] = pf(68, 68, 0, ᐃΔ[976], 3);
    this.ᐃⵠΔ[53].id = 53;
    this.ᐃⵠⵠ[53] = pf(60, 60, 0, ᐃΔ[975], 3);
    this.ᐃⵠⵠ[53].id = 53;
    this.ᐃᐃⵠ[22] = pf(60, 60, 0, ᐃΔ[977], 3);
    this.ᐃᐃⵠ[22].id = 22;
    this.ᐃⵠΔ[54] = pf(68, 68, 0, ᐃΔ[979], 3);
    this.ᐃⵠΔ[54].id = 54;
    this.ᐃⵠⵠ[54] = pf(60, 60, 0, ᐃΔ[978], 3);
    this.ᐃⵠⵠ[54].id = 54;
    this.ᐃᐃⵠ[23] = pf(60, 60, 0, ᐃΔ[980], 3);
    this.ᐃᐃⵠ[23].id = 23;
    this.ᐃⵠΔ[56] = pf(68, 68, 0, ᐃΔ[713], 3);
    this.ᐃⵠΔ[56].id = 56;
    this.ᐃⵠⵠ[56] = pf(60, 60, 0, ᐃΔ[712], 3);
    this.ᐃⵠⵠ[56].id = 56;
    this.ᐃᐃⵠ[123] = pf(60, 60, 0, ᐃΔ[714], 3);
    this.ᐃᐃⵠ[123].id = 123;
    this.ᐃⵠΔ[82] = pf(68, 68, 0, ᐃΔ[428], 3);
    this.ᐃⵠΔ[82].id = 82;
    this.ᐃⵠⵠ[82] = pf(60, 60, 0, ᐃΔ[426], 3);
    this.ᐃⵠⵠ[82].id = 82;
    this.ᐃᐃⵠ[82] = pf(60, 60, 0, ᐃΔ[427], 3);
    this.ᐃᐃⵠ[82].id = 82;
    this.ᐃⵠΔ[235] = pf(68, 68, 0, ᐃΔ[1159], 3);
    this.ᐃⵠΔ[235].id = 235;
    this.ᐃⵠⵠ[235] = pf(60, 60, 0, ᐃΔ[1158], 3);
    this.ᐃⵠⵠ[235].id = 235;
    this.ᐃⵠΔ[238] = pf(68, 68, 0, ᐃΔ[1188], 3);
    this.ᐃⵠΔ[238].id = 238;
    this.ᐃⵠⵠ[238] = pf(60, 60, 0, ᐃΔ[1187], 3);
    this.ᐃⵠⵠ[238].id = 238;
    this.ᐃⵠΔ[236] = pf(68, 68, 0, ᐃΔ[1161], 3);
    this.ᐃⵠΔ[236].id = 236;
    this.ᐃⵠⵠ[236] = pf(60, 60, 0, ᐃΔ[1160], 3);
    this.ᐃⵠⵠ[236].id = 236;
    this.ᐃⵠΔ[152] = pf(68, 68, 0, ᐃΔ[1197], 3);
    this.ᐃⵠΔ[152].id = 152;
    this.ᐃⵠⵠ[152] = pf(60, 60, 0, ᐃΔ[1195], 3);
    this.ᐃⵠⵠ[152].id = 152;
    this.ᐃᐃⵠ[116] = pf(60, 60, 0, ᐃΔ[1196], 3);
    this.ᐃᐃⵠ[116].id = 116;
    this.ᐃⵠΔ[212] = pf(68, 68, 0, ᐃΔ[992], 3);
    this.ᐃⵠΔ[212].id = 212;
    this.ᐃⵠⵠ[212] = pf(60, 60, 0, ᐃΔ[991], 3);
    this.ᐃⵠⵠ[212].id = 212;
    this.ᐃᐃⵠ[73] = pf(60, 60, 0, ᐃΔ[990], 3);
    this.ᐃᐃⵠ[73].id = 73;
    this.ᐃⵠΔ[213] = pf(68, 68, 0, ᐃΔ[995], 3);
    this.ᐃⵠΔ[213].id = 213;
    this.ᐃⵠⵠ[213] = pf(60, 60, 0, ᐃΔ[994], 3);
    this.ᐃⵠⵠ[213].id = 213;
    this.ᐃᐃⵠ[74] = pf(60, 60, 0, ᐃΔ[993], 3);
    this.ᐃᐃⵠ[74].id = 74;
    this.ᐃⵠΔ[214] = pf(68, 68, 0, ᐃΔ[998], 3);
    this.ᐃⵠΔ[214].id = 214;
    this.ᐃⵠⵠ[214] = pf(60, 60, 0, ᐃΔ[997], 3);
    this.ᐃⵠⵠ[214].id = 214;
    this.ᐃᐃⵠ[75] = pf(60, 60, 0, ᐃΔ[996], 3);
    this.ᐃᐃⵠ[75].id = 75;
    this.ᐃⵠΔ[215] = pf(68, 68, 0, ᐃΔ[1001], 3);
    this.ᐃⵠΔ[215].id = 215;
    this.ᐃⵠⵠ[215] = pf(60, 60, 0, ᐃΔ[1000], 3);
    this.ᐃⵠⵠ[215].id = 215;
    this.ᐃᐃⵠ[76] = pf(60, 60, 0, ᐃΔ[999], 3);
    this.ᐃᐃⵠ[76].id = 76;
    this.ᐃⵠΔ[216] = pf(68, 68, 0, ᐃΔ[1004], 3);
    this.ᐃⵠΔ[216].id = 216;
    this.ᐃⵠⵠ[216] = pf(60, 60, 0, ᐃΔ[1003], 3);
    this.ᐃⵠⵠ[216].id = 216;
    this.ᐃᐃⵠ[77] = pf(60, 60, 0, ᐃΔ[1002], 3);
    this.ᐃᐃⵠ[77].id = 77;
    this.ᐃⵠΔ[220] = pf(68, 68, 0, ᐃΔ[1007], 3);
    this.ᐃⵠΔ[220].id = 220;
    this.ᐃⵠⵠ[220] = pf(60, 60, 0, ᐃΔ[1006], 3);
    this.ᐃⵠⵠ[220].id = 220;
    this.ᐃᐃⵠ[78] = pf(60, 60, 0, ᐃΔ[1005], 3);
    this.ᐃᐃⵠ[78].id = 78;
    this.ᐃⵠΔ[217] = pf(68, 68, 0, ᐃΔ[1016], 3);
    this.ᐃⵠΔ[217].id = 217;
    this.ᐃⵠⵠ[217] = pf(60, 60, 0, ᐃΔ[1015], 3);
    this.ᐃⵠⵠ[217].id = 217;
    this.ᐃᐃⵠ[60] = pf(60, 60, 0, ᐃΔ[1014], 3);
    this.ᐃᐃⵠ[60].id = 60;
    this.ᐃⵠΔ[219] = pf(68, 68, 0, ᐃΔ[1013], 3);
    this.ᐃⵠΔ[219].id = 219;
    this.ᐃⵠⵠ[219] = pf(60, 60, 0, ᐃΔ[1012], 3);
    this.ᐃⵠⵠ[219].id = 219;
    this.ᐃᐃⵠ[72] = pf(60, 60, 0, ᐃΔ[1011], 3);
    this.ᐃᐃⵠ[72].id = 72;
    this.ᐃⵠΔ[218] = pf(68, 68, 0, ᐃΔ[1010], 3);
    this.ᐃⵠΔ[218].id = 218;
    this.ᐃⵠⵠ[218] = pf(60, 60, 0, ᐃΔ[1009], 3);
    this.ᐃⵠⵠ[218].id = 218;
    this.ᐃᐃⵠ[66] = pf(60, 60, 0, ᐃΔ[1008], 3);
    this.ᐃᐃⵠ[66].id = 66;
    this.ᐃⵠΔ[153] = pf(68, 68, 0, ᐃΔ[1201], 3);
    this.ᐃⵠΔ[153].id = 153;
    this.ᐃⵠⵠ[153] = pf(60, 60, 0, ᐃΔ[1199], 3);
    this.ᐃⵠⵠ[153].id = 153;
    this.ᐃᐃⵠ[117] = pf(60, 60, 0, ᐃΔ[1200], 3);
    this.ᐃᐃⵠ[117].id = 117;
    this.ᐃⵠΔ[154] = pf(68, 68, 0, ᐃΔ[1205], 3);
    this.ᐃⵠΔ[154].id = 154;
    this.ᐃⵠⵠ[154] = pf(60, 60, 0, ᐃΔ[1203], 3);
    this.ᐃⵠⵠ[154].id = 154;
    this.ᐃᐃⵠ[118] = pf(60, 60, 0, ᐃΔ[1204], 3);
    this.ᐃᐃⵠ[118].id = 118;
    this.ᐃⵠΔ[155] = pf(68, 68, 0, ᐃΔ[1209], 3);
    this.ᐃⵠΔ[155].id = 155;
    this.ᐃⵠⵠ[155] = pf(60, 60, 0, ᐃΔ[1207], 3);
    this.ᐃⵠⵠ[155].id = 155;
    this.ᐃᐃⵠ[119] = pf(60, 60, 0, ᐃΔ[1208], 3);
    this.ᐃᐃⵠ[119].id = 119;
    this.ᐃⵠΔ[156] = pf(68, 68, 0, ᐃΔ[1213], 3);
    this.ᐃⵠΔ[156].id = 156;
    this.ᐃⵠⵠ[156] = pf(60, 60, 0, ᐃΔ[1211], 3);
    this.ᐃⵠⵠ[156].id = 156;
    this.ᐃᐃⵠ[120] = pf(60, 60, 0, ᐃΔ[1212], 3);
    this.ᐃᐃⵠ[120].id = 120;
    this.ᐃⵠΔ[157] = pf(68, 68, 0, ᐃΔ[1217], 3);
    this.ᐃⵠΔ[157].id = 157;
    this.ᐃⵠⵠ[157] = pf(60, 60, 0, ᐃΔ[1215], 3);
    this.ᐃⵠⵠ[157].id = 157;
    this.ᐃᐃⵠ[121] = pf(60, 60, 0, ᐃΔ[1216], 3);
    this.ᐃᐃⵠ[121].id = 121;
    this.ᐃⵠΔ[203] = pf(68, 68, 0, ᐃΔ[937], 3);
    this.ᐃⵠΔ[203].id = 203;
    this.ᐃⵠⵠ[203] = pf(60, 60, 0, ᐃΔ[936], 3);
    this.ᐃⵠⵠ[203].id = 203;
    this.ᐃⵠⵠ[203].info.ᐃᐃ[2] = this.ᐃⵠⵠ[203].info.ᐃᐃ[0];
    this.ᐃⵠΔ[150] = pf(68, 68, 0, ᐃΔ[524], 3);
    this.ᐃⵠΔ[150].id = 150;
    this.ᐃⵠⵠ[150] = pf(60, 60, 0, ᐃΔ[523], 3);
    this.ᐃⵠⵠ[150].id = 150;
    this.ᐃⵠⵠ[150].info.ᐃᐃ[2] = this.ᐃⵠⵠ[150].info.ᐃᐃ[0];
    this.ᐃⵠΔ[202] = pf(68, 68, 0, ᐃΔ[939], 3);
    this.ᐃⵠΔ[202].id = 202;
    this.ᐃⵠⵠ[202] = pf(60, 60, 0, ᐃΔ[938], 3);
    this.ᐃⵠⵠ[202].id = 202;
    this.ᐃⵠⵠ[202].info.ᐃᐃ[2] = this.ᐃⵠⵠ[202].info.ᐃᐃ[0];
    this.ᐃⵠΔ[19] = pf(68, 68, 0, ᐃΔ[934], 3);
    this.ᐃⵠΔ[19].id = 19;
    this.ᐃⵠⵠ[19] = pf(60, 60, 0, ᐃΔ[932], 3);
    this.ᐃⵠⵠ[19].id = 19;
    this.ᐃᐃⵠ[39] = pf(60, 60, 0, ᐃΔ[933], 3);
    this.ᐃᐃⵠ[39].id = 39;
    this.ᐃⵠΔ[20] = pf(68, 68, 0, ᐃΔ[923], 3);
    this.ᐃⵠΔ[20].id = 20;
    this.ᐃⵠⵠ[20] = pf(60, 60, 0, ᐃΔ[921], 3);
    this.ᐃⵠⵠ[20].id = 20;
    this.ᐃᐃⵠ[95] = pf(60, 60, 0, ᐃΔ[922], 3);
    this.ᐃᐃⵠ[95].id = 95;
    this.ᐃⵠΔ[21] = pf(68, 68, 0, ᐃΔ[927], 3);
    this.ᐃⵠΔ[21].id = 21;
    this.ᐃⵠⵠ[21] = pf(60, 60, 0, ᐃΔ[925], 3);
    this.ᐃⵠⵠ[21].id = 21;
    this.ᐃᐃⵠ[96] = pf(60, 60, 0, ᐃΔ[926], 3);
    this.ᐃᐃⵠ[96].id = 96;
    this.ᐃⵠΔ[22] = pf(68, 68, 0, ᐃΔ[931], 3);
    this.ᐃⵠΔ[22].id = 22;
    this.ᐃⵠⵠ[22] = pf(60, 60, 0, ᐃΔ[929], 3);
    this.ᐃⵠⵠ[22].id = 22;
    this.ᐃᐃⵠ[97] = pf(60, 60, 0, ᐃΔ[930], 3);
    this.ᐃᐃⵠ[97].id = 97;
    this.ᐃⵠΔ[60] = pf(68, 68, 0, ᐃΔ[736], 3);
    this.ᐃⵠΔ[60].id = 60;
    this.ᐃⵠⵠ[60] = pf(60, 60, 0, ᐃΔ[735], 3);
    this.ᐃⵠⵠ[60].id = 60;
    this.ᐃᐃⵠ[127] = pf(60, 60, 0, ᐃΔ[737], 3);
    this.ᐃᐃⵠ[127].id = 127;
    this.ᐃⵠΔ[90] = pf(68, 68, 0, ᐃΔ[739], 3);
    this.ᐃⵠΔ[90].id = 90;
    this.ᐃⵠⵠ[90] = pf(60, 60, 0, ᐃΔ[738], 3);
    this.ᐃⵠⵠ[90].id = 90;
    this.ᐃᐃⵠ[173] = pf(60, 60, 0, ᐃΔ[740], 3);
    this.ᐃᐃⵠ[173].id = 173;
    this.ᐃⵠΔ[92] = pf(68, 68, 0, ᐃΔ[745], 3);
    this.ᐃⵠΔ[92].id = 92;
    this.ᐃⵠⵠ[92] = pf(60, 60, 0, ᐃΔ[744], 3);
    this.ᐃⵠⵠ[92].id = 92;
    this.ᐃᐃⵠ[174] = pf(60, 60, 0, ᐃΔ[746], 3);
    this.ᐃᐃⵠ[174].id = 174;
    this.ᐃⵠΔ[93] = pf(68, 68, 0, ᐃΔ[748], 3);
    this.ᐃⵠΔ[93].id = 93;
    this.ᐃⵠⵠ[93] = pf(60, 60, 0, ᐃΔ[747], 3);
    this.ᐃⵠⵠ[93].id = 93;
    this.ᐃᐃⵠ[175] = pf(60, 60, 0, ᐃΔ[749], 3);
    this.ᐃᐃⵠ[175].id = 175;
    this.ᐃⵠΔ[91] = pf(68, 68, 0, ᐃΔ[742], 3);
    this.ᐃⵠΔ[91].id = 91;
    this.ᐃⵠⵠ[91] = pf(60, 60, 0, ᐃΔ[741], 3);
    this.ᐃⵠⵠ[91].id = 91;
    this.ᐃᐃⵠ[176] = pf(60, 60, 0, ᐃΔ[743], 3);
    this.ᐃᐃⵠ[176].id = 176;
    this.ᐃⵠΔ[100] = pf(68, 68, 0, ᐃΔ[1165], 3);
    this.ᐃⵠΔ[100].id = 100;
    this.ᐃⵠⵠ[100] = pf(60, 60, 0, ᐃΔ[1164], 3);
    this.ᐃⵠⵠ[100].id = 100;
    this.ᐃᐃⵠ[fh.ᐃⲆΔᐃⵠ] = pf(60, 60, 0, ᐃΔ[Cs.ΔⲆⵠᐃⵠⵠⲆᐃⵠ], 3);
    this.ᐃᐃⵠ[fh.ᐃⲆΔᐃⵠ].id = fh.ᐃⲆΔᐃⵠ;
    this.ᐃⵠΔ[34] = pf(68, 68, 0, ᐃΔ[945], 3);
    this.ᐃⵠΔ[34].id = 34;
    this.ᐃⵠⵠ[34] = pf(60, 60, 0, ᐃΔ[943], 3);
    this.ᐃⵠⵠ[34].id = 34;
    this.ᐃᐃⵠ[30] = pf(60, 60, 0, ᐃΔ[944], 3);
    this.ᐃᐃⵠ[30].id = 30;
    this.ᐃⵠΔ[44] = pf(68, 68, 0, ᐃΔ[948], 3);
    this.ᐃⵠΔ[44].id = 44;
    this.ᐃⵠⵠ[44] = pf(60, 60, 0, ᐃΔ[946], 3);
    this.ᐃⵠⵠ[44].id = 44;
    this.ᐃᐃⵠ[92] = pf(60, 60, 0, ᐃΔ[947], 3);
    this.ᐃᐃⵠ[92].id = 92;
    this.ᐃⵠΔ[17] = pf(68, 68, 0, ᐃΔ[878], 3);
    this.ᐃⵠΔ[17].id = 17;
    this.ᐃⵠⵠ[17] = pf(60, 60, 0, ᐃΔ[877], 3);
    this.ᐃⵠⵠ[17].id = 17;
    this.ᐃᐃⵠ[32] = pf(60, 60, 0, ᐃΔ[879], 3);
    this.ᐃᐃⵠ[32].id = 32;
    this.ᐃⵠΔ[63] = pf(68, 68, 0, ᐃΔ[568], 3);
    this.ᐃⵠΔ[63].id = 63;
    this.ᐃⵠⵠ[63] = pf(60, 60, 0, ᐃΔ[566], 3);
    this.ᐃⵠⵠ[63].id = 63;
    this.ᐃᐃⵠ[130] = pf(60, 60, 0, ᐃΔ[567], 3);
    this.ᐃᐃⵠ[130].id = 130;
    this.ᐃⵠΔ[187] = pf(68, 68, 0, ᐃΔ[591], 3);
    this.ᐃⵠΔ[187].id = 187;
    this.ᐃⵠⵠ[187] = pf(60, 60, 0, ᐃΔ[253], 3);
    this.ᐃⵠⵠ[187].id = 187;
    this.ᐃⵠΔ[Ah.ᐃⲆⲆⵠΔⵠⵠ] = pf(68, 68, 0, ᐃΔ[Cs.ΔⵠⵠᐃᐃΔᐃⲆⲆ], 3);
    this.ᐃⵠΔ[Ah.ᐃⲆⲆⵠΔⵠⵠ].id = Ah.ᐃⲆⲆⵠΔⵠⵠ;
    this.ᐃⵠⵠ[Ah.ᐃⲆⲆⵠΔⵠⵠ] = pf(60, 60, 0, ᐃΔ[Cs.ⲆⵠⵠΔⵠⵠⲆⲆⲆ], 3);
    this.ᐃⵠⵠ[Ah.ᐃⲆⲆⵠΔⵠⵠ].id = Ah.ᐃⲆⲆⵠΔⵠⵠ;
    this.ᐃⵠΔ[Ah.ΔᐃⵠⲆⵠⵠⲆ] = pf(68, 68, 0, ᐃΔ[Cs.ΔᐃⲆᐃⵠᐃⵠⲆᐃ], 3);
    this.ᐃⵠΔ[Ah.ΔᐃⵠⲆⵠⵠⲆ].id = Ah.ΔᐃⵠⲆⵠⵠⲆ;
    this.ᐃⵠⵠ[Ah.ΔᐃⵠⲆⵠⵠⲆ] = pf(60, 60, 0, ᐃΔ[Cs.ⲆⵠΔΔⵠⲆⲆⵠⵠ], 3);
    this.ᐃⵠⵠ[Ah.ΔᐃⵠⲆⵠⵠⲆ].id = Ah.ΔᐃⵠⲆⵠⵠⲆ;
    this.ᐃⵠΔ[Ah.ᐃⵠⵠΔΔᐃⵠ] = pf(68, 68, 0, ᐃΔ[Cs.ⵠⵠⲆⵠⵠᐃᐃΔⵠ], 3);
    this.ᐃⵠΔ[Ah.ᐃⵠⵠΔΔᐃⵠ].id = Ah.ᐃⵠⵠΔΔᐃⵠ;
    this.ᐃⵠⵠ[Ah.ᐃⵠⵠΔΔᐃⵠ] = pf(60, 60, 0, ᐃΔ[Cs.ᐃᐃⵠΔᐃᐃⲆΔⲆ], 3);
    this.ᐃⵠⵠ[Ah.ᐃⵠⵠΔΔᐃⵠ].id = Ah.ᐃⵠⵠΔΔᐃⵠ;
    this.ᐃⵠΔ[Ah.ᐃΔΔΔᐃⲆⵠ] = pf(68, 68, 0, ᐃΔ[Cs.ΔⵠⵠᐃΔⵠᐃⲆⵠ], 3);
    this.ᐃⵠΔ[Ah.ᐃΔΔΔᐃⲆⵠ].id = Ah.ᐃΔΔΔᐃⲆⵠ;
    this.ᐃⵠⵠ[Ah.ᐃΔΔΔᐃⲆⵠ] = pf(60, 60, 0, ᐃΔ[Cs.ᐃΔⵠⵠΔΔⵠΔΔ], 3);
    this.ᐃⵠⵠ[Ah.ᐃΔΔΔᐃⲆⵠ].id = Ah.ᐃΔΔΔᐃⲆⵠ;
    this.ᐃⵠΔ[Ah.ΔⵠⵠᐃⲆΔⲆ] = pf(68, 68, 0, ᐃΔ[Cs.ⲆⵠⵠⵠⵠᐃⲆⵠⵠ], 3);
    this.ᐃⵠΔ[Ah.ΔⵠⵠᐃⲆΔⲆ].id = Ah.ΔⵠⵠᐃⲆΔⲆ;
    this.ᐃⵠⵠ[Ah.ΔⵠⵠᐃⲆΔⲆ] = pf(60, 60, 0, ᐃΔ[Cs.ⵠᐃᐃᐃⲆΔΔⲆⵠ], 3);
    this.ᐃⵠⵠ[Ah.ΔⵠⵠᐃⲆΔⲆ].id = Ah.ΔⵠⵠᐃⲆΔⲆ;
    this.ᐃᐃⲆΔΔⲆⵠ = function () {
      for (var a = Ax.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ, b = 10, c = 10, d = 0; d < a.length; d++) {
        if (d > 0 && !(d % 4)) {
          b += a[0].info.width + 10;
          c = 10;
        }
        a[d].info.translate.x = b;
        a[d].info.translate.y = c;
        c += 10 + a[d].info.height;
      }
    };
    this.ⲆΔᐃΔᐃΔᐃ = function () {
      var a = Math.floor(Math.floor((3 + Ax.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ.length) / 4) * (10 + this.ᐃⵠΔ[0].info.ᐃᐃ[0].width) + 35);
      for (var b = 0; b < this.ᐃⵠΔ.length; b++) {
        if (this.ᐃⵠΔ[b]) {
          this.ᐃⵠΔ[b].info.translate.x = a;
          this.ᐃⵠΔ[b].info.translate.y = 22;
        }
      }
      this.ΔΔΔⲆⵠΔΔ.info.translate.x = a + 17;
      this.ΔΔΔⲆⵠΔΔ.info.translate.y = 22 + ᐃΔ[339].height;
      this.ΔΔⵠᐃⲆᐃⵠ.info.translate.x = a + 17;
      this.ΔΔⵠᐃⲆᐃⵠ.info.translate.y = 30;
      this.ⲆⵠⵠΔΔΔⵠ.info.translate.x = a + 17;
      this.ⲆⵠⵠΔΔΔⵠ.info.translate.y = 22 + ᐃΔ[339].height;
    };
    this.ΔΔᐃΔⵠᐃΔⵠΔ = function () {
      var a = Math.floor(($o - ᐃΔ[556][0].width) / 2);
      for (var b = 0; this.ΔⵠⲆⵠΔ.length > b; b++) {
        this.ΔⵠⲆⵠΔ[b].button.info.translate.x = a;
        this.ΔⵠⲆⵠΔ[b].button.info.translate.y = -13;
      }
    };
    this.ⵠᐃⵠⲆⵠΔⲆ = function () {
      var a = 12 + Math.floor(Math.floor((3 + Ax.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ.length) / 4) * (10 + this.ΔΔᐃΔᐃⵠᐃ.info.ᐃᐃ[0].width) + 35);
      this.ΔΔᐃΔᐃⵠᐃ.info.translate.x = a;
      this.ΔΔᐃΔᐃⵠᐃ.info.translate.y = 33;
      this.ᐃᐃΔⲆΔΔⵠ.info.translate.x = this.ΔΔᐃΔᐃⵠᐃ.info.translate.x;
      this.ᐃᐃΔⲆΔΔⵠ.info.translate.y = 137;
      this.ⵠΔⵠᐃⲆᐃⲆ.info.translate.x = this.ΔΔᐃΔᐃⵠᐃ.info.translate.x;
      this.ⵠΔⵠᐃⲆᐃⲆ.info.translate.y = 240;
    };
    this.ᐃⵠΔᐃⲆⵠᐃ = function () {
      var a = 12 + Math.floor((10 + this.ΔⵠⲆⵠΔᐃⵠ.info.ᐃᐃ[0].width) * Math.floor((3 + Ax.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ.length) / 4) + 35);
      this.ΔⵠⲆⵠΔᐃⵠ.info.translate.x = a;
      this.ΔⵠⲆⵠΔᐃⵠ.info.translate.y = 36;
      a += 83;
      this.ⲆⵠⵠΔΔⵠⲆ.info.translate.x = a;
      this.ⲆⵠⵠΔΔⵠⲆ.info.translate.y = 36;
      this.ⵠᐃᐃⵠⲆⵠᐃ.info.translate.x = a;
      this.ⵠᐃᐃⵠⲆⵠᐃ.info.translate.y = 36;
      this.ⵠⲆⲆⲆΔΔΔ.info.translate.x = a;
      this.ⵠⲆⲆⲆΔΔΔ.info.translate.y = 36;
      this.ⵠⵠΔΔᐃⵠⵠ.info.translate.x = a;
      this.ⵠⵠΔΔᐃⵠⵠ.info.translate.y = 36;
      this.ΔΔΔΔΔⲆΔ.info.translate.x = a;
      this.ΔΔΔΔΔⲆΔ.info.translate.y = 36;
    };
    this.ⵠᐃⲆⲆΔΔⵠ = function () {
      var a = 12 + Math.floor(Math.floor((3 + Ax.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ.length) / 4) * (10 + this.ⲆΔⵠΔΔⵠᐃ.info.ᐃᐃ[0].width) + 35);
      this.ⲆΔⵠΔΔⵠᐃ.info.translate.x = a;
      this.ⲆΔⵠΔΔⵠᐃ.info.translate.y = 36;
      a += 83;
      this.ΔᐃᐃⵠⵠⵠⲆ.info.translate.x = a;
      this.ΔᐃᐃⵠⵠⵠⲆ.info.translate.y = 36;
    };
    this.ⲆΔⵠⵠᐃⵠᐃ = function () {
      var a = Math.floor((10 + this.ΔⲆᐃⵠⵠⲆΔ.info.ᐃᐃ[0].width) * Math.floor((3 + Ax.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ.length) / 4) + 35);
      this.ΔⲆᐃⵠⵠⲆΔ.info.translate.x = a;
      this.ΔⲆᐃⵠⵠⲆΔ.info.translate.y = 22;
    };
    this.ᐃⲆΔⵠΔᐃⵠ = function () {
      var a = Ax.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ;
      if (a.length > 0) {
        var b = Math.floor(($o - Ax.ᐃΔΔⲆ.max * (a[0].info.width + 5)) / 2);
      }
      for (var c = 0; c < a.length; c++) {
        a[c].info.translate.x = b + (a[c].info.width + 5) * c;
        a[c].info.translate.y = sa - a[c].info.width - 10;
        this.ⵠⵠⲆⲆⲆ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
        this.ⵠⵠⲆⲆⲆ[a[c].id].info.translate.y = a[c].info.translate.y - this.ⵠⵠⲆⲆⲆ[a[c].id].info.ᐃᐃ[0].height - 6;
      }
    };
    var n;
    var p = 0;
    function q() {
      f.ⲆᐃⲆ();
      if (++p == 30) {
        f.ⵠΔⲆⵠⲆⵠΔ();
        f.ⲆᐃⲆ();
        return;
      }
      ij.setTimeout(q, 33);
    }
    this.ⲆⵠᐃΔⲆ = function (a) {
      if (Ax.Ⲇⵠⵠⵠᐃ.open) {
        Ax.Ⲇⵠⵠⵠᐃ.ⲆⵠᐃΔⲆ();
      }
      if (Ax.ᐃⵠΔⵠΔ.open) {
        Ax.ᐃⵠΔⵠΔ.ⲆⵠᐃΔⲆ();
      }
      document.getElementById("team_box").style.display = "none";
      f.ΔⵠⲆⲆΔ.style.display = "none";
      f.ΔⵠⲆⲆΔ.open = es;
      f.sign.style.display = "none";
      f.sign.open = es;
      document.getElementById("shop_starterkit").style.display = "none";
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
      f.ΔⲆΔΔ.open = Pi;
      document.getElementById("option_in_game").style.display = "none";
      f.options.open = false;
      document.getElementById("sure_delete").style.display = "none";
      f.ΔΔⵠⲆ.open = ln;
      document.getElementById("cancel_sure_delete").style.display = "none";
      f.ΔⲆΔⵠⵠ.open = false;
      document.getElementById("chronoquest").style.display = "none";
      f.ᐃⲆⲆⲆ.open = false;
      n = a;
      f.ⲆⲆⲆⲆⵠⵠᐃ();
      f.ΔⲆ.style.cursor = f.ⵠᐃⵠΔΔΔᐃ;
      Dx.ⲆⵠᐃΔⲆ();
      l = -1;
      s();
      Jx();
    };
    var l = -1;
    function s() {
      f.ⲆᐃⲆ();
      if (++l == 30) {
        f.stop();
        n();
        return;
      }
      ij.setTimeout(s, 33);
    }
    this.ᐃⲆⵠᐃᐃ = false;
    this.stop = function () {
      this.ᐃⲆⵠᐃᐃ = false;
    };
    this.ⵠΔΔᐃᐃ = function () {
      wx.ᐃⲆⲆΔᐃΔⲆⲆΔ();
      f.ᐃⲆⵠᐃᐃ = true;
      l = -1;
      p = 0;
      q();
    };
    this.ⲆᐃⲆ = function () {
      this.ⵠΔᐃⲆ.translate.x = $o - this.ⵠΔᐃⲆ.ᐃᐃ.width - 10;
      this.ⵠΔᐃⲆ.translate.y = 5;
      zx.ⵠΔⵠΔⲆ.translate.x = this.ⵠΔᐃⲆ.translate.x - ᐃΔ[725][0].width - 85;
      zx.ⵠΔⵠΔⲆ.translate.y = 10;
      this.ΔⲆΔΔ.button.info.translate.x = this.ⵠΔᐃⲆ.translate.x - ᐃΔ[708][0].width - 10;
      this.ΔⲆΔΔ.button.info.translate.y = 10;
      this.ᐃⲆⲆⲆ.button.info.translate.x = this.ⵠΔᐃⲆ.translate.x - ᐃΔ[755][0].width - 20;
      this.ᐃⲆⲆⲆ.button.info.translate.y = this.ΔⲆΔΔ.button.info.translate.y + ᐃΔ[708][0].height + 5;
      this.options.button.info.translate.x = this.ⵠΔᐃⲆ.translate.x - ᐃΔ[727][0].width - 20;
      this.options.button.info.translate.y = this.ᐃⲆⲆⲆ.button.info.translate.y + ᐃΔ[727][0].height + 18;
      this.ⲆΔⵠⲆ.ᐃⵠⵠᐃⵠΔᐃ.info.translate.x = this.ⵠΔᐃⲆ.translate.x - ᐃΔ[727][0].width - 20;
      this.ⲆΔⵠⲆ.ᐃⵠⵠᐃⵠΔᐃ.info.translate.y = this.options.button.info.translate.y + ᐃΔ[783][0].height;
      this.ⲆΔⵠⲆ.ⵠΔⵠⲆⵠᐃΔ.info.translate.x = this.ⵠΔᐃⲆ.translate.x - ᐃΔ[727][0].width - 20;
      this.ⲆΔⵠⲆ.ⵠΔⵠⲆⵠᐃΔ.info.translate.y = this.options.button.info.translate.y + ᐃΔ[783][0].height;
      this.ΔⵠⲆⲆΔ.button.info.translate.x = this.ⵠΔᐃⲆ.translate.x - ᐃΔ[795][0].width - 20;
      this.ΔⵠⲆⲆΔ.button.info.translate.y = this.ⲆΔⵠⲆ.ᐃⵠⵠᐃⵠΔᐃ.info.translate.y + ᐃΔ[795][0].height;
      Ax.ⲆᐃΔΔⵠ.translate.x = this.ⵠΔᐃⲆ.translate.x - 63 - 85;
      Ax.ⲆᐃΔΔⵠ.translate.y = 100;
      Ax.ᐃᐃΔⵠⵠ.translate.x = this.ⵠΔᐃⲆ.translate.x - ᐃΔ[517].width - 85;
      Ax.ᐃᐃΔⵠⵠ.translate.y = Ax.ⲆᐃΔΔⵠ.translate.y + 10 + ᐃΔ[546].height;
      this.Δⵠⵠⵠⵠ.translate.y = sa - 3 - 193;
      this.Δⵠⵠⵠⵠ.translate.x = $o - 3 - 193;
      this.ⲆᐃⵠⲆ.translate.x = 5;
      this.ⲆᐃⵠⲆ.translate.y = sa - this.ⲆᐃⵠⲆ.ᐃᐃ.height - 5;
      this.ΔⵠⲆᐃⵠ.button.info.translate.x = ua - 45.5;
      this.ΔⵠⲆᐃⵠ.button.info.translate.y = 50;
      this.ᐃᐃⲆΔΔⲆⵠ();
      this.ᐃⲆΔⵠΔᐃⵠ();
      this.ⲆΔᐃΔᐃΔᐃ();
      this.ⲆΔⵠⵠᐃⵠᐃ();
      this.ⵠᐃⲆⲆΔΔⵠ();
      this.ᐃⵠΔᐃⲆⵠᐃ();
      this.ⵠᐃⵠⲆⵠΔⲆ();
      this.ΔΔᐃΔⵠᐃΔⵠΔ();
      this.sign.ΔᐃᐃᐃⵠⲆⵠ();
      jp();
      Ax.Ⲇⵠⵠⵠᐃ.ⲆᐃⲆ();
      Ax.ᐃⵠΔⵠΔ.ⲆᐃⲆ();
      this.ΔⲆΔΔᐃᐃⲆⵠΔ.ⲆᐃⲆ();
      this.ΔⲆΔΔ.ⲆⲆⲆΔᐃᐃⲆ.ⲆᐃⲆ();
      this.ΔⲆΔΔ.list.ⲆᐃⲆ();
      this.ΔΔⵠⲆ.ⲆᐃⲆ();
      this.ΔⲆΔⵠⵠ.ⲆᐃⲆ();
      this.ᐃⲆⲆⲆ.ⲆᐃⲆ();
      this.ΔⵠⲆᐃⵠ.ⲆᐃⲆ();
      this.options.ⲆᐃⲆ();
      this.ΔⵠⲆⲆΔ.ⲆᐃⲆ();
      this.sign.ⲆᐃⲆ();
      var a = 0;
      if (p != 30) {
        a = 1500 / (p + 1) - 50;
      }
      if (l != -1) {
        a = -(1500 / (30 - l + 1) - 48);
      }
      this.ΔⵠⲆᐃⵠ.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠΔᐃⲆ.translate.y -= a > 0 ? a : -a;
      Ax.ⲆᐃΔΔⵠ.translate.y -= a > 0 ? a : -a;
      Ax.ᐃᐃΔⵠⵠ.translate.y -= a > 0 ? a : -a;
      this.ΔⲆΔΔ.button.info.translate.y -= a > 0 ? a : -a;
      this.ᐃⲆⲆⲆ.button.info.translate.y -= a > 0 ? a : -a;
      this.options.button.info.translate.y -= a > 0 ? a : -a;
      this.ΔⵠⲆⲆΔ.button.info.translate.y -= a > 0 ? a : -a;
      this.ⲆΔⵠⲆ.ᐃⵠⵠᐃⵠΔᐃ.info.translate.y -= a > 0 ? a : -a;
      this.ⲆΔⵠⲆ.ⵠΔⵠⲆⵠᐃΔ.info.translate.y -= a > 0 ? a : -a;
      zx.ⵠΔⵠΔⲆ.translate.y -= a > 0 ? a : -a;
      this.ⲆᐃⵠⲆ.translate.y -= a < 0 ? a : -a;
      this.Δⵠⵠⵠⵠ.translate.y -= a < 0 ? a : -a;
    };
    this.ΔⵠΔⲆᐃᐃⵠⲆⲆ = function () {
      if (!Ax.ΔⲆⲆΔⵠ.enabled && this.ΔⵠᐃⵠᐃⵠⲆ && !Ax.ΔΔΔⵠⵠ) {
        Uu();
      }
      av();
      (function () {
        var a = zx.ⲆΔΔ[0];
        if (zx.mode === 0 || zx.mode === 7 || zx.mode === 2 || zx.mode === 4 || zx.mode === 5 || zx.mode === 6 || zx.mode === 3) {
          for (var b = 0; a.length > b; b++) {
            a[b].ΔⵠᐃⵠΔⵠⵠ();
          }
        } else if (zx.mode === 1) {
          for (b = 0; b < a.length; b++) {
            if (Ax.ⲆⵠΔⵠΔⲆΔ || Ax.ᐃᐃΔⵠⵠ.enabled || a[b].ΔⵠⲆⵠ.ⲆⲆΔⵠⵠ !== "spectator") {
              a[b].ΔⵠᐃⵠΔⵠⵠ();
            }
          }
        }
      })();
      if (this.ΔⵠᐃⵠᐃⵠⲆ) {
        _p();
        if (this.ⲆᐃΔᐃⲆΔᐃ === 1) {
          this.ΔⲆΔΔ.button.ⵠᐃᐃⲆ(d);
        }
        if (zx.mode !== 2 && zx.mode !== 4 && zx.mode !== 5 && this.ⲆΔⲆⲆⲆΔⲆ === 1) {
          this.ᐃⲆⲆⲆ.button.ⵠᐃᐃⲆ(d);
        }
        this.options.button.ⵠᐃᐃⲆ(d);
        if (this.ΔΔΔⵠᐃᐃᐃ === 1) {
          this.ΔⵠⲆⲆΔ.button.ⵠᐃᐃⲆ(d);
        }
        if (Dx.ⵠΔΔᐃᐃ) {
          this.ⲆΔⵠⲆ.ᐃⵠⵠᐃⵠΔᐃ.ⵠᐃᐃⲆ(d);
        } else {
          this.ⲆΔⵠⲆ.ⵠΔⵠⲆⵠᐃΔ.ⵠᐃᐃⲆ(d);
        }
        bv();
        Up();
        this.ⲆᐃⵠⲆ.ⵠᐃᐃⲆ();
        Yp();
        $p();
        _u();
        fv();
        $u();
        Bp();
        Lp();
        (function () {
          if (!Ax.ⵠᐃⲆΔ.open && !Ax.ᐃⲆᐃⵠᐃ.open && !Ax.ⲆᐃⲆⵠ.open && !Ax.ᐃⵠᐃᐃ.open && !Ax.ᐃᐃΔⲆ.open) {
            Ax.ⵠⵠΔΔᐃ.open = false;
            var a = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
            var b = 100;
            if (a) {
              for (var c = 0; zx.ⲆΔΔ[35].length > c; c++) {
                var d = zx.ⲆΔΔ[35][c];
                var e = ΔⵠΔⵠ.ΔⲆⲆᐃ(d, a);
                if (b > e) {
                  b = e;
                  Ax.ⵠⵠΔΔᐃ.open = true;
                  Ax.ⵠⵠΔΔᐃ.ⵠⵠΔᐃ = d.ⵠⵠΔᐃ;
                  Ax.ⵠⵠΔΔᐃ.ⲆᐃΔΔᐃ = d.id;
                }
              }
            }
          }
        })();
        Sp();
        Dp();
        Rp();
        Wp();
        jp();
        Gp();
      }
      if (Ax.ΔⲆⲆΔⵠ.enabled) {
        Mp();
      }
      Ep();
      if (this.ΔⵠᐃⵠᐃⵠⲆ && this.ⵠⲆⲆΔᐃΔⲆ === 1) {
        Wu();
      }
      Ax.ΔⵠΔᐃⲆⲆⵠ.ⵠᐃᐃⲆ();
      Ax.alert.ⵠᐃᐃⲆ("#FFF", "#000");
      if (this.ΔⵠᐃⵠᐃⵠⲆ) {
        Ax.ΔⲆⲆΔⵠ.ⵠᐃᐃⲆ();
        Ax.ΔⵠⲆᐃⵠ.ⵠᐃᐃⲆ();
        Ax.ᐃΔΔⲆ.ᐃⵠΔᐃⵠᐃⵠ.ⵠᐃᐃⲆ(Fx.ⲆⲆⲆⵠ.x, Fx.ⲆⲆⲆⵠ.y);
      }
      Np();
    };
    this.ⵠᐃΔⵠᐃᐃΔⲆᐃ = function () {
      Ax.ⲆⲆΔ.ⲆᐃⲆ();
      Ax.ⲆᐃⵠⲆ.ⲆᐃⲆ();
      if (!Ax.reconnect.enabled && Ax.ⲆⲆΔᐃⵠ) {
        Ax.control.ⲆᐃⲆ();
        //Ax.ⲆᐃΔΔⵠ.ⲆᐃⲆ();
      }
      zx.ⲆᐃⲆ();
      this.ᐃⲆⲆⲆ.ΔⵠᐃΔⵠᐃⵠⵠΔ();
    };
    this.ᐃΔΔⵠΔⲆΔΔⲆ = function () {
      ef();
    };
    this.ᐃⲆⵠᐃⲆⲆΔⲆⲆ = function () {
      wx.ᐃⲆΔⲆᐃⲆⵠⲆⵠ();
      wx.ⲆⲆΔⲆΔⵠⵠⲆΔ();
      wx.ᐃΔΔᐃᐃⵠΔΔⵠ();
      wx.ᐃᐃᐃᐃⵠⵠΔΔⲆ();
    };
    this.ⵠᐃᐃⲆ = function () {
      if (!Ax.reconnect.enabled && Ax.ⲆⲆΔᐃⵠ) {
        this.ᐃⲆⵠᐃⲆⲆΔⲆⲆ();
      }
      Dx.ⵠᐃⲆᐃᐃᐃᐃᐃᐃ();
      this.ⵠᐃΔⵠᐃᐃΔⲆᐃ();
      if (yx.ⲆⵠᐃⵠᐃΔᐃ !== 1) {
        this.ᐃΔΔⵠΔⲆΔΔⲆ();
        this.ΔⵠΔⲆᐃᐃⵠⲆⲆ();
      } else {
        var a = ⵠᐃ.ⵠᐃᐃΔΔⲆⲆ;
        Qp(d, a, ua - a.width / 4, dq - a.height / 4, a.width / 2, a.height / 2);
      }
    };
    this.ᐃΔⵠⵠⲆⵠᐃ = function (a) {
      if (Ax.Ⲇⵠⵠⵠᐃ.open && a.keyCode === 27) {
        Ax.Ⲇⵠⵠⵠᐃ.ⲆⵠᐃΔⲆ();
      } else if (Ax.ᐃⵠΔⵠΔ.open && a.keyCode === 27) {
        Ax.ᐃⵠΔⵠΔ.ⲆⵠᐃΔⲆ();
      } else if (Ax.Ⲇⵠⵠⵠᐃ.open || Ax.ᐃⵠΔⵠΔ.open || a.keyCode != 79 || l != -1) {
        if (a.keyCode == 13 && l == -1) {
          if (Ax.ᐃⵠΔⵠΔ.open) {
            Ax.ᐃⵠΔⵠΔ.ⵠΔⵠⲆᐃⵠᐃ();
          } else {
            Ax.Ⲇⵠⵠⵠᐃ.ⵠΔΔᐃᐃ();
          }
        } else if (!Ax.Ⲇⵠⵠⵠᐃ.open && !Ax.ᐃⵠΔⵠΔ.open) {
          if (a.keyCode === 82) {
            Ax.ⲆᐃΔΔⵠ.ⵠⵠⵠⵠΔⲆⵠ();
          } else if (a.keyCode !== 80 || zx.mode !== 1 || Ax.ⲆⵠΔⵠΔⲆΔ) {
            if (a.keyCode >= 49 && a.keyCode <= 57) {
              if (Ax.ᐃⵠⲆᐃ.id < 0) {
                var b = a.keyCode - 49;
                var c = Ax.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ[b];
                if (c) {
                  wx.ⵠⲆⲆᐃⲆ(c.id, b);
                }
              }
            } else if (a.keyCode == 89) {
              Ax.ⲆᐃⲆᐃΔⵠⵠ = !Ax.ⲆᐃⲆᐃΔⵠⵠ;
            } else if (a.keyCode == 71) {
              Ax.ᐃⵠⲆᐃ.ⵠⲆⲆⵠΔᐃΔΔΔ();
            }
          } else {
            Ax.ᐃᐃΔⵠⵠ.ⵠⵠⵠⵠΔⲆⵠ();
          }
        }
      } else {
        Ax.ᐃⵠΔⵠΔ.ⲆΔΔΔᐃΔⵠᐃⵠ();
      }
      Ex.up(a);
    };
    this.ᐃⵠΔᐃᐃᐃⵠ = function (a) {
      Ex.down(a);
      if (a.keyCode == 8 && !Ax.Ⲇⵠⵠⵠᐃ.open && !Ax.ᐃⵠΔⵠΔ.open) {
        a.preventDefault();
      }
    };
    this.ΔΔᐃⲆⵠᐃΔ = function (b) {
      Fx.ⲆⲆⲆⵠ = Cf(f.ΔⲆ, b);
      var c = D;
      if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0) {
        f.Δⵠⵠⵠⵠ.focus(Fx.ⲆⲆⲆⵠ);
      }
      var d = Ax.ⵠᐃⲆΔ;
      if (Ax.ᐃⵠⲆᐃ.id < 0 && d.id >= 0) {
        if (!Ax.ⵠᐃⲆΔ.lock || Ax.ⵠᐃⲆΔ.ⵠⵠΔᐃ === Ax.id) {
          c |= f.ᐃⵠΔ[Ax.ⵠᐃⲆΔ.id].ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
        }
      }
      var e = Ax.ⲆᐃⲆⵠ;
      if (e.open && e.ΔⲆⲆΔᐃ > 0) {
        c |= f.ΔᐃᐃⵠⵠⵠⲆ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
      }
      var j = Ax.ᐃᐃΔⲆ;
      if (j.open && j.ⵠⲆΔᐃⵠᐃⵠ > 0) {
        c |= f.ⲆⵠⵠΔΔⵠⲆ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
        c |= f.ⵠᐃᐃⵠⲆⵠᐃ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
        c |= f.ⵠⲆⲆⲆΔΔΔ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
        c |= f.ⵠⵠΔΔᐃⵠⵠ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
        c |= f.ΔΔΔΔΔⲆΔ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
      }
      var a = Ax.ᐃⵠᐃᐃ;
      if (a.open && a.ⲆⲆⵠΔΔᐃᐃ > 0) {
        c |= f.ⵠΔⵠᐃⲆᐃⲆ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
      }
      if (Ax.sign.open) {
        c |= f.sign.button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
      }
      if (!Ax.ⵠᐃⲆΔ.lock) {
        if (Ax.ⵠᐃⲆΔ.ΔΔΔⲆᐃⲆΔ) {
          c |= f.ⲆⵠⵠΔΔΔⵠ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
        }
      }
      if (Ax.ⵠᐃⲆΔ.ᐃᐃⲆᐃΔᐃⲆ) {
        c |= f.ΔΔΔⲆⵠΔΔ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
      }
      if (Ax.ᐃⵠⲆᐃ.id < 0 && !f.ΔⲆΔΔ.open && !f.ΔΔⵠⲆ.open && !f.ΔⲆΔⵠⵠ.open && !f.ᐃⲆⲆⲆ.open && !f.options.open && !f.ΔⵠⲆⲆΔ.open) {
        for (var k = Ax.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ, m = 0; k.length > m; m++) {
          var n = k[m].ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
          c |= n;
          if (n) {
            Ax.ᐃΔΔⲆ.ᐃⵠΔᐃⵠᐃⵠ.start(m, Fx.ⲆⲆⲆⵠ);
          }
          if (d.open && (d.id < 0 || d.id == k[m].id) || Ax.ᐃⲆᐃⵠᐃ.open && k[m].id === 109 || Ax.ⵠⵠΔΔᐃ.open && k[m].id === 180 || Ax.ᐃⵠᐃᐃ.open && (k[m].id === 109 || k[m].id === 131) || Ax.ⲆᐃⲆⵠ.open && k[m].id === 134 || Ax.ᐃᐃΔⲆ.open && k[m].id === 109) {
            c |= f.ⵠⵠⲆⲆⲆ[k[m].id].ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
          }
        }
      }
      if (Ax.ΔΔᐃᐃΔ.open) {
        c |= f.ΔΔᐃᐃΔ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
      }
      if (f.ⲆⵠⲆⲆⲆ != -1) {
        if (c |= f.ΔⵠⲆⵠΔ[f.ⲆⵠⲆⲆⲆ].button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf)) {
          var o = Ja;
        }
      } else {
        o = false;
      }
      if (Ax.ᐃⵠⲆᐃ.id < 0 && Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !o && !f.ΔⲆΔΔ.open && !f.ΔΔⵠⲆ.open && !f.options.open && !f.ΔⲆΔⵠⵠ.open && !f.ΔⵠⲆⲆΔ.open && !Ax.ΔΔΔⵠⵠ) {
        k = Ax.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ;
        m = 0;
        for (; k.length > m; m++) {
          c |= k[m].ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
        }
      }
      if (Ax.ᐃⵠⲆᐃ.id < 0 && Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && Ax.ΔⵠⲆᐃⵠ.open && !f.ΔⲆΔΔ.open && !f.ΔΔⵠⲆ.open && !f.options.open && !f.ΔⲆΔⵠⵠ.open && !f.ᐃⲆⲆⲆ.open && !f.ΔⵠⲆⲆΔ.open) {
        c |= f.ΔⵠⲆᐃⵠ.button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
      }
      if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !f.ΔΔⵠⲆ.open && !f.options.open && !f.ΔⲆΔⵠⵠ.open && !f.ᐃⲆⲆⲆ.open && !f.ΔⵠⲆⲆΔ.open) {
        c |= f.ΔⲆΔΔ.button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
      }
      if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !f.ΔⲆΔΔ.open && !f.ΔΔⵠⲆ.open && !f.ΔⲆΔⵠⵠ.open && !f.ᐃⲆⲆⲆ.open && !f.ΔⵠⲆⲆΔ.open) {
        c |= f.options.button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
      }
      if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !f.ΔⲆΔΔ.open && !f.ΔΔⵠⲆ.open && !f.ΔⲆΔⵠⵠ.open && !f.ᐃⲆⲆⲆ.open && !f.options.open) {
        c |= f.ΔⵠⲆⲆΔ.button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
      }
      if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !f.ΔⲆΔΔ.open && !f.ΔΔⵠⲆ.open && !f.ΔⲆΔⵠⵠ.open && !f.ᐃⲆⲆⲆ.open && !f.options.open && !f.ΔⵠⲆⲆΔ.open) {
        if (Dx.ⵠΔΔᐃᐃ) {
          c |= f.ⲆΔⵠⲆ.ᐃⵠⵠᐃⵠΔᐃ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
        } else {
          c |= f.ⲆΔⵠⲆ.ⵠΔⵠⲆⵠᐃΔ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
        }
      }
      if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !f.ΔⲆΔΔ.open && !f.ΔⵠⲆⲆΔ.open && !f.ΔΔⵠⲆ.open && !f.options.open && !f.ΔⲆΔⵠⵠ.open && zx.mode !== 2 && zx.mode !== 4 && zx.mode !== 5) {
        c |= f.ᐃⲆⲆⲆ.button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
      }
      if (!c && !f.ΔⲆΔΔ.open && !f.ΔΔⵠⲆ.open && !f.options.open && !f.ΔⲆΔⵠⵠ.open && !f.ᐃⲆⲆⲆ.open && !f.ΔⵠⲆⲆΔ.open && !f.sign.open) {
        if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ >= 0) {
          wx.ΔⵠΔⲆⲆΔⲆᐃⲆ();
        } else if (!o) {
          Fx.down();
        }
      }
    };
    this.ⲆΔΔⵠⲆⵠᐃ = function (b) {
      Fx.ⲆⲆⲆⵠ = Cf(f.ΔⲆ, b);
      Fx.up();
      if (!Ax.ᐃΔΔⲆ.ᐃⵠΔᐃⵠᐃⵠ.release()) {
        var c = Ax.ⵠᐃⲆΔ;
        var d = Ax.ᐃⲆᐃⵠᐃ;
        var e = Ax.ⵠⵠΔΔᐃ;
        var i = Ax.ⲆᐃⲆⵠ;
        var j = Ax.ᐃᐃΔⲆ;
        var k = Ax.ᐃⵠᐃᐃ;
        if (Ax.control.attack) {
          Ax.control.attack = 0;
          wx.ⵠᐃᐃᐃΔΔⲆⵠⲆ();
        }
        if (f.ⲆⵠⲆⲆⲆ != -1) {
          var m = f.ΔⵠⲆⵠΔ[f.ⲆⵠⲆⲆⲆ].button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf);
          var n = document.getElementById("team_box").style;
          if (m && n.display == "inline-block") {
            n.display = "none";
            return;
          }
          if (m) {
            f.ΔⵠⲆⵠΔ[f.ⲆⵠⲆⲆⲆ].action();
          }
        }
        if (Ax.ᐃⵠⲆᐃ.id < 0 && c.id >= 0 && !f.ΔΔⵠⲆ.open) {
          if (!Ax.ⵠᐃⲆΔ.lock || Ax.ⵠᐃⲆΔ.ⵠⵠΔᐃ === Ax.id) {
            if (m = f.ᐃⵠΔ[Ax.ⵠᐃⲆΔ.id].ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) {
              wx.ᐃᐃⲆⵠΔⲆΔⲆⲆ(c);
            }
          }
        }
        if ((i = Ax.ⲆᐃⲆⵠ).open && i.ΔⲆⲆΔᐃ > 0 && !f.ΔΔⵠⲆ.open) {
          if (m = f.ΔᐃᐃⵠⵠⵠⲆ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) {
            wx.ⵠⲆⲆᐃΔⵠⵠⲆⲆ(i);
          }
        }
        if ((j = Ax.ᐃᐃΔⲆ).open && j.ⵠⲆΔᐃⵠᐃⵠ > 0 && !f.ΔΔⵠⲆ.open) {
          switch (j.type) {
            case 24:
              if (m = f.ⲆⵠⵠΔΔⵠⲆ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) {
                wx.ᐃΔⲆΔᐃᐃᐃ(j);
              }
              break;
            case 25:
              if (m = f.ⵠᐃᐃⵠⲆⵠᐃ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) {
                wx.ᐃΔⲆΔᐃᐃᐃ(j);
              }
              break;
            case 26:
              if (m = f.ⵠⲆⲆⲆΔΔΔ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) {
                wx.ᐃΔⲆΔᐃᐃᐃ(j);
              }
              break;
            case 27:
              if (m = f.ⵠⵠΔΔᐃⵠⵠ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) {
                wx.ᐃΔⲆΔᐃᐃᐃ(j);
              }
              break;
            case 28:
              if (m = f.ΔΔΔΔΔⲆΔ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) {
                wx.ᐃΔⲆΔᐃᐃᐃ(j);
              }
          }
        }
        if ((k = Ax.ᐃⵠᐃᐃ).open && k.ⲆⲆⵠΔΔᐃᐃ > 0 && !f.ΔΔⵠⲆ.open) {
          if (m = f.ⵠΔⵠᐃⲆᐃⲆ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) {
            wx.ⵠⲆᐃΔⲆⵠⲆΔⵠ(k);
          }
        }
        if (Ax.sign.open && !f.ΔΔⵠⲆ.open) {
          if (m = f.sign.button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) {
            f.sign.select();
          }
        }
        if (!Ax.ⵠᐃⲆΔ.lock && !f.ΔΔⵠⲆ.open) {
          if (Ax.ⵠᐃⲆΔ.ΔΔΔⲆᐃⲆΔ && (m = f.ⲆⵠⵠΔΔΔⵠ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf))) {
            wx.ⵠΔⵠΔⵠᐃᐃⵠΔ(c);
          }
        }
        if (Ax.ⵠᐃⲆΔ.ᐃᐃⲆᐃΔᐃⲆ && !f.ΔΔⵠⲆ.open && (m = f.ΔΔΔⲆⵠΔΔ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf))) {
          wx.ⲆⲆᐃᐃΔΔⲆⲆᐃ(c);
          if (ga) {
            ga("send", "event", "Game", "lockpick");
          }
        }
        if (Ax.ΔΔᐃᐃΔ.open) {
          if (m = f.ΔΔᐃᐃΔ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) {
            wx.ΔΔᐃᐃΔ();
            if (ga) {
              ga("send", "event", "Game", "resurrection");
            }
          }
        }
        if (Ax.ᐃⵠⲆᐃ.id < 0 && !Ax.ΔⲆⲆΔⵠ.enabled && !f.ΔΔⵠⲆ.open) {
          for (var g = Ax.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ, o = 0; o < g.length; o++) {
            if (m = g[o].ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) {
              if (b.which != 1 || b.shiftKey) {
                if ((b.which == 1 && b.shiftKey || b.which == 3) && Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0) {
                  f.ΔΔⵠⲆ.ⲆⵠΔⵠΔᐃⲆ(g[o].id);
                }
              } else {
                wx.ⵠⲆⲆᐃⲆ(g[o].id, o);
              }
            } else if (c.open && (c.id < 0 || c.id === g[o].id)) {
              if ((m = f.ⵠⵠⲆⲆⲆ[g[o].id].ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) && Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0) {
                wx.ΔⵠᐃⲆⲆᐃᐃΔΔ(c, g[o].id, b.shiftKey ? 10 : 1);
              }
            } else if (e.open && g[o].id === 180) {
              if ((m = f.ⵠⵠⲆⲆⲆ[g[o].id].ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) && Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0) {
                wx.ᐃⵠᐃΔᐃΔΔΔⵠ(e);
              }
            } else if (d.open && g[o].id === 109) {
              if ((m = f.ⵠⵠⲆⲆⲆ[g[o].id].ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) && Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0) {
                wx.ⵠΔᐃΔⵠⲆᐃⲆⵠ(d, b.shiftKey ? 10 : 1);
              }
            } else if (i.open && g[o].id === 134) {
              if ((m = f.ⵠⵠⲆⲆⲆ[g[o].id].ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) && Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0) {
                wx.ⲆⲆⵠΔᐃΔΔᐃΔ(i, b.shiftKey ? 10 : 1);
              }
            } else if (j.open && g[o].id === 109) {
              if ((m = f.ⵠⵠⲆⲆⲆ[g[o].id].ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) && Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0) {
                wx.ΔⲆΔᐃΔΔⲆⲆⲆ(j, b.shiftKey ? 10 : 1);
              }
            } else if (k.open && (g[o].id === 109 || g[o].id === 131)) {
              if ((m = f.ⵠⵠⲆⲆⲆ[g[o].id].ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) && Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0) {
                if (g[o].id === 109) {
                  wx.ΔᐃⲆᐃⲆⵠᐃ(k, b.shiftKey ? 10 : 1, 0);
                } else {
                  wx.ΔᐃⲆᐃⲆⵠᐃ(k, 0, b.shiftKey ? 10 : 1);
                }
              }
            }
          }
        }
        if (Ax.ᐃⵠⲆᐃ.id < 0 && Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !Ax.ΔⲆⲆΔⵠ.enabled && !f.ΔΔⵠⲆ.open && !Ax.ΔΔΔⵠⵠ) {
          g = Ax.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ;
          o = 0;
          for (; g.length > o; o++) {
            if (m = g[o].ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) {
              ΔΔᐃⲆΔ = wx.ΔⲆΔⵠⵠᐃⲆⲆᐃ(g[o].id);
              if (ΔΔᐃⲆΔ && ga) {
                ga("send", "event", "Game", "craft", Ih[Nt[g[o].id].ᐃΔΔᐃ].name);
              }
            }
          }
        }
        if (Ax.ᐃⵠⲆᐃ.id < 0 && Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && Ax.ΔⵠⲆᐃⵠ.open && !f.ΔⵠⲆⲆΔ.open && !f.ΔⲆΔΔ.open && !f.ΔΔⵠⲆ.open && !f.options.open && !f.ΔⲆΔⵠⵠ.open && !f.ᐃⲆⲆⲆ.open) {
          if (m = f.ΔⵠⲆᐃⵠ.button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf)) {
            Cx.ΔⵠⲆᐃⵠ.select();
          }
        }
        if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !f.ΔⲆΔΔ.open && !f.ΔΔⵠⲆ.open && !f.ΔⵠⲆⲆΔ.open && !f.ΔⲆΔⵠⵠ.open && !f.ᐃⲆⲆⲆ.open && !f.options.open) {
          if (Dx.ⵠΔΔᐃᐃ) {
            if (m = f.ⲆΔⵠⲆ.ᐃⵠⵠᐃⵠΔᐃ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) {
              Dx.select();
              if (ga) {
                ga("send", "event", "Game", "sound on");
              }
            }
          } else if (m = f.ⲆΔⵠⲆ.ⵠΔⵠⲆⵠᐃΔ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) {
            Dx.select();
            if (ga) {
              ga("send", "event", "Game", "sound off");
            }
          }
        }
        if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !f.ΔⲆΔΔ.open && !f.ΔΔⵠⲆ.open && !f.ΔⲆΔⵠⵠ.open && !f.ᐃⲆⲆⲆ.open && !f.ΔⵠⲆⲆΔ.open) {
          if (m = f.options.button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) {
            f.options.ΔⲆᐃΔⲆΔᐃⲆⲆ();
            if (ga) {
              ga("send", "event", "Game", "options");
            }
          }
        }
        if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !f.ΔⲆΔΔ.open && !f.ΔΔⵠⲆ.open && !f.ΔⲆΔⵠⵠ.open && !f.ᐃⲆⲆⲆ.open && !f.options.open && f.ΔΔΔⵠᐃᐃᐃ === 1) {
          if (m = f.ΔⵠⲆⲆΔ.button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) {
            f.ΔⵠⲆⲆΔ.select();
            if (ga) {
              ga("send", "event", "Game", "market");
            }
          }
        }
        if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !f.ΔΔⵠⲆ.open && !f.ΔⵠⲆⲆΔ.open && !f.options.open && !f.ΔⲆΔⵠⵠ.open && !f.ᐃⲆⲆⲆ.open && f.ⲆᐃΔᐃⲆΔᐃ === 1) {
          if (m = f.ΔⲆΔΔ.button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) {
            f.ΔⲆΔΔ.ⲆΔΔᐃᐃⵠΔⵠᐃ();
            if (ga) {
              ga("send", "event", "Game", "recipe");
            }
          }
        }
        if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !f.ΔⲆΔΔ.open && !f.ΔΔⵠⲆ.open && !f.options.open && !f.ΔⲆΔⵠⵠ.open && !f.ΔⵠⲆⲆΔ.open && zx.mode !== 2 && zx.mode !== 4 && zx.mode !== 5 && f.ⲆΔⲆⲆⲆΔⲆ === 1) {
          if (m = f.ᐃⲆⲆⲆ.button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) {
            f.ᐃⲆⲆⲆ.select();
            if (ga) {
              ga("send", "event", "Game", "quests");
            }
          }
        }
        if (Ax.ᐃⵠⲆᐃ.ᐃΔⵠᐃΔ && b.which == 3) {
          f.ΔⲆΔⵠⵠ.ⲆⵠΔⵠΔᐃⲆ();
        }
      }
    };
    this.ΔΔᐃⲆᐃⲆΔ = false;
    this.ⵠΔⵠᐃᐃⲆⲆ = function (b) {
      Fx.ⲆⲆⲆⵠ = Cf(f.ΔⲆ, b);
      var d = false;
      Cx.ⲆⲆⵠⲆᐃ.display = 0;
      Ax.ᐃΔΔⲆ.ᐃⵠΔᐃⵠᐃⵠ.ⵠᐃΔⲆⵠ(Fx.ⲆⲆⲆⵠ);
      if (f.ⲆⵠⲆⲆⲆ != -1) {
        d |= f.ΔⵠⲆⵠΔ[f.ⲆⵠⲆⲆⲆ].button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
      }
      var e = Ax.ⲆᐃⲆⵠ;
      if (e.open && e.ΔⲆⲆΔᐃ > 0) {
        d |= f.ΔᐃᐃⵠⵠⵠⲆ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
      }
      var i = Ax.ᐃᐃΔⲆ;
      if (i.open && i.ⵠⲆΔᐃⵠᐃⵠ > 0) {
        d |= f.ⲆⵠⵠΔΔⵠⲆ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
        d |= f.ⵠᐃᐃⵠⲆⵠᐃ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
        d |= f.ⵠⲆⲆⲆΔΔΔ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
        d |= f.ⵠⵠΔΔᐃⵠⵠ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
        d |= f.ΔΔΔΔΔⲆΔ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
      }
      var a = Ax.ᐃⵠᐃᐃ;
      if (a.open && a.ⲆⲆⵠΔΔᐃᐃ > 0) {
        d |= f.ⵠΔⵠᐃⲆᐃⲆ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
      }
      if (Ax.sign.open) {
        d |= f.sign.button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
      }
      var j = Ax.ⵠᐃⲆΔ;
      if (Ax.ᐃⵠⲆᐃ.id < 0 && j.id >= 0 && !Ax.ΔⲆⲆΔⵠ.enabled && (!Ax.ⵠᐃⲆΔ.lock || Ax.ⵠᐃⲆΔ.ⵠⵠΔᐃ === Ax.id)) {
        d |= f.ᐃⵠΔ[j.id].ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
      }
      if (Ax.ΔΔᐃᐃΔ.open) {
        d |= f.ΔΔᐃᐃΔ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
      }
      if (!Ax.ⵠᐃⲆΔ.lock && !Ax.ΔⲆⲆΔⵠ.enabled) {
        if (Ax.ⵠᐃⲆΔ.ΔΔΔⲆᐃⲆΔ) {
          d |= f.ⲆⵠⵠΔΔΔⵠ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
        }
      }
      if (Ax.ⵠᐃⲆΔ.ᐃᐃⲆᐃΔᐃⲆ && !Ax.ΔⲆⲆΔⵠ.enabled) {
        d |= f.ΔΔΔⲆⵠΔΔ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
      }
      if (Ax.ᐃⵠⲆᐃ.id < 0 && !Ax.ΔⲆⲆΔⵠ.enabled) {
        for (var k = Ax.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ, m = 0; k.length > m; m++) {
          var o = k[m].ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
          d |= Cx.ⲆⲆⵠⲆᐃ.ΔⵠΔΔ(o, k[m], 0);
          if (j.open && (j.id < 0 || j.id == k[m].id) || Ax.ᐃⲆᐃⵠᐃ.open && k[m].id == 109 || Ax.ⵠⵠΔΔᐃ.open && k[m].id === 180 || Ax.ᐃⵠᐃᐃ.open && (k[m].id == 109 || k[m].id == 131) || Ax.ⲆᐃⲆⵠ.open && k[m].id == 134 || Ax.ᐃᐃΔⲆ.open && k[m].id == 109) {
            d |= f.ⵠⵠⲆⲆⲆ[k[m].id].ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
          }
        }
      }
      if (Ax.ᐃⵠⲆᐃ.id < 0 && Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !Ax.ΔⲆⲆΔⵠ.enabled && !Ax.ΔΔΔⵠⵠ) {
        k = Ax.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ;
        m = 0;
        for (; m < k.length; m++) {
          o = false;
          o = k[m].ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
          d |= Cx.ⲆⲆⵠⲆᐃ.ΔⵠΔΔ(o, k[m], 1);
        }
      }
      if (Ax.ᐃⵠⲆᐃ.id < 0 && Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && Ax.ΔⵠⲆᐃⵠ.open && !f.ΔⲆΔΔ.open && !f.ΔΔⵠⲆ.open && !f.options.open && !f.ΔⲆΔⵠⵠ.open && !f.ᐃⲆⲆⲆ.open && !f.ΔⵠⲆⲆΔ.open) {
        d |= f.ΔⵠⲆᐃⵠ.button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
      }
      if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !f.ΔΔⵠⲆ.open && !f.options.open && !f.ΔⲆΔⵠⵠ.open && !f.ᐃⲆⲆⲆ.open && !f.ΔⵠⲆⲆΔ.open && f.ⲆᐃΔᐃⲆΔᐃ === 1) {
        d |= f.ΔⲆΔΔ.button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
      }
      if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !f.ΔⲆΔΔ.open && !f.ΔΔⵠⲆ.open && !f.ΔⲆΔⵠⵠ.open && !f.ᐃⲆⲆⲆ.open && !f.ΔⵠⲆⲆΔ.open) {
        d |= f.options.button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
      }
      if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !f.ΔⲆΔΔ.open && !f.ΔΔⵠⲆ.open && !f.ΔⲆΔⵠⵠ.open && !f.ᐃⲆⲆⲆ.open && !f.options.open && f.ΔΔΔⵠᐃᐃᐃ === 1) {
        d |= f.ΔⵠⲆⲆΔ.button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
      }
      if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !f.ΔⲆΔΔ.open && !f.ΔΔⵠⲆ.open && !f.ΔⲆΔⵠⵠ.open && !f.ᐃⲆⲆⲆ.open && !f.options.open && !f.ΔⵠⲆⲆΔ.open) {
        if (Dx.ⵠΔΔᐃᐃ) {
          d |= f.ⲆΔⵠⲆ.ᐃⵠⵠᐃⵠΔᐃ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
        } else {
          d |= f.ⲆΔⵠⲆ.ⵠΔⵠⲆⵠᐃΔ.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
        }
      }
      if (Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ < 0 && !f.ΔⲆΔΔ.open && !f.ΔΔⵠⲆ.open && !f.options.open && !f.ΔⲆΔⵠⵠ.open && !f.ΔⵠⲆⲆΔ.open && zx.mode !== 2 && zx.mode !== 4 && If.ΔᐃΔΔⵠⵠⵠⲆⵠ !== zx.mode && f.ⲆΔⲆⲆⲆΔⲆ === 1) {
        d |= f.ᐃⲆⲆⲆ.button.ΔⵠΔΔ(f.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
      }
      if (d !== f.ΔΔᐃⲆᐃⲆΔ) {
        f.ΔΔᐃⲆᐃⲆΔ = d;
        c.style.cursor = d ? f.ⲆⲆⵠⲆΔⵠⵠ : f.ⵠᐃⵠΔΔΔᐃ;
      }
    };
    this.ⵠΔⲆⵠⲆⵠΔ = function () {
      ij.addEventListener("mousedown", this.ΔΔᐃⲆⵠᐃΔ, kn);
      ij.addEventListener("mouseup", this.ⲆΔΔⵠⲆⵠᐃ, Jo);
      ij.addEventListener("mousemove", this.ⵠΔⵠᐃᐃⲆⲆ, false);
      ij.addEventListener("keyup", this.ᐃΔⵠⵠⲆⵠᐃ, false);
      ij.addEventListener("keydown", this.ᐃⵠΔᐃᐃᐃⵠ, ks);
    };
    this.ⲆⲆⲆⲆⵠⵠᐃ = function () {
      ij.removeEventListener("mousedown", this.ΔΔᐃⲆⵠᐃΔ, Ak);
      ij.removeEventListener("mouseup", this.ⲆΔΔⵠⲆⵠᐃ, false);
      ij.removeEventListener("mousemove", this.ⵠΔⵠᐃᐃⲆⲆ, Jo);
      ij.removeEventListener("keyup", this.ᐃΔⵠⵠⲆⵠᐃ, false);
      ij.removeEventListener("keydown", this.ᐃⵠΔᐃᐃᐃⵠ, false);
    };
  }
  function cx(a) {
    return function (b, c, d, e, f) {
      const i = (2531011 + (56638 + b) * 214013) % 4294967296;
      const a = c ^ 62729;
      const j = d ^ 6258;
      const k = (2147483587 + (e + 690) * 2147483629) % 2147483647;
      const h = (2531011 + (f + 22283) * 214013) % 4294967296;
      const g = Lc(i, a, j, k, h, i);
      _w(a, j, k, h);
      return ~(g & 9360) & (g | 9360);
    }(a, 57574, 15529, 8932, 63163);
  }
  function dx(b, c, d, e) {
    const f = (b | 55384) & ~(b & 55384);
    const g = (24 << (c >> 16 & 255)) + (16 << (c & 255)) + (0 << (c >> 8 & 255)) + (8 << (c >> 24 & 255));
    const a = d ^ 34793;
    const h = ~(e & 10045) & e | ~(e & 10045) & 10045;
    return ((10812 + ($r(f, g, a, h, f, g) ^ function (b, c, d, e, f) {
      const i = ~(b & 48279) & (b | 48279);
      const a = (1 + (d + 6595) * 22695477) % 4294967296;
      const j = (2531011 + (44610 + e) * 214013) % 4294967296;
      const k = (f | 9050) & ~(f & 9050);
      const h = qo(i, (c | 50005) & ~(c & 50005));
      sp(a, j, k, i);
      return (h | 43498) & ~(h & 43498);
    }(a, h, f, g, a))) * 2147483629 + 2147483587) % 2147483647;
  }
  function ex(b, c) {
    this.ΔⲆ = b;
    this.Ⲇ = c;
    var d = this;
    this.ᐃⲆΔᐃᐃΔΔ = false;
    this.ⵠⵠⵠⵠⵠⵠᐃ = {
      id: document.getElementById("scoreboard"),
      style: document.getElementById("scoreboard").style,
      height: 0,
      translate: {
        y: 0,
        x: 0
      },
      ⲆᐃⲆ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = this.translate.y + "px";
      },
      ⵠΔⲆΔⲆ: function () {
        this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + Ax.ᐃⵠᐃᐃᐃΔΔ.ᐃⵠⲆⵠⲆⲆⵠ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + _b[335] + " : " + Ax.ⲆΔᐃ + "</div><div class=\"stats\"> " + _b[334] + " : " + Ax.ᐃⵠᐃᐃᐃΔΔ.ΔᐃΔⵠⲆ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + _b[333] + " : " + Ax.ᐃⵠᐃᐃᐃΔΔ.ᐃⲆⲆⲆⲆ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + Ax.ᐃⵠᐃᐃᐃΔΔ.ⵠⵠⲆᐃⲆⲆⲆ + " " + _b[332] + "</div></div><div id=\"shop_points\">" + _b[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + _b[329] + "</div><div class=\"social\" id=\"fffacebook\">" + _b[330] + "</div></div><div id=\"bbback\">" + _b[328] + "</div>";
        this.style.display = "inline-block";
        document.getElementById("tttwitter").addEventListener("mouseup", Zw, false);
        document.getElementById("bbback").addEventListener("mouseup", function () {
          Bx.ⲆⵠᐃΔⲆ(yx.ⵠΔΔᐃᐃ);
        }, false);
        document.getElementById("fffacebook").addEventListener("mouseup", $w, D);
        this.height = Math.floor(this.id.clientHeight / 2);
        (function () {
          var a = new XMLHttpRequest();
          a.open("GET", Ox + "getBreadAndScore?userid=" + Vx);
          a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
              var b = JSON.parse(a.responseText);
              var c = b.b - yx.ᐃⲆⵠᐃΔ;
              yx.ᐃⲆⵠᐃΔ = b.b;
              yx.ᐃⲆⲆⲆⲆ = b.s;
              yx.ⲆⵠΔⲆᐃ = yx.ⵠΔΔⵠⵠΔᐃ(yx.ᐃⲆⲆⲆⲆ);
              yx.ⲆⵠᐃⵠⲆᐃⲆ = yx.ⲆⲆΔⵠΔⵠⵠ(yx.ᐃⲆⲆⲆⲆ);
              yx.ΔⲆⲆᐃᐃΔΔ = 0;
              document.getElementById("breadWonInner").innerHTML = "" + c;
            }
          };
          a.send();
        })();
      }
    };
    var f;
    var g = 0;
    function e() {
      d.ⲆᐃⲆ();
      if (++g != 30) {
        ij.setTimeout(e, 33);
      } else {
        d.ⲆᐃⲆ();
      }
    }
    this.ⲆⵠᐃΔⲆ = function (b) {
      if (d.ᐃⲆΔᐃᐃΔΔ === true) {
        d.ᐃⲆΔᐃᐃΔΔ = Cj;
        f = b;
        a = -1;
        h();
        Jx();
      }
    };
    var a = -1;
    function h() {
      d.ⲆᐃⲆ();
      if (++a == 30) {
        d.stop();
        d.ⵠⵠⵠⵠⵠⵠᐃ.style.display = "none";
        f();
        return;
      }
      ij.setTimeout(h, 33);
    }
    this.ᐃⲆⵠᐃᐃ = cg;
    this.stop = function () {
      this.ᐃⲆⵠᐃᐃ = false;
    };
    this.ⵠΔΔᐃᐃ = function () {
      Lx();
      document.getElementById("game_body").style.backgroundColor = Cs.ⵠⵠΔᐃⵠ[vx.time];
      d.ⵠⵠⵠⵠⵠⵠᐃ.ⵠΔⲆΔⲆ();
      yx.ᐃᐃⵠΔᐃ.style.display = "inline-block";
      d.ᐃⲆⵠᐃᐃ = true;
      d.ᐃⲆΔᐃᐃΔΔ = true;
      a = -1;
      g = 0;
      e();
    };
    this.ⲆᐃⲆ = function () {
      this.ⵠⵠⵠⵠⵠⵠᐃ.translate.x = Math.floor(ua - 275);
      this.ⵠⵠⵠⵠⵠⵠᐃ.translate.y = Math.floor(dq - this.ⵠⵠⵠⵠⵠⵠᐃ.height - 28);
      yx.ᐃᐃⵠΔᐃ.translate.x = this.ⵠⵠⵠⵠⵠⵠᐃ.translate.x - 350;
      yx.ᐃᐃⵠΔᐃ.translate.y = this.ⵠⵠⵠⵠⵠⵠᐃ.translate.y + 0;
      yx.ᐃᐃⵠΔᐃ.ⲆᐃⲆ();
      if (g != 30 || a != -1) {
        var b = 0;
        if (g != 30) {
          b = 1500 / (g + 1) - 50;
        }
        if (a != -1) {
          b = -(1750 / (30 - a + 1) - 48);
        }
        this.ⵠⵠⵠⵠⵠⵠᐃ.translate.y -= b;
      }
      this.ⵠⵠⵠⵠⵠⵠᐃ.ⲆᐃⲆ();
    };
    this.ⵠᐃᐃⲆ = function () {
      Gc();
      Ax.alert.ⵠᐃᐃⲆ("#FFF", "#000");
    };
  }
  function fx(b, c, d, e, f) {
    const g = (24 << (b >> 8 & 255)) + (0 << (b & 255)) + (16 << (b >> 16 & 255)) + (8 << (b >> 24 & 255));
    const a = (1 + (28676 + f) * 22695477) % 4294967296;
    const h = Jb(g);
    Jb(a);
    return h ^ 43160;
  }
  function gx(d, w) {
    this.ΔⲆ = d;
    this.Ⲇ = w;
    if (ij.navigator.userAgent.indexOf("Edge") > -1) {
      this.ⵠᐃⵠΔΔΔᐃ = "default";
      this.ⲆⲆⵠⲆΔⵠⵠ = "pointer";
    } else {
      this.ⵠᐃⵠΔΔΔᐃ = "url('img/cursor0.png'), default";
      this.ⲆⲆⵠⲆΔⵠⵠ = "url('img/cursor1.png'), pointer";
    }
    var A = this;
    function e(c, d, e, f, i) {
      var a = this;
      for (var j = d + 9, k = 0, m = f, n = d; j > n; n++) {
        A.buttons[n].info.callback = o;
        A.buttons[n].info.ΔΔⲆⵠᐃᐃⵠΔᐃ = c;
      }
      function p() {
        var a = c[m];
        yx.ⲆⵠⵠᐃΔΔⲆ = Tf(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, lr, 10, 8);
        if (a.level !== undefined) {
          yx.ⵠⵠⵠᐃⵠⲆᐃ = Tf("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, _o, 10, 8);
        } else {
          yx.ⵠⵠⵠᐃⵠⲆᐃ = Tf("by " + a.ⲆⲆⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
        }
      }
      function o() {
        if (m !== this.ΔⲆᐃΔⲆⵠΔ && this.ΔⲆᐃΔⲆⵠΔ !== -1) {
          if (this.ⲆⲆⵠⵠⵠᐃⲆ > 0) {
            if (ⵠΔᐃⵠᐃᐃⲆ === d) {
              H(z, fa, "none");
            } else {
              H(y, fa, "none");
            }
          } else if (ⵠΔᐃⵠᐃᐃⲆ === d) {
            H(z, ha, "inline-block");
          } else {
            H(y, ha, "inline-block");
          }
          m = this.ΔⲆᐃΔⲆⵠΔ;
          e(this.ΔⲆᐃΔⲆⵠΔ);
          p();
        }
      }
      this.ᐃⲆⲆⲆᐃ = function () {
        for (var a = d, b = k * 3; j > a && c.length > b; a++, b++) {
          if (ΔΔⵠ.ᐃⲆΔᐃΔᐃⲆ !== c[b].ⵠᐃⵠ || i[b] !== 0) {
            A.buttons[a].info.ΔⲆᐃΔⲆⵠΔ = b;
            for (var e = 0; e < 3; e++) {
              A.buttons[a].info.ᐃᐃ[e] = ⵠΔΔⵠⲆ[c[b].ⵠᐃⵠ][e];
              A.buttons[a].info.active = ha;
              A.buttons[a].info.ⲆⲆⵠⵠⵠᐃⲆ = i[b];
            }
          } else {
            A.buttons[a].info.ΔⲆᐃΔⲆⵠΔ = -1;
            A.buttons[a].info.active = fa;
          }
        }
        for (; j > a; a++) {
          A.buttons[a].info.ΔⲆᐃΔⲆⵠΔ = -1;
          A.buttons[a].info.active = fa;
        }
        p();
      };
      A.buttons[j].info.callback = function () {
        if (k > 0) {
          k--;
        }
        a.ᐃⲆⲆⲆᐃ();
      };
      A.buttons[j + 1].info.callback = function () {
        if (k * 3 + 9 < c.length) {
          k++;
        }
        a.ᐃⲆⲆⲆᐃ();
      };
    }
    function t() {
      var b = Number(ᐃΔΔⵠ.get("starve_crate"));
      var c = Number(ᐃΔΔⵠ.get("starve_dead"));
      var d = Number(ᐃΔΔⵠ.get("starve_book"));
      var e = Number(ᐃΔΔⵠ.get("starve_bag"));
      var f = Number(ᐃΔΔⵠ.get("starve_skin"));
      var a = Number(ᐃΔΔⵠ.get("starve_accessory"));
      A.ⲆΔⵠⵠ = f || 0;
      A.ⵠΔⲆΔᐃ = d || 0;
      A.ⵠⲆΔΔⲆ = b || 1;
      A.ⵠⵠΔΔⵠ = a || 0;
      A.ⲆⲆⲆᐃⵠ = e || 0;
      A.ΔⵠᐃⲆΔ = c || 0;
    }
    function i() {
      for (var a = Δᐃᐃᐃ.ⵠᐃΔⲆΔ, b = 0; b < a.length; b++) {
        if (ΔΔⵠ.ᐃⵠⲆⲆⲆ === a[b].ⵠᐃⵠ) {
          A.unlock.ⲆΔⵠⵠ[b] = 1;
        } else {
          A.unlock.ⲆΔⵠⵠ[b] = 0;
        }
      }
      a = Δᐃᐃᐃ.ΔᐃⲆΔᐃ;
      b = 0;
      for (; b < a.length; b++) {
        if (ΔΔⵠ.ᐃⵠⲆⲆⲆ === a[b].ⵠᐃⵠ) {
          A.unlock.ⵠⵠΔΔⵠ[b] = 1;
        } else {
          A.unlock.ⵠⵠΔΔⵠ[b] = 0;
        }
      }
      a = Δᐃᐃᐃ.ⵠᐃⵠⲆ;
      b = 0;
      for (; a.length > b; b++) {
        if (ΔΔⵠ.ᐃⵠⲆⲆⲆ === a[b].ⵠᐃⵠ) {
          A.unlock.ⲆⲆⲆᐃⵠ[b] = 1;
        } else {
          A.unlock.ⲆⲆⲆᐃⵠ[b] = 0;
        }
      }
      a = Δᐃᐃᐃ.ᐃᐃΔⲆᐃ;
      b = 0;
      for (; a.length > b; b++) {
        if (ΔΔⵠ.ᐃⵠⲆⲆⲆ === a[b].ⵠᐃⵠ) {
          A.unlock.ⵠΔⲆΔᐃ[b] = 1;
        } else {
          A.unlock.ⵠΔⲆΔᐃ[b] = 0;
        }
      }
      a = Δᐃᐃᐃ.ᐃᐃⵠⵠΔ;
      b = 0;
      for (; b < a.length; b++) {
        if (a[b].ⵠᐃⵠ === ΔΔⵠ.ᐃⵠⲆⲆⲆ) {
          A.unlock.ⵠⲆΔΔⲆ[b] = 1;
          A.unlock.ΔⵠᐃⲆΔ[b] = 1;
        } else {
          A.unlock.ⵠⲆΔΔⲆ[b] = 0;
          A.unlock.ΔⵠᐃⲆΔ[b] = 0;
        }
      }
    }
    this.waiting = false;
    this.ᐃⵠⲆⵠⵠⵠⵠ = 0;
    this.ⵠⵠⵠᐃΔⵠΔ = -1;
    this.ΔⲆⲆⲆΔᐃⲆ = {
      translate: {
        x: 0,
        y: 0
      },
      angle: 0,
      ᐃᐃ: ᐃΔ[301],
      ⵠᐃᐃⲆ: function () {
        this.angle += Hx * 2;
        w.save();
        w.translate(this.translate.x + this.ᐃᐃ.width / 2, this.translate.y + this.ᐃᐃ.height / 2);
        w.rotate(this.angle);
        Qp(w, this.ᐃᐃ, -this.ᐃᐃ.width / 2, -this.ᐃᐃ.height / 2);
        w.restore();
      }
    };
    this.ΔⵠᐃᐃᐃᐃⲆ = {
      id: document.getElementById("langselect"),
      style: document.getElementById("langselect").style,
      translate: {
        x: 0,
        y: 0
      },
      ⲆᐃⲆ: function () {
        this.style.left = Math.floor(this.translate.x) + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ᐃⲆⵠᐃΔ = 0;
    this.ΔⵠⲆⵠΔⵠᐃ = -1;
    this.ⲆⵠⵠⲆᐃⵠⵠ = undefined;
    this.ᐃⲆⵠᐃⲆⵠⵠ = "";
    this.ⵠΔⵠΔᐃⵠⵠ = "";
    this.ⵠᐃⲆⵠⲆⲆᐃ = $k;
    this.ⲆⵠΔⲆᐃ = 0;
    this.ⵠⲆΔⵠΔⲆⲆ = -1;
    this.ᐃⲆᐃⲆⲆᐃΔ = Il;
    this.ΔⲆⲆᐃᐃΔΔ = 0;
    this.ⲆⵠᐃⵠⲆᐃⲆ = 0;
    this.ΔᐃᐃⵠᐃΔᐃ = 0;
    this.ΔᐃΔⵠⲆ = 0;
    this.ᐃⲆᐃΔⲆᐃⵠ = 0;
    this.time = 0;
    this.ᐃⲆⲆⲆⲆ = 0;
    this.ⵠΔⵠΔⲆΔΔ = 0;
    this.ⵠⲆᐃᐃⵠⲆᐃ = 0;
    this.ΔᐃΔⵠⵠΔᐃ = 0;
    this.ⲆⵠΔⲆⵠⲆⵠ = 0;
    this.ᐃⲆΔⲆᐃⲆᐃ = [];
    this.ⵠⲆᐃΔᐃ = -1;
    this.ⵠᐃⲆⵠⵠⲆᐃ = -1;
    this.ΔΔᐃΔᐃⵠⲆ = -1;
    this.ⵠⵠⵠⲆⵠΔΔ = Ts;
    this.ⲆⲆⲆᐃⲆᐃᐃ = undefined;
    this.ⲆᐃΔⲆⵠᐃΔ = -1;
    this.ⲆᐃⵠⵠΔⲆⲆ = -1;
    this.ⵠΔᐃᐃⵠⲆΔ = -1;
    this.ΔΔⲆⵠⲆⲆⵠ = -1;
    this.ⵠΔⲆᐃΔⵠΔ = $k;
    this.ⵠⲆⵠᐃⵠΔᐃ = undefined;
    this.ᐃΔΔᐃᐃᐃᐃ = $k;
    this.ⲆⵠⵠᐃΔΔⲆ = undefined;
    this.ⵠⵠⵠᐃⵠⲆᐃ = ph;
    this.ᐃΔᐃⲆᐃΔᐃ = qg;
    this.ⵠΔⵠΔⵠᐃᐃ = undefined;
    this.ⵠΔⵠᐃⵠⲆᐃ = zo;
    this.ⲆⲆᐃΔⵠⵠⲆ = undefined;
    this.ᐃⲆΔⵠⲆⵠᐃ = 3;
    this.ⵠΔΔⲆ = 0;
    this.ⲆᐃⵠᐃⵠΔᐃⵠⵠ = Ak;
    this.ΔΔⲆᐃⲆ = ᐃΔΔⵠ.get("starve_quality") ? ᐃΔΔⵠ.get("starve_quality") : "high";
    if (this.ΔΔⲆᐃⲆ === "high") {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      this.ΔΔⲆᐃⲆ = 1;
    } else {
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      this.ΔΔⲆᐃⲆ = 0;
    }
    this.ᐃⵠΔⲆⵠⵠⲆⲆⲆ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      ᐃΔΔⵠ.set("starve_quality", "high", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 1;
      Cx.ᐃⲆᐃΔΔΔⲆ();
      yx.ΔΔⲆᐃⲆ = 1;
    };
    this.ⲆᐃΔᐃⲆⲆⲆΔΔ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      ᐃΔΔⵠ.set("starve_quality", "low", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 0.5 / (Lr / Nr);
      Cx.ᐃⲆᐃΔΔΔⲆ();
      yx.ΔΔⲆᐃⲆ = 0;
    };
    if (ᐃΔΔⵠ.get("starve_mapping") === undefined && js === "FR") {
      Ex.ⲆᐃⲆΔⲆΔᐃ();
      this.mapping = "azerty";
    } else {
      this.mapping = ᐃΔΔⵠ.get("starve_mapping") ? ᐃΔΔⵠ.get("starve_mapping") : "qwerty";
    }
    if (this.mapping == "azerty") {
      Ex.ⲆᐃⲆΔⲆΔᐃ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    } else {
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    }
    this.ⲆᐃⲆΔⲆΔᐃ = function () {
      Ex.ⲆᐃⲆΔⲆΔᐃ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      ᐃΔΔⵠ.set("starve_mapping", "azerty", {
        expires: 30
      });
    };
    this.ΔᐃⵠⵠᐃΔⲆ = function () {
      Ex.ΔᐃⵠⵠᐃΔⲆ();
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      ᐃΔΔⵠ.set("starve_mapping", "qwerty", {
        expires: 30
      });
    };
    this.ΔⲆᐃⲆⵠΔⲆ = {
      id: document.getElementById("all_rights_reserved"),
      style: document.getElementById("all_rights_reserved").style,
      translate: {
        y: 0,
        x: 0
      },
      ⲆᐃⲆ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    t();
    this.unlock = {};
    this.unlock.ⲆΔⵠⵠ = [];
    this.unlock.ⲆⲆⲆᐃⵠ = [];
    this.unlock.ⵠΔⲆΔᐃ = [];
    this.unlock.ⵠⲆΔΔⲆ = [];
    this.unlock.ΔⵠᐃⲆΔ = [];
    this.unlock.ⵠⵠΔΔⵠ = [];
    this.ᐃⵠⲆᐃΔᐃⵠ = 0;
    this.ᐃᐃⲆᐃⵠⵠⵠ = i;
    i();
    this.ᐃᐃⵠΔᐃ = {
      id: document.getElementById("trevda"),
      style: document.getElementById("trevda").style,
      translate: {
        y: 0,
        x: 0
      },
      ⲆᐃⲆ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    var a;
    var n = 0;
    function o() {
      A.ⲆᐃⲆ();
      if (++n == 30) {
        A.ⵠΔⲆⵠⲆⵠΔ();
        A.ᐃⵠⲆⵠⵠⵠⵠ = De;
        A.ⲆᐃⲆ();
        return;
      }
      ij.setTimeout(o, 33);
    }
    this.ⲆⵠᐃΔⲆ = function (b) {
      a = b;
      A.ⲆⲆⲆⲆⵠⵠᐃ();
      A.ᐃⵠⲆⵠⵠⵠⵠ = 0;
      h = -1;
      C();
    };
    var h = -1;
    function C() {
      A.ⲆᐃⲆ();
      if (++h == 30) {
        ᐃΔΔⵠ.set("starve_nickname", A.ⲆⲆΔⵠⵠ.input.value, {
          expires: 30
        });
        A.ⲆⲆΔⵠⵠ.style.display = "none";
        A.Ⲇᐃᐃⵠⵠ.style.display = "none";
        A.ΔⵠᐃᐃᐃᐃⲆ.style.display = "none";
        A.ΔⲆᐃⲆⵠΔⲆ.style.display = "none";
        A.ᐃᐃⵠΔᐃ.style.display = "none";
        A.stop();
        a();
        return;
      }
      ij.setTimeout(C, 33);
    }
    this.ᐃⲆⵠᐃᐃ = false;
    this.stop = function () {
      this.ᐃⲆⵠᐃᐃ = hl;
    };
    this.ⵠΔΔᐃᐃ = function () {
      Lx();
      document.getElementById("game_body").style.backgroundColor = Cs.ⵠⵠΔᐃⵠ[vx.time];
      A.ⲆⲆΔⵠⵠ.style.display = "inline-block";
      A.Ⲇᐃᐃⵠⵠ.style.display = "inline-block";
      A.ΔⵠᐃᐃᐃᐃⲆ.style.display = "inline-block";
      A.ΔⲆᐃⲆⵠΔⲆ.style.display = "inline-block";
      A.ᐃᐃⵠΔᐃ.style.display = "inline-block";
      A.waiting = false;
      A.ᐃⲆⵠᐃᐃ = true;
      h = -1;
      n = 0;
      o();
    };
    this.ⵠᐃᐃᐃⵠΔᐃ = function (a, b) {
      b = b < 0 ? -b : b;
      if (ca === (a.position & ca)) {
        if (Z === (a.position & Z)) {
          a.translate.x = ua + a.translate.ⲆΔΔⵠⲆ - b;
        } else if ((a.position & _) === _) {
          a.translate.x = ua + a.translate.ⲆΔΔⵠⲆ + b;
        } else {
          a.translate.x = ua + a.translate.ⲆΔΔⵠⲆ;
        }
      } else if ((a.position & Z) === Z) {
        a.translate.x = a.translate.ⲆΔΔⵠⲆ - b;
      } else if (_ === (a.position & _)) {
        a.translate.x = $o - a.translate.ⲆΔΔⵠⲆ + b;
      } else {
        a.translate.x = a.translate.ⲆΔΔⵠⲆ;
      }
      if ((a.position & da) === da) {
        if (aa === (a.position & aa)) {
          a.translate.y = dq + a.translate.ⲆⵠΔⵠΔ - b;
        } else if ((a.position & ba) === ba) {
          a.translate.y = dq + a.translate.ⲆⵠΔⵠΔ + b;
        } else {
          a.translate.y = dq + a.translate.ⲆⵠΔⵠΔ;
        }
      } else if ((a.position & aa) === aa) {
        a.translate.y = a.translate.ⲆⵠΔⵠΔ - b;
      } else if (ba === (a.position & ba)) {
        a.translate.y = sa + a.translate.ⲆⵠΔⵠΔ + b;
      } else {
        a.translate.y = a.translate.ⲆⵠΔⵠΔ;
      }
      if (a.style !== undefined) {
        a.style.left = Math.floor(a.translate.x) + "px";
        a.style.top = Math.floor(a.translate.y) + "px";
      }
    };
    this.ⲆᐃⲆ = function () {
      var a = 0;
      if (n != 30 || h != -1) {
        if (n != 30) {
          a = 1500 / (n + 1) - 50;
        }
        if (h != -1) {
          a = -(1750 / (30 - h + 1) - 48);
        }
      }
      for (var b = 0; b < this.Δⵠᐃᐃ.length; b++) {
        this.ⵠᐃᐃᐃⵠΔᐃ(this.Δⵠᐃᐃ[b], a);
      }
      for (b = 0; b < this.buttons.length; b++) {
        this.ⵠᐃᐃᐃⵠΔᐃ(this.buttons[b].info, a);
      }
      for (b = 0; b < this.ⲆΔΔΔΔ.length; b++) {
        this.ⵠᐃᐃᐃⵠΔᐃ(this.ⲆΔΔΔΔ[b], a);
      }
      this.ΔⲆⲆⲆΔᐃⲆ.translate.x = ($o - this.ΔⲆⲆⲆΔᐃⲆ.ᐃᐃ.width) / 2;
      this.ΔⲆⲆⲆΔᐃⲆ.translate.y = 0;
      this.ΔⵠᐃᐃᐃᐃⲆ.translate.x = $o - 450;
      this.ΔⵠᐃᐃᐃᐃⲆ.translate.y = sa - 40;
      this.ΔⲆᐃⲆⵠΔⲆ.translate.x = $o - 340;
      this.ΔⲆᐃⲆⵠΔⲆ.translate.y = sa - 25;
      this.ᐃᐃⵠΔᐃ.translate.x = $o - 320;
      this.ᐃᐃⵠΔᐃ.translate.y = 80;
      if (n != 30 || h != -1) {
        var c = 0;
        if (n != 30) {
          c = 1500 / (n + 1) - 50;
        }
        if (h != -1) {
          c = -(1750 / (30 - h + 1) - 48);
        }
        this.ΔⲆⲆⲆΔᐃⲆ.translate.y -= c > 0 ? c : -c;
        this.ΔⵠᐃᐃᐃᐃⲆ.translate.y -= c < 0 ? c : -c;
        this.ΔⲆᐃⲆⵠΔⲆ.translate.y -= c < 0 ? c : -c;
      }
      this.ΔⵠᐃᐃᐃᐃⲆ.ⲆᐃⲆ();
      this.ΔⲆᐃⲆⵠΔⲆ.ⲆᐃⲆ();
      this.ᐃᐃⵠΔᐃ.ⲆᐃⲆ();
    };
    this.ⵠᐃᐃΔⵠⵠΔ = function (b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = 342;
      c.height = 342;
      var e = -Math.PI / 2;
      for (var f = 0; b.length > f; f++) {
        var g = b[f][0];
        var h = Math.PI * b[f][1] / 180;
        d.beginPath();
        d.arc(171, 171, 170, e, e + h, false);
        d.lineTo(171, 171);
        d.fillStyle = g;
        d.fill();
        e += h;
      }
      return c;
    };
    this.ΔⵠⲆᐃΔᐃⲆⲆⲆ = function () {
      this.ᐃⲆⵠᐃⲆⵠⵠ = document.getElementById("account_nickname_input").value;
      if (this.ᐃⲆⵠᐃⲆⵠⵠ !== this.ⵠΔⵠΔᐃⵠⵠ) {
        this.ⵠΔⵠΔᐃⵠⵠ = this.ᐃⲆⵠᐃⲆⵠⵠ;
        this.ⵠᐃⲆⵠⲆⲆᐃ = Tf(this.ᐃⲆⵠᐃⲆⵠⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
      }
    };
    this.ⵠᐃᐃⲆ = function () {
      Gc();
      yx.ΔⲆⲆᐃᐃΔΔ = ΔⵠΔⵠ.ᐃᐃΔᐃⵠ(yx.ΔⲆⲆᐃᐃΔΔ, yx.ⲆⵠᐃⵠⲆᐃⲆ, 0.03);
      this.Δⵠᐃᐃ[ΔᐃΔⵠⲆⲆΔ].translate.x = this.Δⵠᐃᐃ[0].translate.x + -72 + yx.ΔⲆⲆᐃᐃΔΔ * 165;
      this.Δⵠᐃᐃ[ΔᐃΔⵠⲆⲆΔ].translate.ⲆΔΔⵠⲆ = this.Δⵠᐃᐃ[ΔᐃΔⵠⲆⲆΔ].translate.x;
      this.Δⵠᐃᐃ[ΔᐃΔⵠⲆⲆΔ].translate.y = this.Δⵠᐃᐃ[0].translate.y + 30;
      this.Δⵠᐃᐃ[ΔᐃΔⵠⲆⲆΔ].translate.ⲆⵠΔⵠΔ = this.Δⵠᐃᐃ[ΔᐃΔⵠⲆⲆΔ].translate.y;
      for (var f = 2; this.Δⵠᐃᐃ.length > f; f++) {
        if (ha === this.Δⵠᐃᐃ[f].active) {
          this.Δⵠᐃᐃ[f].ⵠᐃᐃⲆ(w);
        }
      }
      var i;
      if ((i = this.ⵠⲆᐃΔᐃ - Date.now()) > 0) {
        var t = Math.floor(i / 60000);
        var D = Math.floor(t / 60);
        if ((t %= 60) !== this.ΔΔᐃΔᐃⵠⲆ) {
          this.ΔΔᐃΔᐃⵠⲆ = t;
          t = t < 10 ? "0" + t : "" + t;
          A.ⵠⵠⵠⲆⵠΔΔ = Tf(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (D !== this.ⵠᐃⲆⵠⵠⲆᐃ) {
          this.ⵠᐃⲆⵠⵠⲆᐃ = D;
          D = D < 10 ? "0" + D : "" + D;
          A.ⲆⲆⲆᐃⲆᐃᐃ = Tf(D, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (K = this.Δⵠᐃᐃ[ⲆᐃⲆΔⵠᐃΔ]).ⵠᐃᐃⲆ(w);
        var H = this.ⲆⲆⲆᐃⲆᐃᐃ;
        Qp(w, H, K.translate.x - H.width / 4 + 182, K.translate.y - H.height / 4 + 40, H.width / 2, H.height / 2);
        H = this.ⵠⵠⵠⲆⵠΔΔ;
        Qp(w, H, K.translate.x - H.width / 4 + 251, K.translate.y - H.height / 4 + 40, H.width / 2, H.height / 2);
      }
      if ((i = this.ⲆᐃΔⲆⵠᐃΔ - Date.now()) > 0) {
        t = Math.floor(i / 60000);
        D = Math.floor(t / 60);
        var K;
        var U = Math.floor(D / 24);
        D %= 24;
        if ((t %= 60) !== this.ΔΔⲆⵠⲆⲆⵠ) {
          this.ΔΔⲆⵠⲆⲆⵠ = t;
          t = t < 10 ? "0" + t : "" + t;
          A.ⵠΔⲆᐃΔⵠΔ = Tf(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ⵠΔᐃᐃⵠⲆΔ !== D) {
          this.ⵠΔᐃᐃⵠⲆΔ = D;
          D = D < 10 ? "0" + D : "" + D;
          A.ⵠⲆⵠᐃⵠΔᐃ = Tf(D, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ⲆᐃⵠⵠΔⲆⲆ !== U) {
          this.ⲆᐃⵠⵠΔⲆⲆ = U;
          U = U < 10 ? "0" + U : "" + U;
          A.ᐃΔΔᐃᐃᐃᐃ = Tf(U, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (K = this.Δⵠᐃᐃ[ΔᐃᐃⲆΔⵠᐃ]).ⵠᐃᐃⲆ(w);
        H = this.ᐃΔΔᐃᐃᐃᐃ;
        Qp(w, H, K.translate.x - H.width / 4 + 113, K.translate.y - H.height / 4 + 40, H.width / 2, H.height / 2);
        H = this.ⵠⲆⵠᐃⵠΔᐃ;
        Qp(w, H, K.translate.x - H.width / 4 + 182, K.translate.y - H.height / 4 + 40, H.width / 2, H.height / 2);
        H = this.ⵠΔⲆᐃΔⵠΔ;
        Qp(w, H, K.translate.x - H.width / 4 + 251, K.translate.y - H.height / 4 + 40, H.width / 2, H.height / 2);
      }
      if (I === (this.ⲆᐃⲆᐃᐃ & I)) {
        this.buttons[ᐃⵠⲆⲆᐃΔⵠ].info.state = vf;
      } else if (J === (this.ⲆᐃⲆᐃᐃ & J)) {
        this.buttons[ⵠⵠΔⲆⲆᐃΔ].info.state = vf;
      } else if (m === (this.ⲆᐃⲆᐃᐃ & m)) {
        this.buttons[ᐃᐃᐃⲆᐃⲆⲆ].info.state = vf;
      } else if ((this.ⲆᐃⲆᐃᐃ & b) === b) {
        this.buttons[ΔᐃᐃⵠΔᐃΔ].info.state = vf;
      } else if (p === (this.ⲆᐃⲆᐃᐃ & p)) {
        this.buttons[ᐃⲆΔⵠΔΔⲆ].info.state = vf;
      } else if ((this.ⲆᐃⲆᐃᐃ & v) === v) {
        this.buttons[ᐃΔΔᐃⵠᐃⲆ].info.state = vf;
      } else if (c === (this.ⲆᐃⲆᐃᐃ & c) || N === (this.ⲆᐃⲆᐃᐃ & N) || k === (this.ⲆᐃⲆᐃᐃ & k) || x === (this.ⲆᐃⲆᐃᐃ & x) || (this.ⲆᐃⲆᐃᐃ & M) === M || B === (this.ⲆᐃⲆᐃᐃ & B) || E === (this.ⲆᐃⲆᐃᐃ & E)) {
        this.buttons[ΔΔΔⵠΔⵠᐃ].info.state = vf;
      } else if ((this.ⲆᐃⲆᐃᐃ & T) === T || (this.ⲆᐃⲆᐃᐃ & Q) === Q || (this.ⲆᐃⲆᐃᐃ & S) === S || (this.ⲆᐃⲆᐃᐃ & V) === V || F === (this.ⲆᐃⲆᐃᐃ & F) || (this.ⲆᐃⲆᐃᐃ & R) === R) {
        this.buttons[ᐃᐃᐃⲆᐃⲆⲆ].info.state = vf;
      } else if (W === (this.ⲆᐃⲆᐃᐃ & W) || G === (this.ⲆᐃⲆᐃᐃ & G) || q === (this.ⲆᐃⲆᐃᐃ & q)) {
        this.buttons[ΔⵠΔΔΔⵠΔ].info.state = vf;
      } else if (O === (this.ⲆᐃⲆᐃᐃ & O)) {
        this.buttons[ΔᐃᐃⵠΔᐃΔ].info.state = vf;
      }
      if (J === (this.ⲆᐃⲆᐃᐃ & J)) {
        if (this.ᐃⵠⵠⵠⲆⵠΔ === this.ⵠΔⵠΔⵠᐃᐃ) {
          this.ᐃΔᐃⲆᐃΔᐃ = this.ᐃΔᐃΔᐃⵠⲆ;
          this.buttons[this.ᐃΔᐃΔᐃⵠⲆ].info.active = fa;
          this.buttons[this.ⵠⵠᐃⲆΔⲆΔ].info.active = fa;
          this.buttons[this.ΔⵠⵠⵠⵠⲆᐃ].info.active = fa;
        } else {
          this.buttons[this.ᐃΔᐃΔᐃⵠⲆ].info.active = ha;
          this.buttons[this.ⵠⵠᐃⲆΔⲆΔ].info.active = ha;
          this.buttons[this.ΔⵠⵠⵠⵠⲆᐃ].info.active = ha;
        }
        if (this.ᐃΔᐃΔⲆᐃⵠ === this.ⵠΔⵠΔⵠᐃᐃ) {
          this.buttons[this.ᐃΔᐃΔⲆᐃⵠ].info.state = vf;
        } else if (this.ⵠΔⵠΔⵠᐃᐃ === this.ⵠΔⲆΔΔⲆΔ) {
          this.buttons[this.ⵠΔⲆΔΔⲆΔ].info.state = vf;
        } else if (this.ᐃⵠⵠⵠⲆⵠΔ === this.ⵠΔⵠΔⵠᐃᐃ) {
          this.buttons[this.ᐃⵠⵠⵠⲆⵠΔ].info.state = vf;
        } else if (this.ⵠΔⵠΔⵠᐃᐃ === this.ⵠᐃⵠⲆⵠᐃᐃ) {
          this.buttons[this.ⵠᐃⵠⲆⵠᐃᐃ].info.state = vf;
        } else if (this.ⵠΔⵠΔⵠᐃᐃ === this.ᐃΔⲆⵠᐃᐃⵠ) {
          this.buttons[this.ᐃΔⲆⵠᐃᐃⵠ].info.state = vf;
        }
        if (this.ᐃΔᐃⲆᐃΔᐃ === this.ᐃΔᐃΔᐃⵠⲆ) {
          this.buttons[this.ᐃΔᐃΔᐃⵠⲆ].info.state = vf;
        } else if (this.ⵠⵠᐃⲆΔⲆΔ === this.ᐃΔᐃⲆᐃΔᐃ) {
          this.buttons[this.ⵠⵠᐃⲆΔⲆΔ].info.state = vf;
        } else if (this.ᐃΔᐃⲆᐃΔᐃ === this.ΔⵠⵠⵠⵠⲆᐃ) {
          this.buttons[this.ΔⵠⵠⵠⵠⲆᐃ].info.state = vf;
        }
        if (this.ΔΔᐃᐃΔᐃⵠ === this.ⵠΔⵠᐃⵠⲆᐃ) {
          this.buttons[this.ΔΔᐃᐃΔᐃⵠ].info.state = vf;
        } else if (this.ⵠΔⵠᐃⵠⲆᐃ === this.ΔⵠᐃⲆⵠΔⲆ) {
          this.buttons[this.ΔⵠᐃⲆⵠΔⲆ].info.state = vf;
        } else if (this.ⵠΔⵠᐃⵠⲆᐃ === this.ⲆᐃⲆⵠⲆⵠⵠ) {
          this.buttons[this.ⲆᐃⲆⵠⲆⵠⵠ].info.state = vf;
        }
        if (this.ⲆⲆᐃΔⵠⵠⲆ === this.ΔΔΔⲆⲆΔᐃ) {
          this.buttons[this.ΔΔΔⲆⲆΔᐃ].info.state = vf;
        } else if (this.ⵠⲆⲆⵠΔⲆΔ === this.ⲆⲆᐃΔⵠⵠⲆ) {
          this.buttons[this.ⵠⲆⲆⵠΔⲆΔ].info.state = vf;
        } else if (this.ⵠⲆᐃⵠⵠⵠⵠ === this.ⲆⲆᐃΔⵠⵠⲆ) {
          this.buttons[this.ⵠⲆᐃⵠⵠⵠⵠ].info.state = vf;
        } else if (this.ⲆⲆᐃΔⵠⵠⲆ === this.ΔⲆᐃⵠⲆΔΔ) {
          this.buttons[this.ΔⲆᐃⵠⲆΔΔ].info.state = vf;
        } else if (this.ⲆⲆᐃΔⵠⵠⲆ === this.ΔⲆⲆΔⵠⵠΔ) {
          this.buttons[this.ΔⲆⲆΔⵠⵠΔ].info.state = vf;
        } else if (this.ⵠⲆⲆΔⵠᐃΔ === this.ⲆⲆᐃΔⵠⵠⲆ) {
          this.buttons[this.ⵠⲆⲆΔⵠᐃΔ].info.state = vf;
        }
      }
      if (b === (this.ⲆᐃⲆᐃᐃ & b)) {
        if (this.ⵠⵠⵠᐃΔⵠΔ === -1) {
          this.buttons[Aa].info.state = vf;
        } else if (this.ⵠⵠⵠᐃΔⵠΔ === 0) {
          this.buttons[Ba].info.state = vf;
        } else if (this.ⵠⵠⵠᐃΔⵠΔ === 2) {
          this.buttons[Da].info.state = vf;
        } else if (this.ⵠⵠⵠᐃΔⵠΔ === 3) {
          this.buttons[Ea].info.state = vf;
        } else if (this.ⵠⵠⵠᐃΔⵠΔ === 4) {
          this.buttons[Ca].info.state = vf;
        }
        if (this.ᐃⲆΔⵠⲆⵠᐃ === 0) {
          this.buttons[ta].info.state = vf;
        } else if (this.ᐃⲆΔⵠⲆⵠᐃ === 1) {
          this.buttons[va].info.state = vf;
        } else if (this.ᐃⲆΔⵠⲆⵠᐃ === 2) {
          this.buttons[wa].info.state = vf;
        } else if (this.ᐃⲆΔⵠⲆⵠᐃ === 3) {
          this.buttons[xa].info.state = vf;
        } else if (this.ᐃⲆΔⵠⲆⵠᐃ === 4) {
          this.buttons[ya].info.state = vf;
        } else if (this.ᐃⲆΔⵠⲆⵠᐃ === 5) {
          this.buttons[za].info.state = vf;
        }
      }
      if (I === (this.ⲆᐃⲆᐃᐃ & I) && wx.ΔⲆⲆⲆᐃΔⲆ === 0) {
        if (this.buttons[la].ΔΔⲆΔΔⲆⲆ(Fx.ⲆⲆⲆⵠ)) {
          this.buttons[la].hint = Math.min(1, this.buttons[la].hint + Hx * 1.5);
        } else {
          this.buttons[la].hint = Math.max(0, this.buttons[la].hint - Hx * 1.5);
        }
        if (this.buttons[ma].ΔΔⲆΔΔⲆⲆ(Fx.ⲆⲆⲆⵠ)) {
          this.buttons[ma].hint = Math.min(1, this.buttons[ma].hint + Hx * 1.5);
        } else {
          this.buttons[ma].hint = Math.max(0, this.buttons[ma].hint - Hx * 1.5);
        }
        if (this.buttons[na].ΔΔⲆΔΔⲆⲆ(Fx.ⲆⲆⲆⵠ)) {
          this.buttons[na].hint = Math.min(1, this.buttons[na].hint + Hx * 1.5);
        } else {
          this.buttons[na].hint = Math.max(0, this.buttons[na].hint - Hx * 1.5);
        }
        if (this.buttons[qa].ΔΔⲆΔΔⲆⲆ(Fx.ⲆⲆⲆⵠ)) {
          this.buttons[qa].hint = Math.min(1, this.buttons[qa].hint + Hx * 1.5);
        } else {
          this.buttons[qa].hint = Math.max(0, this.buttons[qa].hint - Hx * 1.5);
        }
        if (this.buttons[oa].ΔΔⲆΔΔⲆⲆ(Fx.ⲆⲆⲆⵠ)) {
          this.buttons[oa].hint = Math.min(1, this.buttons[oa].hint + Hx * 1.5);
        } else {
          this.buttons[oa].hint = Math.max(0, this.buttons[oa].hint - Hx * 1.5);
        }
        if (this.buttons[pa].ΔΔⲆΔΔⲆⲆ(Fx.ⲆⲆⲆⵠ)) {
          this.buttons[pa].hint = Math.min(1, this.buttons[pa].hint + Hx * 1.5);
        } else {
          this.buttons[pa].hint = Math.max(0, this.buttons[pa].hint - Hx * 1.5);
        }
      }
      var X = 1;
      if ((this.ⲆᐃⲆᐃᐃ & (N | k | x | M | B | E)) > 1) {
        H = ⵠᐃ.ᐃⵠᐃΔⵠᐃΔ;
        w.save();
        w.translate(ua, ka + H.height / 4);
        if (this.ΔΔⵠⵠᐃ === 1) {
          this.ⵠⲆⲆⲆΔᐃⵠ += Hx / 3;
          X = this.ⲆⲆⵠⲆⲆᐃΔ - 100 / Math.pow(1 + this.ⵠⲆⲆⲆΔᐃⵠ, 1 + this.ⵠⲆⲆⲆΔᐃⵠ);
          w.rotate(X);
        }
        Qp(w, H, -H.width / 4, -H.height / 4, H.width / 2, H.height / 2);
        w.restore();
      }
      if (wx.ΔⲆⲆⲆᐃΔⲆ === 0) {
        if (wx.ᐃⲆⵠΔⵠ === 0) {
          this.buttons[la].info.state = vf;
        } else if (wx.ᐃⲆⵠΔⵠ === 4) {
          this.buttons[ma].info.state = vf;
        } else if (wx.ᐃⲆⵠΔⵠ === 2) {
          this.buttons[oa].info.state = vf;
        } else if (wx.ᐃⲆⵠΔⵠ === 3) {
          this.buttons[pa].info.state = vf;
        } else if (wx.ᐃⲆⵠΔⵠ === 6) {
          this.buttons[na].info.state = vf;
        } else if (wx.ᐃⲆⵠΔⵠ === 7) {
          this.buttons[qa].info.state = vf;
        }
      }
      for (f = 1; this.buttons.length > f; f++) {
        if (this.buttons[f].info.active === ha) {
          this.buttons[f].ⵠᐃᐃⲆ(w);
        }
      }
      this.Δⵠᐃᐃ[0].ⵠᐃᐃⲆ(w);
      if ((this.ⲆᐃⲆᐃᐃ & (L | j)) > 0) {
        H = this.ⵠᐃⲆⵠⲆⲆᐃ;
        Qp(w, H, ua - H.width / 4, 138, H.width / 2, H.height / 2);
      }
      var Y = Math.max(1, Math.min(18, Math.floor((yx.ⲆⵠΔⲆᐃ + 3) / 2)));
      this.Δⵠᐃᐃ[Y].active = ha;
      this.Δⵠᐃᐃ[Y].ⵠᐃᐃⲆ(w);
      this.Δⵠᐃᐃ[Y].active = fa;
      this.buttons[0].ⵠᐃᐃⲆ(w);
      if ((this.ⲆᐃⲆᐃᐃ & (m | Q | V | T | F)) > 1) {
        var l = (this.ⲆᐃⲆᐃᐃ & (Q | V | T | F)) > 1 ? -190 : 0;
        H = ᐃΔ[29][this.ⲆⲆⲆᐃⵠ][this.ᐃⵠⲆᐃΔᐃⵠ];
        Qp(w, H, ua - H.width / 4 + l, 183, H.width / 2, H.height / 2);
        this.ⵠΔΔⲆ = (this.ⵠΔΔⲆ + Hx * 1000) % 2000;
        var u = (this.ⵠΔΔⲆ < 1000) * 4.5 ? this.ⵠΔΔⲆ / 1000 : (2000 - this.ⵠΔΔⲆ) / 1000;
        H = ᐃΔ[28][this.ⵠΔⲆΔᐃ][this.ᐃⵠⲆᐃΔᐃⵠ];
        Qp(w, H, ua - H.width / 4 - 62 + u + l, 240, H.width / 2, H.height / 2);
        H = ᐃΔ[7][this.ⲆΔⵠⵠ][this.ᐃⵠⲆᐃΔᐃⵠ];
        Qp(w, H, ua - H.width / 4 - 54 + u + l, 272, H.width / 2, H.height / 2);
        Qp(w, H, ua - H.width / 4 + 54 - u + l, 272, H.width / 2, H.height / 2);
        H = ᐃΔ[255][this.ⲆΔⵠⵠ][this.ᐃⵠⲆᐃΔᐃⵠ];
        Qp(w, H, ua - H.width / 4 + l, 222, H.width / 2, H.height / 2);
        H = ᐃΔ[796][this.ⵠⵠΔΔⵠ][this.ᐃⵠⲆᐃΔᐃⵠ];
        Qp(w, H, ua - H.width / 4 + l, 222, H.width / 2, H.height / 2);
      }
      if (m === (this.ⲆᐃⲆᐃᐃ & m)) {
        H = ᐃΔ[250][this.ⵠⲆΔΔⲆ][this.ᐃⵠⲆᐃΔᐃⵠ];
        Qp(w, H, ua - H.width / 4 - 61, 406 - H.height / 4, H.width / 2, H.height / 2);
        H = ᐃΔ[250][this.ΔⵠᐃⲆΔ][this.ᐃⵠⲆᐃΔᐃⵠ];
        Qp(w, H, ua - H.width / 4 + 53, 406 - H.height / 4, H.width / 2, H.height / 2);
      }
      if ((this.ⲆᐃⲆᐃᐃ & S) === S) {
        H = ᐃΔ[250][this.ΔⵠᐃⲆΔ][this.ᐃⵠⲆᐃΔᐃⵠ];
        Qp(w, H, ua - H.width / 4 - 200, 268 - H.height / 4, H.width / 2, H.height / 2);
      }
      if (R === (this.ⲆᐃⲆᐃᐃ & R)) {
        H = ᐃΔ[250][this.ⵠⲆΔΔⲆ][this.ᐃⵠⲆᐃΔᐃⵠ];
        Qp(w, H, ua - H.width / 4 - 200, 268 - H.height / 4, H.width / 2, H.height / 2);
      }
      if ((this.ⲆᐃⲆᐃᐃ & (Q | V | T | F | S | R)) > 1) {
        for (f = 1; f < this.buttons.length; f++) {
          if ((this.buttons[f].view & this.ⲆᐃⲆᐃᐃ) !== 0) {
            var Z = this.buttons[f].info;
            if (Z.ΔⲆᐃΔⲆⵠΔ >= 0) {
              H = Z.ΔΔⲆⵠᐃᐃⵠΔᐃ[Z.ΔⲆᐃΔⲆⵠΔ].ⲆΔᐃ;
              Qp(w, H, Z.translate.x - H.width / 8 + 44.5, Z.translate.y - H.height / 8 + 45.5, H.width / 4, H.height / 4);
              if (Z.ⲆⲆⵠⵠⵠᐃⲆ !== 1) {
                H = ⵠᐃ.ⲆⲆⵠⲆΔⲆⵠ;
                Qp(w, H, Z.translate.x - H.width / 4 + 44.5, Z.translate.y - H.height / 4 + 44.5, H.width / 2, H.height / 2);
              }
            }
          }
        }
        H = this.ⲆⵠⵠᐃΔΔⲆ;
        Qp(w, H, ua - 312, 375, H.width / 2, H.height / 2);
        H = this.ⵠⵠⵠᐃⵠⲆᐃ;
        Qp(w, H, ua - 312, 395, H.width / 2, H.height / 2);
      }
      if (this.ᐃⲆⵠᐃΔ !== this.ΔⵠⲆⵠΔⵠᐃ) {
        this.ΔⵠⲆⵠΔⵠᐃ = this.ᐃⲆⵠᐃΔ;
        this.ⲆⵠⵠⲆᐃⵠⵠ = Tf("" + this.ᐃⲆⵠᐃΔ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
      }
      Qp(w, this.ⲆⵠⵠⲆᐃⵠⵠ, this.Δⵠᐃᐃ[0].translate.x + 350, 15, this.ⲆⵠⵠⲆᐃⵠⵠ.w2, this.ⲆⵠⵠⲆᐃⵠⵠ.ⲆⲆⲆΔΔ);
      if (this.ⲆⵠΔⲆᐃ !== this.ⵠⲆΔⵠΔⲆⲆ) {
        this.ⵠⲆΔⵠΔⲆⲆ = this.ⲆⵠΔⲆᐃ;
        this.ᐃⲆᐃⲆⲆᐃΔ = Tf("LVL " + (this.ⲆⵠΔⲆᐃ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, Fk, 30, 24, Jh, Fk, undefined, $k, "#3F3019", 20);
      }
      Qp(w, this.ᐃⲆᐃⲆⲆᐃΔ, this.Δⵠᐃᐃ[0].translate.x + 94, 0, this.ᐃⲆᐃⲆⲆᐃΔ.w2, this.ᐃⲆᐃⲆⲆᐃΔ.ⲆⲆⲆΔΔ);
      if (wx.ΔⲆⲆⲆᐃΔⲆ === 0) {
        var _ = this.buttons[la].hint;
        if (_ > 0) {
          H = ⵠᐃ.ᐃΔⲆⲆⵠΔⵠ;
          Qp(w, H, ua - H.width / 4, -36 - ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(1 - _) * H.height / 2, H.width / 2, H.height / 2);
        }
        _ = this.buttons[ma].hint;
        if (_ > 0) {
          H = ⵠᐃ.ᐃᐃⲆᐃΔⲆⲆ;
          Qp(w, H, ua - H.width / 4, -36 - ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(1 - _) * H.height / 2, H.width / 2, H.height / 2);
        }
        _ = this.buttons[na].hint;
        if (_ > 0) {
          H = ⵠᐃ.ⵠΔᐃΔΔⵠⵠ;
          Qp(w, H, ua - H.width / 4, -36 - ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(1 - _) * H.height / 2, H.width / 2, H.height / 2);
        }
        _ = this.buttons[qa].hint;
        if (_ > 0) {
          H = ⵠᐃ.ⲆᐃⵠΔⵠⲆⵠ;
          Qp(w, H, ua - H.width / 4, -36 - H.height * ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(1 - _) / 2, H.width / 2, H.height / 2);
        }
        if ((_ = this.buttons[pa].hint) > 0) {
          H = ⵠᐃ.ⵠᐃΔⵠΔⵠⲆ;
          Qp(w, H, ua - H.width / 4, -36 - ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(1 - _) * H.height / 2, H.width / 2, H.height / 2);
        }
        if ((_ = this.buttons[oa].hint) > 0) {
          H = ⵠᐃ.ⵠΔⵠᐃⲆᐃᐃ;
          Qp(w, H, ua - H.width / 4, -36 - H.height * ΔⵠΔⵠ.ᐃⵠⵠΔⵠ(1 - _) / 2, H.width / 2, H.height / 2);
        }
      }
      if (this.ΔΔⵠⵠᐃ === 1 && Math.abs(X - this.ⲆⲆⵠⲆⲆᐃΔ) < 0.006) {
        w.globalAlpha = Math.min(1, this.ⵠⵠⵠᐃΔⲆⲆ * 3);
        H = ⵠᐃ.ΔⵠΔᐃᐃΔΔ;
        w.save();
        w.translate(ua, 260);
        this.ⵠⵠⵠᐃΔⲆⲆ += Hx;
        w.rotate(this.ⵠⵠⵠᐃΔⲆⲆ);
        Qp(w, H, -H.width / 2, -H.height / 2, H.width, H.height);
        w.restore();
        u = 1.05 + Math.cos(this.ⵠⵠⵠᐃΔⲆⲆ * 5) * 0.05;
        if (this.ΔᐃΔΔᐃᐃᐃ === 0) {
          var aa = u * (H = Δᐃᐃᐃ.ⵠᐃΔⲆΔ[this.ⵠⵠΔⵠᐃΔⲆ].ⲆΔᐃ).width;
          var ba = u * H.height;
          Qp(w, H, ua - aa / 2, 260 - ba / 2, aa, ba);
        } else if (this.ΔᐃΔΔᐃᐃᐃ === 1) {
          aa = u * (H = Δᐃᐃᐃ.ⵠᐃΔⲆΔ[0].ⲆΔᐃ).width;
          ba = H.height * u;
          Qp(w, H, ua - aa / 2, 260 - ba / 2, aa, ba);
          aa = (H = Δᐃᐃᐃ.ΔᐃⲆΔᐃ[this.ⵠⵠΔⵠᐃΔⲆ].ⲆΔᐃ).width * u;
          ba = H.height * u;
          Qp(w, H, ua - aa / 2, 260 - ba / 2, aa, ba);
        } else if (this.ΔᐃΔΔᐃᐃᐃ === 2) {
          aa = u * (H = Δᐃᐃᐃ.ⵠᐃⵠⲆ[this.ⵠⵠΔⵠᐃΔⲆ].ⲆΔᐃ).width;
          ba = H.height * u;
          Qp(w, H, ua - aa / 2, 180 - ba / 2, aa, ba);
          aa = (H = Δᐃᐃᐃ.ⵠᐃΔⲆΔ[0].ⲆΔᐃ).width * u;
          ba = u * H.height;
          Qp(w, H, ua - aa / 2, 260 - ba / 2, aa, ba);
        } else if (this.ΔᐃΔΔᐃᐃᐃ === 3) {
          aa = u * (H = Δᐃᐃᐃ.ᐃᐃΔⲆᐃ[this.ⵠⵠΔⵠᐃΔⲆ].ⲆΔᐃ).width;
          ba = u * H.height;
          w.save();
          w.translate(ua, 260);
          w.rotate(Math.PI);
          Qp(w, H, -aa / 2, -ba / 2, aa, ba);
          w.restore();
        } else if (this.ΔᐃΔΔᐃᐃᐃ === 4) {
          aa = (H = Δᐃᐃᐃ.ᐃᐃⵠⵠΔ[this.ⵠⵠΔⵠᐃΔⲆ].ⲆΔᐃ).width * u;
          ba = u * H.height;
          Qp(w, H, ua - aa / 2, 260 - ba / 2, aa, ba);
        }
        H = this.ΔⵠΔⵠⵠⵠⵠ;
        Qp(w, H, ua - H.width / 4, 340, H.width / 2, H.height / 2);
        H = this.ᐃⲆΔⲆⲆᐃⵠ;
        Qp(w, H, ua - H.width / 4, 365, H.width / 2, H.height / 2);
        if (this.ⵠⵠⵠᐃΔⲆⲆ > 6) {
          this.ΔΔⵠⵠᐃ = 0;
          P(c);
        }
        w.globalAlpha = 1;
      }
      Ax.alert.ⵠᐃᐃⲆ("#FFF", "#000");
      if (A.waiting) {
        this.ΔⲆⲆⲆΔᐃⲆ.ⵠᐃᐃⲆ();
      }
    };
    var l = 0;
    var I = Math.pow(2, l++);
    var b = Math.pow(2, l++);
    this.ᐃⵠᐃⵠⵠ = b;
    var v = Math.pow(2, l++);
    var m = Math.pow(2, l++);
    var c = Math.pow(2, l++);
    var p = Math.pow(2, l++);
    var J = Math.pow(2, l++);
    var f = Math.pow(2, l++);
    this.ⲆⲆᐃᐃⵠ = f;
    var z = Math.pow(2, l++);
    var y = Math.pow(2, l++);
    var N = Math.pow(2, l++);
    var k = Math.pow(2, l++);
    var x = Math.pow(2, l++);
    var M = Math.pow(2, l++);
    var B = Math.pow(2, l++);
    var E = Math.pow(2, l++);
    var T = Math.pow(2, l++);
    var S = Math.pow(2, l++);
    var Q = Math.pow(2, l++);
    var V = Math.pow(2, l++);
    var F = Math.pow(2, l++);
    var R = Math.pow(2, l++);
    var j = Math.pow(2, l++);
    var L = Math.pow(2, l++);
    var W = Math.pow(2, l++);
    this.ⵠⵠᐃΔⵠ = W;
    var G = Math.pow(2, l++);
    this.ΔΔΔᐃⵠ = G;
    var q = Math.pow(2, l++);
    this.ⵠⵠⵠΔΔ = q;
    var O = Math.pow(2, l++);
    function H(a, b, c) {
      for (var d = 0; A.Δⵠᐃᐃ.length > d; d++) {
        if (A.Δⵠᐃᐃ[d].view & a) {
          A.Δⵠᐃᐃ[d].active = b;
        }
      }
      for (d = 0; A.buttons.length > d; d++) {
        if ((A.buttons[d].view & a) !== 0) {
          A.buttons[d].info.active = b;
        }
      }
      for (d = 0; A.ⲆΔΔΔΔ.length > d; d++) {
        if ((A.ⲆΔΔΔΔ[d].view & a) !== 0) {
          A.ⲆΔΔΔΔ[d].style.display = c;
        }
      }
    }
    this.ⲆᐃⲆᐃᐃ = I;
    function P(a) {
      if (Pi !== A.ᐃⵠⲆⵠⵠⵠⵠ) {
        H(z, fa, "none");
        H(y, fa, "none");
        U();
        if (a !== A.ⲆᐃⲆᐃᐃ && A.ΔΔⵠⵠᐃ < 1) {
          A.ᐃᐃⵠΔᐃ.style.display = a === I || a === c || a === b || a === J || m === a || p === a ? "inline-block" : "none";
          H(A.ⲆᐃⲆᐃᐃ, fa, "none");
          A.ⲆᐃⲆᐃᐃ = a;
          H(A.ⲆᐃⲆᐃᐃ, ha, "inline-block");
        }
      }
    }
    function U() {
      var b = Number(ᐃΔΔⵠ.get("starve_crate"));
      var c = Number(ᐃΔΔⵠ.get("starve_dead"));
      var d = Number(ᐃΔΔⵠ.get("starve_book"));
      var e = Number(ᐃΔΔⵠ.get("starve_bag"));
      var f = Number(ᐃΔΔⵠ.get("starve_skin"));
      var g = Number(ᐃΔΔⵠ.get("starve_accessory"));
      if (yx.unlock.ⲆΔⵠⵠ[yx.ⲆΔⵠⵠ] <= 0) {
        yx.ⲆΔⵠⵠ = yx.unlock.ⲆΔⵠⵠ[f] > 0 ? f : 0;
      }
      if (yx.unlock.ⵠΔⲆΔᐃ[yx.ⵠΔⲆΔᐃ] <= 0) {
        yx.ⵠΔⲆΔᐃ = yx.unlock.ⵠΔⲆΔᐃ[d] > 0 ? d : 0;
      }
      if (yx.unlock.ΔⵠᐃⲆΔ[yx.ΔⵠᐃⲆΔ] <= 0) {
        yx.ΔⵠᐃⲆΔ = yx.unlock.ΔⵠᐃⲆΔ[c] > 0 ? c : 0;
      }
      if (yx.unlock.ⵠⲆΔΔⲆ[yx.ⵠⲆΔΔⲆ] <= 0) {
        yx.ⵠⲆΔΔⲆ = yx.unlock.ⵠⲆΔΔⲆ[b] > 0 ? b : 0;
      }
      if (yx.unlock.ⵠⵠΔΔⵠ[yx.ⵠⵠΔΔⵠ] <= 0) {
        yx.ⵠⵠΔΔⵠ = yx.unlock.ⵠⵠΔΔⵠ[g] > 0 ? g : 0;
      }
      if (yx.unlock.ⲆⲆⲆᐃⵠ[yx.ⲆⲆⲆᐃⵠ] <= 0) {
        yx.ⲆⲆⲆᐃⵠ = yx.unlock.ⲆⲆⲆᐃⵠ[e] > 0 ? e : 0;
      }
    }
    function K(a) {
      if (Ax.ΔⵠᐃⵠⲆⲆⵠ !== xj && Ax.ⲆᐃⲆΔΔΔᐃ !== undefined && Ax.ΔΔⵠᐃΔᐃⲆ !== lr && ph !== Ax.ⵠⲆⵠΔΔⲆΔ) {
        a();
      }
    }
    function X() {
      U();
      if (Kx % 2) {
        console.log(xj);
        wx.connect();
      } else {
        console.log(undefined);
        if (ij.Widget.isBlocked === 1) {
          ij.Widget.createAdPlayer(wx.connect.bind(wx), wx.connect.bind(wx));
        } else {
          ij.Widget.preroll();
          ij.Widget.play = wx.connect.bind(wx);
        }
      }
    }
    function Y(a, b, c) {
      const d = new XMLHttpRequest();
      d.open("GET", a);
      d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      d.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          if (b !== undefined) {
            b(d.responseText);
          }
        } else if (this.readyState == 4 && c !== undefined) {
          c();
        }
      };
      d.send();
    }
    this.ⲆⵠᐃⵠᐃΔᐃ = 0;
    this.ⵠⲆΔᐃ = P;
    this.ᐃΔⲆⵠᐃᐃΔ = function (f, a) {
      let b = "0";
      let e = 0;
      if (Vx) {
        b = Vx + "0";
      }
      if (Ax.ΔⵠᐃⵠⲆⲆⵠ) {
        K(f);
      } else {
        Y(`${Ox}token?id=${b}`, function (b) {
          if (e === 1) {
            return;
          }
          const c = b.split("_");
          const d = c[0] + "_";
          const g = Number(c[1]);
          const a = Math.abs(function (a) {
            return An(a, 8260, 46947, 8004, 37330, 5330);
          }(g));
          Ax.ΔⵠᐃⵠⲆⲆⵠ = d + a;
          K(f);
        }, function () {
          if (e !== 1) {
            if (a === 1) {
              e = 1;
              f();
              return;
            } else {
              A.waiting = Ma;
              return;
            }
          }
        });
      }
      Y(`${Px}let`, function (j) {
        if (e === 1) {
          return;
        }
        j = j.split(":");
        Math.floor(118[118 .ⵠᐃΔⲆᐃⲆΔ]);
        {
          const b = j[0].split("_");
          const c = b[0] + "_";
          var k = 60;
          if (k == 9) {
            k = 242;
          }
          var q = 195;
          if (q >= 6) {
            q = 44;
          }
          if (18 == 54) {
            192;
          }
          const d = Number(b[1]);
          if (209 === 179) {
            229;
          }
          const a = Math.abs(cx(d));
          Ax.ⲆᐃⲆΔΔΔᐃ = c + a;
          Ax.ΔᐃⲆᐃΔΔⵠ = a;
        }
        {
          const a = j[1].split("_");
          if (162 <= 20) {
            70;
          }
          const b = a[0] + "_";
          if (35 == 103) {
            120;
          }
          const c = Number(a[1]);
          if (108 > 75) {
            12;
          }
          if (28 === 57) {
            8;
          }
          var w = 217;
          const e = 165;
          Math.floor(165[e.ⲆᐃⵠᐃΔⲆᐃ]);
          if (w === 2) {
            w = 176;
          }
          const f = Math.abs(jo(c));
          var x = 116;
          if (225 < 151) {
            80;
          }
          if (x === 1) {
            x = 164;
          }
          var y = 94;
          if (y == 0) {
            y = 40;
          }
          var z = 112;
          if (z >= 10) {
            z = 73;
          }
          if (0 >= 33) {
            144;
          }
          ({}).ᐃⵠΔᐃⲆᐃⲆᐃΔ = 8;
          var A = 156;
          if (2 <= 240) {
            226;
          }
          var B = 222;
          if (B == 3) {
            B = 138;
          }
          const d = 227;
          Math.floor(227[d.ᐃⲆΔⵠΔⵠᐃ]);
          if (A === 0) {
            A = 4;
          }
          var C = 170;
          if (C === 7) {
            C = 23;
          }
          var D = 78;
          if (D === 7) {
            D = 42;
          }
          Ax.ΔΔⵠᐃΔᐃⲆ = b + f;
          Ax.ΔᐃᐃᐃⲆᐃⲆΔⲆ = f;
        }
        {
          0;
          const b = j[2].split("_");
          const c = b[0] + "_";
          const d = Number(b[1]);
          const e = Math.abs(jo(d));
          246 .ΔⲆⵠΔⲆᐃΔⲆⲆ = 10;
          Ax.ⵠⲆⵠΔΔⲆΔ = c + e;
          if (254 <= 150) {
            114;
          }
          var E = 97;
          if (234 < 12) {
            138;
          }
          if (98 === 161) {
            43;
          }
          var F = 13;
          if (F === 5) {
            F = 241;
          }
          var G = 247;
          if (G >= 11) {
            G = 176;
          }
          if (96 >= 215) {
            2;
          }
          if (8 <= 33) {
            133;
          }
          var H = 46;
          if (H == 13) {
            H = 196;
          }
          if (E > 5) {
            E = 176;
          }
          ({}).ⵠᐃⵠᐃᐃⵠᐃⲆΔ = 12;
          Ax.ⵠⵠᐃⵠⲆⵠⵠΔΔ = e;
          const f = 33;
          Math.floor(33[f.ᐃⲆᐃⲆⲆΔᐃ]);
          var I = 232;
          if (I == 9) {
            I = 186;
          }
          if (212 >= 89) {
            96;
          }
        }
        Math.floor(73[73 .ⵠᐃⵠⲆⲆⲆΔ]);
        K(f);
      }, function () {
        if (e !== 1) {
          if (a === 1) {
            e = 1;
            f();
            return;
          } else {
            A.waiting = false;
            return;
          }
        }
      });
    };
    this.ⲆᐃⲆΔⲆΔⵠ = function () {
      if (ln === A.waiting) {
        Ax.reconnect.enabled = false;
        A.waiting = true;
        A.ᐃΔⲆⵠᐃᐃΔ(X);
      }
    };
    var Z = 1;
    var _ = 2;
    var aa = 4;
    var ba = 8;
    var ca = 16;
    var da = 32;
    var ea = 1;
    var fa = 0;
    var ha = 1;
    if (ij.innerWidth < 1300) {
      this.ⲆⲆΔⵠⵠ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ha,
        position: aa | Z,
        view: I,
        translate: {
          x: 0,
          ⲆⵠΔⵠΔ: 184,
          ⲆΔΔⵠⲆ: 200,
          y: 0
        }
      };
    } else {
      this.ⲆⲆΔⵠⵠ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ha,
        position: aa | ca,
        view: I,
        translate: {
          ⲆΔΔⵠⲆ: -180,
          x: 0,
          ⲆⵠΔⵠΔ: 184,
          y: 0
        }
      };
    }
    this.ⲆⲆΔⵠⵠ.id.addEventListener("keyup", function (a) {
      a.preventDefault();
      if (a.keyCode == 13 && !A.waiting && !A.ⲆᐃⵠᐃⵠΔᐃⵠⵠ) {
        A.ⲆᐃⲆΔⲆΔⵠ();
      }
    });
    this.ⲆⲆΔⵠⵠ.input.value = ᐃΔΔⵠ.get("starve_nickname") ? ᐃΔΔⵠ.get("starve_nickname") : "";
    this.ⵠⲆᐃΔⵠΔⲆΔⲆ = {
      id: document.getElementById("account_nickname_block"),
      style: document.getElementById("account_nickname_block").style,
      input: document.getElementById("account_nickname_input"),
      active: fa,
      position: aa | ca,
      view: b,
      translate: {
        y: 0,
        ⲆΔΔⵠⲆ: -122,
        ⲆⵠΔⵠΔ: 110,
        x: 0
      }
    };
    if (ij.innerWidth < 1300) {
      this.Ⲇᐃᐃⵠⵠ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ha,
        position: aa | Z,
        view: I,
        translate: {
          y: 0,
          x: 0,
          ⲆΔΔⵠⲆ: 208,
          ⲆⵠΔⵠΔ: 225
        }
      };
    } else {
      this.Ⲇᐃᐃⵠⵠ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ha,
        position: aa | ca,
        view: I,
        translate: {
          y: 0,
          x: 0,
          ⲆⵠΔⵠΔ: 225,
          ⲆΔΔⵠⲆ: -180
        }
      };
    }
    this.ⵠΔᐃⲆ = {
      id: document.getElementById("leaderboard"),
      style: document.getElementById("leaderboard").style,
      active: fa,
      position: aa | ca,
      view: J,
      translate: {
        ⲆΔΔⵠⲆ: -294.5,
        y: 0,
        ⲆⵠΔⵠΔ: 190,
        x: 0
      }
    };
    this.ⲆΔⲆⲆⵠⲆⲆΔⲆ = {
      id: document.getElementById("stats_box"),
      style: document.getElementById("stats_box").style,
      active: fa,
      position: aa | ca,
      view: b,
      translate: {
        ⲆΔΔⵠⲆ: 125,
        x: 0,
        ⲆⵠΔⵠΔ: 187,
        y: 0
      }
    };
    this.ΔᐃⵠᐃΔΔⲆⵠⲆ = {
      id: document.getElementById("serverAddressBlock"),
      style: document.getElementById("serverAddressBlock").style,
      input: document.getElementById("serverAddressInput"),
      active: fa,
      position: aa | ca,
      view: q,
      translate: {
        x: 0,
        ⲆΔΔⵠⲆ: -260,
        ⲆⵠΔⵠΔ: 350,
        y: 0
      }
    };
    l = 0;
    this.ⲆΔΔΔΔ = [];
    this.ⲆΔΔΔΔ[l++] = this.ⲆⲆΔⵠⵠ;
    this.ⲆΔΔΔΔ[l++] = this.Ⲇᐃᐃⵠⵠ;
    this.ⲆΔΔΔΔ[l++] = this.ⵠΔᐃⲆ;
    this.ⲆΔΔΔΔ[l++] = this.ⵠⲆᐃΔⵠΔⲆΔⲆ;
    this.ⲆΔΔΔΔ[l++] = this.ⲆΔⲆⲆⵠⲆⲆΔⲆ;
    this.ⲆΔΔΔΔ[l++] = this.ΔᐃⵠᐃΔΔⲆⵠⲆ;
    l = 0;
    this.Δⵠᐃᐃ = [];
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.ⵠⲆⵠⵠΔΔΔ, ha, 0, 0, Z);
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.ⵠΔⲆⵠᐃⵠᐃ, fa, 0, 0, Z);
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.ⲆΔᐃⵠΔⵠᐃ, fa, 0, 0, Z);
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.Ⲇⵠᐃⵠᐃⵠᐃ, fa, 0, 0, Z);
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.ⲆΔⲆⵠⲆⲆΔ, fa, 0, 0, Z);
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.ⵠᐃⲆΔⲆᐃᐃ, fa, 0, 0, Z);
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.ⲆⵠΔⵠΔⵠⲆ, fa, 0, 0, Z);
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.ⲆΔΔΔᐃⵠⲆ, fa, 0, 0, Z);
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.ⲆⵠⲆᐃΔⵠⵠ, fa, 0, 0, Z);
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.ⵠΔⵠⵠᐃᐃⲆ, fa, 0, 0, Z);
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.ⲆΔᐃΔⲆΔᐃ, fa, 0, 0, Z);
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.ᐃΔⲆᐃⵠᐃⵠ, fa, 0, 0, Z);
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.ⲆΔⵠⵠΔΔᐃ, fa, 0, 0, Z);
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.ⲆΔᐃΔⲆⲆⵠ, fa, 0, 0, Z);
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.ⵠⵠⵠⲆΔᐃⵠ, fa, 0, 0, Z);
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.ᐃⵠᐃᐃᐃΔⵠ, fa, 0, 0, Z);
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.ⲆⲆⵠᐃᐃΔⵠ, fa, 0, 0, Z);
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.ᐃⵠᐃᐃᐃⵠⲆ, fa, 0, 0, Z);
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.ⲆᐃΔᐃΔⲆΔ, fa, 0, 0, Z);
    if (ij.innerWidth < 1300) {
      this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ⲆⵠⵠΔⲆⵠΔ, ha, 200, 100, aa | Z);
    } else {
      this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ⲆⵠⵠΔⲆⵠΔ, ha, -753 / 4, 100, aa | ca);
    }
    this.Δⵠᐃᐃ[l++].view = I;
    this.Δⵠᐃᐃ[l++] = cf(ⵠᐃ.ⲆⲆΔⲆᐃΔⲆ, ha, 403, -10, _);
    if (ij.innerWidth > 1300) {
      this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ᐃⵠᐃⵠⲆΔⲆ, ha, -885 / 4, -159.5, ba | ca);
      this.Δⵠᐃᐃ[l++].view = I;
    }
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ᐃⲆⲆᐃᐃᐃⵠ, fa, -1293 / 4, 100, aa | ca);
    this.Δⵠᐃᐃ[l++].view = b;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ⲆᐃᐃⲆⵠΔᐃ, fa, -356.25, 100, aa | ca);
    this.Δⵠᐃᐃ[l++].view = m;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ⵠⵠᐃΔΔⲆⵠ, fa, -905 / 4, 50, aa | ca);
    this.Δⵠᐃᐃ[l++].view = v;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ΔΔΔⵠΔᐃⲆ, fa, -402, 130, aa | ca);
    this.Δⵠᐃᐃ[l++].view = c;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ⵠⲆⵠᐃᐃⵠΔ, fa, -279.25, 130, aa | ca);
    this.Δⵠᐃᐃ[l++].view = W;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ⵠᐃᐃⲆΔⲆⵠ, fa, -1222 / 4, 130, aa | ca);
    this.Δⵠᐃᐃ[l++].view = G;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ΔᐃⲆΔᐃᐃⵠ, fa, -305.5, 100, aa | ca);
    this.Δⵠᐃᐃ[l++].view = q;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ⵠΔΔⵠᐃΔⲆ, fa, -ⵠᐃ.ⵠΔΔⵠᐃΔⲆ.width / 4 - 350, -15, aa | ca);
    this.Δⵠᐃᐃ[l++].view = O;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ⲆⲆⵠⵠᐃᐃⵠ, fa, -374.25, 110, aa | ca);
    this.Δⵠᐃᐃ[l++].view = p;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ᐃΔⵠⵠΔᐃᐃ, fa, -306.5, 100, aa | ca);
    this.Δⵠᐃᐃ[l++].view = J;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ΔᐃᐃⵠⵠⲆⲆ, fa, -1381 / 4, 80, aa | ca);
    this.Δⵠᐃᐃ[l++].view = f;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ΔⲆⲆΔᐃᐃΔ, fa, -385.5, 150, aa | ca);
    this.Δⵠᐃᐃ[l++].view = N;
    var ia = 360 / 100;
    var ja = this.ⵠᐃᐃΔⵠⵠΔ([["#25c5d6", ia * 3], ["#e2cf27", ia * 10], ["#afac98", ia * 30], ["#d88e23", ia * 57]]);
    this.Δⵠᐃᐃ[l] = cf(ja, fa, -ja.width / 4, 178, aa | ca);
    this.Δⵠᐃᐃ[l++].view = N;
    this.ΔᐃⵠᐃⵠⲆⲆᐃΔ = function (b, c, d) {
      var e;
      A.ΔΔⵠⵠᐃ = 1;
      A.ⵠⲆⲆⲆΔᐃⵠ = 0;
      A.ⵠⵠⵠᐃΔⲆⲆ = 0;
      A.ⲆⲆⵠⲆⲆᐃΔ = b;
      A.ΔᐃΔΔᐃᐃᐃ = c;
      var f = 0;
      if (c === 0) {
        for (f = 0; Δᐃᐃᐃ.ⵠᐃΔⲆΔ.length > f && d !== Δᐃᐃᐃ.ⵠᐃΔⲆΔ[f].id; f++);
        e = Δᐃᐃᐃ.ⵠᐃΔⲆΔ[f];
        A.unlock.ⲆΔⵠⵠ[f] = 1;
      } else if (c === 1) {
        for (f = 0; Δᐃᐃᐃ.ΔᐃⲆΔᐃ.length > f && Δᐃᐃᐃ.ΔᐃⲆΔᐃ[f].id !== d; f++);
        e = Δᐃᐃᐃ.ΔᐃⲆΔᐃ[f];
        A.unlock.ⵠⵠΔΔⵠ[f] = 1;
      } else if (c === 2) {
        for (f = 0; f < Δᐃᐃᐃ.ⵠᐃⵠⲆ.length && d !== Δᐃᐃᐃ.ⵠᐃⵠⲆ[f].id; f++);
        e = Δᐃᐃᐃ.ⵠᐃⵠⲆ[f];
        A.unlock.ⲆⲆⲆᐃⵠ[f] = 1;
      } else if (c === 3) {
        for (f = 0; Δᐃᐃᐃ.ᐃᐃΔⲆᐃ.length > f && Δᐃᐃᐃ.ᐃᐃΔⲆᐃ[f].id !== d; f++);
        e = Δᐃᐃᐃ.ᐃᐃΔⲆᐃ[f];
        A.unlock.ⵠΔⲆΔᐃ[f] = 1;
      } else if (c === 4) {
        for (f = 0; Δᐃᐃᐃ.ᐃᐃⵠⵠΔ.length > f && Δᐃᐃᐃ.ᐃᐃⵠⵠΔ[f].id !== d; f++);
        e = Δᐃᐃᐃ.ᐃᐃⵠⵠΔ[f];
        A.unlock.ⵠⲆΔΔⲆ[f] = 1;
        A.unlock.ΔⵠᐃⲆΔ[f] = 1;
      }
      A.ⵠⵠΔⵠᐃΔⲆ = f;
      A.ᐃⲆΔⲆⲆᐃⵠ = Tf("by " + e.ⲆⲆⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, undefined, 30, 24, undefined, undefined, ph, Fk, "#000000", 24);
      A.ΔⵠΔⵠⵠⵠⵠ = Tf(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, undefined, 30, 24, undefined, undefined, undefined, Fk, "#000000", 20);
    };
    this.ΔΔⵠⵠᐃ = 0;
    this.ⵠⲆⲆⲆΔᐃⵠ = 0;
    this.ⲆⲆⵠⲆⲆᐃΔ = 0;
    this.ΔᐃΔΔᐃᐃᐃ = 0;
    this.ⵠⵠⵠᐃΔⲆⲆ = 0;
    this.ᐃⲆΔⲆⲆᐃⵠ = Ts;
    this.ΔⵠΔⵠⵠⵠⵠ = lj;
    var ka = 197;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ⲆⵠⵠⵠⲆΔⵠ, fa, -1542 / 4, 150, aa | ca);
    this.Δⵠᐃᐃ[l++].view = B;
    ja = this.ⵠᐃᐃΔⵠⵠΔ([["#d45ce5", ia * 3], ["#25c5d6", ia * 10], ["#e2cf27", ia * 30], ["#afac98", ia * 57]]);
    this.Δⵠᐃᐃ[l] = cf(ja, fa, -ja.width / 4, 178, aa | ca);
    this.Δⵠᐃᐃ[l++].view = B;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ⵠⵠᐃⲆⵠⵠⵠ, fa, -385.5, 150, aa | ca);
    this.Δⵠᐃᐃ[l++].view = x;
    ja = this.ⵠᐃᐃΔⵠⵠΔ([["#d33a2a", ia * 3], ["#d45ce5", ia * 10], ["#25c5d6", ia * 30], ["#e2cf27", ia * 57]]);
    this.Δⵠᐃᐃ[l] = cf(ja, fa, -ja.width / 4, 178, aa | ca);
    this.Δⵠᐃᐃ[l++].view = x;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ᐃⵠΔΔⵠΔᐃ, fa, -385.5, 150, aa | ca);
    this.Δⵠᐃᐃ[l++].view = M;
    ja = this.ⵠᐃᐃΔⵠⵠΔ([["#25c5d6", ia * 3], ["#e2cf27", ia * 10], ["#afac98", ia * 30], ["#d88e23", ia * 57]]);
    this.Δⵠᐃᐃ[l] = cf(ja, fa, -ja.width / 4, 178, aa | ca);
    this.Δⵠᐃᐃ[l++].view = M;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ⵠᐃΔⲆΔⲆⲆ, fa, -1542 / 4, 150, aa | ca);
    this.Δⵠᐃᐃ[l++].view = k;
    ja = this.ⵠᐃᐃΔⵠⵠΔ([["#d45ce5", ia * 3], ["#25c5d6", ia * 10], ["#e2cf27", ia * 30], ["#afac98", ia * 57]]);
    this.Δⵠᐃᐃ[l] = cf(ja, fa, -ja.width / 4, 178, aa | ca);
    this.Δⵠᐃᐃ[l++].view = k;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ᐃΔⲆⲆᐃΔⲆ, fa, -1542 / 4, 150, aa | ca);
    this.Δⵠᐃᐃ[l++].view = E;
    ja = this.ⵠᐃᐃΔⵠⵠΔ([["#d33a2a", ia * 3], ["#d45ce5", ia * 10], ["#25c5d6", ia * 30], ["#e2cf27", ia * 57]]);
    this.Δⵠᐃᐃ[l] = cf(ja, fa, -ja.width / 4, 178, aa | ca);
    this.Δⵠᐃᐃ[l++].view = E;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ⵠᐃⵠΔᐃⵠᐃ, fa, -1366 / 4, 100, aa | ca);
    this.Δⵠᐃᐃ[l++].view = T;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ΔⲆΔᐃΔΔΔ, fa, -341.5, 100, aa | ca);
    this.Δⵠᐃᐃ[l++].view = F;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ΔⲆⵠⲆⲆΔⲆ, fa, -1366 / 4, 100, aa | ca);
    this.Δⵠᐃᐃ[l++].view = Q;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ᐃⵠⵠⵠⲆΔⲆ, fa, -341.5, 100, aa | ca);
    this.Δⵠᐃᐃ[l++].view = V;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ⵠΔᐃⲆⵠⵠΔ, fa, -1366 / 4, 100, aa | ca);
    this.Δⵠᐃᐃ[l++].view = S;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ⵠΔⵠⲆΔᐃᐃ, fa, -1366 / 4, 100, aa | ca);
    this.Δⵠᐃᐃ[l++].view = R;
    ⲆᐃⲆΔⵠᐃΔ = l++;
    this.Δⵠᐃᐃ[ⲆᐃⲆΔⵠᐃΔ] = cf(ⵠᐃ.ⲆᐃⲆΔⵠᐃΔ, fa, 484, 0, aa);
    ΔᐃᐃⲆΔⵠᐃ = l++;
    this.Δⵠᐃᐃ[ΔᐃᐃⲆΔⵠᐃ] = cf(ⵠᐃ.ΔᐃᐃⲆΔⵠᐃ, fa, 812.5, 0, aa);
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ΔᐃᐃᐃⵠⲆⲆ, fa, -758 / 4, -5, aa | ca);
    this.Δⵠᐃᐃ[l++].view = y;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ⲆⵠᐃⵠΔΔΔ, fa, -189.5, -5, aa | ca);
    this.Δⵠᐃᐃ[l++].view = z;
    ΔᐃΔⵠⲆⲆΔ = l++;
    this.Δⵠᐃᐃ[ΔᐃΔⵠⲆⲆΔ] = cf(ⵠᐃ.ⵠΔᐃΔⵠⲆΔ, ha, 93, 30, aa);
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ⵠⲆΔⵠⵠⵠⲆ, fa, -173, 110, aa | ca);
    this.Δⵠᐃᐃ[l++].view = j;
    this.Δⵠᐃᐃ[l] = cf(ⵠᐃ.ΔᐃᐃΔᐃⵠⵠ, fa, -173, 110, aa | ca);
    this.Δⵠᐃᐃ[l++].view = L;
    l = 0;
    this.buttons = [];
    this.buttons[l] = pf(50, 57, 0, [ⵠᐃ.ᐃΔᐃⵠⵠⵠΔ, ⵠᐃ.ⲆⵠᐃΔᐃⲆⵠ, ⵠᐃ.ᐃⵠⵠⵠΔⲆⵠ], ea, 0, function () {
      if (A.ⲆΔⲆΔⲆ()) {
        P(f);
      } else {
        P(v);
      }
    }, 320, 0, Z, ha);
    l++;
    if (ij.innerWidth < 1300) {
      this.buttons[l] = pf(202, 97, 0, [ⵠᐃ.ⵠⵠⲆⲆᐃⲆΔ, ⵠᐃ.ⲆᐃⲆᐃᐃⲆⵠ, ⵠᐃ.ᐃΔⵠⲆⲆΔᐃ], ea, 0, this.ⲆᐃⲆΔⲆΔⵠ, 462, 235, aa | Z, ha);
    } else {
      this.buttons[l] = pf(202, 97, 0, [ⵠᐃ.ⵠⵠⲆⲆᐃⲆΔ, ⵠᐃ.ⲆᐃⲆᐃᐃⲆⵠ, ⵠᐃ.ᐃΔⵠⲆⲆΔᐃ], ea, 0, this.ⲆᐃⲆΔⲆΔⵠ, 74, 235, aa | ca, ha);
    }
    this.buttons[l].view = I;
    l++;
    if (ij.innerWidth > 1300) {
      this.buttons[l] = pf(355, 168, 0, [ⵠᐃ.ᐃⵠⲆⲆⲆⲆⵠ, ⵠᐃ.ᐃⵠⲆⲆⲆⲆⵠ, ⵠᐃ.ᐃⵠⲆⲆⲆⲆⵠ], ea, 0, function () {
        ij.open("./changelog.html", "_blank");
      }, -195, -115, ba | ca, ha);
      this.buttons[l++].view = I;
      this.buttons[l] = pf(355, 168, 0, [ⵠᐃ.ⵠᐃΔᐃᐃⲆᐃ, ⵠᐃ.ⵠᐃΔᐃᐃⲆᐃ, ⵠᐃ.ⵠᐃΔᐃᐃⲆᐃ], ea, 0, function () {
        ij.open("https://taming.io", "_blank");
      }, 20, -115, ba | ca, ha);
      this.buttons[l++].view = I;
    }
    this.buttons[l++] = pf(80, 80, 0, [ⵠᐃ.ⲆΔᐃΔᐃΔΔ, ⵠᐃ.ΔΔⵠⲆⵠⵠᐃ, ⵠᐃ.ⲆⲆᐃⲆⲆᐃⵠ], ea, 0, function () {
      ij.open("https://lapamauve.creator-spring.com/", "_blank");
    }, 380, 10, _, ha);
    this.buttons[l++] = pf(80, 80, 0, [ⵠᐃ.ⲆΔᐃⵠⲆᐃⵠ, ⵠᐃ.ⵠⲆⲆⲆᐃⵠᐃ, ⵠᐃ.ΔᐃⲆⵠⵠᐃⲆ], ea, 0, function () {
      ij.open("https://discord.gg/starveio", "_blank");
    }, 330, 10, _, ha);
    this.buttons[l++] = pf(80, 80, 0, [ⵠᐃ.ⵠΔΔΔᐃᐃΔ, ⵠᐃ.ᐃᐃⲆᐃΔΔⲆ, ⵠᐃ.Ⲇᐃⵠⵠⵠⵠⵠ], ea, 0, function () {
      ij.open("https://reddit.com/r/starveio", "_blank");
    }, 280, 10, _, ha);
    this.buttons[l++] = pf(80, 80, 0, [ⵠᐃ.ⲆⵠⲆⵠᐃᐃΔ, ⵠᐃ.ᐃΔΔⲆⲆΔⵠ, ⵠᐃ.ΔⲆΔⲆⲆⲆⵠ], ea, 0, function () {
      ij.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, 230, 10, _, ha);
    this.buttons[l++] = pf(80, 80, 0, [ⵠᐃ.ΔΔΔΔⲆΔⲆ, ⵠᐃ.ᐃⵠⲆⲆⵠⵠⵠ, ⵠᐃ.ⵠΔⵠⵠⵠⲆⵠ], ea, 0, function () {
      ij.open("https://www.facebook.com/LapaMauve/", "_blank");
    }, 155, 10, _, ha);
    this.buttons[l++] = pf(80, 80, 0, [ⵠᐃ.ⵠⵠᐃᐃᐃⵠⵠ, ⵠᐃ.ΔⵠⵠⲆᐃᐃⲆ, ⵠᐃ.ᐃⵠΔΔⵠᐃⵠ], ea, 0, function () {
      ij.open("https://twitter.com/lapamauve", "_blank");
    }, 105, 10, _, ha);
    this.buttons[l++] = pf(80, 80, 0, [ⵠᐃ.ᐃⵠⲆⵠΔΔⵠ, ⵠᐃ.ⵠⵠⵠΔΔᐃⲆ, ⵠᐃ.ⵠⲆⲆⵠΔᐃⵠ], ea, 0, function () {
      ij.open("https://www.youtube.com/@lapamauveofficial", "_blank");
    }, 55, 10, _, ha);
    ⵠⵠΔⲆⲆᐃΔ = l++;
    this.buttons[ⵠⵠΔⲆⲆᐃΔ] = pf(232, 142, 0, [ⵠᐃ.ᐃⲆᐃᐃⲆᐃΔ, ⵠᐃ.ⲆΔΔⲆᐃᐃΔ, ⵠᐃ.ᐃΔΔΔⲆᐃᐃ], ea, 0, function () {
      P(J);
      qy(yx.ᐃΔᐃΔᐃⵠⲆ, yx.ᐃⵠⵠⵠⲆⵠΔ, yx.ΔⵠᐃⲆⵠΔⲆ, yx.ⵠⲆⲆΔⵠᐃΔ);
    }, -5, 573, Z, ha);
    this.buttons[l++] = pf(236, 165, 0, [ⵠᐃ.ᐃⲆᐃⵠⵠⲆΔ, ⵠᐃ.ᐃⲆᐃⵠⵠⲆΔ, ⵠᐃ.ᐃⲆᐃⵠⵠⲆΔ], ea, 1, function () {
      P(J);
    }, -5, 566, Z, ha);
    ᐃⲆΔⵠΔΔⲆ = l++;
    this.buttons[ᐃⲆΔⵠΔΔⲆ] = pf(236, 165, 0, [ⵠᐃ.ⵠⲆΔⵠΔᐃΔ, ⵠᐃ.ⲆᐃⵠⵠΔᐃΔ, ⵠᐃ.ⵠⲆΔᐃΔᐃΔ], ea, 0, function () {
      P(p);
    }, -5, 494, Z, ha);
    this.buttons[l++] = pf(236, 165, 0, [ⵠᐃ.ΔⵠⵠᐃⲆⲆⵠ, ⵠᐃ.ΔⵠⵠᐃⲆⲆⵠ, ⵠᐃ.ΔⵠⵠᐃⲆⲆⵠ], ea, 1, function () {
      P(p);
    }, -5, 494, Z, ha);
    ΔⵠΔΔΔⵠΔ = l++;
    this.buttons[ΔⵠΔΔΔⵠΔ] = pf(236, 165, 0, [ⵠᐃ.ⵠⲆΔⵠΔᐃΔ, ⵠᐃ.ⲆᐃⵠⵠΔᐃΔ, ⵠᐃ.ⵠⲆΔᐃΔᐃΔ], ea, 0, function () {
      if (A.ⲆΔⲆΔⲆ()) {
        if (yx.ⲆᐃΔⲆⵠᐃΔ - Date.now() > 0) {
          P(q);
        } else {
          P(W);
        }
      } else {
        P(v);
      }
    }, -5, 415, Z, ha);
    this.buttons[l++] = pf(236, 165, 0, [ⵠᐃ.ᐃⵠⵠΔΔᐃΔ, ⵠᐃ.ᐃⵠⵠΔΔᐃΔ, ⵠᐃ.ᐃⵠⵠΔΔᐃΔ], ea, 1, function () {
      if (A.ⲆΔⲆΔⲆ()) {
        if (yx.ⲆᐃΔⲆⵠᐃΔ - Date.now() > 0) {
          P(q);
        } else {
          P(W);
        }
      } else {
        P(v);
      }
    }, -5, 415, Z, ha);
    ΔΔΔⵠΔⵠᐃ = l++;
    this.buttons[ΔΔΔⵠΔⵠᐃ] = pf(236, 165, 0, [ⵠᐃ.ⵠⲆΔⵠΔᐃΔ, ⵠᐃ.ⲆᐃⵠⵠΔᐃΔ, ⵠᐃ.ⵠⲆΔᐃΔᐃΔ], ea, 0, function () {
      P(c);
    }, -5, 336, Z, ha);
    this.buttons[l++] = pf(236, 165, 0, [ⵠᐃ.ⲆΔᐃⵠᐃⵠⲆ, ⵠᐃ.ⲆΔᐃⵠᐃⵠⲆ, ⵠᐃ.ⲆΔᐃⵠᐃⵠⲆ], ea, 1, function () {
      P(c);
    }, -5, 336, Z, ha);
    ᐃᐃᐃⲆᐃⲆⲆ = l++;
    this.buttons[ᐃᐃᐃⲆᐃⲆⲆ] = pf(236, 165, 0, [ⵠᐃ.ⵠⲆΔⵠΔᐃΔ, ⵠᐃ.ⲆᐃⵠⵠΔᐃΔ, ⵠᐃ.ⵠⲆΔᐃΔᐃΔ], ea, 0, function () {
      P(m);
    }, -5, 257, Z, ha);
    this.buttons[l++] = pf(236, 165, 0, [ⵠᐃ.ⵠΔⵠⵠⵠΔᐃ, ⵠᐃ.ⵠΔⵠⵠⵠΔᐃ, ⵠᐃ.ⵠΔⵠⵠⵠΔᐃ], ea, 1, function () {
      P(m);
    }, -5, 257, Z, ha);
    ᐃⵠⲆⲆᐃΔⵠ = l++;
    this.buttons[ᐃⵠⲆⲆᐃΔⵠ] = pf(236, 165, 0, [ⵠᐃ.ⵠⲆΔⵠΔᐃΔ, ⵠᐃ.ⲆᐃⵠⵠΔᐃΔ, ⵠᐃ.ⵠⲆΔᐃΔᐃΔ], ea, 0, function () {
      P(I);
    }, -5, 178, Z, ha);
    this.buttons[l++] = pf(236, 165, 0, [ⵠᐃ.ⵠⲆⲆΔⲆⵠᐃ, ⵠᐃ.ⵠⲆⲆΔⲆⵠᐃ, ⵠᐃ.ⵠⲆⲆΔⲆⵠᐃ], ea, 1, function () {
      P(I);
    }, -5, 178, Z, ha);
    ᐃΔΔᐃⵠᐃⲆ = l++;
    this.ᐃΔΔᐃⵠᐃⲆ = ᐃΔΔᐃⵠᐃⲆ;
    this.buttons[ᐃΔΔᐃⵠᐃⲆ] = pf(324, 222, 0, [ⵠᐃ.ⵠᐃⲆᐃᐃⵠⵠ, ⵠᐃ.ᐃⵠΔⵠⵠⲆⵠ, ⵠᐃ.ΔⵠⵠᐃⲆᐃᐃ], ea, 0, function () {
      P(v);
    }, 0, 70, Z, ha);
    ΔᐃᐃⵠΔᐃΔ = l++;
    ᐃⵠΔⵠⲆⲆⵠ = l++;
    this.ΔᐃᐃⵠΔᐃΔ = ΔᐃᐃⵠΔᐃΔ;
    this.ᐃⵠΔⵠⲆⲆⵠ = ᐃⵠΔⵠⲆⲆⵠ;
    this.buttons[ΔᐃᐃⵠΔᐃΔ] = pf(324, 222, 0, [ⵠᐃ.ⲆⵠᐃⵠᐃᐃⲆ, ⵠᐃ.ᐃⲆⲆⵠᐃΔⵠ, ⵠᐃ.ⲆΔΔᐃΔΔⲆ], ea, 0, function () {
      P(b);
      ra(-1);
    }, 0, 70, Z, fa);
    this.buttons[ᐃⵠΔⵠⲆⲆⵠ] = pf(324, 222, 0, [ⵠᐃ.ΔⵠᐃΔⲆᐃⵠ, ⵠᐃ.ΔⵠᐃΔⲆᐃⵠ, ⵠᐃ.ΔⵠᐃΔⲆᐃⵠ], ea, 1, function () {
      P(b);
      ra(-1);
    }, 0, 70, Z, fa);
    if (wx.ΔⲆⲆⲆᐃΔⲆ === 0) {
      var la = l++;
      if (ij.innerWidth < 1300) {
        this.buttons[la] = pf(266, 176, 0, [ⵠᐃ.ΔⲆᐃᐃΔᐃⵠ, ⵠᐃ.ᐃⲆⲆⵠΔᐃΔ, ⵠᐃ.ⲆΔⵠⵠⲆⵠⵠ], ea, 0, function () {
          wx.ᐃᐃⵠΔΔ(0);
        }, 150, 300, Z | aa, ha);
      } else {
        this.buttons[la] = pf(266, 176, 0, [ⵠᐃ.ΔⲆᐃᐃΔᐃⵠ, ⵠᐃ.ᐃⲆⲆⵠΔᐃΔ, ⵠᐃ.ⲆΔⵠⵠⲆⵠⵠ], ea, 0, function () {
          wx.ᐃᐃⵠΔΔ(0);
        }, -340, 100, ca | aa, ha);
      }
      this.buttons[la].view = I;
      this.buttons[la].hint = 0;
      var ma = l++;
      if (ij.innerWidth < 1300) {
        this.buttons[ma] = pf(266, 176, 0, [ⵠᐃ.ΔᐃⵠΔⵠΔⵠ, ⵠᐃ.ΔΔⵠⲆⵠⲆⵠ, ⵠᐃ.ΔⵠΔⲆᐃᐃᐃ], ea, 0, function () {
          wx.ᐃᐃⵠΔΔ(4);
        }, 150, 400, Z | aa, ha);
      } else {
        this.buttons[ma] = pf(266, 176, 0, [ⵠᐃ.ΔᐃⵠΔⵠΔⵠ, ⵠᐃ.ΔΔⵠⲆⵠⲆⵠ, ⵠᐃ.ΔⵠΔⲆᐃᐃᐃ], ea, 0, function () {
          wx.ᐃᐃⵠΔΔ(4);
        }, -340, 200, ca | aa, ha);
      }
      this.buttons[ma].view = I;
      this.buttons[ma].hint = 0;
      var na = l++;
      if (ij.innerWidth < 1300) {
        this.buttons[na] = pf(266, 176, 0, [ⵠᐃ.ⵠΔᐃΔⲆⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃΔΔΔ, ⵠᐃ.ⵠⵠΔⲆⵠΔᐃ], ea, 0, function () {
          wx.ᐃᐃⵠΔΔ(6);
        }, 450, 300, Z | aa, ha);
      } else {
        this.buttons[na] = pf(266, 176, 0, [ⵠᐃ.ⵠΔᐃΔⲆⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃΔΔΔ, ⵠᐃ.ⵠⵠΔⲆⵠΔᐃ], ea, 0, function () {
          wx.ᐃᐃⵠΔΔ(6);
        }, -340, 300, ca | aa, ha);
      }
      this.buttons[na].view = I;
      this.buttons[na].hint = 0;
      var oa = l++;
      if (ij.innerWidth < 1300) {
        this.buttons[oa] = pf(266, 176, 0, [ⵠᐃ.ΔΔⵠⵠⲆᐃⲆ, ⵠᐃ.ᐃⲆⲆⵠᐃΔⲆ, ⵠᐃ.ⵠⲆΔⲆⲆⲆΔ], ea, 0, function () {
          wx.ᐃᐃⵠΔΔ(2);
        }, 300, 300, Z | aa, ha);
      } else {
        this.buttons[oa] = pf(266, 176, 0, [ⵠᐃ.ΔΔⵠⵠⲆᐃⲆ, ⵠᐃ.ᐃⲆⲆⵠᐃΔⲆ, ⵠᐃ.ⵠⲆΔⲆⲆⲆΔ], ea, 0, function () {
          wx.ᐃᐃⵠΔΔ(2);
        }, 204, 100, ca | aa, ha);
      }
      this.buttons[oa].view = I;
      this.buttons[oa].hint = 0;
      var pa = l++;
      if (ij.innerWidth < 1300) {
        this.buttons[pa] = pf(266, 176, 0, [ⵠᐃ.ΔⲆΔΔᐃⲆΔ, ⵠᐃ.ⲆⵠᐃΔⲆⵠⵠ, ⵠᐃ.ⵠᐃⲆⵠⵠᐃᐃ], ea, 0, function () {
          wx.ᐃᐃⵠΔΔ(3);
        }, 300, 400, Z | aa, ha);
      } else {
        this.buttons[pa] = pf(266, 176, 0, [ⵠᐃ.ΔⲆΔΔᐃⲆΔ, ⵠᐃ.ⲆⵠᐃΔⲆⵠⵠ, ⵠᐃ.ⵠᐃⲆⵠⵠᐃᐃ], ea, 0, function () {
          wx.ᐃᐃⵠΔΔ(3);
        }, 204, 200, ca | aa, ha);
      }
      this.buttons[pa].view = I;
      this.buttons[pa].hint = 0;
      var qa = l++;
      this.buttons[qa] = pf(266, 176, 0, [ⵠᐃ.ΔⲆⲆⵠᐃⲆΔ, ⵠᐃ.Δⵠⵠᐃᐃᐃⵠ, ⵠᐃ.ⲆΔⵠᐃᐃΔᐃ], ea, 0, function () {
        wx.ᐃᐃⵠΔΔ(7);
      }, ij.innerWidth < 1300 ? 450 : 204, ij.innerWidth < 1300 ? 400 : 300, (ij.innerWidth < 1300 ? Z : ca) | aa, ha);
      this.buttons[qa].view = I;
      this.buttons[qa].hint = 0;
    }
    function ra(b, c) {
      if (c !== undefined) {
        yx.ᐃⲆΔⵠⲆⵠᐃ = c;
        var d = yx.ᐃⲆΔⲆᐃⲆᐃ[c];
        yx.ᐃⲆⲆⲆⲆ = d.score;
        yx.ΔᐃΔⵠⲆ = d.kill;
        yx.ᐃⲆᐃΔⲆᐃⵠ = d.death;
        yx.time = d.time;
        yx.ⲆⵠΔⲆⵠⲆⵠ = d.bestScore;
        yx.ⵠⲆᐃᐃⵠⲆᐃ = d.bestKill;
        yx.ΔᐃΔⵠⵠΔᐃ = d.bestTime;
        yx.ⵠΔⵠΔⲆΔΔ = d.scoreTotal;
      }
      if (b === qg) {
        b = yx.ⵠⵠⵠᐃΔⵠΔ;
      }
      yx.ⵠⵠⵠᐃΔⵠΔ = b;
      if (b >= 0) {
        document.getElementById("stats_box_time").innerHTML = yx.ΔᐃΔⵠⵠΔᐃ[b];
        document.getElementById("stats_box_kill").innerHTML = yx.ⵠⲆᐃᐃⵠⲆᐃ[b];
        document.getElementById("stats_box_score").innerHTML = yx.ⲆⵠΔⲆⵠⲆⵠ[b];
      } else {
        var f = 0;
        for (var g = 0; yx.ΔᐃΔⵠⲆ.length > g; g++) {
          f += yx.ΔᐃΔⵠⲆ[g];
        }
        var h = 0;
        for (g = 0; g < yx.time.length; g++) {
          h += yx.time[g];
        }
        document.getElementById("stats_box_time").innerHTML = h;
        document.getElementById("stats_box_kill").innerHTML = f;
        document.getElementById("stats_box_score").innerHTML = yx.ᐃⲆⲆⲆⲆ;
      }
    }
    this.buttons[l] = pf(87, 78, 0, [ⵠᐃ.ᐃΔⲆᐃⲆΔⲆ, ⵠᐃ.ΔⵠᐃⲆⵠⲆΔ, ⵠᐃ.ΔⵠΔⲆⵠΔⲆ], ea, 0, function () {
      yx.ΔⵠⲆᐃΔᐃⲆⲆⲆ();
      if (yx.ΔᐃᐃⵠᐃΔᐃ === 0) {
        P(L);
      } else {
        P(j);
      }
    }, 127, 110, ca | aa, fa);
    this.buttons[l++].view = b;
    this.buttons[l] = pf(87, 78, 0, [ⵠᐃ.ᐃⲆⵠᐃΔⲆᐃ, ⵠᐃ.ⵠΔᐃⲆⲆⲆⲆ, ⵠᐃ.ⵠⲆᐃᐃᐃᐃᐃ], ea, 0, function () {
      const a = ij.document.createElement("textarea");
      a.value = Vx;
      ij.document.body.appendChild(a);
      a.select();
      ij.document.execCommand("copy");
      ij.document.body.removeChild(a);
    }, 182, 110, ca | aa, fa);
    this.buttons[l++].view = b;
    this.buttons[l] = pf(87, 78, 0, [ⵠᐃ.ⲆⵠⵠΔᐃΔⲆ, ⵠᐃ.ⵠⲆⵠⲆⲆⵠΔ, ⵠᐃ.ⲆᐃᐃⵠΔⲆᐃ], ea, 0, function () {
      (function () {
        if (Rx === Tx && ij.FB && ij.FB.getUserID()) {
          ij.FB.logout();
        }
        if (Tx === Qx && jy !== undefined) {
          ij.gapi.auth2.getAuthInstance().signOut();
          jy = undefined;
        }
        Vx = Va;
        Ux = Il;
        Tx = $k;
        yx.ⵠⲆᐃΔᐃ = 0;
        yx.ᐃⲆⵠᐃΔ = 0;
        yx.ᐃⲆⲆⲆⲆ = 0;
        yx.ᐃᐃⲆᐃⵠⵠⵠ();
        ⲆⵠⲆⵠΔᐃⵠΔᐃ();
      })();
    }, 255, 110, ca | aa, fa);
    this.buttons[l++].view = b;
    this.buttons[l] = pf(58, 64, 0, [ⵠᐃ.ᐃⲆΔⲆⲆΔⵠ, ⵠᐃ.ΔΔᐃⲆΔⲆᐃ, ⵠᐃ.ᐃⵠᐃⲆΔΔⲆ], ea, 0, function () {
      P(I);
    }, 189, 118, ca | aa, fa);
    this.buttons[l++].view = v;
    this.buttons[l] = pf(497, 72, 0, [ⵠᐃ.ΔⲆⲆⵠⲆⵠΔ, ⵠᐃ.ⵠΔΔⵠⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆⵠΔⲆΔ], ea, 0, function () {
      (function () {
        if (wf) {
          Ux = ΔⵠΔⵠ.ΔⲆⵠΔᐃⵠᐃ(40);
          Tx = Sx;
          Vx = wf.userId;
          ij.ⵠⵠⲆⲆᐃⵠⵠ();
          return;
        }
        ij.gapi.auth2.getAuthInstance().signIn();
      })();
    }, -130, 390, ca | aa, fa);
    this.buttons[l++].view = v;
    this.buttons[l] = pf(497, 72, 0, [ⵠᐃ.ΔᐃΔᐃⵠⵠⲆ, ⵠᐃ.ᐃⵠΔⲆᐃⵠⲆ, ⵠᐃ.ΔᐃΔⵠⲆⵠⵠ], ea, 0, function () {
      ij.FB.login(function (a) {
        if (a.authResponse) {
          ij.FB.api("/me", function (a) {
            Tx = Rx;
            Ux = ij.FB.getAuthResponse().accessToken;
            sy();
            ij.ⵠⵠⲆⲆᐃⵠⵠ();
          });
        }
      });
    }, -130, 430, ca | aa, fa);
    this.buttons[l++].view = v;
    ⵠⵠⵠⲆⲆⲆⲆ = 20000;
    this.ⲆⲆΔⵠΔⵠⵠ = function (a) {
      var b = yx.ⵠΔΔⵠⵠΔᐃ(a);
      var c = b * b * ⵠⵠⵠⲆⲆⲆⲆ;
      return (a -= c) / ((b + 1) * (b + 1) * ⵠⵠⵠⲆⲆⲆⲆ - c);
    };
    this.ⵠΔΔⵠⵠΔᐃ = function (a) {
      return Math.floor(Math.sqrt(a / ⵠⵠⵠⲆⲆⲆⲆ));
    };
    this.ⲆⵠᐃᐃⲆᐃⲆᐃΔ = function (a) {
      yx.ⲆⵠΔⲆᐃ = yx.ⵠΔΔⵠⵠΔᐃ(a);
      yx.ⲆⵠᐃⵠⲆᐃⲆ = yx.ⲆⲆΔⵠΔⵠⵠ(a);
      yx.ΔⲆⲆᐃᐃΔΔ = 0;
      yx.ᐃⲆⲆⲆⲆ = a;
    };
    this.ⲆΔᐃⵠⲆΔⲆⵠⲆ = function (b) {
      yx.buttons[yx.ᐃΔΔᐃⵠᐃⲆ].info.active = 0;
      yx.buttons[yx.ΔᐃᐃⵠΔᐃΔ].info.active = 1;
      yx.buttons[yx.ᐃⵠΔⵠⲆⲆⵠ].info.active = 1;
      t();
      if (b.name.indexOf("Starver#") === -1) {
        document.getElementById("account_nickname_input").value = ij.decodeURIComponent(ij.escape(ij.atob(b.name)));
      } else {
        document.getElementById("account_nickname_input").value = b.name;
      }
      yx.ᐃⲆⵠᐃΔ = b.bread;
      var c = b.seasons;
      var d = c[c.length - 1];
      yx.ᐃⲆΔⲆᐃⲆᐃ = c;
      A.ⲆⵠᐃᐃⲆᐃⲆᐃΔ(d.score);
      yx.ᐃⲆⲆⲆⲆ = d.score;
      yx.ΔᐃΔⵠⲆ = d.kill;
      yx.ᐃⲆᐃΔⲆᐃⵠ = d.death;
      yx.time = d.time;
      yx.ⲆⵠΔⲆⵠⲆⵠ = d.bestScore;
      yx.ⵠⲆᐃᐃⵠⲆᐃ = d.bestKill;
      yx.ΔᐃΔⵠⵠΔᐃ = d.bestTime;
      yx.ⵠΔⵠΔⲆΔΔ = d.scoreTotal;
      yx.ΔᐃᐃⵠᐃΔᐃ = b.firstName;
      document.getElementById("serverAddressInput").value = b.privateServerRegion + " : " + b.privateServer;
      if (yx.ΔᐃᐃⵠᐃΔᐃ === Va) {
        yx.ΔᐃᐃⵠᐃΔᐃ = 0;
      }
      yx.ⲆᐃΔⲆⵠᐃΔ = Date.now() + b.privateServerTime;
      if (Number(b.privateServerTime) > 0) {
        yx.ⲆᐃΔⲆⵠᐃΔ = Date.now() + Number(b.privateServerTime);
      }
      yx.ⵠⲆᐃΔᐃ = Date.now() + b.kit;
      if (Number(b.kit) > 0) {
        yx.ⵠⲆᐃΔᐃ = Date.now() + Number(b.kit);
      }
      var e = Δᐃᐃᐃ.ⵠᐃΔⲆΔ;
      for (var f = 0; f < b.skins.length; f++) {
        if ((i = b.skins[f]) > 0) {
          for (var g = 0; e.length > g; g++) {
            if (f === e[g].id) {
              A.unlock.ⲆΔⵠⵠ[g] = 1;
            }
          }
        }
      }
      e = Δᐃᐃᐃ.ΔᐃⲆΔᐃ;
      f = 0;
      for (; f < b.accessories.length; f++) {
        if ((i = b.accessories[f]) > 0) {
          for (g = 0; g < e.length; g++) {
            if (e[g].id === f) {
              A.unlock.ⵠⵠΔΔⵠ[g] = 1;
            }
          }
        }
      }
      e = Δᐃᐃᐃ.ᐃᐃΔⲆᐃ;
      f = 0;
      for (; f < b.books.length; f++) {
        if ((i = b.books[f]) > 0) {
          for (g = 0; e.length > g; g++) {
            if (e[g].id === f) {
              A.unlock.ⵠΔⲆΔᐃ[g] = 1;
            }
          }
        }
      }
      e = Δᐃᐃᐃ.ⵠᐃⵠⲆ;
      f = 0;
      for (; f < b.bags.length; f++) {
        if ((i = b.bags[f]) > 0) {
          for (g = 0; g < e.length; g++) {
            if (f === e[g].id) {
              A.unlock.ⲆⲆⲆᐃⵠ[g] = 1;
            }
          }
        }
      }
      e = Δᐃᐃᐃ.ᐃᐃⵠⵠΔ;
      f = 0;
      for (; f < b.crates.length; f++) {
        var i = b.crates[f];
        if (i > 0) {
          for (g = 0; e.length > g; g++) {
            if (f === e[g].id) {
              A.unlock.ⵠⲆΔΔⲆ[g] = 1;
              A.unlock.ΔⵠᐃⲆΔ[g] = 1;
            }
          }
        }
      }
    };
    this.ΔⲆⲆΔⲆᐃⵠΔⲆ = function () {
      ij.ⵠⵠⲆⲆᐃⵠⵠ = function () {
        P(I);
        (function (a) {
          var b = new XMLHttpRequest();
          b.open("GET", Ox + "login?token=" + Ux + "&type=" + Tx + (wf ? "&userId=" + wf.userId + "&userInfo=" + wf.userInfo : ""));
          b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
              a(JSON.parse(b.responseText));
            }
          };
          b.send();
        })(A.ⲆΔᐃⵠⲆΔⲆⵠⲆ);
      };
      if (Wx === 1) {
        ij.ⵠⵠⲆⲆᐃⵠⵠ();
      }
    };
    ij.ⲆⵠⲆⵠΔᐃⵠΔᐃ = function () {
      yx.buttons[yx.ᐃΔΔᐃⵠᐃⲆ].info.active = 1;
      yx.buttons[yx.ΔᐃᐃⵠΔᐃΔ].info.active = 0;
      yx.buttons[yx.ᐃⵠΔⵠⲆⲆⵠ].info.active = 0;
      P(I);
    };
    this.ⲆΔⲆΔⲆ = function () {
      return yx.buttons[yx.ΔᐃᐃⵠΔᐃΔ].info.active;
    };
    this.buttons[l] = pf(461, 105, 0, [ⵠᐃ.ᐃⵠΔⵠΔⲆⵠ, ⵠᐃ.ⲆⵠᐃⲆⵠΔⲆ, ⵠᐃ.ⲆΔⲆⵠᐃⲆⲆ], ea, 0, function () {
      if (A.ⲆΔⲆΔⲆ()) {
        P(f);
      } else {
        P(v);
      }
    }, -100, 80, ca | aa, fa);
    this.buttons[l++].view = c;
    this.buttons[l] = pf(157, 158, 0, [ⵠᐃ.ᐃΔⲆᐃⲆⵠⵠ, ⵠᐃ.ᐃᐃⲆⵠⲆΔᐃ, ⵠᐃ.ⲆⵠᐃΔⵠᐃⵠ], ea, 0, function () {
      ij.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, -35, 125, ca | aa, fa);
    this.buttons[l++].view = p;
    this.buttons[l] = pf(66, 73, 0, [ⵠᐃ.ⵠᐃΔⲆⵠΔᐃ, ⵠᐃ.ᐃⲆᐃⵠⵠⵠΔ, ⵠᐃ.ᐃΔⵠⵠᐃⲆⵠ], ea, 0, undefined, -68, 340, ca | aa, fa);
    this.buttons[l++].view = p;
    this.buttons[l] = pf(66, 73, 0, [ⵠᐃ.ⲆⲆΔⵠᐃⵠⲆ, ⵠᐃ.ⲆⲆⵠⲆⲆΔⲆ, ⵠᐃ.ᐃΔᐃⲆᐃⵠⵠ], ea, 0, undefined, -30, 340, ca | aa, fa);
    this.buttons[l++].view = p;
    this.ΔⲆᐃⵠΔᐃᐃⲆⲆ = l;
    this.buttons[l] = pf(97, 66, 0, [ⵠᐃ.ᐃΔᐃⲆⵠⵠⵠ, ⵠᐃ.ΔⲆΔⵠⲆᐃⲆ, ⵠᐃ.ⵠⲆᐃᐃⵠⲆΔ], ea, 0, function () {
      qy(ao, undefined, yx.ΔⵠᐃⲆⵠΔⲆ);
    }, -14, 151, ca | aa, fa);
    this.buttons[l++].view = J;
    this.ΔΔᐃᐃΔᐃⵠ = l;
    this.buttons[l] = pf(135, 66, 0, [ⵠᐃ.ΔⵠΔⵠᐃΔᐃ, ⵠᐃ.ᐃᐃⲆΔᐃᐃⲆ, ⵠᐃ.ᐃⵠΔⲆⵠᐃⲆ], ea, 0, function () {
      qy(undefined, Rg, yx.ΔΔᐃᐃΔᐃⵠ);
    }, 37.5, 151, ca | aa, fa);
    this.buttons[l++].view = J;
    this.ⲆᐃⲆⵠⲆⵠⵠ = l;
    this.buttons[l] = pf(160, 66, 0, [ⵠᐃ.ⵠᐃᐃᐃᐃⵠⲆ, ⵠᐃ.ᐃⵠᐃᐃⵠⲆᐃ, ⵠᐃ.ΔⵠᐃⵠⵠⲆⲆ], ea, 0, function () {
      qy(undefined, xj, yx.ⲆᐃⲆⵠⲆⵠⵠ);
    }, 107.5, 151, ca | aa, fa);
    this.buttons[l++].view = J;
    this.ΔⵠᐃⲆⵠΔⲆ = l;
    this.buttons[l] = pf(207, 66, 0, [ⵠᐃ.ΔⲆⲆΔᐃᐃⲆ, ⵠᐃ.ⵠΔⲆⲆΔΔᐃ, ⵠᐃ.ⵠⵠᐃΔᐃΔⲆ], ea, 0, function () {
      qy(Va, undefined, yx.ΔⵠᐃⲆⵠΔⲆ);
    }, 190.5, 151, ca | aa, fa);
    this.buttons[l++].view = J;
    this.ΔⵠⵠⵠⵠⲆᐃ = l;
    this.buttons[l] = pf(144, 66, 0, [ⵠᐃ.ⲆΔⵠⲆΔΔⲆ, ⵠᐃ.ⲆᐃⵠⲆᐃᐃᐃ, ⵠᐃ.ΔΔᐃΔⲆᐃⵠ], ea, 0, function () {
      qy(yx.ΔⵠⵠⵠⵠⲆᐃ);
    }, 103.5, 110, ca | aa, fa);
    this.buttons[l++].view = J;
    this.ⵠⵠᐃⲆΔⲆΔ = l;
    this.buttons[l] = pf(124, 66, 0, [ⵠᐃ.ᐃⵠⵠⲆᐃⵠᐃ, ⵠᐃ.ᐃⵠΔᐃΔΔⵠ, ⵠᐃ.ⲆᐃᐃᐃΔΔΔ], ea, 0, function () {
      qy(yx.ⵠⵠᐃⲆΔⲆΔ);
    }, 177.5, 110, ca | aa, fa);
    this.buttons[l++].view = J;
    this.ᐃΔᐃΔᐃⵠⲆ = l;
    this.buttons[l] = pf(104, 66, 0, [ⵠᐃ.ⲆⲆⲆⵠᐃᐃΔ, ⵠᐃ.ⵠᐃΔΔᐃᐃᐃ, ⵠᐃ.ⲆⵠΔΔⲆΔⲆ], ea, 0, function () {
      qy(yx.ᐃΔᐃΔᐃⵠⲆ);
    }, 242, 110, ca | aa, fa);
    this.buttons[l++].view = J;
    this.ΔΔΔⲆⲆΔᐃ = l;
    this.buttons[l] = pf(46, 51, 0, [ⵠᐃ.ⲆΔᐃᐃⲆⲆⵠ, ⵠᐃ.ⵠΔⲆΔᐃΔⵠ, ⵠᐃ.ᐃᐃΔⲆⲆⲆⵠ], ea, 0, function () {
      qy(lr, undefined, undefined, yx.ΔΔΔⲆⲆΔᐃ);
    }, -185, 528, ca | aa, fa);
    this.buttons[l++].view = J;
    this.ⵠⲆⲆⵠΔⲆΔ = l;
    this.buttons[l] = pf(46, 51, 0, [ⵠᐃ.ⵠᐃⲆⲆᐃΔⵠ, ⵠᐃ.ⵠⵠⲆΔⵠⵠᐃ, ⵠᐃ.ᐃᐃᐃᐃΔᐃΔ], ea, 0, function () {
      qy(ph, Ts, qg, yx.ⵠⲆⲆⵠΔⲆΔ);
    }, -149, 528, ca | aa, fa);
    this.buttons[l++].view = J;
    this.ⵠⲆᐃⵠⵠⵠⵠ = l;
    this.buttons[l] = pf(46, 51, 0, [ⵠᐃ.ᐃⲆᐃΔⵠⲆΔ, ⵠᐃ.ΔᐃᐃⲆᐃⲆⲆ, ⵠᐃ.ᐃᐃΔⵠⵠΔⲆ], ea, 0, function () {
      qy(Va, qg, Ts, yx.ⵠⲆᐃⵠⵠⵠⵠ);
    }, -113, 528, ca | aa, fa);
    this.buttons[l++].view = J;
    this.ΔⲆᐃⵠⲆΔΔ = l;
    this.buttons[l] = pf(46, 51, 0, [ⵠᐃ.ΔⲆⲆᐃⵠⵠΔ, ⵠᐃ.ⵠⵠΔΔΔᐃⵠ, ⵠᐃ.ΔᐃᐃⵠⵠⵠΔ], ea, 0, function () {
      qy(undefined, Rg, undefined, yx.ΔⲆᐃⵠⲆΔΔ);
    }, -77, 528, ca | aa, fa);
    this.buttons[l++].view = J;
    this.ΔⲆⲆΔⵠⵠΔ = l;
    this.buttons[l] = pf(46, 51, 0, [ⵠᐃ.ⲆᐃΔⵠΔⲆᐃ, ⵠᐃ.ⲆΔᐃΔⲆᐃⵠ, ⵠᐃ.ΔΔΔⵠⲆⲆᐃ], ea, 0, function () {
      qy(undefined, Va, undefined, yx.ΔⲆⲆΔⵠⵠΔ);
    }, -41, 528, ca | aa, fa);
    this.buttons[l++].view = J;
    this.ⵠⲆⲆΔⵠᐃΔ = l;
    this.buttons[l] = pf(46, 51, 0, [ⵠᐃ.ⵠⲆⲆⲆⵠΔΔ, ⵠᐃ.ⵠⲆΔⵠⲆᐃᐃ, ⵠᐃ.ⵠᐃΔⵠⲆΔᐃ], ea, 0, function () {
      qy(undefined, undefined, undefined, yx.ⵠⲆⲆΔⵠᐃΔ);
    }, -5, 528, ca | aa, fa);
    this.buttons[l++].view = J;
    this.buttons[l] = pf(232, 352, 0, [ⵠᐃ.ⲆⵠⲆⵠⵠⵠⵠ, ⵠᐃ.ᐃⵠᐃᐃⲆΔⲆ, ⵠᐃ.ᐃⲆᐃⲆΔΔᐃ], ea, 0, function () {
      cy(300);
    }, -330, 135, ca | aa, fa);
    this.buttons[l++].view = f;
    this.buttons[l] = pf(232, 352, 0, [ⵠᐃ.ⵠⵠⵠⵠⵠΔⵠ, ⵠᐃ.ⵠⵠⵠᐃΔⵠᐃ, ⵠᐃ.ⵠᐃⵠⵠΔⲆⲆ], ea, 0, function () {
      cy(600);
    }, -195, 135, ca | aa, fa);
    this.buttons[l++].view = f;
    this.buttons[l] = pf(243, 374, 0, [ⵠᐃ.ᐃᐃΔΔΔΔⵠ, ⵠᐃ.ᐃᐃⲆⵠⵠⵠⵠ, ⵠᐃ.ᐃΔΔⵠⲆΔⲆ], ea, 0, function () {
      cy(2600);
    }, -60, 130, ca | aa, fa);
    this.buttons[l++].view = f;
    this.buttons[l] = pf(232, 352, 0, [ⵠᐃ.ΔⵠⵠΔⵠⵠᐃ, ⵠᐃ.ⲆΔⲆᐃᐃᐃΔ, ⵠᐃ.ΔⵠⲆᐃᐃΔᐃ], ea, 0, function () {
      cy(7000);
    }, 78, 135, ca | aa, fa);
    this.buttons[l++].view = f;
    this.buttons[l] = pf(243, 374, 0, [ⵠᐃ.ⲆⲆΔᐃⵠΔⵠ, ⵠᐃ.ⵠΔⵠⵠⲆᐃⵠ, ⵠᐃ.ΔⵠⲆΔⵠⵠᐃ], ea, 0, function () {
      cy(20000);
    }, 213, 130, ca | aa, fa);
    this.buttons[l++].view = f;
    this.buttons[l] = pf(58, 64, 0, [ⵠᐃ.ᐃⲆΔⲆⲆΔⵠ, ⵠᐃ.ΔΔᐃⲆΔⲆᐃ, ⵠᐃ.ᐃⵠᐃⲆΔΔⲆ], ea, 0, function () {
      P(c);
    }, 300, 88, ca | aa, fa);
    this.buttons[l++].view = f;
    this.buttons[l] = pf(323, 112, 0, [ⵠᐃ.ΔΔⲆⵠⲆᐃΔ, ⵠᐃ.ⲆΔⵠⵠⲆⲆΔ, ⵠᐃ.ΔΔΔᐃⵠⵠᐃ], ea, 0, function () {
      P(T);
      Fa.ᐃⲆⲆⲆᐃ();
    }, -315, 185, ca | aa, fa);
    this.buttons[l++].view = m;
    this.buttons[l] = pf(323, 112, 0, [ⵠᐃ.ⲆΔⵠΔⵠⲆΔ, ⵠᐃ.ⲆⵠⲆΔΔⵠΔ, ⵠᐃ.ᐃⵠΔⲆⲆΔⵠ], ea, 0, function () {
      P(F);
      Ka.ᐃⲆⲆⲆᐃ();
    }, -315, 321, ca | aa, fa);
    this.buttons[l++].view = m;
    this.buttons[l] = pf(323, 112, 0, [ⵠᐃ.ᐃⵠⲆᐃⲆΔⵠ, ⵠᐃ.ⲆᐃᐃᐃⵠΔⵠ, ⵠᐃ.ⲆᐃᐃⲆⵠᐃⵠ], ea, 0, function () {
      P(Q);
      Ga.ᐃⲆⲆⲆᐃ();
    }, 153, 185, ca | aa, fa);
    this.buttons[l++].view = m;
    this.buttons[l] = pf(323, 112, 0, [ⵠᐃ.ᐃⲆⵠᐃΔᐃⵠ, ⵠᐃ.ΔⵠΔΔΔⵠᐃ, ⵠᐃ.ΔⲆᐃⵠΔΔⵠ], ea, 0, function () {
      P(V);
      Ha.ᐃⲆⲆⲆᐃ();
    }, 153, 321, ca | aa, fa);
    this.buttons[l++].view = m;
    this.buttons[l] = pf(323, 112, 0, [ⵠᐃ.ⲆᐃΔΔⵠᐃΔ, ⵠᐃ.ΔⵠᐃⵠⲆⲆᐃ, ⵠᐃ.ⲆⵠᐃᐃⲆⵠⲆ], ea, 0, function () {
      P(S);
      Ia.ᐃⲆⲆⲆᐃ();
    }, 153, 463, ca | aa, fa);
    this.buttons[l++].view = m;
    this.buttons[l] = pf(323, 112, 0, [ⵠᐃ.ⵠᐃⵠⲆΔΔⵠ, ⵠᐃ.ᐃⵠΔΔᐃΔⵠ, ⵠᐃ.ΔΔᐃᐃΔⵠΔ], ea, 0, function () {
      P(R);
      Ja.ᐃⲆⲆⲆᐃ();
    }, -315, 463, ca | aa, fa);
    this.buttons[l++].view = m;
    this.buttons[l] = pf(327, 117, 0, [ⵠᐃ.ᐃⲆᐃⵠⵠⵠᐃ, ⵠᐃ.ΔΔᐃΔΔⵠᐃ, ⵠᐃ.ⵠΔⵠⵠΔⲆᐃ], ea, 0, function () {
      P(O);
    }, 155, 70, Z, ha);
    this.buttons[l++].view = I;
    this.buttons[l] = pf(130, 129, 0, [ⵠᐃ.ΔΔⲆⲆⲆⲆⲆ, ⵠᐃ.ᐃΔⵠᐃΔⵠᐃ, ⵠᐃ.ⲆᐃⲆⲆⲆᐃΔ], ea, 0, function () {
      H(z, fa, "none");
      P(c);
    }, 10, 40, ca | aa, fa);
    this.buttons[l++].view = z;
    this.buttons[l] = pf(130, 129, 0, [ⵠᐃ.ΔΔⲆⲆⲆⲆⲆ, ⵠᐃ.ᐃΔⵠᐃΔⵠᐃ, ⵠᐃ.ⲆᐃⲆⲆⲆᐃΔ], ea, 0, function () {
      H(y, fa, "none");
      P(c);
    }, 10, 40, ca | aa, fa);
    this.buttons[l++].view = y;
    this.buttons[l] = pf(115, 73, 0, [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ea, 0, function () {
      P(c);
    }, 200, 140, ca | aa, fa);
    this.buttons[l++].view = W;
    this.buttons[l] = pf(524, 110, 0, [ⵠᐃ.ΔⵠΔⵠⲆᐃΔ, ⵠᐃ.ⲆΔᐃΔΔⵠᐃ, ⵠᐃ.ⲆⲆΔΔⲆᐃΔ], ea, 0, function () {
      py("Atlanta");
    }, -265, 300, ca | aa, fa);
    this.buttons[l++].view = W;
    this.buttons[l] = pf(523, 110, 0, [ⵠᐃ.ᐃᐃᐃⵠⲆΔΔ, ⵠᐃ.ΔᐃᐃΔⲆΔⲆ, ⵠᐃ.ᐃᐃᐃⵠⵠᐃΔ], ea, 0, function () {
      py("LosAngeles");
    }, 5, 300, ca | aa, fa);
    this.buttons[l++].view = W;
    this.buttons[l] = pf(344, 110, 0, [ⵠᐃ.ⵠⵠᐃᐃⲆⵠⲆ, ⵠᐃ.ⲆᐃⵠᐃΔⵠⵠ, ⵠᐃ.ΔΔᐃᐃΔΔⲆ], ea, 0, function () {
      py("Frankfurt");
    }, -265, 365, ca | aa, fa);
    this.buttons[l++].view = W;
    this.buttons[l] = pf(344, 110, 0, [ⵠᐃ.ⲆⵠⲆⲆⲆᐃᐃ, ⵠᐃ.ΔⲆⵠᐃΔⲆΔ, ⵠᐃ.ⲆⲆᐃⵠⲆΔΔ], ea, 0, function () {
      py("Osaka");
    }, 100, 365, ca | aa, fa);
    this.buttons[l++].view = W;
    this.buttons[l] = pf(344, 110, 0, [ⵠᐃ.ΔⵠⵠΔⲆⵠⵠ, ⵠᐃ.ᐃΔⵠΔⵠΔΔ, ⵠᐃ.ⵠⵠⵠΔΔⲆΔ], ea, 0, function () {
      py("Sydney");
    }, -86, 365, ca | aa, fa);
    this.buttons[l++].view = W;
    this.buttons[l] = pf(115, 73, 0, [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ea, 0, function () {
      P(W);
    }, 224, 140, ca | aa, fa);
    this.buttons[l++].view = G;
    this.buttons[l] = pf(230, 352, 0, [ⵠᐃ.ⲆⵠⵠΔⵠⵠⵠ, ⵠᐃ.ⵠΔⲆᐃΔᐃᐃ, ⵠᐃ.ᐃΔⵠⲆᐃⵠⵠ], ea, 0, function () {
      cy(350);
    }, -280, 240, ca | aa, fa);
    this.buttons[l++].view = G;
    this.buttons[l] = pf(230, 352, 0, [ⵠᐃ.ⲆΔΔΔⵠⵠᐃ, ⵠᐃ.ⲆⲆⵠΔᐃᐃⲆ, ⵠᐃ.ⲆᐃΔⵠⵠΔⵠ], ea, 0, function () {
      cy(700);
    }, -130, 240, ca | aa, fa);
    this.buttons[l++].view = G;
    this.buttons[l] = pf(230, 352, 0, [ⵠᐃ.ΔΔⲆΔⵠⵠⲆ, ⵠᐃ.ⲆᐃⲆⵠⲆⲆⵠ, ⵠᐃ.ⵠΔΔᐃΔΔΔ], ea, 0, function () {
      cy(1400);
    }, 20, 240, ca | aa, fa);
    this.buttons[l++].view = G;
    this.buttons[l] = pf(230, 352, 0, [ⵠᐃ.ⵠᐃΔΔΔⲆⵠ, ⵠᐃ.ⵠΔⵠⵠΔᐃⲆ, ⵠᐃ.ΔⲆΔⵠⲆΔΔ], ea, 0, function () {
      cy(3000);
    }, 170, 240, ca | aa, fa);
    this.buttons[l++].view = G;
    this.buttons[l] = pf(105, 119, 0, [ⵠᐃ.ⵠΔᐃᐃⵠΔΔ, ⵠᐃ.ᐃᐃⲆⲆᐃΔⵠ, ⵠᐃ.ⵠᐃᐃⲆⵠⲆⲆ], ea, 0, function () {
      const a = document.getElementById("serverAddressInput").value.split(" : ");
      const b = ij.document.createElement("textarea");
      b.value = xf + "?server=" + a[1] + "&region=" + a[0];
      ij.document.body.appendChild(b);
      b.select();
      ij.document.execCommand("copy");
      ij.document.body.removeChild(b);
    }, 105, 310, ca | aa, fa);
    this.buttons[l++].view = q;
    this.buttons[l] = pf(105, 119, 0, [ⵠᐃ.ΔⲆᐃⲆΔⵠΔ, ⵠᐃ.ΔᐃⲆⲆⲆΔⵠ, ⵠᐃ.ⵠⲆⲆⲆᐃᐃᐃ], ea, 0, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Ox + "rebootServer?token=" + Ux + "&userid=" + Vx);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = xf + "?server=" + a[1] + "&region=" + a[0];
          }
        };
        a.send();
      })();
    }, 235, 310, ca | aa, fa);
    this.buttons[l++].view = q;
    this.buttons[l] = pf(105, 119, 0, [ⵠᐃ.ⲆᐃᐃᐃⵠΔΔ, ⵠᐃ.ΔⵠΔⲆᐃᐃⲆ, ⵠᐃ.ⵠΔⲆΔⵠΔᐃ], ea, 0, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Ox + "restartServer?token=" + Ux + "&userid=" + Vx);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = xf + "?server=" + a[1] + "&region=" + a[0];
          }
        };
        a.send();
      })();
    }, 170, 310, ca | aa, fa);
    this.buttons[l++].view = q;
    this.buttons[l] = pf(204, 115, 0, [ⵠᐃ.ᐃⵠΔⵠᐃⲆⵠ, ⵠᐃ.ⵠΔΔⲆΔⵠᐃ, ⵠᐃ.ᐃΔΔᐃΔⲆⵠ], ea, 0, function () {
      ij.open("./commands.html", "_blank");
    }, -265, 490, ca | aa, fa);
    this.buttons[l++].view = q;
    this.buttons[l] = pf(145, 69, 0, [ⵠᐃ.ᐃⲆᐃⲆᐃᐃΔ, ⵠᐃ.ᐃⵠᐃΔⲆⵠΔ, ⵠᐃ.ᐃⲆᐃᐃᐃᐃⵠ], ea, 0, function () {
      P(N);
    }, -210, 170, ca | aa, fa);
    this.buttons[l++].view = c;
    this.buttons[l] = pf(145, 69, 0, [ⵠᐃ.ΔΔⵠⲆΔⲆⵠ, ⵠᐃ.ⵠᐃΔⲆⵠⲆⵠ, ⵠᐃ.ⲆᐃᐃᐃΔᐃᐃ], ea, 0, function () {
      P(M);
    }, 70, 170, ca | aa, fa);
    this.buttons[l++].view = c;
    this.buttons[l] = pf(145, 69, 0, [ⵠᐃ.ⵠⲆᐃⵠᐃⵠᐃ, ⵠᐃ.ⵠΔΔⲆΔΔΔ, ⵠᐃ.ⵠⵠᐃⵠⵠᐃⵠ], ea, 0, function () {
      P(k);
    }, 70, 204, ca | aa, fa);
    this.buttons[l++].view = c;
    this.buttons[l] = pf(145, 69, 0, [ⵠᐃ.ⵠⲆⵠᐃΔⲆΔ, ⵠᐃ.ⲆⲆⵠⵠⵠⵠⵠ, ⵠᐃ.ⲆΔⵠᐃⵠⲆΔ], ea, 0, function () {
      P(B);
    }, -210, 204, ca | aa, fa);
    this.buttons[l++].view = c;
    this.buttons[l] = pf(145, 69, 0, [ⵠᐃ.ⵠⲆⵠᐃΔⲆΔ, ⵠᐃ.ⲆⲆⵠⵠⵠⵠⵠ, ⵠᐃ.ⲆΔⵠᐃⵠⲆΔ], ea, 0, function () {
      P(E);
    }, 70, 238, ca | aa, fa);
    this.buttons[l++].view = c;
    this.buttons[l] = pf(145, 69, 0, [ⵠᐃ.ⵠⲆⵠᐃΔⲆΔ, ⵠᐃ.ⲆⲆⵠⵠⵠⵠⵠ, ⵠᐃ.ⲆΔⵠᐃⵠⲆΔ], ea, 0, function () {
      if (A.ⲆΔⲆΔⲆ()) {
        my(0, 300);
      } else {
        P(v);
      }
    }, 307, 205, ca | aa, fa);
    this.buttons[l++].view = c;
    this.buttons[l] = pf(145, 69, 0, [ⵠᐃ.ᐃᐃⲆᐃᐃⲆⵠ, ⵠᐃ.ᐃᐃᐃⵠΔᐃⲆ, ⵠᐃ.ΔᐃΔⲆΔⵠⵠ], ea, 0, function () {
      P(x);
    }, -210, 238, ca | aa, fa);
    this.buttons[l++].view = c;
    this.buttons[l] = pf(145, 69, 0, [ⵠᐃ.ᐃᐃⲆᐃᐃⲆⵠ, ⵠᐃ.ᐃᐃᐃⵠΔᐃⲆ, ⵠᐃ.ΔᐃΔⲆΔⵠⵠ], ea, 0, function () {
      if (A.ⲆΔⲆΔⲆ()) {
        my(1, 600);
      } else {
        P(v);
      }
    }, 307, 239, ca | aa, fa);
    this.buttons[l++].view = c;
    this.buttons[l] = pf(192, 101, 0, [ⵠᐃ.ⲆⵠⵠⵠⲆᐃⵠ, ⵠᐃ.ⲆⲆⵠⲆⵠᐃⵠ, ⵠᐃ.ᐃᐃᐃΔⵠΔⵠ], ea, 0, function () {
      fy();
    }, -100, 250, ca | aa, fa);
    this.buttons[l++].view = L;
    this.buttons[l] = pf(192, 104, 0, [ⵠᐃ.ⲆΔⵠⲆⵠⲆΔ, ⵠᐃ.ΔΔΔⲆᐃⲆⲆ, ⵠᐃ.ΔⲆⲆΔᐃⲆᐃ], ea, 0, function () {
      fy();
    }, -100, 239, ca | aa, fa);
    this.buttons[l++].view = j;
    this.buttons[l] = pf(192, 101, 0, [ⵠᐃ.ΔᐃⲆⵠᐃⵠΔ, ⵠᐃ.ΔᐃΔⲆᐃⵠᐃ, ⵠᐃ.ΔⵠᐃⵠⲆⵠⲆ], ea, 0, function () {
      P(b);
    }, 10, 250, ca | aa, fa);
    this.buttons[l++].view = L;
    this.buttons[l] = pf(192, 104, 0, [ⵠᐃ.ᐃΔⲆⲆΔⵠᐃ, ⵠᐃ.ᐃⲆᐃΔⵠⵠΔ, ⵠᐃ.ⲆΔⵠⲆΔΔⵠ], ea, 0, function () {
      P(b);
    }, 10, 239, ca | aa, fa);
    this.buttons[l++].view = j;
    ⵠΔΔⵠⲆ = [];
    ⵠΔΔⵠⲆ[ΔΔⵠ.ᐃⵠⲆⲆⲆ] = [ⵠᐃ.ⵠⵠᐃⵠⵠⵠΔ, ⵠᐃ.ᐃⵠΔⵠⲆⵠᐃ, ⵠᐃ.ᐃⵠᐃⲆⵠⵠᐃ];
    ⵠΔΔⵠⲆ[ΔΔⵠ.ⲆⵠᐃΔ] = [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ];
    ⵠΔΔⵠⲆ[ΔΔⵠ.ⵠⵠΔΔ] = [ⵠᐃ.ⵠΔΔⵠⵠⵠⲆ, ⵠᐃ.ⲆΔⵠᐃⲆⲆᐃ, ⵠᐃ.ᐃᐃⲆΔⲆⲆᐃ];
    ⵠΔΔⵠⲆ[ΔΔⵠ.ᐃΔᐃⲆ] = [ⵠᐃ.ᐃΔᐃΔᐃⲆᐃ, ⵠᐃ.ΔΔΔⵠΔⵠΔ, ⵠᐃ.ⵠΔΔⵠⵠⵠⵠ];
    ⵠΔΔⵠⲆ[ΔΔⵠ.ⲆᐃⲆᐃ] = [ⵠᐃ.ᐃⵠᐃᐃⵠⵠᐃ, ⵠᐃ.ᐃⲆΔⲆⲆΔΔ, ⵠᐃ.ᐃⵠⵠⲆΔⵠᐃ];
    ⵠΔΔⵠⲆ[ΔΔⵠ.ⲆΔΔᐃ] = [ⵠᐃ.ᐃΔΔᐃΔᐃΔ, ⵠᐃ.ⵠΔΔⲆⵠᐃⲆ, ⵠᐃ.ⵠⵠⵠⵠΔΔᐃ];
    ⵠΔΔⵠⲆ[ΔΔⵠ.ⲆᐃⲆⲆ] = [ⵠᐃ.ᐃⵠᐃⲆⵠΔⵠ, ⵠᐃ.ⲆᐃⵠⵠΔⲆⵠ, ⵠᐃ.ⲆⵠΔᐃⲆⵠᐃ];
    ⵠΔΔⵠⲆ[ΔΔⵠ.ᐃΔⵠⵠⵠ] = [ⵠᐃ.ⲆΔᐃΔⲆⲆΔ, ⵠᐃ.ᐃᐃΔⵠⲆⲆΔ, ⵠᐃ.ᐃΔᐃⲆⵠᐃⲆ];
    ⵠΔΔⵠⲆ[ΔΔⵠ.ᐃⲆΔᐃΔᐃⲆ] = [ⵠᐃ.ⲆΔⵠΔⵠΔⵠ, ⵠᐃ.ΔΔΔΔΔΔΔ, ⵠᐃ.ᐃⵠΔⲆⵠᐃΔ];
    ⵠΔᐃⵠᐃᐃⲆ = l;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, -29, 205, ca | aa, fa);
    this.buttons[l++].view = T;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, Il, -29, 300, ca | aa, fa);
    this.buttons[l++].view = T;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, -29, 395, ca | aa, fa);
    this.buttons[l++].view = T;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, Us, 65, 205, ca | aa, fa);
    this.buttons[l++].view = T;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 65, 300, ca | aa, fa);
    this.buttons[l++].view = T;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 65, 395, ca | aa, fa);
    this.buttons[l++].view = T;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 159, 205, ca | aa, fa);
    this.buttons[l++].view = T;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, Il, 159, 300, ca | aa, fa);
    this.buttons[l++].view = T;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 159, 395, ca | aa, fa);
    this.buttons[l++].view = T;
    this.buttons[l] = pf(39, 122, 0, [ⵠᐃ.ⲆᐃⵠⵠᐃⲆᐃ, ⵠᐃ.ⲆⲆⵠⲆⲆᐃⵠ, ⵠᐃ.ᐃΔΔⵠⲆΔⵠ], ea, 0, undefined, -61, 315, ca | aa, fa);
    this.buttons[l++].view = T;
    this.buttons[l] = pf(39, 122, 0, [ⵠᐃ.Ⲇᐃᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃΔΔⲆΔΔⲆ, ⵠᐃ.Ⲇᐃᐃⵠᐃⵠᐃ], ea, 0, undefined, 260, 315, ca | aa, fa);
    this.buttons[l++].view = T;
    this.buttons[l] = pf(115, 73, 0, [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ea, 0, function () {
      P(m);
    }, -320, 470, ca | aa, fa);
    this.buttons[l++].view = T;
    ⲆⵠⵠⵠΔΔⵠΔᐃ = l;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, ao, -29, 205, ca | aa, fa);
    this.buttons[l++].view = F;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, _o, -29, 300, ca | aa, fa);
    this.buttons[l++].view = F;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, -29, 395, ca | aa, fa);
    this.buttons[l++].view = F;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 65, 205, ca | aa, fa);
    this.buttons[l++].view = F;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, Ur, 65, 300, ca | aa, fa);
    this.buttons[l++].view = F;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, Il, 65, 395, ca | aa, fa);
    this.buttons[l++].view = F;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, Rg, 159, 205, ca | aa, fa);
    this.buttons[l++].view = F;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, Ur, 159, 300, ca | aa, fa);
    this.buttons[l++].view = F;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 159, 395, ca | aa, fa);
    this.buttons[l++].view = F;
    this.buttons[l] = pf(39, 122, 0, [ⵠᐃ.ⲆᐃⵠⵠᐃⲆᐃ, ⵠᐃ.ⲆⲆⵠⲆⲆᐃⵠ, ⵠᐃ.ᐃΔΔⵠⲆΔⵠ], ea, 0, undefined, -61, 315, ca | aa, fa);
    this.buttons[l++].view = F;
    this.buttons[l] = pf(39, 122, 0, [ⵠᐃ.Ⲇᐃᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃΔΔⲆΔΔⲆ, ⵠᐃ.Ⲇᐃᐃⵠᐃⵠᐃ], ea, 0, undefined, 260, 315, ca | aa, fa);
    this.buttons[l++].view = F;
    this.buttons[l] = pf(115, 73, 0, [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ea, 0, function () {
      P(m);
    }, -320, 470, ca | aa, fa);
    this.buttons[l++].view = F;
    ⲆⲆᐃⵠⵠΔΔⵠᐃ = l;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, Us, -29, 205, ca | aa, fa);
    this.buttons[l++].view = R;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, zo, -29, 300, ca | aa, fa);
    this.buttons[l++].view = R;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, -29, 395, ca | aa, fa);
    this.buttons[l++].view = R;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 65, 205, ca | aa, fa);
    this.buttons[l++].view = R;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, Us, 65, 300, ca | aa, fa);
    this.buttons[l++].view = R;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 65, 395, ca | aa, fa);
    this.buttons[l++].view = R;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 159, 205, ca | aa, fa);
    this.buttons[l++].view = R;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 159, 300, ca | aa, fa);
    this.buttons[l++].view = R;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, xj, 159, 395, ca | aa, fa);
    this.buttons[l++].view = R;
    this.buttons[l] = pf(39, 122, 0, [ⵠᐃ.ⲆᐃⵠⵠᐃⲆᐃ, ⵠᐃ.ⲆⲆⵠⲆⲆᐃⵠ, ⵠᐃ.ᐃΔΔⵠⲆΔⵠ], ea, 0, cq, -61, 315, ca | aa, fa);
    this.buttons[l++].view = R;
    this.buttons[l] = pf(39, 122, 0, [ⵠᐃ.Ⲇᐃᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃΔΔⲆΔΔⲆ, ⵠᐃ.Ⲇᐃᐃⵠᐃⵠᐃ], ea, 0, lr, 260, 315, ca | aa, fa);
    this.buttons[l++].view = R;
    this.buttons[l] = pf(115, 73, 0, [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ea, 0, function () {
      P(m);
    }, -320, 470, ca | aa, fa);
    this.buttons[l++].view = R;
    ΔᐃᐃⲆⲆΔᐃᐃⵠ = l;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, Ur, -29, 205, ca | aa, fa);
    this.buttons[l++].view = Q;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, -29, 300, ca | aa, fa);
    this.buttons[l++].view = Q;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, xj, -29, 395, ca | aa, fa);
    this.buttons[l++].view = Q;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 65, 205, ca | aa, fa);
    this.buttons[l++].view = Q;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 65, 300, ca | aa, fa);
    this.buttons[l++].view = Q;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, Fk, 65, 395, ca | aa, fa);
    this.buttons[l++].view = Q;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 159, 205, ca | aa, fa);
    this.buttons[l++].view = Q;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 159, 300, ca | aa, fa);
    this.buttons[l++].view = Q;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, ph, 159, 395, ca | aa, fa);
    this.buttons[l++].view = Q;
    this.buttons[l] = pf(39, 122, 0, [ⵠᐃ.ⲆᐃⵠⵠᐃⲆᐃ, ⵠᐃ.ⲆⲆⵠⲆⲆᐃⵠ, ⵠᐃ.ᐃΔΔⵠⲆΔⵠ], ea, 0, undefined, -61, 315, ca | aa, fa);
    this.buttons[l++].view = Q;
    this.buttons[l] = pf(39, 122, 0, [ⵠᐃ.Ⲇᐃᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃΔΔⲆΔΔⲆ, ⵠᐃ.Ⲇᐃᐃⵠᐃⵠᐃ], ea, 0, lj, 260, 315, ca | aa, fa);
    this.buttons[l++].view = Q;
    this.buttons[l] = pf(115, 73, 0, [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ea, 0, function () {
      P(m);
    }, -320, 470, ca | aa, fa);
    this.buttons[l++].view = Q;
    ⲆⲆⲆⵠΔⵠΔᐃⲆ = l;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, Us, -29, 205, ca | aa, fa);
    this.buttons[l++].view = V;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, Il, -29, 300, ca | aa, fa);
    this.buttons[l++].view = V;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, -29, 395, ca | aa, fa);
    this.buttons[l++].view = V;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, Fk, 65, 205, ca | aa, fa);
    this.buttons[l++].view = V;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, Rg, 65, 300, ca | aa, fa);
    this.buttons[l++].view = V;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 65, 395, ca | aa, fa);
    this.buttons[l++].view = V;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, bg, 159, 205, ca | aa, fa);
    this.buttons[l++].view = V;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, cq, 159, 300, ca | aa, fa);
    this.buttons[l++].view = V;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 159, 395, ca | aa, fa);
    this.buttons[l++].view = V;
    this.buttons[l] = pf(39, 122, 0, [ⵠᐃ.ⲆᐃⵠⵠᐃⲆᐃ, ⵠᐃ.ⲆⲆⵠⲆⲆᐃⵠ, ⵠᐃ.ᐃΔΔⵠⲆΔⵠ], ea, 0, zo, -61, 315, ca | aa, fa);
    this.buttons[l++].view = V;
    this.buttons[l] = pf(39, 122, 0, [ⵠᐃ.Ⲇᐃᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃΔΔⲆΔΔⲆ, ⵠᐃ.Ⲇᐃᐃⵠᐃⵠᐃ], ea, 0, undefined, 260, 315, ca | aa, fa);
    this.buttons[l++].view = V;
    this.buttons[l] = pf(115, 73, 0, [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ea, 0, function () {
      P(m);
    }, -320, 470, ca | aa, fa);
    this.buttons[l++].view = V;
    ΔⲆᐃᐃⵠΔⲆᐃᐃ = l;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, -29, 205, ca | aa, fa);
    this.buttons[l++].view = S;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, -29, 300, ca | aa, fa);
    this.buttons[l++].view = S;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, Rg, -29, 395, ca | aa, fa);
    this.buttons[l++].view = S;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 65, 205, ca | aa, fa);
    this.buttons[l++].view = S;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 65, 300, ca | aa, fa);
    this.buttons[l++].view = S;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, xk, 65, 395, ca | aa, fa);
    this.buttons[l++].view = S;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 159, 205, ca | aa, fa);
    this.buttons[l++].view = S;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, Il, 159, 300, ca | aa, fa);
    this.buttons[l++].view = S;
    this.buttons[l] = pf(178, 182, 0, [ⵠᐃ.ⲆΔⵠᐃ, ⵠᐃ.ᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠ], ea, 0, undefined, 159, 395, ca | aa, fa);
    this.buttons[l++].view = S;
    this.buttons[l] = pf(39, 122, 0, [ⵠᐃ.ⲆᐃⵠⵠᐃⲆᐃ, ⵠᐃ.ⲆⲆⵠⲆⲆᐃⵠ, ⵠᐃ.ᐃΔΔⵠⲆΔⵠ], ea, 0, $k, -61, 315, ca | aa, fa);
    this.buttons[l++].view = S;
    this.buttons[l] = pf(39, 122, 0, [ⵠᐃ.Ⲇᐃᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃΔΔⲆΔΔⲆ, ⵠᐃ.Ⲇᐃᐃⵠᐃⵠᐃ], ea, 0, Rg, 260, 315, ca | aa, fa);
    this.buttons[l++].view = S;
    this.buttons[l] = pf(115, 73, 0, [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ea, 0, function () {
      P(m);
    }, -320, 470, ca | aa, fa);
    this.buttons[l++].view = S;
    this.buttons[l] = pf(260, 260, 0, [ⵠᐃ.ᐃⲆⲆⲆⵠᐃⲆ, ⵠᐃ.ΔΔᐃⲆΔᐃⵠ, ⵠᐃ.ⲆⵠⲆⵠⵠⵠⲆ], ea, 0, function () {
      if (A.ⲆΔⲆΔⲆ()) {
        ty(3, 50);
      } else {
        P(v);
      }
    }, -65, 197, ca | aa, fa);
    this.buttons[l++].view = M;
    this.buttons[l] = pf(115, 73, 0, [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ea, 0, function () {
      P(c);
    }, 309, 180, ca | aa, fa);
    this.buttons[l++].view = M;
    this.buttons[l] = pf(260, 260, 0, [ⵠᐃ.ΔΔΔⵠΔⲆⲆ, ⵠᐃ.ⵠⵠⲆᐃᐃⵠΔ, ⵠᐃ.ⲆᐃΔⵠⲆⲆᐃ], ea, 0, function () {
      if (A.ⲆΔⲆΔⲆ()) {
        ty(0, 100);
      } else {
        P(v);
      }
    }, -65, 197, ca | aa, fa);
    this.buttons[l++].view = N;
    this.buttons[l] = pf(115, 73, 0, [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ea, 0, function () {
      P(c);
    }, 309, 180, ca | aa, fa);
    this.buttons[l++].view = N;
    this.buttons[l] = pf(260, 260, 0, [ⵠᐃ.ᐃΔΔⲆⲆⲆⵠ, ⵠᐃ.ⵠΔⲆΔᐃΔᐃ, ⵠᐃ.ⲆⵠⵠⲆᐃⲆⵠ], ea, 0, function () {
      if (A.ⲆΔⲆΔⲆ()) {
        ty(4, 150);
      } else {
        P(v);
      }
    }, -65, 197, ca | aa, fa);
    this.buttons[l++].view = k;
    this.buttons[l] = pf(115, 73, 0, [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ea, 0, function () {
      P(c);
    }, 309, 180, ca | aa, fa);
    this.buttons[l++].view = k;
    this.buttons[l] = pf(260, 260, 0, [ⵠᐃ.ᐃⲆΔⵠᐃᐃⵠ, ⵠᐃ.ΔᐃΔⵠᐃⲆⲆ, ⵠᐃ.ⵠΔⲆⲆΔⲆⲆ], ea, 0, function () {
      if (A.ⲆΔⲆΔⲆ()) {
        ty(1, 300);
      } else {
        P(v);
      }
    }, -65, 197, ca | aa, fa);
    this.buttons[l++].view = B;
    this.buttons[l] = pf(115, 73, 0, [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ea, 0, function () {
      P(c);
    }, 309, 180, ca | aa, fa);
    this.buttons[l++].view = B;
    this.buttons[l] = pf(260, 260, 0, [ⵠᐃ.ᐃⵠⲆⵠⵠΔⲆ, ⵠᐃ.ᐃⵠⵠⵠⲆⲆⵠ, ⵠᐃ.ⲆⲆΔⲆΔⲆⵠ], ea, 0, function () {
      if (A.ⲆΔⲆΔⲆ()) {
        ty(2, 600);
      } else {
        P(v);
      }
    }, -65, 197, ca | aa, fa);
    this.buttons[l++].view = x;
    this.buttons[l] = pf(115, 73, 0, [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ea, 0, function () {
      P(c);
    }, 309, 180, ca | aa, fa);
    this.buttons[l++].view = x;
    this.buttons[l] = pf(260, 260, 0, [ⵠᐃ.ᐃⲆΔⵠᐃᐃⵠ, ⵠᐃ.ΔᐃΔⵠᐃⲆⲆ, ⵠᐃ.ⵠΔⲆⲆΔⲆⲆ], ea, 0, function () {
      if (A.ⲆΔⲆΔⲆ()) {
        ty(5, 300);
      } else {
        P(v);
      }
    }, -65, 197, ca | aa, fa);
    this.buttons[l++].view = E;
    this.buttons[l] = pf(115, 73, 0, [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.Δᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃⲆᐃⲆ], ea, 0, function () {
      P(c);
    }, 309, 180, ca | aa, fa);
    this.buttons[l++].view = E;
    var ta = l;
    this.buttons[l] = pf(46, 51, 0, [ⵠᐃ.ᐃΔΔⲆᐃⵠⵠ, ⵠᐃ.ΔΔᐃⲆⲆⲆⲆ, ⵠᐃ.Δⵠᐃᐃⵠⵠᐃ], ea, 0, function () {
      ra(qg, 0);
    }, -305, 132, ca | aa, fa);
    this.buttons[l++].view = b;
    var va = l;
    this.buttons[l] = pf(46, 51, 0, [ⵠᐃ.ⲆⲆΔᐃⵠⲆΔ, ⵠᐃ.ⲆⵠΔⵠⲆⵠⲆ, ⵠᐃ.ᐃⵠΔⵠΔᐃΔ], ea, 0, function () {
      ra(undefined, 1);
    }, -273, 132, ca | aa, fa);
    this.buttons[l++].view = b;
    var wa = l;
    this.buttons[l] = pf(46, 51, 0, [ⵠᐃ.ⵠⲆΔΔΔΔⵠ, ⵠᐃ.ⵠⲆΔᐃΔᐃᐃ, ⵠᐃ.ΔⲆᐃⵠᐃΔΔ], ea, 0, function () {
      ra(undefined, 2);
    }, -241, 132, ca | aa, fa);
    this.buttons[l++].view = b;
    var xa = l;
    this.buttons[l] = pf(46, 51, 0, [ⵠᐃ.ⵠᐃⵠⲆᐃⲆᐃ, ⵠᐃ.ⲆᐃⵠⵠΔⲆᐃ, ⵠᐃ.ⵠᐃⲆⲆᐃⵠⵠ], ea, 0, function () {
      ra(undefined, 3);
    }, -305, 165, ca | aa, fa);
    this.buttons[l++].view = b;
    var ya = l;
    this.buttons[l] = pf(46, 51, 0, [ⵠᐃ.ⲆⲆᐃⲆⵠΔΔ, ⵠᐃ.ΔΔᐃⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠᐃⲆⵠⲆⲆ], ea, 0, function () {
      ra(Jh, 4);
    }, -273, 165, ca | aa, fa);
    this.buttons[l++].view = b;
    var za = l;
    this.buttons[l] = pf(46, 51, 0, [ⵠᐃ.ⲆᐃᐃⲆⲆⲆⲆ, ⵠᐃ.ᐃⵠᐃⲆⲆⵠΔ, ⵠᐃ.ᐃⲆΔⲆⵠⲆⲆ], ea, 0, function () {
      ra(undefined, 5);
    }, -241, 165, ca | aa, fa);
    this.buttons[l++].view = b;
    var Aa = l;
    this.buttons[l] = pf(460, 73, 0, [ⵠᐃ.ⲆⲆΔᐃΔᐃⵠ, ⵠᐃ.ⲆⵠᐃᐃⵠⵠΔ, ⵠᐃ.ⵠⲆⵠᐃᐃΔᐃ], ea, 0, function () {
      ra(-1);
    }, -180, 170, ca | aa, fa);
    this.buttons[l++].view = b;
    var Ba = l;
    this.buttons[l] = pf(222, 68, 0, [ⵠᐃ.ⲆᐃΔⵠⲆⲆⲆ, ⵠᐃ.ⲆⵠΔⵠⵠᐃΔ, ⵠᐃ.ⵠΔⲆᐃⲆⵠⲆ], ea, 0, function () {
      ra(0);
    }, -180, 215, ca | aa, fa);
    this.buttons[l++].view = b;
    var Ca = l;
    this.buttons[l] = pf(222, 68, 0, [ⵠᐃ.ᐃⵠⵠⲆΔΔΔ, ⵠᐃ.ΔⵠⲆᐃⲆⵠΔ, ⵠᐃ.ΔⲆᐃⵠⲆⵠⵠ], ea, 0, function () {
      ra(4);
    }, -180, 260, ca | aa, fa);
    this.buttons[l++].view = b;
    var Da = l;
    this.buttons[l] = pf(222, 68, 0, [ⵠᐃ.ⲆⲆᐃΔⵠⵠΔ, ⵠᐃ.ⲆᐃΔⲆⲆⵠⲆ, ⵠᐃ.ⵠⲆⲆⵠⲆᐃⵠ], ea, 0, function () {
      ra(2);
    }, -60, 215, ca | aa, fa);
    this.buttons[l++].view = b;
    var Ea = l;
    this.buttons[l] = pf(222, 68, 0, [ⵠᐃ.ⵠᐃΔᐃⵠΔⵠ, ⵠᐃ.ᐃⲆΔΔᐃⵠΔ, ⵠᐃ.ⲆΔΔⵠᐃⵠⵠ], ea, 0, function () {
      ra(3);
    }, -60, 260, ca | aa, fa);
    this.buttons[l++].view = b;
    this.ᐃⵠⵠⵠⲆⵠΔ = l;
    this.buttons[l] = pf(143, 66, 0, [ⵠᐃ.ⲆΔᐃΔΔΔΔ, ⵠᐃ.ᐃᐃⵠᐃΔΔⵠ, ⵠᐃ.ᐃΔᐃⲆⵠⲆΔ], ea, 0, function () {
      qy(undefined, yx.ᐃⵠⵠⵠⲆⵠΔ);
    }, -298, 110, ca | aa, fa);
    this.buttons[l++].view = J;
    this.ᐃΔᐃΔⲆᐃⵠ = l;
    this.buttons[l] = pf(104, 66, 0, [ⵠᐃ.ᐃΔᐃⲆⲆᐃΔ, ⵠᐃ.ⲆΔⲆⵠⲆⵠΔ, ⵠᐃ.ᐃΔΔⵠΔΔⲆ], ea, 0, function () {
      qy(undefined, yx.ᐃΔᐃΔⲆᐃⵠ);
    }, -223, 110, ca | aa, fa);
    this.buttons[l++].view = J;
    this.ᐃΔⲆⵠᐃᐃⵠ = l;
    this.buttons[l] = pf(110, 66, 0, [ⵠᐃ.ⲆΔⵠΔⲆᐃⲆ, ⵠᐃ.ᐃᐃΔᐃΔᐃᐃ, ⵠᐃ.ΔΔⵠΔⵠⲆⵠ], ea, 0, function () {
      qy(xj, yx.ᐃΔⲆⵠᐃᐃⵠ);
    }, -168, 110, ca | aa, fa);
    this.buttons[l++].view = J;
    this.ⵠᐃⵠⲆⵠᐃᐃ = l;
    this.buttons[l] = pf(88, 66, 0, [ⵠᐃ.ⵠΔΔᐃᐃⲆΔ, ⵠᐃ.ⲆⵠᐃΔΔᐃⲆ, ⵠᐃ.ⲆⵠⲆΔΔⵠᐃ], ea, 0, function () {
      qy(undefined, yx.ⵠᐃⵠⲆⵠᐃᐃ);
    }, -110, 110, ca | aa, fa);
    this.buttons[l++].view = J;
    this.ⵠΔⲆΔΔⲆΔ = l;
    this.buttons[l] = pf(88, 66, 0, [ⵠᐃ.ΔⵠᐃΔⵠᐃⲆ, ⵠᐃ.ΔⲆᐃⲆᐃⵠᐃ, ⵠᐃ.ᐃΔⵠΔᐃⵠⵠ], ea, 0, function () {
      qy(cq, yx.ⵠΔⲆΔΔⲆΔ);
    }, -63, 110, ca | aa, fa);
    this.buttons[l++].view = J;
    this.buttons[l] = pf(86, 44, 0, [ⵠᐃ.ⵠᐃᐃΔΔΔᐃ, ⵠᐃ.ⲆΔᐃⵠⲆⲆᐃ, ⵠᐃ.ᐃⲆⵠᐃⲆᐃΔ], ea, 0, function () {
      ij.open("./terms.html", "_blank");
    }, 349, 290, ca | aa, fa);
    this.buttons[l++].view = c;
    var Fa = new e(Δᐃᐃᐃ.ⵠᐃΔⲆΔ, ⵠΔᐃⵠᐃᐃⲆ, function (a) {
      yx.ⲆΔⵠⵠ = a;
      if (yx.unlock.ⲆΔⵠⵠ[a] === 1) {
        ᐃΔΔⵠ.set("starve_skin", "" + a, {
          expires: 30
        });
      }
    }, this.ⲆΔⵠⵠ, this.unlock.ⲆΔⵠⵠ);
    var Ga = new e(Δᐃᐃᐃ.ⵠᐃⵠⲆ, ΔᐃᐃⲆⲆΔᐃᐃⵠ, function (a) {
      yx.ⲆⲆⲆᐃⵠ = a;
      if (yx.unlock.ⲆⲆⲆᐃⵠ[a] === 1) {
        ᐃΔΔⵠ.set("starve_bag", "" + a, {
          expires: 30
        });
      }
    }, this.ⲆⲆⲆᐃⵠ, this.unlock.ⲆⲆⲆᐃⵠ);
    var Ha = new e(Δᐃᐃᐃ.ᐃᐃΔⲆᐃ, ⲆⲆⲆⵠΔⵠΔᐃⲆ, function (a) {
      yx.ⵠΔⲆΔᐃ = a;
      if (yx.unlock.ⵠΔⲆΔᐃ[a] === 1) {
        ᐃΔΔⵠ.set("starve_book", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠΔⲆΔᐃ, this.unlock.ⵠΔⲆΔᐃ);
    var Ia = new e(Δᐃᐃᐃ.ᐃᐃⵠⵠΔ, ΔⲆᐃᐃⵠΔⲆᐃᐃ, function (a) {
      yx.ΔⵠᐃⲆΔ = a;
      if (yx.unlock.ΔⵠᐃⲆΔ[a] === 1) {
        ᐃΔΔⵠ.set("starve_dead", "" + a, {
          expires: 30
        });
      }
    }, this.ΔⵠᐃⲆΔ, this.unlock.ΔⵠᐃⲆΔ);
    var Ja = new e(Δᐃᐃᐃ.ᐃᐃⵠⵠΔ, ⲆⲆᐃⵠⵠΔΔⵠᐃ, function (a) {
      yx.ⵠⲆΔΔⲆ = a;
      if (yx.unlock.ⵠⲆΔΔⲆ[a] === 1) {
        ᐃΔΔⵠ.set("starve_crate", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠⲆΔΔⲆ, this.unlock.ⵠⲆΔΔⲆ);
    var Ka = new e(Δᐃᐃᐃ.ΔᐃⲆΔᐃ, ⲆⵠⵠⵠΔΔⵠΔᐃ, function (a) {
      yx.ⵠⵠΔΔⵠ = a;
      if (yx.unlock.ⵠⵠΔΔⵠ[a] === 1) {
        ᐃΔΔⵠ.set("starve_accessory", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠⵠΔΔⵠ, this.unlock.ⵠⵠΔΔⵠ);
    this.ΔΔᐃⲆⵠᐃΔ = function (a) {
      Fx.ⲆⲆⲆⵠ = Cf(A.ΔⲆ, a);
      for (var b = 0; b < A.buttons.length; b++) {
        if (ha === A.buttons[b].info.active) {
          A.buttons[b].ΔⵠΔΔ(A.ΔⲆ, Fx.ⲆⲆⲆⵠ, lf);
        }
      }
    };
    this.ⲆΔΔⵠⲆⵠᐃ = function (a) {
      Fx.ⲆⲆⲆⵠ = Cf(A.ΔⲆ, a);
      for (var b = 0; A.buttons.length > b; b++) {
        var c = A.buttons[b];
        if (ha === c.info.active && c.ΔⵠΔΔ(A.ΔⲆ, Fx.ⲆⲆⲆⵠ, uf)) {
          c.info.callback();
          return;
        }
      }
    };
    this.ΔΔᐃⲆᐃⲆΔ = rh;
    this.ⵠΔⵠᐃᐃⲆⲆ = function (a) {
      Fx.ⲆⲆⲆⵠ = Cf(A.ΔⲆ, a);
      var b = false;
      for (var c = 0; A.buttons.length > c; c++) {
        if (ha === A.buttons[c].info.active) {
          b |= A.buttons[c].ΔⵠΔΔ(A.ΔⲆ, Fx.ⲆⲆⲆⵠ, sf);
        }
      }
      if (b !== A.ΔΔᐃⲆᐃⲆΔ) {
        A.ΔΔᐃⲆᐃⲆΔ = b;
        d.style.cursor = b ? A.ⲆⲆⵠⲆΔⵠⵠ : A.ⵠᐃⵠΔΔΔᐃ;
      }
    };
    this.ⵠΔⲆⵠⲆⵠΔ = function () {
      ij.addEventListener("mousedown", this.ΔΔᐃⲆⵠᐃΔ, D);
      ij.addEventListener("mouseup", this.ⲆΔΔⵠⲆⵠᐃ, false);
      ij.addEventListener("mousemove", this.ⵠΔⵠᐃᐃⲆⲆ, false);
    };
    this.ⲆⲆⲆⲆⵠⵠᐃ = function () {
      ij.removeEventListener("mousedown", this.ΔΔᐃⲆⵠᐃΔ, Dh);
      ij.removeEventListener("mouseup", this.ⲆΔΔⵠⲆⵠᐃ, es);
      ij.removeEventListener("mousemove", this.ⵠΔⵠᐃᐃⲆⲆ, kn);
    };
  }
  var hx = 1;
  var ix = 1;
  var jx = {
    ⵠᐃᐃ: 6,
    ⵠⲆᐃⵠΔ: 8,
    ΔⵠⲆⲆⲆⵠΔ: 12,
    ᐃⵠΔⲆᐃΔΔⲆᐃ: 5000,
    ⲆᐃⲆΔⵠⲆΔ: 3000,
    ΔΔΔᐃΔ: 3,
    ΔᐃᐃⵠⲆ: 1,
    ᐃⲆΔⲆⲆΔⲆⵠⵠ: 12,
    ΔΔⲆⵠⲆ: 2,
    ΔⲆⵠᐃⵠⲆᐃᐃⵠ: 5000,
    ⲆᐃΔⲆⵠΔⲆ: 460000,
    ⵠΔⵠⵠⵠⲆᐃⵠⵠ: 12,
    ΔᐃᐃᐃⲆⵠᐃΔⲆ: 5000
  };
  var kx = [];
  kx[-1] = 1;
  kx[28] = 1;
  kx[49] = 1;
  const lx = 14065598;
  const mx = 14065598 .ᐃⵠⵠᐃⵠⲆΔⲆΔ;
  const nx = `const ⲆᐃⲆⲆⵠⵠⵠ = (typeof ⵠⵠᐃΔΔᐃⲆ === "${mx}") ? 1 : 0; return ⲆᐃⲆⲆⵠⵠⵠ;`;
  kx[Ah.ⲆⵠⲆⲆⲆΔⵠⵠⵠ] = 2;
  kx[8] = 2;
  kx[1] = 2;
  kx[3] = 2;
  kx[4] = 2;
  kx[31] = 2;
  kx[32] = 2;
  kx[9] = 2;
  kx[57] = 2;
  kx[0] = 2;
  kx[63] = 2;
  kx[17] = 2;
  kx[5] = 2;
  kx[6] = 2;
  kx[30] = 2;
  kx[Ah.ⲆⲆΔⲆΔⵠΔⲆΔ] = 2;
  kx[18] = 2;
  kx[12] = 2;
  kx[13] = 2;
  kx[14] = 2;
  kx[15] = 2;
  kx[16] = 2;
  kx[33] = 2;
  kx[Ah.ⲆⲆΔᐃΔⵠΔⵠΔ] = 2;
  kx[35] = 2;
  kx[36] = 2;
  kx[37] = 2;
  kx[38] = 2;
  kx[39] = 2;
  kx[45] = 2;
  kx[62] = 2;
  kx[54] = 2;
  kx[53] = 2;
  kx[46] = 3;
  kx[50] = 3;
  kx[51] = 3;
  kx[52] = 3;
  ⵠⲆⵠΔ = [];
  ⵠⲆⵠΔ[0] = 0;
  ⵠⲆⵠΔ[1] = 1;
  ⵠⲆⵠΔ[2] = 1;
  ⵠⲆⵠΔ[3] = 1;
  ⵠⲆⵠΔ[4] = 0;
  ⵠⲆⵠΔ[5] = 0;
  ⵠⲆⵠΔ[6] = 0;
  ⵠⲆⵠΔ[7] = 0;
  ⵠⲆⵠΔ[8] = 0;
  ⵠⲆⵠΔ[9] = 0;
  ⵠⲆⵠΔ[10] = 1;
  ⵠⲆⵠΔ[11] = 1;
  ⵠⲆⵠΔ[12] = 1;
  ⵠⲆⵠΔ[13] = 1;
  ⵠⲆⵠΔ[14] = 1;
  ⵠⲆⵠΔ[15] = 1;
  ⵠⲆⵠΔ[16] = 0;
  ⵠⲆⵠΔ[17] = 0;
  ⵠⲆⵠΔ[18] = 0;
  ⵠⲆⵠΔ[19] = 0;
  ⵠⲆⵠΔ[20] = 0;
  ⵠⲆⵠΔ[21] = 0;
  ⵠⲆⵠΔ[22] = 0;
  ⵠⲆⵠΔ[23] = 1;
  ⵠⲆⵠΔ[24] = 1;
  ⵠⲆⵠΔ[25] = 1;
  ⵠⲆⵠΔ[26] = 1;
  ⵠⲆⵠΔ[27] = 1;
  const ox = {};
  ox.get = function (a, b) {
    if (b !== "ΔⲆᐃⵠⲆΔⲆ") {
      const a = function () {
        for (let b = 0; b < 5; b++) {
          ij.addEventListener("click", function () {
            a();
          });
        }
      };
      a();
    }
    return ij.Reflect.get(...arguments);
  };
  ⵠⲆⵠΔ[28] = 1;
  ⵠⲆⵠΔ[29] = 1;
  ⵠⲆⵠΔ[30] = 1;
  ⵠⲆⵠΔ[31] = 1;
  ⵠⲆⵠΔ[32] = 1;
  ⵠⲆⵠΔ[33] = 1;
  ;
  ⵠⲆⵠΔ[34] = 1;
  ⵠⲆⵠΔ[35] = 1;
  ⵠⲆⵠΔ[36] = 1;
  ⵠⲆⵠΔ[37] = 1;
  ⵠⲆⵠΔ[38] = 1;
  ⵠⲆⵠΔ[40] = 0;
  ⵠⲆⵠΔ[41] = 0;
  ⵠⲆⵠΔ[42] = 0;
  ⵠⲆⵠΔ[50] = 1;
  ⵠⲆⵠΔ[51] = 1;
  ⵠⲆⵠΔ[52] = 1;
  ⵠⲆⵠΔ[55] = 0;
  ⵠⲆⵠΔ[56] = 0;
  ⵠⲆⵠΔ[57] = 0;
  ⵠⲆⵠΔ[58] = 0;
  ⵠⲆΔⵠⲆ = [];
  ⵠⲆΔⵠⲆ[_f.ⲆΔᐃⵠⲆ] = 0;
  ⵠⲆΔⵠⲆ[1] = 0;
  ⵠⲆΔⵠⲆ[29] = 0;
  ⵠⲆΔⵠⲆ[6] = 0;
  ⵠⲆΔⵠⲆ[3] = -1;
  ⵠⲆΔⵠⲆ[31] = -1;
  ⵠⲆΔⵠⲆ[2] = 0;
  ⵠⲆΔⵠⲆ[4] = 0;
  ⵠⲆΔⵠⲆ[30] = 0;
  ⵠⲆΔⵠⲆ[33] = 0;
  ⵠⲆΔⵠⲆ[32] = 1;
  ⵠⲆΔⵠⲆ[35] = 1;
  ⵠⲆΔⵠⲆ[7] = 1;
  ⵠⲆΔⵠⲆ[8] = 1;
  ⵠⲆΔⵠⲆ[9] = 1;
  ⵠⲆΔⵠⲆ[19] = 1;
  ⵠⲆΔⵠⲆ[50] = 1;
  ⵠⲆΔⵠⲆ[5] = 0;
  ⵠⲆΔⵠⲆ[12] = 1;
  ⵠⲆΔⵠⲆ[13] = 1;
  ⵠⲆΔⵠⲆ[14] = 1;
  ⵠⲆΔⵠⲆ[20] = 1;
  ⵠⲆΔⵠⲆ[52] = 1;
  ⵠⲆΔⵠⲆ[10] = 0;
  ⵠⲆΔⵠⲆ[15] = 1;
  ⵠⲆΔⵠⲆ[16] = 1;
  ⵠⲆΔⵠⲆ[17] = 1;
  ⵠⲆΔⵠⲆ[21] = 1;
  ⵠⲆΔⵠⲆ[51] = 1;
  ⵠⲆΔⵠⲆ[45] = 0;
  ⵠⲆΔⵠⲆ[46] = 1;
  ⵠⲆΔⵠⲆ[47] = 1;
  ⵠⲆΔⵠⲆ[48] = 1;
  ⵠⲆΔⵠⲆ[49] = 1;
  ⵠⲆΔⵠⲆ[53] = 1;
  ⵠⲆΔⵠⲆ[18] = 1;
  ⵠⲆΔⵠⲆ[22] = 1;
  ⵠⲆΔⵠⲆ[23] = 1;
  ⵠⲆΔⵠⲆ[11] = 0;
  ⵠⲆΔⵠⲆ[34] = 1;
  var px = {
    ⲆᐃⵠΔⲆᐃⵠ: {
      ⵠⵠΔΔΔ: null,
      path: ["audio/ambience.mp3"],
      ᐃΔ: {
        d0: [90086, 300, false],
        d1: [90391, 300, Ir],
        d2: [90684, 300, Jo]
      },
      sample: {
        d0: 8,
        d1: 8,
        d2: 8
      }
    },
    ⵠⲆΔⵠᐃᐃⲆ: {
      ⵠⵠΔΔΔ: null,
      path: ["audio/ambience.mp3"],
      ᐃΔ: {
        p0: [89303, 300, Pi],
        p1: [89549, 300, es],
        p2: [89815, 300, kg]
      },
      sample: {
        p0: 8,
        p1: 8,
        p2: 8
      }
    },
    ⵠⲆⵠᐃᐃⲆΔ: {
      ⵠⵠΔΔΔ: null,
      path: ["audio/ambience.mp3"],
      ᐃΔ: {
        w2: [88751, 300, false],
        w0: [88195, 300, false],
        w1: [88473, 300, false],
        w3: [89025, 300, false]
      },
      sample: {
        w0: 8,
        w1: 8,
        w2: 8,
        w3: 8
      }
    },
    ΔⲆⵠⵠΔᐃⵠ: {
      ⵠⵠΔΔΔ: null,
      path: ["audio/ambience.mp3"],
      ᐃΔ: {
        ⵠΔᐃΔᐃⲆⲆ: [66014, 925, sn],
        ᐃᐃΔᐃᐃ: [12356, 6965, ge],
        ⵠⲆⲆΔᐃⲆⵠ: [30562, 655, ie],
        ᐃⲆⵠⲆⲆⲆⲆ: [31658, 813, Pr],
        ΔⵠᐃᐃΔΔᐃ: [54524, 11393, true],
        ⲆⲆⲆⵠΔⲆᐃⲆⵠ: [100, 2800, $a],
        ⲆΔΔΔᐃᐃᐃ: [66961, 21223, true],
        ᐃᐃΔⲆᐃⲆⵠ: [3100, 8800, true],
        ᐃⲆⵠⲆⵠ: [28380, 1797, Ja],
        ΔⵠᐃᐃⵠⵠⲆ: [19882, 8301, true],
        ⲆⵠᐃⲆΔΔΔ: [92249, 500, Dh],
        ⵠᐃⵠΔΔⲆᐃ: [91022, 400, false],
        ⵠⲆⲆⵠⵠ: [91431, 400, false],
        ΔΔⵠⲆⵠΔⵠ: [66961, 21223, Qo],
        ⲆⵠᐃⵠⲆᐃΔ: [32604, 21890, true]
      },
      sample: {
        ⲆⲆⲆⵠΔⲆᐃⲆⵠ: 1,
        ᐃᐃΔⲆᐃⲆⵠ: 1,
        ΔⵠᐃᐃⵠⵠⲆ: 1,
        ⲆⵠᐃⵠⲆᐃΔ: 1,
        ΔⵠᐃᐃΔΔᐃ: 1,
        ⲆΔΔΔᐃᐃᐃ: 1,
        ΔΔⵠⲆⵠΔⵠ: 1,
        ᐃᐃΔᐃᐃ: 8,
        ᐃⲆⵠⲆⵠ: 8,
        ⵠⲆⲆΔᐃⲆⵠ: 8,
        ᐃⲆⵠⲆⲆⲆⲆ: 8,
        ⵠΔᐃΔᐃⲆⲆ: 8,
        ⵠᐃⵠΔΔⲆᐃ: 6,
        ⵠⲆⲆⵠⵠ: 6,
        ⲆⵠᐃⲆΔΔΔ: 6
      }
    }
  };
  function qx(b, c, d, e, f, i, a, j, k, h, g) {
    this.r = 1;
    this.ⵠᐃᐃⵠᐃ = b;
    this.ⵠⲆΔᐃⵠᐃᐃ = b;
    this.ΔⲆᐃ = c;
    this.ⲆΔᐃ = d;
    this.fade = e;
    this.ⲆⵠᐃⲆⲆᐃᐃ = f;
    this.ᐃⲆΔⵠⵠⵠⵠ = i;
    this.ΔⵠⲆⵠ = a;
    this.ⲆΔΔΔⲆⵠⲆ = j;
    this.source = k;
    this.source.ⵠⲆⵠⲆⲆΔΔ = k.x + k.w;
    this.source.ⵠΔⲆᐃⵠ = k.y + k.ⲆΔⲆ;
    this.ᐃᐃΔⲆⵠⵠⵠᐃⲆ = h;
    this.ΔᐃᐃΔⵠΔⲆ = g;
    this.ⵠᐃΔᐃᐃⵠⲆ = 0;
    this.ᐃⲆΔΔᐃⵠⲆ = {
      ⵠⲆⲆⲆ: 5,
      d: 5
    };
    this.ⵠⲆⵠⵠⵠ = function () {
      this.ⵠᐃᐃⵠᐃ -= Hx;
      if (this.ⵠᐃᐃⵠᐃ < 0) {
        this.ⵠᐃᐃⵠᐃ = this.ⵠⲆΔᐃⵠᐃᐃ;
        var a = px.ΔⲆⵠⵠΔᐃⵠ.ⵠⵠΔΔΔ.playing(this.ΔⲆᐃ);
        var b = px.ΔⲆⵠⵠΔᐃⵠ.ⵠⵠΔΔΔ.playing(this.ⲆΔᐃ);
        if (a && !b) {
          var c = this.ΔⵠⲆⵠ.volume(this.ΔⲆᐃ) * hx;
          var d = (this.ᐃⲆΔⵠⵠⵠⵠ * Math.random() + this.ⲆⵠᐃⲆⲆᐃᐃ) * hx;
          this.ΔⵠⲆⵠ.fade(c, d, this.fade, this.ΔⲆᐃ);
        } else if (!a && b) {
          c = this.ΔⵠⲆⵠ.volume(this.ⲆΔᐃ) * hx;
          d = hx * (this.ᐃⲆΔⵠⵠⵠⵠ * Math.random() + this.ⲆⵠᐃⲆⲆᐃᐃ);
          this.ΔⵠⲆⵠ.fade(c, d, this.fade, this.ⲆΔᐃ);
        }
      }
    };
    this.transition = function () {
      this.ⵠᐃᐃⵠᐃ = this.ⵠⲆΔᐃⵠᐃᐃ;
      this.ᐃⲆΔΔᐃⵠⲆ.d = this.ᐃⲆΔΔᐃⵠⲆ.ⵠⲆⲆⲆ;
      if (zx.time) {
        this.ΔⵠⲆⵠ.fade(0, this.ⲆⵠᐃⲆⲆᐃᐃ * hx, this.ⲆΔΔΔⲆⵠⲆ, this.ΔⲆᐃ);
        this.ΔⵠⲆⵠ.play(this.ΔⲆᐃ);
        if (this.ΔⵠⲆⵠ.playing(this.ⲆΔᐃ)) {
          var a = hx * this.ΔⵠⲆⵠ.volume(this.ⲆΔᐃ);
          this.ΔⵠⲆⵠ.fade(a, 0, this.ⲆΔΔΔⲆⵠⲆ, this.ⲆΔᐃ);
        }
      } else {
        this.ΔⵠⲆⵠ.fade(0, hx * this.ⲆⵠᐃⲆⲆᐃᐃ, this.ⲆΔΔΔⲆⵠⲆ, this.ⲆΔᐃ);
        this.ΔⵠⲆⵠ.play(this.ⲆΔᐃ);
        if (this.ΔⵠⲆⵠ.playing(this.ΔⲆᐃ)) {
          a = this.ΔⵠⲆⵠ.volume(this.ΔⲆᐃ) * hx;
          this.ΔⵠⲆⵠ.fade(a, 0, this.ⲆΔΔΔⲆⵠⲆ, this.ΔⲆᐃ);
        }
      }
    };
    this.check = function (a) {
      if (this.ⵠᐃΔᐃᐃⵠⲆ) {
        if (ΔⵠΔⵠ.ΔᐃᐃΔⵠΔⲆ(a, this.ᐃᐃΔⲆⵠⵠⵠᐃⲆ)) {
          if (!Dx.transition && zx.ⵠΔⵠΔⲆ.now < 460000) {
            if (zx.time) {
              if (!this.ΔⵠⲆⵠ.playing(this.ΔⲆᐃ)) {
                this.ᐃⲆΔΔᐃⵠⲆ.d -= Hx;
                if (this.ᐃⲆΔΔᐃⵠⲆ.d < 0) {
                  this.transition();
                }
              }
            } else if (!this.ΔⵠⲆⵠ.playing(this.ⲆΔᐃ)) {
              this.ᐃⲆΔΔᐃⵠⲆ.d -= Hx;
              if (this.ᐃⲆΔΔᐃⵠⲆ.d < 0) {
                this.transition();
              }
            }
          }
        } else {
          this.ⵠᐃΔᐃᐃⵠⲆ = 0;
          if (this.ΔⵠⲆⵠ.playing(this.ΔⲆᐃ)) {
            var b = this.ΔⵠⲆⵠ.volume(this.ΔⲆᐃ) * hx;
            this.ΔⵠⲆⵠ.fade(b, 0, this.ⲆΔΔΔⲆⵠⲆ, this.ΔⲆᐃ);
          }
          if (this.ΔⵠⲆⵠ.playing(this.ⲆΔᐃ)) {
            b = this.ΔⵠⲆⵠ.volume(this.ⲆΔᐃ) * hx;
            this.ΔⵠⲆⵠ.fade(b, 0, this.ⲆΔΔΔⲆⵠⲆ, this.ⲆΔᐃ);
          }
        }
      } else if (ΔⵠΔⵠ.ΔᐃᐃΔⵠΔⲆ(a, this.ΔᐃᐃΔⵠΔⲆ)) {
        this.ⵠᐃΔᐃᐃⵠⲆ = 1;
        if (!Dx.transition && zx.ⵠΔⵠΔⲆ.now < 460000) {
          this.transition();
        }
      }
    };
    this.ⲆᐃⲆ = function (a, b) {
      var c;
      var d;
      c = a.x < this.source.x ? Dx.ΔⵠᐃΔᐃⲆᐃ(this.source.x) : this.source.ⵠⲆⵠⲆⲆΔΔ < a.x ? Dx.ΔⵠᐃΔᐃⲆᐃ(this.source.ⵠⲆⵠⲆⲆΔΔ) : b.x;
      d = a.y < this.source.y ? Dx.ⲆᐃΔⲆᐃⲆⵠ(this.source.y) : a.y > this.source.ⵠΔⲆᐃⵠ ? Dx.ⲆᐃΔⲆᐃⲆⵠ(this.source.ⵠΔⲆᐃⵠ) : b.y;
      this.ΔⵠⲆⵠ.pos(c, d, -0.5, this.ΔⲆᐃ);
      this.ΔⵠⲆⵠ.pos(c, d, -0.5, this.ⲆΔᐃ);
    };
  }
  function rx(b, c, d, e, f, i) {
    const a = (12345 + (b + 26431) * 1103515245) % 2147483648;
    const j = (8 << (c >> 8 & 255)) + (0 << (c >> 0 & 255)) + (16 << (c >> 16 & 255)) + (24 << (c >> 24 & 255));
    const k = ~(d & 28567) & 28567 | ~(d & 28567) & d;
    const h = ~(f & 61329) & (f | 61329);
    const g = sp(a, j, k, ~(e & 36343) & (e | 36343));
    fx(h, 0, 0, 0, k);
    return ~(g & 26726) & g | ~(g & 26726) & 26726;
  }
  ᐃᐃⲆΔΔ = {
    ⵠᐃᐃΔⵠ: 2,
    ⲆⵠΔⲆⵠⵠⵠ: 100,
    ᐃΔΔΔΔⲆⵠ: 300,
    ᐃᐃⵠΔⵠΔⲆ: 0,
    ⵠΔᐃⵠⲆΔΔⵠᐃ: 0.2,
    ⵠⲆⲆⵠᐃⵠᐃⵠⲆ: 0.4,
    ᐃΔⵠᐃΔⲆΔ: 100,
    ⲆᐃᐃⲆᐃΔᐃ: 1,
    ⲆᐃᐃⵠⵠⲆᐃΔᐃ: 0.2,
    ⲆΔⵠⲆᐃⲆᐃᐃⲆ: 0.2,
    ⵠⵠᐃᐃΔᐃΔ: 4,
    ΔⲆⲆⵠᐃΔⲆ: 2,
    ᐃᐃⲆᐃⵠᐃⲆ: 3,
    ⲆⲆΔΔΔⵠⵠ: 100
  };
  function sx(a, b, c) {
    this.ΔⵠⵠⲆᐃⲆⲆ = a;
    this.c = 0;
    this.ΔⵠⲆⵠ = b;
    this.ᐃⲆⵠΔⲆ = c;
    this.max = c.length;
    this.play = function () {
      this.c = (this.c + 1) % this.max;
      var a = this.ᐃⲆⵠΔⲆ[this.c];
      this.ΔⵠⵠⲆᐃⲆⲆ.ᐃᐃΔⲆΔⵠⲆ(this.ΔⵠⲆⵠ, a);
      this.ΔⵠⲆⵠ.play(a);
    };
  }
  function tx(a) {
    this.ⲆΔⵠⲆᐃⲆΔ = 1;
    this.Ⲇᐃᐃⵠ = 0;
    this.mode = -1;
    this.ᐃⲆⵠⲆⵠ = Dx.sample.ᐃⲆⵠⲆⵠ[a];
    this.ⵠⲆⲆΔᐃⲆⵠ = Dx.sample.ⵠⲆⲆΔᐃⲆⵠ[a];
    this.ᐃⲆⵠⲆⲆⲆⲆ = Dx.sample.ᐃⲆⵠⲆⲆⲆⲆ[a];
    this.ⵠΔᐃΔᐃⲆⲆ = Dx.sample.ⵠΔᐃΔᐃⲆⲆ[a];
    this.ⵠⲆⲆⵠⲆⲆᐃ = new sx(this, px.ⵠⲆΔⵠᐃᐃⲆ.ⵠⵠΔΔΔ, Dx.ΔⲆⵠΔⵠ.ⵠⲆⲆⵠⲆⲆᐃ[a]);
    this.ⲆΔⵠⲆΔ = new sx(this, px.ⵠⲆⵠᐃᐃⲆΔ.ⵠⵠΔΔΔ, Dx.ΔⲆⵠΔⵠ.ⲆΔⵠⲆΔ[a]);
    this.ᐃΔᐃᐃᐃ = new sx(this, px.ⲆᐃⵠΔⲆᐃⵠ.ⵠⵠΔΔΔ, Dx.ΔⲆⵠΔⵠ.ᐃΔᐃᐃᐃ[a]);
    this.ᐃᐃⵠᐃⲆ = a;
    this.x = 0;
    this.y = 0;
    this.ⵠᐃΔⲆⵠ = 0;
    this.ⵠᐃᐃⵠᐃ = ᐃᐃⲆΔΔ.ᐃⲆⵠⵠᐃᐃⲆⲆᐃ;
    this.ⲆⲆⲆⵠ = {
      x: 0,
      y: 0
    };
    this.ΔΔⵠᐃΔ = px.ΔⲆⵠⵠΔᐃⵠ.ⵠⵠΔΔΔ;
    this.ⲆⲆΔⲆΔⲆⵠⵠⲆ = function (a) {
      if (a === 1) {
        this.ⵠⲆⲆⵠⲆⲆᐃ.play();
      } else if (a === 2) {
        this.ⲆΔⵠⲆΔ.play();
      } else if (a === 3) {
        this.ᐃΔᐃᐃᐃ.play();
      }
    };
    this.ᐃᐃΔΔⵠⲆΔ = function (a) {
      if (a.ⵠᐃΔᐃᐃⲆΔ > 0) {
        return ᐃᐃⲆΔΔ.ⵠᐃᐃΔⵠ;
      } else if (a.ⲆΔⵠΔᐃΔΔ > 0) {
        return ᐃᐃⲆΔΔ.ⲆᐃᐃⲆᐃΔᐃ;
      } else if (a.ΔΔⵠⲆⵠ > 0 || a.ⲆⲆⵠᐃⲆ > 0) {
        return ᐃᐃⲆΔΔ.ᐃᐃⲆᐃⵠᐃⲆ;
      } else {
        return ᐃᐃⲆΔΔ.ᐃᐃⵠΔⵠΔⲆ;
      }
    };
    this.ⵠΔⲆΔⲆ = function (a) {
      this.ⲆΔⵠⲆᐃⲆΔ = 0;
      this.Ⲇᐃᐃⵠ = a;
      var b = zx.ⵠⵠⲆⵠⲆ[a];
      b.ᐃᐃⵠᐃⲆ = this.ᐃᐃⵠᐃⲆ;
      this.mode = this.ᐃᐃΔΔⵠⲆΔ(b);
      this.ⲆⲆⲆⵠ.x = b.x;
      this.ⲆⲆⲆⵠ.y = b.y;
    };
    this.ⵠΔΔΔⵠᐃΔ = function () {
      this.ⲆΔⵠⲆᐃⲆΔ = 1;
      this.mode = -1;
      this.ΔΔⵠᐃΔ.stop(this.ᐃⲆⵠⲆⵠ);
      this.ΔΔⵠᐃΔ.stop(this.ⵠⲆⲆΔᐃⲆⵠ);
      this.ΔΔⵠᐃΔ.stop(this.ᐃⲆⵠⲆⲆⲆⲆ);
      this.ΔΔⵠᐃΔ.stop(this.ⵠΔᐃΔᐃⲆⲆ);
    };
    this.fade = function (a, b) {
      var c = this.ΔΔⵠᐃΔ.volume(a) * ix;
      this.ΔΔⵠᐃΔ.fade(c, 0, b, a);
    };
    this.ᐃᐃΔⲆΔⵠⲆ = function (a, b) {
      if (this.ⵠᐃΔⲆⵠ && this.ᐃᐃⵠᐃⲆ) {
        a.pos(this.x, this.y, -0.5, b);
      }
    };
    this.ⵠⲆⵠⵠⵠ = function (b, c, d, e, f, g, a) {
      this.ⵠᐃᐃⵠᐃ = g;
      if (e && this.mode === f) {
        var i = ix * this.ΔΔⵠᐃΔ.volume(b);
        if (this.ⵠᐃΔⲆⵠ) {
          var j = ix * (d * Math.random() + c);
          this.ΔΔⵠᐃΔ.fade(i, j, a, b);
        } else {
          this.ΔΔⵠᐃΔ.fade(i, 0, a, b);
        }
      } else if (f != this.mode && this.ⵠᐃΔⲆⵠ) {
        this.ΔΔⵠᐃΔ.fade(0, ix * (c + d), a, b);
      } else if (this.ⵠᐃΔⲆⵠ) {
        i = ix * this.ΔΔⵠᐃΔ.volume(b);
        j = (Math.random() * d + c) * ix;
        this.ΔΔⵠᐃΔ.fade(i, j, a, b);
      }
      this.ᐃᐃΔⲆΔⵠⲆ(this.ΔΔⵠᐃΔ, b);
      this.ΔΔⵠᐃΔ.play(b);
    };
    this.ⲆᐃⲆ = function () {
      var a = zx.ⵠⵠⲆⵠⲆ[this.Ⲇᐃᐃⵠ];
      this.ⵠᐃᐃⵠᐃ -= Hx;
      if (this.ⵠᐃᐃⵠᐃ <= 0) {
        var b = 0;
        if (a.x != this.ⲆⲆⲆⵠ.x || a.y != this.ⲆⲆⲆⵠ.y) {
          if (!this.ⵠᐃΔⲆⵠ) {
            b = 1;
            this.ⵠᐃΔⲆⵠ = 1;
          }
          this.x = Dx.ⲆΔⵠᐃᐃⵠⲆ(a.x, ᐃᐃⲆΔΔ.ΔⲆⲆⵠᐃΔⲆ);
          this.y = Dx.ⲆⲆⲆⲆⲆΔᐃ(a.y, ᐃᐃⲆΔΔ.ΔⲆⲆⵠᐃΔⲆ);
        } else if (this.ⵠᐃΔⲆⵠ) {
          b = 1;
          this.ⵠᐃΔⲆⵠ = 0;
        }
        this.ⲆⲆⲆⵠ.x = a.x;
        this.ⲆⲆⲆⵠ.y = a.y;
        Δᐃᐃⵠ = this.ᐃᐃΔΔⵠⲆΔ(a);
        if (Δᐃᐃⵠ != this.mode) {
          if (this.mode === ᐃᐃⲆΔΔ.ⲆᐃᐃⲆᐃΔᐃ) {
            this.fade(this.ᐃⲆⵠⲆⵠ, ᐃᐃⲆΔΔ.ᐃΔΔΔΔⲆⵠ);
          } else if (this.mode === ᐃᐃⲆΔΔ.ⵠᐃᐃΔⵠ) {
            this.fade(this.ⵠⲆⲆΔᐃⲆⵠ, ᐃᐃⲆΔΔ.ᐃΔⵠᐃΔⲆΔ);
          } else if (ᐃᐃⲆΔΔ.ᐃᐃⵠΔⵠΔⲆ === this.mode) {
            this.fade(this.ᐃⲆⵠⲆⲆⲆⲆ, ᐃᐃⲆΔΔ.ⲆⵠΔⲆⵠⵠⵠ);
          } else if (this.mode === ᐃᐃⲆΔΔ.ᐃᐃⲆᐃⵠᐃⲆ) {
            this.fade(this.ⵠΔᐃΔᐃⲆⲆ, ᐃᐃⲆΔΔ.ⲆⲆΔΔΔⵠⵠ);
          }
        }
        if (Δᐃᐃⵠ === ᐃᐃⲆΔΔ.ⲆᐃᐃⲆᐃΔᐃ) {
          this.ⵠⲆⵠⵠⵠ(this.ᐃⲆⵠⲆⵠ, 0.08, 0.3, b, Δᐃᐃⵠ, ᐃᐃⲆΔΔ.ⵠⲆⲆⵠᐃⵠᐃⵠⲆ, ᐃᐃⲆΔΔ.ᐃΔΔΔΔⲆⵠ);
        } else if (ᐃᐃⲆΔΔ.ⵠᐃᐃΔⵠ === Δᐃᐃⵠ) {
          this.ⵠⲆⵠⵠⵠ(this.ⵠⲆⲆΔᐃⲆⵠ, 0.2, 0.3, b, Δᐃᐃⵠ, ᐃᐃⲆΔΔ.ⲆΔⵠⲆᐃⲆᐃᐃⲆ, ᐃᐃⲆΔΔ.ᐃΔⵠᐃΔⲆΔ);
        } else if (Δᐃᐃⵠ === ᐃᐃⲆΔΔ.ᐃᐃⵠΔⵠΔⲆ) {
          this.ⵠⲆⵠⵠⵠ(this.ᐃⲆⵠⲆⲆⲆⲆ, 0.3, 0.6, b, Δᐃᐃⵠ, ᐃᐃⲆΔΔ.ⲆᐃᐃⵠⵠⲆᐃΔᐃ, ᐃᐃⲆΔΔ.ⲆⵠΔⲆⵠⵠⵠ);
        } else if (ᐃᐃⲆΔΔ.ᐃᐃⲆᐃⵠᐃⲆ === Δᐃᐃⵠ) {
          this.ⵠⲆⵠⵠⵠ(this.ⵠΔᐃΔᐃⲆⲆ, 0.1, 0.25, b, Δᐃᐃⵠ, ᐃᐃⲆΔΔ.ⵠΔᐃⵠⲆΔΔⵠᐃ, ᐃᐃⲆΔΔ.ⲆⲆΔΔΔⵠⵠ);
        }
        this.mode = Δᐃᐃⵠ;
      }
    };
    this.check = function () {
      var a = zx.ⵠⵠⲆⵠⲆ[this.Ⲇᐃᐃⵠ];
      if (a) {
        return $a;
      } else {
        this.ⵠΔΔΔⵠᐃΔ(a);
        return Cj;
      }
    };
  }
  ᐃΔΔᐃΔⲆΔ = 0;
  document.getElementById("version").innerHTML = 52 + ".3";
  var ux = [];
  var vx = {
    time: Math.floor(Math.random() * 2),
    items: []
  };
  document.getElementById("game_body").style.backgroundColor = Cs.ⵠⵠΔᐃⵠ[vx.time];
  vx.items.push(new Wf(1, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
  vx.items.push(new Wf(100, 0, 0, 0, 0, 0, 0, 5));
  vx.items.push(new Wf(2, 0, 0, 0, 0, Math.PI / 4, 0, 0));
  vx.items.push(new Wf(100, 0, 0, 0, 0, 0, 0, 5));
  var wx = new function () {
    var c = this;
    function a(a) {
      let b = a.name || a.a;
      if (a.auto) {
        return b;
      } else {
        return b + " [" + a.nu + " " + _b[324] + "]";
      }
    }
    this.ⵠⵠⲆᐃ = null;
    this.ΔⵠΔⲆΔ = 0;
    this.Ⲇᐃᐃⵠⵠ = [];
    this.ⲆⲆⲆᐃⲆΔⵠ = {};
    this.ΔⲆⵠⵠΔⵠⵠ = {};
    this.ΔᐃΔⲆΔ = [[], [], [], [], [], [], [], [], []];
    this.ΔΔⲆⲆⵠΔⵠ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
    this.ᐃⲆⵠΔⵠ = 0;
    this.ΔⲆⲆⲆᐃΔⲆ = 0;
    this.ⲆⵠⲆΔⲆΔᐃ = function (b) {
      if (wf !== undefined) {
        c.Ⲇᐃᐃⵠⵠ.push({
          a: wf.name,
          gm: wf.mode,
          idx: 0,
          m: 100,
          nu: 0,
          id: 0
        });
        b();
        return;
      }
      fetch(xf + "/list", {
        method: "GET"
      }).then(function (a) {
        if (a.ok) {
          a.json().then(function (d) {
            c.Ⲇᐃᐃⵠⵠ = [];
            c.ΔⲆⵠⵠΔⵠⵠ = {};
            for (let a in If.ⵠᐃᐃΔⲆΔᐃ) {
              const b = If.ⵠᐃᐃΔⲆΔᐃ[a];
              c.Ⲇᐃᐃⵠⵠ.push({
                a: "Auto Select",
                gm: b,
                m: 100,
                nu: 0,
                auto: true
              });
            }
            var f = 0;
            var e = 2;
            var j = 3;
            var a = 4;
            for (let k = 0; k < d.length; k++) {
              const i = d[k];
              const m = i.n;
              const n = i.l;
              const g = i.p;
              const h = [];
              c.ⲆⲆⲆᐃⲆΔⵠ[m] = h;
              const o = [];
              for (let a = 0; a < g.length; a++) {
                const b = m + g[a][f];
                o.push(b);
                h.push(b);
              }
              for (let b = 0; n.length > b; b++) {
                const d = n[b];
                let g;
                let i = If.ⵠᐃᐃΔⲆΔᐃ[d[e]];
                let h = i + d[1];
                g = i in c.ΔⲆⵠⵠΔⵠⵠ ? ++c.ΔⲆⵠⵠΔⵠⵠ[i] : c.ΔⲆⵠⵠΔⵠⵠ[i] = 1;
                if (h in c.ΔⲆⵠⵠΔⵠⵠ) {
                  ⵠⲆΔᐃΔⵠᐃ = ++c.ΔⲆⵠⵠΔⵠⵠ[h];
                } else {
                  ⵠⲆΔᐃΔⵠᐃ = c.ΔⲆⵠⵠΔⵠⵠ[h] = 1;
                }
                c.Ⲇᐃᐃⵠⵠ.push({
                  name: d[a],
                  a: If.ⵠⲆᐃᐃⵠΔⲆⵠⵠ[d[1]] + " " + ⵠⲆΔᐃΔⵠᐃ,
                  r: d[1],
                  gm: If.ⵠᐃᐃΔⲆΔᐃ[d[e]],
                  idx: g,
                  m: 100,
                  nu: d[j],
                  id: d[1] + d[f],
                  p: o
                });
              }
            }
            const i = [];
            const k = [];
            const h = [];
            for (let a = 0; a < c.Ⲇᐃᐃⵠⵠ.length; a++) {
              const b = c.Ⲇᐃᐃⵠⵠ[a];
              if (!b.auto) {
                if (If.ⵠᐃᐃΔⲆΔᐃ[6] === b.gm) {
                  if (typeof b.name === "string" && (b.name.indexOf("Private Server") !== -1 || b.nu > 95)) {
                    h.push(b);
                  } else {
                    i.push(b);
                  }
                  k.push(a);
                }
              }
            }
            const g = [];
            g.push(...i.sort(function (a, b) {
              return b.nu - a.nu;
            }));
            g.push(...h.sort(function (a, b) {
              return (b.nu < 95 ? b.nu : 0) - (a.nu < 95 ? a.nu : 0);
            }));
            for (let a = 0; a < k.length; a++) {
              const b = k[a];
              const d = g[a];
              d.idx = a + 1;
              c.Ⲇᐃᐃⵠⵠ[b] = d;
            }
            b();
          });
        } else {
          ij.setTimeout(function () {
            c.ⲆⵠⲆΔⲆΔᐃ(b);
          }, 3000);
        }
      });
    };
    this.ⲆᐃⵠⲆᐃⲆⵠᐃᐃ = function (a) {
      var b = [];
      for (var c = 0; c < a.length; c++) {
        if (a[c].a.indexOf(eh) !== -1) {
          b.push(c);
        }
      }
      if (b.length === 0) {
        return 0;
      } else {
        return b[Math.floor(Math.random() * b.length)];
      }
    };
    this.ΔᐃⵠⲆΔΔΔ = function (b) {
      var c = 0;
      for (var d = 0; b.length > d; d++) {
        c += b[d].nu;
      }
      var e = document.getElementById("servselect");
      if (wx.ΔΔⲆⲆⵠΔⵠ[wx.ᐃⲆⵠΔⵠ] === -1) {
        wx.ΔΔⲆⲆⵠΔⵠ[wx.ᐃⲆⵠΔⵠ] = e.selectedIndex = wx.ⲆᐃⵠⲆᐃⲆⵠᐃᐃ(b);
      } else {
        e.selectedIndex = wx.ΔΔⲆⲆⵠΔⵠ[wx.ᐃⲆⵠΔⵠ];
      }
      var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + _b[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + _b[323] + " (" + this.ᐃⵠⵠΔΔⵠⲆ + ") " + _b[325] + "</li>";
      for (d = 0; b.length > d; d++) {
        f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
      }
      f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + _b[326] + "</li>";
      f += "</div>";
      e.innerHTML = f;
      $(".md-select").on("click", function () {
        $(this).toggleClass("active");
      });
      $(".md-select ul li").on("click", function () {
        var b = $(this).text();
        var c = -1;
        for (var d = wx.ΔᐃΔⲆΔ[wx.ᐃⲆⵠΔⵠ], e = 0; d.length > e; e++) {
          if (b === a(d[e])) {
            c = e;
            break;
          }
        }
        if (c !== -1) {
          document.getElementById("servselect").selectedIndex = c;
          wx.ΔΔⲆⲆⵠΔⵠ[wx.ᐃⲆⵠΔⵠ] = c;
          $(".md-select ul li").removeClass("active");
          $(this).addClass("active");
          $(".md-select label button").text(b);
        }
      });
    };
    this.ᐃⵠⵠΔΔⵠⲆ = 0;
    this.ΔᐃⲆⵠᐃᐃⵠΔΔ = function () {
      this.ᐃⵠⵠΔΔⵠⲆ = 0;
      for (var a = 0; a < wx.Ⲇᐃᐃⵠⵠ.length; a++) {
        if (this.Ⲇᐃᐃⵠⵠ[a].gm == "experimental") {
          this.ΔᐃΔⲆΔ[7].push(this.Ⲇᐃᐃⵠⵠ[a]);
        } else if (this.Ⲇᐃᐃⵠⵠ[a].gm == "zombies") {
          this.ΔᐃΔⲆΔ[2].push(this.Ⲇᐃᐃⵠⵠ[a]);
        } else if (this.Ⲇᐃᐃⵠⵠ[a].gm == "community") {
          this.ΔᐃΔⲆΔ[6].push(this.Ⲇᐃᐃⵠⵠ[a]);
        } else if (this.Ⲇᐃᐃⵠⵠ[a].gm == "forest") {
          this.ΔᐃΔⲆΔ[4].push(this.Ⲇᐃᐃⵠⵠ[a]);
        } else if (this.Ⲇᐃᐃⵠⵠ[a].gm == "battle-royale") {
          this.ΔᐃΔⲆΔ[5].push(this.Ⲇᐃᐃⵠⵠ[a]);
        } else if (this.Ⲇᐃᐃⵠⵠ[a].gm == "vampires") {
          this.ΔᐃΔⲆΔ[3].push(this.Ⲇᐃᐃⵠⵠ[a]);
        } else {
          this.ΔᐃΔⲆΔ[0].push(this.Ⲇᐃᐃⵠⵠ[a]);
        }
        this.ᐃⵠⵠΔΔⵠⲆ += this.Ⲇᐃᐃⵠⵠ[a].nu;
      }
      for (a = 0; a < this.ΔᐃΔⲆΔ.length; a++) {
        if (this.ΔᐃΔⲆΔ[a].length === 0) {
          this.ΔᐃΔⲆΔ[a].push({
            a: _b[327],
            ΔⲆⲆⵠⲆⲆᐃⵠⵠ: 0,
            Ⲇᐃ: "127.0.0.1",
            ΔⲆⵠ: 80
          });
        }
      }
      this.ΔᐃⵠⲆΔΔΔ(this.ΔᐃΔⲆΔ[0]);
      this.ᐃᐃⵠΔΔ = function (a) {
        wx.ᐃⲆⵠΔⵠ = a;
        wx.ΔᐃⵠⲆΔΔΔ(wx.ΔᐃΔⲆΔ[wx.ᐃⲆⵠΔⵠ]);
        wx.ΔᐃⵠⲆΔΔΔ(wx.ΔᐃΔⲆΔ[wx.ᐃⲆⵠΔⵠ]);
        document.getElementById("servselect").selectedIndex = wx.ᐃⲆⵠΔⵠ;
      };
    };
    this.ΔⵠⲆⲆᐃᐃᐃ = 0;
    this.ⵠⲆⵠⵠᐃΔΔ = 0;
    this.ⲆⲆΔⵠᐃ = null;
    this.timeout = function () {
      c.ⵠⲆⵠⵠᐃΔΔ++;
      c.ⵠⵠⲆᐃ.close();
      if (c.ⵠⲆⵠⵠᐃΔΔ > 3) {
        Kx = 1;
        yx.ΔΔᐃΔᐃⵠⲆⵠⲆ = Df.ⲆⲆⲆᐃⲆⵠΔᐃᐃ;
        c.ⵠᐃⲆΔⲆ(_b[300]);
        yx.waiting = Ak;
        if (Ax.reconnect.enabled) {
          Cx.ⲆⵠᐃΔⲆ(yx.ⵠΔΔᐃᐃ);
        }
      } else if (Ax.ΔⵠᐃⵠⲆⲆⵠ === bg || Ax.ⲆᐃⲆΔΔΔᐃ === Fk || bg === Ax.ΔΔⵠᐃΔᐃⲆ || Ax.ⵠⲆⵠΔΔⲆΔ === Jh) {
        yx.ᐃΔⲆⵠᐃᐃΔ(function () {
          c.Δⵠᐃᐃⵠᐃᐃ();
        }, 1);
      } else {
        c.Δⵠᐃᐃⵠᐃᐃ();
      }
    };
    this.ᐃΔⵠᐃⲆⲆΔ = function (a) {
      if (this.ⵠⵠⲆᐃ.ΔⵠΔⲆΔ == this.ΔⵠΔⲆΔ) {
        this.ΔⵠΔⲆΔ++;
        this.ⵠᐃⲆΔⲆ(_b[301] + a);
        Cx.ⲆⵠᐃΔⲆ(yx.ⵠΔΔᐃᐃ);
      }
    };
    this.ᐃⲆⵠᐃΔⲆᐃⵠΔ = function () {
      this.ⵠᐃⲆΔⲆ("You speak too much");
    };
    this.ⵠᐃᐃΔΔⲆⵠΔᐃ = function () {
      clearTimeout(this.ⲆⲆΔⵠᐃ);
      this.ⵠᐃⲆΔⲆ(_b[302]);
      yx.waiting = false;
    };
    this.ᐃⲆⵠⵠⲆⲆⲆᐃⲆ = function () {
      Ax.ΔⵠⲆᐃⵠ.open = false;
    };
    this.ᐃⵠⲆⲆᐃΔⲆᐃⵠ = function () {
      Cx.ⲆᐃΔᐃⲆΔᐃ = 0;
    };
    this.ⵠⵠⵠⲆΔᐃⲆΔⲆ = function () {
      Cx.ⵠⲆⲆΔᐃΔⲆ = 0;
    };
    this.ᐃⵠᐃΔⲆⲆΔⲆⲆ = function (a) {
      Ax.ᐃⲆΔΔⲆ.ᐃᐃᐃⵠΔ = a;
      if (zx.ⲆᐃⲆⲆⲆ > -300) {
        if (a === 0) {
          this.ⵠᐃⲆΔⲆ(_b[340]);
        } else {
          this.ⵠᐃⲆΔⲆ(_b[341]);
        }
      }
    };
    this.ⵠᐃᐃⵠⵠ = function (a) {
      Ax.ⵠᐃᐃⵠⵠ = a;
    };
    this.ⲆⲆⲆⲆⲆΔᐃᐃⲆ = function (a) {
      Ax.ⵠΔᐃᐃⵠΔⲆ = a;
    };
    this.ⵠΔᐃᐃⵠΔⲆ = function (a) {
      Ax.ΔⵠⲆⲆⵠ.ᐃᐃᐃⵠΔ = a;
      if (zx.ΔΔⵠⲆⵠ > -300) {
        if (a === 0) {
          this.ⵠᐃⲆΔⲆ(_b[342]);
        } else {
          this.ⵠᐃⲆΔⲆ(_b[343]);
        }
      }
    };
    this.ⵠⵠⲆΔΔᐃᐃⲆⵠ = function (a) {
      if (a === 0) {
        document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
      } else if (a === 1) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else if (a === 2) {
        document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
      } else if (a === 3) {
        document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
      }
    };
    this.ⵠⲆⵠⲆⵠⲆⲆⵠⲆ = function () {
      Cx.ΔΔΔⵠᐃᐃᐃ = 0;
    };
    this.ⵠⵠⵠⵠΔⲆΔΔΔ = function () {
      Cx.ⲆΔⲆⲆⲆΔⲆ = 0;
    };
    this.ΔᐃⵠⲆᐃΔᐃᐃⲆ = function () {
      Ax.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ = [];
      Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ = [];
      Ax.ᐃΔΔⲆ.id = -1;
      Ax.ᐃΔΔⲆ.ᐃⵠΔᐃⵠᐃⵠ.stop();
      Ax.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ = [];
      Ax.ᐃⵠⲆᐃ.ᐃΔⵠᐃΔ = false;
      Ax.ᐃⵠⲆᐃ.ᐃΔⲆᐃⵠᐃⵠⲆΔ = Jo;
      Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = -1;
      Ax.ᐃⵠⲆᐃ.id = -1;
      Ax.ᐃⵠⲆᐃ.ⲆΔⵠΔⲆ = Ma;
      Ax.ᐃⵠⲆᐃ.ⵠⵠΔΔᐃ = Cj;
      Ax.ᐃⵠⲆᐃ.ᐃᐃΔᐃᐃ = false;
      Ax.ᐃⵠⲆᐃ.ⲆᐃᐃΔᐃΔᐃ = false;
      Ax.ᐃⵠⲆᐃ.timeout = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0, 1, 0, 1, 1);
    };
    this.ⲆΔᐃⲆᐃⵠⵠᐃⲆ = function () {
      clearTimeout(this.ⲆⲆΔⵠᐃ);
      this.ⵠᐃⲆΔⲆ();
      yx.waiting = false;
    };
    this.ᐃΔᐃⲆⲆⲆⵠ = function (a) {
      for (var b = 0; b < a.length; b++) {
        if (typeof a[b] === "string") {
          a[b] = ΔⵠΔⵠ.ΔⲆᐃΔⵠⵠΔ(a[b]);
        }
      }
      Ax.ᐃⵠΔⵠΔ.ⵠⵠΔⵠⲆ(a[1], a[2], a[3], a[4]);
    };
    this.message = function (a) {
      this.ⵠᐃⲆΔⲆ(a);
    };
    this.ⲆᐃᐃⲆⲆᐃⲆⲆᐃ = function () {
      clearTimeout(this.ⲆⲆΔⵠᐃ);
      this.ⵠᐃⲆΔⲆ(_b[339]);
      yx.waiting = Jo;
    };
    this.ⲆⵠΔⵠⲆⲆⲆⵠΔ = function () {
      clearTimeout(this.ⲆⲆΔⵠᐃ);
      this.ⵠᐃⲆΔⲆ(_b[338]);
      yx.waiting = false;
    };
    this.ⲆᐃⲆΔᐃⲆⲆΔΔ = function () {
      clearTimeout(this.ⲆⲆΔⵠᐃ);
      this.ⵠᐃⲆΔⲆ(_b[304]);
      yx.waiting = $h;
    };
    this.ⲆΔⵠΔⵠⲆΔⵠⲆ = function () {
      Ax.ᐃΔΔⲆ.ⵠⲆⵠΔⲆⵠᐃ(1, 0);
      Cx.ᐃⲆΔⵠΔᐃⵠ();
    };
    this.ᐃᐃᐃⵠⵠⲆΔⵠᐃ = function (a) {
      var b = a[1];
      var c = zx.ⵠΔᐃΔ[b];
      c.ⲆΔⵠⵠ = a[2];
      c.ⵠⵠΔΔⵠ = a[3];
      c.ⵠⵠⵠΔⲆⵠⲆ = a[4];
      c.ⵠΔⲆΔᐃ = a[5];
      c.ⵠⲆΔΔⲆ = a[6];
      c.ΔⵠᐃⲆΔ = a[7];
      c.level = a[8];
      var d = zx.ⵠⵠⲆⵠⲆ[b * zx.ⲆⵠᐃΔᐃΔⵠ];
      if (d) {
        d.ⲆΔⵠⵠ = a[2];
        d.ⵠⵠΔΔⵠ = a[3];
        d.ⵠⵠⵠΔⲆⵠⲆ = a[4];
        d.ⵠΔⲆΔᐃ = a[5];
      }
    };
    this.ᐃᐃᐃᐃΔⲆᐃᐃᐃ = function (a) {
      if (a === 29) {
        Ax.ᐃΔΔⲆ.ⵠⲆⵠΔⲆⵠᐃ(1, 0);
        Cx.ᐃⲆΔⵠΔᐃⵠ();
      } else {
        this.ⵠᐃᐃᐃΔⲆΔ([0, a, 1]);
      }
      Ax.ᐃⵠⲆᐃ.ⵠⵠᐃᐃᐃⲆᐃ();
    };
    this.ⵠⲆᐃΔΔΔᐃⲆⲆ = function (a) {
      Ax.ⲆᐃΔΔⵠ.ⵠᐃᐃⵠᐃ = 0;
      Ax.ᐃⵠⲆᐃ.ⲆᐃᐃⲆⵠⵠΔΔⲆ(a);
    };
    this.ΔⵠᐃⲆΔⵠᐃⲆⲆ = function (a) {
      for (var b = Nt[a].r, c = 0; b.length > c; c++) {
        if (Ax.ᐃΔΔⲆ.max > Ax.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ.length || Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[b[c][0]] > 0) {
          var d = Math.floor(b[c][1] * 0.8);
          if (!d) {
            continue;
          }
          this.ⵠᐃᐃᐃΔⲆΔ([0, b[c][0], d]);
        }
      }
      Ax.ᐃⵠⲆᐃ.ⵠⵠᐃᐃᐃⲆᐃ();
    };
    this.ΔᐃᐃⲆΔⵠⵠΔΔ = function (a) {
      Ax.ⲆᐃΔΔⵠ.ⵠᐃᐃⵠᐃ = 0;
      Ax.ᐃⵠⲆᐃ.ΔᐃⲆΔᐃⵠΔⵠⲆ(a);
    };
    this.ⵠᐃⲆΔⲆ = function (a) {
      if (Ax.alert.text) {
        if (a !== Ax.alert.text && a !== Ax.alert.list[Ax.alert.list.length - 1]) {
          Ax.alert.list.push(a);
        }
      } else {
        Ax.alert.text = a;
      }
    };
    this.ᐃᐃᐃⵠⲆᐃᐃᐃⵠ = function () {
      this.ⵠᐃⲆΔⲆ(_b[305]);
    };
    this.ΔⵠⵠⵠⲆᐃⲆᐃⵠ = function () {
      var a;
      a = Ax.ⲆΔᐃ == 0 ? _b[306] : _b[307] + (Ax.ⲆΔᐃ + 1) + _b[308];
      this.ⵠᐃⲆΔⲆ(a);
      Ax.ⲆΔᐃ++;
    };
    this.ⲆΔⲆⵠⲆⲆᐃⲆᐃ = function () {
      clearTimeout(c.ⲆⲆΔⵠᐃ);
      Ax.reconnect.enabled = false;
      Ax.ⲆⲆΔᐃⵠ = nl;
      this.ⵠᐃⲆΔⲆ(_b[309]);
      Cx.ⲆⵠᐃΔⲆ(yx.ⵠΔΔᐃᐃ);
      this.ⵠⵠⲆᐃ.close();
    };
    this.ᐃⲆΔⵠΔⵠΔⲆᐃ = function () {
      Kx = 1;
      clearTimeout(this.ⲆⲆΔⵠᐃ);
      this.ⵠᐃⲆΔⲆ(_b[310]);
      yx.waiting = false;
    };
    this.ⲆⲆΔΔᐃᐃᐃᐃⵠ = function () {
      Kx = 1;
      clearTimeout(this.ⲆⲆΔⵠᐃ);
      this.ⵠᐃⲆΔⲆ(_b[311]);
      yx.waiting = hl;
    };
    this.ⵠᐃⲆⲆᐃΔⵠᐃΔ = function (a) {
      var b = a[1];
      var c = zx.ⵠΔᐃΔ;
      c[b].ⲆⲆΔⵠⵠ = a[2];
      c[b].ⲆΔⵠⵠ = a[3];
      c[b].ⵠⵠΔΔⵠ = a[4];
      c[b].ⵠⵠⵠΔⲆⵠⲆ = a[5];
      c[b].ⵠΔⲆΔᐃ = a[6];
      c[b].ⵠⲆΔΔⲆ = a[7];
      c[b].ΔⵠᐃⲆΔ = a[8];
      c[b].level = a[9];
      c[b].ᐃⲆⲆⲆⲆ = 0;
      c[b].ΔⵠⵠⵠⲆᐃⲆ = null;
      c[b].label = null;
      c[b].ᐃⲆⵠⵠΔⲆΔ = null;
      c[b].ⲆⲆΔᐃⵠ = Pr;
      if (zf === 1) {
        c[b].ⲆⲆΔⵠⵠ += "|" + b;
      }
    };
    this.ⲆᐃⵠⵠⲆⲆⲆⵠΔ = function () {
      this.ⵠⵠⲆᐃ[ff](mq[lq].stringify([9]));
    };
    this.ⲆⲆⲆⲆΔⲆⲆⵠⵠ = function () {
      this.ⵠᐃⲆΔⲆ(_b[312]);
    };
    this.ΔⲆⲆᐃΔΔⵠ = function () {
      this.ⵠᐃⲆΔⲆ(_b[313]);
    };
    this.ⲆⵠⵠⲆⵠⲆΔᐃᐃ = function (a) {
      this.ⵠⵠⲆᐃ[ff](Wa[Eq].stringify([38, a]));
      Ax.ΔⵠⲆᐃⵠ.open = false;
    };
    this.ΔᐃᐃⵠⲆΔⲆΔᐃ = function (a) {
      for (var b = Mf[a - 1].items, c = 0; b.length > c && Ax.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ.length < Ax.ᐃΔΔⲆ.max; c++) {
        var d = b[c][1];
        var e = b[c][0];
        if (b[c][1] === 29) {
          Ax.ᐃΔΔⲆ.ⵠⲆⵠΔⲆⵠᐃ(1, 0);
        } else {
          this.ⵠᐃᐃᐃΔⲆΔ([0, d, e]);
        }
      }
    };
    this.ⵠᐃᐃᐃΔⲆΔ = function (b) {
      for (var c = b.length, d = Ax.ᐃΔΔⲆ, e = 1; e < c; e += 2) {
        var f = b[e];
        var g = b[e + 1];
        for (var h = 0; h < d.ⵠΔᐃᐃᐃ.length; h++) {
          if (f == d.ⵠΔᐃᐃᐃ[h].id) {
            d.ⵠᐃΔⵠ[f] += g;
            break;
          }
        }
        if (h == d.ⵠΔᐃᐃᐃ.length) {
          d.ⵠᐃΔⵠ[f] = g;
          d.ⵠΔᐃᐃᐃ.push(Cx.ᐃⵠⵠ[f]);
          Cx.ᐃⲆΔⵠΔᐃⵠ();
        }
      }
      Ax.ᐃⵠⲆᐃ.ⲆᐃⲆ();
    };
    this.ⲆᐃⵠⲆ = function (b, c, d, e, f, g, a) {
      Ax.ⲆᐃⵠⲆ.ᐃᐃⲆᐃ = b / 100;
      Ax.ⲆᐃⵠⲆ.ⲆΔⲆ = c / 100;
      Ax.ⲆᐃⵠⲆ.c = d / 100;
      Ax.ⲆᐃⵠⲆ.Δᐃᐃ = e / 100;
      Ax.ⲆᐃⵠⲆ.Ⲇⵠⵠ = f / 100;
      Ax.ⲆᐃⵠⲆ.ᐃᐃᐃΔⲆⵠᐃ = g / 100;
      Ax.ⵠᐃᐃⵠⵠ = a;
    };
    this.ⵠᐃⵠᐃΔᐃΔᐃΔ = function (a) {
      Cx.ᐃⲆⲆⲆ.modify(a, 2);
    };
    this.ⲆΔⵠΔΔΔΔΔΔ = function (a) {
      Cx.ᐃⲆⲆⲆ.modify(a, 0);
    };
    this.claimed = function (a) {
      Cx.ᐃⲆⲆⲆ.modify(a, 3);
    };
    this.ᐃⵠᐃΔⵠⵠⵠⵠⲆ = function (a, b) {
      Ax.ⲆᐃⵠⲆ.ᐃᐃⲆᐃ = a / 100;
      Ax.ⵠᐃᐃⵠⵠ = b;
    };
    this.ΔⵠⲆΔⵠΔᐃⵠⲆ = function (a) {
      Ax.ⲆᐃⵠⲆ.Δᐃᐃ = a / 100;
    };
    this.ΔⵠⵠⵠΔⲆⵠᐃⲆ = function (a) {
      Ax.ⲆᐃⵠⲆ.ⲆΔⲆ = a / 100;
    };
    this.ⵠⵠⵠⲆᐃΔᐃᐃΔ = function (a) {
      Ax.ⲆᐃⵠⲆ.ᐃᐃᐃΔⲆⵠᐃ = a / 100;
    };
    this.ᐃⲆⲆᐃⲆᐃᐃⲆᐃ = function (a) {
      Ax.ⲆᐃⵠⲆ.c = a / 100;
    };
    this.ᐃᐃᐃⵠⲆΔⵠⲆⵠ = function (a) {
      zx.time = a;
      zx.transition = ae;
      Dx.transition = 1;
    };
    this.ᐃⲆⲆΔᐃΔⲆⲆΔ = function () {
      document.getElementById("game_body").style.backgroundColor = Cs.ⵠⵠΔᐃⵠ[zx.time];
    };
    this.ⲆΔΔⵠΔΔΔΔΔ = function (a) {
      if (zx.mode == 1 && zx.ⵠΔᐃΔ[a].ⲆⲆΔⵠⵠ !== "spectator") {
        this.ⵠᐃⲆΔⲆ(zx.ⵠΔᐃΔ[a].ⲆⲆΔⵠⵠ + _b[314]);
      }
      zx.ⵠΔᐃΔ[a].ⲆⲆΔᐃⵠ = false;
    };
    this.ⲆⲆⵠΔΔΔᐃⲆᐃ = function (a) {
      var b = new Uint16Array(a);
      ΔⵠⲆⵠ.ⲆⲆΔ.ⲆΔΔⲆΔ(b[1], b[2]);
    };
    this.ᐃΔΔⲆⲆᐃⵠΔⵠ = function (a) {
      var b = new Uint16Array(a);
      Ax.ⲆⲆΔ.ⲆΔΔⲆΔ(b[1], b[2]);
    };
    this.ⵠⲆⵠⲆΔⵠⲆᐃⲆ = function (b, c) {
      var d = new Uint16Array(c);
      for (var e = (b.length - 2) / 4, f = 0; f < e; f++) {
        var g = d[1 + f * 2];
        var i = b[4 + f * 4];
        var j = (b[5 + f * 4] >> 1) / 127 * Math.PI * 2;
        var k = zx.ⵠⵠⲆⵠⲆ[i * zx.ⲆⵠᐃΔᐃΔⵠ + g];
        if (k && k.ⵠⵠᐃ) {
          if (Dx.loaded && Dx.ⵠΔΔᐃᐃ) {
            Dx.ⵠⵠᐃ(b[5 + f * 4] & 1, ⵠⲆΔⵠⲆ[k.type], k.x, k.y);
          }
          k.ⵠⵠᐃ.angle = j;
          k.ⵠⵠᐃ.ⲆᐃⲆ = j;
        }
      }
    };
    this.ⲆΔⵠᐃΔⲆᐃⲆⵠ = function (b) {
      var c = new Uint16Array(b);
      for (var d = (c.length - 1) / 4, e = 0; e < d; e++) {
        var f;
        var i = e * 4;
        var j = c[1 + i];
        var k = c[2 + i];
        var m = (c[3 + i] >> 1) / 127 * Math.PI * 2;
        var p = c[4 + i];
        var q = ux.ΔᐃⲆΔ[k][j];
        switch (p) {
          case 0:
            (f = q.p[0][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 1:
            (f = q.s[0][0]).angle = m;
            f.ⲆᐃⲆ = $a;
            break;
          case 2:
            (f = q.s[1][0]).angle = m;
            f.ⲆᐃⲆ = Qo;
            break;
          case 3:
            (f = q.s[2][0]).angle = m;
            f.ⲆᐃⲆ = sn;
            break;
          case 4:
            (f = q.t[0][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 5:
            (f = q.t[1][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 6:
            (f = q.t[2][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 7:
            (f = q.t[3][0]).angle = m;
            f.ⲆᐃⲆ = Gn;
            break;
          case 8:
            (f = q.t[4][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 9:
            (f = q.t[5][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 10:
            (f = q.g[0][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 11:
            (f = q.g[1][0]).angle = m;
            f.ⲆᐃⲆ = ie;
            break;
          case 12:
            (f = q.g[2][0]).angle = m;
            f.ⲆᐃⲆ = Gn;
            break;
          case 13:
            (f = q.d[0][0]).angle = m;
            f.ⲆᐃⲆ = Qo;
            break;
          case 14:
            (f = q.d[1][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 15:
            (f = q.d[2][0]).angle = m;
            f.ⲆᐃⲆ = ro;
            break;
          case 16:
            (f = q.b[0][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 17:
            (f = q.b[1][0]).angle = m;
            f.ⲆᐃⲆ = Mj;
            break;
          case 18:
            (f = q.b[2][0]).angle = m;
            f.ⲆᐃⲆ = ie;
            break;
          case 19:
            (f = q.b[3][0]).angle = m;
            f.ⲆᐃⲆ = Zr;
            break;
          case 20:
            (f = q.f[0][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 21:
            (f = q.f[1][0]).angle = m;
            f.ⲆᐃⲆ = ae;
            break;
          case 22:
            (f = q.f[2][0]).angle = m;
            f.ⲆᐃⲆ = B;
            break;
          case 23:
            (f = q.sw[0][0]).angle = m;
            f.ⲆᐃⲆ = ro;
            break;
          case 24:
            (f = q.sw[1][0]).angle = m;
            f.ⲆᐃⲆ = ge;
            break;
          case 25:
            (f = q.sw[2][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 26:
            (f = q.gw[0][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 27:
            (f = q.gw[1][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 28:
            (f = q.gw[2][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 29:
            (f = q.dw[0][0]).angle = m;
            f.ⲆᐃⲆ = Pr;
            break;
          case 30:
            (f = q.dw[1][0]).angle = m;
            f.ⲆᐃⲆ = Gn;
            break;
          case 31:
            (f = q.dw[2][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 32:
            (f = q.a[0][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 33:
            (f = q.a[1][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 34:
            (f = q.a[2][0]).angle = m;
            f.ⲆᐃⲆ = _h;
            break;
          case 35:
            (f = q.cs[0][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 36:
            (f = q.cs[1][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 37:
            (f = q.cs[2][0]).angle = m;
            f.ⲆᐃⲆ = nr;
            break;
          case 38:
            (f = q.cs[3][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 40:
            (f = q.plm[0][0]).angle = m;
            f.ⲆᐃⲆ = nq;
            break;
          case 41:
            (f = q.plm[1][0]).angle = m;
            f.ⲆᐃⲆ = nr;
            break;
          case 42:
            (f = q.plm[2][0]).angle = m;
            f.ⲆᐃⲆ = Gn;
            break;
          case 50:
            (f = q.re[0][0]).angle = m;
            f.ⲆᐃⲆ = Mj;
            break;
          case 51:
            (f = q.re[1][0]).angle = m;
            f.ⲆᐃⲆ = nr;
            break;
          case 52:
            (f = q.re[2][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 55:
            (f = q.c[0][0]).angle = m;
            f.ⲆᐃⲆ = ie;
            break;
          case 56:
            (f = q.m[0][0]).angle = m;
            f.ⲆᐃⲆ = sn;
            break;
          case 57:
            (f = q.m[1][0]).angle = m;
            f.ⲆᐃⲆ = true;
            break;
          case 58:
            (f = q.m[2][0]).angle = m;
            f.ⲆᐃⲆ = Bk;
        }
        if (Dx.loaded && Dx.ⵠΔΔᐃᐃ && f) {
          Dx.ⵠⵠᐃ(c[3 + i] & 1, ⵠⲆⵠΔ[p], f.x, f.y);
        }
      }
    };
    this.ΔΔᐃᐃΔ = function () {
      this.ⵠⵠⲆᐃ[ff](Aa[za].stringify([35, Ax.ΔΔᐃᐃΔ.ⵠⵠΔᐃ, Ax.ΔΔᐃᐃΔ.ⲆᐃΔΔᐃ]));
    };
    this.ⲆⲆⵠΔᐃΔΔᐃΔ = function (a, b) {
      this.ⵠⵠⲆᐃ[ff](Aa[Ua].stringify([30, b, a.ⵠⵠΔᐃ, a.ⲆᐃΔΔᐃ]));
    };
    this.ΔᐃⲆᐃⲆⵠᐃ = function (a, b, c) {
      if (b) {
        this.ⵠⵠⲆᐃ[ff](Aa[Ua].stringify([14, b, a.ⵠⵠΔᐃ, a.ⲆᐃΔΔᐃ]));
      } else {
        this.ⵠⵠⲆᐃ[ff](Aa[Ba].stringify([25, c, a.ⵠⵠΔᐃ, a.ⲆᐃΔΔᐃ]));
      }
    };
    this.ⵠⲆᐃΔⲆⵠⲆΔⵠ = function (a) {
      this.ⵠⵠⲆᐃ[ff](wq[zq].stringify([13, a.ⵠⵠΔᐃ, a.ⲆᐃΔΔᐃ]));
    };
    this.ᐃⲆΔⲆⵠⲆⲆⵠⲆ = function (a) {
      this.ⵠⵠⲆᐃ[ff](wq[Mq].stringify([32, a]));
    };
    this.ᐃⵠᐃΔᐃΔΔΔⵠ = function (a) {
      this.ⵠⵠⲆᐃ[ff](tq[za].stringify([29, a.ⵠⵠΔᐃ, a.ⲆᐃΔΔᐃ]));
    };
    this.ΔⲆΔᐃΔΔⲆⲆⲆ = function (a, b) {
      this.ⵠⵠⲆᐃ[ff](Wa[zq].stringify([27, b, a.ⵠⵠΔᐃ, a.ⲆᐃΔΔᐃ, a.type]));
    };
    this.ⵠΔᐃΔⵠⲆᐃⲆⵠ = function (a, b) {
      this.ⵠⵠⲆᐃ[ff](Wa[zq].stringify([7, b, a.ⵠⵠΔᐃ, a.ⲆᐃΔΔᐃ]));
    };
    this.ΔⵠᐃⲆⲆᐃᐃΔΔ = function (a, b, c) {
      this.ⵠⵠⲆᐃ[ff](tq[Ua].stringify([1, b, c, a.ⵠⵠΔᐃ, a.ⲆᐃΔΔᐃ]));
    };
    this.ᐃΔⲆΔᐃᐃᐃ = function (a) {
      this.ⵠⵠⲆᐃ[ff](wq[zq].stringify([37, a.ⵠⵠΔᐃ, a.ⲆᐃΔΔᐃ, a.type]));
    };
    this.ⵠⲆⲆᐃΔⵠⵠⲆⲆ = function (a) {
      this.ⵠⵠⲆᐃ[ff](wq[zq].stringify([4, a.ⵠⵠΔᐃ, a.ⲆᐃΔΔᐃ]));
    };
    this.ᐃᐃⲆⵠΔⲆΔⲆⲆ = function (a) {
      this.ⵠⵠⲆᐃ[ff](wq[zq].stringify([8, a.ⵠⵠΔᐃ, a.ⲆᐃΔΔᐃ]));
    };
    this.ⲆⲆᐃᐃΔΔⲆⲆᐃ = function (a) {
      this.ⵠⵠⲆᐃ[ff](Cq[Aq].stringify([20, a.ⵠⵠΔᐃ, a.ⲆᐃΔΔᐃ]));
    };
    this.ⵠΔⵠΔⵠᐃᐃⵠΔ = function (a) {
      this.ⵠⵠⲆᐃ[ff](Kq[Eq].stringify([3, a.ⲆᐃΔΔᐃ]));
    };
    this.ⵠⵠⵠⵠⲆⵠΔ = function (a) {
      c.ⵠⵠⲆᐃ[ff](Sq[Mq].stringify([23, Ax.ⵠⲆⲆⲆⵠ.id, Ax.ᐃΔⵠⵠᐃ[a]]));
    };
    this.ᐃᐃᐃΔΔⵠΔΔⲆ = function () {
      c.ⵠⵠⲆᐃ[ff](_q[Zq].stringify([17, Ax.ⵠⲆⲆⲆⵠ.ⵠⵠΔᐃ, Ax.ⵠⲆⲆⲆⵠ.id]));
    };
    this.ⵠΔⵠⵠⵠᐃᐃ = function () {
      c.ⵠⵠⲆᐃ[ff](br[$q].stringify([12]));
    };
    this.ᐃΔⵠⲆⲆᐃⵠᐃᐃ = function () {
      c.ⵠⵠⲆᐃ[ff](br[Mq].stringify([19, Ax.ⵠⲆⲆⲆⵠ.id]));
      if (document.getElementById("lock_team").innerHTML == "LOCK") {
        Ax.ⵠⲆⲆⲆⵠ.lock = 1;
        document.getElementById("lock_team").innerHTML = "UNLOCK";
      } else {
        Ax.ⵠⲆⲆⲆⵠ.lock = 0;
        document.getElementById("lock_team").innerHTML = "LOCK";
      }
    };
    this.ⲆΔΔ = function (j, e, i) {
      var k = new Uint16Array(j);
      if (i) {
        zx.ΔⲆΔΔⲆⲆᐃⵠᐃ();
      }
      for (var n = (e.length - 2) / 18, o = 0; n > o; o++) {
        var q = 2 + o * 18;
        var t = 1 + o * 9;
        var w = e[q];
        var x = k[t + 1];
        var y = k[t + 5];
        var z = zx.ⲆⵠᐃΔᐃΔⵠ * w + y;
        if (x & 1) {
          zx.ᐃᐃⲆᐃΔⵠⵠⵠⵠ(z);
        } else {
          var A = k[t + 2];
          var B = k[t + 3];
          var D = k[t + 4];
          var E = k[t + 6];
          var F = k[t + 7];
          var G = k[t + 8];
          var H = e[q + 1] / 255 * Math.PI * 2;
          if (zx.ⵠⵠⲆⵠⲆ[z]) {
            var I = zx.ⵠⵠⲆⵠⲆ[z];
            I.r.x = B;
            I.r.y = D;
            if (w != 0 && ΔⵠΔⵠ.ΔⲆⲆᐃ(I, I.r) > 200) {
              I.x = B;
              I.y = D;
            }
            if (Ax.id !== I.id || w === 0) {
              I.ⲆⲆᐃⲆᐃⲆᐃ = H;
            }
            I.action |= x;
            I.info = E;
            I.ⲆⲆⲆΔᐃ = F;
            I.ⵠⵠΔᐃᐃ = G;
            if (I.ⲆᐃⲆ) {
              I.ⲆᐃⲆ(x);
            }
          } else {
            var J = new Wf(A, w, y, B, D, H, x, E, F, G);
            zx.ⵠⵠⲆⵠⲆ[z] = J;
            zx.ⲆΔΔ[A].push(J);
          }
        }
      }
    };
    this.ⵠΔᐃⲆ = function (a) {
      this.ΔⵠⲆⲆᐃᐃᐃ = Gx;
      var b = new Uint16Array(a);
      Ax.ᐃⲆᐃⲆΔ.ⵠΔⲆΔⲆ(b);
    };
    this.ᐃⵠΔΔⵠⲆΔⵠᐃ = function (a) {
      if (mb !== undefined) {
        Nt = mb;
      }
      if (a.length > 0) {
        mb = JSON.parse(JSON.stringify(Nt));
        for (var b = 0; b < a.length; b++) {
          var c = a[b];
          var d = Nt[c.item];
          if (d !== undefined) {
            d.r = c.recipe;
            d.w = c.workbench;
            d.f = c.fire;
            d.Ⲇⵠⵠ = c.water;
            d.e = c.well;
            d.time = 1 / c.time;
          }
        }
      }
    };
    this.ΔⵠΔᐃⲆⲆⵠ = function (a) {
      if (a && a.length !== 0) {
        Ax.ΔⵠΔᐃⲆⲆⵠ.message = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
            b = b.replace("\\n", "\n");
          }
          b = b.split("\n");
          Δⵠ = [];
          var f = b.length * 18 + 10;
          var g = 0;
          d.font = 14 + "px Baloo Paaji";
          for (var h = 0; h < b.length; h++) {
            if (b[h].charAt(0) === "#") {
              Δⵠ[h] = b[h].substring(0, 7);
              b[h] = b[h].substring(8);
            } else {
              Δⵠ[h] = "#FFFFFF";
            }
            g = Math.max(d.measureText(b[h]).width + 16, g);
          }
          c.height = f;
          c.width = g;
          h = 0;
          for (; h < b.length; h++) {
            var i = gm(1, b[h], 14, Δⵠ[h], null, null, null, null, null, "#000", 6);
            d.drawImage(i, 8, h * 18 + 5);
          }
          return c;
        }(a);
      } else {
        Ax.ΔⵠΔᐃⲆⲆⵠ.message = Ur;
      }
    };
    this.Ⲇⵠⵠⵠᐃ = function (a) {
      var b = zx.ⵠⵠⲆⵠⲆ[a[1] * zx.ⲆⵠᐃΔᐃΔⵠ];
      if (b) {
        if (zx.mode === 2 && b.ⲆΔⵠⵠ === 0) {
          if (Ax.ΔΔΔⵠⵠ) {
            if (Math.random() > 0.5) {
              b.text.push(a[2] + " ..." + ΔᐃΔᐃⲆ);
            } else {
              b.text.push(ΔᐃΔᐃⲆ + "... " + a[2]);
            }
          } else {
            b.text.push(ⲆⵠⲆⲆᐃⲆᐃ[Math.floor(Math.random() * ⲆⵠⲆⲆᐃⲆᐃ.length)]);
          }
        } else {
          b.text.push(a[2]);
        }
      }
    };
    this.ΔⲆΔⵠⵠᐃⲆⲆᐃ = function (a) {
      if (Ax.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ.length !== Ax.ᐃΔΔⲆ.max || Nt[a].ᐃΔΔᐃ === 29 || Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(Nt[a].ᐃΔΔᐃ) != -1 || Ax.ᐃΔΔⲆ.ΔΔⵠⵠⵠΔΔᐃᐃ(Nt[a].r)) {
        this.ⵠⵠⲆᐃ[ff](mq[lq].stringify([26, a]));
        return 1;
      } else {
        this.ΔⲆⲆᐃΔΔⵠ();
        return 0;
      }
    };
    this.ⲆΔⵠΔⲆ = function (a) {
      Ax.ᐃⵠⲆᐃ.ᐃⵠⲆᐃᐃᐃⵠᐃΔ(a);
    };
    this.ⵠⵠΔΔᐃ = function (a) {
      Ax.ᐃⵠⲆᐃ.ⵠⵠΔΔᐃ = a;
      Ax.ᐃⵠⲆᐃ.ⲆᐃⲆ();
    };
    this.ᐃᐃΔᐃᐃ = function (a) {
      Ax.ᐃⵠⲆᐃ.ᐃᐃΔᐃᐃ = a;
      Ax.ᐃⵠⲆᐃ.ⲆᐃⲆ();
    };
    this.ⲆᐃᐃΔᐃΔᐃ = function (a) {
      Ax.ᐃⵠⲆᐃ.ⲆᐃᐃΔᐃΔᐃ = a;
      Ax.ᐃⵠⲆᐃ.ⲆᐃⲆ();
    };
    this.ΔⲆⲆᐃⵠⲆᐃⲆΔ = function (a) {
      this.ⵠᐃⲆΔⲆ(_b[315]);
    };
    this.ⲆΔᐃᐃᐃⵠᐃΔᐃ = function () {
      Ax.ᐃⵠⲆᐃ.ⵠⵠᐃᐃᐃⲆᐃ();
    };
    this.Δⵠⵠⵠⵠ = function (a) {
      Cx.Δⵠⵠⵠⵠ.ⵠΔᐃΔ = [];
      var b = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
      var c = 0;
      for (var d = 1; d < a.length; d += 2) {
        var e = {
          x: Math.floor(a[d] * zx.w / 250),
          y: Math.floor(a[d + 1] * zx.ⲆΔⲆ / 250)
        };
        if (b && !c && !Ax.ⲆⵠΔⵠΔⲆΔ && ΔⵠΔⵠ.ΔⲆⲆᐃ(e, b) < 250) {
          c += 1;
        } else {
          Cx.Δⵠⵠⵠⵠ.ⵠΔᐃΔ.push(e);
        }
      }
    };
    this.ⵠⵠᐃⵠᐃᐃᐃΔΔ = function () {
      Ax.ΔΔᐃᐃΔ.open = false;
      Ax.ΔⲆⲆΔⵠ.enabled = Jo;
      Ax.ΔⲆⲆΔⵠ.ⵠᐃᐃⵠᐃ = -1;
      Ax.ΔⲆⲆΔⵠ.label = null;
      Ax.ΔⲆⲆΔⵠ.ⵠΔᐃⵠᐃⵠΔ = null;
      Ax.ΔⲆⲆΔⵠ.now = -1;
    };
    this.ΔⲆⲆΔⵠ = function (a) {
      If.ⵠᐃΔⵠΔⲆⵠ = a;
      Ax.ΔⲆⲆΔⵠ.enabled = true;
      Ax.ΔⲆⲆΔⵠ.ⵠᐃᐃⵠᐃ = new Date().getTime();
      Ax.ΔⲆⲆΔⵠ.label = null;
      Ax.ΔⲆⲆΔⵠ.now = -1;
      for (var b = [39, 45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; c < b.length; c++) {
        var d = Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(b[c]);
        if (d != -1) {
          Ax.ᐃΔΔⲆ.ΔᐃΔᐃᐃⲆᐃ(b.length[c], d);
        }
      }
      Ax.ᐃⵠⲆᐃ.ⵠⵠᐃᐃᐃⲆᐃ();
    };
    this.ⵠⵠⵠⵠⲆⵠᐃⲆⵠ = function (a, b, c) {
      this.ⲆΔΔⲆⲆⲆⵠ(a, b * 256 + c);
    };
    this.ⲆΔΔⲆⲆⲆⵠ = function (a, b) {
      Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = -1;
      Ax.ᐃΔΔⲆ.ⲆⵠⵠᐃⵠⲆᐃ(a, b, Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(a));
      Ax.ᐃⵠⲆᐃ.ⲆᐃⲆ();
    };
    this.ΔⲆⵠⵠⵠⵠⵠⲆᐃ = function (a) {
      Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = -1;
      Ax.ⵠⲆᐃⲆΔ.wait = true;
      var b = Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(a);
      Ax.ᐃΔΔⲆ.ⲆⵠⵠᐃⵠⲆᐃ(a, 1, b);
      if (b >= 0 && !Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ[a]) {
        Ax.ᐃⵠⲆᐃ.ⲆᐃⲆ();
      }
      if (a == 159) {
        Ax.ᐃΔⵠⵠᐃ = [Ax.id];
      }
    };
    this.ⵠᐃⲆᐃⲆⵠⲆⲆΔ = function () {
      this.ⵠⵠⲆᐃ[ff](Aa[za].stringify([6]));
    };
    this.ⲆΔᐃⵠᐃΔᐃⵠᐃ = function (a) {
      this.ⵠⵠⲆᐃ[ff](Wa[Ba].stringify([2, a.ⲆΔⵠΔᐃ, a.id]));
    };
    this.ⵠⲆᐃⵠⲆᐃΔΔΔ = function (a, b) {
      this.ⵠⵠⲆᐃ[ff](Wa[zq].stringify([10, a, b]));
    };
    this.ΔⵠΔⲆⲆΔⲆᐃⲆ = function () {
      var a = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
      if (a) {
        var b = Math.PI * 2;
        this.ⵠⵠⲆᐃ[ff](Wa[Ba].stringify([22, Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ, Math.floor((a.angle + b) % b * 255 / b), Ax.ᐃⵠⲆᐃ.mode]));
      }
    };
    this.ⵠⲆⲆᐃⲆ = function (a, b) {
      switch (a) {
        case 195:
        case 110:
        case 116:
        case 117:
        case 145:
        case 127:
        case 133:
        case 136:
        case 142:
        case 143:
        case 189:
        case 207:
        case 233:
        case 205:
        case 209:
        case 211:
        case 192:
        case 137:
        case 138:
        case 196:
        case 197:
        case 200:
        case 199:
          Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = -1;
          this.ⵠⵠⲆᐃ[ff](tq[Ua].stringify([34, a]));
          break;
        case 114:
        case 160:
        case 115:
        case 132:
        case 188:
        case 206:
        case 204:
        case 191:
        case 193:
        case 208:
        case 210:
        case 113:
        case 162:
        case 163:
        case 164:
        case 165:
        case 118:
        case 167:
        case 151:
        case 152:
        case 166:
        case 171:
        case 172:
        case 173:
        case 124:
        case 218:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 220:
        case 168:
        case 169:
        case 170:
        case 119:
        case 122:
        case 123:
        case 217:
        case 219:
        case 125:
        case 190:
        case 141:
        case 135:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 198:
        case 201:
        case 182:
        case 183:
        case 144:
        case 159:
        case 221:
          if (!Ax.ΔΔΔⵠⵠ) {
            if (a === Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ) {
              Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = -1;
            } else {
              Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = a;
            }
          }
          break;
        case 0:
        case 57:
        case 5:
        case 6:
        case 30:
        case 19:
        case 9:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 92:
        case 93:
        case 12:
        case 13:
        case 14:
        case 15:
        case 33:
        case Ah.ⲆⲆΔᐃΔⵠΔⵠΔ:
        case 16:
        case 17:
        case 34:
        case 18:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
          if (!Ax.ΔΔΔⵠⵠ) {
            Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = -1;
            if ((c = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ]) && a === c.right) {
              this.ⵠⵠⲆᐃ[ff](wq[zq].stringify([34, 7]));
            } else {
              Ax.ⲆΔⵠⲆΔ.wait = re;
              this.ⵠⵠⲆᐃ[ff](Cq[Aq].stringify([34, a]));
            }
          }
          break;
        case 1:
        case 8:
        case 3:
        case 4:
        case 35:
        case 36:
        case 37:
        case 28:
        case 38:
        case 39:
        case 31:
        case 32:
        case 45:
        case 46:
        case 50:
        case 51:
        case 52:
        case 55:
        case 56:
        case 53:
        case 54:
        case 89:
        case 49:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
          if (!Ax.ΔΔΔⵠⵠ) {
            Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = -1;
            if ((c = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ]) && a === c.right) {
              this.ⵠⵠⲆᐃ[ff](Kq[Eq].stringify([34, 7]));
            } else {
              this.ⵠⵠⲆᐃ[ff](Sq[Mq].stringify([34, a]));
            }
          }
          break;
        case 223:
        case 224:
        case 225:
        case 239:
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 91:
          if (!Ax.ΔΔΔⵠⵠ) {
            Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = -1;
            var c = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
            this.ⵠⵠⲆᐃ[ff](Sq[Mq].stringify([34, a]));
          }
          break;
        case 77:
        case 78:
        case 79:
        case 58:
        case 25:
        case 26:
        case 27:
        case 43:
        case 44:
        case 20:
        case 21:
        case 22:
        case 59:
        case 60:
        case 90:
        case 61:
        case 47:
          if ((c = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ]) && a !== c.ⵠΔⲆᐃΔ) {
            Ax.ⲆΔΔΔⲆ.wait = De;
          }
          this.ⵠⵠⲆᐃ[ff](tq[zq].stringify([34, a]));
          break;
        case 10:
        case 83:
        case 84:
        case 86:
        case 11:
        case 40:
        case 88:
        case 82:
        case 80:
        case 81:
        case 41:
        case 42:
        case 85:
        case 23:
        case 24:
        case 48:
          this.ⵠⵠⲆᐃ[ff](_q[Zq].stringify([34, a]));
      }
    };
    this.ᐃᐃᐃⲆⲆⲆΔᐃΔ = function (a) {
      this.ⵠⵠⲆᐃ[ff](Wa[lq].stringify([31, a]));
    };
    this.ᐃΔΔΔᐃⲆΔΔⲆ = function (a) {
      Ax.ⵠⲆᐃⲆΔ.wait = true;
      var b = Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(a);
      Ax.ᐃΔΔⲆ.ΔᐃΔᐃᐃⲆᐃ(a, b);
      Ax.ᐃⵠⲆᐃ.ⲆᐃⲆ();
    };
    this.ᐃΔⵠⲆⵠⲆⵠΔⲆ = function (a, b) {
      this.ⵠⵠⲆᐃ[ff](mq[Eq].stringify([18, a]));
    };
    this.ⲆⵠⲆᐃΔⵠⲆⵠⲆ = function (a, b) {
      this.ⵠⵠⲆᐃ[ff](Aa[za].stringify([24, a]));
    };
    this.ⵠⵠⵠΔⲆΔΔⲆΔ = function (a) {
      Ax.ⵠⲆᐃⲆΔ.wait = true;
      var b = Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(a);
      Ax.ᐃΔΔⲆ.ⲆⵠⵠᐃⵠⲆᐃ(a, 1, b);
      Ax.ᐃⵠⲆᐃ.ⲆᐃⲆ();
    };
    this.ⲆⵠⲆⵠΔⵠⲆⲆᐃ = function (a) {
      var b = a[1];
      var c = a[2];
      Ax.ⵠⲆᐃⲆΔ.wait = ie;
      var d = Ax.ᐃΔΔⲆ.ⵠⵠⲆᐃΔ(b);
      Ax.ᐃΔΔⲆ.ⲆⵠⵠᐃⵠⲆᐃ(b, c, d);
      Ax.ᐃⵠⲆᐃ.ⲆᐃⲆ();
    };
    this.ⵠᐃᐃᐃΔΔⲆⵠⲆ = function () {
      this.ⵠⵠⲆᐃ[ff](Aa[za].stringify([16]));
    };
    this.ⵠΔΔⵠᐃⵠᐃΔᐃ = function (a) {
      var b = Math.PI * 2;
      this.ⵠⵠⲆᐃ[ff](Wa[Ba].stringify([36, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ⵠᐃᐃⲆⲆᐃⲆΔᐃ = function (a) {
      var b = Math.PI * 2;
      this.ⵠⵠⲆᐃ[ff](Wa[Ba].stringify([0, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ᐃᐃⲆᐃᐃΔΔⵠⵠ = function (a) {
      this.ⵠⵠⲆᐃ[ff](ΔᐃⲆᐃᐃᐃΔ[0].stringify([11, a]));
    };
    this.ⲆⲆⵠⵠΔⲆᐃᐃᐃ = function (a) {
      this.ⵠⵠⲆᐃ[ff](wq[zq].stringify([33, a]));
    };
    this.ᐃⲆⵠⲆΔΔᐃᐃΔ = function (a) {
      var b = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
      if (Ax.ΔΔΔⵠⵠ) {
        if (Math.random() > 0.5) {
          b.text.push(a.substring(0, 25) + " ..." + ΔᐃΔᐃⲆ);
        } else {
          b.text.push(ΔᐃΔᐃⲆ + "... " + a.substring(0, 25));
        }
      } else {
        b.text.push(a);
      }
      this.ⵠⵠⲆᐃ[ff](wq[zq].stringify([15, a]));
    };
    this.ⵠᐃⲆᐃᐃ = function (a) {
      var b = ΔⵠⲆⵠ.select.ⲆΔΔ;
      if (b.length != 0) {
        var c = [11];
        var d = [];
        ΔⵠΔⵠ.ᐃΔⲆᐃΔΔⵠ(a, {
          x: ΔⵠⲆⵠ.ⲆⲆΔ.rx,
          y: ΔⵠⲆⵠ.ⲆⲆΔ.ry
        });
        c.push(a.x);
        c.push(a.y);
        for (var e = 0; b.length > e; e++) {
          d.push(b[e].ᐃⵠⲆᐃᐃΔⲆᐃᐃ);
        }
        c.push(d);
        this.ⵠⵠⲆᐃ[ff](Cq[Aq].stringify(c));
      }
    };
    this.ⲆⵠⵠᐃΔⲆⲆ = 0;
    this.ᐃᐃⲆⵠⲆᐃᐃ = {
      Ⲇᐃ: 0,
      ⲆⲆᐃⲆ: 0
    };
    this.ᐃᐃᐃᐃⵠⵠΔΔⲆ = function () {
      if (Gx - this.ⲆⵠⵠᐃΔⲆⲆ > 50) {
        this.ⲆⵠⵠᐃΔⲆⲆ = Gx;
        var a = Ax.ⲆⲆΔ;
        var b = Math.floor(a.x / 100);
        var c = Math.floor(a.y / 100);
        if (this.ᐃᐃⲆⵠⲆᐃᐃ.Ⲇᐃ != b || c != this.ᐃᐃⲆⵠⲆᐃᐃ.ⲆⲆᐃⲆ) {
          this.ⵠⵠⲆᐃ[ff](Sq[Eq].stringify([28, Math.floor(-a.x), Math.floor(-a.y)]));
          this.ᐃᐃⲆⵠⲆᐃᐃ.Ⲇᐃ = b;
          this.ᐃᐃⲆⵠⲆᐃᐃ.ⲆⲆᐃⲆ = c;
        }
      }
    };
    this.ⲆⵠᐃᐃⲆⲆᐃ = 0;
    this.ᐃΔΔᐃᐃⵠΔΔⵠ = function () {
      if (Gx - this.ⲆⵠᐃᐃⲆⲆᐃ > 60000) {
        this.ⲆⵠᐃᐃⲆⲆᐃ = Gx;
        //this.ping();
      }
    };
    this.ᐃΔⵠΔᐃΔᐃΔᐃ = function () {
      Ax.reconnect.enabled = nq;
      if (c.ΔⵠΔⲆΔ == c.ⵠⵠⲆᐃ.ΔⵠΔⲆΔ) {
        c.ΔⵠΔⲆΔ++;
        c.ⵠⵠⲆᐃ.close();
        wx.connect();
      }
    };
    this.ⲆⲆΔⲆᐃΔⲆⵠⲆ = function (a) {
      this.ⵠᐃⲆΔⲆ(_b[316]);
      for (var b = 1; b < a.length; b++) {
        Ax.ᐃΔⵠⵠᐃ.push(a[b]);
      }
    };
    this.ᐃᐃΔⲆΔⲆⵠⵠᐃ = function (a) {
      this.ⵠᐃⲆΔⲆ(zx.ⵠΔᐃΔ[a].ⲆⲆΔⵠⵠ + _b[318]);
      Ax.ᐃΔⵠⵠᐃ.push(a);
      var b = document.getElementById("team_box");
      if (Cx.ⲆⵠⲆⲆⲆ != -1 && b.style.display == "inline-block") {
        Cx.ΔⵠⲆⵠΔ[Cx.ⲆⵠⲆⲆⲆ].action();
      }
    };
    this.ⵠⵠᐃⲆΔⵠᐃⵠᐃ = function () {
      this.ⵠᐃⲆΔⲆ(_b[319]);
      Ax.ⵠⲆⲆⲆⵠ.wait = Bk;
      Ax.ᐃΔⵠⵠᐃ = [];
      document.getElementById("team_box").style.display = "none";
    };
    this.ⲆⲆΔᐃΔΔⲆᐃⵠ = function (a) {
      if (Ax.id == a) {
        this.ⵠᐃⲆΔⲆ(_b[320]);
        Ax.ⵠⲆⲆⲆⵠ.wait = Zr;
        Ax.ᐃΔⵠⵠᐃ = [];
        document.getElementById("team_box").style.display = "none";
      } else {
        this.ⵠᐃⲆΔⲆ(zx.ⵠΔᐃΔ[a].ⲆⲆΔⵠⵠ + _b[321]);
        for (var b = 0; Ax.ᐃΔⵠⵠᐃ.length > b; b++) {
          if (Ax.ᐃΔⵠⵠᐃ[b] == a) {
            Ax.ᐃΔⵠⵠᐃ.splice(b, 1);
            break;
          }
        }
        var c = document.getElementById("team_box");
        if (Cx.ⲆⵠⲆⲆⲆ != -1 && c.style.display == "inline-block") {
          Cx.ΔⵠⲆⵠΔ[Cx.ⲆⵠⲆⲆⲆ].action();
        }
      }
    };
    this.ᐃᐃⲆⵠΔⵠΔΔᐃ = function (a) {
      Ax.ⲆⲆΔᐃⵠ = false;
      this.ⵠᐃⲆΔⲆ(_b[322]);
      if (this.ⵠⵠⲆᐃ.ΔⵠΔⲆΔ == this.ΔⵠΔⲆΔ) {
        this.ΔⵠΔⲆΔ++;
        Cx.ⲆⵠᐃΔⲆ(yx.ⵠΔΔᐃᐃ);
        this.ⵠⵠⲆᐃ.close();
      }
    };
    this.ΔⵠᐃⲆⵠⵠⲆⲆΔ = function (a, b) {
      Ax.ⲆⲆΔᐃⵠ = false;
      var c = new Uint16Array(b);
      var d = new Uint32Array(b);
      Ax.ᐃⵠᐃᐃᐃΔΔ.ᐃⵠⲆⵠⲆⲆⵠ = Pt[a][Math.floor(Math.random() * Pt[a].length)];
      Ax.ᐃⵠᐃᐃᐃΔΔ.ᐃⲆⲆⲆⲆ = ΔⵠΔⵠ.ⵠⵠᐃᐃᐃⲆΔ(zx.ⵠΔᐃΔ[Ax.id].ᐃⲆⲆⲆⲆ);
      Ax.ᐃⵠᐃᐃᐃΔΔ.ⵠⵠⲆᐃⲆⲆⲆ = ΔⵠΔⵠ.ⵠⵠᐃᐃᐃⲆΔ(d[1]);
      Ax.ᐃⵠᐃᐃᐃΔΔ.ΔᐃΔⵠⲆ = c[1];
      this.ⵠᐃⲆΔⲆ(_b[317]);
      if (this.ΔⵠΔⲆΔ == this.ⵠⵠⲆᐃ.ΔⵠΔⲆΔ) {
        this.ΔⵠΔⲆΔ++;
        Cx.ⲆⵠᐃΔⲆ(Bx.ⵠΔΔᐃᐃ);
        this.ⵠⵠⲆᐃ.close();
        try {
          ij.Widget.adsRefresh();
        } catch (a) { }
      }
    };
    this.ping = function () {
      this.ⵠⵠⲆᐃ[ff]("[21]");
    };
    this.ᐃⲆΔⲆᐃⲆⵠⲆⵠ = function () {
      if (this.ⵠⵠⲆᐃ.readyState == 3) {
        this.ΔⵠⲆⲆᐃᐃᐃ -= 600000;
      }
    };
    this.ⲆⲆΔⲆΔⵠⵠⲆΔ = function () {
      if (Hx > 5) {
        this.ΔⵠⲆⲆᐃᐃᐃ = Gx;
      }
      if (Gx - this.ΔⵠⲆⲆᐃᐃᐃ > 600000) {
        this.ΔⵠⲆⲆᐃᐃᐃ = Gx;
        this.ᐃΔⵠΔᐃΔᐃΔᐃ();
      }
    };
    this.ⲆᐃᐃΔΔⵠⲆⵠⵠ = function (b) {
      Kx++;
      clearTimeout(this.ⲆⲆΔⵠᐃ);
      document.getElementById("commandMainBoxName").innerHTML = this.ΔᐃΔⲆΔ[this.ᐃⲆⵠΔⵠ][this.ΔΔⲆⲆⵠΔⵠ[this.ᐃⲆⵠΔⵠ]].a;
      document.getElementById("exploreForest").src = "img/forest-leaf.png";
      document.getElementById("exploreWinter").src = "img/winter-flake.png";
      document.getElementById("exploreDesert").src = "img/desert-cactus.png";
      document.getElementById("exploreLava").src = "img/lava-volcano.png";
      this.ΔⵠⲆⲆᐃᐃᐃ = Gx;
      Ax.ⲆᐃⵠⲆ.ⵠᐃΔᐃⵠ.ⵠⲆᐃⲆᐃ = Ax.ⲆᐃⵠⲆ.ⵠᐃΔᐃⵠ.ΔⵠΔΔΔ;
      Ax.ⲆᐃⵠⲆ.ᐃⵠΔⵠᐃᐃΔ.ⵠⲆᐃⲆᐃ = Ax.ⲆᐃⵠⲆ.ᐃⵠΔⵠᐃᐃΔ.ΔⵠΔΔΔ;
      Ax.ⲆᐃⵠⲆ.ᐃΔⵠᐃⵠΔⲆ.ⵠⲆᐃⲆᐃ = Ax.ⲆᐃⵠⲆ.ᐃΔⵠᐃⵠΔⲆ.ΔⵠΔΔΔ;
      Ax.ⲆᐃⵠⲆ.ᐃⲆⲆⵠΔⲆⲆ.ⵠⲆᐃⲆᐃ = Ax.ⲆᐃⵠⲆ.ᐃⲆⲆⵠΔⲆⲆ.ΔⵠΔΔΔ;
      Ax.ⲆᐃⵠⲆ.ᐃᐃⵠᐃⵠ.ⵠⲆᐃⲆᐃ = Ax.ⲆᐃⵠⲆ.ᐃᐃⵠᐃⵠ.ΔⵠΔΔΔ;
      Ax.ⲆᐃⵠⲆ.ᐃᐃⲆᐃ = 1;
      Ax.ⲆᐃⵠⲆ.c = 1;
      Ax.ⲆᐃⵠⲆ.ⲆΔⲆ = 1;
      Ax.ⲆᐃⵠⲆ.Δᐃᐃ = 1;
      Ax.ⲆᐃⵠⲆ.Ⲇⵠⵠ = 1;
      Ax.ⲆᐃⵠⲆ.ᐃᐃᐃΔⲆⵠᐃ = 1;
      Ax.ⲆᐃⲆᐃΔⵠⵠ = Ir;
      Cx.ⲆⲆⵠⲆᐃ.display = 0;
      Ax.ᐃΔΔⲆ.ⵠΔᐃᐃᐃ = [];
      Ax.ᐃΔΔⲆ.ⵠᐃΔⵠ = [];
      Ax.ᐃΔΔⲆ.max = 10;
      Ax.ᐃΔΔⲆ.ⵠⲆⵠⵠᐃᐃΔ = 0;
      Ax.ᐃΔΔⲆ.ⲆⲆⲆᐃⵠ = 0;
      Ax.ᐃΔΔⲆ.id = -1;
      Cx.ⲆᐃΔᐃⲆΔᐃ = 1;
      Cx.ⵠⲆⲆΔᐃΔⲆ = 1;
      Cx.ⲆΔⲆⲆⲆΔⲆ = 1;
      Cx.ΔΔΔⵠᐃᐃᐃ = 1;
      Ax.ⲆⲆΔᐃⵠ = true;
      Ax.ᐃΔΔⲆ.ᐃⵠΔᐃⵠᐃⵠ.stop();
      Ax.ᐃⵠⲆᐃ.ᐃΔᐃⲆᐃ = [];
      Ax.ᐃⵠⲆᐃ.ᐃΔⵠᐃΔ = false;
      Ax.ᐃⵠⲆᐃ.ᐃΔⲆᐃⵠᐃⵠⲆΔ = false;
      Ax.ᐃⵠⲆᐃ.ᐃⵠⲆⲆ = -1;
      Ax.ᐃⵠⲆᐃ.id = -1;
      Ax.ᐃⵠⲆᐃ.ⲆΔⵠΔⲆ = hl;
      Ax.ᐃⵠⲆᐃ.ⵠⵠΔΔᐃ = kn;
      Ax.ᐃⵠⲆᐃ.ᐃᐃΔᐃᐃ = es;
      Ax.ᐃⵠⲆᐃ.ⲆᐃᐃΔᐃΔᐃ = Ak;
      Ax.ᐃⵠⲆᐃ.timeout = new ΔⵠΔⵠ.ΔᐃΔⵠ(kg, 0, 1, 0, 1, 1);
      Ax.ⲆΔⵠⲆΔ.timeout = new ΔⵠΔⵠ.ΔᐃΔⵠ(Jo, 0, 1, 0, 1 / 10, 1);
      Ax.ⲆΔⵠⲆΔ.wait = false;
      Ax.ⲆΔΔΔⲆ.timeout = new ΔⵠΔⵠ.ΔᐃΔⵠ(Ak, 0, 1, 0, 1 / 5, 1);
      Ax.ⲆΔΔΔⲆ.wait = false;
      Ax.ⵠⲆᐃⲆΔ.timeout = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0, 1, 0, 1, 1);
      Ax.ⵠⲆᐃⲆΔ.wait = false;
      Ax.ⵠⲆⲆⲆⵠ.id = -1;
      Ax.ⵠⲆⲆⲆⵠ.ⵠⵠΔᐃ = -1;
      Ax.ⵠⲆⲆⲆⵠ.wait = ks;
      Ax.ⵠⲆⲆⲆⵠ.timeout = new ΔⵠΔⵠ.ΔᐃΔⵠ(false, 0, 1, 0, 1 / 30, 1);
      Cx.Δⵠⵠⵠⵠ.ⲆⵠⲆⵠΔ.x = -1;
      Cx.Δⵠⵠⵠⵠ.ⲆⵠⲆⵠΔ.y = -1;
      Cx.ΔⲆΔΔ.open = nl;
      Cx.Δⵠⵠⵠⵠ.ⵠΔᐃΔ = [];
      Ax.ᐃᐃΔⵠⵠ.enabled = ks;
      zx.mode = b[1];
      if (b[20] !== undefined && cq !== b[21]) {
        zx.ΔᐃᐃⵠΔ = b[20];
        zx.ᐃⵠᐃᐃᐃ = b[21];
        zx.w = zx.ΔᐃᐃⵠΔ * zx.ᐃᐃⵠΔⲆᐃᐃ;
        zx.ⲆΔⲆ = zx.ᐃⲆⵠⲆᐃⵠⲆ * zx.ᐃⵠᐃᐃᐃ;
      }
      zx.ΔᐃⲆⲆᐃⵠⵠ = b[22];
      zx.ⵠᐃⵠΔΔ = b[23];
      c.ΔⵠΔᐃⲆⲆⵠ(b[24]);
      c.ᐃⵠΔΔⵠⲆΔⵠᐃ(b[25]);
      Ax.ᐃⲆΔΔⲆ.ᐃᐃᐃⵠΔ = b[26];
      Ax.ⵠΔᐃᐃⵠΔⲆ = 0;
      Ax.ΔⵠⲆⲆⵠ.ᐃᐃᐃⵠΔ = b[27];
      zx.ⵠᐃᐃᐃⲆⲆⵠⵠⲆ(b[19]);
      zx.time = b[5];
      zx.ⵠΔⵠΔⲆ.ΔᐃΔΔⵠ = b[15];
      zx.ⵠΔⵠΔⲆ.ⵠΔⲆΔⲆ = new Date().getTime();
      Cx.ᐃⲆⲆⲆ.ⲆⲆⵠⲆⲆⲆⵠ = b[16];
      zx.transition = cg;
      Ax.ⲆΔᐃ = b[2];
      Cx.ᐃⲆⲆⲆ.reset();
      Ax.ᐃΔⵠⵠᐃ = b[8];
      zx.ⲆΔΔ[0] = [];
      zx.ⲆΔΔ[100] = [];
      zx.ⲆΔΔ[2] = [];
      zx.ⲆΔΔ[1] = [];
      zx.ⲆΔΔ[6] = [];
      zx.ⲆΔΔ[3] = [];
      zx.ⲆΔΔ[31] = [];
      zx.ⲆΔΔ[37] = [];
      zx.ⲆΔΔ[43] = [];
      zx.ⲆΔΔ[44] = [];
      zx.ⲆΔΔ[39] = [];
      zx.ⲆΔΔ[40] = [];
      zx.ⲆΔΔ[54] = [];
      zx.ⲆΔΔ[55] = [];
      zx.ⲆΔΔ[4] = [];
      zx.ⲆΔΔ[7] = [];
      zx.ⲆΔΔ[8] = [];
      zx.ⲆΔΔ[9] = [];
      zx.ⲆΔΔ[10] = [];
      zx.ⲆΔΔ[15] = [];
      zx.ⲆΔΔ[16] = [];
      zx.ⲆΔΔ[17] = [];
      zx.ⲆΔΔ[45] = [];
      zx.ⲆΔΔ[46] = [];
      zx.ⲆΔΔ[47] = [];
      zx.ⲆΔΔ[48] = [];
      zx.ⲆΔΔ[49] = [];
      zx.ⲆΔΔ[53] = [];
      zx.ⲆΔΔ[11] = [];
      zx.ⲆΔΔ[22] = [];
      zx.ⲆΔΔ[23] = [];
      zx.ⲆΔΔ[5] = [];
      zx.ⲆΔΔ[12] = [];
      zx.ⲆΔΔ[13] = [];
      zx.ⲆΔΔ[14] = [];
      zx.ⲆΔΔ[60] = [];
      zx.ⲆΔΔ[70] = [];
      zx.ⲆΔΔ[71] = [];
      zx.ⲆΔΔ[72] = [];
      zx.ⲆΔΔ[73] = [];
      zx.ⲆΔΔ[74] = [];
      zx.ⲆΔΔ[81] = [];
      zx.ⲆΔΔ[82] = [];
      zx.ⲆΔΔ[87] = [];
      zx.ⲆΔΔ[86] = [];
      zx.ⲆΔΔ[34] = [];
      zx.ⲆΔΔ[65] = [];
      zx.ⲆΔΔ[66] = [];
      zx.ⲆΔΔ[67] = [];
      zx.ⲆΔΔ[62] = [];
      zx.ⲆΔΔ[63] = [];
      zx.ⲆΔΔ[78] = [];
      zx.ⲆΔΔ[77] = [];
      zx.ⲆΔΔ[75] = [];
      zx.ⲆΔΔ[76] = [];
      zx.ⲆΔΔ[64] = [];
      zx.ⲆΔΔ[69] = [];
      zx.ⲆΔΔ[68] = [];
      zx.ⲆΔΔ[79] = [];
      zx.ⲆΔΔ[89] = [];
      zx.ⲆΔΔ[83] = [];
      zx.ⲆΔΔ[84] = [];
      zx.ⲆΔΔ[85] = [];
      zx.ⲆΔΔ[80] = [];
      zx.ⲆΔΔ[88] = [];
      zx.ⲆΔΔ[91] = [];
      zx.ⲆΔΔ[90] = [];
      zx.ⲆΔΔ[61] = [];
      zx.ⲆΔΔ[18] = [];
      zx.ⲆΔΔ[19] = [];
      zx.ⲆΔΔ[20] = [];
      zx.ⲆΔΔ[21] = [];
      zx.ⲆΔΔ[50] = [];
      zx.ⲆΔΔ[52] = [];
      zx.ⲆΔΔ[51] = [];
      zx.ⲆΔΔ[29] = [];
      zx.ⲆΔΔ[56] = [];
      zx.ⲆΔΔ[30] = [];
      zx.ⲆΔΔ[38] = [];
      zx.ⲆΔΔ[33] = [];
      zx.ⲆΔΔ[32] = [];
      zx.ⲆΔΔ[24] = [];
      zx.ⲆΔΔ[25] = [];
      zx.ⲆΔΔ[26] = [];
      zx.ⲆΔΔ[27] = [];
      zx.ⲆΔΔ[28] = [];
      zx.ⲆΔΔ[42] = [];
      zx.ⲆΔΔ[41] = [];
      zx.ⲆΔΔ[35] = [];
      zx.ⲆΔΔ[36] = [];
      zx.ⵠⵠⲆⵠⲆ = [];
      zx.ⲆⵠᐃΔᐃΔⵠ = b[7];
      Ax.id = b[9];
      Ax.Ⲇᐃᐃⵠ = Ax.id * zx.ⲆⵠᐃΔᐃΔⵠ;
      if (Dx.loaded) {
        Dx.ⵠΔᐃΔ[0].Ⲇᐃᐃⵠ = Ax.Ⲇᐃᐃⵠ;
        Dx.ⵠΔᐃΔ[0].ⲆΔⵠⲆᐃⲆΔ = 0;
      }
      Ex.ᐃⵠΔⵠΔⲆᐃ();
      Ax.ⲆⲆΔ.ⲆΔΔⲆΔ(b[3], b[10]);
      zx.ⵠΔᐃΔ = [];
      var d = zx.ⵠΔᐃΔ;
      for (var e = 0; e < b[11]; e++) {
        d.push(new Rf());
      }
      e = 0;
      for (var f = b[4]; f.length > e; e++) {
        var g = d[f[e].i];
        g.ⲆⲆΔⵠⵠ = f[e].n;
        g.ⲆΔⵠⵠ = f[e].s;
        g.ⵠⵠΔΔⵠ = f[e].a;
        g.ⵠⲆΔΔⲆ = f[e].c;
        g.ⵠΔⲆΔᐃ = f[e].b;
        g.ΔⵠᐃⲆΔ = f[e].d;
        g.ⵠⵠⵠΔⲆⵠⲆ = f[e].g;
        g.level = f[e].l;
        g.ᐃⲆⲆⲆⲆ = ΔⵠΔⵠ.ⲆᐃΔⵠΔᐃⲆ(f[e].p);
        g.ⲆⲆΔᐃⵠ = true;
        if (zf === 1) {
          g.ⲆⲆΔⵠⵠ += "|" + f[e].i;
        }
      }
      Ax.ᐃⲆᐃⲆΔ.sort();
      if (zx.mode === 1 && zx.ⵠΔᐃΔ[Ax.id].ⲆⲆΔⵠⵠ === "spectator") {
        Ax.ⲆⵠΔⵠΔⲆΔ = true;
      } else {
        Ax.ⲆⵠΔⵠΔⲆΔ = false;
      }
      if (zx.mode === 2 && zx.ⵠΔᐃΔ[Ax.id].ⲆΔⵠⵠ === 0) {
        Ax.ΔΔΔⵠⵠ = true;
      } else {
        Ax.ΔΔΔⵠⵠ = false;
      }
      if (zx.mode === 3 && zx.ⵠΔᐃΔ[Ax.id].ⲆΔⵠⵠ === 0) {
        Ax.ᐃⲆΔΔΔⵠΔ = true;
      } else {
        Ax.ᐃⲆΔΔΔⵠΔ = false;
      }
      ᐃΔΔⵠ.set("starve_token", Ax.ΔⲆⵠⵠᐃ);
      if (b[12] === 0) {
        Ax.ΔⵠⲆᐃⵠ.ⵠᐃᐃⵠᐃ = 0;
        Cx.ᐃⲆⲆⲆ.restore(b[17]);
        var h = b[14];
        if (h[29]) {
          Ax.ᐃΔΔⲆ.ⵠⲆⵠΔⲆⵠᐃ(1, 0);
        }
        for (e = 0; e < h.length; e++) {
          if (h[e]) {
            if (e == 29) {
              continue;
            }
            if (e == 7) {
              continue;
            }
            this.ⵠᐃᐃᐃΔⲆΔ([0, e, h[e]]);
          }
        }
        Ax.ΔⵠⲆᐃⵠ.open = cg;
      } else {
        if (zx.mode === 4) {
          this.ⵠᐃᐃᐃΔⲆΔ([0, 238, 1]);
        } else if (zx.mode === 3) {
          if (Ax.ᐃⲆΔΔΔⵠΔ) {
            this.ⵠᐃᐃᐃΔⲆΔ([0, 190, 4]);
          } else {
            this.ⵠᐃᐃᐃΔⲆΔ([0, 191, 3]);
          }
        }
        if (zx.mode === 0 || zx.mode === 3 || zx.mode === 7 || zx.mode === 4) {
          Ax.ΔⵠⲆᐃⵠ.ⵠᐃᐃⵠᐃ = new Date().getTime();
          Ax.ΔⵠⲆᐃⵠ.open = true;
          Ax.ΔⵠⲆᐃⵠ.value = b[13];
          Cx.ΔⵠⲆᐃⵠ.ⵠΔⲆΔⲆ();
        } else {
          Ax.ΔⵠⲆᐃⵠ.ⵠᐃᐃⵠᐃ = 0;
          Ax.ΔⵠⲆᐃⵠ.open = Oq;
          Ax.ΔⵠⲆᐃⵠ.value = 0;
        }
        Ax.ⲆⵠᐃᐃⵠⲆᐃ = b[12].toString();
      }
      Ax.ΔⲆⲆΔⵠ.enabled = b[6];
      Ax.ΔⲆⲆΔⵠ.ⵠᐃᐃⵠᐃ = -1;
      Ax.ΔⲆⲆΔⵠ.label = null;
      Ax.ΔⲆⲆΔⵠ.now = -1;
      ᐃΔΔⵠ.set("starve_token_id", Ax.ⲆⵠᐃᐃⵠⲆᐃ);
      if (Ax.reconnect.enabled) {
        Ax.reconnect.rotate = 0;
        Ax.reconnect.enabled = Sl;
      } else {
        yx.ⲆⵠᐃΔⲆ(Cx.ⵠΔΔᐃᐃ);
        if (ga) {
          ga("send", "event", "Game", "play", "S" + yx.ⲆΔⵠⵠ + "A" + yx.ⵠⵠΔΔⵠ);
        }
      }
    };
    this.connect = function () {
      c.ⵠⲆⵠⵠᐃΔΔ = 0;
      c.Δⵠᐃᐃⵠᐃᐃ();
    };
    this.ⵠᐃΔᐃᐃⲆⵠ = [];
    this.ⵠΔΔⵠⵠⲆⵠⲆⲆ = function (b) {
      const d = c.Ⲇᐃᐃⵠⵠ.filter(a => a.gm === b);
      const f = {};
      for (let a = 0; a < d.length; a++) {
        const b = d[a];
        const c = b.r;
        if (c !== _o) {
          if (f[c] === qg) {
            f[c] = [];
          }
          f[c].push(b);
        }
      }
      function g(d) {
        c.ⵠᐃΔᐃᐃⲆⵠ[b] = d;
        const e = f[d];
        const g = e[Math.floor(Math.random() * e.length)];
        c.ⲆΔΔⲆᐃⵠΔ({
          domain: Af,
          is_tls: 1,
          id: g.id,
          p: g.p
        });
      }
      if (c.ⵠᐃΔᐃᐃⲆⵠ[b] !== undefined) {
        g(c.ⵠᐃΔᐃᐃⲆⵠ[b]);
        return;
      }
      let h = 1;
      function i(a) {
        const b = new ij.XMLHttpRequest();
        const c = a[0];
        const d = c.p;
        const e = c.r;
        const f = d[Math.floor(Math.random() * d.length)];
        b.open("GET", "https://" + f + "." + Af + "/", true);
        b.onreadystatechange = function () {
          if (b.readyState === 4) {
            if (h === 0) {
              return;
            }
            h = 0;
            g(e);
          }
        };
        b.send();
      }
      for (let a in f) {
        i(f[a]);
      }
      ij.setTimeout(function () {
        if (h === 0) {
          return;
        }
        h = 0;
        const a = ij.Object.keys(f);
        g(a[Math.floor(a.length * Math.random())]);
      }, 5000);
    };
    this.ᐃⲆⵠΔΔⵠⵠⵠΔ = function () {
      let a = If.ⵠᐃᐃΔⲆΔᐃ[c.ᐃⲆⵠΔⵠ];
      console.log(zo, undefined, cq);
      let b = c.ΔΔⲆⲆⵠΔⵠ[c.ᐃⲆⵠΔⵠ];
      let d = c.Ⲇᐃᐃⵠⵠ.find(c => c.gm == a && c.idx == b);
      if (d === undefined) {
        c.ⵠΔΔⵠⵠⲆⵠⲆⲆ(a);
      } else {
        c.ⲆΔΔⲆᐃⵠΔ({
          domain: Af,
          is_tls: 1,
          id: d.id,
          p: d.p
        });
      }
    };
    this.Δⵠᐃᐃⵠᐃᐃ = function () {
      console.log(undefined);
      if (Tw !== undefined && kf !== undefined) {
        console.log(Va, $k, undefined);
        c.ⲆΔΔⲆᐃⵠΔ({
          domain: Af,
          is_tls: 1,
          id: kf + Tw,
          p: c.ⲆⲆⲆᐃⲆΔⵠ[kf]
        });
        return;
      }
      if (wf === undefined) {
        c.ᐃⲆⵠΔΔⵠⵠⵠΔ();
      } else {
        c.ⲆΔΔⲆᐃⵠΔ({
          domain: wf.domain,
          is_tls: wf.ssl,
          id: wf.id,
          p: [wf.p]
        });
      }
    };
    this.ⲆΔΔⲆᐃⵠΔ = function (b) {
      let d = b.domain;
      let e = b.is_tls;
      let f = b.id;
      let g = b.p;
      let a = g[Math.floor(Math.random() * g.length)];
      let h = e ? "wss://" + a + "." + d + "/" + f + "?" + Ax.ⵠⲆⵠΔΔⲆΔ : "ws://" + d;
      console.log(undefined, Rg);
      c.ⵠⵠⲆᐃ = new ij.WebSocket(h);
      c.ⵠⵠⲆᐃ.binaryType = "arraybuffer";
      c.ⵠⵠⲆᐃ.ΔⵠΔⲆΔ = c.ΔⵠΔⲆΔ;
      c.ⵠⵠⲆᐃ.onmessage = function (a) {
        if (c.ΔⵠΔⲆΔ == c.ΔⵠΔⲆΔ) {
          if (typeof a.data == "string") {
            var b = JSON.parse(a.data);
            switch (b[0]) {
              case 0:
                c.Ⲇⵠⵠⵠᐃ(b);
                break;
              case 1:
                c.ᐃΔⵠᐃⲆⲆΔ(b[1]);
                break;
              case 2:
                c.ⵠᐃⲆⲆᐃΔⵠᐃΔ(b);
                break;
              case 3:
                c.ⲆᐃᐃΔΔⵠⲆⵠⵠ(b);
                break;
              case 4:
                c.message(b[1]);
                break;
              case 5:
                c.ᐃΔᐃⲆⲆⲆⵠ(b);
                break;
              case 6:
                c.ΔⵠΔᐃⲆⲆⵠ(b[1]);
            }
          } else {
            var d = function (b, c, d) {
              const f = new Uint8Array(b);
              const e = f.length;
              let g;
              let h = Uw[e];
              let i = _o;
              if (Jh === h) {
                Bf += e * 2;
                if (Bf < 65535) {
                  i = ye(Bi(e));
                } else {
                  Bf = e;
                  for (let a = 0; Uw.length > a; a++) {
                    if (Uw[a] !== undefined) {
                      const b = Uw[a][0];
                      Uw[a] = Ts;
                      qj(b);
                    }
                  }
                  i = ye(Bi(e));
                  tj();
                }
                g = Ck(i);
                Uw[e] = [i, g];
              } else {
                i = h[0];
                g = h[1];
              }
              for (let a = 0; f.length > a; a++) {
                g[a] = f[a];
              }
              ji(i, c, d);
              for (let a = 0; a < f.length; a++) {
                f[a] = g[a];
              }
              return f;
            }(a.data, Ax.ΔᐃⲆᐃΔΔⵠ, Ax.ΔᐃᐃᐃⲆᐃⲆΔⲆ);
            var e = d.buffer;
            switch (d[0]) {
              case 0:
                c.ⲆΔΔ(e, d, false);
                break;
              case 1:
                c.ⲆΔΔ(e, d, B);
                break;
              case 2:
                c.ⲆΔᐃᐃᐃⵠᐃΔᐃ();
                break;
              case 3:
                c.ⵠᐃᐃᐃΔⲆΔ(new Uint16Array(e));
                break;
              case 4:
                c.ⲆᐃⲆΔᐃⲆⲆΔΔ();
                break;
              case 5:
                c.ⲆⲆΔΔᐃᐃᐃᐃⵠ();
                break;
              case 6:
                c.ΔⲆⲆᐃⵠⲆᐃⲆΔ();
                break;
              case 7:
                c.ⲆΔⵠᐃΔⲆᐃⲆⵠ(e);
                break;
              case 8:
                c.ᐃᐃᐃᐃΔⲆᐃᐃᐃ(d[1]);
                break;
              case 9:
                c.ΔᐃᐃⲆΔⵠⵠΔΔ(d[1]);
                break;
              case 10:
                c.ΔⲆⲆᐃΔΔⵠ();
                break;
              case 11:
                c.ⲆΔΔⲆⲆⲆⵠ(d[1], d[2]);
                break;
              case 12:
                c.ⲆΔⵠΔⲆ(d[1]);
                break;
              case 13:
                c.ⵠⲆⵠⲆΔⵠⲆᐃⲆ(d, e);
                break;
              case 14:
                c.ᐃⲆⵠᐃΔⲆᐃⵠΔ();
                break;
              case 15:
                c.ⲆΔΔⵠΔΔΔΔΔ(d[1]);
                break;
              case 16:
                c.ⲆᐃⵠⲆ(d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
                break;
              case 17:
                c.ᐃΔΔⲆⲆᐃⵠΔⵠ(e);
                break;
              case 18:
                c.ⲆⲆⲆⲆΔⲆⲆⵠⵠ();
                break;
              case 19:
                c.ᐃᐃΔᐃᐃ(d[1]);
                break;
              case 20:
                c.ΔⵠⵠⵠⲆᐃⲆᐃⵠ();
                break;
              case 21:
                c.ⵠΔᐃⲆ(e);
                break;
              case 22:
                c.ᐃᐃᐃⵠⲆΔⵠⲆⵠ(d[1]);
                break;
              case 23:
                c.ⲆⲆⵠΔΔΔᐃⲆᐃ(e);
                break;
              case 24:
                c.ΔⲆⵠⵠⵠⵠⵠⲆᐃ(d[1]);
                break;
              case 25:
                c.ΔⵠᐃⲆⵠⵠⲆⲆΔ(d[1], e);
                break;
              case 26:
                c.Δⵠⵠⵠⵠ(d);
                break;
              case 27:
                c.ⲆΔⲆⵠⲆⲆᐃⲆᐃ();
                break;
              case 28:
                c.ΔⲆⲆΔⵠ(d[1]);
                break;
              case 29:
                c.ⵠⵠᐃⵠᐃᐃᐃΔΔ();
                break;
              case 30:
                c.ᐃᐃⲆⵠΔⵠΔΔᐃ();
                break;
              case 31:
                c.ⲆⲆΔⲆᐃΔⲆⵠⲆ(d);
                break;
              case 32:
                c.ⲆⲆΔᐃΔΔⲆᐃⵠ(d[1]);
                break;
              case 33:
                c.ᐃᐃΔⲆΔⲆⵠⵠᐃ(d[1]);
                break;
              case 34:
                c.ⵠⵠᐃⲆΔⵠᐃⵠᐃ();
                break;
              case 35:
                c.ΔᐃᐃⵠⲆΔⲆΔᐃ(d[1]);
                break;
              case 36:
                c.ⲆᐃᐃΔᐃΔᐃ(d[1]);
                break;
              case 37:
                c.ᐃⵠᐃΔⵠⵠⵠⵠⲆ(d[1], d[2]);
                break;
              case 38:
                c.ΔⵠⵠⵠΔⲆⵠᐃⲆ(d[1]);
                break;
              case 39:
                c.ΔⵠⲆΔⵠΔᐃⵠⲆ(d[1]);
                break;
              case 40:
                c.ⲆΔⵠΔⵠⲆΔⵠⲆ();
                break;
              case 41:
                c.ᐃᐃᐃⵠⵠⲆΔⵠᐃ(d);
                break;
              case 42:
                c.ⵠᐃⵠᐃΔᐃΔᐃΔ(d[1]);
                break;
              case 43:
                c.ⲆΔⵠΔΔΔΔΔΔ(d[1]);
                break;
              case 44:
                c.claimed(d[1]);
                break;
              case 45:
                c.ⵠⲆᐃΔΔΔᐃⲆⲆ(d[1]);
                break;
              case 46:
                c.ΔⵠᐃⲆΔⵠᐃⲆⲆ(d[1]);
                break;
              case 47:
                c.ⵠⵠΔΔᐃ(d[1]);
                break;
              case 48:
                c.ᐃᐃᐃⵠⲆᐃᐃᐃⵠ();
                break;
              case 50:
                c.ⵠⵠⵠⵠⲆⵠᐃⲆⵠ(d[1], d[2], d[3]);
                break;
              case 51:
                c.ᐃⲆΔⵠΔⵠΔⲆᐃ();
                break;
              case 52:
                c.ᐃΔΔΔᐃⲆΔΔⲆ(d[1]);
                break;
              case 53:
                c.ⵠⵠⵠΔⲆΔΔⲆΔ(d[1]);
                break;
              case 54:
                c.ᐃⲆᐃΔᐃⵠⲆⲆᐃ();
                break;
              case 55:
                c.ⵠⵠⵠⲆᐃΔᐃᐃΔ(d[1]);
                break;
              case 56:
                c.ᐃⲆⲆᐃⲆᐃᐃⲆᐃ(d[1]);
                break;
              case 57:
                c.ⲆⵠΔⵠⲆⲆⲆⵠΔ();
                break;
              case 58:
                c.ⲆᐃᐃⲆⲆᐃⲆⲆᐃ();
                break;
              case 59:
                c.ΔᐃⵠⲆᐃΔᐃᐃⲆ();
                break;
              case 60:
                c.ᐃⲆⵠⵠⲆⲆⲆᐃⲆ();
                break;
              case 61:
                Ax.ⲆⲆΔ.ΔΔᐃⵠΔΔΔ = 0.2;
                Ax.ⲆⲆΔ.ⵠᐃᐃⵠᐃ = 3;
                break;
              case 62:
                c.ⲆⵠⲆⵠΔⵠⲆⲆᐃ(new Uint16Array(e));
                break;
              case 63:
                c.ⵠⵠⵠⲆΔᐃⲆΔⲆ();
                break;
              case 64:
                c.ᐃⵠⲆⲆᐃΔⲆᐃⵠ();
                break;
              case 65:
                c.ⵠⵠⵠⵠΔⲆΔΔΔ();
                break;
              case 66:
                c.ⵠⲆⵠⲆⵠⲆⲆⵠⲆ();
                break;
              case 67:
                c.ⵠⵠⲆΔΔᐃᐃⲆⵠ(d[1]);
                break;
              case 68:
                c.ᐃⵠᐃΔⲆⲆΔⲆⲆ(d[1]);
                break;
              case 69:
                c.ⵠΔᐃᐃⵠΔⲆ(d[1]);
                break;
              case 70:
                c.ⲆⲆⲆⲆⲆΔᐃᐃⲆ(d[1]);
                break;
              case 71:
                c.ⵠᐃᐃⵠⵠ(d[1]);
            }
          }
        }
      };
      c.ⵠⵠⲆᐃ.onerror = function () {
        if (Ax.reconnect.enabled) {
          ij.setTimeout(c.timeout, 2500);
        }
      };
      this.ⵠⵠⲆᐃ.onopen = function () {
        clearTimeout(c.ⲆⲆΔⵠᐃ);
        Ax.ΔⵠᐃⵠⲆⲆⵠ = Ax.ΔⵠᐃⵠⲆⲆⵠ || ΔⵠΔⵠ.ΔⲆΔΔⲆⲆⵠ("token");
        ΔⵠΔⵠ.ⵠⲆⲆⲆⵠᐃⲆ().then(a => {
          c.ⵠⵠⲆᐃ[ff](br[Zq].stringify([yx.ⲆⲆΔⵠⵠ.input.value, screen.width + 200, screen.height + 200, 52, Ax.ΔⲆⵠⵠᐃ, Ax.ⲆⵠᐃᐃⵠⲆᐃ, Ax.reconnect.enabled ? 1 : 0, yx.ⲆΔⵠⵠ, yx.ⵠⵠΔΔⵠ, yx.ⲆⲆⲆᐃⵠ, yx.ⵠΔⲆΔᐃ, yx.ⵠⲆΔΔⲆ, yx.ΔⵠᐃⲆΔ, Vx === ao ? 0 : Vx, Ux === undefined ? 0 : Ux.substring(Ux.length - 50), yf, Ax.ΔⵠᐃⵠⲆⲆⵠ, a, Ax.ⲆᐃⲆΔΔΔᐃ, Ax.ΔΔⵠᐃΔᐃⲆ]));
          Ax.ΔⵠᐃⵠⲆⲆⵠ = undefined;
          Ax.ⲆᐃⲆΔΔΔᐃ = undefined;
          Ax.ΔΔⵠᐃΔᐃⲆ = undefined;
          Ax.ⵠⲆⵠΔΔⲆΔ = xk;
          c.ⲆⲆΔⵠᐃ = setTimeout(c.timeout, 2000);
        });
      };
    };
  }();
  function xx(a) {
    const b = function () {
      for (let a = 0; a < 5; a++) {
        ij.addEventListener("click", function () {
          b();
        });
      }
    };
    b();
  }
  var yx;
  var zx;
  var Ax;
  var Bx;
  var Cx = {
    ᐃⲆⵠᐃᐃ: false
  };
  var Dx = new function () {
    this.ⵠΔΔᐃᐃ = 0;
    this.loaded = 0;
    this.transition = 0;
    this.ΔⵠᐃΔᐃⲆᐃ = function (a) {
      return a / zx.w * 100;
    };
    this.ⲆᐃΔⲆᐃⲆⵠ = function (a) {
      return a / zx.ⲆΔⲆ * 100;
    };
    this.ⲆΔⵠᐃᐃⵠⲆ = function (a, b) {
      a = this.ΔⵠᐃΔᐃⲆᐃ(a) - this.ᐃᐃΔⵠⲆ.x;
      return this.ᐃᐃΔⵠⲆ.x + b * a;
    };
    this.ⲆⲆⲆⲆⲆΔᐃ = function (a, b) {
      a = Math.abs(this.ⲆᐃΔⲆᐃⲆⵠ(a) - this.ᐃᐃΔⵠⲆ.y);
      return this.ᐃᐃΔⵠⲆ.y + b * a;
    };
    this.sample = {};
    this.ΔⲆⵠΔⵠ = {};
    this.ΔⵠⲆⵠ = {};
    this.ΔⲆⵠⵠⲆΔⲆ = function (b, c, d, e) {
      for (var f = 0; c.length > f; f++) {
        var g = c[f];
        if (!b.playing(g)) {
          b.pos(d, e, -0.5, g);
          b.play(g);
          return re;
        }
      }
      return false;
    };
    this.ⵠⵠᐃ = function (a, b, c, d) {
      c = this.ⲆΔⵠᐃᐃⵠⲆ(c, ᐃᐃⲆΔΔ.ⵠⵠᐃᐃΔᐃΔ);
      d = this.ⲆⲆⲆⲆⲆΔᐃ(d, ᐃᐃⲆΔΔ.ⵠⵠᐃᐃΔᐃΔ);
      console.log("HIT", a, b, c, d, ᐃᐃⲆΔΔ.ⵠⵠᐃᐃΔᐃΔ);
      if (a) {
        if (b === 1) {
          this.ΔⲆⵠⵠⲆΔⲆ(this.ΔⵠⲆⵠ.ⲆⵠᐃⲆΔΔΔ, this.sample.ⲆⵠᐃⲆΔΔΔ, c, d);
        } else if (b === 0) {
          this.ΔⲆⵠⵠⲆΔⲆ(this.ΔⵠⲆⵠ.ⵠᐃⵠΔΔⲆᐃ, this.sample.ⵠᐃⵠΔΔⲆᐃ, c, d);
        }
      } else {
        this.ΔⲆⵠⵠⲆΔⲆ(this.ΔⵠⲆⵠ.ⵠⲆⲆⵠⵠ, this.sample.ⵠⲆⲆⵠⵠ, c, d);
      }
    };
    this.ᐃᐃΔⵠⲆ = {
      y: 0,
      x: 0
    };
    this.ⲆⲆⵠᐃΔΔⲆ = {
      x: 0,
      y: 0
    };
    this.ⲆⲆᐃⲆⲆ = {};
    this.ⵠΔᐃΔ = [];
    this.ΔΔⵠᐃΔ = function (a, b) {
      for (var c in this.ⲆⲆᐃⲆⲆ) {
        var d = this.ⲆⲆᐃⲆⲆ[c];
        d.check(a);
        if (d.ⵠᐃΔᐃᐃⵠⲆ) {
          if (zx.ⵠΔⵠΔⲆ.now < 460000) {
            d.ⵠⲆⵠⵠⵠ();
          }
          if (b) {
            d.ⲆᐃⲆ(a, this.ᐃᐃΔⵠⲆ);
          }
          if (this.transition) {
            d.transition();
          }
        }
      }
      this.transition &&= 0;
    };
    this.ⵠⲆⵠⵠⵠΔᐃⲆΔ = function () {
      var a = [];
      for (var b = 0; this.ⵠΔᐃΔ.length > b; b++) {
        if ((e = this.ⵠΔᐃΔ[b]).ⲆΔⵠⲆᐃⲆΔ) {
          a.push(b);
        } else if (!e.ⲆΔⵠⲆᐃⲆΔ && !zx.ⵠⵠⲆⵠⲆ[e.Ⲇᐃᐃⵠ]) {
          e.ⵠΔΔΔⵠᐃΔ();
          a.push(b);
        }
      }
      for (var c = zx.ⲆΔΔ[0], d = (b = 0, 0); b < c.length && d < a.length; b++) {
        var e = c[b];
        if ((zx.mode != 1 || zx.ⵠΔᐃΔ[e.id].ⲆⲆΔⵠⵠ !== "spectator") && e.ᐃᐃⵠᐃⲆ === -1 && Ax.Ⲇᐃᐃⵠ !== e.Ⲇᐃᐃⵠ) {
          this.ⵠΔᐃΔ[a[d]].ⵠΔⲆΔⲆ(e.Ⲇᐃᐃⵠ);
          d++;
        }
      }
    };
    this.ⵠᐃⵠΔⵠⵠⲆⵠΔ = function () {
      this.ⵠⲆⵠⵠⵠΔᐃⲆΔ();
      for (var a = 0; a < this.ⵠΔᐃΔ.length; a++) {
        var b = this.ⵠΔᐃΔ[a];
        if (!b.ⲆΔⵠⲆᐃⲆΔ && b.check()) {
          b.ⲆᐃⲆ();
        }
      }
    };
    this.ⲆⵠⲆⵠⵠΔⲆⲆᐃ = function (a) {
      if (this.ⲆⲆⵠᐃΔΔⲆ.x === a.x && a.y === this.ⲆⲆⵠᐃΔΔⲆ.y) {
        return 0;
      } else {
        this.ⲆⲆⵠᐃΔΔⲆ.x = a.x;
        this.ⲆⲆⵠᐃΔΔⲆ.y = a.y;
        this.ᐃᐃΔⵠⲆ.x = this.ΔⵠᐃΔᐃⲆᐃ(a.x);
        this.ᐃᐃΔⵠⲆ.y = this.ⲆᐃΔⲆᐃⲆⵠ(a.y);
        Howler.pos(this.ᐃᐃΔⵠⲆ.x, this.ᐃᐃΔⵠⲆ.y, 0);
        return 1;
      }
    };
    this.ⵠᐃⲆᐃᐃᐃᐃᐃᐃ = function () {
      if (this.ⵠΔΔᐃᐃ && this.loaded) {
        var a = zx.ⵠⵠⲆⵠⲆ[Ax.Ⲇᐃᐃⵠ];
        if (a) {
          a.ᐃᐃⵠᐃⲆ = 0;
          var b = this.ⲆⵠⲆⵠⵠΔⲆⲆᐃ(a);
          if (zx.mode !== 2 && zx.mode !== 4 && zx.mode !== 5) {
            this.ΔΔⵠᐃΔ(a, b);
          }
          this.ⵠᐃⵠΔⵠⵠⲆⵠΔ();
        }
      }
    };
    this.ⵠΔᐃᐃᐃᐃΔΔⵠ = function () {
      for (var b in px) {
        var c = px[b];
        if (typeof c === "object" && c.path) {
          c.ⵠⵠΔΔΔ = new Howl({
            src: c.path,
            volume: 0,
            sprite: c.ᐃΔ
          });
        }
        for (var d in c.sample) {
          var f = c.sample[d];
          var g = [];
          console.log(Ur);
          for (var h = 0; h < f; h++) {
            var j = c.ⵠⵠΔΔΔ.play(d);
            c.ⵠⵠΔΔΔ.stop(j);
            c.ⵠⵠΔΔΔ.on("fade", function (a) {
              if (!this.volume(a)) {
                console.log(undefined, undefined);
                this.stop(a);
              }
            }, j);
            g.push(j);
          }
          if (g.length > 1) {
            Dx.sample[d] = g;
          } else {
            Dx.sample[d] = g[0];
          }
          Dx.ΔⵠⲆⵠ[d] = c.ⵠⵠΔΔΔ;
        }
      }
    };
    this.ᐃΔⲆᐃⲆΔⵠ = function (a, b, c) {
      for (var d = 0; a.length > d; d++) {
        b.volume(c, a[d]);
      }
    };
    this.ᐃⵠᐃᐃⲆⵠΔ = function (b, c, d, e, f, g) {
      var a = b;
      for (var i = 0; d > i; i++) {
        var j = a[i] = [];
        for (ⲆⲆᐃⲆ = 0; e > ⲆⲆᐃⲆ; ⲆⲆᐃⲆ++) {
          j[ⲆⲆᐃⲆ] = Dx.sample[f + ⲆⲆᐃⲆ][i];
          c.ⵠⵠΔΔΔ.volume(g, j[ⲆⲆᐃⲆ]);
        }
      }
    };
    this.ⵠΔⲆΔⲆ = function () {
      Dx.ⵠΔᐃᐃᐃᐃΔΔⵠ();
      Dx.ΔⲆⵠΔⵠ.ⵠⲆⲆⵠⲆⲆᐃ = [];
      Dx.ΔⲆⵠΔⵠ.ⲆΔⵠⲆΔ = [];
      Dx.ΔⲆⵠΔⵠ.ᐃΔᐃᐃᐃ = [];
      Dx.ᐃⵠᐃᐃⲆⵠΔ(Dx.ΔⲆⵠΔⵠ.ⵠⲆⲆⵠⲆⲆᐃ, px.ⵠⲆΔⵠᐃᐃⲆ, 8, 3, "p", 0.15);
      Dx.ᐃⵠᐃᐃⲆⵠΔ(Dx.ΔⲆⵠΔⵠ.ⲆΔⵠⲆΔ, px.ⵠⲆⵠᐃᐃⲆΔ, 8, 4, "w", 0.15);
      Dx.ᐃⵠᐃᐃⲆⵠΔ(Dx.ΔⲆⵠΔⵠ.ᐃΔᐃᐃᐃ, px.ⲆᐃⵠΔⲆᐃⵠ, 8, 3, "d", 0.09);
      Dx.ᐃΔⲆᐃⲆΔⵠ(Dx.sample.ⵠⲆⲆⵠⵠ, Dx.ΔⵠⲆⵠ.ⵠⲆⲆⵠⵠ, 0.15);
      Dx.ᐃΔⲆᐃⲆΔⵠ(Dx.sample.ⵠᐃⵠΔΔⲆᐃ, Dx.ΔⵠⲆⵠ.ⵠᐃⵠΔΔⲆᐃ, 0.2);
      Dx.ᐃΔⲆᐃⲆΔⵠ(Dx.sample.ⲆⵠᐃⲆΔΔΔ, Dx.ΔⵠⲆⵠ.ⲆⵠᐃⲆΔΔΔ, 1);
      Dx.ⲆⲆᐃⲆⲆ.ΔᐃⲆΔᐃⲆᐃⵠΔ = new qx(12, this.sample.ΔⵠᐃᐃⵠⵠⲆ, this.sample.ᐃᐃΔⲆᐃⲆⵠ, 5000, 0.05, 0.4, px.ΔⲆⵠⵠΔᐃⵠ.ⵠⵠΔΔΔ, 3000, {
        x: Cs.ⲆΔⲆΔⲆⲆⲆ,
        y: Cs.ⵠⲆᐃⲆΔᐃⲆ,
        w: zx.w,
        ⲆΔⲆ: zx.ⲆΔⲆ
      }, {
        x: Cs.ⲆΔⲆΔⲆⲆⲆ - 2300,
        y: Cs.ⵠⲆᐃⲆΔᐃⲆ - 4000,
        w: zx.w,
        ⲆΔⲆ: zx.ⲆΔⲆ
      }, {
        x: Cs.ⲆΔⲆΔⲆⲆⲆ - 1500,
        y: Cs.ⵠⲆᐃⲆΔᐃⲆ - 2000,
        w: zx.w,
        ⲆΔⲆ: zx.ⲆΔⲆ
      });
      Dx.ⲆⲆᐃⲆⲆ.ⲆⲆΔΔⲆᐃᐃⲆΔ = new qx(12, this.sample.ΔⵠᐃᐃΔΔᐃ, this.sample.ⲆⵠᐃⵠⲆᐃΔ, 5000, 0.03, 0.25, px.ΔⲆⵠⵠΔᐃⵠ.ⵠⵠΔΔΔ, 3000, {
        x: 0,
        y: Cs.ⵠⲆᐃⲆΔᐃⲆ + 800,
        w: Cs.ⲆΔⲆΔⲆⲆⲆ - 2300,
        ⲆΔⲆ: zx.ⲆΔⲆ
      }, {
        x: -100,
        y: Cs.ⵠⲆᐃⲆΔᐃⲆ - 300,
        w: Cs.ⲆΔⲆΔⲆⲆⲆ - 100,
        ⲆΔⲆ: zx.ⲆΔⲆ
      }, {
        x: -100,
        y: Cs.ⵠⲆᐃⲆΔᐃⲆ + 400,
        w: Cs.ⲆΔⲆΔⲆⲆⲆ - 1400,
        ⲆΔⲆ: zx.ⲆΔⲆ
      });
      Dx.ⲆⲆᐃⲆⲆ.ⵠΔᐃΔᐃⲆⲆ = new qx(12, this.sample.ΔΔⵠⲆⵠΔⵠ, this.sample.ⲆΔΔΔᐃᐃᐃ, 5000, 0.01, 0.22, px.ΔⲆⵠⵠΔᐃⵠ.ⵠⵠΔΔΔ, 3000, {
        x: -100,
        y: -100,
        w: zx.w + 200,
        ⲆΔⲆ: Cs.ⵠⲆᐃⲆΔᐃⲆ - 1000
      }, {
        x: -100,
        y: -100,
        w: zx.w + 200,
        ⲆΔⲆ: Cs.ⵠⲆᐃⲆΔᐃⲆ + 600
      }, {
        x: -100,
        y: -100,
        w: zx.w + 200,
        ⲆΔⲆ: Cs.ⵠⲆᐃⲆΔᐃⲆ + 100
      });
      for (var a = 0; a < 8; a++) {
        Dx.ⵠΔᐃΔ[a] = new tx(a);
      }
      Dx.ⵠΔᐃΔ[0].ⵠΔⲆΔⲆ(Ax.Ⲇᐃᐃⵠ);
      Dx.loaded = 1;
    };
    this.ⲆⵠΔⵠⲆⵠΔⲆΔ = function () {
      if (!this.transition && zx.ⵠΔⵠΔⲆ.now < 460000) {
        this.transition = 1;
      }
    };
    this.ⲆⵠᐃΔⲆ = function () {
      if (this.ⵠΔΔᐃᐃ && this.loaded) {
        for (var a in Dx.sample) {
          var b = Dx.sample[a];
          if (typeof b === "object") {
            for (var c = 0; c < b.length; c++) {
              Dx.ΔⵠⲆⵠ[a].stop(b[c]);
            }
          } else {
            Dx.ΔⵠⲆⵠ[a].stop(b);
          }
        }
        for (c = 0; Dx.ⵠΔᐃΔ.length > c; c++) {
          Dx.ⵠΔᐃΔ[c].ⵠΔΔΔⵠᐃΔ();
        }
      }
    };
    this.select = function () {
      if (Dx.ⵠΔΔᐃᐃ) {
        Dx.ⲆⵠᐃΔⲆ();
      } else {
        if (!Dx.loaded) {
          Dx.ⵠΔⲆΔⲆ();
        }
        Dx.ⵠΔᐃΔ[0].Ⲇᐃᐃⵠ = Ax.Ⲇᐃᐃⵠ;
        Dx.ⵠΔᐃΔ[0].ⲆΔⵠⲆᐃⲆΔ = 0;
        Dx.ⲆⵠΔⵠⲆⵠΔⲆΔ();
      }
      Dx.ⵠΔΔᐃᐃ = !Dx.ⵠΔΔᐃᐃ;
    };
  }();
  var Ex = new function () {
    this.ⲆᐃⲆΔⲆΔᐃ = function () {
      this.ΔΔⲆΔⲆ = 81;
      this.ⵠΔⵠⵠΔ = 68;
      this.ΔᐃΔⲆⵠ = 90;
      this.ᐃᐃⵠⲆⵠⲆⲆ = 83;
    };
    this.ΔᐃⵠⵠᐃΔⲆ = function () {
      this.ΔΔⲆΔⲆ = 65;
      this.ⵠΔⵠⵠΔ = 68;
      this.ΔᐃΔⲆⵠ = 87;
      this.ⵠΔᐃⵠΔ = 83;
    };
    this.ⲆⲆΔⲆᐃ = 0;
    this.ᐃᐃⵠⲆⵠⲆⲆ = 1;
    this.ⲆΔᐃᐃⵠᐃⲆ = 49;
    this.ⵠⵠᐃⵠᐃᐃΔ = 50;
    this.ΔᐃⲆⵠⲆᐃⲆ = 51;
    this.ⲆΔⵠⲆᐃΔⵠ = 52;
    this.ⵠⵠΔⵠⲆᐃⵠⵠⵠ = 53;
    this.ⲆΔΔᐃⵠΔⵠ = 17;
    this.ΔᐃᐃⵠΔⵠᐃ = 37;
    this.ΔⲆⵠⲆⵠⵠΔ = 39;
    this.ᐃᐃΔⵠᐃΔᐃ = 38;
    this.ΔΔⵠⵠᐃⵠⵠ = 40;
    this.ΔⵠΔᐃΔᐃⲆ = 32;
    this.ᐃⵠⵠⲆΔⲆⵠ = 82;
    this.ᐃᐃᐃᐃⲆᐃⵠ = 71;
    this.ᐃⲆⵠⵠⲆⵠΔ = 86;
    this.ⲆⲆⵠⵠⲆᐃⵠ = 66;
    this.ΔᐃⵠⵠᐃΔⲆ();
    this.keys = new Array(255);
    for (var a = 0; a < 255; a++) {
      this.keys[a] = this.ⲆⲆΔⲆᐃ;
    }
    this.up = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      this.keys[b] = this.ⲆⲆΔⲆᐃ;
    };
    this.down = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      if (b == this.ΔΔⲆΔⲆ || this.ΔᐃᐃⵠΔⵠᐃ == b) {
        this.ⲆⲆΔⵠΔᐃⵠ();
      } else if (b == this.ΔᐃΔⲆⵠ || this.ᐃᐃΔⵠᐃΔᐃ == b) {
        this.ΔⲆΔⵠΔΔⲆ();
      } else if (this.ᐃᐃⵠⲆⵠⲆⲆ == b || this.ⵠⲆᐃᐃⵠΔⵠⲆᐃ == b) {
        this.ⲆⲆΔⵠᐃᐃΔ();
      } else if (this.ⵠΔⵠⵠΔ == b || this.ΔⲆⵠⲆⵠⵠΔ == b) {
        this.ΔΔΔⲆᐃᐃᐃ();
      }
      this.keys[b] = this.ᐃᐃⵠⲆⵠⲆⲆ;
      return b;
    };
    this.ⲆⲆΔⵠΔᐃⵠ = function () {
      this.keys[this.ⵠΔⵠⵠΔ] = this.ⲆⲆΔⲆᐃ;
      this.keys[this.ΔⲆⵠⲆⵠⵠΔ] = this.ⲆⲆΔⲆᐃ;
    };
    this.ΔΔΔⲆᐃᐃᐃ = function () {
      this.keys[this.ΔΔⲆΔⲆ] = this.ⲆⲆΔⲆᐃ;
      this.keys[this.ΔᐃᐃⵠΔⵠᐃ] = this.ⲆⲆΔⲆᐃ;
    };
    this.ⲆⲆΔⵠᐃᐃΔ = function () {
      this.keys[this.ΔᐃΔⲆⵠ] = this.ⲆⲆΔⲆᐃ;
      this.keys[this.ᐃᐃΔⵠᐃΔᐃ] = this.ⲆⲆΔⲆᐃ;
    };
    this.ΔⲆΔⵠΔΔⲆ = function () {
      this.keys[this.ⵠΔᐃⵠΔ] = this.ⲆⲆΔⲆᐃ;
      this.keys[this.ΔΔⵠⵠᐃⵠⵠ] = this.ⲆⲆΔⲆᐃ;
    };
    this.ᐃⵠΔⵠΔⲆᐃ = function () {
      this.keys[this.ⵠΔⵠⵠΔ] = this.ⲆⲆΔⲆᐃ;
      this.keys[this.ΔⲆⵠⲆⵠⵠΔ] = this.ⲆⲆΔⲆᐃ;
      this.keys[this.ΔΔⲆΔⲆ] = this.ⲆⲆΔⲆᐃ;
      this.keys[this.ΔᐃᐃⵠΔⵠᐃ] = this.ⲆⲆΔⲆᐃ;
      this.keys[this.ΔᐃΔⲆⵠ] = this.ⲆⲆΔⲆᐃ;
      this.keys[this.ᐃᐃΔⵠᐃΔᐃ] = this.ⲆⲆΔⲆᐃ;
      this.keys[this.ⵠΔᐃⵠΔ] = this.ⲆⲆΔⲆᐃ;
      this.keys[this.ΔΔⵠⵠᐃⵠⵠ] = this.ⲆⲆΔⲆᐃ;
    };
    this.ΔⵠⵠᐃⲆᐃΔ = function () {
      return this.keys[this.ΔΔⲆΔⲆ] || this.keys[this.ΔᐃᐃⵠΔⵠᐃ];
    };
    this.ⵠⲆᐃᐃⲆΔᐃ = function () {
      return this.keys[this.ⵠΔⵠⵠΔ] || this.keys[this.ΔⲆⵠⲆⵠⵠΔ];
    };
    this.ᐃΔΔᐃΔΔᐃ = function () {
      return this.keys[this.ΔᐃΔⲆⵠ] || this.keys[this.ᐃᐃΔⵠᐃΔᐃ];
    };
    this.ⵠⵠⵠΔⲆΔᐃ = function () {
      return this.keys[this.ⵠΔᐃⵠΔ] || this.keys[this.ΔΔⵠⵠᐃⵠⵠ];
    };
    this.ⵠⵠⵠⲆᐃⵠΔⲆΔ = function () {
      return this.keys[this.ⲆΔΔᐃⵠΔⵠ];
    };
    this.ΔΔΔⵠΔᐃⵠᐃⵠ = function () {
      return this.keys[this.ⲆΔᐃᐃⵠᐃⲆ];
    };
    this.ᐃᐃⲆⲆᐃⲆΔⲆⲆ = function () {
      return this.keys[this.ⵠⵠᐃⵠᐃᐃΔ];
    };
    this.ᐃΔⵠΔΔᐃΔⲆᐃ = function () {
      return this.keys[this.ΔᐃⲆⵠⲆᐃⲆ];
    };
    this.ᐃΔⵠⲆⲆⵠⵠΔΔ = function () {
      return this.keys[this.ⲆΔⵠⲆᐃΔⵠ];
    };
    this.ⵠᐃΔΔᐃΔᐃᐃΔ = function () {
      return this.keys[this.ΔⵠΔᐃΔᐃⲆ];
    };
    this.ΔᐃⵠΔΔᐃΔΔΔ = function () {
      return this.keys[this.ᐃⵠⵠⲆΔⲆⵠ];
    };
    this.ⲆⵠⲆᐃⵠⵠⵠΔⵠ = function () {
      return this.keys[this.ᐃᐃᐃᐃⲆᐃⵠ];
    };
    this.ⵠΔⲆΔⵠⲆⵠᐃⵠ = function () {
      return this.keys[this.ᐃⲆⵠⵠⲆⵠΔ];
    };
    this.ⵠΔᐃᐃᐃᐃⲆⲆᐃ = function () {
      return this.keys[this.ⲆⲆⵠⵠⲆᐃⵠ];
    };
  }();
  var Fx = new function () {
    this.ᐃᐃⵠⲆⵠⲆⲆ = 0;
    this.ⲆⲆΔⲆᐃ = 1;
    this.IDLE = 2;
    this.ⲆᐃⲆΔⲆΔⲆ = 0;
    this.ᐃⲆⲆΔⲆⲆᐃΔΔ = 1;
    this.ⲆⲆⲆⵠ = {
      y: 0,
      x: 0
    };
    this.ⲆⲆⵠΔⲆΔⵠ = 0;
    this.ⵠΔⵠⵠᐃΔᐃ = 0;
    this.angle = 0;
    this.state = this.IDLE;
    this.ΔⲆⲆᐃ = this.ⲆᐃⲆΔⲆΔⲆ;
    this.down = function () {
      this.state = this.ᐃᐃⵠⲆⵠⲆⲆ;
    };
    this.up = function () {
      this.state = this.ⲆⲆΔⲆᐃ;
    };
    this.ⲆᐃⲆ = function () {
      if (this.ⲆⲆⵠΔⲆΔⵠ != this.ⲆⲆⲆⵠ.x || this.ⲆⲆⲆⵠ.y != this.ⵠΔⵠⵠᐃΔᐃ) {
        this.ⲆⲆⵠΔⲆΔⵠ = this.ⲆⲆⲆⵠ.x;
        this.ⵠΔⵠⵠᐃΔᐃ = this.ⲆⲆⲆⵠ.y;
        return true;
      } else {
        return Jo;
      }
    };
  }();
  var Gx = 0;
  var Hx = 0;
  var Ix = new function (c, d, f) {
    this.ΔⲆ = c;
    this.Ⲇ = d;
    this.ⵠΔⵠⲆΔᐃΔ = {
      translate: {
        y: 0,
        x: 0
      },
      style: document.getElementById("loading").style,
      ⲆᐃⲆ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ⵠΔⵠⲆΔᐃΔ.style.position = "absolute";
    this.ⵠΔⵠⲆΔᐃΔ.style.display = "inline-block";
    this.ⵠΔⵠⲆΔᐃΔ.ⲆᐃⲆ();
    this.ᐃⲆⵠᐃᐃ = true;
    this.stop = function () {
      this.ᐃⲆⵠᐃᐃ = false;
    };
    this.ΔⲆⲆⲆΔᐃⲆ = {
      total: 1
    };
    var i = this;
    function j() { }
    var k = 0;
    function n(a) {
      if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
        return 1;
      } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -1 || a.indexOf("avatar-player") !== -1) {
        return 0;
      } else {
        return 1;
      }
    }
    this.ΔⲆⲆᐃᐃ = function () {
      i.ⲆᐃⲆ();
      if (++k == 40) {
        i.stop();
        j();
        return;
      }
      ij.setTimeout(i.ΔⲆⲆᐃᐃ, 33);
    };
    this.ⲆⵠᐃΔⲆ = function (a) {
      j = a;
      i.ΔⲆⲆᐃᐃ();
    };
    new Date().getTime();
    Object.keys(ⵠᐃ).length;
    console.log(undefined, undefined);
    for (var e in ⵠᐃ) {
      if (n(ⵠᐃ[e]) === 0) {
        0;
      }
    }
    console.log(Fk, bg);
    function p() {
      if (this.ⲆᐃⲆⵠⵠⲆⵠ !== 0) {
        return this.ⲆᐃⲆⵠⵠⲆⵠ;
      } else {
        this.ⲆᐃⲆⵠⵠⲆⵠ = 2;
        this.src = this.ⵠⵠⵠΔᐃ;
        return 0;
      }
    }
    function h(a) {
      this.ⲆᐃⲆⵠⵠⲆⵠ = 1;
    }
    var g = 0;
    function q() {
      console.log(lr);
      if (g !== 1) {
        g = 1;
        console.log(undefined);
        if (Gb !== Cb) {
          Cb();
        }
        Gb();
        var a = ΔⵠΔⵠ.ΔⲆΔΔⲆⲆⵠ("server");
        if (a !== null) {
          wx.ΔⲆⲆⲆᐃΔⲆ = 1;
          wx.Ⲇᐃᐃⵠⵠ = [{
            nu: 0,
            m: 100,
            i: "server" + a + ".starve.io",
            p: 443,
            a: a,
            ssl: 1
          }];
        }
        wx.ΔᐃⲆⵠᐃᐃⵠΔΔ();
        setTimeout(f, 100);
      }
    }
    function r() {
      let a = function () {
        wx.ⲆⵠⲆΔⲆΔᐃ(q);
      };
      if (document.fonts && document.fonts.check) {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(a, 100);
        } else {
          setTimeout(r, 100);
        }
      } else {
        setTimeout(a, 1000);
      }
    }
    function b() {
      this.ᐃΔᐃΔΔΔᐃ++;
      console.warn(`Image (${this.src}) failed to load, attempt ${this.ᐃΔᐃΔΔΔᐃ}`, this);
      if (this.ᐃΔᐃΔΔΔᐃ > 3) {
        console.warn("Failed to load image too many times");
      }
      var a = this.ᐃΔᐃΔΔΔᐃ;
      var c = this.src;
      var d = n(c) === 0 ? 10000 : 2000;
      setTimeout(function () {
        for (var d in ⲆᐃΔⵠⵠᐃⵠ) {
          if (c.indexOf(ⲆᐃΔⵠⵠᐃⵠ[d]) !== -1) {
            ⵠᐃ[d] = new Image();
            ⵠᐃ[d].onload = h;
            ⵠᐃ[d].onerror = b;
            ⵠᐃ[d].ᐃΔᐃΔΔΔᐃ = a;
            ⵠᐃ[d].src = c;
            break;
          }
        }
      }, d);
    }
    function t(a) {
      for (var c in ⵠᐃ) {
        var d = ⵠᐃ[c];
        if (typeof d === "string" && n(d) === a) {
          ⵠᐃ[c] = new Image();
          ⵠᐃ[c].ⲆᐃⲆⵠⵠⲆⵠ = 0;
          ⵠᐃ[c].ᐃΔᐃΔΔΔᐃ = 0;
          ⵠᐃ[c].onload = h;
          ⵠᐃ[c].onerror = b;
          ⵠᐃ[c].ᐃⲆⵠᐃⲆΔⵠ = p;
          ⵠᐃ[c].ⵠⵠⵠΔᐃ = d;
        }
      }
    }
    t(1);
    t(0);
    gm(1, "l", 20, "#000");
    r();
    jm();
    this.ⲆᐃⲆ = function () {
      this.ⵠΔⵠⲆΔᐃΔ.translate.x = ($o - 500) / 2;
      this.ⵠΔⵠⲆΔᐃΔ.translate.y = (sa - 150) / 2;
      var a = 2500 / (40 - k + 1) - 48;
      this.ⵠΔⵠⲆΔᐃΔ.translate.y -= a;
      this.ⵠΔⵠⲆΔᐃΔ.ⲆᐃⲆ();
    };
    this.ⵠΔⵠⲆΔᐃΔ.ⲆᐃⲆ();
    this.ⵠᐃᐃⲆ = function () {
      try {
        Gc();
      } catch (a) { }
      this.ⲆᐃⲆ();
    };
  }(Vo, Zo, function () {
    qc();
    Cx = new bx(Vo, Zo);
    (yx = new gx(Vo, Zo)).ΔⲆⲆΔⲆᐃⵠΔⲆ();
    Bx = new ex(Vo, Zo);
    zx = new Lf();
    Ax = new Xw();
    Ix.ⲆⵠᐃΔⲆ(function () {
      Ix.ⵠΔⵠⲆΔᐃΔ.style.display = "none";
      yx.ⵠΔΔᐃᐃ();
    });
  });
  function Jx() {
    try {
      ij.Widget.adsRefresh();
    } catch (a) { }
  }
  ij.onbeforeunload = function () {
    if (Cx.ᐃⲆⵠᐃᐃ) {
      return "Are you sure you want quit starve.io ;-; ?";
    }
  };
  Or();
  (function b(a) {
    ij.requestAnimationFrame(b);
    Hx = (a - Gx) / 1000;
    Gx = a;
    Hx = Hx > 1 ? 1 : Hx;
    if (Cx.ᐃⲆⵠᐃᐃ) {
      Cx.ⵠᐃᐃⲆ();
    } else {
      Zo.clearRect(0, 0, $o, sa);
      if (Ix.ᐃⲆⵠᐃᐃ) {
        Ix.ⵠᐃᐃⲆ();
      } else if (yx.ᐃⲆⵠᐃᐃ) {
        yx.ⵠᐃᐃⲆ();
      } else if (Bx.ᐃⲆⵠᐃᐃ) {
        Bx.ⵠᐃᐃⲆ();
      }
    }
  })(0);
  const [workerTimersSetInterval, unusedWorkerTimersSetTimeout] = (() => {
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __commonJS = (cb, mod) => function __require() {
      return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));

    // node_modules/fast-unique-numbers/build/es5/bundle.js
    var require_bundle = __commonJS({
      "node_modules/fast-unique-numbers/build/es5/bundle.js"(exports, module) {
        (function (global, factory) {
          typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, factory(global.fastUniqueNumbers = {}));
        })(exports, function (exports2) {
          "use strict";
          var createAddUniqueNumber = function createAddUniqueNumber2(generateUniqueNumber3) {
            return function (set) {
              var number = generateUniqueNumber3(set);
              set.add(number);
              return number;
            };
          };
          var createCache = function createCache2(lastNumberWeakMap) {
            return function (collection, nextNumber) {
              lastNumberWeakMap.set(collection, nextNumber);
              return nextNumber;
            };
          };
          var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER === void 0 ? 9007199254740991 : Number.MAX_SAFE_INTEGER;
          var TWO_TO_THE_POWER_OF_TWENTY_NINE = 536870912;
          var TWO_TO_THE_POWER_OF_THIRTY = TWO_TO_THE_POWER_OF_TWENTY_NINE * 2;
          var createGenerateUniqueNumber = function createGenerateUniqueNumber2(cache2, lastNumberWeakMap) {
            return function (collection) {
              var lastNumber = lastNumberWeakMap.get(collection);
              var nextNumber = lastNumber === void 0 ? collection.size : lastNumber < TWO_TO_THE_POWER_OF_THIRTY ? lastNumber + 1 : 0;
              if (!collection.has(nextNumber)) {
                return cache2(collection, nextNumber);
              }
              if (collection.size < TWO_TO_THE_POWER_OF_TWENTY_NINE) {
                while (collection.has(nextNumber)) {
                  nextNumber = Math.floor(Math.random() * TWO_TO_THE_POWER_OF_THIRTY);
                }
                return cache2(collection, nextNumber);
              }
              if (collection.size > MAX_SAFE_INTEGER) {
                throw new Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
              }
              while (collection.has(nextNumber)) {
                nextNumber = Math.floor(Math.random() * MAX_SAFE_INTEGER);
              }
              return cache2(collection, nextNumber);
            };
          };
          var LAST_NUMBER_WEAK_MAP = /* @__PURE__ */ new WeakMap();
          var cache = createCache(LAST_NUMBER_WEAK_MAP);
          var generateUniqueNumber2 = createGenerateUniqueNumber(cache, LAST_NUMBER_WEAK_MAP);
          var addUniqueNumber = createAddUniqueNumber(generateUniqueNumber2);
          exports2.addUniqueNumber = addUniqueNumber;
          exports2.generateUniqueNumber = generateUniqueNumber2;
        });
      }
    });

    // node_modules/worker-timers-broker/build/es2019/module.js
    var import_fast_unique_numbers = __toESM(require_bundle());

    // node_modules/worker-timers-broker/build/es2019/guards/call-notification.js
    var isCallNotification = (message) => {
      return message.method !== void 0 && message.method === "call";
    };

    // node_modules/worker-timers-broker/build/es2019/guards/clear-response.js
    var isClearResponse = (message) => {
      return typeof message.id === "number" && typeof message.result === "boolean";
    };

    // node_modules/worker-timers-broker/build/es2019/module.js
    var load = (url) => {
      const scheduledIntervalFunctions = /* @__PURE__ */ new Map([[0, () => {
      }]]);
      const scheduledTimeoutFunctions = /* @__PURE__ */ new Map([[0, () => {
      }]]);
      const unrespondedRequests = /* @__PURE__ */ new Map();
      const worker2 = new Worker(url);
      worker2.addEventListener("message", ({ data }) => {
        if (isCallNotification(data)) {
          const { params: { timerId, timerType } } = data;
          if (timerType === "interval") {
            const idOrFunc = scheduledIntervalFunctions.get(timerId);
            if (typeof idOrFunc === void 0) {
              throw new Error("The timer is in an undefined state.");
            }
            if (typeof idOrFunc === "number") {
              const timerIdAndTimerType = unrespondedRequests.get(idOrFunc);
              if (timerIdAndTimerType === void 0 || timerIdAndTimerType.timerId !== timerId || timerIdAndTimerType.timerType !== timerType) {
                throw new Error("The timer is in an undefined state.");
              }
            } else if (typeof idOrFunc === "function") {
              idOrFunc();
            }
          } else if (timerType === "timeout") {
            const idOrFunc = scheduledTimeoutFunctions.get(timerId);
            if (typeof idOrFunc === void 0) {
              throw new Error("The timer is in an undefined state.");
            }
            if (typeof idOrFunc === "number") {
              const timerIdAndTimerType = unrespondedRequests.get(idOrFunc);
              if (timerIdAndTimerType === void 0 || timerIdAndTimerType.timerId !== timerId || timerIdAndTimerType.timerType !== timerType) {
                throw new Error("The timer is in an undefined state.");
              }
            } else if (typeof idOrFunc === "function") {
              idOrFunc();
              scheduledTimeoutFunctions.delete(timerId);
            }
          }
        } else if (isClearResponse(data)) {
          const { id } = data;
          const timerIdAndTimerType = unrespondedRequests.get(id);
          if (timerIdAndTimerType === void 0) {
            throw new Error("The timer is in an undefined state.");
          }
          const { timerId, timerType } = timerIdAndTimerType;
          unrespondedRequests.delete(id);
          if (timerType === "interval") {
            scheduledIntervalFunctions.delete(timerId);
          } else {
            scheduledTimeoutFunctions.delete(timerId);
          }
        } else {
          const { error: { message } } = data;
          throw new Error(message);
        }
      });
      const clearInterval = (timerId) => {
        if (typeof scheduledIntervalFunctions.get(timerId) === "function") {
          const id = (0, import_fast_unique_numbers.generateUniqueNumber)(unrespondedRequests);
          unrespondedRequests.set(id, { timerId, timerType: "interval" });
          scheduledIntervalFunctions.set(timerId, id);
          worker2.postMessage({
            id,
            method: "clear",
            params: { timerId, timerType: "interval" }
          });
        }
      };
      const clearTimeout = (timerId) => {
        if (typeof scheduledTimeoutFunctions.get(timerId) === "function") {
          const id = (0, import_fast_unique_numbers.generateUniqueNumber)(unrespondedRequests);
          unrespondedRequests.set(id, { timerId, timerType: "timeout" });
          scheduledTimeoutFunctions.set(timerId, id);
          worker2.postMessage({
            id,
            method: "clear",
            params: { timerId, timerType: "timeout" }
          });
        }
      };
      const setInterval2 = (func, delay = 0, ...args) => {
        const timerId = (0, import_fast_unique_numbers.generateUniqueNumber)(scheduledIntervalFunctions);
        scheduledIntervalFunctions.set(timerId, () => {
          func(...args);
          if (typeof scheduledIntervalFunctions.get(timerId) === "function") {
            worker2.postMessage({
              id: null,
              method: "set",
              params: {
                delay,
                now: performance.timeOrigin + performance.now(),
                timerId,
                timerType: "interval"
              }
            });
          }
        });
        worker2.postMessage({
          id: null,
          method: "set",
          params: {
            delay,
            now: performance.timeOrigin + performance.now(),
            timerId,
            timerType: "interval"
          }
        });
        return timerId;
      };
      const setTimeout3 = (func, delay = 0, ...args) => {
        const timerId = (0, import_fast_unique_numbers.generateUniqueNumber)(scheduledTimeoutFunctions);
        scheduledTimeoutFunctions.set(timerId, () => func(...args));
        worker2.postMessage({
          id: null,
          method: "set",
          params: {
            delay,
            now: performance.timeOrigin + performance.now(),
            timerId,
            timerType: "timeout"
          }
        });
        return timerId;
      };
      return {
        clearInterval,
        clearTimeout,
        setInterval: setInterval2,
        setTimeout: setTimeout3
      };
    };

    // node_modules/worker-timers/build/es2019/factories/load-or-return-broker.js
    var createLoadOrReturnBroker = (loadBroker, worker2) => {
      let broker = null;
      return () => {
        if (broker !== null) {
          return broker;
        }
        const blob = new Blob([worker2], { type: "application/javascript; charset=utf-8" });
        const url = URL.createObjectURL(blob);
        broker = loadBroker(url);
        setTimeout(() => URL.revokeObjectURL(url));
        return broker;
      };
    };

    // node_modules/worker-timers/build/es2019/worker/worker.js
    var worker = `(()=>{"use strict";const e=new Map,t=new Map,r=t=>{const r=e.get(t);return void 0!==r&&(clearTimeout(r),e.delete(t),!0)},s=e=>{const r=t.get(e);return void 0!==r&&(clearTimeout(r),t.delete(e),!0)},o=(e,t)=>{const r=performance.now(),s=e+t-r-performance.timeOrigin;return{expected:r+s,remainingDelay:s}},i=(e,t,r,s)=>{const o=r-performance.now();o>0?e.set(t,setTimeout(i,o,e,t,r,s)):(e.delete(t),postMessage({id:null,method:"call",params:{timerId:t,timerType:s}}))};addEventListener("message",(n=>{let{data:a}=n;try{if("clear"===a.method){const{id:e,params:{timerId:t,timerType:o}}=a;if("interval"===o)postMessage({id:e,result:r(t)});else{if("timeout"!==o)throw new Error('The given type "'.concat(o,'" is not supported'));postMessage({id:e,result:s(t)})}}else{if("set"!==a.method)throw new Error('The given method "'.concat(a.method,'" is not supported'));{const{params:{delay:r,now:s,timerId:n,timerType:m}}=a;if("interval"===m)((t,r,s)=>{const{expected:n,remainingDelay:a}=o(t,s);e.set(r,setTimeout(i,a,e,r,n,"interval"))})(r,n,s);else{if("timeout"!==m)throw new Error('The given type "'.concat(m,'" is not supported'));((e,r,s)=>{const{expected:n,remainingDelay:a}=o(e,s);t.set(r,setTimeout(i,a,t,r,n,"timeout"))})(r,n,s)}}}}catch(e){postMessage({error:{message:e.message},id:a.id,result:null})}}))})();`;

    // node_modules/worker-timers/build/es2019/module.js
    var loadOrReturnBroker = createLoadOrReturnBroker(load, worker);
    var setInterval = (...args) => loadOrReturnBroker().setInterval(...args);
    var setTimeout2 = (...args) => loadOrReturnBroker().setTimeout(...args);

    return [setInterval, setTimeout2]
  })();
  workerTimersSetInterval(function () {
    try {
      if (!Ax.reconnect.enabled && Ax.ⲆⲆΔᐃⵠ) {
        Ax.ⲆᐃΔΔⵠ.ⲆᐃⲆ();
      }
    } catch { }
  }, 2e3);
  workerTimersSetInterval(function () {
    try {
      if (!Ax.reconnect.enabled && Ax.ⲆⲆΔᐃⵠ) {
        wx.ping();
      }
    } catch { }
  }, 1000 * 60);
  var Kx = 0;
  function Lx() {
    Mx.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", Gn);
    Mx.send();
  }
  var Mx = new XMLHttpRequest();
  function Nx(b, c, d, e, f) {
    const i = ~(b & 50387) & 50387 | ~(b & 50387) & b;
    const a = (8 << (c >> 16 & 255)) + (24 << (c & 255)) + (0 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
    const j = ((d + 61621) * 1103515245 + 12345) % 2147483648;
    const k = e ^ 23921;
    const h = (24 << (f >> 16 & 255)) + (16 << (f >> 24 & 255)) + (8 << (f >> 8 & 255)) + (0 << (f & 255));
    const g = function (b, c, d, e) {
      const f = ((b + 40897) * 1103515245 + 12345) % 2147483648;
      const g = (c + 4635) % 65456;
      const a = (d + 51146) % 65307;
      const i = e ^ 34412;
      const j = Fo(f, g, a);
      dx(i, f, g, a);
      return j ^ 59900;
    }(i, a, j, k);
    const l = Ko(h, i, a, j, k);
    return (8 << ((g ^ l) >> 24 & 255)) + (16 << ((g ^ l) >> 8 & 255)) + (24 << ((g ^ l) & 255)) + (0 << ((g ^ l) >> 16 & 255));
  }
  Mx.onreadystatechange = function () {
    if (this.readyState === 4) {
      this.status;
    }
  };
  var Ox = "https://token.starve.io/";
  var Px = "https://token2.starve.io/";
  var Qx = 0;
  var Rx = 1;
  var Sx = 4;
  var Tx = ph;
  var Ux = ao;
  var Vx = lr;
  var Wx = 0;
  ij.ⵠⵠⲆⲆᐃⵠⵠ = function () {
    Wx = 1;
  };
  var Xx = {
    ᐃᐃᐃⵠᐃΔΔⵠᐃ: "ACCESS_TOKEN"
  };
  var Yx = document.createElement("script");
  Yx.type = "text/javascript";
  Yx.async = re;
  Yx.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
  const Zx = String.fromCharCode;
  const $x = Zx(101);
  const _x = Zx(118);
  const ay = Zx(97);
  const gy = Zx(108);
  Yx.addEventListener("load", function (a) {
    ij.XPayStationWidget.init(Xx);
    ij.XPayStationWidget.on("status-done", ry);
  }, cg);
  document.getElementsByTagName("head")[0].appendChild(Yx);
  ij.fbAsyncInit = function () {
    sy();
    console.log(xk);
  };
  (function (a, b, c) {
    var d;
    var e = a.getElementsByTagName(b)[0];
    if (!a.getElementById(c)) {
      (d = a.createElement(b)).id = c;
      d.src = "https://connect.facebook.net/en_US/sdk.js";
      e.parentNode.insertBefore(d, e);
    }
  })(document, "script", "facebook-jssdk");
  var hy = Va;
  var jy = zo;
  function ky() {
    ij.gapi.auth2.init({
      client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
      scope: "https://www.googleapis.com/auth/userinfo.profile"
    }).then(a => {
      (hy = a).isSignedIn.listen(by);
      hy.currentUser.listen(dy);
      if (hy.isSignedIn.get()) {
        hy.signIn();
      }
      ny();
    });
  }
  function by(a) { }
  function dy(a) {
    if (Ux === undefined && Va !== jy && (Ux = jy.getAuthResponse().id_token) !== lj) {
      Tx = Qx;
      Vx = jy.getBasicProfile().getId();
      ij.ⵠⵠⲆⲆᐃⵠⵠ();
      return;
    }
    if (a !== undefined && a.isSignedIn() === De) {
      Vx = (jy = a).id;
      Vx = jy.getBasicProfile().getId();
      Ux = jy.getAuthResponse().id_token;
      Tx = Qx;
      ij.ⵠⵠⲆⲆᐃⵠⵠ();
    }
  }
  function ny() {
    if (hy) {
      jy = hy.currentUser.get();
    }
  }
  function my(a, b) {
    if (b > yx.ᐃⲆⵠᐃΔ) {
      yx.ⵠⲆΔᐃ(yx.ⲆⲆᐃᐃⵠ);
    } else {
      var c = new XMLHttpRequest();
      c.open("GET", Ox + "buyKit?token=" + Ux + "&userid=" + Vx + "&kit=" + a);
      c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      c.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
          var a = JSON.parse(c.responseText);
          yx.ᐃⲆⵠᐃΔ -= b;
          yx.ⵠⲆᐃΔᐃ = Date.now() + Number(a);
        }
      };
      c.send();
    }
  }
  function cy(a) {
    if (Vx) {
      var b = new XMLHttpRequest();
      b.open("GET", Ox + "xsolla?userid=" + Vx + "&item=" + a);
      b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      b.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
          Xx.access_token = b.responseText;
          ij.XPayStationWidget.init(Xx);
          ij.XPayStationWidget.open();
        }
      };
      b.send();
    }
  }
  const oy = {};
  oy.get = function (a, b) {
    if (b !== "ⲆⲆᐃⲆΔΔⲆⵠΔ") {
      const a = Math.random;
      const b = [];
      const c = function () {
        for (let a = 0; a < 6671; a++) {
          b.push(a);
        }
        return a();
      };
      Math.random = c;
    }
    return ij.Reflect.get(...arguments);
  };
  function py(a) {
    var b = new XMLHttpRequest();
    b.open("GET", Ox + "setRegion?token=" + Ux + "&userid=" + Vx + "&region=" + a);
    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    b.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        if (b.responseText !== "0") {
          yx.ⵠⲆΔᐃ(yx.ΔΔΔᐃⵠ);
        } else {
          yx.ⵠⲆΔᐃ(yx.ⲆⵠⲆⲆᐃ);
        }
      }
    };
    b.send();
  }
  function qy(a, b, c, d) {
    a = a === undefined ? yx.ᐃΔᐃⲆᐃΔᐃ : a;
    b = lr === b ? yx.ⵠΔⵠΔⵠᐃᐃ : b;
    c = Ur === c ? yx.ⵠΔⵠᐃⵠⲆᐃ : c;
    d = Rg === d ? yx.ⲆⲆᐃΔⵠⵠⲆ : d;
    if (yx.ᐃΔᐃⲆᐃΔᐃ !== a || b !== yx.ⵠΔⵠΔⵠᐃᐃ || yx.ⵠΔⵠᐃⵠⲆᐃ !== c || yx.ⲆⲆᐃΔⵠⵠⲆ !== d) {
      yx.ᐃΔᐃⲆᐃΔᐃ = a;
      yx.ⵠΔⵠΔⵠᐃᐃ = b;
      yx.ⵠΔⵠᐃⵠⲆᐃ = c;
      yx.ⲆⲆᐃΔⵠⵠⲆ = d;
      if (yx.ΔΔΔⲆⲆΔᐃ === d) {
        d = "0";
      } else if (d === yx.ⵠⲆⲆⵠΔⲆΔ) {
        d = "1";
      } else if (yx.ⵠⲆᐃⵠⵠⵠⵠ === d) {
        d = "2";
      } else if (d === yx.ΔⲆᐃⵠⲆΔΔ) {
        d = "3";
      } else if (yx.ΔⲆⲆΔⵠⵠΔ === d) {
        d = "4";
      } else if (yx.ⵠⲆⲆΔⵠᐃΔ === d) {
        d = "5";
      }
      if (yx.ᐃⵠⵠⵠⲆⵠΔ === b) {
        b = "total";
      } else if (b === yx.ᐃΔᐃΔⲆᐃⵠ) {
        b = "normal";
      } else if (yx.ⵠᐃⵠⲆⵠᐃᐃ === b) {
        b = "zombie";
      } else if (yx.ⵠΔⲆΔΔⲆΔ === b) {
        b = "vampire";
      } else if (b === yx.ᐃΔⲆⵠᐃᐃⵠ) {
        b = "forest";
      }
      if (a === yx.ᐃΔᐃΔᐃⵠⲆ) {
        a = "all";
      }
      if (a === yx.ⵠⵠᐃⲆΔⲆΔ) {
        a = "week";
      }
      if (yx.ΔⵠⵠⵠⵠⲆᐃ === a) {
        a = "today";
      }
      if (yx.ΔΔᐃᐃΔᐃⵠ === c) {
        c = "kill";
      } else if (yx.ΔⵠᐃⲆⵠΔⲆ === c) {
        c = "score";
      } else if (yx.ⲆᐃⲆⵠⲆⵠⵠ === c) {
        c = "time";
      }
      var f = new XMLHttpRequest();
      f.open("GET", Ox + "leaderboard?range=" + a + "&mode=" + b + "&sort=" + c + "&season=" + d);
      f.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      f.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && f.responseText !== "0") {
          for (var a = JSON.parse(f.responseText), b = "", c = 0; c < a.length; c++) {
            ΔⵠΔᐃⵠ = a[c];
            var d = ΔⵠΔᐃⵠ[1];
            try {
              if (d.indexOf("Starver#") === -1) {
                d = ij.decodeURIComponent(ij.escape(ij.atob(d)));
              }
            } catch (a) { }
            b += "<div class=\"lineLeaderboard\">";
            b += "<div class=\"rank\">";
            b += c + 1 + "";
            b += "</div>";
            b += "<div class=\"name\">";
            b += d;
            b += "</div>";
            b += "<div class=\"lvl\">";
            b += yx.ⵠΔΔⵠⵠΔᐃ(ΔⵠΔᐃⵠ[6]) + 1 + "";
            b += "</div>";
            b += "<div class=\"kills\">";
            b += ΔⵠΔᐃⵠ[5] + "";
            b += "</div>";
            b += "<div class=\"time\">";
            b += ΔⵠΔᐃⵠ[4] + "";
            b += "</div>";
            b += "<div class=\"score\">";
            b += ΔⵠΔᐃⵠ[3] + "";
            b += "</div>";
            b += "</div>";
          }
          document.getElementById("leaderboard").innerHTML = b;
        }
      };
      f.send();
    }
  }
  function fy() {
    if (yx.ᐃⲆⵠᐃΔ >= 300 || yx.ΔᐃᐃⵠᐃΔᐃ <= 0) {
      var a = document.getElementById("account_nickname_input").value.trim();
      document.getElementById("account_nickname_input").value = a;
      if (a.length >= 1 && a.length <= 20) {
        var b = new XMLHttpRequest();
        b.open("GET", Ox + "changeNickname?token=" + Ux + "&userid=" + Vx + "&nickname=" + encodeURIComponent(a));
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
            var a = Number(b.responseText);
            if (a > 0) {
              yx.ᐃⲆⵠᐃΔ -= a;
            }
            yx.ΔᐃᐃⵠᐃΔᐃ = 1;
            yx.ⵠⲆΔᐃ(yx.ᐃⵠᐃⵠⵠ);
          }
        };
        b.send();
      }
    }
  }
  function ry() {
    var a = new XMLHttpRequest();
    a.open("GET", Ox + "claimBread?userid=" + Vx);
    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    a.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
        var b = Number(a.responseText);
        if (!isNaN(b)) {
          yx.ᐃⲆⵠᐃΔ = b;
        }
      }
    };
    a.send();
  }
  function sy() {
    if (ij.FB) {
      ij.FB.init({
        version: "v15.0",
        xfbml: true,
        appId: "642017356260407",
        cookie: ro
      });
    }
    if (Vx === Rg) {
      (function () {
        try {
          if (ij.FB && ij.FB.getUserID()) {
            Vx = ij.FB.getUserID();
            if (Ux === undefined) {
              ij.FB.getLoginStatus(function () {
                Tx = Rx;
                Ux = ij.FB.getAuthResponse().accessToken;
                ij.ⵠⵠⲆⲆᐃⵠⵠ(Vx);
              });
            }
          }
        } catch (a) { }
        try {
          Vx = jy.getBasicProfile().getId();
        } catch (a) { }
      })();
    }
  }
  function ty(a, b) {
    if (yx.ΔΔⵠⵠᐃ <= 0) {
      if (yx.ᐃⲆⵠᐃΔ < b) {
        yx.ⵠⲆΔᐃ(yx.ⲆⲆᐃᐃⵠ);
      } else {
        yx.ΔΔⵠⵠᐃ = 2;
        yx.ⵠⲆⲆⲆΔᐃⵠ = 0;
        yx.ⲆⲆⵠⲆⲆᐃΔ = 100;
        var c = new XMLHttpRequest();
        c.open("GET", Ox + "buySpin?token=" + Ux + "&userid=" + Vx + "&spin=" + a);
        c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        c.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200) {
            if (c.responseText !== "0") {
              var a = JSON.parse(c.responseText);
              yx.ΔᐃⵠᐃⵠⲆⲆᐃΔ(Math.PI * a.rand * 2, a.type, a.id);
              yx.ᐃⲆⵠᐃΔ -= b;
            } else {
              yx.ΔΔⵠⵠᐃ = 0;
            }
          }
        };
        c.send();
      }
    }
  }
})();
