(function () {
  var z = 41;
  if (z === 7) {
    z = 248;
  }
  var Cf = 125;
  var Uf = 126;
  var Zh = 152;
  if (Zh >= 5) {
    Zh = 219;
  }
  if (Uf >= 13) {
    Uf = 206;
  }
  if (Cf > 1) {
    Cf = 208;
  }
  Math.floor(102[102 .ᐃⲆⲆΔᐃᐃΔ]);
  var aj = 48;
  if (aj === 2) {
    aj = 117;
  }
  const bj = window;
  var a = 77;
  if (a == 6) {
    a = 8;
  }
  var cj = 203;
  if (cj > 3) {
    cj = 167;
  }
  let dj = 156;
  var ej = 96;
  if (ej >= 14) {
    ej = 251;
  }
  Math.floor(1[1 .ΔⲆⲆᐃⲆΔΔ]);
  Math.floor(197[197 .ΔⲆⵠⲆΔᐃᐃ]);
  var fj = 7;
  if (fj > 11) {
    fj = 88;
  }
  const gj = function (a) {
    let b = "";
    for (let c = 0; c < a.length; c++) {
      b += bj.String.fromCharCode(a[c] ^ dj++ % 255);
    }
    return b;
  };
  var u = 179;
  var hj = 92;
  if (hj === 5) {
    hj = 163;
  }
  if (u === 13) {
    u = 61;
  }
  Math.floor(24[24 .ⲆⵠⵠΔΔΔⲆⲆⲆ]);
  var ij = 62;
  if (ij === 0) {
    ij = 158;
  }
  var jj = 28;
  if (jj >= 6) {
    jj = 65;
  }
  Math.floor(239[239 .ⵠⵠᐃⲆⵠᐃΔⵠΔ]);
  var kj = 180;
  var lj = 119;
  if (lj == 11) {
    lj = 171;
  }
  if (kj > 14) {
    kj = 147;
  }
  Math.floor(85[85 .ⲆⲆΔΔΔⲆᐃΔⵠ]);
  var mj = 90;
  if (mj == 8) {
    mj = 111;
  }
  var nj = 199;
  if (nj > 12) {
    nj = 35;
  }
  const oj = -8;
  const f = 255;
  const y = 1;
  const w = 8;
  const P = 20;
  const k = 6;
  const A = 19;
  const x = -4;
  const J = 18;
  const M = 15;
  const B = true;
  const pj = undefined;
  const D = 9;
  const E = 100;
  const I = false;
  const Q = 256;
  const S = 13;
  const F = 19;
  const R = 17;
  const j = 2;
  const L = 14;
  const W = 1 << 1;
  const G = 5;
  const N = I;
  const q = 4;
  const O = 6;
  const H = 4;
  const U = 16;
  const Y = 7;
  const K = 1 << 11;
  const V = 11;
  const X = 12;
  const Z = 1 << 12;
  const _ = 10;
  const ee = 17;
  const ie = 2;
  const ne = 4;
  const oe = 3;
  const ae = 1347200;
  const re = 1347200 .ⲆᐃΔᐃⵠⵠᐃ;
  const se = `const ⵠⵠᐃᐃⵠⲆⵠ = (typeof ᐃⵠⲆᐃⲆΔⵠ === "${re}") ? 1 : 0; return ⵠⵠᐃᐃⵠⲆⵠ;`;
  const he = 12;
  const ge = 3;
  const le = 18;
  const te = 255;
  const be = 14;
  const de = 0;
  const ue = 15;
  let me;
  let ve;
  let qj = pj;
  let rj = pj;
  const sj = 7;
  let fe;
  let tj = pj;
  const uj = 0;
  let we = pj;
  let vj = pj;
  let wj = [];
  const Ae = 19;
  const xe = 2;
  const Je = 20;
  let Me;
  let xj;
  let yj = "_";
  let zj = pj;
  let Aj = pj;
  const Bj = 3;
  const Qe = 8;
  let _e = pj;
  const Cj = 13;
  let Re;
  let Dj = pj;
  let Ej = pj;
  const Fj = 9;
  const Ge = N;
  const Ne = pj;
  let qe;
  let Gj = pj;
  const Hj = 6;
  const Ue = 20;
  let Ye;
  let Ij;
  let Jj;
  let Kj;
  let Lj;
  let Mj;
  let Nj;
  let Oj;
  let Pj = Ne;
  let Qj = pj;
  const Rj = 3;
  let ai;
  let Sj;
  const Tj = B;
  const hi = 5;
  const gi = 4;
  let li;
  const Uj = 256;
  const bi = 17;
  let di;
  const Vj = 255;
  let mi = pj;
  let Wj = Ne;
  function Xj(a) {
    return bj.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ⵠⵠΔΔΔΔⵠΔⵠ: 14833363,
      ⲆΔⲆⲆᐃᐃΔⵠⵠ: 12142189,
      ⵠⲆⵠᐃΔΔⵠ: 3324268,
      ᐃΔⲆⲆ: 7822163
    };
  })();
  let Ci;
  let Yj = Ne;
  let Zj = pj;
  const $j = 12;
  let yi;
  const _j = 100;
  let Pi;
  const ak = 100;
  let Ai;
  let bk;
  let ck;
  let dk = Ne;
  const ek = 0;
  const Ei = 3;
  let Di;
  const fk = 10;
  let Si;
  const gk = 1;
  const _i = 2;
  let Fi = pj;
  const hk = 11;
  const ji = 16;
  const Li = 256;
  let Wi = pj;
  const ik = 0;
  const Ni = Ge;
  let qi = Ne;
  const jk = 16385935;
  const Hi = 16385935 .ⵠᐃᐃᐃᐃⵠΔ;
  const Ui = `const ⲆᐃᐃⵠⵠⵠΔ = (typeof ΔⵠᐃⲆᐃⵠΔ === "${Hi}") ? 1 : 0; return ⲆᐃᐃⵠⵠⵠΔ;`;
  const Yi = 0;
  const Ki = 14;
  let Vi;
  let kk = pj;
  let lk = Ne;
  const mk = 15;
  let nk = 0;
  const ok = 12;
  const pk = 18;
  const qk = Tj;
  const rk = 5;
  if (!bj.WebAssembly || !bj.WebAssembly.instantiate) {
    ᐃⲆⵠⵠⲆⵠᐃⲆᐃ();
  }
  const sk = 18;
  const tk = {
    Date: Date
  };
  bj.WebAssembly.instantiate(Uint8Array.from(bj.atob(""), function (a) {
    return a.charCodeAt(0);
  }), tk).then(async function (a) {
    qj = a.instance;
    rj = qj.exports;
    me = rj.memory;
    ve = me.buffer;
    tj = rj.__pin;
    fe = rj.__unpin;
    we = rj.__new;
    vj = rj.__collect;
    yj = "_";
    for (let b = 0; b < 31; b++) {
      wj[b] = rj[yj + b];
    }
    Me = rj.__rtti_base;
    Aj = new Float32Array(ve);
    zj = new Float64Array(ve);
    xj = new BigUint64Array(ve);
    _e = new Uint32Array(ve);
    Re = new Uint16Array(ve);
    Ej = new Uint8Array(ve);
    Dj = new BigInt64Array(ve);
    qe = new Int32Array(ve);
    Gj = new Int16Array(ve);
    Ye = new Int8Array(ve);
    Fi = wj[26];
    Jj = wj[23];
    Mj = wj[9];
    mi = wj[19];
    Zj = wj[16];
    lk = wj[5];
    Ij = wj[15];
    Pj = wj[11];
    Vi = wj[17];
    Oj = wj[1];
    Pi = wj[3];
    ai = wj[10];
    li = wj[30];
    Nj = wj[24];
    Ci = wj[28];
    qi = wj[4];
    Kj = wj[6];
    Ai = wj[13];
    Yj = wj[0];
    Wi = wj[22];
    dk = wj[7];
    Wj = wj[12];
    Sj = wj[27];
    Di = wj[20];
    Si = wj[18];
    di = wj[14];
    yi = wj[8];
    Qj = wj[21];
    bk = wj[2];
    ck = wj[25];
    Lj = wj[29];
    nk = 1;
    if (kk) {
      await kk();
    }
  });
  const uk = 6;
  const vk = 100;
  const wk = function (a) {
    return _e[(Me + 4 >>> 2) + (a << 1)];
  };
  function xk(a) {
    return 31 - Math.clz32(a >>> 6 & 31);
  }
  const yk = 4;
  const zk = 7;
  const Ak = 12;
  const Bk = 13;
  const Ck = 8;
  const Dk = 256;
  function Ek(a, b, c) {
    if (c) {
      switch (a) {
        case 2:
          return Aj;
        case 3:
          return zj;
      }
    } else {
      switch (a) {
        case 0:
          if (b) {
            return Ye;
          } else {
            return Ej;
          }
        case 1:
          if (b) {
            return Gj;
          } else {
            return Re;
          }
        case 2:
          if (b) {
            return qe;
          } else {
            return _e;
          }
        case 3:
          if (b) {
            return Dj;
          } else {
            return xj;
          }
      }
    }
  }
  const Fk = 19;
  const Gk = 100;
  const Hk = 20;
  const Ik = 16;
  const Jk = 14;
  const Kk = 17;
  const Lk = Ne;
  function Mk(b, c, d) {
    const e = (b + 3055) % 65310;
    const f = c ^ 47440;
    const g = (12345 + (4723 + d) * 1103515245) % 2147483648;
    return ((5677 + (pb(e, f) ^ $b(g, e, f, g, e))) * 214013 + 2531011) % 4294967296;
  }
  function Nk(b) {
    const c = _e[b + oj >>> 2];
    const d = wk(c);
    const e = xk(d);
    let f = d & 4 ? b : _e[b + 4 >>> 2];
    const g = d & W ? _e[b + 12 >>> 2] : _e[f + x >>> 2] >>> e;
    return Ek(e, d & K, d & Z).subarray(f >>>= e, f + g);
  }
  function Ok(b, c, d, e, f) {
    const i = (9585 + b) % 65409;
    const a = ~(c & 64941) & 64941 | ~(c & 64941) & c;
    const j = (24170 + d) % 65388;
    const k = ((24864 + e) * 22695477 + 1) % 4294967296;
    const h = ~(f & 42572) & f | ~(f & 42572) & 42572;
    const g = Mw(i, a);
    (function (c, e, f, i, j, k) {
      const a = (2531011 + (13574 + c) * 214013) % 4294967296;
      const m = (12345 + (e + 18254) * 1103515245) % 2147483648;
      const n = (24 << (f >> 16 & 255)) + (8 << (f >> 0 & 255)) + (16 << (f >> 24 & 255)) + (0 << (f >> 8 & 255));
      const h = i ^ 60121;
      const g = (2147483587 + (j + 5922) * 2147483629) % 2147483647;
      const l = (8 << (k >> 24 & 255)) + (16 << (k & 255)) + (24 << (k >> 8 & 255)) + (0 << (k >> 16 & 255));
      const o = hq(a, m, n, h);
      const b = Zb(g, l, a, m, n, h);
    })(j, k, h, i, a, j);
    return ~(g & 49002) & 49002 | ~(g & 49002) & g;
  }
  const Pk = 13;
  const Qk = 15;
  const Rk = 256;
  const Sk = 9;
  const Tk = B;
  const Uk = "development";
  const Vk = 5;
  const Wk = "production";
  const Xk = 13;
  function Yk(b, c, d) {
    const e = ~(b & 47851) & b | ~(b & 47851) & 47851;
    const f = (8 << (c & 255)) + (0 << (c >> 24 & 255)) + (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255));
    const g = d ^ 13582;
    return ((63897 + (function (b, c, d, e, f) {
      const i = (24 << (b >> 24 & 255)) + (8 << (b & 255)) + (16 << (b >> 16 & 255)) + (0 << (b >> 8 & 255));
      const a = (2147483587 + (c + 60185) * 2147483629) % 2147483647;
      const j = ~(d & 56675) & d | ~(d & 56675) & 56675;
      const k = (e | 5930) & ~(e & 5930);
      const h = ~(f & 22765) & 22765 | ~(f & 22765) & f;
      const g = iq(i, a);
      Yw(j, k, h, i, a, j);
      return ~(g & 100) & g | ~(g & 100) & 100;
    }(e, f, g, e, f) ^ Xw(g, e))) * 22695477 + 1) % 4294967296;
  }
  const Zk = 4;
  const $k = 2;
  const _k = 8;
  const Tl = 255;
  const jn = pj;
  const lp = 16;
  function tp(a) {
    return function (a, b) {
      const c = ~(a & 25632) & (a | 25632);
      const d = b ^ 1714;
      const e = Mw(c, d);
      (function (c, d, e, f, i, j) {
        const a = (0 << (c >> 24 & 255)) + (24 << (c >> 16 & 255)) + (8 << (c >> 8 & 255)) + (16 << (c & 255));
        const k = ~(d & 16027) & (d | 16027);
        const m = (e | 60355) & ~(e & 60355);
        const h = (8 << (f >> 8 & 255)) + (16 << (f >> 16 & 255)) + (24 << (f >> 24 & 255)) + (0 << (f & 255));
        const g = ~(i & 49680) & (i | 49680);
        const l = ~(j & 36268) & (j | 36268);
        const n = Yw(a, k, m, h, g, l);
        (function (b, c, d, e, f, i) {
          const a = (12345 + (e + 13706) * 1103515245) % 2147483648;
          const j = ((f + 30074) * 214013 + 2531011) % 4294967296;
          const k = (1 + (i + 64441) * 22695477) % 4294967296;
          const h = Yk((0 << (b >> 24 & 255)) + (8 << (b & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 8 & 255)), ((16788 + c) * 1664525 + 1013904223) % 4294967296, ~(d & 60020) & 60020 | ~(d & 60020) & d);
          Yk(a, j, k);
        })(a, k, m, h, g, l);
      })(c, d, c, d, c, d);
      return e ^ 35153;
    }(a, 44472);
  }
  function aq(a) {
    this.ᐃΔᐃⲆΔ = 2147483648;
    this.a = 1103515245;
    this.c = 12345;
    this.state = a || Math.floor(Math.random() * (this.ᐃΔᐃⲆΔ - 1));
  }
  aq.prototype.random = function () {
    this.state = (this.state * this.a + this.c) % this.ᐃΔᐃⲆΔ;
    return this.state / this.ᐃΔᐃⲆΔ;
  };
  aq.prototype.ⲆⲆⲆⲆⲆⲆᐃ = function (a) {
    this.state = a;
  };
  ΔⲆᐃᐃⵠᐃⵠ = 10000;
  const bq = Tj;
  const cq = 255;
  ΔᐃᐃᐃⵠⲆΔ = [];
  var dq = new aq();
  dq.ⲆⲆⲆⲆⲆⲆᐃ(new Date().getTime());
  const eq = 9;
  for (var fq = 0; fq < ΔⲆᐃᐃⵠᐃⵠ; fq++) {
    ΔᐃᐃᐃⵠⲆΔ.push(dq.random());
  }
  const gq = 15;
  (function a() {
    const b = {
      ⵠΔⵠΔΔΔΔᐃᐃ: 0
    };
    let c = 0;
    for (let a in b) {
      c = a;
    }
    const d = [];
    for (let a = 0; a < 12; a++) {
      d.push(bj.Math.floor(1 + bj.Math.random() * 10));
    }
    let f = "for (let " + c + " = 0 ; " + c + " < " + d[0] + " ; " + c + "++) {";
    for (let a = 0; a < d[1]; a++) {
      f += d[a] + ";debugger;";
    }
    for (let a = 0; a < d[2]; a++) {
      f += "debugger;";
    }
    f += "}";
    const e = new bj.Function(f);
    bj.setTimeout(a, 10000);
    e();
  })();
  function hq(b, c, d, e) {
    const f = (0 << (b >> 8 & 255)) + (16 << (b >> 16 & 255)) + (8 << (b >> 24 & 255)) + (24 << (b & 255));
    const g = (c | 9884) & ~(c & 9884);
    const a = d ^ 35178;
    return ((51554 + ($b(f, g, a, e ^ 36291, f) ^ Mw(g, a))) * 2147483629 + 2147483587) % 2147483647;
  }
  function iq(a, b) {
    const c = (12345 + (31262 + a) * 1103515245) % 2147483648;
    const d = (8 << (b >> 16 & 255)) + (0 << (b >> 8 & 255)) + (24 << (b >> 24 & 255)) + (16 << (b & 255));
    const e = function (b, c, d, e) {
      const f = (24 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 16 & 255)) + (0 << (b & 255));
      const i = ~(c & 11740) & 11740 | ~(c & 11740) & c;
      const a = ((d + 3543) * 1664525 + 1013904223) % 4294967296;
      const j = (12345 + (46754 + e) * 1103515245) % 2147483648;
      const k = Kb(f, i, a, j, f);
      const h = Mk(i, a, j);
      return (2531011 + (8441 + (k ^ h)) * 214013) % 4294967296;
    }(c, d, c, d);
    Kb(c, d, c, d, c);
    return (e | 4397) & ~(e & 4397);
  }
  function en(b, c, d, e, f, g) {
    Di($f, b, c, d, e, f, g);
    const a = nx(Vw[0], Vw[1]);
    const h = nx(Vw[2], Vw[3]);
    return (24 << ((a ^ h) >> 16 & 255)) + (0 << ((a ^ h) & 255)) + (8 << ((a ^ h) >> 24 & 255)) + (16 << ((a ^ h) >> 8 & 255));
  }
  const tn = 16;
  function nn(c, e, f, i, j, k) {
    const a = ((39488 + c) * 214013 + 2531011) % 4294967296;
    const m = ~(e & 49976) & e | ~(e & 49976) & 49976;
    const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
    const h = i ^ 52219;
    const g = (j + 3575) % 65503;
    const l = ~(k & 6932) & k | ~(k & 6932) & 6932;
    const o = no(a, m, n, h, g);
    const b = function (c, d, e, f, i, j) {
      const a = c ^ 30142;
      const k = (d + 63025) % 65493;
      const m = e ^ 30777;
      const h = ((45939 + f) * 22695477 + 1) % 4294967296;
      const g = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 8 & 255));
      const l = (j | 45652) & ~(j & 45652);
      const n = no(a, k, m, h, g);
      rn(l, a, k, m, h);
      Fn(g, l, a, k, m, h);
      return n ^ 60048;
    }(l, a, m, n, h, g);
    _n(l, a, m, n, h, g);
    const d = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
    return ~(d & 42138) & d | ~(d & 42138) & 42138;
  }
  function on(b, c, d, e) {
    const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
    const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
    const a = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
    const j = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
    const k = function (c, e, f, i, j, k) {
      const a = c ^ 10715;
      const m = (24 << (e >> 16 & 255)) + (16 << (e >> 32 & 255)) + (32 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
      const n = (8 << (f >> 16 & 255)) + (32 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (24 << (f >> 32 & 255));
      const h = i ^ 40782;
      const g = j ^ 41301;
      const l = ~(k & 12091) & (k | 12091);
      const o = yn(a, m, n, h, g, l);
      yn(a, m, n, h, g, l);
      qn(a, m, n, h, g);
      const b = (o | 3006) & ~(o & 3006);
      return ~(b & 24460) & (b | 24460);
    }(f, i, a, j, f, i);
    const h = so(a, j, f, i, a);
    yn(j, f, i, a, j, f);
    const g = (1013904223 + (26191 + (k ^ h)) * 1664525) % 4294967296;
    return (g | 38630) & ~(g & 38630);
  }
  const an = 11;
  function rn(b, c, d, e, f) {
    const i = ((b + 14772) * 2147483629 + 2147483587) % 2147483647;
    const a = c ^ 63080;
    const j = ((d + 60304) * 22695477 + 1) % 4294967296;
    const k = ~(e & 5467) & 5467 | ~(e & 5467) & e;
    const h = (f | 40165) & ~(f & 40165);
    const g = function (b, c, d, e) {
      const f = (b | 57611) & ~(b & 57611);
      const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
      const a = d ^ 62842;
      const j = ~(e & 1179) & e | ~(e & 1179) & 1179;
      const k = ln(f, i, a, j);
      const h = Hn(f, i, a, j);
      on(f, i, a, j);
      const g = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & 255)) + (16 << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> 8 & 255));
      return ~(g & 63304) & (g | 63304);
    }(i, a, j, k);
    const l = so(h, i, a, j, k);
    return ((28765 + ((16 << ((g ^ l) >> 24 & 255)) + (8 << ((g ^ l) >> 16 & 255)) + (24 << ((g ^ l) >> 32 & 255)) + (32 << ((g ^ l) >> 8 & 255)) ^ wo(h, i, a, j, k, h))) * 1664525 + 1013904223) % 4294967296;
  }
  function sn(c, d, e, f, i) {
    const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
    const a = d ^ 58614;
    const k = ((e + 45267) * 214013 + 2531011) % 4294967296;
    const m = f ^ 40810;
    const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
    const g = lo(j, a);
    const l = on(k, m, h, j);
    (function (b, c, d, e) {
      const f = (b + 34282) % 65336;
      const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
      const a = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
      const j = ~(e & 25475) & 25475 | ~(e & 25475) & e;
      const k = function (a, b) {
        const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
        const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
        const e = Co(c, d, c);
        Jn(d, c, d, c);
        return ((42346 + (e ^ 18573 ^ vn(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
      }(f, i);
      const h = ao(a, j, f, i, a);
      lo(j, f);
      const g = (58498 + (k ^ h)) % 65531;
    })(a, k, m, h);
    const n = (24 << ((g ^ l) >> 24 & 255)) + (32 << ((g ^ l) >> 16 & 255)) + (8 << ((g ^ l) >> 32 & 255)) + (16 << ((g ^ l) >> 8 & 255));
    return ~(n & 13644) & n | ~(n & 13644) & 13644;
  }
  const hn = 10;
  const gn = 256;
  function ln(b, c, d, e) {
    const f = b ^ 11762;
    const g = ~(c & 19425) & 19425 | ~(c & 19425) & c;
    return ((55182 + (((17757 + ((32 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(e & 259) & 259 | ~(e & 259) & e))) * 1664525 + 1013904223) % 4294967296;
  }
  const un = 6;
  const bn = Ge;
  const dn = 13;
  function vn(b, c, d, e, f) {
    const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
    const a = (c + 39144) % 65406;
    const j = d ^ 34575;
    const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
    const h = (f | 25975) & ~(f & 25975);
    const g = ln(i, a, j, k);
    ao(h, i, a, j, k);
    _n(h, i, a, j, k, h);
    return (g | 19326) & ~(g & 19326) ^ 36297;
  }
  function mn(b, c, d, e, f) {
    const i = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
    const a = (12345 + (c + 3024) * 1103515245) % 2147483648;
    const j = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
    const k = (1 + (e + 41324) * 22695477) % 4294967296;
    const h = (f | 19607) & ~(f & 19607);
    const g = to(i, a);
    ao(j, k, h, i, a);
    Fn(j, k, h, i, a, j);
    const l = ~(g & 49323) & 49323 | ~(g & 49323) & g;
    return ~(l & 46567) & (l | 46567);
  }
  const cn = 3;
  const pn = 11;
  const Cn = 4;
  const Tn = Ni;
  function fn(c, d, e, f, i, j) {
    const a = (1013904223 + (c + 28824) * 1664525) % 4294967296;
    const k = (1013904223 + (13210 + d) * 1664525) % 4294967296;
    const m = ~(e & 32165) & 32165 | ~(e & 32165) & e;
    const h = (24 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 32 & 255));
    const g = (1 + (39199 + i) * 22695477) % 4294967296;
    const l = j ^ 33037;
    const n = function (b, c, d) {
      const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
      const f = (c | 44117) & ~(c & 44117);
      const i = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
      const a = Rn(e, f, i, e, f);
      const j = wo(i, e, f, i, e, f);
      const k = function (a, b) {
        const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
        const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
        const e = Fn(c, d, c, d, c, d);
        (function (b, c, d, e, f) {
          const i = b ^ 64570;
          const a = (2531011 + (c + 41768) * 214013) % 4294967296;
          const j = (1013904223 + (d + 43923) * 1664525) % 4294967296;
          const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
          const h = (f | 21896) & ~(f & 21896);
          const g = function (a, b) {
            const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
            const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
            const e = function (b, c, d) {
              const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
              const f = (c | 55665) & ~(c & 55665);
              const g = (d + 54633) % 65404;
              const a = rn(e, f, g, e, f);
              (function (c, e, f, i, j, k) {
                const a = (2531011 + (c + 16955) * 214013) % 4294967296;
                const m = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                const n = (f | 14774) & ~(f & 14774);
                const h = (i | 48802) & ~(i & 48802);
                const g = ~(j & 24998) & (j | 24998);
                const l = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                const o = wn(a, m, n, h);
                const b = ao(g, l, a, m, n);
                const d = wn(h, g, l, a);
              })(g, e, f, g, e, f);
              Hn(g, e, f, g);
              return ~(a & 43875) & (a | 43875) ^ 15116;
            }(c, d, c);
            qn(d, c, d, c, d);
            ln(c, d, c, d);
            return (e | 17943) & ~(e & 17943) ^ 21791;
          }(i, a);
          Jn(j, k, h, i);
          const l = mn(a, j, k, h, i);
        })(c, d, c, d, c);
        to(d, c);
        return (e | 58283) & ~(e & 58283) ^ 8337;
      }(i, e);
      const h = (16 << ((a ^ j) >> 32 & 255)) + (24 << ((a ^ j) >> 24 & 255)) + (32 << ((a ^ j) >> 8 & 255)) + (8 << ((a ^ j) >> 16 & 255));
      return (8 << ((h ^ k) >> 32 & 255)) + (16 << ((h ^ k) >> 8 & 255)) + (32 << ((h ^ k) >> 16 & 255)) + (24 << ((h ^ k) >> 24 & 255));
    }(a, k, m);
    Hn(h, g, l, a);
    return ((34159 + (n ^ 2959 ^ wn(k, m, h, g))) * 1103515245 + 12345) % 2147483648;
  }
  const zn = 2;
  function yn(b, c, d, e, f, i) {
    const a = ~(b & 36133) & (b | 36133);
    const j = (c | 13670) & ~(c & 13670);
    const k = (d | 31390) & ~(d & 31390);
    const h = e ^ 64081;
    const g = f ^ 7550;
    const l = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
    return (12345 + (36760 + (((62552 + (ho(a, j, k, h, g) ^ Hn(l, a, j, k))) * 2147483629 + 2147483587) % 2147483647 ^ qn(h, g, l, a, j))) * 1103515245) % 2147483648;
  }
  function wn(b, c, d, e) {
    const f = ~(b & 33107) & (b | 33107);
    const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
    const a = ~(d & 32053) & (d | 32053);
    const i = e ^ 12240;
    const j = function (b, c, d, e) {
      const f = (32 << (b >> 32 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
      const i = (1 + (50595 + c) * 22695477) % 4294967296;
      const a = ~(d & 40066) & d | ~(d & 40066) & 40066;
      const j = e ^ 18768;
      const k = no(f, i, a, j, f);
      const h = sn(i, a, j, f, i);
      const g = Qn(a, j);
      return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ g)) * 1664525 + 1013904223) % 4294967296;
    }(f, g, a, i);
    Hn(f, g, a, i);
    return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ no(f, g, a, i, f))) * 214013) % 4294967296;
  }
  const Pn = 17;
  const kn = 1;
  const An = 12;
  const xn = 18;
  function Jn(b, c, d, e) {
    const f = (b | 15432) & ~(b & 15432);
    const g = c ^ 12315;
    const a = d ^ 38714;
    const i = e ^ 58084;
    const j = nn(f, g, a, i, f, g);
    Hn(a, i, f, g);
    return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ _n(a, i, f, g, a, i))) * 214013 + 2531011) % 4294967296;
  }
  const Mn = 255;
  const Bn = 19;
  const En = 9;
  const Dn = 19;
  const In = 1;
  const Sn = 100;
  function Qn(b, c) {
    const d = (2531011 + (b + 62874) * 214013) % 4294967296;
    const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const f = _n(d, e, d, e, d, e);
    const g = _n(d, e, d, e, d, e);
    ln(d, e, d, e);
    const a = (16 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
    return ~(a & 55949) & 55949 | ~(a & 55949) & a;
  }
  function _n(b, c, d, e, f, i) {
    const a = b ^ 23409;
    const j = c ^ 26380;
    const k = ((f + 33017) * 1103515245 + 12345) % 2147483648;
    const h = i ^ 42490;
    return ((19056 + (ln(a, j, d ^ 53590, e ^ 36633) ^ ln(k, h, a, j))) * 22695477 + 1) % 4294967296;
  }
  function Fn(c, e, f, i, j, k) {
    const a = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
    const m = (e | 41551) & ~(e & 41551);
    const n = (24 << (f >> 24 & 255)) + (16 << (f >> 32 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 8 & 255));
    const h = ~(i & 32641) & (i | 32641);
    const g = ((j + 35582) * 214013 + 2531011) % 4294967296;
    const l = ~(k & 1090) & (k | 1090);
    const o = wo(a, m, n, h, g, l);
    vn(a, m, n, h, g);
    ln(l, a, m, n);
    const b = ~(o & 8077) & 8077 | ~(o & 8077) & o;
    return ~(b & 3708) & (b | 3708);
  }
  ;
  function Rn(b, c, d, e, f) {
    const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
    const a = ~(c & 7703) & c | ~(c & 7703) & 7703;
    const j = (d | 31275) & ~(d & 31275);
    const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
    const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
    const g = _n(i, a, j, k, h, i);
    const l = ln(a, j, k, h);
    Co(i, a, j);
    return (24 << ((g ^ l) >> 16 & 255)) + (8 << ((g ^ l) >> 8 & 255)) + (32 << ((g ^ l) >> 24 & 255)) + (16 << ((g ^ l) >> 32 & 255)) ^ 31710;
  }
  const Ln = 4;
  const Wn = 8;
  const Gn = 16;
  const Nn = 17;
  function qn(b, c, d, e, f) {
    const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
    const a = ((18197 + c) * 214013 + 2531011) % 4294967296;
    const j = (2531011 + (22845 + d) * 214013) % 4294967296;
    const k = (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
    const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
    const g = _n(i, a, j, k, h, i);
    const l = Fn(a, j, k, h, i, a);
    ln(j, k, h, i);
    return (8 << ((g ^ l) >> 24 & 255)) + (16 << ((g ^ l) >> 16 & 255)) + (24 << ((g ^ l) >> 8 & 255)) + (32 << ((g ^ l) >> 32 & 255)) ^ 35444;
  }
  const On = 13;
  function Hn(b, c, d, e) {
    const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
    const i = c ^ 57623;
    const a = ~(d & 40280) & d | ~(d & 40280) & 40280;
    const j = ~(e & 24601) & e | ~(e & 24601) & 24601;
    const k = to(f, i);
    to(a, j);
    so(f, i, a, j, f);
    const h = ~(k & 43902) & 43902 | ~(k & 43902) & k;
    return (h | 8862) & ~(h & 8862);
  }
  const Un = 17;
  const Yn = 11;
  const Kn = jn;
  const Vn = 0;
  const Xn = 20;
  function Zn(a) {
    return bj.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ᐃΔΔⲆⲆᐃΔ: 13606999,
      ᐃⲆⲆᐃⵠᐃΔ: 2186286,
      ⵠⲆⵠᐃⵠⵠⲆⵠᐃ: 9362304,
      ⵠⲆⲆᐃⵠΔⵠⲆΔ: 12278543
    };
  })();
  const $n = 7;
  const eo = 5;
  const io = 3;
  function to(a, b) {
    const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
    const d = b ^ 53080;
    return (1 + (57525 + ((17769 + (ho(c, d, c, d, c) ^ ao(d, c, d, c, d))) % 65357 ^ ln(c, d, c, d))) * 22695477) % 4294967296;
  }
  function no(b, c, d, e, f) {
    const i = b ^ 62008;
    const a = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
    const j = ((d + 46531) * 22695477 + 1) % 4294967296;
    const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
    const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
    const g = rn(i, a, j, k, h);
    wo(i, a, j, k, h, i);
    return ((3037 + (g ^ 57467 ^ so(a, j, k, h, i))) * 1664525 + 1013904223) % 4294967296;
  }
  const oo = 14;
  function ao(b, c, d, e, f) {
    const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
    const a = c ^ 50118;
    const j = d ^ 41620;
    const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
    const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
    const g = wo(i, a, j, k, h, i);
    wo(a, j, k, h, i, a);
    return (2531011 + (53616 + ((g | 43477) & ~(g & 43477) ^ ln(j, k, h, i))) * 214013) % 4294967296;
  }
  const ro = 256;
  function so(c, d, e, f, i) {
    const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
    const a = (d + 52922) % 65337;
    const k = e ^ 25250;
    const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
    const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
    const g = vn(j, a, k, m, h);
    const l = lo(j, a);
    vn(k, m, h, j, a);
    const n = (1 + (19675 + (g ^ l)) * 22695477) % 4294967296;
    return ~(n & 7922) & n | ~(n & 7922) & 7922;
  }
  function ho(c, d, e, f, i) {
    const j = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const a = d ^ 55978;
    const k = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
    const m = ~(f & 30642) & (f | 30642);
    const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
    const g = ao(j, a, k, m, h);
    const l = qn(j, a, k, m, h);
    ln(j, a, k, m);
    const n = (16 << ((g ^ l) >> 32 & 255)) + (24 << ((g ^ l) >> 8 & 255)) + (8 << ((g ^ l) >> 24 & 255)) + (32 << ((g ^ l) >> 16 & 255));
    return ~(n & 23686) & (n | 23686);
  }
  const go = Tn;
  function lo(b, c) {
    const d = b ^ 24508;
    const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
    const f = mn(d, e, d, e, d);
    const g = ho(e, d, e, d, e);
    Rn(d, e, d, e, d);
    const a = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
    return ~(a & 40927) & 40927 | ~(a & 40927) & a;
  }
  const uo = 100;
  const bo = 3;
  const vo = 2304183;
  const mo = 2304183 .ΔⲆⵠⵠⵠⵠᐃ;
  const co = `const Ⲇᐃᐃⵠⵠⵠᐃ = (typeof ⵠΔΔᐃⲆⲆᐃⲆΔ === "${mo}") ? 1 : 0; return Ⲇᐃᐃⵠⵠⵠᐃ;`;
  const po = 1;
  function Co(b, c, d) {
    const e = b ^ 23323;
    const f = (2531011 + (61713 + c) * 214013) % 4294967296;
    const g = (d | 24198) & ~(d & 24198);
    const a = mn(e, f, g, e, f);
    const h = mn(g, e, f, g, e);
    mn(f, g, e, f, g);
    return (16 << ((a ^ h) >> 32 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 24 & 255)) + (32 << ((a ^ h) >> 16 & 255)) ^ 31181;
  }
  const To = 5;
  const fo = 13;
  const zo = 18;
  function yo(a, b, c, d) {
    Yj($f, a, b, c, d);
    const e = en(Vw[0], Vw[1], Vw[2], Vw[3], Vw[0], Vw[1]);
    (function (b, c, d, e, f) {
      Mj($f, b, c, d, e, f);
      const g = function (b, c, d, e, f, g) {
        Ci($f, b, c, d, e, f, g);
        const a = sx(Vw[0], Vw[1], Vw[2], Vw[3]);
        const h = nx(Vw[4], Vw[5]);
        return (18585 + (a ^ h)) % 65384;
      }(Vw[0], Vw[1], Vw[2], Vw[3], Vw[4], Vw[0]);
      const a = en(Vw[1], Vw[2], Vw[3], Vw[4], Vw[0], Vw[1]);
    })(Vw[2], Vw[3], Vw[0], Vw[1], Vw[2]);
    return e ^ 57362;
  }
  function wo(b, c, d, e, f, i) {
    const a = d ^ 8102;
    const j = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255));
    const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
    const h = (1 + (62237 + i) * 22695477) % 4294967296;
    const g = Qn((b + 52483) % 65496, (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
    const l = Qn(a, j);
    Qn(k, h);
    return (45290 + (g ^ l)) % 65334 ^ 55575;
  }
  const Po = 2;
  function ko(a, b, c, d) {
    di($f, a, b, c, d);
    const e = function (b, c, d, e) {
      dk($f, b, c, d, e);
      const f = Mf(Vw[0], Vw[1]);
      const g = $w(Vw[2], Vw[3], Vw[0]);
      return ((70 + (f ^ g)) * 16807 + 0) % 2147483647;
    }(Vw[0], Vw[1], Vw[2], Vw[3]);
    $w(Vw[0], Vw[1], Vw[2]);
    return ~(e & 6373) & 6373 | ~(e & 6373) & e;
  }
  const Ao = Tk;
  const xo = 15;
  function Jo(b, c, d, e) {
    const f = ~(b & 53333) & b | ~(b & 53333) & 53333;
    const g = ((19119 + c) * 22695477 + 1) % 4294967296;
    const a = (8 << (d & 255)) + (16 << (d >> 8 & 255)) + (0 << (d >> 24 & 255)) + (24 << (d >> 16 & 255));
    const h = yb(f, g, a, (e + 38810) % 65340, f);
    Xw(g, a);
    return (h | 8071) & ~(h & 8071);
  }
  const Mo = I;
  ᐃⵠⵠ = {
    ⲆⵠⲆⲆᐃᐃⵠ: () => new Promise((a, b) => {
      bj.grecaptcha.ready(function () {
        bj.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha"
        }).then(function (b) {
          a(b);
        }).catch(c => {
          if (If) {
            a(0);
          } else {
            console.log(undefined);
            b(c);
          }
        });
      });
    }),
    ⲆⵠᐃⲆⵠⵠⵠⵠΔ: function (a) {
      bj.open(a, "_blank").focus();
    },
    ΔⵠⵠᐃⵠⲆᐃ: function (a) {
      bj.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
    },
    ⵠⵠⵠⵠⵠⵠⵠ: function (a, b) {
      for (var c in a) {
        if (a[c] != b[c]) {
          return go;
        }
      }
      return true;
    },
    ⵠΔᐃⲆᐃⲆΔⵠᐃ: function (a, b) {
      if (a.length != b.length) {
        return Ge;
      }
      for (var c = 0; c < a.length; c++) {
        if (typeof a == "object") {
          if (!this.ⵠⵠⵠⵠⵠⵠⵠ(a[c], b[c])) {
            return false;
          }
        } else if (a[c] != b[c]) {
          return Ge;
        }
      }
      return true;
    },
    ΔⵠᐃⲆᐃΔΔ: function (a, b) {
      b.x = a.x;
      b.y = a.y;
    },
    ᐃᐃᐃⲆΔᐃⵠ: function (a, b) {
      return {
        x: a.x - b.x,
        y: a.y - b.y
      };
    },
    ⲆⲆⲆⵠⲆᐃⲆⲆⵠ: function (a, b) {
      a.x *= b;
      a.y *= b;
    },
    ⵠΔΔΔⵠⵠᐃ: function (a, b) {
      return a.x * b.x + a.y * b.y;
    },
    ⲆΔⵠᐃΔΔⵠ: function (a) {
      return Math.sqrt(a.x * a.x + a.y * a.y);
    },
    sign: function (a) {
      if (a < 0) {
        return -1;
      } else {
        return 1;
      }
    },
    ΔΔⵠΔⵠⲆΔ: function (a, b) {
      return a.x * b.y - a.y * b.x;
    },
    ⵠΔⲆⲆΔⲆΔ: function (b, c, d, e) {
      var f = e - c;
      var g = d - b;
      return Math.atan2(f, g);
    },
    ΔⵠΔⲆⲆΔΔ: function (a, b) {
      return Math.asin(this.ⵠΔΔΔⵠⵠᐃ(a, b) / (this.ⲆΔⵠᐃΔΔⵠ(a) * this.ⲆΔⵠᐃΔΔⵠ(b))) * this.sign(this.ΔΔⵠΔⵠⲆΔ(a, b));
    },
    ⲆΔΔΔᐃᐃⵠ: function (a) {
      ⵠᐃᐃⵠᐃΔⵠ = location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ⵠᐃᐃⵠᐃΔⵠ);
      if (b === null) {
        return null;
      } else {
        return b[1];
      }
    },
    ⵠΔᐃⲆΔΔᐃ: function (a, b) {
      var c = Math.PI * 2;
      b = (b % c + c) % c;
      if (Math.abs(a - b) > Math.PI) {
        if (a > b) {
          return b + c;
        } else {
          return b - c;
        }
      } else {
        return b;
      }
    },
    ΔⵠΔᐃⵠᐃᐃ: function (a, b) {
      return this.ΔⵠΔⲆⲆΔΔ({
        x: 1,
        y: 0
      }, this.ᐃᐃᐃⲆΔᐃⵠ(a, b));
    },
    ⲆⲆⲆΔ: function (a, b) {
      return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
    },
    ⲆᐃⵠⲆᐃᐃⵠ: function (a, b) {
      return {
        x: Math.sin(b) * a,
        y: Math.cos(b) * a
      };
    },
    ⵠᐃⲆᐃⵠΔⲆ: function (a, b) {
      a.x += b.x;
      a.y += b.y;
    },
    ⲆΔⵠΔⲆΔᐃ: function (a, b) {
      a.x -= b.x;
      a.y -= b.y;
    },
    ⲆⲆᐃⲆⲆᐃΔΔⵠ: function (a, b, c) {
      a.x += b;
      a.y += c;
    },
    ⲆⵠΔΔᐃΔΔᐃⵠ: function (a, b, c) {
      return {
        x: a.x + b,
        y: a.y + c
      };
    },
    ⲆⲆⵠᐃⵠ: function (a, b, c) {
      a.x += Math.sin(c) * b;
      a.y += Math.cos(c) * b;
    },
    ΔᐃⲆᐃᐃⲆⵠ: function (a, b) {
      return Math.floor((a - b) / 2);
    },
    ⲆΔⵠᐃⲆⵠΔ: function (a, b) {
      return {
        x: (a.x + b.x) / 2,
        y: (a.y + b.y) / 2
      };
    },
    ⲆΔᐃⵠⲆΔΔ: function () {
      if (Math.random() > 0.5) {
        return 1;
      } else {
        return -1;
      }
    },
    ⲆⲆΔᐃᐃΔⵠⵠⲆ: function (b, c, d) {
      var e = this.ⲆΔᐃⵠⲆΔΔ();
      var f = this.ⲆΔᐃⵠⲆΔΔ();
      var g = Math.random() * Math.PI / 2;
      return {
        x: Math.floor(b + Math.sin(g) * e * d),
        y: Math.floor(c + Math.cos(g) * f * d)
      };
    },
    ⲆⵠⲆⵠᐃⲆⲆⲆΔ: function (a, b, c, d) {
      this.x = a;
      this.y = b;
      this.w = c;
      this.Ⲇᐃⵠ = d;
    },
    ΔΔΔᐃⵠΔⵠᐃⵠ: function (a) {
      ΔΔⵠΔ = [];
      ΔΔⵠΔ.push.apply(ΔΔⵠΔ, a);
      var b = [];
      while (ΔΔⵠΔ.length > 0) {
        var c = Math.floor(Math.random() * ΔΔⵠΔ.length);
        b.push(ΔΔⵠΔ[c]);
        ΔΔⵠΔ.splice(c, 1);
      }
      return b;
    },
    ΔᐃⲆᐃΔⲆΔ: function (a) {
      if (a >= 20000) {
        a = (a - 20000) * 1000;
      } else if (a >= 10000) {
        a = (a - 10000) * 100;
      }
      return a;
    },
    ᐃΔⲆᐃᐃᐃΔ: function (b) {
      if (typeof b != "number") {
        return "0";
      }
      if (b >= 10000) {
        var c = Math.floor(Math.log10(b)) - 2;
        var d = Math.max(0, 3 - c);
        var e = Math.floor(b / 1000).toString();
        if (d) {
          for (var f = (e += "." + (b % 1000 / 1000).toString().substring(2).substring(0, d)).length - 1, g = 0; f > 0 && e[f] == "0"; f--) {
            g++;
          }
          if ((e = e.substring(0, e.length - g))[e.length - 1] == ".") {
            e = e.substring(0, e.length - 1);
          }
        }
        return e += "k";
      }
      return b.toString();
    },
    ΔΔᐃΔᐃΔᐃ: function (a) {
      return a * (2 - a);
    },
    ᐃΔⲆΔΔⵠΔ: function (a) {
      return --a * a * a + 1;
    },
    ΔⲆⲆᐃⲆ: function (a) {
      if (a < 0.5) {
        return a * 2 * a;
      } else {
        return (4 - a * 2) * a - 1;
      }
    },
    ⲆⵠᐃⵠⲆᐃΔ: function (a) {
      if (a < 0.5) {
        return a * 4 * a * a;
      } else {
        return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
      }
    },
    ⵠᐃⲆΔΔΔⲆΔⲆ: function (a) {
      if (a < 0.5) {
        return a * 8 * a * a * a;
      } else {
        return 1 - --a * 8 * a * a * a;
      }
    },
    ΔⲆⲆᐃⲆⲆⲆ: function (a) {
      return 1 - --a * a * a * a;
    },
    ⵠⲆⲆⵠⲆⵠΔ: function (a) {
      return 1 + --a * a * a * a * a;
    },
    ⲆⲆⲆᐃ: function (b, c, d, e, f, g) {
      this.ⲆⲆⵠ = b;
      this.ᐃⵠⲆ = c;
      this.max = d;
      this.min = e;
      this.ᐃΔΔΔⵠⲆΔ = f;
      this.ⵠⲆⲆΔⲆⲆⵠ = g;
      this.ⵠⵠᐃⲆΔ = 0;
      this.ⲆΔᐃ = function () {
        if (this.ⲆⲆⵠ) {
          if ((a = this.ᐃⵠⲆ + Ox * this.ᐃΔΔΔⵠⲆΔ) > this.max) {
            this.ᐃⵠⲆ = this.max;
            this.ⲆⲆⵠ = I;
            return true;
          }
          this.ᐃⵠⲆ = a;
        } else {
          var a;
          if ((a = this.ᐃⵠⲆ - Ox * this.ⵠⲆⲆΔⲆⲆⵠ) < this.min) {
            this.ᐃⵠⲆ = this.min;
            this.ⲆⲆⵠ = Tj;
          } else {
            this.ᐃⵠⲆ = a;
          }
        }
      };
      return false;
    },
    ⵠΔΔⲆⲆ: function (b, c, d, e, f, g) {
      this.ⵠⵠⲆᐃᐃ = b;
      this.ⵠᐃⲆΔᐃ = c;
      this.ΔΔΔᐃⲆ = d;
      this.ᐃΔΔᐃΔ = e;
      this.x = f;
      this.ⵠⵠΔᐃᐃ = g;
      this.ᐃⲆⲆⲆΔⲆᐃ = function () {
        this.x = this.ⲆⲆⲆΔⵠᐃⲆⵠᐃ;
        this.ⵠᐃⲆΔᐃ = 0;
      };
      this.ⲆᐃⲆⲆⵠ = function (a) {
        if (a !== this.ⵠⵠΔᐃᐃ) {
          this.ⵠⵠΔᐃᐃ = a;
          this.ᐃΔΔᐃΔ = this.x;
          this.ⵠᐃⲆΔᐃ = 0;
        }
        if (this.ⵠⵠΔᐃᐃ !== this.x) {
          this.ⵠᐃⲆΔᐃ += Ox;
          if (this.ⵠᐃⲆΔᐃ > this.ΔΔΔᐃⲆ) {
            this.x = this.ⵠⵠΔᐃᐃ;
          } else {
            var b = this.ⵠⵠⲆᐃᐃ(this.ⵠᐃⲆΔᐃ / this.ΔΔΔᐃⲆ);
            this.x = this.ᐃΔΔᐃΔ + (this.ⵠⵠΔᐃᐃ - this.ᐃΔΔᐃΔ) * b;
          }
        }
      };
    },
    ᐃⲆⲆⲆⵠⵠⲆ: function (b, c, d, e, f, g, a, i, j) {
      this.ⵠⵠⲆᐃᐃ = b;
      this.ⵠᐃⲆΔᐃ = c;
      this.ΔΔΔᐃⲆ = d;
      this.ᐃΔΔᐃΔ = e;
      this.ᐃⲆⵠⲆΔ = f;
      this.x = g;
      this.y = a;
      this.ⵠⵠΔᐃᐃ = i;
      this.ⲆᐃᐃⵠᐃΔⵠ = j;
      this.ⲆᐃⲆⲆⵠ = function (a) {
        if (a.x != this.ⵠⵠΔᐃᐃ || a.y != this.ⲆᐃᐃⵠᐃΔⵠ) {
          this.ⵠⵠΔᐃᐃ = a.x;
          this.ⲆᐃᐃⵠᐃΔⵠ = a.y;
          this.ᐃΔΔᐃΔ = this.x;
          this.ᐃⲆⵠⲆΔ = this.y;
          this.ⵠᐃⲆΔᐃ = 0;
        }
        if (this.ⵠⵠΔᐃᐃ != this.x || this.ⲆᐃᐃⵠᐃΔⵠ != this.y) {
          this.ⵠᐃⲆΔᐃ += Ox;
          if (this.ⵠᐃⲆΔᐃ > this.ΔΔΔᐃⲆ) {
            this.x = this.ⵠⵠΔᐃᐃ;
            this.y = this.ⲆᐃᐃⵠᐃΔⵠ;
          } else {
            var b = this.ⵠⵠⲆᐃᐃ(this.ⵠᐃⲆΔᐃ / this.ΔΔΔᐃⲆ);
            this.x = this.ᐃΔΔᐃΔ + (this.ⵠⵠΔᐃᐃ - this.ᐃΔΔᐃΔ) * b;
            this.y = this.ᐃⲆⵠⲆΔ + (this.ⲆᐃᐃⵠᐃΔⵠ - this.ᐃⲆⵠⲆΔ) * b;
          }
        }
      };
    },
    ΔΔᐃⵠⲆⵠⵠ: function (a) {
      var b = "";
      for (var c = 0; c < a; c++) {
        b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
      }
      return b;
    },
    ⲆⲆΔⲆΔⲆⵠ: function (a, b) {
      b ||= location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
      if (c == null) {
        return null;
      } else {
        return c[1];
      }
    },
    ⲆⵠⲆⲆᐃ: function (a) {
      let b = "";
      const c = a.length;
      for (let d = 0; d < c; d++) {
        b += String.fromCharCode(a[d]);
      }
      return b;
    },
    ⲆᐃⵠᐃⲆᐃᐃ: function (a, b) {
      return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.Ⲇᐃⵠ || Mo;
    },
    ⵠⲆⵠⵠΔΔᐃ: function (b, c, d, e, f, g, a, h) {
      if (Math.max(b, f) < Math.min(c, g) && Math.max(d, a) < Math.min(e, h)) {
        return 1;
      } else {
        return 0;
      }
    },
    ⲆⵠᐃΔⲆ: function (a, b, c) {
      return (1 - c) * a + c * b;
    },
    ΔⵠᐃΔⲆⵠᐃ: function (a) {
      return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  };
  const Bo = Lk;
  Math.sign = Math.sign || function (a) {
    if (a === 0) {
      return 0;
    } else if (a > 0) {
      return 1;
    } else {
      return -1;
    }
  };
  const Eo = 10;
  Math.log10 = Math.log10 || function (a) {
    return Math.log(a) / Math.ⵠⵠᐃΔⵠᐃⵠᐃⵠ;
  };
  (function (a) {
    var b = bn;
    if (typeof ⲆᐃⵠⲆΔᐃΔ == "function" && ⲆᐃⵠⲆΔᐃΔ.ΔⵠΔᐃⵠΔⲆᐃΔ) {
      ⲆᐃⵠⲆΔᐃΔ(a);
      b = true;
    }
    if (typeof ᐃᐃⲆᐃᐃⵠⵠ === "object") {
      ⵠⲆΔⲆⵠΔΔⵠᐃ.exports = a();
      b = true;
    }
    if (!b) {
      var c = bj.ᐃⲆᐃΔ;
      var d = bj.ᐃⲆᐃΔ = a();
      d.ΔⵠΔⵠᐃᐃΔⵠᐃ = function () {
        bj.ᐃⲆᐃΔ = c;
        return d;
      };
    }
  })(function () {
    function b() {
      for (var a = 0, b = {}; a < arguments.length; a++) {
        var c = arguments[a];
        for (var d in c) {
          b[d] = c[d];
        }
      }
      return b;
    }
    return function a(c) {
      function d(e, f, j) {
        var k;
        if (typeof document != "undefined") {
          if (arguments.length > 1) {
            if (typeof (j = b({
              path: "/"
            }, d.ΔΔᐃΔᐃⵠⲆ, j)).expires == "number") {
              var m = new Date();
              m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
              j.expires = m;
            }
            try {
              k = JSON.stringify(f);
              if (/^[\{\[]/.test(k)) {
                f = k;
              }
            } catch (a) { }
            f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
            return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ᐃⵠⲆΔⲆⲆᐃⲆΔ ? "; secure" : ""].join("");
          }
          if (!e) {
            k = {};
          }
          for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, g = 0; n.length > g; g++) {
            var p = n[g].split("=");
            var q = p.slice(1).join("=");
            if (q.charAt(0) === "\"") {
              q = q.slice(1, -1);
            }
            try {
              var s = p[0].replace(h, decodeURIComponent);
              q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
              if (this.json) {
                try {
                  q = JSON.parse(q);
                } catch (a) { }
              }
              if (e === s) {
                k = q;
                break;
              }
              if (!e) {
                k[s] = q;
              }
            } catch (a) { }
          }
          return k;
        }
      }
      d.set = d;
      d.get = function (a) {
        return d.call(d, a);
      };
      d.ᐃⲆⲆⵠΔⲆᐃⲆᐃ = function () {
        return d.apply({
          json: qk
        }, [].slice.call(arguments));
      };
      d.ΔΔᐃΔᐃⵠⲆ = {};
      d.remove = function (a, c) {
        d(a, "", b(c, {
          expires: -1
        }));
      };
      d.Δⵠⵠⵠⵠⵠᐃᐃⵠ = a;
      return d;
    }(function () { });
  });
  const Do = 255;
  const Io = 6;
  const So = 10;
  const Qo = 19;
  function _o(b, c, d) {
    const e = b ^ 6329;
    const f = ~(c & 23002) & c | ~(c & 23002) & 23002;
    const g = d ^ 16119;
    const a = pb(e, f);
    (function (b, c, d) {
      const e = ~(b & 58327) & b | ~(b & 58327) & 58327;
      const f = (24 << (c >> 8 & 255)) + (16 << (c >> 16 & 255)) + (8 << (c >> 24 & 255)) + (0 << (c & 255));
      const g = d ^ 35574;
      const a = Mk(e, f, g);
      const h = function (b, c, d, e) {
        const f = ~(b & 34047) & b | ~(b & 34047) & 34047;
        const i = (24 << (c & 255)) + (0 << (c >> 8 & 255)) + (16 << (c >> 24 & 255)) + (8 << (c >> 16 & 255));
        const a = (d | 60265) & ~(d & 60265);
        const j = ((e + 23840) * 2147483629 + 2147483587) % 2147483647;
        const k = Jo(f, i, a, j);
        const h = Pf(f, i, a, j);
        return (16 << ((k ^ h) >> 8 & 255)) + (0 << ((k ^ h) >> 16 & 255)) + (8 << ((k ^ h) & 255)) + (24 << ((k ^ h) >> 24 & 255));
      }(e, f, g, e);
    })(g, e, f);
    return (a | 50446) & ~(a & 50446);
  }
  const Fo = 0;
  const Ro = Ne;
  const jo = 12;
  const Lo = 15;
  const Wo = 20;
  const Go = 5;
  const No = 8;
  const qo = 16;
  const Oo = 9;
  var Ho = document.getElementById("game_canvas");
  var Uo = Ho.getContext("2d");
  var Yo = Ho.width;
  var jq = Ho.height;
  var kq = Ho.width / 2;
  const lq = 8;
  var Zo = Ho.height / 2;
  var mq = {
    x: kq,
    y: Zo
  };
  const nq = Tj;
  var ia = 1;
  const oq = 17;
  const na = 3;
  var oa = 1;
  const pq = 5;
  var ra = -1;
  const qq = 7;
  const ha = 7638980;
  const la = 7638980 .ΔⲆΔᐃᐃⲆⲆⲆⵠ;
  const ua = `const ᐃⵠⵠΔΔᐃΔΔⲆ = (typeof ᐃᐃΔΔⲆᐃⵠ === "${la}") ? 1 : 0; return ᐃⵠⵠΔΔᐃΔΔⲆ;`;
  var ba = "J" + Kq;
  var rq = "S" + er;
  const sq = 20;
  const ma = Lk;
  const ca = 11;
  var pa;
  var tq = bj;
  const Ta = 255;
  var fa;
  var uq = (Ja = "O") + "N";
  const vq = 14;
  var wa;
  var wq = tq;
  rq = "N";
  var ka = "J";
  const xq = 4;
  const xa = 13;
  var Ja = "O" + Kq;
  const yq = 18;
  const Ba = 100;
  const Ea = 15;
  var Da = bj.Math.acos;
  bj.Math.acos = bj.Math.asin;
  bj.Math.asin = Da;
  var Ia = bj.Math.cos;
  bj.Math.cos = bj.Math.sin;
  bj.Math.sin = Ia;
  var Sa = wq;
  const Qa = ma;
  const _a = 17;
  const Fa = N;
  const Ra = Ne;
  var ja;
  const zq = 10;
  const Wa = 13;
  const Ga = 5;
  const Na = 16;
  const qa = 12;
  const Oa = 18;
  const Ha = 20;
  const Ua = 11;
  const Ya = 17;
  const Ka = 0;
  const Va = Tj;
  var Xa = Sa;
  const Za = 4;
  uq = "N" + undefined;
  const $a = 1;
  const Aq = 9;
  var Bq = Xa;
  const Cq = 17;
  var Dq;
  const Eq = 100;
  const Fq = 16;
  const Gq = 8;
  const Hq = 19;
  var Iq;
  var Jq;
  var Kq;
  var Lq = Bq;
  var Mq = Lq;
  const Nq = N;
  const Oq = 2;
  var Pq;
  const Qq = 3;
  const Rq = 12;
  const Sq = I;
  const Tq = 15;
  var Uq = Mq;
  ka = "O";
  const Vq = 6;
  var Wq;
  var Xq = Uq = Mq;
  const Yq = 0;
  const Zq = 256;
  const $q = 10;
  const _q = 18;
  const ar = 11;
  var br;
  var dr = Xq;
  var er = "J" + (Wq = "S");
  const fr = 14;
  Ho.oncontextmenu = function () {
    return Ge;
  };
  const hr = 8;
  const ir = ma;
  const kr = 255;
  ba = "J";
  const mr = 7;
  const nr = 17;
  function pr(a) {
    var b = new Image();
    b.src = a.toDataURL("image/png");
    b.width = a.width;
    b.height = a.height;
    b.ⵠⵠΔⵠᐃᐃΔ = 1;
    return b;
  }
  const rr = qk;
  const sr = 1;
  const tr = Qa;
  const vr = 16;
  Ja = uq;
  const xr = 20;
  wa = pa = fa = er + (ka += ba = rq);
  const qr = 2172930;
  const yr = 2172930 .ⵠΔⵠΔⲆⲆᐃⲆⵠ;
  const Ar = `const ᐃⵠⲆⵠⵠⵠΔ = (typeof ⵠᐃⵠΔΔⲆᐃ === "${yr}") ? 1 : 0; return ᐃⵠⲆⵠⵠⵠΔ;`;
  uq = Kq;
  const Cr = 12;
  Kq = er;
  Dq = er + ka;
  const Dr = 0;
  Kq = er;
  Ja = er;
  function Er(a) {
    return bj.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ᐃⲆΔᐃⵠⵠΔ: 15003420,
      ᐃΔⲆⵠΔⵠΔᐃⵠ: 4555091,
      ΔⲆᐃᐃᐃⲆᐃᐃⵠ: 10830329,
      ΔΔᐃⵠⲆⵠⲆΔⵠ: 4233407
    };
  })();
  const Fr = 2;
  ja = Dq;
  rq = ka + ba;
  const Gr = 4;
  const Hr = 13;
  const Ir = 100;
  const Jr = 0;
  Iq = pa;
  const Kr = N;
  const Lr = 9;
  const Mr = 0;
  Ja = er + ka;
  Jq = fa;
  const Nr = 11;
  const Or = 19;
  const Pr = 5;
  uq = er + ka;
  Pq = wa;
  ka = Kq;
  Wq = fa;
  const Qr = 5;
  const Rr = 1;
  const Sr = 15;
  const Tr = 17;
  const Ur = 256;
  br = pa;
  ba = Ja;
  var Vr = bj.devicePixelRatio || 1;
  const Wr = 5250185;
  const Xr = 5250185 .ⲆΔΔΔⲆᐃⵠⵠⵠ;
  const Yr = `const ᐃⲆⵠΔΔⵠᐃ = (typeof ⲆⲆΔᐃᐃⲆⲆᐃΔ === "${Xr}") ? 1 : 0; return ᐃⲆⵠΔΔⵠᐃ;`;
  var Zr = Uo.ᐃⲆⲆⵠⲆᐃⵠᐃⵠ || Uo.ⵠΔᐃΔΔᐃΔᐃΔ || Uo.ᐃⵠⲆⲆⵠⲆΔⵠΔ || Uo.ⲆΔⵠΔⵠᐃΔⵠΔ || Uo.ⲆᐃⵠΔⵠΔⲆⲆⵠ || 1;
  const $r = 6;
  function _r() {
    if (bj.innerWidth != Ho.width) {
      Ho.width = bj.innerWidth;
      Yo = Ho.width;
      kq = Ho.width / 2;
    }
    if (Ho.height != bj.innerHeight) {
      Ho.height = bj.innerHeight;
      jq = Ho.height;
      Zo = Ho.height / 2;
    }
    mq = {
      x: kq,
      y: Zo
    };
    var a = Ho.width;
    var b = Ho.height;
    oa = ra === -1 ? Vr / Zr : ra;
    Ho.width = oa * a;
    Ho.height = oa * b;
    Ho.style.width = a + "px";
    Ho.style.height = b + "px";
    Uo.scale(oa, oa);
    if (Hx) {
      Hx.ΔΔⲆ.ΔᐃⵠΔⲆΔⲆ = a;
      Hx.ΔΔⲆ.ⵠⵠⲆΔⲆᐃΔ = b;
    }
    if (Qx.ⵠⲆΔᐃΔ) {
      Qx.ⲆΔᐃ();
    } else if (Fx.ⵠⲆΔᐃΔ) {
      Fx.ⲆΔᐃ();
    } else if (Kx.ⵠⲆΔᐃΔ) {
      Kx.ⲆΔᐃ();
    } else if (Ix.ⵠⲆΔᐃΔ) {
      Ix.ⲆΔᐃ();
    }
  }
  const as = 4;
  var bs = document.getElementById("game_body");
  const cs = Ge;
  bs.ondragstart = function () {
    return false;
  };
  bs.ondrop = function () {
    return Mo;
  };
  bs.onresize = _r;
  (function () {
    var a = 0;
    for (var b = ["ms", "moz", "webkit", "o"], c = 0; c < b.length && !bj.requestAnimationFrame; ++c) {
      bj.requestAnimationFrame = bj[b[c] + "RequestAnimationFrame"];
      bj.cancelAnimationFrame = bj[b[c] + "CancelAnimationFrame"] || bj[b[c] + "CancelRequestAnimationFrame"];
    }
    if (!bj.requestAnimationFrame) {
      bj.requestAnimationFrame = function (b, c) {
        var d = new Date().getTime();
        var e = Math.max(0, 16 - (d - a));
        var f = bj.setTimeout(function () {
          b(d + e);
        }, e);
        a = d + e;
        return f;
      };
    }
    bj.cancelAnimationFrame ||= function (a) {
      clearTimeout(a);
    };
  })();
  const ds = 16;
  const es = 0;
  const fs = 20;
  const gs = 1;
  function hs(a, b, c, d, e) {
    qi($f, a, b, c, d, e);
    return ((94 + (zp(Vw[0], Vw[1], Vw[2]) ^ function (b, c, d, e) {
      lk($f, b, c, d, e);
      const f = vf(Vw[0], Vw[1], Vw[2], Vw[3], Vw[0]);
      const g = vf(Vw[1], Vw[2], Vw[3], Vw[0], Vw[1]);
      return (8 << ((f ^ g) >> 8 & 255)) + (16 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (0 << ((f ^ g) & 255));
    }(Vw[3], Vw[4], Vw[0], Vw[1]))) * 48271 + 0) % 2147483647;
  }
  const is = 14;
  function ks(b, c, d) {
    const e = (16 << (b & 255)) + (8 << (b >> 8 & 255)) + (0 << (b >> 16 & 255)) + (24 << (b >> 24 & 255));
    const f = (1 + (16168 + c) * 22695477) % 4294967296;
    const g = d ^ 56656;
    const a = function (a, b) {
      const c = ((a + 51704) * 2147483629 + 2147483587) % 2147483647;
      const d = (8 << (b >> 8 & 255)) + (16 << (b >> 24 & 255)) + (24 << (b >> 16 & 255)) + (0 << (b >> 0 & 255));
      const e = Eb(c, d, c, d, c);
      Eb(d, c, d, c, d);
      return ~(e & 12992) & (e | 12992);
    }(e, f);
    const h = Ok(g, e, f, g, e);
    return (8 << ((a ^ h) >> 24 & 255)) + (0 << ((a ^ h) & 255)) + (24 << ((a ^ h) >> 16 & 255)) + (16 << ((a ^ h) >> 8 & 255));
  }
  const ms = 256;
  const ns = 20;
  var os = navigator.language || navigator.userLanguage;
  const ps = 256;
  var rs = -new Date().getTimezoneOffset() / 60;
  var ss = "Europe";
  const ts = 3;
  var us = "South America";
  const vs = rr;
  const js = 19;
  const ws = 100;
  const xs = 15;
  const ys = 17;
  var zs = ss;
  if (rs >= -2 && rs <= 2) {
    zs = ss;
  } else if (rs > 2 && rs <= 5) {
    zs = "Russia";
  } else if (rs > 5 && rs <= 9) {
    zs = "Asia";
  } else if (rs > 9) {
    zs = "Australia";
  } else if (rs >= -5 && rs < -2) {
    zs = os === "pt-BR" || os === "pt-br" || os === "pt" || os === "pt-pt" ? us : "North America";
  } else if (rs < -5) {
    zs = os === "pt-BR" || os === "pt-br" || os === "pt" || os === "pt-pt" ? us : "West America";
  }
  var aq = {
    ΔΔΔⵠᐃⲆⵠ: function (a) {
      var b = 2147483648;
      var c = a || Math.floor(Math.random() * (b - 1));
      this.ⲆⵠΔⵠⲆ = function (a) {
        c = a || Math.floor(Math.random() * (b - 1));
      };
      this.get = function () {
        return (c = (c * 1103515245 + 12345) % b) / b;
      };
    }
  };
  const As = 255;
  const Bs = 10;
  const Cs = 100;
  const Ds = 18;
  const Es = Ne;
  const Fs = 16;
  const Gs = 11;
  function Hs(b, c, d) {
    const e = ((b + 27879) * 214013 + 2531011) % 4294967296;
    const f = (8 << (c >> 0 & 255)) + (16 << (c >> 24 & 255)) + (24 << (c >> 16 & 255)) + (0 << (c >> 8 & 255));
    const g = ((d + 51786) * 214013 + 2531011) % 4294967296;
    return ((33491 + (Pf(e, f, g, e) ^ function (b, c, d, e, f) {
      const i = (1013904223 + (8425 + d) * 1664525) % 4294967296;
      const a = ~(e & 60716) & (e | 60716);
      const j = f ^ 51459;
      const k = Ax(~(b & 45291) & (b | 45291), (8 << (c & 255)) + (16 << (c >> 24 & 255)) + (0 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)));
      const h = mb(i, a, j);
      return (24 << ((k ^ h) >> 8 & 255)) + (8 << ((k ^ h) & 255)) + (0 << ((k ^ h) >> 16 & 255)) + (16 << ((k ^ h) >> 24 & 255));
    }(f, g, e, f, g))) * 1664525 + 1013904223) % 4294967296;
  }
  const Js = 13;
  const Ks = go;
  const eh = 7;
  var ih = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
  const th = Tn;
  var nh = 0;
  const Ls = 2;
  const ah = 4;
  const rh = 12;
  let sh = {
    ⲆⲆᐃⲆⵠ: ["#133A2B", "#042b30"],
    ⵠⲆⲆᐃΔᐃΔΔΔ: ["#EBF2F0", "#136167"],
    ⵠᐃᐃᐃⵠⵠᐃ: ["#4EB687", "#187484"],
    ᐃⵠⲆⲆᐃᐃⲆ: ["#664516", "#13474C"],
    ΔⵠᐃᐃⲆⲆΔ: ["#FCEFBB", "#0F4D48"],
    ᐃⲆᐃᐃᐃⵠᐃ: ["#C1AA7E", "#0F423D"],
    ᐃⵠⲆⲆΔΔᐃ: ["#594837", "#163A3A"],
    ⲆⲆⵠⲆⲆⵠⲆ: ["#A5D6D6", "#539CA0"],
    ΔΔⵠᐃⲆ: ["#0B6A84", "#09373F"],
    ᐃΔᐃⲆⲆⵠⲆ: ["#2A8B9B", "#0F464C"],
    ⲆΔⵠΔⲆⵠΔ: ["#A9D6D3", "#115E60"],
    ᐃΔⵠⲆⵠᐃᐃ: ["#ECF7F9", "#539CA0"],
    ⲆᐃΔⲆΔⲆⵠ: ["#FFF", "#FFF"],
    ⵠΔᐃΔᐃᐃᐃ: ["#FFF", "#FFF"],
    ᐃⵠᐃⲆᐃΔᐃ: ["#1C9BA4", "#00272F"],
    ⲆⲆⲆⲆΔ: ["#2D2017", "#031C1E"],
    ⲆⲆΔ: 0,
    ⲆⵠⲆ: 1,
    ΔΔⲆᐃᐃᐃΔⲆΔ: 2300,
    ⲆⲆΔᐃⲆⲆⲆⵠⵠ: 2290,
    ΔⵠΔⲆⲆⵠⲆ: 34,
    ⵠⵠⲆᐃΔᐃΔ: 5,
    ⲆⵠᐃⲆΔΔᐃ: 68,
    ⲆⲆᐃⲆᐃⲆᐃ: 34,
    ⵠᐃᐃⵠᐃⵠⵠ: 5,
    ᐃⲆⵠⵠⵠΔΔ: 1,
    ΔᐃᐃᐃⲆᐃⲆ: 0.6,
    ⲆΔΔⲆΔᐃᐃ: 0.25,
    ⵠΔⵠⲆᐃᐃⵠ: 50,
    ⲆⵠᐃⵠⲆΔⵠ: 10,
    ⵠⵠᐃΔⵠⵠⵠ: 75,
    ᐃⵠΔᐃⲆΔΔ: 20,
    ⲆᐃⵠᐃᐃⲆᐃ: 5,
    ΔᐃⲆΔΔ: 0,
    ⲆᐃΔΔⲆ: 1,
    ⵠⵠⲆᐃⲆ: 2,
    ⲆⲆΔⲆᐃ: 3,
    ΔΔⵠᐃⵠ: 4,
    ᐃⲆᐃᐃᐃ: 5,
    ᐃⲆⵠᐃΔ: 6,
    ᐃⲆΔᐃΔ: 7,
    ᐃⵠᐃΔⲆ: 8,
    ⵠᐃⵠᐃΔ: 9,
    ⵠᐃⲆΔⵠ: 10,
    ᐃᐃΔᐃΔ: 11,
    ⲆΔΔᐃᐃ: 12,
    ᐃΔⵠⵠⲆ: 13,
    ᐃΔⵠΔΔ: 14,
    ⲆΔᐃⵠΔ: 15,
    ⵠᐃᐃⲆⵠ: 16,
    ⵠⲆΔⵠⲆ: 17,
    ᐃᐃⵠⵠᐃ: 18,
    ᐃᐃⵠᐃⲆ: 19,
    ⵠΔⲆⲆⵠ: 20,
    ⲆΔⲆⲆΔ: 21,
    ⵠⲆΔⲆⵠ: 22,
    ᐃⲆⵠⵠⲆ: 23,
    ΔⲆᐃⲆⵠ: 24,
    ⵠⲆⵠⲆⲆ: 25,
    ⵠΔⲆΔᐃ: 26,
    Δᐃⵠᐃᐃ: 27,
    ⵠΔⲆᐃⲆ: 28,
    ⵠᐃᐃⲆ: 29,
    ΔᐃⵠΔⵠ: 30,
    ΔᐃΔᐃᐃ: 31,
    ΔΔΔᐃΔ: 32,
    ⵠⵠⵠΔΔ: 33,
    ᐃᐃⵠᐃⵠ: 34,
    Ⲇᐃᐃᐃⵠ: 35,
    ᐃⲆᐃⲆᐃ: 36,
    ⲆⲆΔⲆⵠ: 37,
    ΔΔᐃΔⵠ: 38,
    ⵠᐃⵠΔⲆ: 39,
    ΔᐃⵠⵠⲆ: 40,
    ΔⲆⵠⲆⵠ: 41,
    ᐃΔⲆᐃΔ: 42,
    ΔⵠⵠⲆⵠ: 43,
    ⲆⵠᐃⲆᐃ: 44,
    ᐃᐃΔⵠΔ: 45,
    ᐃⵠᐃᐃⲆ: 46,
    ΔⵠΔᐃᐃ: 47,
    ⵠⵠᐃⵠⵠ: 48,
    ⲆⲆⵠΔⵠ: 49,
    ᐃΔᐃⵠⲆ: 50,
    ⵠᐃΔⲆᐃ: 51,
    ᐃᐃⵠⲆⵠ: 52,
    ᐃⵠΔⵠⵠ: 53,
    ᐃⵠⲆⵠⲆ: 54,
    ⵠⵠⲆⵠⲆ: 55,
    ⵠⲆⵠⲆⵠ: 56,
    ⵠᐃᐃⲆⲆ: 57,
    ⵠⵠⵠᐃᐃ: 58,
    ΔⵠⲆⵠΔ: 59,
    ΔᐃⲆᐃⲆ: 60,
    ⵠⲆⵠΔΔ: 61,
    ⲆⲆΔⲆⲆ: 62,
    ΔⲆΔᐃⵠ: 63,
    ΔᐃᐃⵠⲆ: 64,
    ⲆΔⲆᐃⲆ: 65,
    ΔᐃᐃⲆᐃ: 66,
    ᐃᐃⵠΔΔ: 67,
    ⲆⲆᐃⲆΔ: 68,
    ᐃⵠᐃΔⵠ: 69,
    ᐃⲆᐃᐃΔ: 70,
    ⲆⵠⲆⲆⵠ: 71,
    ᐃⲆⲆᐃᐃ: 72,
    ⵠⲆⵠΔᐃ: 73,
    ⵠᐃⵠⵠᐃ: 74,
    ⵠᐃΔⵠⲆ: 75,
    ΔⵠⵠᐃⲆ: 76,
    ⲆⲆⲆΔᐃ: 77,
    ΔᐃΔΔᐃ: 78,
    ΔᐃΔⵠⲆ: 79,
    ⲆⵠᐃΔᐃ: 80,
    ΔⲆⵠⲆΔ: 81,
    ⵠⲆⵠⲆΔ: 82,
    ⲆⲆⲆⵠΔ: 83,
    ᐃᐃⲆⲆⲆ: 84,
    ᐃⲆⵠΔΔ: 85,
    ᐃⵠⵠΔⲆ: 86,
    ΔᐃⵠⲆⵠ: 87,
    ᐃⵠΔⲆⵠ: 88,
    ᐃᐃᐃⵠⵠ: 89,
    ⵠⵠᐃᐃᐃ: 90,
    ΔΔⵠΔΔ: 91,
    ⲆᐃⲆᐃΔ: 92,
    ᐃΔⲆΔⲆ: 93,
    ΔΔΔⵠᐃ: 94,
    ⵠⲆⵠⵠⵠ: 95,
    ⵠᐃⲆⲆⲆ: 96,
    ᐃⲆⲆᐃΔ: 97,
    ⵠΔΔΔᐃ: 98,
    ᐃᐃⲆᐃⵠ: 99,
    ⵠⲆⲆⵠᐃᐃΔᐃΔ: 100,
    ᐃΔⵠⵠᐃ: 101,
    ⵠᐃᐃⲆΔ: 102,
    ᐃΔᐃⲆⲆ: 103,
    ᐃᐃᐃⲆⵠ: 104,
    ΔΔᐃᐃᐃ: 105,
    ⵠΔᐃᐃⲆ: 106,
    ᐃⵠᐃⵠΔ: 107,
    Δⵠᐃᐃⵠ: 108,
    ⵠᐃᐃⵠ: 109,
    ⲆΔᐃᐃⵠ: 110,
    ᐃΔⲆΔ: 111,
    ⲆⵠᐃΔ: 112,
    ΔⲆΔΔⵠΔᐃ: 113,
    ᐃⲆⵠᐃⵠ: 114,
    ⲆⵠⲆⵠⲆⲆⵠ: 115,
    ΔⵠᐃΔⵠ: 116,
    ⵠΔⲆᐃᐃ: 117,
    ΔᐃⲆⵠⵠᐃᐃ: 118,
    ⵠᐃⲆᐃⲆᐃⲆ: 119,
    ΔΔᐃⵠⵠ: 120,
    ΔⵠᐃⲆ: 121,
    ΔⵠᐃⲆᐃ: 122,
    ⵠΔⵠⲆᐃ: 123,
    ᐃⲆⵠΔⲆᐃⵠ: 124,
    ⲆⲆⵠⲆⲆ: 125,
    ⲆΔⲆⲆⵠ: 126,
    ⲆⵠⵠΔΔ: 127,
    ⵠⵠⵠΔⵠ: 128,
    ᐃⲆΔⲆΔ: 129,
    ⲆⲆⲆᐃⵠ: 130,
    ᐃΔⲆⵠᐃ: 131,
    ΔⵠΔΔⲆ: 132,
    ΔⵠⲆⵠⲆ: 133,
    ⵠᐃᐃⵠⲆ: 134,
    ⲆⵠᐃⲆⵠ: 135,
    Ⲇⵠᐃᐃᐃ: 136,
    ⵠᐃΔᐃⵠ: 137,
    ⲆΔⵠΔΔ: 138,
    ⵠⵠΔΔⵠ: 139,
    ⲆᐃᐃΔᐃⲆᐃ: 140,
    ᐃⵠΔⲆΔ: 141,
    ⵠⵠⵠᐃⲆⲆⵠ: 142,
    ⵠⵠᐃᐃⲆᐃᐃ: 143,
    ΔⵠΔΔⵠΔΔ: 144,
    ⲆⲆᐃΔΔⲆΔ: 145,
    ᐃΔΔΔΔ: 146,
    ⵠⵠⲆⲆⲆ: 147,
    ⵠⲆⵠⵠⲆ: 148,
    ᐃᐃΔⵠⵠ: 149,
    Δⵠⵠᐃᐃ: 150,
    ⵠⵠΔⵠΔ: 151,
    ΔⲆΔΔΔ: 152,
    ⲆΔⵠᐃⵠ: 153,
    Ⲇᐃᐃᐃᐃ: 154,
    ΔⲆΔⵠΔ: 155,
    ᐃⲆᐃΔᐃ: 156,
    ⲆΔⲆⲆⲆ: 157,
    ᐃⲆⲆⲆⲆ: 158,
    ⵠⲆᐃᐃΔ: 159,
    ᐃⲆᐃᐃⵠ: 160,
    ⲆⲆΔⵠⵠ: 161,
    ΔΔΔⵠΔ: 162,
    ΔⲆⲆΔⲆ: 163,
    ⲆⵠⵠΔᐃ: 164,
    ⵠⲆⲆᐃᐃ: 165,
    ⲆⲆⲆΔⵠⲆᐃ: 166,
    ⲆᐃΔᐃΔ: 167,
    ᐃᐃᐃⵠΔ: 168,
    ΔΔΔΔᐃ: 169,
    ΔⲆΔᐃΔ: 170,
    ΔⲆΔⵠⵠΔΔ: 171,
    ⲆⵠⵠⵠΔⵠⲆ: 172,
    ΔΔΔᐃΔΔΔ: 173,
    ⲆⲆᐃᐃⵠ: 174,
    ΔᐃⲆᐃᐃΔΔ: 175,
    ΔΔᐃⲆΔⲆΔ: 176,
    ⵠᐃⵠⲆΔΔⲆ: 177,
    ⲆⵠⲆⲆⲆΔⵠ: 178,
    ᐃΔⲆⵠⵠᐃᐃ: 179,
    ⵠⵠⲆᐃⲆⵠΔ: 180,
    ⲆⵠΔⲆΔΔⵠ: 181,
    ⵠΔΔⲆⵠⵠⵠ: 182,
    ⵠᐃⲆᐃᐃ: 183,
    ᐃΔⵠⲆᐃ: 184,
    ΔᐃⲆⵠⲆ: 185,
    ⵠⲆⲆᐃⵠ: 186,
    ⵠⲆⲆⲆᐃ: 187,
    ⲆⲆΔⵠⵠⲆⵠ: 188,
    ⵠⲆⵠⵠΔ: 189,
    ⵠᐃΔΔⵠ: 190,
    ᐃⵠⵠΔⲆⵠᐃ: 191,
    ΔᐃⲆⵠⵠ: 192,
    ⲆΔΔΔⵠⵠⲆ: 193,
    ⵠΔᐃⲆⵠ: 194,
    ⵠΔⵠⵠⲆ: 195,
    ⲆⲆᐃⲆⵠᐃᐃ: 196,
    ᐃⵠⵠᐃΔΔΔ: 197,
    ⵠᐃⲆⲆⵠ: 198,
    ΔᐃᐃⵠΔ: 199,
    ⵠⲆⵠΔⵠΔΔ: 200,
    ⲆᐃΔΔΔ: 201,
    ⲆⵠᐃⲆ: 202,
    ΔᐃⵠΔΔ: 203,
    ᐃᐃⲆⵠⲆⵠᐃ: 204,
    ⵠᐃⵠⲆΔ: 205,
    ΔΔⲆⵠᐃⲆⵠ: 206,
    ⲆⲆⵠⲆᐃ: 207,
    ⲆΔⵠΔᐃⵠⵠ: 208,
    ⲆⲆΔᐃΔ: 209,
    ⲆⵠᐃⵠⵠΔΔ: 210,
    ᐃᐃⵠⵠΔⲆᐃ: 211,
    ΔⲆⵠΔⵠ: 212,
    ⵠⵠᐃⲆⲆ: 213,
    ⵠᐃⵠⲆⲆ: 214,
    ΔᐃⲆⲆΔ: 215,
    ⵠᐃⵠⵠΔ: 216,
    ΔⲆΔⲆⵠ: 217,
    ⲆⵠΔᐃᐃ: 218,
    ⲆⵠⲆᐃⲆ: 219,
    ⵠΔⵠᐃᐃ: 220,
    ⲆⲆΔᐃⵠ: 221,
    ⲆᐃΔΔᐃ: 222,
    ⵠΔᐃⵠΔ: 223,
    ⲆⲆΔΔᐃ: 224,
    ⲆⵠⵠᐃΔⵠⵠ: 225,
    ⵠⵠᐃΔⲆⵠⲆ: 226,
    ⵠᐃⲆⵠⵠ: 227,
    ⵠⲆⲆⲆΔΔⵠ: 228,
    ᐃᐃᐃΔⵠ: 229,
    ⵠΔᐃΔΔ: 230,
    ΔΔⲆⲆᐃ: 231,
    ᐃᐃⵠΔⲆ: 232,
    ΔᐃⵠΔᐃ: 233,
    ⵠΔᐃᐃᐃⲆⵠ: 234,
    ⲆⵠΔⲆᐃ: 235,
    ΔΔᐃⲆᐃ: 236,
    ΔⲆⲆⵠⲆ: 237,
    ⵠⲆⵠᐃΔ: 238,
    ᐃⵠⲆⲆⲆ: 239,
    ΔᐃΔⲆΔ: 240,
    ᐃΔⲆᐃⲆ: 241,
    ΔⵠⲆⵠᐃ: 242,
    ⵠΔᐃΔⵠᐃⵠ: 243,
    ⵠᐃⵠⵠⲆ: 244,
    ᐃᐃⲆᐃΔ: 245,
    ⲆⵠⵠⵠΔΔⲆ: 246,
    ⵠⲆⲆⲆⲆ: 247,
    ⵠⲆⵠⵠᐃ: 248,
    ⵠⵠⲆᐃΔΔΔ: 249,
    ΔⲆⵠᐃΔ: 250,
    ᐃΔⵠⲆΔ: 251,
    ⵠᐃⲆᐃΔⵠᐃ: 252,
    ᐃⲆⵠⵠⵠΔⵠ: 253,
    ᐃᐃⲆΔΔΔᐃ: 254,
    ΔⲆⲆᐃΔⲆⲆ: 255,
    ⵠΔΔΔⲆΔⲆ: 256,
    ᐃⲆᐃΔᐃⲆᐃ: 257,
    ΔⲆᐃⵠⵠⲆⲆ: 258,
    ⲆᐃΔⵠᐃΔⵠ: 259,
    ΔⵠⲆΔⲆ: 260,
    ᐃⲆⲆⵠᐃᐃΔ: 261,
    ⲆⵠᐃᐃⵠᐃⲆ: 262,
    ΔΔΔᐃⲆⵠᐃ: 263,
    ⵠΔⵠΔΔ: 264,
    Ⲇⵠᐃⵠⵠⵠⵠ: 265,
    ⲆⲆᐃᐃⵠΔΔ: 266,
    ᐃⲆᐃᐃⲆⲆⲆ: 267,
    Ⲇᐃⵠⵠᐃᐃⵠ: 268,
    ⵠⲆⲆⵠⵠⵠⵠ: 269,
    ᐃⵠⵠΔᐃⵠᐃ: 270,
    ⲆⲆⵠⲆⲆᐃⲆ: 271,
    ⵠᐃΔⵠⲆⲆΔ: 272,
    ⵠⲆⲆΔΔᐃΔ: 273,
    ⲆΔΔⵠᐃᐃᐃ: 274,
    ⵠⵠⲆᐃΔⲆⵠ: 275,
    ⵠⲆⲆⲆΔᐃⵠ: 276,
    ⲆᐃⲆⵠⲆᐃⵠ: 277,
    ΔᐃΔⵠⵠⲆⵠ: 278,
    ΔⲆⲆΔ: 279,
    ᐃΔΔⵠⲆ: 280,
    ⲆᐃᐃⲆⲆⵠⲆ: 281,
    ᐃⲆΔⲆⲆⵠⲆ: 282,
    ΔⲆ: 283,
    ᐃΔᐃᐃᐃⲆⵠ: 284,
    ᐃᐃⲆᐃⲆ: 285,
    ᐃⲆⲆⲆⵠ: 286,
    ΔᐃΔⵠⲆⵠᐃ: 287,
    Δⵠᐃᐃᐃ: 288,
    ⲆⲆⲆᐃΔⲆⵠ: 289,
    ΔΔΔⵠΔΔᐃ: 290,
    ⵠⲆⲆΔΔⲆⵠ: 291,
    ΔⲆⲆⵠΔᐃⵠ: 292,
    ΔⲆⵠⲆⲆⵠⲆ: 293,
    ⲆᐃᐃⲆᐃ: 294,
    ΔⲆⲆⲆⲆⵠᐃ: 295,
    ᐃᐃⲆⵠΔᐃΔ: 296,
    ⵠΔΔΔᐃᐃᐃ: 297,
    ⲆΔᐃᐃΔⲆⲆ: 298,
    ⵠΔⲆᐃΔ: 299,
    ᐃⵠⲆΔΔⵠΔ: 300,
    ᐃⲆᐃⵠΔⵠΔ: 301,
    ⵠⲆⵠᐃⲆΔⲆ: 302,
    ⲆⵠΔᐃⵠᐃΔ: 303,
    ⲆᐃᐃⲆⲆⵠΔ: 304,
    ΔᐃᐃᐃᐃⲆΔ: 305,
    ⲆΔⵠΔⵠⵠᐃ: 306,
    ΔⲆⵠⵠᐃ: 307,
    ΔⲆᐃⵠᐃᐃⵠ: 308,
    ⲆᐃⲆΔⲆⲆΔ: 309,
    ΔⵠᐃⵠᐃᐃⲆ: 310,
    ⵠⲆᐃⵠᐃΔΔ: 311,
    ᐃⲆⲆΔⵠⲆᐃ: 312,
    ΔᐃⵠΔᐃᐃᐃ: 313,
    ⵠⵠⵠⲆⲆⲆⵠ: 314,
    ⵠⲆᐃⵠⵠⲆⲆ: 315,
    ΔᐃⲆΔⵠⲆⵠ: 316,
    ᐃⲆⲆᐃⲆΔΔ: 317,
    ᐃᐃΔⲆⲆΔᐃ: 318,
    ΔⵠᐃⵠⵠᐃⲆ: 319,
    ΔΔᐃⲆⲆⵠⲆ: 320,
    ᐃⵠⲆⲆΔ: 321,
    ΔᐃΔᐃᐃⲆⵠ: 322,
    ΔΔΔⲆⲆⲆⵠ: 323,
    ⲆΔΔⲆⵠᐃᐃ: 324,
    ᐃⲆⲆᐃⵠⵠᐃ: 325,
    ᐃΔⲆᐃⲆΔⲆ: 326,
    ⲆΔᐃᐃΔⲆⵠ: 327,
    ΔⲆᐃⵠᐃᐃⲆ: 328,
    ⵠⵠᐃΔⲆⵠⵠ: 329,
    ΔᐃⵠⲆΔΔⲆ: 330,
    ⵠⵠᐃⲆⵠΔⲆ: 331,
    ⵠⵠΔᐃᐃᐃΔ: 332,
    ⲆΔⵠᐃᐃⲆΔ: 333,
    ᐃᐃⲆⵠⵠⵠᐃ: 334,
    ⵠᐃΔⵠᐃⲆⲆ: 335,
    Δᐃᐃᐃᐃⵠᐃ: 336,
    ᐃΔⵠⲆⲆΔᐃ: 337,
    Ⲇᐃᐃᐃⵠⵠᐃ: 338,
    ⵠⲆᐃΔᐃΔΔ: 339,
    ᐃᐃⵠⵠⲆΔⵠ: 340,
    ⲆⵠⵠⲆⵠⵠΔ: 341,
    ᐃᐃᐃⵠⲆΔᐃ: 342,
    ⵠⲆᐃⲆⵠⲆᐃ: 343,
    ΔΔΔⵠΔᐃᐃ: 344,
    ΔⵠⵠⵠΔΔᐃ: 345,
    ᐃⲆⲆΔⵠⵠⲆ: 346,
    ΔᐃΔΔΔΔⵠΔⵠ: 347,
    ᐃⲆᐃⵠⵠⵠᐃ: 348,
    ᐃⲆᐃΔΔⲆⵠ: 349,
    ΔᐃⵠⲆᐃⲆⵠ: 350,
    ⲆⵠⲆⵠΔⲆⵠ: 351,
    ⲆᐃΔᐃᐃⵠⵠ: 352,
    ⵠΔⲆⵠⲆⵠⵠ: 353,
    ⲆⵠⲆΔⲆⵠΔ: 354,
    ⲆⵠⲆⵠΔΔⲆ: 355,
    ⲆΔᐃⵠΔⲆⵠ: 356,
    ⵠⵠⵠⲆΔᐃΔ: 357,
    ᐃⲆᐃⵠΔⲆⵠ: 358,
    ⲆⵠⲆⲆⵠⵠᐃ: 359,
    ⵠᐃᐃᐃᐃⵠⲆ: 360,
    ⵠᐃⵠᐃᐃᐃᐃ: 361,
    ⵠΔⵠⵠΔⵠΔ: 362,
    ⲆⲆΔᐃᐃΔᐃ: 363,
    ⲆⵠΔΔΔⲆᐃ: 364,
    ⵠΔⲆΔⲆᐃΔ: 365,
    ⵠΔᐃⵠΔᐃⵠ: 366,
    ΔⵠⵠΔᐃⵠᐃ: 367,
    ᐃⲆΔΔᐃΔⵠ: 368,
    ᐃⵠⲆᐃᐃⲆⲆ: 369,
    ⲆⵠΔⵠⲆⲆᐃ: 370,
    ⲆΔⲆᐃᐃⵠΔ: 371,
    ᐃⲆΔⵠⵠΔⵠ: 372,
    ⵠΔΔᐃⵠΔᐃ: 373,
    ᐃΔⲆΔⵠΔΔ: 374,
    ⵠᐃⲆⲆᐃᐃⲆ: 375,
    ᐃΔⲆΔΔⵠⲆ: 376,
    ⵠΔᐃⲆⵠᐃⲆ: 377,
    ᐃΔᐃᐃⲆΔⲆ: 378,
    ⵠⵠⵠⲆⲆⵠΔ: 379,
    ᐃΔᐃᐃᐃᐃΔ: 380,
    ᐃⵠᐃⲆᐃᐃⲆ: 381,
    ΔⲆⲆΔⲆⵠⲆ: 382,
    ⵠΔⵠⵠⵠⲆᐃ: 383,
    ⲆⵠⵠⲆⵠⲆΔ: 384,
    ⲆΔⵠⵠⲆⲆⵠ: 385,
    ⲆᐃΔⲆⲆⲆⲆ: 386,
    ⵠΔⵠⲆΔΔⵠ: 387,
    ⵠⵠΔᐃᐃⲆⵠ: 388,
    ⵠⲆΔΔⵠⵠⵠ: 389,
    ᐃⲆΔΔⲆᐃⲆ: 390,
    ⲆᐃⲆⲆⲆᐃΔ: 391,
    ⲆᐃⲆⲆⲆⵠⲆ: 392,
    ΔⵠⲆΔΔⵠΔ: 393,
    ⵠᐃΔⲆⲆΔⵠ: 394,
    ⵠᐃⵠⵠⲆᐃⵠ: 395,
    ΔⵠΔΔΔΔⵠ: 396,
    ΔᐃⲆᐃΔΔⲆ: 397,
    ⵠⵠᐃⵠⲆᐃⲆ: 398,
    ΔⵠΔⲆΔᐃᐃ: 399,
    ΔⵠᐃⲆⵠᐃᐃ: 400,
    ⵠⵠᐃᐃⵠⵠⵠ: 401,
    ⵠΔᐃⵠⵠⵠⵠ: 402,
    ⲆⵠᐃᐃΔΔᐃ: 403,
    ⲆΔᐃΔΔΔΔ: 404,
    ⵠⵠᐃⵠΔΔΔ: 405,
    ⵠⲆᐃΔⲆⲆⵠ: 406,
    ⲆⲆᐃⲆⲆⲆΔ: 407,
    ⲆΔΔⵠΔᐃΔ: 408,
    ᐃⲆⲆⵠᐃΔⵠ: 409,
    ⵠᐃΔΔⵠⲆΔ: 410,
    ⲆⵠⵠⵠⲆΔᐃ: 411,
    ⲆⲆΔⲆΔΔⲆ: 412,
    ⲆⵠΔⲆⵠ: 413,
    ⵠⵠⲆΔⵠⵠΔⲆⵠ: 414,
    ⲆᐃΔⲆΔ: 415,
    ⵠΔⲆᐃⵠ: 416,
    ΔⵠΔⲆΔⲆΔΔⵠ: 417,
    ⵠᐃΔⵠⲆⵠⲆ: 418,
    ⵠⵠᐃᐃⵠ: 419,
    ⲆⲆᐃᐃΔᐃⵠ: 420,
    ᐃⲆΔⲆΔΔⲆ: 421,
    ΔⵠΔᐃⲆⲆᐃ: 422,
    ⲆΔΔΔᐃⲆᐃ: 423,
    ΔΔⲆⵠⵠⲆⵠ: 424,
    ⵠⵠΔΔⲆⵠⵠ: 425,
    ᐃᐃⵠᐃⲆᐃⲆ: 426,
    ⲆⲆⲆΔᐃⲆΔ: 427,
    ᐃⵠΔⵠᐃᐃΔ: 428,
    ⲆΔⲆⲆⵠᐃⲆ: 429,
    ⵠⵠⵠⲆⲆᐃⲆ: 430,
    ⵠⵠⵠⵠⲆΔⲆ: 431,
    ΔⵠᐃⲆᐃᐃⲆ: 432,
    ⵠᐃᐃⲆⲆΔⲆ: 433,
    ⲆᐃΔᐃᐃⲆⵠ: 434,
    ᐃⵠᐃΔⲆΔᐃ: 435,
    ⲆΔⲆⵠⲆᐃᐃ: 436,
    ⲆᐃⵠΔᐃⵠᐃ: 437,
    ᐃⵠᐃΔⵠⵠᐃ: 438,
    ΔΔⲆΔⵠⵠᐃ: 439,
    ⵠᐃⵠⵠⲆΔΔ: 440,
    ⵠⵠᐃᐃⵠᐃᐃ: 441,
    ᐃⲆᐃⵠΔⵠⲆ: 442,
    ΔⵠᐃⲆΔⵠⲆ: 443,
    ΔⲆⵠᐃΔⲆᐃΔᐃ: 444,
    ᐃΔᐃᐃⲆ: 445,
    ⵠΔΔⲆΔⵠⵠ: 446,
    ΔΔΔⵠΔᐃΔ: 447,
    ΔⵠⲆΔⲆΔΔⵠᐃ: 448,
    ΔⲆᐃΔᐃ: 449,
    ΔΔᐃⲆⵠ: 450,
    ᐃᐃΔⵠⵠᐃⲆ: 451,
    ⲆⲆΔⲆᐃⵠⲆ: 452,
    ᐃΔᐃᐃⲆᐃΔ: 453,
    ΔⲆⵠΔⵠΔᐃ: 454,
    ⵠᐃⲆΔᐃⵠΔ: 455,
    ⲆⵠⵠΔᐃⵠᐃ: 456,
    ΔΔΔΔΔΔⲆ: 457,
    ⵠⵠᐃⲆⵠΔⵠ: 458,
    ⵠᐃⵠᐃⵠΔⵠ: 459,
    ᐃΔⵠᐃⵠΔᐃ: 460,
    ⲆΔᐃⲆⲆΔᐃ: 461,
    ⵠᐃⲆⲆⵠΔᐃ: 462,
    ΔΔᐃⵠⲆⵠⲆ: 463,
    ⲆΔᐃⲆⲆⲆⲆ: 464,
    ⲆⲆⲆⲆⲆⵠΔ: 465,
    ᐃⲆΔⵠⵠΔΔ: 466,
    ΔⲆⲆΔⵠΔⵠ: 467,
    ΔⵠᐃⲆⵠᐃⲆ: 468,
    ⵠᐃᐃᐃᐃⵠᐃ: 469,
    ᐃⲆᐃᐃⵠΔⵠ: 470,
    ΔⵠᐃⵠⲆⲆᐃ: 471,
    ⲆⵠΔΔⵠⵠⲆ: 472,
    ⲆⵠⲆⲆᐃⲆᐃ: 473,
    ΔᐃΔⲆΔⵠⲆ: 474,
    ⵠⵠⲆΔⲆΔᐃ: 475,
    ΔⲆᐃⲆⵠⵠⲆ: 476,
    ᐃⵠΔⲆΔΔⲆ: 477,
    ⵠⲆΔᐃᐃᐃⲆ: 478,
    ᐃⲆᐃⵠⲆⲆᐃ: 479,
    ΔⵠⲆⵠⲆⵠΔ: 480,
    ΔᐃⲆⲆᐃⲆⵠ: 481,
    ᐃⵠⲆⵠΔⵠᐃ: 482,
    ΔⵠⲆⲆⵠⲆΔ: 483,
    ᐃΔΔⵠⲆΔⵠ: 484,
    ⵠⵠⲆⲆⲆⵠΔ: 485,
    ᐃⲆⲆᐃⲆΔⲆ: 486,
    ⵠᐃⵠⲆⲆᐃΔ: 487,
    ΔⲆⲆᐃⵠᐃΔ: 488,
    ⲆⲆΔⲆᐃⵠⵠ: 489,
    ᐃᐃⵠⵠⲆⲆΔ: 490,
    ᐃΔⲆᐃᐃⲆⵠ: 491,
    ΔⵠⲆΔΔᐃᐃ: 492,
    ᐃᐃⲆⵠⲆⲆⲆ: 493,
    ⵠᐃⲆⲆⵠΔΔ: 494,
    ΔⵠⵠⲆΔᐃᐃ: 495,
    ΔⲆᐃΔⲆⲆᐃ: 496,
    ᐃᐃΔⲆΔⵠⲆ: 497,
    ᐃᐃᐃⵠⵠⲆⲆ: 498,
    ᐃΔΔⵠⵠΔΔ: 499,
    ΔⲆΔⵠⵠⵠⲆ: 500,
    ⲆⲆΔⵠⲆΔⲆ: 501,
    ᐃⲆΔⵠⵠᐃⲆ: 502,
    ⵠⲆⵠⵠΔⲆΔ: 503,
    ⲆⲆΔᐃⵠⵠΔ: 504,
    ⲆΔᐃⲆⲆᐃᐃ: 505,
    ΔⵠⵠⲆⵠⵠᐃ: 506,
    ⲆⲆⲆⲆⲆⵠΔ: 507,
    ΔᐃΔᐃᐃΔⲆ: 508,
    ⵠⲆΔᐃⲆΔⲆ: 509,
    ⵠⵠᐃⲆᐃⲆⲆ: 510,
    ᐃⵠⵠΔⵠⲆⲆ: 511,
    ΔⵠⲆᐃΔⵠΔ: 512,
    ΔⵠΔⲆⵠⲆⵠ: 513,
    ⵠⲆΔⵠᐃᐃⵠ: 514,
    ⲆΔᐃⲆⲆⲆᐃ: 515,
    ⲆⲆⲆⲆᐃΔΔ: 516,
    ᐃΔᐃⲆᐃΔⲆ: 517,
    ⲆⵠⵠⵠᐃⵠⲆ: 518,
    ⵠⵠᐃⵠᐃΔᐃ: 519,
    ⵠⲆΔⲆⲆⵠⵠ: 520,
    ᐃᐃⲆΔⵠⲆᐃ: 521,
    ᐃⲆⲆⵠⵠᐃᐃ: 522,
    ΔⵠᐃⵠΔⵠⵠ: 523,
    ΔⵠΔⵠΔᐃⵠ: 524,
    ᐃᐃⵠΔᐃᐃΔ: 525,
    ᐃΔⲆⵠᐃⵠⵠ: 526,
    ⵠⵠΔᐃΔΔⵠ: 527,
    ⵠⵠΔᐃΔΔⲆ: 528,
    ΔᐃᐃⵠⲆᐃⲆ: 529,
    ΔⲆⵠⲆᐃΔⵠ: 530,
    ⲆΔⵠᐃΔⵠⲆ: 531,
    ΔⵠⲆᐃᐃⲆⲆ: 532,
    ⵠᐃⲆⲆⵠⵠΔ: 533,
    ⲆⵠⵠⵠᐃᐃⲆ: 534,
    ⲆⵠⲆⵠΔⵠⵠ: 535,
    ᐃⵠⲆⲆᐃΔⲆ: 536,
    ⵠᐃⲆⲆⲆⲆⲆ: 537,
    ⲆᐃᐃΔΔⵠᐃ: 538,
    ᐃⲆⵠⵠΔⵠⲆⵠᐃ: 539,
    ⲆⵠⵠⵠⲆᐃᐃ: 540,
    ⲆⲆⲆⲆΔᐃⵠ: 541,
    ΔΔⲆⲆΔⲆⵠ: 542,
    ΔⵠΔⲆᐃᐃΔ: 543,
    ⵠΔᐃΔᐃⲆΔᐃΔ: 544,
    POINTS: 545,
    ᐃⵠⲆΔᐃᐃⵠ: 546,
    ᐃⵠΔΔᐃⵠΔ: 547,
    ᐃᐃⲆⲆᐃⲆᐃ: 548,
    ⲆⲆⵠⵠⲆⵠⲆ: 549,
    ⲆⵠΔᐃᐃΔⲆ: 550,
    ⲆΔⲆΔΔᐃⲆ: 551,
    ⵠᐃᐃΔⵠⵠⵠ: 552,
    ΔⲆᐃⵠⲆⲆΔ: 553,
    ΔⲆΔΔⵠΔⲆ: 554,
    ΔⲆⲆⵠΔΔⲆ: 555,
    ᐃΔᐃⲆⵠⲆᐃ: 556,
    ⲆⲆⲆΔᐃⲆᐃ: 557,
    ⵠⲆᐃⲆᐃᐃᐃ: 558,
    ⵠᐃᐃᐃⵠⵠⲆ: 559,
    ΔᐃᐃⵠⲆΔⵠ: 560,
    ⲆⵠΔᐃᐃⲆⵠ: 561,
    ᐃⵠⵠΔⲆⲆⲆ: 562,
    ⲆΔΔᐃᐃΔⵠ: 563,
    ⲆⲆⲆⵠⲆⵠⵠ: 564,
    ΔᐃΔⲆⲆⲆⵠ: 565,
    ΔⵠⵠᐃΔⵠᐃ: 566,
    ΔᐃⵠᐃΔⵠΔ: 567,
    ΔΔⲆΔᐃΔᐃ: 568,
    ⲆᐃᐃΔⵠᐃΔ: 569,
    ⵠᐃⲆᐃⲆᐃΔ: 570,
    ⲆΔⲆⵠⵠΔⵠ: 571,
    ⵠⲆⲆᐃΔᐃⲆ: 572,
    ᐃⲆⵠⵠⲆᐃᐃ: 573,
    ΔᐃⲆΔΔⵠᐃ: 574,
    ᐃⲆⵠⲆΔᐃⵠ: 575,
    ⲆᐃΔⵠᐃᐃᐃ: 576,
    ⲆᐃΔΔⵠⵠᐃ: 577,
    ᐃΔⵠⲆⵠΔⵠ: 578,
    ⲆᐃⲆⵠΔᐃΔ: 579,
    ⲆΔⵠⲆⵠΔᐃ: 580,
    ᐃⲆⵠΔᐃᐃⲆ: 581,
    ᐃᐃΔⵠⲆⲆⲆ: 582,
    ⲆΔⵠΔⵠⵠⵠ: 583,
    ⵠᐃⲆᐃⵠᐃⵠ: 584,
    ΔᐃᐃⲆᐃⵠᐃ: 585,
    ⲆⵠᐃΔⵠᐃⵠ: 586,
    Δᐃⵠᐃᐃᐃᐃ: 587,
    ᐃⲆⲆᐃᐃⲆΔ: 588,
    ΔΔᐃᐃⵠΔΔ: 589,
    ᐃⲆΔⲆⲆⵠⵠ: 590,
    ⲆΔᐃΔⵠᐃΔ: 591,
    ΔⲆᐃΔⲆᐃⲆ: 592,
    ⵠⵠⵠΔⲆᐃⵠᐃⲆ: 593,
    ΔⵠⲆⲆⵠⵠΔ: 594,
    ⵠⵠⲆΔⲆⲆⵠΔⲆ: 595,
    ΔⵠⲆⵠⲆᐃⵠ: 596,
    ᐃᐃⲆᐃΔᐃⲆⵠᐃ: 597,
    ⵠᐃΔΔⵠΔⲆᐃᐃ: 598,
    ᐃⲆΔⵠⲆᐃΔⲆᐃ: 599,
    ΔⵠⵠⲆᐃⵠⵠᐃΔ: 600,
    ᐃⵠΔⵠΔⵠⲆΔᐃ: 601,
    ΔⵠⲆᐃⲆΔᐃ: 602,
    ⵠᐃⵠΔⵠ: 603,
    ⲆᐃΔⵠᐃΔᐃ: 604,
    ⲆⲆⲆᐃΔᐃⲆ: 605,
    ⲆΔⲆⵠΔⵠⲆ: 606,
    ⲆΔⵠΔᐃᐃⲆⵠⲆ: 607,
    ᐃⲆⲆⲆᐃᐃΔ: 608,
    ᐃΔⲆΔᐃⵠΔ: 609,
    ᐃᐃⵠᐃⵠⲆᐃ: 610,
    ΔⲆⲆⵠⲆΔⵠ: 611,
    ΔᐃΔⲆⵠΔΔ: 612,
    ᐃⵠᐃⲆⲆⲆΔ: 613,
    ⲆΔⲆᐃΔΔᐃ: 614,
    ᐃⵠⵠᐃᐃⵠΔ: 615,
    ⲆⲆᐃΔⵠΔΔ: 616,
    ⵠᐃᐃᐃΔΔΔ: 617,
    ⲆⲆᐃΔⵠⵠᐃ: 618,
    ⲆᐃⵠⵠΔ: 619,
    ⲆΔⵠⵠᐃ: 620,
    ⵠⲆᐃⲆⵠ: 621,
    ΔⵠⲆᐃᐃΔⲆⲆᐃ: 622,
    ΔⵠⲆⵠΔⵠΔ: 623,
    ᐃᐃΔΔⵠΔⲆ: 624,
    ΔⲆΔΔⲆⵠⵠ: 625,
    ⵠⲆⲆΔΔⲆΔ: 626,
    ⲆⵠⲆⲆᐃⵠⵠ: 627,
    ⲆⲆᐃᐃⲆⲆΔ: 628,
    ⲆⲆⲆᐃΔⲆΔ: 629,
    ΔⲆᐃⲆⲆⲆΔ: 630,
    ᐃⲆⲆⵠΔⲆⲆ: 631,
    ΔΔΔⵠᐃⲆᐃ: 632,
    ⲆⵠΔⵠΔⵠⲆ: 633,
    ⲆⵠΔⵠⵠⲆⵠ: 634,
    ΔΔΔᐃⵠΔⵠ: 635,
    ⲆⲆⲆⵠⵠᐃⵠ: 636,
    ΔⵠᐃⵠⲆ: 637,
    ᐃΔᐃᐃⵠᐃᐃ: 638,
    ⵠΔΔᐃⵠᐃⲆ: 639,
    ⵠΔΔⵠᐃΔᐃ: 640,
    ΔΔⵠΔⲆⲆᐃ: 641,
    ΔⵠⵠⲆⵠᐃⲆ: 642,
    ᐃⵠᐃⲆΔⵠΔ: 643,
    ᐃᐃⵠΔΔⵠΔ: 644,
    ⵠᐃⲆΔᐃᐃΔ: 645,
    ⲆΔⵠΔⵠᐃΔ: 646,
    ΔΔⵠΔⲆⵠⲆ: 647,
    ᐃⲆⵠᐃⵠᐃⲆ: 648,
    ᐃⲆΔΔⵠⵠⵠ: 649,
    ⲆⲆⵠᐃⵠⵠⵠ: 650,
    ⵠΔⲆⲆᐃⵠΔ: 651,
    ⲆⵠᐃⵠᐃⲆⵠ: 652,
    ΔΔⵠᐃⲆⲆΔ: 653,
    ⵠⲆΔΔᐃᐃⲆ: 654,
    ΔΔⵠᐃᐃⵠΔ: 655,
    ⲆᐃᐃⲆⵠⲆⲆ: 656,
    ⵠⵠⲆⲆⲆᐃⵠ: 657,
    ⵠⵠⲆⲆᐃⲆⲆ: 658,
    Ⲇⵠᐃⵠⵠᐃᐃ: 659,
    ᐃᐃΔᐃᐃⵠⲆ: 660,
    ⲆⲆᐃⲆⲆᐃΔ: 661,
    ᐃⵠⲆⵠΔᐃΔ: 662,
    ᐃⵠΔⲆⲆΔΔ: 663,
    ᐃⵠⵠᐃⲆⵠΔ: 664,
    ᐃΔᐃⵠΔⵠΔ: 665,
    ΔⲆⲆⲆⲆⲆⲆ: 666,
    ⵠΔᐃⲆΔᐃⲆ: 667,
    ᐃⲆᐃⲆⵠⲆⵠ: 668,
    ⲆᐃⵠⵠⲆᐃᐃ: 669,
    ᐃᐃⲆᐃΔⵠΔ: 670,
    ⵠⲆᐃⵠΔᐃⵠ: 671,
    ⵠΔⵠⲆⵠΔⲆ: 672,
    ᐃⲆⲆⲆᐃ: 673,
    ᐃᐃᐃΔⲆⵠⲆ: 674,
    ΔᐃⲆΔᐃⵠⲆ: 675,
    ⲆⲆΔΔⵠ: 676,
    ⵠΔᐃΔᐃΔⲆΔᐃ: 677,
    ΔⵠⵠᐃΔᐃΔ: 678,
    ᐃⵠΔΔΔ: 679,
    ΔΔᐃΔΔᐃⵠ: 680,
    ⵠᐃΔΔΔⲆⵠ: 681,
    ⵠⲆⲆΔΔⲆᐃ: 682,
    ᐃⲆΔⵠᐃⲆⲆ: 683,
    ΔⲆⵠᐃᐃΔⵠ: 684,
    ⵠΔⲆⲆⲆΔⲆ: 685,
    ᐃⲆᐃⵠᐃᐃᐃ: 686,
    ⲆⲆΔᐃᐃⵠⲆ: 687,
    ᐃᐃΔΔⵠΔᐃ: 688,
    ⲆΔᐃᐃΔΔᐃ: 689,
    ᐃⵠΔΔⲆᐃⵠ: 690,
    ⵠⵠⲆΔᐃ: 691,
    ΔⵠΔΔⵠ: 692,
    ΔΔⲆⵠᐃ: 693,
    ⲆᐃⲆᐃᐃ: 694,
    Δⵠⵠᐃⵠ: 695,
    ᐃⵠΔᐃⵠΔᐃ: 696,
    ΔⲆⵠⲆⵠⵠᐃ: 697,
    ⲆΔΔΔⲆΔⵠ: 698,
    ΔⵠᐃΔⲆᐃⵠ: 699,
    ᐃⵠᐃΔΔᐃⲆ: 700,
    ΔΔⵠᐃᐃΔᐃ: 701,
    ᐃⵠⲆᐃⲆⲆᐃ: 702,
    ΔⲆⲆΔᐃᐃⲆ: 703,
    ᐃΔⵠⵠᐃⵠᐃ: 704,
    ⵠᐃⵠΔⵠΔᐃ: 705,
    ⲆⵠⲆⲆⵠᐃⲆ: 706,
    ᐃⲆᐃᐃΔⵠΔ: 707,
    ΔⲆⵠΔⵠⵠⲆ: 708,
    ᐃⲆⲆⲆⲆⲆᐃ: 709,
    ⵠΔⵠΔⵠᐃΔ: 710,
    ⲆⵠᐃⵠΔΔᐃ: 711,
    ⲆᐃΔⲆᐃᐃΔ: 712,
    ᐃⲆΔᐃⲆΔΔ: 713,
    ᐃΔⲆⲆⲆⲆⵠ: 714,
    ΔΔⵠⵠΔᐃΔ: 715,
    ⵠᐃᐃΔⲆⲆΔ: 716,
    ᐃⲆΔᐃΔⲆⵠ: 717,
    ⲆⵠΔⵠΔᐃΔ: 718,
    ᐃΔΔⵠⵠⵠᐃ: 719,
    ᐃⵠΔⵠⵠᐃⵠ: 720,
    ⵠⲆΔⲆⵠⲆⲆΔΔ: 721,
    ⵠᐃΔⲆⵠⲆⲆ: 722,
    ΔΔᐃⵠⵠᐃⵠ: 723,
    ΔⲆΔⲆⵠⲆⲆ: 724,
    ⵠᐃΔΔⲆΔᐃ: 725,
    ΔᐃᐃᐃⵠⵠⲆ: 726,
    ᐃᐃⵠⲆΔΔΔ: 727,
    ΔⵠΔᐃⵠⵠⵠ: 728,
    ΔΔΔⲆΔΔⲆ: 729,
    ΔⲆᐃΔⲆⲆⲆ: 730,
    ᐃΔΔⵠⲆⵠⲆ: 731,
    ᐃⵠΔⵠⵠⵠⲆ: 732,
    ⵠᐃⲆΔⲆΔΔ: 733,
    ᐃᐃⲆⵠᐃⵠⵠ: 734,
    ᐃΔⲆᐃⵠⵠΔ: 735,
    ᐃⲆⵠⲆΔⵠΔ: 736,
    ΔⲆⲆᐃⲆⲆΔ: 737,
    ᐃⵠⵠᐃⵠᐃΔ: 738,
    ᐃⲆᐃᐃΔΔΔ: 739,
    ⲆᐃᐃⵠⲆⵠⵠ: 740,
    ᐃⲆᐃⲆⲆᐃⲆ: 741,
    ⵠⵠΔⵠΔⲆᐃ: 742,
    ⲆⲆⵠΔᐃᐃⲆ: 743,
    ⲆᐃⵠⲆΔᐃᐃ: 744,
    ⵠⲆᐃᐃᐃᐃᐃ: 745,
    ΔΔΔⲆᐃⵠᐃ: 746,
    ⲆᐃⲆⲆⵠⵠⵠ: 747,
    ⵠᐃᐃΔⲆⲆᐃ: 748,
    ΔⵠΔΔΔⵠⲆ: 749,
    ΔΔⵠⲆⵠⵠⲆ: 750,
    ⲆⲆᐃᐃΔⲆΔ: 751,
    ΔⲆΔᐃΔᐃⵠ: 752,
    ⵠⵠᐃⲆⲆⵠΔ: 753,
    ⵠⲆⵠᐃᐃᐃⵠ: 754,
    ΔⵠΔⵠᐃΔⲆ: 755,
    ⲆᐃᐃᐃΔᐃᐃ: 756,
    ΔⲆⲆᐃⲆⲆⵠ: 757,
    ⵠᐃⵠⵠⵠⵠⲆ: 758,
    ᐃᐃΔⲆΔᐃᐃ: 759,
    ⲆΔᐃⲆⵠⵠΔ: 760,
    ⵠⵠⲆΔⵠⲆᐃ: 761,
    ᐃΔᐃΔⲆΔⵠ: 762,
    ⲆⵠΔΔΔᐃᐃ: 763,
    ᐃⲆΔΔⵠᐃΔ: 764,
    ᐃΔⲆⵠⵠⲆⵠ: 765,
    ⲆⲆⵠⵠⵠᐃᐃ: 766,
    ᐃΔᐃⲆⲆⲆⲆ: 767,
    ΔⵠᐃΔᐃᐃⵠ: 768,
    ΔⵠᐃⵠΔⲆᐃ: 769,
    ᐃⵠΔᐃᐃⲆⲆ: 770,
    ⵠⲆⲆΔᐃΔⲆ: 771,
    ΔⲆᐃΔⵠⵠⲆ: 772,
    ΔᐃᐃΔᐃⵠᐃ: 773,
    ⲆⲆᐃΔⵠᐃΔ: 774,
    ΔⵠⲆᐃᐃⲆᐃ: 775,
    ΔΔᐃⵠΔᐃΔ: 776,
    ⵠⵠⲆΔⲆⲆⲆ: 777,
    ᐃᐃⲆⵠᐃᐃΔ: 778,
    ⲆⲆΔⲆⲆᐃⲆ: 779,
    ᐃΔΔΔΔᐃΔ: 780,
    ⵠΔⵠⵠⵠΔΔ: 781,
    ΔⵠΔⵠᐃⲆᐃ: 782,
    ΔΔⵠᐃΔᐃⵠ: 783,
    ⲆᐃᐃΔⲆⵠᐃ: 784,
    ᐃⵠⲆⲆⲆⵠⲆ: 785,
    ⲆⵠΔⲆⲆⲆⵠ: 786,
    ⵠΔΔΔⵠⵠⵠ: 787,
    ⵠⲆΔⲆⵠᐃⲆ: 788,
    ᐃⲆᐃΔΔΔⲆ: 789,
    ᐃΔⵠⲆᐃⲆⵠ: 790,
    ⲆΔⵠΔΔΔᐃ: 791,
    ΔᐃΔⵠΔⵠΔ: 792,
    ⵠⲆΔⵠᐃ: 793,
    ΔⲆᐃᐃᐃᐃⵠ: 794,
    ⵠᐃⲆᐃⵠⲆⵠ: 795,
    ⵠⵠΔⵠⲆ: 796,
    ⲆᐃⵠΔⲆⵠⵠ: 797,
    ᐃᐃⵠΔᐃΔᐃ: 798,
    ⵠΔΔᐃΔΔᐃ: 799,
    ΔΔⲆⲆⵠⲆⵠ: 800,
    ᐃᐃᐃᐃⲆᐃᐃ: 801,
    ΔⵠⲆᐃᐃ: 802,
    ⲆᐃⲆΔᐃⲆⵠ: 803,
    ᐃΔᐃⲆⲆⲆⵠΔΔ: 804,
    ΔⲆᐃΔᐃΔⵠⲆⵠ: 805,
    ΔⲆⵠᐃⲆᐃⲆⲆⲆ: 806,
    ⲆⲆⵠⲆΔⲆⲆᐃΔ: 807,
    ⵠᐃⲆΔΔⲆΔ: 808,
    ⵠⲆⵠᐃⵠⲆⵠ: 809,
    ⲆⲆΔᐃᐃΔΔ: 810,
    ΔⵠΔΔᐃⵠⲆ: 811,
    ᐃᐃΔΔⵠᐃⲆ: 812,
    ΔΔⲆⵠⵠᐃᐃ: 813,
    ΔᐃΔⲆᐃⵠᐃ: 814,
    ⲆⵠⲆⲆⲆⵠᐃ: 815,
    ⵠⲆᐃⵠⵠΔΔ: 816,
    ᐃΔⲆΔΔⲆΔ: 817,
    ᐃΔⲆⵠⲆ: 818,
    ⲆⵠᐃᐃⲆ: 819,
    ⲆⵠⵠⲆΔΔⲆ: 820,
    ⲆΔⵠⲆᐃⲆᐃ: 821,
    ⲆᐃΔΔΔⵠΔ: 822,
    ᐃⲆⲆᐃⵠⲆΔ: 823,
    ⵠΔᐃⵠΔΔᐃ: 824,
    ⵠᐃⲆⲆⲆΔⵠ: 825,
    ΔᐃᐃᐃᐃΔⲆ: 826,
    ΔΔⵠᐃᐃⵠⵠ: 827,
    ⲆⵠⲆΔⲆⲆⲆ: 828,
    ᐃⲆΔⲆⵠᐃⵠ: 829,
    ΔⲆⲆⲆΔᐃΔ: 830,
    ᐃⵠⵠΔΔΔΔ: 831,
    ΔΔⵠⲆΔΔⵠΔⵠ: 832,
    ΔⵠᐃⵠⵠΔⲆⵠⵠ: 833,
    ΔⲆⲆⲆⲆΔⲆ: 834,
    ⵠⲆΔᐃᐃⲆᐃ: 835,
    ⲆᐃⵠΔⵠⲆⵠ: 836,
    ⲆᐃᐃⲆⵠΔⲆ: 837,
    ᐃⵠΔⵠᐃⲆΔ: 838,
    ⲆΔⵠΔⲆⵠᐃ: 839,
    ⵠⲆⲆⲆᐃᐃᐃ: 840,
    ⲆⲆⵠⵠᐃⵠⲆ: 841,
    ΔⲆΔⵠΔⵠⲆ: 842,
    ΔᐃᐃᐃΔⵠΔ: 843,
    ᐃᐃΔⵠⵠΔᐃ: 844,
    ᐃΔΔᐃΔⲆΔ: 845,
    ⲆⲆⲆⲆᐃΔⲆ: 846,
    ⵠⵠⲆⲆΔᐃᐃ: 847,
    ᐃᐃⵠᐃⲆⵠⲆ: 848,
    ΔΔᐃⲆᐃⵠᐃ: 849,
    ΔΔⵠⲆⲆΔΔ: 850,
    ⵠΔΔⲆⲆΔⵠ: 851,
    ᐃΔⲆΔᐃⵠᐃΔᐃ: 852,
    ⲆΔΔⵠᐃΔⵠ: 853,
    ᐃΔⵠᐃⲆ: 854,
    ⵠᐃⲆⵠⵠⵠΔⵠᐃ: 855,
    ⲆⲆⵠᐃΔⵠᐃⲆᐃ: 856,
    ᐃᐃⲆⵠⲆⲆΔΔᐃ: 857,
    ΔⵠⲆΔᐃᐃΔΔⲆ: 858,
    ⲆⵠⲆΔᐃΔΔ: 859,
    ⲆⲆΔΔⲆⲆᐃ: 860,
    ᐃΔⵠⲆⵠΔΔ: 861,
    ΔᐃΔⲆΔᐃⵠ: 862,
    ⲆᐃΔΔⵠⲆΔ: 863,
    ⵠⵠᐃᐃΔΔⵠⵠᐃ: 864,
    ᐃᐃⵠᐃⵠⵠⲆ: 865,
    ⲆΔⵠᐃΔⲆΔ: 866,
    ⲆⲆⵠΔⲆΔⵠ: 867,
    ᐃⵠᐃᐃⲆⲆⵠ: 868,
    ⲆᐃⵠΔⵠⵠΔ: 869,
    ΔⲆⲆΔΔⵠᐃ: 870,
    ᐃⵠᐃᐃᐃᐃⲆ: 871,
    ⲆⲆΔᐃᐃ: 872,
    ΔΔⲆᐃᐃᐃΔⵠᐃ: 873,
    ΔⲆⲆⲆΔⵠⲆ: 874,
    ᐃΔᐃᐃⲆᐃⲆ: 875,
    ᐃΔⵠⲆⲆᐃΔ: 876,
    ᐃⲆⲆΔⲆⵠⲆ: 877,
    ⲆᐃⲆⵠᐃⲆΔ: 878,
    ᐃⲆⵠⲆⵠΔΔ: 879,
    ⵠⲆᐃᐃⵠⲆΔ: 880,
    ΔΔΔᐃᐃⵠᐃ: 881,
    ΔⵠᐃⲆΔⵠᐃ: 882,
    ⵠΔⲆⵠΔⵠⵠ: 883,
    ⵠⵠⵠΔΔᐃⵠ: 884,
    ΔⲆⲆᐃⵠⲆΔ: 885,
    ⵠΔⲆⵠⲆΔΔ: 886,
    ΔⵠΔⵠᐃ: 887,
    ⵠⲆⵠⵠᐃⵠΔ: 888,
    ΔΔᐃΔⵠⵠᐃ: 889,
    ᐃΔᐃⵠⲆᐃΔ: 890,
    ⵠΔⵠᐃΔΔΔ: 891,
    ⵠᐃⵠⵠᐃⵠⲆ: 892,
    ΔᐃⵠΔᐃΔᐃ: 893,
    ⲆⲆΔΔⵠΔᐃ: 894,
    ⲆⲆᐃᐃⲆⵠⲆ: 895,
    ΔⵠΔⲆⲆᐃⲆ: 896,
    ⲆⲆⵠⲆⲆⲆᐃ: 897,
    ⲆⲆⲆⲆΔⵠⲆ: 898,
    ΔΔⲆⲆᐃⲆᐃ: 899,
    ⵠΔᐃΔᐃΔⲆ: 900,
    ⲆⲆᐃΔⲆᐃΔ: 901,
    ⵠⵠⲆᐃᐃⵠⵠ: 902,
    ⲆⵠᐃᐃᐃⲆΔ: 903,
    ⵠᐃΔⵠⵠⲆᐃ: 904,
    ᐃⵠᐃⵠⲆⲆΔ: 905,
    ⵠⵠⲆⵠⲆⲆᐃ: 906,
    ᐃΔⵠΔΔᐃΔ: 907,
    ⵠᐃΔΔⲆⲆᐃ: 908,
    ᐃᐃⲆⲆⵠⲆⵠ: 909,
    ⵠⵠⵠΔⵠⲆᐃ: 910,
    ⲆᐃⵠΔⲆΔᐃ: 911,
    ⵠⵠΔΔⲆⲆⵠ: 912,
    ᐃΔᐃⲆΔΔⵠ: 913,
    ⲆⲆⲆᐃΔᐃⲆΔⲆ: 914,
    ⲆⲆΔⵠⲆΔΔΔᐃ: 915,
    ᐃᐃΔᐃⵠΔⵠᐃΔ: 916,
    ΔⵠᐃΔΔⲆᐃΔⲆ: 917,
    ΔⵠⵠⵠᐃᐃΔ: 918,
    ΔΔⵠⲆⵠΔⲆ: 919,
    ΔⲆⵠⵠⲆ: 920,
    ΔᐃᐃΔᐃⲆᐃ: 921,
    ᐃⲆᐃⵠⲆⲆⵠ: 922,
    ΔⵠᐃᐃΔΔⲆ: 923,
    ⲆⵠΔⲆᐃᐃⵠ: 924,
    ΔⲆⲆⲆⵠΔⵠ: 925,
    ⲆⲆΔⲆⵠⵠⲆ: 926,
    ⲆᐃⲆΔⵠᐃᐃ: 927,
    ⲆΔⲆⵠᐃᐃⵠ: 928,
    ᐃⲆⵠⲆΔⲆΔ: 929,
    ᐃᐃⲆΔᐃᐃⲆ: 930,
    ᐃᐃⵠⵠⵠⵠⲆ: 931,
    ⵠᐃᐃⲆⲆᐃΔ: 932,
    ⲆᐃᐃΔⲆᐃᐃ: 933,
    ᐃⲆΔⵠΔᐃⵠ: 934,
    ⵠⵠⵠⲆΔᐃᐃ: 935,
    ᐃᐃΔⲆᐃᐃⲆ: 936,
    ᐃΔΔⲆⵠΔᐃ: 937,
    ⵠⲆⵠᐃⵠⵠⵠ: 938,
    ΔⲆΔⲆⲆᐃⲆ: 939,
    ⲆᐃᐃᐃⵠΔᐃⲆⵠ: 940,
    ⲆᐃⵠᐃⲆ: 941,
    ⲆᐃⵠⲆⵠⲆⲆ: 942,
    ⵠΔΔΔⵠⲆⵠ: 943,
    ᐃᐃΔⲆⲆⵠⵠ: 944,
    ⲆⲆᐃⵠΔΔⲆ: 945,
    ΔΔΔⲆⵠⲆᐃ: 946,
    ᐃΔⲆΔᐃⲆΔ: 947,
    ⵠⲆΔⲆⵠᐃΔ: 948,
    ᐃⵠⵠⲆⲆΔⵠ: 949,
    ⲆΔΔΔᐃΔⲆ: 950,
    ᐃᐃΔᐃⲆᐃᐃ: 951,
    ΔⵠᐃΔΔᐃΔ: 952,
    ᐃⵠΔⵠᐃⵠΔ: 953,
    ᐃⲆⵠᐃⲆⵠᐃ: 954,
    ᐃⵠⲆⲆⵠⵠⲆ: 955,
    ⵠⵠΔⲆⲆᐃᐃ: 956,
    ΔᐃᐃᐃⲆΔΔ: 957,
    ⲆⵠⵠⵠΔΔΔ: 958,
    ⵠⲆⵠΔᐃΔⲆ: 959,
    ΔⵠⵠⲆⲆⲆΔ: 960,
    ⵠⲆᐃΔᐃⲆⵠ: 961,
    ⲆⲆⵠⵠΔᐃᐃ: 962,
    ΔΔΔⵠᐃⲆΔ: 963,
    ᐃᐃⵠⲆⲆⵠⵠᐃⲆ: 964,
    ᐃᐃⲆⲆΔΔᐃ: 965,
    ⲆᐃΔⲆⵠΔᐃ: 966,
    ᐃⵠⲆΔΔΔᐃ: 967,
    ⲆⵠⵠᐃᐃΔⲆ: 968,
    ᐃΔΔⲆΔᐃᐃ: 969,
    ΔⵠⲆⲆΔⵠᐃ: 970,
    ΔⲆᐃΔᐃᐃΔ: 971,
    ⲆᐃⲆⵠⲆΔᐃ: 972,
    ΔΔⲆΔᐃᐃΔ: 973,
    ΔᐃⲆⲆᐃᐃⵠ: 974,
    ⵠΔᐃⵠΔΔΔ: 975,
    ΔⵠⲆᐃⲆⵠⲆ: 976,
    ⵠΔⵠᐃⵠⲆΔ: 977,
    ⲆΔΔΔⵠⵠⵠ: 978,
    ⵠᐃᐃᐃⵠᐃᐃ: 979,
    ΔⵠᐃⲆⵠⲆΔ: 980,
    ΔΔΔᐃᐃᐃΔ: 981,
    ⲆⵠⵠᐃⲆᐃⵠ: 982,
    ΔⵠⲆⲆⲆⲆⲆ: 983,
    ⵠᐃⵠΔΔⵠⲆ: 984,
    ΔⲆᐃᐃⵠΔᐃ: 985,
    ᐃⲆΔΔⲆⵠⵠ: 986,
    ᐃⲆᐃⲆΔⲆⲆ: 987,
    ⵠⵠΔⵠⲆⲆᐃ: 988,
    ΔᐃᐃᐃⲆ: 989,
    ΔⲆⵠⲆⲆΔᐃ: 990,
    ΔΔΔΔⲆᐃᐃ: 991,
    ΔⲆⵠⵠᐃⵠⲆ: 992,
    ᐃᐃⲆⵠΔⵠΔ: 993,
    ΔΔΔΔᐃᐃΔ: 994,
    ᐃᐃⲆⵠⲆⵠⵠ: 995,
    ⲆⲆΔⵠⲆΔΔ: 996,
    ⲆⵠⵠᐃⲆⵠᐃ: 997,
    ΔᐃΔᐃΔᐃΔ: 998,
    ⲆⵠⲆΔᐃⵠᐃ: 999,
    ΔΔᐃΔⲆΔⵠ: 1000,
    ⵠⵠⵠΔᐃⲆⲆ: 1001,
    ᐃⲆᐃΔⲆᐃᐃ: 1002,
    ⵠΔΔᐃΔⵠᐃ: 1003,
    ⵠⵠⵠΔⲆᐃⲆ: 1004,
    ᐃᐃⵠⵠᐃΔⲆ: 1005,
    ⵠΔΔᐃᐃⵠⲆ: 1006,
    ᐃᐃⵠᐃᐃⲆᐃ: 1007,
    ⵠΔΔⵠⵠⵠΔ: 1008,
    ᐃⲆⲆⵠᐃⲆⲆ: 1009,
    ᐃⲆⵠΔⵠⵠⵠ: 1010,
    ⵠᐃΔᐃΔⲆⲆ: 1011,
    ΔⲆⲆⵠⵠⲆᐃ: 1012,
    ⵠΔᐃᐃⲆⲆᐃ: 1013,
    ΔⲆⲆⵠⲆⵠⲆ: 1014,
    ⲆᐃⲆⵠⵠΔΔ: 1015,
    ᐃⵠⵠᐃⲆᐃⲆ: 1016,
    ᐃΔΔΔΔⵠᐃ: 1017,
    ⵠⵠⵠΔΔⲆΔ: 1018,
    ᐃⲆⵠᐃⲆΔⵠ: 1019,
    ΔⲆⵠᐃᐃⵠΔ: 1020,
    ⲆΔΔΔⵠⲆᐃ: 1021,
    ΔⵠⲆᐃⵠⲆᐃ: 1022,
    ΔᐃⲆΔΔΔᐃ: 1023,
    ⲆⵠⲆⲆ: 1024,
    ΔⲆⲆᐃ: 1025,
    ⲆᐃΔⲆΔᐃⲆ: 1026,
    ᐃΔΔⵠᐃⵠⲆ: 1027,
    ᐃⲆⵠΔᐃΔⲆ: 1028,
    ΔⲆⵠⲆᐃⲆⲆ: 1029,
    ΔᐃᐃⵠⵠⲆⲆ: 1030,
    ⵠᐃⲆⵠᐃΔⵠ: 1031,
    ΔⲆᐃᐃΔⵠΔ: 1032,
    ᐃⵠᐃⵠⲆ: 1033,
    ΔΔᐃΔⲆⲆΔ: 1034,
    ΔⲆᐃΔⲆ: 1035,
    ᐃᐃΔⵠΔⵠⲆ: 1036,
    ᐃⲆⵠᐃᐃ: 1037,
    ᐃᐃⲆΔⵠⲆⵠ: 1038,
    ΔⵠΔⵠⵠ: 1039,
    ⲆⲆᐃᐃⲆΔⵠ: 1040,
    ⵠᐃᐃᐃⲆ: 1041,
    ⵠⵠΔᐃΔ: 1042,
    ⵠᐃⵠⲆⵠΔⲆ: 1043,
    ⲆΔⲆⲆⲆᐃᐃ: 1044,
    ⲆΔⲆⵠⵠⲆⵠ: 1045,
    ⲆΔΔⲆᐃᐃⲆ: 1046,
    ΔⲆⵠᐃⵠΔᐃ: 1047,
    ΔΔⵠᐃⵠⲆⲆ: 1048,
    ⵠⲆⲆᐃⵠΔⵠ: 1049,
    ⵠⵠⵠᐃᐃⵠⲆ: 1050,
    ⵠⵠᐃᐃⲆΔΔ: 1051,
    ⵠΔⵠⵠΔ: 1052,
    ⲆⵠⵠⵠΔⵠᐃ: 1053,
    ΔΔⲆⲆᐃ: 1054,
    ⲆΔᐃᐃΔⲆᐃ: 1055,
    ΔⲆΔᐃΔᐃᐃ: 1056,
    ⲆⲆᐃⵠⲆⲆⵠ: 1057,
    ΔⵠᐃⲆⲆᐃΔ: 1058,
    ᐃᐃΔⵠᐃⵠⵠ: 1059,
    ⲆⵠⵠⲆΔⵠΔ: 1060,
    ᐃΔΔΔᐃⲆⵠⲆᐃ: 1061,
    ⵠᐃᐃΔᐃⵠᐃ: 1062,
    ᐃⲆⵠΔᐃΔⵠ: 1063,
    ΔᐃᐃⵠΔⲆⵠᐃᐃ: 1064,
    ΔᐃⲆΔᐃⲆⲆ: 1065,
    ᐃΔᐃΔᐃΔⲆ: 1066,
    ⵠⲆᐃⲆⲆⵠᐃ: 1067,
    ⲆⲆᐃⵠᐃΔᐃ: 1068,
    ᐃᐃⵠΔⲆ: 1069,
    ΔⵠⵠᐃΔⵠⵠ: 1070,
    ΔᐃⵠΔᐃⵠⵠ: 1071,
    ᐃΔΔᐃⲆΔⵠ: 1072,
    ⵠΔⵠⲆⲆᐃⵠ: 1073,
    ⵠⲆᐃΔⵠᐃᐃ: 1074,
    ᐃΔⲆᐃⵠᐃⵠ: 1075,
    ᐃⲆⲆᐃⵠⵠⲆ: 1076,
    ⲆⵠⲆΔΔᐃᐃ: 1077,
    ΔⵠⵠⵠᐃⲆΔ: 1078,
    ⲆⵠΔᐃᐃΔΔ: 1079,
    ᐃᐃⲆᐃⵠᐃⵠ: 1080,
    ⵠⵠⵠⵠⵠⲆⲆ: 1081,
    ᐃᐃⵠᐃⲆⵠᐃ: 1082,
    ⵠΔⵠⵠΔⲆΔ: 1083,
    ΔᐃⵠΔᐃ: 1084,
    ΔⵠᐃⵠΔΔᐃ: 1085,
    ᐃⵠⲆᐃⲆⵠⵠ: 1086,
    ΔⵠⲆⵠᐃⵠⲆ: 1087,
    ᐃⵠⵠⵠⵠⲆⵠ: 1088,
    ⲆΔΔⲆᐃᐃⵠ: 1089,
    ⵠⵠΔⲆⵠᐃⵠ: 1090,
    ΔΔⵠΔΔᐃΔ: 1091,
    ⵠΔΔΔⵠᐃⵠ: 1092,
    ⵠⲆΔⲆⵠΔⲆ: 1093,
    ᐃΔⵠΔΔΔᐃ: 1094,
    ⵠΔⵠⵠΔⲆᐃ: 1095,
    ΔΔⲆᐃᐃⵠᐃ: 1096,
    ⲆᐃᐃᐃΔⲆⵠ: 1097,
    ΔⲆΔⲆⵠⲆⵠ: 1098,
    ⲆⵠΔⲆᐃ: 1099,
    ᐃⵠⲆΔΔΔⲆ: 1100,
    ⵠᐃᐃᐃΔⵠΔ: 1101,
    ᐃᐃᐃΔᐃⲆⵠ: 1102,
    ᐃⵠⲆⵠⵠΔⵠ: 1103,
    ΔⲆᐃΔⵠⲆⵠ: 1104,
    ᐃᐃⵠⵠⵠΔⵠ: 1105,
    ⲆⵠΔⲆⵠⲆΔ: 1106,
    ⵠⵠΔΔⵠΔᐃ: 1107,
    ᐃΔΔᐃΔⵠᐃ: 1108,
    ⲆΔⲆᐃⲆΔⲆ: 1109,
    ΔᐃΔⵠᐃⵠⲆ: 1110,
    ΔⵠΔⵠⲆΔΔ: 1111,
    ᐃᐃᐃΔⲆⲆᐃ: 1112,
    ΔΔᐃΔⲆᐃⲆ: 1113,
    ᐃⲆⵠΔⲆⲆⲆ: 1114,
    ⵠΔⲆΔΔⵠⲆ: 1115,
    ᐃᐃⵠΔΔΔⵠ: 1116,
    ⵠⵠᐃᐃⵠᐃⵠ: 1117,
    ᐃᐃΔΔⵠⵠⵠ: 1118,
    Ⲇᐃⵠᐃⵠⵠⵠ: 1119,
    ⵠⲆⵠᐃΔ: 1120,
    ⲆⵠᐃᐃⲆⵠⲆ: 1121,
    ⲆⵠΔΔΔⵠᐃ: 1122,
    ᐃᐃΔᐃΔⲆᐃ: 1123,
    ⵠⲆⵠⲆᐃᐃΔ: 1124,
    Ⲇⵠᐃᐃᐃⵠⵠ: 1125,
    ⵠΔⵠⵠΔⲆⲆ: 1126,
    ΔⵠᐃΔΔᐃⵠ: 1127,
    ΔΔⲆᐃΔΔⵠ: 1128,
    ⵠⲆΔⵠⵠⵠⵠ: 1129,
    ᐃᐃⵠΔᐃᐃᐃ: 1130,
    ᐃⵠᐃⲆᐃⲆᐃ: 1131,
    ⲆᐃⵠΔⲆⵠΔ: 1132,
    ⲆⵠΔᐃⲆⲆⵠ: 1133,
    ᐃⲆΔⵠᐃᐃᐃ: 1134,
    ⵠⵠⲆⵠⲆⵠΔ: 1135,
    ᐃⲆⵠⵠⵠΔᐃ: 1136,
    ⲆⵠⵠΔΔⵠⵠ: 1137,
    ᐃⲆⲆⵠΔᐃᐃ: 1138,
    ΔⲆΔⵠⵠⲆΔ: 1139,
    ⵠⲆⵠᐃᐃᐃᐃ: 1140,
    ⲆΔⵠᐃⲆⲆⲆ: 1141,
    ⲆⲆⲆΔᐃⵠΔ: 1142,
    ᐃⲆΔⵠⲆⲆΔ: 1143,
    ⵠᐃΔⲆΔⲆⵠ: 1144,
    ᐃⲆΔⵠᐃᐃΔ: 1145,
    ⲆⲆⵠᐃᐃⲆⲆ: 1146,
    ΔⵠⲆⵠᐃⲆΔ: 1147,
    ΔΔΔᐃⲆΔᐃ: 1148,
    ᐃᐃⵠⲆᐃΔᐃ: ["#E9CF96", "#144940"],
    ᐃⲆᐃΔⲆΔᐃ: 1149,
    ᐃΔᐃⵠΔΔⲆ: 1150,
    ⵠⲆᐃⵠⵠᐃᐃ: 1151,
    ⲆⵠᐃᐃⲆᐃⵠ: 1152,
    ΔᐃΔⵠᐃᐃⲆ: 1153,
    ⲆᐃᐃⲆᐃⵠⲆ: 1154,
    ⵠⲆⲆΔⲆⲆᐃ: 1155,
    ⵠⵠᐃΔⵠ: 1156,
    ⲆⵠΔΔΔᐃΔ: 1157,
    ⵠᐃⵠΔⵠᐃⲆ: 1158,
    ᐃⵠᐃᐃΔⵠᐃ: 1159,
    ᐃⵠΔⲆⲆⵠⵠ: 1160,
    ⲆᐃⲆΔⲆΔΔ: 1161,
    ᐃᐃΔⲆᐃᐃΔ: 1162,
    ᐃΔΔᐃᐃⲆᐃ: 1163,
    ᐃⵠⲆᐃᐃⲆΔ: 1164,
    ΔⵠΔΔⵠᐃⲆ: 1165,
    ⲆⲆᐃᐃΔᐃᐃ: 1166,
    ⵠᐃΔΔᐃⵠⵠ: 1167,
    ΔΔⲆΔⵠⲆⲆ: 1168,
    ᐃΔΔⵠⵠᐃᐃ: 1169,
    ΔΔᐃⵠΔⲆΔ: 1170,
    ⵠⵠΔΔⵠΔΔ: 1171,
    ᐃᐃⵠⲆᐃⵠⵠ: 1172,
    ⵠᐃⵠᐃⲆⵠⲆ: 1173,
    ΔᐃⵠΔⲆΔᐃ: 1174,
    ΔΔⵠⵠⲆᐃⲆ: 1175,
    ⵠᐃⵠᐃΔΔᐃ: 1176,
    ⵠΔᐃⵠⲆΔᐃ: 1177,
    ⵠⲆⵠΔᐃΔᐃ: 1178,
    ᐃᐃⲆⵠᐃⲆⲆ: 1179,
    ΔᐃΔΔⵠΔᐃ: 1180,
    ΔᐃᐃⵠⵠᐃⲆ: 1181,
    ᐃⵠⵠΔⲆⲆΔ: 1182,
    ⵠⵠΔΔᐃᐃΔ: 1183,
    ᐃⲆΔⲆᐃᐃΔ: 1184,
    ᐃⵠᐃᐃⵠⲆᐃ: 1185,
    ⲆΔⵠᐃᐃᐃᐃ: 1186,
    ⲆΔⲆᐃΔᐃⲆ: 1187,
    ΔΔᐃΔΔⵠⵠ: 1188,
    ᐃᐃΔᐃⵠⲆⲆ: 1189,
    ⵠⲆΔⲆΔᐃⲆ: 1190,
    ⵠᐃᐃΔⲆⵠᐃ: 1191,
    ᐃᐃⵠΔⲆⵠⲆ: 1192,
    ⲆⵠⵠΔᐃⵠⲆ: 1193,
    ᐃΔⲆⵠⵠⵠⵠ: 1194,
    ⲆᐃᐃᐃⲆⵠⲆ: 1195,
    ⵠᐃⲆΔⵠᐃΔ: 1196,
    ΔᐃⵠⵠΔⵠⲆ: 1197,
    ΔⵠᐃΔΔᐃⲆ: 1198,
    ⲆⲆⲆᐃΔⵠΔ: 1199,
    ⲆΔⵠᐃⲆⵠⵠ: 1200,
    ⵠⵠⵠⵠΔΔⵠ: 1201,
    ΔΔΔᐃΔⲆⵠ: 1202,
    ⵠⵠΔΔⲆᐃΔ: 1203,
    ᐃⲆΔᐃᐃᐃⲆ: 1204,
    ⲆⲆⵠᐃⲆⵠⵠ: 1205,
    ΔⲆⲆⵠⵠΔⲆ: 1206,
    ᐃⲆⵠⲆᐃᐃᐃ: 1207,
    ⵠⲆΔⵠⵠΔⲆ: 1208,
    ᐃⲆⵠᐃΔΔΔ: 1209,
    ᐃΔⵠⵠⵠΔⲆ: 1210,
    ᐃᐃᐃⲆΔΔⵠ: 1211,
    ⵠⲆⲆΔⵠΔⲆ: 1212,
    ⵠΔⵠᐃⲆΔᐃ: 1213,
    ⵠᐃⵠΔᐃⵠᐃ: 1214,
    ᐃⵠΔⵠΔᐃΔ: 1215,
    ΔⲆᐃⲆⲆⲆⵠ: 1216,
    ᐃᐃΔΔⲆΔⵠ: 1217,
    ⵠⲆⵠᐃᐃ: 1218,
    ⲆⲆⲆⲆᐃⲆᐃ: 1219,
    ⵠⲆⵠⵠᐃ: 1220,
    ⵠᐃΔⲆᐃⲆⲆ: 1221,
    ⵠᐃᐃⲆΔⲆΔ: 1222,
    ᐃΔⲆᐃᐃᐃᐃ: 1223,
    ΔΔᐃΔⲆⵠΔ: 1224,
    ⲆⲆⲆⵠⲆΔⲆ: 1225,
    ΔⲆⵠᐃⵠᐃΔ: 1226,
    ⵠΔΔⵠΔΔⵠ: 1227,
    ⵠⵠᐃΔΔᐃᐃ: 1228,
    ⵠΔᐃΔⵠⲆⲆ: 1229,
    ⲆΔⵠᐃᐃⲆⲆ: 1230,
    ΔⵠⵠⵠⲆΔⲆ: 1231,
    ΔⲆᐃᐃⵠⲆᐃ: 1232,
    ⲆⲆⲆΔⲆⵠⲆ: 1233,
    ⵠⲆΔᐃⵠᐃⵠ: 1234,
    ΔⲆⵠΔᐃⵠᐃ: 1235,
    ᐃᐃΔᐃⲆᐃⵠ: 1236,
    ⵠⵠⵠⲆⲆⵠⲆ: 1237,
    ⵠⵠᐃⵠⵠᐃⵠ: 1238,
    Δᐃⵠⵠⵠⵠⵠ: 1239,
    ⵠⲆⲆⵠⵠΔᐃ: 1240,
    ⵠⲆΔᐃᐃⲆⵠ: 1241,
    ⲆⲆΔᐃⵠΔⵠ: 1242,
    ΔᐃΔΔⵠᐃᐃ: 1243,
    ᐃᐃⵠⵠⲆᐃⲆ: 1244,
    ΔⲆⵠᐃΔⲆⲆ: 1245,
    ⵠⵠⵠⵠᐃΔΔ: 1246,
    ⵠⲆΔⲆᐃⲆᐃ: 1247,
    ᐃⲆΔⲆᐃΔΔ: 1248,
    ⲆᐃⵠⲆᐃΔⵠ: 1249,
    ΔⵠⲆⵠΔⵠⵠ: 1250,
    ΔᐃᐃⲆⲆᐃΔ: 1251,
    ᐃᐃΔⵠⲆᐃⵠ: 1252,
    ⵠⵠⵠⵠⲆⵠᐃ: 1253,
    ᐃᐃΔⲆΔⲆΔ: 1254,
    ΔᐃⵠⲆΔⵠⵠ: 1255,
    ⲆⵠⵠᐃⲆⲆΔ: 1256,
    ⲆΔⲆᐃⲆⲆⵠ: 1257,
    ⵠΔⵠⲆⲆⲆᐃ: 1258,
    ⲆⲆᐃⵠΔΔΔ: 1259,
    ⲆΔⲆᐃⵠⵠⲆ: 1260,
    ΔⵠⲆⲆⲆⵠᐃ: 1261,
    ΔᐃⵠᐃⲆΔⲆ: 1262,
    ΔⲆΔⲆⵠⵠᐃ: 1263,
    ⵠⲆᐃΔⵠΔⲆ: 1264,
    ⵠᐃΔΔᐃᐃΔ: 1265,
    ᐃⲆΔΔⵠΔᐃ: 1266,
    ⲆⵠⲆⵠⵠΔⵠ: 1267,
    ΔⲆⲆⵠᐃⲆⵠ: 1268,
    ⵠᐃⵠⵠⵠΔΔ: 1269,
    ⲆᐃⲆⲆⲆΔᐃ: 1270,
    ΔᐃⵠΔⵠΔⲆ: 1271,
    ᐃⲆⲆΔᐃᐃⵠ: 1272,
    ⵠⵠᐃΔΔⵠᐃ: 1273
  };
  nh = 0;
  const hh = 15;
  var gh = {
    Δⵠᐃᐃᐃ: 0,
    ⲆΔΔᐃⵠ: 1,
    ⵠΔᐃΔⲆ: 2,
    ᐃⲆⵠᐃⵠ: 3,
    ᐃⵠᐃΔⲆ: 4,
    ⲆᐃΔΔⲆ: 5,
    ⲆⲆΔⲆᐃ: 6,
    ΔΔⵠᐃⵠ: 7,
    ΔᐃΔᐃᐃ: 8,
    ΔΔΔᐃΔ: 9,
    Ⲇᐃᐃᐃⵠ: 10,
    ᐃⲆᐃⲆᐃ: 11,
    ⲆⲆΔⲆⵠ: 12,
    ΔΔᐃΔⵠ: 13,
    ⵠᐃⵠΔⲆ: 14,
    ᐃᐃΔⵠΔ: 15,
    ᐃⵠᐃᐃⲆ: 16,
    ᐃΔᐃⵠⲆ: 17,
    ⵠᐃΔⲆᐃ: 18,
    ᐃᐃⵠⲆⵠ: 19,
    ⲆⲆⲆᐃⵠ: 20,
    ⲆⲆⵠΔⵠ: 21,
    ᐃⵠΔⵠⵠ: 22,
    ᐃⵠⲆⵠⲆ: 23,
    ⵠΔⲆᐃⲆ: 24,
    ⲆΔΔᐃᐃ: 25,
    ᐃΔⵠⵠⲆ: 26,
    ᐃΔⵠΔΔ: 27,
    ⲆΔᐃⵠΔ: 28,
    ⵠⵠⵠΔΔ: 29,
    ᐃᐃⵠᐃⵠ: 30,
    ⵠᐃᐃⲆⵠ: 31,
    ⵠⲆΔⵠⲆ: 32,
    ᐃᐃⵠⵠᐃ: 33,
    ⵠᐃᐃⲆⲆ: 34,
    ΔᐃⲆΔΔ: 35,
    ᐃⲆᐃᐃᐃ: 36,
    ᐃⲆⵠᐃΔ: 37,
    ΔᐃⵠΔⵠ: 38,
    ᐃᐃⵠᐃⲆ: 39,
    ᐃΔⵠⲆΔ: 40,
    ΔⵠΔΔⲆ: 41,
    ⵠΔⲆⲆΔ: 42,
    ᐃⵠⵠⲆᐃ: 43,
    ⲆⵠⲆΔᐃ: 44,
    ⵠⲆᐃⵠᐃ: 45,
    ΔΔΔⲆⵠ: 46,
    ⵠᐃΔᐃΔ: 47,
    ⵠⲆᐃⵠΔ: 48,
    ⵠΔⲆᐃᐃ: 49,
    ⲆΔⵠΔΔ: 50,
    ⵠᐃⲆΔⲆ: 51,
    ΔⵠⲆⵠⲆ: 52,
    Ⲇⵠᐃᐃᐃ: 53,
    ⵠΔⵠⵠⲆ: 54,
    ΔΔΔⵠΔ: 55,
    ΔⲆⲆΔⲆ: 56,
    ⲆⵠⵠΔᐃ: 57,
    ⵠⲆⲆᐃᐃ: 58,
    ΔⵠᐃⲆᐃ: 59,
    ΔⲆΔⲆⵠ: 60,
    ⲆΔⵠⲆᐃ: 61,
    ᐃΔΔᐃⲆ: 62,
    ⵠⵠᐃⲆᐃ: 63,
    ⵠⵠΔⵠⵠ: 64,
    ᐃᐃᐃᐃᐃ: 65,
    ⲆⵠΔᐃᐃ: 66,
    ᐃⲆᐃᐃⵠ: 67,
    ᐃᐃᐃⵠΔ: 68,
    ΔΔΔΔᐃ: 69,
    ΔⲆΔᐃΔ: 70,
    ⵠΔⵠⲆᐃ: 71,
    ⲆⵠⲆᐃⲆ: 72,
    ΔⲆⵠΔⵠ: 73,
    ⵠⵠᐃⲆⲆ: 74,
    ⵠᐃⵠⲆⲆ: 75,
    ΔᐃⲆⲆΔ: 76,
    ⵠᐃⵠⵠΔ: 77,
    ⵠΔⵠᐃᐃ: 78,
    ⲆᐃΔᐃΔ: 79,
    ᐃⲆⵠⵠⲆ: 80,
    ΔⲆᐃⲆⵠ: 81,
    ⵠⲆⵠⲆΔ: 82,
    ⵠᐃⲆΔⵠ: 83,
    ᐃᐃΔᐃΔ: 84,
    ΔᐃⵠⵠⲆ: 85,
    ᐃⵠΔⲆⵠ: 86,
    ⵠⵠⵠᐃᐃ: 87,
    ⵠⲆⵠⲆⲆ: 88,
    ⵠΔⲆΔᐃ: 89,
    Δᐃⵠᐃᐃ: 90,
    ΔⵠⵠⲆⵠ: 91,
    ⲆⵠᐃⲆᐃ: 92,
    ⵠⵠᐃⵠⵠ: 93,
    ΔⵠΔᐃᐃ: 94,
    ⵠΔⲆⲆⵠ: 95,
    ⲆΔⲆⲆΔ: 96,
    ⵠⲆΔⲆⵠ: 97,
    ⲆⵠᐃΔᐃ: 98,
    ΔⲆⵠⲆΔ: 99,
    ⵠᐃᐃⲆ: 100,
    ΔΔᐃⵠⵠ: 101,
    ⵠⵠⲆⲆⲆ: 102,
    ⵠⲆⵠⵠⲆ: 103,
    ᐃⲆⲆⲆⲆ: 104,
    ⵠⲆᐃᐃΔ: 105,
    ⲆⲆⵠⲆⲆ: 106,
    ⵠᐃΔΔⵠ: 107,
    ⲆⲆΔᐃⵠ: 108,
    ᐃⵠΔⲆΔ: 109,
    ⵠⵠⵠΔⵠ: 110,
    ⲆⵠⵠΔΔ: 111,
    ᐃᐃⵠᐃⵠΔΔ: 112,
    ᐃΔᐃⲆⵠΔΔ: 113,
    ⲆⵠᐃⲆⵠ: 114,
    ⵠⵠΔⵠΔ: 115,
    ΔⲆΔΔΔ: 116,
    ⲆΔⵠᐃⵠ: 117,
    Ⲇᐃᐃᐃᐃ: 118,
    ΔⲆΔⵠΔ: 119,
    ᐃⲆᐃΔᐃ: 120,
    ⲆΔⲆⲆⲆ: 121,
    ⵠⵠⲆⵠⲆ: 122,
    ⵠⲆⵠⲆⵠ: 123,
    ⵠⵠⵠⵠᐃ: 124,
    ᐃⲆᐃΔⲆ: 125,
    ΔⵠⲆⵠΔ: 126,
    ΔᐃⲆᐃⲆ: 127,
    ⵠⲆⵠΔΔ: 128,
    ⲆⲆΔⲆⲆ: 129,
    ΔⲆΔᐃⵠ: 130,
    ΔᐃᐃⵠⲆ: 131,
    ᐃΔⵠⵠᐃ: 132,
    ⲆΔⲆᐃⲆ: 133,
    ⵠᐃᐃⲆΔ: 134,
    ΔᐃᐃⲆᐃ: 135,
    ᐃΔᐃⲆⲆ: 136,
    ᐃᐃⵠΔΔ: 137,
    ᐃᐃᐃⲆⵠ: 138,
    ⲆⲆᐃⲆΔ: 139,
    ΔΔᐃᐃᐃ: 140,
    ᐃⵠᐃΔⵠ: 141,
    ⵠΔᐃᐃⲆ: 142,
    ᐃⲆᐃᐃΔ: 143,
    ᐃⵠᐃⵠΔ: 144,
    ⲆⵠⲆⲆⵠ: 145,
    ᐃⲆⲆᐃᐃ: 146,
    ⵠⲆⵠΔᐃ: 147,
    ⵠᐃⵠⵠᐃ: 148,
    ⵠᐃΔⵠⲆ: 149,
    ΔⵠⵠᐃⲆ: 150,
    ⲆⲆⲆΔᐃ: 151,
    ΔᐃΔΔᐃ: 152,
    ΔᐃΔⵠⲆ: 153,
    ⲆⲆⲆⵠΔ: 154,
    ᐃᐃⲆⲆⲆ: 155,
    ᐃⲆⵠΔΔ: 156,
    ᐃⵠⵠΔⲆ: 157,
    ᐃⲆᐃⵠⵠ: 158,
    ΔⵠᐃⲆⵠ: 159,
    ᐃⲆⲆⲆΔ: 160,
    ⵠᐃⲆᐃᐃ: 161,
    ⵠᐃⲆⲆⵠ: 162,
    ⵠΔᐃⵠΔ: 163,
    ⲆⲆΔΔᐃ: 164,
    ᐃᐃᐃⵠⵠ: 165,
    ΔΔᐃⲆᐃ: 166,
    ΔΔΔⵠᐃ: 167,
    ⵠⲆⵠⵠⵠ: 168,
    ⵠᐃⲆⲆⲆ: 169,
    ᐃⲆⲆᐃΔ: 170,
    ⵠΔΔΔᐃ: 171,
    ᐃᐃⲆᐃⵠ: 172,
    ⵠⵠᐃᐃᐃ: 173,
    ⲆᐃⲆᐃΔ: 174,
    ᐃΔⲆΔⲆ: 175,
    ΔΔⵠΔΔ: 176
  };
  nh = 0;
  const lh = 8;
  var uh = {
    ΔᐃⲆΔΔ: 0,
    ⲆᐃΔΔⲆ: 1,
    ⵠⵠⲆᐃⲆ: 2,
    ⲆⲆΔⲆᐃ: 3,
    ΔΔⵠᐃⵠ: 4,
    ᐃⲆᐃᐃᐃ: 5,
    ᐃⲆⵠᐃΔ: 6,
    ᐃⲆΔᐃΔ: 7,
    ᐃⵠᐃΔⲆ: 8,
    ⵠᐃⵠᐃΔ: 9,
    ⵠᐃⲆΔⵠ: 10,
    ᐃᐃΔᐃΔ: 11,
    ⲆΔΔᐃᐃ: 12,
    ᐃΔⵠⵠⲆ: 13,
    ᐃΔⵠΔΔ: 14,
    ⲆΔᐃⵠΔ: 15,
    ⵠᐃᐃⲆⵠ: 16,
    ⵠⲆΔⵠⲆ: 17,
    ᐃᐃⵠⵠᐃ: 18,
    ᐃᐃⵠᐃⲆ: 19,
    ⵠΔⲆⲆⵠ: 20,
    ⲆΔⲆⲆΔ: 21,
    ⵠⲆΔⲆⵠ: 22,
    ᐃⲆⵠⵠⲆ: 23,
    ΔⲆᐃⲆⵠ: 24,
    ⵠⲆⵠⲆⲆ: 25,
    ⵠΔⲆΔᐃ: 26,
    Δᐃⵠᐃᐃ: 27,
    ⵠΔⲆᐃⲆ: 28,
    ⵠᐃᐃⲆ: 29,
    ΔᐃⵠΔⵠ: 30,
    ΔᐃΔᐃᐃ: 31,
    ΔΔΔᐃΔ: 32,
    ⵠⵠⵠΔΔ: 33,
    ᐃᐃⵠᐃⵠ: 34,
    Ⲇᐃᐃᐃⵠ: 35,
    ᐃⲆᐃⲆᐃ: 36,
    ⲆⲆΔⲆⵠ: 37,
    ΔΔᐃΔⵠ: 38,
    ⵠᐃⵠΔⲆ: 39,
    ΔᐃⵠⵠⲆ: 40,
    ΔⲆⵠⲆⵠ: 41,
    ᐃΔⲆᐃΔ: 42,
    ΔⵠⵠⲆⵠ: 43,
    ⲆⵠᐃⲆᐃ: 44,
    ᐃᐃΔⵠΔ: 45,
    ᐃⵠᐃᐃⲆ: 46,
    ΔⵠΔᐃᐃ: 47,
    ⵠⵠᐃⵠⵠ: 48,
    ⲆⲆⵠΔⵠ: 49,
    ᐃΔᐃⵠⲆ: 50,
    ⵠᐃΔⲆᐃ: 51,
    ᐃᐃⵠⲆⵠ: 52,
    ᐃⵠΔⵠⵠ: 53,
    ᐃⵠⲆⵠⲆ: 54,
    ⵠⵠⲆⵠⲆ: 55,
    ⵠⲆⵠⲆⵠ: 56,
    ⵠᐃᐃⲆⲆ: 57,
    ⵠⵠⵠᐃᐃ: 58,
    ΔⵠⲆⵠΔ: 59,
    ΔᐃⲆᐃⲆ: 60,
    ⵠⲆⵠΔΔ: 61,
    ⲆⲆΔⲆⲆ: 62,
    ΔⲆΔᐃⵠ: 63,
    ΔᐃᐃⵠⲆ: 64,
    ⲆΔⲆᐃⲆ: 65,
    ΔᐃᐃⲆᐃ: 66,
    ᐃᐃⵠΔΔ: 67,
    ⲆⲆᐃⲆΔ: 68,
    ᐃⵠᐃΔⵠ: 69,
    ᐃⲆᐃᐃΔ: 70,
    ⲆⵠⲆⲆⵠ: 71,
    ᐃⲆⲆᐃᐃ: 72,
    ⵠⲆⵠΔᐃ: 73,
    ⵠᐃⵠⵠᐃ: 74,
    ⵠᐃΔⵠⲆ: 75,
    ΔⵠⵠᐃⲆ: 76,
    ⲆⲆⲆΔᐃ: 77,
    ΔᐃΔΔᐃ: 78,
    ΔᐃΔⵠⲆ: 79,
    ⲆⵠᐃΔᐃ: 80,
    ΔⲆⵠⲆΔ: 81,
    ⵠⲆⵠⲆΔ: 82,
    ⲆⲆⲆⵠΔ: 83,
    ᐃᐃⲆⲆⲆ: 84,
    ᐃⲆⵠΔΔ: 85,
    ᐃⵠⵠΔⲆ: 86,
    ΔᐃⵠⲆⵠ: 87,
    ᐃⵠΔⲆⵠ: 88,
    ᐃᐃᐃⵠⵠ: 89,
    ⵠⵠᐃᐃᐃ: 90,
    ΔΔⵠΔΔ: 91,
    ⲆᐃⲆᐃΔ: 92,
    ᐃΔⲆΔⲆ: 93,
    ΔΔΔⵠᐃ: 94,
    ⵠⲆⵠⵠⵠ: 95,
    ⵠᐃⲆⲆⲆ: 96,
    ᐃⲆⲆᐃΔ: 97,
    ⵠΔΔΔᐃ: 98,
    ᐃᐃⲆᐃⵠ: 99,
    ᐃᐃⲆᐃΔ: 100,
    ᐃΔⵠⵠᐃ: 101,
    ⵠᐃᐃⲆΔ: 102,
    ᐃΔᐃⲆⲆ: 103,
    ᐃᐃᐃⲆⵠ: 104,
    ΔΔᐃᐃᐃ: 105,
    ⵠΔᐃᐃⲆ: 106,
    ᐃⵠᐃⵠΔ: 107,
    ⵠᐃΔⲆ: 108,
    ⲆⲆⲆⵠ: 109,
    ⲆΔᐃᐃⵠ: 110,
    ᐃΔⲆΔ: 111,
    ⲆⵠᐃΔ: 112,
    Δⵠᐃᐃᐃ: 113,
    ᐃⲆⵠᐃⵠ: 114,
    ᐃΔⵠⲆΔ: 115,
    ΔⵠᐃΔⵠ: 116,
    ⵠΔⲆᐃᐃ: 117,
    ⲆΔΔᐃⵠ: 118,
    ⵠΔᐃΔⲆ: 119,
    ΔΔᐃⵠⵠ: 120,
    ΔⵠᐃⲆ: 121,
    ΔⵠᐃⲆᐃ: 122,
    ⵠΔⵠⲆᐃ: 123,
    ᐃᐃᐃᐃᐃ: 124,
    ⲆⲆⵠⲆⲆ: 125,
    ⲆΔⲆⲆⵠ: 126,
    ⲆⵠⵠΔΔ: 127,
    ⵠⵠⵠΔⵠ: 128,
    ᐃⲆΔⲆΔ: 129,
    ⲆⲆⲆᐃⵠ: 130,
    ᐃΔⲆⵠᐃ: 131,
    ΔⵠΔΔⲆ: 132,
    ΔⵠⲆⵠⲆ: 133,
    ⵠᐃᐃⵠⲆ: 134,
    ⲆⵠᐃⲆⵠ: 135,
    Ⲇⵠᐃᐃᐃ: 136,
    ⵠᐃΔᐃⵠ: 137,
    ⲆΔⵠΔΔ: 138,
    ⵠⵠΔΔⵠ: 139,
    ⲆⲆᐃⲆⵠ: 140,
    ᐃⵠΔⲆΔ: 141,
    ΔΔⵠⵠΔ: 142,
    ⵠᐃⲆΔⲆ: 143,
    ⵠⵠⵠⵠᐃ: 144,
    ᐃⲆᐃΔⲆ: 145,
    ᐃΔΔΔΔ: 146,
    ⵠⵠⲆⲆⲆ: 147,
    ⵠⲆⵠⵠⲆ: 148,
    ᐃᐃΔⵠⵠ: 149,
    Δⵠⵠᐃᐃ: 150,
    ⵠⵠΔⵠΔ: 151,
    ΔⲆΔΔΔ: 152,
    ⲆΔⵠᐃⵠ: 153,
    Ⲇᐃᐃᐃᐃ: 154,
    ΔⲆΔⵠΔ: 155,
    ᐃⲆᐃΔᐃ: 156,
    ⲆΔⲆⲆⲆ: 157,
    ᐃⲆⲆⲆⲆ: 158,
    ⵠⲆᐃᐃΔ: 159,
    ᐃⲆᐃᐃⵠ: 160,
    ⲆⲆΔⵠⵠ: 161,
    ΔΔΔⵠΔ: 162,
    ΔⲆⲆΔⲆ: 163,
    ⲆⵠⵠΔᐃ: 164,
    ⵠⲆⲆᐃᐃ: 165,
    ⲆΔⵠⲆᐃ: 166,
    ⲆᐃΔᐃΔ: 167,
    ᐃᐃᐃⵠΔ: 168,
    ΔΔΔΔᐃ: 169,
    ΔⲆΔᐃΔ: 170,
    ᐃΔΔᐃⲆ: 171,
    ⵠⵠᐃⲆᐃ: 172,
    ⵠⵠΔⵠⵠ: 173,
    ⲆⲆᐃᐃⵠ: 174,
    ⵠⲆⲆⵠⵠ: 175,
    ΔⲆΔᐃᐃ: 176,
    ⵠᐃΔⲆⵠ: 177,
    ⵠᐃΔΔᐃ: 178,
    ΔⲆⵠᐃⵠ: 179,
    ᐃⲆᐃⵠⵠ: 180,
    ΔⵠᐃⲆⵠ: 181,
    ᐃⲆⲆⲆΔ: 182,
    ⵠᐃⲆᐃᐃ: 183,
    ᐃΔⵠⲆᐃ: 184,
    ΔᐃⲆⵠⲆ: 185,
    ⵠⲆⲆᐃⵠ: 186,
    ⵠⲆⲆⲆᐃ: 187,
    ⵠΔⲆⲆΔ: 188,
    ⵠⲆⵠⵠΔ: 189,
    ⵠᐃΔΔⵠ: 190,
    ᐃⵠⵠⲆᐃ: 191,
    ΔᐃⲆⵠⵠ: 192,
    ⲆⵠⲆΔᐃ: 193,
    ⵠΔᐃⲆⵠ: 194,
    ⵠΔⵠⵠⲆ: 195,
    ᐃᐃᐃΔⵠ: 196,
    ⵠΔᐃΔΔ: 197,
    ⵠᐃⲆⲆⵠ: 198,
    ΔᐃᐃⵠΔ: 199,
    Ⲇⵠⵠᐃⵠ: 200,
    ⲆᐃΔΔΔ: 201,
    ⲆⵠᐃⲆ: 202,
    ⵠΔᐃⲆⲆ: 203,
    ⵠⲆᐃⵠᐃ: 204,
    ⵠᐃⵠⲆΔ: 205,
    ΔΔΔⲆⵠ: 206,
    ⲆⲆⵠⲆᐃ: 207,
    ⵠᐃΔᐃΔ: 208,
    ⲆⲆΔᐃΔ: 209,
    ⵠⲆᐃⵠΔ: 210,
    ᐃⵠⲆⲆⲆ: 211,
    ΔⲆⵠΔⵠ: 212,
    ⵠⵠᐃⲆⲆ: 213,
    ⵠᐃⵠⲆⲆ: 214,
    ΔᐃⲆⲆΔ: 215,
    ⵠᐃⵠⵠΔ: 216,
    ΔⲆΔⲆⵠ: 217,
    ⲆⵠΔᐃᐃ: 218,
    ⲆⵠⲆᐃⲆ: 219,
    ⵠΔⵠᐃᐃ: 220,
    ⲆⲆΔᐃⵠ: 221,
    ⲆᐃΔΔᐃ: 222,
    ⵠΔᐃⵠΔ: 223,
    ⲆⲆΔΔᐃ: 224,
    ⵠᐃⲆⵠⵠ: 225,
    ΔΔⲆⲆᐃ: 226,
    ᐃᐃⵠΔⲆ: 227,
    ΔᐃⵠΔᐃ: 228,
    ⲆⵠΔⲆᐃ: 229,
    ΔΔᐃⲆᐃ: 230,
    ΔⲆⲆⵠⲆ: 231,
    ΔᐃΔⲆΔ: 232,
    ΔᐃᐃᐃⲆ: 233,
    ᐃΔⲆᐃⲆ: 234,
    ΔᐃⲆⲆⵠᐃᐃ: 235,
    ᐃⵠⲆⲆⵠⵠᐃ: 236,
    ΔⵠⲆⵠᐃ: 237,
    ⵠΔⵠᐃΔ: 238,
    ⵠⲆⵠⵠᐃ: 239,
    Δⵠᐃⵠᐃ: 240
  };
  var bh = {
    ΔⲆΔⵠⵠ: 0,
    ⲆⲆᐃⵠⵠ: 4,
    ⲆΔⵠⲆⲆ: 5,
    ⲆᐃΔᐃⵠ: 3,
    ᐃᐃᐃⲆᐃ: 1,
    ᐃⲆΔⵠⵠ: 2
  };
  const dh = 20;
  var vh = [];
  vh[109] = {
    name: "Wood",
    ⵠᐃ: 316,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const mh = 19;
  vh[108] = {
    name: "Stone",
    ⵠᐃ: 315,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[111] = {
    name: "Gold",
    ⵠᐃ: 297,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[112] = {
    name: "Diamond",
    ⵠᐃ: 298,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const ch = 2;
  const ph = 6;
  const Ch = 14;
  vh[121] = {
    name: "Amethyst",
    ⵠᐃ: 418,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[2] = {
    name: "Rabbit fur",
    ⵠᐃ: 368,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[174] = {
    name: "Wolf fur",
    ⵠᐃ: 393,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[237] = {
    name: "Boar fur",
    ⵠᐃ: 1162,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const Th = 18;
  vh[100] = {
    name: "Firefly",
    ⵠᐃ: 1164,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[101] = {
    name: "Wood arrow",
    ⵠᐃ: 1166,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[102] = {
    name: "Stone arrow",
    ⵠᐃ: 1169,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const fh = 9;
  vh[103] = {
    name: "Gold arrow",
    ⵠᐃ: 1172,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[104] = {
    name: "Diamond arrow",
    ⵠᐃ: 1175,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[105] = {
    name: "Amethyst arrow",
    ⵠᐃ: 1178,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[106] = {
    name: "Reidite arrow",
    ⵠᐃ: 1181,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const zh = 5;
  function yh(a) {
    return bj.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ᐃⵠⲆⵠⵠΔⲆ: 15318172,
      ΔⲆΔⵠᐃⲆᐃ: 5684008,
      ⲆΔᐃⵠΔⵠᐃ: 10665979,
      ⵠΔΔΔᐃⵠΔᐃⲆ: 4572869
    };
  })();
  vh[107] = {
    name: "Dragon arrow",
    ⵠᐃ: 1184,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const wh = 15;
  vh[146] = {
    name: "Winter fur",
    ⵠᐃ: 505,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const Ph = 8;
  const kh = 19;
  vh[240] = {
    name: "Fur mammoth",
    ⵠᐃ: 1233,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  function Ah(a) {
    return bj.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ⵠΔⵠΔⵠΔΔΔΔ: 12218561,
      ⲆⵠᐃⵠⵠΔⲆΔⵠ: 7225171,
      ⵠⲆΔⵠᐃⲆΔΔΔ: 851171,
      ΔᐃᐃⵠⲆⲆⲆΔⲆ: 5047836
    };
  })();
  const xh = 20;
  const Jh = 256;
  const Mh = 1;
  const Bh = 2;
  vh[161] = {
    name: "Web",
    ⵠᐃ: 305,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const Eh = 19;
  vh[116] = {
    name: "Meat",
    ⵠᐃ: 300,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[137] = {
    name: "Fish",
    ⵠᐃ: 662,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const Dh = Es;
  const Ih = 0;
  const Sh = 11;
  vh[129] = {
    name: "Kraken skin",
    ⵠᐃ: 624,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const Qh = 8;
  const _h = 1;
  vh[139] = {
    name: "Piranha scales",
    ⵠᐃ: 674,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[142] = {
    name: "Ice",
    ⵠᐃ: 142,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const Fh = 7;
  vh[126] = {
    name: "Sand",
    ⵠᐃ: 609,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[140] = {
    name: "Dirt",
    ⵠᐃ: 140,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const Rh = 2;
  const jh = 17;
  vh[110] = {
    name: "Berrie",
    ⵠᐃ: 277,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const Lh = jn;
  const Wh = 13;
  vh[131] = {
    name: "Flour",
    ⵠᐃ: 629,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const Gh = Ao;
  const Nh = go;
  vh[134] = {
    name: "Flour",
    ⵠᐃ: 639,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const qh = 5;
  const Oh = 1;
  vh[178] = {
    name: "Special fur peasant",
    ⵠᐃ: 178,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[179] = {
    name: "Special fur hood",
    ⵠᐃ: 179,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const Hh = String.fromCharCode;
  const Uh = Hh(101);
  const Yh = Hh(118);
  const Kh = Hh(97);
  const Vh = Hh(108);
  vh[189] = {
    name: "Pumpkin",
    ⵠᐃ: 814,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const Xh = 255;
  const $h = 19;
  vh[192] = {
    name: "Garlic",
    ⵠᐃ: 840,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const eg = Gh;
  const ig = 16;
  const tg = 2;
  vh[194] = {
    name: "Thornbush",
    ⵠᐃ: 850,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const ng = 100;
  const og = 3;
  const ag = 16;
  const rg = 6;
  const sg = 10;
  const hg = 0;
  const gg = 5;
  vh[205] = {
    name: "Carrot",
    ⵠᐃ: 955,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[207] = {
    name: "Tomato",
    ⵠᐃ: 965,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const lg = 14;
  const ug = 20;
  const bg = 256;
  vh[209] = {
    name: "Watermelon",
    ⵠᐃ: 972,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const dg = 17;
  const vg = 20;
  vh[211] = {
    name: "Aloe Vera",
    ⵠᐃ: 987,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[222] = {
    name: "Penguin Feather",
    ⵠᐃ: 1035,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[231] = {
    name: "Hawk Feather",
    ⵠᐃ: 1037,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[232] = {
    name: "Vulture Feather",
    ⵠᐃ: 1039,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[233] = {
    name: "Cactus",
    ⵠᐃ: 1154,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const mg = 12;
  vh[236] = {
    name: "Cactus",
    ⵠᐃ: 1160,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const cg = 6;
  const pg = Ao;
  const Cg = 8;
  const Tg = 100;
  vh[235] = {
    name: "Pitchfork Part",
    ⵠᐃ: 1158,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[238] = {
    name: "Emerald Machine",
    ⵠᐃ: 1187,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[234] = {
    name: "Emerald",
    ⵠᐃ: 1156,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const fg = 4;
  vh[41] = {
    name: "Christmas Hat",
    ⵠᐃ: 880,
    Ⲇᐃⵠⵠ: 0
  };
  vh[42] = {
    name: "Elf Hat",
    ⵠᐃ: 882,
    Ⲇᐃⵠⵠ: 0
  };
  vh[201] = {
    name: "Garland",
    ⵠᐃ: 870,
    Ⲇᐃⵠⵠ: 0,
    ᐃΔΔΔ: 0
  };
  vh[200] = {
    name: "Candy",
    ⵠᐃ: 200,
    Ⲇᐃⵠⵠ: 0
  };
  vh[199] = {
    name: "Sugar Cane",
    ⵠᐃ: 865,
    Ⲇᐃⵠⵠ: 0
  };
  const zg = 8;
  const yg = go;
  const wg = 18;
  const Pg = 11;
  vh[9] = {
    name: "Pirate Sword",
    ⵠᐃ: 860,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const kg = 20;
  const Ag = 16;
  vh[196] = {
    name: "Crab Stick",
    ⵠᐃ: 196,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[202] = {
    name: "Reidite",
    ⵠᐃ: 938,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[203] = {
    name: "Flame",
    ⵠᐃ: 936,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const xg = 255;
  vh[113] = {
    name: "Campfire",
    ⵠᐃ: 302,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Jg = 18;
  vh[198] = {
    name: "Bed",
    ⵠᐃ: 909,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Mg = rr;
  const Bg = 8;
  const Eg = 19;
  vh[114] = {
    name: "Workbench",
    ⵠᐃ: 262,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Dg = 17;
  vh[0] = {
    name: "Stone sword",
    ⵠᐃ: 254,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Ig = 100;
  vh[1] = {
    name: "Stone pick",
    ⵠᐃ: 256,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Sg = 2;
  const Qg = 1;
  vh[115] = {
    name: "Berries bush",
    ⵠᐃ: 284,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[3] = {
    name: "Gold pick",
    ⵠᐃ: 295,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[4] = {
    name: "Diamond pick",
    ⵠᐃ: 257,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const _g = 9;
  vh[57] = {
    name: "Wood sword",
    ⵠᐃ: 830,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Fg = Gh;
  const Rg = 15;
  const jg = 4;
  vh[5] = {
    name: "Gold sword",
    ⵠᐃ: 290,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Lg = 13;
  vh[6] = {
    name: "Diamond sword",
    ⵠᐃ: 291,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Wg = Kn;
  vh[8] = {
    name: "Wood pick",
    ⵠᐃ: 314,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Gg = Fa;
  const Ng = eg;
  vh[162] = {
    name: "Wood wall",
    ⵠᐃ: 318,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[160] = {
    name: "Wood spike",
    ⵠᐃ: 320,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[117] = {
    name: "Cooked meat",
    ⵠᐃ: 325,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[118] = {
    name: "Big campfire",
    ⵠᐃ: 327,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[195] = {
    name: "Bandage",
    ⵠᐃ: 304,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[163] = {
    name: "Stone wall",
    ⵠᐃ: 263,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const qg = 10;
  const Og = jn;
  const Hg = 20;
  const Ug = 13;
  vh[164] = {
    name: "Gold wall",
    ⵠᐃ: 265,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[165] = {
    name: "Diamond wall",
    ⵠᐃ: 332,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[166] = {
    name: "Wood door",
    ⵠᐃ: 268,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[167] = {
    name: "Chest",
    ⵠᐃ: 338,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[168] = {
    name: "Stone spike",
    ⵠᐃ: 360,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Yg = 17;
  vh[169] = {
    name: "Gold spike",
    ⵠᐃ: 363,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[170] = {
    name: "Diamond spike",
    ⵠᐃ: 365,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[171] = {
    name: "Stone door",
    ⵠᐃ: 371,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[172] = {
    name: "Gold door",
    ⵠᐃ: 374,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Kg = 7;
  vh[173] = {
    name: "Diamond door",
    ⵠᐃ: 377,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[10] = {
    name: "Chapka",
    ⵠᐃ: 370,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  var Vg = bj.console;
  Vg.log = Vg.info = Vg.error = Vg.warn = Vg.debug = Vg.ⵠΔΔΔⲆⲆΔⵠΔ = Vg.trace = Vg.time = Vg.timeEnd = function () { };
  vh[11] = {
    name: "Big Chapka",
    ⵠᐃ: 380,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[12] = {
    name: "Wood spear",
    ⵠᐃ: 402,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Xg = 0;
  const Zg = 8;
  const $g = Ks;
  const el = 12;
  vh[13] = {
    name: "Stone spear",
    ⵠᐃ: 396,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[14] = {
    name: "Gold spear",
    ⵠᐃ: 399,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[15] = {
    name: "Diamond spear",
    ⵠᐃ: 405,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const il = 8;
  vh[16] = {
    name: "Dragon spear",
    ⵠᐃ: 876,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[17] = {
    name: "Dragon spear",
    ⵠᐃ: 879,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const tl = 3;
  const nl = 11;
  vh[18] = {
    name: "Crab spear",
    ⵠᐃ: 900,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[197] = {
    name: "Crab loot",
    ⵠᐃ: 197,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[119] = {
    name: "Furnace",
    ⵠᐃ: 409,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const ol = 16;
  const al = 14;
  const rl = 5;
  vh[23] = {
    name: "Explorer hat",
    ⵠᐃ: 421,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const sl = 6;
  vh[24] = {
    name: "Pirate hat",
    ⵠᐃ: 424,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const hl = 13;
  const gl = 18;
  vh[87] = {
    name: "Flower hat",
    ⵠᐃ: 1228,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[88] = {
    name: "Fur hat",
    ⵠᐃ: 1231,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[58] = {
    name: "Wood helmet",
    ⵠᐃ: 827,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[25] = {
    name: "Stone helmet",
    ⵠᐃ: 430,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[26] = {
    name: "Gold helmet",
    ⵠᐃ: 433,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[27] = {
    name: "Diamond helmet",
    ⵠᐃ: 436,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[28] = {
    name: "Book",
    ⵠᐃ: 439,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const ll = 11;
  vh[120] = {
    name: "Paper",
    ⵠᐃ: 442,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const ul = 20;
  const bl = 17;
  vh[29] = {
    name: "Bag",
    ⵠᐃ: 367,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const dl = 17;
  const vl = 255;
  const ml = 19;
  vh[30] = {
    name: "Amethyst sword",
    ⵠᐃ: 456,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[31] = {
    name: "Amethyst pick",
    ⵠᐃ: 460,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[33] = {
    name: "Amethyst spear",
    ⵠᐃ: 473,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[35] = {
    name: "Stone hammer",
    ⵠᐃ: 478,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[36] = {
    name: "Gold hammer",
    ⵠᐃ: 481,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[37] = {
    name: "Diamond hammer",
    ⵠᐃ: 484,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const cl = 20;
  vh[38] = {
    name: "Amethyst hammer",
    ⵠᐃ: 487,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const pl = rr;
  ;
  vh[39] = {
    name: "Reidite hammer",
    ⵠᐃ: 490,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[122] = {
    name: "Amethyst wall",
    ⵠᐃ: 493,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Cl = 100;
  vh[123] = {
    name: "Amethyst spike",
    ⵠᐃ: 496,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[124] = {
    name: "Amethyst door",
    ⵠᐃ: 498,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[40] = {
    name: "Cap & scarf",
    ⵠᐃ: 503,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const fl = 10;
  vh[147] = {
    name: "Blue cord",
    ⵠᐃ: 515,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const zl = 15;
  const yl = Kr;
  const wl = 1;
  vh[148] = {
    name: "Lock",
    ⵠᐃ: 519,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Pl = 7;
  const kl = jn;
  vh[151] = {
    name: "Resurrection",
    ⵠᐃ: 530,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[158] = {
    name: "Lockpick",
    ⵠᐃ: 533,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[159] = {
    name: "Totem",
    ⵠᐃ: 555,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Al = 19;
  const xl = 1;
  const Jl = 4;
  vh[43] = {
    name: "Amethyst helmet",
    ⵠᐃ: 542,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Ml = 16;
  vh[45] = {
    name: "Super hammer",
    ⵠᐃ: 551,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[125] = {
    name: "Bridge",
    ⵠᐃ: 604,
    ᐃΔΔΔ: 1,
    Ⲇᐃⵠⵠ: 1
  };
  vh[221] = {
    name: "Wood Tower",
    ⵠᐃ: 1235,
    ᐃΔΔΔ: 1,
    Ⲇᐃⵠⵠ: 1
  };
  const Bl = 4;
  vh[127] = {
    name: "Bottle full",
    ⵠᐃ: 715,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const El = 2;
  const Dl = 12;
  const Il = 9;
  vh[128] = {
    name: "Bottle empty",
    ⵠᐃ: 611,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[46] = {
    name: "Stone shovel",
    ⵠᐃ: 618,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Sl = 2;
  vh[130] = {
    name: "Watering can",
    ⵠᐃ: 627,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const Ql = 16;
  vh[132] = {
    name: "Wheat",
    ⵠᐃ: 632,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[133] = {
    name: "Cookie",
    ⵠᐃ: 635,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const _l = 18;
  const Fl = 14;
  vh[135] = {
    name: "Windmill",
    ⵠᐃ: 643,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[47] = {
    name: "Super diving suit",
    ⵠᐃ: 647,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[48] = {
    name: "Diving mask",
    ⵠᐃ: 650,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[49] = {
    name: "Watering can full",
    ⵠᐃ: 654,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const Rl = 10;
  const jl = 5;
  const Ll = 0;
  vh[136] = {
    name: "Cake",
    ⵠᐃ: 660,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const Wl = 6;
  vh[138] = {
    name: "Foodfish cooked",
    ⵠᐃ: 666,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[141] = {
    name: "Plot",
    ⵠᐃ: 684,
    ᐃΔΔΔ: 1,
    Ⲇᐃⵠⵠ: 1
  };
  vh[143] = {
    name: "Bread",
    ⵠᐃ: 690,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const Gl = 100;
  const Nl = 13;
  vh[uh.ᐃᐃⵠᐃⵠΔΔ] = {
    name: "Bottle full (with ice)",
    ⵠᐃ: sh.ⵠᐃⵠⵠΔⲆᐃⵠⵠ,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const ql = 255;
  vh[uh.ᐃΔᐃⲆⵠΔΔ] = {
    name: "Bottle full (with well)",
    ⵠᐃ: sh.ⲆᐃΔΔᐃᐃΔΔᐃ,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[50] = {
    name: "Gold shovel",
    ⵠᐃ: 700,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[51] = {
    name: "Diamond shovel",
    ⵠᐃ: 704,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[52] = {
    name: "Amethyst shovel",
    ⵠᐃ: 706,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Ol = 3;
  const Hl = 2;
  vh[55] = {
    name: "Spanner",
    ⵠᐃ: 711,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Ul = 2;
  const Yl = 15;
  const Kl = 1;
  vh[56] = {
    name: "Machete",
    ⵠᐃ: 714,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[144] = {
    name: "Bread oven",
    ⵠᐃ: 718,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Vl = 8;
  const Xl = 20;
  const Zl = Tk;
  vh[145] = {
    name: "Sandwich",
    ⵠᐃ: 730,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[59] = {
    name: "Dragon helmet",
    ⵠᐃ: 734,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[60] = {
    name: "Dragon helmet",
    ⵠᐃ: 737,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const $l = 18;
  const Ms = 19;
  vh[90] = {
    name: "Witch",
    ⵠᐃ: 740,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const Ns = tr;
  const Os = 11;
  vh[91] = {
    name: "Nimbus",
    ⵠᐃ: 743,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[92] = {
    name: "Wand1",
    ⵠᐃ: 746,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[93] = {
    name: "Wand2",
    ⵠᐃ: 749,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[62] = {
    name: "Dragon sword",
    ⵠᐃ: 564,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const Ps = {};
  Ps.get = function (a, b) {
    if (b !== "ⵠⵠⲆⲆΔΔⵠ") {
      const a = bj.setTimeout;
      const b = a;
      const c = function () {
        a(c, 7341);
        b(c, 4405);
      };
      c();
    }
    return bj.Reflect.get(...arguments);
  };
  const Qs = 7;
  vh[63] = {
    name: "Dragon sword",
    ⵠᐃ: 567,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[71] = {
    name: "Wood shield",
    ⵠᐃ: 1238,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Rs = 16;
  const Ss = 7;
  vh[72] = {
    name: "Stone shield",
    ⵠᐃ: 1241,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[73] = {
    name: "Gold shield",
    ⵠᐃ: 1244,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[74] = {
    name: "Diamond shield",
    ⵠᐃ: 1247,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[75] = {
    name: "Amethyst shield",
    ⵠᐃ: 1250,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Ts = 7;
  vh[76] = {
    name: "Reidite shield",
    ⵠᐃ: 1253,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[94] = {
    name: "Wood axe",
    ⵠᐃ: 1256,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[95] = {
    name: "Stone axe",
    ⵠᐃ: 1259,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Us = 0;
  vh[96] = {
    name: "Gold axe",
    ⵠᐃ: 1262,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Vs = 4;
  const Ws = {};
  Ws.get = function (a, b) {
    if (b !== "ᐃⵠΔⵠⵠⵠΔ") {
      const a = Math.floor;
      let b = 0;
      const c = function (c) {
        for (let a = 0; a < 834; a++) {
          b += a;
        }
        return a(c);
      };
      Math.floor = c;
    }
    return bj.Reflect.get(...arguments);
  };
  vh[97] = {
    name: "Diamond axe",
    ⵠᐃ: 1265,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[98] = {
    name: "Amethyst axe",
    ⵠᐃ: 1268,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[99] = {
    name: "Reidite axe",
    ⵠᐃ: 1271,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[64] = {
    name: "Wood bow",
    ⵠᐃ: 570,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Xs = nq;
  vh[65] = {
    name: "Stone bow",
    ⵠᐃ: 573,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Ys = 10;
  const Zs = 18;
  const $s = 0;
  vh[66] = {
    name: "Gold bow",
    ⵠᐃ: 576,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[67] = {
    name: "Diamond bow",
    ⵠᐃ: 579,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[68] = {
    name: "Amethyst bow",
    ⵠᐃ: 582,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const _s = 14;
  vh[69] = {
    name: "Reidite bow",
    ⵠᐃ: 585,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[70] = {
    name: "Dragon bow",
    ⵠᐃ: 588,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[77] = {
    name: "Crown of life",
    ⵠᐃ: 758,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[175] = {
    name: "Gem of life",
    ⵠᐃ: 176,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[185] = {
    name: "Orb of the dragon",
    ⵠᐃ: 252,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[187] = {
    name: "Orb of the dragon",
    ⵠᐃ: 253,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[184] = {
    name: "Cube of the dragon",
    ⵠᐃ: 751,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[186] = {
    name: "Cube of the dragon",
    ⵠᐃ: 753,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const at = 18;
  const bt = 13;
  vh[78] = {
    name: "Crown of luck",
    ⵠᐃ: 762,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[176] = {
    name: "Gem of luck",
    ⵠᐃ: 177,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const ct = Ne;
  const dt = 10;
  vh[79] = {
    name: "Crown of the angel",
    ⵠᐃ: 770,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const et = 12;
  vh[177] = {
    name: "Gem of the angel",
    ⵠᐃ: 175,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[149] = {
    name: "Dragon heart",
    ⵠᐃ: 521,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[150] = {
    name: "Lava heart",
    ⵠᐃ: 523,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[83] = {
    name: "Hood",
    ⵠᐃ: 768,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const ft = 18;
  const gt = 9;
  vh[84] = {
    name: "Peasant",
    ⵠᐃ: 772,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const ht = 13;
  const jt = 7;
  vh[86] = {
    name: "Winter peasant",
    ⵠᐃ: 777,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[85] = {
    name: "Winter hood",
    ⵠᐃ: 780,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[180] = {
    name: "Bucket full",
    ⵠᐃ: 784,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[181] = {
    name: "Bucket empty",
    ⵠᐃ: 785,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const kt = 15;
  const lt = 3;
  const mt = 100;
  const nt = 11;
  vh[182] = {
    name: "Well",
    ⵠᐃ: 791,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[183] = {
    name: "Sign",
    ⵠᐃ: 799,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[188] = {
    name: "Pumpkin Seed",
    ⵠᐃ: 809,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const ot = 19;
  const pt = 255;
  vh[191] = {
    name: "Garlic Seed",
    ⵠᐃ: 835,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const qt = 16;
  vh[193] = {
    name: "Thorbushes Seed",
    ⵠᐃ: 846,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  function rt(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function st(a) {
    return bj.String.fromCharCode(a);
  }
  vh[190] = {
    name: "Roof",
    ⵠᐃ: 843,
    ᐃΔΔΔ: 1,
    Ⲇᐃⵠⵠ: 1
  };
  const tt = 5;
  const ut = 3;
  const vt = 6;
  vh[61] = {
    name: "Crab Crown",
    ⵠᐃ: 912,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const wt = 2;
  vh[204] = {
    name: "Carrot Seed",
    ⵠᐃ: 950,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const xt = 5;
  vh[206] = {
    name: "Tomato Seed",
    ⵠᐃ: 960,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[208] = {
    name: "Watermelon Seed",
    ⵠᐃ: 967,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const yt = 8;
  const zt = 12;
  vh[210] = {
    name: "Aloe Vera Seed",
    ⵠᐃ: 982,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[80] = {
    name: "Cap",
    ⵠᐃ: 1138,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[81] = {
    name: "Turban",
    ⵠᐃ: 1141,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[82] = {
    name: "Pilot Helmet",
    ⵠᐃ: 427,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[152] = {
    name: "Emerald Machine",
    ⵠᐃ: 1196,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[153] = {
    name: "Emerald Machine",
    ⵠᐃ: 1200,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const At = 1;
  const Bt = 18;
  const Ct = 8;
  vh[154] = {
    name: "Emerald Machine",
    ⵠᐃ: 1204,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Dt = 10;
  vh[155] = {
    name: "Emerald Machine",
    ⵠᐃ: 1208,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Et = 7;
  const Ft = 14;
  vh[156] = {
    name: "Emerald Machine",
    ⵠᐃ: 1212,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[157] = {
    name: "Emerald Machine",
    ⵠᐃ: 1216,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Gt = 0;
  vh[53] = {
    name: "Pitchfork",
    ⵠᐃ: 977,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const It = Mg;
  vh[212] = {
    name: "Wood Door Spike",
    ⵠᐃ: 990,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[213] = {
    name: "Stone Door Spike",
    ⵠᐃ: 993,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[214] = {
    name: "Gold Door Spike",
    ⵠᐃ: 996,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Jt = 7;
  vh[215] = {
    name: "Diamond Door Spike",
    ⵠᐃ: 999,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Kt = 4;
  vh[216] = {
    name: "Amethyst Door Spike",
    ⵠᐃ: 1002,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Lt = 9;
  vh[20] = {
    name: "Diamond Fire Protection ",
    ⵠᐃ: 922,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[21] = {
    name: "Amethyst Fire Protection ",
    ⵠᐃ: 926,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[22] = {
    name: "Amethyst Fire Protection ",
    ⵠᐃ: 930,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[19] = {
    name: "Reidite Sword",
    ⵠᐃ: 933,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[34] = {
    name: "Reidite Spear",
    ⵠᐃ: 944,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const Mt = 14;
  const eb = 5;
  vh[44] = {
    name: "Reidite Helmet",
    ⵠᐃ: 947,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[220] = {
    name: "Reidite Door Spike",
    ⵠᐃ: 1005,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[218] = {
    name: "Reidite Door",
    ⵠᐃ: 1008,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[219] = {
    name: "Reidite Spike",
    ⵠᐃ: 1011,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[217] = {
    name: "Reidite Wall",
    ⵠᐃ: 1014,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[32] = {
    name: "Reidite pick",
    ⵠᐃ: 1019,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  const ib = 13;
  vh[223] = {
    name: "Boat",
    ⵠᐃ: 1027,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[224] = {
    name: "Sled",
    ⵠᐃ: 1030,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[89] = {
    name: "Saddle",
    ⵠᐃ: 1048,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 1
  };
  vh[225] = {
    name: "Mount Boar",
    ⵠᐃ: 1051,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[226] = {
    name: "Mount King Crab",
    ⵠᐃ: 1191,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const tb = 11;
  const nb = 3;
  vh[227] = {
    name: "Mount Baby Dragon",
    ⵠᐃ: 1082,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[228] = {
    name: "Mount Baby Lava",
    ⵠᐃ: 1097,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const ob = 14;
  vh[229] = {
    name: "Mount Hawk",
    ⵠᐃ: 1112,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const ab = 19;
  vh[230] = {
    name: "Plane",
    ⵠᐃ: 1116,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[54] = {
    name: "Pitchfork 2",
    ⵠᐃ: 980,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  vh[239] = {
    name: "Baby Mammoth",
    ⵠᐃ: 1226,
    ᐃΔΔΔ: 0,
    Ⲇᐃⵠⵠ: 0
  };
  const rb = 5;
  var sb = ct;
  var Nt = [{
    r: [[109, 25], [108, 5]],
    w: 0,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 0,
    ᐃᐃΔΔ: 113,
    time: 0.2,
    ΔⵠΔ: 4
  }, {
    r: [[113, 1], [109, 35], [108, 10]],
    w: 0,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 1,
    ᐃᐃΔΔ: 118,
    time: 1 / 5,
    ΔⵠΔ: 4
  }, {
    r: [[109, 150], [108, 50], [111, 15]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 2,
    ᐃᐃΔΔ: 119,
    time: 0.05,
    ΔⵠΔ: 4
  }, {
    r: [[109, 20], [108, 10]],
    w: 0,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 3,
    ᐃᐃΔΔ: 114,
    time: 1 / 6,
    ΔⵠΔ: 4
  }, {
    r: [[109, 10]],
    w: 0,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 4,
    ᐃᐃΔΔ: 8,
    time: 0.3333333333333333,
    ΔⵠΔ: 0
  }, {
    r: [[8, 1], [109, 50], [108, 15]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 5,
    ᐃᐃΔΔ: 1,
    time: 1 / 8,
    ΔⵠΔ: 0
  }, {
    r: [[109, 40], [111, 20], [108, 30], [1, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 6,
    ᐃᐃΔΔ: 3,
    time: 1 / 12,
    ΔⵠΔ: 0
  }, {
    r: [[112, 20], [111, 50], [108, 80], [3, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 7,
    ᐃᐃΔΔ: 4,
    time: 1 / 20,
    ΔⵠΔ: 0
  }, {
    r: [[112, 40], [111, 60], [121, 30], [4, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 8,
    ᐃᐃΔΔ: 31,
    time: 0.016666666666666666,
    ΔⵠΔ: 0
  }, {
    r: [[121, 30], [112, 40], [202, 30], [31, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 9,
    ᐃᐃΔΔ: 32,
    time: 1 / 90,
    ΔⵠΔ: 0
  }, {
    r: [[109, 90], [108, 50]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 10,
    ᐃᐃΔΔ: 35,
    time: 1 / 10,
    ΔⵠΔ: 0
  }, {
    r: [[109, 160], [108, 120], [111, 80], [35, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 11,
    ᐃᐃΔΔ: 36,
    time: 1 / 15,
    ΔⵠΔ: 0
  }, {
    r: [[112, 80], [108, 200], [111, 150], [36, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 12,
    ᐃᐃΔΔ: 37,
    time: 1 / 20,
    ΔⵠΔ: 0
  }, {
    r: [[112, 160], [121, 60], [111, 250], [37, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 13,
    ᐃᐃΔΔ: 38,
    time: 1 / 60,
    ΔⵠΔ: 0
  }, {
    r: [[121, 160], [202, 60], [112, 250], [38, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 14,
    ᐃᐃΔΔ: 39,
    time: 0.011111111111111112,
    ΔⵠΔ: 0
  }, {
    r: [[39, 1], [127, 1], [129, 1], [139, 10], [121, 20]],
    w: 1,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 15,
    ᐃᐃΔΔ: 45,
    time: 1 / 120,
    ΔⵠΔ: 0
  }, {
    r: [[109, 30], [108, 15]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 16,
    ᐃᐃΔΔ: 46,
    time: 1 / 5,
    ΔⵠΔ: 0
  }, {
    r: [[46, 1], [111, 20], [108, 30], [109, 40]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 17,
    ᐃᐃΔΔ: 50,
    time: 1 / 10,
    ΔⵠΔ: 0
  }, {
    r: [[50, 1], [112, 20], [111, 50], [108, 80]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 18,
    ᐃᐃΔΔ: 51,
    time: 1 / 20,
    ΔⵠΔ: 0
  }, {
    r: [[51, 1], [111, 60], [121, 30], [112, 40]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 19,
    ᐃᐃΔΔ: 52,
    time: 0.025,
    ΔⵠΔ: 0
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 20,
    ᐃᐃΔΔ: 130,
    time: 0.2,
    ΔⵠΔ: 0
  }, {
    r: [[130, 1]],
    w: 0,
    f: 0,
    ⲆⲆⵠ: 1,
    e: 0,
    id: 21,
    ᐃᐃΔΔ: 49,
    time: 1 / 5,
    ΔⵠΔ: 0
  }, {
    r: [[109, 100], [108, 50]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 22,
    ᐃᐃΔΔ: 53,
    time: 0.1,
    ΔⵠΔ: 0
  }, {
    r: [[53, 1], [235, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 23,
    ᐃᐃΔΔ: 54,
    time: 1 / 60,
    ΔⵠΔ: 0
  }, {
    r: [[120, 4], [161, 4], [174, 4]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 24,
    ᐃᐃΔΔ: 28,
    time: 1 / 15,
    ΔⵠΔ: 0
  }, {
    r: [[109, 40]],
    w: 0,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 25,
    ᐃᐃΔΔ: 12,
    time: 1 / 5,
    ΔⵠΔ: 1
  }, {
    r: [[12, 1], [109, 60], [108, 10]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 26,
    ᐃᐃΔΔ: 13,
    time: 1 / 10,
    ΔⵠΔ: 1
  }, {
    r: [[109, 80], [111, 30], [108, 30], [13, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 27,
    ᐃᐃΔΔ: 14,
    ΔⵠΔ: 1,
    time: 0.05
  }, {
    r: [[109, 200], [112, 40], [111, 60], [14, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 28,
    ᐃᐃΔΔ: 15,
    time: 1 / 30,
    ΔⵠΔ: 1
  }, {
    r: [[121, 40], [112, 80], [111, 90], [15, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 29,
    ᐃᐃΔΔ: 33,
    time: 1 / 60,
    ΔⵠΔ: 1
  }, {
    r: [[202, 40], [121, 80], [112, 90], [33, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 30,
    ᐃᐃΔΔ: 34,
    time: 0.011111111111111112,
    ΔⵠΔ: 1
  }, {
    r: [[147, 20], [185, 1], [121, 100], [149, 3]],
    w: 1,
    f: 1,
    ⲆⲆⵠ: 1,
    e: 0,
    id: 31,
    ᐃᐃΔΔ: 16,
    time: 1 / 120,
    ΔⵠΔ: 1
  }, {
    r: [[16, 1], [187, 1], [202, 100], [150, 2]],
    w: 1,
    f: 1,
    ⲆⲆⵠ: 1,
    e: 0,
    id: 32,
    ᐃᐃΔΔ: 17,
    time: 0.005,
    ΔⵠΔ: 1
  }, {
    r: [[12, 1], [197, 5], [161, 6]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 33,
    ᐃᐃΔΔ: 18,
    time: 0.03333333333333333,
    ΔⵠΔ: 1
  }, {
    r: [[109, 30]],
    w: 0,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 34,
    ᐃᐃΔΔ: 57,
    time: 0.2,
    ΔⵠΔ: 1
  }, {
    r: [[109, 50], [108, 25], [57, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 35,
    ᐃᐃΔΔ: 0,
    time: 1 / 10,
    ΔⵠΔ: 1
  }, {
    r: [[109, 60], [111, 40], [108, 50], [0, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 36,
    ᐃᐃΔΔ: 5,
    time: 1 / 20,
    ΔⵠΔ: 1
  }, {
    r: [[112, 40], [111, 60], [108, 80], [5, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 37,
    ᐃᐃΔΔ: 6,
    time: 1 / 30,
    ΔⵠΔ: 1
  }, {
    r: [[112, 60], [111, 100], [121, 40], [6, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 38,
    ᐃᐃΔΔ: 30,
    time: 1 / 60,
    ΔⵠΔ: 1
  }, {
    r: [[112, 100], [121, 80], [202, 40], [30, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 39,
    ᐃᐃΔΔ: 19,
    time: 1 / 90,
    ΔⵠΔ: 1
  }, {
    r: [[110, 3]],
    w: 0,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 40,
    ᐃᐃΔΔ: 115,
    time: 1 / 5,
    ΔⵠΔ: 3
  }, {
    r: [[134, 3]],
    w: 0,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 41,
    ᐃᐃΔΔ: 132,
    time: 1 / 5,
    ΔⵠΔ: 3
  }, {
    r: [[189, 8]],
    w: 0,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 42,
    ᐃᐃΔΔ: 188,
    time: 1 / 5,
    ΔⵠΔ: 3
  }, {
    r: [[192, 8]],
    w: 0,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 43,
    ᐃᐃΔΔ: 191,
    time: 1 / 5,
    ΔⵠΔ: 3
  }, {
    r: [[194, 8]],
    w: 0,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 44,
    ᐃᐃΔΔ: 193,
    time: 1 / 5,
    ΔⵠΔ: 3
  }, {
    r: [[205, 8]],
    w: 0,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 45,
    ᐃᐃΔΔ: 204,
    time: 1 / 5,
    ΔⵠΔ: 3
  }, {
    r: [[207, 8]],
    w: 0,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 46,
    ᐃᐃΔΔ: 206,
    time: 1 / 5,
    ΔⵠΔ: 3
  }, {
    r: [[209, 16]],
    w: 0,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 47,
    ᐃᐃΔΔ: 208,
    time: 1 / 5,
    ΔⵠΔ: 3
  }, {
    r: [[211, 16]],
    w: 0,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 48,
    ᐃᐃΔΔ: 210,
    time: 0.2,
    ΔⵠΔ: 3
  }, {
    r: [[116, 1]],
    w: 0,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 49,
    ᐃᐃΔΔ: 117,
    time: 1 / 5,
    ΔⵠΔ: 3
  }, {
    r: [[137, 1]],
    w: 0,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 50,
    ᐃᐃΔΔ: 138,
    time: 1 / 3,
    ΔⵠΔ: 3
  }, {
    r: [[131, 3]],
    w: 0,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 51,
    ᐃᐃΔΔ: 143,
    time: 1 / 3,
    ΔⵠΔ: 3
  }, {
    r: [[131, 3], [110, 1]],
    w: 0,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 52,
    ᐃᐃΔΔ: 133,
    time: 1 / 3,
    ΔⵠΔ: 3
  }, {
    r: [[131, 5], [110, 2], [142, 2]],
    w: 0,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 53,
    ᐃᐃΔΔ: 136,
    time: 0.2,
    ΔⵠΔ: 3
  }, {
    r: [[161, 2]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 54,
    ᐃᐃΔΔ: 195,
    time: 0.2,
    ΔⵠΔ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 55,
    ᐃᐃΔΔ: 162,
    time: 1 / 5,
    ΔⵠΔ: 5
  }, {
    r: [[162, 1], [108, 17]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 56,
    ᐃᐃΔΔ: 163,
    time: 1 / 5,
    ΔⵠΔ: 5
  }, {
    r: [[163, 1], [111, 14]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 57,
    ᐃᐃΔΔ: 164,
    time: 1 / 5,
    ΔⵠΔ: 5
  }, {
    r: [[164, 1], [112, 11]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 58,
    ᐃᐃΔΔ: 165,
    time: 1 / 5,
    ΔⵠΔ: 5
  }, {
    r: [[165, 1], [121, 8]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 59,
    ᐃᐃΔΔ: 122,
    time: 1 / 5,
    ΔⵠΔ: 5
  }, {
    r: [[122, 1], [202, 5]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 60,
    ᐃᐃΔΔ: 217,
    time: 1 / 5,
    ΔⵠΔ: 5
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 61,
    ᐃᐃΔΔ: 166,
    time: 1 / 8,
    ΔⵠΔ: 5
  }, {
    r: [[166, 1], [108, 27]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 62,
    ᐃᐃΔΔ: 171,
    time: 1 / 8,
    ΔⵠΔ: 5
  }, {
    r: [[171, 1], [111, 24]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 63,
    ᐃᐃΔΔ: 172,
    time: 1 / 8,
    ΔⵠΔ: 5
  }, {
    r: [[172, 1], [112, 21]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 64,
    ᐃᐃΔΔ: 173,
    time: 1 / 8,
    ΔⵠΔ: 5
  }, {
    r: [[173, 1], [121, 18]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 65,
    ᐃᐃΔΔ: 124,
    time: 1 / 8,
    ΔⵠΔ: 5
  }, {
    r: [[124, 1], [202, 15]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 66,
    ᐃᐃΔΔ: 218,
    time: 1 / 8,
    ΔⵠΔ: 5
  }, {
    r: [[162, 1], [109, 40], [108, 30]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 67,
    ᐃᐃΔΔ: 160,
    time: 1 / 20,
    ΔⵠΔ: 5
  }, {
    r: [[163, 1], [108, 70]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 68,
    ᐃᐃΔΔ: 168,
    time: 1 / 20,
    ΔⵠΔ: 5
  }, {
    r: [[164, 1], [111, 40], [108, 30]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 69,
    ᐃᐃΔΔ: 169,
    time: 1 / 20,
    ΔⵠΔ: 5
  }, {
    r: [[165, 1], [112, 40], [108, 30]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 70,
    ᐃᐃΔΔ: 170,
    time: 1 / 20,
    ΔⵠΔ: 5
  }, {
    r: [[122, 1], [121, 40], [108, 30]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 71,
    ᐃᐃΔΔ: 123,
    time: 0.05,
    ΔⵠΔ: 5
  }, {
    r: [[217, 1], [202, 40], [111, 30]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 72,
    ᐃᐃΔΔ: 219,
    time: 1 / 20,
    ΔⵠΔ: 5
  }, {
    r: [[166, 1], [109, 80], [108, 60]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 73,
    ᐃᐃΔΔ: 212,
    time: 1 / 20,
    ΔⵠΔ: 5
  }, {
    r: [[171, 1], [108, 140]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 74,
    ᐃᐃΔΔ: 213,
    time: 1 / 20,
    ΔⵠΔ: 5
  }, {
    r: [[172, 1], [111, 80], [108, 60]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 75,
    ᐃᐃΔΔ: 214,
    time: 1 / 20,
    ΔⵠΔ: 5
  }, {
    r: [[173, 1], [112, 80], [108, 60]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 76,
    ᐃᐃΔΔ: 215,
    time: 1 / 20,
    ΔⵠΔ: 5
  }, {
    r: [[124, 1], [121, 80], [108, 60]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 77,
    ᐃᐃΔΔ: 216,
    time: 1 / 20,
    ΔⵠΔ: 5
  }, {
    r: [[218, 1], [202, 80], [111, 60]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 78,
    ᐃᐃΔΔ: 220,
    time: 1 / 20,
    ΔⵠΔ: 5
  }, {
    r: [[109, 25], [111, 2]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 79,
    ᐃᐃΔΔ: 167,
    time: 1 / 5,
    ΔⵠΔ: 4
  }, {
    r: [[120, 1], [2, 1], [161, 2]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 80,
    ᐃᐃΔΔ: 23,
    time: 1 / 5,
    ΔⵠΔ: 2
  }, {
    r: [[120, 5], [222, 20], [147, 5], [2, 5]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 81,
    ᐃᐃΔΔ: 24,
    time: 1 / 30,
    ΔⵠΔ: 2
  }, {
    r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 82,
    ᐃᐃΔΔ: 82,
    time: 0.016666666666666666,
    ΔⵠΔ: 2
  }, {
    r: [[2, 1], [161, 2]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 83,
    ᐃᐃΔΔ: 10,
    time: 1 / 5,
    ΔⵠΔ: 2
  }, {
    r: [[10, 1], [174, 5], [161, 4]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 84,
    ᐃᐃΔΔ: 11,
    time: 1 / 12,
    ΔⵠΔ: 2
  }, {
    r: [[11, 1], [146, 5], [147, 4]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 85,
    ᐃᐃΔΔ: 40,
    time: 1 / 30,
    ΔⵠΔ: 2
  }, {
    r: [[40, 1], [146, 5], [240, 10], [147, 4]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 86,
    ᐃᐃΔΔ: 88,
    time: 0.02,
    ΔⵠΔ: 2
  }, {
    r: [[109, 50]],
    w: 0,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 87,
    ᐃᐃΔΔ: 58,
    time: 0.2,
    ΔⵠΔ: 2
  }, {
    r: [[108, 75], [109, 75], [58, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 88,
    ᐃᐃΔΔ: 25,
    time: 1 / 10,
    ΔⵠΔ: 2
  }, {
    r: [[108, 90], [109, 90], [111, 90], [25, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 89,
    ᐃᐃΔΔ: 26,
    time: 0.05,
    ΔⵠΔ: 2
  }, {
    r: [[108, 100], [111, 100], [112, 100], [26, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 90,
    ᐃᐃΔΔ: 27,
    time: 0.03333333333333333,
    ΔⵠΔ: 2
  }, {
    r: [[121, 80], [111, 150], [112, 120], [27, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 91,
    ᐃᐃΔΔ: 43,
    time: 0.016666666666666666,
    ΔⵠΔ: 2
  }, {
    r: [[202, 80], [112, 150], [121, 120], [43, 1]],
    w: 1,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 92,
    ᐃᐃΔΔ: 44,
    time: 1 / 90,
    ΔⵠΔ: 2
  }, {
    r: [[139, 2], [112, 40], [161, 4]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 93,
    ᐃᐃΔΔ: 48,
    time: 0.05,
    ΔⵠΔ: 2
  }, {
    r: [[48, 1], [111, 80], [129, 1], [121, 20]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 94,
    ᐃᐃΔΔ: 47,
    time: 1 / 90,
    ΔⵠΔ: 2
  }, {
    r: [[203, 5], [112, 50], [147, 5]],
    w: 1,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 95,
    ᐃᐃΔΔ: 20,
    time: 1 / 20,
    ΔⵠΔ: 2
  }, {
    r: [[20, 1], [203, 10], [121, 50]],
    w: 1,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 96,
    ᐃᐃΔΔ: 21,
    time: 0.016666666666666666,
    ΔⵠΔ: 2
  }, {
    r: [[21, 1], [203, 15], [121, 50], [202, 50]],
    w: 1,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 97,
    ᐃᐃΔΔ: 22,
    time: 1 / 90,
    ΔⵠΔ: 2
  }, {
    r: [[161, 4], [237, 2]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 98,
    ᐃᐃΔΔ: 80,
    time: 1 / 15,
    ΔⵠΔ: 2
  }, {
    r: [[80, 1], [161, 6], [237, 4], [232, 12], [222, 4]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 99,
    ᐃᐃΔΔ: 81,
    time: 1 / 150,
    ΔⵠΔ: 2
  }, {
    r: [[161, 6], [174, 5]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 100,
    ᐃᐃΔΔ: 29,
    time: 0.06666666666666667,
    ΔⵠΔ: 2
  }, {
    r: [[109, 20]],
    w: 0,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 101,
    ᐃᐃΔΔ: 120,
    time: 1 / 3,
    ΔⵠΔ: 4
  }, {
    r: [[112, 1], [161, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 102,
    ᐃᐃΔΔ: 147,
    time: 1 / 3,
    ΔⵠΔ: 4
  }, {
    r: [[111, 10]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 103,
    ᐃᐃΔΔ: 148,
    time: 1 / 5,
    ΔⵠΔ: 4
  }, {
    r: [[111, 250]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 104,
    ᐃᐃΔΔ: 158,
    time: 1 / 60,
    ΔⵠΔ: 4
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 105,
    ᐃᐃΔΔ: 159,
    time: 1 / 10,
    ΔⵠΔ: 4
  }, {
    r: [[109, 15]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 106,
    ᐃᐃΔΔ: 125,
    time: 0.2,
    ΔⵠΔ: 4
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 107,
    ᐃᐃΔΔ: 190,
    time: 0.2,
    ΔⵠΔ: 4
  }, {
    r: [[109, 120]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 108,
    ᐃᐃΔΔ: 221,
    time: 1 / 15,
    ΔⵠΔ: 4
  }, {
    r: [[109, 20], [140, 15]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 109,
    ᐃᐃΔΔ: 141,
    time: 1 / 5,
    ΔⵠΔ: 4
  }, {
    r: [[126, 25]],
    w: 1,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 110,
    ᐃᐃΔΔ: 128,
    time: 1 / 5,
    ΔⵠΔ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ⲆⲆⵠ: 1,
    e: 0,
    id: 111,
    ᐃᐃΔΔ: 127,
    time: 1 / 5,
    ΔⵠΔ: 3
  }, {
    r: [[142, 20], [128, 1]],
    w: 0,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 112,
    ᐃᐃΔΔ: 127,
    time: 1 / 10,
    ΔⵠΔ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 1,
    id: 113,
    ᐃᐃΔΔ: 127,
    time: 1 / 3,
    ΔⵠΔ: 3
  }, {
    r: [[109, 60], [108, 20], [161, 2]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 114,
    ᐃᐃΔΔ: 135,
    time: 0.1,
    ΔⵠΔ: 4
  }, {
    r: [[112, 40], [108, 45]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 115,
    ᐃᐃΔΔ: 151,
    time: 0.05,
    ΔⵠΔ: 4
  }, {
    r: [[151, 1], [234, 40], [238, 1]],
    w: 1,
    f: 1,
    ⲆⲆⵠ: 1,
    e: 0,
    id: 116,
    ᐃᐃΔΔ: 152,
    time: 1 / 200,
    ΔⵠΔ: 4
  }, {
    r: [[109, 50], [108, 100]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 117,
    ᐃᐃΔΔ: 153,
    time: 1 / 90,
    ΔⵠΔ: 4
  }, {
    r: [[108, 60], [111, 120]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 118,
    ᐃᐃΔΔ: 154,
    time: 0.011111111111111112,
    ΔⵠΔ: 4
  }, {
    r: [[111, 70], [112, 140]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 119,
    ᐃᐃΔΔ: 155,
    time: 0.011111111111111112,
    ΔⵠΔ: 4
  }, {
    r: [[112, 80], [121, 160]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 120,
    ᐃᐃΔΔ: 156,
    time: 1 / 90,
    ΔⵠΔ: 4
  }, {
    r: [[121, 90], [202, 180]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 121,
    ᐃᐃΔΔ: 157,
    time: 1 / 90,
    ΔⵠΔ: 4
  }, {
    r: [[108, 70]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 122,
    ᐃᐃΔΔ: 55,
    time: 0.1,
    ΔⵠΔ: 0
  }, {
    r: [[108, 70], [109, 50]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 123,
    ᐃᐃΔΔ: 56,
    time: 1 / 10,
    ΔⵠΔ: 0
  }, {
    r: [[109, 40], [108, 40]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 124,
    ᐃᐃΔΔ: 144,
    time: 1 / 10,
    ΔⵠΔ: 4
  }, {
    r: [[143, 1], [117, 1]],
    w: 0,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 125,
    ᐃᐃΔΔ: 145,
    time: 1 / 3,
    ΔⵠΔ: 3
  }, {
    r: [[147, 30], [184, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ⲆⲆⵠ: 1,
    e: 0,
    id: 126,
    ᐃᐃΔΔ: 59,
    time: 0.008333333333333333,
    ΔⵠΔ: 2
  }, {
    r: [[59, 1], [186, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ⲆⲆⵠ: 1,
    e: 0,
    id: 127,
    ᐃᐃΔΔ: 60,
    time: 0.005555555555555556,
    ΔⵠΔ: 2
  }, {
    r: [[26, 1], [197, 10], [196, 10], [161, 10]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 128,
    ᐃᐃΔΔ: 61,
    time: 0.016666666666666666,
    ΔⵠΔ: 2
  }, {
    r: [[147, 20], [185, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ⲆⲆⵠ: 1,
    e: 0,
    id: 129,
    ᐃᐃΔΔ: 62,
    time: 0.008333333333333333,
    ΔⵠΔ: 1
  }, {
    r: [[62, 1], [187, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ⲆⲆⵠ: 1,
    e: 0,
    id: 130,
    ᐃᐃΔΔ: 63,
    time: 0.005555555555555556,
    ΔⵠΔ: 1
  }, {
    r: [[109, 100], [161, 4]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 131,
    ᐃᐃΔΔ: 64,
    time: 0.05,
    ΔⵠΔ: 1
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 132,
    ᐃᐃΔΔ: 101,
    time: 1 / 5,
    ΔⵠΔ: 1
  }, {
    r: [[108, 200], [161, 8], [222, 4], [64, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 133,
    ᐃᐃΔΔ: 65,
    time: 1 / 25,
    ΔⵠΔ: 1
  }, {
    r: [[108, 20], [231, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 134,
    ᐃᐃΔΔ: 102,
    time: 1 / 5,
    ΔⵠΔ: 1
  }, {
    r: [[111, 200], [161, 12], [231, 4], [222, 4], [65, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 135,
    ᐃᐃΔΔ: 66,
    time: 0.03333333333333333,
    ΔⵠΔ: 1
  }, {
    r: [[111, 20], [222, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 136,
    ᐃᐃΔΔ: 103,
    time: 1 / 10,
    ΔⵠΔ: 1
  }, {
    r: [[112, 200], [147, 10], [231, 8], [222, 8], [66, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 137,
    ᐃᐃΔΔ: 67,
    time: 1 / 35,
    ΔⵠΔ: 1
  }, {
    r: [[112, 10], [222, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 138,
    ᐃᐃΔΔ: 104,
    time: 1 / 10,
    ΔⵠΔ: 1
  }, {
    r: [[121, 200], [147, 10], [222, 8], [232, 8], [67, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 139,
    ᐃᐃΔΔ: 68,
    time: 1 / 40,
    ΔⵠΔ: 1
  }, {
    r: [[121, 10], [232, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 140,
    ᐃᐃΔΔ: 105,
    time: 1 / 15,
    ΔⵠΔ: 1
  }, {
    r: [[202, 200], [147, 10], [129, 1], [68, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 141,
    ᐃᐃΔΔ: 69,
    time: 1 / 45,
    ΔⵠΔ: 1
  }, {
    r: [[202, 10], [232, 1], [203, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 142,
    ᐃᐃΔΔ: 106,
    time: 1 / 15,
    ΔⵠΔ: 1
  }, {
    r: [[234, 200], [147, 10], [185, 1], [69, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 143,
    ᐃᐃΔΔ: 70,
    time: 0.02,
    ΔⵠΔ: 1
  }, {
    r: [[234, 10], [238, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 144,
    ᐃᐃΔΔ: 107,
    time: 0.05,
    ΔⵠΔ: 1
  }, {
    r: [[109, 100]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 145,
    ᐃᐃΔΔ: 71,
    time: 0.04,
    ΔⵠΔ: 1
  }, {
    r: [[71, 1], [108, 100], [109, 50]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 146,
    ᐃᐃΔΔ: 72,
    time: 0.025,
    ΔⵠΔ: 1
  }, {
    r: [[72, 1], [111, 50], [108, 50], [109, 50]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 147,
    ᐃᐃΔΔ: 73,
    time: 1 / 50,
    ΔⵠΔ: 1
  }, {
    r: [[73, 1], [112, 50], [111, 50], [108, 50]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 148,
    ᐃᐃΔΔ: 74,
    time: 1 / 70,
    ΔⵠΔ: 1
  }, {
    r: [[74, 1], [121, 50], [112, 50], [111, 50]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 149,
    ᐃᐃΔΔ: 75,
    time: 1 / 90,
    ΔⵠΔ: 1
  }, {
    r: [[75, 1], [202, 50], [121, 50], [112, 50]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 150,
    ᐃᐃΔΔ: 76,
    time: 0.008333333333333333,
    ΔⵠΔ: 1
  }, {
    r: [[175, 1], [111, 200]],
    w: 1,
    f: 1,
    ⲆⲆⵠ: 1,
    e: 0,
    id: 151,
    ᐃᐃΔΔ: 77,
    time: 1 / 60,
    ΔⵠΔ: 2
  }, {
    r: [[176, 1], [111, 200]],
    w: 1,
    f: 1,
    ⲆⲆⵠ: 1,
    e: 0,
    id: 152,
    ᐃᐃΔΔ: 78,
    time: 0.016666666666666666,
    ΔⵠΔ: 2
  }, {
    r: [[177, 1], [111, 200], [149, 1]],
    w: 1,
    f: 1,
    ⲆⲆⵠ: 1,
    e: 0,
    id: 153,
    ᐃᐃΔΔ: 79,
    time: 0.016666666666666666,
    ΔⵠΔ: 2
  }, {
    r: [[174, 10], [2, 5], [161, 6]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 154,
    ᐃᐃΔΔ: 83,
    time: 1 / 10,
    ΔⵠΔ: 2
  }, {
    r: [[2, 3], [161, 2]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 155,
    ᐃᐃΔΔ: 84,
    time: 1 / 10,
    ΔⵠΔ: 2
  }, {
    r: [[83, 1], [179, 1], [146, 15], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 156,
    ᐃᐃΔΔ: 85,
    time: 1 / 60,
    ΔⵠΔ: 2
  }, {
    r: [[84, 1], [178, 1], [146, 10], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 157,
    ᐃᐃΔΔ: 86,
    time: 1 / 60,
    ΔⵠΔ: 2
  }, {
    r: [[181, 1]],
    w: 0,
    f: 0,
    ⲆⲆⵠ: 1,
    e: 0,
    id: 158,
    ᐃᐃΔΔ: 180,
    time: 1 / 5,
    ΔⵠΔ: 0
  }, {
    r: [[109, 20], [161, 1]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 159,
    ᐃᐃΔΔ: 181,
    time: 1 / 5,
    ΔⵠΔ: 0
  }, {
    r: [[108, 100], [140, 30]],
    w: 1,
    f: 1,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 160,
    ᐃᐃΔΔ: 182,
    time: 1 / 10,
    ΔⵠΔ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 161,
    ᐃᐃΔΔ: 183,
    time: 0.2,
    ΔⵠΔ: 4
  }, {
    r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 162,
    ᐃᐃΔΔ: 198,
    time: 1 / 20,
    ΔⵠΔ: 4
  }, {
    r: [[109, 250], [147, 10], [146, 2], [139, 2]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 163,
    ᐃᐃΔΔ: 223,
    time: 1 / 50,
    ΔⵠΔ: 4
  }, {
    r: [[109, 250], [161, 10], [146, 2], [222, 8]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 164,
    ᐃᐃΔΔ: 224,
    time: 0.02,
    ΔⵠΔ: 4
  }, {
    r: [[161, 10], [174, 6], [2, 4], [126, 50]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 165,
    ᐃᐃΔΔ: 89,
    time: 0.05,
    ΔⵠΔ: 4
  }, {
    r: [[109, 250], [161, 10], [120, 10], [231, 8]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 166,
    ᐃᐃΔΔ: 230,
    time: 1 / 50,
    ΔⵠΔ: 4
  }, {
    r: [[109, 40]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 167,
    ᐃᐃΔΔ: 94,
    time: 1 / 5,
    ΔⵠΔ: 1
  }, {
    r: [[94, 1], [108, 40], [109, 50]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 168,
    ᐃᐃΔΔ: 95,
    time: 1 / 10,
    ΔⵠΔ: 1
  }, {
    r: [[95, 1], [111, 40], [108, 50], [109, 60]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 169,
    ᐃᐃΔΔ: 96,
    time: 1 / 20,
    ΔⵠΔ: 1
  }, {
    r: [[96, 1], [112, 40], [111, 70], [108, 80]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 170,
    ᐃᐃΔΔ: 97,
    time: 0.03333333333333333,
    ΔⵠΔ: 1
  }, {
    r: [[97, 1], [121, 40], [112, 70], [111, 110]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 171,
    ᐃᐃΔΔ: 98,
    time: 1 / 60,
    ΔⵠΔ: 1
  }, {
    r: [[98, 1], [202, 50], [121, 80], [112, 110]],
    w: 1,
    f: 0,
    ⲆⲆⵠ: 0,
    e: 0,
    id: 172,
    ᐃᐃΔΔ: 99,
    time: 1 / 90,
    ΔⵠΔ: 1
  }];
  const Ot = 10;
  function lb(b, c, d, e) {
    const f = ~(b & 40198) & 40198 | ~(b & 40198) & b;
    const g = (24 << (c >> 0 & 255)) + (8 << (c >> 16 & 255)) + (0 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
    const a = (d | 32014) & ~(d & 32014);
    const h = ~(e & 14079) & e | ~(e & 14079) & 14079;
    return ((63130 + (Ok(f, g, a, h, f) ^ Zb(g, a, h, f, g, a))) * 1664525 + 1013904223) % 4294967296;
  }
  const ub = 15;
  const bb = 15;
  const db = 100;
  const vb = 9;
  function mb(b, c, d) {
    const e = ~(b & 44079) & (b | 44079);
    const f = ~(c & 15792) & (c | 15792);
    const g = (0 << (d >> 24 & 255)) + (16 << (d >> 16 & 255)) + (8 << (d >> 0 & 255)) + (24 << (d >> 8 & 255));
    const a = lb(e, f, g, e);
    iq(f, g);
    return (a | 38376) & ~(a & 38376);
  }
  nh = 300;
  Ⲇⵠⵠ = {
    ΔΔᐃΔⲆᐃΔ: 300,
    ᐃⲆⵠΔⲆⲆᐃ: 301,
    ⲆΔᐃⵠⲆⵠΔ: 302,
    ᐃᐃⵠⲆⵠⵠⵠ: 303,
    ⵠΔᐃᐃᐃΔⵠ: 304,
    ⵠᐃᐃⲆΔⵠᐃ: 305,
    ΔᐃⲆⲆⵠⵠᐃ: 306,
    ΔⵠΔᐃⵠΔⲆ: 307,
    ᐃᐃⵠΔΔⵠⲆ: 308,
    ᐃⵠΔⵠΔΔΔ: 309,
    ⲆᐃᐃΔⲆⲆΔ: 310,
    ΔΔⵠⵠⲆᐃᐃ: 311,
    EMPTY: 312,
    ΔⲆⵠᐃⵠΔⵠ: 313,
    ΔᐃᐃⲆΔⲆⲆ: 314,
    ΔⵠⵠⲆⲆᐃⵠ: 315,
    ⲆΔΔᐃⲆⵠΔ: 316,
    ⲆᐃⲆᐃΔⲆⵠ: 317,
    ⵠᐃΔⲆⵠⵠᐃ: 318,
    ⵠΔⲆⵠᐃⵠᐃ: 319,
    ᐃⵠΔⵠᐃΔⵠ: 320,
    ΔⵠΔⵠⵠΔⵠ: 321,
    ⵠⲆⲆΔᐃ: 322,
    ΔⲆΔⵠⲆΔⵠ: 323,
    ⲆᐃⲆⲆΔ: 324,
    ⲆᐃᐃΔⵠⵠⵠ: 325,
    ⵠΔᐃΔᐃⲆᐃ: 326,
    ΔΔΔⵠᐃΔΔ: 327,
    ΔΔⲆⲆⲆᐃⵠ: 328,
    ⲆΔⵠⲆΔΔⲆ: 329,
    ΔⵠⵠΔΔⲆⲆ: 330,
    ΔⵠⲆⲆⵠⵠᐃ: 331,
    POINTS: 332,
    ᐃⵠᐃᐃᐃⲆΔ: 333,
    ⵠᐃⵠⲆⵠⲆⲆ: 334,
    ΔΔⵠᐃΔⵠⲆ: 335,
    ⵠᐃΔΔᐃΔⵠ: 336,
    ΔΔᐃᐃΔⲆⲆ: 337,
    ⵠⲆᐃⵠⵠⵠᐃ: 338,
    ⲆⵠᐃᐃΔᐃⲆ: 339,
    ΔⵠΔΔᐃΔΔ: 340,
    ⵠΔΔᐃⲆⲆⲆ: 341,
    ⵠⵠΔⵠᐃⵠⲆ: 342,
    ΔᐃⵠⲆΔⲆΔ: 343
  };
  const cb = 7;
  function pb(a, b) {
    const c = ~(a & 12116) & (a | 12116);
    const d = (0 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 16 & 255)) + (24 << (b & 255));
    return (1 + (5022 + (Ok(c, d, c, d, c) ^ lb(d, c, d, c))) * 22695477) % 4294967296;
  }
  function Cb(a, b, c, d) {
    Jj($f, a, b, c, d);
    const e = kb(Vw[0], Vw[1], Vw[2], Vw[3], Vw[0], Vw[1]);
    kb(Vw[2], Vw[3], Vw[0], Vw[1], Vw[2], Vw[3]);
    return e ^ 49340;
  }
  function Tb() {
    Qb[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
    Qb[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
    Qb[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
    Qb[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
    Qb[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
    Qb[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
    Qb[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
    Qb[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
    Qb[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
    Qb[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
    Qb[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
    Qb[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
    Qb[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
    Qb[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
    Qb[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
    Qb[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
    Qb[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
    Qb[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
    Qb[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
    Qb[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
    Qb[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
    Qb[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
    Qb[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
    Qb[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
    Qb[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
    Qb[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
    Qb[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
    Qb[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
    Qb[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
    Qb[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
    Qb[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
    Qb[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
    Qb[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
    Qb[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
    Qb[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
    Qb[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
    Qb[232] = ["Vulture Feather", "From a deadly vulture"];
    Qb[234] = ["Emerald", "How many golden breads can you get from it?"];
    Qb[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
    Qb[80] = ["Turban", "Useful to survive in the desert."];
    Qb[81] = ["Ninja outfit", "Essential to survive in the desert"];
    Qb[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
    Qb[236] = ["Pilot Glasses"];
    Qb[225] = ["Tamed Boar", "Fast on lands and slow on water."];
    Qb[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
    Qb[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
    Qb[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
    Qb[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
    Qb[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
    Qb[89] = ["Saddle", "Hit a boar with it to tame it."];
    Qb[90] = ["Witch Hat", "You're a wizard Starvy!"];
    Qb[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
    Qb[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
    Qb[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
    Qb[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
    Qb[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
    Qb[224] = ["Sled", "You are faster with it in the snow"];
    Qb[223] = ["Boat", "You are faster with it in the water"];
    Qb[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
    Qb[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 70"];
    Qb[222] = ["Penguin Feather", "From a deadly cute penguin."];
    Qb[231] = ["Hawk Feather", "From a deadly hawk."];
    Qb[233] = ["Cactus", "Food : 20", "Water : 10"];
    Qb[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
    Qb[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    Qb[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
    Qb[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    Qb[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
    Qb[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
    Qb[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
    Qb[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
    Qb[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
    Qb[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
    Qb[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
    Qb[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
    Qb[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
    Qb[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
    Qb[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
    Qb[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
    Qb[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Qb[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Qb[53] = ["Pitchfork", "Perfect for gathering"];
    Qb[54] = ["Golden Pitchfork", "Essential for a real farmer."];
    Qb[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
    Qb[uh.ᐃⲆⲆⲆⵠⵠΔ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
    Qb[uh.ᐃⵠΔⵠⲆΔⲆ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
    Qb[uh.ⲆⵠⲆⵠⲆΔⵠ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
    Qb[uh.ΔⲆⲆⵠΔᐃΔ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
    Qb[uh.ⵠⲆᐃⵠⲆΔΔ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
    Qb[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
    Qb[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
    Qb[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
    Qb[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
    Qb[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
    Qb[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
    Qb[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
    Qb[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
    Qb[203] = ["Flame", "It's hot!"];
    Qb[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
    Qb[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
    Qb[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
    Qb[202] = ["Reidite", "The ultimate ore"];
    Qb[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
    Pt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Pt[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
    Pt[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
    Pt[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
    Pt[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
    Pt[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
    Pt[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
    Pt[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
    Pt[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
    Pt[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
    Pt[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
    Pt[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
    Pt[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
    Pt[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
    Pt[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
    Pt[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
    Pt[38] = ["You died crushed by an angry baby mammoth."];
    Pt[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
    Pt[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
    Qb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Qb[341] = "A sandstorm is approaching in a few seconds.";
    Qb[340] = "The sandstorm will soon stop.";
    Qb[343] = "A blizzard is approaching in a few seconds.";
    Qb[342] = "The blizzard will soon stop.";
    Qb[328] = " BACK TO THE GAME";
    Qb[329] = " Share on Twitter";
    Qb[330] = " Share on Facebook";
    Qb[331] = "You can buy items on the shop in the next game with your points";
    Qb[332] = "points";
    Qb[333] = "Score";
    Qb[334] = "Kill";
    Qb[335] = "Days survived";
    Qb[336] = "Building method: Free. Press G to change";
    Qb[337] = "Building method: Grid. Press G to change";
    Qb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Qb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
    Qb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
    Qb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Qb[7] = ["Hand"];
    Qb[140] = ["Dirt", "Dirty!"];
    Qb[126] = ["Sand", "I got it in my eyes!"];
    Qb[109] = ["Wood", "You can't get enough of it!"];
    Qb[108] = ["Stone", "Also called a rock"];
    Qb[111] = ["Gold", "Be generous, give it to others"];
    Qb[112] = ["Diamond", "What will you make with it?"];
    Qb[121] = ["Amethyst", "It's Mauve like Lapa"];
    Qb[131] = ["Flour", "Used in cooking"];
    Qb[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
    Qb[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    Qb[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
    Qb[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    Qb[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
    Qb[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
    Qb[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
    Qb[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    Qb[200] = ["Candies", "Only for children!", "Food: 20"];
    Qb[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
    Qb[201] = ["Garland", "Perfect decoration for roofs"];
    Qb[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
    Qb[110] = ["Berry", "Berry tasty!", "Food: 10"];
    Qb[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    Qb[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
    Qb[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    Qb[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    Qb[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Qb[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    Qb[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
    Qb[194] = ["Thorn bush", "It stings!"];
    Qb[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
    Qb[142] = ["Ice", "Useful for making cakes and water"];
    Qb[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
    Qb[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    Qb[2] = ["Rabbit Fur", "That rabbit was so cute..."];
    Qb[178] = ["Pure Fur", "You're a bread factory"];
    Qb[179] = ["Dark Fur", "You get ready to do something wrong"];
    Qb[146] = ["Winter Fur", "These animals just wanted a hug..."];
    Qb[139] = ["Scales", "It smells like fish!"];
    Qb[129] = ["Kraken Skin", "Weren't you too scared?"];
    Qb[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
    Qb[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
    Qb[114] = ["Workbench", "Very useful to craft all kinds of objects"];
    Qb[161] = ["Cord", "Used in crafting Hats and Bag"];
    Qb[147] = ["Diamond Cord", "Used in crafting Special Hats"];
    Qb[167] = ["Chest", "Allows you to store items", "Durability: 500"];
    Qb[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
    Qb[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
    Qb[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
    Qb[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
    Qb[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
    Qb[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
    Qb[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
    Qb[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
    Qb[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
    Qb[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
    Qb[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
    Qb[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
    Qb[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
    Qb[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
    Qb[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
    Qb[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
    Qb[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
    Qb[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 95"];
    Qb[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
    Qb[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
    Qb[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
    Qb[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
    Qb[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
    Qb[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
    Qb[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
    Qb[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
    Qb[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    Qb[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
    Qb[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
    Qb[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
    Qb[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
    Qb[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
    Qb[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
    Qb[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
    Qb[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
    Qb[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
    Qb[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
    Qb[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
    Qb[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
    Qb[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
    Qb[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
    Qb[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
    Qb[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    Qb[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
    Qb[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    Qb[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
    Qb[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
    Qb[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
    Qb[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
    Qb[175] = ["Green Gemstone", "You didn't cheat, promise?"];
    Qb[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
    Qb[177] = ["Blue Gemstone", "For too kind people"];
    Qb[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
    Qb[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
    Qb[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
    Qb[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
    Qb[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
    Qb[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
    Qb[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
    Qb[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
    Qb[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
    Qb[29] = ["Bag", "More space for your items!"];
    Qb[120] = ["Paper", "Used in book-crafting"];
    Qb[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
    Qb[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
    Qb[148] = ["Lock", "Allow you to lock your chest"];
    Qb[158] = ["Lock-pick", "Allows you to unlock one chest"];
    Qb[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
    Qb[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
    Qb[183] = ["Sign", "Leave a message to others", "Durability: 200"];
    Qb[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
    Qb[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
    Qb[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    Qb[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
    Qb[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
    Qb[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
    Qb[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
    Qb[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
    Qb[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
    Qb[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
    Qb[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
    Qb[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
    Qb[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
    Qb[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
    Qb[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
    Qb[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
    Qb[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
    Qb[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
    Qb[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
    Qb[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
    Qb[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
    Qb[300] = "You cannot join this server";
    Qb[301] = "Kicked: ";
    Qb[302] = "Your key is already used by someone else";
    Qb[303] = "Your key is wrong";
    Qb[304] = "You have an old version, you need to clear your cache";
    Qb[338] = "Your client version is too recent for this server. The server is being updated";
    Qb[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
    Qb[305] = "There are no more new resources";
    Qb[306] = "You survived 1 day";
    Qb[307] = "You survived ";
    Qb[308] = " days";
    Qb[309] = "You are dead ;-;";
    Qb[310] = "Server cannot find spawn location! Spam the play button!";
    Qb[311] = "Server is full! Spam the play button!";
    Qb[312] = "Resource is empty";
    Qb[313] = "Inventory is full (right-click to empty items)";
    Qb[314] = " is dead";
    Qb[315] = "This is not the right tool";
    Qb[316] = "You joined a team";
    Qb[317] = "You are dead";
    Qb[318] = " joined the team";
    Qb[319] = "Your team was destroyed";
    Qb[320] = "You left the team";
    Qb[321] = " left the team";
    Qb[322] = "Someone stole your token :>";
    Qb[323] = "Choose a server";
    Qb[324] = "players";
    Qb[325] = "total players";
    Qb[326] = "players on this mode";
    Qb[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    Pt[0] = ["You were killed for no reason"];
    Pt[1] = ["You starved to death, as the name of the game implies"];
    Pt[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
    Pt[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
    Pt[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
    Pt[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
    Pt[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
    Pt[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
    Pt[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
    Pt[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
    Pt[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
    Pt[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
    Pt[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
    Pt[13] = ["You died of thirst. Better drink your own piss."];
    Pt[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
    Pt[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
    Pt[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
    Pt[17] = ["Your skin's falling apart, the sun killed you."];
    Pt[18] = ["Garlic stored in your pockets boiled your brain."];
    Pt[19] = ["As a vampire, don't stand near the garlic cloves."];
    Pt[20] = ["You ate garlic as a vampire, what did you expect?"];
    Pt[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
    ᐃⲆΔᐃⲆ = "Uuunnnggg";
    ᐃᐃⲆⲆΔⲆⲆ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
  }
  const fb = 4;
  function zb() {
    Qb[184] = ["You feel a great power emanating from this orb"];
    Pt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Qb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Qb[328] = " BACK TO THE GAME";
    Qb[329] = " Share on Twitter";
    Qb[330] = " Share on Facebook";
    Qb[331] = "You can buy items on the shop in the next game with your points";
    Qb[332] = "points";
    Qb[333] = "Score";
    Qb[334] = "Kill";
    Qb[335] = "Days survived";
    Qb[336] = "Building method: Free. Press G to change";
    Qb[337] = "Building method: Grid. Press G to change";
    Qb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Qb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Qb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Qb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Qb[7] = ["Рука"];
    Qb[140] = ["Земля", "Грязно!"];
    Qb[126] = ["Песок", "Он в моих глазах!"];
    Qb[109] = ["Дерево", "Постоянно нужно больше!"];
    Qb[108] = ["Камень", "Твердый"];
    Qb[111] = ["Золото", "Будьте щедры, давайте его другим"];
    Qb[112] = ["Алмаз", "Что вы создадите с помощью него?"];
    Qb[121] = ["Аметист", "Он сиреневый, как Lapa"];
    Qb[131] = ["Мука", "Используется в готовке"];
    Qb[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    Qb[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    Qb[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
    Qb[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
    Qb[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
    Qb[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
    Qb[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
    Qb[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    Qb[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
    Qb[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
    Qb[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
    Qb[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
    Qb[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    Qb[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    Qb[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
    Qb[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    Qb[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    Qb[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
    Qb[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
    Qb[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
    Qb[194] = ["Колючий Куст", "Это больно!"];
    Qb[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
    Qb[142] = ["Лёд", "Используется для изготовления тортов и воды"];
    Qb[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
    Qb[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    Qb[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    Qb[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    Qb[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
    Qb[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
    Qb[139] = ["Чешуя", "Она пахнет рыбой!"];
    Qb[129] = ["Шкура Кракена", "Вы не испугались?"];
    Qb[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
    Qb[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
    Qb[114] = ["Верстак", "Необходим для создания многих предметов"];
    Qb[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    Qb[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
    Qb[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
    Qb[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
    Qb[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
    Qb[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
    Qb[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
    Qb[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
    Qb[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
    Qb[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
    Qb[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
    Qb[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
    Qb[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
    Qb[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
    Qb[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
    Qb[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
    Qb[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
    Qb[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
    Qb[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
    Qb[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
    Qb[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
    Qb[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
    Qb[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
    Qb[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
    Qb[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
    Qb[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
    Qb[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
    Qb[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
    Qb[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
    Qb[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
    Qb[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
    Qb[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
    Qb[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
    Qb[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
    Qb[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
    Qb[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
    Qb[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
    Qb[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
    Qb[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
    Qb[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    Qb[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
    Qb[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
    Qb[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
    Qb[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    Qb[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    Qb[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    Qb[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
    Qb[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
    Qb[185] = ["Шар Дракона", "Даётся за квест"];
    Qb[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
    Qb[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
    Qb[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
    Qb[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
    Qb[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
    Qb[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
    Qb[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
    Qb[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
    Qb[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
    Qb[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
    Qb[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
    Qb[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
    Qb[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
    Qb[29] = ["Рюкзак", "Больше места для ваших предметов!"];
    Qb[120] = ["Бумага", "Используется при создании книги"];
    Qb[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
    Qb[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
    Qb[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    Qb[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    Qb[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
    Qb[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
    Qb[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
    Qb[190] = ["Крыша", "Немного скрывает вас и согревает!"];
    Qb[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
    Qb[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
    Qb[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
    Qb[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
    Qb[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
    Qb[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
    Qb[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
    Qb[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
    Qb[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
    Qb[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
    Qb[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
    Qb[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
    Qb[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
    Qb[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
    Qb[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
    Qb[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
    Qb[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
    Qb[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
    Qb[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
    Qb[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
    Qb[300] = "Вы не можете зайти на этот сервер";
    Qb[301] = "Выгнаны: ";
    Qb[302] = "Ваш ключ уже используется кем-то";
    Qb[303] = "Ваш ключ неправильный";
    Qb[304] = "У вас старая версия, вам нужно очистить кеш";
    Qb[305] = "Ресурсов больше нет";
    Qb[306] = "Вы выжили 1 день";
    Qb[307] = "Вы выжили ";
    Qb[308] = " дней";
    Qb[309] = "Вы умерли ;-;";
    Qb[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    Qb[311] = "Сервер заполнен! Спамьте кнопку играть!";
    Qb[312] = "Ресурсы закончились";
    Qb[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    Qb[314] = " умер";
    Qb[315] = "Это не тот инструмент";
    Qb[316] = "Вы вошли в команду";
    Qb[317] = "Вы умерли";
    Qb[318] = " вошёл в команду";
    Qb[319] = "Ваша команда была разрушена";
    Qb[320] = "Вы покинули команду";
    Qb[321] = " покинул команду";
    Qb[322] = "Кто-то использует ваш токен :>";
    Qb[323] = "Выберите сервер";
    Qb[324] = "игроков";
    Qb[325] = "игроков всего";
    Qb[326] = "игроков в этом режиме";
    Qb[327] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    Pt[0] = ["Вы были убиты без причины"];
    Pt[1] = ["Вы умерли от голода, как название игры подразумевает это"];
    Pt[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
    Pt[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
    Pt[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
    Pt[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
    Pt[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
    Pt[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
    Pt[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
    Pt[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
    Pt[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
    Pt[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
    Pt[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
    Pt[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    Pt[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
    Pt[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
    Pt[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
    Pt[17] = ["Твоя кожа разваливается, солнце убило тебя"];
    Pt[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    Pt[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    Pt[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    Pt[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
    ᐃⲆΔᐃⲆ = "Uuunnnggg";
    ᐃᐃⲆⲆΔⲆⲆ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
  }
  function yb(b, c, d, e, f) {
    const i = ~(b & 39105) & b | ~(b & 39105) & 39105;
    const a = (2531011 + (11545 + e) * 214013) % 4294967296;
    const j = (16 << (f >> 8 & 255)) + (24 << (f >> 24 & 255)) + (0 << (f >> 16 & 255)) + (8 << (f & 255));
    const k = (46227 + ((~(i & 13337) & i | ~(i & 13337) & 13337) ^ (1013904223 + (d + 30170) * 1664525) % 4294967296)) % 65376;
    const h = (24 << ((k ^ a) >> 24 & 255)) + (8 << ((k ^ a) >> 8 & 255)) + (16 << ((k ^ a) >> 16 & 255)) + (0 << ((k ^ a) & 255));
    return (16 << ((h ^ j) >> 16 & 255)) + (24 << ((h ^ j) >> 24 & 255)) + (8 << ((h ^ j) >> 0 & 255)) + (0 << ((h ^ j) >> 8 & 255));
  }
  function wb() {
    Qb[184] = ["You feel a great power emanating from this orb"];
    Pt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Qb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Qb[328] = " BACK TO THE GAME";
    Qb[329] = " Share on Twitter";
    Qb[330] = " Share on Facebook";
    Qb[331] = "You can buy items on the shop in the next game with your points";
    Qb[332] = "points";
    Qb[333] = "Score";
    Qb[334] = "Kill";
    Qb[335] = "Days survived";
    Qb[336] = "Building method: Free. Press G to change";
    Qb[337] = "Building method: Grid. Press G to change";
    Qb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Qb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Qb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Qb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Qb[7] = ["mão"];
    Qb[140] = ["terra", "está sujo!"];
    Qb[126] = ["areia", "entrou nos meus olhos!"];
    Qb[109] = ["madeira", "você não pode pegar o suficiente disso!"];
    Qb[108] = ["pedra", "também chamado rocha"];
    Qb[111] = ["ouro", "seja generoso, dê para outros"];
    Qb[112] = ["diamante", "o que você irá fazer com isso?"];
    Qb[121] = ["ametista", "é mauve como lapa"];
    Qb[131] = ["farinha", "usada na cozinha"];
    Qb[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
    Qb[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    Qb[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
    Qb[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
    Qb[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
    Qb[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
    Qb[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
    Qb[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
    Qb[200] = ["doces", "apenas para crianças!", "comida: 100"];
    Qb[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
    Qb[201] = ["pisca-pisca", "decoração perfeita de telhado"];
    Qb[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
    Qb[110] = ["berry", "Berry saborosa!", "comida: 10"];
    Qb[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
    Qb[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
    Qb[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
    Qb[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    Qb[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
    Qb[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
    Qb[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
    Qb[194] = ["mato de espinhos", "pica!"];
    Qb[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
    Qb[142] = ["gelo", "útil para fazer bolo e água"];
    Qb[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
    Qb[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
    Qb[2] = ["pele de coelho", "o coelho era tão fofo..."];
    Qb[178] = ["pele pura", "você é uma fábrica de pão"];
    Qb[179] = ["pele negra", "você está pronto para fazer algo errado"];
    Qb[146] = ["pele de inverno", "ele só queria um abraço"];
    Qb[139] = ["escala", "é pequeno como peixe!"];
    Qb[129] = ["pele do kraken", "você não está com medo?"];
    Qb[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
    Qb[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
    Qb[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
    Qb[161] = ["linha", "usada para fazer chapéus e mochila"];
    Qb[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
    Qb[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
    Qb[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
    Qb[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
    Qb[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
    Qb[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
    Qb[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
    Qb[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
    Qb[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
    Qb[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
    Qb[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
    Qb[uh.ΔΔΔⵠΔⲆᐃᐃⵠ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
    Qb[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
    Qb[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
    Qb[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
    Qb[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
    Qb[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
    Qb[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
    Qb[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
    Qb[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
    Qb[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
    Qb[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
    Qb[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
    Qb[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
    Qb[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
    Qb[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
    Qb[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
    Qb[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
    Qb[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
    Qb[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
    Qb[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
    Qb[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
    Qb[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
    Qb[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
    Qb[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
    Qb[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
    Qb[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
    Qb[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
    Qb[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
    Qb[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
    Qb[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
    Qb[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
    Qb[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
    Qb[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
    Qb[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
    Qb[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
    Qb[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
    Qb[185] = ["esfera do dragão", "dado na questt"];
    Qb[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
    Qb[175] = ["pedra verde", "você não vai trapacear, promete?"];
    Qb[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
    Qb[177] = ["pedra azul", "para pessoas muito gentis"];
    Qb[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
    Qb[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
    Qb[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
    Qb[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
    Qb[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
    Qb[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
    Qb[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
    Qb[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
    Qb[49] = ["regador", "permite regar as plantas", "dano: 1"];
    Qb[29] = ["mochila", "mais espaço para seus itens!"];
    Qb[120] = ["papel", "usado para fazer o livro"];
    Qb[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
    Qb[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
    Qb[148] = ["fechadura", "permite você trancar seu baú"];
    Qb[158] = ["chave", "permite destrancar um baú"];
    Qb[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
    Qb[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
    Qb[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
    Qb[190] = ["telhado", "esconde você um pouco e te esquenta!"];
    Qb[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    Qb[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
    Qb[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
    Qb[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
    Qb[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
    Qb[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
    Qb[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
    Qb[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
    Qb[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
    Qb[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
    Qb[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
    Qb[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
    Qb[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
    Qb[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
    Qb[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
    Qb[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
    Qb[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
    Qb[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
    Qb[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
    Qb[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
    Qb[300] = "você não pode entrar no servidor";
    Qb[301] = "kickado: ";
    Qb[302] = "sua chave está em uso por outra pessoa";
    Qb[303] = "sua chave está errada";
    Qb[304] = "você tem uma versão velha, limpe seu cache";
    Qb[305] = "não tem mais recursos";
    Qb[306] = "você sobreviveu 1 dia";
    Qb[307] = "você sobreviveu ";
    Qb[308] = " dias";
    Qb[309] = "você está morto ;-;";
    Qb[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
    Qb[311] = "servidor está cheio! spam o botão de play!";
    Qb[312] = "não tem recursos";
    Qb[313] = "inventário está cheio (botão direito para deletar itens)";
    Qb[314] = " está morto";
    Qb[315] = "essa não é a ferramenta certa";
    Qb[316] = "você entrou no time";
    Qb[317] = "você está morto";
    Qb[318] = "entrou no time";
    Qb[319] = "seu time foi destruido";
    Qb[320] = "você saiu do time";
    Qb[321] = " saiu do time";
    Qb[322] = "alguém roubou sua ficha :>";
    Qb[323] = "escolha um servidor";
    Qb[324] = "jogadores";
    Qb[325] = "jogadores totais";
    Qb[326] = "jogadores nesse modo";
    Qb[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    Pt[0] = ["você morreu sem motivo"];
    Pt[1] = ["você morreu de fome, como o jogo diz"];
    Pt[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
    Pt[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
    Pt[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
    Pt[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
    Pt[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
    Pt[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
    Pt[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
    Pt[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
    Pt[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
    Pt[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
    Pt[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
    Pt[13] = ["você morreu de sede. melhor beber sua própria urina."];
    Pt[14] = ["você sabia que você morre afogado? agora você sabe."];
    Pt[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
    Pt[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
    Pt[17] = ["sua pele caindo aos pedaços, o sol te matou."];
    Pt[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    Pt[19] = ["como vampiro, não chegue perto do alho."];
    Pt[20] = ["você comeu alho como vampiro, o que você esperava?"];
    Pt[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
    ᐃⲆΔᐃⲆ = "Uuunnnggg";
    ᐃᐃⲆⲆΔⲆⲆ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
  }
  function Pb(a) {
    return ko(a, 49864, 62347, 16095);
  }
  function kb(b, c, d, e, f, g) {
    ai($f, b, c, d, e, f, g);
    const a = ~(Vw[0] & 4662) & Vw[0] | ~(Vw[0] & 4662) & 4662;
    const i = ((165 + ((a | 54456) & ~(a & 54456) ^ Vw[3])) * 8121 + 28411) % 134456;
    const j = ~(i & 54682) & 54682 | ~(i & 54682) & i;
    return (j | 41791) & ~(j & 41791);
  }
  const Ab = 11;
  function xb() {
    Qb[184] = ["You feel a great power emanating from this orb"];
    Pt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Qb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Qb[328] = " BACK TO THE GAME";
    Qb[329] = " Share on Twitter";
    Qb[330] = " Share on Facebook";
    Qb[331] = "You can buy items on the shop in the next game with your points";
    Qb[332] = "points";
    Qb[333] = "Score";
    Qb[334] = "Kill";
    Qb[335] = "Days survived";
    Qb[336] = "Building method: Free. Press G to change";
    Qb[337] = "Building method: Grid. Press G to change";
    Qb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Qb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Qb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Qb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Qb[7] = ["Mano"];
    Qb[140] = ["Tierra", "¡Tan limpia como mis manos!"];
    Qb[126] = ["Arena", "¡Tengo arena en mis ojos!"];
    Qb[109] = ["Madera", "¡Nunca hay suficiente!"];
    Qb[108] = ["Piedra", "También llamada roca."];
    Qb[111] = ["Oro", "Sé generoso, compártelo con los otros"];
    Qb[112] = ["Diamante", "¿Que vas a hacer con él?"];
    Qb[121] = ["Amatista", "Es Mauve como Lapa"];
    Qb[131] = ["Harina", "Usada para cocinar."];
    Qb[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    Qb[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
    Qb[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
    Qb[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
    Qb[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
    Qb[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
    Qb[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
    Qb[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
    Qb[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
    Qb[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
    Qb[201] = ["Guirnalda", "Perfecta para decorar el techo"];
    Qb[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Qb[110] = ["Baya", "No es venenosa.", "Comida: 10"];
    Qb[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Qb[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
    Qb[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Qb[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    Qb[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
    Qb[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
    Qb[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
    Qb[194] = ["Planta de Espinas", "¡Te daña!"];
    Qb[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
    Qb[142] = ["Hielo", "Bueno para hacer tartas y agua"];
    Qb[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
    Qb[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
    Qb[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    Qb[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
    Qb[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
    Qb[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
    Qb[139] = ["Escamas", "¡Huele a pescado!"];
    Qb[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
    Qb[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
    Qb[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
    Qb[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
    Qb[161] = ["Hilo", "Usado para craftear ropa y mochila"];
    Qb[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
    Qb[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
    Qb[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
    Qb[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
    Qb[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
    Qb[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
    Qb[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
    Qb[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
    Qb[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
    Qb[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
    Qb[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
    Qb[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    Qb[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
    Qb[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
    Qb[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
    Qb[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
    Qb[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
    Qb[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
    Qb[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
    Qb[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
    Qb[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
    Qb[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
    Qb[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
    Qb[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
    Qb[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
    Qb[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
    Qb[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
    Qb[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
    Qb[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
    Qb[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
    Qb[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
    Qb[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
    Qb[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
    Qb[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
    Qb[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
    Qb[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
    Qb[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
    Qb[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
    Qb[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
    Qb[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
    Qb[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
    Qb[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    Qb[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
    Qb[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
    Qb[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
    Qb[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
    Qb[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
    Qb[185] = ["Esfera del Dragón", "Dada en la misión"];
    Qb[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
    Qb[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
    Qb[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
    Qb[177] = ["Gema Azul", "Para gente muy amable"];
    Qb[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
    Qb[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
    Qb[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
    Qb[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
    Qb[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
    Qb[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
    Qb[128] = ["Botella Vacia", "La puedes llenar de agua"];
    Qb[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
    Qb[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
    Qb[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
    Qb[120] = ["Hoja", "Usada para hacer un libro"];
    Qb[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
    Qb[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
    Qb[148] = ["Cerradura", "Te permite cerrar tu cofre"];
    Qb[158] = ["Llave", "Te permite abrir un cofre cerrado"];
    Qb[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
    Qb[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
    Qb[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
    Qb[190] = ["Techo", "Te esconde un poco y te protege del frío"];
    Qb[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
    Qb[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
    Qb[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
    Qb[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
    Qb[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
    Qb[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
    Qb[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
    Qb[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
    Qb[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
    Qb[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
    Qb[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
    Qb[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
    Qb[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
    Qb[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
    Qb[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
    Qb[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
    Qb[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
    Qb[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    Qb[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    Qb[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
    Qb[300] = "No puedes unirte a este servidor";
    Qb[301] = "Expulsado: ";
    Qb[302] = "Tu llave ya está usada";
    Qb[303] = "Tu llave está mal";
    Qb[304] = "Tienes una versión antigua, limpia tu cache";
    Qb[305] = "No hay mas recursos";
    Qb[306] = "Has sobrevivido 1 día";
    Qb[307] = "Has sobrevivido ";
    Qb[308] = " días";
    Qb[309] = "Estás muerto ;-;";
    Qb[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
    Qb[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
    Qb[312] = "Recurso vacio";
    Qb[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
    Qb[314] = " está muerto";
    Qb[315] = "Esta no es la herramienta correcta";
    Qb[316] = "Te has unido a un equipo";
    Qb[317] = "Estás muerto";
    Qb[318] = " se unió al equipo";
    Qb[319] = "Tu equipo ha sido destruido";
    Qb[320] = "Has dejado el equipo";
    Qb[321] = " dejo el equipo ";
    Qb[322] = "Alguien te robó tu token :>";
    Qb[323] = "Elige un servidor";
    Qb[324] = "jugadores";
    Qb[325] = "total de jugadores";
    Qb[326] = "Jugadores en este modo de juego";
    Qb[327] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    Pt[0] = ["Has muerto por ninguna razón"];
    Pt[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    Pt[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
    Pt[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
    Pt[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
    Pt[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
    Pt[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
    Pt[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
    Pt[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
    Pt[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
    Pt[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
    Pt[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
    Pt[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
    Pt[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
    Pt[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
    Pt[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
    Pt[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
    Pt[17] = ["Tu piel se cayó, el sol te quemó."];
    Pt[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    Pt[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
    Pt[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
    Pt[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
    ᐃⲆΔᐃⲆ = "Uuunnnggg";
    ᐃᐃⲆⲆΔⲆⲆ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
  }
  function Jb() {
    Qb[184] = ["You feel a great power emanating from this orb"];
    Pt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Qb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Qb[328] = " BACK TO THE GAME";
    Qb[329] = " Share on Twitter";
    Qb[330] = " Share on Facebook";
    Qb[331] = "You can buy items on the shop in the next game with your points";
    Qb[332] = "points";
    Qb[333] = "Score";
    Qb[334] = "Kill";
    Qb[335] = "Days survived";
    Qb[336] = "Building method: Free. Press G to change";
    Qb[337] = "Building method: Grid. Press G to change";
    Qb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Qb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Qb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Qb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Qb[7] = ["Hand"];
    Qb[140] = ["Boden", "Dreckig!"];
    Qb[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    Qb[109] = ["Holz", "Du kannst niemals zu viel haben!"];
    Qb[108] = ["Stein", "Auch Fels gennant"];
    Qb[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    Qb[112] = ["Diamant", "Was wirst du daraus machen?"];
    Qb[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    Qb[131] = ["Mehl", "wird fürs Backen gebraucht"];
    Qb[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
    Qb[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
    Qb[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
    Qb[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
    Qb[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
    Qb[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
    Qb[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
    Qb[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
    Qb[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    Qb[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
    Qb[201] = ["Girlande", "perfekter Schmuck für Dächer"];
    Qb[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Qb[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
    Qb[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Qb[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
    Qb[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Qb[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
    Qb[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Qb[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
    Qb[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
    Qb[194] = ["Dornenbusch", "Es sticht!"];
    Qb[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
    Qb[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    Qb[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
    Qb[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    Qb[2] = ["Hasenfell", "Der Hase war so süß..."];
    Qb[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
    Qb[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
    Qb[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
    Qb[139] = ["Schuppen", "Es riecht wie Fisch!"];
    Qb[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    Qb[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
    Qb[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
    Qb[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
    Qb[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
    Qb[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
    Qb[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
    Qb[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
    Qb[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
    Qb[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
    Qb[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
    Qb[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
    Qb[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
    Qb[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
    Qb[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
    Qb[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
    Qb[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
    Qb[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    Qb[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    Qb[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
    Qb[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
    Qb[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
    Qb[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
    Qb[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
    Qb[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
    Qb[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
    Qb[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
    Qb[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
    Qb[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
    Qb[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
    Qb[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
    Qb[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    Qb[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    Qb[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
    Qb[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
    Qb[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
    Qb[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
    Qb[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
    Qb[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
    Qb[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
    Qb[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
    Qb[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
    Qb[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
    Qb[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    Qb[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
    Qb[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
    Qb[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
    Qb[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    Qb[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    Qb[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    Qb[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
    Qb[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Qb[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
    Qb[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
    Qb[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
    Qb[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
    Qb[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
    Qb[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Qb[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Qb[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Qb[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
    Qb[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
    Qb[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
    Qb[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
    Qb[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
    Qb[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
    Qb[29] = ["Rucksack", "Mehr Platz im Inventar!"];
    Qb[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
    Qb[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
    Qb[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
    Qb[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    Qb[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
    Qb[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
    Qb[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
    Qb[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
    Qb[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    Qb[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
    Qb[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
    Qb[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
    Qb[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
    Qb[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
    Qb[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
    Qb[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
    Qb[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
    Qb[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
    Qb[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
    Qb[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
    Qb[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
    Qb[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
    Qb[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
    Qb[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
    Qb[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
    Qb[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
    Qb[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    Qb[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    Qb[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
    Qb[300] = "Du kannst diesem Server nicht beitreten";
    Qb[301] = "Gekickt: ";
    Qb[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    Qb[303] = "Dein Schlüssel ist falsch";
    Qb[304] = "Deine Version ist veraltet, säubere dein Cache";
    Qb[305] = "Es gibt keine neuen Ressourcen";
    Qb[306] = "Du hast einen Tag überlebt";
    Qb[307] = "Du hast überlebt ";
    Qb[308] = " Tage";
    Qb[309] = "Du bist gestorben ;-;";
    Qb[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    Qb[311] = "Server ist voll! Drücke immer wieder auf spielen!";
    Qb[312] = "Ressource ist leer";
    Qb[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    Qb[314] = " ist gestorben";
    Qb[315] = "Das ist nicht das richtige Werkzeug";
    Qb[316] = "Du bist einem Team beigetreten";
    Qb[317] = "Du bist gestorben";
    Qb[318] = " ist dem Team beigetreten";
    Qb[319] = "Dein Team wurde zerstört";
    Qb[320] = "Du hast das Team verlassen";
    Qb[321] = " hat das Team verlassen";
    Qb[322] = "Jemand hat dein Token gestohlen :>";
    Qb[323] = "Suche dir ein Server aus";
    Qb[324] = "Spieler";
    Qb[325] = "alle Spieler";
    Qb[326] = "Spieler in diesem Modus";
    Qb[327] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    Pt[0] = ["Du wurdest ohne Grund getötet"];
    Pt[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    Pt[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
    Pt[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
    Pt[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
    Pt[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
    Pt[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
    Pt[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
    Pt[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
    Pt[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
    Pt[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
    Pt[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
    Pt[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
    Pt[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
    Pt[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
    Pt[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
    Pt[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
    Pt[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    Pt[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    Pt[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    Pt[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
    Pt[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
    ᐃⲆΔᐃⲆ = "Uuunnnggg";
    ᐃᐃⲆⲆΔⲆⲆ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
  }
  const Mb = 6;
  function Bb() {
    Qb[184] = ["You feel a great power emanating from this orb"];
    Pt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Qb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Qb[328] = " BACK TO THE GAME";
    Qb[329] = " Share on Twitter";
    Qb[330] = " Share on Facebook";
    Qb[331] = "You can buy items on the shop in the next game with your points";
    Qb[332] = "points";
    Qb[333] = "Score";
    Qb[334] = "Kill";
    Qb[335] = "Days survived";
    Qb[336] = "Building method: Free. Press G to change";
    Qb[337] = "Building method: Grid. Press G to change";
    Qb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Qb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Qb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Qb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Qb[7] = ["Ręka"];
    Qb[140] = ["Ziemia", "Brudna!"];
    Qb[126] = ["Piasek", "Mam go w oczach!"];
    Qb[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    Qb[108] = ["Kamień", "Także nazywany skałą"];
    Qb[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
    Qb[112] = ["Diament", "Co z nim zrobisz?"];
    Qb[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    Qb[131] = ["Mąka", "Używana w gotowaniu"];
    Qb[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
    Qb[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    Qb[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
    Qb[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
    Qb[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
    Qb[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
    Qb[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
    Qb[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
    Qb[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    Qb[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
    Qb[201] = ["Girlanda", "Idealna do dekorowania dachów"];
    Qb[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Qb[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    Qb[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Qb[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
    Qb[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Qb[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    Qb[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Qb[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
    Qb[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
    Qb[194] = ["Kolczasty krzew", "Kłuje!"];
    Qb[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
    Qb[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
    Qb[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
    Qb[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
    Qb[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    Qb[178] = ["Skóra", "Jesteś fabryką chleba"];
    Qb[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    Qb[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
    Qb[139] = ["Łuski", "Pachnie jak ryba!"];
    Qb[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    Qb[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
    Qb[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
    Qb[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
    Qb[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    Qb[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
    Qb[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
    Qb[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
    Qb[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
    Qb[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
    Qb[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    Qb[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    Qb[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
    Qb[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
    Qb[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
    Qb[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
    Qb[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
    Qb[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    Qb[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    Qb[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    Qb[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
    Qb[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
    Qb[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
    Qb[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
    Qb[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
    Qb[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
    Qb[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
    Qb[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
    Qb[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
    Qb[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
    Qb[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
    Qb[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    Qb[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    Qb[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    Qb[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
    Qb[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
    Qb[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
    Qb[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
    Qb[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
    Qb[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
    Qb[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
    Qb[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
    Qb[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
    Qb[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
    Qb[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
    Qb[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
    Qb[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    Qb[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
    Qb[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
    Qb[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
    Qb[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
    Qb[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Qb[185] = ["Smocza kula", "Zdobyta podczas zadania"];
    Qb[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
    Qb[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
    Qb[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
    Qb[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    Qb[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Qb[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Qb[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Qb[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
    Qb[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    Qb[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
    Qb[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
    Qb[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
    Qb[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
    Qb[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    Qb[120] = ["Papier", "Używany w tworzeniu książki"];
    Qb[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
    Qb[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
    Qb[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    Qb[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    Qb[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
    Qb[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
    Qb[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
    Qb[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    Qb[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
    Qb[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
    Qb[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
    Qb[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
    Qb[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
    Qb[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
    Qb[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
    Qb[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
    Qb[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
    Qb[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
    Qb[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
    Qb[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
    Qb[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
    Qb[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
    Qb[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
    Qb[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
    Qb[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
    Qb[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    Qb[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    Qb[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
    Qb[300] = "Nie możesz dołączyć do tego serwera";
    Qb[301] = "Wyrzucony: ";
    Qb[302] = "Twój klucz jest aktualnie używany przez innego gracza";
    Qb[303] = "Twój klucz jest nieprawidłowy";
    Qb[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    Qb[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
    Qb[306] = "Przeżyłeś 1 dzień";
    Qb[307] = "Przeżyłeś ";
    Qb[308] = " dni";
    Qb[309] = "Jesteś martwy ;-;";
    Qb[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    Qb[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    Qb[312] = "Źródło jest puste";
    Qb[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    Qb[314] = " jest martwy";
    Qb[315] = "To nie jest właściwe narzędzie";
    Qb[316] = "Dołączyłeś do drużyny";
    Qb[317] = "Jesteś martwy";
    Qb[318] = " dołączył do drużyny";
    Qb[319] = "Twoja drużyna została zniszczona";
    Qb[320] = " Opuściłeś drużynę";
    Qb[321] = " opuścił drużynę";
    Qb[322] = "Ktoś ukradł twój żeton :>";
    Qb[323] = "Wybierz serwer";
    Qb[324] = "graczy";
    Qb[325] = "wszystkich graczy";
    Qb[326] = "graczy w tym trybie";
    Qb[327] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    Pt[0] = ["Zostałeś zabity bez powodu"];
    Pt[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    Pt[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
    Pt[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
    Pt[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
    Pt[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
    Pt[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
    Pt[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
    Pt[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
    Pt[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
    Pt[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
    Pt[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
    Pt[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
    Pt[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    Pt[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
    Pt[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
    Pt[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
    Pt[17] = ["Twoja skóra odpada, słońce cię zabija."];
    Pt[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    Pt[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    Pt[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    Pt[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
    ᐃⲆΔᐃⲆ = "Uuunnnggg";
    ᐃᐃⲆⲆΔⲆⲆ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
  }
  function Eb(b, c, d, e, f) {
    const g = (1 + (b + 24833) * 22695477) % 4294967296;
    const a = (12345 + (7801 + e) * 1103515245) % 2147483648;
    const h = ~(f & 25906) & (f | 25906);
    return (2147483587 + (22453 + (Hs(g, (c | 49658) & ~(c & 49658), ~(d & 38550) & 38550 | ~(d & 38550) & d) ^ Vx(a, h, g))) * 2147483629) % 2147483647;
  }
  function Db(a, b, c) {
    mi($f, a, b, c);
    const d = Cb(Vw[0], Vw[1], Vw[2], Vw[0]);
    const e = function (b, c, d, e, f) {
      Wi($f, b, c, d, e, f);
      const g = nx(Vw[0], Vw[1]);
      en(Vw[2], Vw[3], Vw[4], Vw[0], Vw[1], Vw[2]);
      return g ^ 53784;
    }(Vw[1], Vw[2], Vw[0], Vw[1], Vw[2]);
    return (24 << ((d ^ e) >> 24 & 255)) + (0 << ((d ^ e) & 255)) + (16 << ((d ^ e) >> 8 & 255)) + (8 << ((d ^ e) >> 16 & 255));
  }
  const Ib = 12;
  function Sb() {
    Qb[184] = ["You feel a great power emanating from this orb"];
    Pt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Qb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Qb[328] = " RETOUR AU JEU";
    Qb[329] = " Partage sur Twitter";
    Qb[330] = " Partage sur Facebook";
    Qb[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    Qb[332] = "points";
    Qb[333] = "Score";
    Qb[334] = "Tués";
    Qb[335] = "Jours survécus";
    Qb[336] = "Mode de construction: Libre. Appuie sur G pour changer";
    Qb[337] = "Mode de construction: Grille. Appuie sur G pour changer";
    Qb[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
    Qb[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
    Qb[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
    Qb[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    Qb[7] = ["Main"];
    Qb[140] = ["Terre", "C'est sale!"];
    Qb[126] = ["Sable", "J'en ai dans les yeux"];
    Qb[109] = ["Bois", "Tu n'en auras jamais trop!"];
    Qb[108] = ["Pierre", "Aussi appelée roche"];
    Qb[111] = ["Or", "Sois généreux, donne en aux autres"];
    Qb[112] = ["Diamant", "Comme tes yeux! wesh"];
    Qb[121] = ["Améthyste", "C'est Mauve comme Lapa"];
    Qb[131] = ["Farine", "Utile pour la cuisine"];
    Qb[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
    Qb[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    Qb[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
    Qb[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
    Qb[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
    Qb[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
    Qb[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
    Qb[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
    Qb[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
    Qb[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
    Qb[201] = ["Guirlandes", "Utilisable sur les toits"];
    Qb[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
    Qb[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    Qb[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    Qb[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
    Qb[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    Qb[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
    Qb[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
    Qb[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
    Qb[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
    Qb[194] = ["Ronces", "Ça pique!"];
    Qb[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
    Qb[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    Qb[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
    Qb[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    Qb[2] = ["Peau de lapin", "Vous êtes un monstre"];
    Qb[178] = ["Fourrure blanche", "Tu es une usine à pain"];
    Qb[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
    Qb[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    Qb[139] = ["Écailles", "Ça sent le poisson!"];
    Qb[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    Qb[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
    Qb[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
    Qb[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
    Qb[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    Qb[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    Qb[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
    Qb[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
    Qb[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
    Qb[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
    Qb[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
    Qb[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
    Qb[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
    Qb[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
    Qb[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
    Qb[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
    Qb[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
    Qb[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
    Qb[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
    Qb[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
    Qb[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
    Qb[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
    Qb[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
    Qb[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
    Qb[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
    Qb[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
    Qb[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
    Qb[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
    Qb[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
    Qb[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
    Qb[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
    Qb[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
    Qb[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
    Qb[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
    Qb[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
    Qb[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
    Qb[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
    Qb[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
    Qb[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
    Qb[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
    Qb[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Qb[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Qb[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Qb[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Qb[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Qb[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Qb[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    Qb[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Qb[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Qb[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Qb[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
    Qb[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
    Qb[185] = ["Orbe du Dragon", "Donné en Quête"];
    Qb[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
    Qb[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    Qb[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
    Qb[177] = ["Gemme bleue", "Pour les gens trop gentils"];
    Qb[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
    Qb[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
    Qb[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
    Qb[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
    Qb[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
    Qb[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
    Qb[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
    Qb[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
    Qb[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
    Qb[29] = ["Sac", "Plus de place dans ton inventaire!"];
    Qb[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    Qb[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
    Qb[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
    Qb[148] = ["Cadenas", "Pour verrouiller un coffre"];
    Qb[158] = ["Clé", "Pour déverrouiller un coffre"];
    Qb[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
    Qb[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
    Qb[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
    Qb[190] = ["Toit", "Te cache un peu et te réchauffe"];
    Qb[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
    Qb[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
    Qb[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
    Qb[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
    Qb[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
    Qb[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
    Qb[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
    Qb[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
    Qb[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
    Qb[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
    Qb[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
    Qb[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
    Qb[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
    Qb[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
    Qb[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
    Qb[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
    Qb[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
    Qb[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    Qb[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    Qb[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
    Qb[300] = "Tu ne peux pas rejoindre le serveur";
    Qb[301] = "Expulsé: ";
    Qb[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    Qb[303] = "Ta clé est fausse";
    Qb[304] = "Tu as une vieille version, rafraichis tes caches";
    Qb[305] = "Il n'y a plus de nouvelles ressources";
    Qb[306] = "Tu as survécu 1 jour";
    Qb[307] = "Tu as survécu ";
    Qb[308] = " jours";
    Qb[309] = "Tu es mort ;-;";
    Qb[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    Qb[311] = "Le serveur est complet! Spam le bouton jouer";
    Qb[312] = "Cette ressource est vide";
    Qb[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    Qb[314] = " est mort";
    Qb[315] = "Ce n'est pas le bon outil";
    Qb[316] = "Tu as rejoins une équipe";
    Qb[317] = "Tu es mort";
    Qb[318] = " a rejoint l'équipe";
    Qb[319] = "Ton équipe a été détruite";
    Qb[320] = "Tu as quitté l'équipe";
    Qb[321] = " a quitté l'équipe";
    Qb[322] = "Quelqu'un a volé ton token :>";
    Qb[323] = "Choisis un serveur";
    Qb[324] = "joueurs";
    Qb[325] = "joueurs";
    Qb[326] = "joueurs dans ce mode";
    Qb[327] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    Pt[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
    Pt[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    Pt[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
    Pt[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
    Pt[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
    Pt[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    Pt[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
    Pt[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
    Pt[8] = ["Cet ours voulait juste un câlin."];
    Pt[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
    Pt[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
    Pt[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
    Pt[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
    Pt[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
    Pt[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    Pt[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    Pt[16] = ["Un kraken a 'kraké' tes os."];
    Pt[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    Pt[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    Pt[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    Pt[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
    Pt[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
    ᐃⲆΔᐃⲆ = "Uuunnnggg";
    ᐃᐃⲆⲆΔⲆⲆ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
  }
  var Qb = [];
  for (var _b = 0; _b < 344; _b++) {
    Qb[_b] = "";
  }
  var Pt = [];
  const Rb = 4;
  $(".md-languages").on("click", function () {
    $(this).toggleClass("active");
  });
  $(".md-languages ul li").on("click", function () {
    var a = $(this).text();
    if (a === "English") {
      Tb();
    } else if (a === "Français") {
      Sb();
    } else if (a === "Deutsch") {
      Jb();
    } else if (a === "Español") {
      xb();
    } else if (a === "Português") {
      wb();
    } else if (a === "Русский") {
      zb();
    } else if (a === "Polski") {
      Bb();
    }
    ΔᐃⲆᐃᐃ = [];
    Hx.ᐃⵠΔⲆ.label = [];
    $(".md-languages ul li").removeClass("active");
    $(this).addClass("active");
    $(".md-languages label button").text(a);
  });
  const jb = 9;
  os = "EN";
  const Lb = 11;
  switch (navigator.language || navigator.userLanguage) {
    case "ru":
      os = "RU";
      break;
    case "en":
      os = "EN";
      break;
    case "es":
      os = "SP";
      break;
    case "fr":
      os = "FR";
      break;
    case "pl":
      os = "PL";
      break;
    case "de":
      os = "DE";
      break;
    case "pt":
      os = "PT";
  }
  const Wb = 4;
  var Gb;
  if (os === "FR") {
    $(".md-languages label button").text("Français");
    Gb = Sb;
  } else if (os === "PL") {
    $(".md-languages label button").text("Polski");
    Gb = Bb;
  } else if (os === "PT") {
    $(".md-languages label button").text("Português");
    Gb = wb;
  } else if (os === "SP") {
    $(".md-languages label button").text("Español");
    Gb = xb;
  } else if (os === "RU") {
    $(".md-languages label button").text("Русский");
    Gb = zb;
  } else if (os === "DE") {
    $(".md-languages label button").text("Deutsch");
    Gb = Jb;
  } else {
    $(".md-languages label button").text("English");
    Gb = Tb;
  }
  const Qt = 9;
  const qb = 255;
  function Ob(a, b) {
    const c = (a + 5895) % 65371;
    const d = ((31014 + b) * 1664525 + 1013904223) % 4294967296;
    return ((10099 + (function (a, b) {
      const c = (16 << (a >> 24 & 255)) + (24 << (a >> 16 & 255)) + (0 << (a >> 8 & 255)) + (8 << (a & 255));
      const d = (8 << (b >> 16 & 255)) + (16 << (b >> 0 & 255)) + (0 << (b >> 24 & 255)) + (24 << (b >> 8 & 255));
      const e = function (b, c, d, e, f) {
        const i = (1013904223 + (28701 + b) * 1664525) % 4294967296;
        const a = ~(c & 54818) & c | ~(c & 54818) & 54818;
        const j = ((60600 + e) * 214013 + 2531011) % 4294967296;
        const k = ~(f & 22656) & 22656 | ~(f & 22656) & f;
        const h = _o(i, a, (16 << (d & 255)) + (8 << (d >> 16 & 255)) + (24 << (d >> 24 & 255)) + (0 << (d >> 8 & 255)));
        lb(j, k, i, a);
        return h ^ 28349;
      }(c, d, c, d, c);
      mb(d, c, d);
      return ~(e & 40228) & 40228 | ~(e & 40228) & e;
    }(c, d) ^ Jo(c, d, c, d))) * 1664525 + 1013904223) % 4294967296;
  }
  const Hb = 1;
  const Ub = 11;
  const Yb = 3;
  function Kb(b, c, d, e, f) {
    const i = (b | 46198) & ~(b & 46198);
    const a = (24 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 24 & 255)) + (0 << (c & 255));
    const j = (d | 31579) & ~(d & 31579);
    const k = ((e + 29063) * 214013 + 2531011) % 4294967296;
    const h = ~(f & 1863) & 1863 | ~(f & 1863) & f;
    const g = Mk(i, a, j);
    (function (b, c, d, e, f, i) {
      const a = (d + 32967) % 65460;
      const j = (e | 51453) & ~(e & 51453);
      const k = f ^ 52455;
      const h = Mw((16 << (b >> 0 & 255)) + (0 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)), (2531011 + (c + 47705) * 214013) % 4294967296);
      (function (b, c, d) {
        const e = (2531011 + (b + 47675) * 214013) % 4294967296;
        const f = ((51358 + c) * 2147483629 + 2147483587) % 2147483647;
        const g = ((56089 + d) * 2147483629 + 2147483587) % 2147483647;
        const a = $b(e, f, g, e, f);
        Ax(g, e);
      })(a, j, k);
    })(k, h, i, a, j);
    return ~(g & 33499) & (g | 33499);
  }
  ᐃΔ = {
    ΔᐃⲆⵠΔⵠΔᐃⲆ: "img/logo.png",
    ᐃⵠⲆⵠΔⲆΔ: "img/mapday.png",
    ΔΔᐃᐃⲆᐃΔ: "img/mapnight.png",
    ⵠᐃⵠⲆᐃⵠᐃᐃⵠ: "img/bigzday.png",
    ᐃⲆᐃΔⲆᐃⲆⵠᐃ: "img/bigznight.png",
    ⲆⲆⲆΔⲆⲆᐃ: "img/bigday-river1.png",
    ΔᐃⵠᐃᐃⲆΔΔⵠ: "img/bigday-lake.png",
    ΔⵠⲆᐃᐃⲆⵠ: "img/bigday-berry.png",
    ᐃⵠⵠⲆΔⵠᐃ: "img/bigday-stone1.png",
    ⲆΔⵠΔⲆⵠⲆ: "img/bigday-stone2.png",
    ⲆⲆⵠΔΔⵠⵠ: "img/bigday-gold1.png",
    Ⲇᐃⵠᐃⵠⵠᐃ: "img/bigday-gold2.png",
    ⵠᐃΔⲆⲆⵠᐃ: "img/bigday-emerald1.png",
    ᐃΔⵠᐃᐃᐃⲆ: "img/bigday-emerald2.png",
    ⲆΔᐃⵠᐃᐃΔ: "img/bigday-amethyst.png",
    ⵠⲆᐃΔᐃΔᐃ: "img/bigday-bear.png",
    ᐃⵠΔⲆᐃΔᐃ: "img/bigday-cave.png",
    ⲆⲆⲆⲆⲆⲆΔ: "img/bigday-diamond.png",
    ΔⲆⵠᐃΔΔⲆ: "img/bigday-island.png",
    ΔⲆΔⵠᐃⵠⵠ: "img/bigday-reidite.png",
    ΔΔΔΔⵠⲆᐃ: "img/bigday-spider.png",
    ᐃᐃⲆⲆᐃΔᐃ: "img/bigday-wolf.png",
    ᐃᐃⲆᐃⵠᐃᐃ: "img/bigday-fir-tree.png",
    ⲆⲆΔⲆΔΔΔ: "img/bigday-fox.png",
    ᐃⵠᐃⵠⵠᐃⵠ: "img/bigday-kraken.png",
    ᐃᐃΔⵠⲆⵠⲆ: "img/bigday-piranha.png",
    ⲆΔⵠⲆⲆᐃⲆ: "img/bigday-cactus.png",
    ⲆⲆΔΔΔᐃΔ: "img/bigday-magma.png",
    ᐃᐃΔᐃⲆⵠⵠ: "img/bigday-river1.png",
    ΔΔⵠⲆⵠⲆΔΔⵠ: "img/bignight-lake.png",
    ᐃⵠⲆΔⵠⵠⵠᐃᐃ: "img/bignight-berry.png",
    ᐃⲆⵠⵠΔᐃⵠ: "img/bignight-stone1.png",
    ⵠⵠΔΔᐃᐃⵠ: "img/bignight-stone2.png",
    ⲆⵠΔⵠΔⵠᐃ: "img/bignight-gold1.png",
    ᐃⲆⲆᐃᐃΔΔ: "img/bignight-gold2.png",
    ᐃΔⵠΔⵠⲆΔ: "img/bignight-emerald1.png",
    ΔᐃᐃΔΔⵠⵠ: "img/bignight-emerald2.png",
    ⲆᐃⵠⲆⵠⵠⵠ: "img/bignight-amethyst.png",
    ⵠⵠᐃⲆᐃΔⵠ: "img/bignight-bear.png",
    ΔⵠᐃⲆⲆⵠΔ: "img/bignight-cave.png",
    ⵠⲆΔᐃᐃᐃⵠ: "img/bignight-diamond.png",
    ⵠᐃΔⲆⵠᐃⵠ: "img/bignight-island.png",
    ΔⵠⵠΔᐃΔᐃ: "img/bignight-reidite.png",
    ⲆΔⵠⵠⲆⲆΔ: "img/bignight-spider.png",
    ⲆΔΔⲆⵠⲆΔ: "img/bignight-wolf.png",
    ᐃΔΔⲆⵠⲆᐃ: "img/bignight-fir-tree.png",
    ᐃΔⲆΔᐃⵠⲆ: "img/bignight-fox.png",
    ⲆⵠⵠᐃΔⲆᐃ: "img/bignight-kraken.png",
    ⵠΔᐃΔΔⲆᐃ: "img/bignight-piranha.png",
    ⲆᐃⵠᐃΔᐃⲆ: "img/bignight-cactus.png",
    ⵠⵠⵠᐃΔΔⲆ: "img/bignight-magma.png",
    ⵠᐃΔΔΔΔΔ: "img/bigday-desert.png",
    ⲆⲆᐃΔΔⲆᐃ: "img/bigday-winter.png",
    ᐃⲆΔΔᐃⲆⵠ: "img/bigday-lava.png",
    ⲆⵠΔⵠⵠⵠᐃ: "img/bigday-forest.png",
    ⵠⲆΔⵠᐃⲆΔ: "img/bignight-desert.png",
    ᐃᐃⵠⵠᐃᐃᐃ: "img/bignight-winter.png",
    ⲆⵠⵠⵠⲆⵠᐃ: "img/bignight-lava.png",
    ᐃᐃᐃΔΔⲆᐃ: "img/bignight-forest.png",
    ᐃᐃⵠΔⲆᐃΔ: "img/day-river-wave.png",
    ⲆΔⲆⲆΔᐃⲆ: "img/night-river-wave.png",
    ΔᐃᐃⲆΔⲆⵠ: "img/day-fog0.png",
    ⲆΔᐃⲆΔΔᐃ: "img/day-fog1.png",
    ΔᐃⵠᐃⲆⲆⵠ: "img/day-fog2.png",
    ΔⲆⲆⲆⲆᐃΔ: "img/night-fog0.png",
    ᐃΔᐃⵠⵠⵠᐃ: "img/night-fog1.png",
    ⵠΔⲆⵠⲆᐃᐃ: "img/night-fog2.png",
    ⲆⵠⵠΔⵠᐃⲆ: "img/day-fogdesert0.png",
    ⵠΔⲆᐃⵠΔᐃ: "img/day-fogdesert1.png",
    ᐃΔᐃⲆⲆⵠᐃ: "img/day-fogdesert2.png",
    ⲆⵠⵠᐃΔᐃⵠ: "img/night-fogdesert0.png",
    ⵠⵠΔⵠΔⵠⲆ: "img/night-fogdesert1.png",
    ⲆΔⵠⲆΔⵠⲆ: "img/night-fogdesert2.png",
    ᐃΔΔⵠᐃᐃΔ: "img/day-cross-server.png",
    ⲆΔᐃΔⵠΔΔ: "img/day-here-server.png",
    ⲆΔΔⵠⲆⵠΔ: "img/day-finish-server.png",
    ΔⵠΔⵠⵠⵠᐃ: "img/day-item-server.png",
    ᐃⲆΔⲆᐃΔⲆ: "img/day-skull-server.png",
    ⲆΔⲆⵠΔⵠΔ: "img/night-cross-server.png",
    ΔⲆⵠᐃⲆⵠᐃ: "img/night-here-server.png",
    ⲆΔⲆΔⲆΔΔ: "img/night-finish-server.png",
    ⵠⵠΔⵠᐃΔΔ: "img/night-item-server.png",
    ᐃⵠΔⵠⵠⲆⵠ: "img/night-skull-server.png",
    ⲆᐃⲆᐃⵠⲆᐃ: "img/day-reidite0.png",
    ⵠⲆⵠⵠⲆⵠⵠ: "img/night-reidite0.png",
    ⲆΔᐃᐃΔⵠⵠ: "img/day-reidite1.png",
    ⵠΔⲆⵠᐃⵠⵠ: "img/night-reidite1.png",
    ΔᐃⲆⲆⵠⵠⲆ: "img/day-reidite2.png",
    ᐃΔⲆⵠᐃΔΔ: "img/night-reidite2.png",
    ⵠⲆΔⵠΔᐃⵠ: "img/day-lava1.png",
    ᐃᐃᐃⲆⵠᐃⵠ: "img/night-lava1.png",
    ΔⲆⲆⲆⲆⵠⵠ: "img/day-lava2.png",
    ⲆΔΔΔᐃΔᐃ: "img/night-lava2.png",
    ⲆⵠⲆⵠⵠᐃΔ: "img/day-lava3.png",
    ⲆᐃΔᐃⵠⲆΔ: "img/night-lava3.png",
    ᐃΔⲆΔΔⲆⵠ: "img/day-lava4.png",
    ᐃΔⲆⲆⲆΔⵠ: "img/night-lava4.png",
    ⲆⵠⵠⲆⲆᐃⵠ: "img/day-lava5.png",
    ᐃⵠⵠΔᐃⲆⲆ: "img/night-lava5.png",
    ᐃⲆⵠⲆᐃⵠⲆ: "img/day-lava6.png",
    ΔⲆⵠⵠᐃΔⲆ: "img/night-lava6.png",
    ᐃⵠⵠⵠⲆⲆⵠ: "img/day-lava-ground1.png",
    ᐃᐃⵠⵠⲆᐃΔ: "img/night-lava-ground1.png",
    ᐃⵠⵠⵠⲆⵠᐃ: "img/day-lava-ground2.png",
    ⲆᐃⲆᐃⵠΔᐃ: "img/night-lava-ground2.png",
    ΔᐃⲆΔᐃⲆΔ: "img/day-lava-ground3.png",
    ⲆⵠᐃΔⵠⵠΔ: "img/night-lava-ground3.png",
    ⲆⵠΔΔⵠⲆⲆ: "img/day-lava-ground4.png",
    ⲆⵠΔΔⲆΔⲆ: "img/night-lava-ground4.png",
    ⵠⵠⲆⲆⵠΔⲆ: "img/day-lava-ground5.png",
    ΔⵠΔΔⵠⵠⲆ: "img/night-lava-ground5.png",
    ΔⵠⲆⲆΔᐃΔ: "img/day-lava-ground6.png",
    ΔΔⲆΔΔΔⲆ: "img/night-lava-ground6.png",
    ⵠΔⵠⲆᐃⵠⵠ: "img/day-fire-mob.png",
    ΔᐃΔΔⵠΔⵠ: "img/night-fire-mob.png",
    ⵠⵠᐃⲆⲆⲆⵠ: "img/hurt-fire-mob.png",
    ᐃᐃⵠᐃΔⲆᐃ: "img/day-diamond-protection.png",
    ᐃᐃᐃΔᐃΔⵠ: "img/night-diamond-protection.png",
    ΔᐃⲆΔΔΔⵠ: "img/day-hand-diamond-protection.png",
    ⵠⲆⲆⵠᐃᐃⲆ: "img/night-hand-diamond-protection.png",
    ⵠᐃᐃⵠⲆⵠΔ: "img/inv-diamond-protection-out.png",
    ΔⲆΔⲆᐃⲆⲆ: "img/inv-diamond-protection-in.png",
    ΔⲆⲆⲆᐃΔΔ: "img/inv-diamond-protection-click.png",
    ⵠⲆᐃⵠᐃⲆⲆ: "img/day-amethyst-protection.png",
    ΔⲆΔⵠⲆᐃⲆ: "img/night-amethyst-protection.png",
    ⲆΔΔⵠⵠΔⵠⵠᐃ: "img/day-hand-amethyst-protection.png",
    ⲆⵠⵠᐃⵠⲆᐃᐃⵠ: "img/night-hand-amethyst-protection.png",
    ⵠᐃᐃᐃⲆⵠⲆ: "img/inv-amethyst-protection-out.png",
    ΔⲆⵠΔⲆⵠᐃ: "img/inv-amethyst-protection-in.png",
    ⲆᐃΔᐃⵠΔⵠ: "img/inv-amethyst-protection-click.png",
    ᐃⲆᐃⲆᐃⵠⵠ: "img/day-reidite-sword.png",
    ⵠⲆⲆᐃⲆⲆΔ: "img/night-reidite-sword.png",
    ΔⵠⲆⵠΔΔᐃ: "img/inv-reidite-sword-out.png",
    ⲆΔΔᐃᐃᐃⵠ: "img/inv-reidite-sword-in.png",
    ΔᐃⲆⵠⲆⵠᐃ: "img/inv-reidite-sword-click.png",
    ᐃⵠⵠΔᐃΔⲆ: "img/inv-reidite-out.png",
    ᐃⲆⲆΔᐃᐃⲆ: "img/inv-reidite-in.png",
    ⵠᐃⲆⵠⲆΔⲆ: "img/inv-reidite-click.png",
    ⵠΔᐃⲆΔⲆⵠ: "img/inv-flame-out.png",
    ⵠΔΔⵠΔᐃⵠ: "img/inv-flame-in.png",
    ᐃⵠᐃᐃᐃⲆⲆ: "img/inv-flame-click.png",
    ΔⵠⲆⲆⵠⵠⲆ: "img/day-magma-buble0.png",
    Ⲇᐃᐃⵠᐃᐃᐃ: "img/night-magma-buble0.png",
    ΔΔⵠⵠⵠⲆⵠ: "img/day-magma-buble1.png",
    ⲆΔⲆⲆⵠΔⲆ: "img/night-magma-buble1.png",
    Δⵠᐃᐃⵠⵠⵠ: "img/day-magma-buble2.png",
    ΔⵠⵠΔᐃⲆⲆ: "img/night-magma-buble2.png",
    ΔⲆⵠᐃᐃⵠᐃ: "img/day-lava-dragon.png",
    ⲆⵠΔᐃⲆⲆⲆ: "img/night-lava-dragon.png",
    ⵠᐃⲆⵠΔⲆᐃᐃⲆ: "img/day-fire-dragon.png",
    ᐃⲆⵠⲆᐃΔΔᐃⵠ: "img/night-fire-dragon.png",
    ⲆΔᐃⲆⲆⲆⲆ: "img/hurt-lava-dragon.png",
    ΔⵠⲆⲆΔΔᐃ: "img/day-lava-wing-left.png",
    ⵠΔⵠⲆⵠⵠⵠ: "img/night-lava-wing-left.png",
    ⵠΔⲆⲆⲆᐃⵠ: "img/day-lava-wing-right.png",
    ⲆᐃΔΔΔᐃⲆ: "img/night-lava-wing-right.png",
    ΔⵠᐃⲆⵠᐃⲆ: "img/hurt-lava-wing-left.png",
    ⵠᐃᐃᐃᐃⵠᐃ: "img/hurt-lava-wing-right.png",
    ⵠΔᐃⲆⵠⲆⵠ: "img/day-reidite-spear.png",
    ΔⲆⲆⵠⵠΔᐃ: "img/night-reidite-spear.png",
    ᐃⵠⲆΔⵠᐃΔ: "img/inv-reidite-spear-out.png",
    ΔⲆⲆⵠΔⲆΔ: "img/inv-reidite-spear-in.png",
    ⲆⲆΔⲆΔⵠⲆ: "img/inv-reidite-spear-click.png",
    ᐃΔᐃⵠⲆᐃⵠ: "img/day-reidite-helmet.png",
    ΔΔΔⵠⵠⵠⵠ: "img/night-reidite-helmet.png",
    ⲆΔΔΔΔⵠⲆ: "img/inv-reidite-helmet-out.png",
    ⲆΔⲆⲆᐃⵠⵠ: "img/inv-reidite-helmet-in.png",
    ΔΔⲆⵠᐃⲆΔ: "img/inv-reidite-helmet-click.png",
    ΔΔΔΔᐃΔⵠ: "img/day-hand-reidite-protection.png",
    ⵠⵠᐃⲆⵠⵠᐃ: "img/night-hand-reidite-protection.png",
    ⵠⲆⲆΔⵠᐃᐃ: "img/day-reidite-protection.png",
    ΔΔⵠⲆⲆⵠᐃ: "img/night-reidite-protection.png",
    ⲆΔⵠⲆⵠᐃⵠ: "img/inv-reidite-protection-out.png",
    ⵠⲆᐃⲆᐃⵠΔ: "img/inv-reidite-protection-in.png",
    ⲆΔⲆⵠᐃΔᐃ: "img/inv-reidite-protection-click.png",
    ᐃⲆⲆⲆᐃⵠⵠ: "img/day-lava-dragon-sword.png",
    ⲆⵠⵠΔⲆⲆΔ: "img/night-lava-dragon-sword.png",
    ⲆⲆΔᐃⲆΔⵠ: "img/inv-lava-dragon-sword-out.png",
    ᐃⵠⵠΔⵠⵠⵠ: "img/inv-lava-dragon-sword-in.png",
    ᐃⵠⵠᐃⲆⵠᐃ: "img/inv-lava-dragon-sword-click.png",
    ⵠΔⲆⵠⲆΔᐃ: "img/day-lava-spear.png",
    ΔⲆΔᐃⵠⲆⵠ: "img/night-lava-spear.png",
    ⲆⵠⵠⲆΔⵠⲆ: "img/inv-lava-spear-out.png",
    ΔⵠⲆᐃⲆᐃΔ: "img/inv-lava-spear-in.png",
    ΔⲆᐃΔᐃⲆΔ: "img/inv-lava-spear-click.png",
    ⵠⲆⵠⲆⲆⲆⲆ: "img/day-lava-helmet.png",
    ΔᐃⲆΔΔᐃΔ: "img/night-lava-helmet.png",
    ⵠⵠⵠΔᐃⵠⵠ: "img/inv-lava-helmet-out.png",
    ΔⲆᐃᐃⵠⵠΔ: "img/inv-lava-helmet-in.png",
    ⵠΔᐃᐃᐃⵠⵠ: "img/inv-lava-helmet-click.png",
    ⲆⲆⲆⲆⵠⲆΔ: "img/day-witch-hat.png",
    ᐃⲆⲆΔⲆⲆⲆ: "img/night-witch-hat.png",
    ⵠΔⵠᐃⲆΔΔ: "img/inv-witch-hat-out.png",
    ΔⲆᐃᐃⲆΔᐃ: "img/inv-witch-hat-in.png",
    ΔᐃⵠΔⲆᐃⲆ: "img/inv-witch-hat-click.png",
    ⲆᐃⵠⲆⲆⲆΔ: "img/day-nimbus2000.png",
    ΔⲆⵠᐃΔᐃⲆ: "img/night-nimbus2000.png",
    ΔΔΔᐃΔΔᐃ: "img/inv-nimbus2000-out.png",
    ⲆⵠᐃⵠⵠΔⵠ: "img/inv-nimbus2000-in.png",
    ⲆᐃΔᐃᐃⲆΔ: "img/inv-nimbus2000-click.png",
    ΔᐃΔΔⲆⵠΔ: "img/day-accessory1-pacques.png",
    ΔⲆᐃᐃⲆⵠᐃ: "img/night-accessory1-pacques.png",
    ⵠᐃᐃⵠⵠⵠⵠ: "img/day-accessory2-pacques.png",
    ᐃⵠᐃⵠⲆⲆⵠ: "img/night-accessory2-pacques.png",
    ⵠΔΔΔΔⲆⲆ: "img/day-accessory3-pacques.png",
    ᐃⵠΔΔΔⵠΔ: "img/night-accessory3-pacques.png",
    ⲆΔⵠᐃⲆⵠᐃ: "img/day-accessory5-pacques.png",
    ΔⲆᐃΔΔᐃΔ: "img/night-accessory5-pacques.png",
    ᐃⵠⵠᐃΔᐃᐃ: "img/day-accessory6-pacques.png",
    ΔᐃΔⵠⲆᐃⵠ: "img/night-accessory6-pacques.png",
    ⵠⵠᐃΔᐃᐃΔ: "img/day-accessory7-pacques.png",
    ⵠⲆᐃⵠᐃⲆΔ: "img/night-accessory7-pacques.png",
    ᐃΔⲆᐃΔᐃⵠ: "img/day-accessory8-pacques.png",
    ⵠⲆᐃⵠⵠⵠⵠ: "img/night-accessory8-pacques.png",
    ΔᐃᐃⵠΔΔⲆ: "img/day-bag-pacques.png",
    ΔⲆᐃⲆⲆⲆᐃ: "img/night-bag-pacques.png",
    ΔΔⵠᐃᐃⵠⲆ: "img/day-carrot.png",
    ⵠⵠⲆΔⲆⵠⵠ: "img/night-carrot.png",
    ᐃⵠΔᐃⲆΔⵠ: "img/day-carrot-dried.png",
    ΔΔΔᐃⲆᐃΔ: "img/night-carrot-dried.png",
    ΔᐃΔⲆⵠΔᐃ: "img/day-tomato-herb.png",
    ⲆᐃΔΔΔᐃᐃ: "img/night-tomato-herb.png",
    ΔᐃᐃᐃΔᐃⵠ: "img/day-tomato-herb-dried.png",
    ⵠΔⵠⲆⲆᐃⲆ: "img/night-tomato-herb-dried.png",
    ΔᐃᐃⵠⵠⲆΔ: "img/day-tomato.png",
    ⵠᐃᐃⵠⵠⲆΔ: "img/night-tomato.png",
    ⵠΔᐃⵠᐃᐃΔ: "img/inv-carrot-out.png",
    ⵠΔΔΔΔΔᐃ: "img/inv-carrot-in.png",
    ⲆⵠᐃⵠᐃΔⲆ: "img/inv-carrot-click.png",
    ⲆⵠⲆᐃΔⲆΔ: "img/inv-tomato-out.png",
    ᐃΔᐃᐃⲆⵠᐃ: "img/inv-tomato-in.png",
    ⲆᐃΔᐃΔᐃⲆ: "img/inv-tomato-click.png",
    ⲆᐃⵠᐃᐃΔⲆ: "img/day-player0.png",
    ⵠⵠⲆΔΔΔᐃ: "img/night-player0.png",
    ⵠΔᐃᐃΔⲆᐃ: "img/day-player1.png",
    ⲆΔⲆⲆΔⵠΔ: "img/night-player1.png",
    ⵠΔΔᐃⵠⵠᐃ: "img/day-player2.png",
    ⵠΔΔⲆᐃᐃΔ: "img/night-player22.png",
    ⲆⲆΔⲆⲆⲆᐃ: "img/day-player3.png",
    ᐃⲆⲆⲆⵠᐃΔ: "img/night-player33.png",
    ⲆⵠⲆΔᐃⲆⲆ: "img/day-player4.png",
    ᐃᐃⵠᐃᐃᐃᐃ: "img/night-player4.png",
    ⵠᐃΔᐃᐃⵠⲆ: "img/day-player5.png",
    ᐃⲆᐃⵠᐃⲆᐃ: "img/night-player5.png",
    ΔᐃⵠⲆⵠᐃΔ: "img/day-player6.png",
    ΔΔⵠᐃΔⵠΔ: "img/night-player6.png",
    ΔΔⵠⵠΔᐃⲆ: "img/day-player7.png",
    ⵠⲆⲆᐃᐃΔⲆ: "img/night-player7.png",
    ⵠⵠᐃⲆᐃⲆΔ: "img/day-player8.png",
    ⲆⵠⵠᐃⵠⲆᐃ: "img/night-player8.png",
    ᐃⵠⵠᐃⵠⵠⲆ: "img/day-player9.png",
    ⲆⲆΔΔΔᐃⵠ: "img/night-player9.png",
    ⵠⵠⲆⵠΔⵠΔ: "img/day-player10.png",
    ⲆⵠᐃΔⵠᐃᐃ: "img/night-player10.png",
    ⵠΔⲆⵠⵠΔΔ: "img/day-player11.png",
    ⵠᐃⲆΔⵠΔⵠ: "img/night-player11.png",
    ⵠΔᐃⲆᐃⲆᐃ: "img/day-player12.png",
    ⵠΔⲆⵠΔΔᐃ: "img/night-player12.png",
    ⲆᐃⲆⵠΔᐃⲆ: "img/day-player13.png",
    ⲆⵠⲆΔⵠΔᐃ: "img/night-player13.png",
    ΔΔΔΔⵠᐃⵠ: "img/day-player14.png",
    ᐃⵠⲆⵠΔΔΔ: "img/night-player14.png",
    ᐃⲆΔᐃΔΔⵠ: "img/day-player15.png",
    ᐃⵠΔΔΔⲆΔ: "img/night-player15.png",
    ΔᐃΔᐃⲆⲆΔ: "img/day-player16.png",
    ΔΔⵠᐃᐃⲆⲆ: "img/night-player16.png",
    ΔⲆⵠⵠᐃⲆᐃ: "img/day-player17.png",
    ⵠⵠᐃᐃΔⵠⲆ: "img/night-player17.png",
    ⲆᐃⵠΔΔⲆⵠ: "img/day-player18.png",
    ᐃⵠᐃⵠⲆⵠᐃ: "img/night-player18.png",
    ᐃⲆΔⲆΔⵠⲆ: "img/day-player19.png",
    ⲆⵠⵠⲆⵠᐃᐃ: "img/night-player19.png",
    ᐃᐃⵠⵠⵠᐃⵠ: "img/day-hand-player0.png",
    ΔᐃⵠⵠΔⵠΔ: "img/night-hand-player0.png",
    ⲆⵠΔⲆᐃⵠᐃ: "img/day-hand-player1.png",
    ⲆⲆⲆᐃⵠᐃᐃ: "img/night-hand-player1.png",
    ᐃⲆᐃΔⲆⲆΔ: "img/day-hand-player2.png",
    ΔᐃᐃⵠΔⲆⵠ: "img/night-hand-player22.png",
    ⲆⵠᐃⲆⵠΔⲆ: "img/day-hand-player3.png",
    ⲆⲆΔⵠⵠᐃⵠ: "img/night-hand-player33.png",
    ᐃᐃⵠΔⵠⲆⲆ: "img/day-hand-player4.png",
    ᐃᐃᐃⲆΔⲆᐃ: "img/night-hand-player4.png",
    ⵠⵠⵠᐃⲆⲆⲆ: "img/day-hand-player5.png",
    ⲆⲆᐃᐃⵠᐃᐃ: "img/night-hand-player5.png",
    ⲆΔᐃᐃⵠⲆᐃ: "img/day-hand-player6.png",
    ⲆΔΔⵠΔΔΔ: "img/night-hand-player6.png",
    ΔΔΔⲆⵠⲆⵠ: "img/day-hand-player7.png",
    ⲆᐃⲆᐃⵠⲆⲆ: "img/night-hand-player7.png",
    ᐃΔᐃᐃᐃⵠΔ: "img/day-hand-player8.png",
    ⵠⲆⵠᐃᐃⵠⵠ: "img/night-hand-player8.png",
    ΔⵠⵠⲆⵠΔⲆ: "img/day-hand-player9.png",
    ΔⲆⵠΔⵠⵠΔ: "img/night-hand-player9.png",
    ⲆⲆⵠⵠᐃᐃᐃ: "img/day-hand-player10.png",
    ᐃΔⵠᐃΔΔⵠ: "img/night-hand-player10.png",
    ΔⵠΔΔΔⲆΔ: "img/day-hand-player11.png",
    ⵠⲆⲆⵠᐃᐃᐃ: "img/night-hand-player11.png",
    ᐃΔᐃᐃⵠⲆΔ: "img/day-hand-player12.png",
    ΔᐃᐃΔᐃΔᐃ: "img/night-hand-player12.png",
    ᐃⲆᐃΔᐃᐃΔ: "img/day-hand-player13.png",
    ⵠⵠⲆΔᐃⵠΔ: "img/night-hand-player13.png",
    ⵠⵠⲆᐃⲆᐃΔ: "img/day-hand-player14.png",
    ⵠⵠᐃⵠΔⵠⲆ: "img/night-hand-player14.png",
    ᐃΔᐃΔΔᐃΔ: "img/day-hand-player15.png",
    ⲆⲆᐃᐃᐃⲆⵠ: "img/night-hand-player15.png",
    ΔᐃⵠΔΔΔᐃ: "img/day-hand-player16.png",
    ᐃⵠᐃΔⲆⲆᐃ: "img/night-hand-player16.png",
    ΔⵠⲆⲆᐃΔΔ: "img/day-hand-player17.png",
    ⵠΔᐃᐃΔΔⲆ: "img/night-hand-player17.png",
    ⵠⲆΔⵠⵠᐃⲆ: "img/day-hand-player18.png",
    ⵠΔᐃⲆⲆⲆⵠ: "img/night-hand-player18.png",
    ΔᐃⵠΔⲆⲆᐃ: "img/day-hand-player19.png",
    ᐃᐃⵠΔᐃⵠⲆ: "img/night-hand-player19.png",
    ΔΔᐃΔⲆⲆᐃ: "img/day-accessory4.png",
    ΔⲆⵠⵠⲆᐃⵠ: "img/night-accessory4.png",
    ⵠⵠⲆⲆΔⲆⵠ: "img/day-accessory9.png",
    ᐃᐃΔⵠᐃⵠⲆ: "img/night-accessory9.png",
    ΔᐃⵠΔⲆⵠⲆ: "img/day-accessory10.png",
    ⵠᐃΔⲆⵠΔⲆ: "img/night-accessory10.png",
    ⵠⵠⵠᐃⵠⲆⵠ: "img/day-accessory11.png",
    ⵠⲆⲆᐃΔᐃⵠ: "img/night-accessory11.png",
    ⲆΔⵠⵠΔᐃΔ: "img/day-accessory12.png",
    ΔⲆⵠⲆⵠⲆⲆ: "img/night-accessory12.png",
    ᐃᐃⵠⵠΔᐃᐃ: "img/day-bag.png",
    ⲆⵠᐃᐃᐃΔⲆ: "img/night-bag.png",
    ΔΔᐃᐃⵠⵠᐃ: "img/inv-bag-out.png",
    ΔᐃⵠᐃⲆᐃᐃ: "img/inv-bag-in.png",
    ⵠᐃⲆΔⵠⲆΔ: "img/inv-bag-click.png",
    ΔᐃⲆⵠᐃᐃΔ: "img/day-pitchfork.png",
    ᐃᐃⵠᐃᐃⵠⲆ: "img/night-pitchfork.png",
    ᐃᐃΔΔΔᐃΔ: "img/inv-pitchfork-out.png",
    ⲆⵠⲆΔᐃᐃᐃ: "img/inv-pitchfork-in.png",
    ⵠⲆⲆᐃⵠΔᐃ: "img/inv-pitchfork-click.png",
    ⲆΔⵠΔⲆᐃΔ: "img/inv-wood-spike-door-out.png",
    ⲆΔⲆᐃⵠⵠᐃ: "img/inv-wood-spike-door-in.png",
    ⲆⲆΔΔⵠⵠᐃ: "img/inv-wood-spike-door-click.png",
    ⵠΔΔᐃΔᐃⵠ: "img/inv-stone-spike-door-out.png",
    ᐃⵠⵠΔⲆΔⵠ: "img/inv-stone-spike-door-in.png",
    ⲆⵠⲆⲆᐃΔᐃ: "img/inv-stone-spike-door-click.png",
    ΔᐃⵠᐃᐃΔΔ: "img/inv-gold-spike-door-out.png",
    ⵠΔⲆⲆⲆΔΔ: "img/inv-gold-spike-door-in.png",
    ΔᐃᐃΔᐃΔΔ: "img/inv-gold-spike-door-click.png",
    ⵠΔΔᐃᐃⲆΔ: "img/inv-diamond-spike-door-out.png",
    ⵠⵠᐃⲆΔⲆⵠ: "img/inv-diamond-spike-door-in.png",
    ΔⵠⵠΔᐃᐃⵠ: "img/inv-diamond-spike-door-click.png",
    ⵠⵠΔⵠⲆⵠᐃ: "img/inv-amethyst-spike-door-out.png",
    ᐃᐃⵠΔᐃⲆⵠ: "img/inv-amethyst-spike-door-in.png",
    ΔΔⵠᐃⵠᐃⲆ: "img/inv-amethyst-spike-door-click.png",
    ⵠᐃᐃⵠⲆΔΔ: "img/day-wood-spike-door.png",
    ᐃᐃⵠⵠᐃΔᐃ: "img/night-wood-spike-door.png",
    ⲆΔᐃΔⲆᐃᐃ: "img/day-stone-spike-door.png",
    ⵠΔⵠⲆᐃⲆⵠ: "img/night-stone-spike-door.png",
    ᐃᐃΔⵠΔᐃⲆ: "img/day-gold-spike-door.png",
    ΔΔⲆⵠΔΔΔ: "img/night-gold-spike-door.png",
    ΔⵠΔᐃΔⲆᐃ: "img/day-diamond-spike-door.png",
    ᐃⲆⲆΔΔᐃᐃ: "img/night-diamond-spike-door.png",
    ᐃⵠᐃⵠⵠᐃΔ: "img/day-amethyst-spike-door.png",
    ⲆΔᐃΔΔⲆᐃ: "img/night-amethyst-spike-door.png",
    ΔⲆΔⲆⲆᐃⵠ: "img/inv-reidite-spike-door-out.png",
    ⵠΔᐃᐃᐃᐃⵠ: "img/inv-reidite-spike-door-in.png",
    ⲆΔⵠⵠᐃⵠⲆ: "img/inv-reidite-spike-door-click.png",
    ΔᐃΔᐃⲆᐃᐃ: "img/inv-reidite-door-out.png",
    ᐃᐃᐃΔᐃᐃⵠ: "img/inv-reidite-door-in.png",
    ᐃⲆΔᐃᐃⲆΔ: "img/inv-reidite-door-click.png",
    ⵠⲆⲆⲆⵠΔⵠ: "img/inv-reidite-spike-out.png",
    ⵠᐃⵠΔᐃΔⲆ: "img/inv-reidite-spike-in.png",
    ΔⲆⲆⲆᐃᐃΔ: "img/inv-reidite-spike-click.png",
    ⵠⲆᐃΔⲆΔᐃ: "img/inv-reidite-wall-out.png",
    ⲆⲆΔⵠⵠⵠΔ: "img/inv-reidite-wall-in.png",
    ⵠⵠⵠⵠⲆⲆΔ: "img/inv-reidite-wall-click.png",
    ⵠⲆⲆⲆⵠᐃⲆ: "img/day-reidite-wall.png",
    ΔΔⵠᐃⵠΔⵠ: "img/night-reidite-wall.png",
    ΔⲆᐃΔΔⵠⲆ: "img/day-reidite-door.png",
    ⲆᐃᐃΔⵠᐃᐃ: "img/night-reidite-door.png",
    ⲆΔΔΔⵠⵠᐃ: "img/day-reidite-spike.png",
    ⲆⵠⲆΔⲆᐃΔ: "img/night-reidite-spike.png",
    ᐃⲆΔⲆⵠⲆᐃ: "img/day-reidite-spike-door.png",
    ⵠⵠΔΔⵠΔⲆ: "img/night-reidite-spike-door.png",
    ⵠⵠⲆᐃΔᐃᐃ: "img/inv-reidite-pickaxe-out.png",
    ᐃⵠⲆⵠⵠⲆⵠ: "img/inv-reidite-pickaxe-in.png",
    ⵠᐃⵠⲆΔⲆΔ: "img/inv-reidite-pickaxe-click.png",
    ΔᐃᐃⵠΔΔᐃ: "img/day-reidite-pickaxe.png",
    ΔΔⵠⵠΔⵠΔ: "img/night-reidite-pickaxe.png",
    ⲆⲆⵠΔⵠᐃΔ: "img/inv-reidite-hammer-out.png",
    ⵠⵠᐃᐃⵠᐃΔ: "img/inv-reidite-hammer-in.png",
    ΔΔⵠᐃᐃᐃⲆ: "img/inv-reidite-hammer-click.png",
    ⵠᐃΔⲆⵠⵠⲆ: "img/day-reidite-hammer.png",
    ᐃΔⲆⵠⲆᐃⲆ: "img/night-reidite-hammer.png",
    ⵠΔⵠⲆᐃⲆΔ: "img/day-watermelon1.png",
    ᐃⲆΔⲆΔⲆⲆ: "img/night-watermelon1.png",
    ΔᐃⲆⵠⲆΔᐃ: "img/day-watermelon-dried1.png",
    ⲆⲆΔᐃⵠᐃⲆ: "img/night-watermelon-dried1.png",
    ᐃⵠᐃⵠⵠΔΔ: "img/inv-watermelon-out.png",
    ΔᐃᐃⲆᐃⲆᐃ: "img/inv-watermelon-in.png",
    ⵠᐃᐃⵠⲆΔⵠ: "img/inv-watermelon-click.png",
    ᐃΔᐃⵠᐃⵠⲆ: "img/day-boat.png",
    ⵠⵠᐃᐃⵠΔⵠ: "img/night-boat.png",
    ΔΔᐃᐃⲆΔᐃ: "img/day-boat-wave.png",
    ⲆᐃⵠⲆⲆΔΔ: "img/night-boat-wave.png",
    ᐃⲆⵠΔᐃⵠⲆ: "img/inv-boat-out.png",
    ⲆⲆⵠᐃⵠΔΔ: "img/inv-boat-in.png",
    ⲆⲆᐃⲆΔᐃᐃ: "img/inv-boat-click.png",
    ⲆᐃⲆᐃΔΔᐃ: "img/day-plane.png",
    ⲆᐃⲆΔⲆᐃⲆ: "img/night-plane.png",
    ⵠᐃᐃⵠⵠⲆᐃ: "img/inv-plane-out.png",
    ᐃⲆⲆΔᐃⵠⵠ: "img/inv-plane-in.png",
    ᐃⲆΔⲆⲆⵠΔ: "img/inv-plane-click.png",
    ΔΔᐃᐃΔΔᐃ: "img/day-sled.png",
    ⵠⵠΔⲆⵠΔᐃ: "img/night-sled.png",
    ⵠⵠⵠᐃⲆⵠᐃ: "img/day-sled-wave.png",
    ⵠΔⵠⲆΔⵠᐃ: "img/night-sled-wave.png",
    ᐃᐃᐃⲆⲆⲆΔ: "img/inv-sled-out.png",
    ΔΔⵠᐃⵠⲆΔ: "img/inv-sled-in.png",
    ᐃΔⵠⵠΔⵠⵠ: "img/inv-sled-click.png",
    ⵠⵠΔΔΔⲆⲆ: "img/day-pirate-hat.png",
    ΔΔᐃⵠⲆΔΔ: "img/night-pirate-hat.png",
    ᐃⵠᐃⲆΔⲆⲆ: "img/inv-pirate-hat-out.png",
    ΔᐃⲆΔᐃΔΔ: "img/inv-pirate-hat-in.png",
    ᐃⵠᐃΔΔⵠΔ: "img/inv-pirate-hat-click.png",
    ⵠⲆᐃΔΔᐃΔ: "img/day-penguin.png",
    ΔΔⲆᐃΔⲆΔ: "img/night-penguin.png",
    ΔΔᐃΔⲆⲆΔ: "img/hurt-penguin.png",
    ΔⲆᐃΔⲆ: "img/inv-penguin-feather-click.png",
    ᐃⲆⵠᐃᐃ: "img/inv-hawk-feather-click.png",
    ΔΔΔᐃΔᐃᐃ: "img/day-boar1.png",
    ΔⵠⲆⵠⲆⲆᐃ: "img/day-boar1-tamed.png",
    ᐃⵠⲆᐃΔⲆΔ: "img/day-boar1-angry.png",
    ⲆΔᐃΔⵠᐃⲆ: "img/night-boar1.png",
    ⲆΔΔᐃⲆⲆΔ: "img/night-boar1-tamed.png",
    ⵠᐃᐃⵠⲆⲆⵠ: "img/night-boar1-angry.png",
    ᐃΔⲆⵠΔⵠⲆ: "img/inv-mount-boar-out.png",
    ᐃⲆᐃⵠΔΔⵠ: "img/inv-mount-boar-in.png",
    ⲆⵠᐃΔⲆⲆⲆ: "img/inv-mount-boar-click.png",
    ⲆΔⲆⵠⵠⲆⵠ: "img/day-hurt-boar1.png",
    ⵠⲆⲆⲆΔΔⵠ: "img/boar1-step.png",
    ᐃΔⵠⵠⲆⵠⲆ: "img/day-saddle1.png",
    ⲆⲆΔⵠⵠΔⵠ: "img/night-saddle1.png",
    ᐃⵠⲆᐃΔΔⵠ: "img/inv-saddle-out.png",
    ΔⲆⵠᐃⵠⵠⲆ: "img/inv-saddle-in.png",
    ⲆΔⲆⲆⵠΔᐃ: "img/inv-saddle-click.png",
    ⲆᐃⲆⲆᐃΔᐃ: "img/day-magic-wand0.png",
    ᐃΔΔⵠⵠⲆᐃ: "img/night-magic-wand0.png",
    ⲆⵠⲆⲆΔΔᐃ: "img/day-light-wand1.png",
    ⵠᐃⵠᐃⵠᐃΔ: "img/night-light-wand1.png",
    ᐃᐃⲆⵠⵠΔⵠ: "img/inv-magic-wand0-out.png",
    ΔΔᐃΔⲆⵠᐃ: "img/inv-magic-wand0-in.png",
    ᐃΔⵠⵠᐃⲆΔ: "img/inv-magic-wand0-click.png",
    ⵠΔᐃⲆⲆⲆΔ: "img/day-magic-wand1.png",
    ΔᐃⲆΔΔΔΔ: "img/night-magic-wand1.png",
    ⵠΔΔⲆⵠⲆΔ: "img/day-light-wand0.png",
    ⵠⵠΔΔⵠᐃⵠ: "img/night-light-wand0.png",
    ᐃΔᐃᐃⵠᐃΔ: "img/inv-magic-wand1-out.png",
    ⲆᐃⲆⵠᐃΔⵠ: "img/inv-magic-wand1-in.png",
    ΔⵠᐃΔⲆⵠΔ: "img/inv-magic-wand1-click.png",
    ΔΔⵠⲆΔΔᐃ: "img/day-firefly.png",
    ΔᐃᐃⵠⵠΔΔ: "img/night-firefly.png",
    ⲆⵠⵠⵠΔΔⲆ: "img/hurt-firefly.png",
    ΔᐃⵠᐃΔᐃⵠ: "img/inv-firefly-out.png",
    ᐃⵠⵠⲆⵠᐃᐃ: "img/inv-firefly-in.png",
    ᐃⵠᐃⲆⵠΔΔ: "img/inv-firefly-click.png",
    ᐃⵠⵠᐃΔⵠΔ: "img/day-baby-dragon.png",
    ᐃⵠⵠⲆᐃΔΔ: "img/night-baby-dragon.png",
    ⲆΔⲆⲆᐃⲆᐃ: "img/day-baby-dragon-angry.png",
    ⵠᐃΔⵠᐃΔᐃ: "img/night-baby-dragon-angry.png",
    ΔᐃⲆⲆΔΔΔ: "img/day-baby-dragon-tamed.png",
    ⲆΔⲆΔⲆⵠⲆ: "img/night-baby-dragon-tamed.png",
    ΔΔΔΔΔᐃᐃ: "img/day-wing-dragon-left-angry.png",
    ΔⲆΔΔᐃΔⲆ: "img/night-dragon-wing-left-angry.png",
    ⲆᐃⲆᐃⲆⲆⲆ: "img/day-wing-dragon-right-angry.png",
    ⲆⲆⲆΔΔⲆⲆ: "img/night-dragon-wing-right-angry.png",
    ⵠΔⲆⲆΔᐃⲆ: "img/day-wing-dragon-left-tamed.png",
    ᐃᐃⵠᐃⲆⲆⵠ: "img/night-dragon-wing-left-tamed.png",
    ⲆⲆⲆᐃΔᐃΔ: "img/day-wing-dragon-right-tamed.png",
    ⵠΔⲆΔⲆΔΔ: "img/night-wing-dragon-right-tamed.png",
    ΔᐃᐃᐃΔΔⲆ: "img/day-wing-dragon-left.png",
    ⵠᐃⲆⲆⵠΔⲆ: "img/night-dragon-wing-left.png",
    ⲆΔⲆⵠᐃᐃᐃ: "img/day-wing-dragon-right.png",
    ΔⲆⵠΔⲆⲆᐃ: "img/night-wing-dragon-right.png",
    ⲆⵠⲆΔΔᐃᐃ: "img/hurt-baby-dragon.png",
    ΔⵠⵠⵠᐃⲆΔ: "img/hurt-baby-dragon-wing-left.png",
    ⲆⵠΔᐃᐃΔΔ: "img/hurt-baby-dragon-wing-right.png",
    ⵠΔⲆⲆΔⵠⵠ: "img/inv-baby-dragon-out.png",
    ᐃΔⲆΔⲆᐃⲆ: "img/inv-baby-dragon-in.png",
    ᐃⲆⵠᐃΔⲆΔ: "img/inv-baby-dragon-click.png",
    ΔᐃᐃᐃᐃᐃΔ: "img/day-baby-lava.png",
    ΔⲆΔᐃⲆᐃΔ: "img/night-baby-lava.png",
    ⵠⵠⵠⲆΔⲆᐃ: "img/day-baby-lava-angry.png",
    ᐃⵠᐃⲆⵠᐃⵠ: "img/night-baby-lava-angry.png",
    ⲆᐃΔΔⲆᐃⲆ: "img/day-baby-lava-tamed.png",
    ᐃⲆⲆⵠⵠΔΔ: "img/night-baby-lava-tamed.png",
    ΔᐃΔⲆΔⲆⲆ: "img/day-wing-lava-left-angry.png",
    ⵠⲆⲆᐃⵠᐃⵠ: "img/night-wing-lava-left-angry.png",
    ⵠⲆᐃⵠΔⲆⲆ: "img/day-wing-lava-right-angry.png",
    ΔⵠΔⲆᐃⵠⵠ: "img/night-wing-lava-right-angry.png",
    ᐃⲆⵠⲆⲆⵠⲆ: "img/day-wing-lava-left-tamed.png",
    ΔᐃΔⵠΔᐃΔ: "img/night-wing-lava-left-tamed.png",
    ᐃᐃⵠᐃᐃⲆΔ: "img/day-wing-lava-right-tamed.png",
    ⵠⲆⲆⵠᐃΔⵠ: "img/night-wing-lava-right-tamed.png",
    ᐃΔⲆⵠⲆⲆΔ: "img/day-wing-lava-left.png",
    ΔⵠⵠᐃⲆΔᐃ: "img/night-wing-lava-left.png",
    ᐃⵠⲆⵠⵠⵠⵠ: "img/day-wing-lava-right.png",
    ΔᐃΔΔⲆⵠⵠ: "img/night-wing-lava-right.png",
    ⵠΔΔΔⵠᐃⵠ: "img/hurt-baby-lava.png",
    ⵠⲆΔⲆⵠΔⲆ: "img/hurt-baby-lava-wing-left.png",
    ᐃΔⵠΔΔΔᐃ: "img/hurt-baby-lava-wing-right.png",
    ⲆⵠⲆⵠᐃΔⵠ: "img/inv-baby-lava-out.png",
    ⲆⵠᐃⲆⲆᐃⵠ: "img/inv-baby-lava-in.png",
    ᐃΔⵠΔΔⵠᐃ: "img/inv-baby-lava-click.png",
    ᐃΔⲆΔΔⵠᐃ: "img/day-falcon.png",
    ⵠⲆⲆⲆᐃᐃⲆ: "img/night-falcon.png",
    ᐃⵠⵠⵠⲆᐃᐃ: "img/day-falcon-angry.png",
    ΔᐃᐃΔΔᐃᐃ: "img/night-falcon-angry.png",
    ᐃⵠΔⵠΔΔⵠ: "img/day-falcon-ground.png",
    ⵠⵠΔᐃΔᐃⵠ: "img/night-falcon-ground.png",
    ⲆᐃⲆⲆⲆⵠᐃ: "img/day-falcon-ground-angry.png",
    ᐃᐃΔᐃⲆⵠΔ: "img/night-falcon-ground-angry.png",
    ΔΔΔⵠⲆⲆΔ: "img/day-falcon-wings-left.png",
    ⵠⲆΔⵠⵠΔⵠ: "img/night-falcon-wings-left.png",
    ᐃΔⵠΔⵠᐃⲆ: "img/day-falcon-wings-right.png",
    ⲆΔⵠΔΔΔⲆ: "img/night-falcon-wings-right.png",
    ⲆⲆⲆΔᐃΔⵠ: "img/day-falcon-angry-wings-left.png",
    ΔⲆⵠⲆᐃⵠᐃ: "img/night-falcon-angry-wings-left.png",
    ᐃⲆⵠΔⵠΔⵠ: "img/day-falcon-angry-wings-right.png",
    ᐃⵠⵠⵠⵠΔⵠ: "img/night-falcon-angry-wings-right.png",
    ᐃⲆΔΔⲆⲆᐃ: "img/day-falcon-wings-left-tamed.png",
    ⵠᐃⲆⲆⵠⲆⲆ: "img/night-falcon-wings-left-tamed.png",
    ᐃΔⵠⲆᐃⵠᐃ: "img/day-falcon-wings-right-tamed.png",
    ᐃⵠⲆⲆⲆΔΔ: "img/night-falcon-wings-right-tamed.png",
    ⵠΔⵠⵠⲆΔΔ: "img/day-falcon-tamed.png",
    ΔᐃᐃⲆΔⲆΔ: "img/night-falcon-tamed.png",
    ⵠΔⲆΔΔⵠⲆ: "img/hurt-falcon-ground.png",
    ⵠⵠΔΔⵠΔᐃ: "img/hurt-falcon.png",
    ᐃΔΔᐃΔⵠᐃ: "img/hurt-falcon-wings-left.png",
    ⲆΔⲆᐃⲆΔⲆ: "img/hurt-falcon-wings-right.png",
    ⵠⵠᐃⵠⵠⲆΔ: "img/inv-falcon-out.png",
    ᐃⲆΔⵠᐃΔⲆ: "img/inv-falcon-in.png",
    ᐃᐃᐃΔⲆⵠΔ: "img/inv-falcon-click.png",
    ⲆΔᐃⵠⲆⲆⲆ: "img/day-crab-boss.png",
    ⲆΔⲆⲆⲆΔΔ: "img/night-crab-boss.png",
    ᐃΔΔⵠⵠᐃΔ: "img/day-crab-boss-angry.png",
    ⲆᐃⵠⲆΔΔΔ: "img/night-crab-boss-angry.png",
    ᐃΔⲆᐃⵠⵠⲆ: "img/day-crab-boss-tamed.png",
    ⵠΔⵠᐃⵠⵠᐃ: "img/night-crab-boss-tamed.png",
    ΔᐃΔⵠⵠᐃⵠ: "img/day-crab-boss-claw-left-attack.png",
    ⲆΔΔᐃΔᐃΔ: "img/night-crab-boss-claw-left-attack.png",
    ⲆⲆⲆⵠΔⲆⵠ: "img/day-crab-boss-claw-right-attack.png",
    ΔⲆⲆΔΔᐃΔ: "img/night-crab-boss-claw-right-attack.png",
    ⵠᐃⲆⲆⵠⲆᐃⵠⵠ: "img/day-crab-boss-claw-left-tamed.png",
    ᐃⵠᐃⵠᐃⵠΔᐃᐃ: "img/night-crab-boss-claw-left-tamed.png",
    ᐃⲆⵠΔΔᐃᐃΔΔ: "img/day-crab-boss-claw-right-tamed.png",
    ᐃᐃᐃᐃΔⲆⲆᐃⲆ: "img/night-crab-boss-claw-right-tamed.png",
    ⲆⵠᐃᐃⲆᐃⲆ: "img/day-crab-boss-claw-left.png",
    ᐃⵠΔᐃΔⵠᐃ: "img/night-crab-boss-claw-left.png",
    ΔⲆⵠⵠΔᐃⵠ: "img/day-crab-boss-claw-right.png",
    ΔⲆⲆΔⲆⵠⵠ: "img/night-crab-boss-claw-right.png",
    ΔⲆΔᐃΔᐃᐃ: "img/hurt-crab-boss.png",
    ⲆⲆᐃⵠⲆⲆⵠ: "img/hurt-crab-boss-claw-left.png",
    ΔⵠᐃⲆⲆᐃΔ: "img/hurt-crab-boss-claw-right.png",
    ΔᐃⲆΔᐃⲆⲆ: "img/heal-crab-boss.png",
    ᐃΔᐃΔᐃΔⲆ: "img/heal-crab-boss-claw-left.png",
    ⵠⲆᐃⲆⲆⵠᐃ: "img/heal-crab-boss-claw-right.png",
    ⵠΔᐃᐃᐃⲆⵠ: "img/crab-step.png",
    ᐃΔⲆᐃᐃⵠⲆ: "img/inv-crab-boss-out.png",
    ⲆᐃᐃΔᐃⵠᐃ: "img/inv-crab-boss-in.png",
    ⵠᐃΔⵠⵠᐃⲆ: "img/inv-crab-boss-click.png",
    ⲆΔΔⵠᐃΔⲆ: "img/day-cactus10.png",
    ΔᐃΔⵠⲆΔⲆ: "img/night-cactus10.png",
    ⲆⵠᐃⵠΔⲆᐃ: "img/inv-cactus-out.png",
    ᐃⵠⲆΔΔⲆⵠ: "img/inv-cactus-in.png",
    ⲆᐃᐃᐃᐃᐃΔ: "img/inv-cactus-click.png",
    ΔΔⲆΔⲆΔⲆ: "img/day-scorpion.png",
    ⲆᐃΔΔⲆⵠⲆ: "img/night-scorpion.png",
    ΔΔⲆᐃⵠⵠᐃ: "img/day-scorpion-hand-left.png",
    ΔΔⵠⵠᐃⵠⵠ: "img/night-scorpion-hand-left.png",
    ⲆᐃⵠΔᐃⵠⵠ: "img/day-scorpion-hand-right.png",
    ΔⵠᐃᐃᐃⲆΔ: "img/night-scorpion-hand-right.png",
    ⵠᐃΔⲆΔⲆⵠ: "img/hurt-scorpion.png",
    ΔⵠⲆⵠᐃⲆΔ: "img/hurt-scorpion-hand-left.png",
    ΔΔΔᐃⲆΔᐃ: "img/hurt-scorpion-hand-right.png",
    ⲆᐃᐃᐃⵠᐃⲆ: "img/day-vulture.png",
    ⵠⲆⵠᐃΔΔᐃ: "img/night-vulture.png",
    ΔΔⲆⵠⲆΔΔ: "img/day-vulture-angry.png",
    ᐃᐃᐃΔᐃΔΔ: "img/night-vulture-angry.png",
    ⵠⵠⵠᐃΔᐃⵠ: "img/day-vulture-ground.png",
    ⲆⵠⵠΔⲆⵠⲆ: "img/night-vulture-ground.png",
    ΔᐃΔⵠᐃᐃᐃ: "img/day-vulture-ground-angry.png",
    ⵠΔⵠⵠⲆⲆΔ: "img/night-vulture-ground-angry.png",
    ⵠΔᐃⲆᐃᐃⵠ: "img/day-vulture-wings-left.png",
    ΔΔⵠⵠΔΔⵠ: "img/night-vulture-wings-left.png",
    ΔⵠⲆᐃΔⵠᐃ: "img/day-vulture-wings-right.png",
    ⵠΔⵠⵠⲆΔⲆ: "img/night-vulture-wings-right.png",
    ᐃⵠⵠⵠⲆᐃⲆ: "img/day-vulture-angry-wings-left.png",
    ᐃΔⲆⵠΔᐃᐃ: "img/night-vulture-angry-wings-left.png",
    ⵠΔⵠᐃⲆΔⵠ: "img/day-vulture-angry-wings-right.png",
    ΔΔΔᐃᐃΔⲆ: "img/night-vulture-angry-wings-right.png",
    ⲆⵠⵠⲆⲆⲆⵠ: "img/day-vulture-wings-left-tamed.png",
    ⵠᐃⲆΔⲆΔⵠ: "img/night-vulture-wings-left-tamed.png",
    ᐃⲆΔΔⲆⵠᐃ: "img/day-vulture-wings-right-tamed.png",
    ⲆᐃⲆΔⲆⲆⵠ: "img/night-vulture-wings-right-tamed.png",
    ΔᐃⲆⲆΔᐃⵠ: "img/day-vulture-tamed.png",
    ⵠΔᐃⵠⵠΔᐃ: "img/night-vulture-tamed.png",
    ᐃⲆⵠⵠⵠΔᐃ: "img/hurt-vulture-ground.png",
    ΔΔⲆᐃΔΔⵠ: "img/hurt-vulture.png",
    ⵠⲆΔⵠⵠⵠⵠ: "img/hurt-vulture-wings-left.png",
    ᐃᐃⵠΔᐃᐃᐃ: "img/hurt-vulture-wings-right.png",
    ΔΔᐃⲆⵠᐃΔ: "img/day-aloe-vera.png",
    ⵠⵠΔⲆⲆΔⲆ: "img/night-aloe-vera.png",
    ΔⵠᐃΔⲆᐃΔ: "img/inv-aloe-vera-out.png",
    ⲆΔⲆⲆᐃΔΔ: "img/inv-aloe-vera-in.png",
    ᐃⲆᐃⵠⲆᐃΔ: "img/inv-aloe-vera-click.png",
    ᐃⲆΔΔⲆⲆΔ: "img/day-aloe-vera-grown.png",
    ⲆΔⲆΔⲆⲆⵠ: "img/night-aloe-vera-grown.png",
    ΔᐃⵠᐃⲆⵠᐃ: "img/day-aloe-vera-dried.png",
    ⵠΔᐃᐃⲆⵠⵠ: "img/night-aloe-vera-dried.png",
    ⲆᐃᐃⲆΔⵠⵠ: "img/day-turban1.png",
    ᐃⵠⵠⵠⵠⵠᐃ: "img/night-turban1.png",
    ⲆⲆᐃΔⵠΔⲆ: "img/day-turban2.png",
    ⲆΔⲆⲆⵠⲆᐃ: "img/night-turban2.png",
    ⲆⲆⵠⲆΔⵠⵠ: "img/inv-turban2-out.png",
    ᐃⲆΔΔⵠⲆΔ: "img/inv-turban2-in.png",
    ΔᐃⲆΔᐃⵠⵠ: "img/inv-turban2-click.png",
    ⲆⵠⲆᐃᐃᐃΔ: "img/inv-turban1-out.png",
    ⵠΔⵠⲆΔⵠⲆ: "img/inv-turban1-in.png",
    ⵠⵠΔΔᐃⵠⵠ: "img/inv-turban1-click.png",
    ᐃᐃⲆΔⲆΔΔ: "img/day-pitchfork2.png",
    ΔᐃⲆⵠⵠΔⲆ: "img/night-pitchfork2.png",
    ᐃᐃᐃⲆⲆⲆⲆ: "img/inv-pitchfork2-out.png",
    ᐃⵠⵠΔᐃΔᐃ: "img/inv-pitchfork2-in.png",
    ᐃⲆⲆⲆᐃᐃⲆ: "img/inv-pitchfork2-click.png",
    ⵠᐃⲆᐃᐃⲆΔ: "img/inv-gold-fork-click.png",
    ᐃΔᐃⲆⲆΔⲆ: "img/inv-pilot-glasses-click.png",
    ⲆᐃΔⲆⲆᐃᐃ: "img/day-pilot-helmet.png",
    ΔⵠⲆⵠⲆⲆΔ: "img/night-pilot-helmet.png",
    ⵠΔⵠᐃΔⵠⵠ: "img/inv-pilot-helmet-out.png",
    ⲆⲆΔⵠΔᐃᐃ: "img/inv-pilot-helmet-in.png",
    ⲆⲆᐃΔᐃΔⲆ: "img/inv-pilot-helmet-click.png",
    ⲆⵠⲆⵠᐃΔᐃᐃⵠ: "img/day-sandworm0.png",
    ⵠⵠΔᐃⲆΔⵠ: "img/day-sandworm1.png",
    ΔⵠΔⵠᐃⲆΔ: "img/day-sandworm2.png",
    ⲆᐃⲆᐃⲆⲆⲆΔΔ: "img/night-sandworm0.png",
    ΔⲆⵠⲆⲆᐃⵠ: "img/night-sandworm1.png",
    ΔⲆⵠⵠΔⲆᐃ: "img/night-sandworm2.png",
    ᐃⲆᐃΔⲆΔᐃ: "img/hurt-sandworm0.png",
    ⵠⲆᐃⵠⵠᐃᐃ: "img/hurt-sandworm1.png",
    ΔᐃΔⵠᐃᐃⲆ: "img/hurt-sandworm2.png",
    ΔⵠΔⵠⵠ: "img/inv-vulture-feather-click.png",
    ⵠΔΔⵠᐃΔⲆ: "img/day-emerald0.png",
    ⲆⵠᐃⵠΔⵠⲆ: "img/night-emerald0.png",
    ⲆⲆᐃⵠⵠⲆᐃ: "img/day-emerald1.png",
    ᐃⲆᐃᐃΔⲆΔ: "img/night-emerald1.png",
    ᐃΔΔⵠⲆᐃΔ: "img/day-emerald2.png",
    ᐃΔᐃΔⲆⲆⲆ: "img/night-emerald2.png",
    ⵠⵠᐃΔⵠ: "img/inv-emerald-click.png",
    ⵠⵠⲆᐃᐃᐃΔ: "img/inv-sworm-juice-out.png",
    ᐃᐃΔⲆΔΔᐃ: "img/inv-sworm-juice-in.png",
    ᐃΔⲆᐃⲆᐃⵠ: "img/inv-sworm-juice-click.png",
    ᐃⵠⵠᐃⵠΔΔ: "img/day-point-machine.png",
    ⲆΔΔᐃΔⵠᐃ: "img/night-point-machine.png",
    ⵠᐃⵠⵠᐃⵠⵠ: "img/day-point-machine-hole.png",
    ᐃΔⵠⲆⵠⵠᐃ: "img/night-point-machine-hole.png",
    ᐃⵠΔΔⵠⲆΔ: "img/day-point-machine-ground.png",
    ⵠⲆⲆᐃⲆⵠΔ: "img/night-point-machine-ground.png",
    ᐃⵠⵠⵠⲆᐃⵠ: "img/day-point-machine-rotate.png",
    ᐃⵠΔⵠᐃᐃⵠ: "img/night-point-machine-rotate.png",
    ᐃⵠΔΔΔᐃⲆ: "img/inv-point-machine-out.png",
    ⲆⵠΔᐃᐃⵠΔ: "img/inv-point-machine-in.png",
    ⵠⵠΔΔⲆⲆΔ: "img/inv-point-machine-click.png",
    ΔΔΔᐃᐃⲆΔ: "img/day-extractor-machine0-stone.png",
    ⵠⲆΔⲆᐃⵠΔ: "img/night-extractor-machine0-stone.png",
    ⵠⵠᐃΔΔΔⵠ: "img/day-extractor-machine-stone.png",
    ⵠᐃᐃⵠⲆⵠⵠ: "img/night-extractor-machine-stone.png",
    ⵠᐃΔⲆᐃᐃⵠ: "img/inv-extractor-machine-stone-out.png",
    ⲆⲆΔΔΔᐃᐃ: "img/inv-extractor-machine-stone-in.png",
    ΔΔᐃᐃⲆⵠΔ: "img/inv-extractor-machine-stone-click.png",
    ᐃᐃᐃᐃᐃⵠᐃ: "img/day-extractor-machine0-gold.png",
    ΔⲆⲆΔⵠⵠⲆ: "img/night-extractor-machine0-gold.png",
    ⲆⲆᐃᐃΔΔⵠ: "img/day-extractor-machine-gold.png",
    ⵠᐃⵠⲆᐃᐃⲆ: "img/night-extractor-machine-gold.png",
    ⲆᐃΔΔⲆᐃⵠ: "img/inv-extractor-machine-gold-out.png",
    ⲆⵠⵠᐃⲆⲆⲆ: "img/inv-extractor-machine-gold-in.png",
    ⲆΔΔΔⲆⲆⲆ: "img/inv-extractor-machine-gold-click.png",
    ⵠⵠⵠⲆᐃⲆⵠ: "img/day-extractor-machine0-diamond.png",
    ⵠᐃᐃⲆΔᐃΔ: "img/night-extractor-machine0-diamond.png",
    ⲆⲆΔⵠⵠᐃΔ: "img/day-extractor-machine-diamond.png",
    ᐃⵠᐃΔⲆⵠⲆ: "img/night-extractor-machine-diamond.png",
    ⵠⲆⵠⵠⲆⵠΔ: "img/inv-extractor-machine-diamond-out.png",
    ΔⲆⲆⲆⲆΔⵠ: "img/inv-extractor-machine-diamond-in.png",
    ᐃΔΔⲆΔⵠⲆ: "img/inv-extractor-machine-diamond-click.png",
    ΔⵠⵠⲆᐃⲆᐃ: "img/day-extractor-machine0-amethyst.png",
    ΔΔᐃΔⵠᐃⲆ: "img/night-extractor-machine0-amethyst.png",
    ᐃⵠᐃΔΔΔΔ: "img/day-extractor-machine-amethyst.png",
    ⵠⵠᐃΔⲆᐃΔ: "img/night-extractor-machine-amethyst.png",
    ΔᐃΔΔᐃᐃᐃ: "img/inv-extractor-machine-amethyst-out.png",
    ᐃᐃᐃΔⲆΔⵠ: "img/inv-extractor-machine-amethyst-in.png",
    ⲆᐃΔⲆⵠᐃⵠ: "img/inv-extractor-machine-amethyst-click.png",
    ⵠᐃΔⵠⲆⲆⲆ: "img/day-extractor-machine0-reidite.png",
    ⲆᐃⲆΔⲆⵠⲆ: "img/night-extractor-machine0-reidite.png",
    ΔᐃΔΔΔᐃᐃ: "img/day-extractor-machine-reidite.png",
    ᐃΔⵠᐃⲆⲆⲆ: "img/night-extractor-machine-reidite.png",
    ΔⲆᐃᐃΔⲆᐃ: "img/inv-extractor-machine-reidite-out.png",
    ⵠⵠⲆⵠΔⵠᐃ: "img/inv-extractor-machine-reidite-in.png",
    ⲆᐃⲆⲆᐃⵠⵠ: "img/inv-extractor-machine-reidite-click.png",
    ⲆᐃᐃⲆⵠⲆⲆ: "img/extractor-cases.png",
    ⵠᐃⵠΔⲆⵠΔ: "img/day-golden-hen.png",
    ᐃᐃⲆΔⵠⵠᐃ: "img/night-golden-hen.png",
    ⵠⲆΔⵠΔᐃⲆ: "img/day-golden-chicken.png",
    ΔΔᐃᐃⵠΔⲆ: "img/night-golden-chicken.png",
    ΔⵠⲆᐃⵠⲆᐃ: "img/hurt-golden-hen.png",
    ΔᐃⲆΔΔΔᐃ: "img/hurt-golden-chicken.png",
    ⵠⲆΔΔᐃⵠⵠ: "img/logo-interface.png",
    ⵠΔΔᐃⲆᐃᐃ: "img/forest-mode-hover.png",
    ⲆⲆΔⲆⲆⵠᐃ: "img/normal-mode-hover.png",
    ⵠⲆⵠᐃⵠΔⵠ: "img/vampire-mode-hover.png",
    ⵠᐃᐃΔⵠⲆΔ: "img/zombie-mode-hover.png",
    ⲆΔᐃΔⲆⵠΔ: "img/community-mode-hover2.png",
    ᐃⲆⵠᐃⵠΔⲆ: "img/experimental-mode-hover.png",
    ΔⲆΔⲆᐃᐃⲆ: "img/zombie-mode-out.png",
    ⵠⲆΔΔᐃΔⵠ: "img/zombie-mode-in.png",
    ⲆᐃΔΔⵠΔⲆ: "img/zombie-mode-click.png",
    ΔᐃⲆⵠᐃΔⲆ: "img/vampire-mode-out.png",
    ⲆⲆⵠⵠΔⲆᐃ: "img/vampire-mode-in.png",
    ⵠⵠᐃΔⲆΔᐃ: "img/vampire-mode-click.png",
    ΔΔΔΔⵠⵠΔ: "img/normal-mode-out.png",
    ⲆᐃᐃⵠⲆⲆⲆ: "img/normal-mode-in.png",
    ⵠΔⵠⵠΔΔⲆ: "img/normal-mode-click.png",
    ⲆΔⵠⵠᐃⵠΔ: "img/forest-mode-out.png",
    ᐃᐃᐃΔᐃᐃΔ: "img/forest-mode-in.png",
    Ⲇⵠⵠⵠⵠⵠᐃ: "img/forest-mode-click.png",
    ⲆΔΔΔⵠⲆΔ: "img/community-mode-out.png",
    ΔΔᐃᐃⲆΔΔ: "img/community-mode-in.png",
    ⲆⵠⲆⲆⲆᐃΔ: "img/community-mode-click.png",
    ΔⵠⲆΔⲆⲆⵠ: "img/experimental-modes-out.png",
    ⵠΔᐃΔᐃΔⵠ: "img/experimental-modes-in.png",
    ᐃⲆⲆΔⲆⲆⵠ: "img/experimental-modes-click.png",
    ⲆⵠⲆΔΔΔⲆ: "img/youtube-button-out.png",
    ⵠⵠᐃⵠᐃⵠΔ: "img/youtube-button-in.png",
    ⲆΔⵠΔⲆΔⲆ: "img/youtube-button-click.png",
    ⲆⲆⵠΔⲆⵠΔ: "img/wiki-button-out.png",
    ΔⵠΔⲆΔᐃⲆ: "img/wiki-button-in.png",
    ⵠⲆⵠⵠᐃⲆΔ: "img/wiki-button-click.png",
    ⲆᐃᐃⵠⵠΔᐃ: "img/twitter-button-out.png",
    ΔᐃΔΔΔᐃⲆ: "img/twitter-button-in.png",
    ⵠⵠᐃΔⵠⲆΔ: "img/twitter-button-click.png",
    ΔⲆᐃⲆⲆᐃΔ: "img/facebook-button-out.png",
    ᐃⲆⲆΔΔⲆⵠ: "img/facebook-button-in.png",
    ᐃⲆᐃⲆᐃⵠᐃ: "img/facebook-button-click.png",
    ⵠⲆⲆᐃⵠⵠⲆ: "img/reddit-button-out.png",
    ⵠⲆⵠᐃᐃΔᐃ: "img/reddit-button-in.png",
    ᐃᐃΔⲆᐃΔᐃ: "img/reddit-button-click.png",
    ⲆᐃⵠⵠⲆⵠΔ: "img/discord-button-out.png",
    ⲆᐃⵠΔΔΔᐃ: "img/discord-button-in.png",
    ΔⵠΔᐃⲆⲆΔ: "img/discord-button-click.png",
    ⲆᐃⵠᐃᐃᐃΔ: "img/merch-button-out.png",
    ⲆⵠᐃΔᐃΔⵠ: "img/merch-button-in.png",
    ⵠᐃᐃᐃⲆⵠⵠ: "img/merch-button-click.png",
    ⲆⲆΔᐃⵠⵠΔᐃᐃ: "img/terminal-button-out.png",
    ⵠΔΔᐃⵠⵠᐃⲆⵠ: "img/terminal-button-in.png",
    ΔⲆᐃⲆᐃᐃᐃᐃΔ: "img/terminal-button-click.png",
    ⲆⲆΔᐃΔᐃᐃ: "img/restart-out.png",
    ⲆᐃⵠⲆᐃⵠⲆ: "img/restart-in.png",
    ᐃⲆΔⵠᐃⵠⲆ: "img/restart-click.png",
    ΔⲆᐃⲆⵠᐃᐃ: "img/reboot-out.png",
    ΔΔΔΔⲆΔⲆ: "img/reboot-in.png",
    ᐃᐃΔⵠᐃΔⵠ: "img/reboot-click.png",
    ⵠⲆᐃⵠⵠΔⵠ: "img/guide-out.png",
    ⲆⲆⵠᐃΔⲆΔ: "img/guide-in.png",
    ⵠⲆΔΔᐃⲆΔ: "img/guide-click.png",
    ᐃⲆΔⵠΔᐃΔ: "img/copy-paste-out.png",
    ⲆⵠᐃⲆⲆⲆⵠ: "img/copy-paste-in.png",
    ᐃⵠⲆⵠⲆᐃⲆ: "img/copy-paste-click.png",
    ⵠᐃᐃⵠᐃΔᐃ: "img/link-buttons-bg.png",
    ⵠᐃΔⵠᐃⵠᐃ: "img/changelog-box2.png",
    ⵠΔΔᐃⵠΔΔ: "img/changelog_31.png",
    ⵠᐃⵠⲆᐃⲆΔ: "img/banner-taming.png",
    ᐃⲆⵠⲆΔⲆⲆ: "img/profile-button-out.png",
    ⵠⵠⵠΔΔⲆⲆ: "img/profile-button-in.png",
    ΔⵠΔΔΔΔᐃ: "img/profile-button-click.png",
    ⵠᐃⲆⲆᐃΔΔ: "img/login-button-out.png",
    ⵠΔⲆᐃⵠⵠⵠ: "img/login-button-in.png",
    ΔΔⲆⵠⲆⵠⲆ: "img/login-button-click.png",
    ΔᐃᐃⵠⲆⵠⲆ: "img/login-google-out.png",
    ⵠΔΔΔΔⵠⵠ: "img/login-google-in.png",
    ᐃⵠΔⵠΔⲆⵠ: "img/login-google-click.png",
    ⲆΔⵠⲆⲆΔΔ: "img/login-facebook-out.png",
    ⵠΔⲆⵠⲆᐃⲆ: "img/login-facebook-in.png",
    ΔⵠΔᐃΔᐃᐃ: "img/login-facebook-click.png",
    Ⲇⵠᐃᐃⵠⵠⵠ: "img/account-box.png",
    ᐃⵠᐃⲆᐃⵠⲆᐃⲆ: "img/account-under-maintenance.png",
    ΔⵠⵠⵠⵠᐃΔ: "img/close-button-account-out.png",
    ⲆⵠᐃⵠⲆᐃⵠ: "img/close-button-account-in.png",
    ⲆⲆⵠΔⵠⵠⲆ: "img/close-button-account-click.png",
    ᐃⵠⵠⵠⲆⵠⲆ: "img/play-button-out.png",
    ⵠⵠᐃⵠΔⵠᐃ: "img/play-button-in.png",
    ΔⲆᐃⲆⲆⵠᐃ: "img/play-button-click.png",
    ⵠⲆⵠⵠⲆΔⵠᐃⲆ: "img/app-store-badge.png",
    ⵠΔⵠⲆΔⲆⲆᐃⵠ: "img/play-store-badge.png",
    ⲆⲆᐃᐃᐃΔⵠⵠΔ: "img/mobile-boxad.png",
    ᐃᐃⲆⵠΔᐃᐃ: "img/modify-name-out.png",
    ⲆᐃΔⲆⲆⵠᐃ: "img/modify-name-in.png",
    ᐃᐃⵠΔⲆⲆᐃ: "img/modify-name-click.png",
    ⲆⲆⵠⲆΔΔΔ: "img/copy-id-button-out.png",
    ΔⵠΔⲆᐃⲆᐃ: "img/copy-id-button-hover.png",
    ᐃΔΔᐃΔΔΔ: "img/copy-id-button-active.png",
    ⲆⲆⲆᐃⵠᐃⲆ: "img/yes-button-out.png",
    ⲆⲆᐃΔⲆᐃⵠ: "img/yes-button-in.png",
    ΔⲆᐃΔΔΔⵠ: "img/yes-button-click.png",
    ᐃⵠᐃⲆⵠⵠⲆ: "img/yes-300-button-out.png",
    ᐃᐃᐃⵠΔΔᐃ: "img/yes-300-button-in.png",
    ⵠⲆΔΔⲆⲆΔ: "img/yes-300-button-click.png",
    ⵠΔⲆⵠΔΔⵠ: "img/no-button-out.png",
    ⲆΔⲆΔⲆᐃⲆ: "img/no-button-in.png",
    ⲆᐃⵠΔΔᐃᐃ: "img/no-button-click.png",
    ⵠᐃⵠⵠᐃᐃᐃ: "img/no-thanks-button-out.png",
    ⵠΔⲆⵠᐃⲆΔ: "img/no-thanks-button-in.png",
    ⵠᐃⲆᐃᐃᐃⵠ: "img/no-thanks-button-click.png",
    ⲆⵠᐃⵠᐃΔⵠ: "img/shop-button-out.png",
    ΔⲆᐃΔⵠᐃᐃ: "img/shop-button-in.png",
    ⲆⲆᐃⵠⵠⵠⵠ: "img/shop-button-click.png",
    ⲆⲆⲆⵠΔᐃᐃ: "img/logout-out.png",
    ᐃᐃⲆⲆᐃᐃⲆ: "img/logout-in.png",
    ᐃⲆⵠΔΔᐃⲆ: "img/logout-click.png",
    ᐃⵠΔⲆΔᐃⲆ: "img/terms-button-out.png",
    ⵠⵠᐃᐃⲆΔᐃ: "img/terms-button-in.png",
    ⲆⲆΔᐃΔⲆⵠ: "img/terms-button-click.png",
    ⵠⵠΔΔΔᐃᐃ: "img/tutorial-icon.png",
    ⵠⵠⵠⲆⲆⲆᐃ: "img/skins-icon.png",
    ⵠΔⲆΔᐃⲆΔ: "img/shop-icon.png",
    ΔⲆᐃᐃΔΔΔⵠᐃ: "img/paint-icon.png",
    ᐃⲆⲆⵠⲆΔᐃ: "img/leaderboard-icon.png",
    ᐃᐃΔⵠᐃᐃᐃ: "img/start-icon.png",
    ΔᐃⲆⵠⵠⲆᐃ: "img/profile-icon.png",
    ⵠⲆⲆΔΔⲆⲆ: "img/server-access-icon2.png",
    ΔΔΔⵠΔᐃⲆ: "img/button-homepage-bg-out.png",
    ⵠⵠΔΔⵠᐃⲆ: "img/button-homepage-bg-in.png",
    ᐃΔⲆΔⲆⵠΔ: "img/button-homepage-bg-click.png",
    ⲆᐃΔⵠⵠᐃᐃ: "img/button-bottom-homepage-bg-out.png",
    ΔⵠᐃⲆⲆᐃᐃ: "img/button-bottom-homepage-bg-in.png",
    ΔⲆⲆⵠⵠⵠⲆ: "img/button-bottom-homepage-bg-click.png",
    ᐃΔᐃⲆⵠᐃᐃ: "img/lvl-player.png",
    ⵠᐃᐃᐃⲆΔⵠ: "img/avatar-player.png",
    ⲆⲆⲆᐃⲆΔⲆ: "img/avatar-player1.png",
    ⲆᐃᐃᐃⲆᐃⲆ: "img/avatar-player2.png",
    ⲆⲆⲆΔⵠᐃΔ: "img/avatar-player3.png",
    ᐃᐃⵠⲆᐃⲆᐃ: "img/avatar-player4.png",
    ⵠΔᐃⲆΔⵠⲆ: "img/avatar-player5.png",
    ⵠⵠᐃⵠΔᐃⲆ: "img/avatar-player6.png",
    ⵠⲆⵠΔΔΔⵠ: "img/avatar-player7.png",
    ᐃⲆᐃᐃΔᐃΔ: "img/avatar-player8.png",
    ΔᐃⲆΔᐃΔⲆ: "img/avatar-player9.png",
    ⵠΔᐃⵠⲆΔΔ: "img/avatar-player10.png",
    ᐃΔᐃⲆΔⲆⲆ: "img/avatar-player11.png",
    ⵠᐃΔⲆⲆᐃⵠ: "img/avatar-player12.png",
    ᐃΔⵠᐃⵠⵠᐃ: "img/avatar-player13.png",
    ⵠᐃⲆⲆΔᐃⲆ: "img/avatar-player14.png",
    ⵠΔⵠΔⵠⵠᐃ: "img/avatar-player14.png",
    ⵠⵠⲆΔᐃⲆΔ: "img/avatar-player14.png",
    ⲆⵠⵠⲆᐃΔⲆ: "img/avatar-player14.png",
    ΔΔⵠΔᐃᐃᐃⲆⲆ: "img/golden-bread.png",
    ⲆΔᐃᐃⲆⲆⵠ: "img/buy-bread-out.png",
    ⵠᐃⲆⲆᐃⲆΔ: "img/buy-bread-in.png",
    ΔⵠⲆᐃⲆⲆⵠ: "img/buy-bread-click.png",
    ⲆⵠⲆᐃⲆⵠⵠ: "img/gauge.png",
    ΔᐃΔⵠⵠᐃⲆΔⲆ: "img/season-4-out.png",
    ΔΔⵠⵠΔⲆΔⲆⲆ: "img/season-4-in.png",
    ⲆᐃᐃⲆⵠⵠΔⲆⲆ: "img/season-4-click.png",
    ⲆΔᐃⲆⲆⵠⵠⵠᐃ: "img/season4-box.png",
    ⲆⲆⵠⵠⲆⵠⵠⵠᐃ: "img/season-5-out.png",
    ⵠⵠⵠᐃⲆⲆⵠⲆᐃ: "img/season-5-in.png",
    ⵠⵠⲆⵠⲆⵠⲆⵠΔ: "img/season-5-click.png",
    ⲆᐃⲆᐃⲆᐃᐃⵠᐃ: "img/season5-box.png",
    ⲆⲆⲆᐃΔΔᐃ: "img/season-6-out.png",
    ⲆⲆⲆⵠᐃⵠⵠ: "img/season-6-in.png",
    ⲆⵠⲆⲆⲆⲆⵠ: "img/season-6-click.png",
    ᐃᐃΔΔΔⲆᐃ: "img/season6-box.png",
    ᐃⲆᐃᐃⲆⵠᐃ: "img/profile3-box.png",
    ᐃᐃΔⵠⲆⵠΔ: "img/skins-box.png",
    ⲆⵠΔᐃΔΔⲆ: "img/shop-box.png",
    ⵠⵠᐃᐃᐃⵠΔⲆΔ: "img/private-server-box.png",
    ⲆᐃΔⲆΔᐃᐃ: "img/location-box.png",
    ᐃⲆΔⵠⵠᐃΔ: "img/server-duration-box.png",
    ⲆΔⲆⲆΔⲆⲆ: "img/tutorial-box.png",
    ⵠⲆΔⵠᐃΔᐃ: "img/leaderboard2-box.png",
    ΔΔΔⵠⲆᐃᐃ: "img/buy-breads-box.png",
    ⲆΔᐃᐃᐃᐃΔ: "img/bag-box.png",
    ⵠⲆⵠⵠᐃⵠⲆ: "img/deadbox-box.png",
    ⲆΔⵠᐃⵠᐃⲆ: "img/book-box.png",
    ⵠⵠΔⵠᐃⲆᐃ: "img/accessories-box.png",
    ᐃΔΔᐃⵠᐃⵠ: "img/customskin-box.png",
    ⲆᐃⲆᐃΔᐃⲆ: "img/bag-lasts.png",
    ᐃΔΔΔⲆⵠΔ: "img/server-lasts.png",
    ⵠⲆΔⲆⲆᐃⵠ: "img/server-access-box3.png",
    ⲆΔΔⵠᐃᐃⲆ: "img/lootbox-box.png",
    ᐃⵠᐃᐃⵠΔᐃ: "img/change-nickname0.png",
    ⵠⲆⲆΔᐃᐃΔ: "img/change-nickname1.png",
    ⵠᐃΔᐃⵠⲆⲆ: "img/cheating-box.png",
    ᐃΔⵠΔᐃⵠⵠᐃᐃ: "img/daily-quest-box.png",
    ⵠⲆᐃⲆⲆⲆⲆⵠΔ: "img/daily-5-bread.png",
    ⵠᐃⲆΔΔᐃⲆΔᐃ: "img/daily-10-bread.png",
    ⵠᐃΔΔⵠⵠⲆᐃⵠ: "img/daily-valid.png",
    ΔⲆⵠⵠΔᐃⲆ: "img/normal-profile-out.png",
    ΔⲆⵠⵠⲆᐃⲆ: "img/normal-profile-in.png",
    ᐃΔⵠᐃΔΔⲆ: "img/normal-profile-click.png",
    ᐃᐃⲆᐃⵠⲆⲆ: "img/forest-profile-out.png",
    ⲆⵠΔⲆΔⲆⲆ: "img/forest-profile-in.png",
    ⵠⵠΔⲆᐃΔⵠ: "img/forest-profile-click.png",
    ⲆⲆᐃΔᐃⲆⵠ: "img/zombie-profile-out.png",
    ᐃⵠᐃⵠᐃΔⵠ: "img/zombie-profile-in.png",
    ⵠⵠᐃⲆⲆᐃΔ: "img/zombie-profile-click.png",
    ⵠᐃⵠΔⲆⵠᐃ: "img/vampire-profile-out.png",
    ⵠᐃΔⵠⲆᐃⵠ: "img/vampire-profile-in.png",
    ΔᐃⵠⲆᐃᐃΔ: "img/vampire-profile-click.png",
    ᐃᐃⲆᐃⵠⵠⲆ: "img/total-profile-out.png",
    ᐃⲆⲆⵠⵠⵠⵠ: "img/total-profile-in.png",
    ⵠⲆⲆⵠⵠⵠⲆ: "img/total-profile-click.png",
    ⲆᐃⵠΔⵠⲆΔ: "img/season1-out.png",
    ⲆΔᐃⲆⵠΔⵠ: "img/season1-in.png",
    ⲆΔᐃⲆⲆⵠⲆ: "img/season1-click.png",
    ΔⲆΔΔᐃᐃᐃ: "img/season2-out.png",
    ⵠⲆⲆⵠⵠΔΔ: "img/season2-in.png",
    ΔⵠΔᐃᐃᐃᐃ: "img/season2-click.png",
    ᐃⲆⵠⲆⲆᐃⲆ: "img/season3-out.png",
    ⵠⵠⵠᐃᐃᐃΔ: "img/season3-in.png",
    ⵠⲆᐃΔᐃⵠⵠ: "img/season3-click.png",
    ᐃΔΔⲆΔᐃⲆ: "img/season4-out.png",
    ΔΔⲆΔⵠⵠⲆ: "img/season4-in.png",
    ⵠⵠⲆᐃᐃΔⵠ: "img/season4-click.png",
    ᐃᐃΔⵠΔⲆⲆ: "img/season5-out.png",
    ⲆⲆⵠΔⵠᐃᐃ: "img/season5-in.png",
    ⵠΔⵠΔⵠᐃⲆ: "img/season5-click.png",
    ⲆⲆⵠᐃⵠⲆᐃ: "img/season6-out.png",
    ᐃΔⵠΔΔⵠⲆ: "img/season6-in.png",
    ⵠᐃᐃΔᐃᐃⵠ: "img/season6-click.png",
    ⵠΔⲆⵠΔᐃⲆ: "img/locked-skin-alert.png",
    ⲆⲆⲆᐃΔⲆⲆ: "img/locked-custom-alert.png",
    ΔⵠᐃΔΔⵠⲆ: "img/bg-red-locked.png",
    ⵠΔⵠΔᐃΔΔ: "img/skin-button-out.png",
    ⲆⵠᐃΔⵠᐃⲆ: "img/skin-button-in.png",
    ᐃᐃⲆΔⵠᐃΔ: "img/skin-button-click.png",
    ⲆⲆᐃᐃⲆᐃᐃ: "img/accessory-button-out.png",
    ᐃⲆⲆᐃⵠⵠⵠ: "img/accessory-button-in.png",
    ⲆᐃⵠΔΔΔⲆ: "img/accessory-button-click.png",
    ⵠⵠΔⲆᐃΔⲆ: "img/bag-button-out.png",
    ⲆΔⲆᐃⲆᐃⵠ: "img/bag-button-in.png",
    ⲆΔⲆⵠⵠΔⲆ: "img/bag-button-click.png",
    ΔⵠⲆⲆΔΔⲆ: "img/book-button-out.png",
    ᐃΔⵠΔⲆⵠᐃ: "img/book-button-in.png",
    ᐃⵠⲆⵠⵠⵠᐃ: "img/book-button-click.png",
    ΔⲆⵠⵠⵠΔⲆ: "img/deadbox-button-out.png",
    ΔΔᐃΔⵠⵠⲆ: "img/deadbox-button-in.png",
    ᐃᐃΔΔᐃᐃⲆ: "img/deadbox-button-click.png",
    ΔⲆᐃᐃᐃΔⵠ: "img/loot-button-out.png",
    ⲆⵠΔᐃⲆΔΔ: "img/loot-button-in.png",
    ⵠⵠΔⵠⲆᐃΔ: "img/loot-button-click.png",
    ⵠΔΔᐃᐃᐃⲆ: "img/free-item-out.png",
    ⵠⲆΔΔᐃⲆⲆ: "img/free-item-in.png",
    ⲆΔᐃⲆΔⲆⲆ: "img/free-item-click.png",
    ΔᐃᐃⲆ: "img/wood-item-out.png",
    ⲆΔΔᐃ: "img/wood-item-in.png",
    ⲆⵠⲆᐃ: "img/wood-item-click.png",
    ⵠΔⲆᐃⲆⵠⲆ: "img/stone-item.png",
    ΔΔΔᐃⲆⲆⵠ: "img/stone-item-in.png",
    ⲆⵠᐃΔΔⵠⲆ: "img/stone-item-click.png",
    ΔⵠᐃᐃⵠᐃΔ: "img/gold-item.png",
    ᐃᐃⵠᐃᐃᐃⲆ: "img/gold-item-in.png",
    ΔΔⲆᐃᐃΔⵠ: "img/gold-item-click.png",
    ⵠⵠⵠᐃⵠⵠΔ: "img/diamond-item.png",
    ΔΔᐃⵠΔΔⵠ: "img/diamond-item-in.png",
    ⵠⵠⵠΔᐃⵠΔ: "img/diamond-item-click.png",
    ᐃᐃΔⵠⲆΔᐃ: "img/amethyst-item.png",
    ⵠⲆᐃⲆΔⲆⲆ: "img/amethyst-item-in.png",
    ᐃⵠΔⲆⵠⵠΔ: "img/amethyst-item-click.png",
    ⵠⵠᐃⲆⵠΔᐃ: "img/reidite-item.png",
    ᐃΔⵠᐃⵠⵠⵠ: "img/reidite-item-in.png",
    ᐃΔⲆⵠⲆⲆⲆ: "img/reidite-item-click.png",
    ⵠᐃⵠⵠⵠⲆΔ: "img/special-item-out.png",
    ᐃΔᐃⲆᐃⵠᐃ: "img/special-item-in.png",
    ΔⲆᐃⲆΔᐃᐃ: "img/special-item-click.png",
    ΔⵠⲆⵠⲆΔⲆ: "img/level-item-out.png",
    ⵠⲆᐃΔΔΔⵠ: "img/level-item-in.png",
    ⵠᐃⵠΔⵠᐃΔ: "img/level-item-click.png",
    ΔⲆᐃⵠⵠΔⲆ: "img/skin-previous-out.png",
    ⵠⲆⲆᐃⲆΔᐃ: "img/skin-previous-in.png",
    ΔⲆⵠᐃᐃᐃᐃ: "img/skin-previous-click.png",
    ⲆᐃⵠⲆᐃᐃᐃ: "img/skin-next-out.png",
    ᐃⵠⲆᐃⵠⲆⵠ: "img/skin-next-in.png",
    ⵠΔΔᐃⵠᐃΔ: "img/skin-next-click.png",
    ᐃⵠᐃᐃᐃ: "img/back-button-out.png",
    ΔᐃⲆΔᐃ: "img/back-button-in.png",
    ΔᐃⵠⵠΔ: "img/back-button-click.png",
    ⵠⵠⵠΔⵠⵠⲆ: "img/get-more-button-out.png",
    ᐃⲆⵠΔᐃⵠᐃ: "img/get-more-button-in.png",
    ᐃᐃⵠᐃⵠᐃΔ: "img/get-more-button-click.png",
    ⵠⲆΔⲆᐃΔⲆ: "img/currency1-out.png",
    ⲆⲆᐃⲆΔΔⲆ: "img/currency1-in.png",
    ᐃᐃⲆⵠΔΔᐃ: "img/currency1-click.png",
    ΔΔⲆΔᐃΔΔ: "img/currency2-out.png",
    ⲆⲆΔᐃⵠᐃΔ: "img/currency2-in.png",
    ⲆΔⲆᐃⵠⲆΔ: "img/currency2-click.png",
    ΔⲆᐃΔⲆᐃᐃ: "img/currency3-out.png",
    ⵠⵠᐃⲆⲆⵠⲆ: "img/currency3-in.png",
    ⵠᐃᐃᐃΔΔᐃ: "img/currency3-click.png",
    ⵠΔⲆΔᐃΔΔ: "img/currency4-out.png",
    ΔᐃᐃⲆΔΔΔ: "img/currency4-in.png",
    ᐃΔΔᐃⲆⲆᐃ: "img/currency4-click.png",
    ΔΔⵠⵠⵠᐃᐃ: "img/currency5-out.png",
    ΔΔΔΔⵠⵠⵠ: "img/currency5-in.png",
    ΔΔᐃᐃΔⲆΔ: "img/currency5-click.png",
    ΔᐃⲆᐃᐃᐃⵠ: "img/price1-out.png",
    ΔᐃᐃⵠΔᐃᐃ: "img/price1-in.png",
    ⵠⲆΔᐃᐃⵠᐃ: "img/price1-click.png",
    ⵠΔᐃⵠΔΔⵠ: "img/price2-out.png",
    ΔⲆΔⵠⵠⵠⵠ: "img/price2-in.png",
    ᐃⵠΔⲆᐃⵠᐃ: "img/price2-click.png",
    ⵠⲆⵠᐃⵠᐃᐃ: "img/price3-out.png",
    ΔᐃⲆⲆᐃᐃΔ: "img/price3-in.png",
    ΔΔⲆⲆⲆⵠⲆ: "img/price3-click.png",
    ⲆΔⲆⲆⲆⲆⲆ: "img/price4-out.png",
    ⵠΔⲆⵠⵠᐃⲆ: "img/price4-in.png",
    ᐃⵠᐃΔΔⲆΔ: "img/price4-click.png",
    ⲆⲆⲆᐃᐃⵠᐃ: "img/price5-out.png",
    ᐃⲆΔᐃⵠⵠⵠ: "img/price5-in.png",
    ᐃᐃᐃᐃⵠⵠΔ: "img/price5-click.png",
    ⵠᐃⵠⲆᐃⲆⵠⲆⲆ: "img/buy-private-server-out.png",
    ⲆᐃⲆⲆᐃⵠⲆⵠᐃ: "img/buy-private-server-in.png",
    ⲆⲆΔⵠΔΔᐃⲆΔ: "img/buy-private-server-click.png",
    ⲆΔⲆΔᐃᐃⵠ: "img/atlanta-button-out.png",
    ᐃᐃⲆⵠΔᐃⵠ: "img/atlanta-button-in.png",
    ΔΔΔΔⵠΔΔ: "img/atlanta-button-click.png",
    ⵠΔᐃⵠⵠⲆⲆ: "img/los-angeles-button-out.png",
    ⵠΔⵠⵠΔΔᐃ: "img/los-angeles-button-in.png",
    ᐃⵠⵠⲆⲆⲆΔ: "img/los-angeles-button-click.png",
    ⵠᐃΔΔⵠΔΔ: "img/sydney-button-out.png",
    ΔⵠΔΔⲆⵠΔ: "img/sydney-button-in.png",
    ᐃΔᐃᐃΔⵠⲆ: "img/sydney-button-click.png",
    ⵠᐃⲆᐃᐃⲆⲆ: "img/frankfurt-button-out.png",
    ⲆΔⵠⲆⲆᐃⵠ: "img/frankfurt-button-in.png",
    ⲆⲆⲆⵠⵠΔⵠ: "img/frankfurt-button-click.png",
    ⵠⵠᐃᐃᐃΔⲆ: "img/osaka-button-out.png",
    ΔⲆⵠΔⲆΔᐃ: "img/osaka-button-in.png",
    ⲆⲆⵠⵠΔᐃⵠ: "img/osaka-button-click.png",
    ᐃⵠⲆΔⵠᐃⵠⲆΔ: "img/yes-location-out.png",
    ΔⵠΔΔΔⵠⲆⲆᐃ: "img/yes-location-in.png",
    ⲆΔⲆΔᐃΔⵠⵠⵠ: "img/yes-location-click.png",
    ΔⵠΔΔᐃΔᐃ: "img/3days-button-out.png",
    ΔⲆⲆΔΔⵠⵠ: "img/3days-button-in.png",
    ΔⵠᐃΔᐃᐃⲆ: "img/3days-button-click.png",
    ⲆΔⲆΔΔⵠⲆ: "img/7days-button-out.png",
    ΔⲆΔᐃΔΔᐃ: "img/7days-button-in.png",
    ⲆⲆⵠΔᐃΔⲆ: "img/7days-button-click.png",
    ΔⵠⵠΔⲆᐃⲆ: "img/30days-button-out.png",
    ⲆᐃΔΔᐃⲆⵠ: "img/30days-button-in.png",
    ᐃᐃⵠᐃΔⵠΔ: "img/30days-button-click.png",
    ⲆⵠᐃᐃⲆⲆⵠ: "img/90days-button-out.png",
    ⲆⵠⲆⵠⵠΔᐃ: "img/90days-button-in.png",
    ΔⲆⵠⵠᐃᐃΔ: "img/90days-button-click.png",
    ΔⵠΔⲆⵠⲆΔ: "img/spin1.png",
    ᐃΔⲆΔᐃᐃⵠ: "img/spin2.png",
    ᐃΔΔⵠᐃᐃⵠ: "img/spin3.png",
    ⲆⵠⲆᐃⵠᐃⵠ: "img/spin4.png",
    ⲆᐃⲆⲆᐃΔⵠ: "img/spin5.png",
    ΔΔⵠΔⲆᐃᐃ: "img/spin6.png",
    ᐃᐃⲆⲆⵠΔᐃ: "img/arrow-spin.png",
    ᐃⵠᐃᐃΔᐃΔ: "img/spin-button-1-out.png",
    ΔⲆⵠᐃᐃΔΔ: "img/spin-button-1-in.png",
    ΔᐃΔᐃⲆⲆᐃ: "img/spin-button-1-click.png",
    ΔⲆΔᐃΔⲆⵠ: "img/spin-button-2-out.png",
    ⲆⲆΔⲆΔᐃⲆ: "img/spin-button-2-in.png",
    ΔᐃΔΔΔⵠⵠ: "img/spin-button-2-click.png",
    ΔᐃᐃᐃΔᐃⲆ: "img/spin-button-3-out.png",
    ΔΔᐃⲆⵠⵠΔ: "img/spin-button-3-in.png",
    ⲆⲆΔΔΔⵠⵠ: "img/spin-button-3-click.png",
    ΔΔΔΔⲆⲆⲆ: "img/spin-button-4-out.png",
    ⵠⵠⲆⵠⵠΔⵠ: "img/spin-button-4-in.png",
    ΔⲆᐃᐃⲆΔⵠ: "img/spin-button-4-click.png",
    ᐃⲆⲆⵠⲆⲆΔ: "img/spin-button-5-out.png",
    ᐃⲆΔⲆⵠᐃΔ: "img/spin-button-5-in.png",
    ΔⵠⲆᐃᐃΔᐃ: "img/spin-button-5-click.png",
    ᐃⵠᐃᐃᐃⵠⵠ: "img/spin-light.png",
    ᐃⲆⲆᐃⲆᐃᐃ: "img/tuto-wiki-out.png",
    ᐃⵠⵠᐃⲆΔⵠ: "img/tuto-wiki-in.png",
    ⵠⵠⲆᐃⵠΔⲆ: "img/tuto-wiki-click.png",
    ⵠⵠΔΔΔΔᐃ: "img/tuto-previous-out.png",
    ⵠᐃΔⵠⲆΔΔ: "img/tuto-previous-in.png",
    ᐃⵠⵠⲆⲆᐃΔ: "img/tuto-previous-click.png",
    ΔΔⵠᐃΔᐃⲆ: "img/tuto-next-out.png",
    ᐃⲆΔΔⲆⲆⵠ: "img/tuto-next-in.png",
    ⵠᐃⲆⲆⵠⲆᐃ: "img/tuto-next-click.png",
    ΔⲆⵠⵠⵠⵠΔ: "img/time-leaderboard-out.png",
    ᐃⵠⵠᐃⵠΔᐃ: "img/time-leaderboard-in.png",
    ⵠΔⲆⲆⲆⲆΔ: "img/time-leaderboard-click.png",
    ΔⵠᐃΔⲆⲆⵠ: "img/score-leaderboard-out.png",
    ΔⲆᐃⵠΔᐃⲆ: "img/score-leaderboard-in.png",
    ΔⵠᐃⲆⲆⲆΔ: "img/score-leaderboard-click.png",
    ΔᐃᐃⲆⲆᐃᐃ: "img/lvl-leaderboard-out.png",
    ⵠΔⵠᐃᐃΔⲆ: "img/lvl-leaderboard-in.png",
    ΔᐃⲆΔᐃᐃⵠ: "img/lvl-leaderboard-click.png",
    ᐃⵠⲆⲆΔⲆⵠ: "img/kill-leaderboard-out.png",
    ⲆⵠⵠⵠⵠᐃⲆ: "img/kill-leaderboard-in.png",
    ᐃᐃⵠⵠᐃᐃⲆ: "img/kill-leaderboard-click.png",
    ΔΔⵠΔⵠᐃΔ: "img/all-leaderboard-out.png",
    ΔΔⲆᐃΔΔᐃ: "img/all-leaderboard-in.png",
    ᐃᐃⵠᐃⵠⵠⵠ: "img/all-leaderboard-click.png",
    ⵠⵠᐃⲆΔⲆᐃ: "img/today-leaderboard-out.png",
    ᐃᐃⵠΔⲆⵠⵠ: "img/today-leaderboard-in.png",
    ΔΔⲆⲆᐃᐃⵠ: "img/today-leaderboard-click.png",
    ⵠⲆᐃⵠⵠΔᐃ: "img/week-leaderboard-out.png",
    ⵠⵠΔⵠⵠΔΔ: "img/week-leaderboard-in.png",
    ΔΔΔⵠΔΔⵠ: "img/week-leaderboard-click.png",
    ⵠⵠⲆⵠΔⲆΔ: "img/season1-out.png",
    ᐃⲆⵠΔΔⲆᐃ: "img/season1-in.png",
    ΔⵠⲆⲆᐃⵠᐃ: "img/season1-click.png",
    ⲆⵠⵠΔᐃⵠⵠ: "img/season2-out.png",
    ⵠΔⲆᐃᐃⲆΔ: "img/season2-in.png",
    ⲆΔⲆΔⵠⵠᐃ: "img/season2-click.png",
    ⲆⵠⵠΔⲆⲆᐃ: "img/season3-out.png",
    ᐃⵠⲆΔⲆΔᐃ: "img/season3-in.png",
    ⲆᐃⲆΔⵠⲆⵠ: "img/season3-click.png",
    ⵠᐃΔⵠⲆⵠᐃ: "img/season4-out.png",
    ⲆⲆⲆΔΔΔᐃ: "img/season4-in.png",
    ⲆⲆΔⵠⵠⵠᐃ: "img/season4-click.png",
    Ⲇᐃᐃᐃᐃᐃⵠ: "img/season5-out.png",
    ΔᐃⲆΔᐃᐃᐃ: "img/season5-in.png",
    ⲆⵠⲆᐃⲆⵠⲆ: "img/season5-click.png",
    ⲆᐃᐃⵠΔΔᐃ: "img/season6-out.png",
    ⵠⵠⵠΔⲆΔⵠ: "img/season6-in.png",
    ⵠⵠⵠᐃᐃⵠΔ: "img/season6-click.png",
    ΔⲆⵠⲆⵠΔⲆ: "img/total-lead-out.png",
    ⵠᐃⲆᐃΔΔΔ: "img/total-lead-in.png",
    ⵠΔⵠⲆⲆⵠΔ: "img/total-lead-click.png",
    ΔⵠⵠΔⵠᐃⲆ: "img/normal-lead-out.png",
    ᐃⵠΔⵠᐃⵠⵠ: "img/normal-lead-in.png",
    ᐃⵠⵠⵠⵠⲆᐃ: "img/normal-lead-click.png",
    ᐃⵠⲆⲆⲆⲆⵠ: "img/forest-lead-out.png",
    ᐃⲆⲆΔⲆᐃΔ: "img/forest-lead-in.png",
    ΔⵠⲆᐃⵠΔⵠ: "img/forest-lead-click.png",
    ⵠᐃⲆⵠⲆΔᐃ: "img/vampire-lead-out.png",
    ᐃΔᐃⵠᐃⲆΔ: "img/vampire-lead-in.png",
    ⵠⲆⲆᐃᐃᐃⵠ: "img/vampire-lead-click.png",
    ⲆᐃΔΔΔⲆᐃ: "img/zombie-lead-out.png",
    ΔᐃΔⵠΔΔᐃ: "img/zombie-lead-in.png",
    ΔΔⲆⵠΔΔⲆ: "img/zombie-lead-click.png",
    ΔᐃᐃΔᐃᐃⲆ: "img/day-level5.png",
    ᐃᐃΔⵠⲆΔⲆ: "img/night-level5.png",
    ⲆΔⲆᐃⵠⲆᐃ: "img/day-level10.png",
    ΔᐃⵠⲆΔᐃΔ: "img/night-level10.png",
    ᐃᐃΔⵠⵠᐃⵠ: "img/day-level15.png",
    ⵠⲆᐃΔᐃⲆⲆ: "img/night-level15.png",
    ⵠΔⲆᐃⲆⲆΔ: "img/day-level20.png",
    ⲆᐃⲆᐃᐃΔᐃ: "img/night-level20.png",
    ⲆⵠΔⵠⲆⵠⵠ: "img/day-level25.png",
    ⵠⵠⵠᐃⵠⵠⵠ: "img/night-level25.png",
    ᐃⵠᐃΔⲆⲆⲆ: "img/day-level30.png",
    ⲆΔⵠᐃᐃΔⲆ: "img/night-level30.png",
    ΔⵠΔΔⵠⲆᐃ: "img/day-level35.png",
    ΔⲆⲆⵠⵠᐃᐃ: "img/night-level35.png",
    ᐃΔΔⵠⲆⲆΔ: "img/day-level40.png",
    ΔⵠⵠⵠⵠΔᐃ: "img/night-level40.png",
    ΔᐃΔⵠᐃⵠⵠ: "img/day-level45.png",
    ᐃⵠⲆᐃⲆᐃΔ: "img/night-level45.png",
    ᐃᐃⵠᐃΔᐃᐃ: "img/day-level50.png",
    ᐃΔΔᐃΔⲆⵠ: "img/night-level50.png",
    ΔⵠⵠⵠⲆΔᐃ: "img/day-level55.png",
    ⲆᐃᐃⲆᐃΔⲆ: "img/night-level55.png",
    ᐃᐃⲆᐃⵠⵠᐃ: "img/day-level60.png",
    ΔⵠΔΔᐃⵠΔ: "img/night-level60.png",
    ⲆᐃⵠⵠⵠΔⵠ: "img/day-skin-devast0.png",
    ΔᐃᐃⵠΔⲆΔ: "img/night-skin-devast0.png",
    ᐃⵠᐃⵠⲆΔⲆ: "img/day-hand-devaster.png",
    ⲆᐃⵠᐃⵠΔᐃ: "img/night-hand-devaster.png",
    ⲆⲆⲆⵠΔᐃΔ: "img/day-skin-star0.png",
    ⲆᐃⵠᐃⲆⲆⲆ: "img/night-skin-star0.png",
    ΔⲆⵠΔᐃⵠⵠ: "img/day-hand-star0.png",
    ᐃᐃⲆΔⲆⲆⵠ: "img/night-hand-star0.png",
    ΔᐃⵠⵠⲆΔⵠ: "img/day-vampire.png",
    ᐃⲆⲆΔⵠⲆⵠ: "img/night-vampire.png",
    ΔⲆᐃᐃⲆⲆⵠ: "img/day-hand-vampire.png",
    ⲆᐃⲆⲆᐃⲆⲆ: "img/night-hand-vampire.png",
    ⵠⵠⵠΔᐃⲆΔ: "img/day-zombie.png",
    ᐃⲆⵠᐃᐃⲆⵠ: "img/night-zombie.png",
    ⵠᐃΔΔⲆⵠⲆ: "img/day-hand-zombie.png",
    ΔⲆⲆⵠⲆᐃⵠ: "img/night-hand-zombie.png",
    ΔΔΔᐃⲆΔⲆ: "img/day-skin113.png",
    ⵠⵠⵠⲆⵠⲆⲆ: "img/night-skin113.png",
    ⵠΔᐃᐃⲆΔⵠ: "img/day-hand-skin113.png",
    ΔᐃⲆᐃΔᐃⲆ: "img/night-hand-skin113.png",
    ΔⵠΔⵠⵠⵠΔ: "img/day-skin0.png",
    ΔΔΔΔⵠⲆΔ: "img/night-skin0.png",
    ΔᐃᐃΔᐃΔⵠ: "img/day-skin1.png",
    ⵠΔⲆⵠⵠᐃⵠ: "img/night-skin1.png",
    ⵠᐃΔⵠΔⲆᐃ: "img/day-skin2.png",
    ⵠΔᐃⲆⵠᐃᐃ: "img/night-skin2.png",
    ⲆΔᐃⲆΔΔΔ: "img/day-skin3.png",
    ΔⵠⲆⵠⵠⵠΔ: "img/night-skin3.png",
    ᐃⵠⵠΔΔⵠⲆ: "img/day-skin4.png",
    ᐃⲆᐃΔⵠᐃᐃ: "img/night-skin4.png",
    ᐃⲆᐃΔⲆΔⲆ: "img/day-skin5.png",
    ΔᐃⲆⲆᐃⲆᐃ: "img/night-skin5.png",
    ⲆΔΔⲆⲆⲆΔ: "img/day-skin6.png",
    ΔⲆΔᐃᐃⲆᐃ: "img/night-skin6.png",
    ᐃⲆᐃⵠΔΔΔ: "img/day-skin7.png",
    ⵠⲆⲆᐃᐃⲆΔ: "img/night-skin7.png",
    ⲆΔⲆΔΔⵠⵠ: "img/day-skin8.png",
    ᐃⵠⵠΔⵠᐃⵠ: "img/night-skin8.png",
    ᐃΔΔΔΔᐃᐃ: "img/day-skin9.png",
    ⲆΔⵠΔΔⲆᐃ: "img/night-skin9.png",
    ΔⵠᐃΔⲆⵠⲆ: "img/day-skin10.png",
    ΔⲆⵠΔᐃⲆᐃ: "img/night-skin10.png",
    ⲆΔΔΔᐃᐃΔ: "img/day-skin11.png",
    ΔⲆⵠᐃⵠᐃⵠ: "img/night-skin11.png",
    ⵠΔⲆⵠⵠΔⲆ: "img/day-skin12.png",
    ⲆᐃⵠΔⵠΔⲆ: "img/night-skin12.png",
    ΔᐃⵠⵠⲆᐃⵠ: "img/day-skin13.png",
    ⲆⲆⲆᐃᐃⲆⵠ: "img/night-skin13.png",
    ⲆⲆΔᐃⵠⵠⵠ: "img/day-skin14.png",
    ⲆⵠᐃⲆΔⲆΔ: "img/night-skin14.png",
    ᐃᐃΔⲆⲆᐃᐃ: "img/day-skin15.png",
    ⲆⵠⵠⵠⲆⵠΔ: "img/night-skin15.png",
    ⲆΔⲆᐃⲆⵠⵠ: "img/day-skin16.png",
    ΔΔᐃⲆⲆΔΔ: "img/night-skin16.png",
    ⵠΔⵠΔᐃⲆⵠ: "img/day-skin17.png",
    ⵠⵠⲆΔⲆΔΔ: "img/night-skin17.png",
    ⵠᐃⵠⲆΔⲆⲆ: "img/day-skin18.png",
    ᐃⲆᐃⲆΔᐃⲆ: "img/night-skin18.png",
    ⵠⲆⵠΔⵠΔⵠ: "img/day-skin19.png",
    ΔΔᐃⵠᐃⲆΔ: "img/night-skin19.png",
    ⵠᐃⵠⲆᐃⲆⲆ: "img/day-skin20.png",
    ΔⵠⲆΔᐃΔᐃ: "img/night-skin20.png",
    ᐃⲆᐃⲆΔⲆᐃ: "img/day-skin21.png",
    ΔⲆᐃᐃᐃⲆΔ: "img/night-skin21.png",
    ᐃⵠⵠⲆⲆΔⲆ: "img/day-skin22.png",
    ⲆⲆΔᐃⵠΔᐃ: "img/night-skin22.png",
    ⵠΔᐃᐃᐃⵠΔ: "img/day-skin23.png",
    ⲆΔⵠⵠⲆᐃΔ: "img/night-skin23.png",
    ⵠⲆΔᐃⲆⵠⵠ: "img/day-skin24.png",
    ⵠᐃⵠΔⵠⲆⵠ: "img/night-skin24.png",
    ⲆΔΔᐃⲆⵠⵠ: "img/day-skin25.png",
    ᐃⵠᐃⵠⲆΔᐃ: "img/night-skin25.png",
    ⲆⲆᐃΔΔᐃΔ: "img/day-skin26.png",
    ⵠΔᐃᐃΔⵠⲆ: "img/night-skin26.png",
    ⵠᐃⲆΔⲆⵠⲆ: "img/day-skin27.png",
    ᐃᐃΔᐃⵠΔΔ: "img/night-skin27.png",
    ΔⲆᐃⵠᐃΔⲆ: "img/day-skin28.png",
    ΔΔᐃⲆⲆⲆᐃ: "img/night-skin28.png",
    ⲆⲆΔⲆⲆᐃᐃ: "img/day-skin29.png",
    ᐃᐃΔⲆⵠΔⵠ: "img/night-skin29.png",
    ⵠΔᐃᐃⵠⵠᐃ: "img/day-skin30.png",
    ᐃⲆⵠⵠΔⵠᐃ: "img/night-skin30.png",
    ⵠΔΔΔⵠΔᐃ: "img/day-skin31.png",
    ᐃⲆⵠᐃΔᐃⲆ: "img/night-skin31.png",
    ᐃᐃⵠᐃΔᐃΔ: "img/day-skin32.png",
    ᐃΔⵠᐃΔⵠⲆ: "img/night-skin32.png",
    ⵠⲆᐃᐃⲆⲆⵠ: "img/day-skin33.png",
    ΔⵠⵠⵠⵠⲆᐃ: "img/night-skin33.png",
    ᐃᐃⲆⲆΔΔΔ: "img/day-skin34.png",
    ΔⵠⵠᐃΔᐃⵠ: "img/night-skin34.png",
    ⵠⵠⵠⲆΔⵠΔ: "img/day-skin35.png",
    ΔΔΔⲆᐃⲆΔ: "img/night-skin35.png",
    ᐃΔⲆΔᐃΔⲆ: "img/day-skin36.png",
    ⵠⵠⵠᐃⲆⵠⲆ: "img/night-skin36.png",
    ᐃⲆⵠᐃΔᐃⵠ: "img/day-skin37.png",
    ⵠΔⵠⲆⲆΔΔ: "img/night-skin37.png",
    ⲆⵠⵠⵠⲆᐃΔ: "img/day-skin38.png",
    ⵠⵠⲆΔΔⲆΔ: "img/night-skin38.png",
    ⲆΔⵠᐃⵠΔⵠ: "img/day-skin39.png",
    ΔᐃΔΔⵠΔⲆ: "img/night-skin39.png",
    ⲆⲆᐃⵠⵠᐃΔ: "img/day-skin40.png",
    ⲆⵠⲆⲆᐃᐃⲆ: "img/night-skin40.png",
    ᐃΔⵠΔⵠΔⲆ: "img/day-skin41.png",
    ᐃᐃΔⵠⵠⵠⲆ: "img/night-skin41.png",
    ⲆⵠⲆΔⵠᐃᐃ: "img/day-skin42.png",
    ΔᐃΔⵠΔΔΔ: "img/night-skin42.png",
    ΔⲆⵠⲆᐃⲆᐃ: "img/day-skin43.png",
    ⵠᐃΔⲆⵠⵠΔ: "img/night-skin43.png",
    ⵠΔᐃⵠᐃⵠΔ: "img/day-skin44.png",
    ⲆᐃΔⵠᐃⲆⵠ: "img/night-skin44.png",
    ⵠᐃⵠΔᐃⲆⲆ: "img/day-skin45.png",
    ΔᐃⲆⲆΔᐃⲆ: "img/night-skin45.png",
    ᐃΔⵠΔⲆᐃᐃ: "img/day-skin46.png",
    ᐃⵠⵠΔΔⵠΔ: "img/night-skin46.png",
    ΔⵠΔⲆΔᐃⵠ: "img/day-skin47.png",
    ᐃⵠΔⲆᐃᐃⵠ: "img/night-skin47.png",
    ΔⲆⲆⵠᐃΔᐃ: "img/day-skin48.png",
    ᐃΔⲆⲆᐃᐃᐃ: "img/night-skin48.png",
    ⲆⵠⵠⲆᐃΔⵠ: "img/day-skin49.png",
    ᐃⵠⲆᐃΔⵠⲆ: "img/night-skin49.png",
    ΔᐃᐃΔⲆΔΔ: "img/day-skin50.png",
    ΔⵠΔᐃⲆᐃⵠ: "img/night-skin50.png",
    ⲆΔᐃⵠΔⲆᐃ: "img/day-skin51.png",
    ᐃⵠᐃΔⵠⵠⵠ: "img/night-skin51.png",
    ΔΔⲆᐃⲆⲆΔ: "img/day-skin52.png",
    ΔΔⲆⲆΔⵠⲆ: "img/night-skin52.png",
    ⲆⵠⲆⲆΔᐃⲆ: "img/day-skin53.png",
    ΔΔᐃⵠΔΔⲆ: "img/night-skin53.png",
    ⲆⵠⵠᐃⲆᐃⲆ: "img/day-skin54.png",
    ᐃᐃΔΔⵠΔΔ: "img/night-skin54.png",
    ⲆᐃⲆΔΔᐃⵠ: "img/day-skin55.png",
    ᐃⵠⲆΔΔⲆᐃ: "img/night-skin55.png",
    ⲆⵠΔⵠⵠΔᐃ: "img/day-skin56.png",
    ᐃᐃᐃⵠⵠΔΔ: "img/night-skin56.png",
    ΔⲆⲆᐃᐃⲆᐃ: "img/day-skin57.png",
    ΔⵠⵠΔᐃⲆΔ: "img/night-skin57.png",
    ΔⲆΔⵠᐃⲆⵠ: "img/day-skin58.png",
    ΔΔᐃⲆⵠᐃᐃ: "img/night-skin58.png",
    ᐃᐃᐃᐃⵠⵠⵠ: "img/day-skin59.png",
    ΔⵠᐃⲆⵠⲆⲆ: "img/night-skin59.png",
    ⲆⲆᐃΔΔΔᐃ: "img/day-skin60.png",
    ΔⲆΔⲆᐃΔᐃ: "img/night-skin60.png",
    ⲆΔΔΔⵠΔⵠ: "img/day-skin61.png",
    ΔⵠⲆⵠⵠΔⵠ: "img/night-skin61.png",
    ΔⵠⲆΔⵠⲆᐃ: "img/day-skin62.png",
    ΔⲆⵠⲆΔΔΔ: "img/night-skin62.png",
    ⵠΔⵠΔⲆⵠΔ: "img/day-skin63.png",
    ⵠᐃⵠᐃⵠⵠⵠ: "img/night-skin63.png",
    ΔⲆⲆⲆΔⵠⵠ: "img/day-skin64.png",
    ⲆⵠΔΔΔⲆⵠ: "img/night-skin64.png",
    ⵠᐃΔᐃᐃⲆⵠ: "img/day-skin65.png",
    ⵠΔΔⲆΔⵠᐃ: "img/night-skin65.png",
    ⵠⵠⵠⵠⲆⲆⵠ: "img/day-skin66.png",
    ⲆΔⵠⲆᐃΔΔ: "img/night-skin66.png",
    ⲆⲆⵠΔⵠⲆᐃ: "img/day-skin67.png",
    ⲆⲆⲆΔⵠΔᐃ: "img/night-skin67.png",
    ⵠⲆᐃΔᐃⲆᐃ: "img/day-skin68.png",
    ⵠΔⲆᐃⵠⲆⲆ: "img/night-skin68.png",
    ᐃⲆᐃΔⲆⵠΔ: "img/day-skin69.png",
    ΔΔⵠⲆⵠⲆⵠ: "img/night-skin69.png",
    ⲆⲆⵠⲆΔⲆᐃ: "img/day-skin70.png",
    ᐃᐃⵠⲆᐃⲆⲆ: "img/night-skin70.png",
    ΔᐃⲆⲆⵠΔⲆ: "img/day-skin71.png",
    ⲆᐃΔΔⵠᐃⲆ: "img/night-skin71.png",
    ⲆⲆⵠⲆⲆᐃΔ: "img/day-skin72.png",
    ᐃⵠᐃᐃᐃΔⵠ: "img/night-skin72.png",
    ΔⲆⲆⵠΔⵠᐃ: "img/day-skin73.png",
    ΔⲆⵠᐃⵠᐃᐃ: "img/night-skin73.png",
    ᐃᐃᐃⲆΔⲆⲆ: "img/day-skin74.png",
    ᐃᐃⵠⵠⲆΔᐃ: "img/night-skin74.png",
    ΔΔᐃΔᐃΔΔ: "img/day-skin75.png",
    ⲆⲆΔᐃᐃᐃⵠ: "img/night-skin75.png",
    ⵠⲆⵠΔΔⲆⵠ: "img/day-skin76.png",
    ⲆⲆⲆⵠⵠⵠⲆ: "img/night-skin76.png",
    ⵠⵠΔᐃᐃⵠΔ: "img/day-skin77.png",
    ΔᐃΔᐃⲆΔⲆ: "img/night-skin77.png",
    ΔᐃⲆⲆⵠᐃΔ: "img/day-skin78.png",
    ⵠᐃⵠΔΔΔᐃ: "img/night-skin78.png",
    ΔⲆⵠΔᐃᐃΔ: "img/day-skin79.png",
    ΔΔⲆⵠⵠⵠΔ: "img/night-skin79.png",
    ⵠⲆⲆⲆΔⵠⵠ: "img/day-skin80.png",
    ⲆᐃⵠⲆᐃΔΔ: "img/night-skin80.png",
    ΔⵠⵠⵠᐃⲆⵠ: "img/day-skin81.png",
    ΔⵠⵠᐃΔᐃᐃ: "img/night-skin81.png",
    ΔᐃᐃⲆᐃⲆⲆ: "img/day-skin82.png",
    ᐃⲆⵠⵠΔᐃᐃ: "img/night-skin82.png",
    ΔΔⲆΔΔΔΔ: "img/day-skin83.png",
    ᐃⲆⵠⵠⵠⵠᐃ: "img/night-skin83.png",
    ⵠΔΔᐃⲆᐃⵠ: "img/day-skin84.png",
    ⲆⲆⲆΔⲆΔᐃ: "img/night-skin84.png",
    ⲆⲆⵠᐃⵠⲆⵠ: "img/day-skin85.png",
    ΔΔᐃⲆⲆᐃΔ: "img/night-skin85.png",
    ΔⲆᐃⲆᐃⵠᐃ: "img/day-skin86.png",
    ΔⵠⲆⵠᐃⵠᐃ: "img/night-skin86.png",
    ᐃΔΔᐃᐃⲆΔ: "img/day-skin87.png",
    ΔᐃᐃⵠᐃᐃⲆ: "img/night-skin87.png",
    ⲆⲆⲆᐃᐃⵠⵠ: "img/day-skin88.png",
    ΔⵠΔΔⲆΔᐃ: "img/night-skin88.png",
    ⲆⲆⵠⲆⲆⵠᐃ: "img/day-skin89.png",
    ΔᐃΔΔᐃΔΔ: "img/night-skin89.png",
    ᐃⵠᐃΔᐃⲆⲆ: "img/day-skin90.png",
    ⵠⲆⵠΔⵠⵠⵠ: "img/night-skin90.png",
    ᐃᐃΔⵠⵠⵠᐃ: "img/day-skin91.png",
    ᐃⲆⲆⵠᐃⵠⲆ: "img/night-skin91.png",
    ⵠⲆΔΔⵠΔΔ: "img/day-skin92.png",
    ⲆⲆⵠᐃᐃᐃⲆ: "img/night-skin92.png",
    ΔᐃⲆⵠⵠⲆⵠ: "img/day-skin93.png",
    ⵠⲆⲆΔⲆⲆΔ: "img/night-skin93.png",
    ⲆᐃΔᐃᐃΔⵠ: "img/day-skin94.png",
    ⵠⲆᐃⵠⲆᐃⵠ: "img/night-skin94.png",
    ⵠΔᐃᐃⲆᐃⵠ: "img/day-skin95.png",
    ⲆⵠⲆⲆⵠⲆⲆ: "img/night-skin95.png",
    ⵠⵠⲆⵠⵠᐃⵠ: "img/day-skin96.png",
    ΔΔᐃⵠⲆᐃⵠ: "img/night-skin96.png",
    ᐃⵠⵠΔΔⲆⵠ: "img/day-skin97.png",
    ⲆⵠⵠΔⲆⲆⵠ: "img/night-skin97.png",
    ᐃΔΔⲆᐃⵠⲆ: "img/day-skin98.png",
    ⵠᐃⲆΔᐃⲆᐃ: "img/night-skin98.png",
    ΔⵠⲆⲆΔⵠⲆ: "img/day-skin99.png",
    ⲆΔⵠᐃᐃⵠⵠ: "img/night-skin99.png",
    ᐃΔⲆⲆΔⵠΔ: "img/day-skin100.png",
    ⲆⲆΔⲆⵠᐃΔ: "img/night-skin100.png",
    ⲆⵠⲆΔⵠᐃⵠ: "img/day-skin101.png",
    ⲆⵠΔᐃⲆᐃⵠ: "img/night-skin101.png",
    ΔⵠᐃⵠⲆᐃⵠ: "img/day-skin102.png",
    ⵠΔᐃⲆⲆᐃⵠ: "img/night-skin102.png",
    ΔⵠΔⲆⵠΔⵠ: "img/day-skin103.png",
    ᐃⲆⲆⵠΔᐃⲆ: "img/night-skin103.png",
    ΔΔⵠΔⵠᐃⲆ: "img/day-skin104.png",
    ⵠⵠᐃⲆⲆⲆᐃ: "img/night-skin104.png",
    ᐃⲆⵠⲆⲆᐃⵠ: "img/day-skin105.png",
    ΔⲆᐃⵠᐃΔΔ: "img/night-skin105.png",
    ΔⲆⵠⲆᐃΔⲆ: "img/day-skin106.png",
    ΔⲆᐃⲆΔⵠⲆ: "img/night-skin106.png",
    ⵠΔⲆΔⲆⲆⵠ: "img/day-skin107.png",
    ⲆⵠΔᐃⲆⵠⵠ: "img/night-skin107.png",
    ᐃᐃᐃΔⵠΔΔ: "img/day-skin108.png",
    ⵠᐃⵠⲆᐃᐃᐃ: "img/night-skin108.png",
    ᐃⲆⵠΔᐃΔᐃ: "img/day-skin109.png",
    ᐃᐃⵠⲆᐃΔⲆ: "img/night-skin109.png",
    ᐃᐃⵠΔⲆΔⲆ: "img/day-skin110.png",
    ⲆⲆΔΔⲆⵠΔ: "img/night-skin110.png",
    ⲆΔᐃᐃⵠⲆⵠ: "img/day-skin111.png",
    ⵠᐃⲆᐃⵠᐃⲆ: "img/night-skin111.png",
    ⵠⲆⵠⲆΔⲆΔ: "img/day-skin112.png",
    ⲆᐃᐃⵠΔΔⵠ: "img/night-skin112.png",
    ᐃΔⵠⵠⲆⲆᐃᐃⲆ: "img/day-skin113.png",
    ⲆⲆᐃⲆΔⵠⵠΔⵠ: "img/night-skin113.png",
    ᐃⵠⵠΔⲆᐃⲆ: "img/day-skin114.png",
    ⵠᐃⵠⵠᐃΔΔ: "img/night-skin114.png",
    ᐃΔᐃⵠΔΔᐃ: "img/day-skin115.png",
    ᐃⵠΔⲆΔΔΔ: "img/night-skin115.png",
    ᐃᐃⵠΔⲆᐃᐃ: "img/day-skin116.png",
    ⲆⲆⲆⵠⲆⵠⲆ: "img/night-skin116.png",
    ΔⵠⵠⵠΔΔⵠ: "img/day-skin117.png",
    ΔⵠᐃᐃⵠΔⵠ: "img/night-skin117.png",
    ᐃⲆᐃⲆⲆΔᐃ: "img/day-skin118.png",
    ⲆΔΔⲆᐃⲆⲆ: "img/night-skin118.png",
    ΔⵠⲆᐃΔⵠⲆ: "img/day-skin119.png",
    ⲆᐃⵠΔⲆⲆⵠ: "img/night-skin119.png",
    ⲆΔⵠⵠⲆᐃⵠ: "img/day-skin120.png",
    ΔᐃᐃᐃΔⵠⲆ: "img/night-skin120.png",
    ᐃⲆⲆΔⵠᐃⵠ: "img/day-skin121.png",
    ⲆΔᐃᐃⵠΔⲆ: "img/night-skin121.png",
    ΔⵠᐃΔⵠⵠΔ: "img/day-skin122.png",
    ⲆⵠⲆⵠᐃⲆⵠ: "img/night-skin122.png",
    ΔΔΔΔⲆⵠⲆ: "img/day-skin123.png",
    ΔᐃΔᐃΔⵠΔ: "img/night-skin123.png",
    ⲆⲆΔⲆⲆⵠⵠ: "img/day-skin124.png",
    ᐃᐃΔⲆⲆΔⵠ: "img/night-skin124.png",
    ᐃᐃⵠⵠΔΔⲆ: "img/day-skin125.png",
    ⵠᐃᐃᐃⵠⵠΔ: "img/night-skin125.png",
    ᐃΔⵠⲆΔᐃᐃ: "img/day-skin126.png",
    ⲆⲆΔⵠⲆΔⵠ: "img/night-skin126.png",
    ⲆᐃΔΔⲆⵠᐃ: "img/day-skin127.png",
    Ⲇᐃⵠⵠⵠᐃᐃ: "img/night-skin127.png",
    ⲆⵠᐃΔᐃᐃⲆ: "img/day-skin128.png",
    ⲆᐃⵠΔⵠΔⵠ: "img/night-skin128.png",
    ᐃⲆᐃⲆⲆᐃΔ: "img/day-skin129.png",
    ΔⵠⵠⵠⵠⲆⵠ: "img/night-skin129.png",
    ⲆΔⵠΔᐃΔΔ: "img/day-skin130-1.png",
    ᐃᐃⵠΔⵠⲆΔ: "img/night-skin130-1.png",
    ᐃⲆΔᐃⵠⲆᐃ: "img/day-skin131.png",
    ΔΔΔΔⵠⵠⲆ: "img/night-skin131.png",
    ⵠΔⵠⵠⲆᐃⵠ: "img/day-skin132.png",
    ⵠⵠᐃⵠᐃΔⲆ: "img/night-skin132.png",
    ᐃⲆᐃⵠᐃΔᐃ: "img/day-skin133.png",
    ΔⲆᐃᐃⲆⵠⵠ: "img/night-skin133.png",
    ⵠᐃⲆⵠⵠⵠⲆ: "img/day-skin134.png",
    ΔⵠⲆⵠⲆⵠᐃ: "img/night-skin134.png",
    ᐃⵠⲆᐃᐃΔΔ: "img/day-skin135.png",
    ΔⵠⵠᐃΔⲆⵠ: "img/night-skin135.png",
    ⵠⵠΔᐃᐃⲆⲆ: "img/day-skin136.png",
    ΔΔᐃⵠΔⵠⲆ: "img/night-skin136.png",
    ΔΔⲆⵠᐃⵠΔ: "img/day-skin137.png",
    ⵠⲆΔⵠⵠⵠΔ: "img/night-skin137.png",
    ⵠΔⵠΔⵠΔⲆ: "img/day-skin138.png",
    ΔⲆⵠΔⲆⲆΔ: "img/night-skin138.png",
    ᐃΔⲆⵠΔᐃⲆ: "img/day-skin139.png",
    ⲆⵠᐃⲆΔΔⵠ: "img/night-skin139.png",
    ⵠⵠᐃΔⲆⵠΔ: "img/day-skin140.png",
    ᐃᐃⲆᐃΔᐃⲆ: "img/night-skin140.png",
    ⵠⵠΔᐃΔΔᐃ: "img/day-skin141.png",
    ⵠᐃΔΔⲆᐃΔ: "img/night-skin141.png",
    ⵠΔᐃᐃΔⲆΔ: "img/day-skin142.png",
    ᐃΔᐃⵠΔΔⵠ: "img/night-skin142.png",
    ⲆΔᐃⲆⵠΔⲆ: "img/day-skin143.png",
    ⵠⵠⵠⲆΔⲆⵠ: "img/night-skin143.png",
    ⲆᐃΔᐃΔᐃᐃ: "img/day-skin144.png",
    ΔΔⵠᐃΔⲆⲆ: "img/night-skin144.png",
    ᐃⵠΔᐃⵠᐃⲆ: "img/day-skin145.png",
    ᐃᐃΔΔⵠⲆⲆ: "img/night-skin145.png",
    ΔⵠᐃΔᐃᐃΔ: "img/day-skin146.png",
    ᐃⲆⵠⲆᐃΔⲆ: "img/night-skin146.png",
    ⲆⵠⵠⲆⵠⵠⲆ: "img/day-skin147.png",
    ⵠᐃⵠⵠⵠᐃⵠ: "img/night-skin147.png",
    ⵠⲆΔᐃⵠΔⲆ: "img/day-skin148.png",
    ⵠΔᐃⲆⲆΔᐃ: "img/night-skin148.png",
    ⵠⲆⵠΔⲆⵠⵠ: "img/day-skin149.png",
    ⵠΔⵠΔⵠⲆΔ: "img/night-skin149.png",
    ⲆⲆⲆⵠᐃⲆΔ: "img/day-skin150.png",
    ΔⲆⲆⲆᐃⵠⵠ: "img/night-skin150.png",
    ⵠᐃⲆΔⵠᐃⵠ: "img/day-skin151.png",
    Δᐃᐃⵠᐃᐃᐃ: "img/night-skin151.png",
    ⲆΔⲆΔⵠᐃᐃ: "img/day-skin152.png",
    ⲆΔⵠᐃᐃΔΔ: "img/night-skin152.png",
    ΔⲆᐃⵠᐃΔᐃ: "img/day-skin153.png",
    ⵠΔΔΔⲆΔΔ: "img/night-skin153.png",
    ᐃᐃᐃᐃΔΔⵠ: "img/day-skin154.png",
    ΔⵠΔⲆΔⵠΔ: "img/night-skin154.png",
    ⲆᐃᐃⲆΔᐃΔ: "img/day-skin155.png",
    ⲆⵠⲆΔⵠΔⵠ: "img/night-skin155.png",
    ⵠⲆⵠᐃⲆⲆΔ: "img/day-skin156.png",
    ⵠΔⵠⵠΔᐃⵠ: "img/night-skin156.png",
    ΔᐃⲆⲆⲆⵠⲆ: "img/day-skin157.png",
    ΔΔΔⲆΔⵠⵠ: "img/night-skin157.png",
    ᐃⲆⲆⵠⵠⲆΔ: "img/day-skin158.png",
    ΔⲆⲆⵠⲆⲆⲆ: "img/night-skin158.png",
    ⲆⲆⲆⲆΔᐃΔ: "img/day-skin159.png",
    ΔⲆᐃΔⵠⵠᐃ: "img/night-skin159.png",
    ᐃⲆⲆⵠΔΔⵠ: "img/day-skin160.png",
    ⵠᐃΔⵠⵠⲆⵠ: "img/night-skin160.png",
    ᐃΔᐃΔᐃᐃⲆ: "img/day-skin161.png",
    ΔⵠⵠᐃⲆⲆΔ: "img/night-skin161.png",
    ⲆᐃᐃⵠⲆΔᐃ: "img/day-skin162.png",
    ⵠΔⲆⲆⲆΔᐃ: "img/night-skin162.png",
    ⲆⲆⲆΔⲆᐃⲆ: "img/day-skin163.png",
    ⵠᐃΔⲆᐃΔΔ: "img/night-skin163.png",
    ᐃᐃⲆΔⲆᐃᐃ: "img/day-skin164.png",
    ΔⲆΔΔⵠᐃⵠ: "img/night-skin164.png",
    ⲆΔᐃΔΔΔⵠ: "img/day-skin165.png",
    ⵠΔᐃⵠΔΔⲆ: "img/night-skin165.png",
    ΔⲆᐃᐃⲆᐃⵠ: "img/day-skin166.png",
    ᐃⲆᐃΔᐃΔⵠ: "img/night-skin166.png",
    ΔⲆⵠⲆⲆⵠᐃ: "img/day-skin167.png",
    ᐃΔⲆⲆⲆᐃⲆ: "img/night-skin167.png",
    ΔⲆⲆⲆⲆᐃⵠ: "img/day-skin168.png",
    ⲆⵠⲆⲆΔᐃⵠ: "img/night-skin168.png",
    ⵠᐃᐃⵠⲆⵠⲆ: "img/day-skin169.png",
    ⲆᐃⲆⵠᐃΔΔ: "img/night-skin169.png",
    ⲆⵠᐃⵠⲆⵠΔ: "img/day-skin170.png",
    ΔⲆⵠⲆⲆⲆⵠ: "img/night-skin170.png",
    ⲆᐃⲆΔⵠΔΔ: "img/day-skin171.png",
    ΔⵠⲆⲆⲆⵠⵠ: "img/night-skin171.png",
    ᐃⵠᐃΔᐃⲆⵠ: "img/day-skin172.png",
    Δᐃᐃⵠᐃⵠᐃ: "img/night-skin172.png",
    ⲆⵠⲆᐃⵠⲆᐃ: "img/day-skin173.png",
    ⵠΔᐃⲆΔᐃⵠ: "img/night-skin173.png",
    ΔⲆⵠⵠᐃⲆⲆ: "img/day-skin174.png",
    ᐃⵠᐃᐃⵠᐃⵠ: "img/night-skin174.png",
    ΔᐃⲆΔⲆⲆᐃ: "img/day-skin175.png",
    ⲆᐃᐃᐃⵠᐃΔ: "img/night-skin175.png",
    ⲆΔΔΔⵠΔⲆ: "img/day-skin176.png",
    ⵠΔΔⵠΔⲆΔ: "img/night-skin176.png",
    ⵠᐃΔΔⵠⵠᐃ: "img/day-skin177.png",
    ⵠΔΔΔⵠⵠⲆ: "img/night-skin177.png",
    ᐃΔΔⲆΔᐃⵠ: "img/day-skin178.png",
    ᐃⲆⲆⵠⲆᐃⲆ: "img/night-skin178.png",
    ᐃΔⵠΔⵠⵠΔ: "img/day-skin179.png",
    ⵠΔⵠⲆⵠᐃⲆ: "img/night-skin179.png",
    ΔⲆΔⵠᐃΔᐃ: "img/day-skin180.png",
    ΔᐃⲆⵠΔΔⵠ: "img/night-skin180.png",
    ⵠⲆΔⵠΔᐃΔ: "img/day-skin181.png",
    ΔΔΔⲆⵠⲆΔ: "img/night-skin181.png",
    ⲆΔΔⵠⲆⵠⲆ: "img/day-skin182.png",
    ᐃⲆᐃΔⵠⲆⵠ: "img/night-skin182.png",
    ⲆᐃΔⵠᐃⵠΔ: "img/day-skin183.png",
    ⲆⵠⵠⲆⲆⵠᐃ: "img/night-skin183.png",
    ⲆᐃᐃΔⲆⲆᐃ: "img/day-skin184.png",
    ΔⵠⲆⲆⵠᐃᐃ: "img/night-skin184.png",
    ⵠΔΔⵠⲆⵠΔ: "img/day-skin185.png",
    ᐃⲆᐃΔΔⵠⲆ: "img/night-skin185.png",
    ⲆⲆΔᐃⵠᐃⵠ: "img/day-skin186.png",
    ᐃⵠⵠⲆⵠΔⲆ: "img/night-skin186.png",
    ⵠⲆΔⲆᐃⲆΔ: "img/day-skin187.png",
    ⲆΔⵠᐃⵠⲆⵠ: "img/night-skin187.png",
    ᐃᐃⵠᐃΔΔᐃ: "img/day-skin188.png",
    ΔⵠⵠᐃⲆΔⵠ: "img/night-skin188.png",
    ᐃΔⲆⲆᐃⲆᐃ: "img/day-skin189.png",
    ⲆΔᐃᐃⵠⲆⲆ: "img/night-skin189.png",
    ΔΔⵠⵠⲆⵠᐃ: "img/day-skin190.png",
    ΔⲆΔΔΔΔᐃ: "img/night-skin190.png",
    ᐃΔᐃⲆᐃΔΔ: "img/day-skin191.png",
    ⲆⲆᐃⲆΔΔᐃ: "img/night-skin191.png",
    ⲆᐃᐃᐃⲆⲆⵠ: "img/day-skin192.png",
    ΔⲆΔⲆⲆⵠⵠ: "img/night-skin192.png",
    ᐃⲆⲆⲆⵠⲆⵠ: "img/day-skin193.png",
    ᐃᐃⲆⲆᐃⵠⲆ: "img/night-skin193.png",
    ΔΔⲆⵠⵠⵠⲆ: "img/day-skin194.png",
    ⵠᐃⲆΔᐃΔΔ: "img/night-skin194.png",
    ⵠᐃᐃⲆᐃᐃⵠ: "img/day-skin195.png",
    ΔΔᐃⲆΔⵠᐃ: "img/night-skin195.png",
    ΔᐃⲆⲆᐃᐃᐃ: "img/day-skin196.png",
    ⲆᐃᐃⵠᐃᐃΔ: "img/night-skin196.png",
    ⵠᐃⵠⵠᐃᐃⵠ: "img/day-skin197.png",
    ᐃⵠⲆⲆᐃⵠΔ: "img/night-skin197.png",
    ⵠᐃⵠⲆΔᐃⲆ: "img/day-skin198.png",
    ΔᐃΔᐃⲆⵠⵠ: "img/night-skin198.png",
    ᐃⲆⲆΔᐃⲆΔ: "img/day-skin199.png",
    ΔⵠΔᐃᐃⵠᐃ: "img/night-skin199.png",
    ⲆⵠⵠΔⲆᐃᐃ: "img/day-skin200.png",
    ΔⲆⵠᐃⵠⵠⵠ: "img/night-skin200.png",
    ᐃΔⲆⲆⲆᐃᐃ: "img/day-skin201.png",
    ΔⲆⵠΔΔⵠⵠ: "img/night-skin201.png",
    ⵠⵠⲆⲆⵠΔΔ: "img/day-skin202.png",
    ΔⵠᐃⲆΔᐃΔ: "img/night-skin202.png",
    ⲆΔᐃΔΔⲆⲆ: "img/day-skin203.png",
    ΔᐃⲆⵠⲆⵠⲆ: "img/night-skin203.png",
    ΔᐃΔᐃΔΔⵠ: "img/day-skin204.png",
    ΔⵠⲆⵠΔⲆΔ: "img/night-skin204.png",
    ⵠᐃΔⲆⲆᐃᐃ: "img/day-skin205.png",
    ⵠᐃⲆᐃᐃⵠΔ: "img/night-skin205.png",
    ⵠᐃᐃᐃᐃΔᐃ: "img/day-skin206.png",
    ⲆⵠᐃⲆⲆⵠⵠ: "img/night-skin206.png",
    ⲆᐃΔⵠⵠⵠⲆ: "img/day-skin207.png",
    ᐃⵠΔⲆΔΔᐃ: "img/night-skin207.png",
    ⵠΔⲆΔΔΔᐃ: "img/day-skin208.png",
    ᐃᐃᐃᐃᐃᐃΔ: "img/night-skin208.png",
    ⵠΔΔⲆⵠⵠᐃ: "img/day-skin209.png",
    ⲆⲆᐃⲆΔⵠⲆ: "img/night-skin209.png",
    ᐃⲆⲆⲆⲆᐃΔ: "img/day-skin210.png",
    ᐃⵠⵠᐃⵠΔⲆ: "img/night-skin210.png",
    ⵠΔΔΔΔⲆᐃ: "img/day-skin211.png",
    ᐃᐃⲆⲆᐃⲆⵠ: "img/night-skin211.png",
    ᐃⵠΔⵠΔⵠⲆ: "img/day-skin212.png",
    ΔΔⵠⲆΔᐃΔ: "img/night-skin212.png",
    ΔΔᐃᐃΔⵠᐃ: "img/day-skin213.png",
    ⲆⵠΔΔⲆⲆΔ: "img/night-skin213.png",
    ᐃᐃⵠⲆΔΔⵠ: "img/day-skin214.png",
    ΔⵠΔᐃᐃⲆⵠ: "img/night-skin214.png",
    ΔⲆⲆⲆΔᐃᐃ: "img/day-hand-skin0.png",
    ⲆⵠⲆΔⲆΔⲆ: "img/night-hand-skin0.png",
    ΔⲆⲆⵠⲆⲆΔ: "img/day-hand-skin1.png",
    ⵠᐃᐃᐃⵠⲆΔ: "img/night-hand-skin1.png",
    ⲆⵠⲆⵠᐃᐃΔ: "img/day-hand-skin2.png",
    ᐃⵠΔⵠⲆⵠⲆ: "img/night-hand-skin2.png",
    ΔⵠⲆᐃⵠᐃᐃ: "img/day-hand-skin3.png",
    ΔⲆᐃⲆΔᐃΔ: "img/night-hand-skin3.png",
    ⲆⵠΔΔⲆΔⵠ: "img/day-hand-skin4.png",
    ᐃΔᐃⵠᐃⲆⲆ: "img/night-hand-skin4.png",
    ᐃⲆᐃⲆⵠᐃᐃ: "img/day-hand-skin5.png",
    ΔⵠᐃⵠⵠΔⵠ: "img/night-hand-skin5.png",
    ΔΔⲆⵠⲆⵠᐃ: "img/day-hand-skin6.png",
    ᐃᐃⲆⲆᐃⵠⲆⵠΔ: "img/night-hand-skin6.png",
    ⲆⵠⵠⲆᐃΔΔ: "img/day-hand-skin6.png",
    ᐃⲆᐃⵠΔⵠᐃ: "img/night-hand-skin6.png",
    ⵠΔⲆⲆᐃⲆᐃ: "img/day-hand-skin8.png",
    ΔⲆᐃᐃᐃⵠΔ: "img/night-hand-skin8.png",
    ⲆⲆᐃᐃⵠⲆⵠ: "img/day-hand-skin9.png",
    ⲆΔᐃΔⵠⲆⵠ: "img/night-hand-skin9.png",
    ⵠΔΔΔᐃᐃⲆ: "img/day-hand-skin10.png",
    ⵠⵠΔⲆᐃᐃᐃ: "img/night-hand-skin10.png",
    ΔⵠᐃⲆΔⵠΔ: "img/day-hand-skin11.png",
    ΔⲆᐃᐃⵠⵠⵠ: "img/night-hand-skin11.png",
    ⲆΔⵠⲆⵠᐃⲆ: "img/day-hand-skin12.png",
    ᐃΔᐃⵠⲆⲆⲆ: "img/night-hand-skin12.png",
    ⵠΔΔⵠΔΔΔ: "img/day-hand-skin13.png",
    ⲆΔᐃⵠᐃⲆⵠ: "img/night-hand-skin13.png",
    ⵠⲆΔⲆⲆᐃⲆ: "img/day-hand-skin14.png",
    ⵠⲆⵠⵠΔⵠΔ: "img/night-hand-skin14.png",
    ΔᐃⵠⵠⵠⲆⲆ: "img/day-hand-skin15.png",
    ᐃⵠΔⲆⵠⲆⲆ: "img/night-hand-skin15.png",
    ΔᐃⲆⵠⲆⲆⵠ: "img/day-hand-skin16.png",
    ⲆΔⵠΔΔⵠΔ: "img/night-hand-skin16.png",
    ⵠᐃΔⵠΔᐃⵠ: "img/day-hand-skin17.png",
    ΔᐃⲆⲆΔΔⵠ: "img/night-hand-skin17.png",
    ΔᐃᐃΔⲆⲆᐃ: "img/day-hand-skin18.png",
    ΔᐃᐃᐃΔⲆⵠ: "img/night-hand-skin18.png",
    ᐃⵠⲆᐃⲆΔⲆ: "img/day-hand-skin19.png",
    Ⲇⵠⵠᐃⵠᐃⵠ: "img/night-hand-skin19.png",
    ⲆΔΔⲆⲆⲆⵠ: "img/day-hand-skin20.png",
    ΔΔᐃᐃΔᐃⲆ: "img/night-hand-skin20.png",
    ⵠⲆⵠⲆΔᐃΔ: "img/day-hand-skin21.png",
    ΔᐃΔⵠⲆΔᐃ: "img/night-hand-skin21.png",
    ⵠⵠᐃⵠΔⵠⵠ: "img/day-hand-skin22.png",
    ⲆⵠᐃΔΔΔⵠ: "img/night-hand-skin22.png",
    ⲆⵠⵠⵠᐃⲆⵠ: "img/day-hand-skin23.png",
    ⲆᐃⵠΔΔⵠᐃ: "img/night-hand-skin23.png",
    ᐃⲆΔⵠⲆΔᐃ: "img/day-hand-skin24.png",
    ΔΔⲆΔⵠᐃᐃ: "img/night-hand-skin24.png",
    ᐃⲆⵠᐃᐃΔⵠ: "img/day-hand-skin25.png",
    ⲆᐃⵠⵠᐃΔⲆ: "img/night-hand-skin25.png",
    ᐃⲆⲆᐃΔⵠⲆ: "img/day-hand-skin26.png",
    ⵠᐃᐃᐃⲆᐃΔ: "img/night-hand-skin26.png",
    ⵠⵠᐃⲆⲆᐃᐃ: "img/day-hand-skin27.png",
    ⲆᐃΔⲆⵠⲆⲆ: "img/night-hand-skin27.png",
    ⲆⵠᐃⲆⵠᐃⲆ: "img/day-hand-skin28.png",
    ΔⵠᐃⵠᐃΔΔ: "img/night-hand-skin28.png",
    ΔⵠⵠⲆᐃⵠⲆ: "img/day-hand-skin29.png",
    ᐃⵠΔᐃⵠΔⵠ: "img/night-hand-skin29.png",
    ΔⵠᐃΔⲆⵠⵠ: "img/day-hand-skin30.png",
    ⲆⵠⲆⵠⵠΔΔ: "img/night-hand-skin30.png",
    ᐃⵠᐃⲆΔΔᐃ: "img/day-hand-skin31.png",
    ⲆⵠⵠⲆⵠΔΔ: "img/night-hand-skin31.png",
    ⵠⵠⵠΔΔⵠⵠ: "img/day-hand-skin32.png",
    ⲆΔᐃⵠⲆⵠⵠ: "img/night-hand-skin32.png",
    ᐃᐃᐃⲆⲆⵠᐃ: "img/day-hand-skin33.png",
    ⲆΔᐃΔⲆᐃΔ: "img/night-hand-skin33.png",
    ⲆⲆᐃⵠᐃΔΔ: "img/day-hand-skin34.png",
    ᐃΔⵠⵠⲆⲆᐃ: "img/night-hand-skin34.png",
    ΔΔⲆⵠΔⲆⲆ: "img/day-hand-skin35.png",
    ⵠΔⵠⵠΔᐃΔ: "img/night-hand-skin35.png",
    ΔⵠᐃⵠⵠⲆⵠ: "img/day-hand-skin36.png",
    ΔⲆᐃⲆⵠΔⵠ: "img/night-hand-skin36.png",
    ᐃᐃⲆᐃᐃΔⵠ: "img/day-hand-skin37.png",
    ᐃΔΔⵠⵠΔⲆ: "img/night-hand-skin37.png",
    ᐃᐃⲆⵠᐃⲆΔ: "img/day-hand-skin38.png",
    ⵠΔᐃᐃⵠΔⲆ: "img/night-hand-skin38.png",
    ⵠⵠΔⵠⵠᐃⵠ: "img/day-hand-skin39.png",
    ⵠᐃⵠⲆᐃⲆⵠ: "img/night-hand-skin39.png",
    ΔⵠⲆᐃⲆΔΔ: "img/day-hand-skin40.png",
    ΔΔⵠⵠᐃⲆΔ: "img/night-hand-skin40.png",
    ᐃΔⵠⲆⲆⵠΔ: "img/day-hand-skin41.png",
    ⵠⵠⵠⲆᐃⵠΔ: "img/night-hand-skin41.png",
    ⲆᐃᐃΔⵠⵠΔ: "img/day-hand-skin42.png",
    ⵠⵠⵠⵠᐃⵠⲆ: "img/night-hand-skin42.png",
    ΔΔᐃΔⲆΔΔ: "img/day-hand-skin43.png",
    ⲆⲆⲆΔⲆΔΔ: "img/night-hand-skin43.png",
    ΔᐃⵠⲆⵠⵠΔ: "img/day-hand-skin16.png",
    ᐃΔᐃᐃⲆⵠⵠ: "img/night-hand-skin16.png",
    ⵠᐃⵠⲆⲆⵠⲆ: "img/day-hand-skin45.png",
    ⲆΔⲆΔⲆⵠΔ: "img/night-hand-skin45.png",
    ⵠⵠⲆΔΔⵠⵠ: "img/day-hand-skin46.png",
    ᐃΔⵠᐃᐃΔⲆ: "img/night-hand-skin46.png",
    ⵠⵠⵠⲆΔⵠⲆ: "img/day-hand-skin47.png",
    Δⵠⵠᐃⵠᐃⵠ: "img/night-hand-skin47.png",
    ⲆΔⲆⵠΔΔⵠ: "img/day-hand-skin48.png",
    ΔⲆⲆⲆΔⵠᐃ: "img/night-hand-skin48.png",
    ᐃⵠⲆᐃᐃΔᐃ: "img/day-hand-skin49.png",
    Ⲇᐃⵠⵠᐃⵠᐃ: "img/night-hand-skin49.png",
    ΔⲆΔᐃⵠᐃⵠ: "img/day-hand-skin49.png",
    ᐃᐃⲆᐃΔΔΔ: "img/night-hand-skin49.png",
    ᐃᐃᐃⵠⲆⲆⲆ: "img/day-hand-skin51.png",
    ᐃⵠΔⵠᐃⲆᐃ: "img/night-hand-skin51.png",
    ⲆⲆⲆⲆᐃΔᐃ: "img/day-hand-skin52.png",
    ᐃⲆⵠⲆΔΔᐃ: "img/night-hand-skin52.png",
    ᐃⵠΔⲆΔⲆΔ: "img/day-hand-skin53.png",
    ΔΔⲆΔⵠᐃΔ: "img/night-hand-skin53.png",
    ΔⲆⵠⲆⵠΔᐃ: "img/day-hand-skin53.png",
    ⲆⲆⲆⵠΔⵠᐃ: "img/night-hand-skin53.png",
    ⵠⵠᐃⲆΔᐃⵠ: "img/day-hand-skin55.png",
    ᐃᐃᐃⲆⵠΔᐃ: "img/night-hand-skin55.png",
    ⲆⵠⲆᐃᐃⵠΔ: "img/day-hand-skin56.png",
    ΔΔΔΔΔⵠᐃ: "img/night-hand-skin56.png",
    ⵠᐃⲆⵠΔΔⵠ: "img/day-hand-skin57.png",
    ᐃⲆⵠⵠⵠⵠⲆ: "img/night-hand-skin57.png",
    ⵠⲆᐃⲆⵠΔᐃ: "img/day-hand-skin58.png",
    ΔΔⵠⵠⵠᐃⵠ: "img/night-hand-skin58.png",
    ΔΔΔⵠⲆⵠΔ: "img/day-hand-skin59.png",
    ⲆᐃᐃᐃΔΔΔ: "img/night-hand-skin59.png",
    ᐃⵠⵠΔⲆᐃᐃ: "img/day-hand-skin61.png",
    ΔΔΔΔΔᐃⲆ: "img/night-hand-skin61.png",
    ⵠᐃᐃⲆᐃⵠᐃ: "img/day-hand-skin61.png",
    ΔⵠⵠΔᐃⵠⲆ: "img/night-hand-skin61.png",
    ⵠⲆᐃⵠⵠᐃΔ: "img/day-hand-skin62.png",
    ᐃΔⵠΔⲆᐃΔ: "img/night-hand-skin62.png",
    ⵠⵠⵠⵠᐃᐃΔ: "img/day-hand-skin63.png",
    ᐃⲆⵠᐃΔΔⵠ: "img/night-hand-skin63.png",
    ⲆΔΔⲆΔᐃⵠ: "img/day-hand-skin64.png",
    ΔⲆⲆⵠΔᐃⲆ: "img/night-hand-skin64.png",
    ⲆᐃⲆΔⵠΔⵠ: "img/day-hand-skin65.png",
    ΔΔᐃⲆΔᐃⲆ: "img/night-hand-skin65.png",
    ΔⵠᐃᐃᐃⲆⵠ: "img/day-hand-skin66.png",
    ᐃΔΔΔᐃⲆⵠ: "img/night-hand-skin66.png",
    ᐃⵠΔⵠⵠᐃᐃ: "img/day-hand-skin67.png",
    ⲆΔΔΔΔᐃΔ: "img/night-hand-skin67.png",
    ᐃⲆⵠΔΔΔⲆ: "img/day-hand-skin68.png",
    ⵠⲆⵠᐃΔⵠⲆ: "img/night-hand-skin68.png",
    ΔⵠⵠⲆᐃᐃⵠ: "img/day-hand-skin69.png",
    ⵠΔⵠⵠⲆⵠⵠ: "img/night-hand-skin69.png",
    Ⲇⵠⵠⵠᐃᐃⵠ: "img/day-hand-skin70.png",
    ᐃⵠⲆⲆⲆΔⲆ: "img/night-hand-skin70.png",
    ΔΔⲆⵠⲆⵠⵠ: "img/day-hand-skin71.png",
    ᐃⵠⲆⲆⲆᐃⲆ: "img/night-hand-skin71.png",
    ⵠⵠᐃⵠⵠᐃⲆ: "img/day-hand-skin72.png",
    ⲆᐃΔΔΔᐃⵠ: "img/night-hand-skin72.png",
    ⲆⲆⲆⵠΔΔΔ: "img/day-hand-skin73.png",
    ΔΔΔⲆⲆⲆΔ: "img/night-hand-skin73.png",
    ⲆⵠΔⲆⵠΔᐃ: "img/day-hand-skin74.png",
    ΔⵠᐃⵠⲆΔⲆ: "img/night-hand-skin74.png",
    ⲆᐃΔⲆⵠⵠᐃ: "img/day-hand-skin75.png",
    ΔᐃΔᐃⲆⵠᐃ: "img/night-hand-skin75.png",
    ᐃⲆⲆⵠⲆⵠΔ: "img/day-hand-skin76.png",
    ΔᐃⵠⵠΔΔⵠ: "img/night-hand-skin76.png",
    ⵠⲆⲆᐃΔⵠⵠ: "img/day-hand-skin77.png",
    ᐃⵠᐃⲆⲆᐃⲆ: "img/night-hand-skin77.png",
    ⲆⲆⲆᐃᐃᐃᐃ: "img/day-hand-skin78.png",
    ᐃⵠⲆᐃΔⵠᐃ: "img/night-hand-skin78.png",
    ⲆΔΔᐃᐃΔⲆ: "img/day-hand-skin79.png",
    ΔⲆⲆⵠΔⵠⲆ: "img/night-hand-skin79.png",
    Ⲇᐃⵠᐃᐃⵠⵠ: "img/day-hand-skin80.png",
    ⵠΔᐃΔᐃⵠΔ: "img/night-hand-skin80.png",
    ⲆⵠⲆⵠⲆΔΔ: "img/day-hand-skin81.png",
    ΔⵠΔⲆⲆΔⵠ: "img/night-hand-skin81.png",
    ⲆΔΔⵠⵠΔⵠ: "img/day-hand-skin82.png",
    ⵠⲆⵠⵠⲆⵠᐃ: "img/night-hand-skin82.png",
    ᐃⵠⵠⲆΔᐃⵠ: "img/day-hand-skin83.png",
    ⲆᐃΔⲆⵠⵠⵠ: "img/night-hand-skin83.png",
    ⵠⲆⲆᐃᐃᐃΔ: "img/day-hand-skin84.png",
    ⵠⲆΔⲆΔΔⵠ: "img/night-hand-skin84.png",
    ΔⲆⲆᐃᐃⵠⵠ: "img/day-hand-skin85.png",
    ⵠΔⲆᐃⵠΔΔ: "img/night-hand-skin85.png",
    ⵠⲆᐃΔᐃΔⵠ: "img/day-hand-skin86.png",
    ⲆⵠⵠΔᐃᐃⲆ: "img/night-hand-skin86.png",
    ⵠᐃΔΔⲆΔⵠ: "img/day-hand-skin87.png",
    ⵠᐃᐃⲆΔⲆⲆ: "img/night-hand-skin87.png",
    ᐃⲆΔⲆᐃⵠᐃ: "img/day-hand-skin88.png",
    ΔⵠⵠᐃⲆᐃⲆ: "img/night-hand-skin88.png",
    ΔᐃᐃⲆᐃⵠΔ: "img/day-hand-skin89.png",
    ⲆⲆᐃΔᐃⵠΔ: "img/night-hand-skin89.png",
    ⵠⲆⲆᐃΔⲆΔ: "img/day-hand-skin90.png",
    ΔⲆⵠⲆⵠΔⵠ: "img/night-hand-skin90.png",
    ΔΔΔⲆⲆᐃᐃ: "img/day-hand-skin91.png",
    ΔⵠΔⲆⵠΔΔ: "img/night-hand-skin91.png",
    ⵠΔⵠⲆⲆΔⵠ: "img/day-hand-skin92.png",
    ⲆⲆΔΔᐃᐃᐃ: "img/night-hand-skin92.png",
    ᐃΔΔⲆΔⲆⲆ: "img/day-hand-skin93.png",
    ΔⵠⲆⵠⵠⲆᐃ: "img/night-hand-skin93.png",
    ⵠⲆᐃⲆⲆⵠΔ: "img/day-hand-skin94.png",
    ΔᐃΔⵠⲆΔⵠ: "img/night-hand-skin94.png",
    ΔᐃⵠⲆⵠᐃⲆ: "img/day-hand-skin95.png",
    ⲆᐃΔᐃⵠᐃΔ: "img/night-hand-skin95.png",
    ᐃⵠⵠⵠΔΔⲆ: "img/day-hand-skin96.png",
    ⵠⵠⲆⵠΔᐃⵠ: "img/night-hand-skin96.png",
    ⵠΔᐃᐃⲆᐃΔ: "img/day-hand-skin97.png",
    ⲆⲆᐃⵠⲆᐃΔ: "img/night-hand-skin97.png",
    ΔⲆⵠⲆΔⵠΔ: "img/day-hand-skin98.png",
    ᐃⵠⲆⵠⵠᐃΔ: "img/night-hand-skin98.png",
    ᐃⲆⵠΔⵠᐃᐃ: "img/day-hand-skin99.png",
    ⲆⵠⵠⲆⵠⵠⵠ: "img/night-hand-skin99.png",
    ΔΔⲆᐃⵠⲆⵠ: "img/day-hand-skin100.png",
    ⵠⲆⵠⲆᐃⲆΔ: "img/night-hand-skin100.png",
    ᐃⲆⵠⲆᐃⲆⵠ: "img/day-hand-skin101.png",
    ⲆⲆⲆΔΔⵠⲆ: "img/night-hand-skin101.png",
    ᐃⲆⲆⵠΔⵠΔ: "img/day-hand-skin102.png",
    ⵠΔⵠⵠⵠⵠᐃ: "img/night-hand-skin102.png",
    ⲆᐃΔⲆⲆⲆⵠ: "img/day-hand-skin103.png",
    ⲆᐃᐃⵠΔᐃⵠ: "img/night-hand-skin103.png",
    ΔⲆΔⵠⵠⲆⵠ: "img/day-hand-skin104.png",
    ΔᐃᐃΔΔᐃⲆ: "img/night-hand-skin104.png",
    ᐃᐃΔⲆⲆᐃΔ: "img/day-hand-skin105.png",
    ⵠΔᐃⲆⵠⲆᐃ: "img/night-hand-skin105.png",
    ᐃΔᐃⵠⵠⵠⵠ: "img/day-hand-skin106.png",
    ᐃᐃⲆⲆᐃᐃⵠ: "img/night-hand-skin106.png",
    ΔⲆⵠΔΔⵠᐃ: "img/day-hand-skin107.png",
    ⲆⵠΔΔᐃⲆⲆ: "img/night-hand-skin107.png",
    ΔᐃΔᐃᐃⲆᐃ: "img/day-hand-skin108.png",
    ⲆⲆⲆⵠΔⲆΔ: "img/night-hand-skin108.png",
    ⲆⵠᐃⲆΔᐃⲆ: "img/day-hand-skin109.png",
    ⵠⵠΔⲆᐃⲆⵠ: "img/night-hand-skin109.png",
    ΔΔᐃΔΔⲆⵠ: "img/day-hand-skin110.png",
    ᐃΔⲆⵠΔΔᐃ: "img/night-hand-skin110.png",
    ᐃⵠΔⲆⵠΔΔ: "img/day-hand-skin111.png",
    ΔⵠⵠΔΔΔᐃ: "img/night-hand-skin111.png",
    ᐃᐃⵠⲆΔᐃᐃ: "img/day-hand-skin112.png",
    ΔΔⲆⲆⵠΔⵠ: "img/night-hand-skin112.png",
    ⵠⲆⲆⲆΔⵠΔⵠΔ: "img/day-hand-skin113.png",
    ⲆⵠᐃⲆᐃΔⵠΔⲆ: "img/night-hand-skin113.png",
    ΔⵠⲆⵠⲆᐃᐃ: "img/day-hand-skin114.png",
    ⵠⵠⵠᐃᐃᐃⵠ: "img/night-hand-skin114.png",
    ⲆⵠΔⵠΔⲆΔ: "img/day-hand-skin115.png",
    ⲆΔⵠⲆᐃᐃⵠ: "img/night-hand-skin115.png",
    ⵠΔⲆᐃΔᐃΔ: "img/day-hand-skin116.png",
    ᐃΔⵠⵠⵠⵠᐃ: "img/night-hand-skin116.png",
    ΔᐃᐃᐃⵠΔΔ: "img/day-hand-skin117.png",
    ΔⲆⵠΔᐃΔᐃ: "img/night-hand-skin117.png",
    ᐃⵠⵠᐃᐃΔⲆ: "img/day-hand-skin118.png",
    ᐃΔΔᐃⵠⲆΔ: "img/night-hand-skin118.png",
    ΔⵠΔⲆΔⲆⲆ: "img/day-hand-skin119.png",
    ⵠⵠΔⵠΔⲆΔ: "img/night-hand-skin119.png",
    ⵠᐃᐃⲆⵠΔᐃ: "img/day-hand-skin120.png",
    ⵠᐃⲆᐃᐃᐃⲆ: "img/night-hand-skin120.png",
    ⲆᐃⵠΔΔⲆⲆ: "img/day-hand-skin122.png",
    ⵠΔⲆΔΔΔⲆ: "img/night-hand-skin122.png",
    ⵠᐃᐃⲆΔΔΔ: "img/day-hand-skin122.png",
    ΔⲆⲆⵠⵠᐃⵠ: "img/night-hand-skin122.png",
    ΔⲆᐃⵠⵠᐃⵠ: "img/day-hand-skin122.png",
    ᐃΔⲆⵠⲆⲆⵠ: "img/night-hand-skin122.png",
    ᐃΔⵠⲆᐃⵠⲆ: "img/day-hand-skin124.png",
    ⵠⵠⲆⲆⲆᐃᐃ: "img/night-hand-skin124.png",
    ⵠᐃⵠⵠⲆΔᐃ: "img/day-hand-skin125.png",
    ᐃΔᐃΔⲆⵠᐃ: "img/night-hand-skin125.png",
    ᐃⲆᐃⲆΔⵠⲆ: "img/day-hand-skin126.png",
    ⵠΔᐃᐃΔΔΔ: "img/night-hand-skin126.png",
    ᐃᐃⵠⵠⲆⵠⲆ: "img/day-hand-skin127.png",
    ΔᐃⵠΔⲆⵠⵠ: "img/night-hand-skin127.png",
    ᐃΔΔΔᐃⵠᐃ: "img/day-hand-skin128.png",
    ⵠΔᐃⲆᐃⵠΔ: "img/night-hand-skin128.png",
    ᐃᐃⲆⵠⲆⲆᐃ: "img/day-hand-skin129.png",
    ⲆⵠⲆΔⵠⵠΔ: "img/night-hand-skin129.png",
    ⲆΔⲆⲆⲆΔⵠ: "img/day-hand-skin130.png",
    ΔΔⵠⲆΔⵠⲆ: "img/night-hand-skin130.png",
    ⲆΔⵠᐃⲆᐃΔ: "img/day-hand-skin131.png",
    ⵠⵠΔⲆⵠΔⵠ: "img/night-hand-skin131.png",
    ᐃΔΔΔⵠᐃⲆ: "img/day-hand-skin130.png",
    ΔⵠᐃᐃΔⵠⲆ: "img/night-hand-skin130.png",
    ⵠΔΔᐃᐃΔᐃ: "img/day-hand-skin133.png",
    ΔΔⲆⲆⲆΔᐃ: "img/night-hand-skin133.png",
    ΔⵠⵠΔᐃᐃⲆ: "img/day-hand-skin134.png",
    ⵠⵠᐃΔᐃΔⲆ: "img/night-hand-skin134.png",
    ⲆⲆΔⵠᐃΔⵠ: "img/day-hand-skin135.png",
    ᐃᐃⲆᐃᐃⵠΔ: "img/night-hand-skin135.png",
    ⵠΔΔᐃⲆⵠΔ: "img/day-hand-skin136.png",
    ᐃⲆⵠⵠⲆᐃⵠ: "img/night-hand-skin136.png",
    ᐃⲆⵠᐃᐃⵠΔ: "img/day-hand-skin137.png",
    ΔΔΔᐃⲆⲆⲆ: "img/night-hand-skin137.png",
    ⲆΔΔᐃⲆΔΔ: "img/day-hand-skin138.png",
    ⲆᐃⵠⵠΔΔΔ: "img/night-hand-skin138.png",
    ΔⵠⵠⵠⵠΔⵠ: "img/day-hand-skin139.png",
    ⵠⲆⲆⵠᐃⲆⲆ: "img/night-hand-skin139.png",
    ⲆΔᐃⵠᐃᐃⵠ: "img/day-hand-skin140.png",
    ⵠⲆᐃⵠⲆⲆⵠ: "img/night-hand-skin140.png",
    ⲆⲆᐃⲆᐃΔᐃ: "img/day-hand-skin141.png",
    ᐃⲆΔⵠᐃⵠᐃ: "img/night-hand-skin141.png",
    ᐃᐃⵠᐃΔᐃⲆ: "img/day-hand-skin142.png",
    ᐃⲆⲆⵠⵠⲆⵠ: "img/night-hand-skin142.png",
    ⵠⲆΔΔⵠⵠᐃ: "img/day-hand-skin143.png",
    ᐃⲆᐃⲆᐃΔᐃ: "img/night-hand-skin143.png",
    ⲆⲆⵠⵠΔᐃⲆ: "img/day-hand-skin144.png",
    ΔΔᐃᐃΔⵠⵠ: "img/night-hand-skin144.png",
    ΔⵠᐃᐃⵠΔⲆ: "img/day-hand-skin145.png",
    ⲆⲆⲆΔΔⲆΔ: "img/night-hand-skin145.png",
    ΔⵠⲆᐃⵠΔᐃ: "img/day-hand-skin146.png",
    ᐃⲆᐃⲆⵠⵠⵠ: "img/night-hand-skin146.png",
    ⲆⲆΔᐃᐃΔⲆ: "img/day-hand-skin147.png",
    ⲆⵠΔᐃᐃⲆᐃ: "img/night-hand-skin147.png",
    ⲆᐃⵠᐃΔⲆⲆ: "img/day-hand-skin148.png",
    ΔⵠᐃⲆᐃΔⲆ: "img/night-hand-skin148.png",
    ᐃΔᐃⲆⲆᐃⵠ: "img/day-hand-skin149.png",
    ΔⵠᐃⵠⲆΔΔ: "img/night-hand-skin149.png",
    ⲆΔⲆⵠᐃΔΔ: "img/day-hand-skin150.png",
    ΔⲆⲆⵠᐃΔⵠ: "img/night-hand-skin150.png",
    ᐃⲆⲆΔⲆⲆΔ: "img/day-hand-skin151.png",
    ᐃᐃᐃᐃᐃⵠⲆ: "img/night-hand-skin151.png",
    ⵠᐃⲆᐃⲆⲆᐃ: "img/day-hand-skin152.png",
    ⵠⲆᐃΔⲆⲆⲆ: "img/night-hand-skin152.png",
    ΔΔⲆᐃᐃᐃᐃ: "img/day-hand-skin153.png",
    ⵠΔⵠⵠᐃⲆᐃ: "img/night-hand-skin153.png",
    ⵠⲆⲆΔⵠᐃΔ: "img/day-hand-skin154.png",
    ΔᐃⲆΔⲆⵠΔ: "img/night-hand-skin154.png",
    ⲆⵠΔΔᐃΔⵠ: "img/day-hand-skin155.png",
    ⵠⵠᐃΔⵠⵠⲆ: "img/night-hand-skin155.png",
    ⵠⲆⵠⲆᐃⲆᐃ: "img/day-hand-skin156.png",
    ᐃⲆⵠᐃⲆᐃⲆ: "img/night-hand-skin156.png",
    ⵠΔⲆᐃᐃⵠΔ: "img/day-hand-skin157.png",
    ⲆᐃΔⵠⲆᐃⲆ: "img/night-hand-skin157.png",
    ᐃⵠΔᐃᐃᐃΔ: "img/day-hand-skin158.png",
    ΔᐃⵠΔⲆⲆΔ: "img/night-hand-skin158.png",
    ⲆΔᐃᐃΔΔΔ: "img/day-hand-skin159.png",
    ⲆΔⵠᐃΔⲆⲆ: "img/night-hand-skin159.png",
    ᐃΔΔᐃΔΔⵠ: "img/day-hand-skin160.png",
    ᐃⵠΔⲆⲆⵠⲆ: "img/night-hand-skin160.png",
    ᐃᐃᐃΔᐃⵠᐃ: "img/day-hand-skin161.png",
    ᐃⲆᐃᐃΔᐃⵠ: "img/night-hand-skin161.png",
    ⵠⲆᐃᐃᐃΔⲆ: "img/day-hand-skin162.png",
    ΔⵠⲆᐃΔΔⲆ: "img/night-hand-skin162.png",
    ⲆΔⲆⲆⲆⲆΔ: "img/day-hand-skin163.png",
    ⲆⲆⵠᐃⲆΔⵠ: "img/night-hand-skin163.png",
    ⵠⵠⲆΔⵠᐃⲆ: "img/day-hand-skin164.png",
    ΔΔᐃⵠⵠⵠⲆ: "img/night-hand-skin164.png",
    ⲆⲆᐃΔᐃⵠⲆ: "img/day-hand-skin165.png",
    ᐃⵠⲆΔᐃⲆⲆ: "img/night-hand-skin165.png",
    ᐃΔᐃᐃΔᐃΔ: "img/day-hand-skin166.png",
    ⲆΔⲆⲆᐃᐃΔ: "img/night-hand-skin166.png",
    ⲆⲆⵠᐃⲆⲆᐃ: "img/day-hand-skin167.png",
    ΔᐃⲆⲆⲆᐃⵠ: "img/night-hand-skin167.png",
    ⲆⵠⲆⵠⲆᐃᐃ: "img/day-hand-skin168.png",
    ΔⵠΔᐃᐃΔⲆ: "img/night-hand-skin168.png",
    ⵠᐃΔⲆᐃⲆΔ: "img/day-hand-skin169.png",
    ᐃΔᐃΔΔⲆⲆ: "img/night-hand-skin169.png",
    ΔⵠⵠΔⵠΔᐃ: "img/day-hand-skin170.png",
    ⲆⵠⲆⲆⲆᐃⲆ: "img/night-hand-skin170.png",
    ΔⲆⲆᐃⲆᐃᐃ: "img/day-hand-skin171.png",
    ⲆⲆⵠᐃΔⵠΔ: "img/night-hand-skin171.png",
    ⵠᐃᐃⲆⲆⲆⵠ: "img/day-hand-skin172.png",
    ⲆᐃᐃⲆᐃᐃⵠ: "img/night-hand-skin172.png",
    ᐃᐃⵠⵠᐃΔⵠ: "img/day-hand-skin173.png",
    ΔΔᐃⵠΔΔᐃ: "img/night-hand-skin173.png",
    ⲆᐃⵠⲆⵠᐃⵠ: "img/day-hand-skin174.png",
    ΔⵠΔⵠⵠⲆⵠ: "img/night-hand-skin174.png",
    ⲆⲆⵠᐃⵠΔⵠ: "img/day-hand-skin175.png",
    ΔΔⵠⵠΔⲆΔ: "img/night-hand-skin175.png",
    ⵠΔᐃᐃΔⲆⲆ: "img/day-hand-skin176.png",
    ᐃⲆⲆΔᐃⲆⲆ: "img/night-hand-skin176.png",
    ΔⲆⵠᐃΔⵠΔ: "img/day-hand-skin177.png",
    ⵠⵠΔⵠⲆᐃᐃ: "img/night-hand-skin177.png",
    ᐃᐃΔᐃΔⵠᐃ: "img/day-hand-skin178.png",
    ⲆⵠᐃᐃⵠⲆⲆ: "img/night-hand-skin178.png",
    ᐃΔⵠⲆΔⵠᐃ: "img/day-hand-skin179.png",
    ⵠᐃⵠⲆᐃᐃΔ: "img/night-hand-skin179.png",
    ⵠⵠⵠᐃΔᐃᐃ: "img/day-hand-skin180.png",
    ⲆᐃⵠⵠΔᐃᐃ: "img/night-hand-skin180.png",
    ⵠΔᐃⲆᐃᐃᐃ: "img/day-hand-skin181.png",
    ⵠⲆΔᐃᐃⲆⲆ: "img/night-hand-skin181.png",
    ⲆⵠⲆⲆⲆⲆᐃ: "img/day-hand-skin182.png",
    ᐃΔⲆᐃⲆⵠⲆ: "img/night-hand-skin182.png",
    ⵠᐃⲆⲆΔᐃᐃ: "img/day-hand-skin183.png",
    ⵠⲆⵠᐃⵠᐃⲆ: "img/night-hand-skin183.png",
    ΔᐃⵠΔᐃⲆⲆ: "img/day-hand-skin184.png",
    ΔᐃᐃⲆᐃΔᐃ: "img/night-hand-skin184.png",
    ⲆⲆᐃᐃΔᐃΔ: "img/day-hand-skin185.png",
    ⵠⵠⵠΔᐃⵠⲆ: "img/night-hand-skin185.png",
    ⲆᐃΔΔᐃΔᐃ: "img/day-hand-skin186.png",
    ⲆⲆⲆᐃΔⲆᐃ: "img/night-hand-skin186.png",
    ᐃⵠⵠⵠᐃⲆⲆ: "img/day-hand-skin187.png",
    ⲆⵠᐃⵠⵠⲆᐃ: "img/night-hand-skin187.png",
    ⵠⲆᐃⵠⲆⲆΔ: "img/day-hand-skin188.png",
    ⵠⵠⲆⵠⵠⲆⲆ: "img/night-hand-skin188.png",
    ⵠⵠΔⲆⵠⲆᐃ: "img/day-hand-skin189.png",
    ⵠᐃⲆⵠⲆⵠᐃ: "img/night-hand-skin189.png",
    ΔΔᐃⵠⲆΔᐃ: "img/day-hand-skin190.png",
    ⲆΔᐃΔⲆΔᐃ: "img/night-hand-skin190.png",
    ᐃⵠΔⲆᐃᐃⲆ: "img/day-hand-skin191.png",
    ᐃᐃⵠᐃᐃⵠΔ: "img/night-hand-skin191.png",
    ⲆⲆⵠⲆΔⲆΔ: "img/day-hand-skin192.png",
    ⵠⵠᐃΔᐃⲆⵠ: "img/night-hand-skin192.png",
    ΔⵠΔⵠΔⲆⲆ: "img/day-hand-skin193.png",
    ⲆⲆⲆⵠⲆⲆⲆ: "img/night-hand-skin193.png",
    ᐃΔᐃΔᐃⵠⵠ: "img/day-hand-skin194.png",
    ⵠⲆⲆᐃⵠⵠⵠ: "img/night-hand-skin194.png",
    ⵠⵠᐃΔⵠᐃᐃ: "img/day-hand-skin195.png",
    ⲆᐃΔΔⵠᐃⵠ: "img/night-hand-skin195.png",
    ΔΔᐃᐃᐃⵠⵠ: "img/day-hand-skin196.png",
    ᐃⲆⲆΔΔᐃⵠ: "img/night-hand-skin196.png",
    ΔⵠⲆⲆⵠⲆⲆ: "img/day-hand-skin197.png",
    ᐃᐃⵠⲆΔⵠⵠ: "img/night-hand-skin197.png",
    ΔᐃⵠᐃⵠⲆᐃ: "img/day-hand-skin198.png",
    ᐃⲆⲆⲆᐃΔΔ: "img/night-hand-skin198.png",
    Δᐃᐃᐃᐃᐃⵠ: "img/day-hand-skin199.png",
    ⵠΔⵠⲆⵠΔᐃ: "img/night-hand-skin199.png",
    ⵠⲆⲆᐃⵠΔⲆ: "img/day-hand-skin200.png",
    ᐃΔᐃⲆΔⲆΔ: "img/night-hand-skin200.png",
    ⲆⲆⲆⲆᐃᐃᐃ: "img/day-hand-skin201.png",
    ᐃΔⵠᐃⲆᐃⵠ: "img/night-hand-skin201.png",
    ⵠⵠⲆⲆΔΔΔ: "img/day-hand-skin202.png",
    ΔⵠᐃⵠⲆⲆⲆ: "img/night-hand-skin202.png",
    ΔⲆᐃΔᐃᐃᐃ: "img/day-hand-skin203.png",
    ⵠⲆΔᐃⵠΔⵠ: "img/night-hand-skin203.png",
    ᐃⵠΔᐃⵠᐃΔ: "img/day-hand-skin204.png",
    ⲆⵠⲆⵠΔΔᐃ: "img/night-hand-skin204.png",
    ᐃⲆⵠⲆΔΔⵠ: "img/day-hand-skin205.png",
    ᐃΔΔᐃΔⵠΔ: "img/night-hand-skin205.png",
    ⵠⵠⲆⲆⲆⲆΔ: "img/day-hand-skin206.png",
    ΔⲆⲆⵠΔΔᐃ: "img/night-hand-skin206.png",
    ⲆΔⲆⲆᐃⵠΔ: "img/day-hand-skin207.png",
    ⵠΔᐃᐃᐃΔΔ: "img/night-hand-skin207.png",
    ᐃⵠᐃᐃⵠⲆⵠ: "img/day-hand-skin208.png",
    ᐃⵠⲆⲆᐃⵠⵠ: "img/night-hand-skin208.png",
    ⵠⵠⲆⵠᐃⲆΔ: "img/day-hand-skin209.png",
    ⵠΔⵠⲆᐃᐃⲆ: "img/night-hand-skin209.png",
    ⵠᐃΔⲆΔⵠⵠ: "img/day-hand-skin210.png",
    ⵠΔⵠᐃⲆⵠΔ: "img/night-hand-skin210.png",
    ᐃⵠᐃΔΔⲆᐃ: "img/day-hand-skin211.png",
    ⲆⲆΔⲆⵠⵠⵠ: "img/night-hand-skin211.png",
    ᐃⲆΔΔᐃΔᐃ: "img/day-hand-skin212.png",
    ⵠⵠⵠᐃⲆⲆᐃ: "img/night-hand-skin212.png",
    ᐃⵠΔⲆⲆᐃⵠ: "img/day-hand-skin213.png",
    ΔⵠⲆᐃⵠᐃⲆ: "img/night-hand-skin213.png",
    ΔⲆΔΔΔᐃΔ: "img/day-hand-skin214.png",
    ⵠᐃⲆⵠⵠᐃΔ: "img/night-hand-skin214.png",
    ΔⵠΔⵠⲆᐃⵠ: "img/day-bag-star0.png",
    ΔΔΔⵠⵠΔⵠ: "img/night-bag-star0.png",
    ᐃΔⲆⲆⲆᐃΔ: "img/day-bag0.png",
    ᐃⲆⵠⵠᐃᐃᐃ: "img/night-bag0.png",
    ⵠΔⵠΔⲆΔⵠ: "img/day-bag1.png",
    ⵠΔΔΔᐃⵠⵠ: "img/night-bag1.png",
    ΔⲆⲆⵠⲆⵠΔ: "img/day-bag2.png",
    ⵠⲆⵠᐃⲆⲆⲆ: "img/night-bag2.png",
    ⲆΔⲆΔΔⲆⵠ: "img/day-bag3.png",
    ⲆⲆⵠⵠΔΔⵠ: "img/night-bag3.png",
    ⵠⲆΔⵠⲆⲆᐃ: "img/day-bag4.png",
    ΔΔᐃⲆⲆⲆⵠ: "img/night-bag4.png",
    ΔⵠⲆΔΔᐃⵠ: "img/day-bag5.png",
    ᐃΔᐃᐃⲆᐃᐃ: "img/night-bag5.png",
    ⵠΔᐃᐃᐃⵠⲆ: "img/day-bag6.png",
    ᐃⲆⵠΔᐃΔΔ: "img/night-bag6.png",
    ⲆΔΔᐃⵠⵠΔ: "img/day-bag7.png",
    ΔᐃⵠΔⲆⵠΔ: "img/night-bag7.png",
    ⵠⵠΔⲆⵠᐃΔ: "img/day-bag8.png",
    ⲆⵠΔᐃᐃⲆⲆ: "img/night-bag8.png",
    ⲆΔᐃⵠⲆⲆΔ: "img/day-bag9.png",
    ⲆⵠⲆⲆΔΔⵠ: "img/night-bag9.png",
    ᐃΔⲆΔⵠΔⵠ: "img/day-bag10.png",
    ΔᐃᐃⲆⵠⵠⲆ: "img/night-bag10.png",
    ᐃΔΔⲆᐃⲆⵠ: "img/day-bag11.png",
    ⲆⲆⲆⵠⲆᐃⵠ: "img/night-bag11.png",
    ⵠⵠⵠⵠᐃΔᐃ: "img/day-bag13.png",
    ⲆⵠΔⲆⵠΔⵠ: "img/night-bag13.png",
    ᐃⲆⲆⲆⲆΔᐃ: "img/day-bag14.png",
    ⲆⵠⵠΔⵠⵠⲆ: "img/night-bag14.png",
    ⲆᐃⲆⲆΔⲆⲆ: "img/day-bag16.png",
    ΔᐃΔⵠᐃΔΔ: "img/night-bag16.png",
    ⲆᐃⵠΔᐃⲆᐃ: "img/day-bag17.png",
    ᐃⲆⲆΔⵠΔⵠ: "img/night-bag17.png",
    ΔⵠΔⵠⵠⲆΔ: "img/day-bag18.png",
    ⵠⲆΔᐃⲆⲆⲆ: "img/night-bag18.png",
    ⲆᐃⲆⵠᐃⵠᐃ: "img/day-bag19.png",
    ⵠⵠᐃⵠⵠⵠᐃ: "img/night-bag19.png",
    ⵠⲆᐃⲆΔⲆⵠ: "img/day-bag20.png",
    ⲆΔⵠᐃⲆΔⲆ: "img/night-bag20.png",
    ⵠᐃⵠᐃⵠΔΔ: "img/day-bag21.png",
    ⲆΔⵠⵠⲆⲆᐃ: "img/night-bag21.png",
    ⵠΔⵠⵠⵠⲆΔ: "img/day-bag22.png",
    ᐃᐃΔᐃⲆᐃⲆ: "img/night-bag22.png",
    ⲆⲆⵠᐃΔᐃᐃ: "img/day-bag23.png",
    ⵠⵠⲆⵠⵠⵠΔ: "img/night-bag23.png",
    ⲆⵠᐃⵠⲆⲆΔ: "img/day-bag24.png",
    ΔΔⲆⵠᐃΔᐃ: "img/night-bag24.png",
    ΔΔⵠⵠⵠΔⵠ: "img/day-bag25.png",
    ᐃᐃⵠⵠⵠΔΔ: "img/night-bag25.png",
    ᐃⲆᐃΔⲆΔⵠ: "img/day-bag26.png",
    ᐃⵠⲆⲆⵠΔΔ: "img/night-bag26.png",
    ⵠⵠⵠᐃⲆⵠΔ: "img/day-bag27.png",
    ⵠⲆΔΔⵠᐃᐃ: "img/night-bag27.png",
    ᐃⲆⲆⵠᐃⲆΔ: "img/day-bag28.png",
    ⲆⲆⲆᐃᐃΔⲆ: "img/night-bag28.png",
    ⲆⲆⵠⲆΔⲆⵠ: "img/day-bag29.png",
    ⵠΔᐃΔⲆⵠΔ: "img/night-bag29.png",
    ᐃΔΔⵠΔⲆΔ: "img/day-bag30.png",
    ᐃᐃᐃⵠⵠᐃⵠ: "img/night-bag30.png",
    ⲆⵠᐃᐃΔⵠᐃ: "img/day-bag31.png",
    ⲆⲆⲆⲆⲆΔⵠ: "img/night-bag31.png",
    ⵠⵠⵠᐃⲆΔⲆ: "img/day-bag32.png",
    ⲆΔᐃⵠⵠΔⵠ: "img/night-bag32.png",
    ΔⲆⵠΔᐃᐃⵠ: "img/day-bag33.png",
    ⲆⲆΔⲆⵠΔⵠ: "img/night-bag33.png",
    ⲆⵠᐃᐃⵠΔᐃ: "img/day-bag34.png",
    ᐃᐃⲆᐃⵠΔᐃ: "img/night-bag34.png",
    ΔΔΔⲆᐃᐃΔ: "img/day-bag35.png",
    ΔⲆΔΔΔᐃⲆ: "img/night-bag35.png",
    ᐃΔᐃᐃⵠⲆⲆ: "img/day-bag36.png",
    ⲆΔΔΔⵠⲆⵠ: "img/night-bag36.png",
    ᐃⵠⲆⲆᐃⵠⲆ: "img/day-bag37.png",
    ⲆⵠⲆⲆΔⵠᐃ: "img/night-bag37.png",
    ⵠⲆⲆᐃΔΔⵠ: "img/day-bag38.png",
    ᐃᐃᐃⲆⲆⵠⲆ: "img/night-bag38.png",
    ΔᐃΔᐃᐃᐃⵠ: "img/day-bag39.png",
    ᐃⵠⵠΔⵠᐃΔ: "img/night-bag39.png",
    ⵠΔΔᐃⲆⲆⵠ: "img/day-bag40.png",
    ΔᐃⵠᐃⲆᐃΔ: "img/night-bag40.png",
    ΔᐃΔᐃΔⲆⲆ: "img/day-bag41.png",
    ᐃᐃⵠᐃⲆΔⵠ: "img/night-bag41.png",
    ⲆⵠⲆⵠⲆᐃⲆ: "img/day-bag42.png",
    ᐃⲆᐃΔⲆΔΔ: "img/night-bag42.png",
    ⵠΔᐃΔᐃⲆⲆ: "img/day-bag43.png",
    ᐃᐃⲆⲆΔⵠⵠ: "img/night-bag43.png",
    ⵠⵠⲆⲆⲆΔⵠ: "img/day-bag44.png",
    ΔΔⵠᐃⲆΔΔ: "img/night-bag44.png",
    ᐃΔᐃⵠΔᐃⲆ: "img/day-bag45.png",
    ⵠᐃⲆΔᐃΔⵠ: "img/night-bag45.png",
    ⵠΔΔΔⲆΔⵠ: "img/day-bag46.png",
    ⲆⲆⵠⲆΔⲆⲆ: "img/night-bag46.png",
    ΔⲆⵠΔⵠⲆⲆ: "img/day-bag47.png",
    ⵠⵠᐃⲆᐃⲆᐃ: "img/night-bag47.png",
    ⲆΔΔⲆᐃΔΔ: "img/day-bag48.png",
    ΔΔⲆᐃᐃᐃΔ: "img/night-bag48.png",
    ⲆⵠΔΔᐃⲆᐃ: "img/day-bag49.png",
    ΔⵠⵠⲆᐃⲆⲆ: "img/night-bag49.png",
    ᐃᐃᐃⲆΔᐃⲆ: "img/day-bag50.png",
    ⲆΔⵠΔⵠⲆΔ: "img/night-bag50.png",
    ΔΔᐃⲆᐃᐃᐃ: "img/day-bag51.png",
    ⲆᐃΔⵠᐃΔⲆ: "img/night-bag51.png",
    ΔⲆΔΔᐃᐃΔ: "img/day-bag52.png",
    ᐃΔⲆΔΔⵠⵠ: "img/night-bag52.png",
    Ⲇⵠᐃⵠⵠᐃⵠ: "img/day-bag53.png",
    ᐃⲆⵠⲆΔⵠⲆ: "img/night-bag53.png",
    ᐃΔⵠⵠⲆᐃᐃ: "img/day-bag54.png",
    ⵠⲆⲆⵠᐃⵠⲆ: "img/night-bag54.png",
    ᐃⲆⵠᐃᐃⲆᐃ: "img/day-bag55.png",
    ⲆⵠⵠⵠⵠΔⲆ: "img/night-bag55.png",
    ΔⲆΔᐃΔⲆⲆ: "img/day-bag56.png",
    ⲆᐃⵠⲆⵠΔΔ: "img/night-bag56.png",
    ⲆⲆΔⲆⵠΔᐃ: "img/day-bag57.png",
    ⵠⲆᐃⲆⵠᐃΔ: "img/night-bag57.png",
    ⵠⲆⲆⲆᐃⵠΔ: "img/day-bag58.png",
    ᐃᐃΔᐃⲆⲆΔ: "img/night-bag58.png",
    ᐃⵠⲆΔΔᐃⵠ: "img/day-bag59.png",
    ΔⲆΔⵠⲆⵠᐃ: "img/night-bag59.png",
    ⲆᐃΔᐃᐃⵠΔ: "img/day-bag60.png",
    ⲆⵠⵠᐃΔⵠⲆ: "img/night-bag60.png",
    ᐃⲆᐃⵠᐃⵠⵠ: "img/day-bag61.png",
    ⵠⲆᐃⵠⵠⵠⲆ: "img/night-bag61.png",
    ΔⲆⲆΔᐃⵠⲆ: "img/day-bag62.png",
    ᐃⵠⵠᐃΔᐃⵠ: "img/night-bag62.png",
    ⵠΔⲆⲆᐃⵠⲆ: "img/day-bag63.png",
    ΔΔᐃⲆⲆⵠᐃ: "img/night-bag63.png",
    ΔΔⲆᐃᐃⵠΔ: "img/day-bag64.png",
    ΔⲆⵠⵠΔᐃᐃ: "img/night-bag64.png",
    ᐃⲆⲆᐃᐃΔᐃ: "img/day-bag65.png",
    ⲆᐃΔⵠⲆΔⵠ: "img/night-bag65.png",
    ΔⵠᐃᐃΔⲆⲆ: "img/day-bag66.png",
    ⵠⲆΔΔᐃⲆᐃ: "img/night-bag66.png",
    ᐃⲆΔⲆⲆⲆⲆ: "img/day-bag67.png",
    ᐃⵠΔΔᐃⲆᐃ: "img/night-bag67.png",
    ⵠᐃΔᐃᐃΔᐃ: "img/day-bag68.png",
    ⲆᐃᐃⲆⲆΔᐃ: "img/night-bag68.png",
    ⵠⵠᐃⲆΔⲆⲆ: "img/day-bag69.png",
    ΔⵠⵠΔᐃⲆᐃ: "img/night-bag69.png",
    ⵠᐃΔᐃΔΔⲆ: "img/day-bag70.png",
    ᐃΔΔΔⲆΔⵠ: "img/night-bag70.png",
    ⲆⲆⲆⲆⲆᐃΔ: "img/day-bag71.png",
    ⲆΔΔᐃΔᐃⲆ: "img/night-bag71.png",
    ᐃⵠᐃⵠⲆΔΔ: "img/day-bag72.png",
    ⵠⵠᐃᐃⵠⲆΔ: "img/night-bag72.png",
    ΔΔⵠⵠⵠⵠᐃ: "img/day-bag73.png",
    ᐃⲆⵠⵠΔⵠⲆ: "img/night-bag73.png",
    ᐃⵠᐃᐃⵠΔⵠ: "img/day-bag74.png",
    ΔᐃΔᐃΔΔⲆ: "img/night-bag74.png",
    ΔⵠⵠⵠᐃΔᐃ: "img/day-bag75.png",
    ΔᐃⵠᐃⵠΔⲆ: "img/night-bag75.png",
    ⲆⵠΔⲆᐃᐃΔ: "img/day-bag76.png",
    ⲆΔⲆⲆΔⵠⵠ: "img/night-bag76.png",
    ᐃᐃⵠⵠⲆⵠⵠ: "img/day-bag77.png",
    ΔⲆᐃⲆⵠᐃΔ: "img/night-bag77.png",
    ⲆΔᐃΔᐃᐃⵠ: "img/day-bag78.png",
    ΔⲆᐃⲆᐃΔᐃ: "img/night-bag78.png",
    ⵠⵠⵠΔⵠⵠᐃ: "img/day-bag79.png",
    ΔΔΔⵠΔⲆᐃ: "img/night-bag79.png",
    ΔᐃᐃⲆⲆⲆᐃ: "img/day-bag80.png",
    ᐃⲆᐃⲆⲆᐃᐃ: "img/night-bag80.png",
    ᐃⵠⲆΔΔⲆΔ: "img/day-accessory0.png",
    ᐃⲆΔⵠⵠΔⲆ: "img/day-accessory0-pacques.png",
    ΔⲆΔᐃⵠΔΔ: "img/night-accessory0-pacques.png",
    ΔⲆΔⲆΔⲆΔ: "img/day-accessory13.png",
    ΔⲆΔΔⲆᐃᐃ: "img/night-accessory13.png",
    ⲆᐃᐃⲆᐃⲆⲆ: "img/day-accessory14.png",
    ⵠᐃΔⲆⲆⲆΔ: "img/night-accessory14.png",
    ᐃⲆᐃⲆΔΔⵠ: "img/day-accessory15.png",
    ΔΔᐃⵠⲆᐃΔ: "img/night-accessory15.png",
    ⵠⲆΔⵠⵠᐃⵠ: "img/day-accessory16.png",
    ΔⵠⲆᐃⵠⲆⲆ: "img/night-accessory16.png",
    ⵠⵠⲆⲆⲆⵠⲆ: "img/day-accessory17.png",
    ᐃᐃᐃΔⵠᐃⵠ: "img/day-accessory17.png",
    ⵠⲆΔᐃΔΔⵠ: "img/day-accessory19.png",
    ΔⲆⲆᐃΔΔⲆ: "img/night-accessory19.png",
    ᐃⵠⵠⵠᐃᐃⵠ: "img/day-accessory20.png",
    ᐃᐃᐃᐃⲆΔⲆ: "img/night-accessory20.png",
    ᐃⲆΔⲆⲆΔᐃ: "img/day-accessory21.png",
    ᐃᐃᐃΔΔⵠⲆ: "img/night-accessory21.png",
    ΔΔΔΔΔᐃⵠ: "img/day-accessory22.png",
    ΔΔⵠᐃΔΔⵠ: "img/night-accessory22.png",
    ᐃⵠΔⵠⲆⵠⵠ: "img/day-accessory23.png",
    ᐃⲆᐃⵠΔⵠⵠ: "img/night-accessory23.png",
    ᐃⲆᐃⲆⵠⵠΔ: "img/day-accessory24.png",
    ⲆᐃΔⲆΔⲆᐃ: "img/night-accessory24.png",
    ⲆΔⵠⵠⲆΔᐃ: "img/day-accessory25.png",
    ⵠᐃΔⵠᐃⲆΔ: "img/night-accessory25.png",
    ΔⲆⵠᐃⵠⲆᐃ: "img/day-accessory26.png",
    ⲆⵠΔⲆᐃΔⲆ: "img/night-accessory26.png",
    ᐃⵠΔᐃᐃᐃⲆ: "img/day-accessory27.png",
    ⵠᐃᐃⲆΔⵠΔ: "img/night-accessory27.png",
    ⲆⵠᐃᐃΔᐃᐃ: "img/day-accessory18.png",
    ⵠⲆⵠΔΔⵠⲆ: "img/night-accessory18.png",
    ᐃΔⲆⲆⲆⵠⵠ: "img/day-accessory29.png",
    ⲆⲆᐃⵠⲆⵠⲆ: "img/night-accessory29.png",
    ⲆⲆⵠΔⵠΔⵠ: "img/day-accessory30.png",
    ᐃⵠᐃⲆΔⲆⵠ: "img/night-accessory30.png",
    ᐃᐃΔᐃⵠᐃⲆ: "img/day-accessory31.png",
    ᐃⲆΔΔΔⵠⵠ: "img/night-accessory31.png",
    ⲆᐃΔⵠⵠΔᐃ: "img/day-accessory32.png",
    ⵠⲆⲆⵠⲆⵠᐃ: "img/night-accessory32.png",
    ΔΔⲆⵠΔⵠᐃ: "img/day-accessory33.png",
    ᐃⲆᐃΔⵠⲆⲆ: "img/night-accessory33.png",
    ⲆⲆⲆⵠⲆⲆΔ: "img/day-accessory34.png",
    ΔᐃΔⲆⲆΔΔ: "img/night-accessory34.png",
    ΔΔᐃⲆⵠⵠⵠ: "img/day-accessory35.png",
    ΔΔⵠⲆᐃᐃⲆ: "img/night-accessory35.png",
    ΔⲆΔⲆᐃⵠΔ: "img/day-accessory28.png",
    ᐃⲆⲆΔᐃⲆⵠ: "img/night-accessory28.png",
    ⲆΔᐃᐃᐃⵠΔ: "img/day-accessory36.png",
    ⲆⲆⵠᐃᐃⲆᐃ: "img/night-accessory36.png",
    ⲆᐃᐃⲆⲆⲆᐃ: "img/day-accessory37.png",
    ⲆΔⵠᐃⵠᐃⵠ: "img/night-accessory37.png",
    ΔⵠᐃᐃⲆᐃΔ: "img/day-accessory39.png",
    ⲆΔᐃΔⵠⲆᐃ: "img/night-accessory39.png",
    ᐃⲆⵠⲆⵠᐃⵠ: "img/day-accessory40.png",
    ⲆⵠⲆⲆΔⵠⲆ: "img/night-accessory40.png",
    ᐃⵠΔΔΔᐃΔ: "img/day-accessory41.png",
    ⵠᐃᐃΔⲆⵠⵠ: "img/night-accessory41.png",
    ⲆᐃⲆΔᐃΔⲆ: "img/day-accessory42.png",
    ⵠΔⲆⲆΔⲆⲆ: "img/night-accessory42.png",
    ᐃⵠᐃⲆᐃΔΔ: "img/day-accessory43.png",
    ⲆⲆⲆⵠⵠⵠΔ: "img/night-accessory43.png",
    ΔⵠΔⵠΔΔᐃ: "img/day-accessory44.png",
    ᐃⵠⵠΔΔᐃⲆ: "img/night-accessory44.png",
    ᐃⵠᐃⵠⵠⵠΔ: "img/day-accessory38.png",
    ᐃΔΔⲆᐃΔᐃ: "img/night-accessory38.png",
    ⲆΔᐃⵠⵠΔᐃ: "img/day-accessory46.png",
    ⲆᐃᐃⲆᐃⵠⵠ: "img/night-accessory46.png",
    ΔΔΔⲆⵠᐃᐃ: "img/day-accessory47.png",
    ⲆⵠⵠΔⵠΔⵠ: "img/night-accessory47.png",
    ⲆᐃΔⵠΔⵠΔ: "img/day-accessory48.png",
    ⲆⲆⵠⵠΔΔⲆ: "img/night-accessory48.png",
    ⵠᐃΔⵠⲆⵠΔ: "img/day-accessory49.png",
    ⵠⲆⵠⲆΔΔᐃ: "img/night-accessory49.png",
    ᐃᐃⲆⵠΔⲆⵠ: "img/day-accessory45.png",
    ΔᐃᐃⲆΔⲆᐃ: "img/night-accessory45.png",
    ⲆΔⲆᐃᐃΔᐃ: "img/day-accessory50.png",
    ⲆᐃΔᐃᐃⵠᐃ: "img/night-accessory50.png",
    ⲆᐃᐃⲆⵠⵠⵠ: "img/day-accessory51.png",
    ⵠΔⵠⲆΔᐃⲆ: "img/night-accessory51.png",
    ⵠⵠΔᐃⵠᐃⲆ: "img/day-accessory52.png",
    ΔⵠⲆⲆᐃⲆΔ: "img/night-accessory52.png",
    ᐃⵠΔⵠᐃΔΔ: "img/day-accessory53.png",
    ΔⵠᐃᐃⲆᐃⲆ: "img/night-accessory53.png",
    ⵠⵠᐃΔᐃΔⵠ: "img/day-accessory54.png",
    ΔⵠⵠⲆⵠᐃⵠ: "img/night-accessory54.png",
    ᐃⵠⲆⲆⲆᐃᐃ: "img/day-accessory55.png",
    ΔΔᐃΔᐃᐃΔ: "img/night-accessory55.png",
    ᐃⵠΔᐃΔΔΔ: "img/day-accessory56.png",
    ΔᐃⲆⲆⲆΔⵠ: "img/night-accessory56.png",
    ΔⵠⲆΔⲆΔᐃ: "img/day-accessory57.png",
    ᐃⲆΔᐃⵠΔⵠ: "img/night-accessory57.png",
    ⲆΔΔⲆΔⲆᐃ: "img/day-accessory58.png",
    ⵠΔΔΔᐃᐃⵠ: "img/night-accessory58.png",
    ΔΔⵠⵠΔⵠᐃ: "img/day-accessory59.png",
    ᐃⲆᐃᐃΔᐃᐃ: "img/night-accessory59.png",
    ⲆⲆⵠⲆΔΔⲆ: "img/day-accessory60.png",
    ᐃᐃΔΔⲆⵠⲆ: "img/night-accessory60.png",
    ᐃᐃⵠΔⲆᐃⵠ: "img/day-accessory61.png",
    ⲆᐃΔΔΔᐃΔ: "img/night-accessory61.png",
    ΔᐃΔⵠⵠⵠⵠ: "img/day-accessory62.png",
    ⲆⲆⵠⲆⵠᐃⵠ: "img/night-accessory62.png",
    ᐃᐃⵠᐃⲆⵠΔ: "img/day-accessory63.png",
    ᐃⲆⲆⵠᐃⵠⵠ: "img/night-accessory63.png",
    ΔⲆⵠⵠⲆⲆⵠ: "img/day-accessory64.png",
    ᐃⲆⲆΔⵠΔᐃ: "img/night-accessory64.png",
    ᐃⵠᐃⵠΔⵠᐃ: "img/day-accessory65.png",
    ⵠⵠⵠⵠⵠᐃΔ: "img/night-accessory65.png",
    ᐃᐃⲆᐃⲆⵠΔ: "img/day-accessory66.png",
    ΔⵠΔⲆᐃᐃᐃ: "img/night-accessory66.png",
    ΔⲆⲆΔⲆⲆⵠ: "img/day-accessory67.png",
    ⵠⵠᐃⲆⵠᐃⵠ: "img/night-accessory67.png",
    ⲆⲆᐃΔⲆⲆⲆ: "img/day-accessory68.png",
    ⵠΔᐃΔΔΔⲆ: "img/night-accessory68.png",
    ΔᐃᐃⵠΔⲆᐃ: "img/day-accessory69.png",
    ⵠⲆⵠⵠⵠΔⵠ: "img/night-accessory69.png",
    ⵠⲆⵠᐃΔᐃⲆ: "img/day-accessory70.png",
    ⵠᐃΔⵠΔⵠⵠ: "img/night-accessory70.png",
    ⲆⵠⲆⵠⲆⵠⲆ: "img/day-accessory71.png",
    ΔᐃⵠⵠⲆᐃⲆ: "img/night-accessory71.png",
    ΔΔⵠⲆⲆⲆΔ: "img/day-accessory72.png",
    ΔΔⲆⵠΔⲆᐃ: "img/night-accessory72.png",
    ⲆᐃᐃΔΔⵠⲆ: "img/day-accessory73.png",
    ΔⵠⲆⵠⵠΔᐃ: "img/night-accessory73.png",
    ⵠᐃⲆⲆᐃⲆⲆ: "img/day-accessory74.png",
    ᐃᐃᐃᐃⲆⲆᐃ: "img/night-accessory74.png",
    ⲆΔᐃⲆΔⵠᐃ: "img/day-accessory75.png",
    ⲆⵠⲆΔⵠⵠⲆ: "img/night-accessory75.png",
    ⵠΔᐃⲆⲆⲆⲆ: "img/day-accessory76.png",
    ΔⵠⵠⲆⵠⵠΔ: "img/night-accessory76.png",
    ⵠⵠᐃⲆᐃᐃⵠ: "img/day-accessory77.png",
    ⲆⵠⵠⲆⲆⵠⵠ: "img/night-accessory77.png",
    ᐃΔⵠⵠⲆⲆⵠ: "img/day-accessory78.png",
    ⲆⲆᐃΔᐃⲆᐃ: "img/night-accessory78.png",
    ΔⵠΔⲆΔΔΔ: "img/day-accessory79.png",
    ΔⵠⵠⲆⲆΔΔ: "img/night-accessory79.png",
    ΔΔᐃᐃⲆᐃⲆ: "img/day-accessory80.png",
    ᐃᐃⲆⵠⵠⵠⵠ: "img/night-accessory80.png",
    ⵠᐃΔⵠⲆⵠⵠ: "img/day-accessory81.png",
    ⲆⵠⲆⵠᐃΔᐃ: "img/night-accessory81.png",
    ⲆΔⵠⵠΔⵠΔ: "img/day-accessory83.png",
    ΔⲆⵠⵠΔΔⵠ: "img/night-accessory83.png",
    ⵠΔᐃΔⵠⲆᐃ: "img/day-accessory84.png",
    ⵠⵠⲆΔⵠⲆⵠ: "img/night-accessory84.png",
    ⲆᐃⲆᐃⲆᐃΔ: "img/day-accessory85.png",
    Ⲇᐃⵠᐃⵠᐃᐃ: "img/night-accessory85.png",
    ΔⵠⲆᐃᐃⵠᐃ: "img/day-accessory86.png",
    ΔᐃⵠⵠⲆⲆⲆ: "img/night-accessory86.png",
    ⵠΔⲆⲆᐃⲆΔ: "img/day-accessory87.png",
    ΔⵠΔΔⲆΔⵠ: "img/night-accessory87.png",
    ⵠΔᐃΔⲆᐃᐃ: "img/day-accessory88.png",
    ᐃΔΔᐃⲆΔΔ: "img/night-accessory88.png",
    ΔΔⵠⵠΔⲆⵠ: "img/day-accessory89.png",
    ᐃⵠΔΔΔᐃᐃ: "img/night-accessory89.png",
    ⵠᐃᐃⵠⲆⲆΔ: "img/day-accessory90.png",
    ΔΔⵠΔᐃΔᐃ: "img/night-accessory90.png",
    ᐃΔΔⵠᐃⵠⵠ: "img/day-accessory91.png",
    ΔΔⵠⵠᐃⲆⲆ: "img/night-accessory91.png",
    ΔⲆΔⲆᐃⵠⲆ: "img/day-accessory92.png",
    ᐃⵠⲆⲆⲆᐃⵠ: "img/night-accessory92.png",
    ᐃⲆⵠᐃⵠⲆᐃ: "img/day-accessory93.png",
    ΔⲆᐃⲆΔⲆⵠ: "img/night-accessory93.png",
    ΔⵠⲆⵠⵠⲆⲆ: "img/day-accessory94.png",
    ᐃΔⲆⲆΔⲆⵠ: "img/night-accessory94.png",
    ⵠⲆᐃᐃᐃΔΔ: "img/day-accessory95.png",
    ᐃⵠⲆⲆᐃᐃᐃ: "img/night-accessory95.png",
    ΔⵠⲆΔⵠᐃⵠ: "img/day-accessory96.png",
    ΔᐃⵠΔΔᐃΔ: "img/night-accessory96.png",
    ⵠΔΔⵠⲆᐃΔ: "img/day-accessory97.png",
    ΔᐃᐃⵠⵠⵠⲆ: "img/night-accessory97.png",
    ᐃⲆⲆⲆⵠΔⲆ: "img/day-accessory98.png",
    ᐃΔΔᐃΔΔᐃ: "img/night-accessory98.png",
    ⵠΔᐃΔⲆⲆΔ: "img/day-accessory99.png",
    ΔⲆᐃⲆⵠᐃⲆ: "img/night-accessory99.png",
    ⲆΔΔΔⵠᐃⲆ: "img/day-accessory100.png",
    ⲆΔᐃᐃⵠⵠᐃ: "img/night-accessory100.png",
    ⲆⵠΔⵠⵠΔⲆ: "img/day-accessory101.png",
    ⵠⲆᐃⲆΔⵠⵠ: "img/night-accessory101.png",
    ᐃΔΔᐃⲆⵠⵠ: "img/day-accessory102.png",
    ΔⲆΔⲆⵠⲆΔ: "img/night-accessory102.png",
    ᐃᐃᐃᐃᐃⲆⵠ: "img/day-accessory103.png",
    ⵠᐃᐃΔⵠΔⵠ: "img/night-accessory103.png",
    ⵠⵠⲆΔᐃΔᐃ: "img/day-accessory104.png",
    ᐃⵠⵠΔᐃⲆΔ: "img/night-accessory104.png",
    ⵠΔΔⲆᐃΔⲆ: "img/day-accessory105.png",
    ΔⵠⵠⵠⲆⵠΔ: "img/night-accessory105.png",
    ⵠⲆⲆⵠⵠⵠⲆΔⵠ: "img/day-accessory106.png",
    ⲆⲆⲆᐃⵠⵠᐃᐃᐃ: "img/night-accessory106.png",
    ⲆⵠⲆᐃΔⵠΔΔΔ: "img/day-accessory107.png",
    ⵠᐃⲆΔⲆᐃᐃⲆᐃ: "img/night-accessory107.png",
    ΔⲆΔⲆΔᐃΔ: "img/day-accessory82.png",
    ⵠΔΔⵠⵠᐃΔ: "img/night-accessory82.png",
    ΔⲆⲆᐃΔⵠⲆ: "img/day-book0.png",
    ⵠⵠᐃᐃⲆᐃⲆ: "img/night-book0.png",
    ΔⲆΔᐃⵠⵠΔ: "img/day-book1.png",
    Ⲇⵠᐃⵠᐃᐃⵠ: "img/night-book1.png",
    ⵠⲆᐃΔⲆΔⲆ: "img/day-book2.png",
    ⲆΔᐃᐃᐃΔⵠ: "img/night-book2.png",
    ⵠⲆⲆᐃⲆΔΔ: "img/day-book3.png",
    ⵠᐃᐃᐃᐃⲆΔ: "img/night-book3.png",
    ⵠΔΔΔΔⵠΔ: "img/day-book4.png",
    ⵠᐃᐃΔⵠⲆⵠ: "img/night-book4.png",
    ⲆᐃᐃΔⵠᐃⲆ: "img/day-book5.png",
    ⲆΔΔⲆⵠΔⵠ: "img/night-book5.png",
    ᐃᐃΔΔᐃΔⵠ: "img/day-book6.png",
    ᐃⲆⵠᐃᐃⵠᐃ: "img/night-book6.png",
    ΔᐃᐃⵠⵠⲆᐃ: "img/day-book7.png",
    ⲆⲆΔⲆⲆⵠⲆ: "img/night-book7.png",
    ΔⵠⵠΔΔᐃⵠ: "img/day-book8.png",
    ΔⵠΔⵠᐃΔⵠ: "img/night-book8.png",
    ⵠᐃⵠΔⲆᐃᐃ: "img/day-book9.png",
    ⵠᐃⵠⲆⵠⲆᐃ: "img/night-book9.png",
    Ⲇⵠᐃⵠᐃⵠⵠ: "img/day-book10.png",
    ⵠⲆᐃⲆᐃⲆⲆ: "img/night-book10.png",
    ⲆⵠᐃⲆⲆᐃⲆ: "img/day-book11.png",
    ⲆⲆᐃᐃⵠⵠΔ: "img/night-book11.png",
    ᐃᐃⲆⲆΔⵠⲆ: "img/day-book12.png",
    ⲆⵠⵠᐃᐃⲆⲆ: "img/night-book12.png",
    ᐃΔⵠᐃⵠⲆⵠ: "img/day-book13.png",
    ⵠⲆᐃᐃᐃⵠΔ: "img/night-book13.png",
    ᐃⵠⵠⵠⵠⵠⵠ: "img/day-book14.png",
    ⵠΔⵠⵠⵠⲆⵠ: "img/night-book14.png",
    ΔⵠΔᐃΔⲆⲆ: "img/day-book15.png",
    ⵠΔΔⲆᐃᐃᐃ: "img/night-book15.png",
    ⵠᐃⵠΔⲆⵠⲆ: "img/day-book16.png",
    ⵠⲆΔΔΔⲆΔ: "img/night-book16.png",
    ΔⵠᐃⲆⵠΔΔ: "img/day-book17.png",
    ΔⵠΔᐃΔᐃΔ: "img/night-book17.png",
    ΔᐃⲆᐃᐃᐃᐃ: "img/day-book18.png",
    ᐃⵠⲆᐃⵠⵠⵠ: "img/night-book18.png",
    ΔΔΔⲆᐃΔᐃ: "img/day-book19.png",
    ⲆⵠⵠΔᐃⲆⲆ: "img/night-book19.png",
    ⵠⵠⵠⵠΔⲆΔ: "img/day-book20.png",
    ᐃΔᐃⲆΔΔᐃ: "img/night-book20.png",
    ᐃⲆᐃⵠⲆΔᐃ: "img/day-book21.png",
    ⲆᐃΔᐃⵠΔᐃ: "img/night-book21.png",
    ΔᐃᐃⲆᐃᐃⵠ: "img/day-book22.png",
    ΔᐃᐃⵠⲆΔⲆ: "img/night-book22.png",
    ᐃⲆⲆⵠᐃΔΔ: "img/day-book23.png",
    ᐃⲆⵠΔⲆΔΔ: "img/night-book23.png",
    ⵠⵠᐃⵠⲆⲆᐃ: "img/day-book24.png",
    ⲆⵠᐃᐃᐃᐃΔ: "img/night-book24.png",
    ᐃΔⵠΔΔⵠΔ: "img/day-book25.png",
    ⲆⲆⲆⲆⲆⵠⲆ: "img/night-book25.png",
    ⲆΔⵠⵠⵠⲆⲆ: "img/day-book26.png",
    ⲆᐃⵠⵠⵠᐃⲆ: "img/night-book26.png",
    ⲆⵠⵠⵠΔᐃⵠ: "img/day-book27.png",
    ΔⲆΔⲆᐃⵠⵠ: "img/night-book27.png",
    ⲆᐃΔΔᐃⲆΔ: "img/day-book28.png",
    ᐃΔΔᐃΔᐃΔ: "img/night-book28.png",
    ⵠΔᐃᐃΔⵠⵠ: "img/day-book29.png",
    ᐃΔᐃΔΔᐃᐃ: "img/night-book29.png",
    ⲆᐃⲆᐃᐃⲆΔ: "img/day-book30.png",
    ⵠᐃᐃᐃΔⵠⲆ: "img/night-book30.png",
    ⵠᐃⵠᐃⲆᐃΔ: "img/day-book31.png",
    ⵠⲆᐃⲆΔᐃⵠ: "img/night-book31.png",
    ⵠⵠΔⲆⵠⵠⵠ: "img/day-book32.png",
    ᐃΔⵠⵠᐃⵠΔ: "img/night-book32.png",
    ⵠΔᐃΔᐃᐃⵠ: "img/day-book33.png",
    ⵠⲆᐃᐃΔⲆΔ: "img/night-book33.png",
    ΔᐃⲆⵠᐃⵠⵠ: "img/day-book34.png",
    ΔΔᐃΔⵠΔⵠ: "img/night-book34.png",
    ΔⲆᐃⲆⲆΔᐃ: "img/day-book35.png",
    ⵠᐃⵠⵠᐃᐃⲆ: "img/night-book35.png",
    ⲆᐃⲆᐃⲆⵠᐃ: "img/day-book36.png",
    ΔΔΔᐃᐃᐃᐃ: "img/night-book36.png",
    ⲆⵠΔᐃᐃΔⲆⲆⲆ: "img/day-book37.png",
    ΔᐃⵠΔᐃΔΔᐃⵠ: "img/night-book37.png",
    ΔⲆⲆⲆΔΔΔ: "img/day-book38.png",
    ⵠⵠᐃⵠᐃⵠⲆ: "img/night-book38.png",
    ᐃⲆᐃᐃⲆΔⵠ: "img/day-book39.png",
    ᐃᐃⵠΔⵠⲆᐃ: "img/night-book39.png",
    ᐃⵠⵠⲆⵠᐃΔ: "img/day-book40.png",
    ⵠⵠⵠⵠⵠᐃᐃ: "img/night-book40.png",
    ⵠⵠⵠⵠⵠⲆΔ: "img/day-book41.png",
    ΔΔΔⵠⲆⲆᐃ: "img/night-book41.png",
    ᐃᐃᐃᐃⲆⵠⲆ: "img/day-book42.png",
    ΔΔᐃⲆⲆΔᐃ: "img/night-book42.png",
    ΔᐃΔⲆᐃⲆᐃ: "img/day-book43.png",
    ⲆⵠΔΔΔⲆΔ: "img/night-book43.png",
    ⲆᐃΔᐃΔΔᐃ: "img/day-book44.png",
    ⵠⲆΔⲆΔⵠΔ: "img/night-book44.png",
    ⵠⵠᐃⵠᐃᐃᐃ: "img/day-book45.png",
    ᐃᐃⲆᐃᐃΔΔ: "img/night-book45.png",
    ᐃᐃⲆⲆⵠⲆⲆ: "img/day-book46.png",
    ⵠⵠΔⵠⵠⵠⵠ: "img/night-book46.png",
    ⵠⵠⵠⵠΔⵠᐃ: "img/day-book47.png",
    ΔⵠⲆᐃᐃΔⲆ: "img/night-book47.png",
    ᐃΔᐃⲆⲆΔᐃ: "img/day-book48.png",
    ⵠⵠⲆⲆΔⲆᐃ: "img/night-book48.png",
    ΔΔᐃⲆⵠΔΔ: "img/day-book49.png",
    ⲆΔᐃᐃⵠᐃⲆ: "img/night-book49.png",
    ΔⵠᐃᐃΔᐃᐃ: "img/day-book50.png",
    ᐃⵠⵠⵠᐃⲆΔ: "img/night-book50.png",
    ⵠⲆΔᐃΔΔᐃ: "img/day-crate1.png",
    ᐃᐃⲆΔⵠᐃᐃ: "img/night-crate1.png",
    ⵠⲆΔᐃΔⲆⵠ: "img/day-crate2.png",
    ⵠΔΔΔΔᐃΔ: "img/night-crate2.png",
    ᐃᐃⲆΔⵠᐃⵠ: "img/day-crate3.png",
    ΔᐃⵠᐃᐃᐃΔ: "img/night-crate3.png",
    ᐃⵠⵠⵠᐃᐃΔ: "img/day-crate4.png",
    ⵠⵠᐃΔⲆΔΔ: "img/night-crate4.png",
    ⵠⵠᐃⵠⲆᐃΔ: "img/day-crate5.png",
    ᐃⲆᐃⵠᐃⵠⲆ: "img/night-crate5.png",
    ⵠᐃᐃᐃᐃᐃⵠ: "img/day-crate6.png",
    ⲆⵠⲆⲆⲆΔⲆ: "img/night-crate6.png",
    ΔΔⵠᐃᐃⲆᐃ: "img/day-crate7.png",
    ⲆᐃᐃⵠᐃⲆᐃ: "img/night-crate7.png",
    ⲆⵠⲆᐃΔⲆⲆ: "img/day-crate8.png",
    ⲆⵠΔⲆⲆⲆⲆ: "img/night-crate8.png",
    ΔⵠⵠⵠΔⲆⲆ: "img/day-crate9.png",
    ⲆⵠᐃᐃΔΔⵠ: "img/night-crate9.png",
    ᐃΔᐃΔⵠⵠⵠ: "img/day-crate10.png",
    ⲆⲆᐃⲆᐃⲆⲆ: "img/night-crate10.png",
    ⲆⵠᐃⵠΔᐃΔ: "img/day-crate11.png",
    ᐃⲆΔⲆᐃⲆᐃ: "img/night-crate11.png",
    ᐃΔᐃΔᐃⲆΔ: "img/day-crate12.png",
    ⵠΔⵠᐃⵠᐃᐃ: "img/night-crate12.png",
    ᐃᐃΔⵠⲆⲆⵠ: "img/day-crate13.png",
    ᐃᐃΔⲆⵠⵠΔ: "img/night-crate13.png",
    ΔⵠΔⲆⵠᐃᐃ: "img/day-crate14.png",
    ᐃΔᐃᐃⵠⵠΔ: "img/night-crate14.png",
    ⵠΔΔΔΔΔⲆ: "img/day-crate15.png",
    ΔᐃᐃΔⵠⲆⵠ: "img/night-crate15.png",
    ΔΔⲆⵠΔᐃᐃ: "img/day-crate16.png",
    ⵠᐃᐃᐃΔᐃⲆ: "img/night-crate16.png",
    ⵠⲆᐃΔΔⲆⲆ: "img/day-crate17.png",
    ⲆᐃⲆΔⲆΔᐃ: "img/night-crate17.png",
    ᐃⲆⵠⵠΔΔⵠ: "img/day-crate18.png",
    ΔΔᐃᐃᐃⵠΔ: "img/night-crate18.png",
    ᐃⲆΔᐃⲆⲆΔ: "img/day-crate19.png",
    ᐃΔΔᐃⵠᐃᐃ: "img/night-crate19.png",
    ⵠⲆⵠᐃΔᐃⵠ: "img/day-crate20.png",
    ⵠⵠⵠⵠᐃᐃⵠ: "img/night-crate20.png",
    ⲆᐃⵠⲆⲆᐃΔ: "img/day-crate21.png",
    ᐃᐃⵠΔΔᐃᐃ: "img/night-crate21.png",
    ΔᐃⲆᐃΔⲆⲆ: "img/day-crate22.png",
    ᐃΔΔⵠΔᐃⵠ: "img/night-crate22.png",
    ΔΔⵠⲆⲆᐃⵠ: "img/day-crate23.png",
    ΔΔⵠᐃΔΔΔ: "img/night-crate23.png",
    ᐃⵠΔⵠⲆΔᐃ: "img/day-crate24.png",
    ΔⵠΔⲆⲆⲆⲆ: "img/night-crate24.png",
    ⲆΔᐃⵠⲆⵠⲆ: "img/day-crate25.png",
    ΔΔⵠⲆᐃⲆⲆ: "img/night-crate25.png",
    ⵠΔᐃⵠⲆⲆⲆ: "img/day-crate26.png",
    ⲆΔⵠΔᐃⲆΔ: "img/night-crate26.png",
    ⵠΔΔⲆᐃᐃⲆ: "img/day-crate27.png",
    ⲆΔᐃⲆᐃΔⵠ: "img/night-crate27.png",
    ⲆⲆᐃⵠᐃⵠⵠ: "img/day-crate28.png",
    ΔᐃⲆⲆⲆΔᐃ: "img/night-crate28.png",
    ᐃΔᐃⵠⵠⵠⲆ: "img/day-crate29.png",
    ⵠⲆⵠᐃⲆⵠⲆ: "img/night-crate29.png",
    ⲆⲆⲆⲆΔΔΔ: "img/day-crate30.png",
    ΔᐃⲆⵠⲆᐃⲆ: "img/night-crate30.png",
    ΔΔᐃⲆᐃᐃⲆ: "img/day-crate31.png",
    ⲆⲆⵠⲆᐃᐃⵠ: "img/night-crate31.png",
    ⲆⵠⲆⵠⲆⵠⵠ: "img/day-crate32.png",
    ΔᐃⵠΔᐃⵠΔ: "img/night-crate32.png",
    ΔᐃᐃᐃᐃⵠⲆ: "img/day-crate33.png",
    ᐃΔⵠⲆΔⲆⵠ: "img/night-crate33.png",
    ᐃⲆΔⵠⵠⵠⵠ: "img/day-crate34.png",
    ΔⵠΔΔᐃΔⲆ: "img/night-crate34.png",
    ᐃᐃᐃᐃⲆΔᐃ: "img/day-crate35.png",
    ΔⲆᐃⵠᐃᐃᐃ: "img/night-crate35.png",
    ⲆⵠⲆᐃⵠⲆΔ: "img/day-crate36.png",
    ⲆⲆΔⵠᐃᐃⲆ: "img/night-crate36.png",
    ⲆᐃⵠⵠΔᐃΔ: "img/day-crate37.png",
    ⲆᐃᐃᐃⲆᐃⵠ: "img/night-crate37.png",
    ᐃⲆⵠⵠⵠⵠΔ: "img/day-crate38.png",
    ⲆⵠΔΔΔΔⵠ: "img/night-crate38.png",
    ⲆⵠᐃΔᐃΔᐃ: "img/day-crate39.png",
    ΔⲆⵠᐃⲆΔᐃ: "img/night-crate39.png",
    ⵠᐃⵠᐃⲆⵠᐃ: "img/day-crate40.png",
    ΔΔⵠⲆⵠᐃⲆ: "img/night-crate40.png",
    ᐃᐃⲆⲆⲆⵠᐃ: "img/day-crate41.png",
    ⵠᐃⲆⲆⲆᐃⲆ: "img/night-crate41.png",
    ⲆΔᐃⵠⵠⵠᐃ: "img/day-crate42.png",
    ⲆΔⵠⲆⲆⵠᐃ: "img/night-crate42.png",
    ⲆᐃⲆⲆΔᐃΔ: "img/day-crate43.png",
    ΔⵠΔᐃⲆΔⵠ: "img/night-crate43.png",
    ΔᐃⲆᐃⲆⵠⵠ: "img/day-crate44.png",
    ΔⲆᐃᐃⲆⵠΔ: "img/night-crate44.png",
    ΔⲆⲆⵠⲆᐃᐃ: "img/day-crate45.png",
    ᐃⲆⵠⵠⲆⵠⲆ: "img/night-crate45.png",
    ᐃⵠΔΔⲆⵠᐃ: "img/day-crate46.png",
    ⵠᐃⵠᐃⲆⲆⵠ: "img/night-crate46.png",
    ⲆⵠᐃⵠⵠΔⲆ: "img/day-crate47.png",
    ΔΔⲆⲆΔⵠΔ: "img/night-crate47.png",
    ᐃⵠⲆⵠⲆⵠᐃ: "img/day-crate48.png",
    ΔⵠΔΔⲆᐃᐃ: "img/night-crate48.png",
    ᐃΔΔⵠΔΔⲆ: "img/day-crate49.png",
    ⲆⲆⵠⵠΔΔᐃ: "img/night-crate49.png",
    ⵠᐃΔⵠΔᐃⲆ: "img/day-crate50.png",
    ⲆΔⵠΔᐃⲆⵠ: "img/night-crate50.png",
    ⵠⵠΔⲆΔⲆᐃ: "img/day-crate51.png",
    ⲆⵠΔΔⵠΔᐃ: "img/night-crate51.png",
    ⲆΔⵠⵠΔΔΔ: "img/day-crate52.png",
    ᐃΔᐃⵠΔᐃⵠ: "img/night-crate52.png",
    ⵠΔⲆᐃⵠΔⵠ: "img/day-crate53.png",
    ⵠᐃΔⵠⲆᐃᐃ: "img/night-crate53.png",
    ⲆΔⲆⲆⲆⲆᐃ: "img/day-crate54.png",
    ΔΔⵠⲆⵠΔᐃ: "img/night-crate54.png",
    ᐃΔΔΔΔΔⵠ: "img/day-crate55.png",
    ⵠᐃᐃΔᐃΔⲆ: "img/night-crate55.png",
    ΔⵠⲆᐃⵠᐃⵠ: "img/day-crate56.png",
    ΔΔΔᐃΔᐃΔ: "img/night-crate56.png",
    ΔⲆⵠⵠⲆΔⲆ: "img/day-crate57.png",
    ΔᐃⵠᐃΔΔⵠ: "img/night-crate57.png",
    ⵠᐃᐃⲆⲆⲆⲆ: "img/day-crate58.png",
    ᐃⲆⵠⵠᐃⵠΔ: "img/night-crate58.png",
    ⲆᐃⲆᐃⵠⵠⵠ: "img/day-crate59.png",
    ⲆΔⲆⲆⵠⲆⲆ: "img/night-crate59.png",
    ⲆᐃᐃⵠΔΔⲆ: "img/day-crate60.png",
    ⵠΔΔⲆᐃΔⵠ: "img/night-crate60.png",
    ΔⲆᐃⲆΔⲆᐃ: "img/day-crate61.png",
    ΔᐃΔⲆᐃᐃⲆ: "img/night-crate61.png",
    ΔᐃᐃΔⵠⲆⲆ: "img/day-crate62.png",
    ΔⵠⵠᐃⲆⵠⵠ: "img/night-crate62.png",
    ⲆΔΔⵠⵠⲆⲆ: "img/day-crate63.png",
    ᐃⵠΔⵠⵠΔⲆ: "img/night-crate63.png",
    ⲆⲆΔⵠΔⵠⲆ: "img/day-crate64.png",
    ⵠⵠⵠΔᐃⲆⵠ: "img/night-crate64.png",
    ᐃⲆⲆΔΔⵠⲆ: "img/day-crate65.png",
    ΔΔᐃΔⵠⲆΔ: "img/night-crate65.png",
    ⵠᐃⲆⲆᐃΔⲆ: "img/day-crate66.png",
    ΔᐃΔⵠⲆⵠⵠ: "img/night-crate66.png",
    ΔⵠᐃΔΔⲆᐃ: "img/day-crate67.png",
    ΔⵠᐃΔΔᐃᐃ: "img/night-crate67.png",
    ΔⲆΔⵠⲆΔΔ: "img/day-crate68.png",
    ⲆᐃᐃⲆΔⵠΔ: "img/night-crate68.png",
    ⲆᐃⲆΔΔΔⲆ: "img/day-crate69.png",
    ⵠⵠⵠΔⲆᐃΔ: "img/night-crate69.png",
    ΔᐃⲆⲆⲆⲆⵠ: "img/day-crate70.png",
    ᐃⲆⵠⲆⲆⵠΔ: "img/night-crate70.png",
    ⲆⲆⵠⲆᐃⵠⲆ: "img/day-crate71.png",
    ⵠᐃⲆᐃⵠⵠΔ: "img/night-crate71.png",
    ᐃⵠᐃΔⵠᐃⵠ: "img/day-crate72.png",
    ΔᐃⲆᐃΔⲆᐃ: "img/night-crate72.png",
    ΔⲆΔᐃⲆⲆᐃ: "img/day-crate73.png",
    ⲆⲆⲆⵠΔⲆⲆ: "img/night-crate73.png",
    ⵠⲆᐃΔⲆⵠⲆ: "img/day-crate74.png",
    ᐃⲆᐃΔᐃⲆⵠ: "img/night-crate74.png",
    ΔᐃᐃΔⵠᐃᐃ: "img/day-crate75.png",
    ᐃⲆᐃⵠⵠΔᐃ: "img/night-crate75.png",
    ⵠⵠΔΔⵠⲆΔ: "img/day-crate76.png",
    ⵠⲆⵠⲆⲆⵠⵠ: "img/night-crate76.png",
    ⲆⵠᐃⲆᐃⵠⲆ: "img/day-crate77.png",
    ΔⲆⲆᐃⵠΔΔ: "img/night-crate77.png",
    ᐃΔΔⲆⲆΔΔ: "img/day-crate78.png",
    ⵠⲆΔΔⲆΔᐃ: "img/night-crate78.png",
    ⵠⲆⵠⵠᐃⵠᐃ: "img/day-crate79.png",
    ⵠᐃⵠᐃⵠⵠⲆ: "img/night-crate79.png",
    ⲆΔᐃΔⵠΔⲆ: "img/day-herb0.png",
    ⵠᐃᐃΔⲆΔⵠ: "img/day-herb1.png",
    ΔⵠᐃΔΔⵠᐃ: "img/day-herb2.png",
    ⲆᐃΔⲆΔⵠⲆ: "img/day-herb3.png",
    ΔⵠᐃⲆΔΔⲆ: "img/day-herb4.png",
    ΔⲆᐃⵠᐃⲆΔ: "img/day-herb5.png",
    ⵠⲆΔᐃᐃⲆΔ: "img/day-herb6.png",
    ᐃⲆΔⲆⵠΔᐃ: "img/day-herb7.png",
    ᐃⵠⲆΔᐃⵠⲆ: "img/day-herb8.png",
    ⵠᐃⲆⲆΔΔΔ: "img/day-herb9.png",
    ΔⲆⵠΔⲆⵠⵠ: "img/day-herb10.png",
    ᐃΔΔΔⵠⵠⲆ: "img/day-herb11.png",
    ᐃΔΔΔΔΔΔ: "img/day-herb12.png",
    ᐃᐃΔΔΔⵠᐃ: "img/day-herb13.png",
    ⲆⲆᐃΔⲆᐃᐃ: "img/day-herb14.png",
    ΔΔⲆΔⲆⵠⲆ: "img/day-herb15.png",
    ⲆᐃᐃᐃΔᐃⲆ: "img/day-shell0.png",
    ⵠᐃⵠᐃᐃⵠΔ: "img/day-shell1.png",
    ᐃⲆᐃᐃᐃΔⵠ: "img/day-shell2.png",
    ΔᐃⲆⵠΔᐃⵠ: "img/day-leaf1.png",
    ΔⵠⲆⲆⲆᐃᐃ: "img/day-leaf2.png",
    ⵠᐃⲆⵠⵠΔΔ: "img/day-leaf3.png",
    ΔΔΔᐃⵠⵠⲆ: "img/day-leaf4.png",
    ᐃⵠⵠᐃᐃⲆⲆ: "img/day-leaf5.png",
    ᐃᐃⵠΔⵠⵠᐃ: "img/day-leaf6.png",
    ᐃΔᐃᐃᐃᐃⵠ: "img/day-leaf7.png",
    ⲆⲆⲆΔⲆᐃΔ: "img/day-leaf8.png",
    ⲆΔⵠΔⲆⲆᐃ: "img/day-rock0.png",
    ⵠΔⵠΔΔᐃΔ: "img/day-rock1.png",
    ᐃⲆΔᐃᐃⵠᐃ: "img/day-rock2.png",
    ΔΔⲆⵠᐃⵠⵠ: "img/day-rock3.png",
    ᐃΔⲆΔᐃⵠⵠ: "img/day-rock4.png",
    ᐃⲆⵠⲆᐃⵠᐃ: "img/day-rock5.png",
    ᐃᐃⵠⵠᐃⲆⲆ: "img/day-rock6.png",
    ⵠΔⲆⲆᐃᐃᐃ: "img/day-rock7.png",
    ⵠⵠΔⲆᐃΔΔ: "img/day-rock8.png",
    ⲆⲆⲆⲆᐃⵠⵠ: "img/day-rock9.png",
    ⵠⵠⲆᐃΔⵠΔ: "img/day-rock10.png",
    ᐃⵠΔᐃΔⵠΔ: "img/day-rock11.png",
    ⵠⵠⲆΔΔᐃⲆ: "img/day-rock12.png",
    ᐃΔᐃⵠⵠⲆᐃ: "img/day-rock13.png",
    ΔΔΔⵠΔⲆⵠ: "img/day-flower1.png",
    ΔᐃⵠΔⵠⵠⵠ: "img/day-flower2.png",
    ⵠΔⲆⲆⵠⲆΔ: "img/day-flower3.png",
    ΔⵠΔⵠⲆⲆⵠ: "img/day-flower4.png",
    ⲆⲆΔⲆⵠᐃⲆ: "img/day-flower5.png",
    ⵠⲆⲆΔᐃⵠᐃ: "img/day-flower6.png",
    ᐃΔΔⲆⲆᐃⲆ: "img/day-flower7.png",
    ᐃΔΔⵠΔⵠⵠ: "img/day-flower8.png",
    ΔᐃⵠⲆⲆΔΔ: "img/day-flower9.png",
    ⵠⵠⲆΔᐃⵠⲆ: "img/day-herb16.png",
    ᐃΔⵠΔᐃᐃᐃ: "img/day-herb17.png",
    ⵠᐃᐃΔⲆΔⲆ: "img/day-herb18.png",
    ᐃⵠᐃΔⲆⲆΔ: "img/day-herb19.png",
    ⵠᐃΔᐃΔⲆᐃ: "img/day-herb20.png",
    ΔⲆⵠᐃΔⵠⵠ: "img/day-herb21.png",
    ⵠⵠⵠⲆᐃⲆᐃ: "img/night-herb0.png",
    ⵠΔᐃΔⲆⵠⲆ: "img/night-herb1.png",
    ΔᐃⵠⲆᐃⵠⵠ: "img/night-herb2.png",
    ᐃᐃᐃⵠⵠⲆΔ: "img/night-herb3.png",
    ⲆⵠⲆΔⲆⵠⵠ: "img/night-herb4.png",
    ᐃⲆⵠᐃᐃᐃᐃ: "img/night-herb5.png",
    ⵠⵠⵠΔⵠⲆⲆ: "img/night-herb6.png",
    ᐃΔⲆⵠΔΔⲆ: "img/night-herb7.png",
    ΔⵠᐃΔⵠᐃⲆ: "img/night-herb8.png",
    ⵠᐃⲆᐃΔᐃⲆ: "img/night-herb9.png",
    ⲆⵠᐃⲆⵠⲆⲆ: "img/night-herb10.png",
    ᐃᐃᐃⲆᐃⲆΔ: "img/night-herb11.png",
    ΔⵠⵠⲆᐃΔᐃ: "img/night-herb12.png",
    ⵠᐃⵠΔⲆΔᐃ: "img/night-herb13.png",
    ΔᐃᐃΔᐃⵠⲆ: "img/night-herb14.png",
    ΔⵠⲆᐃⵠⲆΔ: "img/night-herb15.png",
    ⵠΔⲆⵠⵠⲆⲆ: "img/night-shell0.png",
    ⲆᐃᐃⵠᐃⲆⵠ: "img/night-shell1.png",
    ⵠⵠⲆΔⵠⵠⲆ: "img/night-shell2.png",
    ⵠΔⲆΔⵠⵠΔ: "img/night-leaf1.png",
    ΔⲆⵠⵠⵠⲆⵠ: "img/night-leaf2.png",
    ΔΔⵠΔΔΔⵠ: "img/night-leaf3.png",
    ⲆⲆΔᐃⵠᐃᐃ: "img/night-leaf4.png",
    ᐃᐃⲆᐃᐃᐃⵠ: "img/night-leaf5.png",
    ΔⲆⲆⲆⲆⲆᐃ: "img/night-leaf6.png",
    ΔⲆⲆᐃΔᐃⵠ: "img/night-leaf7.png",
    ⵠᐃᐃⲆⵠΔⵠ: "img/night-leaf8.png",
    ⲆⵠⲆⲆⵠᐃΔ: "img/night-rock0.png",
    ⲆⵠΔⵠΔᐃⵠ: "img/night-rock1.png",
    ⵠⲆⲆⲆᐃᐃⵠ: "img/night-rock2.png",
    ᐃⲆⵠⵠΔⲆⵠ: "img/night-rock3.png",
    ⲆⲆⲆⵠᐃΔⵠ: "img/night-rock4.png",
    ⵠⵠᐃΔⲆΔⲆ: "img/night-rock5.png",
    ᐃᐃΔΔⵠⲆΔ: "img/night-rock6.png",
    ⵠⲆᐃⵠⲆⵠΔ: "img/night-rock7.png",
    ᐃΔΔΔⲆΔᐃ: "img/night-rock8.png",
    ⵠⵠᐃⲆⲆΔⵠ: "img/night-rock9.png",
    ⵠⲆⲆΔᐃⵠΔ: "img/night-rock10.png",
    ΔᐃⵠᐃⲆⲆΔ: "img/night-rock11.png",
    ⵠΔΔⲆⵠᐃⲆ: "img/night-rock12.png",
    ⲆⵠⵠᐃⲆⵠΔ: "img/night-rock13.png",
    ᐃᐃᐃᐃΔᐃΔ: "img/night-flower1.png",
    ᐃⵠΔΔⵠΔⵠ: "img/night-flower2.png",
    ᐃⵠⲆΔΔⲆⲆ: "img/night-flower3.png",
    ⵠᐃΔⵠᐃⲆⵠ: "img/night-flower4.png",
    ΔᐃᐃⲆᐃΔⵠ: "img/night-flower5.png",
    ⲆΔΔᐃᐃⵠⲆ: "img/night-flower6.png",
    ⲆΔΔⲆⵠᐃⲆ: "img/night-flower7.png",
    ᐃⲆᐃⲆΔᐃΔ: "img/night-flower8.png",
    ⵠᐃᐃΔΔΔᐃ: "img/night-flower9.png",
    ⲆΔⲆΔⵠⲆⲆ: "img/night-herb16.png",
    ⵠⲆⵠⵠᐃΔΔ: "img/night-herb17.png",
    ⲆⲆⵠΔᐃᐃᐃ: "img/night-herb18.png",
    ⲆΔⵠⵠΔΔⵠ: "img/night-herb19.png",
    ΔⵠΔⵠⵠⵠⵠ: "img/night-herb20.png",
    ᐃⲆⵠⵠⵠΔⲆ: "img/night-herb21.png",
    ⲆⵠⵠΔΔΔᐃ: "img/day-river000-010-000.png",
    ⵠⲆᐃⵠᐃΔⲆ: "img/day-river000-010-010.png",
    ⵠⲆΔΔⲆⲆⵠ: "img/day-river000-011-000.png",
    ⲆΔⲆΔΔᐃⵠ: "img/day-river000-011-010.png",
    ΔΔⲆᐃⵠΔΔ: "img/day-river000-011-011.png",
    ⲆΔⲆⲆᐃⲆΔ: "img/day-river000-110-000.png",
    ᐃΔⵠⵠⵠᐃΔ: "img/day-river000-110-010.png",
    ⲆⵠᐃⲆᐃⵠⵠ: "img/day-river000-110-110.png",
    ⲆⵠΔⵠⵠⵠⵠ: "img/day-river000-111-000.png",
    ΔⲆᐃᐃⵠΔⵠ: "img/day-river000-111-010.png",
    ΔᐃᐃᐃⵠᐃⲆ: "img/day-river000-111-011.png",
    ⵠᐃᐃΔΔⵠⲆ: "img/day-river000-111-110.png",
    ⲆⵠΔᐃΔⲆΔ: "img/day-river000-111-111.png",
    ᐃⲆⵠᐃΔⵠΔ: "img/day-river010-010-000.png",
    ᐃΔⵠᐃⵠᐃΔ: "img/day-river010-010-010.png",
    ⲆⲆᐃΔⲆΔᐃ: "img/day-river010-011-000.png",
    ⵠⲆᐃᐃⵠⵠⵠ: "img/day-river010-011-010.png",
    ⲆᐃⵠⵠⵠⵠⲆ: "img/day-river010-011-011.png",
    ⵠᐃΔⵠΔᐃᐃ: "img/day-river010-110-000.png",
    ⵠⲆⵠᐃⵠΔⲆ: "img/day-river010-110-010.png",
    ᐃⵠⵠᐃΔⲆΔ: "img/day-river010-110-110.png",
    ᐃⵠΔΔᐃΔⲆ: "img/day-river010-111-000.png",
    ⵠΔΔΔⲆΔᐃ: "img/day-river010-111-010.png",
    ⲆⵠΔⲆΔᐃⲆ: "img/day-river010-111-011.png",
    ΔᐃⵠⲆⵠⵠⲆ: "img/day-river010-111-110.png",
    ⵠⵠᐃⲆᐃⵠΔ: "img/day-river010-111-111.png",
    ⲆⲆⲆᐃⲆⲆΔ: "img/day-river011-011-000.png",
    ΔⵠΔᐃΔⵠᐃ: "img/day-river011-011-010.png",
    ᐃⲆⵠⵠⲆⵠᐃ: "img/day-river011-011-011.png",
    ⵠᐃⵠⲆΔᐃᐃ: "img/day-river011-111-000.png",
    ΔⲆᐃᐃⲆⵠⲆ: "img/day-river011-111-010.png",
    ΔΔΔⲆΔᐃⵠ: "img/day-river011-111-011.png",
    ⵠⲆⲆⲆᐃᐃΔ: "img/day-river011-111-110.png",
    ᐃΔᐃⲆⵠⲆⵠ: "img/day-river011-111-111.png",
    ⲆΔⲆⲆⲆᐃⲆ: "img/day-river110-110-000.png",
    ᐃΔⵠⲆⵠᐃⲆ: "img/day-river110-110-010.png",
    ⲆΔⲆⵠΔᐃΔ: "img/day-river110-110-110.png",
    ⵠΔᐃᐃⲆⲆⲆ: "img/day-river110-111-000.png",
    ⲆΔᐃᐃⵠᐃᐃ: "img/day-river110-111-010.png",
    ΔⵠⲆⲆⲆΔΔ: "img/day-river110-111-011.png",
    ⲆⵠⵠᐃΔⵠΔ: "img/day-river110-111-110.png",
    ᐃΔᐃΔΔΔΔ: "img/day-river110-111-111.png",
    ᐃΔⲆⵠᐃΔⵠ: "img/day-river111-111-011.png",
    ΔᐃΔᐃⵠⵠᐃ: "img/day-river111-111-110.png",
    ᐃΔⲆⵠᐃΔⵠ: "img/day-river111-111-011.png",
    ⵠⵠΔⲆᐃⵠᐃ: "img/day-river111-111-000.png",
    ⵠⵠⲆⵠⲆⵠⲆ: "img/day-river111-111-111.png",
    ΔⵠΔⵠⵠΔⲆ: "img/day-river111-111-010.png",
    ᐃᐃΔⲆᐃⵠᐃ: "img/night-river000-010-000.png",
    ᐃⲆⲆᐃⵠΔᐃ: "img/night-river000-010-010.png",
    ΔΔⲆΔⲆⲆΔ: "img/night-river000-011-000.png",
    ⲆⵠⲆΔᐃⵠⲆ: "img/night-river000-011-010.png",
    ᐃᐃⵠΔΔᐃΔ: "img/night-river000-011-011.png",
    ΔⵠΔⲆΔΔⵠ: "img/night-river000-110-000.png",
    ᐃᐃⲆⵠᐃΔⲆ: "img/night-river000-110-010.png",
    ᐃᐃΔⲆᐃᐃᐃ: "img/night-river000-110-110.png",
    ⲆᐃⲆⲆΔΔΔ: "img/night-river000-111-000.png",
    ⲆΔⵠΔᐃᐃΔ: "img/night-river000-111-010.png",
    ᐃⲆⵠⲆᐃⲆΔ: "img/night-river000-111-011.png",
    ⵠⲆⵠᐃⲆⲆⵠ: "img/night-river000-111-110.png",
    ⲆⲆᐃᐃⵠⲆⲆ: "img/night-river000-111-111.png",
    ⵠⲆⵠᐃΔⲆΔ: "img/night-river010-010-000.png",
    ΔⵠⵠⲆΔⲆΔ: "img/night-river010-010-010.png",
    ΔⲆᐃᐃᐃΔᐃ: "img/night-river010-011-000.png",
    ᐃΔᐃⵠⵠΔⵠ: "img/night-river010-011-010.png",
    ΔⲆⲆᐃᐃᐃⲆ: "img/night-river010-011-011.png",
    ΔⲆⲆΔⲆᐃᐃ: "img/night-river010-110-000.png",
    ΔⵠⵠΔᐃᐃᐃ: "img/night-river010-110-010.png",
    ΔᐃⵠⵠΔᐃΔ: "img/night-river010-110-110.png",
    ΔᐃⵠᐃΔΔΔ: "img/night-river010-111-000.png",
    ΔⵠⲆⲆΔᐃⲆ: "img/night-river010-111-010.png",
    ⲆΔΔΔⵠᐃΔ: "img/night-river010-111-011.png",
    ᐃⲆΔΔⵠⲆⲆ: "img/night-river010-111-110.png",
    ⵠΔᐃᐃⲆΔᐃ: "img/night-river010-111-111.png",
    ⲆⵠⲆⵠⲆⵠΔ: "img/night-river011-011-000.png",
    ᐃⵠⲆᐃⵠⵠᐃ: "img/night-river011-011-010.png",
    ᐃⵠⵠᐃΔΔⲆ: "img/night-river011-011-011.png",
    ᐃⲆΔⵠΔⵠΔ: "img/night-river011-111-000.png",
    ᐃᐃⲆΔᐃⲆᐃ: "img/night-river011-111-010.png",
    ⲆᐃΔⵠⲆⵠΔ: "img/night-river011-111-011.png",
    ⵠᐃΔΔΔΔⵠ: "img/night-river011-111-110.png",
    ⲆΔⵠᐃΔⲆᐃ: "img/night-river011-111-111.png",
    ⵠⲆⲆΔⲆᐃⵠ: "img/night-river110-110-000.png",
    Ⲇⵠⵠⵠᐃⵠⵠ: "img/night-river110-110-010.png",
    ⵠᐃⵠᐃΔⲆᐃ: "img/night-river110-110-110.png",
    ᐃⵠᐃᐃΔΔⲆ: "img/night-river110-111-000.png",
    ⲆⵠⲆᐃⵠΔᐃ: "img/night-river110-111-010.png",
    ΔⲆⵠⵠⵠΔⵠ: "img/night-river110-111-011.png",
    ⵠⲆΔᐃΔᐃⲆ: "img/night-river110-111-110.png",
    ⵠᐃΔᐃᐃᐃⲆ: "img/night-river110-111-111.png",
    ᐃⲆΔΔΔΔⵠ: "img/night-river111-111-011.png",
    ΔⲆⲆⵠⵠⲆⵠ: "img/night-river111-111-110.png",
    ᐃⲆΔΔΔΔⵠ: "img/night-river111-111-011.png",
    ⵠΔᐃⲆⵠΔⵠ: "img/night-river111-111-000.png",
    ⵠΔⵠΔΔⲆⲆ: "img/night-river111-111-111.png",
    ΔⲆⵠᐃⵠᐃⲆ: "img/night-river111-111-010.png",
    ⲆⲆⵠⲆⵠⵠΔ: "img/day-pebblecompo1.png",
    ᐃΔᐃΔⵠ: "img/day-pebblecompo2.png",
    ⵠⵠΔⲆΔ: "img/day-pebblecompo3.png",
    ⵠⵠⵠΔᐃΔⲆ: "img/day-pebblecompo4.png",
    ⵠΔⲆΔΔ: "img/day-pebblecompo5.png",
    Δᐃⵠⵠⵠ: "img/day-pebblecompo6.png",
    ᐃΔᐃⵠΔ: "img/day-pebblecompo7.png",
    ᐃΔⵠΔⵠⲆⵠ: "img/day-pebblecompo8.png",
    ᐃⲆⲆⲆⵠᐃⵠ: "img/day-pebblecompo9.png",
    ᐃⵠⵠⵠⵠⲆΔ: "img/day-pebblecompo10.png",
    ΔΔᐃⵠᐃ: "img/day-pebblecompo11.png",
    ⵠⲆⵠⲆᐃΔⲆ: "img/day-pebblecompo12.png",
    ⵠΔᐃⲆⵠⵠᐃ: "img/day-pebblecompo13.png",
    ⲆᐃΔⲆⵠⵠⲆ: "img/day-pebblecompo14.png",
    ᐃⲆᐃⵠᐃⵠᐃ: "img/day-pebblecompo15.png",
    ᐃⲆΔⵠᐃⲆΔ: "img/day-pebblecompo16.png",
    ⲆⵠⲆⵠΔ: "img/day-pebblecompo17.png",
    ΔᐃᐃⲆΔⵠΔ: "img/day-pebblecompo18.png",
    ⲆⵠⵠΔΔⲆⲆ: "img/day-pebblecompo19.png",
    ᐃΔᐃᐃΔ: "img/day-pebblecompo20.png",
    ᐃⲆΔⵠⲆ: "img/day-pebblecompo21.png",
    ⵠΔⵠⵠᐃᐃⵠ: "img/day-pebblecompo22.png",
    ⵠⵠΔⲆⲆΔⵠ: "img/day-pebblecompo23.png",
    ⲆΔⲆⲆⵠⲆⵠ: "img/day-pebblecompo24.png",
    ⵠⲆⵠⲆᐃ: "img/day-pebblecompo25.png",
    ΔⲆⲆΔⵠ: "img/day-pebblecompo26.png",
    ⲆⵠΔᐃⵠⲆᐃ: "img/day-pebblecompo27.png",
    ⲆᐃⵠΔᐃ: "img/day-pebblecompo28.png",
    ⲆⵠⲆᐃⵠΔⵠ: "img/night-pebblecompo1.png",
    ⲆΔᐃᐃᐃ: "img/night-pebblecompo2.png",
    ΔⲆⵠⵠⵠ: "img/night-pebblecompo3.png",
    ⵠΔⵠⲆᐃⵠΔ: "img/night-pebblecompo4.png",
    ⲆΔᐃⲆΔ: "img/night-pebblecompo5.png",
    ΔⲆⲆⵠⵠ: "img/night-pebblecompo6.png",
    ⵠⲆⲆⵠΔ: "img/night-pebblecompo7.png",
    ⲆΔᐃⲆⵠⵠᐃ: "img/night-pebblecompo8.png",
    ⲆⲆⲆⲆᐃⲆΔ: "img/night-pebblecompo9.png",
    ΔᐃᐃᐃⵠΔⵠ: "img/night-pebblecompo10.png",
    ᐃΔⵠⵠⵠ: "img/night-pebblecompo11.png",
    ⵠΔᐃⵠᐃⵠⵠ: "img/night-pebblecompo12.png",
    ⵠⵠⲆⲆⵠⲆᐃ: "img/night-pebblecompo13.png",
    ΔΔΔΔⲆΔΔ: "img/night-pebblecompo14.png",
    ΔⲆᐃⲆᐃⵠⲆ: "img/night-pebblecompo15.png",
    ᐃᐃΔᐃΔΔᐃ: "img/night-pebblecompo16.png",
    ᐃΔᐃⵠⵠ: "img/night-pebblecompo17.png",
    ᐃΔΔΔΔⲆⲆ: "img/night-pebblecompo18.png",
    ᐃⲆᐃᐃΔⲆⵠ: "img/night-pebblecompo19.png",
    ΔⵠⵠΔΔ: "img/night-pebblecompo20.png",
    ⵠᐃⲆⲆᐃ: "img/night-pebblecompo21.png",
    ⲆΔΔΔᐃⵠⵠ: "img/night-pebblecompo22.png",
    ᐃⲆΔΔΔⵠᐃ: "img/night-pebblecompo23.png",
    ⵠΔᐃΔⵠⵠⵠ: "img/night-pebblecompo24.png",
    ᐃⵠⵠⲆⵠ: "img/night-pebblecompo25.png",
    ΔᐃⵠᐃⲆ: "img/night-pebblecompo26.png",
    ⲆᐃΔⵠᐃⲆⲆ: "img/night-pebblecompo27.png",
    ⵠᐃᐃⵠᐃ: "img/night-pebblecompo28.png",
    ⲆΔΔΔᐃⲆΔ: "img/day-baby-mammoth.png",
    ΔⲆΔⵠΔⲆⵠ: "img/day-baby-mammoth-tamed.png",
    ΔⲆᐃᐃΔᐃⲆ: "img/day-baby-mammoth-angry.png",
    ᐃᐃᐃⵠⵠΔⵠ: "img/night-baby-mammoth.png",
    ⲆᐃΔⵠΔⵠⲆ: "img/night-baby-mammoth-tamed.png",
    ⲆⵠⲆⵠΔᐃᐃ: "img/night-baby-mammoth-angry.png",
    ΔᐃⲆⲆⲆᐃΔ: "img/inv-mammoth-out.png",
    ⵠⲆⲆⲆⵠᐃᐃ: "img/inv-mammoth-in.png",
    ⵠΔⵠⲆⵠΔⵠ: "img/inv-mammoth-click.png",
    ᐃΔⲆᐃᐃᐃᐃ: "img/hurt-baby-mammoth.png",
    ⵠⵠⲆᐃΔΔΔ: "img/baby-mammoth-step.png",
    ΔⲆⵠᐃⲆᐃΔ: "img/day-flower-hat.png",
    ΔΔⵠΔⵠΔⲆ: "img/night-flower-hat.png",
    ᐃⲆᐃⲆΔⲆⵠ: "img/inv-flower-hat-out.png",
    ⲆⲆᐃΔᐃⵠⵠ: "img/inv-flower-hat-in.png",
    ⲆᐃᐃᐃᐃⲆΔ: "img/inv-flower-hat-click.png",
    ᐃΔΔᐃΔᐃⵠ: "img/day-fur-hat.png",
    ⲆᐃⵠΔᐃⲆⵠ: "img/night-fur-hat.png",
    ᐃⲆΔᐃΔⲆΔ: "img/inv-fur-hat-out.png",
    ᐃⲆᐃΔⲆⲆⵠ: "img/inv-fur-hat-in.png",
    ⵠⲆⲆⲆⲆᐃᐃ: "img/inv-fur-hat-click.png",
    ⲆⵠⲆⲆⲆⲆΔ: "img/day-mammoth.png",
    ΔⲆⵠⲆᐃΔΔ: "img/night-mammoth.png",
    ⲆⲆⲆⲆᐃⲆᐃ: "img/hurt-mammoth.png",
    ᐃⵠⲆΔⵠⲆⵠ: "img/inv-mammoth-fur-out.png",
    ⵠᐃᐃⵠᐃⵠⲆ: "img/inv-mammoth-fur-in.png",
    ⲆΔᐃΔⲆⵠᐃ: "img/inv-mammoth-fur-click.png",
    ᐃΔⲆᐃⵠᐃΔ: "img/inv-wood-bow-out.png",
    ᐃⵠᐃΔⲆΔΔ: "img/inv-wood-bow-in.png",
    ⲆΔᐃⲆⵠⵠⲆ: "img/inv-wood-bow-click.png",
    ⲆΔΔⵠᐃᐃΔ: "img/inv-wood-arrow-out.png",
    ⵠⲆᐃⵠⲆΔⲆⵠΔ: "img/inv-wood-arrow-in.png",
    ⵠⲆᐃΔᐃⲆⲆⲆᐃ: "img/inv-wood-arrow-click.png",
    ⲆᐃΔΔΔᐃΔⲆⲆ: "img/day-wood-bow2.png",
    ⲆᐃᐃⵠⵠⲆᐃⲆⲆ: "img/night-wood-bow2.png",
    ⲆⵠⲆᐃⵠΔⲆ: "img/day-wood-arrow.png",
    ⵠⲆᐃⲆΔΔᐃ: "img/night-wood-arrow.png",
    ⵠᐃⵠⲆⵠΔᐃⲆΔ: "img/inv-stone-bow-out.png",
    ΔⵠΔᐃⵠⲆᐃᐃⲆ: "img/inv-stone-bow-in.png",
    ⲆΔΔⵠⲆᐃΔᐃⲆ: "img/inv-stone-bow-click.png",
    ΔΔⵠⵠᐃΔⲆⵠⲆ: "img/inv-stone-arrow-out.png",
    ᐃⵠⲆⵠⲆⲆᐃⵠᐃ: "img/inv-stone-arrow-in.png",
    ΔᐃⵠᐃΔᐃᐃᐃⵠ: "img/inv-stone-arrow-click.png",
    ⵠᐃⲆⵠᐃΔⲆᐃΔ: "img/day-stone-bow.png",
    ᐃΔⲆΔⵠΔⲆᐃⵠ: "img/night-stone-bow.png",
    ΔⲆᐃⲆᐃᐃⲆ: "img/day-stone-arrow.png",
    ⵠΔⲆᐃⵠⵠΔ: "img/night-stone-arrow.png",
    ΔᐃᐃⵠΔⲆᐃⲆⵠ: "img/inv-gold-bow-out.png",
    ⲆⲆⲆᐃⲆⵠΔᐃⵠ: "img/inv-gold-bow-in.png",
    ⲆⵠⲆⲆΔⲆⲆⲆⵠ: "img/inv-gold-bow-click.png",
    ⵠⲆⵠΔⲆⲆⲆᐃΔ: "img/inv-gold-arrow-out.png",
    ⵠⲆⵠΔᐃⵠⲆᐃΔ: "img/inv-gold-arrow-in.png",
    ΔΔΔᐃⵠⵠᐃⲆΔ: "img/inv-gold-arrow-click.png",
    ᐃⵠⲆΔⲆⲆⲆΔⲆ: "img/day-gold-bow.png",
    ⲆⲆΔΔⵠΔᐃⵠᐃ: "img/night-gold-bow.png",
    ΔⵠΔΔⵠⲆⵠ: "img/day-gold-arrow.png",
    ᐃⲆᐃᐃⲆⲆᐃ: "img/night-gold-arrow.png",
    ⲆⲆⲆᐃᐃΔⵠⲆⲆ: "img/inv-diamond-bow-out.png",
    ᐃⵠⲆⲆΔᐃⵠⵠᐃ: "img/inv-diamond-bow-in.png",
    ΔΔⲆᐃᐃⲆⵠⵠⵠ: "img/inv-diamond-bow-click.png",
    ⵠᐃᐃⵠⲆⵠⲆᐃΔ: "img/inv-diamond-arrow-out.png",
    ΔΔⲆΔΔΔᐃⵠⵠ: "img/inv-diamond-arrow-in.png",
    ΔⲆⲆΔᐃⵠⲆᐃⲆ: "img/inv-diamond-arrow-click.png",
    ⵠΔΔⲆⲆⵠⵠᐃᐃ: "img/day-diamond-bow.png",
    ⲆΔⲆᐃᐃⲆᐃΔⵠ: "img/night-diamond-bow.png",
    ΔⵠΔΔⵠⵠᐃ: "img/day-diamond-arrow.png",
    ΔⵠᐃᐃⵠΔᐃ: "img/night-diamond-arrow.png",
    ᐃΔΔᐃⲆᐃᐃᐃⲆ: "img/inv-amethyst-bow-out.png",
    ⵠᐃΔⵠΔᐃΔⲆᐃ: "img/inv-amethyst-bow-in.png",
    ΔΔⵠΔⲆⲆᐃᐃᐃ: "img/inv-amethyst-bow-click.png",
    ⲆⵠⵠⵠⵠᐃΔⲆⵠ: "img/inv-amethyst-arrow-out.png",
    ΔⵠΔΔΔⲆᐃᐃΔ: "img/inv-amethyst-arrow-in.png",
    ᐃᐃΔᐃᐃⲆᐃΔΔ: "img/inv-amethyst-arrow-click.png",
    ΔΔΔᐃΔⵠΔᐃⵠ: "img/day-amethyst-bow.png",
    ΔΔᐃᐃᐃᐃⲆⲆⲆ: "img/night-amethyst-bow.png",
    ⵠⵠΔᐃΔⲆⲆ: "img/day-amethyst-arrow.png",
    ⲆⵠⲆⵠᐃᐃᐃ: "img/night-amethyst-arrow.png",
    ⲆⵠᐃⲆⲆⵠⵠⲆⲆ: "img/inv-dragon-bow-out.png",
    ᐃΔᐃⵠⲆΔⵠⵠⵠ: "img/inv-dragon-bow-in.png",
    ⵠΔⲆΔⲆᐃⲆⵠⲆ: "img/inv-dragon-bow-click.png",
    ΔⵠᐃᐃᐃⵠᐃΔᐃ: "img/inv-dragon-arrow-out.png",
    ⲆΔⵠⲆⲆⲆᐃⲆⲆ: "img/inv-dragon-arrow-in.png",
    ⵠΔᐃⲆᐃΔⲆⵠΔ: "img/inv-dragon-arrow-click.png",
    ⵠᐃᐃⲆΔΔᐃⲆΔ: "img/day-dragon-bow.png",
    ⵠⲆⲆΔΔⲆΔⵠΔ: "img/night-dragon-bow.png",
    ⲆⵠⲆᐃᐃΔⵠ: "img/day-dragon-arrow.png",
    ⲆᐃⵠⲆᐃⵠⵠ: "img/night-dragon-arrow.png",
    ⲆⵠᐃⵠⵠᐃⵠⲆΔ: "img/inv-reidite-bow-out.png",
    ᐃⲆⲆⵠⲆⲆΔᐃΔ: "img/inv-reidite-bow-in.png",
    ΔΔⲆⲆᐃⲆΔΔᐃ: "img/inv-reidite-bow-click.png",
    ΔⲆⲆⵠΔⲆⲆⵠΔ: "img/inv-reidite-arrow-out.png",
    ⲆⵠᐃⲆᐃⲆⲆⲆᐃ: "img/inv-reidite-arrow-in.png",
    ⲆⲆΔᐃᐃΔⵠᐃⲆ: "img/inv-reidite-arrow-click.png",
    ⵠᐃⵠᐃᐃᐃΔⵠⲆ: "img/day-reidite-bow.png",
    ᐃⲆᐃΔΔᐃᐃⲆⵠ: "img/night-reidite-bow.png",
    ΔⲆΔᐃⵠⲆΔ: "img/day-reidite-arrow.png",
    ᐃΔᐃⵠΔΔⲆΔᐃ: "img/night-reidite-arrow.png",
    ⵠΔⵠⲆⲆⵠⵠⵠⵠ: "img/inv-wooden-axe-out.png",
    ᐃⲆᐃᐃⵠΔⵠᐃΔ: "img/inv-wooden-axe-in.png",
    ⵠΔΔⲆⵠⵠᐃⲆⵠ: "img/inv-wooden-axe-click.png",
    ⵠⵠⲆⲆΔⵠⵠᐃⵠ: "img/day-wooden-axe.png",
    ⲆⵠⵠᐃΔⲆΔᐃⲆ: "img/night-wooden-axe.png",
    ⵠⲆⵠΔΔΔⲆᐃⲆ: "img/inv-stone-axe-out.png",
    ΔⲆⲆΔᐃΔⲆᐃᐃ: "img/inv-stone-axe-in.png",
    ᐃᐃᐃⲆⲆⲆⵠΔᐃ: "img/inv-stone-axe-click.png",
    ᐃⵠⵠⲆⲆΔΔᐃⵠ: "img/day-stone-axe.png",
    ᐃⵠΔᐃⵠᐃⵠⵠᐃ: "img/night-stone-axe.png",
    ⵠΔᐃᐃⵠᐃΔⲆᐃ: "img/inv-golden-axe-out.png",
    ⵠⵠⵠΔⵠⲆΔⲆⵠ: "img/inv-golden-axe-in.png",
    ΔⲆⵠΔᐃΔᐃⲆᐃ: "img/inv-golden-axe-click.png",
    ᐃⵠᐃⵠΔᐃⲆⲆⲆ: "img/day-golden-axe.png",
    ⵠΔᐃⲆⲆΔᐃᐃⲆ: "img/night-golden-axe.png",
    ⵠⲆⲆΔΔΔⵠᐃᐃ: "img/inv-diamond-axe-out.png",
    ⵠΔΔΔⵠⲆⲆⵠᐃ: "img/inv-diamond-axe-in.png",
    ⵠⵠᐃⵠⵠⵠᐃⲆⲆ: "img/inv-diamond-axe-click.png",
    ΔⲆⵠᐃᐃΔⲆⲆⵠ: "img/day-diamond-axe.png",
    ᐃⲆΔΔᐃⲆᐃⵠⵠ: "img/night-diamond-axe.png",
    ⵠⲆⲆᐃᐃᐃΔⲆᐃ: "img/inv-amethyst-axe-out.png",
    ᐃⵠΔⵠΔⲆⵠⲆᐃ: "img/inv-amethyst-axe-in.png",
    ⲆⲆΔᐃΔⲆⲆᐃⲆ: "img/inv-amethyst-axe-click.png",
    ΔΔΔⵠᐃⵠⲆⲆᐃ: "img/day-amethyst-axe.png",
    ΔᐃΔⵠⵠΔⲆᐃⲆ: "img/night-amethyst-axe.png",
    ⵠⲆᐃᐃⵠᐃⵠⵠᐃ: "img/inv-reidite-axe-out.png",
    ⲆⲆⵠᐃⲆΔᐃⲆᐃ: "img/inv-reidite-axe-in.png",
    ⵠΔᐃⲆΔⵠᐃᐃᐃ: "img/inv-reidite-axe-click.png",
    ᐃⲆⵠⲆᐃᐃⲆΔᐃ: "img/day-reidite-axe.png",
    ΔΔⵠΔᐃᐃⵠᐃⵠ: "img/night-reidite-axe.png",
    ᐃⵠΔΔᐃⵠΔ: "img/bandage-activated.png",
    ᐃⵠⲆΔᐃᐃⵠ: "img/auto-feed.png",
    ⲆⲆⵠⵠⲆⵠⲆ: "img/stop-regeneration.png",
    ᐃᐃⲆⲆᐃⲆᐃ: "img/stop-regeneration2.png",
    ⲆᐃⲆⲆⵠᐃΔⲆΔ: "img/day-wood-platform.png",
    ⵠΔⵠΔΔⵠⲆΔⲆ: "img/night-wood-platform.png",
    ᐃⲆⲆⵠΔᐃᐃⲆᐃ: "img/inv-wood-platform-in.png",
    ᐃⲆΔᐃⲆⵠᐃᐃΔ: "img/inv-wood-platform-out.png",
    ⵠᐃΔⲆΔⵠΔΔΔ: "img/inv-wood-platform-click.png",
    ᐃᐃⵠᐃᐃⵠᐃⵠΔ: "img/day-wood-shield.png",
    ΔⲆΔⵠⵠᐃⲆΔΔ: "img/night-wood-shield.png",
    ΔΔⲆᐃΔΔⵠⲆᐃ: "img/day-stone-shield.png",
    ⲆᐃᐃⵠⵠΔⲆᐃᐃ: "img/night-stone-shield.png",
    ⲆᐃΔⲆΔΔⲆᐃⵠ: "img/day-gold-shield.png",
    ᐃⲆⵠⲆΔⵠΔΔⵠ: "img/night-gold-shield.png",
    ⲆᐃⲆΔᐃⲆⲆΔᐃ: "img/day-diamond-shield.png",
    ΔᐃᐃᐃⵠᐃⵠⲆΔ: "img/night-diamond-shield.png",
    ΔᐃΔⲆⵠΔⲆΔᐃ: "img/day-amethyst-shield.png",
    ⲆⵠᐃⲆΔⵠⲆⲆΔ: "img/night-amethyst-shield.png",
    ⵠᐃⵠⵠⲆᐃᐃⲆⵠ: "img/day-reidite-shield.png",
    ΔΔᐃⵠΔⵠⵠⵠΔ: "img/night-reidite-shield.png",
    ΔⵠⵠⵠⲆᐃΔⵠⲆ: "img/inv-wood-shield-in.png",
    ᐃⵠΔΔᐃᐃⲆⵠΔ: "img/inv-wood-shield-out.png",
    ᐃⵠᐃⲆΔⲆᐃΔΔ: "img/inv-wood-shield-click.png",
    ΔⵠΔⲆᐃΔΔⲆΔ: "img/inv-stone-shield-in.png",
    ᐃⵠΔⲆⲆᐃⲆΔⲆ: "img/inv-stone-shield-out.png",
    ᐃΔⵠⵠⲆⲆⲆΔᐃ: "img/inv-stone-shield-click.png",
    ⲆⲆᐃⵠᐃⲆΔᐃⵠ: "img/inv-gold-shield-in.png",
    ⵠⵠⲆᐃΔΔⵠΔⲆ: "img/inv-gold-shield-out.png",
    ⲆⲆΔⲆⵠⵠⲆᐃⲆ: "img/inv-gold-shield-click.png",
    ΔⵠΔΔΔᐃⵠΔᐃ: "img/inv-diamond-shield-in.png",
    ⲆΔⵠΔⵠᐃⲆⵠⵠ: "img/inv-diamond-shield-out.png",
    ⲆⲆⵠᐃΔⵠᐃⲆⵠ: "img/inv-diamond-shield-click.png",
    ΔΔᐃᐃᐃⵠᐃⲆⲆ: "img/inv-amethyst-shield-in.png",
    ᐃᐃⲆⵠⲆΔⲆΔⲆ: "img/inv-amethyst-shield-out.png",
    ⲆΔⵠᐃᐃΔᐃⲆⲆ: "img/inv-amethyst-shield-click.png",
    ᐃᐃΔᐃᐃⲆᐃᐃⵠ: "img/inv-reidite-shield-in.png",
    ⲆⲆᐃᐃⵠⵠΔⲆᐃ: "img/inv-reidite-shield-out.png",
    ⵠᐃᐃΔᐃⲆⵠΔΔ: "img/inv-reidite-shield-click.png",
    ΔⲆᐃΔⵠᐃᐃΔⵠ: "img/day-machete.png",
    ⵠⲆⲆⲆⵠⲆᐃⲆᐃ: "img/night-machete.png",
    ΔⵠⲆᐃⲆΔᐃⲆΔ: "img/inv-machete-in.png",
    ⵠΔᐃⵠΔⲆᐃΔⵠ: "img/inv-machete-out.png",
    ⲆⵠΔⵠⲆⲆᐃⵠᐃ: "img/inv-machete-click.png"
  };
  ⲆⲆΔΔΔⵠⲆ = [{}];
  ⲆⲆΔΔΔⵠⲆ[0].stringify = function (a) {
    var b = new Uint8Array(new ArrayBuffer(a.length));
    for (var c = 0; a.length > c; c++) {
      b[c] = a[c];
    }
    return b;
  };
  const Vb = 10;
  ⲆᐃᐃΔⲆⵠΔ = {};
  ᐃⵠΔΔΔᐃⲆⵠⵠ = {};
  for (var _b in ᐃΔ) {
    ⲆᐃᐃΔⲆⵠΔ[_b] = ᐃΔ[_b];
  }
  const Xb = 6;
  function Zb(b, c, d, e, f, g) {
    const a = (2147483587 + (33122 + b) * 2147483629) % 2147483647;
    const i = ~(g & 9236) & (g | 9236);
    const j = yb(a, 0, (2531011 + (45972 + d) * 214013) % 4294967296, (8 << (e >> 8 & 255)) + (16 << (e >> 16 & 255)) + (0 << (e >> 24 & 255)) + (24 << (e & 255)), ~(f & 63801) & (f | 63801));
    Mw(i, a);
    return (j | 11698) & ~(j & 11698);
  }
  function $b(b, c, d, e, f) {
    const i = (24 << (b >> 16 & 255)) + (8 << (b >> 24 & 255)) + (0 << (b & 255)) + (16 << (b >> 8 & 255));
    const a = (1013904223 + (27529 + c) * 1664525) % 4294967296;
    const j = ((d + 54819) * 2147483629 + 2147483587) % 2147483647;
    const k = ~(e & 47509) & (e | 47509);
    const h = (16 << (f >> 16 & 255)) + (24 << (f & 255)) + (0 << (f >> 24 & 255)) + (8 << (f >> 8 & 255));
    const g = Zb(i, 0, j, k, h, i);
    Zb(a, 0, k, h, i, a);
    return g ^ 36963;
  }
  const ed = 14;
  Ⲇⵠ = [];
  Δᐃⵠ = {};
  Δᐃⵠ.ᐃΔᐃΔΔ = 0;
  const id = 7;
  const td = 9;
  Δᐃⵠ.ⲆⲆⲆⵠ = 1;
  Δᐃⵠ.ⵠᐃΔⲆ = 2;
  Δᐃⵠ.ᐃΔⲆΔ = 3;
  Δᐃⵠ.ⲆⵠᐃΔ = 4;
  Δᐃⵠ.ΔⵠᐃⲆ = 5;
  Δᐃⵠ.ⲆⵠᐃⲆ = 6;
  Δᐃⵠ.ⲆΔⲆᐃΔΔⵠ = 7;
  Δᐃⵠ.ⲆⲆᐃᐃⲆ = 8;
  const nd = 15;
  ⲆⵠΔⵠ = {};
  ᐃⵠⵠΔ = [];
  ⲆⲆΔⲆᐃΔⵠ = function (a, b) {
    for (var c = 0; c < a.length; c++) {
      if (b === a[c].id) {
        return c;
      }
    }
    return -1;
  };
  const od = 100;
  var ad = [];
  function Rt(a, b) {
    for (var c = 0; ad.length > c; c += b) {
      var d = ad[c];
      if (d[0] === a) {
        sd(d[0], d[1], d[2], d[3]);
      }
    }
  }
  function sd(b, c, d, e) {
    var f = ᐃⵠⵠΔ[b];
    if (Ra !== f) {
      for (var i = 0; i < 2; i++) {
        var j = f[c][i];
        var k = e * 193 / Gx.ⵠᐃΔΔΔ;
        var m = d * 193 / Gx.ⲆΔⲆΔΔ;
        var n = j.width / 3.5;
        var o = j.height / 3.5;
        Ⲇⵠ[818][i].drawImage(j, k - n / 2, m - o / 2, n, o);
        k = e * 600 / Gx.ⵠᐃΔΔΔ;
        m = d * 600 / Gx.ⲆΔⲆΔΔ;
        n = j.width / 1.5;
        o = j.height / 1.5;
        Ⲇⵠ[819][i].drawImage(j, k - n / 2, m - o / 2, n, o);
      }
    }
  }
  function hd(a, b, c, d) {
    if (b) {
      a.fillStyle = b;
      a.fill();
    }
    if (c) {
      a.lineWidth = d;
      a.strokeStyle = c;
      a.stroke();
    }
  }
  function gd(b, c, d, e, f, g) {
    if (e < g * 2) {
      g = e / 2;
    }
    if (g * 2 > f) {
      g = f / 2;
    }
    if (g < 0) {
      g = 0;
    }
    b.beginPath();
    b.moveTo(c + g, d);
    b.arcTo(c + e, d, c + e, d + f, g);
    b.arcTo(c + e, d + f, c, d + f, g);
    b.arcTo(c, d + f, c, d, g);
    b.arcTo(c, d, c + e, d, g);
    b.closePath();
  }
  ᐃⵠⲆΔⲆⵠⲆΔᐃ = function () {
    for (var b = 0; b < 2; b++) {
      Ⲇⵠ[818][b].clearRect(0, 0, 193, 193);
      Ⲇⵠ[818][b].drawImage(ᐃⵠⵠΔ.MAP[b], 0, 0, 193, 193);
      Ⲇⵠ[819][b].clearRect(0, 0, 600, 600);
      Ⲇⵠ[819][b].drawImage(ᐃⵠⵠΔ.MAP[b], 0, 0, 600, 600);
      for (var c = Gx.ᐃΔⲆΔⵠ.length - 1; c >= 0; c--) {
        var d = Gx.ᐃΔⲆΔⵠ[c];
        var f = d.x1 * 193 / (Gx.ⵠᐃΔΔΔ * 100);
        var j = d.y1 * 193 / (Gx.ⲆΔⲆΔΔ * 100);
        var k = d.w * 193 / (Gx.ⵠᐃΔΔΔ * 100);
        var m = d.Ⲇᐃⵠ * 193 / (Gx.ⲆΔⲆΔΔ * 100);
        var p = d.x1 * 600 / (Gx.ⵠᐃΔΔΔ * 100);
        var q = d.y1 * 600 / (Gx.ⲆΔⲆΔΔ * 100);
        var u = d.w * 600 / (Gx.ⵠᐃΔΔΔ * 100);
        var v = d.Ⲇᐃⵠ * 600 / (Gx.ⲆΔⲆΔΔ * 100);
        if (Gx.ΔΔⵠⲆⵠ === d.ΔⵠΔ) {
          Ⲇⵠ[818][b].drawImage(ᐃⵠⵠΔ.FOREST[b], f, j, k, m);
          Ⲇⵠ[819][b].drawImage(ᐃⵠⵠΔ.FOREST[b], p, q, u, v);
        }
        if (Gx.ᐃΔΔᐃΔⲆⲆ === d.ΔⵠΔ) {
          Ⲇⵠ[818][b].drawImage(ᐃⵠⵠΔ.WINTER[b], f, j, k, m);
          Ⲇⵠ[819][b].drawImage(ᐃⵠⵠΔ.WINTER[b], p, q, u, v);
        }
        if (Gx.ⲆⲆⲆⲆⵠΔⵠ === d.ΔⵠΔ) {
          Ⲇⵠ[818][b].drawImage(ᐃⵠⵠΔ.LAVA[b], f, j, k, m);
          Ⲇⵠ[819][b].drawImage(ᐃⵠⵠΔ.LAVA[b], p, q, u, v);
        }
        if (d.ΔⵠΔ === Gx.ᐃⵠⵠⵠᐃⲆⵠ) {
          Ⲇⵠ[818][b].drawImage(ᐃⵠⵠΔ.CAVE[b], f, j, k, m);
          Ⲇⵠ[819][b].drawImage(ᐃⵠⵠΔ.CAVE[b], p, q, u, v);
        }
        if (Gx.ⵠᐃᐃⲆⲆⵠᐃ === d.ΔⵠΔ) {
          Ⲇⵠ[818][b].drawImage(ᐃⵠⵠΔ.DESERT[b], f, j, k, m);
          Ⲇⵠ[819][b].drawImage(ᐃⵠⵠΔ.DESERT[b], p, q, u, v);
        }
      }
    }
  };
  ᐃᐃΔⵠᐃⲆΔΔΔ = function () {
    ⲆⵠΔⵠ = {
      Δⵠⵠⵠᐃ: [{
        id: 0,
        ΔⲆⵠ: ᐃΔ.ⲆᐃⵠᐃᐃΔⲆ,
        ΔΔΔ: ᐃΔ.ⵠⵠⲆΔΔΔᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃᐃⵠⵠⵠᐃⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ΔᐃⵠⵠΔⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔᐃΔΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Starver"
      }, {
        id: 3,
        ΔⲆⵠ: ᐃΔ.ⲆⲆΔⲆⲆⲆᐃ,
        ΔΔΔ: ᐃΔ.ᐃⲆⲆⲆⵠᐃΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⵠᐃⲆⵠΔⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⲆΔⵠⵠᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔᐃΔΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Angry"
      }, {
        id: 2,
        ΔⲆⵠ: ᐃΔ.ⵠΔΔᐃⵠⵠᐃ,
        ΔΔΔ: ᐃΔ.ⵠΔΔⲆᐃᐃΔ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⲆᐃΔⲆⲆΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔᐃᐃⵠΔⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔᐃΔΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Sad"
      }, {
        id: 9,
        ΔⲆⵠ: ᐃΔ.ᐃⵠⵠᐃⵠⵠⲆ,
        ΔΔΔ: ᐃΔ.ⲆⲆΔΔΔᐃⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠⵠⲆⵠΔⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⲆⵠΔⵠⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔᐃΔΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Happy 1"
      }, {
        id: 1,
        ΔⲆⵠ: ᐃΔ.ⵠΔᐃᐃΔⲆᐃ,
        ΔΔΔ: ᐃΔ.ⲆΔⲆⲆΔⵠΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⵠΔⲆᐃⵠᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⲆⲆᐃⵠᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "What?"
      }, {
        id: 4,
        ΔⲆⵠ: ᐃΔ.ⲆⵠⲆΔᐃⲆⲆ,
        ΔΔΔ: ᐃΔ.ᐃᐃⵠᐃᐃᐃᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃᐃⵠΔⵠⲆⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃᐃᐃⲆΔⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Suspicious"
      }, {
        id: 5,
        ΔⲆⵠ: ᐃΔ.ⵠᐃΔᐃᐃⵠⲆ,
        ΔΔΔ: ᐃΔ.ᐃⲆᐃⵠᐃⲆᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⵠⵠᐃⲆⲆⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⲆᐃᐃⵠᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Scar"
      }, {
        id: 6,
        ΔⲆⵠ: ᐃΔ.ΔᐃⵠⲆⵠᐃΔ,
        ΔΔΔ: ᐃΔ.ΔΔⵠᐃΔⵠΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆΔᐃᐃⵠⲆᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆΔΔⵠΔΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "In Trouble"
      }, {
        id: 7,
        ΔⲆⵠ: ᐃΔ.ΔΔⵠⵠΔᐃⲆ,
        ΔΔΔ: ᐃΔ.ⵠⲆⲆᐃᐃΔⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ΔΔΔⲆⵠⲆⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆᐃⲆᐃⵠⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Cute"
      }, {
        id: 8,
        ΔⲆⵠ: ᐃΔ.ⵠⵠᐃⲆᐃⲆΔ,
        ΔΔΔ: ᐃΔ.ⲆⵠⵠᐃⵠⲆᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃΔᐃᐃᐃⵠΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⲆⵠᐃᐃⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Bored 1"
      }, {
        id: 10,
        ΔⲆⵠ: ᐃΔ.ⵠⵠⲆⵠΔⵠΔ,
        ΔΔΔ: ᐃΔ.ⲆⵠᐃΔⵠᐃᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⲆⵠⵠᐃᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃΔⵠᐃΔΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Happy 2"
      }, {
        id: 11,
        ΔⲆⵠ: ᐃΔ.ⵠΔⲆⵠⵠΔΔ,
        ΔΔΔ: ᐃΔ.ⵠᐃⲆΔⵠΔⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠΔΔΔⲆΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⲆⲆⵠᐃᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Crazy"
      }, {
        id: 12,
        ΔⲆⵠ: ᐃΔ.ⵠΔᐃⲆᐃⲆᐃ,
        ΔΔΔ: ᐃΔ.ⵠΔⲆⵠΔΔᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃΔᐃᐃⵠⲆΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔᐃᐃΔᐃΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Happy 3"
      }, {
        id: 13,
        ΔⲆⵠ: ᐃΔ.ⲆᐃⲆⵠΔᐃⲆ,
        ΔΔΔ: ᐃΔ.ⲆⵠⲆΔⵠΔᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⲆᐃΔᐃᐃΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⵠⲆΔᐃⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Very Cute"
      }, {
        id: 14,
        ΔⲆⵠ: ᐃΔ.ΔΔΔΔⵠᐃⵠ,
        ΔΔΔ: ᐃΔ.ᐃⵠⲆⵠΔΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⵠⲆᐃⲆᐃΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⵠᐃⵠΔⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Curious"
      }, {
        id: 15,
        ΔⲆⵠ: ᐃΔ.ᐃⲆΔᐃΔΔⵠ,
        ΔΔΔ: ᐃΔ.ᐃⵠΔΔΔⲆΔ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃΔᐃΔΔᐃΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⲆᐃᐃᐃⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Bored 2"
      }, {
        id: 16,
        ΔⲆⵠ: ᐃΔ.ΔᐃΔᐃⲆⲆΔ,
        ΔΔΔ: ᐃΔ.ΔΔⵠᐃᐃⲆⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ΔᐃⵠΔΔΔᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⵠᐃΔⲆⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Happy 4"
      }, {
        id: 17,
        ΔⲆⵠ: ᐃΔ.ΔⲆⵠⵠᐃⲆᐃ,
        ΔΔΔ: ᐃΔ.ⵠⵠᐃᐃΔⵠⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠⲆⲆᐃΔΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠΔᐃᐃΔΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Scar 2"
      }, {
        id: 18,
        ΔⲆⵠ: ᐃΔ.ⲆᐃⵠΔΔⲆⵠ,
        ΔΔΔ: ᐃΔ.ᐃⵠᐃⵠⲆⵠᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⲆΔⵠⵠᐃⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠΔᐃⲆⲆⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Sick"
      }, {
        id: 19,
        ΔⲆⵠ: ᐃΔ.ᐃⲆΔⲆΔⵠⲆ,
        ΔΔΔ: ᐃΔ.ⲆⵠⵠⲆⵠᐃᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ΔᐃⵠΔⲆⲆᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃᐃⵠΔᐃⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Somnambule"
      }, {
        id: 24,
        ΔⲆⵠ: ᐃΔ.ᐃⲆᐃⵠΔΔΔ,
        ΔΔΔ: ᐃΔ.ⵠⲆⲆᐃᐃⲆΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⵠⵠⲆᐃΔΔ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⲆᐃⵠΔⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Pixelbitie",
        name: "Feel Bad"
      }, {
        id: 23,
        ΔⲆⵠ: ᐃΔ.ΔⵠΔⵠⵠⵠΔ,
        ΔΔΔ: ᐃΔ.ΔΔΔΔⵠⲆΔ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⲆⲆⲆΔᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⵠⲆΔⲆΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Pixelbitie",
        name: "Mmmh."
      }, {
        id: 103,
        ΔⲆⵠ: ᐃΔ.ΔᐃⲆⲆⵠᐃΔ,
        ΔΔΔ: ᐃΔ.ⵠᐃⵠΔΔΔᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⲆⲆᐃᐃᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⵠⲆᐃΔⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Panic"
      }, {
        id: 105,
        ΔⲆⵠ: ᐃΔ.ⵠⲆⲆⲆΔⵠⵠ,
        ΔΔΔ: ᐃΔ.ⲆᐃⵠⲆᐃΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.Ⲇᐃⵠᐃᐃⵠⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠΔᐃΔᐃⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Hypnotic"
      }, {
        id: 106,
        ΔⲆⵠ: ᐃΔ.ΔⵠⵠⵠᐃⲆⵠ,
        ΔΔΔ: ᐃΔ.ΔⵠⵠᐃΔᐃᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⵠⲆⵠⲆΔΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⵠΔⲆⲆΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Stars in the eyes"
      }, {
        id: 220,
        ΔⲆⵠ: ᐃΔ.ⵠᐃⵠⵠᐃᐃⵠ,
        ΔΔΔ: ᐃΔ.ᐃⵠⲆⲆᐃⵠΔ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠⲆⲆⵠⲆⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃᐃⵠⲆΔⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Seams"
      }, {
        id: 104,
        ΔⲆⵠ: ᐃΔ.ΔⲆⵠΔᐃᐃΔ,
        ΔΔΔ: ᐃΔ.ΔΔⲆⵠⵠⵠΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆΔΔᐃᐃΔⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⲆⲆⵠΔⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Scared at night"
      }, {
        id: 20,
        ΔⲆⵠ: ᐃΔ.ΔᐃⵠⵠⲆΔⵠ,
        ΔΔΔ: ᐃΔ.ᐃⲆⲆΔⵠⲆⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⲆᐃᐃⲆⲆⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆᐃⲆⲆᐃⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Vampire"
      }, {
        id: 21,
        ΔⲆⵠ: ᐃΔ.ⵠⵠⵠΔᐃⲆΔ,
        ΔΔΔ: ᐃΔ.ᐃⲆⵠᐃᐃⲆⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠᐃΔΔⲆⵠⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⲆⲆⵠⲆᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Zombie"
      }, {
        id: 22,
        ΔⲆⵠ: ᐃΔ.ⲆᐃⵠⵠⵠΔⵠ,
        ΔΔΔ: ᐃΔ.ΔᐃᐃⵠΔⲆΔ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⵠᐃⵠⲆΔⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆᐃⵠᐃⵠΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Pixelbitie",
        name: "Devaster"
      }, {
        id: 116,
        ΔⲆⵠ: ᐃΔ.ᐃᐃΔⵠⵠⵠᐃ,
        ΔΔΔ: ᐃΔ.ᐃⲆⲆⵠᐃⵠⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ΔΔΔⲆⲆᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⵠΔⲆⵠΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Fukss",
        name: "Dead Devaster"
      }, {
        id: 27,
        ΔⲆⵠ: ᐃΔ.ⵠⲆⵠΔⵠΔⵠ,
        ΔΔΔ: ᐃΔ.ΔΔᐃⵠᐃⲆΔ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⵠⲆᐃⲆΔⲆ,
        ᐃΔⵠⲆ: ᐃΔ.Ⲇⵠⵠᐃⵠᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Winter",
        name: "Cactus"
      }, {
        id: 28,
        ΔⲆⵠ: ᐃΔ.ⵠᐃⵠⲆᐃⲆⲆ,
        ΔΔΔ: ᐃΔ.ΔⵠⲆΔᐃΔᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆΔΔⲆⲆⲆⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ΔΔᐃᐃΔᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Bee"
      }, {
        id: 49,
        ΔⲆⵠ: ᐃΔ.ⵠⲆΔᐃⲆⵠⵠ,
        ΔΔΔ: ᐃΔ.ⵠᐃⵠΔⵠⲆⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⲆΔⵠⲆΔᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ΔΔⲆΔⵠᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Camo Skin"
      }, {
        id: 58,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⲆⲆΔΔΔ,
        ΔΔΔ: ᐃΔ.ΔⵠⵠᐃΔᐃⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⲆᐃⵠᐃΔΔ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃΔⵠⵠⲆⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Blue Limax Skin"
      }, {
        id: 59,
        ΔⲆⵠ: ᐃΔ.ⵠⲆᐃᐃⲆⲆⵠ,
        ΔΔΔ: ᐃΔ.ΔⵠⵠⵠⵠⲆᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃᐃᐃⲆⲆⵠᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆΔᐃΔⲆᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Red Limax Skin"
      }, {
        id: 94,
        ΔⲆⵠ: ᐃΔ.ᐃⲆᐃΔⲆⵠΔ,
        ΔΔΔ: ᐃΔ.ΔΔⵠⲆⵠⲆⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠⵠⲆᐃᐃⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠΔⵠⵠⲆⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Mr. Pumpkin"
      }, {
        id: 109,
        ΔⲆⵠ: ᐃΔ.ⵠΔΔᐃⲆᐃⵠ,
        ΔΔΔ: ᐃΔ.ⲆⲆⲆΔⲆΔᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⲆⲆᐃᐃᐃΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⲆΔⲆΔΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Wood"
      }, {
        id: 114,
        ΔⲆⵠ: ᐃΔ.ⲆⲆⵠⲆⲆⵠᐃ,
        ΔΔΔ: ᐃΔ.ΔᐃΔΔᐃΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.ΔᐃᐃⲆᐃⵠΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⲆᐃΔᐃⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Zebra"
      }, {
        id: 120,
        ΔⲆⵠ: ᐃΔ.ⵠΔᐃᐃⲆᐃⵠ,
        ΔΔΔ: ᐃΔ.ⲆⵠⲆⲆⵠⲆⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ΔᐃⵠⲆⵠᐃⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆᐃΔᐃⵠᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "CrysTal",
        name: "Tiger"
      }, {
        id: 134,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⵠΔᐃΔᐃ,
        ΔΔΔ: ᐃΔ.ᐃᐃⵠⲆᐃΔⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⵠᐃⲆΔᐃⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⵠΔⲆᐃⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Franchestcreator",
        name: "Day or Night"
      }, {
        id: 135,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⵠΔⲆΔⲆ,
        ΔΔΔ: ᐃΔ.ⲆⲆΔΔⲆⵠΔ,
        ⲆⲆⵠΔ: ᐃΔ.ΔΔᐃΔΔⲆⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃΔⲆⵠΔΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Poinet",
        name: "Square Starver"
      }, {
        id: 136,
        ΔⲆⵠ: ᐃΔ.ⲆΔᐃᐃⵠⲆⵠ,
        ΔΔΔ: ᐃΔ.ⵠᐃⲆᐃⵠᐃⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⵠΔⲆⵠΔΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⵠⵠΔΔΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Voodoo Doll"
      }, {
        id: 137,
        ΔⲆⵠ: ᐃΔ.ⵠⲆⵠⲆΔⲆΔ,
        ΔΔΔ: ᐃΔ.ⲆᐃᐃⵠΔΔⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃᐃⵠⲆΔᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ΔΔⲆⲆⵠΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Frankenstein"
      }, {
        id: 138,
        ΔⲆⵠ: ᐃΔ.ᐃⵠⵠΔⲆᐃⲆ,
        ΔΔΔ: ᐃΔ.ⵠᐃⵠⵠᐃΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠⲆⵠⲆᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⵠⵠᐃᐃᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Old Mummy"
      }, {
        id: 139,
        ΔⲆⵠ: ᐃΔ.ᐃΔᐃⵠΔΔᐃ,
        ΔΔΔ: ᐃΔ.ᐃⵠΔⲆΔΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⵠΔⵠΔⲆΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆΔⵠⲆᐃᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Werewolf"
      }, {
        id: 140,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⵠΔⲆᐃᐃ,
        ΔΔΔ: ᐃΔ.ⲆⲆⲆⵠⲆⵠⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠΔⲆᐃΔᐃΔ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃΔⵠⵠⵠⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Old Cthulhu"
      }, {
        id: 141,
        ΔⲆⵠ: ᐃΔ.ΔⵠⵠⵠΔΔⵠ,
        ΔΔΔ: ᐃΔ.ΔⵠᐃᐃⵠΔⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ΔᐃᐃᐃⵠΔΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⲆⵠΔᐃΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Sea Man"
      }, {
        id: 142,
        ΔⲆⵠ: ᐃΔ.ᐃⲆᐃⲆⲆΔᐃ,
        ΔΔΔ: ᐃΔ.ⲆΔΔⲆᐃⲆⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⵠⵠᐃᐃΔⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃΔΔᐃⵠⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Old Pumpkin"
      }, {
        id: 148,
        ΔⲆⵠ: ᐃΔ.ⲆⲆΔⲆⲆⵠⵠ,
        ΔΔΔ: ᐃΔ.ᐃᐃΔⲆⲆΔⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃΔⵠⲆᐃⵠⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⵠⲆⲆⲆᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Old Snowman"
      }, {
        id: 149,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⵠⵠΔΔⲆ,
        ΔΔΔ: ᐃΔ.ⵠᐃᐃᐃⵠⵠΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠᐃⵠⵠⲆΔᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃΔᐃΔⲆⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Old Christmas Tree Man"
      }, {
        id: 150,
        ΔⲆⵠ: ᐃΔ.ᐃΔⵠⲆΔᐃᐃ,
        ΔΔΔ: ᐃΔ.ⲆⲆΔⵠⲆΔⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⲆᐃⲆΔⵠⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠΔᐃᐃΔΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Old Mrs Bell"
      }, {
        id: 151,
        ΔⲆⵠ: ᐃΔ.ⲆᐃΔΔⲆⵠᐃ,
        ΔΔΔ: ᐃΔ.Ⲇᐃⵠⵠⵠᐃᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃᐃⵠⵠⲆⵠⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ΔᐃⵠΔⲆⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Old Elfy"
      }, {
        id: 152,
        ΔⲆⵠ: ᐃΔ.ⲆⵠᐃΔᐃᐃⲆ,
        ΔΔΔ: ᐃΔ.ⲆᐃⵠΔⵠΔⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃΔΔΔᐃⵠᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠΔᐃⲆᐃⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Old Mr Present"
      }, {
        id: 153,
        ΔⲆⵠ: ᐃΔ.ᐃⲆᐃⲆⲆᐃΔ,
        ΔΔΔ: ᐃΔ.ΔⵠⵠⵠⵠⲆⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃᐃⲆⵠⲆⲆᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⵠⲆΔⵠⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "My Dear Old Deer"
      }, {
        id: 154,
        ΔⲆⵠ: ᐃΔ.ⲆΔⵠΔᐃΔΔ,
        ΔΔΔ: ᐃΔ.ᐃᐃⵠΔⵠⲆΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆΔⲆⲆⲆΔⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ΔΔⵠⲆΔⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mr Angel"
      }, {
        id: 155,
        ΔⲆⵠ: ᐃΔ.ᐃⲆΔᐃⵠⲆᐃ,
        ΔΔΔ: ᐃΔ.ΔΔΔΔⵠⵠⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆΔⵠᐃⲆᐃΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⵠΔⲆⵠΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mr Ice Cube"
      }, {
        id: 156,
        ΔⲆⵠ: ᐃΔ.ⵠΔⵠⵠⲆᐃⵠ,
        ΔΔΔ: ᐃΔ.ⵠⵠᐃⵠᐃΔⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃΔΔΔⵠᐃⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⵠᐃᐃΔⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mr Snowman"
      }, {
        id: 159,
        ΔⲆⵠ: ᐃΔ.ᐃⵠⲆᐃᐃΔΔ,
        ΔΔΔ: ᐃΔ.ΔⵠⵠᐃΔⲆⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⲆΔⵠᐃΔⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃᐃⲆᐃᐃⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "CrysTal",
        name: "Crystal Sky Skin"
      }, {
        id: 167,
        ΔⲆⵠ: ᐃΔ.ⲆΔᐃⲆⵠΔⲆ,
        ΔΔΔ: ᐃΔ.ⵠⵠⵠⲆΔⲆⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⲆΔΔⵠⵠᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⲆᐃⲆᐃΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Franchestcreator",
        name: "Radioactive Starver"
      }, {
        id: 169,
        ΔⲆⵠ: ᐃΔ.ΔⵠᐃΔᐃᐃΔ,
        ΔΔΔ: ᐃΔ.ᐃⲆⵠⲆᐃΔⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠⲆᐃⵠΔᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⲆᐃⲆⵠⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "TheScaryBlaze",
        name: "Eaten Cookie"
      }, {
        id: 170,
        ΔⲆⵠ: ᐃΔ.ⲆⵠⵠⲆⵠⵠⲆ,
        ΔΔΔ: ᐃΔ.ⵠᐃⵠⵠⵠᐃⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⲆΔᐃᐃΔⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⵠΔᐃᐃⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "aloner",
        name: "Blob Thing"
      }, {
        id: 172,
        ΔⲆⵠ: ᐃΔ.ⵠⲆⵠΔⲆⵠⵠ,
        ΔΔΔ: ᐃΔ.ⵠΔⵠΔⵠⲆΔ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃΔᐃⲆⲆᐃⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⵠᐃⵠⲆΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "aloner",
        name: "Machine Mask"
      }, {
        id: 184,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⲆⵠΔΔⵠ,
        ΔΔΔ: ᐃΔ.ⵠᐃΔⵠⵠⲆⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃΔΔᐃΔΔⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⵠΔⲆⲆⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mad"
      }, {
        id: 206,
        ΔⲆⵠ: ᐃΔ.ⲆᐃΔⵠᐃⵠΔ,
        ΔΔΔ: ᐃΔ.ⲆⵠⵠⲆⲆⵠᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠᐃⲆⲆΔᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⲆⵠᐃⵠᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Survivor"
      }, {
        id: 209,
        ΔⲆⵠ: ᐃΔ.ⲆⲆΔᐃⵠᐃⵠ,
        ΔΔΔ: ᐃΔ.ᐃⵠⵠⲆⵠΔⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆᐃΔΔᐃΔᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⲆⲆᐃΔⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Starverator"
      }, {
        id: 230,
        ΔⲆⵠ: ᐃΔ.ⲆᐃΔⵠⵠⵠⲆ,
        ΔΔΔ: ᐃΔ.ᐃⵠΔⲆΔΔᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆΔⲆⲆᐃⵠΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠΔᐃᐃᐃΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Totem"
      }, {
        id: 231,
        ΔⲆⵠ: ᐃΔ.ⵠΔⲆΔΔΔᐃ,
        ΔΔΔ: ᐃΔ.ᐃᐃᐃᐃᐃᐃΔ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⵠᐃᐃⵠⲆⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⵠⲆⲆᐃⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Big Pile of Sand"
      }, {
        id: 232,
        ΔⲆⵠ: ᐃΔ.ⵠΔΔⲆⵠⵠᐃ,
        ΔΔΔ: ᐃΔ.ⲆⲆᐃⲆΔⵠⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⵠⲆⵠᐃⲆΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠΔⵠⲆᐃᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Big Pile of Dirt"
      }, {
        id: 235,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⲆⲆⲆᐃΔ,
        ΔΔΔ: ᐃΔ.ᐃⵠⵠᐃⵠΔⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠᐃΔⲆΔⵠⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠΔⵠᐃⲆⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Sandstone"
      }, {
        id: 29,
        ΔⲆⵠ: ᐃΔ.ⵠᐃΔⵠΔⲆᐃ,
        ΔΔΔ: ᐃΔ.ⵠΔᐃⲆⵠᐃᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⵠⲆⵠᐃᐃΔ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⵠΔⵠⲆⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Pixelbitie",
        name: "Lollipop 1"
      }, {
        id: 30,
        ΔⲆⵠ: ᐃΔ.ⲆΔᐃⲆΔΔΔ,
        ΔΔΔ: ᐃΔ.ΔⵠⲆⵠⵠⵠΔ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠⲆᐃⵠᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⲆᐃⲆΔᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Lollipop 2"
      }, {
        id: 31,
        ΔⲆⵠ: ᐃΔ.ᐃⵠⵠΔΔⵠⲆ,
        ΔΔΔ: ᐃΔ.ᐃⲆᐃΔⵠᐃᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⵠΔΔⲆΔⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃΔᐃⵠᐃⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Lollipop 3"
      }, {
        id: 32,
        ΔⲆⵠ: ᐃΔ.ᐃⲆᐃΔⲆΔⲆ,
        ΔΔΔ: ᐃΔ.ΔᐃⲆⲆᐃⲆᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⲆᐃⲆⵠᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⵠᐃⵠⵠΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Lollipop 4"
      }, {
        id: 33,
        ΔⲆⵠ: ᐃΔ.ⲆΔⲆΔΔⵠⵠ,
        ΔΔΔ: ᐃΔ.ᐃⵠⵠΔⵠᐃⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠΔⲆⲆᐃⲆᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⲆᐃᐃᐃⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Sushui",
        name: "Yellow Bird"
      }, {
        id: 34,
        ΔⲆⵠ: ᐃΔ.ᐃΔΔΔΔᐃᐃ,
        ΔΔΔ: ᐃΔ.ⲆΔⵠΔΔⲆᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⲆᐃᐃⵠⲆⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆΔᐃΔⵠⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Sushui",
        name: "Red Bird"
      }, {
        id: 35,
        ΔⲆⵠ: ᐃΔ.ΔⵠᐃΔⲆⵠⲆ,
        ΔΔΔ: ᐃΔ.ΔⲆⵠΔᐃⲆᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠΔΔΔᐃᐃⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⵠΔⲆᐃᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Sushui",
        name: "Blue Bird"
      }, {
        id: 37,
        ΔⲆⵠ: ᐃΔ.ⵠΔⵠΔᐃⲆⵠ,
        ΔΔΔ: ᐃΔ.ⵠⵠⲆΔⲆΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠᐃΔⵠΔᐃⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ΔᐃⲆⲆΔΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Winter",
        name: "Owl"
      }, {
        id: 52,
        ΔⲆⵠ: ᐃΔ.ⵠᐃⲆΔⲆⵠⲆ,
        ΔΔΔ: ᐃΔ.ᐃᐃΔᐃⵠΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⵠᐃⲆⲆᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆᐃΔⲆⵠⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Nemo"
      }, {
        id: 53,
        ΔⲆⵠ: ᐃΔ.ΔⲆᐃⵠᐃΔⲆ,
        ΔΔΔ: ᐃΔ.ΔΔᐃⲆⲆⲆᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⵠᐃⲆⵠᐃⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⵠᐃⵠᐃΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mr. Bread"
      }, {
        id: 74,
        ΔⲆⵠ: ᐃΔ.ⲆⵠⵠⲆᐃΔⵠ,
        ΔΔΔ: ᐃΔ.ᐃⵠⲆᐃΔⵠⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⵠⲆᐃᐃΔᐃ,
        ᐃΔⵠⲆ: ᐃΔ.Ⲇᐃⵠⵠᐃⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Communist & Taco4Life",
        name: "Mr. Bread 2"
      }, {
        id: 75,
        ΔⲆⵠ: ᐃΔ.ΔᐃᐃΔⲆΔΔ,
        ΔΔΔ: ᐃΔ.ΔⵠΔᐃⲆᐃⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⲆΔᐃⵠᐃⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃᐃⲆᐃΔΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Communist & Taco4Life",
        name: "Mr. Bread 3"
      }, {
        id: 60,
        ΔⲆⵠ: ᐃΔ.ⵠⵠⵠⲆΔⵠΔ,
        ΔΔΔ: ᐃΔ.ΔΔΔⲆᐃⲆΔ,
        ⲆⲆⵠΔ: ᐃΔ.ΔΔⲆⵠΔⲆⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠΔⵠⵠΔᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Red Berry"
      }, {
        id: 61,
        ΔⲆⵠ: ᐃΔ.ᐃΔⲆΔᐃΔⲆ,
        ΔΔΔ: ᐃΔ.ⵠⵠⵠᐃⲆⵠⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠᐃⵠⵠⲆⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⲆᐃⲆⵠΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Old Berry"
      }, {
        id: 70,
        ΔⲆⵠ: ᐃΔ.ⵠᐃⵠΔᐃⲆⲆ,
        ΔΔΔ: ᐃΔ.ΔᐃⲆⲆΔᐃⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠᐃⵠⲆⲆⵠⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆΔⲆΔⲆⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Cake"
      }, {
        id: 71,
        ΔⲆⵠ: ᐃΔ.ᐃΔⵠΔⲆᐃᐃ,
        ΔΔΔ: ᐃΔ.ᐃⵠⵠΔΔⵠΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⵠⲆΔΔⵠⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃΔⵠᐃᐃΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Christmas Cake"
      }, {
        id: 77,
        ΔⲆⵠ: ᐃΔ.ΔΔⲆᐃⲆⲆΔ,
        ΔΔΔ: ᐃΔ.ΔΔⲆⲆΔⵠⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⲆⲆⲆᐃΔᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⲆⵠⲆΔΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Pancakez",
        name: "Mr. Pancake"
      }, {
        id: 87,
        ΔⲆⵠ: ᐃΔ.ΔⵠⲆΔⵠⲆᐃ,
        ΔΔΔ: ᐃΔ.ΔⲆⵠⲆΔΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⲆᐃⵠⵠᐃΔ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃΔⵠΔⲆᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Mr. Taco"
      }, {
        id: 78,
        ΔⲆⵠ: ᐃΔ.ⲆⵠⲆⲆΔᐃⲆ,
        ΔΔΔ: ᐃΔ.ΔΔᐃⵠΔΔⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⵠΔⲆΔⲆΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔΔⲆΔⵠᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Mr. Bottle"
      }, {
        id: 79,
        ΔⲆⵠ: ᐃΔ.ⲆⵠⵠᐃⲆᐃⲆ,
        ΔΔΔ: ᐃΔ.ᐃᐃΔΔⵠΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⲆⵠⲆⵠΔᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⲆⲆⵠΔⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Mr. Bottle 2"
      }, {
        id: 97,
        ΔⲆⵠ: ᐃΔ.ΔᐃⲆⲆⵠΔⲆ,
        ΔΔΔ: ᐃΔ.ⲆᐃΔΔⵠᐃⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ΔΔⲆⵠⲆⵠⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⵠⲆⲆⲆᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Pink Rabbit"
      }, {
        id: 102,
        ΔⲆⵠ: ᐃΔ.ⵠⵠΔᐃᐃⵠΔ,
        ΔΔΔ: ᐃΔ.ΔᐃΔᐃⲆΔⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⲆⲆᐃΔⵠⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⵠᐃⲆⲆᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Marshmallow"
      }, {
        id: 107,
        ΔⲆⵠ: ᐃΔ.ΔᐃᐃⲆᐃⲆⲆ,
        ΔΔΔ: ᐃΔ.ᐃⲆⵠⵠΔᐃᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆΔΔⵠⵠΔⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⲆⵠⵠⲆⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Fox"
      }, {
        id: 132,
        ΔⲆⵠ: ᐃΔ.ⵠΔⲆΔⲆⲆⵠ,
        ΔΔΔ: ᐃΔ.ⲆⵠΔᐃⲆⵠⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⲆⵠΔΔⵠᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⵠΔΔᐃⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Raccoon"
      }, {
        id: 111,
        ΔⲆⵠ: ᐃΔ.ΔⲆᐃⲆᐃⵠᐃ,
        ΔΔΔ: ᐃΔ.ΔⵠⲆⵠᐃⵠᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⲆᐃΔᐃΔⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⵠⵠΔᐃᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Cloud"
      }, {
        id: 113,
        ΔⲆⵠ: ᐃΔ.ⲆⲆⲆᐃᐃⵠⵠ,
        ΔΔΔ: ᐃΔ.ΔⵠΔΔⲆΔᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⲆΔⲆᐃⵠᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⵠⵠᐃⲆᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Moon"
      }, {
        id: 117,
        ΔⲆⵠ: ᐃΔ.ⵠⲆΔΔⵠΔΔ,
        ΔΔΔ: ᐃΔ.ⲆⲆⵠᐃᐃᐃⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠΔⵠⲆⲆΔⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⲆΔΔᐃᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Mr. Panda"
      }, {
        id: 118,
        ΔⲆⵠ: ᐃΔ.ΔᐃⲆⵠⵠⲆⵠ,
        ΔΔΔ: ᐃΔ.ⵠⲆⲆΔⲆⲆΔ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃΔΔⲆΔⲆⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⵠⲆⵠⵠⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Mr. Strawberry"
      }, {
        id: 119,
        ΔⲆⵠ: ᐃΔ.ⲆᐃΔᐃᐃΔⵠ,
        ΔΔΔ: ᐃΔ.ⵠⲆᐃⵠⲆᐃⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⲆᐃⲆⲆⵠΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔᐃΔⵠⲆΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "eogito & Sushuui",
        name: "Mummy"
      }, {
        id: 122,
        ΔⲆⵠ: ᐃΔ.ᐃⵠⵠΔΔⲆⵠ,
        ΔΔΔ: ᐃΔ.ⲆⵠⵠΔⲆⲆⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠΔᐃᐃⲆᐃΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⲆᐃⵠⲆᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Dino"
      }, {
        id: 127,
        ΔⲆⵠ: ᐃΔ.ΔⵠᐃⵠⲆᐃⵠ,
        ΔΔΔ: ᐃΔ.ⵠΔᐃⲆⲆᐃⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⲆⲆⵠΔⵠΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠΔⵠⵠⵠⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "MADBalgouthi",
        name: "Mr. Koala"
      }, {
        id: 160,
        ΔⲆⵠ: ᐃΔ.ⵠⵠΔᐃᐃⲆⲆ,
        ΔΔΔ: ᐃΔ.ΔΔᐃⵠΔⵠⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠΔΔᐃⲆⵠΔ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⲆⵠⵠⲆᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Bottle Protection"
      }, {
        id: 162,
        ΔⲆⵠ: ᐃΔ.ⵠΔⵠΔⵠΔⲆ,
        ΔΔΔ: ᐃΔ.ΔⲆⵠΔⲆⲆΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆΔΔᐃⲆΔΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆᐃⵠⵠΔΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "CrysTal",
        name: "Leaf Man"
      }, {
        id: 166,
        ΔⲆⵠ: ᐃΔ.ⵠΔᐃᐃΔⲆΔ,
        ΔΔΔ: ᐃΔ.ᐃΔᐃⵠΔΔⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃᐃⵠᐃΔᐃⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⲆⲆⵠⵠⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Bubble"
      }, {
        id: 174,
        ΔⲆⵠ: ᐃΔ.ᐃⵠΔᐃⵠᐃⲆ,
        ΔΔΔ: ᐃΔ.ᐃᐃΔΔⵠⲆⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠᐃᐃⵠΔⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⲆⲆΔΔⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "upfiz",
        name: "Potato"
      }, {
        id: 171,
        ΔⲆⵠ: ᐃΔ.ⵠⲆΔᐃⵠΔⲆ,
        ΔΔΔ: ᐃΔ.ⵠΔᐃⲆⲆΔᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆᐃⵠᐃΔⲆⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⵠᐃⲆᐃΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "aloner",
        name: "Axolotl"
      }, {
        id: 178,
        ΔⲆⵠ: ᐃΔ.ᐃᐃᐃᐃΔΔⵠ,
        ΔΔΔ: ᐃΔ.ΔⵠΔⲆΔⵠΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⲆⲆΔⵠᐃΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔᐃⲆΔⲆⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Rusted Machine"
      }, {
        id: 179,
        ΔⲆⵠ: ᐃΔ.ⲆᐃᐃⲆΔᐃΔ,
        ΔΔΔ: ᐃΔ.ⲆⵠⲆΔⵠΔⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⵠΔΔᐃΔⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⵠᐃΔⵠⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Starving Machine"
      }, {
        id: 181,
        ΔⲆⵠ: ᐃΔ.ΔᐃⲆⲆⲆⵠⲆ,
        ΔΔΔ: ᐃΔ.ΔΔΔⲆΔⵠⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠΔⲆᐃᐃⵠΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆᐃΔⵠⲆᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Night Stars"
      }, {
        id: 191,
        ΔⲆⵠ: ᐃΔ.ΔⲆⵠⲆⲆⵠᐃ,
        ΔΔΔ: ᐃΔ.ᐃΔⲆⲆⲆᐃⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⲆⵠᐃⲆⲆᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ΔᐃⲆⲆⲆᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Blue Jay"
      }, {
        id: 198,
        ΔⲆⵠ: ᐃΔ.ΔⲆⵠⵠᐃⲆⲆ,
        ΔΔΔ: ᐃΔ.ᐃⵠᐃᐃⵠᐃⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆᐃⵠⲆⵠᐃⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⵠΔⵠⵠⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "AWTP",
        name: "Dave"
      }, {
        id: 200,
        ΔⲆⵠ: ᐃΔ.ⲆΔΔΔⵠΔⲆ,
        ΔΔΔ: ᐃΔ.ⵠΔΔⵠΔⲆΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠΔᐃᐃΔⲆⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⲆⲆΔᐃⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Jinty",
        name: "Smug"
      }, {
        id: 203,
        ΔⲆⵠ: ᐃΔ.ᐃΔⵠΔⵠⵠΔ,
        ΔΔΔ: ᐃΔ.ⵠΔⵠⲆⵠᐃⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃΔⵠⲆΔⵠᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠᐃⵠⲆᐃᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Reclaimed"
      }, {
        id: 204,
        ΔⲆⵠ: ᐃΔ.ΔⲆΔⵠᐃΔᐃ,
        ΔΔΔ: ᐃΔ.ΔᐃⲆⵠΔΔⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⵠⵠᐃΔᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆᐃⵠⵠΔᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Legacy Wolf"
      }, {
        id: 211,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⵠᐃΔΔᐃ,
        ΔΔΔ: ᐃΔ.ΔⵠⵠᐃⲆΔⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⲆᐃⵠⲆⲆΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⵠⲆⵠⵠⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Starver of the Seas"
      }, {
        id: 213,
        ΔⲆⵠ: ᐃΔ.ΔΔⵠⵠⲆⵠᐃ,
        ΔΔΔ: ᐃΔ.ΔⲆΔΔΔΔᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ΔΔᐃⵠⲆΔᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆΔᐃΔⲆΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Ice"
      }, {
        id: 219,
        ΔⲆⵠ: ᐃΔ.ΔᐃⲆⲆᐃᐃᐃ,
        ΔΔΔ: ᐃΔ.ⲆᐃᐃⵠᐃᐃΔ,
        ⲆⲆⵠΔ: ᐃΔ.ΔΔᐃᐃᐃⵠⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⲆⲆΔΔᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Ramil",
        name: "Sandwich Cookie"
      }, {
        id: 221,
        ΔⲆⵠ: ᐃΔ.ⵠᐃⵠⲆΔᐃⲆ,
        ΔΔΔ: ᐃΔ.ΔᐃΔᐃⲆⵠⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ΔᐃⵠᐃⵠⲆᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⲆⲆⲆᐃΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Purple Geode"
      }, {
        id: 222,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⲆΔᐃⲆΔ,
        ΔΔΔ: ᐃΔ.ΔⵠΔᐃᐃⵠᐃ,
        ⲆⲆⵠΔ: ᐃΔ.Δᐃᐃᐃᐃᐃⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠΔⵠⲆⵠΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Cyan Geode"
      }, {
        id: 223,
        ΔⲆⵠ: ᐃΔ.ⲆⵠⵠΔⲆᐃᐃ,
        ΔΔΔ: ᐃΔ.ΔⲆⵠᐃⵠⵠⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⲆⲆᐃⵠΔⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃΔᐃⲆΔⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Yellow Geode"
      }, {
        id: 228,
        ΔⲆⵠ: ᐃΔ.ⵠᐃΔⲆⲆᐃᐃ,
        ΔΔΔ: ᐃΔ.ⵠᐃⲆᐃᐃⵠΔ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⲆⵠⲆΔΔⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃΔΔᐃΔⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Furnace Head"
      }, {
        id: 229,
        ΔⲆⵠ: ᐃΔ.ⵠᐃᐃᐃᐃΔᐃ,
        ΔΔΔ: ᐃΔ.ⲆⵠᐃⲆⲆⵠⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⵠⲆⲆⲆⲆΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⲆⲆⵠΔΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Bag"
      }, {
        id: 227,
        ΔⲆⵠ: ᐃΔ.ΔᐃΔᐃΔΔⵠ,
        ΔΔΔ: ᐃΔ.ΔⵠⲆⵠΔⲆΔ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⵠΔᐃⵠᐃΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⵠⲆⵠΔΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Lit Furnace Head"
      }, {
        id: 25,
        ΔⲆⵠ: ᐃΔ.ⲆΔΔⲆⲆⲆΔ,
        ΔΔΔ: ᐃΔ.ΔⲆΔᐃᐃⲆᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ΔΔⲆⵠⲆⵠᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⵠⲆΔⲆΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Pixelbitie",
        name: "Test Dummy"
      }, {
        id: 41,
        ΔⲆⵠ: ᐃΔ.ⲆⲆⲆⵠΔᐃΔ,
        ΔΔΔ: ᐃΔ.ⲆᐃⵠᐃⲆⲆⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⲆⵠΔᐃⵠⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃᐃⲆΔⲆⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Star-ver"
      }, {
        id: 43,
        ΔⲆⵠ: ᐃΔ.ⲆΔΔΔᐃᐃΔ,
        ΔΔΔ: ᐃΔ.ΔⲆⵠᐃⵠᐃⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠᐃⲆΔⵠΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⲆᐃᐃⵠⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Communist",
        name: "Starver Chest"
      }, {
        id: 88,
        ΔⲆⵠ: ᐃΔ.ⵠΔⵠΔⲆⵠΔ,
        ΔΔΔ: ᐃΔ.ⵠᐃⵠᐃⵠⵠⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⵠⵠⵠᐃᐃΔ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⲆⵠᐃΔΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Communist",
        name: "Starver Workbench"
      }, {
        id: 121,
        ΔⲆⵠ: ᐃΔ.ⵠⵠⲆⵠⵠᐃⵠ,
        ΔΔΔ: ᐃΔ.ΔΔᐃⵠⲆᐃⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⵠⵠⵠΔΔⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⵠⲆⵠΔᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "MADBalgouthi",
        name: "Fish"
      }, {
        id: 39,
        ΔⲆⵠ: ᐃΔ.ᐃⵠⵠⲆⲆΔⲆ,
        ΔΔΔ: ᐃΔ.ⲆⲆΔᐃⵠΔᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⵠᐃⵠΔⵠⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⵠᐃΔΔΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Negligent4Dia",
        name: "Crab"
      }, {
        id: 40,
        ΔⲆⵠ: ᐃΔ.ⵠΔᐃᐃᐃⵠΔ,
        ΔΔΔ: ᐃΔ.ⲆΔⵠⵠⲆᐃΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⵠⵠⵠᐃⲆⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆᐃⵠΔΔⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Negligent4Dia",
        name: "Piranha"
      }, {
        id: 36,
        ΔⲆⵠ: ᐃΔ.ⲆΔⲆᐃⲆⵠⵠ,
        ΔΔΔ: ᐃΔ.ΔΔᐃⲆⲆΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.ΔᐃⲆⵠⲆⲆⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆΔⵠΔΔⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Winter Fox"
      }, {
        id: 69,
        ΔⲆⵠ: ᐃΔ.ⵠΔᐃⵠᐃⵠΔ,
        ΔΔΔ: ᐃΔ.ⲆᐃΔⵠᐃⲆⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ΔᐃⵠⲆⵠⵠΔ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃΔᐃᐃⲆⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Zed",
        name: "Baby Foxy"
      }, {
        id: 51,
        ΔⲆⵠ: ᐃΔ.ⲆⲆᐃΔΔᐃΔ,
        ΔΔΔ: ᐃΔ.ⵠΔᐃᐃΔⵠⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⲆⲆᐃΔⵠⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠᐃᐃᐃⲆᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "HOWI",
        name: "Winter Bear"
      }, {
        id: 133,
        ΔⲆⵠ: ᐃΔ.ᐃᐃᐃΔⵠΔΔ,
        ΔΔΔ: ᐃΔ.ⵠᐃⵠⲆᐃᐃᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ΔᐃΔᐃᐃⲆᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⲆⲆⵠΔⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Hawk"
      }, {
        id: 55,
        ΔⲆⵠ: ᐃΔ.ⵠΔᐃᐃⵠⵠᐃ,
        ΔΔΔ: ᐃΔ.ᐃⲆⵠⵠΔⵠᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠᐃΔⲆⵠⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⵠⲆⵠⵠΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Nice Little Yuki"
      }, {
        id: 68,
        ΔⲆⵠ: ᐃΔ.ΔⲆⵠⲆᐃⲆᐃ,
        ΔΔΔ: ᐃΔ.ⵠᐃΔⲆⵠⵠΔ,
        ⲆⲆⵠΔ: ᐃΔ.ΔΔᐃΔⲆΔΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⲆⲆΔⲆΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Baby Yuki"
      }, {
        id: 62,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⵠᐃΔᐃⵠ,
        ΔΔΔ: ᐃΔ.ⵠΔⵠⲆⲆΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃᐃⲆᐃᐃΔⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃΔΔⵠⵠΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mr. Carrot"
      }, {
        id: 56,
        ΔⲆⵠ: ᐃΔ.ⵠΔΔΔⵠΔᐃ,
        ΔΔΔ: ᐃΔ.ᐃⲆⵠᐃΔᐃⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⵠᐃⲆΔΔᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⵠⵠⲆⵠΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Bat Limax"
      }, {
        id: 72,
        ΔⲆⵠ: ᐃΔ.ΔⵠΔⲆΔᐃⵠ,
        ΔΔΔ: ᐃΔ.ᐃⵠΔⲆᐃᐃⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⵠⵠⲆΔⵠⲆ,
        ᐃΔⵠⲆ: ᐃΔ.Δⵠⵠᐃⵠᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Mr. Crate"
      }, {
        id: 73,
        ΔⲆⵠ: ᐃΔ.ΔⲆⲆⵠᐃΔᐃ,
        ΔΔΔ: ᐃΔ.ᐃΔⲆⲆᐃᐃᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆΔⲆⵠΔΔⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⲆⲆⲆΔⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Taco4Life & eogito",
        name: "Mr. Spider"
      }, {
        id: 93,
        ΔⲆⵠ: ᐃΔ.ⵠⲆᐃΔᐃⲆᐃ,
        ΔΔΔ: ᐃΔ.ⵠΔⲆᐃⵠⲆⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⲆⵠΔΔΔⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⲆⵠᐃΔⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Anyone want to play?",
        name: "Mr. Spider 2"
      }, {
        id: 82,
        ΔⲆⵠ: ᐃΔ.ΔⲆⲆᐃᐃⲆᐃ,
        ΔΔΔ: ᐃΔ.ΔⵠⵠΔᐃⲆΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠᐃⲆⵠΔΔⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⲆⵠⵠⵠⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mr. Blue Starfish"
      }, {
        id: 83,
        ΔⲆⵠ: ᐃΔ.ΔⲆΔⵠᐃⲆⵠ,
        ΔΔΔ: ᐃΔ.ΔΔᐃⲆⵠᐃᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⲆᐃⲆⵠΔᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ΔΔⵠⵠⵠᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mr. Orange Starfish"
      }, {
        id: 84,
        ΔⲆⵠ: ᐃΔ.ᐃᐃᐃᐃⵠⵠⵠ,
        ΔΔΔ: ᐃΔ.ΔⵠᐃⲆⵠⲆⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ΔΔΔⵠⲆⵠΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆᐃᐃᐃΔΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mr. Pink Starfish"
      }, {
        id: 85,
        ΔⲆⵠ: ᐃΔ.ⲆⲆᐃΔΔΔᐃ,
        ΔΔΔ: ᐃΔ.ΔⲆΔⲆᐃΔᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⵠⵠΔⲆᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ΔΔΔΔΔᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mr. ShellMauve"
      }, {
        id: 86,
        ΔⲆⵠ: ᐃΔ.ⲆΔΔΔⵠΔⵠ,
        ΔΔΔ: ᐃΔ.ΔⵠⲆⵠⵠΔⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠᐃᐃⲆᐃⵠᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⵠⵠΔᐃⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mr. Shell Bead"
      }, {
        id: 96,
        ΔⲆⵠ: ᐃΔ.ⲆⲆⵠⲆⲆᐃΔ,
        ΔΔΔ: ᐃΔ.ᐃⵠᐃᐃᐃΔⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⵠᐃⵠⵠᐃⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆᐃΔΔΔᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Fukss",
        name: "Angry Crab"
      }, {
        id: 98,
        ΔⲆⵠ: ᐃΔ.ΔⲆⲆⵠΔⵠᐃ,
        ΔΔΔ: ᐃΔ.ΔⲆⵠᐃⵠᐃᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⲆⲆⵠΔΔΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔΔΔⲆⲆⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Penguin"
      }, {
        id: 126,
        ΔⲆⵠ: ᐃΔ.ⲆⵠⲆΔⵠᐃⵠ,
        ΔΔΔ: ᐃΔ.ⲆⵠΔᐃⲆᐃⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⲆⵠⲆᐃⲆⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⲆⲆΔΔⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Anyone want to play?",
        name: "Mr. Boar"
      }, {
        id: 145,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⲆΔⵠᐃⵠ,
        ΔΔΔ: ᐃΔ.ⲆΔᐃᐃⵠΔⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆᐃⵠΔΔⲆⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠΔⲆΔΔΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "I saw you"
      }, {
        id: 146,
        ΔⲆⵠ: ᐃΔ.ΔⵠᐃΔⵠⵠΔ,
        ΔΔΔ: ᐃΔ.ⲆⵠⲆⵠᐃⲆⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠᐃᐃⲆΔΔΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⲆⲆⵠⵠᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "It was funny"
      }, {
        id: 147,
        ΔⲆⵠ: ᐃΔ.ΔΔΔΔⲆⵠⲆ,
        ΔΔΔ: ᐃΔ.ΔᐃΔᐃΔⵠΔ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⲆᐃⵠⵠᐃⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃΔⲆⵠⲆⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "You can scream"
      }, {
        id: 158,
        ΔⲆⵠ: ᐃΔ.ⵠᐃⲆⵠⵠⵠⲆ,
        ΔΔΔ: ᐃΔ.ΔⵠⲆⵠⲆⵠᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠⵠΔᐃᐃⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⵠᐃΔᐃΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Mr. Book"
      }, {
        id: 163,
        ΔⲆⵠ: ᐃΔ.ᐃΔⲆⵠΔᐃⲆ,
        ΔΔΔ: ᐃΔ.ⲆⵠᐃⲆΔΔⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠⵠⵠⵠΔⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⲆⲆⵠᐃⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Anyone want to play?",
        name: "Mr. Mammoth"
      }, {
        id: 164,
        ΔⲆⵠ: ᐃΔ.ⵠⵠᐃΔⲆⵠΔ,
        ΔΔΔ: ᐃΔ.ᐃᐃⲆᐃΔᐃⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆΔᐃⵠᐃᐃⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⲆᐃⵠⲆⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "SoOw",
        name: "Mr. Mammoth 2"
      }, {
        id: 161,
        ΔⲆⵠ: ᐃΔ.ΔΔⲆⵠᐃⵠΔ,
        ΔΔΔ: ᐃΔ.ⵠⲆΔⵠⵠⵠΔ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⲆⵠᐃᐃⵠΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔΔΔᐃⲆⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Nightmare"
      }, {
        id: 168,
        ΔⲆⵠ: ᐃΔ.ⲆᐃΔᐃΔᐃᐃ,
        ΔΔΔ: ᐃΔ.ΔΔⵠᐃΔⲆⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⲆⵠⵠΔᐃⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ΔΔᐃᐃΔⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Shiny Crystal"
      }, {
        id: 173,
        ΔⲆⵠ: ᐃΔ.ⲆⲆⲆⵠᐃⲆΔ,
        ΔΔΔ: ᐃΔ.ΔⲆⲆⲆᐃⵠⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆΔⲆⵠᐃΔΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⲆⲆⵠᐃΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Water skin"
      }, {
        id: 175,
        ΔⲆⵠ: ᐃΔ.ⵠᐃⲆΔⵠᐃⵠ,
        ΔΔΔ: ᐃΔ.Δᐃᐃⵠᐃᐃᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⲆⲆΔⲆⲆΔ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃᐃᐃᐃᐃⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Fall Berry Bush Starver"
      }, {
        id: 176,
        ΔⲆⵠ: ᐃΔ.ⲆΔⲆΔⵠᐃᐃ,
        ΔΔΔ: ᐃΔ.ⲆΔⵠᐃᐃΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠᐃⲆᐃⲆⲆᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⲆᐃΔⲆⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Christmas Berry Bush Starver"
      }, {
        id: 177,
        ΔⲆⵠ: ᐃΔ.ΔⲆᐃⵠᐃΔᐃ,
        ΔΔΔ: ᐃΔ.ⵠΔΔΔⲆΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.ΔΔⲆᐃᐃᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠΔⵠⵠᐃⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Berry Bush Starver"
      }, {
        id: 182,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⲆⵠⵠⲆΔ,
        ΔΔΔ: ᐃΔ.ΔⲆⲆⵠⲆⲆⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⵠΔᐃᐃᐃΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔᐃⵠΔⲆⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Tamer"
      }, {
        id: 185,
        ΔⲆⵠ: ᐃΔ.ᐃΔᐃΔᐃᐃⲆ,
        ΔΔΔ: ᐃΔ.ΔⵠⵠᐃⲆⲆΔ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃᐃᐃΔᐃⵠᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⲆᐃᐃΔᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Tamon Wolf"
      }, {
        id: 186,
        ΔⲆⵠ: ᐃΔ.ⲆᐃᐃⵠⲆΔᐃ,
        ΔΔΔ: ᐃΔ.ⵠΔⲆⲆⲆΔᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⲆᐃᐃᐃΔⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⵠⲆᐃΔΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Tamon Snow Wolf"
      }, {
        id: 187,
        ΔⲆⵠ: ᐃΔ.ⲆⲆⲆΔⲆᐃⲆ,
        ΔΔΔ: ᐃΔ.ⵠᐃΔⲆᐃΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆΔⲆⲆⲆⲆΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⲆⵠᐃⲆΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Tamon Rabbit"
      }, {
        id: 188,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⲆΔⲆᐃᐃ,
        ΔΔΔ: ᐃΔ.ΔⲆΔΔⵠᐃⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⵠⲆΔⵠᐃⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ΔΔᐃⵠⵠⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Tamon Snow Rabbit"
      }, {
        id: 189,
        ΔⲆⵠ: ᐃΔ.ⲆΔᐃΔΔΔⵠ,
        ΔΔΔ: ᐃΔ.ⵠΔᐃⵠΔΔⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⲆᐃΔᐃⵠⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⵠⲆΔᐃⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Tamon Bear"
      }, {
        id: 190,
        ΔⲆⵠ: ᐃΔ.ΔⲆᐃᐃⲆᐃⵠ,
        ΔΔΔ: ᐃΔ.ᐃⲆᐃΔᐃΔⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃΔᐃᐃΔᐃΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆΔⲆⲆᐃᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Tamon Polar Bear"
      }, {
        id: 196,
        ΔⲆⵠ: ᐃΔ.ᐃⵠᐃΔᐃⲆⵠ,
        ΔΔΔ: ᐃΔ.Δᐃᐃⵠᐃⵠᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠᐃᐃⲆⲆⲆⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆᐃᐃⲆᐃᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Crying Angel"
      }, {
        id: 202,
        ΔⲆⵠ: ᐃΔ.ᐃΔΔⲆΔᐃⵠ,
        ΔΔΔ: ᐃΔ.ᐃⲆⲆⵠⲆᐃⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃᐃΔᐃΔⵠᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⵠᐃᐃⵠⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Tamon Fennec"
      }, {
        id: 207,
        ΔⲆⵠ: ᐃΔ.ⲆᐃᐃΔⲆⲆᐃ,
        ΔΔΔ: ᐃΔ.ΔⵠⲆⲆⵠᐃᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ΔᐃⵠΔᐃⲆⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ΔᐃᐃⲆᐃΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Decay"
      }, {
        id: 212,
        ΔⲆⵠ: ᐃΔ.ᐃΔⲆⲆᐃⲆᐃ,
        ΔΔΔ: ᐃΔ.ⲆΔᐃᐃⵠⲆⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⵠΔⲆⵠⲆᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠᐃⲆⵠⲆⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Pillow"
      }, {
        id: 218,
        ΔⲆⵠ: ᐃΔ.ⵠᐃᐃⲆᐃᐃⵠ,
        ΔΔΔ: ᐃΔ.ΔΔᐃⲆΔⵠᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⵠᐃΔⵠᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆᐃΔΔⵠᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Exotic"
      }, {
        id: 224,
        ΔⲆⵠ: ᐃΔ.ᐃΔⲆⲆⲆᐃᐃ,
        ΔΔΔ: ᐃΔ.ΔⲆⵠΔΔⵠⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⲆⲆⲆᐃᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃΔⵠᐃⲆᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Apple"
      }, {
        id: 225,
        ΔⲆⵠ: ᐃΔ.ⵠⵠⲆⲆⵠΔΔ,
        ΔΔΔ: ᐃΔ.ΔⵠᐃⲆΔᐃΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⵠⲆⲆΔΔΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⵠᐃⵠⲆⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Golden Apple"
      }, {
        id: 233,
        ΔⲆⵠ: ᐃΔ.ᐃⵠΔⵠΔⵠⲆ,
        ΔΔΔ: ᐃΔ.ΔΔⵠⲆΔᐃΔ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⲆΔΔᐃΔᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⵠⵠᐃⲆⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Lava Cube"
      }, {
        id: 234,
        ΔⲆⵠ: ᐃΔ.ⵠΔΔΔΔⲆᐃ,
        ΔΔΔ: ᐃΔ.ᐃᐃⲆⲆᐃⲆⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⵠᐃΔΔⲆᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⲆΔⲆⵠⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Dragon Cube"
      }, {
        id: 42,
        ΔⲆⵠ: ᐃΔ.ⲆⲆΔᐃⵠⵠⵠ,
        ΔΔΔ: ᐃΔ.ⲆⵠᐃⲆΔⲆΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⲆΔⲆⲆᐃⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⲆⵠⵠΔⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Winter",
        name: "Will-O'-The-Wisp"
      }, {
        id: 91,
        ΔⲆⵠ: ᐃΔ.ⵠⵠⵠⵠⲆⲆⵠ,
        ΔΔΔ: ᐃΔ.ⲆΔⵠⲆᐃΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠᐃᐃᐃⲆⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃΔΔΔᐃⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "ExpertyAnimations",
        name: "Flame"
      }, {
        id: 26,
        ΔⲆⵠ: ᐃΔ.ᐃᐃΔⲆⲆᐃᐃ,
        ΔΔΔ: ᐃΔ.ⲆⵠⵠⵠⲆⵠΔ,
        ⲆⲆⵠΔ: ᐃΔ.ΔᐃⵠⵠⵠⲆⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⵠΔⲆⵠⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Be a Tree"
      }, {
        id: 38,
        ΔⲆⵠ: ᐃΔ.ⵠᐃⵠⲆΔⲆⲆ,
        ΔΔΔ: ᐃΔ.ᐃⲆᐃⲆΔᐃⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ΔᐃᐃΔⲆⲆᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ΔᐃᐃᐃΔⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Winter",
        name: "Toxic Mutant"
      }, {
        id: 50,
        ΔⲆⵠ: ᐃΔ.ⲆΔΔᐃⲆⵠⵠ,
        ΔΔΔ: ᐃΔ.ᐃⵠᐃⵠⲆΔᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⲆⵠᐃᐃΔⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆᐃⵠⵠᐃΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Communist",
        name: "Mr. Tomato"
      }, {
        id: 54,
        ΔⲆⵠ: ᐃΔ.ⲆⲆΔⲆⲆᐃᐃ,
        ΔΔΔ: ᐃΔ.ᐃᐃΔⲆⵠΔⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠⵠⲆᐃⵠⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⵠΔᐃⵠΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mr. Mauve, the Lapa"
      }, {
        id: 57,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⵠᐃΔᐃΔ,
        ΔΔΔ: ᐃΔ.ᐃΔⵠᐃΔⵠⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⵠⵠΔΔⵠⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆΔᐃⵠⲆⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Golden Fish"
      }, {
        id: 64,
        ΔⲆⵠ: ᐃΔ.ⲆΔⵠᐃⵠΔⵠ,
        ΔΔΔ: ᐃΔ.ΔᐃΔΔⵠΔⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⵠΔⵠⵠᐃⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠᐃⵠⲆᐃⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "LapaMauve"
      }, {
        id: 65,
        ΔⲆⵠ: ᐃΔ.ⲆⲆᐃⵠⵠᐃΔ,
        ΔΔΔ: ᐃΔ.ⲆⵠⲆⲆᐃᐃⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠⲆᐃⲆΔΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔΔⵠⵠᐃⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "LapaMauve "
      }, {
        id: 92,
        ΔⲆⵠ: ᐃΔ.ⲆⲆⵠΔⵠⲆᐃ,
        ΔΔΔ: ᐃΔ.ⲆⲆⲆΔⵠΔᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⵠΔⵠⵠᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆΔΔΔΔᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mr. Burger"
      }, {
        id: 66,
        ΔⲆⵠ: ᐃΔ.ᐃΔⵠΔⵠΔⲆ,
        ΔΔΔ: ᐃΔ.ᐃᐃΔⵠⵠⵠⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃΔⵠⲆⲆⵠΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⵠⵠⲆᐃⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Tropical Starver"
      }, {
        id: 80,
        ΔⲆⵠ: ᐃΔ.ⲆᐃⲆΔΔᐃⵠ,
        ΔΔΔ: ᐃΔ.ᐃⵠⲆΔΔⲆᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⵠᐃⲆΔᐃⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃᐃᐃⲆⵠΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mr. ShellPink"
      }, {
        id: 81,
        ΔⲆⵠ: ᐃΔ.ⲆⵠΔⵠⵠΔᐃ,
        ΔΔΔ: ᐃΔ.ᐃᐃᐃⵠⵠΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⵠⲆᐃᐃⵠΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔΔΔΔΔⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mr. OranShell"
      }, {
        id: 99,
        ΔⲆⵠ: ᐃΔ.ᐃᐃᐃⲆΔⲆⲆ,
        ΔΔΔ: ᐃΔ.ᐃᐃⵠⵠⲆΔᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⵠΔⲆⵠΔᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⵠᐃⵠⲆΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Pepe"
      }, {
        id: 100,
        ΔⲆⵠ: ᐃΔ.ΔΔᐃΔᐃΔΔ,
        ΔΔΔ: ᐃΔ.ⲆⲆΔᐃᐃᐃⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆᐃΔⲆⵠⵠᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ΔᐃΔᐃⲆⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "fatant",
        name: "Mr. Ant"
      }, {
        id: 115,
        ΔⲆⵠ: ᐃΔ.ᐃⵠᐃΔᐃⲆⲆ,
        ΔΔΔ: ᐃΔ.ⵠⲆⵠΔⵠⵠⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⲆⲆᐃΔⲆΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⲆⵠⲆⵠΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "MADBalgouthi",
        name: "Mr. Watermelon"
      }, {
        id: 101,
        ΔⲆⵠ: ᐃΔ.ⵠⲆⵠΔΔⲆⵠ,
        ΔΔΔ: ᐃΔ.ⲆⲆⲆⵠⵠⵠⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⲆⲆⵠⲆⵠΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔᐃⵠⵠΔΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Mr. Thornbush"
      }, {
        id: 131,
        ΔⲆⵠ: ᐃΔ.ΔⲆⵠⲆᐃΔⲆ,
        ΔΔΔ: ᐃΔ.ΔⲆᐃⲆΔⵠⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃΔᐃⵠⵠⵠⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃᐃⲆⲆᐃᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Cthulhu"
      }, {
        id: 143,
        ΔⲆⵠ: ᐃΔ.ΔⵠⲆᐃΔⵠⲆ,
        ΔΔΔ: ᐃΔ.ⲆᐃⵠΔⲆⲆⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠΔⲆΔⲆⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⵠΔⵠΔⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Mr. Cactus"
      }, {
        id: 144,
        ΔⲆⵠ: ᐃΔ.ⲆΔⵠⵠⲆᐃⵠ,
        ΔΔΔ: ᐃΔ.ΔᐃᐃᐃΔⵠⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠᐃᐃⲆⵠΔᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠᐃⲆᐃᐃᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Momo"
      }, {
        id: 180,
        ΔⲆⵠ: ᐃΔ.ⵠⲆⵠᐃⲆⲆΔ,
        ΔΔΔ: ᐃΔ.ⵠΔⵠⵠΔᐃⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⲆⵠⲆᐃⲆᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⲆⵠᐃⲆᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Scream"
      }, {
        id: 193,
        ΔⲆⵠ: ᐃΔ.ⵠᐃᐃⵠⲆⵠⲆ,
        ΔΔΔ: ᐃΔ.ⲆᐃⲆⵠᐃΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠᐃΔⲆᐃⲆΔ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃΔᐃΔΔⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Tamon Dragon"
      }, {
        id: 195,
        ΔⲆⵠ: ᐃΔ.ⲆᐃⲆΔⵠΔΔ,
        ΔΔΔ: ᐃΔ.ΔⵠⲆⲆⲆⵠⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⲆⲆᐃⲆᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⲆⵠᐃΔⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Forest Spirit"
      }, {
        id: 197,
        ΔⲆⵠ: ᐃΔ.ⲆⵠⲆᐃⵠⲆᐃ,
        ΔΔΔ: ᐃΔ.ⵠΔᐃⲆΔᐃⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃᐃⵠⵠᐃΔⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ΔΔᐃⵠΔΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Evil Goat"
      }, {
        id: 199,
        ΔⲆⵠ: ᐃΔ.ΔᐃⲆΔⲆⲆᐃ,
        ΔΔΔ: ᐃΔ.ⲆᐃᐃᐃⵠᐃΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⲆⵠᐃⵠΔⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ΔΔⵠⵠΔⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Rotten"
      }, {
        id: 201,
        ΔⲆⵠ: ᐃΔ.ⵠᐃΔΔⵠⵠᐃ,
        ΔΔΔ: ᐃΔ.ⵠΔΔΔⵠⵠⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⲆⵠᐃΔⵠΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⵠΔⵠⲆᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Fossil"
      }, {
        id: 205,
        ΔⲆⵠ: ᐃΔ.ⵠⲆΔⵠΔᐃΔ,
        ΔΔΔ: ᐃΔ.ΔΔΔⲆⵠⲆΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠΔᐃⲆᐃᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⲆΔᐃᐃⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Tamon Spectrum"
      }, {
        id: 210,
        ΔⲆⵠ: ᐃΔ.ⵠⲆΔⲆᐃⲆΔ,
        ΔΔΔ: ᐃΔ.ⲆΔⵠᐃⵠⲆⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⵠⵠⵠᐃⲆⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⵠᐃⵠⵠⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Helpy",
        name: "Black Cat"
      }, {
        id: 214,
        ΔⲆⵠ: ᐃΔ.ᐃΔᐃⲆᐃΔΔ,
        ΔΔΔ: ᐃΔ.ⲆⲆᐃⲆΔΔᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⵠΔⲆᐃᐃⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃᐃⵠᐃᐃⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Tamon Lynx"
      }, {
        id: 215,
        ΔⲆⵠ: ᐃΔ.ⲆᐃᐃᐃⲆⲆⵠ,
        ΔΔΔ: ᐃΔ.ΔⲆΔⲆⲆⵠⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⲆⵠⲆΔⲆΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⵠᐃΔᐃⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Tamon Warg"
      }, {
        id: 217,
        ΔⲆⵠ: ᐃΔ.ΔΔⲆⵠⵠⵠⲆ,
        ΔΔΔ: ᐃΔ.ⵠᐃⲆΔᐃΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃΔᐃΔᐃⵠⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⲆⲆᐃⵠⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Tamon Menhir"
      }, {
        id: 95,
        ΔⲆⵠ: ᐃΔ.ⲆⲆⵠⲆΔⲆᐃ,
        ΔΔΔ: ᐃΔ.ᐃᐃⵠⲆᐃⲆⲆ,
        ⲆⲆⵠΔ: ᐃΔ.Ⲇⵠⵠⵠᐃᐃⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⵠⲆⲆⲆΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Mr. Garlic"
      }, {
        id: 76,
        ΔⲆⵠ: ᐃΔ.ⲆΔᐃⵠΔⲆᐃ,
        ΔΔΔ: ᐃΔ.ᐃⵠᐃΔⵠⵠⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃᐃᐃⵠⲆⲆⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⵠΔⵠᐃⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Winter",
        name: "Robot Dragon"
      }, {
        id: 44,
        ΔⲆⵠ: ᐃΔ.ΔᐃᐃΔᐃΔⵠ,
        ΔΔΔ: ᐃΔ.ⵠΔⲆⵠⵠᐃⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⲆⲆⵠⲆⲆΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠᐃᐃᐃⵠⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Winter",
        name: "Lava Dragon Version 1"
      }, {
        id: 90,
        ΔⲆⵠ: ᐃΔ.ⵠᐃΔᐃᐃⲆⵠ,
        ΔΔΔ: ᐃΔ.ⵠΔΔⲆΔⵠᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆᐃⲆΔⵠΔⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ΔΔᐃⲆΔᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "ExpertyAnimations",
        name: "Lava Dragon Version 2"
      }, {
        id: 124,
        ΔⲆⵠ: ᐃΔ.ΔⵠⲆⲆΔⵠⲆ,
        ΔΔΔ: ᐃΔ.ⲆΔⵠᐃᐃⵠⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⲆⵠΔⵠᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⵠⵠⲆⵠⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Lava Dragon Version 3"
      }, {
        id: 45,
        ΔⲆⵠ: ᐃΔ.ⵠΔⲆⵠⵠΔⲆ,
        ΔΔΔ: ᐃΔ.ⲆᐃⵠΔⵠΔⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆΔⵠⲆⵠᐃⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃΔᐃⵠⲆⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Sushui",
        name: "Ice Dragon Version 1"
      }, {
        id: 46,
        ΔⲆⵠ: ᐃΔ.ΔᐃⵠⵠⲆᐃⵠ,
        ΔΔΔ: ᐃΔ.ⲆⲆⲆᐃᐃⲆⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠΔΔⵠΔΔΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆΔᐃⵠᐃⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Winter",
        name: "Ice Dragon Version 2"
      }, {
        id: 108,
        ΔⲆⵠ: ᐃΔ.ΔΔⲆΔΔΔΔ,
        ΔΔΔ: ᐃΔ.ᐃⲆⵠⵠⵠⵠᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⵠⵠⲆΔᐃⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆᐃΔⲆⵠⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Ice Dragon Version 3"
      }, {
        id: 123,
        ΔⲆⵠ: ᐃΔ.ᐃΔΔⲆᐃⵠⲆ,
        ΔΔΔ: ᐃΔ.ⵠᐃⲆΔᐃⲆᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⲆⵠⲆΔⵠΔ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⵠⲆⵠⵠᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Baby Dragon Version 1"
      }, {
        id: 128,
        ΔⲆⵠ: ᐃΔ.ΔⵠΔⲆⵠΔⵠ,
        ΔΔΔ: ᐃΔ.ᐃⲆⲆⵠΔᐃⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆᐃΔⲆⲆⲆⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆᐃᐃⵠΔᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "MADBalgouthi",
        name: "Baby Dragon Version 2"
      }, {
        id: 125,
        ΔⲆⵠ: ᐃΔ.ᐃΔⲆⲆΔⵠΔ,
        ΔΔΔ: ᐃΔ.ⲆⲆΔⲆⵠᐃΔ,
        ⲆⲆⵠΔ: ᐃΔ.ΔΔⲆᐃⵠⲆⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⲆⵠⲆᐃⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Baby Lava"
      }, {
        id: 47,
        ΔⲆⵠ: ᐃΔ.ᐃⲆᐃⲆΔⲆᐃ,
        ΔΔΔ: ᐃΔ.ΔⲆᐃᐃᐃⲆΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠⲆⵠⲆΔᐃΔ,
        ᐃΔⵠⲆ: ᐃΔ.ΔᐃΔⵠⲆΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Kraken"
      }, {
        id: 129,
        ΔⲆⵠ: ᐃΔ.ΔΔⵠΔⵠᐃⲆ,
        ΔΔΔ: ᐃΔ.ⵠⵠᐃⲆⲆⲆᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⲆΔⵠⵠⲆⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ΔᐃᐃΔΔᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Sandworm"
      }, {
        id: 63,
        ΔⲆⵠ: ᐃΔ.ⲆⵠⵠⵠⲆᐃΔ,
        ΔΔΔ: ᐃΔ.ⵠⵠⲆΔΔⲆΔ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃᐃⲆⵠᐃⲆΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠΔᐃᐃⵠΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mr. Golden Bread"
      }, {
        id: 67,
        ΔⲆⵠ: ᐃΔ.ⲆⵠⲆΔⵠᐃᐃ,
        ΔΔΔ: ᐃΔ.ΔᐃΔⵠΔΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆᐃᐃΔⵠⵠΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⵠⵠⵠᐃⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "ForgottenHeroe",
        name: "Starver Ores"
      }, {
        id: 130,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⵠⲆⲆᐃⵠ,
        ΔΔΔ: ᐃΔ.ΔⲆᐃⵠᐃΔΔ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃᐃΔⲆⲆᐃΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠΔᐃⲆⵠⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Poo"
      }, {
        id: 89,
        ΔⲆⵠ: ᐃΔ.ΔⲆⲆⲆΔⵠⵠ,
        ΔΔΔ: ᐃΔ.ⲆⵠΔΔΔⲆⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆΔΔⲆΔᐃⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⲆⲆⵠΔᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Poinet",
        name: "Volcano Starver"
      }, {
        id: 112,
        ΔⲆⵠ: ᐃΔ.ᐃΔΔᐃᐃⲆΔ,
        ΔΔΔ: ᐃΔ.ΔᐃᐃⵠᐃᐃⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠᐃΔΔⲆΔⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠᐃᐃⲆΔⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Lava Starver"
      }, {
        id: 183,
        ΔⲆⵠ: ᐃΔ.ⲆⲆⲆⲆΔᐃΔ,
        ΔΔΔ: ᐃΔ.ΔⲆᐃΔⵠⵠᐃ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆΔᐃᐃΔΔΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆΔⵠᐃΔⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Revaster"
      }, {
        id: 192,
        ΔⲆⵠ: ᐃΔ.ΔⲆⲆⲆⲆᐃⵠ,
        ΔΔΔ: ᐃΔ.ⲆⵠⲆⲆΔᐃⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⵠⲆⵠⲆᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⵠΔᐃᐃΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Awakened"
      }, {
        id: 194,
        ΔⲆⵠ: ᐃΔ.ⲆⵠᐃⵠⲆⵠΔ,
        ΔΔΔ: ᐃΔ.ΔⲆⵠⲆⲆⲆⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠⵠΔⵠΔᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⵠⲆⲆⲆᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Tamon Ice Dragon"
      }, {
        id: 236,
        ΔⲆⵠ: ᐃΔ.ⲆΔΔⵠⲆⵠⲆ,
        ΔΔΔ: ᐃΔ.ᐃⲆᐃΔⵠⲆⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⵠⲆⲆⲆⲆᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃΔⲆᐃⲆⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Crystal Dragon"
      }, {
        id: 208,
        ΔⲆⵠ: ᐃΔ.ⵠΔΔⵠⲆⵠΔ,
        ΔΔΔ: ᐃΔ.ᐃⲆᐃΔΔⵠⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⲆᐃᐃΔᐃΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⵠⵠΔᐃⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Bone Dragon"
      }, {
        id: 216,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⲆⲆⵠⲆⵠ,
        ΔΔΔ: ᐃΔ.ᐃᐃⲆⲆᐃⵠⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⵠΔⵠΔⲆⲆ,
        ᐃΔⵠⲆ: ᐃΔ.ⲆⲆⲆⵠⲆⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Tamon Warg Ghost"
      }, {
        id: 226,
        ΔⲆⵠ: ᐃΔ.ⲆΔᐃΔΔⲆⲆ,
        ΔΔΔ: ᐃΔ.ΔᐃⲆⵠⲆⵠⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⲆᐃΔᐃᐃᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠⲆΔᐃⵠΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Cursed"
      }, {
        id: 48,
        ΔⲆⵠ: ᐃΔ.ΔΔΔᐃⲆΔⲆ,
        ΔΔΔ: ᐃΔ.ⵠⵠⵠⲆⵠⲆⲆ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠΔᐃᐃⲆΔⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ΔᐃⲆᐃΔᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆΔⲆᐃΔΔⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Robot"
      }, {
        id: 110,
        ΔⲆⵠ: ᐃΔ.ⲆⲆⵠᐃⵠⲆⵠ,
        ΔΔΔ: ᐃΔ.ΔΔᐃⲆⲆᐃΔ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⲆⲆᐃᐃⵠⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠΔⲆᐃⵠΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆΔⲆᐃΔΔⵠ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Blue Butterfly"
      }, {
        id: 157,
        ΔⲆⵠ: ᐃΔ.ᐃⲆᐃⵠᐃΔᐃ,
        ΔΔΔ: ᐃΔ.ΔⲆᐃᐃⲆⵠⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ⵠΔΔᐃᐃΔᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ΔΔⲆⲆⲆΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆΔⲆᐃΔΔⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Yrifox"
      }, {
        id: 165,
        ΔⲆⵠ: ᐃΔ.ⵠⵠΔᐃΔΔᐃ,
        ΔΔΔ: ᐃΔ.ⵠᐃΔΔⲆᐃΔ,
        ⲆⲆⵠΔ: ᐃΔ.ⲆⲆᐃⲆᐃΔᐃ,
        ᐃΔⵠⲆ: ᐃΔ.ᐃⲆΔⵠᐃⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆΔⲆᐃΔΔⵠ,
        Ⲇⵠᐃ: "OmarJr13",
        name: "Blob Skin"
      }, {
        id: 237,
        ΔⲆⵠ: ᐃΔ.ΔΔᐃᐃΔⵠᐃ,
        ΔΔΔ: ᐃΔ.ⲆⵠΔΔⲆⲆΔ,
        ⲆⲆⵠΔ: ᐃΔ.ᐃⵠΔⲆⲆᐃⵠ,
        ᐃΔⵠⲆ: ᐃΔ.ΔⵠⲆᐃⵠᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆΔⲆᐃΔΔⵠ,
        Ⲇⵠᐃ: "NotBonnie",
        name: "NotBonnie"
      }, {
        id: 238,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⵠⲆΔΔⵠ,
        ΔΔΔ: ᐃΔ.ΔⵠΔᐃᐃⲆⵠ,
        ⲆⲆⵠΔ: ᐃΔ.ΔⲆΔΔΔᐃΔ,
        ᐃΔⵠⲆ: ᐃΔ.ⵠᐃⲆⵠⵠᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆΔⲆᐃΔΔⵠ,
        Ⲇⵠᐃ: "NotBonnie",
        name: "Cynder"
      }],
      ⵠᐃᐃⲆ: [{
        id: 0,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⵠⵠΔᐃᐃ,
        ΔΔΔ: ᐃΔ.ⲆⵠᐃᐃᐃΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔᐃΔΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Bag 1"
      }, {
        id: 1,
        ΔⲆⵠ: ᐃΔ.ᐃΔⲆⲆⲆᐃΔ,
        ΔΔΔ: ᐃΔ.ᐃⲆⵠⵠᐃᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔᐃΔΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Old Bag"
      }, {
        id: 2,
        ΔⲆⵠ: ᐃΔ.ⵠⲆΔⵠⲆⲆᐃ,
        ΔΔΔ: ᐃΔ.ΔΔᐃⲆⲆⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Bag 2"
      }, {
        id: 3,
        ΔⲆⵠ: ᐃΔ.ΔⵠⲆΔΔᐃⵠ,
        ΔΔΔ: ᐃΔ.ᐃΔᐃᐃⲆᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Bag 3"
      }, {
        id: 4,
        ΔⲆⵠ: ᐃΔ.ⵠΔᐃᐃᐃⵠⲆ,
        ΔΔΔ: ᐃΔ.ᐃⲆⵠΔᐃΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Bag 4"
      }, {
        id: 5,
        ΔⲆⵠ: ᐃΔ.ⲆΔΔᐃⵠⵠΔ,
        ΔΔΔ: ᐃΔ.ΔᐃⵠΔⲆⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Bag 5"
      }, {
        id: 11,
        ΔⲆⵠ: ᐃΔ.ⲆⲆⵠᐃΔᐃᐃ,
        ΔΔΔ: ᐃΔ.ⵠⵠⲆⵠⵠⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Wood Pickaxe Bag"
      }, {
        id: 19,
        ΔⲆⵠ: ᐃΔ.ⲆᐃⲆⲆΔⲆⲆ,
        ΔΔΔ: ᐃΔ.ΔᐃΔⵠᐃΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io ",
        name: "Wood Carrier"
      }, {
        id: 37,
        ΔⲆⵠ: ᐃΔ.ᐃΔᐃᐃⵠⲆⲆ,
        ΔΔΔ: ᐃΔ.ⲆΔΔΔⵠⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Bag 6"
      }, {
        id: 39,
        ΔⲆⵠ: ᐃΔ.ⵠⲆⲆᐃΔΔⵠ,
        ΔΔΔ: ᐃΔ.ᐃᐃᐃⲆⲆⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Bag with Wooden Swords"
      }, {
        id: 44,
        ΔⲆⵠ: ᐃΔ.ⵠΔᐃΔᐃⲆⲆ,
        ΔΔΔ: ᐃΔ.ᐃᐃⲆⲆΔⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Communist",
        name: "Big Bag"
      }, {
        id: 7,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⲆⲆⲆΔᐃ,
        ΔΔΔ: ᐃΔ.ⲆⵠⵠΔⵠⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Communist",
        name: "Bag 6"
      }, {
        id: 8,
        ΔⲆⵠ: ᐃΔ.ΔᐃᐃⵠΔΔⲆ,
        ΔΔΔ: ᐃΔ.ΔⲆᐃⲆⲆⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Easter Bag"
      }, {
        id: 9,
        ΔⲆⵠ: ᐃΔ.ΔⵠΔⵠⲆᐃⵠ,
        ΔΔΔ: ᐃΔ.ΔΔΔⵠⵠΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Star Bag"
      }, {
        id: 10,
        ΔⲆⵠ: ᐃΔ.ⲆΔᐃⵠⲆⲆΔ,
        ΔΔΔ: ᐃΔ.ⲆⵠⲆⲆΔΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Winter Bag"
      }, {
        id: 20,
        ΔⲆⵠ: ᐃΔ.ⲆᐃⵠΔᐃⲆᐃ,
        ΔΔΔ: ᐃΔ.ᐃⲆⲆΔⵠΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io ",
        name: "Stone Carrier"
      }, {
        id: 24,
        ΔⲆⵠ: ᐃΔ.ⲆⵠᐃⵠⲆⲆΔ,
        ΔΔΔ: ᐃΔ.ΔΔⲆⵠᐃΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Stone Pickaxe Bag"
      }, {
        id: 6,
        ΔⲆⵠ: ᐃΔ.ⵠⵠⵠⵠᐃΔᐃ,
        ΔΔΔ: ᐃΔ.ⲆⵠΔⲆⵠΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Communist",
        name: "Bag Camouflage"
      }, {
        id: 38,
        ΔⲆⵠ: ᐃΔ.ᐃⵠⲆⲆᐃⵠⲆ,
        ΔΔΔ: ᐃΔ.ⲆⵠⲆⲆΔⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Bag with Stone Swords"
      }, {
        id: 54,
        ΔⲆⵠ: ᐃΔ.Ⲇⵠᐃⵠⵠᐃⵠ,
        ΔΔΔ: ᐃΔ.ᐃⲆⵠⲆΔⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Cow Bag"
      }, {
        id: 59,
        ΔⲆⵠ: ᐃΔ.ⵠⲆⲆⲆᐃⵠΔ,
        ΔΔΔ: ᐃΔ.ᐃᐃΔᐃⲆⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "CrysTal",
        name: "Starver Bag"
      }, {
        id: 62,
        ΔⲆⵠ: ᐃΔ.ᐃⲆᐃⵠᐃⵠⵠ,
        ΔΔΔ: ᐃΔ.ⵠⲆᐃⵠⵠⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "CrysTal",
        name: "Crystal Sky Bag"
      }, {
        id: 71,
        ΔⲆⵠ: ᐃΔ.ⵠᐃΔᐃΔΔⲆ,
        ΔΔΔ: ᐃΔ.ᐃΔΔΔⲆΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Portable Furnace"
      }, {
        id: 78,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⵠⵠⲆⵠⵠ,
        ΔΔΔ: ᐃΔ.ΔⲆᐃⲆⵠᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Crate Bag"
      }, {
        id: 13,
        ΔⲆⵠ: ᐃΔ.ᐃΔⲆΔⵠΔⵠ,
        ΔΔΔ: ᐃΔ.ΔᐃᐃⲆⵠⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Honey Pot"
      }, {
        id: 21,
        ΔⲆⵠ: ᐃΔ.ΔⵠΔⵠⵠⲆΔ,
        ΔΔΔ: ᐃΔ.ⵠⲆΔᐃⲆⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io ",
        name: "Gold Carrier"
      }, {
        id: 30,
        ΔⲆⵠ: ᐃΔ.ΔΔⵠⵠⵠΔⵠ,
        ΔΔΔ: ᐃΔ.ᐃᐃⵠⵠⵠΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Gold Pickaxe Bag"
      }, {
        id: 29,
        ΔⲆⵠ: ᐃΔ.ⲆⵠᐃᐃΔⵠᐃ,
        ΔΔΔ: ᐃΔ.ⲆⲆⲆⲆⲆΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Ariel",
        name: "Mr and Mrs Bakers"
      }, {
        id: 41,
        ΔⲆⵠ: ᐃΔ.ⵠΔΔᐃⲆⲆⵠ,
        ΔΔΔ: ᐃΔ.ΔᐃⵠᐃⲆᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Bag with Golden Swords"
      }, {
        id: 47,
        ΔⲆⵠ: ᐃΔ.ⵠΔΔΔⲆΔⵠ,
        ΔΔΔ: ᐃΔ.ⲆⲆⵠⲆΔⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Explorer Bag"
      }, {
        id: 51,
        ΔⲆⵠ: ᐃΔ.ᐃᐃᐃⲆΔᐃⲆ,
        ΔΔΔ: ᐃΔ.ⲆΔⵠΔⵠⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Bamboo Bag"
      }, {
        id: 53,
        ΔⲆⵠ: ᐃΔ.ΔⲆΔΔᐃᐃΔ,
        ΔΔΔ: ᐃΔ.ᐃΔⲆΔΔⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Mummy Bag"
      }, {
        id: 58,
        ΔⲆⵠ: ᐃΔ.ⲆⲆΔⲆⵠΔᐃ,
        ΔΔΔ: ᐃΔ.ⵠⲆᐃⲆⵠᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "MADBalgouthi",
        name: "Watermelon Bag"
      }, {
        id: 60,
        ΔⲆⵠ: ᐃΔ.ᐃⵠⲆΔΔᐃⵠ,
        ΔΔΔ: ᐃΔ.ⲆⵠⵠᐃΔⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Garlic Bag"
      }, {
        id: 61,
        ΔⲆⵠ: ᐃΔ.ⲆᐃΔᐃᐃⵠΔ,
        ΔΔΔ: ᐃΔ.ΔⲆΔⵠⲆⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Pumpkin Bag"
      }, {
        id: 64,
        ΔⲆⵠ: ᐃΔ.ⵠΔⲆⲆᐃⵠⲆ,
        ΔΔΔ: ᐃΔ.ΔΔᐃⲆⲆⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "upfiz",
        name: "Oil Barel bag"
      }, {
        id: 67,
        ΔⲆⵠ: ᐃΔ.ⵠᐃΔᐃᐃΔᐃ,
        ΔΔΔ: ᐃΔ.ⲆᐃᐃⲆⲆΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Tree Bag"
      }, {
        id: 70,
        ΔⲆⵠ: ᐃΔ.ⵠⵠᐃⲆΔⲆⲆ,
        ΔΔΔ: ᐃΔ.ΔⵠⵠΔᐃⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Lit Portable Furnace"
      }, {
        id: 72,
        ΔⲆⵠ: ᐃΔ.ⲆⲆⲆⲆⲆᐃΔ,
        ΔΔΔ: ᐃΔ.ⲆΔΔᐃΔᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Christmas Berry Bush Bag"
      }, {
        id: 73,
        ΔⲆⵠ: ᐃΔ.ᐃⵠᐃⵠⲆΔΔ,
        ΔΔΔ: ᐃΔ.ⵠⵠᐃᐃⵠⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Berry Bush Bag"
      }, {
        id: 74,
        ΔⲆⵠ: ᐃΔ.ΔΔⵠⵠⵠⵠᐃ,
        ΔΔΔ: ᐃΔ.ᐃⲆⵠⵠΔⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Fall Berry Bush Bag"
      }, {
        id: 76,
        ΔⲆⵠ: ᐃΔ.ΔⵠⵠⵠᐃΔᐃ,
        ΔΔΔ: ᐃΔ.ΔᐃⵠᐃⵠΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Reclaimed Bag"
      }, {
        id: 14,
        ΔⲆⵠ: ᐃΔ.ⵠΔⵠΔⲆΔⵠ,
        ΔΔΔ: ᐃΔ.ⵠΔΔΔᐃⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "a Rabbit in my Bag"
      }, {
        id: 15,
        ΔⲆⵠ: ᐃΔ.ΔⲆⲆⵠⲆⵠΔ,
        ΔΔΔ: ᐃΔ.ⵠⲆⵠᐃⲆⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Bird's nest"
      }, {
        id: 16,
        ΔⲆⵠ: ᐃΔ.ⲆΔⲆΔΔⲆⵠ,
        ΔΔΔ: ᐃΔ.ⲆⲆⵠⵠΔΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "a Fish on your Back"
      }, {
        id: 17,
        ΔⲆⵠ: ᐃΔ.ⵠⵠΔⲆⵠᐃΔ,
        ΔΔΔ: ᐃΔ.ⲆⵠΔᐃᐃⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "a Squirrel in my Bag"
      }, {
        id: 22,
        ΔⲆⵠ: ᐃΔ.ⲆᐃⲆⵠᐃⵠᐃ,
        ΔΔΔ: ᐃΔ.ⵠⵠᐃⵠⵠⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io ",
        name: "Diamond Carrier"
      }, {
        id: 12,
        ΔⲆⵠ: ᐃΔ.ⵠΔⵠⵠⵠⲆΔ,
        ΔΔΔ: ᐃΔ.ᐃᐃΔᐃⲆᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Resources Bag"
      }, {
        id: 32,
        ΔⲆⵠ: ᐃΔ.ᐃⲆᐃΔⲆΔⵠ,
        ΔΔΔ: ᐃΔ.ᐃⵠⲆⲆⵠΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Diamond Pickaxe Bag"
      }, {
        id: 40,
        ΔⲆⵠ: ᐃΔ.ΔᐃΔᐃᐃᐃⵠ,
        ΔΔΔ: ᐃΔ.ᐃⵠⵠΔⵠᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Bag with Diamond Swords"
      }, {
        id: 45,
        ΔⲆⵠ: ᐃΔ.ⵠⵠⲆⲆⲆΔⵠ,
        ΔΔΔ: ᐃΔ.ΔΔⵠᐃⲆΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "My Cake Bag"
      }, {
        id: 46,
        ΔⲆⵠ: ᐃΔ.ᐃΔᐃⵠΔᐃⲆ,
        ΔΔΔ: ᐃΔ.ⵠᐃⲆΔᐃΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "My Christmas Cake Bag"
      }, {
        id: 52,
        ΔⲆⵠ: ᐃΔ.ΔΔᐃⲆᐃᐃᐃ,
        ΔΔΔ: ᐃΔ.ⲆᐃΔⵠᐃΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "MADBalgouthi",
        name: "Fish Bag"
      }, {
        id: 65,
        ΔⲆⵠ: ᐃΔ.ΔΔⲆᐃᐃⵠΔ,
        ΔΔΔ: ᐃΔ.ΔⲆⵠⵠΔᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Cloud Bag"
      }, {
        id: 68,
        ΔⲆⵠ: ᐃΔ.ΔⵠᐃᐃΔⲆⲆ,
        ΔΔΔ: ᐃΔ.ⵠⲆΔΔᐃⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Bee Bag"
      }, {
        id: 77,
        ΔⲆⵠ: ᐃΔ.ⲆⵠΔⲆᐃᐃΔ,
        ΔΔΔ: ᐃΔ.ⲆΔⲆⲆΔⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Bag and Bedroll"
      }, {
        id: 80,
        ΔⲆⵠ: ᐃΔ.ⵠⵠⵠΔⵠⵠᐃ,
        ΔΔΔ: ᐃΔ.ΔΔΔⵠΔⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Peasant's Bag"
      }, {
        id: 81,
        ΔⲆⵠ: ᐃΔ.ΔᐃᐃⲆⲆⲆᐃ,
        ΔΔΔ: ᐃΔ.ᐃⲆᐃⲆⲆᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Probably Stolen Bag"
      }, {
        id: 48,
        ΔⲆⵠ: ᐃΔ.ΔⲆⵠΔⵠⲆⲆ,
        ΔΔΔ: ᐃΔ.ⵠⵠᐃⲆᐃⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "fatant",
        name: "Natural Bag"
      }, {
        id: 23,
        ΔⲆⵠ: ᐃΔ.ⵠⲆᐃⲆΔⲆⵠ,
        ΔΔΔ: ᐃΔ.ⲆΔⵠᐃⲆΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io ",
        name: "Amethyst Carrier"
      }, {
        id: 25,
        ΔⲆⵠ: ᐃΔ.ⵠⵠⵠᐃⲆⵠΔ,
        ΔΔΔ: ᐃΔ.ⵠⲆΔΔⵠᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Amethyst Pickaxe Bag"
      }, {
        id: 28,
        ΔⲆⵠ: ᐃΔ.ᐃΔΔⵠΔⲆΔ,
        ΔΔΔ: ᐃΔ.ᐃᐃᐃⵠⵠᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Your Baby"
      }, {
        id: 33,
        ΔⲆⵠ: ᐃΔ.ⵠⵠⵠᐃⲆΔⲆ,
        ΔΔΔ: ᐃΔ.ⲆΔᐃⵠⵠΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Tropical Bag"
      }, {
        id: 43,
        ΔⲆⵠ: ᐃΔ.ⲆⵠⲆⵠⲆᐃⲆ,
        ΔΔΔ: ᐃΔ.ᐃⲆᐃΔⲆΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Bag with Amethyst Swords"
      }, {
        id: 35,
        ΔⲆⵠ: ᐃΔ.ⲆⵠᐃᐃⵠΔᐃ,
        ΔΔΔ: ᐃΔ.ᐃᐃⲆᐃⵠΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Ice Bag"
      }, {
        id: 50,
        ΔⲆⵠ: ᐃΔ.ⲆⵠΔΔᐃⲆᐃ,
        ΔΔΔ: ᐃΔ.ΔⵠⵠⲆᐃⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Thornbush Bag"
      }, {
        id: 56,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⵠᐃᐃⲆᐃ,
        ΔΔΔ: ᐃΔ.ⲆⵠⵠⵠⵠΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Autumn Bag"
      }, {
        id: 57,
        ΔⲆⵠ: ᐃΔ.ΔⲆΔᐃΔⲆⲆ,
        ΔΔΔ: ᐃΔ.ⲆᐃⵠⲆⵠΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Dino Egg Bag"
      }, {
        id: 66,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⲆᐃᐃΔᐃ,
        ΔΔΔ: ᐃΔ.ⲆᐃΔⵠⲆΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Magic Cloud Bag"
      }, {
        id: 69,
        ΔⲆⵠ: ᐃΔ.ᐃⲆΔⲆⲆⲆⲆ,
        ΔΔΔ: ᐃΔ.ᐃⵠΔΔᐃⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Chest Bag"
      }, {
        id: 75,
        ΔⲆⵠ: ᐃΔ.ᐃⵠᐃᐃⵠΔⵠ,
        ΔΔΔ: ᐃΔ.ΔᐃΔᐃΔΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Tamon Spectum Bag"
      }, {
        id: 79,
        ΔⲆⵠ: ᐃΔ.ⲆΔᐃΔᐃᐃⵠ,
        ΔΔΔ: ᐃΔ.ΔⲆᐃⲆᐃΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Winter Peasant's Bag"
      }, {
        id: 31,
        ΔⲆⵠ: ᐃΔ.ⵠᐃⵠᐃⵠΔΔ,
        ΔΔΔ: ᐃΔ.ⲆΔⵠⵠⲆⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io ",
        name: "Reidite Carrier"
      }, {
        id: 18,
        ΔⲆⵠ: ᐃΔ.ᐃΔΔⲆᐃⲆⵠ,
        ΔΔΔ: ᐃΔ.ⲆⲆⲆⵠⲆᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Winter",
        name: "Lava Bag"
      }, {
        id: 49,
        ΔⲆⵠ: ᐃΔ.ⲆΔΔⲆᐃΔΔ,
        ΔΔΔ: ᐃΔ.ΔΔⲆᐃᐃᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Lava Bag 2"
      }, {
        id: 36,
        ΔⲆⵠ: ᐃΔ.ΔΔΔⲆᐃᐃΔ,
        ΔΔΔ: ᐃΔ.ΔⲆΔΔΔᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Dragon Bag"
      }, {
        id: 55,
        ΔⲆⵠ: ᐃΔ.ᐃΔⵠⵠⲆᐃᐃ,
        ΔΔΔ: ᐃΔ.ⵠⲆⲆⵠᐃⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Winter Ice Bag"
      }, {
        id: 26,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⲆⵠᐃⲆΔ,
        ΔΔΔ: ᐃΔ.ⲆⲆⲆᐃᐃΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Reidite Pickaxe Bag"
      }, {
        id: 27,
        ΔⲆⵠ: ᐃΔ.ⲆⲆⵠⲆΔⲆⵠ,
        ΔΔΔ: ᐃΔ.ⵠΔᐃΔⲆⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Octopus Bowl"
      }, {
        id: 34,
        ΔⲆⵠ: ᐃΔ.ΔⲆⵠΔᐃᐃⵠ,
        ΔΔΔ: ᐃΔ.ⲆⲆΔⲆⵠΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Cave Bag"
      }, {
        id: 42,
        ΔⲆⵠ: ᐃΔ.ΔᐃΔᐃΔⲆⲆ,
        ΔΔΔ: ᐃΔ.ᐃᐃⵠᐃⲆΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Bag with Reidite Swords"
      }, {
        id: 63,
        ΔⲆⵠ: ᐃΔ.ΔⲆⲆΔᐃⵠⲆ,
        ΔΔΔ: ᐃΔ.ᐃⵠⵠᐃΔᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Engineer Bag"
      }],
      ΔⲆⵠᐃΔ: [{
        id: 0,
        ΔⲆⵠ: ᐃΔ.ΔΔⵠᐃᐃⲆᐃ,
        ΔΔΔ: ᐃΔ.ⲆᐃᐃⵠᐃⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔᐃΔΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Wooden Dead Box"
      }, {
        id: 1,
        ΔⲆⵠ: ᐃΔ.ⵠᐃᐃᐃᐃᐃⵠ,
        ΔΔΔ: ᐃΔ.ⲆⵠⲆⲆⲆΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔᐃΔΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Hidden item"
      }, {
        id: 2,
        ΔⲆⵠ: ᐃΔ.ⵠⲆΔᐃΔΔᐃ,
        ΔΔΔ: ᐃΔ.ᐃᐃⲆΔⵠᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Wooden Box 1"
      }, {
        id: 3,
        ΔⲆⵠ: ᐃΔ.ⵠⲆΔᐃΔⲆⵠ,
        ΔΔΔ: ᐃΔ.ⵠΔΔΔΔᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Wooden Box 2"
      }, {
        id: 4,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⲆΔⵠᐃⵠ,
        ΔΔΔ: ᐃΔ.ΔᐃⵠᐃᐃᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Wooden Box 3"
      }, {
        id: 5,
        ΔⲆⵠ: ᐃΔ.ᐃⵠⵠⵠᐃᐃΔ,
        ΔΔΔ: ᐃΔ.ⵠⵠᐃΔⲆΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Broken Wooden Box"
      }, {
        id: 6,
        ΔⲆⵠ: ᐃΔ.ⵠⵠᐃⵠⲆᐃΔ,
        ΔΔΔ: ᐃΔ.ᐃⲆᐃⵠᐃⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Wooden Box"
      }, {
        id: 7,
        ΔⲆⵠ: ᐃΔ.ⲆⵠⲆᐃΔⲆⲆ,
        ΔΔΔ: ᐃΔ.ⲆⵠΔⲆⲆⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Wooden Battle Box"
      }, {
        id: 8,
        ΔⲆⵠ: ᐃΔ.ΔⵠⵠⵠΔⲆⲆ,
        ΔΔΔ: ᐃΔ.ⲆⵠᐃᐃΔΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Wooden Box with a Cross"
      }, {
        id: 9,
        ΔⲆⵠ: ᐃΔ.ᐃΔᐃΔⵠⵠⵠ,
        ΔΔΔ: ᐃΔ.ⲆⲆᐃⲆᐃⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Wooden Box with Bubbles"
      }, {
        id: 10,
        ΔⲆⵠ: ᐃΔ.ⲆⵠᐃⵠΔᐃΔ,
        ΔΔΔ: ᐃΔ.ᐃⲆΔⲆᐃⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Wooden Box with Eyes"
      }, {
        id: 11,
        ΔⲆⵠ: ᐃΔ.ᐃΔᐃΔᐃⲆΔ,
        ΔΔΔ: ᐃΔ.ⵠΔⵠᐃⵠᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Dark Wooden Box"
      }, {
        id: 38,
        ΔⲆⵠ: ᐃΔ.ⲆⵠᐃΔᐃΔᐃ,
        ΔΔΔ: ᐃΔ.ΔⲆⵠᐃⲆΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Weddlz",
        name: "Noob Box"
      }, {
        id: 12,
        ΔⲆⵠ: ᐃΔ.ᐃᐃΔⵠⲆⲆⵠ,
        ΔΔΔ: ᐃΔ.ᐃᐃΔⲆⵠⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Wooden and Stone Box"
      }, {
        id: 14,
        ΔⲆⵠ: ᐃΔ.ᐃⲆΔᐃⲆⲆΔ,
        ΔΔΔ: ᐃΔ.ᐃΔΔᐃⵠᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Star Box 1"
      }, {
        id: 15,
        ΔⲆⵠ: ᐃΔ.ⵠⲆⵠᐃΔᐃⵠ,
        ΔΔΔ: ᐃΔ.ⵠⵠⵠⵠᐃᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Star Box 2"
      }, {
        id: 27,
        ΔⲆⵠ: ᐃΔ.ᐃΔᐃⵠⵠⵠⲆ,
        ΔΔΔ: ᐃΔ.ⵠⲆⵠᐃⲆⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Flower Box"
      }, {
        id: 46,
        ΔⲆⵠ: ᐃΔ.ⲆⵠᐃⵠⵠΔⲆ,
        ΔΔΔ: ᐃΔ.ΔΔⲆⲆΔⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "MADBalgouthi",
        name: "Blue Box"
      }, {
        id: 75,
        ΔⲆⵠ: ᐃΔ.ⵠⵠΔΔⵠⲆΔ,
        ΔΔΔ: ᐃΔ.ⵠⲆⵠⲆⲆⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Night Stars Crate"
      }, {
        id: 19,
        ΔⲆⵠ: ᐃΔ.ⲆᐃⵠⲆⲆᐃΔ,
        ΔΔΔ: ᐃΔ.ᐃᐃⵠΔΔᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Beehive"
      }, {
        id: 13,
        ΔⲆⵠ: ᐃΔ.ΔⵠΔⲆⵠᐃᐃ,
        ΔΔΔ: ᐃΔ.ᐃΔᐃᐃⵠⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Wooden and Golden Box"
      }, {
        id: 21,
        ΔⲆⵠ: ᐃΔ.ΔᐃⲆᐃΔⲆⲆ,
        ΔΔΔ: ᐃΔ.ᐃΔΔⵠΔᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Gravestone"
      }, {
        id: 25,
        ΔⲆⵠ: ᐃΔ.ⵠΔᐃⵠⲆⲆⲆ,
        ΔΔΔ: ᐃΔ.ⲆΔⵠΔᐃⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Communist",
        name: "Sky Box"
      }, {
        id: 29,
        ΔⲆⵠ: ᐃΔ.ⲆⲆⲆⲆΔΔΔ,
        ΔΔΔ: ᐃΔ.ΔᐃⲆⵠⲆᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Winter",
        name: "Golden Box"
      }, {
        id: 34,
        ΔⲆⵠ: ᐃΔ.ᐃᐃᐃᐃⲆΔᐃ,
        ΔΔΔ: ᐃΔ.ΔⲆᐃⵠᐃᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Communist",
        name: "Water Crate"
      }, {
        id: 35,
        ΔⲆⵠ: ᐃΔ.ⲆⵠⲆᐃⵠⲆΔ,
        ΔΔΔ: ᐃΔ.ⲆⲆΔⵠᐃᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Communist",
        name: "Glass Crate"
      }, {
        id: 70,
        ΔⲆⵠ: ᐃΔ.ⲆⲆⵠⲆᐃⵠⲆ,
        ΔΔΔ: ᐃΔ.ⵠᐃⲆᐃⵠⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "CrysTal",
        name: "Crystal Sky Box"
      }, {
        id: 74,
        ΔⲆⵠ: ᐃΔ.ΔᐃᐃΔⵠᐃᐃ,
        ΔΔΔ: ᐃΔ.ᐃⲆᐃⵠⵠΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Reclaimed Crate"
      }, {
        id: 77,
        ΔⲆⵠ: ᐃΔ.ᐃΔΔⲆⲆΔΔ,
        ΔΔΔ: ᐃΔ.ⵠⲆΔΔⲆΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Workplace Accident"
      }, {
        id: 16,
        ΔⲆⵠ: ᐃΔ.ⵠΔΔΔΔΔⲆ,
        ΔΔΔ: ᐃΔ.ΔᐃᐃΔⵠⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Wooden and Diamond Box"
      }, {
        id: 18,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⵠⵠΔΔⵠ,
        ΔΔΔ: ᐃΔ.ΔΔᐃᐃᐃⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Don't Hit Me"
      }, {
        id: 26,
        ΔⲆⵠ: ᐃΔ.ⵠΔΔⲆᐃᐃⲆ,
        ΔΔΔ: ᐃΔ.ⲆΔᐃⲆᐃΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Underwater Box"
      }, {
        id: 31,
        ΔⲆⵠ: ᐃΔ.ⲆⵠⲆⵠⲆⵠⵠ,
        ΔΔΔ: ᐃΔ.ΔᐃⵠΔᐃⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Communist",
        name: "Items Pile"
      }, {
        id: 32,
        ΔⲆⵠ: ᐃΔ.ΔᐃᐃᐃᐃⵠⲆ,
        ΔΔΔ: ᐃΔ.ᐃΔⵠⲆΔⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Cake Box"
      }, {
        id: 33,
        ΔⲆⵠ: ᐃΔ.ᐃⲆΔⵠⵠⵠⵠ,
        ΔΔΔ: ᐃΔ.ΔⵠΔΔᐃΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Christmas Cake Box"
      }, {
        id: 36,
        ΔⲆⵠ: ᐃΔ.ⲆᐃⵠⵠΔᐃΔ,
        ΔΔΔ: ᐃΔ.ⲆᐃᐃᐃⲆᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Fukss",
        name: "Crab Box"
      }, {
        id: 42,
        ΔⲆⵠ: ᐃΔ.ⲆᐃⲆⲆΔᐃΔ,
        ΔΔΔ: ᐃΔ.ΔⵠΔᐃⲆΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "MADBalgouthi",
        name: "Fishing Box"
      }, {
        id: 72,
        ΔⲆⵠ: ᐃΔ.ΔⲆΔᐃⲆⲆᐃ,
        ΔΔΔ: ᐃΔ.ⲆⲆⲆⵠΔⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Storage Machine"
      }, {
        id: 22,
        ΔⲆⵠ: ᐃΔ.ΔΔⵠⲆⲆᐃⵠ,
        ΔΔΔ: ᐃΔ.ΔΔⵠᐃΔΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Let me out of here"
      }, {
        id: 17,
        ΔⲆⵠ: ᐃΔ.ΔΔⲆⵠΔᐃᐃ,
        ΔΔΔ: ᐃΔ.ⵠᐃᐃᐃΔᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Wooden and Amethyst Box"
      }, {
        id: 24,
        ΔⲆⵠ: ᐃΔ.ⲆΔᐃⵠⲆⵠⲆ,
        ΔΔΔ: ᐃΔ.ΔΔⵠⲆᐃⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Aquarium"
      }, {
        id: 28,
        ΔⲆⵠ: ᐃΔ.ⲆⲆᐃⵠᐃⵠⵠ,
        ΔΔΔ: ᐃΔ.ΔᐃⲆⲆⲆΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Gift Box"
      }, {
        id: 40,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⲆⲆⲆⵠᐃ,
        ΔΔΔ: ᐃΔ.ⵠᐃⲆⲆⲆᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "MADBalgouthi",
        name: "Open Watermelon Box"
      }, {
        id: 41,
        ΔⲆⵠ: ᐃΔ.ⲆΔᐃⵠⵠⵠᐃ,
        ΔΔΔ: ᐃΔ.ⲆΔⵠⲆⲆⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "MADBalgouthi",
        name: "Watermelon Box"
      }, {
        id: 39,
        ΔⲆⵠ: ᐃΔ.ⵠᐃⵠᐃⲆⵠᐃ,
        ΔΔΔ: ᐃΔ.ΔΔⵠⲆⵠᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Thornbush Box"
      }, {
        id: 43,
        ΔⲆⵠ: ᐃΔ.ΔᐃⲆᐃⲆⵠⵠ,
        ΔΔΔ: ᐃΔ.ΔⲆᐃᐃⲆⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Rabbit in the Box"
      }, {
        id: 47,
        ΔⲆⵠ: ᐃΔ.ᐃⵠⲆⵠⲆⵠᐃ,
        ΔΔΔ: ᐃΔ.ΔⵠΔΔⲆᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Garlic Plot"
      }, {
        id: 48,
        ΔⲆⵠ: ᐃΔ.ᐃΔΔⵠΔΔⲆ,
        ΔΔΔ: ᐃΔ.ⲆⲆⵠⵠΔΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Pumpkin Plot"
      }, {
        id: 78,
        ΔⲆⵠ: ᐃΔ.ⵠⲆⵠⵠᐃⵠᐃ,
        ΔΔΔ: ᐃΔ.ⵠᐃⵠᐃⵠⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Tamon Spectrum Portal"
      }, {
        id: 45,
        ΔⲆⵠ: ᐃΔ.ᐃⵠΔΔⲆⵠᐃ,
        ΔΔΔ: ᐃΔ.ⵠᐃⵠᐃⲆⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Autumn Box"
      }, {
        id: 44,
        ΔⲆⵠ: ᐃΔ.ΔⲆⲆⵠⲆᐃᐃ,
        ΔΔΔ: ᐃΔ.ᐃⲆⵠⵠⲆⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Winter Box"
      }, {
        id: 20,
        ΔⲆⵠ: ᐃΔ.ⵠⲆᐃΔΔⲆⲆ,
        ΔΔΔ: ᐃΔ.ⲆᐃⲆΔⲆΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Metal and Reidite Box"
      }, {
        id: 23,
        ΔⲆⵠ: ᐃΔ.ᐃⵠΔⵠⲆΔᐃ,
        ΔΔΔ: ᐃΔ.ΔⵠΔⲆⲆⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Kraken Box"
      }, {
        id: 30,
        ΔⲆⵠ: ᐃΔ.ΔΔᐃⲆᐃᐃⲆ,
        ΔΔΔ: ᐃΔ.ⲆⲆⵠⲆᐃᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Winter",
        name: "Lava Box"
      }, {
        id: 37,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⵠⵠⵠⵠΔ,
        ΔΔΔ: ᐃΔ.ⲆⵠΔΔΔΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Lava Box 2"
      }, {
        id: 49,
        ΔⲆⵠ: ᐃΔ.ⵠᐃΔⵠΔᐃⲆ,
        ΔΔΔ: ᐃΔ.ⲆΔⵠΔᐃⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Rabbit"
      }, {
        id: 50,
        ΔⲆⵠ: ᐃΔ.ⵠⵠΔⲆΔⲆᐃ,
        ΔΔΔ: ᐃΔ.ⲆⵠΔΔⵠΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Wolf"
      }, {
        id: 51,
        ΔⲆⵠ: ᐃΔ.ⲆΔⵠⵠΔΔΔ,
        ΔΔΔ: ᐃΔ.ᐃΔᐃⵠΔᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Spider"
      }, {
        id: 52,
        ΔⲆⵠ: ᐃΔ.ⵠΔⲆᐃⵠΔⵠ,
        ΔΔΔ: ᐃΔ.ⵠᐃΔⵠⲆᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Hawk"
      }, {
        id: 53,
        ΔⲆⵠ: ᐃΔ.ⲆΔⲆⲆⲆⲆᐃ,
        ΔΔΔ: ᐃΔ.ΔΔⵠⲆⵠΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Bear"
      }, {
        id: 54,
        ΔⲆⵠ: ᐃΔ.ᐃΔΔΔΔΔⵠ,
        ΔΔΔ: ᐃΔ.ⵠᐃᐃΔᐃΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Fox"
      }, {
        id: 55,
        ΔⲆⵠ: ᐃΔ.ΔⵠⲆᐃⵠᐃⵠ,
        ΔΔΔ: ᐃΔ.ΔΔΔᐃΔᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Baby Mammoth"
      }, {
        id: 56,
        ΔⲆⵠ: ᐃΔ.ΔⲆⵠⵠⲆΔⲆ,
        ΔΔΔ: ᐃΔ.ΔᐃⵠᐃΔΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Mammoth"
      }, {
        id: 57,
        ΔⲆⵠ: ᐃΔ.ⵠᐃᐃⲆⲆⲆⲆ,
        ΔΔΔ: ᐃΔ.ᐃⲆⵠⵠᐃⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Sandworm"
      }, {
        id: 58,
        ΔⲆⵠ: ᐃΔ.ⲆᐃⲆᐃⵠⵠⵠ,
        ΔΔΔ: ᐃΔ.ⲆΔⲆⲆⵠⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Vulture"
      }, {
        id: 59,
        ΔⲆⵠ: ᐃΔ.ⲆᐃᐃⵠΔΔⲆ,
        ΔΔΔ: ᐃΔ.ⵠΔΔⲆᐃΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Kraken"
      }, {
        id: 60,
        ΔⲆⵠ: ᐃΔ.ΔⲆᐃⲆΔⲆᐃ,
        ΔΔΔ: ᐃΔ.ΔᐃΔⲆᐃᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Piranha"
      }, {
        id: 61,
        ΔⲆⵠ: ᐃΔ.ΔᐃᐃΔⵠⲆⲆ,
        ΔΔΔ: ᐃΔ.ΔⵠⵠᐃⲆⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Baby Dragon"
      }, {
        id: 62,
        ΔⲆⵠ: ᐃΔ.ⲆΔΔⵠⵠⲆⲆ,
        ΔΔΔ: ᐃΔ.ᐃⵠΔⵠⵠΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Baby Lava"
      }, {
        id: 63,
        ΔⲆⵠ: ᐃΔ.ⲆⲆΔⵠΔⵠⲆ,
        ΔΔΔ: ᐃΔ.ⵠⵠⵠΔᐃⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Dragon"
      }, {
        id: 64,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⲆΔΔⵠⲆ,
        ΔΔΔ: ᐃΔ.ΔΔᐃΔⵠⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Penguin"
      }, {
        id: 65,
        ΔⲆⵠ: ᐃΔ.ⵠᐃⲆⲆᐃΔⲆ,
        ΔΔΔ: ᐃΔ.ΔᐃΔⵠⲆⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Lava Dragon"
      }, {
        id: 66,
        ΔⲆⵠ: ᐃΔ.ΔⵠᐃΔΔⲆᐃ,
        ΔΔΔ: ᐃΔ.ΔⵠᐃΔΔᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Boar"
      }, {
        id: 67,
        ΔⲆⵠ: ᐃΔ.ΔⲆΔⵠⲆΔΔ,
        ΔΔΔ: ᐃΔ.ⲆᐃᐃⲆΔⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Fire mob"
      }, {
        id: 68,
        ΔⲆⵠ: ᐃΔ.ⲆᐃⲆΔΔΔⲆ,
        ΔΔΔ: ᐃΔ.ⵠⵠⵠΔⲆᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the Crab"
      }, {
        id: 69,
        ΔⲆⵠ: ᐃΔ.ΔᐃⲆⲆⲆⲆⵠ,
        ΔΔΔ: ᐃΔ.ᐃⲆⵠⲆⲆⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Box of the King Crab"
      }, {
        id: 71,
        ΔⲆⵠ: ᐃΔ.ᐃⵠᐃΔⵠᐃⵠ,
        ΔΔΔ: ᐃΔ.ΔᐃⲆᐃΔⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Dragon Box"
      }, {
        id: 73,
        ΔⲆⵠ: ᐃΔ.ⵠⲆᐃΔⲆⵠⲆ,
        ΔΔΔ: ᐃΔ.ᐃⲆᐃΔᐃⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Rekt"
      }, {
        id: 76,
        ΔⲆⵠ: ᐃΔ.ⲆⵠᐃⲆᐃⵠⲆ,
        ΔΔΔ: ᐃΔ.ΔⲆⲆᐃⵠΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Sleeping Tamon Dragon"
      }],
      ⵠΔⲆᐃⲆ: [{
        id: 0,
        ΔⲆⵠ: ᐃΔ.ΔⲆⲆᐃΔⵠⲆ,
        ΔΔΔ: ᐃΔ.ⵠⵠᐃᐃⲆᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔᐃΔΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Book 1"
      }, {
        id: 1,
        ΔⲆⵠ: ᐃΔ.ⵠⲆⲆᐃⲆΔΔ,
        ΔΔΔ: ᐃΔ.ⵠᐃᐃᐃᐃⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Book 2"
      }, {
        id: 2,
        ΔⲆⵠ: ᐃΔ.ⵠΔΔΔΔⵠΔ,
        ΔΔΔ: ᐃΔ.ⵠᐃᐃΔⵠⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Book 3"
      }, {
        id: 3,
        ΔⲆⵠ: ᐃΔ.ⲆᐃᐃΔⵠᐃⲆ,
        ΔΔΔ: ᐃΔ.ⲆΔΔⲆⵠΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Book 4"
      }, {
        id: 4,
        ΔⲆⵠ: ᐃΔ.ᐃᐃΔΔᐃΔⵠ,
        ΔΔΔ: ᐃΔ.ᐃⲆⵠᐃᐃⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Damaged Book 1"
      }, {
        id: 18,
        ΔⲆⵠ: ᐃΔ.ΔᐃⲆᐃᐃᐃᐃ,
        ΔΔΔ: ᐃΔ.ᐃⵠⲆᐃⵠⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "SeveR",
        name: "Damaged Book 2"
      }, {
        id: 5,
        ΔⲆⵠ: ᐃΔ.ΔⲆΔᐃⵠⵠΔ,
        ΔΔΔ: ᐃΔ.Ⲇⵠᐃⵠᐃᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Doctorpus",
        name: "Scroll"
      }, {
        id: 6,
        ΔⲆⵠ: ᐃΔ.ⵠⲆᐃΔⲆΔⲆ,
        ΔΔΔ: ᐃΔ.ⲆΔᐃᐃᐃΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Doctorpus",
        name: "Clipboard"
      }, {
        id: 7,
        ΔⲆⵠ: ᐃΔ.ΔᐃᐃⵠⵠⲆᐃ,
        ΔΔΔ: ᐃΔ.ⲆⲆΔⲆⲆⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Seed Book"
      }, {
        id: 20,
        ΔⲆⵠ: ᐃΔ.ⵠⵠⵠⵠΔⲆΔ,
        ΔΔΔ: ᐃΔ.ᐃΔᐃⲆΔΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Camo Book"
      }, {
        id: 24,
        ΔⲆⵠ: ᐃΔ.ⵠⵠᐃⵠⲆⲆᐃ,
        ΔΔΔ: ᐃΔ.ⲆⵠᐃᐃᐃᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Communist",
        name: "Stone Tablet"
      }, {
        id: 47,
        ΔⲆⵠ: ᐃΔ.ᐃΔᐃⲆⲆΔᐃ,
        ΔΔΔ: ᐃΔ.ⵠⵠⲆⲆΔⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Reclaimed Book"
      }, {
        id: 10,
        ΔⲆⵠ: ᐃΔ.ᐃΔⵠᐃⵠⲆⵠ,
        ΔΔΔ: ᐃΔ.ⵠⲆᐃᐃᐃⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Star Book"
      }, {
        id: 8,
        ΔⲆⵠ: ᐃΔ.ⵠᐃⵠΔⲆᐃᐃ,
        ΔΔΔ: ᐃΔ.ⵠᐃⵠⲆⵠⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Gold Book"
      }, {
        id: 15,
        ΔⲆⵠ: ᐃΔ.ΔⵠΔᐃΔⲆⲆ,
        ΔΔΔ: ᐃΔ.ⵠΔΔⲆᐃᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Old Mysterious Paper"
      }, {
        id: 17,
        ΔⲆⵠ: ᐃΔ.ΔⵠᐃⲆⵠΔΔ,
        ΔΔΔ: ᐃΔ.ΔⵠΔᐃΔᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Gold Engraving"
      }, {
        id: 25,
        ΔⲆⵠ: ᐃΔ.ᐃΔⵠΔΔⵠΔ,
        ΔΔΔ: ᐃΔ.ⲆⲆⲆⲆⲆⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "fatant",
        name: "Ant Book"
      }, {
        id: 32,
        ΔⲆⵠ: ᐃΔ.ⵠⵠΔⲆⵠⵠⵠ,
        ΔΔΔ: ᐃΔ.ᐃΔⵠⵠᐃⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Mummy Book"
      }, {
        id: 37,
        ΔⲆⵠ: ᐃΔ.ᐃⲆᐃᐃⲆΔⵠ,
        ΔΔΔ: ᐃΔ.ᐃᐃⵠΔⵠⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Garlic Book"
      }, {
        id: 38,
        ΔⲆⵠ: ᐃΔ.ΔⲆⲆⲆΔΔΔ,
        ΔΔΔ: ᐃΔ.ⵠⵠᐃⵠᐃⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Pumpkin Book"
      }, {
        id: 39,
        ΔⲆⵠ: ᐃΔ.ᐃⵠⵠⲆⵠᐃΔ,
        ΔΔΔ: ᐃΔ.ⵠⵠⵠⵠⵠᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Christmas Tree Book"
      }, {
        id: 11,
        ΔⲆⵠ: ᐃΔ.Ⲇⵠᐃⵠᐃⵠⵠ,
        ΔΔΔ: ᐃΔ.ⵠⲆᐃⲆᐃⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Diamond Book"
      }, {
        id: 9,
        ΔⲆⵠ: ᐃΔ.ΔⵠⵠΔΔᐃⵠ,
        ΔΔΔ: ᐃΔ.ΔⵠΔⵠᐃΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Obscure Book"
      }, {
        id: 16,
        ΔⲆⵠ: ᐃΔ.ⵠᐃⵠΔⲆⵠⲆ,
        ΔΔΔ: ᐃΔ.ⵠⲆΔΔΔⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Rolled Parchment"
      }, {
        id: 22,
        ΔⲆⵠ: ᐃΔ.ΔᐃᐃⲆᐃᐃⵠ,
        ΔΔΔ: ᐃΔ.ΔᐃᐃⵠⲆΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Cake Book"
      }, {
        id: 23,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⲆⵠᐃΔΔ,
        ΔΔΔ: ᐃΔ.ᐃⲆⵠΔⲆΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Christmas Cake Book"
      }, {
        id: 30,
        ΔⲆⵠ: ᐃΔ.ⲆᐃⲆᐃᐃⲆΔ,
        ΔΔΔ: ᐃΔ.ⵠᐃᐃᐃΔⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "MADBalgouthi",
        name: "Fish Book"
      }, {
        id: 31,
        ΔⲆⵠ: ᐃΔ.ⵠᐃⵠᐃⲆᐃΔ,
        ΔΔΔ: ᐃΔ.ⵠⲆᐃⲆΔᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "CrysTal",
        name: "Once upon a time"
      }, {
        id: 48,
        ΔⲆⵠ: ᐃΔ.ΔΔᐃⲆⵠΔΔ,
        ΔΔΔ: ᐃΔ.ⲆΔᐃᐃⵠᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Chrono Clock"
      }, {
        id: 49,
        ΔⲆⵠ: ᐃΔ.ΔⵠᐃᐃΔᐃᐃ,
        ΔΔΔ: ᐃΔ.ᐃⵠⵠⵠᐃⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Recipe Book"
      }, {
        id: 13,
        ΔⲆⵠ: ᐃΔ.ⲆⵠᐃⲆⲆᐃⲆ,
        ΔΔΔ: ᐃΔ.ⲆⲆᐃᐃⵠⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Amethyst Book"
      }, {
        id: 28,
        ΔⲆⵠ: ᐃΔ.ⲆᐃΔΔᐃⲆΔ,
        ΔΔΔ: ᐃΔ.ᐃΔΔᐃΔᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Paint Pallet"
      }, {
        id: 29,
        ΔⲆⵠ: ᐃΔ.ⵠΔᐃᐃΔⵠⵠ,
        ΔΔΔ: ᐃΔ.ᐃΔᐃΔΔᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "CrysTal",
        name: "Watermelon Book"
      }, {
        id: 27,
        ΔⲆⵠ: ᐃΔ.ⲆⵠⵠⵠΔᐃⵠ,
        ΔΔΔ: ᐃΔ.ΔⲆΔⲆᐃⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Thornbush Book"
      }, {
        id: 35,
        ΔⲆⵠ: ᐃΔ.ΔⲆᐃⲆⲆΔᐃ,
        ΔΔΔ: ᐃΔ.ⵠᐃⵠⵠᐃᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Menu"
      }, {
        id: 36,
        ΔⲆⵠ: ᐃΔ.ⲆᐃⲆᐃⲆⵠᐃ,
        ΔΔΔ: ᐃΔ.ΔΔΔᐃᐃᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "CrysTal",
        name: "Lover Letter"
      }, {
        id: 40,
        ΔⲆⵠ: ᐃΔ.ⵠⵠⵠⵠⵠⲆΔ,
        ΔΔΔ: ᐃΔ.ΔΔΔⵠⲆⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Fresh-Baked Cookies"
      }, {
        id: 41,
        ΔⲆⵠ: ᐃΔ.ᐃᐃᐃᐃⲆⵠⲆ,
        ΔΔΔ: ᐃΔ.ΔΔᐃⲆⲆΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Inside, there is just a book."
      }, {
        id: 45,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⲆⲆⵠⲆⲆ,
        ΔΔΔ: ᐃΔ.ⵠⵠΔⵠⵠⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Crafting Machine"
      }, {
        id: 33,
        ΔⲆⵠ: ᐃΔ.ⵠΔᐃΔᐃᐃⵠ,
        ΔΔΔ: ᐃΔ.ⵠⲆᐃᐃΔⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Winter Book"
      }, {
        id: 34,
        ΔⲆⵠ: ᐃΔ.ΔᐃⲆⵠᐃⵠⵠ,
        ΔΔΔ: ᐃΔ.ΔΔᐃΔⵠΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Autumn Book"
      }, {
        id: 14,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⲆⲆΔⵠⲆ,
        ΔΔΔ: ᐃΔ.ⲆⵠⵠᐃᐃⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Reidite Book"
      }, {
        id: 12,
        ΔⲆⵠ: ᐃΔ.ᐃⵠⵠⵠⵠⵠⵠ,
        ΔΔΔ: ᐃΔ.ⵠΔⵠⵠⵠⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Winter",
        name: "Lava Book"
      }, {
        id: 26,
        ΔⲆⵠ: ᐃΔ.ⲆΔⵠⵠⵠⲆⲆ,
        ΔΔΔ: ᐃΔ.ⲆᐃⵠⵠⵠᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Lava Book 2"
      }, {
        id: 19,
        ΔⲆⵠ: ᐃΔ.ΔΔΔⲆᐃΔᐃ,
        ΔΔΔ: ᐃΔ.ⲆⵠⵠΔᐃⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Winter",
        name: "Ocean Mystery"
      }, {
        id: 21,
        ΔⲆⵠ: ᐃΔ.ᐃⲆᐃⵠⲆΔᐃ,
        ΔΔΔ: ᐃΔ.ⲆᐃΔᐃⵠΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Dragon Book"
      }, {
        id: 42,
        ΔⲆⵠ: ᐃΔ.ΔᐃΔⲆᐃⲆᐃ,
        ΔΔΔ: ᐃΔ.ⲆⵠΔΔΔⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Engineer Book"
      }, {
        id: 43,
        ΔⲆⵠ: ᐃΔ.ⲆᐃΔᐃΔΔᐃ,
        ΔΔΔ: ᐃΔ.ⵠⲆΔⲆΔⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Nightmare Book"
      }, {
        id: 44,
        ΔⲆⵠ: ᐃΔ.ⵠⵠᐃⵠᐃᐃᐃ,
        ΔΔΔ: ᐃΔ.ᐃᐃⲆᐃᐃΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "aloner",
        name: "Mystery Book"
      }, {
        id: 46,
        ΔⲆⵠ: ᐃΔ.ⵠⵠⵠⵠΔⵠᐃ,
        ΔΔΔ: ᐃΔ.ΔⵠⲆᐃᐃΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Cursed Book"
      }],
      ⵠⵠΔⵠⲆ: [{
        id: 0,
        ΔⲆⵠ: ᐃΔ.ᐃⵠⲆΔΔⲆΔ,
        ΔΔΔ: ᐃΔ.ᐃⵠⲆΔΔⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔᐃΔΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Nothing"
      }, {
        id: 2,
        ΔⲆⵠ: ᐃΔ.ΔΔᐃΔⲆⲆᐃ,
        ΔΔΔ: ᐃΔ.ΔⲆⵠⵠⲆᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔᐃΔΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Pink Cheeks"
      }, {
        id: 3,
        ΔⲆⵠ: ᐃΔ.ⲆΔⵠᐃⲆⵠᐃ,
        ΔΔΔ: ᐃΔ.ΔⲆᐃΔΔᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔᐃΔΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Heart"
      }, {
        id: 1,
        ΔⲆⵠ: ᐃΔ.ⵠΔΔΔΔⲆⲆ,
        ΔΔΔ: ᐃΔ.ᐃⵠΔΔΔⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔᐃΔΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Bandage 1"
      }, {
        id: 4,
        ΔⲆⵠ: ᐃΔ.ᐃⵠⵠᐃΔᐃᐃ,
        ΔΔΔ: ᐃΔ.ΔᐃΔⵠⲆᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔᐃΔΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Flower 1"
      }, {
        id: 5,
        ΔⲆⵠ: ᐃΔ.ᐃΔⲆᐃΔᐃⵠ,
        ΔΔΔ: ᐃΔ.ⵠⲆᐃⵠⵠⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Bow 1"
      }, {
        id: 6,
        ΔⲆⵠ: ᐃΔ.ⵠⵠⲆⲆΔⲆⵠ,
        ΔΔΔ: ᐃΔ.ᐃᐃΔⵠᐃⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Bandage 2"
      }, {
        id: 7,
        ΔⲆⵠ: ᐃΔ.ᐃⲆᐃⲆΔΔⵠ,
        ΔΔΔ: ᐃΔ.ΔΔᐃⵠⲆᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Flower 2"
      }, {
        id: 8,
        ΔⲆⵠ: ᐃΔ.ΔᐃⵠΔⲆⵠⲆ,
        ΔΔΔ: ᐃΔ.ⵠᐃΔⲆⵠΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Bandage 3"
      }, {
        id: 36,
        ΔⲆⵠ: ᐃΔ.ΔⲆΔⲆᐃⵠΔ,
        ΔΔΔ: ᐃΔ.ᐃⲆⲆΔᐃⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Foliage"
      }, {
        id: 59,
        ΔⲆⵠ: ᐃΔ.ΔΔΔⲆⵠᐃᐃ,
        ΔΔΔ: ᐃΔ.ⲆⵠⵠΔⵠΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "eogito",
        name: "Peaceful"
      }, {
        id: 67,
        ΔⲆⵠ: ᐃΔ.ⵠⵠᐃΔᐃΔⵠ,
        ΔΔΔ: ᐃΔ.ΔⵠⵠⲆⵠᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Sparkles"
      }, {
        id: 68,
        ΔⲆⵠ: ᐃΔ.ᐃⵠⲆⲆⲆᐃᐃ,
        ΔΔΔ: ᐃΔ.ΔΔᐃΔᐃᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Luxury"
      }, {
        id: 69,
        ΔⲆⵠ: ᐃΔ.ᐃⵠΔᐃΔΔΔ,
        ΔΔΔ: ᐃΔ.ΔᐃⲆⲆⲆΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆⲆⵠ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Snow Flakes Crown"
      }, {
        id: 17,
        ΔⲆⵠ: ᐃΔ.ᐃⲆΔⵠⵠΔⲆ,
        ΔΔΔ: ᐃΔ.ΔⲆΔᐃⵠΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Glasses 1"
      }, {
        id: 10,
        ΔⲆⵠ: ᐃΔ.ⵠⵠᐃΔᐃᐃΔ,
        ΔΔΔ: ᐃΔ.ⵠⲆᐃⵠᐃⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Bow 2"
      }, {
        id: 11,
        ΔⲆⵠ: ᐃΔ.ΔⲆΔⲆΔⲆΔ,
        ΔΔΔ: ᐃΔ.ΔⲆΔΔⲆᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Little Stars"
      }, {
        id: 12,
        ΔⲆⵠ: ᐃΔ.ⵠⵠⵠᐃⵠⲆⵠ,
        ΔΔΔ: ᐃΔ.ⵠⲆⲆᐃΔᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Pirate Eye Patch 1"
      }, {
        id: 44,
        ΔⲆⵠ: ᐃΔ.ΔⵠΔⵠΔΔᐃ,
        ΔΔΔ: ᐃΔ.ᐃⵠⵠΔΔᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Pirate Eye Patch 2"
      }, {
        id: 23,
        ΔⲆⵠ: ᐃΔ.ᐃⵠΔⵠⲆⵠⵠ,
        ΔΔΔ: ᐃΔ.ᐃⲆᐃⵠΔⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Clown nose"
      }, {
        id: 16,
        ΔⲆⵠ: ᐃΔ.ⵠᐃᐃⵠⵠⵠⵠ,
        ΔΔΔ: ᐃΔ.ᐃⵠᐃⵠⲆⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Eye Patch"
      }, {
        id: 30,
        ΔⲆⵠ: ᐃΔ.ⲆⲆⵠΔⵠΔⵠ,
        ΔΔΔ: ᐃΔ.ᐃⵠᐃⲆΔⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Flower 3"
      }, {
        id: 38,
        ΔⲆⵠ: ᐃΔ.ⲆᐃᐃⲆⲆⲆᐃ,
        ΔΔΔ: ᐃΔ.ⲆΔⵠᐃⵠᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Winter",
        name: "False Nose"
      }, {
        id: 74,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⵠΔⲆᐃⵠ,
        ΔΔΔ: ᐃΔ.ⲆᐃΔΔΔᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Red Cloth"
      }, {
        id: 75,
        ΔⲆⵠ: ᐃΔ.ΔᐃΔⵠⵠⵠⵠ,
        ΔΔΔ: ᐃΔ.ⲆⲆⵠⲆⵠᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Blue Cloth"
      }, {
        id: 79,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⲆᐃⲆⵠΔ,
        ΔΔΔ: ᐃΔ.ΔⵠΔⲆᐃᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Transparent Mask"
      }, {
        id: 89,
        ΔⲆⵠ: ᐃΔ.ⵠΔᐃⲆⲆⲆⲆ,
        ΔΔΔ: ᐃΔ.ΔⵠⵠⲆⵠⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Anyone want to play?",
        name: "Starve.io Anime"
      }, {
        id: 94,
        ΔⲆⵠ: ᐃΔ.ⵠⵠᐃⲆᐃᐃⵠ,
        ΔΔΔ: ᐃΔ.ⲆⵠⵠⲆⲆⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Ant",
        name: "Hero Mask"
      }, {
        id: 100,
        ΔⲆⵠ: ᐃΔ.ⵠΔⲆⲆᐃⲆΔ,
        ΔΔΔ: ᐃΔ.ΔⵠΔΔⲆΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "This starver is mad"
      }, {
        id: 104,
        ΔⲆⵠ: ᐃΔ.ᐃΔΔⵠᐃⵠⵠ,
        ΔΔΔ: ᐃΔ.ΔΔⵠⵠᐃⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Scars"
      }, {
        id: 106,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⵠᐃⵠⲆᐃ,
        ΔΔΔ: ᐃΔ.ΔⲆᐃⲆΔⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "In Search of Intelligence"
      }, {
        id: 109,
        ΔⲆⵠ: ᐃΔ.ΔⵠⲆΔⵠᐃⵠ,
        ΔΔΔ: ᐃΔ.ΔᐃⵠΔΔᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Reclaimed Bandage"
      }, {
        id: 111,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⲆⲆⵠΔⲆ,
        ΔΔΔ: ᐃΔ.ᐃΔΔᐃΔΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⵠᐃΔⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Unwrap Starver for Gift"
      }, {
        id: 15,
        ΔⲆⵠ: ᐃΔ.ⵠⲆΔⵠⵠᐃⵠ,
        ΔΔΔ: ᐃΔ.ΔⵠⲆᐃⵠⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Star Glasses"
      }, {
        id: 21,
        ΔⲆⵠ: ᐃΔ.ᐃⲆΔⲆⲆΔᐃ,
        ΔΔΔ: ᐃΔ.ᐃᐃᐃΔΔⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Great-aunt's Glasses"
      }, {
        id: 24,
        ΔⲆⵠ: ᐃΔ.ᐃⲆᐃⲆⵠⵠΔ,
        ΔΔΔ: ᐃΔ.ⲆᐃΔⲆΔⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Little Starver"
      }, {
        id: 22,
        ΔⲆⵠ: ᐃΔ.ΔΔΔΔΔᐃⵠ,
        ΔΔΔ: ᐃΔ.ΔΔⵠᐃΔΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Little Glasses"
      }, {
        id: 13,
        ΔⲆⵠ: ᐃΔ.ⲆᐃᐃⲆᐃⲆⲆ,
        ΔΔΔ: ᐃΔ.ⵠᐃΔⲆⲆⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Flower Chain"
      }, {
        id: 29,
        ΔⲆⵠ: ᐃΔ.ᐃΔⲆⲆⲆⵠⵠ,
        ΔΔΔ: ᐃΔ.ⲆⲆᐃⵠⲆⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Horns"
      }, {
        id: 31,
        ΔⲆⵠ: ᐃΔ.ᐃᐃΔᐃⵠᐃⲆ,
        ΔΔΔ: ᐃΔ.ᐃⲆΔΔΔⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Golden Flower"
      }, {
        id: 40,
        ΔⲆⵠ: ᐃΔ.ᐃⲆⵠⲆⵠᐃⵠ,
        ΔΔΔ: ᐃΔ.ⲆⵠⲆⲆΔⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Sleeping Mask"
      }, {
        id: 57,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⲆⵠΔⲆⵠ,
        ΔΔΔ: ᐃΔ.ΔᐃᐃⲆΔⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Taco4Life",
        name: "Fish on your head"
      }, {
        id: 58,
        ΔⲆⵠ: ᐃΔ.ⲆΔᐃⵠⵠΔᐃ,
        ΔΔΔ: ᐃΔ.ⲆᐃᐃⲆᐃⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Rose"
      }, {
        id: 91,
        ΔⲆⵠ: ᐃΔ.ΔⵠΔⲆΔΔΔ,
        ΔΔΔ: ᐃΔ.ΔⵠⵠⲆⲆΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "upfiz",
        name: "Grey Scarf"
      }, {
        id: 92,
        ΔⲆⵠ: ᐃΔ.ΔΔᐃᐃⲆᐃⲆ,
        ΔΔΔ: ᐃΔ.ᐃᐃⲆⵠⵠⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "upfiz",
        name: "Black Scarf"
      }, {
        id: 93,
        ΔⲆⵠ: ᐃΔ.ⵠᐃΔⵠⲆⵠⵠ,
        ΔΔΔ: ᐃΔ.ⲆⵠⲆⵠᐃΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "upfiz",
        name: "Skull Mask"
      }, {
        id: 95,
        ΔⲆⵠ: ᐃΔ.ΔⲆΔⲆΔᐃΔ,
        ΔΔΔ: ᐃΔ.ⵠΔΔⵠⵠᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Golden Monocle"
      }, {
        id: 96,
        ΔⲆⵠ: ᐃΔ.ⲆΔⵠⵠΔⵠΔ,
        ΔΔΔ: ᐃΔ.ΔⲆⵠⵠΔΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "A simple instruction"
      }, {
        id: 102,
        ΔⲆⵠ: ᐃΔ.ΔΔⵠⵠΔⲆⵠ,
        ΔΔΔ: ᐃΔ.ᐃⵠΔΔΔᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Garland"
      }, {
        id: 103,
        ΔⲆⵠ: ᐃΔ.ⵠᐃᐃⵠⲆⲆΔ,
        ΔΔΔ: ᐃΔ.ΔΔⵠΔᐃΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "The Doormat"
      }, {
        id: 108,
        ΔⲆⵠ: ᐃΔ.ⵠⲆᐃᐃᐃΔΔ,
        ΔΔΔ: ᐃΔ.ᐃⵠⲆⲆᐃᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Copium Tanks"
      }, {
        id: 117,
        ΔⲆⵠ: ᐃΔ.ⵠⵠⲆΔᐃΔᐃ,
        ΔΔΔ: ᐃΔ.ᐃⵠⵠΔᐃⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Eyelashes"
      }, {
        id: 118,
        ΔⲆⵠ: ᐃΔ.ⵠΔΔⲆᐃΔⲆ,
        ΔΔΔ: ᐃΔ.ΔⵠⵠⵠⲆⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ᐃΔⲆΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Helmet Prototype"
      }, {
        id: 9,
        ΔⲆⵠ: ᐃΔ.ΔᐃΔΔⲆⵠΔ,
        ΔΔΔ: ᐃΔ.ΔⲆᐃᐃⲆⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Fancy Glasses"
      }, {
        id: 25,
        ΔⲆⵠ: ᐃΔ.ⲆΔⵠⵠⲆΔᐃ,
        ΔΔΔ: ᐃΔ.ⵠᐃΔⵠᐃⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Medecin Mask"
      }, {
        id: 14,
        ΔⲆⵠ: ᐃΔ.ⲆΔⵠⵠΔᐃΔ,
        ΔΔΔ: ᐃΔ.ΔⲆⵠⲆⵠⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mr. Mayor"
      }, {
        id: 19,
        ΔⲆⵠ: ᐃΔ.ⵠⲆΔᐃΔΔⵠ,
        ΔΔΔ: ᐃΔ.ΔⲆⲆᐃΔΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Sunglasses 2"
      }, {
        id: 28,
        ΔⲆⵠ: ᐃΔ.ⲆⵠᐃᐃΔᐃᐃ,
        ΔΔΔ: ᐃΔ.ⵠⲆⵠΔΔⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "pizza wa",
        name: "Starfish"
      }, {
        id: 37,
        ΔⲆⵠ: ᐃΔ.ⲆΔᐃᐃᐃⵠΔ,
        ΔΔΔ: ᐃΔ.ⲆⲆⵠᐃᐃⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Berry"
      }, {
        id: 39,
        ΔⲆⵠ: ᐃΔ.ΔⵠᐃᐃⲆᐃΔ,
        ΔΔΔ: ᐃΔ.ⲆΔᐃΔⵠⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Flake"
      }, {
        id: 43,
        ΔⲆⵠ: ᐃΔ.ᐃⵠᐃⲆᐃΔΔ,
        ΔΔΔ: ᐃΔ.ⲆⲆⲆⵠⵠⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Leaf "
      }, {
        id: 61,
        ΔⲆⵠ: ᐃΔ.ⵠᐃΔⵠⲆⵠΔ,
        ΔΔΔ: ᐃΔ.ⵠⲆⵠⲆΔΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "A sword in your head"
      }, {
        id: 62,
        ΔⲆⵠ: ᐃΔ.ⲆΔⲆᐃᐃΔᐃ,
        ΔΔΔ: ᐃΔ.ⲆᐃΔᐃᐃⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Winter Scarf"
      }, {
        id: 64,
        ΔⲆⵠ: ᐃΔ.ⵠⵠΔᐃⵠᐃⲆ,
        ΔΔΔ: ᐃΔ.ΔⵠⲆⲆᐃⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Winter Scarf 2"
      }, {
        id: 66,
        ΔⲆⵠ: ᐃΔ.ᐃⵠΔⵠᐃΔΔ,
        ΔΔΔ: ᐃΔ.ΔⵠᐃᐃⲆᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "eogito",
        name: "Winter Scarf 3"
      }, {
        id: 70,
        ΔⲆⵠ: ᐃΔ.ΔⵠⲆΔⲆΔᐃ,
        ΔΔΔ: ᐃΔ.ᐃⲆΔᐃⵠΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mask with animal tracks"
      }, {
        id: 71,
        ΔⲆⵠ: ᐃΔ.ⲆΔΔⲆΔⲆᐃ,
        ΔΔΔ: ᐃΔ.ⵠΔΔΔᐃᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Spring Mask"
      }, {
        id: 72,
        ΔⲆⵠ: ᐃΔ.ΔΔⵠⵠΔⵠᐃ,
        ΔΔΔ: ᐃΔ.ᐃⲆᐃᐃΔᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Pink Mask"
      }, {
        id: 73,
        ΔⲆⵠ: ᐃΔ.ⲆⲆⵠⲆΔΔⲆ,
        ΔΔΔ: ᐃΔ.ᐃᐃΔΔⲆⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Blue Mask"
      }, {
        id: 76,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⵠᐃⲆⵠΔ,
        ΔΔΔ: ᐃΔ.ᐃⲆⲆⵠᐃⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Military Mask"
      }, {
        id: 77,
        ΔⲆⵠ: ᐃΔ.ΔⲆⵠⵠⲆⲆⵠ,
        ΔΔΔ: ᐃΔ.ᐃⲆⲆΔⵠΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Orange Mask"
      }, {
        id: 78,
        ΔⲆⵠ: ᐃΔ.ᐃⵠᐃⵠΔⵠᐃ,
        ΔΔΔ: ᐃΔ.ⵠⵠⵠⵠⵠᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "White and Red Points Mask"
      }, {
        id: 80,
        ΔⲆⵠ: ᐃΔ.ΔⲆⲆΔⲆⲆⵠ,
        ΔΔΔ: ᐃΔ.ⵠⵠᐃⲆⵠᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Stick out your tongue Mask"
      }, {
        id: 81,
        ΔⲆⵠ: ᐃΔ.ⲆⲆᐃΔⲆⲆⲆ,
        ΔΔΔ: ᐃΔ.ⵠΔᐃΔΔΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Two Teeth Mask"
      }, {
        id: 82,
        ΔⲆⵠ: ᐃΔ.ΔᐃᐃⵠΔⲆᐃ,
        ΔΔΔ: ᐃΔ.ⵠⲆⵠⵠⵠΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Make-up Mask"
      }, {
        id: 83,
        ΔⲆⵠ: ᐃΔ.ⵠⲆⵠᐃΔᐃⲆ,
        ΔΔΔ: ᐃΔ.ⵠᐃΔⵠΔⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Sad Mask"
      }, {
        id: 84,
        ΔⲆⵠ: ᐃΔ.ⲆⵠⲆⵠⲆⵠⲆ,
        ΔΔΔ: ᐃΔ.ΔᐃⵠⵠⲆᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Happy Mask"
      }, {
        id: 90,
        ΔⲆⵠ: ᐃΔ.ᐃΔⵠⵠⲆⲆⵠ,
        ΔΔΔ: ᐃΔ.ⲆⲆᐃΔᐃⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "aloner",
        name: "Blood"
      }, {
        id: 101,
        ΔⲆⵠ: ᐃΔ.ⵠΔᐃΔⲆᐃᐃ,
        ΔΔΔ: ᐃΔ.ᐃΔΔᐃⲆΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Axed Plans"
      }, {
        id: 105,
        ΔⲆⵠ: ᐃΔ.ΔⲆΔⲆᐃⵠⲆ,
        ΔΔΔ: ᐃΔ.ᐃⵠⲆⲆⲆᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Saddle"
      }, {
        id: 113,
        ΔⲆⵠ: ᐃΔ.ⲆΔΔΔⵠᐃⲆ,
        ΔΔΔ: ᐃΔ.ⲆΔᐃᐃⵠⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "I see"
      }, {
        id: 114,
        ΔⲆⵠ: ᐃΔ.ⲆⵠΔⵠⵠΔⲆ,
        ΔΔΔ: ᐃΔ.ⵠⲆᐃⲆΔⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "I have no body and I must dress"
      }, {
        id: 115,
        ΔⲆⵠ: ᐃΔ.ᐃΔΔᐃⲆⵠⵠ,
        ΔΔΔ: ᐃΔ.ΔⲆΔⲆⵠⲆΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃΔ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Cursed Crown"
      }, {
        id: 27,
        ΔⲆⵠ: ᐃΔ.ᐃⵠΔᐃᐃᐃⲆ,
        ΔΔΔ: ᐃΔ.ⵠᐃᐃⲆΔⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Clown Face"
      }, {
        id: 20,
        ΔⲆⵠ: ᐃΔ.ᐃⵠⵠⵠᐃᐃⵠ,
        ΔΔΔ: ᐃΔ.ᐃᐃᐃᐃⲆΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Sunglasses 3"
      }, {
        id: 32,
        ΔⲆⵠ: ᐃΔ.ⲆᐃΔⵠⵠΔᐃ,
        ΔΔΔ: ᐃΔ.ⵠⲆⲆⵠⲆⵠᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Engineer's Glasses"
      }, {
        id: 33,
        ΔⲆⵠ: ᐃΔ.ΔΔⲆⵠΔⵠᐃ,
        ΔΔΔ: ᐃΔ.ᐃⲆᐃΔⵠⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Engineer's Monocle"
      }, {
        id: 34,
        ΔⲆⵠ: ᐃΔ.ⲆⲆⲆⵠⲆⲆΔ,
        ΔΔΔ: ᐃΔ.ΔᐃΔⲆⲆΔΔ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mauve's butt"
      }, {
        id: 41,
        ΔⲆⵠ: ᐃΔ.ᐃⵠΔΔΔᐃΔ,
        ΔΔΔ: ᐃΔ.ⵠᐃᐃΔⲆⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Lapa Head"
      }, {
        id: 42,
        ΔⲆⵠ: ᐃΔ.ⲆᐃⲆΔᐃΔⲆ,
        ΔΔΔ: ᐃΔ.ⵠΔⲆⲆΔⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Lapa Head "
      }, {
        id: 85,
        ΔⲆⵠ: ᐃΔ.ΔΔⵠⲆⲆⲆΔ,
        ΔΔΔ: ᐃΔ.ΔΔⲆⵠΔⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Mask and Glasses"
      }, {
        id: 110,
        ΔⲆⵠ: ᐃΔ.ⵠΔΔⵠⲆᐃΔ,
        ΔΔΔ: ᐃΔ.ΔᐃᐃⵠⵠⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ΔⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Tamon Spectrum Pet"
      }, {
        id: 60,
        ΔⲆⵠ: ᐃΔ.ⲆᐃΔⵠΔⵠΔ,
        ΔΔΔ: ᐃΔ.ⲆⲆⵠⵠΔΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Jason"
      }, {
        id: 26,
        ΔⲆⵠ: ᐃΔ.ΔⲆⵠᐃⵠⲆᐃ,
        ΔΔΔ: ᐃΔ.ⲆⵠΔⲆᐃΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Devil Horns"
      }, {
        id: 18,
        ΔⲆⵠ: ᐃΔ.ⵠⵠⲆⲆⲆⵠⲆ,
        ΔΔΔ: ᐃΔ.ᐃᐃᐃΔⵠᐃⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Big Boss"
      }, {
        id: 35,
        ΔⲆⵠ: ᐃΔ.ΔΔᐃⲆⵠⵠⵠ,
        ΔΔΔ: ᐃΔ.ΔΔⵠⲆᐃᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Baby Kraken"
      }, {
        id: 63,
        ΔⲆⵠ: ᐃΔ.ⲆᐃᐃⲆⵠⵠⵠ,
        ΔΔΔ: ᐃΔ.ⵠΔⵠⲆΔᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Deer Antlers"
      }, {
        id: 65,
        ΔⲆⵠ: ᐃΔ.ᐃⵠᐃⵠⵠⵠΔ,
        ΔΔΔ: ᐃΔ.ᐃΔΔⲆᐃΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Baby Dragon on your head"
      }, {
        id: 86,
        ΔⲆⵠ: ᐃΔ.ⲆᐃᐃΔΔⵠⲆ,
        ΔΔΔ: ᐃΔ.ΔⵠⲆⵠⵠΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Gaz Mask and Glasses"
      }, {
        id: 87,
        ΔⲆⵠ: ᐃΔ.ⵠᐃⲆⲆᐃⲆⲆ,
        ΔΔΔ: ᐃΔ.ᐃᐃᐃᐃⲆⲆᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Pink Gaz Mask and Glasses"
      }, {
        id: 88,
        ΔⲆⵠ: ᐃΔ.ⲆΔᐃⲆΔⵠᐃ,
        ΔΔΔ: ᐃΔ.ⲆⵠⲆΔⵠⵠⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "eogito",
        name: "Engineer Glasses"
      }, {
        id: 97,
        ΔⲆⵠ: ᐃΔ.ⵠΔᐃΔⵠⲆᐃ,
        ΔΔΔ: ᐃΔ.ⵠⵠⲆΔⵠⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Jarred Horns"
      }, {
        id: 98,
        ΔⲆⵠ: ᐃΔ.ⲆᐃⲆᐃⲆᐃΔ,
        ΔΔΔ: ᐃΔ.Ⲇᐃⵠᐃⵠᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Curved Horns"
      }, {
        id: 99,
        ΔⲆⵠ: ᐃΔ.ΔⵠⲆᐃᐃⵠᐃ,
        ΔΔΔ: ᐃΔ.ΔᐃⵠⵠⲆⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Evil Goat Horns"
      }, {
        id: 107,
        ΔⲆⵠ: ᐃΔ.ΔⵠⲆⵠⵠⲆⲆ,
        ΔΔΔ: ᐃΔ.ᐃΔⲆⲆΔⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Decorative Earmuffs"
      }, {
        id: 112,
        ΔⲆⵠ: ᐃΔ.ⵠΔᐃΔⲆⲆΔ,
        ΔΔΔ: ᐃΔ.ΔⲆᐃⲆⵠᐃⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Tamon Dragon Pet"
      }, {
        id: 116,
        ΔⲆⵠ: ᐃΔ.ᐃᐃᐃᐃᐃⲆⵠ,
        ΔΔΔ: ᐃΔ.ⵠᐃᐃΔⵠΔⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⵠᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "Blanket"
      }, {
        id: 45,
        ΔⲆⵠ: ᐃΔ.ΔᐃᐃΔᐃᐃⲆ,
        ΔΔΔ: ᐃΔ.ᐃᐃΔⵠⲆΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆᐃᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "More than Level 5",
        level: 5
      }, {
        id: 46,
        ΔⲆⵠ: ᐃΔ.ⲆΔⲆᐃⵠⲆᐃ,
        ΔΔΔ: ᐃΔ.ΔᐃⵠⲆΔᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆᐃᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "More than Level 10",
        level: 10
      }, {
        id: 47,
        ΔⲆⵠ: ᐃΔ.ᐃᐃΔⵠⵠᐃⵠ,
        ΔΔΔ: ᐃΔ.ⵠⲆᐃΔᐃⲆⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆᐃᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "More than Level 15",
        level: 15
      }, {
        id: 48,
        ΔⲆⵠ: ᐃΔ.ⵠΔⲆᐃⲆⲆΔ,
        ΔΔΔ: ᐃΔ.ⲆᐃⲆᐃᐃΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆᐃᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "More than Level 20",
        level: 20
      }, {
        id: 49,
        ΔⲆⵠ: ᐃΔ.ⲆⵠΔⵠⲆⵠⵠ,
        ΔΔΔ: ᐃΔ.ⵠⵠⵠᐃⵠⵠⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆᐃᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "More than Level 25",
        level: 25
      }, {
        id: 50,
        ΔⲆⵠ: ᐃΔ.ᐃⵠᐃΔⲆⲆⲆ,
        ΔΔΔ: ᐃΔ.ⲆΔⵠᐃᐃΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆᐃᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "More than Level 30",
        level: 30
      }, {
        id: 51,
        ΔⲆⵠ: ᐃΔ.ΔⵠΔΔⵠⲆᐃ,
        ΔΔΔ: ᐃΔ.ΔⲆⲆⵠⵠᐃᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆᐃᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "More than Level 35",
        level: 35
      }, {
        id: 52,
        ΔⲆⵠ: ᐃΔ.ᐃΔΔⵠⲆⲆΔ,
        ΔΔΔ: ᐃΔ.ΔⵠⵠⵠⵠΔᐃ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆᐃᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "More than Level 40",
        level: 40
      }, {
        id: 53,
        ΔⲆⵠ: ᐃΔ.ΔᐃΔⵠᐃⵠⵠ,
        ΔΔΔ: ᐃΔ.ᐃⵠⲆᐃⲆᐃΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆᐃᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "More than Level 45",
        level: 45
      }, {
        id: 54,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⵠᐃΔᐃᐃ,
        ΔΔΔ: ᐃΔ.ᐃΔΔᐃΔⲆⵠ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆᐃᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "More than Level 50",
        level: 50
      }, {
        id: 55,
        ΔⲆⵠ: ᐃΔ.ΔⵠⵠⵠⲆΔᐃ,
        ΔΔΔ: ᐃΔ.ⲆᐃᐃⲆᐃΔⲆ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆᐃᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "More than Level 55",
        level: 55
      }, {
        id: 56,
        ΔⲆⵠ: ᐃΔ.ᐃᐃⲆᐃⵠⵠᐃ,
        ΔΔΔ: ᐃΔ.ΔⵠΔΔᐃⵠΔ,
        ΔⵠⲆ: Δᐃⵠ.ⲆⲆᐃᐃⲆ,
        Ⲇⵠᐃ: "Starve.io",
        name: "More than Level 60",
        level: 60
      }]
    };
    Nf.ⵠⵠⵠΔΔᐃⲆ = ⲆⲆΔⲆᐃΔⵠ(ⲆⵠΔⵠ.Δⵠⵠⵠᐃ, 21);
    Nf.ΔᐃΔⵠⲆᐃΔ = ⲆⲆΔⲆᐃΔⵠ(ⲆⵠΔⵠ.Δⵠⵠⵠᐃ, 20);
    Ⲇⵠ[255] = [];
    Ⲇⵠ[7] = [];
    Ⲇⵠ[250] = [];
    Ⲇⵠ[28] = [];
    Ⲇⵠ[29] = [];
    Ⲇⵠ[796] = [];
    for (var a = 0; a < ⲆⵠΔⵠ.Δⵠⵠⵠᐃ.length; a++) {
      Ⲇⵠ[255][a] = [ⲆⵠΔⵠ.Δⵠⵠⵠᐃ[a].ΔⲆⵠ, ⲆⵠΔⵠ.Δⵠⵠⵠᐃ[a].ΔΔΔ];
      Ⲇⵠ[7][a] = [ⲆⵠΔⵠ.Δⵠⵠⵠᐃ[a].ⲆⲆⵠΔ, ⲆⵠΔⵠ.Δⵠⵠⵠᐃ[a].ᐃΔⵠⲆ];
    }
    for (a = 0; ⲆⵠΔⵠ.ⵠΔⲆᐃⲆ.length > a; a++) {
      Ⲇⵠ[28][a] = [ⲆⵠΔⵠ.ⵠΔⲆᐃⲆ[a].ΔⲆⵠ, ⲆⵠΔⵠ.ⵠΔⲆᐃⲆ[a].ΔΔΔ];
    }
    for (a = 0; ⲆⵠΔⵠ.ΔⲆⵠᐃΔ.length > a; a++) {
      Ⲇⵠ[250][a] = [ⲆⵠΔⵠ.ΔⲆⵠᐃΔ[a].ΔⲆⵠ, ⲆⵠΔⵠ.ΔⲆⵠᐃΔ[a].ΔΔΔ];
    }
    for (a = 0; ⲆⵠΔⵠ.ⵠᐃᐃⲆ.length > a; a++) {
      Ⲇⵠ[29][a] = [ⲆⵠΔⵠ.ⵠᐃᐃⲆ[a].ΔⲆⵠ, ⲆⵠΔⵠ.ⵠᐃᐃⲆ[a].ΔΔΔ];
    }
    for (a = 0; ⲆⵠΔⵠ.ⵠⵠΔⵠⲆ.length > a; a++) {
      Ⲇⵠ[796][a] = [ⲆⵠΔⵠ.ⵠⵠΔⵠⲆ[a].ΔⲆⵠ, ⲆⵠΔⵠ.ⵠⵠΔⵠⲆ[a].ΔΔΔ];
    }
  };
  const ld = 12;
  function ud(a, b, c, d, e) {
    a.beginPath();
    a.lineCap = "round";
    a.arc(b, c, d, 0, e * (Math.PI * 2));
  }
  function bd(a, b, c, d) {
    a.beginPath();
    a.arc(b, c, d, 0, Math.PI * 2);
  }
  const dd = 255;
  function vd(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.floor(b * 28);
    var g = Math.floor(b * 20);
    e.font = g + "px Baloo Paaji";
    var a = b * 8;
    var h = e.measureText(c).width + a * 2;
    d.width = h;
    d.height = f;
    gd(e, 0, 0, h, f, b * 10);
    e.globalAlpha = 0.5;
    hd(e, "#000");
    e.globalAlpha = 1;
    e.textBaseline = "middle";
    e.font = g + "px Baloo Paaji";
    e.beginPath();
    e.fillStyle = "#FFF";
    e.fillText(c, a, f / 2);
    return d;
  }
  function md(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.sqrt(b.width * b.width + b.height * b.height);
    d2 = e / 2;
    c.width = e;
    c.height = e;
    d.translate(d2, d2);
    d.rotate(a);
    d.drawImage(b, -b.width / 2, -b.height / 2);
    return c;
  }
  function cd(b, c, d, e) {
    var f = Math.PI * 2 / c;
    b.beginPath();
    var i = [{
      x: d,
      y: 0
    }];
    var a = [];
    for (var j = 1; c > j; j++) {
      i.push({
        x: d * Math.sin(j * f),
        y: d * Math.cos(j * f)
      });
      var k = i.length;
      a.push(ᐃⵠⵠ.ⲆΔⵠᐃⲆⵠΔ(i[k - 2], i[k - 1]));
    }
    a.push(ᐃⵠⵠ.ⲆΔⵠᐃⲆⵠΔ(i[i.length - 1], i[0]));
    var l = a[a.length - 1];
    b.moveTo(l.x, l.y);
    for (j = 0; c > j; j++) {
      b.arcTo(i[j].x, i[j].y, a[j].x, a[j].y, e);
    }
    b.closePath();
  }
  const pd = 14;
  function Cd(c, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 120;
    var k = c * 110;
    var a = j / 2;
    var m = k / 2;
    var n = c * 20;
    var h = c * 112;
    var g = c * 82;
    var l = h / 2;
    var o = g / 2;
    var b = c * 4;
    f.width = j;
    f.height = k;
    i.globalAlpha = 1;
    i.translate(a, m);
    gd(i, -l, -o, h, g, n);
    hd(i, e, e, b);
    return f;
  }
  const Td = 6;
  const fd = 10;
  function zd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 70;
    d.height = a * 70;
    e.globalAlpha = 0.5;
    bd(e, a * 26, a * 26, a * 9);
    hd(e, c[0]);
    bd(e, a * 56, a * 36, a * 9);
    hd(e, c[1]);
    bd(e, a * 40, a * 50, a * 9);
    hd(e, c[2]);
    e.globalAlpha = 1;
    bd(e, a * 26, a * 26, a * 5);
    hd(e, c[0]);
    bd(e, a * 56, a * 36, a * 5);
    hd(e, c[1]);
    bd(e, a * 40, a * 50, a * 5);
    hd(e, c[2]);
    return d;
  }
  function yd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 264;
    d.height = a * 246;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    hd(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    hd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 102);
    e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
    e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
    e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
    e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
    e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
    e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
    e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
    e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
    e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
    e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
    e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
    e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
    e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
    e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
    e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
    e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
    e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
    e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
    e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
    e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
    e.closePath();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 103);
    e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
    e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
    e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
    e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
    e.closePath();
    hd(e, c[3], c[4], a * 4);
    return d;
  }
  const wd = 3;
  function Pd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 69.5, a * 145);
    gd(e, a * -8.5, a * -63, a * 17, a * 127, a * 1);
    e.restore();
    hd(e, c[0]);
    e.save();
    e.translate(a * 183, a * 145);
    gd(e, a * -8, a * -63, a * 16, a * 126, a * 1);
    e.restore();
    hd(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 62.5);
    e.rotate(6.28);
    gd(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
    e.restore();
    hd(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 118);
    e.rotate(6.24);
    gd(e, a * -85.5, a * -24, a * 169, a * 48, a * 5);
    e.restore();
    hd(e, c[3], c[1], a * 6);
    e.save();
    e.translate(a * 122, a * 177.5);
    e.rotate(6.32);
    gd(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
    e.restore();
    hd(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 157);
    e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
    e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
    e.closePath();
    hd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205, a * 175);
    e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
    e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
    e.closePath();
    hd(e, c[1]);
    return d;
  }
  function kd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 22;
    d.height = a * 22;
    e.globalAlpha = 0.4;
    bd(e, a * 11, a * 11, a * 10);
    hd(e, c[0]);
    e.globalAlpha = 0.7;
    bd(e, a * 11, a * 11, a * 7);
    hd(e, c[0]);
    e.globalAlpha = 1;
    bd(e, a * 11, a * 11, a * 4);
    hd(e, c[0]);
    return d;
  }
  function Ad(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 182, a * 120);
    gd(e, a * -8, a * -67, a * 16, a * 134, a * 1);
    e.restore();
    hd(e, c[0]);
    e.save();
    e.translate(a * 68.5, a * 127.5);
    gd(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
    e.restore();
    hd(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 68);
    gd(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
    e.restore();
    hd(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123, a * 179.5);
    gd(e, a * -83, a * -24.5, a * 166, a * 49, a * 4);
    e.restore();
    hd(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 123.5);
    e.rotate(6.24);
    gd(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
    e.restore();
    hd(e, c[3], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 112);
    e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
    e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
    e.closePath();
    hd(e, c[1]);
    return d;
  }
  const xd = 3;
  function Jd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 191;
    c.height = a * 153;
    d.save();
    d.translate(a * 96.49996948242188, a * 66.79510498046875);
    gd(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    d.restore();
    hd(d, b[0], b[0], a * 4);
    d.translate(a * 2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 119, a * 28);
    d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    d.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    d.closePath();
    hd(d, b[0], b[0], a * 4);
    d.save();
    d.translate(a * 97.49996948242188, a * 95.12844848632812);
    gd(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    d.restore();
    hd(d, b[0], b[0], a * 4);
    return c;
  }
  function Md(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    gd(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    hd(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    gd(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    hd(e, c[1], c[2], a * 4);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
    e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
    e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
    e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
    e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
    e.closePath();
    hd(e, c[2], c[3], a * 4);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
    e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
    e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
    e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
    e.closePath();
    hd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
    e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
    e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
    e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
    e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
    e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
    e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
    e.closePath();
    hd(e, c[5], c[6], a * 4);
    bd(e, a * 68, a * 111.29513549804688, a * 15);
    hd(e, c[7], c[8], a * 4);
    bd(e, a * 123, a * 111.29510498046875, a * 15);
    hd(e, c[7], c[8], a * 4);
    bd(e, a * 63, a * 106, a * 5);
    hd(e, c[9]);
    bd(e, a * 118, a * 106, a * 5);
    hd(e, c[9]);
    return d;
  }
  function Bd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    gd(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    hd(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    gd(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    hd(e, c[1], c[2], a * 4);
    e.translate(a * 2, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119, a * 28);
    e.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    e.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    e.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    e.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    e.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    e.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    e.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    e.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    e.closePath();
    hd(e, c[3], c[4], a * 4);
    return d;
  }
  function Ed(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 40;
    var a = b * 40;
    e.width = i;
    e.height = a;
    var j = i * b / 2;
    var k = a * b / 2;
    var l = b * 15;
    f.save();
    f.translate(j, k);
    f.globalAlpha = 1;
    bd(f, 0, 0, l);
    hd(f, d[0]);
    l = b * 5;
    j = b * 2;
    k = b * 1;
    f.translate(j, k);
    f.globalAlpha = 1;
    bd(f, 0, 0, l);
    hd(f, d[1]);
    f.restore();
    return e;
  }
  function Dd(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 185;
    f.height = b * 240;
    g.globalAlpha = 0.5;
    g.translate(0, b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    hd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    hd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    hd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    hd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    hd(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    hd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    hd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    hd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    hd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    hd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 59, b * 99);
    g.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
    g.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
    g.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
    g.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
    g.closePath();
    hd(g, d[3], d[2], b * 4);
    if (e === 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 47, b * 149);
      g.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
      g.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
      g.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
      g.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
      g.closePath();
      hd(g, d[1]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 40, b * 139);
      g.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
      g.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
      g.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
      g.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
      g.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
      g.closePath();
      hd(g, d[3], d[2], b * 4);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 41, b * 139);
      g.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
      g.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
      g.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
      g.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
      g.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
      g.closePath();
      hd(g, d[3], d[2], b * 4);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 95);
    g.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
    g.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * 17);
    g.bezierCurveTo(b * 92, b * 5, b * 83, b * 16, b * 78, b * 29);
    g.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
    g.closePath();
    hd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 86);
    g.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
    g.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * 16);
    g.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
    g.closePath();
    hd(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 117);
    g.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
    g.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
    g.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
    g.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
    g.closePath();
    hd(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 175);
    g.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
    g.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
    g.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
    g.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
    g.closePath();
    hd(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 169);
    g.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
    g.closePath();
    hd(g, Og, d[2], b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 136, b * 171);
    g.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
    g.closePath();
    hd(g, undefined, d[2], b * 4);
    bd(g, b * 63, b * 180, b * 15.231546211727817);
    hd(g, d[4]);
    bd(g, b * 121, b * 181, b * 15.652475842498529);
    hd(g, d[4]);
    bd(g, b * 58, b * 175, b * 5.656854249492381);
    hd(g, d[2]);
    bd(g, b * 116, b * 175, b * 5.656854249492381);
    hd(g, d[2]);
    return f;
  }
  function Id(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 200;
    var f = b * 200;
    c.width = e;
    c.height = f;
    var g = Qu(0.35, false, ["#0e3022", "#0b8052", "#077b49"]);
    d.drawImage(g, 10, 10);
    g = om(0.9, I, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 21, 20);
    g = om(0.9, Gg, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 38, 28);
    g = om(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 15, 37);
    g = om(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 32, 45);
    return c;
  }
  function Sd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 183, a * 107);
    gd(e, a * -8, a * -70.5, a * 16, a * 141, a * 1);
    e.restore();
    hd(e, c[0]);
    e.save();
    e.translate(a * 69.5, a * 110);
    gd(e, a * -8.5, a * -71, a * 17, a * 143, a * 1);
    e.restore();
    hd(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 181);
    gd(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
    e.restore();
    hd(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 95);
    e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
    e.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
    e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
    e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
    e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
    e.closePath();
    hd(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 75);
    e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
    e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
    e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
    e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
    e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
    e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
    e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
    e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
    e.closePath();
    hd(e, c[3], c[1], a * 6);
    return d;
  }
  function Qd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 185;
    c.height = a * 240;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 137);
    d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 53, a * 181);
    d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
    d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 63, a * 208);
    d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 170);
    d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 39, a * 140);
    d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 95);
    d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
    d.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
    d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 86);
    d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
    d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 117);
    d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 175);
    d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    d.closePath();
    hd(d, b[0]);
    return c;
  }
  const _d = 14;
  function Fd(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 100;
    var j = c * 100;
    var a = i / 2;
    var k = j / 2;
    e.width = i;
    e.height = j;
    var m = c * 5;
    var h = c * 28;
    var g = m / 2;
    var l = h / 2;
    f.translate(a, k);
    for (var n = 0; n < 4; n++) {
      gd(f, -g, -l, m, h, c * 2);
      f.rotate(Math.PI / 4);
      hd(f, d);
    }
    f.arc(0, 0, c * 10, 0, Math.PI * 2);
    hd(f, d);
    f.globalCompositeOperation = "destination-out";
    bd(f, 0, 0, c * 4);
    f.fill();
    return e;
  }
  const Rd = 9;
  const jd = 6;
  function Ld(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 32;
    var a = c * 32;
    var m = k / 2;
    var n = a / 2;
    i.width = k;
    i.height = a;
    var h = c * 5;
    var g = c * 28;
    var l = h / 2;
    var o = g / 2;
    j.translate(c * 0, c * 0);
    j.translate(m, n);
    if (f == 1) {
      bd(j, 0, 0, c * 10);
      hd(j, e[2], e[2], c * 3);
      for (var b = 0; b < 4; b++) {
        gd(j, -l, -o, h, g, c * 2);
        j.rotate(Math.PI / 4);
        hd(j, e[2], e[2], c * 4);
      }
    }
    bd(j, 0, 0, c * 10);
    hd(j, e[0], e[1], c * 1.5);
    for (b = 0; b < 4; b++) {
      gd(j, -l, -o, h, g, c * 2);
      j.rotate(Math.PI / 4);
      hd(j, e[0], e[1], c * 1.5);
    }
    bd(j, 0, 0, c * 10);
    hd(j, e[0]);
    bd(j, 0, 0, c * 4);
    hd(j, e[2], e[1], c * 1.5);
    j.globalCompositeOperation = "destination-out";
    bd(j, 0, 0, c * 4);
    hd(j, e[0], e[1], c * 2);
    j.globalCompositeOperation = "source-over";
    bd(j, 0, 0, c * 4);
    hd(j, undefined, e[1], c * 2);
    return i;
  }
  const Wd = 1;
  function Gd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 238;
    c.height = a * 230;
    d.translate(a * -93, a * -110 + a * 5);
    d.globalAlpha = 0.3;
    bd(d, a * 213.5, a * 256.75, a * 75);
    hd(d, b[5]);
    bd(d, a * 213.5, a * 175.75, a * 25);
    hd(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.translate(0, -5);
    d.globalAlpha = 1;
    bd(d, a * 213.5, a * 256.75, a * 75);
    hd(d, b[3]);
    bd(d, a * 213.5, a * 175.75, a * 25);
    hd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    bd(d, a * 213.5, a * 256.75, a * 70);
    hd(d, b[0]);
    bd(d, a * 213.5, a * 175.75, a * 20);
    hd(d, b[0]);
    bd(d, a * 222, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    bd(d, a * 205, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    bd(d, a * 206.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    bd(d, a * 223.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    d.save();
    d.translate(a * 213.5, a * 293.75);
    d.rotate(0.76);
    gd(d, a * -22, a * -21, a * 44, a * 42, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    d.save();
    d.translate(a * 212.5, a * 258.25);
    d.rotate(0.8);
    gd(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    return c;
  }
  function Nd(f, e, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var n = (d = f * 125) / 2;
    var a = (r = f * 95) / 2;
    var o = f * 10;
    var p = f * 8;
    var h = f * 112;
    var g = f * 82;
    var l = h / 2;
    var q = g / 2;
    var b = f * 4;
    j.width = d;
    j.height = r;
    k.translate(n - f * 4, a + f * 4);
    k.globalAlpha = e ? 0.5 : 1;
    gd(k, -l, -q, h, g, o);
    hd(k, i[0]);
    k.globalAlpha = 1;
    k.translate(0, -p);
    gd(k, -l, -q, h, g, o);
    hd(k, i[1], i[2], b);
    var d = f * 55;
    var r = f * 45;
    o = 5;
    k.translate(f * -40, f * -30);
    gd(k, 0, 0, d, r, o);
    hd(k, i[3]);
    var t = Fd(f * 0.7, i[3]);
    k.drawImage(t, f * 45, f * -25);
    t = Fd(f * 0.7, i[3]);
    k.drawImage(t, f * 45, f * 15);
    t = Fd(f * 1.2, i[3]);
    k.drawImage(t, f * 28, f * -30);
    d = f * 15;
    r = f * 70;
    o = f * 5;
    k.translate(f * 78, f * -5);
    gd(k, 0, 0, d, r, o);
    hd(k, i[4]);
    d = f * 9;
    r = f * 50;
    o = f * 3;
    k.translate(f * -20, f * 20);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    gd(k, 0, 0, d, r, o);
    hd(k, i[5]);
    k.translate(f * -20, f * 29);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    k.beginPath();
    k.lineJoin = "round";
    k.moveTo(0, 0);
    k.lineTo(0, f * 30);
    k.lineTo(f * 30, f * 30);
    k.closePath();
    hd(k, null, i[5], f * 8);
    return j;
  }
  function qd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 55;
    var a = b * 55;
    var h = b * 8;
    e.width = g;
    e.height = a;
    f.translate(b * -65, b * -55 + h);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 95, b * 60);
    f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
    f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
    f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
    f.closePath();
    hd(f, d[0], d[1], 3);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 91, b * 70);
    f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
    f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
    f.closePath();
    hd(f, d[2], d[3], 3);
    return e;
  }
  function Od(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 188;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    hd(d, b[0], b[0], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    hd(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
    d.closePath();
    hd(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    d.closePath();
    hd(d, b[0], b[0], a * 2);
    d.globalAlpha = 1;
    d.translate(0, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    hd(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    hd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    hd(d, undefined, b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    hd(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    hd(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
    d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
    d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
    d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
    d.closePath();
    hd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
    d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
    d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
    d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
    d.closePath();
    hd(d, b[3]);
    bd(d, a * 77, a * 107, a * 6);
    hd(d, b[2]);
    bd(d, a * 110, a * 107, a * 6);
    hd(d, b[2]);
    bd(d, a * 75, a * 105, a * 3);
    hd(d, b[4]);
    bd(d, a * 108, a * 105, a * 3);
    hd(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
    d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
    d.closePath();
    hd(d, b[1]);
    return c;
  }
  function Hd(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 85;
    var j = c * 115;
    var a = c * 6;
    e.width = i;
    e.height = j;
    f.translate(c * -130, c * -60 + a);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    hd(f, d[0]);
    f.translate(0, -a);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    hd(f, d[1], d[2], 4);
    var k = c * 155;
    var m = c * 133;
    var h = c * 10;
    var g = c * 3;
    var l = k + c * -3;
    var n = m + c * -5;
    f.save();
    f.translate(k, m);
    f.globalAlpha = 1;
    bd(f, 0, 0, h);
    hd(f, d[3]);
    f.restore();
    f.save();
    f.translate(l, n);
    f.globalAlpha = 1;
    bd(f, 0, 0, g);
    hd(f, d[4]);
    f.restore();
    f.save();
    f.translate(k + c * 27, m);
    f.globalAlpha = 1;
    bd(f, 0, 0, h);
    hd(f, d[3]);
    f.restore();
    f.save();
    f.translate(c * 27 + l, n);
    f.globalAlpha = 1;
    bd(f, 0, 0, g);
    hd(f, d[4]);
    return e;
  }
  const Ud = 1;
  function Yd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 202.5, a * 147.5);
    gd(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
    e.restore();
    hd(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 190.5);
    gd(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
    e.restore();
    hd(e, b[2], b[1], a * 12);
    e.save();
    e.save();
    e.translate(a * 202.5, a * 233.5);
    gd(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
    e.restore();
    hd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 275);
    gd(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
    e.restore();
    hd(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 201, a * 212);
    e.rotate(8.64);
    gd(e, a * -116, a * -22, a * 232, a * 44, a * 10);
    e.restore();
    hd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 121.5);
    gd(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
    e.restore();
    hd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 299);
    gd(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
    e.restore();
    hd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 298.5, a * 210);
    gd(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    hd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 108.5, a * 210);
    gd(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    hd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 204, a * 121.5);
    gd(e, a * -92, a * -9.5, a * 184, a * 19, a * 10);
    e.restore();
    hd(e, b[3], b[3], a * 10);
    e.save();
    e.translate(a * 197, a * 299);
    gd(e, a * 85, a * -9, a * -170, a * 18, a * 10);
    e.restore();
    hd(e, b[3], b[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 94, a * 317);
    e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
    e.closePath();
    hd(e, undefined, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279, a * 142);
    e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
    e.closePath();
    hd(e, ma, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 106);
    e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
    e.closePath();
    hd(e, Og, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 281, a * 282);
    e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
    e.closePath();
    hd(e, Dh, b[1], a * 12);
    if (c == 0) {
      e.scale(2, 2);
      e.translate(a * -7, a * 55);
      e.rotate(-0.5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 60, a * 47);
      e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
      e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
      e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
      e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
      e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
      e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
      e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
      e.closePath();
      hd(e, b[4], b[4], a * 5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68, a * 54);
      e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
      e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
      e.closePath();
      hd(e, b[3]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 50, a * 55);
      e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
      e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
      e.closePath();
      hd(e, b[3]);
    } else if (c == 1) {
      e.scale(0.6, 0.6);
      e.translate(a * 185, a * 165);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 108, a * 56);
      e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
      e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
      e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
      e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
      e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
      e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
      e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
      e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
      e.closePath();
      hd(e, b[4], b[4], a * 20);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 112, a * 72);
      e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
      e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
      e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
      e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
      e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
      e.closePath();
      hd(e, undefined, b[0], a * 13);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 132, a * 117);
      e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
      e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
      e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
      hd(e, undefined, b[0], a * 20);
      bd(e, a * 142, a * 221, a * 16.1245154965971);
      hd(e, b[0]);
    }
    return d;
  }
  const Kd = 12;
  const Vd = 255;
  const Xd = 7;
  function Zd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 52;
    d.height = a * 65;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.833328247070312, a * 12.078125);
    e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
    e.closePath();
    hd(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 7.8333282470703125, a * 20.078125);
    e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
    e.closePath();
    hd(e, ct, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 26.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
    e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
    e.closePath();
    hd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.83332824707031, a * 8.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
    e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
    e.closePath();
    hd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.833328247070312, a * 39.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
    e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
    e.closePath();
    hd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.83332824707031, a * 23.078125);
    e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
    e.closePath();
    hd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 24.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
    e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
    hd(e, ct, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38.83332824707031, a * 14.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
    hd(e, Dh, c[1], a * 2);
    return d;
  }
  const $d = 12226593;
  const St = 12226593 .ΔᐃⵠⵠΔⵠΔⵠΔ;
  const Tt = `const ⲆᐃᐃⲆΔⵠⲆ = (typeof ΔⵠᐃΔⵠⲆⵠ === "${St}") ? 1 : 0; return ⲆᐃᐃⲆΔⵠⲆ;`;
  function Ut(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    cd(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    cd(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    hd(e, c[8], c[9], a * 4);
    return d;
  }
  function Vt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    hd(e, Ra, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    hd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    hd(e, undefined, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    hd(e, Ns, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    hd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    hd(e, undefined, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    hd(e, ir, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    hd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    hd(e, undefined, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    hd(e, Bo, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    hd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    hd(e, undefined, c[6], a * 4);
    return d;
  }
  function Wt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 255);
    e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
    e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
    e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
    e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
    e.closePath();
    hd(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 258);
    e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
    e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
    e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
    e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
    e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
    e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
    e.closePath();
    hd(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 323);
    e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
    e.closePath();
    hd(e, Dh, c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 210);
    e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
    e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
    e.closePath();
    hd(e, c[3], c[4], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 200);
    e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
    e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
    e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
    e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
    e.closePath();
    hd(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97, a * 204);
    e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
    e.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
    e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
    e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
    e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
    e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
    e.closePath();
    hd(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 260);
    e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
    e.closePath();
    hd(e, jn, c[1], a * 14);
    bd(e, a * 161, a * 201, a * 13);
    hd(e, c[5]);
    bd(e, a * 216, a * 205, a * 8.06225774829855);
    hd(e, c[5]);
    bd(e, a * 216, a * 175, a * 6.708203932499369);
    hd(e, c[5]);
    bd(e, a * 271, a * 191, a * 5.0990195135927845);
    hd(e, c[5]);
    bd(e, a * 206, a * 180, a * 11.180339887498949);
    hd(e, c[5]);
    return d;
  }
  function Yt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 85, a * 237);
    e.rotate(1.5707963267948966);
    cd(e, 6, a * 54.585977194239184, a * 1);
    e.restore();
    hd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178, a * 238);
    e.rotate(1.5707963267948966);
    cd(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    hd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 270, a * 239);
    e.rotate(1.5707963267948966);
    cd(e, 6, a * 53.58058329516393, a * 1);
    e.restore();
    hd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 222, a * 312);
    e.rotate(1.5707963267948966);
    cd(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    hd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 317, a * 159);
    e.rotate(1.5707963267948966);
    cd(e, 6, a * 57.63465889766331, a * 1);
    e.restore();
    hd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 223.5, a * 139.0625);
    e.rotate(1.5707963267948966);
    cd(e, 6, a * 51.66236541235796, a * 1);
    e.restore();
    hd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 132.5, a * 137.0625);
    e.rotate(1.5707963267948966);
    cd(e, 6, a * 52.009614495783374, a * 1);
    e.restore();
    hd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178.5, a * 58.0625);
    e.rotate(1.5707963267948966);
    cd(e, 6, a * 53.16013544000805, a * 1);
    e.restore();
    hd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 177.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    cd(e, 6, a * 50, a * 1);
    e.restore();
    hd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(1.5707963267948966);
    cd(e, 6, a * 54, a * 1);
    e.restore();
    hd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 319.5, a * 138.0625);
    e.rotate(1.5707963267948966);
    cd(e, 6, a * 55.08175741568164, a * 1);
    e.restore();
    hd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 269.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    cd(e, 6, a * 54.589376255824725, a * 1);
    e.restore();
    hd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 221.5, a * 293.0625);
    e.rotate(0.5235987755982988);
    cd(e, 6, a * 49.49747468305833, a * 1);
    e.restore();
    hd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 342.0625);
    e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
    e.closePath();
    hd(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 270.0625);
    e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
    e.closePath();
    hd(e, Dh, c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    cd(e, 6, a * 30, a * 15);
    e.restore();
    hd(e, c[3]);
    e.save();
    e.translate(a * 177.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    cd(e, 6, a * 30, a * 15);
    e.restore();
    hd(e, c[3]);
    e.save();
    e.translate(a * 222.5, a * 294.0625);
    e.rotate(0.5235987755982988);
    cd(e, 6, a * 30, a * 15);
    e.restore();
    hd(e, c[3]);
    e.save();
    e.translate(a * 270.5, a * 216.0625);
    e.rotate(0.5235987755982988);
    cd(e, 6, a * 30, a * 15);
    e.restore();
    hd(e, c[3]);
    e.save();
    e.translate(a * 320.5, a * 134.0625);
    e.rotate(0.5235987755982988);
    cd(e, 6, a * 30, a * 15);
    e.restore();
    hd(e, c[3]);
    e.save();
    e.translate(a * 224.5, a * 138.0625);
    e.rotate(0.5235987755982988);
    cd(e, 6, a * 30, a * 15);
    e.restore();
    hd(e, c[3]);
    e.save();
    e.translate(a * 133.5, a * 137.0625);
    e.rotate(0.5235987755982988);
    cd(e, 6, a * 30, a * 15);
    e.restore();
    hd(e, c[3]);
    e.save();
    e.translate(a * 178.5, a * 56.0625);
    e.rotate(0.5235987755982988);
    cd(e, 6, a * 30, a * 15);
    e.restore();
    hd(e, c[3]);
    return d;
  }
  function Zt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.translate(a * 5, a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    cd(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    cd(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    hd(e, c[1], c[2], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    cd(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    cd(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    hd(e, c[3], c[4], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    bd(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    bd(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    hd(e, c[5], c[6], a * 4);
    return d;
  }
  function $t(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 75;
    var a = b * 55;
    e.width = g;
    e.height = a;
    f.translate(b * -30, b * -40);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
    f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
    f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
    f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
    f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
    f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
    f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
    f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
    f.closePath();
    hd(f, d[0]);
    f.beginPath();
    f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
    f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
    f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
    f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
    f.closePath();
    hd(f, d[1]);
    f.beginPath();
    f.moveTo(b * 69, b * 65);
    f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
    f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
    f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
    hd(f, $g, d[1], 2);
    f.beginPath();
    f.moveTo(b * 50, b * 48);
    f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
    f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
    f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
    hd(f, d[2]);
    return e;
  }
  const _t = 10;
  function au(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 195;
    var a = c * 190;
    var m = k / 2;
    var n = a / 2;
    i.width = k;
    i.height = a;
    var h = c * 10;
    var g = c * 35;
    var l = c * 150;
    var o = g / 2;
    var b = l / 2;
    var d = c * 4;
    j.translate(m - c * 5, n - c * 5);
    j.rotate(-Math.PI / 1.25);
    j.globalAlpha = 1;
    gd(j, -o, -b, g, l, h);
    hd(j, f[0], f[1], d);
    j.translate(0, 0);
    j.rotate(Math.PI / 3);
    j.globalAlpha = 1;
    gd(j, -o, -b, g, l, h);
    hd(j, f[0], f[1], d);
    j.translate(0, 5);
    gd(j, -o / 2, -b / 2, g / 2, l / 3, h - 2);
    hd(j, f[1]);
    return i;
  }
  function bu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 205;
    var a = b * 205;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 100;
    f.translate(j, k);
    f.globalAlpha = 1;
    bd(f, 0, 0, h);
    hd(f, d[0]);
    return e;
  }
  function cu(a) {
    return bj.String.fromCharCode(a);
  }
  function du(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 145;
    var a = b * 145;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 70;
    f.translate(j, k);
    f.globalAlpha = 0.4;
    bd(f, 0, 0, h);
    hd(f, d[0]);
    h = b * 50;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    bd(f, 0, 0, h);
    hd(f, d[0]);
    h = b * 35;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    bd(f, 0, 0, h);
    hd(f, d[1]);
    h = b * 20;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    bd(f, 0, 0, h);
    hd(f, d[2]);
    return e;
  }
  function eu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 370;
    var a = b * 370;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 180;
    f.globalAlpha = 0.2;
    bd(f, j, k, h);
    hd(f, d[0]);
    return e;
  }
  function fu(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 135;
    var a = c * 190;
    var m = k / 2;
    var n = a / 2;
    i.width = k;
    i.height = a;
    var h = c * 10;
    var g = c * 25;
    var l = c * 180;
    var o = g / 2;
    var b = l / 2;
    var d = c * 4;
    j.translate(m, n);
    j.rotate(-Math.PI / 5);
    j.globalAlpha = 1;
    gd(j, -o, -b, g, l, h);
    hd(j, f[0], f[1], d);
    j.translate(0, 0);
    j.rotate(Math.PI / 5);
    j.globalAlpha = 1;
    gd(j, -o, -b, g, l, h);
    hd(j, f[0], f[1], d);
    return i;
  }
  function gu(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 193;
    var a = c * 198;
    var m = c * 140;
    var n = c * 90;
    i.width = k;
    i.height = a;
    var h = c * 10;
    var g = c * 25;
    var l = c * 180;
    var o = g / 2;
    var b = l / 2;
    var d = c * 4;
    j.translate(c * -25, c * 1);
    j.translate(m, n);
    j.rotate(-Math.PI / 5);
    gd(j, -o, -b, g, l, h);
    hd(j, f[0], f[1], d);
    j.translate(c * -30, c * -25);
    j.rotate(Math.PI / 3);
    gd(j, -o, -b, g, l, h);
    hd(j, f[0], f[1], d);
    j.translate(c * 35, c * 30);
    j.rotate(Math.PI / 3);
    gd(j, -o, -b, g, l, h);
    hd(j, f[0], f[1], d);
    return i;
  }
  function hu(f, e, i, j, k) {
    var n = document.createElement("canvas");
    var a = n.getContext("2d");
    var o = f * 70;
    var p = f * 70;
    var h = f * 10;
    var g = f * 5;
    n.width = o;
    n.height = p + g;
    for (var l = 0; e.length > l; l++) {
      var q = e[l];
      a.globalAlpha = q.a;
      var r = q.f(i, yg, q.c);
      a.save();
      a.translate(o / 2 + f * q.x, p / 2 + q.y * f);
      a.rotate(q.r);
      a.drawImage(r, -r.width / 2, -r.height / 2);
      a.restore();
    }
    var s = [];
    for (l = 0; j.length > l; l++) {
      var t = document.createElement("canvas");
      var v = t.getContext("2d");
      t.width = o;
      t.height = p + g;
      v.globalAlpha = k / 2;
      if (l == 2) {
        gd(v, 0, g, o, p, h);
      } else {
        gd(v, 0, 0, o, p + g, h);
      }
      hd(v, "#081a19");
      v.globalAlpha = k;
      gd(v, 0, l == 2 ? g : 0, o, p, h);
      hd(v, j[l]);
      v.globalAlpha = 1;
      if (l == 2) {
        v.drawImage(n, 0, g);
      } else {
        v.drawImage(n, 0, 0);
      }
      s.push(pr(t));
    }
    return s;
  }
  (function () {
    const a = {
      ΔΔΔΔᐃᐃⵠΔΔ: 12762067,
      ᐃⵠΔⵠᐃᐃᐃⵠⲆ: 1879575,
      ᐃΔᐃΔⲆⵠⵠᐃⵠ: 12833865,
      ⵠΔⲆᐃⵠⲆⵠ: 4997968
    };
  })();
  function iu(a) {
    return bj.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ΔᐃⲆⲆⲆⵠΔ: 12074744,
      ᐃΔⲆᐃΔΔΔⲆᐃ: 3162737,
      ⵠᐃᐃⲆⵠᐃᐃ: 6837041,
      ᐃⵠΔⵠⵠᐃⲆⵠᐃ: 7562495
    };
  })();
  const ju = 12;
  function ku(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 121;
    f.height = b * 130;
    g.translate(0, b * 20);
    if (d == 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 6, b * 23);
      g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
      g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
      g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
      g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
      g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
      g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
      g.closePath();
      hd(g, undefined, c[3], b * 13);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 6, b * 23);
    g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
    g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
    g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
    g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
    g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
    g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
    g.closePath();
    hd(g, c[1], c[2], b * 4);
    if (e == 1) {
      g.translate(0, b * 5);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      hd(g, Lh, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      hd(g, ma, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      hd(g, undefined, c[0], b * 10);
      if (d == 1) {
        g.translate(b * -6, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 67, b * 30);
        g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
        hd(g, Lk, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 70, b * 17);
        g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
        hd(g, Bo, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 76, b * 8);
        g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
        hd(g, undefined, c[3], b * 18);
        g.translate(-6, b * 0);
      } else {
        g.translate(b * -6, b * -5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      hd(g, undefined, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      hd(g, Ro, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      hd(g, Ra, c[2], b * 10);
    } else {
      if (d == 1) {
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        hd(g, undefined, c[3], b * 18);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        hd(g, ma, c[3], b * 18);
      } else {
        g.translate(0, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        hd(g, undefined, c[0], b * 7);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        hd(g, Ra, c[0], b * 7);
        g.translate(0, b * 5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 108, b * 27);
      g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
      g.closePath();
      hd(g, undefined, c[2], b * 7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 79, b * 30);
      g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
      g.closePath();
      hd(g, undefined, c[2], b * 7);
    }
    return f;
  }
  function lu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 16;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 0.5;
    bd(e, 0, 0, a);
    hd(e, c[0]);
    e.globalAlpha = 1;
    return d;
  }
  function mu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    hd(e, undefined, c[2], a * 4);
    bd(e, a * 18, a * 38, a * 14.866068747318506);
    hd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    hd(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    hd(e, c[4], c[5], a * 4);
    return d;
  }
  function nu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    hd(e, undefined, c[2], a * 4);
    bd(e, a * 18, a * 38, a * 14.866068747318506);
    hd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    hd(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 74);
    e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
    e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
    e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
    e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
    e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
    e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
    e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
    e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
    e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
    e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
    e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
    e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
    e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
    e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
    e.closePath();
    hd(e, c[6], c[7], a * 6);
    return d;
  }
  function ou(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 469;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    hd(e, c[0]);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    gd(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    hd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    hd(e, Es, c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    hd(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    hd(e, c[4], c[5], a * 7);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    gd(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    hd(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    hd(e, c[6]);
    return d;
  }
  function pu(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = (b = c * 450) / 2;
    var a = (p = c * 145) / 2;
    var m = c * 10;
    var n = c * 300;
    var h = c * 30;
    var g = n / 2;
    var l = h / 2;
    var o = 4;
    if (f) {
      var b = c * 145;
      var p = c * 450;
      i.width = b;
      i.height = p;
      j.rotate(Math.PI / 2);
      j.save();
      j.globalAlpha = 0.5;
      gd(j, c * 100, c * -110, n, h, m);
      hd(j, e[0]);
      j.translate(c * 178, c * -98);
      gd(j, -g, -l - c * 6, c * 100, c * 100, m);
      hd(j, e[0]);
      j.translate(c * -50, c * 5);
      gd(j, c * 220, c * -15, c * 90, c * 90, m);
      hd(j, e[0]);
      j.restore();
      j.save();
      j.globalAlpha = 1;
      j.translate(c * 250, c * -63);
      gd(j, -g - c * 20, -l, n, h, m);
      hd(j, e[1], e[2], o);
      j.translate(c * -70, c * -40);
      gd(j, -g - c * 20, -l, c * 100, c * 100, m);
      hd(j, e[3], e[4], o);
      j.translate(c * -70, c * 15);
      gd(j, c * 220, c * -22, c * 90, c * 90, m);
      hd(j, e[3], e[4], o);
      gd(j, c * 230, c * -12, c * 55, c * 55, m);
      hd(j, e[5]);
      j.translate(c * -70, 0);
      gd(j, c * -15, c * -2, c * 60, c * 60, m);
      hd(j, e[5]);
      j.restore();
    } else {
      i.width = b;
      i.height = p;
      j.save();
      j.globalAlpha = 0.5;
      j.translate(k, a + c * 10);
      gd(j, -g, -l, n, h, m);
      hd(j, e[0]);
      j.translate(c * -65, c * -25);
      gd(j, -g, -l - c * 6, c * 100, c * 100, c * 15);
      hd(j, e[0]);
      j.translate(c * -35, c * -5);
      gd(j, c * 220, c * -15, c * 90, c * 90, c * 15);
      hd(j, e[0]);
      j.restore();
      j.save();
      j.globalAlpha = 1;
      j.translate(c * 240, c * 70);
      gd(j, -g, -l, n, h, m);
      hd(j, e[1], e[2], o);
      j.translate(c * -60, c * -40);
      gd(j, -g - c * 20, -l, c * 100, c * 100, c * 15);
      hd(j, e[3], e[4], o);
      j.translate(c * -55, c * 10);
      gd(j, c * 220, c * -22, c * 90, c * 90, c * 15);
      hd(j, e[3], e[4], o);
      gd(j, c * 240, c * -12, c * 55, c * 55, c * 12);
      hd(j, e[5]);
      j.translate(c * 45, c * 0);
      gd(j, c * -145, c * -2, c * 60, c * 60, c * 12);
      hd(j, e[5]);
      j.restore();
    }
    return i;
  }
  function qu(c, e, f, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var a = c * 210;
    var m = c * 205;
    var n = c * 30;
    var h = c * 20;
    var g = c * 200;
    var l = c * 180;
    var o = g / 2;
    var b = l / 2;
    j.width = a;
    j.height = m;
    j.width = c * 419;
    j.height = c * 412;
    if (i == 1) {
      k.save();
      k.translate(c * 10, c * 0);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 117.99996948242188, c * 216.40621948242188);
      k.bezierCurveTo(c * 86.99996948242188, c * 221.40621948242188, c * 74.99996948242188, c * 217.40621948242188, c * 60.999969482421875, c * 205.40621948242188);
      hd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 114.99996948242188, c * 227.40621948242188);
      k.bezierCurveTo(c * 90.99996948242188, c * 233.40621948242188, c * 66.99996948242188, c * 228.40621948242188, c * 43.999969482421875, c * 225.40621948242188);
      hd(k, Ra, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 110.99996948242188, c * 236.40621948242188);
      k.bezierCurveTo(c * 94.99996948242188, c * 244.40621948242188, c * 79.99996948242188, c * 249.40621948242188, c * 60.999969482421875, c * 249.40621948242188);
      hd(k, ct, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 111.99996948242188, c * 206.29513549804688);
      k.bezierCurveTo(c * 91.99996948242188, c * 206.29513549804688, c * 87.99996948242188, c * 201.29513549804688, c * 79.99996948242188, c * 192.29513549804688);
      hd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 109.99996948242188, c * 249.18402099609375);
      k.bezierCurveTo(c * 97.99996948242188, c * 263.18402099609375, c * 85.99996948242188, c * 271.18402099609375, c * 65.99996948242188, c * 277.18402099609375);
      hd(k, pj, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 105.99996948242188, c * 192.18402099609375);
      k.bezierCurveTo(c * 99.49996948242188, c * 197.68402099609375, c * 99.49996948242188, c * 197.68402099609375, c * 92.99996948242188, c * 203.18402099609375);
      k.bezierCurveTo(c * 95.99996948242188, c * 213.18402099609375, c * 95.99996948242188, c * 215.18402099609375, c * 89.99996948242188, c * 219.18402099609375);
      k.bezierCurveTo(c * 91.99996948242188, c * 223.18402099609375, c * 91.99996948242188, c * 226.18402099609375, c * 87.99996948242188, c * 230.18402099609375);
      k.bezierCurveTo(c * 89.99996948242188, c * 234.18402099609375, c * 91.99996948242188, c * 237.18402099609375, c * 90.99996948242188, c * 244.18402099609375);
      k.bezierCurveTo(c * 96.99996948242188, c * 252.18402099609375, c * 96.99996948242188, c * 256.18402099609375, c * 95.99996948242188, c * 262.18402099609375);
      k.bezierCurveTo(c * 106.49996948242188, c * 264.18402099609375, c * 106.49996948242188, c * 264.18402099609375, c * 116.99996948242188, c * 266.18402099609375);
      hd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 104.99996948242188, c * 183.29513549804688);
      k.bezierCurveTo(c * 99.99996948242188, c * 193.29513549804688, c * 93.99996948242188, c * 195.29513549804688, c * 89.99996948242188, c * 201.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 212.29513549804688, c * 85.99996948242188, c * 214.29513549804688, c * 81.99996948242188, c * 215.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 223.29513549804688, c * 83.99996948242188, c * 227.29513549804688, c * 79.99996948242188, c * 230.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 235.29513549804688, c * 84.99996948242188, c * 240.29513549804688, c * 79.99996948242188, c * 246.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 251.29513549804688, c * 91.99996948242188, c * 256.2951354980469, c * 89.99996948242188, c * 266.2951354980469);
      k.bezierCurveTo(c * 102.99996948242188, c * 269.2951354980469, c * 102.99996948242188, c * 269.2951354980469, c * 115.99996948242188, c * 272.2951354980469);
      hd(k, Ro, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 107.99996948242188, c * 177.85067749023438);
      k.bezierCurveTo(c * 95.99996948242188, c * 187.35067749023438, c * 95.99996948242188, c * 187.35067749023438, c * 83.99996948242188, c * 196.85067749023438);
      k.bezierCurveTo(c * 82.99996948242188, c * 203.85067749023438, c * 80.99996948242188, c * 209.85067749023438, c * 72.99996948242188, c * 210.85067749023438);
      k.bezierCurveTo(c * 73.99996948242188, c * 220.85067749023438, c * 73.99996948242188, c * 221.85067749023438, c * 66.99996948242188, c * 227.85067749023438);
      k.bezierCurveTo(c * 71.99996948242188, c * 235.85067749023438, c * 73.99996948242188, c * 239.85067749023438, c * 71.99996948242188, c * 247.85067749023438);
      k.bezierCurveTo(c * 80.99996948242188, c * 257.8506774902344, c * 81.99996948242188, c * 263.8506774902344, c * 77.99996948242188, c * 271.8506774902344);
      k.bezierCurveTo(c * 95.49996948242188, c * 272.8506774902344, c * 95.49996948242188, c * 272.8506774902344, c * 112.99996948242188, c * 273.8506774902344);
      hd(k, Ns, e[4], c * 3);
      k.restore();
    } else if (i == 2) {
      k.save();
      k.translate(c * 130, c * 35);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 133.85067749023438);
      k.bezierCurveTo(c * 195.99996948242188, c * 129.85067749023438, c * 196.99996948242188, c * 111.85067749023438, c * 200.99996948242188, c * 88.85067749023438);
      hd(k, Kn, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 143.85067749023438);
      k.bezierCurveTo(c * 189.99996948242188, c * 145.85067749023438, c * 207.99996948242188, c * 126.85067749023438, c * 222.99996948242188, c * 100.85067749023438);
      hd(k, Es, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 157.85067749023438);
      k.bezierCurveTo(c * 193.99996948242188, c * 160.85067749023438, c * 210.99996948242188, c * 151.85067749023438, c * 232.99996948242188, c * 139.85067749023438);
      hd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 192.99996948242188, c * 175.85067749023438, c * 203.99996948242188, c * 177.85067749023438, c * 245.99996948242188, c * 168.85067749023438);
      hd(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 167.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 189.85067749023438, c * 191.99996948242188, c * 193.85067749023438, c * 220.99996948242188, c * 196.85067749023438);
      hd(k, Bo, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 117.85067749023438);
      k.bezierCurveTo(c * 181.99996948242188, c * 120.85067749023438, c * 181.99996948242188, c * 120.85067749023438, c * 186.99996948242188, c * 123.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 137.85067749023438, c * 185.99996948242188, c * 136.85067749023438, c * 190.99996948242188, c * 136.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 147.85067749023438, c * 189.99996948242188, c * 152.85067749023438, c * 193.99996948242188, c * 155.85067749023438);
      k.bezierCurveTo(c * 187.99996948242188, c * 165.85067749023438, c * 190.99996948242188, c * 169.85067749023438, c * 190.99996948242188, c * 172.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 183.85067749023438, c * 186.99996948242188, c * 185.85067749023438, c * 189.99996948242188, c * 188.85067749023438);
      k.bezierCurveTo(c * 182.49996948242188, c * 195.35067749023438, c * 182.49996948242188, c * 195.35067749023438, c * 174.99996948242188, c * 201.85067749023438);
      hd(k, kl, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 112.18402099609375);
      k.bezierCurveTo(c * 183.99996948242188, c * 119.18402099609375, c * 186.99996948242188, c * 117.18402099609375, c * 192.99996948242188, c * 116.18402099609375);
      k.bezierCurveTo(c * 191.99996948242188, c * 126.18402099609375, c * 193.99996948242188, c * 130.18402099609375, c * 199.99996948242188, c * 130.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 145.18402099609375, c * 197.99996948242188, c * 147.18402099609375, c * 201.99996948242188, c * 153.18402099609375);
      k.bezierCurveTo(c * 196.99996948242188, c * 164.18402099609375, c * 197.99996948242188, c * 169.18402099609375, c * 201.99996948242188, c * 174.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 184.18402099609375, c * 196.99996948242188, c * 187.18402099609375, c * 200.99996948242188, c * 193.18402099609375);
      k.bezierCurveTo(c * 185.99996948242188, c * 195.18402099609375, c * 181.99996948242188, c * 201.18402099609375, c * 174.99996948242188, c * 210.18402099609375);
      hd(k, ct, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 101.29513549804688);
      k.bezierCurveTo(c * 181.99996948242188, c * 108.29513549804688, c * 189.99996948242188, c * 110.29513549804688, c * 195.99996948242188, c * 107.29513549804688);
      k.bezierCurveTo(c * 197.99996948242188, c * 121.29513549804688, c * 200.99996948242188, c * 122.29513549804688, c * 206.99996948242188, c * 122.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 138.29513549804688, c * 204.99996948242188, c * 142.29513549804688, c * 211.99996948242188, c * 148.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 156.29513549804688, c * 205.99996948242188, c * 167.29513549804688, c * 213.99996948242188, c * 173.29513549804688);
      k.bezierCurveTo(c * 204.99996948242188, c * 181.29513549804688, c * 204.99996948242188, c * 187.29513549804688, c * 205.99996948242188, c * 193.29513549804688);
      k.bezierCurveTo(c * 190.99996948242188, c * 198.29513549804688, c * 181.99996948242188, c * 205.29513549804688, c * 174.99996948242188, c * 214.29513549804688);
      hd(k, Kn, e[4], c * 3);
      k.restore();
    }
    k.translate(j.width / 2, j.height / 2);
    if (!i) {
      k.globalAlpha = 0.5;
      gd(k, -o, -b, g, l + h, n);
      hd(k, e[0]);
      if (f) {
        k.rotate(Math.PI);
      }
      k.globalAlpha = 1;
      gd(k, -o, -b, g, l, n);
      hd(k, e[1], e[2], 4);
      k.globalAlpha = 1;
      gd(k, c * 35 - o, c * 20 - b, g - c * 50, l - c * 50, n - c * 10);
      hd(k, e[3]);
    }
    if (i == 3) {
      k.translate(-j.width / 2, -j.height / 2);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      hd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      hd(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      hd(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      hd(k, e[5]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      hd(k, e[5]);
      k.translate(c * 5, c * -55);
      k.translate(c * -5, c * 15);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      hd(k, e[5]);
    } else if (i == 4) {
      k.translate(-j.width / 2, -j.height / 2);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 30, c * 167);
      k.bezierCurveTo(c * 47, c * 144, c * 64, c * 140, c * 80, c * 147);
      k.bezierCurveTo(c * 95, c * 154, c * 95, c * 159, c * 100, c * 179);
      k.bezierCurveTo(c * 105, c * 202, c * 95, c * 218, c * 69, c * 218);
      k.bezierCurveTo(c * 48, c * 236, c * 26, c * 223, c * 28, c * 213);
      k.bezierCurveTo(c * 28, c * 205, c * 29, c * 199, c * 32, c * 195);
      k.bezierCurveTo(c * 21, c * 183, c * 27, c * 173, c * 30, c * 167);
      k.closePath();
      hd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 26, c * 145);
      k.bezierCurveTo(c * 32, c * 138, c * 37, c * 137, c * 40, c * 139);
      k.bezierCurveTo(c * 43, c * 140, c * 41, c * 150, c * 31, c * 159);
      k.bezierCurveTo(c * 23, c * 166, c * 17, c * 158, c * 26, c * 145);
      k.closePath();
      hd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 13, c * 193);
      k.bezierCurveTo(c * 21, c * 187, c * 30, c * 190, c * 20, c * 202);
      k.bezierCurveTo(c * 13, c * 208, c * 7, c * 202, c * 13, c * 193);
      k.closePath();
      hd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      hd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 335, c * 196);
      k.bezierCurveTo(c * 312, c * 208, c * 300, c * 185, c * 309, c * 167);
      k.bezierCurveTo(c * 314, c * 141, c * 339, c * 127, c * 359, c * 144);
      k.bezierCurveTo(c * 363, c * 148, c * 364, c * 150, c * 364, c * 150);
      k.bezierCurveTo(c * 392, c * 143, c * 396, c * 183, c * 378, c * 204);
      k.bezierCurveTo(c * 367, c * 215, c * 339, c * 208, c * 335, c * 196);
      k.closePath();
      hd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 349, c * 212);
      k.bezierCurveTo(c * 339, c * 216, c * 334, c * 208, c * 341, c * 203);
      k.bezierCurveTo(c * 353, c * 198, c * 361, c * 205, c * 349, c * 212);
      k.closePath();
      hd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 46, c * 165);
      k.bezierCurveTo(c * 55, c * 148, c * 85, c * 157, c * 83, c * 175);
      k.bezierCurveTo(c * 99, c * 185, c * 89, c * 212, c * 66, c * 204);
      k.bezierCurveTo(c * 55, c * 212, c * 43, c * 212, c * 41, c * 202);
      k.bezierCurveTo(c * 39, c * 194, c * 42, c * 187, c * 49, c * 185);
      k.bezierCurveTo(c * 44, c * 175, c * 45, c * 172, c * 46, c * 165);
      k.closePath();
      hd(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      hd(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      hd(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      hd(k, e[5]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      hd(k, e[5]);
      k.translate(c * 5, c * -55);
      k.translate(c * -5, c * 15);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      hd(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 367, c * 164);
      k.bezierCurveTo(c * 380, c * 160, c * 391, c * 185, c * 371, c * 189);
      k.bezierCurveTo(c * 362, c * 192, c * 354, c * 191, c * 350, c * 185);
      k.bezierCurveTo(c * 326, c * 205, c * 314, c * 182, c * 316, c * 171);
      k.bezierCurveTo(c * 317, c * 150, c * 332, c * 143, c * 347, c * 147);
      k.bezierCurveTo(c * 361, c * 151, c * 366, c * 158, c * 367, c * 164);
      k.closePath();
      hd(k, e[4]);
    }
    return j;
  }
  function ru(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 105;
    var a = c * 125;
    var m = c * 4;
    var n = c * 10;
    var h = c * 5;
    var g = c * 10;
    var l = c * 110;
    var o = g / 2;
    var b = l / 2;
    i.width = k;
    i.height = a;
    j.save();
    j.globalAlpha = e ? 0.5 : 1;
    j.translate(k / 2 + c * 8, a / 2 + h);
    gd(j, -o, -b, g, l, n);
    hd(j, e ? f[0] : f[1]);
    j.translate(c * -130 + h, c * -128 + h);
    j.beginPath();
    j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    j.closePath();
    hd(j, f[2]);
    j.restore();
    j.translate(k / 2 + 8, a / 2);
    j.globalAlpha = 1;
    gd(j, -o, -b, g, l, n);
    hd(j, f[3], f[4], m);
    j.translate(c * -130, c * -125);
    j.beginPath();
    j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    j.closePath();
    hd(j, f[5], f[6], m);
    return i;
  }
  function su(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 32;
    var h = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2 + b * 10);
    e.globalAlpha = 0.5;
    bd(e, 0, 0, a);
    hd(e, c[0], c[0]);
    e.translate(0, b * -8);
    e.globalAlpha = 1;
    bd(e, 0, 0, a);
    hd(e, c[1], c[2], h);
    return d;
  }
  function tu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.max(c.width, b.width);
    var g = Math.max(c.height, b.height);
    d.width = f;
    d.height = g;
    e.drawImage(b, (f - b.width) / 2, (g - b.height) / 2);
    e.drawImage(c, (f - c.width) / 2, (g - c.height) / 2);
    return d;
  }
  function uu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 250;
    e.translate(a * -135, a * -75);
    e.globalAlpha = b ? 0.8 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    hd(e, c[0]);
    bd(e, a * 160.5, a * 243.03125, a * 7);
    hd(e, c[0]);
    bd(e, a * 227.5, a * 242.03125, a * 7);
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    hd(e, c[0], c[0], a * 5);
    bd(e, a * 194, a * 298, a * 9);
    hd(e, c[0], c[0], a * 5);
    e.globalAlpha = 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    hd(e, c[1], c[2], a * 5);
    bd(e, a * 160.5, a * 243.03125, a * 7);
    hd(e, c[1], c[2], a * 5);
    bd(e, a * 227.5, a * 242.03125, a * 7);
    hd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    hd(e, c[1], c[2], a * 7);
    bd(e, a * 194, a * 298, a * 9);
    hd(e, c[1], c[2], a * 7);
    return d;
  }
  function vu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 424;
    d.height = a * 788;
    e.translate(a * 25, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    gd(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    hd(e, c[0]);
    bd(e, a * 204, a * 693, a * 36.013886210738214);
    hd(e, c[0]);
    bd(e, a * 105, a * 518, a * 30);
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    hd(e, c[0]);
    e.translate(a * -25, a * -25);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    gd(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    hd(e, c[1], c[2], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    hd(e, c[3], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    hd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    hd(e, c[6], c[4], a * 16);
    bd(e, a * 204, a * 693, a * 36.013886210738214);
    hd(e, c[6], c[4], a * 16);
    bd(e, a * 105, a * 518, a * 30);
    hd(e, c[6], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    hd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    hd(e, c[6]);
    bd(e, a * 204, a * 693, a * 17.029386365926403);
    hd(e, c[7]);
    bd(e, a * 106, a * 518, a * 12);
    hd(e, c[7]);
    return d;
  }
  function wu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    hd(e, c[0]);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    gd(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    hd(e, c[0]);
    bd(e, a * 122, a * 480, a * 18.439088914585774);
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    hd(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    gd(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    hd(e, c[4], c[5], a * 12.5);
    bd(e, a * 122, a * 480, a * 18.439088914585774);
    hd(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    hd(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 345);
    e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
    e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
    e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
    e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
    e.closePath();
    hd(e, c[3]);
    return d;
  }
  function xu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 40;
    var g = b * 40;
    var a = b * 16;
    var h = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 1;
    bd(e, 0, 0, a);
    hd(e, c[0], c[1], h);
    return d;
  }
  const yu = 12;
  function zu(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 283;
    f.height = b * 224;
    g.translate(0, b * 15);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    hd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    g.closePath();
    hd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    hd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    hd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    hd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    hd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    hd(g, d[0]);
    g.translate(0, b * -15);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    hd(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    hd(g, Dh, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    hd(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    hd(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    hd(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    hd(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    hd(g, d[1], d[2], b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    hd(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    hd(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    hd(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    hd(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    hd(g, Qa, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    hd(g, Wg, d[1], b * 20);
    bd(g, b * 101, b * 155, b * 20.591260281974);
    hd(g, d[3]);
    bd(g, b * 180, b * 155, b * 20.591260281974);
    hd(g, d[3]);
    bd(g, b * 95, b * 148, b * 7.211102550927978);
    hd(g, d[4]);
    bd(g, b * 173, b * 148, b * 7.211102550927978);
    hd(g, d[4]);
    if (e === 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 191, b * 107);
      g.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
      g.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
      g.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
      g.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
      g.closePath();
      hd(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 206, b * 98);
      g.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
      g.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
      g.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
      g.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
      g.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
      g.closePath();
      hd(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 172, b * 111);
      g.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
      g.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
      g.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
      g.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
      g.closePath();
      hd(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 202, b * 125);
      g.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
      g.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
      g.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
      g.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
      g.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
      g.closePath();
      hd(g, d[2]);
    }
    return f;
  }
  function Au(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 283;
    c.height = a * 224;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 33);
    d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    hd(d, pj, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 181, a * 32);
    d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    hd(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 225, a * 52);
    d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    hd(d, Es, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 34, a * 134);
    d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    hd(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 249, a * 135);
    d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    hd(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 56, a * 50);
    d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    hd(d, Qa, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 55);
    d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
    d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
    d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
    d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
    d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
    d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
    d.closePath();
    hd(d, b[0]);
    return c;
  }
  function Bu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 131;
    d.height = a * 121;
    e.translate(0, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    hd(e, c[1], c[2], a * 10);
    return d;
  }
  function Cu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    hd(e, c[0]);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    gd(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    hd(e, c[0]);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    cd(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    hd(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    gd(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    hd(e, c[4], c[5], a * 12.5);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    cd(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    hd(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    hd(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    hd(e, c[3]);
    return d;
  }
  function Du(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    hd(e, c[0]);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    gd(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    hd(e, c[0]);
    bd(e, a * 121, a * 480, a * 20.396078054371138);
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    hd(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    gd(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    hd(e, c[4], c[5], a * 12.5);
    bd(e, a * 121, a * 480, a * 20.396078054371138);
    hd(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    hd(e, c[1], c[2], a * 12.5);
    return d;
  }
  function Eu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 112;
    e.translate(0, a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    hd(e, c[1], c[2], a * 8);
    return d;
  }
  function Fu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    gd(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    gd(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    hd(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    hd(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    hd(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    hd(e, c[1], c[2], a * 12.5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 346);
    e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
    e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
    e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
    e.closePath();
    hd(e, c[3]);
    return d;
  }
  function Gu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 321;
    d.height = a * 284;
    e.translate(a * 100, a * 30);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    hd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    hd(e, undefined, c[4], a * 4);
    e.translate(a * -100, a * -30);
    e.translate(a * 10, a * 70);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    hd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    hd(e, ma, c[4], a * 4);
    e.translate(a * 20, a * -80);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    hd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    hd(e, Qa, c[4], a * 4);
    return d;
  }
  const Hu = 9;
  function Iu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 154;
    d.height = a * 261;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 43);
    e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
    e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
    e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45, a * 29);
    e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
    e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
    e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
    e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 56);
    e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
    e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
    e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
    e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 81);
    e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
    e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
    e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 124);
    e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
    e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
    e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 170);
    e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
    e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
    e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 208);
    e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
    e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
    e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
    e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
    e.closePath();
    hd(e, c[3]);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 81);
    e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
    e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
    e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
    e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
    e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
    e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
    e.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
    e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
    e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
    e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
    e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 123);
    e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
    e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
    e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
    e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
    e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
    e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
    e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
    e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
    e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
    e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
    e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
    e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
    e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
    e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
    e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
    e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
    e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
    e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
    e.closePath();
    hd(e, c[4], c[5], a * 4);
    bd(e, a * 107, a * 152, a * 9);
    hd(e, c[6]);
    bd(e, a * 105, a * 173, a * 9);
    hd(e, c[6]);
    bd(e, a * 87, a * 161, a * 9);
    hd(e, c[6]);
    bd(e, a * 106, a * 147, a * 4);
    hd(e, c[7]);
    bd(e, a * 104, a * 167, a * 4);
    hd(e, c[7]);
    bd(e, a * 86, a * 154, a * 4);
    hd(e, c[7]);
    return d;
  }
  function Ju(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 118;
    d.height = a * 114;
    e.translate(0, a * 10);
    bd(e, a * 42, a * 43, a * 24.758836806279895);
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    hd(e, c[0]);
    e.translate(0, a * -10);
    bd(e, a * 42, a * 43, a * 24.758836806279895);
    hd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    hd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    hd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 16);
    e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
    e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
    e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
    e.bezierCurveTo(a * 45, a * 19, a * 48, a * 16, a * 52, a * 16);
    e.closePath();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 30);
    e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
    e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
    e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
    e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
    e.closePath();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 21);
    e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
    e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
    e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
    e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
    e.closePath();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 36);
    e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
    e.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
    e.closePath();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 34);
    e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
    e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
    e.closePath();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 35);
    e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
    e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
    e.closePath();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 46);
    e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
    e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
    e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
    e.closePath();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 42);
    e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
    e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
    e.closePath();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 57);
    e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
    e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
    e.closePath();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 52);
    e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
    e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
    e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
    e.closePath();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 61);
    e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
    e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
    e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
    e.closePath();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 45);
    e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
    e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
    e.closePath();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 53);
    e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
    e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
    e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
    e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
    e.closePath();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 92, a * 71);
    e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
    e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
    e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
    e.closePath();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 82);
    e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
    e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
    e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
    e.closePath();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 72);
    e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
    e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
    e.closePath();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 86);
    e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
    e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
    e.closePath();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 46);
    e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
    e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
    e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
    e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
    e.closePath();
    hd(e, c[5], c[6], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 76, a * 60);
    e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
    e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
    e.closePath();
    hd(e, c[7], c[8], a * 5);
    return d;
  }
  function Ku(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 217;
    d.height = a * 215;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 113);
    e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
    e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
    e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
    e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
    e.closePath();
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 103);
    e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
    e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
    e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
    e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
    e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
    e.closePath();
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 46);
    e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
    e.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
    e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
    e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
    e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
    e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
    e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
    e.closePath();
    hd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 50);
    e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
    e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
    e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
    e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
    e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
    e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
    e.closePath();
    hd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 40);
    e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
    e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
    e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
    e.closePath();
    hd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 48);
    e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
    e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
    e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
    e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
    e.closePath();
    hd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 89, a * 61);
    e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
    e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
    e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
    e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
    e.closePath();
    hd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 59);
    e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
    e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
    e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
    e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
    e.closePath();
    hd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 62);
    e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
    e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
    e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
    e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
    e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
    e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
    e.closePath();
    hd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 130);
    e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
    e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
    e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
    e.closePath();
    hd(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 119);
    e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
    e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
    e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
    e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
    e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
    e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
    e.closePath();
    hd(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 64);
    e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
    e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
    e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
    e.closePath();
    hd(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 65);
    e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
    e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
    e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
    e.closePath();
    hd(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 112);
    e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
    e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
    e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
    e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
    e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
    e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
    e.closePath();
    hd(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 114);
    e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
    e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
    e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
    e.closePath();
    hd(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85, a * 152);
    e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
    e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
    e.closePath();
    e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
    hd(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 166);
    e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
    e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
    e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
    e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
    e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
    e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
    e.closePath();
    hd(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 168);
    e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
    e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
    e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
    e.closePath();
    hd(e, c[10]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 169);
    e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
    e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
    e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
    e.closePath();
    hd(e, c[9], c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 107);
    e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
    e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
    e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
    e.closePath();
    hd(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 108);
    e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
    e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
    e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
    e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
    e.closePath();
    hd(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 106);
    e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
    e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
    e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
    e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
    e.closePath();
    hd(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 69, a * 178);
    e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
    e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
    hd(e, undefined, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 161);
    e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
    e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
    hd(e, kl, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 91, a * 29);
    e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
    e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
    hd(e, undefined, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 33);
    e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
    e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
    hd(e, Ne, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 98);
    e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
    e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
    e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
    e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
    e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
    e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
    e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
    e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
    e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
    hd(e, undefined, c[3], a * 4);
    return d;
  }
  function Lu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 70;
    var a = b * 90;
    var i = b * 4;
    var j = b * 5;
    e.width = g;
    e.height = a;
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    hd(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    hd(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    hd(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * 3, b * -93 + j);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    hd(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    hd(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    hd(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    hd(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * 3, b * -93);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    hd(f, d[0], d[1], i);
    f.restore();
    return e;
  }
  function Mu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 350;
    d.height = a * 140;
    e.translate(a * -50, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.5, a * 222.0625);
    e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
    e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
    e.closePath();
    hd(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.5, a * 241.0625);
    e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
    e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
    e.closePath();
    hd(e, c[0], c[1], a * 8);
    bd(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
    hd(e, c[2]);
    bd(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
    hd(e, c[2]);
    bd(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
    hd(e, c[2]);
    bd(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
    hd(e, c[2]);
    bd(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
    hd(e, c[2]);
    bd(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151.5, a * 212.0625);
    e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
    e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
    e.closePath();
    hd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 209.0625);
    e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
    e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
    e.closePath();
    hd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188.5, a * 183.0625);
    e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
    e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
    e.closePath();
    hd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 261.5, a * 202.0625);
    e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
    e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
    e.closePath();
    hd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 240.5, a * 231.0625);
    e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
    e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
    e.closePath();
    hd(e, c[3], c[4], a * 4);
    return d;
  }
  const Nu = 9;
  const Ou = 7;
  const Pu = 14;
  function Qu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 140;
    var a = b * 150;
    var i = b * 10;
    var j = b * 4;
    e.width = g;
    e.height = a;
    f.translate(b * -50, b * -38 + i);
    f.globalAlpha = c ? 0.5 : 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    hd(f, d[0]);
    f.translate(0, 0 - i);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    hd(f, d[1], d[2], j);
    return e;
  }
  function Ru(b, c, d, e, f) {
    var g = document.createElement("canvas");
    var a = g.getContext("2d");
    if (e == 0) {
      var i = b * 270;
      var j = b * 250;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 140, b * 3);
      a.translate(b * -25, b * -20);
      a.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
      a.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
      a.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
      a.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
      a.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
      a.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
      a.closePath();
      hd(a, d[0]);
    } else if (e == 1) {
      i = b * 430;
      j = b * 350;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 180, b * 5);
      a.translate(b * -30, b * -60);
      a.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
      a.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
      a.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
      a.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
      a.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
      a.closePath();
      hd(a, d[0]);
    } else if (e == 2) {
      i = b * 400;
      j = b * 300;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 80, b * 52);
      a.translate(b * -40, b * -30);
      a.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
      a.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
      a.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
      a.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
      a.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
      a.closePath();
      hd(a, d[0]);
    }
    return g;
  }
  function Su(c, e, f, i, j, k, n, o, p, h, g = 0) {
    var l = document.createElement("canvas");
    var q = l.getContext("2d");
    k = k ? k * c : 0;
    var b = Math.floor(f * c);
    q.font = b + "px Baloo Paaji";
    q.lineJoin = "round";
    o *= c;
    var r = n ? o * 2 : 0;
    if (p) {
      var t = Math.min(q.measureText(e).width + c * 2 + r, p);
    } else {
      t = q.measureText(e).width + c * 2 + r + g * c * 2;
    }
    b = (b + k + g) * c + r;
    l.width = t;
    l.height = b;
    if (n) {
      q.fillStyle = n;
      gd(q, 0, 0, t, b, o * 2);
      q.fill();
      q.translate(o, o);
    }
    q.textBaseline = "middle";
    q.font = f + "px Baloo Paaji";
    q.lineJoin = "round";
    if (j) {
      q.beginPath();
      q.fillStyle = j;
      q.fillText(e, 0, b / 2 + k - r / 2, t);
    }
    q.beginPath();
    if (h) {
      q.strokeStyle = h;
      q.lineWidth = g;
      q.strokeText(e, g, (b - r) / 2, t);
    }
    q.fillStyle = i;
    q.fillText(e, g, (b - r) / 2, t);
    return l;
  }
  function em(b, c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var a = b * 220;
    var j = b * 220;
    var k = b * 100;
    var h = k / 4;
    f.width = a;
    f.height = j;
    i.translate(a / 2, j / 2);
    i.globalAlpha = c ? 0.5 : 1;
    if (!c) {
      i.translate(b * 0, b * -8);
    }
    cd(i, 7, k, h);
    hd(i, c ? d[0] : d[1]);
    i.globalAlpha = 1;
    if (e == 0) {
      cd(i, 6, k * 0.65, h * 0.65);
      hd(i, d[2]);
    } else if (e == 1) {
      i.translate(b * 20, b * 20);
      cd(i, 6, k * 0.45, h * 0.4);
      hd(i, d[2]);
    }
    return f;
  }
  function im(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 234;
    c.height = a * 183;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 25);
    d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
    d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
    d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
    d.bezierCurveTo(a * 19, a * 148, a * 6, a * 95, a * 21, a * 66);
    d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
    d.closePath();
    hd(d, b[0], b[0], a * 4);
    return c;
  }
  function Tu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 120;
    var a = b * 150;
    var j = b * 60;
    var k = j / 4;
    var h = b * 15;
    e.width = i;
    e.height = a;
    f.save();
    f.translate(i / 2 + b * 0, a / 2 + b * 0 + h);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    cd(f, 8, j, k);
    hd(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 11, a / 2 + b * 12);
    f.globalAlpha = 1;
    f.rotate(Math.PI / 3);
    f.translate(0, -h);
    cd(f, 8, j, k);
    hd(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 9, a / 2 - b * 12);
    f.rotate(Math.PI / 2.8);
    cd(f, 5, j * 0.5, k * 0.4);
    hd(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 19, a / 2 + b * 5);
    f.rotate(Math.PI / 1);
    cd(f, 5, j * 0.5, k * 0.4);
    hd(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 8, a / 2 + b * 20);
    f.rotate(Math.PI / 2.25);
    cd(f, 5, j * 0.5, k * 0.4);
    hd(f, d[2]);
    f.restore();
    return e;
  }
  function nm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * c * 2;
    var a = b * c * 2;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j);
    bd(f, 0, 0, c * b);
    hd(f, d);
    return e;
  }
  function om(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 18;
    var a = b * 18;
    e.width = i;
    e.height = a;
    var j = b * 9;
    var k = b * 9;
    var l = b * 8;
    f.save();
    f.translate(j, k);
    f.globalAlpha = 1;
    bd(f, 0, 0, l);
    hd(f, d[0]);
    l = b * 3;
    j = 0;
    k = b * -3;
    f.translate(j, k);
    f.globalAlpha = 1;
    bd(f, 0, 0, l);
    hd(f, d[1]);
    f.restore();
    return e;
  }
  function am(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 220;
    var a = b * 230;
    var j = b * 100;
    var k = j / 4;
    var h = b * 20;
    e.width = i;
    e.height = a;
    f.translate(i / 2, a / 2 + h);
    f.globalAlpha = 0.5;
    cd(f, 7, j, k);
    hd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, -h);
    cd(f, 7, j, k);
    hd(f, d[1]);
    cd(f, 6, j * 0.65, k * 0.65);
    hd(f, d[2]);
    return e;
  }
  function rm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 180;
    var a = b * 210;
    var j = (h = b * 60) / 4;
    var k = b * 20;
    e.width = i;
    e.height = a;
    f.save();
    f.translate(i / 2 - b * 0, a / 2 - b * 35 + k);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    cd(f, 5, h, j);
    hd(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 10, a / 2 + b * 15 + k);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    cd(f, 5, h, j);
    hd(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 50, a / 2 + b * 40 + k);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    f.translate(0, b * -20);
    cd(f, 5, h, j);
    hd(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 0, a / 2 - b * 35);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(b * 0, b * -20);
    cd(f, 5, h, j);
    hd(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 10, a / 2 + b * 15);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    cd(f, 5, h, j);
    hd(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 50, a / 2 + b * 40);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    cd(f, 5, h, j);
    hd(f, d[1]);
    f.restore();
    var h;
    j = (h = b * 30) / 4;
    f.save();
    f.translate(i / 2 + b * 5, a / 2 - b * 20);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    cd(f, 5, h, j);
    hd(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 0, a / 2 + b * 10);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    cd(f, 5, h, j);
    hd(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 45, a / 2 + b * 35);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    cd(f, 5, h, j);
    hd(f, d[2]);
    f.restore();
    bd(f, i / 2 - b * 7, a / 2 + b * 7, 5);
    hd(f, d[2]);
    return e;
  }
  function im(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 80;
    c.height = a * 100;
    d.scale(0.5, 0.5);
    d.translate(10, 15);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    hd(d, undefined, b[0], a * 10);
    d.translate(0, -10);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    hd(d, b[1], b[2], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    hd(d, pj, b[2], a * 8);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
    hd(d, tr, b[2], a * 8);
    return c;
  }
  const sm = 6;
  function hm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 373;
    d.height = a * 314;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    gd(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    hd(e, c[0], c[0], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    hd(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    gd(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    hd(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    gd(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    hd(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    gd(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    hd(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    gd(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    hd(e, c[0], c[0], a * 6);
    bd(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    hd(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    hd(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    gd(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    hd(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    gd(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    hd(e, c[5], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    gd(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    hd(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    gd(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    hd(e, c[6], c[4], a * 6);
    e.globalCompositeOperation = "destination-out";
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    gd(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    hd(e, c[7], c[8], a * 6);
    e.globalCompositeOperation = "source-over";
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    gd(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    hd(e, c[7], c[8], a * 6);
    e.globalAlpha = 1;
    e.save();
    bd(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    hd(e, c[3], c[4], a * 6);
    e.restore();
    return d;
  }
  function gm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    cd(e, 6, a * 146, a * 30);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    cd(e, 6, a * 146, a * 30);
    e.restore();
    hd(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    cd(e, 6, a * 105, a * 30);
    e.restore();
    hd(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    cd(e, 6, a * 66, a * 30);
    e.restore();
    hd(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 131, a * 116);
    cd(e, 7, a * 17, a * 8);
    e.restore();
    hd(e, c[6]);
    e.save();
    e.translate(a * 163, a * 168);
    cd(e, 7, a * 25, a * 8);
    e.restore();
    hd(e, c[6]);
    e.save();
    e.translate(a * 117, a * 151);
    cd(e, 7, a * 11, a * 8);
    e.restore();
    hd(e, c[6]);
    e.save();
    e.translate(a * 167, a * 122);
    cd(e, 7, a * 12, a * 8);
    e.restore();
    hd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    hd(e, jn, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    hd(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    hd(e, undefined, c[2], a * 8);
    return d;
  }
  function lm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 220;
    d.height = a * 180;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -90, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    hd(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    hd(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    hd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    hd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    hd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    hd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    hd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    hd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    hd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    hd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    hd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    hd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    hd(e, Ne, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    hd(e, Lk, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    hd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    hd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 140, a * 265.33333587646484);
    e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
    e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
    e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
    e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
    e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
    e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
    e.closePath();
    hd(e, undefined, c[4], a * 6);
    e.globalAlpha = 0.5;
    e.scale(1, 1);
    e.translate(a * 105, a * 155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
    e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
    e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
    e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
    e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
    e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
    e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
    e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
    e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
    e.closePath();
    hd(e, c[5], c[5], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -110, a * -155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    hd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    hd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    hd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    hd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    hd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    hd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    hd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    hd(e, c[2], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    hd(e, kl, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    hd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    hd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    hd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    hd(e, tr, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    hd(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    hd(e, c[0], c[0], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    hd(e, Ra, c[1], a * 2);
    return d;
  }
  function um(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (_b === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1);
      cd(e, 8, a * 41, a * 10);
      hd(e, c[0]);
      e.restore();
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1);
    cd(e, 8, a * 41, a * 10);
    hd(e, c[1], c[2], a * 4);
    e.rotate(0.56);
    cd(e, 8, a * 33, a * 10);
    hd(e, c[3], c[4], a * 4);
    e.rotate(0.28);
    cd(e, 8, a * 24, a * 8);
    hd(e, c[5]);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    gd(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    hd(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    gd(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    hd(e, c[4], c[4], a * 2);
    bd(e, a * 45, a * 29, a * 7);
    hd(e, c[5]);
    bd(e, a * 45, a * 61, a * 7);
    hd(e, c[5]);
    bd(e, a * 28, a * 45, a * 7);
    hd(e, c[5]);
    bd(e, a * 62, a * 45, a * 7);
    hd(e, c[5]);
    return d;
  }
  function bm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 135;
    d.height = a * 120;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 3.5, a * 55.25);
    e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
    e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
    e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
    e.closePath();
    hd(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6.5, a * 43.25);
    e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
    e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
    e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
    e.closePath();
    hd(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120.5, a * 62.25);
    e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
    e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
    e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
    e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
    e.closePath();
    hd(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.5, a * 27);
    e.bezierCurveTo(a * 48.5, a * 5, a * 93.5, a * 14, a * 118.5, a * 26);
    e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
    e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
    e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
    e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
    e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
    e.closePath();
    hd(e, c[2], c[3], a * 7);
    return d;
  }
  function dm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (_b === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(0.2);
      cd(e, 9, a * 41, a * 10);
      e.restore();
      hd(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.2);
    cd(e, 9, a * 41, a * 10);
    hd(e, c[1], c[2], a * 4);
    e.rotate(-0.32);
    cd(e, 9, a * 32, a * 10);
    hd(e, c[3], c[4], a * 4);
    e.rotate(0.68);
    cd(e, 9, a * 23, a * 8);
    hd(e, c[5], c[6], a * 6);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    gd(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    hd(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    gd(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    hd(e, c[4], c[4], a * 2);
    bd(e, a * 45, a * 29, a * 7);
    hd(e, c[5]);
    bd(e, a * 45, a * 61, a * 7);
    hd(e, c[5]);
    bd(e, a * 28, a * 45, a * 7);
    hd(e, c[5]);
    bd(e, a * 62, a * 45, a * 7);
    hd(e, c[5]);
    return d;
  }
  function vm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    hd(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    hd(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    hd(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    hd(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    hd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    hd(e, c[4]);
    bd(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
    hd(e, c[5]);
    bd(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
    hd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    hd(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    hd(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    hd(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 296.5, a * 287.34375);
    e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
    e.closePath();
    hd(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 289.34375);
    e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
    e.closePath();
    hd(e, Wg, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 291.34375);
    e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
    e.closePath();
    hd(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 161.34375);
    e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
    e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
    e.closePath();
    hd(e, jn, c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167.5, a * 248.34375);
    e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
    e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
    e.closePath();
    hd(e, Qa, c[9], a * 3);
    return d;
  }
  function mm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 148;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 85);
    e.rotate(1.4);
    cd(e, 7, a * 60, a * 10);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 74);
    e.rotate(1.4);
    cd(e, 7, a * 60, a * 10);
    hd(e, c[1], c[2], 4);
    e.rotate(0.64);
    cd(e, 7, a * 40, a * 10);
    hd(e, c[3], c[4], 4);
    e.rotate(0.12);
    cd(e, 7, a * 23, a * 5);
    e.restore();
    hd(e, c[5]);
    return d;
  }
  function cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    hd(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    hd(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    gd(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    hd(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    gd(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    hd(e, c[1], c[2], a * 5);
    return d;
  }
  function pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 304;
    d.height = a * 278;
    e.translate(a * 10, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    hd(e, c[0]);
    e.translate(a * -10, a * -25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    hd(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    hd(e, c[3], c[4], a * 15);
    return d;
  }
  function Cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    cd(e, 6, a * 146, a * 30);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    cd(e, 6, a * 146, a * 30);
    e.restore();
    hd(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    cd(e, 6, a * 105, a * 30);
    e.restore();
    hd(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    cd(e, 6, a * 66, a * 30);
    e.restore();
    hd(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    cd(e, 6, a * 31, a * 30);
    e.restore();
    hd(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    hd(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    hd(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    hd(e, Qa, c[2], a * 8);
    return d;
  }
  function Tm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 125;
    d.height = a * 139;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 63, a * 79);
    e.rotate(1);
    cd(e, 8, a * 60, a * 10);
    hd(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 63, a * 69);
    e.rotate(1);
    cd(e, 8, a * 60, a * 10);
    hd(e, c[1], c[2], 4);
    e.rotate(0.56);
    cd(e, 8, a * 40, a * 10);
    hd(e, c[3], c[4], 4);
    e.rotate(0.28);
    cd(e, 8, a * 28, a * 8);
    hd(e, c[5]);
    e.restore();
    return d;
  }
  function fm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 372;
    c.height = a * 375;
    d.globalAlpha = 0.5;
    d.translate(a * 15, a * 15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    hd(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -15, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    hd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
    d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
    d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
    d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
    d.closePath();
    hd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
    d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
    d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
    d.closePath();
    hd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
    d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
    d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
    d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
    d.closePath();
    hd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
    d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
    d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
    d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
    d.closePath();
    hd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
    d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
    d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
    d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
    d.closePath();
    hd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
    d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
    d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
    d.closePath();
    hd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    hd(d, undefined, b[2], a * 4);
    return c;
  }
  function zm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 139);
    e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
    e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
    e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.save();
    e.translate(a * 86.5, a * 81.5);
    gd(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
    e.restore();
    hd(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 84.5, a * 79);
    gd(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
    e.restore();
    hd(e, c[3], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 54);
    e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
    e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
    e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
    e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
    e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
    e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
    e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 28, a * 24);
    e.rotate(0);
    gd(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    hd(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143, a * 23);
    e.rotate(0);
    gd(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    hd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 80);
    e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
    e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
    e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
    e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
    e.closePath();
    hd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    hd(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    hd(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    gd(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    hd(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    gd(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    hd(e, c[1], c[2], a * 5);
    return d;
  }
  function ym(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 130;
    var a = b * 142;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j + b * 7);
    f.globalAlpha = c ? 0.5 : 1;
    bd(f, 0, 0, b * 60);
    hd(f, d[0]);
    f.translate(0, b * -7);
    f.globalAlpha = 1;
    bd(f, 0, 0, b * 60);
    hd(f, d[1], d[2], b * 4);
    bd(f, 0, 0, b * 40);
    hd(f, d[3]);
    bd(f, 0, 0, b * 25);
    hd(f, d[4], d[5], b * 8);
    return e;
  }
  function wm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 501;
    d.height = a * 309;
    e.translate(0, a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 184);
    e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
    e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
    e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
    e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
    e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
    e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
    e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 116);
    e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
    e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
    e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
    e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
    e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
    e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
    e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
    e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
    e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
    e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
    e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
    e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
    e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
    e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
    e.closePath();
    hd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 122, a * 191);
    e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
    e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
    e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
    e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
    e.closePath();
    hd(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403, a * 182);
    e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
    e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
    e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
    e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
    e.closePath();
    hd(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155, a * 157);
    e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
    e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
    e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
    e.closePath();
    hd(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 347, a * 162);
    e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
    e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
    e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
    e.closePath();
    hd(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 134);
    e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
    e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
    e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
    e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
    e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
    e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
    e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
    e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
    e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
    e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
    e.closePath();
    hd(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 98);
    e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
    e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
    e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
    e.closePath();
    hd(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 449, a * 97);
    e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
    e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
    e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
    e.closePath();
    hd(e, c[3], c[2], a * 10);
    return d;
  }
  function Pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (_b === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1.4);
      cd(e, 7, a * 41, a * 10);
      e.restore();
      hd(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1.4);
    cd(e, 7, a * 41, a * 10);
    hd(e, c[1], c[2], a * 4);
    cd(e, 7, a * 35, a * 10);
    hd(e, c[3], c[4], a * 4);
    cd(e, 7, a * 23, a * 5);
    e.restore();
    hd(e, c[5]);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    gd(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    hd(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    gd(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    hd(e, c[4], c[4], a * 2);
    bd(e, a * 45, a * 29, a * 7);
    hd(e, c[5]);
    bd(e, a * 45, a * 61, a * 7);
    hd(e, c[5]);
    bd(e, a * 28, a * 45, a * 7);
    hd(e, c[5]);
    bd(e, a * 62, a * 45, a * 7);
    hd(e, c[5]);
    return d;
  }
  function km(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 277.34375);
    e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
    e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
    e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
    e.closePath();
    hd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 214.34375);
    e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
    e.closePath();
    hd(e, Qa, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 247.34375);
    e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
    e.closePath();
    hd(e, Og, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.5, a * 189.34375);
    e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
    e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
    e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
    e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
    e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
    e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
    e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
    e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
    e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
    e.closePath();
    hd(e, c[3], c[4], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 300.5, a * 147.34375);
    e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
    e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
    e.closePath();
    hd(e, c[5], c[6], a * 12);
    bd(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
    hd(e, c[7]);
    bd(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
    hd(e, c[8]);
    return d;
  }
  function Am(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 128;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 7);
    e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * 5);
    e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
    e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
    e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
    e.closePath();
    hd(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 124);
    e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
    e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
    e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
    e.closePath();
    hd(e, c[2], c[3], a * 1);
    return d;
  }
  function xm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 309;
    d.height = a * 287;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    hd(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    hd(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    hd(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    hd(e, c[0], c[0], a * 10);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    hd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    hd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    hd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    hd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 109.5, a * 51.53125);
    e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
    hd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 51.53125);
    e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
    e.closePath();
    hd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 63.53125);
    e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
    e.closePath();
    hd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.5, a * 84.53125);
    e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
    e.closePath();
    hd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 149.5, a * 108.53125);
    e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
    e.closePath();
    hd(e, c[1], c[2], a * 7);
    return d;
  }
  function Jm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 142;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 80);
    e.rotate(0.2);
    cd(e, 9, a * 60, a * 10);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 71);
    e.rotate(0.2);
    cd(e, 9, a * 60, a * 10);
    hd(e, c[1], c[2], 4);
    e.rotate(-0.32);
    cd(e, 9, a * 38, a * 10);
    hd(e, c[3], c[4], 4);
    e.rotate(0.68);
    cd(e, 9, a * 20, a * 8);
    hd(e, c[5], c[6], 6);
    e.restore();
    return d;
  }
  function Mm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 101;
    e.translate(a * 0, a * 5);
    if (_b === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      bd(e, a * 44, a * 55, a * 41);
      hd(e, c[0]);
    }
    e.globalAlpha = 1;
    bd(e, a * 44, a * 45, a * 41);
    hd(e, c[1], c[2], a * 4);
    bd(e, a * 44, a * 45, a * 31);
    hd(e, c[3]);
    e.save();
    e.translate(a * 45, a * 45);
    gd(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    hd(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    gd(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    hd(e, c[4], c[4], a * 2);
    bd(e, a * 45, a * 29, a * 7);
    hd(e, c[5]);
    bd(e, a * 45, a * 61, a * 7);
    hd(e, c[5]);
    bd(e, a * 28, a * 45, a * 7);
    hd(e, c[5]);
    bd(e, a * 62, a * 45, a * 7);
    hd(e, c[5]);
    return d;
  }
  const Bm = 10;
  function Em(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 108;
    d.height = a * 669;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    gd(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    hd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    e.rotate(0);
    gd(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    hd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    hd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    hd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    hd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    hd(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    hd(e, c[8]);
    return d;
  }
  function Dm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 648;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    gd(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 43);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
    e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
    e.closePath();
    hd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    gd(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    hd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    hd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    hd(e, undefined, c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    hd(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    hd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    hd(e, c[5], c[6], a * 8);
    e.save();
    e.translate(a * -46, a * -50);
    e.scale(2, 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 80);
    e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
    e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
    e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
    e.closePath();
    hd(e, c[8]);
    e.restore();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    hd(e, c[8], c[9], a * 8);
    e.scale(2, 2);
    e.translate(a * -23, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 69);
    e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
    e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
    e.closePath();
    hd(e, c[10]);
    return d;
  }
  function Im(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 647;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    gd(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    hd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    gd(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    hd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    hd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    hd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    hd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    hd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    hd(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    hd(e, c[8]);
    return d;
  }
  function Sm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 115;
    d.height = a * 585;
    e.scale(-1, 1);
    e.translate(a * -110, 0);
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    gd(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    hd(e, c[0]);
    e.translate(a * -10, a * -10);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    gd(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    hd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    hd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    hd(e, c[5], c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    hd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 427);
    e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
    hd(e, Wg, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 448);
    e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
    hd(e, Ra, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    hd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    hd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    hd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    hd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    hd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    hd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    hd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    hd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 113);
    e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
    e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
    e.closePath();
    hd(e, c[3], c[4], a * 6);
    return d;
  }
  function Qm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 626;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    hd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    hd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 129);
    e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
    e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
    e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
    e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    hd(e, Og, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 475);
    e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
    e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
    e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
    e.closePath();
    hd(e, c[4], c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 496);
    e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
    hd(e, Og, c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 521);
    e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
    hd(e, ct, c[5], a * 8);
    return d;
  }
  function _m(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 106;
    d.height = a * 681;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    gd(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    hd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    gd(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    hd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    hd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    hd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    hd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    hd(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    hd(e, c[8]);
    return d;
  }
  if (bj.ⵠΔⲆⵠⲆⲆⵠ) {
    var Fm = bj.Math.acos;
    bj.Math.acos = bj.Math.asin;
    bj.Math.asin = Fm;
    var Rm = bj.Math.acos;
    bj.Math.acos = bj.Math.asin;
    bj.Math.asin = Rm;
  }
  const jm = 6;
  function Lm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 48;
    c.height = a * 47;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 7.1875, a * 25.434661865234375);
    d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
    d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
    d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
    d.closePath();
    hd(d, b[0]);
    return c;
  }
  function Wm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -165, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217, a * 103);
    d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
    d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
    d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
    d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
    d.closePath();
    hd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 231, a * 163);
    d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
    d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
    d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
    d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
    d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
    d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
    d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
    d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
    d.closePath();
    hd(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 234, a * 154);
    d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
    d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
    d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
    d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
    d.closePath();
    hd(d, b[2]);
    return c;
  }
  function Gm(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 450;
    f.height = b * 260;
    var a = Mc(b * 1, It, d);
    g.drawImage(a, b * 0, b * 0);
    if (e == 1) {
      g.translate(b * 100, b * 0);
      bd(g, b * 113, b * 120, b * 66);
      hd(g, Lk, d[4], b * 13);
      a = uu(b * 0.65, pl, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
      g.rotate(0.7);
      g.drawImage(a, b * 133, b * -64);
      g.rotate(-0.7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      hd(g, Ne, d[4], b * 13);
    } else if (e == 2) {
      g.translate(b * 100, b * 0);
      bd(g, b * 113, b * 120, b * 66);
      hd(g, undefined, d[4], b * 13);
      g.translate(b * 30, b * 40);
      g.save();
      g.translate(b * 83.5, b * 66.5);
      gd(g, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
      g.restore();
      hd(g, "#dff2f7", "#187484", b * 7);
      bd(g, b * 22, b * 82, b * 12);
      hd(g, "#dff2f7", "#187484", b * 7);
      bd(g, b * 145, b * 82, b * 12);
      hd(g, "#dff2f7", "#187484", b * 7);
      a = Qu(b * 0.5, Tj, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 10, b * 85);
      a = Qu(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 50, b * 85);
      a = Qu(b * 0.5, rr, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 90, b * 85);
      a = om(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = om(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = om(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 125);
      a = om(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 50, b * 115);
      a = om(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 100);
      a = om(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 80, b * 120);
      a = om(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 110, b * 125);
      a = om(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 120, b * 105);
    } else if (e == 3) {
      g.translate(b * 100, b * 0);
      bd(g, b * 113, b * 120, b * 66);
      hd(g, pj, d[4], b * 13);
      g.translate(b * 40, b * 50);
      g.save();
      g.translate(b * 71, b * 69);
      gd(g, b * -30, b * -42, b * 60, b * 84, b * 10);
      g.restore();
      hd(g, undefined, d[5], b * 4);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 42, b * 28);
      g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
      g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
      g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
      g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
      g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
      g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
      g.closePath();
      hd(g, d[5], d[5], b * 4);
      g.translate(b * -40, b * -50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      hd(g, undefined, d[4], b * 13);
    } else if (e == 4) {
      g.scale(1, 1);
      g.translate(b * 70, b * 50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 23, b * 6);
      g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
      hd(g, Dh, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 59, b * 10);
      g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
      hd(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 7, b * 55);
      g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
      hd(g, ir, d[5], b * 14);
      g.translate(b * 10, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 123, b * 16);
      g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
      g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
      g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
      hd(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 72, b * 63);
      g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
      hd(g, Lh, d[5], b * 14);
      g.translate(b * 10, b * 10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 141, b * 8);
      g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
      g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
      hd(g, undefined, d[5], b * 14);
      g.translate(b * 10, b * -10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 205, b * 124);
      g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
      g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
      g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
      hd(g, Dh, d[5], b * 14);
    }
    return f;
  }
  function Nm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 200;
    d.height = a * 200;
    e.save();
    e.translate(a * 112, a * 158);
    gd(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
    e.restore();
    hd(e, c[0]);
    e.save();
    e.translate(a * 170, a * 100);
    gd(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
    e.restore();
    hd(e, c[0]);
    return d;
  }
  function qm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 187;
    d.height = a * 119;
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, 3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    hd(e, c[5]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, -3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    hd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151, a * 60);
    e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
    e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
    e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
    e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
    e.closePath();
    hd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 53);
    e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
    e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
    e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
    e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
    e.closePath();
    hd(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 36);
    e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
    e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
    e.closePath();
    hd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 43);
    e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
    hd(e, Lh, c[1], a * 4);
    bd(e, a * 58, a * 50, a * 5);
    hd(e, c[4]);
    bd(e, a * 43, a * 65, a * 5);
    hd(e, c[4]);
    bd(e, a * 58, a * 73, a * 5);
    hd(e, c[4]);
    bd(e, a * 58, a * 50, a * 2);
    hd(e, c[5]);
    bd(e, a * 43, a * 65, a * 2);
    hd(e, c[5]);
    bd(e, a * 58, a * 73, a * 2);
    hd(e, c[5]);
    return d;
  }
  function Om(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 95;
    d.height = a * 85;
    if (c == 0) {
      e.translate(a * 7, a * 15);
      e.scale(0.9, 0.9);
      e.save();
      gd(e, a * 0, a * 5, a * 90, a * 60, 10);
      hd(e, b[0]);
      e.globalCompositeOperation = "destination-out";
      bd(e, a * 25, a * 40, a * 10);
      e.fill();
      bd(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
      e.save();
      gd(e, 0, 0, a * 90, a * 60, a * 10);
      hd(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      bd(e, a * 25, a * 40, a * 10);
      e.fill();
      bd(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    } else if (c == 1) {
      e.scale(0.8, 0.8);
      e.translate(a * 15, a * 33);
      e.save();
      e.scale(0.56, 0.56);
      e.translate(a * -39, a * -60);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 32.5, a * 50.642852783203125);
      e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
      e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
      e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
      e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
      e.closePath();
      hd(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 116.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
      e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
      e.closePath();
      hd(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 166.5, a * 68.64285278320312);
      e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
      e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
      e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
      e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
      e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
      e.closePath();
      hd(e, b[1]);
      e.restore();
      e.save();
      gd(e, 0, a * 15, a * 90, a * 50, a * 10);
      hd(e, b[0]);
      gd(e, 0, a * 10, a * 90, a * 50, a * 10);
      hd(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      bd(e, a * 25, a * 40, a * 10);
      e.fill();
      bd(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    }
    return d;
  }
  function Hm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 139;
    d.height = a * 135;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    hd(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    hd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    hd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    hd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
    e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
    e.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * 10);
    e.closePath();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 65);
    e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
    e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
    e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
    e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
    e.closePath();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
    e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
    e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
    e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
    e.closePath();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 69);
    e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
    e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
    e.closePath();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
    e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
    e.closePath();
    hd(e, c[2]);
    return d;
  }
  function Um(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      hd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      hd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      hd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      hd(e, b[3], b[3], a * 32);
      bd(e, a * 41, a * 30, a * 14.7648230602334);
      hd(e, b[3], b[3], a * 32);
      bd(e, a * 369, a * 30, a * 15.556349186104045);
      hd(e, b[3], b[3], a * 32);
      bd(e, a * 364, a * 190, a * 15.620499351813308);
      hd(e, b[3], b[3], a * 32);
      bd(e, a * 41, a * 186, a * 15.556349186104045);
      hd(e, b[3], b[3], a * 32);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      hd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      hd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      hd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      hd(e, b[3], b[3], a * 32);
      bd(e, a * 41, a * 30, a * 14.7648230602334);
      hd(e, b[3], b[3], a * 32);
      bd(e, a * 369, a * 30, a * 15.556349186104045);
      hd(e, b[3], b[3], a * 32);
      bd(e, a * 364, a * 190, a * 15.620499351813308);
      hd(e, b[3], b[3], a * 32);
      bd(e, a * 41, a * 186, a * 15.556349186104045);
      hd(e, b[3], b[3], a * 32);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    hd(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    hd(e, b[2], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    hd(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    hd(e, b[2], b[0], a * 12);
    bd(e, a * 41, a * 30, a * 14.7648230602334);
    hd(e, b[2], b[0], a * 12);
    bd(e, a * 369, a * 30, a * 15.556349186104045);
    hd(e, b[2], b[0], a * 12);
    bd(e, a * 364, a * 190, a * 15.620499351813308);
    hd(e, b[2], b[0], a * 12);
    bd(e, a * 41, a * 186, a * 15.556349186104045);
    hd(e, b[2], b[0], a * 12);
    return d;
  }
  function Ym(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -80, -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 200.5, a * 14.953125);
    d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
    d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
    d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
    d.closePath();
    hd(d, b[0]);
    return c;
  }
  function Km(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -200, a * -40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 344, a * 18.40625);
    d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
    d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
    d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
    d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 335, a * 38.072906494140625);
    d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
    d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
    d.closePath();
    hd(d, b[0]);
    return c;
  }
  function Vm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 260;
    d.globalAlpha = 0.5;
    bd(d, a * 126.5, a * 134, a * 119);
    hd(d, b[0]);
    d.globalAlpha = 1;
    bd(d, a * 126.5, a * 124, a * 119);
    hd(d, b[1], b[2], a * 4);
    bd(d, a * 126.5, a * 127, a * 100);
    hd(d, b[3]);
    d.globalAlpha = 0.5;
    bd(d, a * 126.5, a * 135, a * 81);
    hd(d, b[0]);
    d.globalAlpha = 1;
    bd(d, a * 126.5, a * 125, a * 84);
    hd(d, b[4], b[5], a * 4);
    bd(d, a * 126.5, a * 125, a * 61);
    hd(d, b[6], b[7], a * 4);
    d.globalAlpha = 0.5;
    bd(d, a * 126.5, a * 134, a * 40);
    hd(d, b[8]);
    d.globalAlpha = 1;
    bd(d, a * 126.5, a * 125, a * 40);
    hd(d, b[9]);
    return c;
  }
  function Xm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 33;
    c.height = a * 35;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 12.75, a * 7.1328125);
    d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
    d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
    d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
    d.closePath();
    hd(d, b[0]);
    return c;
  }
  function Zm(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 501;
    f.height = b * 564;
    g.scale(0.5, 0.5);
    g.translate(b * 240, b * 255);
    g.rotate(e);
    g.globalAlpha = c ? 0.5 : 0.2;
    bd(g, b * 174, b * 87.984375, b * 20.8806130178211);
    hd(g, d[0], d[0], b * 8);
    bd(g, b * 174, b * 87.984375, b * 12.165525060596439);
    hd(g, d[0], d[0], b * 8);
    bd(g, b * 174, b * 87.484375, b * 6);
    hd(g, d[0]);
    bd(g, b * 30, b * 87.984375, b * 20.8806130178211);
    hd(g, d[0], d[0], b * 4);
    bd(g, b * 30, b * 87.984375, b * 12.165525060596439);
    hd(g, d[0], d[0], b * 4);
    bd(g, b * 30, b * 87.484375, b * 6);
    hd(g, d[0]);
    bd(g, b * 100, b * 30, b * 20.8806130178211);
    hd(g, d[0], d[0], b * 4);
    bd(g, b * 100, b * 30, b * 12.165525060596439);
    hd(g, d[0], d[0], b * 4);
    bd(g, b * 100, b * 30, b * 6);
    hd(g, d[0]);
    bd(g, b * 100, b * 130, b * 20.8806130178211);
    hd(g, d[0], d[0], b * 4);
    bd(g, b * 100, b * 130, b * 12.165525060596439);
    hd(g, d[0], d[0], b * 4);
    bd(g, b * 100, b * 130, b * 6);
    hd(g, d[0]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    g.rotate(0);
    gd(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    hd(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 101, b * 64.984375);
    g.rotate(0);
    gd(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    hd(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 102, b * 63.484375);
    g.rotate(0);
    gd(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    g.translate(5, -5);
    g.globalAlpha = 1;
    bd(g, b * 174, b * 87.984375, b * 20.8806130178211);
    hd(g, d[1], d[3], b * 8);
    bd(g, b * 174, b * 87.984375, b * 12.165525060596439);
    hd(g, d[1], d[3], b * 8);
    bd(g, b * 174, b * 87.484375, b * 6);
    hd(g, d[2]);
    bd(g, b * 30, b * 87.984375, b * 20.8806130178211);
    hd(g, d[1], d[3], b * 8);
    bd(g, b * 30, b * 87.984375, b * 12.165525060596439);
    hd(g, d[1], d[3], b * 8);
    bd(g, b * 30, b * 87.484375, b * 6);
    hd(g, d[2]);
    bd(g, b * 102, b * 30, b * 20.8806130178211);
    hd(g, d[1], d[3], b * 8);
    bd(g, b * 102, b * 30, b * 12.165525060596439);
    hd(g, d[1], d[3], b * 8);
    bd(g, b * 102, b * 30, b * 6);
    hd(g, d[1]);
    bd(g, b * 102, b * 130, b * 20.8806130178211);
    hd(g, d[1], d[3], b * 8);
    bd(g, b * 102, b * 130, b * 12.165525060596439);
    hd(g, d[1], d[3], b * 8);
    bd(g, b * 102, b * 130, b * 6);
    hd(g, d[1]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    gd(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    hd(g, d[1], d[3], b * 8);
    g.save();
    g.translate(b * 101, b * 64.984375);
    gd(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    hd(g, d[2], d[1], b * 8);
    g.save();
    g.translate(b * 102, b * 63.484375);
    gd(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    hd(g, d[2], d[1], b * 8);
    bd(g, b * 135, b * 107.36605834960938, b * 21.095023109728988);
    hd(g, d[1], d[3], b * 8);
    bd(g, b * 135, b * 107.36605834960938, b * 13);
    hd(g, d[1], d[3], b * 8);
    bd(g, b * 135, b * 107.36605834960938, b * 6.082762530298219);
    hd(g, d[2]);
    bd(g, b * 70, b * 107.36605834960938, b * 21.095023109728988);
    hd(g, d[1], d[3], b * 8);
    bd(g, b * 70, b * 107.36605834960938, b * 13);
    hd(g, d[1], d[3], b * 8);
    bd(g, b * 70, b * 107.36605834960938, b * 6.082762530298219);
    hd(g, d[2]);
    return f;
  }
  function $m(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 330;
    d.translate(a * -60, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 7.953125);
    d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
    d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
    d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
    d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
    d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
    d.closePath();
    hd(d, b[0]);
    return c;
  }
  function ec(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 185;
    e.height = b * 164;
    f.translate(0, 0);
    var g = function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 201;
      d.height = a * 164;
      e.translate(0, a * 5);
      e.globalAlpha = b ? 0.5 : 1;
      bd(e, a * 100.5, a * 82, a * 74.92746655359852);
      hd(e, c[0], c[0], a * 4);
      bd(e, a * 100.5, a * 82, a * 65.9417374971317);
      hd(e, c[0], c[0], a * 4);
      e.translate(0, -5);
      e.globalAlpha = 1;
      bd(e, a * 100.5, a * 82, a * 74.92746655359852);
      hd(e, c[1], c[3], a * 4);
      bd(e, a * 100.5, a * 82, a * 65.9417374971317);
      hd(e, c[1], c[2], a * 4);
      bd(e, a * 100.5, a * 82, a * 35.9417374971317);
      hd(e, c[1], c[2], a * 20);
      bd(e, a * 100.5, a * 82, a * 15.9417374971317);
      hd(e, c[1], c[2], a * 6);
      return d;
    }(b, c, d);
    f.drawImage(g, b * -10, b * 0);
    g = Zm(b, c, d, 0);
    f.drawImage(g, b * -83, b * -40);
    g = Zm(b, c, d, Math.PI / 1.4);
    f.drawImage(g, b * -15, b * -88);
    g = Zm(b, c, d, Math.PI / -1.4);
    f.drawImage(g, b * 15, b * -8);
    return e;
  }
  function ic(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 170;
    var a = b * 172;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    f.translate(j, k + b * 7);
    f.globalAlpha = c ? 0.5 : 0;
    bd(f, 0, 0, b * 60);
    hd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -7);
    f.save();
    for (var h = 0; h < 10; h++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      cd(f, 3, b * 20, b * 4);
      hd(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.restore();
    bd(f, 0, 0, b * 60);
    hd(f, d[3], d[4], b * 4);
    bd(f, 0, 0, b * 40);
    hd(f, d[5]);
    bd(f, 0, 0, b * 25);
    hd(f, d[6], d[7], b * 8);
    return e;
  }
  function tc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 204, a * 195.0833282470703);
    e.rotate(10.16);
    gd(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
    e.restore();
    hd(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.5, a * 226.5833282470703);
    e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
    e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
    e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
    e.closePath();
    hd(e, c[2], c[3], a * 4);
    e.save();
    e.translate(a * 197, a * 169.0833282470703);
    e.rotate(10.16);
    gd(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
    e.restore();
    hd(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 24.583328247070312);
    e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
    e.closePath();
    hd(e, undefined, c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
    e.closePath();
    hd(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
    e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
    e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
    e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
    e.closePath();
    hd(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
    e.closePath();
    hd(e, c[4], c[1], a * 8);
    e.save();
    e.translate(a * 249.63333129882812, a * 120.89999389648438);
    e.rotate(7.04);
    gd(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
    e.restore();
    hd(e, c[5]);
    return d;
  }
  function nc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 271;
    c.height = a * 366;
    d.globalAlpha = 0.5;
    d.translate(0, a * 10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    hd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    hd(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    hd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    hd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    hd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    hd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    hd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    hd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    hd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    hd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    hd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    hd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    hd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    hd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    hd(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    hd(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    hd(d, b[1]);
    bd(d, a * 102, a * 269, a * 11);
    hd(d, b[3]);
    bd(d, a * 98, a * 266, a * 5);
    hd(d, b[6]);
    bd(d, a * 168, a * 269, a * 11);
    hd(d, b[3]);
    bd(d, a * 164, a * 266, a * 5);
    hd(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    hd(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 235);
    d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
    d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
    d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
    d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
    d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
    d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
    d.closePath();
    hd(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 132, a * 219);
    d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
    d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
    d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
    d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
    d.closePath();
    hd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 179);
    d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
    d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
    d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
    d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
    d.closePath();
    hd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 143);
    d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
    d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
    d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
    d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
    d.closePath();
    hd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 115);
    d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
    d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
    d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
    d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
    d.closePath();
    hd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 94);
    d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
    d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
    d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
    d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
    d.closePath();
    hd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 279);
    d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
    d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
    d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
    d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
    d.closePath();
    hd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 147, a * 303);
    d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
    d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
    d.closePath();
    hd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 303);
    d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
    d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
    d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
    d.closePath();
    hd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 89, a * 280);
    d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
    d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
    d.closePath();
    hd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 94, a * 290);
    d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
    d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
    d.closePath();
    hd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 163, a * 295);
    d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
    d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
    d.closePath();
    hd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 172, a * 286);
    d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
    d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
    d.closePath();
    hd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    hd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    hd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    hd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    hd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    hd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    hd(d, b[7]);
    return c;
  }
  function oc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 69;
    d.height = a * 120;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 30, a * 84);
    gd(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    hd(e, c[0]);
    e.save();
    e.translate(a * 30, a * 45);
    gd(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    hd(e, c[0]);
    e.save();
    e.translate(a * 30, a * 17);
    gd(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    hd(e, c[0]);
    e.save();
    e.translate(a * 30, a * 31);
    gd(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 36, a * 79.140625);
    gd(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    hd(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 35, a * 40.140625);
    gd(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    hd(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 35, a * 12.140625);
    gd(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    hd(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 34.5, a * 26.140625);
    gd(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    hd(e, c[3], c[4], a * 3);
    return d;
  }
  function ac(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 138;
    d.height = a * 133;
    e.globalAlpha = b ? 0.3 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 73.640625);
    e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
    e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
    e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
    e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
    e.closePath();
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 28.640625);
    e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
    e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
    e.closePath();
    hd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 26.640625);
    e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
    hd(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 26.640625);
    e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
    hd(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    hd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    hd(e, c[3], c[4], a * 4);
    return d;
  }
  function rc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 92;
    d.height = a * 108;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 10);
    e.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
    e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
    e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
    e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
    e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
    e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
    e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
    e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
    e.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
    e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, a * 10);
    e.closePath();
    hd(e, c[0], c[1], 4);
    return d;
  }
  function sc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 180;
    d.height = a * 120;
    e.translate(a * -65, a * -35);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    gd(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    hd(e, c[0]);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    gd(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    gd(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    hd(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    gd(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.5, a * 73.34375);
    e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
    e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
    e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
    e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
    e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137.5, a * 65.34375);
    e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 85.34375);
    e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
    e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 89.34375);
    e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
    e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 208.5, a * 104.34375);
    e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
    e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 117.34375);
    e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
    e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.5, a * 51.34375);
    e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
    e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
    e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 170.5, a * 52.34375);
    e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
    e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
    e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 69.34375);
    e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
    e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
    e.closePath();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222.5, a * 75.34375);
    e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
    e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
    e.closePath();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 100.34375);
    e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
    e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
    e.closePath();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112.5, a * 48.34375);
    e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
    e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
    e.closePath();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216.5, a * 109.34375);
    e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
    e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
    e.closePath();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86.5, a * 133.34375);
    e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
    e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
    e.closePath();
    hd(e, c[2]);
    return d;
  }
  function hc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * 10, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    hd(e, c[1], c[2], a * 10);
    return d;
  }
  function gc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 165;
    d.height = a * 123;
    e.save();
    e.translate(a * 81, a * 65);
    gd(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    hd(e, c[0]);
    e.save();
    e.translate(a * 81, a * 58);
    gd(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    hd(e, c[1], c[2], 4);
    e.save();
    e.translate(a * 81, a * 58);
    gd(e, a * -69, a * -47, a * 138, a * 93, a * 15);
    e.restore();
    hd(e, c[3], c[4], 4);
    e.save();
    e.translate(a * 79, a * 54);
    gd(e, a * -34, a * -40, a * 68, a * 88, a * 13);
    e.restore();
    hd(e, undefined, c[5], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 13);
    e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
    e.closePath();
    hd(e, ir, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 13);
    e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
    e.closePath();
    hd(e, undefined, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 6);
    e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
    e.closePath();
    hd(e, undefined, c[7], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 6);
    e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
    e.closePath();
    hd(e, undefined, c[7], 4);
    e.save();
    e.translate(a * 79, a * 113);
    gd(e, a * -18, a * -2, a * 36, a * 4, a * 20);
    e.restore();
    hd(e, undefined, c[8], 4);
    e.save();
    e.translate(a * 75, a * 118);
    gd(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
    e.restore();
    hd(e, c[8]);
    return d;
  }
  function lc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 173;
    c.height = a * 178;
    d.globalAlpha = 0.5;
    bd(d, a * 86.5, a * 98, a * 80);
    hd(d, b[0]);
    d.globalAlpha = 1;
    bd(d, a * 86.5, a * 89, a * 81);
    hd(d, b[1], b[2], a * 4);
    bd(d, a * 86.5, a * 86, a * 59);
    hd(d, b[3], b[4], a * 4);
    d.globalAlpha = 0.5;
    bd(d, a * 86.5, a * 95, a * 34);
    hd(d, b[0]);
    d.globalAlpha = 1;
    bd(d, a * 86.5, a * 89, a * 34);
    hd(d, b[5]);
    return c;
  }
  function uc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 149;
    c.height = a * 153;
    d.globalAlpha = 0.5;
    bd(d, a * 74.5, a * 85, a * 66);
    hd(d, b[0]);
    d.globalAlpha = 1;
    bd(d, a * 75.5, a * 72.5, a * 67);
    hd(d, b[1], b[2], a * 4);
    bd(d, a * 75.5, a * 73.5, a * 54);
    hd(d, b[3]);
    d.globalAlpha = 0.5;
    bd(d, a * 74.5, a * 80.5, a * 39);
    hd(d, b[4]);
    d.globalAlpha = 1;
    bd(d, a * 74.5, a * 74.5, a * 37);
    hd(d, b[5]);
    return c;
  }
  function bc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.translate(0, b * 3);
    f.globalAlpha = c ? 0.5 : 1;
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    cd(f, 7, b * 60, b * 10);
    f.restore();
    hd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      cd(f, 3, b * 21, b * 4);
      hd(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(0.2);
    cd(f, 9, b * 60, b * 10);
    hd(f, d[3], d[4], b * 4);
    f.rotate(-0.32);
    cd(f, 9, b * 38, b * 10);
    hd(f, d[5], d[6], b * 4);
    f.rotate(0.68);
    cd(f, 9, b * 20, b * 8);
    hd(f, d[7], d[8], b * 6);
    f.restore();
    return e;
  }
  function dc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 147;
    c.height = a * 172;
    d.globalAlpha = 0.5;
    d.translate(0, a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    hd(d, b[0]);
    d.translate(0, a * -8);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    hd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 14, a * 57);
    d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
    d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
    hd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 47);
    d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
    d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
    hd(d, b[1], b[2], a * 4);
    bd(d, a * 51, a * 91, a * 9);
    hd(d, b[3]);
    bd(d, a * 95, a * 91, a * 9);
    hd(d, b[3]);
    bd(d, a * 91, a * 89, a * 4);
    hd(d, b[4]);
    bd(d, a * 47, a * 89, a * 4);
    hd(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 54, a * 133);
    d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
    d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
    d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
    d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
    d.closePath();
    hd(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 65.25, a * 135);
    d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
    d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
    d.closePath();
    hd(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 74, a * 145);
    d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
    d.closePath();
    hd(d, tr, b[6], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 19, a * 58);
    d.bezierCurveTo(a * 10, a * 38, a * 18, a * 33, a * 28, a * 34);
    d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
    d.closePath();
    hd(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 51);
    d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
    d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
    d.closePath();
    hd(d, b[6]);
    return c;
  }
  function vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 43;
    d.height = a * 209;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 21, a * 102.5);
    gd(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    hd(e, c[0]);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    hd(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.translate(0, a * 10);
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 21, a * 102.5);
    gd(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    hd(e, c[1], c[2], a * 4);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    hd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    hd(e, c[5], c[6], a * 4);
    e.translate(0, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    hd(e, c[8]);
    return d;
  }
  function mc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 790;
    e.translate(a * 5, a * 5);
    e.globalAlpha = b ? 0 : 0;
    bd(e, a * 178.5, a * 172.828125, a * 150);
    hd(e, undefined, c[0], a * 65);
    bd(e, a * 178.5, a * 172.828125, a * 150);
    hd(e, Og, c[0], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    gd(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    hd(e, c[0]);
    e.save();
    e.translate(a * 136, a * 581.828125);
    gd(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    hd(e, c[0]);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    gd(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 140, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
    e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
    e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
    e.closePath();
    hd(e, c[0]);
    e.translate(3, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    hd(e, c[0]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    hd(e, c[0], c[0], a * 7);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * 15, a * 35);
    bd(e, a * 178.5, a * 172.828125, a * 150);
    hd(e, undefined, c[2], a * 95);
    bd(e, a * 178.5, a * 172.828125, a * 150);
    hd(e, Qa, c[1], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    gd(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    hd(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 136, a * 581.828125);
    gd(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    hd(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    gd(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    hd(e, c[1], c[2], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    hd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 123, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
    e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
    e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
    e.closePath();
    hd(e, c[1]);
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    hd(e, c[1]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    hd(e, c[1], c[1], a * 7);
    e.restore();
    return d;
  }
  function cc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 280;
    d.translate(a * -100, a * -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 228.5, a * 331.953125);
    d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
    d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
    d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
    d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
    d.closePath();
    hd(d, b[0]);
    return c;
  }
  function pc(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    if (c == 0) {
      e.width = a * 566;
      e.height = a * 429;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 312.625, a * 39.046875);
      d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
      d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
      d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
      d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
      d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
      d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
      d.closePath();
      hd(d, b[0]);
    } else if (c == 1) {
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 511;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 141.625, a * 49.296875);
      d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
      d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
      d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
      d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
      d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
      d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
      d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
      d.closePath();
      hd(d, b[0]);
    } else if (c == 2) {
      var e;
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 504;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 153.625, a * 46.296875);
      d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
      d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
      d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
      d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
      d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
      d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
      d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
      d.closePath();
      hd(d, b[0]);
    }
    return e;
  }
  function Cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 106;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    hd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38, a * 46);
    e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
    e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
    e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
    e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
    e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
    e.closePath();
    hd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    hd(e, undefined, c[2], a * 4);
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    hd(e, c[10], c[10], a * 4);
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 19);
    e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
    e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
    e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
    e.closePath();
    hd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 18);
    e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
    e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
    e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
    e.closePath();
    hd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    hd(e, undefined, c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    hd(e, undefined, c[4], a * 4);
    e.save();
    e.translate(a * 87, a * 34.5);
    e.rotate(0);
    gd(e, a * -8, a * -10.5, a * 16, a * 21, a * 10);
    e.restore();
    hd(e, c[7], c[2], a * 4);
    e.save();
    e.translate(a * 87, a * 57);
    e.rotate(0);
    gd(e, a * -8, a * -23, a * 16, a * 46, a * 10);
    e.restore();
    hd(e, c[8], c[2], a * 4);
    bd(e, a * 87, a * 39, a * 4.123105625617661);
    hd(e, c[9], c[2], a * 4);
    bd(e, a * 87, a * 60, a * 4.242640687119285);
    hd(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    hd(e, c[8], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 13, a * 77, a * 16, a * 74, a * 27, a * 80);
    e.closePath();
    hd(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 70);
    e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
    e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
    e.closePath();
    hd(e, c[9], c[2], a * 4);
    bd(e, a * 50, a * 80, a * 5);
    hd(e, c[9], c[2], a * 4);
    bd(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
    hd(e, c[9], c[2], a * 4);
    bd(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
    hd(e, c[9], c[2], a * 4);
    return d;
  }
  function Tc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.save();
    f.translate(b * 85, b * 88);
    f.rotate(1.4);
    cd(f, 7, b * 60, b * 10);
    f.restore();
    hd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 80);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      cd(f, 3, b * 21, b * 4);
      hd(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1.4);
    cd(f, 7, b * 60, b * 10);
    hd(f, d[3], d[4], b * 4);
    f.rotate(0.64);
    cd(f, 7, b * 40, b * 10);
    hd(f, d[5], d[6], b * 4);
    f.rotate(0.12);
    cd(f, 7, b * 23, b * 5);
    f.restore();
    hd(f, d[7]);
    return e;
  }
  function fc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -20, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 50, a * 105);
    d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
    d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
    d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
    d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
    d.closePath();
    hd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 106);
    d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
    d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
    d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
    d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
    d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
    d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
    d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
    d.closePath();
    hd(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 30, a * 159);
    d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
    d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
    d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
    d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
    d.closePath();
    hd(d, b[2]);
    return c;
  }
  function zc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 145;
    d.height = a * 120;
    e.beginPath();
    e.scale(0.6, 0.6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 18, a * -8);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    hd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.scale(1.1, 1.1);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -9, a * 4);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    hd(e, c[4], c[5], a * 4);
    e.scale(1.1, 1.1);
    e.translate(a * -9, a * 4);
    e.save();
    e.translate(a * 100, a * 73.06874084472656);
    e.rotate(0);
    gd(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
    e.restore();
    hd(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 100, a * 71.36874389648438);
    e.rotate(0);
    gd(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
    e.restore();
    hd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 144, a * 80);
    e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
    e.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * 100);
    e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
    e.closePath();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 75);
    e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
    e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
    e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
    e.closePath();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    hd(e, c[4], c[5], a * 4);
    e.translate(0, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 116.07290649414062);
    e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
    e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
    e.closePath();
    hd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.5, a * 96.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
    e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
    e.closePath();
    hd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    hd(e, c[3], c[2], a * 4);
    e.scale(0.5, 0.5);
    e.translate(a * 100, a * 71);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    hd(e, c[6], c[2], a * 4);
    return d;
  }
  function yc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.save();
    e.translate(a * 70.16665649414062, a * 38.20831298828125);
    gd(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
    e.restore();
    hd(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 70, a * 42.70831298828125);
    gd(e, a * -61, a * -20, a * 122, a * 40, a * 20);
    e.restore();
    hd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 70.375);
    e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
    e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
    e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
    e.closePath();
    hd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 11, a * 68.375);
    e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
    e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
    e.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, a * 17, a * 68.375);
    e.closePath();
    hd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 32.375);
    e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
    e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
    e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
    e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
    e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
    e.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
    e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
    e.closePath();
    hd(e, c[2], c[1], a * 4);
    bd(e, a * 71, a * 44.375, a * 16.55294535724685);
    hd(e, c[2], c[1], a * 4);
    bd(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
    hd(e, c[2], c[1], a * 4);
    return d;
  }
  function wc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 120;
    e.height = b * 100;
    gd(f, b * 10, b * 10, b * 95, b * 80, b * 10);
    hd(f, c[2]);
    gd(f, b * 10, b * 5, b * 95, b * 80, b * 10);
    hd(f, c[3], c[4], b * 4);
    if (d == 0) {
      var g = Om(b * 0.75, c, 0);
      f.drawImage(g, b * 22, b * 18);
    } else if (d == 1) {
      g = Om(b * 0.75, c, 1);
      f.drawImage(g, b * 22, b * 18);
    }
    return e;
  }
  function Pc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 320;
    d.translate(a * -60, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 3.953125);
    d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
    d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
    d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
    d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
    d.closePath();
    hd(d, b[0]);
    return c;
  }
  function kc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 100;
    c.height = a * 100;
    d.globalAlpha = 0.5;
    d.fillStyle = b[0];
    d.fillRect(0, 0, c.width, c.height);
    return c;
  }
  function Ac(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    var e;
    d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    bd(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
    hd(d, Wg, c[2], a * 4);
    bd(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
    hd(d, pj, c[1], a * 4);
    bd(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
    hd(d, ct, c[1], a * 4);
    d.save();
    d.translate(a * 23, a * 38.734375);
    d.rotate(0);
    gd(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
    d.restore();
    hd(d, c[2], c[1], a * 4);
    d.save();
    d.translate(a * 23.5, a * 43.734375);
    d.rotate(0.5235987755982988);
    cd(d, 3, a * 8.06225774829855, a * 0);
    d.restore();
    hd(d, c[3]);
    bd(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
    hd(d, c[3]);
    return e;
  }
  function xc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 20;
    c.height = a * 35;
    gd(d, 0, 0, 20, 35, 7);
    hd(d, b[0]);
    return c;
  }
  function Jc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 3);
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    cd(f, 7, b * 60, b * 10);
    f.restore();
    hd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      cd(f, 3, b * 21, b * 4);
      hd(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1);
    cd(f, 8, b * 60, b * 10);
    hd(f, d[3], d[4], b * 4);
    f.rotate(0.56);
    cd(f, 8, b * 40, b * 10);
    hd(f, d[5], d[6], b * 4);
    f.rotate(0.28);
    cd(f, 8, b * 28, b * 8);
    hd(f, d[7]);
    f.restore();
    return e;
  }
  function Mc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    gd(e, 0, 0, a * 400, a * 220, a * 30);
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    hd(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    hd(e, c[3], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    hd(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    hd(e, c[3], c[1], a * 12);
    bd(e, a * 41, a * 30, a * 14.7648230602334);
    hd(e, c[3], c[1], a * 12);
    bd(e, a * 369, a * 30, a * 15.556349186104045);
    hd(e, c[3], c[1], a * 12);
    bd(e, a * 364, a * 190, a * 15.620499351813308);
    hd(e, c[3], c[1], a * 12);
    bd(e, a * 41, a * 186, a * 15.556349186104045);
    hd(e, c[3], c[1], a * 12);
    return d;
  }
  function Bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 345;
    d.height = a * 250;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 58);
    e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
    e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
    e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
    e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
    e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
    e.closePath();
    hd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 108, a * 51);
    e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
    e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
    e.closePath();
    hd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 249, a * 27);
    e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
    e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
    e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
    e.closePath();
    hd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 78);
    e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
    e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
    e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
    e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
    e.closePath();
    hd(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 105);
    e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
    e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
    e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
    e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
    e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
    e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
    e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
    e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
    e.closePath();
    hd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 48, a * 130);
    e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
    e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
    e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
    e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
    e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
    e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
    e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
    e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
    e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
    e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
    e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
    e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
    e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
    e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
    e.closePath();
    hd(e, c[1], c[2], a * 8);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    hd(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    hd(e, c[7], c[8], a * 8);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    hd(e, undefined, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    hd(e, undefined, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 66);
    e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
    e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
    e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
    e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
    e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
    e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
    e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
    e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
    e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
    e.closePath();
    hd(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 185);
    e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
    e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
    e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
    e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
    e.closePath();
    hd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226, a * 186);
    e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
    e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
    e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
    e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
    e.closePath();
    hd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 172, a * 110);
    e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
    e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
    e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
    e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
    e.closePath();
    hd(e, c[3], c[4], a * 8);
    return d;
  }
  function Ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 151;
    d.height = a * 80;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 54);
    e.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, a * 13);
    e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, a * 16);
    e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
    e.closePath();
    hd(e, c[2], c[3], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 40);
    e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
    e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
    e.closePath();
    hd(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 33);
    e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
    e.bezierCurveTo(a * 19, a * 49, a * 19, a * 49, a * 15, a * 54);
    e.bezierCurveTo(a * 4, a * 43, a * 10, a * 35, a * 20, a * 32);
    e.closePath();
    hd(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 52);
    e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
    e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
    e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
    e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * 18, a * 54);
    e.closePath();
    hd(e, c[0], c[1], 4);
    return d;
  }
  function Dc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 161;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    hd(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, -8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    hd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 28, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    hd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    hd(d, b[3]);
    bd(d, a * 103, a * 110, a * 11);
    hd(d, b[4]);
    bd(d, a * 55, a * 111, a * 11);
    hd(d, b[4]);
    bd(d, a * 99, a * 107, a * 5);
    hd(d, b[1]);
    bd(d, a * 51, a * 108, a * 5);
    hd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 121);
    d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
    d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
    d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
    d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
    d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
    d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
    d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
    d.closePath();
    hd(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.translate(-2, 0);
    d.moveTo(a * 71, a * 162);
    d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
    d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
    d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
    d.closePath();
    hd(d, b[3]);
    d.translate(2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    hd(d, undefined, b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 25, a * 63);
    d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
    d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
    d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
    hd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 91, a * 53);
    d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
    d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
    d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
    hd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    hd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    hd(d, b[3]);
    return c;
  }
  function Ic(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 27.3671875);
    e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
    e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
    e.closePath();
    hd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 23.3671875);
    e.bezierCurveTo(a * 17, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
    e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
    e.closePath();
    hd(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 70.5, a * 34.8671875);
    e.rotate(0);
    gd(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
    e.restore();
    hd(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 71, a * 40.8671875);
    e.rotate(0);
    gd(e, a * -49, a * -12.5, a * 98, a * 25, a * 15);
    e.restore();
    hd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
    e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
    e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
    e.closePath();
    hd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
    e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
    e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
    e.closePath();
    hd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.800003051757812, a * 49.15625);
    e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
    e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
    e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
    e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
    e.closePath();
    hd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
    e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
    e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
    e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
    e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
    e.closePath();
    hd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 56.3671875);
    e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
    e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
    e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
    e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
    e.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
    e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
    e.closePath();
    hd(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 68.30000305175781, a * 41.45625305175781);
    e.rotate(0.76);
    gd(e, a * -20.5, a * -20.5, a * 41, a * 41, a * 10);
    e.restore();
    hd(e, Ro, c[5], a * 4);
    e.save();
    e.translate(a * 68.80000305175781, a * 44.45625305175781);
    e.rotate(0.76);
    gd(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
    e.restore();
    hd(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 69.80000305175781, a * 44.556243896484375);
    e.rotate(0.76);
    gd(e, a * -10, a * -10, a * 20, a * 20, a * 5);
    e.restore();
    hd(e, c[6], c[7], a * 4);
    return d;
  }
  const Sc = 6;
  function Qc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 160;
    d.height = a * 161;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80.5, a * 78);
    gd(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80.5, a * 78);
    gd(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    hd(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 80, a * 78.5);
    gd(e, a * -17, a * -72.5, a * 34, a * 145, a * 10);
    e.restore();
    hd(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80, a * 79.5);
    gd(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80, a * 79.5);
    gd(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    hd(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    hd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    hd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    hd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    hd(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 78.5, a * 78);
    gd(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 78.5, a * 78);
    gd(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    hd(e, c[3], c[4], a * 6);
    return d;
  }
  function _c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 168;
    d.height = a * 100;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    gd(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    hd(e, c[0]);
    bd(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    gd(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    hd(e, undefined, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    hd(e, Ro, c[3], a * 6);
    bd(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
    hd(e, Wg, c[3], a * 6);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    gd(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    hd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    hd(e, c[1]);
    bd(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    hd(e, c[2], c[1], a * 4);
    bd(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
    hd(e, c[3], c[1], a * 4);
    bd(e, a * 78, a * 44, a * 20);
    hd(e, c[4]);
    return d;
  }
  function Fc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 405;
    e.globalAlpha = 1;
    e.translate(a * 6, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
    e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
    e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
    e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
    e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    hd(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
    e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
    e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
    e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
    e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
    e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
    e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
    e.closePath();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    hd(e, undefined, c[1], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
    e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
    e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
    e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
    e.closePath();
    hd(e, c[0], c[1], a * 13);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
    e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
    e.closePath();
    hd(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
    e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
    e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
    e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
    e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
    e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
    e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
    e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
    e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
    e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
    e.closePath();
    hd(e, c[2], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
    e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
    e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
    e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
    e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
    e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
    e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
    e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
    e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
    e.closePath();
    hd(e, c[0], c[1], a * 20);
    return d;
  }
  function Rc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 80;
    d.height = a * 160;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    gd(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    hd(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    gd(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    hd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 0, a * 1);
    e.moveTo(a * 180.5, a * 169.0625);
    e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
    e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
    e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
    e.closePath();
    hd(e, c[5]);
    e.restore();
    return d;
  }
  function jc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 77;
    e.translate(0, a * 10);
    e.scale(0.2, 0.2);
    e.translate(0, a * -30);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 36.5, a * 278.0625);
      e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
      e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
      e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
      e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
      e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
      e.closePath();
      hd(e, b[0], b[3], a * 50);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    hd(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    hd(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    hd(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    hd(e, b[2], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    hd(e, b[1]);
    e.scale(3, 3);
    e.translate(15, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 32);
      e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
      e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
      e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
      hd(e, undefined, b[3], a * 28);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 56, a * 6);
      e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
      e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
      e.closePath();
      hd(e, b[3], b[3], a * 28);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    hd(e, Bo, b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    hd(e, b[1], b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    hd(e, Ra, b[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    hd(e, b[2], b[2], a * 10);
    return d;
  }
  function Lc(a) {
    return bj.String.fromCharCode(a);
  }
  function Wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    gd(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    hd(e, c[2]);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    gd(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    hd(e, c[2]);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    gd(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    hd(e, c[2]);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    gd(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    hd(e, c[2]);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    gd(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    hd(e, c[2]);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    gd(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    hd(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    gd(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    hd(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    gd(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    hd(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    gd(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    hd(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    gd(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    hd(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    gd(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    hd(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    gd(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    hd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    hd(e, undefined, c[4], a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 99);
    cd(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    hd(e, c[2]);
    e.save();
    e.translate(a * 98, a * 99);
    cd(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    hd(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 99);
    cd(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    hd(e, c[5], c[6], a * 5);
    e.save();
    e.translate(a * 98, a * 99);
    cd(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    hd(e, c[7], c[8], a * 7);
    return d;
  }
  function Gc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 192;
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 42, a * 99);
    d.globalAlpha = 0.5;
    gd(d, a * -7, a * -20, a * 14, a * 39, a * 20);
    d.restore();
    hd(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 37, a * 94);
    gd(d, a * -7, a * -20, a * 14, a * 37, a * 20);
    d.restore();
    hd(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 136, a * 99);
    d.globalAlpha = 0.5;
    gd(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    hd(d, b[0], b[0], a * 13);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 131, a * 94);
    gd(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    hd(d, b[2], b[2], a * 13);
    d.save();
    d.translate(a * 131, a * 94);
    gd(d, a * -76, a * -61, a * 152, a * 122, a * 20);
    d.restore();
    hd(d, b[3], b[1], a * 8);
    d.save();
    d.translate(a * 168.5, a * 93.5);
    gd(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
    d.restore();
    hd(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 93.5, a * 95.5);
    gd(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
    d.restore();
    hd(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 130.5, a * 94);
    gd(d, a * -36, a * -67, a * 73, a * 134, a * 20);
    d.restore();
    hd(d, b[3], b[2], a * 8);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 133, a * 97);
    gd(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    hd(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 133, a * 92);
    gd(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    hd(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 228, a * 99.5);
    d.globalAlpha = 0.5;
    gd(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    hd(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 223, a * 94.5);
    gd(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    hd(d, b[2]);
    d.save();
    d.translate(a * 133.5, a * 175.5);
    d.globalAlpha = 0.5;
    gd(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    hd(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 128.5, a * 170.5);
    gd(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    hd(d, b[2]);
    return c;
  }
  function Nc() {
    new Date().getTime();
    function b(a) {
      var b = 0;
      var c = 0;
      for (var d = 0; d < a.length; d++) {
        var e = a.charAt(d);
        if (e !== "_" && d !== 5) {
          if (e === "1") {
            b += Math.pow(2, c);
          }
          c++;
        }
      }
      return b;
    }
    ᐃᐃΔⵠᐃⲆΔΔΔ();
    Ⲇⵠ[1026] = [ᐃΔ.ᐃᐃⵠΔⲆᐃΔ, ᐃΔ.ⲆΔⲆⲆΔᐃⲆ];
    Ⲇⵠ[1025] = [];
    Ⲇⵠ[1025][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("000_010_000")] = [ᐃΔ.ᐃⲆΔⵠⲆ, ᐃΔ.ᐃΔᐃᐃΔ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("000_010_010")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("000_010_000")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("000_011_000")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("000_010_000")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("000_011_010")] = [ᐃΔ.ⵠΔⲆΔΔ, ᐃΔ.Δᐃⵠⵠⵠ, ᐃΔ.ᐃΔᐃᐃΔ, ᐃΔ.ᐃⲆΔⵠⲆ, ᐃΔ.ⵠΔⵠⵠᐃᐃⵠ, ᐃΔ.ⵠⵠΔⲆⲆΔⵠ, ᐃΔ.ⲆΔⲆⲆⵠⲆⵠ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("000_011_011")] = [ᐃΔ.ⵠⵠⵠΔᐃΔⲆ, ᐃΔ.ⵠΔⲆΔΔ, ᐃΔ.Δᐃⵠⵠⵠ, ᐃΔ.ᐃΔᐃᐃΔ, ᐃΔ.ᐃⲆΔⵠⲆ, ᐃΔ.ⵠΔⵠⵠᐃᐃⵠ, ᐃΔ.ⵠⵠΔⲆⲆΔⵠ, ᐃΔ.ⲆΔⲆⲆⵠⲆⵠ, ᐃΔ.ⵠⲆⵠⲆᐃ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("000_110_000")] = [ᐃΔ.ΔΔᐃⵠᐃ, ᐃΔ.ᐃΔᐃᐃΔ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("000_110_010")] = [ᐃΔ.ᐃΔᐃⵠΔ, ᐃΔ.ΔΔᐃⵠᐃ, ᐃΔ.ⲆⵠⲆⵠΔ, ᐃΔ.ᐃΔᐃᐃΔ, ᐃΔ.ᐃⲆΔⵠⲆ, ᐃΔ.ⵠⲆⵠⲆᐃ, ᐃΔ.ΔⲆⲆΔⵠ, ᐃΔ.ⲆⵠΔᐃⵠⲆᐃ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("000_110_110")] = [ᐃΔ.ᐃΔᐃⵠΔ, ᐃΔ.ᐃΔⵠΔⵠⲆⵠ, ᐃΔ.ᐃⲆⲆⲆⵠᐃⵠ, ᐃΔ.ΔΔᐃⵠᐃ, ᐃΔ.ⲆⵠⲆⵠΔ, ᐃΔ.ᐃΔᐃᐃΔ, ᐃΔ.ⵠⲆⵠⲆᐃ, ᐃΔ.ΔⲆⲆΔⵠ, ᐃΔ.ⲆⵠΔᐃⵠⲆᐃ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("000_111_000")] = [ᐃΔ.ΔΔᐃⵠᐃ, ᐃΔ.ⲆⵠⲆⵠΔ, ᐃΔ.ΔᐃᐃⲆΔⵠΔ, ᐃΔ.ⲆⵠⵠΔΔⲆⲆ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("000_111_111")] = [ᐃΔ.ΔΔᐃⵠᐃ, ᐃΔ.ᐃⲆⲆⲆⵠᐃⵠ, ᐃΔ.ᐃΔᐃⵠΔ, ᐃΔ.Δᐃⵠⵠⵠ, ᐃΔ.ⵠΔⲆΔΔ, ᐃΔ.ⵠⵠⵠΔᐃΔⲆ, ᐃΔ.ⵠΔᐃⲆⵠⵠᐃ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_010_000")] = [ᐃΔ.ᐃΔᐃᐃΔ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_010_010")] = [ᐃΔ.ᐃⲆΔⵠᐃⲆΔ, ᐃΔ.ᐃΔᐃᐃΔ, ᐃΔ.ᐃⲆΔⵠⲆ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_011_000")] = [ᐃΔ.ⵠⵠΔⲆΔ, ᐃΔ.ᐃΔᐃᐃΔ, ᐃΔ.ᐃⲆΔⵠⲆ, ᐃΔ.ΔⲆⲆΔⵠ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_110_000")] = [ᐃΔ.ΔΔᐃⵠᐃ, ᐃΔ.ⲆⵠⲆⵠΔ, ᐃΔ.ᐃΔᐃᐃΔ, ᐃΔ.ΔⲆⲆΔⵠ, ᐃΔ.ⲆᐃⵠΔᐃ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_110_110")] = [ᐃΔ.ᐃΔᐃΔⵠ, ᐃΔ.ⵠⵠΔⲆΔ, ᐃΔ.ⵠΔⲆΔΔ, ᐃΔ.Δᐃⵠⵠⵠ, ᐃΔ.ᐃΔᐃⵠΔ, ᐃΔ.ᐃⲆⲆⲆⵠᐃⵠ, ᐃΔ.ΔΔᐃⵠᐃ, ᐃΔ.ⵠΔᐃⲆⵠⵠᐃ, ᐃΔ.ᐃⲆᐃⵠᐃⵠᐃ, ᐃΔ.ᐃⲆΔⵠᐃⲆΔ, ᐃΔ.ⲆⵠⲆⵠΔ, ᐃΔ.ΔᐃᐃⲆΔⵠΔ, ᐃΔ.ⲆⵠⵠΔΔⲆⲆ, ᐃΔ.ᐃΔᐃᐃΔ, ᐃΔ.ᐃⲆΔⵠⲆ, ᐃΔ.ⵠΔⵠⵠᐃᐃⵠ, ᐃΔ.ⵠⵠΔⲆⲆΔⵠ, ᐃΔ.ⲆΔⲆⲆⵠⲆⵠ, ᐃΔ.ⵠⲆⵠⲆᐃ, ᐃΔ.ΔⲆⲆΔⵠ, ᐃΔ.ⲆᐃⵠΔᐃ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_011_010")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_011_011")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("000_111_011")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_110_010")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_111_000")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_111_010")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_111_011")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_111_110")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_111_111")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("000_111_110")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("000_111_010")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("011_011_000")] = [ᐃΔ.ⲆⲆⵠⲆⵠⵠΔ, ᐃΔ.ᐃΔᐃΔⵠ, ᐃΔ.ⵠⵠΔⲆΔ, ᐃΔ.ᐃΔᐃᐃΔ, ᐃΔ.ᐃⲆΔⵠⲆ, ᐃΔ.ΔⲆⲆΔⵠ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("011_011_010")] = [ᐃΔ.ⲆⲆⵠⲆⵠⵠΔ, ᐃΔ.ᐃΔᐃΔⵠ, ᐃΔ.ⵠⵠΔⲆΔ, ᐃΔ.ΔΔᐃⵠᐃ, ᐃΔ.ⲆⵠⲆⵠΔ, ᐃΔ.ΔᐃᐃⲆΔⵠΔ, ᐃΔ.ⲆⵠⵠΔΔⲆⲆ, ᐃΔ.ᐃΔᐃᐃΔ, ᐃΔ.ᐃⲆΔⵠⲆ, ᐃΔ.ΔⲆⲆΔⵠ, ᐃΔ.ⲆᐃⵠΔᐃ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("011_011_011")] = [ᐃΔ.Δᐃⵠⵠⵠ, ᐃΔ.ⵠΔⲆΔΔ, ᐃΔ.ⵠⵠⵠΔᐃΔⲆ, ᐃΔ.ⵠⵠΔⲆΔ, ᐃΔ.ᐃΔᐃΔⵠ, ᐃΔ.ⲆⲆⵠⲆⵠⵠΔ, ᐃΔ.ᐃⲆᐃⵠᐃⵠᐃ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("011_111_000")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("011_011_010")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("011_111_010")] = [ᐃΔ.ⲆⲆⵠⲆⵠⵠΔ, ᐃΔ.ᐃΔᐃΔⵠ, ᐃΔ.ⵠⵠΔⲆΔ, ᐃΔ.ⵠΔⲆΔΔ, ᐃΔ.Δᐃⵠⵠⵠ, ᐃΔ.ᐃΔᐃⵠΔ, ᐃΔ.ΔΔᐃⵠᐃ, ᐃΔ.ⵠΔᐃⲆⵠⵠᐃ, ᐃΔ.ᐃⲆᐃⵠᐃⵠᐃ, ᐃΔ.ᐃⲆΔⵠᐃⲆΔ, ᐃΔ.ⲆⵠⲆⵠΔ, ᐃΔ.ΔᐃᐃⲆΔⵠΔ, ᐃΔ.ⲆⵠⵠΔΔⲆⲆ, ᐃΔ.ᐃΔᐃᐃΔ, ᐃΔ.ᐃⲆΔⵠⲆ, ᐃΔ.ⵠΔⵠⵠᐃᐃⵠ, ᐃΔ.ⵠⵠΔⲆⲆΔⵠ, ᐃΔ.ⲆΔⲆⲆⵠⲆⵠ, ᐃΔ.ⵠⲆⵠⲆᐃ, ᐃΔ.ΔⲆⲆΔⵠ, ᐃΔ.ⲆᐃⵠΔᐃ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("011_111_011")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("011_111_010")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("011_111_110")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("011_111_010")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("011_111_111")] = [ᐃΔ.ⲆⲆⵠⲆⵠⵠΔ, ᐃΔ.ᐃΔᐃΔⵠ, ᐃΔ.ⵠⵠΔⲆΔ, ᐃΔ.ⵠⵠⵠΔᐃΔⲆ, ᐃΔ.ⵠΔⲆΔΔ, ᐃΔ.Δᐃⵠⵠⵠ, ᐃΔ.ᐃΔᐃⵠΔ, ᐃΔ.ᐃⲆⲆⲆⵠᐃⵠ, ᐃΔ.ΔΔᐃⵠᐃ, ᐃΔ.ⵠΔᐃⲆⵠⵠᐃ, ᐃΔ.ᐃⲆᐃⵠᐃⵠᐃ, ᐃΔ.ᐃⲆΔⵠᐃⲆΔ, ᐃΔ.ⲆⵠⲆⵠΔ, ᐃΔ.ΔᐃᐃⲆΔⵠΔ, ᐃΔ.ⲆⵠⵠΔΔⲆⲆ, ᐃΔ.ᐃΔᐃᐃΔ, ᐃΔ.ᐃⲆΔⵠⲆ, ᐃΔ.ⵠΔⵠⵠᐃᐃⵠ, ᐃΔ.ⵠⵠΔⲆⲆΔⵠ, ᐃΔ.ⲆΔⲆⲆⵠⲆⵠ, ᐃΔ.ⵠⲆⵠⲆᐃ, ᐃΔ.ΔⲆⲆΔⵠ, ᐃΔ.ⲆᐃⵠΔᐃ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("110_110_000")] = [ᐃΔ.ᐃⵠⵠⵠⵠⲆΔ, ᐃΔ.ΔΔᐃⵠᐃ, ᐃΔ.ⵠⲆⵠⲆᐃΔⲆ, ᐃΔ.ⲆⵠⲆⵠΔ, ᐃΔ.ᐃΔᐃᐃΔ, ᐃΔ.ⲆᐃⵠΔᐃ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("110_110_010")] = [ᐃΔ.ᐃΔᐃⵠΔ, ᐃΔ.ᐃⵠⵠⵠⵠⲆΔ, ᐃΔ.ΔΔᐃⵠᐃ, ᐃΔ.ᐃⲆΔⵠᐃⲆΔ, ᐃΔ.ⲆⵠⲆⵠΔ, ᐃΔ.ᐃΔᐃᐃΔ, ᐃΔ.ⵠⲆⵠⲆᐃ, ᐃΔ.ⲆᐃⵠΔᐃ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("110_110_110")] = [ᐃΔ.ᐃΔᐃⵠΔ, ᐃΔ.ᐃⲆⲆⲆⵠᐃⵠ, ᐃΔ.ᐃⵠⵠⵠⵠⲆΔ, ᐃΔ.ΔΔᐃⵠᐃ, ᐃΔ.ᐃⲆΔⵠᐃⲆΔ, ᐃΔ.ⲆⵠⲆⵠΔ, ᐃΔ.ᐃΔᐃᐃΔ, ᐃΔ.ⵠⲆⵠⲆᐃ, ᐃΔ.ⲆᐃⵠΔᐃ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("110_111_000")] = [ᐃΔ.ᐃΔᐃΔⵠ, ᐃΔ.ⵠⵠΔⲆΔ, ᐃΔ.ᐃⵠⵠⵠⵠⲆΔ, ᐃΔ.ΔΔᐃⵠᐃ, ᐃΔ.ⵠⲆⵠⲆᐃΔⲆ, ᐃΔ.ⲆᐃΔⲆⵠⵠⲆ, ᐃΔ.ⲆⵠⲆⵠΔ, ᐃΔ.ΔᐃᐃⲆΔⵠΔ, ᐃΔ.ⲆⵠⵠΔΔⲆⲆ, ᐃΔ.ᐃΔᐃᐃΔ, ᐃΔ.ᐃⲆΔⵠⲆ, ᐃΔ.ΔⲆⲆΔⵠ, ᐃΔ.ⲆᐃⵠΔᐃ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("110_111_110")] = [ᐃΔ.ᐃΔᐃΔⵠ, ᐃΔ.ⵠⵠΔⲆΔ, ᐃΔ.ⵠΔⲆΔΔ, ᐃΔ.Δᐃⵠⵠⵠ, ᐃΔ.ᐃΔᐃⵠΔ, ᐃΔ.ᐃⲆⲆⲆⵠᐃⵠ, ᐃΔ.ᐃⵠⵠⵠⵠⲆΔ, ᐃΔ.ΔΔᐃⵠᐃ, ᐃΔ.ⵠΔᐃⲆⵠⵠᐃ, ᐃΔ.ⲆᐃΔⲆⵠⵠⲆ, ᐃΔ.ᐃⲆᐃⵠᐃⵠᐃ, ᐃΔ.ᐃⲆΔⵠᐃⲆΔ, ᐃΔ.ⲆⵠⲆⵠΔ, ᐃΔ.ΔᐃᐃⲆΔⵠΔ, ᐃΔ.ⲆⵠⵠΔΔⲆⲆ, ᐃΔ.ᐃΔᐃᐃΔ, ᐃΔ.ᐃⲆΔⵠⲆ, ᐃΔ.ⵠΔⵠⵠᐃᐃⵠ, ᐃΔ.ⵠⵠΔⲆⲆΔⵠ, ᐃΔ.ⲆΔⲆⲆⵠⲆⵠ, ᐃΔ.ⵠⲆⵠⲆᐃ, ᐃΔ.ΔⲆⲆΔⵠ, ᐃΔ.ⲆᐃⵠΔᐃ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("110_111_111")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("110_111_110")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("110_111_011")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("110_111_110")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("110_111_010")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("110_111_110")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("111_111_110")] = [ᐃΔ.ⲆᐃⵠΔᐃ, ᐃΔ.ΔⲆⲆΔⵠ, ᐃΔ.ⵠⲆⵠⲆᐃ, ᐃΔ.ⲆΔⲆⲆⵠⲆⵠ, ᐃΔ.ⵠⵠΔⲆⲆΔⵠ, ᐃΔ.ⵠΔⵠⵠᐃᐃⵠ, ᐃΔ.ᐃⲆΔⵠⲆ, ᐃΔ.ᐃΔᐃᐃΔ, ᐃΔ.ⲆⵠⵠΔΔⲆⲆ, ᐃΔ.ΔᐃᐃⲆΔⵠΔ, ᐃΔ.ⲆⵠⲆⵠΔ, ᐃΔ.ᐃⲆΔⵠᐃⲆΔ, ᐃΔ.ᐃⲆᐃⵠᐃⵠᐃ, ᐃΔ.ⲆᐃΔⲆⵠⵠⲆ, ᐃΔ.ⵠΔᐃⲆⵠⵠᐃ, ᐃΔ.ΔΔᐃⵠᐃ, ᐃΔ.ᐃⵠⵠⵠⵠⲆΔ, ᐃΔ.ᐃΔᐃⵠΔ, ᐃΔ.Δᐃⵠⵠⵠ, ᐃΔ.ⵠΔⲆΔΔ, ᐃΔ.ⵠⵠΔⲆΔ, ᐃΔ.ᐃΔᐃΔⵠ, ᐃΔ.ⲆⲆⵠⲆⵠⵠΔ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("111_111_011")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("111_111_110")];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("111_111_000")] = [ᐃΔ.ⵠⲆⵠⲆᐃΔⲆ, ᐃΔ.ΔΔᐃⵠᐃ, ᐃΔ.ᐃⵠⵠⵠⵠⲆΔ, ᐃΔ.ⵠⵠΔⲆΔ, ᐃΔ.ᐃΔᐃΔⵠ, ᐃΔ.ⲆⲆⵠⲆⵠⵠΔ, ᐃΔ.ⲆᐃΔⲆⵠⵠⲆ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("111_111_111")] = [ᐃΔ.ⲆⲆⵠⲆⵠⵠΔ, ᐃΔ.ᐃΔᐃΔⵠ, ᐃΔ.ⵠⵠΔⲆΔ, ᐃΔ.ⵠⵠⵠΔᐃΔⲆ, ᐃΔ.ⵠΔⲆΔΔ, ᐃΔ.Δᐃⵠⵠⵠ, ᐃΔ.ᐃΔᐃⵠΔ, ᐃΔ.ᐃⲆⲆⲆⵠᐃⵠ, ᐃΔ.ᐃⵠⵠⵠⵠⲆΔ, ᐃΔ.ΔΔᐃⵠᐃ, ᐃΔ.ⵠΔᐃⲆⵠⵠᐃ, ᐃΔ.ᐃⲆᐃⵠᐃⵠᐃ, ᐃΔ.ᐃⲆΔⵠᐃⲆΔ, ᐃΔ.ⲆⵠⲆⵠΔ, ᐃΔ.ΔᐃᐃⲆΔⵠΔ, ᐃΔ.ⲆⵠⵠΔΔⲆⲆ, ᐃΔ.ᐃΔᐃᐃΔ, ᐃΔ.ᐃⲆΔⵠⲆ, ᐃΔ.ⵠΔⵠⵠᐃᐃⵠ, ᐃΔ.ⵠⵠΔⲆⲆΔⵠ, ᐃΔ.ⲆΔⲆⲆⵠⲆⵠ, ᐃΔ.ⵠⲆⵠⲆᐃ, ᐃΔ.ΔⲆⲆΔⵠ, ᐃΔ.ⲆᐃⵠΔᐃ];
    Ⲇⵠ[1025][sh.ⲆⲆΔ][b("111_111_010")] = Ⲇⵠ[1025][sh.ⲆⲆΔ][b("111_111_110")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("000_010_000")] = [ᐃΔ.ⵠᐃⲆⲆᐃ, ᐃΔ.ΔⵠⵠΔΔ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("000_010_010")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("000_010_000")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("000_011_000")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("000_010_000")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("000_011_010")] = [ᐃΔ.ⲆΔᐃⲆΔ, ᐃΔ.ΔⲆⲆⵠⵠ, ᐃΔ.ΔⵠⵠΔΔ, ᐃΔ.ⵠᐃⲆⲆᐃ, ᐃΔ.ⲆΔΔΔᐃⵠⵠ, ᐃΔ.ᐃⲆΔΔΔⵠᐃ, ᐃΔ.ⵠΔᐃΔⵠⵠⵠ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("000_011_011")] = [ᐃΔ.ⵠΔⵠⲆᐃⵠΔ, ᐃΔ.ⲆΔᐃⲆΔ, ᐃΔ.ΔⲆⲆⵠⵠ, ᐃΔ.ΔⵠⵠΔΔ, ᐃΔ.ⵠᐃⲆⲆᐃ, ᐃΔ.ⲆΔΔΔᐃⵠⵠ, ᐃΔ.ᐃⲆΔΔΔⵠᐃ, ᐃΔ.ⵠΔᐃΔⵠⵠⵠ, ᐃΔ.ᐃⵠⵠⲆⵠ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("000_110_000")] = [ᐃΔ.ᐃΔⵠⵠⵠ, ᐃΔ.ΔⵠⵠΔΔ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("000_110_010")] = [ᐃΔ.ⵠⲆⲆⵠΔ, ᐃΔ.ᐃΔⵠⵠⵠ, ᐃΔ.ᐃΔᐃⵠⵠ, ᐃΔ.ΔⵠⵠΔΔ, ᐃΔ.ⵠᐃⲆⲆᐃ, ᐃΔ.ᐃⵠⵠⲆⵠ, ᐃΔ.ΔᐃⵠᐃⲆ, ᐃΔ.ⲆᐃΔⵠᐃⲆⲆ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("000_110_110")] = [ᐃΔ.ⵠⲆⲆⵠΔ, ᐃΔ.ⲆΔᐃⲆⵠⵠᐃ, ᐃΔ.ⲆⲆⲆⲆᐃⲆΔ, ᐃΔ.ᐃΔⵠⵠⵠ, ᐃΔ.ᐃΔᐃⵠⵠ, ᐃΔ.ΔⵠⵠΔΔ, ᐃΔ.ᐃⵠⵠⲆⵠ, ᐃΔ.ΔᐃⵠᐃⲆ, ᐃΔ.ⲆᐃΔⵠᐃⲆⲆ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("000_111_000")] = [ᐃΔ.ᐃΔⵠⵠⵠ, ᐃΔ.ᐃΔᐃⵠⵠ, ᐃΔ.ᐃΔΔΔΔⲆⲆ, ᐃΔ.ᐃⲆᐃᐃΔⲆⵠ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("000_111_111")] = [ᐃΔ.ᐃΔⵠⵠⵠ, ᐃΔ.ⲆⲆⲆⲆᐃⲆΔ, ᐃΔ.ⵠⲆⲆⵠΔ, ᐃΔ.ΔⲆⲆⵠⵠ, ᐃΔ.ⲆΔᐃⲆΔ, ᐃΔ.ⵠΔⵠⲆᐃⵠΔ, ᐃΔ.ⵠⵠⲆⲆⵠⲆᐃ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_010_000")] = [ᐃΔ.ΔⵠⵠΔΔ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_010_010")] = [ᐃΔ.ᐃᐃΔᐃΔΔᐃ, ᐃΔ.ΔⵠⵠΔΔ, ᐃΔ.ⵠᐃⲆⲆᐃ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_011_000")] = [ᐃΔ.ΔⲆⵠⵠⵠ, ᐃΔ.ΔⵠⵠΔΔ, ᐃΔ.ⵠᐃⲆⲆᐃ, ᐃΔ.ΔᐃⵠᐃⲆ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_110_000")] = [ᐃΔ.ᐃΔⵠⵠⵠ, ᐃΔ.ᐃΔᐃⵠⵠ, ᐃΔ.ΔⵠⵠΔΔ, ᐃΔ.ΔᐃⵠᐃⲆ, ᐃΔ.ⵠᐃᐃⵠᐃ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_110_110")] = [ᐃΔ.ⲆΔᐃᐃᐃ, ᐃΔ.ΔⲆⵠⵠⵠ, ᐃΔ.ⲆΔᐃⲆΔ, ᐃΔ.ΔⲆⲆⵠⵠ, ᐃΔ.ⵠⲆⲆⵠΔ, ᐃΔ.ⲆⲆⲆⲆᐃⲆΔ, ᐃΔ.ᐃΔⵠⵠⵠ, ᐃΔ.ⵠⵠⲆⲆⵠⲆᐃ, ᐃΔ.ΔⲆᐃⲆᐃⵠⲆ, ᐃΔ.ᐃᐃΔᐃΔΔᐃ, ᐃΔ.ᐃΔᐃⵠⵠ, ᐃΔ.ᐃΔΔΔΔⲆⲆ, ᐃΔ.ᐃⲆᐃᐃΔⲆⵠ, ᐃΔ.ΔⵠⵠΔΔ, ᐃΔ.ⵠᐃⲆⲆᐃ, ᐃΔ.ⲆΔΔΔᐃⵠⵠ, ᐃΔ.ᐃⲆΔΔΔⵠᐃ, ᐃΔ.ⵠΔᐃΔⵠⵠⵠ, ᐃΔ.ᐃⵠⵠⲆⵠ, ᐃΔ.ΔᐃⵠᐃⲆ, ᐃΔ.ⵠᐃᐃⵠᐃ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_011_010")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_011_011")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("000_111_011")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_110_010")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_111_000")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_111_010")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_111_011")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_111_110")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_111_111")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("000_111_110")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("000_111_010")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("010_110_110")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("011_011_000")] = [ᐃΔ.ⲆⵠⲆᐃⵠΔⵠ, ᐃΔ.ⲆΔᐃᐃᐃ, ᐃΔ.ΔⲆⵠⵠⵠ, ᐃΔ.ΔⵠⵠΔΔ, ᐃΔ.ⵠᐃⲆⲆᐃ, ᐃΔ.ΔᐃⵠᐃⲆ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("011_011_010")] = [ᐃΔ.ⲆⵠⲆᐃⵠΔⵠ, ᐃΔ.ⲆΔᐃᐃᐃ, ᐃΔ.ΔⲆⵠⵠⵠ, ᐃΔ.ᐃΔⵠⵠⵠ, ᐃΔ.ᐃΔᐃⵠⵠ, ᐃΔ.ᐃΔΔΔΔⲆⲆ, ᐃΔ.ᐃⲆᐃᐃΔⲆⵠ, ᐃΔ.ΔⵠⵠΔΔ, ᐃΔ.ⵠᐃⲆⲆᐃ, ᐃΔ.ΔᐃⵠᐃⲆ, ᐃΔ.ⵠᐃᐃⵠᐃ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("011_011_011")] = [ᐃΔ.ΔⲆⲆⵠⵠ, ᐃΔ.ⲆΔᐃⲆΔ, ᐃΔ.ⵠΔⵠⲆᐃⵠΔ, ᐃΔ.ΔⲆⵠⵠⵠ, ᐃΔ.ⲆΔᐃᐃᐃ, ᐃΔ.ⲆⵠⲆᐃⵠΔⵠ, ᐃΔ.ΔⲆᐃⲆᐃⵠⲆ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("011_111_000")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("011_011_010")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("011_111_010")] = [ᐃΔ.ⲆⵠⲆᐃⵠΔⵠ, ᐃΔ.ⲆΔᐃᐃᐃ, ᐃΔ.ΔⲆⵠⵠⵠ, ᐃΔ.ⲆΔᐃⲆΔ, ᐃΔ.ΔⲆⲆⵠⵠ, ᐃΔ.ⵠⲆⲆⵠΔ, ᐃΔ.ᐃΔⵠⵠⵠ, ᐃΔ.ⵠⵠⲆⲆⵠⲆᐃ, ᐃΔ.ΔⲆᐃⲆᐃⵠⲆ, ᐃΔ.ᐃᐃΔᐃΔΔᐃ, ᐃΔ.ᐃΔᐃⵠⵠ, ᐃΔ.ᐃΔΔΔΔⲆⲆ, ᐃΔ.ᐃⲆᐃᐃΔⲆⵠ, ᐃΔ.ΔⵠⵠΔΔ, ᐃΔ.ⵠᐃⲆⲆᐃ, ᐃΔ.ⲆΔΔΔᐃⵠⵠ, ᐃΔ.ᐃⲆΔΔΔⵠᐃ, ᐃΔ.ⵠΔᐃΔⵠⵠⵠ, ᐃΔ.ᐃⵠⵠⲆⵠ, ᐃΔ.ΔᐃⵠᐃⲆ, ᐃΔ.ⵠᐃᐃⵠᐃ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("011_111_011")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("011_111_010")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("011_111_110")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("011_111_010")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("011_111_111")] = [ᐃΔ.ⲆⵠⲆᐃⵠΔⵠ, ᐃΔ.ⲆΔᐃᐃᐃ, ᐃΔ.ΔⲆⵠⵠⵠ, ᐃΔ.ⵠΔⵠⲆᐃⵠΔ, ᐃΔ.ⲆΔᐃⲆΔ, ᐃΔ.ΔⲆⲆⵠⵠ, ᐃΔ.ⵠⲆⲆⵠΔ, ᐃΔ.ⲆⲆⲆⲆᐃⲆΔ, ᐃΔ.ᐃΔⵠⵠⵠ, ᐃΔ.ⵠⵠⲆⲆⵠⲆᐃ, ᐃΔ.ΔⲆᐃⲆᐃⵠⲆ, ᐃΔ.ᐃᐃΔᐃΔΔᐃ, ᐃΔ.ᐃΔᐃⵠⵠ, ᐃΔ.ᐃΔΔΔΔⲆⲆ, ᐃΔ.ᐃⲆᐃᐃΔⲆⵠ, ᐃΔ.ΔⵠⵠΔΔ, ᐃΔ.ⵠᐃⲆⲆᐃ, ᐃΔ.ⲆΔΔΔᐃⵠⵠ, ᐃΔ.ᐃⲆΔΔΔⵠᐃ, ᐃΔ.ⵠΔᐃΔⵠⵠⵠ, ᐃΔ.ᐃⵠⵠⲆⵠ, ᐃΔ.ΔᐃⵠᐃⲆ, ᐃΔ.ⵠᐃᐃⵠᐃ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("110_110_000")] = [ᐃΔ.ΔᐃᐃᐃⵠΔⵠ, ᐃΔ.ᐃΔⵠⵠⵠ, ᐃΔ.ⵠΔᐃⵠᐃⵠⵠ, ᐃΔ.ᐃΔᐃⵠⵠ, ᐃΔ.ΔⵠⵠΔΔ, ᐃΔ.ⵠᐃᐃⵠᐃ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("110_110_010")] = [ᐃΔ.ⵠⲆⲆⵠΔ, ᐃΔ.ΔᐃᐃᐃⵠΔⵠ, ᐃΔ.ᐃΔⵠⵠⵠ, ᐃΔ.ᐃᐃΔᐃΔΔᐃ, ᐃΔ.ᐃΔᐃⵠⵠ, ᐃΔ.ΔⵠⵠΔΔ, ᐃΔ.ᐃⵠⵠⲆⵠ, ᐃΔ.ⵠᐃᐃⵠᐃ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("110_110_110")] = [ᐃΔ.ⵠⲆⲆⵠΔ, ᐃΔ.ⲆⲆⲆⲆᐃⲆΔ, ᐃΔ.ΔᐃᐃᐃⵠΔⵠ, ᐃΔ.ᐃΔⵠⵠⵠ, ᐃΔ.ᐃᐃΔᐃΔΔᐃ, ᐃΔ.ᐃΔᐃⵠⵠ, ᐃΔ.ΔⵠⵠΔΔ, ᐃΔ.ᐃⵠⵠⲆⵠ, ᐃΔ.ⵠᐃᐃⵠᐃ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("110_111_000")] = [ᐃΔ.ⲆΔᐃᐃᐃ, ᐃΔ.ΔⲆⵠⵠⵠ, ᐃΔ.ΔᐃᐃᐃⵠΔⵠ, ᐃΔ.ᐃΔⵠⵠⵠ, ᐃΔ.ⵠΔᐃⵠᐃⵠⵠ, ᐃΔ.ΔΔΔΔⲆΔΔ, ᐃΔ.ᐃΔᐃⵠⵠ, ᐃΔ.ᐃΔΔΔΔⲆⲆ, ᐃΔ.ᐃⲆᐃᐃΔⲆⵠ, ᐃΔ.ΔⵠⵠΔΔ, ᐃΔ.ⵠᐃⲆⲆᐃ, ᐃΔ.ΔᐃⵠᐃⲆ, ᐃΔ.ⵠᐃᐃⵠᐃ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("110_111_110")] = [ᐃΔ.ⲆΔᐃᐃᐃ, ᐃΔ.ΔⲆⵠⵠⵠ, ᐃΔ.ⲆΔᐃⲆΔ, ᐃΔ.ΔⲆⲆⵠⵠ, ᐃΔ.ⵠⲆⲆⵠΔ, ᐃΔ.ⲆⲆⲆⲆᐃⲆΔ, ᐃΔ.ΔᐃᐃᐃⵠΔⵠ, ᐃΔ.ᐃΔⵠⵠⵠ, ᐃΔ.ⵠⵠⲆⲆⵠⲆᐃ, ᐃΔ.ΔΔΔΔⲆΔΔ, ᐃΔ.ΔⲆᐃⲆᐃⵠⲆ, ᐃΔ.ᐃᐃΔᐃΔΔᐃ, ᐃΔ.ᐃΔᐃⵠⵠ, ᐃΔ.ᐃΔΔΔΔⲆⲆ, ᐃΔ.ᐃⲆᐃᐃΔⲆⵠ, ᐃΔ.ΔⵠⵠΔΔ, ᐃΔ.ⵠᐃⲆⲆᐃ, ᐃΔ.ⲆΔΔΔᐃⵠⵠ, ᐃΔ.ᐃⲆΔΔΔⵠᐃ, ᐃΔ.ⵠΔᐃΔⵠⵠⵠ, ᐃΔ.ᐃⵠⵠⲆⵠ, ᐃΔ.ΔᐃⵠᐃⲆ, ᐃΔ.ⵠᐃᐃⵠᐃ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("110_111_111")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("110_111_110")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("110_111_011")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("110_111_110")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("110_111_010")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("110_111_110")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("111_111_110")] = [ᐃΔ.ⵠᐃᐃⵠᐃ, ᐃΔ.ΔᐃⵠᐃⲆ, ᐃΔ.ᐃⵠⵠⲆⵠ, ᐃΔ.ⵠΔᐃΔⵠⵠⵠ, ᐃΔ.ᐃⲆΔΔΔⵠᐃ, ᐃΔ.ⲆΔΔΔᐃⵠⵠ, ᐃΔ.ⵠᐃⲆⲆᐃ, ᐃΔ.ΔⵠⵠΔΔ, ᐃΔ.ᐃⲆᐃᐃΔⲆⵠ, ᐃΔ.ᐃΔΔΔΔⲆⲆ, ᐃΔ.ᐃΔᐃⵠⵠ, ᐃΔ.ᐃᐃΔᐃΔΔᐃ, ᐃΔ.ΔⲆᐃⲆᐃⵠⲆ, ᐃΔ.ΔΔΔΔⲆΔΔ, ᐃΔ.ⵠⵠⲆⲆⵠⲆᐃ, ᐃΔ.ᐃΔⵠⵠⵠ, ᐃΔ.ΔᐃᐃᐃⵠΔⵠ, ᐃΔ.ⵠⲆⲆⵠΔ, ᐃΔ.ΔⲆⲆⵠⵠ, ᐃΔ.ⲆΔᐃⲆΔ, ᐃΔ.ΔⲆⵠⵠⵠ, ᐃΔ.ⲆΔᐃᐃᐃ, ᐃΔ.ⲆⵠⲆᐃⵠΔⵠ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("111_111_011")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("111_111_110")];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("111_111_000")] = [ᐃΔ.ⵠΔᐃⵠᐃⵠⵠ, ᐃΔ.ᐃΔⵠⵠⵠ, ᐃΔ.ΔᐃᐃᐃⵠΔⵠ, ᐃΔ.ΔⲆⵠⵠⵠ, ᐃΔ.ⲆΔᐃᐃᐃ, ᐃΔ.ⲆⵠⲆᐃⵠΔⵠ, ᐃΔ.ΔΔΔΔⲆΔΔ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("111_111_111")] = [ᐃΔ.ⲆⵠⲆᐃⵠΔⵠ, ᐃΔ.ⲆΔᐃᐃᐃ, ᐃΔ.ΔⲆⵠⵠⵠ, ᐃΔ.ⵠΔⵠⲆᐃⵠΔ, ᐃΔ.ⲆΔᐃⲆΔ, ᐃΔ.ΔⲆⲆⵠⵠ, ᐃΔ.ⵠⲆⲆⵠΔ, ᐃΔ.ⲆⲆⲆⲆᐃⲆΔ, ᐃΔ.ΔᐃᐃᐃⵠΔⵠ, ᐃΔ.ᐃΔⵠⵠⵠ, ᐃΔ.ⵠⵠⲆⲆⵠⲆᐃ, ᐃΔ.ΔⲆᐃⲆᐃⵠⲆ, ᐃΔ.ᐃᐃΔᐃΔΔᐃ, ᐃΔ.ᐃΔᐃⵠⵠ, ᐃΔ.ᐃΔΔΔΔⲆⲆ, ᐃΔ.ᐃⲆᐃᐃΔⲆⵠ, ᐃΔ.ΔⵠⵠΔΔ, ᐃΔ.ⵠᐃⲆⲆᐃ, ᐃΔ.ⲆΔΔΔᐃⵠⵠ, ᐃΔ.ᐃⲆΔΔΔⵠᐃ, ᐃΔ.ⵠΔᐃΔⵠⵠⵠ, ᐃΔ.ᐃⵠⵠⲆⵠ, ᐃΔ.ΔᐃⵠᐃⲆ, ᐃΔ.ⵠᐃᐃⵠᐃ];
    Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("111_111_010")] = Ⲇⵠ[1025][sh.ⲆⵠⲆ][b("111_111_110")];
    Ⲇⵠ[1024] = [];
    Ⲇⵠ[1024][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("000_010_000")] = ᐃΔ.ⲆⵠⵠΔΔΔᐃ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("000_010_010")] = ᐃΔ.ⵠⲆᐃⵠᐃΔⲆ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("000_011_000")] = ᐃΔ.ⵠⲆΔΔⲆⲆⵠ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("000_011_010")] = ᐃΔ.ⲆΔⲆΔΔᐃⵠ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("000_011_011")] = ᐃΔ.ΔΔⲆᐃⵠΔΔ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("000_110_000")] = ᐃΔ.ⲆΔⲆⲆᐃⲆΔ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("000_110_010")] = ᐃΔ.ᐃΔⵠⵠⵠᐃΔ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("000_110_110")] = ᐃΔ.ⲆⵠᐃⲆᐃⵠⵠ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("000_111_000")] = ᐃΔ.ⲆⵠΔⵠⵠⵠⵠ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("000_111_010")] = ᐃΔ.ΔⲆᐃᐃⵠΔⵠ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("000_111_011")] = ᐃΔ.ΔᐃᐃᐃⵠᐃⲆ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("000_111_110")] = ᐃΔ.ⵠᐃᐃΔΔⵠⲆ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("000_111_111")] = ᐃΔ.ⲆⵠΔᐃΔⲆΔ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("010_010_000")] = ᐃΔ.ᐃⲆⵠᐃΔⵠΔ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("010_010_010")] = ᐃΔ.ᐃΔⵠᐃⵠᐃΔ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("010_011_000")] = ᐃΔ.ⲆⲆᐃΔⲆΔᐃ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("010_011_010")] = ᐃΔ.ⵠⲆᐃᐃⵠⵠⵠ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("010_011_011")] = ᐃΔ.ⲆᐃⵠⵠⵠⵠⲆ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("010_110_000")] = ᐃΔ.ⵠᐃΔⵠΔᐃᐃ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("010_110_010")] = ᐃΔ.ⵠⲆⵠᐃⵠΔⲆ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("010_110_110")] = ᐃΔ.ᐃⵠⵠᐃΔⲆΔ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("010_111_000")] = ᐃΔ.ᐃⵠΔΔᐃΔⲆ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("010_111_010")] = ᐃΔ.ⵠΔΔΔⲆΔᐃ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("010_111_011")] = ᐃΔ.ⲆⵠΔⲆΔᐃⲆ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("010_111_110")] = ᐃΔ.ΔᐃⵠⲆⵠⵠⲆ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("010_111_111")] = ᐃΔ.ⵠⵠᐃⲆᐃⵠΔ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("011_011_000")] = ᐃΔ.ⲆⲆⲆᐃⲆⲆΔ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("011_011_010")] = ᐃΔ.ΔⵠΔᐃΔⵠᐃ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("011_011_011")] = ᐃΔ.ᐃⲆⵠⵠⲆⵠᐃ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("011_111_000")] = ᐃΔ.ⵠᐃⵠⲆΔᐃᐃ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("011_111_010")] = ᐃΔ.ΔⲆᐃᐃⲆⵠⲆ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("011_111_011")] = ᐃΔ.ΔΔΔⲆΔᐃⵠ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("011_111_110")] = ᐃΔ.ⵠⲆⲆⲆᐃᐃΔ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("011_111_111")] = ᐃΔ.ᐃΔᐃⲆⵠⲆⵠ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("110_110_000")] = ᐃΔ.ⲆΔⲆⲆⲆᐃⲆ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("110_110_010")] = ᐃΔ.ᐃΔⵠⲆⵠᐃⲆ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("110_110_110")] = ᐃΔ.ⲆΔⲆⵠΔᐃΔ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("110_111_000")] = ᐃΔ.ⵠΔᐃᐃⲆⲆⲆ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("110_111_010")] = ᐃΔ.ⲆΔᐃᐃⵠᐃᐃ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("110_111_011")] = ᐃΔ.ΔⵠⲆⲆⲆΔΔ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("110_111_110")] = ᐃΔ.ⲆⵠⵠᐃΔⵠΔ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("110_111_111")] = ᐃΔ.ᐃΔᐃΔΔΔΔ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("111_111_011")] = ᐃΔ.ᐃΔⲆⵠᐃΔⵠ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("111_111_110")] = ᐃΔ.ΔᐃΔᐃⵠⵠᐃ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("111_111_011")] = ᐃΔ.ᐃΔⲆⵠᐃΔⵠ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("111_111_000")] = ᐃΔ.ⵠⵠΔⲆᐃⵠᐃ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("111_111_111")] = ᐃΔ.ⵠⵠⲆⵠⲆⵠⲆ;
    Ⲇⵠ[1024][sh.ⲆⲆΔ][b("111_111_010")] = ᐃΔ.ΔⵠΔⵠⵠΔⲆ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("000_010_000")] = ᐃΔ.ᐃᐃΔⲆᐃⵠᐃ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("000_010_010")] = ᐃΔ.ᐃⲆⲆᐃⵠΔᐃ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("000_011_000")] = ᐃΔ.ΔΔⲆΔⲆⲆΔ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("000_011_010")] = ᐃΔ.ⲆⵠⲆΔᐃⵠⲆ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("000_011_011")] = ᐃΔ.ᐃᐃⵠΔΔᐃΔ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("000_110_000")] = ᐃΔ.ΔⵠΔⲆΔΔⵠ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("000_110_010")] = ᐃΔ.ᐃᐃⲆⵠᐃΔⲆ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("000_110_110")] = ᐃΔ.ᐃᐃΔⲆᐃᐃᐃ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("000_111_000")] = ᐃΔ.ⲆᐃⲆⲆΔΔΔ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("000_111_010")] = ᐃΔ.ⲆΔⵠΔᐃᐃΔ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("000_111_011")] = ᐃΔ.ᐃⲆⵠⲆᐃⲆΔ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("000_111_110")] = ᐃΔ.ⵠⲆⵠᐃⲆⲆⵠ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("000_111_111")] = ᐃΔ.ⲆⲆᐃᐃⵠⲆⲆ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("010_010_000")] = ᐃΔ.ⵠⲆⵠᐃΔⲆΔ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("010_010_010")] = ᐃΔ.ΔⵠⵠⲆΔⲆΔ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("010_011_000")] = ᐃΔ.ΔⲆᐃᐃᐃΔᐃ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("010_011_010")] = ᐃΔ.ᐃΔᐃⵠⵠΔⵠ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("010_011_011")] = ᐃΔ.ΔⲆⲆᐃᐃᐃⲆ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("010_110_000")] = ᐃΔ.ΔⲆⲆΔⲆᐃᐃ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("010_110_010")] = ᐃΔ.ΔⵠⵠΔᐃᐃᐃ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("010_110_110")] = ᐃΔ.ΔᐃⵠⵠΔᐃΔ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("010_111_000")] = ᐃΔ.ΔᐃⵠᐃΔΔΔ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("010_111_010")] = ᐃΔ.ΔⵠⲆⲆΔᐃⲆ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("010_111_011")] = ᐃΔ.ⲆΔΔΔⵠᐃΔ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("010_111_110")] = ᐃΔ.ᐃⲆΔΔⵠⲆⲆ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("010_111_111")] = ᐃΔ.ⵠΔᐃᐃⲆΔᐃ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("011_011_000")] = ᐃΔ.ⲆⵠⲆⵠⲆⵠΔ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("011_011_010")] = ᐃΔ.ᐃⵠⲆᐃⵠⵠᐃ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("011_011_011")] = ᐃΔ.ᐃⵠⵠᐃΔΔⲆ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("011_111_000")] = ᐃΔ.ᐃⲆΔⵠΔⵠΔ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("011_111_010")] = ᐃΔ.ᐃᐃⲆΔᐃⲆᐃ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("011_111_011")] = ᐃΔ.ⲆᐃΔⵠⲆⵠΔ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("011_111_110")] = ᐃΔ.ⵠᐃΔΔΔΔⵠ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("011_111_111")] = ᐃΔ.ⲆΔⵠᐃΔⲆᐃ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("110_110_000")] = ᐃΔ.ⵠⲆⲆΔⲆᐃⵠ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("110_110_010")] = ᐃΔ.Ⲇⵠⵠⵠᐃⵠⵠ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("110_110_110")] = ᐃΔ.ⵠᐃⵠᐃΔⲆᐃ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("110_111_000")] = ᐃΔ.ᐃⵠᐃᐃΔΔⲆ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("110_111_010")] = ᐃΔ.ⲆⵠⲆᐃⵠΔᐃ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("110_111_011")] = ᐃΔ.ΔⲆⵠⵠⵠΔⵠ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("110_111_110")] = ᐃΔ.ⵠⲆΔᐃΔᐃⲆ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("110_111_111")] = ᐃΔ.ⵠᐃΔᐃᐃᐃⲆ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("111_111_011")] = ᐃΔ.ᐃⲆΔΔΔΔⵠ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("111_111_110")] = ᐃΔ.ΔⲆⲆⵠⵠⲆⵠ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("111_111_011")] = ᐃΔ.ᐃⲆΔΔΔΔⵠ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("111_111_000")] = ᐃΔ.ⵠΔᐃⲆⵠΔⵠ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("111_111_111")] = ᐃΔ.ⵠΔⵠΔΔⲆⲆ;
    Ⲇⵠ[1024][sh.ⲆⵠⲆ][b("111_111_010")] = ᐃΔ.ΔⲆⵠᐃⵠᐃⲆ;
    Ⲇⵠ[32] = [];
    Ⲇⵠ[32][sh.ⲆⲆΔ] = ᐃΔ.ΔᐃᐃⵠΔΔᐃ;
    Ⲇⵠ[32][sh.ⲆⵠⲆ] = ᐃΔ.ΔΔⵠⵠΔⵠΔ;
    Ⲇⵠ[205] = [];
    Ⲇⵠ[205][sh.ⲆⲆΔ] = ᐃΔ.ΔΔⵠᐃᐃⵠⲆ;
    Ⲇⵠ[205][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⵠⲆΔⲆⵠⵠ;
    Ⲇⵠ[957] = [];
    Ⲇⵠ[957][sh.ⲆⲆΔ] = ᐃΔ.ΔᐃΔⲆⵠΔᐃ;
    Ⲇⵠ[957][sh.ⲆⵠⲆ] = ᐃΔ.ⲆᐃΔΔΔᐃᐃ;
    Ⲇⵠ[207] = [];
    Ⲇⵠ[207][sh.ⲆⲆΔ] = ᐃΔ.ΔᐃᐃⵠⵠⲆΔ;
    Ⲇⵠ[207][sh.ⲆⵠⲆ] = ᐃΔ.ⵠᐃᐃⵠⵠⲆΔ;
    Ⲇⵠ[954] = [];
    Ⲇⵠ[954][sh.ⲆⲆΔ] = ᐃΔ.ᐃⵠΔᐃⲆΔⵠ;
    Ⲇⵠ[954][sh.ⲆⵠⲆ] = ᐃΔ.ΔΔΔᐃⲆᐃΔ;
    Ⲇⵠ[958] = [];
    Ⲇⵠ[958][sh.ⲆⲆΔ] = ᐃΔ.ΔᐃᐃᐃΔᐃⵠ;
    Ⲇⵠ[958][sh.ⲆⵠⲆ] = ᐃΔ.ⵠΔⵠⲆⲆᐃⲆ;
    Ⲇⵠ[209] = [];
    Ⲇⵠ[209][sh.ⲆⲆΔ] = ᐃΔ.ⵠΔⵠⲆᐃⲆΔ;
    Ⲇⵠ[209][sh.ⲆⵠⲆ] = ᐃΔ.ᐃⲆΔⲆΔⲆⲆ;
    Ⲇⵠ[971] = [];
    Ⲇⵠ[971][sh.ⲆⲆΔ] = ᐃΔ.ΔᐃⲆⵠⲆΔᐃ;
    Ⲇⵠ[971][sh.ⲆⵠⲆ] = ᐃΔ.ⲆⲆΔᐃⵠᐃⲆ;
    Ⲇⵠ[211] = [];
    Ⲇⵠ[211][sh.ⲆⲆΔ] = ᐃΔ.ᐃⲆΔΔⲆⲆΔ;
    Ⲇⵠ[211][sh.ⲆⵠⲆ] = ᐃΔ.ⲆΔⲆΔⲆⲆⵠ;
    Ⲇⵠ[986] = [];
    Ⲇⵠ[986][sh.ⲆⲆΔ] = ᐃΔ.ΔᐃⵠᐃⲆⵠᐃ;
    Ⲇⵠ[986][sh.ⲆⵠⲆ] = ᐃΔ.ⵠΔᐃᐃⲆⵠⵠ;
    Ⲇⵠ[989] = [];
    Ⲇⵠ[989][sh.ⲆⲆΔ] = [ᐃΔ.ⲆΔΔⵠᐃΔⲆ];
    Ⲇⵠ[989][sh.ⲆⵠⲆ] = [ᐃΔ.ΔᐃΔⵠⲆΔⲆ];
    Ⲇⵠ[217] = [];
    Ⲇⵠ[217][sh.ⲆⲆΔ] = ᐃΔ.ⵠⲆⲆⲆⵠᐃⲆ;
    Ⲇⵠ[217][sh.ⲆⵠⲆ] = ᐃΔ.ΔΔⵠᐃⵠΔⵠ;
    Ⲇⵠ[219] = [];
    Ⲇⵠ[219][sh.ⲆⲆΔ] = ᐃΔ.ⲆΔΔΔⵠⵠᐃ;
    Ⲇⵠ[219][sh.ⲆⵠⲆ] = ᐃΔ.ⲆⵠⲆΔⲆᐃΔ;
    Ⲇⵠ[218] = [];
    Ⲇⵠ[218][sh.ⲆⲆΔ] = ᐃΔ.ΔⲆᐃΔΔⵠⲆ;
    Ⲇⵠ[218][sh.ⲆⵠⲆ] = ᐃΔ.ⲆᐃᐃΔⵠᐃᐃ;
    Ⲇⵠ[212] = [];
    Ⲇⵠ[212][sh.ⲆⲆΔ] = ᐃΔ.ⵠᐃᐃⵠⲆΔΔ;
    Ⲇⵠ[212][sh.ⲆⵠⲆ] = ᐃΔ.ᐃᐃⵠⵠᐃΔᐃ;
    Ⲇⵠ[213] = [];
    Ⲇⵠ[213][sh.ⲆⲆΔ] = ᐃΔ.ⲆΔᐃΔⲆᐃᐃ;
    Ⲇⵠ[213][sh.ⲆⵠⲆ] = ᐃΔ.ⵠΔⵠⲆᐃⲆⵠ;
    Ⲇⵠ[214] = [];
    Ⲇⵠ[214][sh.ⲆⲆΔ] = ᐃΔ.ᐃᐃΔⵠΔᐃⲆ;
    Ⲇⵠ[214][sh.ⲆⵠⲆ] = ᐃΔ.ΔΔⲆⵠΔΔΔ;
    Ⲇⵠ[215] = [];
    Ⲇⵠ[215][sh.ⲆⲆΔ] = ᐃΔ.ΔⵠΔᐃΔⲆᐃ;
    Ⲇⵠ[215][sh.ⲆⵠⲆ] = ᐃΔ.ᐃⲆⲆΔΔᐃᐃ;
    Ⲇⵠ[216] = [];
    Ⲇⵠ[216][sh.ⲆⲆΔ] = ᐃΔ.ᐃⵠᐃⵠⵠᐃΔ;
    Ⲇⵠ[216][sh.ⲆⵠⲆ] = ᐃΔ.ⲆΔᐃΔΔⲆᐃ;
    Ⲇⵠ[220] = [];
    Ⲇⵠ[220][sh.ⲆⲆΔ] = ᐃΔ.ᐃⲆΔⲆⵠⲆᐃ;
    Ⲇⵠ[220][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⵠΔΔⵠΔⲆ;
    Ⲇⵠ[1020] = [];
    Ⲇⵠ[1020][sh.ⲆⲆΔ] = ᐃΔ.ⵠᐃⵠΔⲆⵠΔ;
    Ⲇⵠ[1020][sh.ⲆⵠⲆ] = ᐃΔ.ᐃᐃⲆΔⵠⵠᐃ;
    Ⲇⵠ[1021] = [];
    Ⲇⵠ[1021][sh.ⲆⲆΔ] = ᐃΔ.ⵠⲆΔⵠΔᐃⲆ;
    Ⲇⵠ[1021][sh.ⲆⵠⲆ] = ᐃΔ.ΔΔᐃᐃⵠΔⲆ;
    Ⲇⵠ[39] = [];
    Ⲇⵠ[39][sh.ⲆⲆΔ] = ᐃΔ.ⵠᐃΔⲆⵠⵠⲆ;
    Ⲇⵠ[39][sh.ⲆⵠⲆ] = ᐃΔ.ᐃΔⲆⵠⲆᐃⲆ;
    Ⲇⵠ[1022] = ᐃΔ.ΔⵠⲆᐃⵠⲆᐃ;
    Ⲇⵠ[1023] = ᐃΔ.ΔᐃⲆΔΔΔᐃ;
    Ⲇⵠ[1041] = [];
    Ⲇⵠ[1041][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[1041][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[1041][sh.ⲆⲆΔ].push(ᐃΔ.ΔᐃᐃⲆΔⲆⵠ);
    Ⲇⵠ[1041][sh.ⲆⲆΔ].push(ᐃΔ.ⲆΔᐃⲆΔΔᐃ);
    Ⲇⵠ[1041][sh.ⲆⲆΔ].push(ᐃΔ.ΔᐃⵠᐃⲆⲆⵠ);
    Ⲇⵠ[1041][sh.ⲆⵠⲆ].push(ᐃΔ.ΔⲆⲆⲆⲆᐃΔ);
    Ⲇⵠ[1041][sh.ⲆⵠⲆ].push(ᐃΔ.ᐃΔᐃⵠⵠⵠᐃ);
    Ⲇⵠ[1041][sh.ⲆⵠⲆ].push(ᐃΔ.ⵠΔⲆⵠⲆᐃᐃ);
    Ⲇⵠ[244] = [];
    Ⲇⵠ[244][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[244][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[244][sh.ⲆⲆΔ].push(ᐃΔ.ⲆⵠⵠΔⵠᐃⲆ);
    Ⲇⵠ[244][sh.ⲆⲆΔ].push(ᐃΔ.ⵠΔⲆᐃⵠΔᐃ);
    Ⲇⵠ[244][sh.ⲆⲆΔ].push(ᐃΔ.ᐃΔᐃⲆⲆⵠᐃ);
    Ⲇⵠ[244][sh.ⲆⵠⲆ].push(ᐃΔ.ⲆⵠⵠᐃΔᐃⵠ);
    Ⲇⵠ[244][sh.ⲆⵠⲆ].push(ᐃΔ.ⵠⵠΔⵠΔⵠⲆ);
    Ⲇⵠ[244][sh.ⲆⵠⲆ].push(ᐃΔ.ⲆΔⵠⲆΔⵠⲆ);
    Ⲇⵠ[1052] = [];
    Ⲇⵠ[1052][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[1052][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[1052][sh.ⲆⲆΔ].push(ᐃΔ.ᐃΔΔⵠᐃᐃΔ);
    Ⲇⵠ[1052][sh.ⲆⲆΔ].push(ᐃΔ.ⲆΔᐃΔⵠΔΔ);
    Ⲇⵠ[1052][sh.ⲆⲆΔ].push(ᐃΔ.ⲆΔΔⵠⲆⵠΔ);
    Ⲇⵠ[1052][sh.ⲆⲆΔ].push(ᐃΔ.ΔⵠΔⵠⵠⵠᐃ);
    Ⲇⵠ[1052][sh.ⲆⲆΔ].push(ᐃΔ.ᐃⲆΔⲆᐃΔⲆ);
    Ⲇⵠ[1052][sh.ⲆⵠⲆ].push(ᐃΔ.ⲆΔⲆⵠΔⵠΔ);
    Ⲇⵠ[1052][sh.ⲆⵠⲆ].push(ᐃΔ.ΔⲆⵠᐃⲆⵠᐃ);
    Ⲇⵠ[1052][sh.ⲆⵠⲆ].push(ᐃΔ.ⲆΔⲆΔⲆΔΔ);
    Ⲇⵠ[1052][sh.ⲆⵠⲆ].push(ᐃΔ.ⵠⵠΔⵠᐃΔΔ);
    Ⲇⵠ[1052][sh.ⲆⵠⲆ].push(ᐃΔ.ᐃⵠΔⵠⵠⲆⵠ);
    Ⲇⵠ[450] = [];
    Ⲇⵠ[450][sh.ⲆⲆΔ] = ᐃΔ.ΔⲆⵠᐃᐃⵠᐃ;
    Ⲇⵠ[450][sh.ⲆⵠⲆ] = ᐃΔ.ⲆⵠΔᐃⲆⲆⲆ;
    Ⲇⵠ[453] = [];
    Ⲇⵠ[453][sh.ⲆⲆΔ] = ᐃΔ.ΔⵠⲆⲆΔΔᐃ;
    Ⲇⵠ[453][sh.ⲆⵠⲆ] = ᐃΔ.ⵠΔⵠⲆⵠⵠⵠ;
    Ⲇⵠ[454] = [];
    Ⲇⵠ[454][sh.ⲆⲆΔ] = ᐃΔ.ⵠΔⲆⲆⲆᐃⵠ;
    Ⲇⵠ[454][sh.ⲆⵠⲆ] = ᐃΔ.ⲆᐃΔΔΔᐃⲆ;
    Ⲇⵠ[464] = ᐃΔ.ⲆΔᐃⲆⲆⲆⲆ;
    Ⲇⵠ[468] = ᐃΔ.ΔⵠᐃⲆⵠᐃⲆ;
    Ⲇⵠ[469] = ᐃΔ.ⵠᐃᐃᐃᐃⵠᐃ;
    Ⲇⵠ[20] = [];
    Ⲇⵠ[20][sh.ⲆⲆΔ] = ᐃΔ.ᐃᐃⵠᐃΔⲆᐃ;
    Ⲇⵠ[20][sh.ⲆⵠⲆ] = ᐃΔ.ᐃᐃᐃΔᐃΔⵠ;
    Ⲇⵠ[920] = [];
    Ⲇⵠ[920][sh.ⲆⲆΔ] = ᐃΔ.ΔᐃⲆΔΔΔⵠ;
    Ⲇⵠ[920][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⲆⲆⵠᐃᐃⲆ;
    Ⲇⵠ[21] = [];
    Ⲇⵠ[21][sh.ⲆⲆΔ] = ᐃΔ.ⵠⲆᐃⵠᐃⲆⲆ;
    Ⲇⵠ[21][sh.ⲆⵠⲆ] = ᐃΔ.ΔⲆΔⵠⲆᐃⲆ;
    Ⲇⵠ[924] = [];
    Ⲇⵠ[924][sh.ⲆⲆΔ] = ᐃΔ.ΔᐃⲆΔΔΔⵠ;
    Ⲇⵠ[924][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⲆⲆⵠᐃᐃⲆ;
    Ⲇⵠ[44] = [];
    Ⲇⵠ[44][sh.ⲆⲆΔ] = ᐃΔ.ᐃΔᐃⵠⲆᐃⵠ;
    Ⲇⵠ[44][sh.ⲆⵠⲆ] = ᐃΔ.ΔΔΔⵠⵠⵠⵠ;
    Ⲇⵠ[19] = [];
    Ⲇⵠ[19][sh.ⲆⲆΔ] = ᐃΔ.ᐃⲆᐃⲆᐃⵠⵠ;
    Ⲇⵠ[19][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⲆⲆᐃⲆⲆΔ;
    Ⲇⵠ[34] = [];
    Ⲇⵠ[34][sh.ⲆⲆΔ] = ᐃΔ.ⵠΔᐃⲆⵠⲆⵠ;
    Ⲇⵠ[34][sh.ⲆⵠⲆ] = ᐃΔ.ΔⲆⲆⵠⵠΔᐃ;
    Ⲇⵠ[17] = [];
    Ⲇⵠ[17][sh.ⲆⲆΔ] = ᐃΔ.ⵠΔⲆⵠⲆΔᐃ;
    Ⲇⵠ[17][sh.ⲆⵠⲆ] = ᐃΔ.ΔⲆΔᐃⵠⲆⵠ;
    Ⲇⵠ[63] = [];
    Ⲇⵠ[63][sh.ⲆⲆΔ] = ᐃΔ.ᐃⲆⲆⲆᐃⵠⵠ;
    Ⲇⵠ[63][sh.ⲆⵠⲆ] = ᐃΔ.ⲆⵠⵠΔⲆⲆΔ;
    Ⲇⵠ[60] = [];
    Ⲇⵠ[60][sh.ⲆⲆΔ] = ᐃΔ.ⵠⲆⵠⲆⲆⲆⲆ;
    Ⲇⵠ[60][sh.ⲆⵠⲆ] = ᐃΔ.ΔᐃⲆΔΔᐃΔ;
    Ⲇⵠ[94] = [];
    Ⲇⵠ[94][sh.ⲆⲆΔ] = ᐃΔ.ⵠⵠⲆⲆΔⵠⵠᐃⵠ;
    Ⲇⵠ[94][sh.ⲆⵠⲆ] = ᐃΔ.ⲆⵠⵠᐃΔⲆΔᐃⲆ;
    Ⲇⵠ[95] = [];
    Ⲇⵠ[95][sh.ⲆⲆΔ] = ᐃΔ.ᐃⵠⵠⲆⲆΔΔᐃⵠ;
    Ⲇⵠ[95][sh.ⲆⵠⲆ] = ᐃΔ.ᐃⵠΔᐃⵠᐃⵠⵠᐃ;
    Ⲇⵠ[96] = [];
    Ⲇⵠ[96][sh.ⲆⲆΔ] = ᐃΔ.ᐃⵠᐃⵠΔᐃⲆⲆⲆ;
    Ⲇⵠ[96][sh.ⲆⵠⲆ] = ᐃΔ.ⵠΔᐃⲆⲆΔᐃᐃⲆ;
    Ⲇⵠ[97] = [];
    Ⲇⵠ[97][sh.ⲆⲆΔ] = ᐃΔ.ΔⲆⵠᐃᐃΔⲆⲆⵠ;
    Ⲇⵠ[97][sh.ⲆⵠⲆ] = ᐃΔ.ᐃⲆΔΔᐃⲆᐃⵠⵠ;
    Ⲇⵠ[98] = [];
    Ⲇⵠ[98][sh.ⲆⲆΔ] = ᐃΔ.ΔΔΔⵠᐃⵠⲆⲆᐃ;
    Ⲇⵠ[98][sh.ⲆⵠⲆ] = ᐃΔ.ΔᐃΔⵠⵠΔⲆᐃⲆ;
    Ⲇⵠ[99] = [];
    Ⲇⵠ[99][sh.ⲆⲆΔ] = ᐃΔ.ᐃⲆⵠⲆᐃᐃⲆΔᐃ;
    Ⲇⵠ[99][sh.ⲆⵠⲆ] = ᐃΔ.ΔΔⵠΔᐃᐃⵠᐃⵠ;
    Ⲇⵠ[90] = [];
    Ⲇⵠ[90][sh.ⲆⲆΔ] = ᐃΔ.ⲆⲆⲆⲆⵠⲆΔ;
    Ⲇⵠ[90][sh.ⲆⵠⲆ] = ᐃΔ.ᐃⲆⲆΔⲆⲆⲆ;
    Ⲇⵠ[91] = [];
    Ⲇⵠ[91][sh.ⲆⲆΔ] = ᐃΔ.ⲆᐃⵠⲆⲆⲆΔ;
    Ⲇⵠ[91][sh.ⲆⵠⲆ] = ᐃΔ.ΔⲆⵠᐃΔᐃⲆ;
    Ⲇⵠ[71] = [];
    Ⲇⵠ[71][sh.ⲆⲆΔ] = ᐃΔ.ᐃᐃⵠᐃᐃⵠᐃⵠΔ;
    Ⲇⵠ[71][sh.ⲆⵠⲆ] = ᐃΔ.ΔⲆΔⵠⵠᐃⲆΔΔ;
    Ⲇⵠ[72] = [];
    Ⲇⵠ[72][sh.ⲆⲆΔ] = ᐃΔ.ΔΔⲆᐃΔΔⵠⲆᐃ;
    Ⲇⵠ[72][sh.ⲆⵠⲆ] = ᐃΔ.ⲆᐃᐃⵠⵠΔⲆᐃᐃ;
    Ⲇⵠ[73] = [];
    Ⲇⵠ[73][sh.ⲆⲆΔ] = ᐃΔ.ⲆᐃΔⲆΔΔⲆᐃⵠ;
    Ⲇⵠ[73][sh.ⲆⵠⲆ] = ᐃΔ.ᐃⲆⵠⲆΔⵠΔΔⵠ;
    Ⲇⵠ[74] = [];
    Ⲇⵠ[74][sh.ⲆⲆΔ] = ᐃΔ.ⲆᐃⲆΔᐃⲆⲆΔᐃ;
    Ⲇⵠ[74][sh.ⲆⵠⲆ] = ᐃΔ.ΔᐃᐃᐃⵠᐃⵠⲆΔ;
    Ⲇⵠ[75] = [];
    Ⲇⵠ[75][sh.ⲆⲆΔ] = ᐃΔ.ΔᐃΔⲆⵠΔⲆΔᐃ;
    Ⲇⵠ[75][sh.ⲆⵠⲆ] = ᐃΔ.ⲆⵠᐃⲆΔⵠⲆⲆΔ;
    Ⲇⵠ[76] = [];
    Ⲇⵠ[76][sh.ⲆⲆΔ] = ᐃΔ.ⵠᐃⵠⵠⲆᐃᐃⲆⵠ;
    Ⲇⵠ[76][sh.ⲆⵠⲆ] = ᐃΔ.ΔΔᐃⵠΔⵠⵠⵠΔ;
    Ⲇⵠ[101] = [];
    Ⲇⵠ[101][sh.ⲆⲆΔ] = ᐃΔ.ⲆⵠⲆᐃⵠΔⲆ;
    Ⲇⵠ[101][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⲆᐃⲆΔΔᐃ;
    Ⲇⵠ[64] = [];
    Ⲇⵠ[64][sh.ⲆⲆΔ] = ᐃΔ.ⲆᐃΔΔΔᐃΔⲆⲆ;
    Ⲇⵠ[64][sh.ⲆⵠⲆ] = ᐃΔ.ⲆᐃᐃⵠⵠⲆᐃⲆⲆ;
    Ⲇⵠ[102] = [];
    Ⲇⵠ[102][sh.ⲆⲆΔ] = ᐃΔ.ΔⲆᐃⲆᐃᐃⲆ;
    Ⲇⵠ[102][sh.ⲆⵠⲆ] = ᐃΔ.ⵠΔⲆᐃⵠⵠΔ;
    Ⲇⵠ[65] = [];
    Ⲇⵠ[65][sh.ⲆⲆΔ] = ᐃΔ.ⵠᐃⲆⵠᐃΔⲆᐃΔ;
    Ⲇⵠ[65][sh.ⲆⵠⲆ] = ᐃΔ.ᐃΔⲆΔⵠΔⲆᐃⵠ;
    Ⲇⵠ[103] = [];
    Ⲇⵠ[103][sh.ⲆⲆΔ] = ᐃΔ.ΔⵠΔΔⵠⲆⵠ;
    Ⲇⵠ[103][sh.ⲆⵠⲆ] = ᐃΔ.ᐃⲆᐃᐃⲆⲆᐃ;
    Ⲇⵠ[66] = [];
    Ⲇⵠ[66][sh.ⲆⲆΔ] = ᐃΔ.ᐃⵠⲆΔⲆⲆⲆΔⲆ;
    Ⲇⵠ[66][sh.ⲆⵠⲆ] = ᐃΔ.ⲆⲆΔΔⵠΔᐃⵠᐃ;
    Ⲇⵠ[104] = [];
    Ⲇⵠ[104][sh.ⲆⲆΔ] = ᐃΔ.ΔⵠΔΔⵠⵠᐃ;
    Ⲇⵠ[104][sh.ⲆⵠⲆ] = ᐃΔ.ΔⵠᐃᐃⵠΔᐃ;
    Ⲇⵠ[67] = [];
    Ⲇⵠ[67][sh.ⲆⲆΔ] = ᐃΔ.ⵠΔΔⲆⲆⵠⵠᐃᐃ;
    Ⲇⵠ[67][sh.ⲆⵠⲆ] = ᐃΔ.ⲆΔⲆᐃᐃⲆᐃΔⵠ;
    Ⲇⵠ[105] = [];
    Ⲇⵠ[105][sh.ⲆⲆΔ] = ᐃΔ.ⵠⵠΔᐃΔⲆⲆ;
    Ⲇⵠ[105][sh.ⲆⵠⲆ] = ᐃΔ.ⲆⵠⲆⵠᐃᐃᐃ;
    Ⲇⵠ[68] = [];
    Ⲇⵠ[68][sh.ⲆⲆΔ] = ᐃΔ.ΔΔΔᐃΔⵠΔᐃⵠ;
    Ⲇⵠ[68][sh.ⲆⵠⲆ] = ᐃΔ.ΔΔᐃᐃᐃᐃⲆⲆⲆ;
    Ⲇⵠ[106] = [];
    Ⲇⵠ[106][sh.ⲆⲆΔ] = ᐃΔ.ΔⲆΔᐃⵠⲆΔ;
    Ⲇⵠ[106][sh.ⲆⵠⲆ] = ᐃΔ.ᐃΔᐃⵠΔΔⲆΔᐃ;
    Ⲇⵠ[69] = [];
    Ⲇⵠ[69][sh.ⲆⲆΔ] = ᐃΔ.ⵠᐃⵠᐃᐃᐃΔⵠⲆ;
    Ⲇⵠ[69][sh.ⲆⵠⲆ] = ᐃΔ.ᐃⲆᐃΔΔᐃᐃⲆⵠ;
    Ⲇⵠ[107] = [];
    Ⲇⵠ[107][sh.ⲆⲆΔ] = ᐃΔ.ⲆⵠⲆᐃᐃΔⵠ;
    Ⲇⵠ[107][sh.ⲆⵠⲆ] = ᐃΔ.ⲆᐃⵠⲆᐃⵠⵠ;
    Ⲇⵠ[70] = [];
    Ⲇⵠ[70][sh.ⲆⲆΔ] = ᐃΔ.ⵠᐃᐃⲆΔΔᐃⲆΔ;
    Ⲇⵠ[70][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⲆⲆΔΔⲆΔⵠΔ;
    Ⲇⵠ[80] = [];
    Ⲇⵠ[80][sh.ⲆⲆΔ] = ᐃΔ.ⲆᐃᐃⲆΔⵠⵠ;
    Ⲇⵠ[80][sh.ⲆⵠⲆ] = ᐃΔ.ᐃⵠⵠⵠⵠⵠᐃ;
    Ⲇⵠ[81] = [];
    Ⲇⵠ[81][sh.ⲆⲆΔ] = ᐃΔ.ⲆⲆᐃΔⵠΔⲆ;
    Ⲇⵠ[81][sh.ⲆⵠⲆ] = ᐃΔ.ⲆΔⲆⲆⵠⲆᐃ;
    Ⲇⵠ[22] = [];
    Ⲇⵠ[22][sh.ⲆⲆΔ] = ᐃΔ.ⵠⲆⲆΔⵠᐃᐃ;
    Ⲇⵠ[22][sh.ⲆⵠⲆ] = ᐃΔ.ΔΔⵠⲆⲆⵠᐃ;
    Ⲇⵠ[928] = [];
    Ⲇⵠ[928][sh.ⲆⲆΔ] = ᐃΔ.ΔΔΔΔᐃΔⵠ;
    Ⲇⵠ[928][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⵠᐃⲆⵠⵠᐃ;
    Ⲇⵠ[935] = [];
    Ⲇⵠ[935][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[935][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[935][sh.ⲆⲆΔ].push(ᐃΔ.ⲆᐃΔⲆᐃⲆΔⲆⲆ);
    Ⲇⵠ[935][sh.ⲆⲆΔ].push(ᐃΔ.ΔΔⲆⲆΔᐃᐃΔΔ);
    Ⲇⵠ[935][sh.ⲆⵠⲆ].push(ᐃΔ.ΔΔⲆⲆΔᐃᐃΔΔ);
    Ⲇⵠ[935][sh.ⲆⵠⲆ].push(ᐃΔ.ⲆΔⵠᐃᐃΔᐃΔⵠ);
    Ⲇⵠ[941] = [];
    Ⲇⵠ[941][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[941][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[941][sh.ⲆⲆΔ].push(ᐃΔ.ΔⵠⲆⲆⵠⵠⲆ);
    Ⲇⵠ[941][sh.ⲆⲆΔ].push(ᐃΔ.ΔΔⵠⵠⵠⲆⵠ);
    Ⲇⵠ[941][sh.ⲆⲆΔ].push(ᐃΔ.Δⵠᐃᐃⵠⵠⵠ);
    Ⲇⵠ[941][sh.ⲆⵠⲆ].push(ᐃΔ.Ⲇᐃᐃⵠᐃᐃᐃ);
    Ⲇⵠ[941][sh.ⲆⵠⲆ].push(ᐃΔ.ⲆΔⲆⲆⵠΔⲆ);
    Ⲇⵠ[941][sh.ⲆⵠⲆ].push(ᐃΔ.ΔⵠⵠΔᐃⲆⲆ);
    Ⲇⵠ[53] = [];
    Ⲇⵠ[53][sh.ⲆⲆΔ] = ᐃΔ.ΔᐃⲆⵠᐃᐃΔ;
    Ⲇⵠ[53][sh.ⲆⵠⲆ] = ᐃΔ.ᐃᐃⵠᐃᐃⵠⲆ;
    Ⲇⵠ[54] = [];
    Ⲇⵠ[54][sh.ⲆⲆΔ] = ᐃΔ.ᐃᐃⲆΔⲆΔΔ;
    Ⲇⵠ[54][sh.ⲆⵠⲆ] = ᐃΔ.ΔᐃⲆⵠⵠΔⲆ;
    Ⲇⵠ[241] = [];
    Ⲇⵠ[241][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[241][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[241][sh.ⲆⲆΔ].push(ᐃΔ.ⵠΔΔⵠᐃΔⲆ);
    Ⲇⵠ[241][sh.ⲆⲆΔ].push(ᐃΔ.ⲆⲆᐃⵠⵠⲆᐃ);
    Ⲇⵠ[241][sh.ⲆⲆΔ].push(ᐃΔ.ᐃΔΔⵠⲆᐃΔ);
    Ⲇⵠ[241][sh.ⲆⵠⲆ].push(ᐃΔ.ⲆⵠᐃⵠΔⵠⲆ);
    Ⲇⵠ[241][sh.ⲆⵠⲆ].push(ᐃΔ.ᐃⲆᐃᐃΔⲆΔ);
    Ⲇⵠ[241][sh.ⲆⵠⲆ].push(ᐃΔ.ᐃΔᐃΔⲆⲆⲆ);
    Ⲇⵠ[202] = [];
    Ⲇⵠ[202][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[202][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[202][sh.ⲆⲆΔ].push(ᐃΔ.ⲆᐃⲆᐃⵠⲆᐃ);
    Ⲇⵠ[202][sh.ⲆⲆΔ].push(ᐃΔ.ⲆΔᐃᐃΔⵠⵠ);
    Ⲇⵠ[202][sh.ⲆⲆΔ].push(ᐃΔ.ΔᐃⲆⲆⵠⵠⲆ);
    Ⲇⵠ[202][sh.ⲆⵠⲆ].push(ᐃΔ.ⵠⲆⵠⵠⲆⵠⵠ);
    Ⲇⵠ[202][sh.ⲆⵠⲆ].push(ᐃΔ.ⵠΔⲆⵠᐃⵠⵠ);
    Ⲇⵠ[202][sh.ⲆⵠⲆ].push(ᐃΔ.ᐃΔⲆⵠᐃΔΔ);
    Ⲇⵠ[203] = [];
    Ⲇⵠ[203][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[203][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[203][sh.ⲆⲆΔ].push(ᐃΔ.ⵠⲆΔⵠΔᐃⵠ);
    Ⲇⵠ[203][sh.ⲆⲆΔ].push(ᐃΔ.ΔⲆⲆⲆⲆⵠⵠ);
    Ⲇⵠ[203][sh.ⲆⲆΔ].push(ᐃΔ.ⲆⵠⲆⵠⵠᐃΔ);
    Ⲇⵠ[203][sh.ⲆⲆΔ].push(ᐃΔ.ᐃΔⲆΔΔⲆⵠ);
    Ⲇⵠ[203][sh.ⲆⲆΔ].push(ᐃΔ.ⲆⵠⵠⲆⲆᐃⵠ);
    Ⲇⵠ[203][sh.ⲆⲆΔ].push(ᐃΔ.ᐃⲆⵠⲆᐃⵠⲆ);
    Ⲇⵠ[203][sh.ⲆⵠⲆ].push(ᐃΔ.ᐃᐃᐃⲆⵠᐃⵠ);
    Ⲇⵠ[203][sh.ⲆⵠⲆ].push(ᐃΔ.ⲆΔΔΔᐃΔᐃ);
    Ⲇⵠ[203][sh.ⲆⵠⲆ].push(ᐃΔ.ⲆᐃΔᐃⵠⲆΔ);
    Ⲇⵠ[203][sh.ⲆⵠⲆ].push(ᐃΔ.ᐃΔⲆⲆⲆΔⵠ);
    Ⲇⵠ[203][sh.ⲆⵠⲆ].push(ᐃΔ.ᐃⵠⵠΔᐃⲆⲆ);
    Ⲇⵠ[203][sh.ⲆⵠⲆ].push(ᐃΔ.ΔⲆⵠⵠᐃΔⲆ);
    Ⲇⵠ[sh.ⲆⲆⲆⲆΔ] = [];
    Ⲇⵠ[sh.ⲆⲆⲆⲆΔ][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[sh.ⲆⲆⲆⲆΔ][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[sh.ⲆⲆⲆⲆΔ][sh.ⲆⲆΔ].push(ᐃΔ.ᐃⵠⵠⵠⲆⲆⵠ);
    Ⲇⵠ[sh.ⲆⲆⲆⲆΔ][sh.ⲆⲆΔ].push(ᐃΔ.ᐃⵠⵠⵠⲆⵠᐃ);
    Ⲇⵠ[sh.ⲆⲆⲆⲆΔ][sh.ⲆⲆΔ].push(ᐃΔ.ΔᐃⲆΔᐃⲆΔ);
    Ⲇⵠ[sh.ⲆⲆⲆⲆΔ][sh.ⲆⲆΔ].push(ᐃΔ.ⲆⵠΔΔⵠⲆⲆ);
    Ⲇⵠ[sh.ⲆⲆⲆⲆΔ][sh.ⲆⲆΔ].push(ᐃΔ.ⵠⵠⲆⲆⵠΔⲆ);
    Ⲇⵠ[sh.ⲆⲆⲆⲆΔ][sh.ⲆⲆΔ].push(ᐃΔ.ΔⵠⲆⲆΔᐃΔ);
    Ⲇⵠ[sh.ⲆⲆⲆⲆΔ][sh.ⲆⵠⲆ].push(ᐃΔ.ᐃᐃⵠⵠⲆᐃΔ);
    Ⲇⵠ[sh.ⲆⲆⲆⲆΔ][sh.ⲆⵠⲆ].push(ᐃΔ.ⲆᐃⲆᐃⵠΔᐃ);
    Ⲇⵠ[sh.ⲆⲆⲆⲆΔ][sh.ⲆⵠⲆ].push(ᐃΔ.ⲆⵠᐃΔⵠⵠΔ);
    Ⲇⵠ[sh.ⲆⲆⲆⲆΔ][sh.ⲆⵠⲆ].push(ᐃΔ.ⲆⵠΔΔⲆΔⲆ);
    Ⲇⵠ[sh.ⲆⲆⲆⲆΔ][sh.ⲆⵠⲆ].push(ᐃΔ.ΔⵠΔΔⵠⵠⲆ);
    Ⲇⵠ[sh.ⲆⲆⲆⲆΔ][sh.ⲆⵠⲆ].push(ᐃΔ.ΔΔⲆΔΔΔⲆ);
    Ⲇⵠ[918] = [];
    Ⲇⵠ[918][sh.ⲆⲆΔ] = ᐃΔ.ⵠΔⵠⲆᐃⵠⵠ;
    Ⲇⵠ[918][sh.ⲆⵠⲆ] = ᐃΔ.ΔᐃΔΔⵠΔⵠ;
    Ⲇⵠ[919] = ᐃΔ.ⵠⵠᐃⲆⲆⲆⵠ;
    Ⲇⵠ[56] = [];
    Ⲇⵠ[56][sh.ⲆⲆΔ] = ᐃΔ.ΔⲆᐃΔⵠᐃᐃΔⵠ;
    Ⲇⵠ[56][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⲆⲆⲆⵠⲆᐃⲆᐃ;
    Ⲇⵠ[223] = [];
    Ⲇⵠ[223][sh.ⲆⲆΔ] = ᐃΔ.ᐃΔᐃⵠᐃⵠⲆ;
    Ⲇⵠ[223][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⵠᐃᐃⵠΔⵠ;
    Ⲇⵠ[224] = [];
    Ⲇⵠ[224][sh.ⲆⲆΔ] = ᐃΔ.ΔΔᐃᐃΔΔᐃ;
    Ⲇⵠ[224][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⵠΔⲆⵠΔᐃ;
    Ⲇⵠ[236] = [];
    Ⲇⵠ[236][sh.ⲆⲆΔ] = ᐃΔ.ⲆᐃⲆᐃΔΔᐃ;
    Ⲇⵠ[236][sh.ⲆⵠⲆ] = ᐃΔ.ⲆᐃⲆΔⲆᐃⲆ;
    Ⲇⵠ[1033] = [];
    Ⲇⵠ[1033][sh.ⲆⲆΔ] = ᐃΔ.ⵠⲆᐃΔΔᐃΔ;
    Ⲇⵠ[1033][sh.ⲆⵠⲆ] = ᐃΔ.ΔΔⲆᐃΔⲆΔ;
    Ⲇⵠ[1034] = ᐃΔ.ΔΔᐃΔⲆⲆΔ;
    Ⲇⵠ[1150] = [];
    Ⲇⵠ[1150][sh.ⲆⲆΔ] = ᐃΔ.ⵠⵠΔᐃⲆΔⵠ;
    Ⲇⵠ[1150][sh.ⲆⵠⲆ] = ᐃΔ.ΔⲆⵠⲆⲆᐃⵠ;
    Ⲇⵠ[1152] = [];
    Ⲇⵠ[1152][sh.ⲆⲆΔ] = ᐃΔ.ΔⵠΔⵠᐃⲆΔ;
    Ⲇⵠ[1152][sh.ⲆⵠⲆ] = ᐃΔ.ΔⲆⵠⵠΔⲆᐃ;
    Ⲇⵠ[1149] = ᐃΔ.ᐃⲆᐃΔⲆΔᐃ;
    Ⲇⵠ[1151] = ᐃΔ.ⵠⲆᐃⵠⵠᐃᐃ;
    Ⲇⵠ[1153] = ᐃΔ.ΔᐃΔⵠᐃᐃⲆ;
    Ⲇⵠ[1143] = [];
    Ⲇⵠ[1143][sh.ⲆⲆΔ] = ᐃΔ.ΔΔⲆΔⲆΔⲆ;
    Ⲇⵠ[1143][sh.ⲆⵠⲆ] = ᐃΔ.ⲆᐃΔΔⲆⵠⲆ;
    Ⲇⵠ[1145] = [];
    Ⲇⵠ[1145][sh.ⲆⲆΔ] = ᐃΔ.ΔΔⲆᐃⵠⵠᐃ;
    Ⲇⵠ[1145][sh.ⲆⵠⲆ] = ᐃΔ.ΔΔⵠⵠᐃⵠⵠ;
    Ⲇⵠ[1146] = [];
    Ⲇⵠ[1146][sh.ⲆⲆΔ] = ᐃΔ.ⲆᐃⵠΔᐃⵠⵠ;
    Ⲇⵠ[1146][sh.ⲆⵠⲆ] = ᐃΔ.ΔⵠᐃᐃᐃⲆΔ;
    Ⲇⵠ[1144] = ᐃΔ.ⵠᐃΔⲆΔⲆⵠ;
    Ⲇⵠ[1148] = ᐃΔ.ΔΔΔᐃⲆΔᐃ;
    Ⲇⵠ[1147] = ᐃΔ.ΔⵠⲆⵠᐃⲆΔ;
    Ⲇⵠ[1053] = [];
    Ⲇⵠ[1053][sh.ⲆⲆΔ] = ᐃΔ.ᐃΔΔⵠⵠᐃΔ;
    Ⲇⵠ[1053][sh.ⲆⵠⲆ] = ᐃΔ.ⲆᐃⵠⲆΔΔΔ;
    Ⲇⵠ[1055] = [];
    Ⲇⵠ[1055][sh.ⲆⲆΔ] = ᐃΔ.ᐃΔⲆᐃⵠⵠⲆ;
    Ⲇⵠ[1055][sh.ⲆⵠⲆ] = ᐃΔ.ⵠΔⵠᐃⵠⵠᐃ;
    Ⲇⵠ[231] = [];
    Ⲇⵠ[231][sh.ⲆⲆΔ] = ᐃΔ.ⲆΔᐃⵠⲆⲆⲆ;
    Ⲇⵠ[231][sh.ⲆⵠⲆ] = ᐃΔ.ⲆΔⲆⲆⲆΔΔ;
    Ⲇⵠ[1060] = [];
    Ⲇⵠ[1060][sh.ⲆⲆΔ] = ᐃΔ.ⲆⵠᐃᐃⲆᐃⲆ;
    Ⲇⵠ[1060][sh.ⲆⵠⲆ] = ᐃΔ.ᐃⵠΔᐃΔⵠᐃ;
    Ⲇⵠ[1063] = [];
    Ⲇⵠ[1063][sh.ⲆⲆΔ] = ᐃΔ.ΔⲆⵠⵠΔᐃⵠ;
    Ⲇⵠ[1063][sh.ⲆⵠⲆ] = ᐃΔ.ΔⲆⲆΔⲆⵠⵠ;
    Ⲇⵠ[1059] = [];
    Ⲇⵠ[1059][sh.ⲆⲆΔ] = ᐃΔ.ΔᐃΔⵠⵠᐃⵠ;
    Ⲇⵠ[1059][sh.ⲆⵠⲆ] = ᐃΔ.ⲆΔΔᐃΔᐃΔ;
    Ⲇⵠ[1062] = [];
    Ⲇⵠ[1062][sh.ⲆⲆΔ] = ᐃΔ.ⲆⲆⲆⵠΔⲆⵠ;
    Ⲇⵠ[1062][sh.ⲆⵠⲆ] = ᐃΔ.ΔⲆⲆΔΔᐃΔ;
    Ⲇⵠ[1056] = ᐃΔ.ΔⲆΔᐃΔᐃᐃ;
    Ⲇⵠ[1057] = ᐃΔ.ⲆⲆᐃⵠⲆⲆⵠ;
    Ⲇⵠ[1058] = ᐃΔ.ΔⵠᐃⲆⲆᐃΔ;
    Ⲇⵠ[1065] = ᐃΔ.ΔᐃⲆΔᐃⲆⲆ;
    Ⲇⵠ[1066] = ᐃΔ.ᐃΔᐃΔᐃΔⲆ;
    Ⲇⵠ[1067] = ᐃΔ.ⵠⲆᐃⲆⲆⵠᐃ;
    Ⲇⵠ[1222] = [];
    Ⲇⵠ[1222][sh.ⲆⲆΔ] = ᐃΔ.ΔⲆᐃᐃΔᐃⲆ;
    Ⲇⵠ[1222][sh.ⲆⵠⲆ] = ᐃΔ.ⲆⵠⲆⵠΔᐃᐃ;
    Ⲇⵠ[248] = [];
    Ⲇⵠ[248][sh.ⲆⲆΔ] = ᐃΔ.ⲆΔΔΔᐃⲆΔ;
    Ⲇⵠ[248][sh.ⲆⵠⲆ] = ᐃΔ.ᐃᐃᐃⵠⵠΔⵠ;
    Ⲇⵠ[1218] = [];
    Ⲇⵠ[1218][sh.ⲆⲆΔ] = ᐃΔ.ⲆⵠⲆⲆⲆⲆΔ;
    Ⲇⵠ[1218][sh.ⲆⵠⲆ] = ᐃΔ.ΔⲆⵠⲆᐃΔΔ;
    Ⲇⵠ[1221] = [];
    Ⲇⵠ[1221][sh.ⲆⲆΔ] = ᐃΔ.ΔⲆΔⵠΔⲆⵠ;
    Ⲇⵠ[1221][sh.ⲆⵠⲆ] = ᐃΔ.ⲆᐃΔⵠΔⵠⲆ;
    Ⲇⵠ[1223] = ᐃΔ.ᐃΔⲆᐃᐃᐃᐃ;
    Ⲇⵠ[1219] = ᐃΔ.ⲆⲆⲆⲆᐃⲆᐃ;
    Ⲇⵠ[1068] = [];
    Ⲇⵠ[1068][sh.ⲆⲆΔ] = ᐃΔ.ⲆΔⲆⲆᐃⲆᐃ;
    Ⲇⵠ[1068][sh.ⲆⵠⲆ] = ᐃΔ.ⵠᐃΔⵠᐃΔᐃ;
    Ⲇⵠ[232] = [];
    Ⲇⵠ[232][sh.ⲆⲆΔ] = ᐃΔ.ᐃⵠⵠᐃΔⵠΔ;
    Ⲇⵠ[232][sh.ⲆⵠⲆ] = ᐃΔ.ᐃⵠⵠⲆᐃΔΔ;
    Ⲇⵠ[1070] = [];
    Ⲇⵠ[1070][sh.ⲆⲆΔ] = ᐃΔ.ΔᐃⲆⲆΔΔΔ;
    Ⲇⵠ[1070][sh.ⲆⵠⲆ] = ᐃΔ.ⲆΔⲆΔⲆⵠⲆ;
    Ⲇⵠ[1072] = [];
    Ⲇⵠ[1072][sh.ⲆⲆΔ] = ᐃΔ.ΔᐃᐃᐃΔΔⲆ;
    Ⲇⵠ[1072][sh.ⲆⵠⲆ] = ᐃΔ.ⵠᐃⲆⲆⵠΔⲆ;
    Ⲇⵠ[1075] = [];
    Ⲇⵠ[1075][sh.ⲆⲆΔ] = ᐃΔ.ⲆΔⲆⵠᐃᐃᐃ;
    Ⲇⵠ[1075][sh.ⲆⵠⲆ] = ᐃΔ.ΔⲆⵠΔⲆⲆᐃ;
    Ⲇⵠ[1071] = [];
    Ⲇⵠ[1071][sh.ⲆⲆΔ] = ᐃΔ.ΔΔΔΔΔᐃᐃ;
    Ⲇⵠ[1071][sh.ⲆⵠⲆ] = ᐃΔ.ΔⲆΔΔᐃΔⲆ;
    Ⲇⵠ[1074] = [];
    Ⲇⵠ[1074][sh.ⲆⲆΔ] = ᐃΔ.ⲆᐃⲆᐃⲆⲆⲆ;
    Ⲇⵠ[1074][sh.ⲆⵠⲆ] = ᐃΔ.ⲆⲆⲆΔΔⲆⲆ;
    Ⲇⵠ[1073] = [];
    Ⲇⵠ[1073][sh.ⲆⲆΔ] = ᐃΔ.ⵠΔⲆⲆΔᐃⲆ;
    Ⲇⵠ[1073][sh.ⲆⵠⲆ] = ᐃΔ.ᐃᐃⵠᐃⲆⲆⵠ;
    Ⲇⵠ[1076] = [];
    Ⲇⵠ[1076][sh.ⲆⲆΔ] = ᐃΔ.ⲆⲆⲆᐃΔᐃΔ;
    Ⲇⵠ[1076][sh.ⲆⵠⲆ] = ᐃΔ.ⵠΔⲆΔⲆΔΔ;
    Ⲇⵠ[1077] = ᐃΔ.ⲆⵠⲆΔΔᐃᐃ;
    Ⲇⵠ[1078] = ᐃΔ.ΔⵠⵠⵠᐃⲆΔ;
    Ⲇⵠ[1079] = ᐃΔ.ⲆⵠΔᐃᐃΔΔ;
    Ⲇⵠ[1083] = [];
    Ⲇⵠ[1083][sh.ⲆⲆΔ] = ᐃΔ.ⵠⵠⵠⲆΔⲆᐃ;
    Ⲇⵠ[1083][sh.ⲆⵠⲆ] = ᐃΔ.ᐃⵠᐃⲆⵠᐃⵠ;
    Ⲇⵠ[233] = [];
    Ⲇⵠ[233][sh.ⲆⲆΔ] = ᐃΔ.ΔᐃᐃᐃᐃᐃΔ;
    Ⲇⵠ[233][sh.ⲆⵠⲆ] = ᐃΔ.ΔⲆΔᐃⲆᐃΔ;
    Ⲇⵠ[1085] = [];
    Ⲇⵠ[1085][sh.ⲆⲆΔ] = ᐃΔ.ⲆᐃΔΔⲆᐃⲆ;
    Ⲇⵠ[1085][sh.ⲆⵠⲆ] = ᐃΔ.ᐃⲆⲆⵠⵠΔΔ;
    Ⲇⵠ[1087] = [];
    Ⲇⵠ[1087][sh.ⲆⲆΔ] = ᐃΔ.ᐃΔⲆⵠⲆⲆΔ;
    Ⲇⵠ[1087][sh.ⲆⵠⲆ] = ᐃΔ.ΔⵠⵠᐃⲆΔᐃ;
    Ⲇⵠ[1090] = [];
    Ⲇⵠ[1090][sh.ⲆⲆΔ] = ᐃΔ.ᐃⵠⲆⵠⵠⵠⵠ;
    Ⲇⵠ[1090][sh.ⲆⵠⲆ] = ᐃΔ.ΔᐃΔΔⲆⵠⵠ;
    Ⲇⵠ[1086] = [];
    Ⲇⵠ[1086][sh.ⲆⲆΔ] = ᐃΔ.ΔᐃΔⲆΔⲆⲆ;
    Ⲇⵠ[1086][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⲆⲆᐃⵠᐃⵠ;
    Ⲇⵠ[1089] = [];
    Ⲇⵠ[1089][sh.ⲆⲆΔ] = ᐃΔ.ⵠⲆᐃⵠΔⲆⲆ;
    Ⲇⵠ[1089][sh.ⲆⵠⲆ] = ᐃΔ.ΔⵠΔⲆᐃⵠⵠ;
    Ⲇⵠ[1088] = [];
    Ⲇⵠ[1088][sh.ⲆⲆΔ] = ᐃΔ.ᐃⲆⵠⲆⲆⵠⲆ;
    Ⲇⵠ[1088][sh.ⲆⵠⲆ] = ᐃΔ.ΔᐃΔⵠΔᐃΔ;
    Ⲇⵠ[1091] = [];
    Ⲇⵠ[1091][sh.ⲆⲆΔ] = ᐃΔ.ᐃᐃⵠᐃᐃⲆΔ;
    Ⲇⵠ[1091][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⲆⲆⵠᐃΔⵠ;
    Ⲇⵠ[1092] = ᐃΔ.ⵠΔΔΔⵠᐃⵠ;
    Ⲇⵠ[1093] = ᐃΔ.ⵠⲆΔⲆⵠΔⲆ;
    Ⲇⵠ[1094] = ᐃΔ.ᐃΔⵠΔΔΔᐃ;
    Ⲇⵠ[1098] = [];
    Ⲇⵠ[1098][sh.ⲆⲆΔ] = ᐃΔ.ᐃⵠⵠⵠⲆᐃᐃ;
    Ⲇⵠ[1098][sh.ⲆⵠⲆ] = ᐃΔ.ΔᐃᐃΔΔᐃᐃ;
    Ⲇⵠ[235] = [];
    Ⲇⵠ[235][sh.ⲆⲆΔ] = ᐃΔ.ᐃΔⲆΔΔⵠᐃ;
    Ⲇⵠ[235][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⲆⲆⲆᐃᐃⲆ;
    Ⲇⵠ[1115] = ᐃΔ.ⵠΔⲆΔΔⵠⲆ;
    Ⲇⵠ[1113] = [];
    Ⲇⵠ[1113][sh.ⲆⲆΔ] = ᐃΔ.ᐃⵠΔⵠΔΔⵠ;
    Ⲇⵠ[1113][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⵠΔᐃΔᐃⵠ;
    Ⲇⵠ[1114] = [];
    Ⲇⵠ[1114][sh.ⲆⲆΔ] = ᐃΔ.ⲆᐃⲆⲆⲆⵠᐃ;
    Ⲇⵠ[1114][sh.ⲆⵠⲆ] = ᐃΔ.ᐃᐃΔᐃⲆⵠΔ;
    Ⲇⵠ[1100] = [];
    Ⲇⵠ[1100][sh.ⲆⲆΔ] = ᐃΔ.ⵠΔⵠⵠⲆΔΔ;
    Ⲇⵠ[1100][sh.ⲆⵠⲆ] = ᐃΔ.ΔᐃᐃⲆΔⲆΔ;
    Ⲇⵠ[1102] = [];
    Ⲇⵠ[1102][sh.ⲆⲆΔ] = ᐃΔ.ΔΔΔⵠⲆⲆΔ;
    Ⲇⵠ[1102][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⲆΔⵠⵠΔⵠ;
    Ⲇⵠ[1105] = [];
    Ⲇⵠ[1105][sh.ⲆⲆΔ] = ᐃΔ.ᐃΔⵠΔⵠᐃⲆ;
    Ⲇⵠ[1105][sh.ⲆⵠⲆ] = ᐃΔ.ⲆΔⵠΔΔΔⲆ;
    Ⲇⵠ[1101] = [];
    Ⲇⵠ[1101][sh.ⲆⲆΔ] = ᐃΔ.ⲆⲆⲆΔᐃΔⵠ;
    Ⲇⵠ[1101][sh.ⲆⵠⲆ] = ᐃΔ.ΔⲆⵠⲆᐃⵠᐃ;
    Ⲇⵠ[1104] = [];
    Ⲇⵠ[1104][sh.ⲆⲆΔ] = ᐃΔ.ᐃⲆⵠΔⵠΔⵠ;
    Ⲇⵠ[1104][sh.ⲆⵠⲆ] = ᐃΔ.ᐃⵠⵠⵠⵠΔⵠ;
    Ⲇⵠ[1103] = [];
    Ⲇⵠ[1103][sh.ⲆⲆΔ] = ᐃΔ.ᐃⲆΔΔⲆⲆᐃ;
    Ⲇⵠ[1103][sh.ⲆⵠⲆ] = ᐃΔ.ⵠᐃⲆⲆⵠⲆⲆ;
    Ⲇⵠ[1106] = [];
    Ⲇⵠ[1106][sh.ⲆⲆΔ] = ᐃΔ.ᐃΔⵠⲆᐃⵠᐃ;
    Ⲇⵠ[1106][sh.ⲆⵠⲆ] = ᐃΔ.ᐃⵠⲆⲆⲆΔΔ;
    Ⲇⵠ[1107] = ᐃΔ.ⵠⵠΔΔⵠΔᐃ;
    Ⲇⵠ[1108] = ᐃΔ.ᐃΔΔᐃΔⵠᐃ;
    Ⲇⵠ[1109] = ᐃΔ.ⲆΔⲆᐃⲆΔⲆ;
    Ⲇⵠ[1119] = [];
    Ⲇⵠ[1119][sh.ⲆⲆΔ] = ᐃΔ.ΔΔⲆⵠⲆΔΔ;
    Ⲇⵠ[1119][sh.ⲆⵠⲆ] = ᐃΔ.ᐃᐃᐃΔᐃΔΔ;
    Ⲇⵠ[238] = [];
    Ⲇⵠ[238][sh.ⲆⲆΔ] = ᐃΔ.ⲆᐃᐃᐃⵠᐃⲆ;
    Ⲇⵠ[238][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⲆⵠᐃΔΔᐃ;
    Ⲇⵠ[1136] = ᐃΔ.ᐃⲆⵠⵠⵠΔᐃ;
    Ⲇⵠ[1134] = [];
    Ⲇⵠ[1134][sh.ⲆⲆΔ] = ᐃΔ.ⵠⵠⵠᐃΔᐃⵠ;
    Ⲇⵠ[1134][sh.ⲆⵠⲆ] = ᐃΔ.ⲆⵠⵠΔⲆⵠⲆ;
    Ⲇⵠ[1135] = [];
    Ⲇⵠ[1135][sh.ⲆⲆΔ] = ᐃΔ.ΔᐃΔⵠᐃᐃᐃ;
    Ⲇⵠ[1135][sh.ⲆⵠⲆ] = ᐃΔ.ⵠΔⵠⵠⲆⲆΔ;
    Ⲇⵠ[1121] = [];
    Ⲇⵠ[1121][sh.ⲆⲆΔ] = ᐃΔ.ΔᐃⲆⲆΔᐃⵠ;
    Ⲇⵠ[1121][sh.ⲆⵠⲆ] = ᐃΔ.ⵠΔᐃⵠⵠΔᐃ;
    Ⲇⵠ[1123] = [];
    Ⲇⵠ[1123][sh.ⲆⲆΔ] = ᐃΔ.ⵠΔᐃⲆᐃᐃⵠ;
    Ⲇⵠ[1123][sh.ⲆⵠⲆ] = ᐃΔ.ΔΔⵠⵠΔΔⵠ;
    Ⲇⵠ[1126] = [];
    Ⲇⵠ[1126][sh.ⲆⲆΔ] = ᐃΔ.ΔⵠⲆᐃΔⵠᐃ;
    Ⲇⵠ[1126][sh.ⲆⵠⲆ] = ᐃΔ.ⵠΔⵠⵠⲆΔⲆ;
    Ⲇⵠ[1122] = [];
    Ⲇⵠ[1122][sh.ⲆⲆΔ] = ᐃΔ.ᐃⵠⵠⵠⲆᐃⲆ;
    Ⲇⵠ[1122][sh.ⲆⵠⲆ] = ᐃΔ.ᐃΔⲆⵠΔᐃᐃ;
    Ⲇⵠ[1125] = [];
    Ⲇⵠ[1125][sh.ⲆⲆΔ] = ᐃΔ.ⵠΔⵠᐃⲆΔⵠ;
    Ⲇⵠ[1125][sh.ⲆⵠⲆ] = ᐃΔ.ΔΔΔᐃᐃΔⲆ;
    Ⲇⵠ[1124] = [];
    Ⲇⵠ[1124][sh.ⲆⲆΔ] = ᐃΔ.ⲆⵠⵠⲆⲆⲆⵠ;
    Ⲇⵠ[1124][sh.ⲆⵠⲆ] = ᐃΔ.ⵠᐃⲆΔⲆΔⵠ;
    Ⲇⵠ[1127] = [];
    Ⲇⵠ[1127][sh.ⲆⲆΔ] = ᐃΔ.ᐃⲆΔΔⲆⵠᐃ;
    Ⲇⵠ[1127][sh.ⲆⵠⲆ] = ᐃΔ.ⲆᐃⲆΔⲆⲆⵠ;
    Ⲇⵠ[1128] = ᐃΔ.ΔΔⲆᐃΔΔⵠ;
    Ⲇⵠ[1129] = ᐃΔ.ⵠⲆΔⵠⵠⵠⵠ;
    Ⲇⵠ[1130] = ᐃΔ.ᐃᐃⵠΔᐃᐃᐃ;
    Ⲇⵠ[1042] = [];
    Ⲇⵠ[1042][sh.ⲆⲆΔ] = ᐃΔ.ΔΔΔᐃΔᐃᐃ;
    Ⲇⵠ[1042][sh.ⲆⵠⲆ] = ᐃΔ.ⲆΔᐃΔⵠᐃⲆ;
    Ⲇⵠ[1043] = [];
    Ⲇⵠ[1043][sh.ⲆⲆΔ] = ᐃΔ.ΔⵠⲆⵠⲆⲆᐃ;
    Ⲇⵠ[1043][sh.ⲆⵠⲆ] = ᐃΔ.ⲆΔΔᐃⲆⲆΔ;
    Ⲇⵠ[1044] = [];
    Ⲇⵠ[1044][sh.ⲆⲆΔ] = ᐃΔ.ᐃⵠⲆᐃΔⲆΔ;
    Ⲇⵠ[1044][sh.ⲆⵠⲆ] = ᐃΔ.ⵠᐃᐃⵠⲆⲆⵠ;
    Ⲇⵠ[228] = [];
    Ⲇⵠ[228][sh.ⲆⲆΔ] = ᐃΔ.ⵠⲆⲆⲆΔΔⵠ;
    Ⲇⵠ[228][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⲆⲆⲆΔΔⵠ;
    Ⲇⵠ[234] = [];
    Ⲇⵠ[234][sh.ⲆⲆΔ] = ᐃΔ.ⵠΔᐃᐃᐃⲆⵠ;
    Ⲇⵠ[234][sh.ⲆⵠⲆ] = ᐃΔ.ⵠΔᐃᐃᐃⲆⵠ;
    Ⲇⵠ[249] = [];
    Ⲇⵠ[249][sh.ⲆⲆΔ] = ᐃΔ.ⵠⵠⲆᐃΔΔΔ;
    Ⲇⵠ[249][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⵠⲆᐃΔΔΔ;
    Ⲇⵠ[1045] = ᐃΔ.ⲆΔⲆⵠⵠⲆⵠ;
    Ⲇⵠ[89] = [];
    Ⲇⵠ[89][sh.ⲆⲆΔ] = ᐃΔ.ᐃΔⵠⵠⲆⵠⲆ;
    Ⲇⵠ[89][sh.ⲆⵠⲆ] = ᐃΔ.ⲆⲆΔⵠⵠΔⵠ;
    Ⲇⵠ[92] = [];
    Ⲇⵠ[92][sh.ⲆⲆΔ] = ᐃΔ.ⲆᐃⲆⲆᐃΔᐃ;
    Ⲇⵠ[92][sh.ⲆⵠⲆ] = ᐃΔ.ᐃΔΔⵠⵠⲆᐃ;
    Ⲇⵠ[247] = [];
    Ⲇⵠ[247][sh.ⲆⲆΔ] = [ᐃΔ.ⵠΔΔⲆⵠⲆΔ, ᐃΔ.ⲆⵠⲆⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃⵠΔⲆ, ᐃΔ.ΔⲆᐃⲆᐃᐃⲆ, ᐃΔ.ΔⵠΔΔⵠⲆⵠ, ᐃΔ.ΔⵠΔΔⵠⵠᐃ, ᐃΔ.ⵠⵠΔᐃΔⲆⲆ, ᐃΔ.ΔⲆΔᐃⵠⲆΔ, ᐃΔ.ⲆⵠⲆᐃᐃΔⵠ];
    Ⲇⵠ[247][sh.ⲆⵠⲆ] = [ᐃΔ.ⵠⵠΔΔⵠᐃⵠ, ᐃΔ.ⵠᐃⵠᐃⵠᐃΔ, ᐃΔ.ⵠⲆᐃⲆΔΔᐃ, ᐃΔ.ⵠΔⲆᐃⵠⵠΔ, ᐃΔ.ᐃⲆᐃᐃⲆⲆᐃ, ᐃΔ.ΔⵠᐃᐃⵠΔᐃ, ᐃΔ.ⲆⵠⲆⵠᐃᐃᐃ, ᐃΔ.ΔⲆΔᐃⵠⲆΔ, ᐃΔ.ⲆᐃⵠⲆᐃⵠⵠ];
    Ⲇⵠ[93] = [];
    Ⲇⵠ[93][sh.ⲆⲆΔ] = ᐃΔ.ⵠΔᐃⲆⲆⲆΔ;
    Ⲇⵠ[93][sh.ⲆⵠⲆ] = ᐃΔ.ΔᐃⲆΔΔΔΔ;
    Ⲇⵠ[225] = [];
    Ⲇⵠ[225][sh.ⲆⲆΔ] = ᐃΔ.ΔΔᐃᐃⲆΔᐃ;
    Ⲇⵠ[225][sh.ⲆⵠⲆ] = ᐃΔ.ⲆᐃⵠⲆⲆΔΔ;
    Ⲇⵠ[226] = [];
    Ⲇⵠ[226][sh.ⲆⲆΔ] = ᐃΔ.ⵠⵠⵠᐃⲆⵠᐃ;
    Ⲇⵠ[226][sh.ⲆⵠⲆ] = ᐃΔ.ⵠΔⵠⲆΔⵠᐃ;
    Ⲇⵠ[24] = [];
    Ⲇⵠ[24][sh.ⲆⲆΔ] = ᐃΔ.ⵠⵠΔΔΔⲆⲆ;
    Ⲇⵠ[24][sh.ⲆⵠⲆ] = ᐃΔ.ΔΔᐃⵠⲆΔΔ;
    Ⲇⵠ[88] = [];
    Ⲇⵠ[88][sh.ⲆⲆΔ] = ᐃΔ.ᐃΔΔᐃΔᐃⵠ;
    Ⲇⵠ[88][sh.ⲆⵠⲆ] = ᐃΔ.ⲆᐃⵠΔᐃⲆⵠ;
    Ⲇⵠ[87] = [];
    Ⲇⵠ[87][sh.ⲆⲆΔ] = ᐃΔ.ΔⲆⵠᐃⲆᐃΔ;
    Ⲇⵠ[87][sh.ⲆⵠⲆ] = ᐃΔ.ΔΔⵠΔⵠΔⲆ;
    Ⲇⵠ[82] = [];
    Ⲇⵠ[82][sh.ⲆⲆΔ] = ᐃΔ.ⲆᐃΔⲆⲆᐃᐃ;
    Ⲇⵠ[82][sh.ⲆⵠⲆ] = ᐃΔ.ΔⵠⲆⵠⲆⲆΔ;
    Ⲇⵠ[621] = [];
    Ⲇⵠ[621][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[621][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[621][sh.ⲆⲆΔ].push(ᐃΔ.ΔⵠᐃⲆⵠᐃᐃΔΔ);
    Ⲇⵠ[621][sh.ⲆⲆΔ].push(ᐃΔ.ΔᐃᐃΔⲆᐃⲆᐃⲆ);
    Ⲇⵠ[621][sh.ⲆⲆΔ].push(ᐃΔ.ᐃᐃⲆᐃΔⵠᐃⵠⲆ);
    Ⲇⵠ[621][sh.ⲆⵠⲆ].push(ᐃΔ.ⵠΔⵠΔⵠⵠΔΔⵠ);
    Ⲇⵠ[621][sh.ⲆⵠⲆ].push(ᐃΔ.ᐃⵠΔΔⵠᐃⵠΔⲆ);
    Ⲇⵠ[621][sh.ⲆⵠⲆ].push(ᐃΔ.ΔⲆⵠᐃᐃⲆᐃⵠΔ);
    Ⲇⵠ[619] = [];
    Ⲇⵠ[619][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[619][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[619][sh.ⲆⲆΔ].push(ᐃΔ.ΔΔⵠⵠᐃⵠΔⵠⲆ);
    Ⲇⵠ[619][sh.ⲆⲆΔ].push(ᐃΔ.ΔΔⲆⲆⵠΔᐃⵠⵠ);
    Ⲇⵠ[619][sh.ⲆⲆΔ].push(ᐃΔ.ΔⲆΔᐃⲆⲆᐃⲆⲆ);
    Ⲇⵠ[619][sh.ⲆⵠⲆ].push(ᐃΔ.ⵠⵠᐃⵠΔᐃΔⵠᐃ);
    Ⲇⵠ[619][sh.ⲆⵠⲆ].push(ᐃΔ.ⲆⲆΔⲆᐃΔⵠⲆᐃ);
    Ⲇⵠ[619][sh.ⲆⵠⲆ].push(ᐃΔ.ⵠΔᐃⵠΔⵠᐃⲆⲆ);
    Ⲇⵠ[620] = [];
    Ⲇⵠ[620][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[620][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[620][sh.ⲆⲆΔ].push(ᐃΔ.ΔᐃΔⵠⵠⲆⲆᐃⵠ);
    Ⲇⵠ[620][sh.ⲆⲆΔ].push(ᐃΔ.ⲆᐃΔⵠⲆⵠΔΔⲆ);
    Ⲇⵠ[620][sh.ⲆⲆΔ].push(ᐃΔ.ᐃΔΔᐃᐃⵠᐃᐃⵠ);
    Ⲇⵠ[620][sh.ⲆⵠⲆ].push(ᐃΔ.ⵠⵠΔΔΔᐃⲆⵠⵠ);
    Ⲇⵠ[620][sh.ⲆⵠⲆ].push(ᐃΔ.ᐃΔⵠᐃⲆΔⲆⲆᐃ);
    Ⲇⵠ[620][sh.ⲆⵠⲆ].push(ᐃΔ.ⵠᐃᐃⲆᐃⵠⲆⵠⵠ);
    ᐃⵠⵠΔ.g = [];
    ᐃⵠⵠΔ.g[0] = [ᐃΔ.ⲆⲆⵠΔΔⵠⵠ, ᐃΔ.ⲆⵠΔⵠΔⵠᐃ];
    ᐃⵠⵠΔ.g[1] = ᐃⵠⵠΔ.g[0];
    ᐃⵠⵠΔ.g[2] = [ᐃΔ.Ⲇᐃⵠᐃⵠⵠᐃ, ᐃΔ.ᐃⲆⲆᐃᐃΔΔ];
    ᐃⵠⵠΔ.m = [];
    ᐃⵠⵠΔ.m[0] = [ᐃΔ.ⵠᐃΔⲆⲆⵠᐃ, ᐃΔ.ᐃΔⵠΔⵠⲆΔ];
    ᐃⵠⵠΔ.m[1] = ᐃⵠⵠΔ.m[0];
    ᐃⵠⵠΔ.m[2] = [ᐃΔ.ᐃΔⵠᐃᐃᐃⲆ, ᐃΔ.ΔᐃᐃΔΔⵠⵠ];
    ᐃⵠⵠΔ.la = [];
    ᐃⵠⵠΔ.la[0] = [ᐃΔ.ⲆⲆΔΔΔᐃΔ, ᐃΔ.ⵠⵠⵠᐃΔΔⲆ];
    ᐃⵠⵠΔ.la[1] = ᐃⵠⵠΔ.la[0];
    ᐃⵠⵠΔ.la[2] = ᐃⵠⵠΔ.la[0];
    ᐃⵠⵠΔ.la[3] = ᐃⵠⵠΔ.la[0];
    ᐃⵠⵠΔ.la[4] = ᐃⵠⵠΔ.la[0];
    ᐃⵠⵠΔ.la[5] = ᐃⵠⵠΔ.la[0];
    ᐃⵠⵠΔ.s = [];
    ᐃⵠⵠΔ.s[0] = [ᐃΔ.ᐃⵠⵠⲆΔⵠᐃ, ᐃΔ.ᐃⲆⵠⵠΔᐃⵠ];
    ᐃⵠⵠΔ.s[1] = ᐃⵠⵠΔ.s[0];
    ᐃⵠⵠΔ.s[2] = [ᐃΔ.ⲆΔⵠΔⲆⵠⲆ, ᐃΔ.ⵠⵠΔΔᐃᐃⵠ];
    ᐃⵠⵠΔ.p = [];
    ᐃⵠⵠΔ.p[0] = [ᐃΔ.ΔⵠⲆᐃᐃⲆⵠ, ᐃΔ.ΔⵠⲆᐃᐃⲆⵠ];
    ᐃⵠⵠΔ.a = [];
    ᐃⵠⵠΔ.a[0] = [ᐃΔ.ⲆΔᐃⵠᐃᐃΔ, ᐃΔ.ⲆᐃⵠⲆⵠⵠⵠ];
    ᐃⵠⵠΔ.a[1] = ᐃⵠⵠΔ.a[0];
    ᐃⵠⵠΔ.a[2] = ᐃⵠⵠΔ.a[0];
    ᐃⵠⵠΔ.d = [];
    ᐃⵠⵠΔ.d[0] = [ᐃΔ.ⲆⲆⲆⲆⲆⲆΔ, ᐃΔ.ⵠⲆΔᐃᐃᐃⵠ];
    ᐃⵠⵠΔ.d[1] = ᐃⵠⵠΔ.d[0];
    ᐃⵠⵠΔ.d[2] = ᐃⵠⵠΔ.d[0];
    ᐃⵠⵠΔ.re = [];
    ᐃⵠⵠΔ.re[0] = [ᐃΔ.ΔⲆΔⵠᐃⵠⵠ, ᐃΔ.ΔⵠⵠΔᐃΔᐃ];
    ᐃⵠⵠΔ.re[1] = ᐃⵠⵠΔ.re[0];
    ᐃⵠⵠΔ.re[2] = ᐃⵠⵠΔ.re[0];
    ᐃⵠⵠΔ.f = [];
    ᐃⵠⵠΔ.f[0] = [ᐃΔ.ᐃᐃⲆᐃⵠᐃᐃ, ᐃΔ.ᐃΔΔⲆⵠⲆᐃ];
    ᐃⵠⵠΔ.f[1] = ᐃⵠⵠΔ.f[0];
    ᐃⵠⵠΔ.f[2] = ᐃⵠⵠΔ.f[0];
    ᐃⵠⵠΔ.isl = [];
    ᐃⵠⵠΔ.isl[0] = [ᐃΔ.ΔⲆⵠᐃΔΔⲆ, ᐃΔ.ⵠᐃΔⲆⵠᐃⵠ];
    ᐃⵠⵠΔ.isl[1] = ᐃⵠⵠΔ.isl[0];
    ᐃⵠⵠΔ.isl[2] = ᐃⵠⵠΔ.isl[0];
    ᐃⵠⵠΔ.c = [];
    ᐃⵠⵠΔ.c[0] = [ᐃΔ.ⲆΔⵠⲆⲆᐃⲆ, ᐃΔ.ⲆᐃⵠᐃΔᐃⲆ];
    ᐃⵠⵠΔ.c[1] = ᐃⵠⵠΔ.c[0];
    ᐃⵠⵠΔ.c[2] = ᐃⵠⵠΔ.c[0];
    ᐃⵠⵠΔ.wtb = [];
    ᐃⵠⵠΔ.wtb[0] = [ᐃΔ.ⲆⲆⲆΔⲆⲆᐃ, ᐃΔ.ᐃᐃΔᐃⲆⵠⵠ];
    ᐃⵠⵠΔ.PIRANHA = [ᐃΔ.ᐃᐃΔⵠⲆⵠⲆ, ᐃΔ.ⵠΔᐃΔΔⲆᐃ];
    ᐃⵠⵠΔ.KRAKEN = [ᐃΔ.ᐃⵠᐃⵠⵠᐃⵠ, ᐃΔ.ⲆⵠⵠᐃΔⲆᐃ];
    ᐃⵠⵠΔ.FOX = [ᐃΔ.ⲆⲆΔⲆΔΔΔ, ᐃΔ.ᐃΔⲆΔᐃⵠⲆ];
    ᐃⵠⵠΔ.WOLF = [ᐃΔ.ᐃᐃⲆⲆᐃΔᐃ, ᐃΔ.ⲆΔΔⲆⵠⲆΔ];
    ᐃⵠⵠΔ.SPIDER = [ᐃΔ.ΔΔΔΔⵠⲆᐃ, ᐃΔ.ⲆΔⵠⵠⲆⲆΔ];
    ᐃⵠⵠΔ.BEAR = [ᐃΔ.ⵠⲆᐃΔᐃΔᐃ, ᐃΔ.ⵠⵠᐃⲆᐃΔⵠ];
    ᐃⵠⵠΔ.CAVE = [ᐃΔ.ᐃⵠΔⲆᐃΔᐃ, ᐃΔ.ΔⵠᐃⲆⲆⵠΔ];
    ᐃⵠⵠΔ.MAP = [ᐃΔ.ᐃⵠⲆⵠΔⲆΔ, ᐃΔ.ΔΔᐃᐃⲆᐃΔ];
    ᐃⵠⵠΔ.FOREST = [ᐃΔ.ⲆⵠΔⵠⵠⵠᐃ, ᐃΔ.ᐃᐃᐃΔΔⲆᐃ];
    ᐃⵠⵠΔ.WINTER = [ᐃΔ.ⲆⲆᐃΔΔⲆᐃ, ᐃΔ.ᐃᐃⵠⵠᐃᐃᐃ];
    ᐃⵠⵠΔ.DESERT = [ᐃΔ.ⵠᐃΔΔΔΔΔ, ᐃΔ.ⵠⲆΔⵠᐃⲆΔ];
    ᐃⵠⵠΔ.LAVA = [ᐃΔ.ᐃⲆΔΔᐃⲆⵠ, ᐃΔ.ⲆⵠⵠⵠⲆⵠᐃ];
    for (var c in ᐃⵠⵠΔ) {
      for (var d = ᐃⵠⵠΔ[c], e = 0; e < d.length; e++) {
        var f = d[e];
        if (f.ⵠⵠΔᐃⲆⲆΔ !== undefined) {
          f.ⵠⵠΔᐃⲆⲆΔ();
        } else if (f.length > 0) {
          for (var g = 0; g < f.length; g++) {
            if (f[g].ⵠⵠΔᐃⲆⲆΔ !== Dh) {
              f[g].ⵠⵠΔᐃⲆⲆΔ();
            }
          }
        }
      }
    }
    console.log(Og, undefined);
  }
  function qc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    bd(e, a * 220, a * 201, a * 170.41713528867922);
    hd(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    bd(e, a * 220, a * 201, a * 170.41713528867922);
    hd(e, c[1], c[2], a * 6);
    bd(e, a * 220, a * 201, a * 130);
    hd(e, c[11], c[2], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    hd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    hd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    hd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    hd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    hd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    hd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142, a * 223);
    e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
    e.closePath();
    hd(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 133);
    e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
    e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
    e.closePath();
    hd(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 203, a * 102);
    e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
    e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
    e.closePath();
    hd(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196, a * 324);
    e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
    e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
    e.closePath();
    hd(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 266, a * 166);
    e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
    hd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 269, a * 192);
    e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
    hd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 217);
    e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
    hd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 141);
    e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
    hd(e, jn, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 230);
    e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
    hd(e, undefined, c[6], a * 6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 258);
    e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
    hd(e, jn, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 196);
    e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
    hd(e, Dh, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    hd(e, jn, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    hd(e, ir, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    hd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    hd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    hd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    hd(e, undefined, c[6], a * 6);
    bd(e, a * 222, a * 199, a * 120.74767078498864);
    hd(e, undefined, c[3], a * 40);
    bd(e, a * 220, a * 200, a * 95.44108130150245);
    hd(e, ct, c[2], a * 15);
    bd(e, a * 220, a * 201, a * 85);
    hd(e, Ro, c[4], a * 10);
    e.globalAlpha = 0.5;
    bd(e, a * 220, a * 201, a * 82);
    hd(e, c[9]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    bd(e, a * 63, a * 136, a * 49.193495504995376);
    hd(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    bd(e, a * 63, a * 136, a * 49.193495504995376);
    hd(e, c[8], c[2], a * 4);
    bd(e, a * 63, a * 137, a * 25.632011235952593);
    hd(e, c[7], c[2], a * 4);
    return d;
  }
  function Oc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 272;
    d.height = a * 264;
    e.translate(0, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    hd(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    hd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
    e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
    e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
    e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
    e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
    e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
    e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
    e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
    e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
    e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
    e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
    e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
    e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
    e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
    e.closePath();
    hd(e, c[4], c[5], a * 6);
    return d;
  }
  function Hc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 247;
    d.height = a * 247;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    hd(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    hd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    hd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    hd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 137);
    e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
    e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
    e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
    e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
    e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
    e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
    e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
    e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
    e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
    e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
    e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
    e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
    e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
    e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    hd(e, undefined, c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 63);
    e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
    e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
    e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 40);
    e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
    e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
    e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 43);
    e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
    e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
    e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 98);
    e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
    e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
    e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 180, a * 85);
    e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
    e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
    e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 114);
    e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
    e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
    e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 92);
    e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
    e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
    e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 130);
    e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
    e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
    e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 113, a * 189);
    e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
    e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
    e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 154);
    e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
    e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
    e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206, a * 152);
    e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
    e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
    e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 181, a * 184);
    e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
    e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
    e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 199);
    e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
    e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 143);
    e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
    e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 159);
    e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
    e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
    e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 214);
    e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
    e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
    e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 52);
    e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
    e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
    e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 81);
    e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
    e.bezierCurveTo(a * 23, a * 97, a * 19, a * 96, a * 16, a * 93);
    e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
    e.closePath();
    hd(e, c[4], c[5], a * 5);
    return d;
  }
  function Uc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 218;
    d.height = a * 185;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 53.135406494140625);
    e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
    e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
    e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
    e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
    e.bezierCurveTo(a * 13, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
    e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
    e.closePath();
    hd(e, c[0], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 25.135406494140625);
    e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
    e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
    e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
    e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
    e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
    e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
    e.closePath();
    hd(e, c[1]);
    return d;
  }
  function Yc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    hd(e, undefined, c[2], a * 40);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    hd(e, undefined, c[1], a * 20);
    e.globalAlpha = 0.8;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    hd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
    e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
    e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
    e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
    e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
    e.closePath();
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
    e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
    e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
    e.closePath();
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.00003051757812, a * 49.625);
    e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
    e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
    e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
    e.closePath();
    hd(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 36.625);
    e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
    e.closePath();
    hd(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53.000030517578125, a * 52.625);
    e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
    e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
    e.closePath();
    hd(e, c[3]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    hd(e, kl, c[3], a * 4);
    return d;
  }
  function Kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 88;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.52);
    cd(e, 6, a * 43, a * 10);
    e.restore();
    hd(e, c[0], c[1], a * 3);
    return d;
  }
  function Vc(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 600;
    var f = b * 22;
    var g = b * 4;
    var a = b * 4;
    c.width = e;
    c.height = f;
    gd(d, b * 5, b * 5, e - b * 10, f - b * 10, g);
    hd(d, null, "#BBE8EF", a);
    return c;
  }
  function Xc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 109;
    d.height = a * 110;
    bd(e, a * 54.5, a * 55, a * 48.038209575038294);
    hd(e, b[0], b[1], a * 8);
    if (c == 0) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
      e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
      e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
      e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
      e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
      e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
      e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
      e.closePath();
      hd(e, b[2]);
    } else if (c == 1) {
      e.save();
      e.translate(a * 55, a * 39.48748779296875);
      gd(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
      e.restore();
      hd(e, b[2], b[3], a * 4);
      bd(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
      hd(e, b[4], b[3], a * 4);
      e.save();
      e.translate(a * 55.5, a * 57.287506103515625);
      gd(e, a * -9, a * -16, a * 18, a * 32, a * 10);
      e.restore();
      hd(e, b[4]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 25.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
      e.closePath();
      hd(e, Lh, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 37.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
      e.closePath();
      hd(e, Lk, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 50.287506103515625);
      e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
      e.closePath();
      hd(e, ir, b[5], a * 4);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
      e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
      e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
      e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
      e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
      e.closePath();
      hd(e, b[2]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
      e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
      e.closePath();
      hd(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
      e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
      e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
      e.closePath();
      hd(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
      e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
      e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
      e.closePath();
      hd(e, b[2]);
    } else if (c == 3) {
      e.scale(0.9, 0.9);
      e.translate(a * 6, 0);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54, a * 0.421875);
      e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
      e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
      e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
      e.closePath();
      hd(e, b[2], b[3], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 74, a * 52.421875);
      e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
      e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
      e.closePath();
      hd(e, b[3]);
    }
    return d;
  }
  function Zc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    gd(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    hd(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    hd(e, undefined, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    hd(e, undefined, c[6], a * 15);
    return d;
  }
  function $c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    bd(e, a * 220, a * 201, a * 170.41713528867922);
    hd(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    bd(e, a * 220, a * 201, a * 170.41713528867922);
    hd(e, c[1], c[2], a * 6);
    bd(e, a * 220, a * 201, a * 130);
    hd(e, c[11], c[2], a * 6);
    bd(e, a * 222, a * 199, a * 120.74767078498864);
    hd(e, Es, c[3], a * 40);
    bd(e, a * 220, a * 200, a * 95.44108130150245);
    hd(e, undefined, c[2], a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    bd(e, a * 63, a * 136, a * 49.193495504995376);
    hd(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    bd(e, a * 63, a * 136, a * 49.193495504995376);
    hd(e, c[8], c[2], a * 4);
    bd(e, a * 63, a * 137, a * 25.632011235952593);
    hd(e, c[7], c[2], a * 4);
    return d;
  }
  function ep(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    hd(e, Ns, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    hd(e, c[3], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    hd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    hd(e, Og, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    hd(e, Ra, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    hd(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    hd(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    hd(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    hd(e, Dh, c[2], a * 11);
    return d;
  }
  (function () {
    const a = {
      ᐃⵠΔᐃⵠⲆᐃⵠⵠ: 16043388,
      ᐃᐃⲆⲆⵠᐃⵠ: 3805950,
      ⲆⵠⵠⲆⲆⵠⵠΔᐃ: 9316949,
      ᐃᐃᐃⲆᐃᐃΔ: 11264235
    };
  })();
  ;
  function ip(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 158;
    d.height = a * 201;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    hd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    hd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    hd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    hd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    hd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    hd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    hd(e, c[8], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    hd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    hd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    hd(e, c[3], c[2], a * 4);
    bd(e, a * 108.5, a * 148.421875, a * 9);
    hd(e, c[5]);
    bd(e, a * 106.5, a * 144.421875, a * 3);
    hd(e, c[6]);
    bd(e, a * 46.5, a * 148.421875, a * 9);
    hd(e, c[5]);
    bd(e, a * 44.5, a * 144.421875, a * 3);
    hd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 114.421875);
    e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
    e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
    hd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.translate(0, a * -2);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.5, a * 131.421875);
    e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
    e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
    hd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 57.421875);
    e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
    e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
    e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
    e.closePath();
    hd(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    hd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    hd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 154.421875);
    e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
    e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
    e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
    e.closePath();
    hd(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 81.5, a * 164.421875);
    e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
    e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
    e.closePath();
    hd(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 164.421875);
    e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
    e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
    e.closePath();
    hd(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.5, a * 156.421875);
    e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
    e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
    e.closePath();
    hd(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    hd(e, c[3], c[2], a * 4);
    return d;
  }
  function np(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 102;
    d.height = a * 102;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(3, 3);
    gd(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    hd(e, c[0]);
    gd(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    hd(e, c[0]);
    gd(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    hd(e, c[0]);
    gd(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    hd(e, c[0]);
    gd(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-3, -3);
    gd(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    hd(e, c[1]);
    gd(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    hd(e, c[1]);
    gd(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    hd(e, c[2], c[3], a * 4);
    gd(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    hd(e, c[2], c[3], a * 4);
    gd(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    hd(e, c[2], c[3], a * 4);
    return d;
  }
  function op(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 120;
    var g = b * 140;
    d.width = f;
    d.height = g;
    d.width = b * 130;
    d.height = b * 120;
    gd(e, b * 10, b * 12, b * 110, b * 90, b * 10);
    hd(e, c[0]);
    gd(e, b * 10, b * 5, b * 110, b * 90, b * 10);
    hd(e, c[1], c[2], b * 4);
    var a = md(-Math.PI / 5, ru(b * 0.5, Tk, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 12, b * 18);
    a = md(Math.PI / 4, oc(b * 0.55, nq, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 36, b * 16);
    return d;
  }
  function ap(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 170;
    f.height = b * 200;
    g.translate(b * 5, b * 15);
    if (e == 1) {
      g.translate(0, b * -5);
      bd(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
      hd(g, d[1], d[5], b * 20);
      bd(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
      hd(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 31.267044067382812);
      gd(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
      g.restore();
      hd(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 13.267044067382812);
      gd(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
      g.restore();
      hd(g, d[1], d[5], b * 20);
    }
    bd(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
    hd(g, d[1], d[2], b * 7);
    bd(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
    hd(g, d[1], d[2], b * 7);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 18.000030517578125, b * 105.85795593261719);
    g.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
    g.closePath();
    hd(g, d[1], d[2], b * 8);
    bd(g, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
    hd(g, d[1], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 112.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
    g.closePath();
    hd(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 48.03977966308594);
    g.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
    g.closePath();
    hd(g, d[3], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 80.00003051757812, b * 111.6761474609375);
    g.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
    g.closePath();
    hd(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 107.00003051757812, b * 76.6761474609375);
    g.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
    g.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
    g.closePath();
    hd(g, d[3], d[2], b * 4);
    bd(g, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
    hd(g, d[3], d[2], b * 4);
    g.save();
    g.translate(b * 77.00003051757812, b * 31.267044067382812);
    g.rotate(0);
    gd(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
    g.restore();
    hd(g, d[1], d[2], b * 7);
    g.save();
    g.translate(b * 77.00003051757812, b * 13.267044067382812);
    g.rotate(0);
    gd(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
    g.restore();
    hd(g, d[1], d[2], b * 7);
    return f;
  }
  function rp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 496;
    e.height = b * 520;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 19.000030517578125, b * 256.67613983154297);
    f.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
    f.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
    f.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
    f.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
    f.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
    f.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
    f.closePath();
    hd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -10);
    bd(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    hd(f, d[5], kl, b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 65.00003051757812, b * 263.4034118652344);
    f.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
    f.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
    f.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
    f.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
    f.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
    f.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
    f.closePath();
    hd(f, d[0]);
    f.globalAlpha = 1;
    var g = function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 496;
      c.height = a * 520;
      d.globalAlpha = 1;
      d.translate(0, a * -10);
      bd(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
      hd(d, b[1], b[2], a * 14);
      d.globalCompositeOperation = "destination-out";
      bd(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
      hd(d, b[0], b[0], a * 14);
      d.globalCompositeOperation = "source-over";
      return c;
    }(b, d);
    f.drawImage(g, 0, 0);
    f.translate(0, b * -10);
    bd(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    hd(f, Bo, d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    hd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    hd(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    hd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    hd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    hd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    hd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    hd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    hd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    hd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    hd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    hd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    hd(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    hd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    hd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    hd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    hd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    hd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    hd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    hd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    hd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    hd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    hd(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    hd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    hd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    hd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    hd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    hd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    hd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    hd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    hd(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    hd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    hd(f, d[4], d[2], b * 12);
    return e;
  }
  function sp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = 0.3;
    bd(e, a * 98, a * 99, a * 100);
    hd(e, c[0]);
    e.globalAlpha = 0.5;
    bd(e, a * 98, a * 99, a * 90);
    hd(e, c[1]);
    return d;
  }
  function hp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 144;
    d.height = a * 280;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    hd(e, c[1], c[2], a * 6);
    return d;
  }
  ;
  function gp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 163;
    d.height = a * 163;
    e.save();
    e.translate(a * 82.5, a * 81.1015625);
    e.rotate(0);
    gd(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
    e.restore();
    hd(e, c[1]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    gd(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    gd(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    hd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    gd(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    gd(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    hd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    gd(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    gd(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    hd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    gd(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    gd(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    hd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    gd(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    gd(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    hd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    gd(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    gd(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    hd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    gd(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    gd(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    hd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    gd(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    gd(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    hd(e, c[2], c[3], a * 3);
    return d;
  }
  function up(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 105;
    d.height = a * 144;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -5, a * 0);
    e.save();
    e.translate(a * 52.5, a * 91.5);
    gd(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    hd(e, c[0], c[0], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    gd(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    hd(e, c[0], c[0], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    gd(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    hd(e, c[0], c[0], a * 4);
    e.translate(a * 5, a * 0);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 91.5);
    gd(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    hd(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    gd(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    hd(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    gd(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    hd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 60.5);
    e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
    e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
    e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
    e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
    e.closePath();
    hd(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 40.5);
    e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
    e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
    e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
    e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
    e.closePath();
    hd(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 33.5);
    e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
    e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
    e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
    e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
    e.closePath();
    hd(e, c[9], c[8], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 47.5);
    e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
    e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
    e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
    e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
    e.closePath();
    hd(e, c[11], c[10], a * 3);
    return d;
  }
  function bp() {
    Ⲇⵠ[814] = hu(1, [{
      f: Oc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[815] = Ⲇⵠ[814];
    Ⲇⵠ[955] = [];
    Ⲇⵠ[955][0] = ᐃΔ.ⵠΔᐃⵠᐃᐃΔ;
    Ⲇⵠ[955][1] = ᐃΔ.ⵠΔΔΔΔΔᐃ;
    Ⲇⵠ[955][2] = ᐃΔ.ⲆⵠᐃⵠᐃΔⲆ;
    Ⲇⵠ[956] = Ⲇⵠ[955];
    Ⲇⵠ[972] = [];
    Ⲇⵠ[972][0] = ᐃΔ.ᐃⵠᐃⵠⵠΔΔ;
    Ⲇⵠ[972][1] = ᐃΔ.ΔᐃᐃⲆᐃⲆᐃ;
    Ⲇⵠ[972][2] = ᐃΔ.ⵠᐃᐃⵠⲆΔⵠ;
    Ⲇⵠ[973] = Ⲇⵠ[972];
    Ⲇⵠ[987] = [];
    Ⲇⵠ[987][0] = ᐃΔ.ΔⵠᐃΔⲆᐃΔ;
    Ⲇⵠ[987][1] = ᐃΔ.ⲆΔⲆⲆᐃΔΔ;
    Ⲇⵠ[987][2] = ᐃΔ.ᐃⲆᐃⵠⲆᐃΔ;
    Ⲇⵠ[988] = Ⲇⵠ[987];
    Ⲇⵠ[1154] = [];
    Ⲇⵠ[1154][0] = ᐃΔ.ⲆⵠᐃⵠΔⲆᐃ;
    Ⲇⵠ[1154][1] = ᐃΔ.ᐃⵠⲆΔΔⲆⵠ;
    Ⲇⵠ[1154][2] = ᐃΔ.ⲆᐃᐃᐃᐃᐃΔ;
    Ⲇⵠ[1155] = Ⲇⵠ[1154];
    Ⲇⵠ[965] = [];
    Ⲇⵠ[965][0] = ᐃΔ.ⲆⵠⲆᐃΔⲆΔ;
    Ⲇⵠ[965][1] = ᐃΔ.ᐃΔᐃᐃⲆⵠᐃ;
    Ⲇⵠ[965][2] = ᐃΔ.ⲆᐃΔᐃΔᐃⲆ;
    Ⲇⵠ[974] = Ⲇⵠ[965];
    Ⲇⵠ[1028] = [];
    Ⲇⵠ[1028][0] = ᐃΔ.ᐃⲆⵠΔᐃⵠⲆ;
    Ⲇⵠ[1028][1] = ᐃΔ.ⲆⲆⵠᐃⵠΔΔ;
    Ⲇⵠ[1028][2] = ᐃΔ.ⲆⲆᐃⲆΔᐃᐃ;
    Ⲇⵠ[1029] = Ⲇⵠ[1028];
    Ⲇⵠ[1027] = Ⲇⵠ[1028];
    Ⲇⵠ[712] = [];
    Ⲇⵠ[712][0] = ᐃΔ.ⵠΔᐃⵠΔⲆᐃΔⵠ;
    Ⲇⵠ[712][1] = ᐃΔ.ΔⵠⲆᐃⲆΔᐃⲆΔ;
    Ⲇⵠ[712][2] = ᐃΔ.ⲆⵠΔⵠⲆⲆᐃⵠᐃ;
    Ⲇⵠ[713] = Ⲇⵠ[712];
    Ⲇⵠ[714] = Ⲇⵠ[712];
    Ⲇⵠ[1031] = [];
    Ⲇⵠ[1031][0] = ᐃΔ.ᐃᐃᐃⲆⲆⲆΔ;
    Ⲇⵠ[1031][1] = ᐃΔ.ΔΔⵠᐃⵠⲆΔ;
    Ⲇⵠ[1031][2] = ᐃΔ.ᐃΔⵠⵠΔⵠⵠ;
    Ⲇⵠ[1032] = Ⲇⵠ[1031];
    Ⲇⵠ[1030] = Ⲇⵠ[1031];
    Ⲇⵠ[423] = [];
    Ⲇⵠ[423][0] = ᐃΔ.ᐃⵠᐃⲆΔⲆⲆ;
    Ⲇⵠ[423][1] = ᐃΔ.ΔᐃⲆΔᐃΔΔ;
    Ⲇⵠ[423][2] = ᐃΔ.ᐃⵠᐃΔΔⵠΔ;
    Ⲇⵠ[425] = Ⲇⵠ[423];
    Ⲇⵠ[424] = Ⲇⵠ[423];
    Ⲇⵠ[1233] = [];
    Ⲇⵠ[1233][0] = ᐃΔ.ᐃⵠⲆΔⵠⲆⵠ;
    Ⲇⵠ[1233][1] = ᐃΔ.ⵠᐃᐃⵠᐃⵠⲆ;
    Ⲇⵠ[1233][2] = ᐃΔ.ⲆΔᐃΔⲆⵠᐃ;
    Ⲇⵠ[1234] = Ⲇⵠ[1233];
    Ⲇⵠ[1230] = [];
    Ⲇⵠ[1230][0] = ᐃΔ.ᐃⲆΔᐃΔⲆΔ;
    Ⲇⵠ[1230][1] = ᐃΔ.ᐃⲆᐃΔⲆⲆⵠ;
    Ⲇⵠ[1230][2] = ᐃΔ.ⵠⲆⲆⲆⲆᐃᐃ;
    Ⲇⵠ[1232] = Ⲇⵠ[1230];
    Ⲇⵠ[1231] = Ⲇⵠ[1230];
    Ⲇⵠ[569] = [];
    Ⲇⵠ[569][0] = ᐃΔ.ᐃΔⲆᐃⵠᐃΔ;
    Ⲇⵠ[569][1] = ᐃΔ.ᐃⵠᐃΔⲆΔΔ;
    Ⲇⵠ[569][2] = ᐃΔ.ⲆΔᐃⲆⵠⵠⲆ;
    Ⲇⵠ[571] = Ⲇⵠ[569];
    Ⲇⵠ[570] = Ⲇⵠ[569];
    Ⲇⵠ[1166] = [];
    Ⲇⵠ[1166][0] = ᐃΔ.ⲆΔΔⵠᐃᐃΔ;
    Ⲇⵠ[1166][1] = ᐃΔ.ⵠⲆᐃⵠⲆΔⲆⵠΔ;
    Ⲇⵠ[1166][2] = ᐃΔ.ⵠⲆᐃΔᐃⲆⲆⲆᐃ;
    Ⲇⵠ[1167] = Ⲇⵠ[1166];
    Ⲇⵠ[1168] = Ⲇⵠ[1166];
    Ⲇⵠ[572] = [];
    Ⲇⵠ[572][0] = ᐃΔ.ⵠᐃⵠⲆⵠΔᐃⲆΔ;
    Ⲇⵠ[572][1] = ᐃΔ.ΔⵠΔᐃⵠⲆᐃᐃⲆ;
    Ⲇⵠ[572][2] = ᐃΔ.ⲆΔΔⵠⲆᐃΔᐃⲆ;
    Ⲇⵠ[574] = Ⲇⵠ[572];
    Ⲇⵠ[573] = Ⲇⵠ[572];
    Ⲇⵠ[1169] = [];
    Ⲇⵠ[1169][0] = ᐃΔ.ΔΔⵠⵠᐃΔⲆⵠⲆ;
    Ⲇⵠ[1169][1] = ᐃΔ.ᐃⵠⲆⵠⲆⲆᐃⵠᐃ;
    Ⲇⵠ[1169][2] = ᐃΔ.ΔᐃⵠᐃΔᐃᐃᐃⵠ;
    Ⲇⵠ[1170] = Ⲇⵠ[1169];
    Ⲇⵠ[1171] = Ⲇⵠ[1169];
    Ⲇⵠ[575] = [];
    Ⲇⵠ[575][0] = ᐃΔ.ΔᐃᐃⵠΔⲆᐃⲆⵠ;
    Ⲇⵠ[575][1] = ᐃΔ.ⲆⲆⲆᐃⲆⵠΔᐃⵠ;
    Ⲇⵠ[575][2] = ᐃΔ.ⲆⵠⲆⲆΔⲆⲆⲆⵠ;
    Ⲇⵠ[577] = Ⲇⵠ[575];
    Ⲇⵠ[576] = Ⲇⵠ[575];
    Ⲇⵠ[1172] = [];
    Ⲇⵠ[1172][0] = ᐃΔ.ⵠⲆⵠΔⲆⲆⲆᐃΔ;
    Ⲇⵠ[1172][1] = ᐃΔ.ⵠⲆⵠΔᐃⵠⲆᐃΔ;
    Ⲇⵠ[1172][2] = ᐃΔ.ΔΔΔᐃⵠⵠᐃⲆΔ;
    Ⲇⵠ[1173] = Ⲇⵠ[1172];
    Ⲇⵠ[1174] = Ⲇⵠ[1172];
    Ⲇⵠ[578] = [];
    Ⲇⵠ[578][0] = ᐃΔ.ⲆⲆⲆᐃᐃΔⵠⲆⲆ;
    Ⲇⵠ[578][1] = ᐃΔ.ᐃⵠⲆⲆΔᐃⵠⵠᐃ;
    Ⲇⵠ[578][2] = ᐃΔ.ΔΔⲆᐃᐃⲆⵠⵠⵠ;
    Ⲇⵠ[580] = Ⲇⵠ[578];
    Ⲇⵠ[579] = Ⲇⵠ[578];
    Ⲇⵠ[1175] = [];
    Ⲇⵠ[1175][0] = ᐃΔ.ⵠᐃᐃⵠⲆⵠⲆᐃΔ;
    Ⲇⵠ[1175][1] = ᐃΔ.ΔΔⲆΔΔΔᐃⵠⵠ;
    Ⲇⵠ[1175][2] = ᐃΔ.ΔⲆⲆΔᐃⵠⲆᐃⲆ;
    Ⲇⵠ[1176] = Ⲇⵠ[1175];
    Ⲇⵠ[1177] = Ⲇⵠ[1175];
    Ⲇⵠ[581] = [];
    Ⲇⵠ[581][0] = ᐃΔ.ᐃΔΔᐃⲆᐃᐃᐃⲆ;
    Ⲇⵠ[581][1] = ᐃΔ.ⵠᐃΔⵠΔᐃΔⲆᐃ;
    Ⲇⵠ[581][2] = ᐃΔ.ΔΔⵠΔⲆⲆᐃᐃᐃ;
    Ⲇⵠ[583] = Ⲇⵠ[581];
    Ⲇⵠ[582] = Ⲇⵠ[581];
    Ⲇⵠ[1178] = [];
    Ⲇⵠ[1178][0] = ᐃΔ.ⲆⵠⵠⵠⵠᐃΔⲆⵠ;
    Ⲇⵠ[1178][1] = ᐃΔ.ΔⵠΔΔΔⲆᐃᐃΔ;
    Ⲇⵠ[1178][2] = ᐃΔ.ᐃᐃΔᐃᐃⲆᐃΔΔ;
    Ⲇⵠ[1179] = Ⲇⵠ[1178];
    Ⲇⵠ[1180] = Ⲇⵠ[1178];
    Ⲇⵠ[584] = [];
    Ⲇⵠ[584][0] = ᐃΔ.ⲆⵠᐃⵠⵠᐃⵠⲆΔ;
    Ⲇⵠ[584][1] = ᐃΔ.ᐃⲆⲆⵠⲆⲆΔᐃΔ;
    Ⲇⵠ[584][2] = ᐃΔ.ΔΔⲆⲆᐃⲆΔΔᐃ;
    Ⲇⵠ[586] = Ⲇⵠ[584];
    Ⲇⵠ[585] = Ⲇⵠ[584];
    Ⲇⵠ[1181] = [];
    Ⲇⵠ[1181][0] = ᐃΔ.ΔⲆⲆⵠΔⲆⲆⵠΔ;
    Ⲇⵠ[1181][1] = ᐃΔ.ⲆⵠᐃⲆᐃⲆⲆⲆᐃ;
    Ⲇⵠ[1181][2] = ᐃΔ.ⲆⲆΔᐃᐃΔⵠᐃⲆ;
    Ⲇⵠ[1182] = Ⲇⵠ[1181];
    Ⲇⵠ[1183] = Ⲇⵠ[1181];
    Ⲇⵠ[587] = [];
    Ⲇⵠ[587][0] = ᐃΔ.ⲆⵠᐃⲆⲆⵠⵠⲆⲆ;
    Ⲇⵠ[587][1] = ᐃΔ.ᐃΔᐃⵠⲆΔⵠⵠⵠ;
    Ⲇⵠ[587][2] = ᐃΔ.ⵠΔⲆΔⲆᐃⲆⵠⲆ;
    Ⲇⵠ[589] = Ⲇⵠ[587];
    Ⲇⵠ[588] = Ⲇⵠ[587];
    Ⲇⵠ[1184] = [];
    Ⲇⵠ[1184][0] = ᐃΔ.ΔⵠᐃᐃᐃⵠᐃΔᐃ;
    Ⲇⵠ[1184][1] = ᐃΔ.ⲆΔⵠⲆⲆⲆᐃⲆⲆ;
    Ⲇⵠ[1184][2] = ᐃΔ.ⵠΔᐃⲆᐃΔⲆⵠΔ;
    Ⲇⵠ[1185] = Ⲇⵠ[1184];
    Ⲇⵠ[1186] = Ⲇⵠ[1184];
    Ⲇⵠ[1257] = [];
    Ⲇⵠ[1257][0] = ᐃΔ.ⵠΔⵠⲆⲆⵠⵠⵠⵠ;
    Ⲇⵠ[1257][1] = ᐃΔ.ᐃⲆᐃᐃⵠΔⵠᐃΔ;
    Ⲇⵠ[1257][2] = ᐃΔ.ⵠΔΔⲆⵠⵠᐃⲆⵠ;
    Ⲇⵠ[1258] = Ⲇⵠ[1257];
    Ⲇⵠ[1256] = Ⲇⵠ[1257];
    Ⲇⵠ[1260] = [];
    Ⲇⵠ[1260][0] = ᐃΔ.ⵠⲆⵠΔΔΔⲆᐃⲆ;
    Ⲇⵠ[1260][1] = ᐃΔ.ΔⲆⲆΔᐃΔⲆᐃᐃ;
    Ⲇⵠ[1260][2] = ᐃΔ.ᐃᐃᐃⲆⲆⲆⵠΔᐃ;
    Ⲇⵠ[1261] = Ⲇⵠ[1260];
    Ⲇⵠ[1259] = Ⲇⵠ[1260];
    Ⲇⵠ[1263] = [];
    Ⲇⵠ[1263][0] = ᐃΔ.ⵠΔᐃᐃⵠᐃΔⲆᐃ;
    Ⲇⵠ[1263][1] = ᐃΔ.ⵠⵠⵠΔⵠⲆΔⲆⵠ;
    Ⲇⵠ[1263][2] = ᐃΔ.ΔⲆⵠΔᐃΔᐃⲆᐃ;
    Ⲇⵠ[1264] = Ⲇⵠ[1263];
    Ⲇⵠ[1262] = Ⲇⵠ[1263];
    Ⲇⵠ[1266] = [];
    Ⲇⵠ[1266][0] = ᐃΔ.ⵠⲆⲆΔΔΔⵠᐃᐃ;
    Ⲇⵠ[1266][1] = ᐃΔ.ⵠΔΔΔⵠⲆⲆⵠᐃ;
    Ⲇⵠ[1266][2] = ᐃΔ.ⵠⵠᐃⵠⵠⵠᐃⲆⲆ;
    Ⲇⵠ[1267] = Ⲇⵠ[1266];
    Ⲇⵠ[1265] = Ⲇⵠ[1266];
    Ⲇⵠ[1269] = [];
    Ⲇⵠ[1269][0] = ᐃΔ.ⵠⲆⲆᐃᐃᐃΔⲆᐃ;
    Ⲇⵠ[1269][1] = ᐃΔ.ᐃⵠΔⵠΔⲆⵠⲆᐃ;
    Ⲇⵠ[1269][2] = ᐃΔ.ⲆⲆΔᐃΔⲆⲆᐃⲆ;
    Ⲇⵠ[1270] = Ⲇⵠ[1269];
    Ⲇⵠ[1268] = Ⲇⵠ[1269];
    Ⲇⵠ[1272] = [];
    Ⲇⵠ[1272][0] = ᐃΔ.ⵠⲆᐃᐃⵠᐃⵠⵠᐃ;
    Ⲇⵠ[1272][1] = ᐃΔ.ⲆⲆⵠᐃⲆΔᐃⲆᐃ;
    Ⲇⵠ[1272][2] = ᐃΔ.ⵠΔᐃⲆΔⵠᐃᐃᐃ;
    Ⲇⵠ[1273] = Ⲇⵠ[1272];
    Ⲇⵠ[1271] = Ⲇⵠ[1272];
    Ⲇⵠ[1239] = [];
    Ⲇⵠ[1239][0] = ᐃΔ.ᐃⵠΔΔᐃᐃⲆⵠΔ;
    Ⲇⵠ[1239][1] = ᐃΔ.ΔⵠⵠⵠⲆᐃΔⵠⲆ;
    Ⲇⵠ[1239][2] = ᐃΔ.ᐃⵠᐃⲆΔⲆᐃΔΔ;
    Ⲇⵠ[1240] = Ⲇⵠ[1239];
    Ⲇⵠ[1238] = Ⲇⵠ[1239];
    Ⲇⵠ[1242] = [];
    Ⲇⵠ[1242][0] = ᐃΔ.ᐃⵠΔⲆⲆᐃⲆΔⲆ;
    Ⲇⵠ[1242][1] = ᐃΔ.ΔⵠΔⲆᐃΔΔⲆΔ;
    Ⲇⵠ[1242][2] = ᐃΔ.ᐃΔⵠⵠⲆⲆⲆΔᐃ;
    Ⲇⵠ[1243] = Ⲇⵠ[1242];
    Ⲇⵠ[1241] = Ⲇⵠ[1242];
    Ⲇⵠ[1245] = [];
    Ⲇⵠ[1245][0] = ᐃΔ.ⵠⵠⲆᐃΔΔⵠΔⲆ;
    Ⲇⵠ[1245][1] = ᐃΔ.ⲆⲆᐃⵠᐃⲆΔᐃⵠ;
    Ⲇⵠ[1245][2] = ᐃΔ.ⲆⲆΔⲆⵠⵠⲆᐃⲆ;
    Ⲇⵠ[1246] = Ⲇⵠ[1245];
    Ⲇⵠ[1244] = Ⲇⵠ[1245];
    Ⲇⵠ[1248] = [];
    Ⲇⵠ[1248][0] = ᐃΔ.ⲆΔⵠΔⵠᐃⲆⵠⵠ;
    Ⲇⵠ[1248][1] = ᐃΔ.ΔⵠΔΔΔᐃⵠΔᐃ;
    Ⲇⵠ[1248][2] = ᐃΔ.ⲆⲆⵠᐃΔⵠᐃⲆⵠ;
    Ⲇⵠ[1249] = Ⲇⵠ[1248];
    Ⲇⵠ[1247] = Ⲇⵠ[1248];
    Ⲇⵠ[1251] = [];
    Ⲇⵠ[1251][0] = ᐃΔ.ᐃᐃⲆⵠⲆΔⲆΔⲆ;
    Ⲇⵠ[1251][1] = ᐃΔ.ΔΔᐃᐃᐃⵠᐃⲆⲆ;
    Ⲇⵠ[1251][2] = ᐃΔ.ⲆΔⵠᐃᐃΔᐃⲆⲆ;
    Ⲇⵠ[1252] = Ⲇⵠ[1251];
    Ⲇⵠ[1250] = Ⲇⵠ[1251];
    Ⲇⵠ[1254] = [];
    Ⲇⵠ[1254][0] = ᐃΔ.ⲆⲆᐃᐃⵠⵠΔⲆᐃ;
    Ⲇⵠ[1254][1] = ᐃΔ.ᐃᐃΔᐃᐃⲆᐃᐃⵠ;
    Ⲇⵠ[1254][2] = ᐃΔ.ⵠᐃᐃΔᐃⲆⵠΔΔ;
    Ⲇⵠ[1255] = Ⲇⵠ[1254];
    Ⲇⵠ[1253] = Ⲇⵠ[1254];
    Ⲇⵠ[1227] = [];
    Ⲇⵠ[1227][0] = ᐃΔ.ᐃⲆᐃⲆΔⲆⵠ;
    Ⲇⵠ[1227][1] = ᐃΔ.ⲆⲆᐃΔᐃⵠⵠ;
    Ⲇⵠ[1227][2] = ᐃΔ.ⲆᐃᐃᐃᐃⲆΔ;
    Ⲇⵠ[1229] = Ⲇⵠ[1227];
    Ⲇⵠ[1228] = Ⲇⵠ[1227];
    Ⲇⵠ[1187] = [];
    Ⲇⵠ[1187][0] = ᐃΔ.ⵠⵠⲆᐃᐃᐃΔ;
    Ⲇⵠ[1187][1] = ᐃΔ.ᐃᐃΔⲆΔΔᐃ;
    Ⲇⵠ[1187][2] = ᐃΔ.ᐃΔⲆᐃⲆᐃⵠ;
    Ⲇⵠ[1188] = Ⲇⵠ[1187];
    Ⲇⵠ[sh.ⲆⲆΔⵠⲆΔⵠᐃᐃ] = Ⲇⵠ[1187];
    Ⲇⵠ[840] = hu(1, [{
      f: yd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
    }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[841] = Ⲇⵠ[840];
    Ⲇⵠ[850] = hu(1, [{
      f: Hc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[851] = Ⲇⵠ[850];
    Ⲇⵠ[644] = hu(1, [{
      f: Zt,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }, {
      f: Vt,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }, {
      f: Ut,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[643] = Ⲇⵠ[644];
    Ⲇⵠ[639] = hu(1, [{
      f: Zd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[800] = hu(1, [{
      f: Mc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
    }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[799] = Ⲇⵠ[800];
    Ⲇⵠ[631] = hu(1, [{
      f: Lu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[632] = Ⲇⵠ[631];
    Ⲇⵠ[311] = hu(1, [{
      f: Lu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#493d36", "#332b28"]
    }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[284] = Ⲇⵠ[311];
    Ⲇⵠ[808] = hu(1, [{
      f: Lu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#c67933", "#b17238"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[809] = Ⲇⵠ[808];
    Ⲇⵠ[834] = hu(1, [{
      f: Lu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e8e8e8", "#bbbbbb"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[835] = Ⲇⵠ[834];
    Ⲇⵠ[845] = hu(1, [{
      f: Lu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#328a56", "#449573"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[846] = Ⲇⵠ[845];
    Ⲇⵠ[949] = hu(1, [{
      f: Lu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#c98e2f", "#a36b11"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[950] = Ⲇⵠ[949];
    Ⲇⵠ[951] = Ⲇⵠ[949];
    Ⲇⵠ[966] = hu(1, [{
      f: Lu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#13a56d", "#098a58"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[967] = Ⲇⵠ[966];
    Ⲇⵠ[968] = Ⲇⵠ[966];
    Ⲇⵠ[981] = hu(1, [{
      f: Lu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#3a8214", "#4a9c1e"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[982] = Ⲇⵠ[981];
    Ⲇⵠ[983] = Ⲇⵠ[981];
    Ⲇⵠ[959] = hu(1, [{
      f: Lu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#b22419", "#99110e"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[960] = Ⲇⵠ[959];
    Ⲇⵠ[961] = Ⲇⵠ[959];
    Ⲇⵠ[309] = hu(1, [{
      f: fu,
      x: -2,
      y: -2,
      a: 1,
      r: -Math.PI / 7,
      c: ["#4d2d14", "#432516"]
    }, {
      f: du,
      x: -2,
      y: -2,
      a: 1,
      r: -Math.PI / 7,
      c: ["#efd435", "#ec8d35", "#e96132"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[302] = Ⲇⵠ[309];
    Ⲇⵠ[328] = hu(1, [{
      f: gu,
      x: -2,
      y: -1,
      a: 1,
      r: -Math.PI / 7,
      c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
    }, {
      f: du,
      x: -2,
      y: -1,
      a: 1,
      r: -Math.PI / 7,
      c: ["#efd435", "#ec8d35", "#e96132"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[327] = Ⲇⵠ[328];
    Ⲇⵠ[860] = hu(1, [{
      f: vu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
    }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[865] = hu(1, [{
      f: Iu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[829] = hu(1, [{
      f: ou,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[261] = hu(1, [{
      f: wu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[292] = hu(1, [{
      f: Du,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[293] = hu(1, [{
      f: Cu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[455] = hu(1, [{
      f: Fu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[313] = hu(1, [{
      f: ru,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[312] = hu(1, [{
      f: ru,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[258] = hu(1, [{
      f: ru,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[296] = hu(1, [{
      f: ru,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[458] = hu(1, [{
      f: ru,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[1017] = [];
    Ⲇⵠ[1017][0] = ᐃΔ.ⵠⵠⲆᐃΔᐃᐃ;
    Ⲇⵠ[1017][1] = ᐃΔ.ᐃⵠⲆⵠⵠⲆⵠ;
    Ⲇⵠ[1017][2] = ᐃΔ.ⵠᐃⵠⲆΔⲆΔ;
    Ⲇⵠ[1019] = Ⲇⵠ[1017];
    Ⲇⵠ[1018] = Ⲇⵠ[1017];
    Ⲇⵠ[315] = hu(1, [{
      f: am,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#252B28", "#58645F", "#75827D"]
    }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[297] = hu(1, [{
      f: Tu,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#282823", "#877c2d", "#c4bc51"]
    }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[298] = hu(1, [{
      f: rm,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#232828", "#3fc9c9", "#74ede6"]
    }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[316] = hu(1, [{
      f: fu,
      x: 0,
      y: -5,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[830] = Ⲇⵠ[829];
    Ⲇⵠ[254] = Ⲇⵠ[261];
    Ⲇⵠ[290] = Ⲇⵠ[292];
    Ⲇⵠ[291] = Ⲇⵠ[293];
    Ⲇⵠ[456] = Ⲇⵠ[455];
    Ⲇⵠ[314] = Ⲇⵠ[313];
    Ⲇⵠ[256] = Ⲇⵠ[312];
    Ⲇⵠ[295] = Ⲇⵠ[258];
    Ⲇⵠ[257] = Ⲇⵠ[296];
    Ⲇⵠ[460] = Ⲇⵠ[458];
    Ⲇⵠ[277] = hu(1, [{
      f: Id,
      x: 0,
      y: 0,
      a: 1,
      r: 0
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[310] = hu(1, [{
      f: Nd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
    }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[262] = Ⲇⵠ[310];
    Ⲇⵠ[329] = hu(1, [{
      f: mm,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[263] = Ⲇⵠ[329];
    Ⲇⵠ[331] = hu(1, [{
      f: Jm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[332] = Ⲇⵠ[331];
    Ⲇⵠ[492] = hu(1, [{
      f: mm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[493] = Ⲇⵠ[492];
    Ⲇⵠ[330] = hu(1, [{
      f: Tm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[265] = Ⲇⵠ[330];
    Ⲇⵠ[317] = hu(1, [{
      f: ym,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
    }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[318] = Ⲇⵠ[317];
    Ⲇⵠ[319] = hu(1, [{
      f: ic,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[320] = Ⲇⵠ[319];
    Ⲇⵠ[362] = hu(1, [{
      f: Jc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[363] = Ⲇⵠ[362];
    Ⲇⵠ[364] = hu(1, [{
      f: Jc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[365] = Ⲇⵠ[364];
    Ⲇⵠ[361] = hu(1, [{
      f: Tc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[360] = Ⲇⵠ[361];
    Ⲇⵠ[495] = hu(1, [{
      f: Tc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[496] = Ⲇⵠ[495];
    Ⲇⵠ[335] = hu(1, [{
      f: Mm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[268] = Ⲇⵠ[335];
    Ⲇⵠ[372] = hu(1, [{
      f: Pm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[371] = Ⲇⵠ[372];
    Ⲇⵠ[499] = hu(1, [{
      f: Pm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[498] = Ⲇⵠ[499];
    Ⲇⵠ[375] = hu(1, [{
      f: um,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[374] = Ⲇⵠ[375];
    Ⲇⵠ[378] = hu(1, [{
      f: dm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[377] = Ⲇⵠ[378];
    Ⲇⵠ[337] = hu(1, [{
      f: gc,
      x: 0,
      y: 2,
      a: 1,
      r: 0,
      c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[338] = Ⲇⵠ[337];
    Ⲇⵠ[300] = hu(1, [{
      f: qd,
      x: 0,
      y: -3,
      a: 1,
      r: 0,
      c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
    }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[323] = hu(1, [{
      f: qd,
      x: 0,
      y: -3,
      a: 1,
      r: 0,
      c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
    }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[325] = Ⲇⵠ[323];
    Ⲇⵠ[305] = hu(1, [{
      f: $t,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#cec0c4", "#ffffff", "#6d6768"]
    }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[513] = hu(1, [{
      f: $t,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#d4e9ec", "#37b1d7", "#506c71"]
    }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[515] = Ⲇⵠ[513];
    Ⲇⵠ[368] = hu(1, [{
      f: rc,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#ef96be", "#ffffff"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[1162] = hu(1, [{
      f: rc,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#55423e", "#ffffff"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[178] = hu(1, [{
      f: Am,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[179] = hu(1, [{
      f: Am,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[624] = hu(1, [{
      f: rc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#201851", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[393] = hu(1, [{
      f: rc,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#231f20", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[505] = hu(1, [{
      f: rc,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#ffffff", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[369] = hu(1, [{
      f: Ec,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[370] = Ⲇⵠ[369];
    Ⲇⵠ[381] = hu(1, [{
      f: bm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[380] = Ⲇⵠ[381];
    Ⲇⵠ[502] = hu(1, [{
      f: ac,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[503] = Ⲇⵠ[502];
    Ⲇⵠ[880] = hu(1, [{
      f: mu,
      x: 0,
      y: 5,
      a: 1,
      r: 0,
      c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[881] = Ⲇⵠ[880];
    Ⲇⵠ[882] = hu(1, [{
      f: nu,
      x: 0,
      y: 5,
      a: 1,
      r: 0,
      c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[883] = Ⲇⵠ[882];
    Ⲇⵠ[303] = hu(1, [{
      f: au,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#ffffff", "#cec0c4"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[304] = Ⲇⵠ[303];
    Ⲇⵠ[392] = [];
    Ⲇⵠ[392][0] = ᐃΔ.ΔΔᐃᐃⵠⵠᐃ;
    Ⲇⵠ[392][1] = ᐃΔ.ΔᐃⵠᐃⲆᐃᐃ;
    Ⲇⵠ[392][2] = ᐃΔ.ⵠᐃⲆΔⵠⲆΔ;
    Ⲇⵠ[367] = Ⲇⵠ[392];
    Ⲇⵠ[975] = [];
    Ⲇⵠ[975][0] = ᐃΔ.ᐃᐃΔΔΔᐃΔ;
    Ⲇⵠ[975][1] = ᐃΔ.ⲆⵠⲆΔᐃᐃᐃ;
    Ⲇⵠ[975][2] = ᐃΔ.ⵠⲆⲆᐃⵠΔᐃ;
    Ⲇⵠ[977] = Ⲇⵠ[975];
    Ⲇⵠ[976] = Ⲇⵠ[975];
    Ⲇⵠ[978] = [];
    Ⲇⵠ[978][0] = ᐃΔ.ᐃᐃᐃⲆⲆⲆⲆ;
    Ⲇⵠ[978][1] = ᐃΔ.ᐃⵠⵠΔᐃΔᐃ;
    Ⲇⵠ[978][2] = ᐃΔ.ᐃⲆⲆⲆᐃᐃⲆ;
    Ⲇⵠ[980] = Ⲇⵠ[978];
    Ⲇⵠ[979] = Ⲇⵠ[978];
    Ⲇⵠ[1158] = [];
    Ⲇⵠ[1158][0] = ᐃΔ.ⵠᐃⲆᐃᐃⲆΔ;
    Ⲇⵠ[1158][1] = ᐃΔ.ⵠᐃⲆᐃᐃⲆΔ;
    Ⲇⵠ[1158][2] = ᐃΔ.ⵠᐃⲆᐃᐃⲆΔ;
    Ⲇⵠ[1159] = Ⲇⵠ[1158];
    Ⲇⵠ[426] = [];
    Ⲇⵠ[426][0] = ᐃΔ.ⵠΔⵠᐃΔⵠⵠ;
    Ⲇⵠ[426][1] = ᐃΔ.ⲆⲆΔⵠΔᐃᐃ;
    Ⲇⵠ[426][2] = ᐃΔ.ⲆⲆᐃΔᐃΔⲆ;
    Ⲇⵠ[427] = Ⲇⵠ[426];
    Ⲇⵠ[428] = Ⲇⵠ[426];
    Ⲇⵠ[1160] = [];
    Ⲇⵠ[1160][0] = ᐃΔ.ᐃΔᐃⲆⲆΔⲆ;
    Ⲇⵠ[1160][1] = ᐃΔ.ᐃΔᐃⲆⲆΔⲆ;
    Ⲇⵠ[1160][2] = ᐃΔ.ᐃΔᐃⲆⲆΔⲆ;
    Ⲇⵠ[1161] = Ⲇⵠ[1160];
    Ⲇⵠ[1236] = [];
    Ⲇⵠ[1236][0] = ᐃΔ.ᐃⲆΔᐃⲆⵠᐃᐃΔ;
    Ⲇⵠ[1236][1] = ᐃΔ.ᐃⲆⲆⵠΔᐃᐃⲆᐃ;
    Ⲇⵠ[1236][2] = ᐃΔ.ⵠᐃΔⲆΔⵠΔΔΔ;
    Ⲇⵠ[1235] = Ⲇⵠ[1236];
    Ⲇⵠ[1237] = Ⲇⵠ[1236];
    Ⲇⵠ[991] = [];
    Ⲇⵠ[991][0] = ᐃΔ.ⲆΔⵠΔⲆᐃΔ;
    Ⲇⵠ[991][1] = ᐃΔ.ⲆΔⲆᐃⵠⵠᐃ;
    Ⲇⵠ[991][2] = ᐃΔ.ⲆⲆΔΔⵠⵠᐃ;
    Ⲇⵠ[990] = Ⲇⵠ[991];
    Ⲇⵠ[992] = Ⲇⵠ[991];
    Ⲇⵠ[994] = [];
    Ⲇⵠ[994][0] = ᐃΔ.ⵠΔΔᐃΔᐃⵠ;
    Ⲇⵠ[994][1] = ᐃΔ.ᐃⵠⵠΔⲆΔⵠ;
    Ⲇⵠ[994][2] = ᐃΔ.ⲆⵠⲆⲆᐃΔᐃ;
    Ⲇⵠ[993] = Ⲇⵠ[994];
    Ⲇⵠ[995] = Ⲇⵠ[994];
    Ⲇⵠ[997] = [];
    Ⲇⵠ[997][0] = ᐃΔ.ΔᐃⵠᐃᐃΔΔ;
    Ⲇⵠ[997][1] = ᐃΔ.ⵠΔⲆⲆⲆΔΔ;
    Ⲇⵠ[997][2] = ᐃΔ.ΔᐃᐃΔᐃΔΔ;
    Ⲇⵠ[996] = Ⲇⵠ[997];
    Ⲇⵠ[998] = Ⲇⵠ[997];
    Ⲇⵠ[1000] = [];
    Ⲇⵠ[1000][0] = ᐃΔ.ⵠΔΔᐃᐃⲆΔ;
    Ⲇⵠ[1000][1] = ᐃΔ.ⵠⵠᐃⲆΔⲆⵠ;
    Ⲇⵠ[1000][2] = ᐃΔ.ΔⵠⵠΔᐃᐃⵠ;
    Ⲇⵠ[999] = Ⲇⵠ[1000];
    Ⲇⵠ[1001] = Ⲇⵠ[1000];
    Ⲇⵠ[1003] = [];
    Ⲇⵠ[1003][0] = ᐃΔ.ⵠⵠΔⵠⲆⵠᐃ;
    Ⲇⵠ[1003][1] = ᐃΔ.ᐃᐃⵠΔᐃⲆⵠ;
    Ⲇⵠ[1003][2] = ᐃΔ.ΔΔⵠᐃⵠᐃⲆ;
    Ⲇⵠ[1002] = Ⲇⵠ[1003];
    Ⲇⵠ[1004] = Ⲇⵠ[1003];
    Ⲇⵠ[1006] = [];
    Ⲇⵠ[1006][0] = ᐃΔ.ΔⲆΔⲆⲆᐃⵠ;
    Ⲇⵠ[1006][1] = ᐃΔ.ⵠΔᐃᐃᐃᐃⵠ;
    Ⲇⵠ[1006][2] = ᐃΔ.ⲆΔⵠⵠᐃⵠⲆ;
    Ⲇⵠ[1005] = Ⲇⵠ[1006];
    Ⲇⵠ[1007] = Ⲇⵠ[1006];
    Ⲇⵠ[1009] = [];
    Ⲇⵠ[1009][0] = ᐃΔ.ΔᐃΔᐃⲆᐃᐃ;
    Ⲇⵠ[1009][1] = ᐃΔ.ᐃᐃᐃΔᐃᐃⵠ;
    Ⲇⵠ[1009][2] = ᐃΔ.ᐃⲆΔᐃᐃⲆΔ;
    Ⲇⵠ[1008] = Ⲇⵠ[1009];
    Ⲇⵠ[1010] = Ⲇⵠ[1009];
    Ⲇⵠ[1012] = [];
    Ⲇⵠ[1012][0] = ᐃΔ.ⵠⲆⲆⲆⵠΔⵠ;
    Ⲇⵠ[1012][1] = ᐃΔ.ⵠᐃⵠΔᐃΔⲆ;
    Ⲇⵠ[1012][2] = ᐃΔ.ΔⲆⲆⲆᐃᐃΔ;
    Ⲇⵠ[1011] = Ⲇⵠ[1012];
    Ⲇⵠ[1013] = Ⲇⵠ[1012];
    Ⲇⵠ[1015] = [];
    Ⲇⵠ[1015][0] = ᐃΔ.ⵠⲆᐃΔⲆΔᐃ;
    Ⲇⵠ[1015][1] = ᐃΔ.ⲆⲆΔⵠⵠⵠΔ;
    Ⲇⵠ[1015][2] = ᐃΔ.ⵠⵠⵠⵠⲆⲆΔ;
    Ⲇⵠ[1014] = Ⲇⵠ[1015];
    Ⲇⵠ[1016] = Ⲇⵠ[1015];
    Ⲇⵠ[1035] = [];
    Ⲇⵠ[1035][0] = ᐃΔ.ΔⲆᐃΔⲆ;
    Ⲇⵠ[1035][1] = ᐃΔ.ΔⲆᐃΔⲆ;
    Ⲇⵠ[1035][2] = ᐃΔ.ΔⲆᐃΔⲆ;
    Ⲇⵠ[sh.ᐃⵠΔⲆⲆᐃΔⵠᐃ] = Ⲇⵠ[1035];
    Ⲇⵠ[1036] = Ⲇⵠ[1035];
    Ⲇⵠ[1037] = [];
    Ⲇⵠ[1037][0] = ᐃΔ.ᐃⲆⵠᐃᐃ;
    Ⲇⵠ[1037][1] = ᐃΔ.ᐃⲆⵠᐃᐃ;
    Ⲇⵠ[1037][2] = ᐃΔ.ᐃⲆⵠᐃᐃ;
    Ⲇⵠ[sh.ᐃᐃⲆⲆᐃᐃΔᐃΔ] = Ⲇⵠ[1037];
    Ⲇⵠ[1038] = Ⲇⵠ[1037];
    Ⲇⵠ[1039] = [];
    Ⲇⵠ[1039][0] = ᐃΔ.ΔⵠΔⵠⵠ;
    Ⲇⵠ[1039][1] = ᐃΔ.ΔⵠΔⵠⵠ;
    Ⲇⵠ[1039][2] = ᐃΔ.ΔⵠΔⵠⵠ;
    Ⲇⵠ[sh.ᐃΔⲆⵠᐃΔᐃⲆⵠ] = Ⲇⵠ[1039];
    Ⲇⵠ[1040] = Ⲇⵠ[1039];
    Ⲇⵠ[1156] = [];
    Ⲇⵠ[1156][0] = ᐃΔ.ⵠⵠᐃΔⵠ;
    Ⲇⵠ[1156][1] = ᐃΔ.ⵠⵠᐃΔⵠ;
    Ⲇⵠ[1156][2] = ᐃΔ.ⵠⵠᐃΔⵠ;
    Ⲇⵠ[1157] = Ⲇⵠ[1156];
    Ⲇⵠ[1046] = [];
    Ⲇⵠ[1046][0] = ᐃΔ.ᐃⵠⲆᐃΔΔⵠ;
    Ⲇⵠ[1046][1] = ᐃΔ.ΔⲆⵠᐃⵠⵠⲆ;
    Ⲇⵠ[1046][2] = ᐃΔ.ⲆΔⲆⲆⵠΔᐃ;
    Ⲇⵠ[1048] = Ⲇⵠ[1046];
    Ⲇⵠ[1047] = Ⲇⵠ[1046];
    Ⲇⵠ[744] = [];
    Ⲇⵠ[744][0] = ᐃΔ.ᐃᐃⲆⵠⵠΔⵠ;
    Ⲇⵠ[744][1] = ᐃΔ.ΔΔᐃΔⲆⵠᐃ;
    Ⲇⵠ[744][2] = ᐃΔ.ᐃΔⵠⵠᐃⲆΔ;
    Ⲇⵠ[746] = Ⲇⵠ[744];
    Ⲇⵠ[745] = Ⲇⵠ[744];
    Ⲇⵠ[747] = [];
    Ⲇⵠ[747][0] = ᐃΔ.ᐃΔᐃᐃⵠᐃΔ;
    Ⲇⵠ[747][1] = ᐃΔ.ⲆᐃⲆⵠᐃΔⵠ;
    Ⲇⵠ[747][2] = ᐃΔ.ΔⵠᐃΔⲆⵠΔ;
    Ⲇⵠ[749] = Ⲇⵠ[747];
    Ⲇⵠ[748] = Ⲇⵠ[747];
    Ⲇⵠ[1049] = [];
    Ⲇⵠ[1049][0] = ᐃΔ.ᐃΔⲆⵠΔⵠⲆ;
    Ⲇⵠ[1049][1] = ᐃΔ.ᐃⲆᐃⵠΔΔⵠ;
    Ⲇⵠ[1049][2] = ᐃΔ.ⲆⵠᐃΔⲆⲆⲆ;
    Ⲇⵠ[1051] = Ⲇⵠ[1049];
    Ⲇⵠ[1050] = Ⲇⵠ[1049];
    Ⲇⵠ[1189] = [];
    Ⲇⵠ[1189][0] = ᐃΔ.ᐃΔⲆᐃᐃⵠⲆ;
    Ⲇⵠ[1189][1] = ᐃΔ.ⲆᐃᐃΔᐃⵠᐃ;
    Ⲇⵠ[1189][2] = ᐃΔ.ⵠᐃΔⵠⵠᐃⲆ;
    Ⲇⵠ[1191] = Ⲇⵠ[1189];
    Ⲇⵠ[1190] = Ⲇⵠ[1189];
    Ⲇⵠ[1110] = [];
    Ⲇⵠ[1110][0] = ᐃΔ.ⵠⵠᐃⵠⵠⲆΔ;
    Ⲇⵠ[1110][1] = ᐃΔ.ᐃⲆΔⵠᐃΔⲆ;
    Ⲇⵠ[1110][2] = ᐃΔ.ᐃᐃᐃΔⲆⵠΔ;
    Ⲇⵠ[1112] = Ⲇⵠ[1110];
    Ⲇⵠ[1111] = Ⲇⵠ[1110];
    Ⲇⵠ[1131] = [];
    Ⲇⵠ[1131][0] = ᐃΔ.ⵠᐃᐃⵠᐃΔΔⵠᐃ;
    Ⲇⵠ[1131][1] = ᐃΔ.ⵠⵠΔΔᐃᐃⵠⲆᐃ;
    Ⲇⵠ[1131][2] = ᐃΔ.ΔΔΔⲆⲆΔΔΔΔ;
    Ⲇⵠ[1133] = Ⲇⵠ[1131];
    Ⲇⵠ[1132] = Ⲇⵠ[1131];
    Ⲇⵠ[1137] = [];
    Ⲇⵠ[1137][0] = ᐃΔ.ⲆⵠⲆᐃᐃᐃΔ;
    Ⲇⵠ[1137][1] = ᐃΔ.ⵠΔⵠⲆΔⵠⲆ;
    Ⲇⵠ[1137][2] = ᐃΔ.ⵠⵠΔΔᐃⵠⵠ;
    Ⲇⵠ[1138] = Ⲇⵠ[1137];
    Ⲇⵠ[1139] = Ⲇⵠ[1137];
    Ⲇⵠ[1140] = [];
    Ⲇⵠ[1140][0] = ᐃΔ.ⲆⲆⵠⲆΔⵠⵠ;
    Ⲇⵠ[1140][1] = ᐃΔ.ᐃⲆΔΔⵠⲆΔ;
    Ⲇⵠ[1140][2] = ᐃΔ.ΔᐃⲆΔᐃⵠⵠ;
    Ⲇⵠ[1141] = Ⲇⵠ[1140];
    Ⲇⵠ[1142] = Ⲇⵠ[1140];
    Ⲇⵠ[1117] = [];
    Ⲇⵠ[1117][0] = ᐃΔ.ⵠᐃᐃⵠⵠⲆᐃ;
    Ⲇⵠ[1117][1] = ᐃΔ.ᐃⲆⲆΔᐃⵠⵠ;
    Ⲇⵠ[1117][2] = ᐃΔ.ᐃⲆΔⲆⲆⵠΔ;
    Ⲇⵠ[1116] = Ⲇⵠ[1117];
    Ⲇⵠ[1118] = Ⲇⵠ[1117];
    Ⲇⵠ[1080] = [];
    Ⲇⵠ[1080][0] = ᐃΔ.ⵠΔⲆⲆΔⵠⵠ;
    Ⲇⵠ[1080][1] = ᐃΔ.ᐃΔⲆΔⲆᐃⲆ;
    Ⲇⵠ[1080][2] = ᐃΔ.ᐃⲆⵠᐃΔⲆΔ;
    Ⲇⵠ[1082] = Ⲇⵠ[1080];
    Ⲇⵠ[1081] = Ⲇⵠ[1080];
    Ⲇⵠ[1224] = [];
    Ⲇⵠ[1224][0] = ᐃΔ.ΔᐃⲆⲆⲆᐃΔ;
    Ⲇⵠ[1224][1] = ᐃΔ.ⵠⲆⲆⲆⵠᐃᐃ;
    Ⲇⵠ[1224][2] = ᐃΔ.ⵠΔⵠⲆⵠΔⵠ;
    Ⲇⵠ[1226] = Ⲇⵠ[1224];
    Ⲇⵠ[1225] = Ⲇⵠ[1224];
    Ⲇⵠ[1095] = [];
    Ⲇⵠ[1095][0] = ᐃΔ.ⲆⵠⲆⵠᐃΔⵠ;
    Ⲇⵠ[1095][1] = ᐃΔ.ⲆⵠᐃⲆⲆᐃⵠ;
    Ⲇⵠ[1095][2] = ᐃΔ.ᐃΔⵠΔΔⵠᐃ;
    Ⲇⵠ[1097] = Ⲇⵠ[1095];
    Ⲇⵠ[1096] = Ⲇⵠ[1095];
    Ⲇⵠ[717] = hu(1, [{
      f: qc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
    }, {
      f: dp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e4c027"]
    }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[718] = Ⲇⵠ[717];
    Ⲇⵠ[408] = hu(1, [{
      f: Cm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
    }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[409] = Ⲇⵠ[408];
    Ⲇⵠ[907] = hu(1, [{
      f: zm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
    }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[909] = Ⲇⵠ[907];
    Ⲇⵠ[908] = Ⲇⵠ[907];
    Ⲇⵠ[197] = hu(1, [{
      f: pm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
    }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[906] = Ⲇⵠ[197];
    Ⲇⵠ[901] = hu(1, [{
      f: Sm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[900] = Ⲇⵠ[901];
    Ⲇⵠ[899] = Ⲇⵠ[901];
    Ⲇⵠ[401] = hu(1, [{
      f: Qm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[402] = Ⲇⵠ[401];
    Ⲇⵠ[395] = hu(1, [{
      f: Dm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[396] = Ⲇⵠ[395];
    Ⲇⵠ[398] = hu(1, [{
      f: Im,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[399] = Ⲇⵠ[398];
    Ⲇⵠ[404] = hu(1, [{
      f: _m,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[405] = Ⲇⵠ[404];
    Ⲇⵠ[472] = hu(1, [{
      f: Em,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[473] = Ⲇⵠ[472];
    Ⲇⵠ[874] = hu(1, [{
      f: vc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
    }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[876] = Ⲇⵠ[874];
    Ⲇⵠ[875] = Ⲇⵠ[874];
    Ⲇⵠ[477] = hu(1, [{
      f: oc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[478] = Ⲇⵠ[477];
    Ⲇⵠ[709] = hu(1, [{
      f: hp,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#939393", "#5f6061"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[711] = Ⲇⵠ[709];
    Ⲇⵠ[550] = hu(1, [{
      f: up,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[551] = Ⲇⵠ[550];
    Ⲇⵠ[480] = hu(1, [{
      f: oc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[481] = Ⲇⵠ[480];
    Ⲇⵠ[483] = hu(1, [{
      f: oc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[484] = Ⲇⵠ[483];
    Ⲇⵠ[486] = hu(1, [{
      f: oc,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[487] = Ⲇⵠ[486];
    Ⲇⵠ[489] = [];
    Ⲇⵠ[489][0] = ᐃΔ.ⲆⲆⵠΔⵠᐃΔ;
    Ⲇⵠ[489][1] = ᐃΔ.ⵠⵠᐃᐃⵠᐃΔ;
    Ⲇⵠ[489][2] = ᐃΔ.ΔΔⵠᐃᐃᐃⲆ;
    Ⲇⵠ[491] = Ⲇⵠ[489];
    Ⲇⵠ[490] = Ⲇⵠ[489];
    Ⲇⵠ[1195] = [];
    Ⲇⵠ[1195][0] = ᐃΔ.ᐃⵠΔΔΔᐃⲆ;
    Ⲇⵠ[1195][1] = ᐃΔ.ⲆⵠΔᐃᐃⵠΔ;
    Ⲇⵠ[1195][2] = ᐃΔ.ⵠⵠΔΔⲆⲆΔ;
    Ⲇⵠ[1197] = Ⲇⵠ[1195];
    Ⲇⵠ[1196] = Ⲇⵠ[1195];
    Ⲇⵠ[1199] = [];
    Ⲇⵠ[1199][0] = ᐃΔ.ⵠᐃΔⲆᐃᐃⵠ;
    Ⲇⵠ[1199][1] = ᐃΔ.ⲆⲆΔΔΔᐃᐃ;
    Ⲇⵠ[1199][2] = ᐃΔ.ΔΔᐃᐃⲆⵠΔ;
    Ⲇⵠ[1201] = Ⲇⵠ[1199];
    Ⲇⵠ[1200] = Ⲇⵠ[1199];
    Ⲇⵠ[1203] = [];
    Ⲇⵠ[1203][0] = ᐃΔ.ⲆᐃΔΔⲆᐃⵠ;
    Ⲇⵠ[1203][1] = ᐃΔ.ⲆⵠⵠᐃⲆⲆⲆ;
    Ⲇⵠ[1203][2] = ᐃΔ.ⲆΔΔΔⲆⲆⲆ;
    Ⲇⵠ[1205] = Ⲇⵠ[1203];
    Ⲇⵠ[1204] = Ⲇⵠ[1203];
    Ⲇⵠ[1207] = [];
    Ⲇⵠ[1207][0] = ᐃΔ.ⵠⲆⵠⵠⲆⵠΔ;
    Ⲇⵠ[1207][1] = ᐃΔ.ΔⲆⲆⲆⲆΔⵠ;
    Ⲇⵠ[1207][2] = ᐃΔ.ᐃΔΔⲆΔⵠⲆ;
    Ⲇⵠ[1209] = Ⲇⵠ[1207];
    Ⲇⵠ[1208] = Ⲇⵠ[1207];
    Ⲇⵠ[1211] = [];
    Ⲇⵠ[1211][0] = ᐃΔ.ΔᐃΔΔᐃᐃᐃ;
    Ⲇⵠ[1211][1] = ᐃΔ.ᐃᐃᐃΔⲆΔⵠ;
    Ⲇⵠ[1211][2] = ᐃΔ.ⲆᐃΔⲆⵠᐃⵠ;
    Ⲇⵠ[1213] = Ⲇⵠ[1211];
    Ⲇⵠ[1212] = Ⲇⵠ[1211];
    Ⲇⵠ[1215] = [];
    Ⲇⵠ[1215][0] = ᐃΔ.ΔⲆᐃᐃΔⲆᐃ;
    Ⲇⵠ[1215][1] = ᐃΔ.ⵠⵠⲆⵠΔⵠᐃ;
    Ⲇⵠ[1215][2] = ᐃΔ.ⲆᐃⲆⲆᐃⵠⵠ;
    Ⲇⵠ[1217] = Ⲇⵠ[1215];
    Ⲇⵠ[1216] = Ⲇⵠ[1215];
    Ⲇⵠ[518] = hu(1, [{
      f: Ac,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
    }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[519] = Ⲇⵠ[518];
    Ⲇⵠ[532] = hu(1, [{
      f: mc,
      x: -2,
      y: -2,
      a: 1,
      r: -Math.PI / 5,
      c: ["#141414", "#c4a23a", "#816511"]
    }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[533] = Ⲇⵠ[532];
    Ⲇⵠ[521] = hu(1, [{
      f: Mp,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
    Ⲇⵠ[523] = hu(1, [{
      f: Mp,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#120202", "#991616", "#750a0a", "#120202"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
    Ⲇⵠ[529] = hu(1, [{
      f: sp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#347f93", "#54a4ba"]
    }, {
      f: Wc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
    }, {
      f: Kc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#a9e4ed", "#86d4e0"]
    }, {
      f: Ep,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[530] = Ⲇⵠ[529];
    Ⲇⵠ[553] = hu(1, [{
      f: Zm,
      x: 45,
      y: 70,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[555] = Ⲇⵠ[553];
    Ⲇⵠ[541] = hu(1, [{
      f: zc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[542] = Ⲇⵠ[541];
    Ⲇⵠ[779] = hu(1, [{
      f: Fc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[780] = Ⲇⵠ[779];
    Ⲇⵠ[767] = hu(1, [{
      f: pp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#2a2938", "#242330", "#313041"]
    }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[768] = Ⲇⵠ[767];
    Ⲇⵠ[776] = hu(1, [{
      f: Ap,
      x: 0,
      y: 3,
      a: 1,
      r: 0,
      c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
    }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[777] = Ⲇⵠ[776];
    Ⲇⵠ[771] = hu(1, [{
      f: Ap,
      x: 0,
      y: 3,
      a: 1,
      r: 0,
      c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
    }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[772] = Ⲇⵠ[771];
    Ⲇⵠ[756] = hu(1, [{
      f: cp,
      x: 0,
      y: 10,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[758] = Ⲇⵠ[756];
    Ⲇⵠ[760] = hu(1, [{
      f: cp,
      x: 0,
      y: 10,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[762] = Ⲇⵠ[760];
    Ⲇⵠ[764] = hu(1, [{
      f: cp,
      x: 0,
      y: 10,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[770] = Ⲇⵠ[764];
    Ⲇⵠ[910] = hu(1, [{
      f: wm,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[912] = Ⲇⵠ[910];
    Ⲇⵠ[911] = Ⲇⵠ[910];
    Ⲇⵠ[732] = hu(1, [{
      f: Bc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
    }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[734] = Ⲇⵠ[732];
    Ⲇⵠ[563] = hu(1, [{
      f: mp,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
    }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[564] = Ⲇⵠ[563];
    Ⲇⵠ[751] = hu(1, [{
      f: Yc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[252] = hu(1, [{
      f: Jp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[753] = hu(1, [{
      f: Yc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[253] = hu(1, [{
      f: Jp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[176] = hu(1, [{
      f: xp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[177] = hu(1, [{
      f: xp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[175] = hu(1, [{
      f: xp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[616] = hu(1, [{
      f: Rc,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[618] = Ⲇⵠ[616];
    Ⲇⵠ[699] = hu(1, [{
      f: Rc,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[700] = Ⲇⵠ[699];
    Ⲇⵠ[702] = hu(1, [{
      f: Rc,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[704] = Ⲇⵠ[702];
    Ⲇⵠ[705] = hu(1, [{
      f: Rc,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[706] = Ⲇⵠ[705];
    Ⲇⵠ[420] = hu(1, [{
      f: qm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[421] = Ⲇⵠ[420];
    Ⲇⵠ[826] = hu(1, [{
      f: sc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#252525", "#73583e", "#493425", "#7d6144"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[827] = Ⲇⵠ[826];
    Ⲇⵠ[429] = hu(1, [{
      f: Cc,
      x: 0,
      y: -2,
      a: 1,
      r: 0,
      c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[430] = Ⲇⵠ[429];
    Ⲇⵠ[432] = hu(1, [{
      f: yc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#dbce71", "#b29c32", "#c4bc51"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[433] = Ⲇⵠ[432];
    Ⲇⵠ[435] = hu(1, [{
      f: Ic,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[436] = Ⲇⵠ[435];
    Ⲇⵠ[438] = hu(1, [{
      f: tc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[439] = Ⲇⵠ[438];
    Ⲇⵠ[441] = hu(1, [{
      f: hc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#221e1b", "#ffffff", "#f6f0e7"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[442] = Ⲇⵠ[441];
    Ⲇⵠ[418] = hu(1, [{
      f: Hm,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#c27add", "#cd98e5"]
    }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[609] = hu(1, [{
      f: Uc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#D7C393", "#a48c6c"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[142] = hu(1, [{
      f: yp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#93CBCE", "#E9F6F6"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[140] = hu(1, [{
      f: Uc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#866432", "#6b4f25"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[180] = hu(1, [{
      f: Pp,
      x: 3,
      y: 2,
      a: 1,
      r: 0,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[181] = hu(1, [{
      f: ep,
      x: 3,
      y: 2,
      a: 1,
      r: 0,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[784] = Ⲇⵠ[180];
    Ⲇⵠ[785] = Ⲇⵠ[181];
    Ⲇⵠ[789] = hu(1, [{
      f: rp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
    }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[791] = Ⲇⵠ[789];
    Ⲇⵠ[613] = hu(1, [{
      f: Cp,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
    }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[612] = hu(1, [{
      f: Zc,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
    }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[715] = Ⲇⵠ[613];
    Ⲇⵠ[611] = Ⲇⵠ[612];
    Ⲇⵠ[634] = hu(1, [{
      f: Mu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[635] = Ⲇⵠ[634];
    Ⲇⵠ[200] = hu(1, [{
      f: Ku,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[866] = hu(1, [{
      f: Ju,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[143] = hu(1, [{
      f: fp,
      x: 0,
      y: -2,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[690] = Ⲇⵠ[143];
    Ⲇⵠ[662] = hu(1, [{
      f: vm,
      x: -3,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
    }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[664] = hu(1, [{
      f: xm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1d051e", "#42261A", "#281818"]
    }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[666] = Ⲇⵠ[664];
    Ⲇⵠ[649] = hu(1, [{
      f: hm,
      x: -3,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
    }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[650] = Ⲇⵠ[649];
    Ⲇⵠ[674] = hu(1, [{
      f: Yt,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
    }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[646] = hu(1, [{
      f: lm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    Ⲇⵠ[647] = Ⲇⵠ[646];
    Ⲇⵠ[685] = hu(1, [{
      f: gp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[684] = Ⲇⵠ[685];
    Ⲇⵠ[870] = hu(1, [{
      f: zd,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#e2d63b", "#ee71a9", "#42b672"]
    }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[871] = Ⲇⵠ[870];
    Ⲇⵠ[605] = hu(1, [{
      f: np,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
    }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[604] = Ⲇⵠ[605];
    Ⲇⵠ[842] = hu(1, [{
      f: Pd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[843] = Ⲇⵠ[842];
    Ⲇⵠ[652] = hu(1, [{
      f: _c,
      x: -1,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
    Ⲇⵠ[654] = Ⲇⵠ[652];
    Ⲇⵠ[626] = hu(1, [{
      f: _c,
      x: -1,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
    }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[627] = Ⲇⵠ[626];
    Ⲇⵠ[629] = hu(1, [{
      f: kp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[196] = hu(1, [{
      f: Gu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[898] = Ⲇⵠ[196];
    Ⲇⵠ[659] = hu(1, [{
      f: km,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
    }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[660] = Ⲇⵠ[659];
    Ⲇⵠ[145] = hu(1, [{
      f: Wt,
      x: -2,
      y: -8,
      a: 1,
      r: 0,
      c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
    }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    Ⲇⵠ[730] = Ⲇⵠ[145];
    Ⲇⵠ[566] = [];
    Ⲇⵠ[566][0] = ᐃΔ.ⲆⲆΔᐃⲆΔⵠ;
    Ⲇⵠ[566][1] = ᐃΔ.ᐃⵠⵠΔⵠⵠⵠ;
    Ⲇⵠ[566][2] = ᐃΔ.ᐃⵠⵠᐃⲆⵠᐃ;
    Ⲇⵠ[567] = Ⲇⵠ[566];
    Ⲇⵠ[568] = Ⲇⵠ[566];
    Ⲇⵠ[877] = [];
    Ⲇⵠ[877][0] = ᐃΔ.ⲆⵠⵠⲆΔⵠⲆ;
    Ⲇⵠ[877][1] = ᐃΔ.ΔⵠⲆᐃⲆᐃΔ;
    Ⲇⵠ[877][2] = ᐃΔ.ΔⲆᐃΔᐃⲆΔ;
    Ⲇⵠ[879] = Ⲇⵠ[877];
    Ⲇⵠ[878] = Ⲇⵠ[877];
    Ⲇⵠ[933] = Ⲇⵠ[932];
    Ⲇⵠ[934] = Ⲇⵠ[932];
    Ⲇⵠ[932] = [];
    Ⲇⵠ[932][0] = ᐃΔ.ΔⵠⲆⵠΔΔᐃ;
    Ⲇⵠ[932][1] = ᐃΔ.ⲆΔΔᐃᐃᐃⵠ;
    Ⲇⵠ[932][2] = ᐃΔ.ΔᐃⲆⵠⲆⵠᐃ;
    Ⲇⵠ[933] = Ⲇⵠ[932];
    Ⲇⵠ[934] = Ⲇⵠ[932];
    Ⲇⵠ[943] = [];
    Ⲇⵠ[943][0] = ᐃΔ.ᐃⵠⲆΔⵠᐃΔ;
    Ⲇⵠ[943][1] = ᐃΔ.ΔⲆⲆⵠΔⲆΔ;
    Ⲇⵠ[943][2] = ᐃΔ.ⲆⲆΔⲆΔⵠⲆ;
    Ⲇⵠ[944] = Ⲇⵠ[943];
    Ⲇⵠ[945] = Ⲇⵠ[943];
    Ⲇⵠ[921] = [];
    Ⲇⵠ[921][0] = ᐃΔ.ⵠᐃᐃⵠⲆⵠΔ;
    Ⲇⵠ[921][1] = ᐃΔ.ΔⲆΔⲆᐃⲆⲆ;
    Ⲇⵠ[921][2] = ᐃΔ.ΔⲆⲆⲆᐃΔΔ;
    Ⲇⵠ[922] = Ⲇⵠ[921];
    Ⲇⵠ[923] = Ⲇⵠ[921];
    Ⲇⵠ[925] = [];
    Ⲇⵠ[925][0] = ᐃΔ.ⵠᐃᐃᐃⲆⵠⲆ;
    Ⲇⵠ[925][1] = ᐃΔ.ΔⲆⵠΔⲆⵠᐃ;
    Ⲇⵠ[925][2] = ᐃΔ.ⲆᐃΔᐃⵠΔⵠ;
    Ⲇⵠ[926] = Ⲇⵠ[925];
    Ⲇⵠ[927] = Ⲇⵠ[925];
    Ⲇⵠ[929] = [];
    Ⲇⵠ[929][0] = ᐃΔ.ⲆΔⵠⲆⵠᐃⵠ;
    Ⲇⵠ[929][1] = ᐃΔ.ⵠⲆᐃⲆᐃⵠΔ;
    Ⲇⵠ[929][2] = ᐃΔ.ⲆΔⲆⵠᐃΔᐃ;
    Ⲇⵠ[930] = Ⲇⵠ[929];
    Ⲇⵠ[931] = Ⲇⵠ[929];
    Ⲇⵠ[946] = [];
    Ⲇⵠ[946][0] = ᐃΔ.ⲆΔΔΔΔⵠⲆ;
    Ⲇⵠ[946][1] = ᐃΔ.ⲆΔⲆⲆᐃⵠⵠ;
    Ⲇⵠ[946][2] = ᐃΔ.ΔΔⲆⵠᐃⲆΔ;
    Ⲇⵠ[947] = Ⲇⵠ[946];
    Ⲇⵠ[948] = Ⲇⵠ[946];
    Ⲇⵠ[735] = [];
    Ⲇⵠ[735][0] = ᐃΔ.ⵠⵠⵠΔᐃⵠⵠ;
    Ⲇⵠ[735][1] = ᐃΔ.ΔⲆᐃᐃⵠⵠΔ;
    Ⲇⵠ[735][2] = ᐃΔ.ⵠΔᐃᐃᐃⵠⵠ;
    Ⲇⵠ[737] = Ⲇⵠ[735];
    Ⲇⵠ[736] = Ⲇⵠ[735];
    Ⲇⵠ[1164] = [];
    Ⲇⵠ[1164][0] = ᐃΔ.ΔᐃⵠᐃΔᐃⵠ;
    Ⲇⵠ[1164][1] = ᐃΔ.ᐃⵠⵠⲆⵠᐃᐃ;
    Ⲇⵠ[1164][2] = ᐃΔ.ᐃⵠᐃⲆⵠΔΔ;
    Ⲇⵠ[sh.ⵠᐃⲆᐃᐃᐃⵠΔΔ] = Ⲇⵠ[1164];
    Ⲇⵠ[1165] = Ⲇⵠ[1164];
    Ⲇⵠ[738] = [];
    Ⲇⵠ[738][0] = ᐃΔ.ⵠΔⵠᐃⲆΔΔ;
    Ⲇⵠ[738][1] = ᐃΔ.ΔⲆᐃᐃⲆΔᐃ;
    Ⲇⵠ[738][2] = ᐃΔ.ΔᐃⵠΔⲆᐃⲆ;
    Ⲇⵠ[740] = Ⲇⵠ[738];
    Ⲇⵠ[739] = Ⲇⵠ[738];
    Ⲇⵠ[741] = [];
    Ⲇⵠ[741][0] = ᐃΔ.ΔΔΔᐃΔΔᐃ;
    Ⲇⵠ[741][1] = ᐃΔ.ⲆⵠᐃⵠⵠΔⵠ;
    Ⲇⵠ[741][2] = ᐃΔ.ⲆᐃΔᐃᐃⲆΔ;
    Ⲇⵠ[743] = Ⲇⵠ[741];
    Ⲇⵠ[742] = Ⲇⵠ[741];
    Ⲇⵠ[938] = [];
    Ⲇⵠ[938][0] = ᐃΔ.ᐃⵠⵠΔᐃΔⲆ;
    Ⲇⵠ[938][1] = ᐃΔ.ᐃⲆⲆΔᐃᐃⲆ;
    Ⲇⵠ[938][2] = ᐃΔ.ⵠᐃⲆⵠⲆΔⲆ;
    Ⲇⵠ[939] = Ⲇⵠ[938];
    Ⲇⵠ[936] = [];
    Ⲇⵠ[936][0] = ᐃΔ.ⵠΔᐃⲆΔⲆⵠ;
    Ⲇⵠ[936][1] = ᐃΔ.ⵠΔΔⵠΔᐃⵠ;
    Ⲇⵠ[936][2] = ᐃΔ.ᐃⵠᐃᐃᐃⲆⲆ;
    Ⲇⵠ[937] = Ⲇⵠ[936];
    Ⲇⵠ[617] = Ⲇⵠ[616];
    Ⲇⵠ[701] = Ⲇⵠ[699];
    Ⲇⵠ[703] = Ⲇⵠ[702];
    Ⲇⵠ[707] = Ⲇⵠ[705];
    Ⲇⵠ[348] = Ⲇⵠ[311];
    Ⲇⵠ[633] = Ⲇⵠ[631];
    Ⲇⵠ[645] = Ⲇⵠ[644];
    Ⲇⵠ[640] = Ⲇⵠ[639];
    Ⲇⵠ[273] = Ⲇⵠ[309];
    Ⲇⵠ[590] = Ⲇⵠ[252];
    Ⲇⵠ[752] = Ⲇⵠ[751];
    Ⲇⵠ[591] = Ⲇⵠ[253];
    Ⲇⵠ[754] = Ⲇⵠ[753];
    Ⲇⵠ[276] = Ⲇⵠ[328];
    Ⲇⵠ[863] = Ⲇⵠ[865];
    Ⲇⵠ[862] = Ⲇⵠ[860];
    Ⲇⵠ[831] = Ⲇⵠ[829];
    Ⲇⵠ[340] = Ⲇⵠ[261];
    Ⲇⵠ[596] = Ⲇⵠ[594];
    Ⲇⵠ[345] = Ⲇⵠ[292];
    Ⲇⵠ[346] = Ⲇⵠ[293];
    Ⲇⵠ[457] = Ⲇⵠ[455];
    Ⲇⵠ[274] = Ⲇⵠ[313];
    Ⲇⵠ[341] = Ⲇⵠ[312];
    Ⲇⵠ[272] = Ⲇⵠ[258];
    Ⲇⵠ[344] = Ⲇⵠ[296];
    Ⲇⵠ[459] = Ⲇⵠ[458];
    Ⲇⵠ[342] = Ⲇⵠ[315];
    Ⲇⵠ[270] = Ⲇⵠ[297];
    Ⲇⵠ[271] = Ⲇⵠ[298];
    Ⲇⵠ[343] = Ⲇⵠ[316];
    Ⲇⵠ[269] = Ⲇⵠ[277];
    Ⲇⵠ[358] = Ⲇⵠ[310];
    Ⲇⵠ[354] = Ⲇⵠ[329];
    Ⲇⵠ[356] = Ⲇⵠ[331];
    Ⲇⵠ[355] = Ⲇⵠ[330];
    Ⲇⵠ[494] = Ⲇⵠ[492];
    Ⲇⵠ[349] = Ⲇⵠ[317];
    Ⲇⵠ[350] = Ⲇⵠ[319];
    Ⲇⵠ[275] = Ⲇⵠ[300];
    Ⲇⵠ[351] = Ⲇⵠ[323];
    Ⲇⵠ[353] = Ⲇⵠ[305];
    Ⲇⵠ[514] = Ⲇⵠ[513];
    Ⲇⵠ[352] = Ⲇⵠ[303];
    Ⲇⵠ[520] = Ⲇⵠ[518];
    Ⲇⵠ[534] = Ⲇⵠ[532];
    Ⲇⵠ[531] = Ⲇⵠ[529];
    Ⲇⵠ[522] = Ⲇⵠ[521];
    Ⲇⵠ[524] = Ⲇⵠ[523];
    Ⲇⵠ[565] = Ⲇⵠ[563];
    Ⲇⵠ[554] = Ⲇⵠ[553];
    Ⲇⵠ[357] = Ⲇⵠ[335];
    Ⲇⵠ[359] = Ⲇⵠ[337];
    Ⲇⵠ[339] = pr(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      gd(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      hd(e, c[0], c[1], 4);
      e.save();
      gd(e, a * 30, a * 115, a * 60, a * 5, a * 15);
      e.restore();
      hd(e, c[2], c[3], 4);
      e.save();
      gd(e, a * 50, a * 117, a * 20, a * 10, a * 15);
      e.restore();
      hd(e, c[2]);
      return d;
    }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
    Ⲇⵠ[366] = hu(0.5, [{
      f: Nm,
      x: 0,
      y: 2,
      a: 1,
      r: 0,
      c: ["#ffffff"]
    }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
    Ⲇⵠ[382] = Ⲇⵠ[361];
    Ⲇⵠ[383] = Ⲇⵠ[362];
    Ⲇⵠ[384] = Ⲇⵠ[364];
    Ⲇⵠ[497] = Ⲇⵠ[495];
    Ⲇⵠ[385] = Ⲇⵠ[392];
    Ⲇⵠ[774] = Ⲇⵠ[178];
    Ⲇⵠ[775] = Ⲇⵠ[179];
    Ⲇⵠ[386] = Ⲇⵠ[368];
    Ⲇⵠ[625] = Ⲇⵠ[624];
    Ⲇⵠ[394] = Ⲇⵠ[393];
    Ⲇⵠ[1163] = Ⲇⵠ[1162];
    Ⲇⵠ[506] = Ⲇⵠ[505];
    Ⲇⵠ[387] = Ⲇⵠ[369];
    Ⲇⵠ[504] = Ⲇⵠ[502];
    Ⲇⵠ[388] = Ⲇⵠ[372];
    Ⲇⵠ[389] = Ⲇⵠ[375];
    Ⲇⵠ[390] = Ⲇⵠ[378];
    Ⲇⵠ[501] = Ⲇⵠ[499];
    Ⲇⵠ[391] = Ⲇⵠ[381];
    Ⲇⵠ[403] = Ⲇⵠ[401];
    Ⲇⵠ[397] = Ⲇⵠ[395];
    Ⲇⵠ[400] = Ⲇⵠ[398];
    Ⲇⵠ[406] = Ⲇⵠ[404];
    Ⲇⵠ[474] = Ⲇⵠ[472];
    Ⲇⵠ[875] = Ⲇⵠ[874];
    Ⲇⵠ[552] = Ⲇⵠ[550];
    Ⲇⵠ[710] = Ⲇⵠ[709];
    Ⲇⵠ[479] = Ⲇⵠ[477];
    Ⲇⵠ[482] = Ⲇⵠ[480];
    Ⲇⵠ[485] = Ⲇⵠ[483];
    Ⲇⵠ[488] = Ⲇⵠ[486];
    Ⲇⵠ[410] = Ⲇⵠ[408];
    Ⲇⵠ[719] = Ⲇⵠ[717];
    Ⲇⵠ[422] = Ⲇⵠ[420];
    Ⲇⵠ[431] = Ⲇⵠ[429];
    Ⲇⵠ[434] = Ⲇⵠ[432];
    Ⲇⵠ[437] = Ⲇⵠ[435];
    Ⲇⵠ[543] = Ⲇⵠ[541];
    Ⲇⵠ[733] = Ⲇⵠ[732];
    Ⲇⵠ[440] = Ⲇⵠ[438];
    Ⲇⵠ[443] = Ⲇⵠ[441];
    Ⲇⵠ[446] = Ⲇⵠ[418];
    Ⲇⵠ[606] = Ⲇⵠ[605];
    Ⲇⵠ[844] = Ⲇⵠ[842];
    Ⲇⵠ[683] = Ⲇⵠ[685];
    Ⲇⵠ[610] = Ⲇⵠ[609];
    Ⲇⵠ[689] = Ⲇⵠ[143];
    Ⲇⵠ[686] = Ⲇⵠ[142];
    Ⲇⵠ[682] = Ⲇⵠ[140];
    Ⲇⵠ[615] = Ⲇⵠ[613];
    Ⲇⵠ[614] = Ⲇⵠ[612];
    Ⲇⵠ[628] = Ⲇⵠ[626];
    Ⲇⵠ[630] = Ⲇⵠ[629];
    Ⲇⵠ[636] = Ⲇⵠ[634];
    Ⲇⵠ[868] = Ⲇⵠ[200];
    Ⲇⵠ[867] = Ⲇⵠ[866];
    Ⲇⵠ[648] = Ⲇⵠ[646];
    Ⲇⵠ[651] = Ⲇⵠ[649];
    Ⲇⵠ[653] = Ⲇⵠ[652];
    Ⲇⵠ[661] = Ⲇⵠ[659];
    Ⲇⵠ[898] = Ⲇⵠ[196];
    Ⲇⵠ[663] = Ⲇⵠ[662];
    Ⲇⵠ[665] = Ⲇⵠ[664];
    Ⲇⵠ[675] = Ⲇⵠ[674];
    Ⲇⵠ[731] = Ⲇⵠ[145];
    Ⲇⵠ[757] = Ⲇⵠ[756];
    Ⲇⵠ[759] = Ⲇⵠ[176];
    Ⲇⵠ[761] = Ⲇⵠ[760];
    Ⲇⵠ[763] = Ⲇⵠ[177];
    Ⲇⵠ[765] = Ⲇⵠ[764];
    Ⲇⵠ[766] = Ⲇⵠ[175];
    Ⲇⵠ[769] = Ⲇⵠ[767];
    Ⲇⵠ[773] = Ⲇⵠ[771];
    Ⲇⵠ[778] = Ⲇⵠ[776];
    Ⲇⵠ[781] = Ⲇⵠ[779];
    Ⲇⵠ[787] = Ⲇⵠ[181];
    Ⲇⵠ[786] = Ⲇⵠ[180];
    Ⲇⵠ[790] = Ⲇⵠ[789];
    Ⲇⵠ[801] = Ⲇⵠ[800];
    Ⲇⵠ[810] = Ⲇⵠ[808];
    Ⲇⵠ[836] = Ⲇⵠ[834];
    Ⲇⵠ[847] = Ⲇⵠ[845];
    Ⲇⵠ[828] = Ⲇⵠ[826];
  }
  function dp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 110;
    c.height = a * 110;
    d.globalAlpha = 0.2;
    bd(d, a * 55, a * 55, a * 55);
    hd(d, b[0]);
    return c;
  }
  function vp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 376;
    c.height = a * 371;
    d.globalAlpha = 0.5;
    d.translate(a * 5, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    hd(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -4, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    hd(d, undefined, b[1], a * 12);
    d.translate(a * -1, a * 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 270.633544921875, a * 88.98580932617188);
    d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
    d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
    d.closePath();
    hd(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 275.633544921875, a * 281.9858093261719);
    d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
    d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
    d.closePath();
    hd(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 124.633544921875, a * 291.9858093261719);
    d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
    d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
    d.closePath();
    hd(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 113.633544921875, a * 80.98580932617188);
    d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
    d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
    d.closePath();
    hd(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 202.633544921875, a * 20.985809326171875);
    d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
    d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
    d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
    d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
    d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
    d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
    d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
    d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
    d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
    d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
    d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
    d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
    d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
    d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
    d.closePath();
    hd(d, b[2], b[3], a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 203.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
    d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
    d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
    d.closePath();
    hd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.633544921875, a * 25.985809326171875);
    d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
    d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
    d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
    d.closePath();
    hd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 26.633544921875, a * 96.98580932617188);
    d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
    d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
    d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
    d.closePath();
    hd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 351.633544921875, a * 99.98580932617188);
    d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
    d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
    d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
    d.closePath();
    hd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 350.633544921875, a * 302.9858093261719);
    d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
    d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
    d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
    d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
    d.closePath();
    hd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 95.633544921875, a * 224.98580932617188);
    d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
    d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
    d.closePath();
    hd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 253.98580932617188);
    d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
    d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
    d.closePath();
    hd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 251.98580932617188);
    d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
    d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
    d.closePath();
    hd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 316, a * 186.8020782470703);
    d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
    d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 340, a * 157.8020782470703);
    d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
    d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 349, a * 136.8020782470703);
    d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
    d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 278.75, a * 246.4375);
    d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
    d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
    d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 310.75, a * 277.4375);
    d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
    d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
    d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.75, a * 257.4375);
    d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
    d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
    d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 289.4375);
    d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
    d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 171.75, a * 256.4375);
    d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
    d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
    d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.75, a * 289.9375);
    d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
    d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.75, a * 314.4375);
    d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
    d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.75, a * 313.4375);
    d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
    d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 103.75, a * 244.4375);
    d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
    d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
    d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 86.75, a * 182.4375);
    d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
    d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
    d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44.75, a * 152.4375);
    d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
    d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31.75, a * 130.4375);
    d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
    d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
    d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 69.75, a * 274.4375);
    d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
    d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
    d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 165.75, a * 95.4375);
    d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
    d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 216.75, a * 94.4375);
    d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
    d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 68.4375);
    d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
    d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 169.75, a * 71.4375);
    d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
    d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
    d.closePath();
    hd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 193.75, a * 160.4375);
    d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
    d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
    d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
    d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
    d.closePath();
    hd(d, b[8], b[9], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
    d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
    d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
    d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
    d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
    d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
    d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
    d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
    d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
    d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
    d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
    d.closePath();
    hd(d, b[10]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 173.8125);
    d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
    d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
    d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
    d.closePath();
    hd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
    d.closePath();
    hd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
    d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
    d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
    d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
    d.closePath();
    hd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
    d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
    d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
    d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
    d.closePath();
    hd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 204.1999969482422, a * 201.8125);
    d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
    d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
    d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
    d.closePath();
    hd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
    d.closePath();
    hd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
    d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
    d.closePath();
    hd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
    d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
    d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
    d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
    d.closePath();
    hd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 183.1999969482422, a * 196.8125);
    d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
    d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
    d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
    d.closePath();
    hd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
    d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
    d.closePath();
    hd(d, b[11]);
    bd(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
    hd(d, b[12]);
    bd(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
    hd(d, b[13]);
    bd(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
    hd(d, b[12]);
    bd(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
    hd(d, b[13]);
    return c;
  }
  function mp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 46;
    d.height = a * 140;
    e.scale(a * -1, a * 1);
    e.translate(a * -50, a * 40);
    e.translate(a * -20, 0);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    hd(e, c[0]);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    gd(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    hd(e, c[0]);
    e.translate(a * 0, 0);
    e.globalAlpha = 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    hd(e, c[3], c[4], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    hd(e, c[1], c[2], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    hd(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    gd(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    hd(e, c[1], c[2], a * 3);
    return d;
  }
  function cp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 372;
    d.height = a * 358;
    e.translate(a * 0, a * 10);
    e.globalAlpha = b ? 0.2 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    hd(e, c[0], c[0], a * 10);
    e.translate(a * 0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
    e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
    e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
    e.closePath();
    hd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
    e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
    e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
    e.closePath();
    hd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
    e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
    e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
    e.closePath();
    hd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
    e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
    e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
    e.closePath();
    hd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.000030517578125, a * 122.3125);
    e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
    e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
    e.closePath();
    hd(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 310.0000305175781, a * 127.3125);
    e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
    e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
    e.closePath();
    hd(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
    e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
    e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
    e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
    e.closePath();
    hd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
    e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
    e.closePath();
    hd(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
    e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
    e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
    e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
    e.closePath();
    hd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
    e.closePath();
    hd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
    e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
    e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
    e.closePath();
    hd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
    e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
    e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
    e.closePath();
    hd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
    e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
    e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
    e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
    e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
    e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
    e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
    e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
    e.closePath();
    hd(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    hd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
    e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
    e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
    e.closePath();
    hd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
    e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
    e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
    e.closePath();
    hd(e, c[1], c[1], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
    e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
    e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
    e.closePath();
    hd(e, c[2], c[3], a * 10);
    bd(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
    hd(e, c[4], c[5], a * 1);
    bd(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
    hd(e, c[4], c[5], a * 1);
    bd(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
    hd(e, c[4], c[5], a * 1);
    bd(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
    hd(e, c[4], c[5], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
    e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
    e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
    e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
    e.closePath();
    hd(e, c[4], c[5], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
    e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
    e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
    e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
    e.closePath();
    hd(e, c[6]);
    return d;
  }
  function pp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 310;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 192);
    e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
    e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
    e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
    e.closePath();
    hd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146, a * 239);
    e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
    e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
    e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
    e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
    e.closePath();
    hd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 193);
    e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
    e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
    e.closePath();
    hd(e, undefined, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 230, a * 57);
    e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
    e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
    e.closePath();
    hd(e, undefined, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 212);
    e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
    e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
    e.closePath();
    hd(e, undefined, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 239, a * 59);
    e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
    e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
    e.closePath();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 61);
    e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
    e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
    e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
    e.closePath();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 125);
    e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
    e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
    e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
    e.closePath();
    hd(e, c[2]);
    return d;
  }
  function Cp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    gd(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    hd(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
    e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
    e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
    e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
    e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
    e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
    e.closePath();
    hd(e, c[3], c[4], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    hd(e, undefined, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    hd(e, undefined, c[6], a * 15);
    return d;
  }
  function Tp() {
    var b = Ex.time;
    if (Ⲇⵠ[285]) {
      Uo.drawImage(Ⲇⵠ[285][b][1], kq + 480, Zo + 190);
      Uo.drawImage(Ⲇⵠ[285][b][2], kq + 180, Zo - 430);
      Uo.drawImage(Ⲇⵠ[285][b][1], kq - 855, Zo + 100);
      Uo.drawImage(Ⲇⵠ[285][b][0], kq - 550, Zo - 300);
      Uo.drawImage(Ⲇⵠ[285][b][0], kq - 1020, Zo - 520);
    }
    if (Ⲇⵠ[108]) {
      Uo.drawImage(Ⲇⵠ[108][b][1], kq - 80, Zo - 640);
      Uo.drawImage(Ⲇⵠ[108][b][1], kq + 80, Zo + 490);
      Uo.drawImage(Ⲇⵠ[108][b][2], kq - 180, Zo - 700);
      Uo.drawImage(Ⲇⵠ[108][b][0], kq + 550, Zo + 100);
      Uo.drawImage(Ⲇⵠ[108][b][1], kq + 450, Zo + 300);
      Uo.drawImage(Ⲇⵠ[108][b][1], kq + 780, Zo + 300);
      Uo.drawImage(Ⲇⵠ[108][b][2], kq + 980, Zo + 200);
      Uo.drawImage(Ⲇⵠ[108][b][2], kq + 680, Zo + 600);
      Uo.drawImage(Ⲇⵠ[108][b][2], kq - 380, Zo + 100);
      Uo.drawImage(Ⲇⵠ[108][b][2], kq + 280, Zo + 250);
    }
    if (Ⲇⵠ[110]) {
      Uo.drawImage(Ⲇⵠ[110][b][0], kq - 590, Zo);
      Uo.drawImage(Ⲇⵠ[110][b][0], kq + 120, Zo - 390);
      Uo.drawImage(Ⲇⵠ[110][b][0], kq - 270, Zo + 340);
    }
    if (Ⲇⵠ[109]) {
      Uo.drawImage(Ⲇⵠ[109][b][4], kq - 700, Zo - 600);
      Uo.drawImage(Ⲇⵠ[109][b][2], kq - 970, Zo - 250);
      Uo.drawImage(Ⲇⵠ[109][b][5], kq - 720, Zo - 200);
      Uo.drawImage(Ⲇⵠ[109][b][2], kq - 1020, Zo + 340);
      Uo.drawImage(Ⲇⵠ[109][b][0], kq - 1120, Zo - 0);
      Uo.drawImage(Ⲇⵠ[109][b][1], kq - 650, Zo - 330);
      Uo.drawImage(Ⲇⵠ[109][b][4], kq - 495, Zo - 90);
      Uo.drawImage(Ⲇⵠ[109][b][3], kq - 520, Zo + 340);
      Uo.drawImage(Ⲇⵠ[109][b][2], kq + 830, Zo - 520);
    }
    Ⲇⵠ[413];
    if (Hx && Gx) {
      var c = Hx.ΔΔⲆ.x;
      var d = Hx.ΔΔⲆ.y;
      Hx.ΔΔⲆ.x = kq;
      Hx.ΔΔⲆ.y = Zo;
      var e = Gx.time;
      Gx.time = Ex.time;
      var f;
      var g = Ex.items;
      g[2].x = 400;
      g[2].y = 100;
      g[2].ⵠᐃⲆᐃ(114);
      (f = g[1]).x = -500;
      f.y = 100;
      f.ⵠⵠⵠᐃ[0].x = f.x - 20.5;
      f.ⵠⵠⵠᐃ[0].y = f.y - 22.5;
      f.ⵠⵠⵠᐃ[1].x = f.x - 35.5;
      f.ⵠⵠⵠᐃ[1].y = f.y + 7.5;
      f.ⵠⵠⵠᐃ[2].x = f.x + 7.5;
      f.ⵠⵠⵠᐃ[2].y = f.y - 30;
      f.ⵠⵠⵠᐃ[3].x = f.x + 22.5;
      f.ⵠⵠⵠᐃ[3].y = f.y;
      f.ⵠⵠⵠᐃ[4].x = f.x - 7.5;
      f.ⵠⵠⵠᐃ[4].y = f.y + 14.5;
      for (var a = 0; a < f.info; a++) {
        f.ⵠⵠⵠᐃ[a].ⵠᐃⲆᐃ(294);
      }
      (f = g[3]).x = 210;
      f.y = -290;
      f.ⵠⵠⵠᐃ[0].x = f.x - 20.5;
      f.ⵠⵠⵠᐃ[0].y = f.y - 22.5;
      f.ⵠⵠⵠᐃ[1].x = f.x - 35.5;
      f.ⵠⵠⵠᐃ[1].y = f.y + 7.5;
      f.ⵠⵠⵠᐃ[2].x = f.x + 7.5;
      f.ⵠⵠⵠᐃ[2].y = f.y - 30;
      f.ⵠⵠⵠᐃ[3].x = f.x + 22.5;
      f.ⵠⵠⵠᐃ[3].y = f.y;
      f.ⵠⵠⵠᐃ[4].x = f.x - 7.5;
      f.ⵠⵠⵠᐃ[4].y = f.y + 14.5;
      for (a = 0; f.info > a; a++) {
        f.ⵠⵠⵠᐃ[a].ⵠᐃⲆᐃ(294);
      }
      g[0].x = 450;
      g[0].y = -100;
      g[0].ⲆⵠᐃᐃΔ(113);
      g[0].ⲆⵠⵠⲆⵠ();
      Hx.ΔΔⲆ.x = c;
      Hx.ΔΔⲆ.y = d;
      Gx.time = e;
    }
  }
  function fp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    hd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    hd(e, c[1], c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    hd(e, pj, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    hd(e, undefined, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    hd(e, c[3], c[2], a * 19);
    bd(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
    hd(e, c[4]);
    bd(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
    hd(e, c[4]);
    bd(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
    hd(e, c[4]);
    bd(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
    hd(e, c[4]);
    bd(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
    hd(e, c[4]);
    bd(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
    hd(e, c[4]);
    bd(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
    hd(e, c[4]);
    bd(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
    hd(e, c[4]);
    bd(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
    hd(e, c[4]);
    bd(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
    hd(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    hd(e, c[5]);
    return d;
  }
  function zp(a, b, c) {
    li($f, a, b, c);
    const d = Cb(Vw[0], Vw[1], Vw[2], Vw[0]);
    Cb(Vw[1], Vw[2], Vw[0], Vw[1]);
    return ~(d & 11630) & d | ~(d & 11630) & 11630;
  }
  function yp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 167;
    d.height = a * 136;
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    gd(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 0.8;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    gd(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    hd(e, ct, c[1], a * 7);
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    gd(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    hd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    gd(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    hd(e, Ro, c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
    e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
    hd(e, Qa, c[1], a * 10);
    return d;
  }
  function wp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 573;
    d.height = a * 350;
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 336, a * 72);
      e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
      e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
      e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
      e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
      e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
      e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
      e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
      e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
      e.bezierCurveTo(a * 323, a * 13, a * 322, a * 25, a * 337, a * 74);
      e.closePath();
      hd(e, b[4], b[4], a * 35);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 168, a * 42);
    e.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
    e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
    e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
    e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
    e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
    e.closePath();
    hd(e, b[0], b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188, a * 41);
    e.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
    e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
    e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
    e.closePath();
    hd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 336, a * 71);
    e.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
    e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
    e.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
    e.closePath();
    hd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 357, a * 76);
    e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
    e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
    e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
    e.closePath();
    hd(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 309, a * 168);
    e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
    hd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 54);
    e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
    e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
    e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
    e.closePath();
    hd(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 292, a * 198);
    e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
    hd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 245, a * 68);
    e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
    hd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 96);
    e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
    hd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 124);
    e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
    hd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 183);
    e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
    hd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 213);
    e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
    hd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 399, a * 257);
    e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
    e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
    e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
    hd(e, b[3], b[3], a * 12);
    return d;
  }
  function Pp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    hd(e, undefined, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    hd(e, c[3], c[2], a * 12);
    e.translate(0, a * 25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    hd(e, c[5]);
    e.translate(0, a * -25);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    hd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    hd(e, Lk, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    hd(e, Dh, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    hd(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    hd(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    hd(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    hd(e, Lh, c[2], a * 11);
    return d;
  }
  function kp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 170;
    e.translate(0, a * -170);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159.5, a * 322.0625);
    e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
    e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
    e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
    e.closePath();
    hd(e, c[0], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212.5, a * 270.0625);
    e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
    e.closePath();
    hd(e, undefined, c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 193.5, a * 226.0625);
    e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
    e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
    e.closePath();
    hd(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164.5, a * 245.0625);
    e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
    e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
    e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
    e.closePath();
    hd(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 260.0625);
    e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
    e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
    e.closePath();
    hd(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 152.5, a * 278.0625);
    e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
    e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
    e.closePath();
    hd(e, c[2], c[3], a * 12);
    return d;
  }
  function Ap(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 198;
    f.height = b * 147;
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 76);
    g.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
    g.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
    g.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
    g.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
    g.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
    g.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
    g.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
    g.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
    g.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
    g.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
    g.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
    g.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
    g.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
    g.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
    g.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
    g.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
    g.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
    g.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
    g.closePath();
    hd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    hd(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    hd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 49, b * 98);
    g.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
    g.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
    g.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
    g.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
    g.closePath();
    hd(g, d[1]);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 54, b * 98);
    g.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
    g.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
    g.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
    g.closePath();
    hd(g, d[0]);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 118, b * 47);
    g.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
    g.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
    g.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
    g.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
    g.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
    g.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
    g.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
    g.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
    g.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * 4);
    g.bezierCurveTo(b * 44, b * 0, b * 35, b * 20, b * 33, b * 37);
    g.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
    g.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
    g.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
    g.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
    g.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
    g.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
    g.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
    g.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
    g.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
    g.closePath();
    hd(g, d[1], d[2], b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 62, b * 21);
    g.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
    g.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
    g.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
    g.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
    g.closePath();
    hd(g, d[4]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 60, b * 29);
    g.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
    hd(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 61, b * 37);
    g.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
    hd(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 52, b * 31);
    g.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
    hd(g, Kn, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 35);
    g.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
    hd(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 58, b * 44);
    g.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
    hd(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 48);
    g.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
    hd(g, Ns, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 41);
    g.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
    hd(g, Bo, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 48);
    g.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
    hd(g, pj, d[3], b * 4);
    if (e == 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 99, b * 101);
      g.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
      hd(g, undefined, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 97.6666259765625, b * 101.33331298828125);
      g.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
      hd(g, undefined, d[5], b * 6);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
      hd(g, undefined, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
      hd(g, tr, d[5], b * 6);
      bd(g, b * 86, b * 114.39999389648438, b * 4.5);
      hd(g, d[1], d[5], b * 6);
      bd(g, b * 121, b * 114.39999389648438, b * 4.5);
      hd(g, d[1], d[5], b * 6);
    }
    return f;
  }
  function xp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 117;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 90);
    e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
    e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
    e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
    e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, a * 4);
    e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6, a * 76);
    e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
    e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
    e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
    e.closePath();
    hd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 62);
    e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
    e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
    e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
    e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
    e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
    e.closePath();
    hd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
    e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
    e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
    e.closePath();
    hd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 1, a * 89);
    e.bezierCurveTo(a * 18, a * 100, a * 34, a * 110, a * 35, a * 111);
    e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
    e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
    e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
    e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
    e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
    e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
    e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
    e.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * 4, a * 90);
    e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
    e.closePath();
    hd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 71);
    e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
    e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
    e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
    e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
    e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
    e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
    e.closePath();
    hd(e, kl, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 89);
    e.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
    e.closePath();
    hd(e, ma, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 102);
    e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
    e.closePath();
    hd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 62);
    e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
    e.closePath();
    hd(e, Kn, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70, a * 41);
    e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
    e.closePath();
    hd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 33);
    e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
    e.closePath();
    hd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 28);
    e.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
    e.closePath();
    hd(e, undefined, c[4], a * 6);
    return d;
  }
  function Jp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.5;
    bd(e, a * 69, a * 64, a * 48.16637831516918);
    hd(e, c[1]);
    e.globalAlpha = 0.7;
    bd(e, a * 69, a * 64, a * 38.23105625617661);
    hd(e, c[2]);
    e.globalAlpha = 0.7;
    bd(e, a * 69, a * 64, a * 32.01562118716424);
    hd(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 41);
    e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
    e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
    e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 62);
    e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
    e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
    e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
    e.closePath();
    hd(e, c[3]);
    return d;
  }
  function Mp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 161;
    d.height = a * 184;
    e.translate(0, a * 10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    hd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    hd(e, c[0]);
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    hd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    hd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104.5, a * 35.609375);
    e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
    e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
    e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
    hd(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.5, a * 72.609375);
    e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
    hd(e, Wg, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.5, a * 85.609375);
    e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
    hd(e, Lh, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68.5, a * 122.609375);
    e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
    hd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.5, a * 18.609375);
    e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
    e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
    e.closePath();
    hd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146.5, a * 61.50892639160156);
    e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
    e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
    e.closePath();
    hd(e, c[3]);
    return d;
  }
  function Bp() {
    new Date().getTime();
    Nc();
    bp();
    Ⲇⵠ[540] = [];
    Ⲇⵠ[540][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[540][sh.ⲆⵠⲆ] = [];
    for (var a = 0; a < sh.ⲆᐃⵠᐃᐃⲆᐃ; a++) {
      Ⲇⵠ[540][sh.ⲆⲆΔ].push(pr(nm(1, 4 + a, "#59B8CE")));
      Ⲇⵠ[540][sh.ⲆⵠⲆ].push(pr(nm(1, 4 + a, "#90DDD9")));
    }
    Ⲇⵠ[470] = [];
    Ⲇⵠ[470][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[470][sh.ⲆⵠⲆ] = [];
    for (a = 0; a < sh.ⵠⵠⲆᐃΔᐃΔ; a++) {
      Ⲇⵠ[470][sh.ⲆⲆΔ].push(pr(nm(1, 4 + a, "#fff")));
      Ⲇⵠ[470][sh.ⲆⵠⲆ].push(pr(nm(1, 4 + a, "#fff")));
    }
    Ⲇⵠ[471] = [];
    Ⲇⵠ[471][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[471][sh.ⲆⵠⲆ] = [];
    for (a = 0; sh.ⵠⵠⲆᐃΔᐃΔ > a; a++) {
      Ⲇⵠ[471][sh.ⲆⲆΔ].push(pr(nm(1, 6 + a, "#DDCD8A")));
      Ⲇⵠ[471][sh.ⲆⵠⲆ].push(pr(nm(1, 6 + a, "#155E57")));
    }
    Ⲇⵠ[942] = [];
    Ⲇⵠ[942][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[942][sh.ⲆⵠⲆ] = [];
    for (a = 0; a < sh.ⵠᐃᐃⵠᐃⵠⵠ; a++) {
      Ⲇⵠ[942][sh.ⲆⲆΔ].push(pr(nm(1, 4 + a, "#353326")));
      Ⲇⵠ[942][sh.ⲆⵠⲆ].push(pr(nm(1, 4 + a, "#1D2526")));
    }
    Ⲇⵠ[201] = [];
    Ⲇⵠ[201][sh.ⲆⲆΔ] = pr(kd(1.5, 0, ["#ee71a9"]));
    Ⲇⵠ[201][sh.ⲆⵠⲆ] = pr(kd(1.5, 0, ["#ee71a9"]));
    Ⲇⵠ[872] = [Ⲇⵠ[201]];
    Ⲇⵠ[872][1] = [];
    Ⲇⵠ[872][2] = [];
    Ⲇⵠ[872][3] = [];
    Ⲇⵠ[872][4] = [];
    Ⲇⵠ[872][1][sh.ⲆⲆΔ] = pr(kd(1.5, 0, ["#e2d63b"]));
    Ⲇⵠ[872][1][sh.ⲆⵠⲆ] = pr(kd(1.5, 0, ["#e2d63b"]));
    Ⲇⵠ[872][2][sh.ⲆⲆΔ] = pr(kd(1.5, 0, ["#309cbd"]));
    Ⲇⵠ[872][2][sh.ⲆⵠⲆ] = pr(kd(1.5, 0, ["#309cbd"]));
    Ⲇⵠ[872][3][sh.ⲆⲆΔ] = pr(kd(1.5, 0, ["#cd232d"]));
    Ⲇⵠ[872][3][sh.ⲆⵠⲆ] = pr(kd(1.5, 0, ["#cd232d"]));
    Ⲇⵠ[872][4][sh.ⲆⲆΔ] = pr(kd(1.5, 0, ["#42b672"]));
    Ⲇⵠ[872][4][sh.ⲆⵠⲆ] = pr(kd(1.5, 0, ["#42b672"]));
    if (ᐃⵠⵠ.ⲆⲆΔⲆΔⲆⵠ("cti", bj.location.href)) {
      document.getElementById("version").innerHTML += "[CTI]";
    } else {
      pr = function (a) {
        a.loaded = 1;
        return a;
      };
    }
    Ⲇⵠ[797] = pr(function () {
      var a = document.createElement("canvas");
      var b = a.getContext("2d");
      a.width = 460;
      a.height = 220;
      b.fillStyle = "#3a2a0d";
      b.fillRect(0, 0, a.width, a.height);
      b.lineWidth = 4;
      b.beginPath();
      b.strokeStyle = "#513810";
      for (var c = 20; c < 220; c += 20) {
        b.moveTo(0, c);
        b.lineTo(460, c);
        b.closePath();
        b.stroke();
      }
      return a;
    }());
    Ⲇⵠ[108] = [];
    Ⲇⵠ[108][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[108][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[108][sh.ⲆⲆΔ].push(pr(am(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    Ⲇⵠ[108][sh.ⲆⲆΔ].push(pr(am(0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    Ⲇⵠ[108][sh.ⲆⲆΔ].push(pr(am(0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    Ⲇⵠ[108][sh.ⲆⵠⲆ].push(pr(am(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    Ⲇⵠ[108][sh.ⲆⵠⲆ].push(pr(am(0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    Ⲇⵠ[108][sh.ⲆⵠⲆ].push(pr(am(0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    Ⲇⵠ[111] = [];
    Ⲇⵠ[111][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[111][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[111][sh.ⲆⲆΔ].push(pr(Tu(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    Ⲇⵠ[111][sh.ⲆⲆΔ].push(pr(Tu(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    Ⲇⵠ[111][sh.ⲆⲆΔ].push(pr(Tu(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    Ⲇⵠ[111][sh.ⲆⵠⲆ].push(pr(Tu(1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
    Ⲇⵠ[111][sh.ⲆⵠⲆ].push(pr(Tu(1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
    Ⲇⵠ[111][sh.ⲆⵠⲆ].push(pr(Tu(1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
    Ⲇⵠ[112] = [];
    Ⲇⵠ[112][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[112][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[112][sh.ⲆⲆΔ].push(pr(rm(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    Ⲇⵠ[112][sh.ⲆⲆΔ].push(pr(rm(0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    Ⲇⵠ[112][sh.ⲆⲆΔ].push(pr(rm(0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    Ⲇⵠ[112][sh.ⲆⵠⲆ].push(pr(rm(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    Ⲇⵠ[112][sh.ⲆⵠⲆ].push(pr(rm(0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    Ⲇⵠ[112][sh.ⲆⵠⲆ].push(pr(rm(0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    Ⲇⵠ[239] = [];
    Ⲇⵠ[239][sh.ⲆⲆΔ] = ᐃΔ.ΔΔᐃⲆⵠᐃΔ;
    Ⲇⵠ[239][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⵠΔⲆⲆΔⲆ;
    Ⲇⵠ[286] = [];
    Ⲇⵠ[286][sh.ⲆⲆΔ] = pr(lu(0.6, ["#0d1b1c"]));
    Ⲇⵠ[286][sh.ⲆⵠⲆ] = pr(lu(0.6, ["#030d14"]));
    Ⲇⵠ[793] = [];
    Ⲇⵠ[793][sh.ⲆⲆΔ] = pr(xu(0.6, ["#2a2938", "#242330"]));
    Ⲇⵠ[793][sh.ⲆⵠⲆ] = pr(xu(0.6, ["#1b1e30", "#161921"]));
    Ⲇⵠ[820] = [];
    Ⲇⵠ[820][sh.ⲆⲆΔ] = pr(Bd(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
    Ⲇⵠ[820][sh.ⲆⵠⲆ] = pr(Bd(0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
    Ⲇⵠ[821] = [];
    Ⲇⵠ[821][sh.ⲆⲆΔ] = pr(Md(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
    Ⲇⵠ[821][sh.ⲆⵠⲆ] = pr(Md(0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
    Ⲇⵠ[822] = [];
    Ⲇⵠ[822][sh.ⲆⲆΔ] = pr(su(0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
    Ⲇⵠ[822][sh.ⲆⵠⲆ] = pr(su(0.4, ["#030d14", "#11635e", "#02373e"]));
    Ⲇⵠ[823] = pr(Jd(0.6, ["#BB0000"]));
    Ⲇⵠ[824] = pr(Jd(0.6, ["#DBE71C"]));
    Ⲇⵠ[825] = pr(Jd(0.6, ["#00BB00"]));
    Ⲇⵠ[109] = [];
    Ⲇⵠ[109][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[109][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[109][sh.ⲆⲆΔ].push(qu(1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], Fa, 0));
    Ⲇⵠ[109][sh.ⲆⲆΔ].push(qu(1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], true, 0));
    Ⲇⵠ[109][sh.ⲆⲆΔ].push(qu(0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], false, 0));
    Ⲇⵠ[109][sh.ⲆⲆΔ].push(qu(0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], true, 0));
    Ⲇⵠ[109][sh.ⲆⲆΔ].push(qu(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], Tn, 0));
    Ⲇⵠ[109][sh.ⲆⲆΔ].push(qu(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], true, 0));
    Ⲇⵠ[109][sh.ⲆⵠⲆ].push(qu(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], false, 0));
    Ⲇⵠ[109][sh.ⲆⵠⲆ].push(qu(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], true, 0));
    Ⲇⵠ[109][sh.ⲆⵠⲆ].push(qu(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], go, 0));
    Ⲇⵠ[109][sh.ⲆⵠⲆ].push(qu(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], true, 0));
    Ⲇⵠ[109][sh.ⲆⵠⲆ].push(qu(0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], false, 0));
    Ⲇⵠ[109][sh.ⲆⵠⲆ].push(qu(0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 0));
    Ⲇⵠ[307] = [];
    Ⲇⵠ[307][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[307][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[307][sh.ⲆⲆΔ].push(pr(tu(pu(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], false), Ⲇⵠ[109][sh.ⲆⲆΔ][0])));
    Ⲇⵠ[307][sh.ⲆⲆΔ].push(pr(tu(pu(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], true), Ⲇⵠ[109][sh.ⲆⲆΔ][1])));
    Ⲇⵠ[307][sh.ⲆⵠⲆ].push(pr(tu(pu(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], false), Ⲇⵠ[109][sh.ⲆⵠⲆ][0])));
    Ⲇⵠ[307][sh.ⲆⵠⲆ].push(pr(tu(pu(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], eg), Ⲇⵠ[109][sh.ⲆⵠⲆ][1])));
    Ⲇⵠ[307][sh.ⲆⲆΔ].push(pr(tu(pu(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], Gg), Ⲇⵠ[109][sh.ⲆⲆΔ][2])));
    Ⲇⵠ[307][sh.ⲆⲆΔ].push(pr(tu(pu(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], Fg), Ⲇⵠ[109][sh.ⲆⲆΔ][2])));
    Ⲇⵠ[307][sh.ⲆⵠⲆ].push(pr(tu(pu(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], false), Ⲇⵠ[109][sh.ⲆⵠⲆ][2])));
    Ⲇⵠ[307][sh.ⲆⵠⲆ].push(pr(tu(pu(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], Tj), Ⲇⵠ[109][sh.ⲆⵠⲆ][3])));
    Ⲇⵠ[109][sh.ⲆⲆΔ][5] = pr(Ⲇⵠ[109][sh.ⲆⲆΔ][5]);
    Ⲇⵠ[109][sh.ⲆⲆΔ][4] = pr(Ⲇⵠ[109][sh.ⲆⲆΔ][4]);
    Ⲇⵠ[109][sh.ⲆⲆΔ][3] = pr(Ⲇⵠ[109][sh.ⲆⲆΔ][3]);
    Ⲇⵠ[109][sh.ⲆⲆΔ][2] = pr(Ⲇⵠ[109][sh.ⲆⲆΔ][2]);
    Ⲇⵠ[109][sh.ⲆⲆΔ][1] = pr(Ⲇⵠ[109][sh.ⲆⲆΔ][1]);
    Ⲇⵠ[109][sh.ⲆⲆΔ][0] = pr(Ⲇⵠ[109][sh.ⲆⲆΔ][0]);
    Ⲇⵠ[109][sh.ⲆⵠⲆ][5] = pr(Ⲇⵠ[109][sh.ⲆⵠⲆ][5]);
    Ⲇⵠ[109][sh.ⲆⵠⲆ][4] = pr(Ⲇⵠ[109][sh.ⲆⵠⲆ][4]);
    Ⲇⵠ[109][sh.ⲆⵠⲆ][3] = pr(Ⲇⵠ[109][sh.ⲆⵠⲆ][3]);
    Ⲇⵠ[109][sh.ⲆⵠⲆ][2] = pr(Ⲇⵠ[109][sh.ⲆⵠⲆ][2]);
    Ⲇⵠ[109][sh.ⲆⵠⲆ][1] = pr(Ⲇⵠ[109][sh.ⲆⵠⲆ][1]);
    Ⲇⵠ[109][sh.ⲆⵠⲆ][0] = pr(Ⲇⵠ[109][sh.ⲆⵠⲆ][0]);
    Ⲇⵠ[8] = [];
    Ⲇⵠ[8][sh.ⲆⲆΔ] = pr(md(4, ru(0.75, Tk, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
    Ⲇⵠ[8][sh.ⲆⵠⲆ] = pr(md(4, ru(0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
    Ⲇⵠ[1] = [];
    Ⲇⵠ[1][sh.ⲆⲆΔ] = pr(md(4, ru(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    Ⲇⵠ[1][sh.ⲆⵠⲆ] = pr(md(4, ru(0.75, pl, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
    Ⲇⵠ[3] = [];
    Ⲇⵠ[3][sh.ⲆⲆΔ] = pr(md(4, ru(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    Ⲇⵠ[3][sh.ⲆⵠⲆ] = pr(md(4, ru(0.75, true, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
    Ⲇⵠ[4] = [];
    Ⲇⵠ[4][sh.ⲆⲆΔ] = pr(md(4, ru(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    Ⲇⵠ[4][sh.ⲆⵠⲆ] = pr(md(4, ru(0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    Ⲇⵠ[31] = [];
    Ⲇⵠ[31][sh.ⲆⲆΔ] = pr(md(4, ru(0.75, pl, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    Ⲇⵠ[31][sh.ⲆⵠⲆ] = pr(md(4, ru(0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    Ⲇⵠ[9] = [];
    Ⲇⵠ[9][sh.ⲆⲆΔ] = pr(md(3, vu(0.17, true, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
    Ⲇⵠ[9][sh.ⲆⵠⲆ] = pr(md(3, vu(0.17, Ng, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
    Ⲇⵠ[199] = [];
    Ⲇⵠ[199][sh.ⲆⲆΔ] = pr(md(3, Iu(0.32, true, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
    Ⲇⵠ[199][sh.ⲆⵠⲆ] = pr(md(3, Iu(0.42, true, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
    Ⲇⵠ[57] = [];
    Ⲇⵠ[57][sh.ⲆⲆΔ] = pr(md(3, ou(0.4, It, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
    Ⲇⵠ[57][sh.ⲆⵠⲆ] = pr(md(3, ou(0.4, Fg, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
    Ⲇⵠ[0] = [];
    Ⲇⵠ[0][sh.ⲆⲆΔ] = pr(md(3, wu(0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
    Ⲇⵠ[0][sh.ⲆⵠⲆ] = pr(md(3, wu(0.4, qk, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
    Ⲇⵠ[5] = [];
    Ⲇⵠ[5][sh.ⲆⲆΔ] = pr(md(3, Du(0.4, true, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
    Ⲇⵠ[5][sh.ⲆⵠⲆ] = pr(md(3, Du(0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
    Ⲇⵠ[6] = [];
    Ⲇⵠ[6][sh.ⲆⲆΔ] = pr(md(3, Cu(0.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
    Ⲇⵠ[6][sh.ⲆⵠⲆ] = pr(md(3, Cu(0.4, pl, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
    Ⲇⵠ[30] = [];
    Ⲇⵠ[30][sh.ⲆⲆΔ] = pr(md(3, Fu(0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
    Ⲇⵠ[30][sh.ⲆⵠⲆ] = pr(md(3, Fu(0.4, true, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
    Ⲇⵠ[285] = [];
    Ⲇⵠ[285][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[285][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[285][sh.ⲆⲆΔ].push(pr(Ru(0.9, 0, ["#0d4f35"], 0)));
    Ⲇⵠ[285][sh.ⲆⲆΔ].push(pr(Ru(0.9, 0, ["#0d4f35"], 1)));
    Ⲇⵠ[285][sh.ⲆⲆΔ].push(pr(Ru(0.9, 0, ["#0d4f35"], 2)));
    Ⲇⵠ[285][sh.ⲆⵠⲆ].push(pr(Ru(0.9, 0, ["#053339"], 0)));
    Ⲇⵠ[285][sh.ⲆⵠⲆ].push(pr(Ru(0.9, 0, ["#053339"], 1)));
    Ⲇⵠ[285][sh.ⲆⵠⲆ].push(pr(Ru(0.9, 0, ["#053339"], 2)));
    Ⲇⵠ[285][sh.ⲆⲆΔ].push(pr(im(0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
    Ⲇⵠ[285][sh.ⲆⲆΔ].push(pr(im(0.8, ["#292002", "#ba930e", "#6d5704"])));
    Ⲇⵠ[285][sh.ⲆⵠⲆ].push(pr(im(0.9, ["#052919", "#0a4738", "#06321f"])));
    Ⲇⵠ[285][sh.ⲆⵠⲆ].push(pr(im(0.8, ["#052918", "#08491c", "#063417"])));
    Ⲇⵠ[183] = [];
    Ⲇⵠ[183][sh.ⲆⲆΔ] = pr(md(Math.PI / 2, Mc(0.25, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
    Ⲇⵠ[183][sh.ⲆⵠⲆ] = pr(md(Math.PI / 2, Mc(0.25, Gh, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
    Ⲇⵠ[803] = [];
    Ⲇⵠ[803].push(pr(Um(0.25, ["#44301b", "#57442a", "#523e26"], 0)));
    Ⲇⵠ[803].push(pr(Um(0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
    Ⲇⵠ[803].push(pr(Um(0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
    Ⲇⵠ[802] = [];
    Ⲇⵠ[802][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[802][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[802][sh.ⲆⲆΔ].push(pr(md(Math.PI / 2, Gm(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
    Ⲇⵠ[802][sh.ⲆⵠⲆ].push(pr(md(Math.PI / 2, Gm(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
    Ⲇⵠ[802][sh.ⲆⲆΔ].push(pr(md(Math.PI / 2, Gm(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
    Ⲇⵠ[802][sh.ⲆⵠⲆ].push(pr(md(Math.PI / 2, Gm(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
    Ⲇⵠ[802][sh.ⲆⲆΔ].push(pr(md(Math.PI / 2, Gm(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
    Ⲇⵠ[802][sh.ⲆⵠⲆ].push(pr(md(Math.PI / 2, Gm(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
    Ⲇⵠ[802][sh.ⲆⲆΔ].push(pr(md(Math.PI / 2, Gm(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
    Ⲇⵠ[802][sh.ⲆⵠⲆ].push(pr(md(Math.PI / 2, Gm(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
    Ⲇⵠ[110] = [];
    Ⲇⵠ[110][sh.ⲆⲆΔ] = [pr(Qu(1.2, qk, ["#0e3022", "#0b8052", "#077b49"]))];
    Ⲇⵠ[110][sh.ⲆⵠⲆ] = [pr(Qu(1.2, Zl, ["#030d14", "#084442", "#0a4049"]))];
    Ⲇⵠ[623] = [];
    Ⲇⵠ[623][sh.ⲆⲆΔ] = pr(Qu(0.8, Fg, ["#0e3022", "#68622D", "#665329"]));
    Ⲇⵠ[623][sh.ⲆⵠⲆ] = pr(Qu(0.8, true, ["#030d14", "#0F3A24", "#083326"]));
    Ⲇⵠ[189] = [];
    Ⲇⵠ[189][sh.ⲆⲆΔ] = pr(Oc(0.5, Xs, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
    Ⲇⵠ[189][sh.ⲆⵠⲆ] = pr(Oc(0.5, nq, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
    Ⲇⵠ[192] = [];
    Ⲇⵠ[192][sh.ⲆⲆΔ] = pr(yd(0.5, Tj, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
    Ⲇⵠ[192][sh.ⲆⵠⲆ] = pr(yd(0.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
    Ⲇⵠ[194] = [];
    Ⲇⵠ[194][sh.ⲆⲆΔ] = pr(Hc(0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
    Ⲇⵠ[194][sh.ⲆⵠⲆ] = pr(Hc(0.5, eg, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
    Ⲇⵠ[287] = [];
    Ⲇⵠ[287][sh.ⲆⲆΔ] = pr(Qu(0.8, Tk, ["#1b170c", "#0b8052", "#077b49"]));
    Ⲇⵠ[287][sh.ⲆⵠⲆ] = pr(Qu(0.8, true, ["#030d14", "#084442", "#0a4049"]));
    Ⲇⵠ[813] = [];
    Ⲇⵠ[813][sh.ⲆⲆΔ] = pr(Oc(0.5, true, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
    Ⲇⵠ[813][sh.ⲆⵠⲆ] = pr(Oc(0.5, nq, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
    Ⲇⵠ[839] = [];
    Ⲇⵠ[839][sh.ⲆⲆΔ] = pr(yd(0.5, pl, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
    Ⲇⵠ[839][sh.ⲆⵠⲆ] = pr(yd(0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
    Ⲇⵠ[869] = [];
    Ⲇⵠ[869][sh.ⲆⲆΔ] = pr(Hc(0.5, Mg, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
    Ⲇⵠ[869][sh.ⲆⵠⲆ] = pr(Hc(0.5, Mg, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
    Ⲇⵠ[854] = [];
    Ⲇⵠ[854][sh.ⲆⲆΔ] = pr(Qc(0.45, true, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
    Ⲇⵠ[854][sh.ⲆⵠⲆ] = pr(Qc(0.45, qk, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
    Ⲇⵠ[859] = pr(Qc(0.65, true, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
    Ⲇⵠ[294] = [];
    Ⲇⵠ[294][sh.ⲆⲆΔ] = pr(om(1.4, 0, ["#ac222a", "#e6636a"]));
    Ⲇⵠ[294][sh.ⲆⵠⲆ] = pr(om(1.4, 0, ["#46195e", "#744188"]));
    Ⲇⵠ[288] = [];
    Ⲇⵠ[288][sh.ⲆⲆΔ] = pr(du(0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
    Ⲇⵠ[288][sh.ⲆⵠⲆ] = pr(du(0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
    Ⲇⵠ[118] = [];
    Ⲇⵠ[118][sh.ⲆⲆΔ] = pr(gu(0.9, 0, ["#4d2d14", "#432516"]));
    Ⲇⵠ[118][sh.ⲆⵠⲆ] = pr(gu(0.9, 0, ["#282404", "#0a0a01"]));
    Ⲇⵠ[113] = [];
    Ⲇⵠ[113][sh.ⲆⲆΔ] = pr(fu(0.9, 0, ["#4d2d14", "#432516"]));
    Ⲇⵠ[113][sh.ⲆⵠⲆ] = pr(fu(0.9, 0, ["#282404", "#0a0a01"]));
    Ⲇⵠ[289] = [];
    Ⲇⵠ[289][sh.ⲆⲆΔ] = pr(eu(0.9, 0, ["#efd435"]));
    Ⲇⵠ[289][sh.ⲆⵠⲆ] = pr(eu(0.9, 0, ["#fffabb"]));
    Ⲇⵠ[282] = [];
    Ⲇⵠ[282][sh.ⲆⲆΔ] = pr(bu(0.9, 0, ["#efd435"]));
    Ⲇⵠ[282][sh.ⲆⵠⲆ] = pr(bu(0.9, 0, ["#fffabb"]));
    Ⲇⵠ[816] = [];
    Ⲇⵠ[816][sh.ⲆⲆΔ] = pr(eu(0.9, 0, ["#efd435"]));
    Ⲇⵠ[816][sh.ⲆⵠⲆ] = pr(eu(0.9, 0, ["rgba(255, 84, 0, 1)"]));
    Ⲇⵠ[817] = [];
    Ⲇⵠ[817][sh.ⲆⲆΔ] = pr(bu(0.9, 0, ["#efd435"]));
    Ⲇⵠ[817][sh.ⲆⵠⲆ] = pr(bu(0.9, 0, ["#ff5704"]));
    Ⲇⵠ[324] = pr(Fd(1, "#ffffff"));
    Ⲇⵠ[301] = pr(Fd(1.5, "#ffffff"));
    Ⲇⵠ[306] = pr(Su(1, "Your score:", 15, "#FFF"));
    Ⲇⵠ[655] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 243;
      c.height = a * 172;
      bd(d, a * 119.5, a * 140.125, a * 19);
      hd(d, undefined, b[1], a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 36.5, a * 20.125);
      d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
      d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
      d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
      d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
      d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
      d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
      d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
      d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
      d.closePath();
      hd(d, b[0], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 15.5, a * 138.625);
      d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
      d.closePath();
      hd(d, undefined, b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 13.5, a * 131.625);
      d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
      d.closePath();
      hd(d, undefined, b[3], a * 10);
      bd(d, a * 119.5, a * 140.125, a * 14.866068747318506);
      hd(d, b[4], b[5], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 106.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
      d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
      d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
      d.closePath();
      hd(d, b[6], b[7], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
      hd(d, Kn, b[8], a * 5);
      d.save();
      d.translate(a * 75.5, a * 80.125);
      gd(d, a * -39, a * -40, a * 78, a * 78, a * 10);
      d.restore();
      hd(d, b[9]);
      d.save();
      d.translate(a * 167, a * 80.125);
      gd(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
      d.restore();
      hd(d, b[9]);
      return c;
    }(0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
    Ⲇⵠ[656] = ᐃΔ.ⲆᐃᐃⲆⵠⲆⲆ;
    Ⲇⵠ[135] = [];
    Ⲇⵠ[135][sh.ⲆⲆΔ] = pr(Zt(1.5, rr, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    Ⲇⵠ[135][sh.ⲆⵠⲆ] = pr(Zt(1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    Ⲇⵠ[641] = [];
    Ⲇⵠ[641][sh.ⲆⲆΔ] = pr(Vt(2, Mg, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    Ⲇⵠ[641][sh.ⲆⵠⲆ] = pr(Vt(2, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    Ⲇⵠ[642] = [];
    Ⲇⵠ[642][sh.ⲆⲆΔ] = pr(Ut(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    Ⲇⵠ[642][sh.ⲆⵠⲆ] = pr(Ut(1.5, vs, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    Ⲇⵠ[134] = [];
    Ⲇⵠ[134][sh.ⲆⲆΔ] = pr(Zd(2.2, 0, ["#A89F67", "#9E8456"]));
    Ⲇⵠ[134][sh.ⲆⵠⲆ] = pr(Zd(2.2, 0, ["#0B4049", "#08383D"]));
    Ⲇⵠ[638] = [];
    Ⲇⵠ[638][sh.ⲆⲆΔ] = pr(Zd(2.2, 0, ["#68622D", "#665329"]));
    Ⲇⵠ[638][sh.ⲆⵠⲆ] = pr(Zd(2.2, 0, ["#0F3A24", "#083326"]));
    Ⲇⵠ[321] = [];
    Ⲇⵠ[321][sh.ⲆⲆΔ] = pr(Lu(0.8, 0, ["#A89F67", "#9E8456"]));
    Ⲇⵠ[321][sh.ⲆⵠⲆ] = pr(Lu(0.8, 0, ["#15514F", "#0F3F3D"]));
    Ⲇⵠ[811] = [];
    Ⲇⵠ[811][sh.ⲆⲆΔ] = pr(Lu(0.8, 0, ["#c67933", "#b17238"]));
    Ⲇⵠ[811][sh.ⲆⵠⲆ] = pr(Lu(0.8, 0, ["#043c37", "#032b23"]));
    Ⲇⵠ[984] = [];
    Ⲇⵠ[984][sh.ⲆⲆΔ] = pr(Lu(0.8, 0, ["#3a8214", "#4a9c1e"]));
    Ⲇⵠ[984][sh.ⲆⵠⲆ] = pr(Lu(0.8, 0, ["#032d29", "#044640"]));
    Ⲇⵠ[837] = [];
    Ⲇⵠ[837][sh.ⲆⲆΔ] = pr(Lu(0.8, 0, ["#e8e8e8", "#bbbbbb"]));
    Ⲇⵠ[837][sh.ⲆⵠⲆ] = pr(Lu(0.8, 0, ["#1c6161", "#07413f"]));
    Ⲇⵠ[848] = [];
    Ⲇⵠ[848][sh.ⲆⲆΔ] = pr(Lu(0.8, 0, ["#328a56", "#449573"]));
    Ⲇⵠ[848][sh.ⲆⵠⲆ] = pr(Lu(0.8, 0, ["#043c37", "#032b23"]));
    Ⲇⵠ[952] = [];
    Ⲇⵠ[952][sh.ⲆⲆΔ] = pr(Lu(0.8, 0, ["#c98e2f", "#a36b11"]));
    Ⲇⵠ[952][sh.ⲆⵠⲆ] = pr(Lu(0.8, 0, ["#043c37", "#032b23"]));
    Ⲇⵠ[962] = [];
    Ⲇⵠ[962][sh.ⲆⲆΔ] = pr(Lu(0.8, 0, ["#b22419", "#99110e"]));
    Ⲇⵠ[962][sh.ⲆⵠⲆ] = pr(Lu(0.8, 0, ["#04323c", "#03222b"]));
    Ⲇⵠ[969] = [];
    Ⲇⵠ[969][sh.ⲆⲆΔ] = pr(Lu(0.8, 0, ["#13a56d", "#098a58"]));
    Ⲇⵠ[969][sh.ⲆⵠⲆ] = pr(Lu(0.8, 0, ["#043c37", "#032b23"]));
    Ⲇⵠ[657] = hu(1, [{
      f: Zd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    Ⲇⵠ[723] = hu(1, [{
      f: fu,
      x: 0,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    Ⲇⵠ[724] = hu(1, [{
      f: fp,
      x: 0,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    Ⲇⵠ[334] = hu(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[115] = [];
    Ⲇⵠ[115][sh.ⲆⲆΔ] = pr(Ed(0.9, 0, ["#7d613e", "#9e7e5a"]));
    Ⲇⵠ[115][sh.ⲆⵠⲆ] = pr(Ed(0.9, 0, ["#084442", "#125e5a"]));
    Ⲇⵠ[132] = [];
    Ⲇⵠ[132][sh.ⲆⲆΔ] = pr(Ed(0.9, 0, ["#9E8456", "#A89F67"]));
    Ⲇⵠ[132][sh.ⲆⵠⲆ] = pr(Ed(0.9, 0, ["#1b6f6a", "#0d4e4c"]));
    Ⲇⵠ[668] = [];
    Ⲇⵠ[668][sh.ⲆⲆΔ] = pr(Ed(0.9, 0, ["#665329", "#68622D"]));
    Ⲇⵠ[668][sh.ⲆⵠⲆ] = pr(Ed(0.9, 0, ["#083326", "#0F3A24"]));
    Ⲇⵠ[188] = [];
    Ⲇⵠ[188][sh.ⲆⲆΔ] = pr(Ed(0.9, 0, ["#c67933", "#ec952d"]));
    Ⲇⵠ[188][sh.ⲆⵠⲆ] = pr(Ed(0.9, 0, ["#0e6553", "#094437"]));
    Ⲇⵠ[210] = [];
    Ⲇⵠ[210][sh.ⲆⲆΔ] = pr(Ed(0.9, 0, ["#375809", "#4b770e"]));
    Ⲇⵠ[210][sh.ⲆⵠⲆ] = pr(Ed(0.9, 0, ["#09542d", "#0d5d2f"]));
    Ⲇⵠ[985] = [];
    Ⲇⵠ[985][sh.ⲆⲆΔ] = pr(Ed(0.9, 0, ["#585809", "#72770e"]));
    Ⲇⵠ[985][sh.ⲆⵠⲆ] = pr(Ed(0.9, 0, ["#295209", "#305d0d"]));
    Ⲇⵠ[191] = [];
    Ⲇⵠ[191][sh.ⲆⲆΔ] = pr(Ed(0.9, 0, ["#b9b094", "#e2d2c0"]));
    Ⲇⵠ[191][sh.ⲆⵠⲆ] = pr(Ed(0.9, 0, ["#126366", "#0d484b"]));
    Ⲇⵠ[193] = [];
    Ⲇⵠ[193][sh.ⲆⲆΔ] = pr(Ed(0.9, 0, ["#3f8662", "#30915d"]));
    Ⲇⵠ[193][sh.ⲆⵠⲆ] = pr(Ed(0.9, 0, ["#0e6553", "#094437"]));
    Ⲇⵠ[812] = [];
    Ⲇⵠ[812][sh.ⲆⲆΔ] = pr(Ed(0.9, 0, ["#c79153", "#dfa868"]));
    Ⲇⵠ[812][sh.ⲆⵠⲆ] = pr(Ed(0.9, 0, ["#073927", "#075040"]));
    Ⲇⵠ[838] = [];
    Ⲇⵠ[838][sh.ⲆⲆΔ] = pr(Ed(0.9, 0, ["#768b5b", "#819984"]));
    Ⲇⵠ[838][sh.ⲆⵠⲆ] = pr(Ed(0.9, 0, ["#0c4540", "#0e5153"]));
    Ⲇⵠ[849] = [];
    Ⲇⵠ[849][sh.ⲆⲆΔ] = pr(Ed(0.9, 0, ["#567465", "#627c6e"]));
    Ⲇⵠ[849][sh.ⲆⵠⲆ] = pr(Ed(0.9, 0, ["#073927", "#075040"]));
    Ⲇⵠ[204] = [];
    Ⲇⵠ[204][sh.ⲆⲆΔ] = pr(Ed(0.9, 0, ["#996b3a", "#bf956b"]));
    Ⲇⵠ[204][sh.ⲆⵠⲆ] = pr(Ed(0.9, 0, ["#0e6553", "#094437"]));
    Ⲇⵠ[953] = [];
    Ⲇⵠ[953][sh.ⲆⲆΔ] = pr(Ed(0.9, 0, ["#7a634a", "#a68f77"]));
    Ⲇⵠ[953][sh.ⲆⵠⲆ] = pr(Ed(0.9, 0, ["#1e4d43", "#113c32"]));
    Ⲇⵠ[206] = [];
    Ⲇⵠ[206][sh.ⲆⲆΔ] = pr(Ed(0.9, 0, ["#99403c", "#bc796c"]));
    Ⲇⵠ[206][sh.ⲆⵠⲆ] = pr(Ed(0.9, 0, ["#1e434d", "#11303c"]));
    Ⲇⵠ[963] = [];
    Ⲇⵠ[963][sh.ⲆⲆΔ] = pr(Ed(0.9, 0, ["#88504e", "#b3857c"]));
    Ⲇⵠ[963][sh.ⲆⵠⲆ] = pr(Ed(0.9, 0, ["#253b41", "#162930"]));
    Ⲇⵠ[208] = [];
    Ⲇⵠ[208][sh.ⲆⲆΔ] = pr(Ed(0.9, 0, ["#0f8870", "#23af93"]));
    Ⲇⵠ[208][sh.ⲆⵠⲆ] = pr(Ed(0.9, 0, ["#032829", "#083233"]));
    Ⲇⵠ[970] = [];
    Ⲇⵠ[970][sh.ⲆⲆΔ] = pr(Ed(0.9, 0, ["#618a20", "#84a74e"]));
    Ⲇⵠ[970][sh.ⲆⵠⲆ] = pr(Ed(0.9, 0, ["#1f4632", "#335d47"]));
    Ⲇⵠ[114] = [];
    Ⲇⵠ[114][sh.ⲆⲆΔ] = pr(Nd(1.2, Mg, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
    Ⲇⵠ[114][sh.ⲆⵠⲆ] = pr(Nd(1.2, true, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
    Ⲇⵠ[162] = [];
    Ⲇⵠ[162][sh.ⲆⲆΔ] = pr(ym(1, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    Ⲇⵠ[162][sh.ⲆⵠⲆ] = pr(ym(1, nq, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    Ⲇⵠ[165] = [];
    Ⲇⵠ[165][sh.ⲆⲆΔ] = pr(Jm(1, Fg, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    Ⲇⵠ[165][sh.ⲆⵠⲆ] = pr(Jm(1, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    Ⲇⵠ[122] = [];
    Ⲇⵠ[122][sh.ⲆⲆΔ] = pr(mm(1, Tj, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    Ⲇⵠ[122][sh.ⲆⵠⲆ] = pr(mm(1, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    Ⲇⵠ[163] = [];
    Ⲇⵠ[163][sh.ⲆⲆΔ] = pr(mm(1, Va, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    Ⲇⵠ[163][sh.ⲆⵠⲆ] = pr(mm(1, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    Ⲇⵠ[164] = [];
    Ⲇⵠ[164][sh.ⲆⲆΔ] = pr(Tm(1, pl, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    Ⲇⵠ[164][sh.ⲆⵠⲆ] = pr(Tm(1, B, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    Ⲇⵠ[160] = [];
    Ⲇⵠ[160][sh.ⲆⲆΔ] = pr(ic(0.8, Mg, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    Ⲇⵠ[160][sh.ⲆⵠⲆ] = pr(ic(0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    Ⲇⵠ[169] = [];
    Ⲇⵠ[169][sh.ⲆⲆΔ] = pr(Jc(0.8, true, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    Ⲇⵠ[169][sh.ⲆⵠⲆ] = pr(Jc(0.8, true, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    Ⲇⵠ[170] = [];
    Ⲇⵠ[170][sh.ⲆⲆΔ] = pr(bc(0.8, true, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    Ⲇⵠ[170][sh.ⲆⵠⲆ] = pr(bc(0.8, qk, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    Ⲇⵠ[168] = [];
    Ⲇⵠ[168][sh.ⲆⲆΔ] = pr(Tc(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    Ⲇⵠ[168][sh.ⲆⵠⲆ] = pr(Tc(0.8, true, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    Ⲇⵠ[123] = [];
    Ⲇⵠ[123][sh.ⲆⲆΔ] = pr(Tc(0.8, nq, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    Ⲇⵠ[123][sh.ⲆⵠⲆ] = pr(Tc(0.8, Ao, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    Ⲇⵠ[166] = [];
    Ⲇⵠ[166][sh.ⲆⲆΔ] = pr(Mm(1.5, Ng, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
    Ⲇⵠ[166][sh.ⲆⵠⲆ] = pr(Mm(1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    Ⲇⵠ[336] = [];
    Ⲇⵠ[336][sh.ⲆⲆΔ] = pr(Mm(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    Ⲇⵠ[336][sh.ⲆⵠⲆ] = pr(Mm(1, false, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
    Ⲇⵠ[171] = [];
    Ⲇⵠ[171][sh.ⲆⲆΔ] = pr(Pm(1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
    Ⲇⵠ[171][sh.ⲆⵠⲆ] = pr(Pm(1.5, nq, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
    Ⲇⵠ[373] = [];
    Ⲇⵠ[373][sh.ⲆⲆΔ] = pr(Pm(1, Tn, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    Ⲇⵠ[373][sh.ⲆⵠⲆ] = pr(Pm(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    Ⲇⵠ[124] = [];
    Ⲇⵠ[124][sh.ⲆⲆΔ] = pr(Pm(1.5, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    Ⲇⵠ[124][sh.ⲆⵠⲆ] = pr(Pm(1.5, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    Ⲇⵠ[500] = [];
    Ⲇⵠ[500][sh.ⲆⲆΔ] = pr(Pm(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    Ⲇⵠ[500][sh.ⲆⵠⲆ] = pr(Pm(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    Ⲇⵠ[172] = [];
    Ⲇⵠ[172][sh.ⲆⲆΔ] = pr(um(1.5, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
    Ⲇⵠ[172][sh.ⲆⵠⲆ] = pr(um(1.5, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
    Ⲇⵠ[376] = [];
    Ⲇⵠ[376][sh.ⲆⲆΔ] = pr(um(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    Ⲇⵠ[376][sh.ⲆⵠⲆ] = pr(um(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    Ⲇⵠ[173] = [];
    Ⲇⵠ[173][sh.ⲆⲆΔ] = pr(dm(1.5, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    Ⲇⵠ[173][sh.ⲆⵠⲆ] = pr(dm(1.5, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    Ⲇⵠ[379] = [];
    Ⲇⵠ[379][sh.ⲆⲆΔ] = pr(dm(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    Ⲇⵠ[379][sh.ⲆⵠⲆ] = pr(dm(1, bn, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    Ⲇⵠ[167] = [];
    Ⲇⵠ[167][sh.ⲆⲆΔ] = pr(gc(0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
    Ⲇⵠ[167][sh.ⲆⵠⲆ] = pr(gc(0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
    Ⲇⵠ[691] = [];
    Ⲇⵠ[691][sh.ⲆⲆΔ] = pr(Gc(0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
    Ⲇⵠ[691][sh.ⲆⵠⲆ] = pr(Gc(0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
    Ⲇⵠ[264] = [];
    Ⲇⵠ[264][sh.ⲆⲆΔ] = pr(Hd(0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
    Ⲇⵠ[264][sh.ⲆⵠⲆ] = pr(Hd(0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
    Ⲇⵠ[260] = [];
    Ⲇⵠ[260][sh.ⲆⲆΔ] = pr(md(Math.PI, Gd(0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
    Ⲇⵠ[260][sh.ⲆⵠⲆ] = pr(md(Math.PI, Gd(0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
    Ⲇⵠ[266] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 450;
      c.height = a * 470;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 226.5, a * 91.546875);
      d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
      d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
      d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
      d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
      d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
      d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
      d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
      d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
      d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
      d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
      d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
      d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
      d.closePath();
      hd(d, Lk, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 129.546875);
      d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
      d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
      d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
      d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
      d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
      d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
      d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
      d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
      d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
      d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
      d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
      d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
      d.closePath();
      hd(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 160.546875);
      d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
      d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
      d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
      d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
      d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
      d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
      d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
      d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
      d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
      d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
      d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
      d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
      d.closePath();
      hd(d, Bo, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 205.5, a * 194.546875);
      d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
      d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
      d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
      d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
      d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
      d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
      d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
      d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
      d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
      d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
      d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
      d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
      d.closePath();
      hd(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149.5, a * 93.546875);
      d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
      d.closePath();
      hd(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 66.546875);
      d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
      d.closePath();
      hd(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 302.5, a * 88.546875);
      d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
      d.closePath();
      hd(d, ma, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 361.5, a * 147.546875);
      d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
      d.closePath();
      hd(d, Ns, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 379.5, a * 225.546875);
      d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
      d.closePath();
      hd(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 90.5, a * 147.546875);
      d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
      d.closePath();
      hd(d, undefined, b[0], 4);
      return c;
    }(0.6, ["#FFFFFF"]));
    Ⲇⵠ[299] = [];
    Ⲇⵠ[299][sh.ⲆⲆΔ] = pr(Od(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
    Ⲇⵠ[299][sh.ⲆⵠⲆ] = pr(Od(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
    Ⲇⵠ[10] = [];
    Ⲇⵠ[10][sh.ⲆⲆΔ] = pr(Ec(0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
    Ⲇⵠ[10][sh.ⲆⵠⲆ] = pr(Ec(0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
    Ⲇⵠ[11] = [];
    Ⲇⵠ[11][sh.ⲆⲆΔ] = pr(bm(0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
    Ⲇⵠ[11][sh.ⲆⵠⲆ] = pr(bm(0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
    Ⲇⵠ[40] = [];
    Ⲇⵠ[40][sh.ⲆⲆΔ] = pr(ac(0.63, Tk, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
    Ⲇⵠ[40][sh.ⲆⵠⲆ] = pr(ac(0.63, vs, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
    Ⲇⵠ[41] = [];
    Ⲇⵠ[41][sh.ⲆⲆΔ] = pr(mu(0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
    Ⲇⵠ[41][sh.ⲆⵠⲆ] = pr(mu(0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
    Ⲇⵠ[42] = [];
    Ⲇⵠ[42][sh.ⲆⲆΔ] = pr(nu(0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
    Ⲇⵠ[42][sh.ⲆⵠⲆ] = pr(nu(0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
    Ⲇⵠ[716] = [];
    Ⲇⵠ[716][sh.ⲆⲆΔ] = pr(qc(0.42, Gh, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
    Ⲇⵠ[716][sh.ⲆⵠⲆ] = pr(qc(0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
    Ⲇⵠ[720] = [];
    Ⲇⵠ[720][sh.ⲆⲆΔ] = pr(dp(0.9, ["#e4c027"]));
    Ⲇⵠ[720][sh.ⲆⵠⲆ] = pr(dp(0.9, ["#D8E57F"]));
    Ⲇⵠ[144] = [];
    Ⲇⵠ[144][sh.ⲆⲆΔ] = pr($c(0.42, Gh, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
    Ⲇⵠ[144][sh.ⲆⵠⲆ] = pr($c(0.42, vs, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
    Ⲇⵠ[722] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 149;
      c.height = a * 356;
      d.save();
      d.translate(a * 74.5, a * 177.5);
      gd(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
      d.restore();
      hd(d, b[0], b[1], a * 4);
      d.save();
      d.translate(a * 74.5, a * 177.5);
      gd(d, a * -57.5, a * 50.5, a * 100, a * 105, a * 10);
      d.restore();
      hd(d, b[6], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 125);
      d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
      d.closePath();
      hd(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 120);
      d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
      d.closePath();
      hd(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 228);
      d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
      d.closePath();
      hd(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 224);
      d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
      d.closePath();
      hd(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 72, a * 68.5);
      gd(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
      d.restore();
      hd(d, b[4]);
      d.save();
      d.translate(a * 72, a * 175.5);
      gd(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
      d.restore();
      hd(d, b[4]);
      d.save();
      d.translate(a * 72, a * 279.5);
      gd(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
      d.restore();
      hd(d, b[4]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 338);
      d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
      d.closePath();
      hd(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 333);
      d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
      d.closePath();
      hd(d, b[3], b[3], a * 10);
      return c;
    }(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
    Ⲇⵠ[407] = [];
    Ⲇⵠ[407][sh.ⲆⲆΔ] = pr(Cm(0.5, vs, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
    Ⲇⵠ[407][sh.ⲆⵠⲆ] = pr(Cm(0.5, B, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
    Ⲇⵠ[119] = [];
    Ⲇⵠ[119][sh.ⲆⲆΔ] = pr(gm(0.5, pg, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
    Ⲇⵠ[119][sh.ⲆⵠⲆ] = pr(gm(0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
    Ⲇⵠ[411] = pr(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      gd(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      hd(e, c[0], c[1], 4);
      return d;
    }(0.8, 0, ["#5f6061", "#939393"]));
    Ⲇⵠ[412] = hu(1, [{
      f: fu,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
    Ⲇⵠ[198] = [];
    Ⲇⵠ[198][sh.ⲆⲆΔ] = pr(zm(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    Ⲇⵠ[198][sh.ⲆⵠⲆ] = pr(zm(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    Ⲇⵠ[913] = [];
    Ⲇⵠ[913][sh.ⲆⲆΔ] = pr(cm(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    Ⲇⵠ[913][sh.ⲆⵠⲆ] = pr(cm(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    Ⲇⵠ[18] = [];
    Ⲇⵠ[18][sh.ⲆⲆΔ] = pr(md(3, Sm(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
    Ⲇⵠ[18][sh.ⲆⵠⲆ] = pr(md(3, Sm(0.7, eg, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
    Ⲇⵠ[12] = [];
    Ⲇⵠ[12][sh.ⲆⲆΔ] = pr(md(3, Qm(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
    Ⲇⵠ[12][sh.ⲆⵠⲆ] = pr(md(3, Qm(0.7, pl, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
    Ⲇⵠ[13] = [];
    Ⲇⵠ[13][sh.ⲆⲆΔ] = pr(md(3, Dm(0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
    Ⲇⵠ[13][sh.ⲆⵠⲆ] = pr(md(3, Dm(0.65, Tk, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
    Ⲇⵠ[14] = [];
    Ⲇⵠ[14][sh.ⲆⲆΔ] = pr(md(3, Im(0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
    Ⲇⵠ[14][sh.ⲆⵠⲆ] = pr(md(3, Im(0.67, true, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
    Ⲇⵠ[15] = [];
    Ⲇⵠ[15][sh.ⲆⲆΔ] = pr(md(3, _m(0.67, pg, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
    Ⲇⵠ[15][sh.ⲆⵠⲆ] = pr(md(3, _m(0.67, bq, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
    Ⲇⵠ[33] = [];
    Ⲇⵠ[33][sh.ⲆⲆΔ] = pr(md(3, Em(0.67, true, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
    Ⲇⵠ[33][sh.ⲆⵠⲆ] = pr(md(3, Em(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
    Ⲇⵠ[16] = [];
    Ⲇⵠ[16][sh.ⲆⲆΔ] = pr(md(3, vc(1, Ng, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
    Ⲇⵠ[16][sh.ⲆⵠⲆ] = pr(md(3, vc(1, true, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
    Ⲇⵠ[35] = [];
    Ⲇⵠ[35][sh.ⲆⲆΔ] = pr(md(3, oc(1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    Ⲇⵠ[35][sh.ⲆⵠⲆ] = pr(md(3, oc(1, Gh, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
    Ⲇⵠ[55] = [];
    Ⲇⵠ[55][sh.ⲆⲆΔ] = pr(md(3, hp(0.5, true, ["#0d1b1c", "#939393", "#5f6061"])));
    Ⲇⵠ[55][sh.ⲆⵠⲆ] = pr(md(3, hp(0.5, pg, ["#030d14", "#485e66", "#1f343f"])));
    Ⲇⵠ[45] = [];
    Ⲇⵠ[45][sh.ⲆⲆΔ] = pr(md(3, up(1, Ng, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
    Ⲇⵠ[45][sh.ⲆⵠⲆ] = pr(md(3, up(1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
    Ⲇⵠ[36] = [];
    Ⲇⵠ[36][sh.ⲆⲆΔ] = pr(md(3, oc(1, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    Ⲇⵠ[36][sh.ⲆⵠⲆ] = pr(md(3, oc(1, Ng, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
    Ⲇⵠ[37] = [];
    Ⲇⵠ[37][sh.ⲆⲆΔ] = pr(md(3, oc(1, Fg, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    Ⲇⵠ[37][sh.ⲆⵠⲆ] = pr(md(3, oc(1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    Ⲇⵠ[38] = [];
    Ⲇⵠ[38][sh.ⲆⲆΔ] = pr(md(3, oc(1, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    Ⲇⵠ[38][sh.ⲆⵠⲆ] = pr(md(3, oc(1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    Ⲇⵠ[148] = [];
    Ⲇⵠ[148][sh.ⲆⲆΔ] = pr(Ac(0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
    Ⲇⵠ[148][sh.ⲆⵠⲆ] = pr(Ac(0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
    Ⲇⵠ[536] = [];
    Ⲇⵠ[536].push(pr(Ac(0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
    Ⲇⵠ[536].push(pr(Ac(0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
    Ⲇⵠ[536].push(pr(Ac(0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
    Ⲇⵠ[538] = [];
    Ⲇⵠ[538].push(Ⲇⵠ[536][0]);
    Ⲇⵠ[538].push(Ⲇⵠ[536][0]);
    Ⲇⵠ[538].push(Ⲇⵠ[536][0]);
    Ⲇⵠ[158] = [];
    Ⲇⵠ[158][sh.ⲆⲆΔ] = pr(mc(0.06, false, ["#141414", "#c4a23a", "#816511"]));
    Ⲇⵠ[158][sh.ⲆⵠⲆ] = pr(mc(0.06, Sq, ["#030d14", "#2b6664", "#133d3c"]));
    Ⲇⵠ[535] = [];
    Ⲇⵠ[535].push(pr(mc(0.08, false, ["#141414", "#c4a23a", "#816511"])));
    Ⲇⵠ[535].push(pr(mc(0.08, Ge, ["#141414", "#e2bd4e", "#a38018"])));
    Ⲇⵠ[535].push(pr(mc(0.08, false, ["#141414", "#b0902e", "#634d09"])));
    Ⲇⵠ[149] = hu(1.5, [{
      f: Mp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    Ⲇⵠ[526] = [];
    Ⲇⵠ[526][sh.ⲆⲆΔ] = pr(sp(0.8, 0, ["#347f93", "#54a4ba"]));
    Ⲇⵠ[526][sh.ⲆⵠⲆ] = pr(sp(0.8, 0, ["#98ede3", "#94f2e7"]));
    Ⲇⵠ[527] = [];
    Ⲇⵠ[527][sh.ⲆⲆΔ] = pr(Ep(0.8, true, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
    Ⲇⵠ[527][sh.ⲆⵠⲆ] = pr(Ep(0.8, true, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
    Ⲇⵠ[528] = [];
    Ⲇⵠ[528][sh.ⲆⲆΔ] = pr(Kc(0.8, 0, ["#a9e4ed", "#86d4e0"]));
    Ⲇⵠ[528][sh.ⲆⵠⲆ] = pr(Kc(0.8, 0, ["#83ddd4", "#485e66"]));
    Ⲇⵠ[151] = [];
    Ⲇⵠ[151][sh.ⲆⲆΔ] = pr(Wc(0.8, nq, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
    Ⲇⵠ[151][sh.ⲆⵠⲆ] = pr(Wc(0.8, Xs, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
    Ⲇⵠ[1192] = [];
    Ⲇⵠ[1192][sh.ⲆⲆΔ] = ᐃΔ.ᐃⵠΔΔⵠⲆΔ;
    Ⲇⵠ[1192][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⲆⲆᐃⲆⵠΔ;
    Ⲇⵠ[1193] = [];
    Ⲇⵠ[1193][sh.ⲆⲆΔ] = ᐃΔ.ⵠᐃⵠⵠᐃⵠⵠ;
    Ⲇⵠ[1193][sh.ⲆⵠⲆ] = ᐃΔ.ᐃΔⵠⲆⵠⵠᐃ;
    Ⲇⵠ[1194] = [];
    Ⲇⵠ[1194][sh.ⲆⲆΔ] = ᐃΔ.ᐃⵠⵠⵠⲆᐃⵠ;
    Ⲇⵠ[1194][sh.ⲆⵠⲆ] = ᐃΔ.ᐃⵠΔⵠᐃᐃⵠ;
    Ⲇⵠ[152] = [];
    Ⲇⵠ[152][sh.ⲆⲆΔ] = ᐃΔ.ᐃⵠⵠᐃⵠΔΔ;
    Ⲇⵠ[152][sh.ⲆⵠⲆ] = ᐃΔ.ⲆΔΔᐃΔⵠᐃ;
    Ⲇⵠ[1198] = [];
    Ⲇⵠ[1198][sh.ⲆⲆΔ] = ᐃΔ.ΔΔΔᐃᐃⲆΔ;
    Ⲇⵠ[1198][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⲆΔⲆᐃⵠΔ;
    Ⲇⵠ[153] = [];
    Ⲇⵠ[153][sh.ⲆⲆΔ] = ᐃΔ.ⵠⵠᐃΔΔΔⵠ;
    Ⲇⵠ[153][sh.ⲆⵠⲆ] = ᐃΔ.ⵠᐃᐃⵠⲆⵠⵠ;
    Ⲇⵠ[1202] = [];
    Ⲇⵠ[1202][sh.ⲆⲆΔ] = ᐃΔ.ᐃᐃᐃᐃᐃⵠᐃ;
    Ⲇⵠ[1202][sh.ⲆⵠⲆ] = ᐃΔ.ΔⲆⲆΔⵠⵠⲆ;
    Ⲇⵠ[154] = [];
    Ⲇⵠ[154][sh.ⲆⲆΔ] = ᐃΔ.ⲆⲆᐃᐃΔΔⵠ;
    Ⲇⵠ[154][sh.ⲆⵠⲆ] = ᐃΔ.ⵠᐃⵠⲆᐃᐃⲆ;
    Ⲇⵠ[1206] = [];
    Ⲇⵠ[1206][sh.ⲆⲆΔ] = ᐃΔ.ⵠⵠⵠⲆᐃⲆⵠ;
    Ⲇⵠ[1206][sh.ⲆⵠⲆ] = ᐃΔ.ⵠᐃᐃⲆΔᐃΔ;
    Ⲇⵠ[155] = [];
    Ⲇⵠ[155][sh.ⲆⲆΔ] = ᐃΔ.ⲆⲆΔⵠⵠᐃΔ;
    Ⲇⵠ[155][sh.ⲆⵠⲆ] = ᐃΔ.ᐃⵠᐃΔⲆⵠⲆ;
    Ⲇⵠ[1210] = [];
    Ⲇⵠ[1210][sh.ⲆⲆΔ] = ᐃΔ.ΔⵠⵠⲆᐃⲆᐃ;
    Ⲇⵠ[1210][sh.ⲆⵠⲆ] = ᐃΔ.ΔΔᐃΔⵠᐃⲆ;
    Ⲇⵠ[156] = [];
    Ⲇⵠ[156][sh.ⲆⲆΔ] = ᐃΔ.ᐃⵠᐃΔΔΔΔ;
    Ⲇⵠ[156][sh.ⲆⵠⲆ] = ᐃΔ.ⵠⵠᐃΔⲆᐃΔ;
    Ⲇⵠ[1214] = [];
    Ⲇⵠ[1214][sh.ⲆⲆΔ] = ᐃΔ.ⵠᐃΔⵠⲆⲆⲆ;
    Ⲇⵠ[1214][sh.ⲆⵠⲆ] = ᐃΔ.ⲆᐃⲆΔⲆⵠⲆ;
    Ⲇⵠ[157] = [];
    Ⲇⵠ[157][sh.ⲆⲆΔ] = ᐃΔ.ΔᐃΔΔΔᐃᐃ;
    Ⲇⵠ[157][sh.ⲆⵠⲆ] = ᐃΔ.ᐃΔⵠᐃⲆⲆⲆ;
    Ⲇⵠ[245] = [];
    Ⲇⵠ[245][sh.ⲆⲆΔ] = ᐃΔ.ΔΔⵠⲆΔΔᐃ;
    Ⲇⵠ[245][sh.ⲆⵠⲆ] = ᐃΔ.ΔᐃᐃⵠⵠΔΔ;
    Ⲇⵠ[246] = ᐃΔ.ⲆⵠⵠⵠΔΔⲆ;
    Ⲇⵠ[159] = [];
    Ⲇⵠ[159][sh.ⲆⲆΔ] = pr(ec(0.75, Tk, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
    Ⲇⵠ[159][sh.ⲆⵠⲆ] = pr(ec(0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
    Ⲇⵠ[558] = pr(Om(0.3, ["#092813", "#1f773d"], 0));
    Ⲇⵠ[559] = pr(Om(0.3, ["#092813", "#1f773d"], 1));
    Ⲇⵠ[885] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 60;
      c.height = a * 60;
      d.translate(a * -25, a * -25);
      d.translate(0, a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      hd(d, b[0]);
      d.translate(0, a * -5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      hd(d, b[1]);
      return c;
    }(0.6, ["#092813", "#1f773d"]));
    Ⲇⵠ[556] = [];
    Ⲇⵠ[556].push(pr(wc(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
    Ⲇⵠ[556].push(pr(wc(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
    Ⲇⵠ[556].push(pr(wc(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
    Ⲇⵠ[560] = [];
    var b = pr(wc(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
    Ⲇⵠ[560].push(b);
    Ⲇⵠ[560].push(b);
    Ⲇⵠ[560].push(b);
    Ⲇⵠ[557] = [];
    Ⲇⵠ[557].push(pr(wc(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
    Ⲇⵠ[557].push(pr(wc(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
    Ⲇⵠ[557].push(pr(wc(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
    Ⲇⵠ[681] = pr(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 170;
      var g = b * 172;
      var a = f / 2;
      var i = g / 2;
      d.width = f;
      d.height = g;
      e.translate(a, i);
      e.save();
      for (var j = 0; j < 10; j++) {
        e.rotate(Math.PI / 5);
        e.save();
        e.translate(b * 65, 0);
        cd(e, 3, b * 18, b * 4);
        hd(e, c[0]);
        e.restore();
      }
      e.restore();
      bd(e, 0, 0, b * 40);
      hd(e, undefined, c[0], b * 6);
      bd(e, 0, 0, b * 20);
      hd(e, c[0]);
      return d;
    }(0.3, ["#FFFFFF"]));
    Ⲇⵠ[794] = pr(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 130;
      var g = b * 142;
      var a = f / 2;
      var h = g / 2;
      d.width = f;
      d.height = g;
      bd(e, a, h, b * 40);
      hd(e, undefined, c[0], b * 7);
      bd(e, a, h, b * 30);
      hd(e, Qa, c[0], b * 7);
      bd(e, a, h, b * 20);
      hd(e, c[0]);
      return d;
    }(0.3, ["#FFFFFF"]));
    Ⲇⵠ[562] = pr(Om(0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
    Ⲇⵠ[667] = pr(md(Math.PI / 5, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 316;
      c.height = a * 365;
      d.save();
      d.translate(a * 156.07142639160156, a * 51.81248474121094);
      d.rotate(0);
      gd(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
      d.restore();
      hd(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
      d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
      d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
      d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
      d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
      d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
      d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
      d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
      d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
      d.closePath();
      hd(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
      d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
      d.closePath();
      hd(d, b[0], b[0], a * 15);
      return c;
    }(0.2, ["#FFFFFF"])));
    Ⲇⵠ[43] = [];
    Ⲇⵠ[43][sh.ⲆⲆΔ] = pr(zc(0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
    Ⲇⵠ[43][sh.ⲆⵠⲆ] = pr(zc(0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
    Ⲇⵠ[561] = [];
    Ⲇⵠ[561].push(pr(wc(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
    Ⲇⵠ[561].push(pr(wc(0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
    Ⲇⵠ[561].push(pr(wc(0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
    Ⲇⵠ[83] = [];
    Ⲇⵠ[83][sh.ⲆⲆΔ] = pr(pp(0.37, 0, ["#2a2938", "#242330", "#313041"]));
    Ⲇⵠ[83][sh.ⲆⵠⲆ] = pr(pp(0.37, 0, ["#1b1e30", "#161921", "#252f3e"]));
    Ⲇⵠ[85] = [];
    Ⲇⵠ[85][sh.ⲆⲆΔ] = pr(Fc(0.17, 0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
    Ⲇⵠ[85][sh.ⲆⵠⲆ] = pr(Fc(0.17, 0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
    Ⲇⵠ[86] = [];
    Ⲇⵠ[86][sh.ⲆⲆΔ] = pr(Ap(0.55, It, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
    Ⲇⵠ[86][sh.ⲆⵠⲆ] = pr(Ap(0.55, Xs, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
    Ⲇⵠ[84] = [];
    Ⲇⵠ[84][sh.ⲆⲆΔ] = pr(Ap(0.55, Ng, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
    Ⲇⵠ[84][sh.ⲆⵠⲆ] = pr(Ap(0.55, Mg, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
    Ⲇⵠ[77] = [];
    Ⲇⵠ[77][sh.ⲆⲆΔ] = pr(cp(0.2, vs, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
    Ⲇⵠ[77][sh.ⲆⵠⲆ] = pr(cp(0.2, Mg, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
    Ⲇⵠ[78] = [];
    Ⲇⵠ[78][sh.ⲆⲆΔ] = pr(cp(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
    Ⲇⵠ[78][sh.ⲆⵠⲆ] = pr(cp(0.2, vs, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
    Ⲇⵠ[79] = [];
    Ⲇⵠ[79][sh.ⲆⲆΔ] = pr(cp(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
    Ⲇⵠ[79][sh.ⲆⵠⲆ] = pr(cp(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
    Ⲇⵠ[61] = [];
    Ⲇⵠ[61][sh.ⲆⲆΔ] = pr(wm(0.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    Ⲇⵠ[61][sh.ⲆⵠⲆ] = pr(wm(0.24, Gh, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
    Ⲇⵠ[59] = [];
    Ⲇⵠ[59][sh.ⲆⲆΔ] = pr(Bc(0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
    Ⲇⵠ[59][sh.ⲆⵠⲆ] = pr(Bc(0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
    Ⲇⵠ[62] = [];
    Ⲇⵠ[62][sh.ⲆⲆΔ] = pr(md(3, mp(0.9, B, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
    Ⲇⵠ[62][sh.ⲆⵠⲆ] = pr(md(3, mp(0.9, qk, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
    Ⲇⵠ[750] = [];
    Ⲇⵠ[750][sh.ⲆⲆΔ] = pr(md(3, mp(1, Ng, [ma, ma, undefined, "#c8efef", "#c8efef"])));
    Ⲇⵠ[750][sh.ⲆⵠⲆ] = pr(md(3, mp(1, true, [Bo, Ro, Bo, "#87d2e6", "#87d2e6"])));
    Ⲇⵠ[755] = [];
    Ⲇⵠ[755].push(pr(ap(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
    Ⲇⵠ[755].push(pr(ap(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
    Ⲇⵠ[755].push(pr(ap(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
    Ⲇⵠ[795] = [];
    Ⲇⵠ[795].push(pr(jc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
    Ⲇⵠ[795].push(pr(jc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    Ⲇⵠ[795].push(pr(jc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    Ⲇⵠ[782] = [];
    Ⲇⵠ[782].push(pr(ku(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
    Ⲇⵠ[782].push(pr(ku(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
    Ⲇⵠ[782].push(pr(ku(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
    Ⲇⵠ[783] = [];
    Ⲇⵠ[783].push(pr(ku(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
    Ⲇⵠ[783].push(pr(ku(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
    Ⲇⵠ[783].push(pr(ku(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
    Ⲇⵠ[46] = [];
    Ⲇⵠ[46][sh.ⲆⲆΔ] = pr(md(3, Rc(0.7, Ao, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
    Ⲇⵠ[46][sh.ⲆⵠⲆ] = pr(md(3, Rc(0.7, Va, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
    Ⲇⵠ[50] = [];
    Ⲇⵠ[50][sh.ⲆⲆΔ] = pr(md(3, Rc(0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
    Ⲇⵠ[50][sh.ⲆⵠⲆ] = pr(md(3, Rc(0.7, pg, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
    Ⲇⵠ[51] = [];
    Ⲇⵠ[51][sh.ⲆⲆΔ] = pr(md(3, Rc(0.7, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
    Ⲇⵠ[51][sh.ⲆⵠⲆ] = pr(md(3, Rc(0.7, qk, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
    Ⲇⵠ[52] = [];
    Ⲇⵠ[52][sh.ⲆⲆΔ] = pr(md(3, Rc(0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
    Ⲇⵠ[52][sh.ⲆⵠⲆ] = pr(md(3, Rc(0.7, pl, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
    Ⲇⵠ[592] = [];
    Ⲇⵠ[592].push(pr(op(0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
    Ⲇⵠ[592].push(pr(op(0.7, ["#524712", "#c7b11c", "#d9ba18"])));
    Ⲇⵠ[592].push(pr(op(0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
    Ⲇⵠ[326] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 188;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
      d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
      d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
      d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
      d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
      d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
      d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
      d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
      d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
      d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
      d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
      d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
      d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
      d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
      d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
      d.closePath();
      hd(d, b[0], b[0], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
      d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
      d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
      d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
      d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
      d.closePath();
      hd(d, b[0], b[0], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
      d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
      d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
      d.closePath();
      hd(d, b[0], b[0], a * 2);
      return c;
    }(1.1, ["#BB0000"]));
    Ⲇⵠ[333] = pr(md(Math.PI, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 238;
      c.height = a * 230;
      d.translate(a * -93, a * -110);
      bd(d, a * 213.5, a * 256.75, a * 75);
      hd(d, b);
      bd(d, a * 213.5, a * 175.75, a * 25);
      hd(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 156.5, a * 137.75);
      d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217.5, a * 178.75);
      d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 130.5, a * 124.75);
      d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 183.75);
      d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107.5, a * 213.75);
      d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 212.5, a * 187.75);
      d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 102.5, a * 258.75);
      d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 192.75);
      d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 219.5, a * 158.75);
      d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 210.5, a * 160.75);
      d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      return c;
    }(0.9, "#BB0000")));
    Ⲇⵠ[23] = [];
    Ⲇⵠ[23][sh.ⲆⲆΔ] = pr(qm(0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
    Ⲇⵠ[23][sh.ⲆⵠⲆ] = pr(qm(0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
    Ⲇⵠ[58] = [];
    Ⲇⵠ[58][sh.ⲆⲆΔ] = pr(sc(0.55, Zl, ["#252525", "#73583e", "#573f29", "#7d6144"]));
    Ⲇⵠ[58][sh.ⲆⵠⲆ] = pr(sc(0.55, Gh, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
    Ⲇⵠ[25] = [];
    Ⲇⵠ[25][sh.ⲆⲆΔ] = pr(Cc(0.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
    Ⲇⵠ[25][sh.ⲆⵠⲆ] = pr(Cc(0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
    Ⲇⵠ[26] = [];
    Ⲇⵠ[26][sh.ⲆⲆΔ] = pr(yc(0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
    Ⲇⵠ[26][sh.ⲆⵠⲆ] = pr(yc(0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
    Ⲇⵠ[27] = [];
    Ⲇⵠ[27][sh.ⲆⲆΔ] = pr(Ic(0.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
    Ⲇⵠ[27][sh.ⲆⵠⲆ] = pr(Ic(0.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
    Ⲇⵠ[413] = [];
    Ⲇⵠ[413][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[413][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[413][sh.ⲆⲆΔ].push(pr(Vm(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
    Ⲇⵠ[413][sh.ⲆⲆΔ].push(pr(lc(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
    Ⲇⵠ[413][sh.ⲆⲆΔ].push(pr(uc(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
    Ⲇⵠ[413][sh.ⲆⵠⲆ].push(pr(Vm(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
    Ⲇⵠ[413][sh.ⲆⵠⲆ].push(pr(lc(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
    Ⲇⵠ[413][sh.ⲆⵠⲆ].push(pr(uc(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
    Ⲇⵠ[449] = [];
    Ⲇⵠ[449][sh.ⲆⲆΔ] = pr(nc(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
    Ⲇⵠ[449][sh.ⲆⵠⲆ] = pr(nc(1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
    Ⲇⵠ[451] = [];
    Ⲇⵠ[451][sh.ⲆⲆΔ] = pr(fc(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    Ⲇⵠ[451][sh.ⲆⵠⲆ] = pr(fc(1, ["#050505", "#327570", "#021724", "#200333"]));
    Ⲇⵠ[452] = [];
    Ⲇⵠ[452][sh.ⲆⲆΔ] = pr(Wm(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    Ⲇⵠ[452][sh.ⲆⵠⲆ] = pr(Wm(1, ["#050505", "#327570", "#021724", "#200333"]));
    Ⲇⵠ[243] = [];
    Ⲇⵠ[243][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[243][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[243][sh.ⲆⲆΔ] = [ᐃΔ.ⲆΔᐃΔⵠΔⲆ, ᐃΔ.ⵠᐃᐃΔⲆΔⵠ, ᐃΔ.ΔⵠᐃΔΔⵠᐃ, ᐃΔ.ⲆᐃΔⲆΔⵠⲆ, ᐃΔ.ΔⵠᐃⲆΔΔⲆ, ᐃΔ.ΔⲆᐃⵠᐃⲆΔ, ᐃΔ.ⵠⲆΔᐃᐃⲆΔ, ᐃΔ.ᐃⲆΔⲆⵠΔᐃ, ᐃΔ.ᐃⵠⲆΔᐃⵠⲆ, ᐃΔ.ⵠᐃⲆⲆΔΔΔ, ᐃΔ.ΔⲆⵠΔⲆⵠⵠ, ᐃΔ.ᐃΔΔΔⵠⵠⲆ, ᐃΔ.ᐃΔΔΔΔΔΔ, ᐃΔ.ᐃᐃΔΔΔⵠᐃ, ᐃΔ.ⲆⲆᐃΔⲆᐃᐃ, ᐃΔ.ΔΔⲆΔⲆⵠⲆ, ᐃΔ.ⲆᐃᐃᐃΔᐃⲆ, ᐃΔ.ⵠᐃⵠᐃᐃⵠΔ, ᐃΔ.ᐃⲆᐃᐃᐃΔⵠ, ᐃΔ.ΔᐃⲆⵠΔᐃⵠ, ᐃΔ.ΔⵠⲆⲆⲆᐃᐃ, ᐃΔ.ⵠᐃⲆⵠⵠΔΔ, ᐃΔ.ΔΔΔᐃⵠⵠⲆ, ᐃΔ.ᐃⵠⵠᐃᐃⲆⲆ, ᐃΔ.ᐃᐃⵠΔⵠⵠᐃ, ᐃΔ.ᐃΔᐃᐃᐃᐃⵠ, ᐃΔ.ⲆⲆⲆΔⲆᐃΔ, ᐃΔ.ⲆΔⵠΔⲆⲆᐃ, ᐃΔ.ⵠΔⵠΔΔᐃΔ, ᐃΔ.ᐃⲆΔᐃᐃⵠᐃ, ᐃΔ.ΔΔⲆⵠᐃⵠⵠ, ᐃΔ.ᐃΔⲆΔᐃⵠⵠ, ᐃΔ.ᐃⲆⵠⲆᐃⵠᐃ, ᐃΔ.ᐃᐃⵠⵠᐃⲆⲆ, ᐃΔ.ⵠΔⲆⲆᐃᐃᐃ, ᐃΔ.ⵠⵠΔⲆᐃΔΔ, ᐃΔ.ⲆⲆⲆⲆᐃⵠⵠ, ᐃΔ.ⵠⵠⲆᐃΔⵠΔ, ᐃΔ.ᐃⵠΔᐃΔⵠΔ, ᐃΔ.ⵠⵠⲆΔΔᐃⲆ, ᐃΔ.ᐃΔᐃⵠⵠⲆᐃ, ᐃΔ.ΔΔΔⵠΔⲆⵠ, ᐃΔ.ΔᐃⵠΔⵠⵠⵠ, ᐃΔ.ⵠΔⲆⲆⵠⲆΔ, ᐃΔ.ΔⵠΔⵠⲆⲆⵠ, ᐃΔ.ⲆⲆΔⲆⵠᐃⲆ, ᐃΔ.ⵠⲆⲆΔᐃⵠᐃ, ᐃΔ.ᐃΔΔⲆⲆᐃⲆ, ᐃΔ.ᐃΔΔⵠΔⵠⵠ, ᐃΔ.ΔᐃⵠⲆⲆΔΔ, ᐃΔ.ⵠⵠⲆΔᐃⵠⲆ, ᐃΔ.ᐃΔⵠΔᐃᐃᐃ, ᐃΔ.ⵠᐃᐃΔⲆΔⲆ, ᐃΔ.ᐃⵠᐃΔⲆⲆΔ, ᐃΔ.ⵠᐃΔᐃΔⲆᐃ, ᐃΔ.ΔⲆⵠᐃΔⵠⵠ];
    Ⲇⵠ[243][sh.ⲆⵠⲆ] = [ᐃΔ.ⵠⵠⵠⲆᐃⲆᐃ, ᐃΔ.ⵠΔᐃΔⲆⵠⲆ, ᐃΔ.ΔᐃⵠⲆᐃⵠⵠ, ᐃΔ.ᐃᐃᐃⵠⵠⲆΔ, ᐃΔ.ⲆⵠⲆΔⲆⵠⵠ, ᐃΔ.ᐃⲆⵠᐃᐃᐃᐃ, ᐃΔ.ⵠⵠⵠΔⵠⲆⲆ, ᐃΔ.ᐃΔⲆⵠΔΔⲆ, ᐃΔ.ΔⵠᐃΔⵠᐃⲆ, ᐃΔ.ⵠᐃⲆᐃΔᐃⲆ, ᐃΔ.ⲆⵠᐃⲆⵠⲆⲆ, ᐃΔ.ᐃᐃᐃⲆᐃⲆΔ, ᐃΔ.ΔⵠⵠⲆᐃΔᐃ, ᐃΔ.ⵠᐃⵠΔⲆΔᐃ, ᐃΔ.ΔᐃᐃΔᐃⵠⲆ, ᐃΔ.ΔⵠⲆᐃⵠⲆΔ, ᐃΔ.ⵠΔⲆⵠⵠⲆⲆ, ᐃΔ.ⲆᐃᐃⵠᐃⲆⵠ, ᐃΔ.ⵠⵠⲆΔⵠⵠⲆ, ᐃΔ.ⵠΔⲆΔⵠⵠΔ, ᐃΔ.ΔⲆⵠⵠⵠⲆⵠ, ᐃΔ.ΔΔⵠΔΔΔⵠ, ᐃΔ.ⲆⲆΔᐃⵠᐃᐃ, ᐃΔ.ᐃᐃⲆᐃᐃᐃⵠ, ᐃΔ.ΔⲆⲆⲆⲆⲆᐃ, ᐃΔ.ΔⲆⲆᐃΔᐃⵠ, ᐃΔ.ⵠᐃᐃⲆⵠΔⵠ, ᐃΔ.ⲆⵠⲆⲆⵠᐃΔ, ᐃΔ.ⲆⵠΔⵠΔᐃⵠ, ᐃΔ.ⵠⲆⲆⲆᐃᐃⵠ, ᐃΔ.ᐃⲆⵠⵠΔⲆⵠ, ᐃΔ.ⲆⲆⲆⵠᐃΔⵠ, ᐃΔ.ⵠⵠᐃΔⲆΔⲆ, ᐃΔ.ᐃᐃΔΔⵠⲆΔ, ᐃΔ.ⵠⲆᐃⵠⲆⵠΔ, ᐃΔ.ᐃΔΔΔⲆΔᐃ, ᐃΔ.ⵠⵠᐃⲆⲆΔⵠ, ᐃΔ.ⵠⲆⲆΔᐃⵠΔ, ᐃΔ.ΔᐃⵠᐃⲆⲆΔ, ᐃΔ.ⵠΔΔⲆⵠᐃⲆ, ᐃΔ.ⲆⵠⵠᐃⲆⵠΔ, ᐃΔ.ᐃᐃᐃᐃΔᐃΔ, ᐃΔ.ᐃⵠΔΔⵠΔⵠ, ᐃΔ.ᐃⵠⲆΔΔⲆⲆ, ᐃΔ.ⵠᐃΔⵠᐃⲆⵠ, ᐃΔ.ΔᐃᐃⲆᐃΔⵠ, ᐃΔ.ⲆΔΔᐃᐃⵠⲆ, ᐃΔ.ⲆΔΔⲆⵠᐃⲆ, ᐃΔ.ᐃⲆᐃⲆΔᐃΔ, ᐃΔ.ⵠᐃᐃΔΔΔᐃ, ᐃΔ.ⲆΔⲆΔⵠⲆⲆ, ᐃΔ.ⵠⲆⵠⵠᐃΔΔ, ᐃΔ.ⲆⲆⵠΔᐃᐃᐃ, ᐃΔ.ⲆΔⵠⵠΔΔⵠ, ᐃΔ.ΔⵠΔⵠⵠⵠⵠ, ᐃΔ.ᐃⲆⵠⵠⵠΔⲆ];
    Ⲇⵠ[676] = [];
    Ⲇⵠ[676][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[676][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[676][sh.ⲆⲆΔ].push(pr(em(1.1, false, ["#252B28", "#747471", "#83827e"], 0)));
    Ⲇⵠ[676][sh.ⲆⲆΔ].push(pr(em(0.9, Kr, ["#252B28", "#747471", "#83827e"], 1)));
    Ⲇⵠ[676][sh.ⲆⲆΔ].push(pr(em(1, false, ["#252B28", "#747471", "#83827e"], 2)));
    Ⲇⵠ[676][sh.ⲆⲆΔ].push(pr(em(0.9, N, ["#252B28", "#747471", "#83827e"], 2)));
    Ⲇⵠ[676][sh.ⲆⵠⲆ].push(pr(em(1.1, Sq, ["#030d14", "#123335", "#183f3f"], 0)));
    Ⲇⵠ[676][sh.ⲆⵠⲆ].push(pr(em(0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
    Ⲇⵠ[676][sh.ⲆⵠⲆ].push(pr(em(1, Tn, ["#030d14", "#123335", "#183f3f"], 2)));
    Ⲇⵠ[676][sh.ⲆⵠⲆ].push(pr(em(0.9, false, ["#030d14", "#123335", "#183f3f"], 2)));
    Ⲇⵠ[679] = [];
    Ⲇⵠ[679][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[679][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[679][sh.ⲆⲆΔ].push(pr(em(1.1, pl, ["#252B28", "#58645F", "#75827D"], 2)));
    Ⲇⵠ[679][sh.ⲆⲆΔ].push(pr(em(0.9, bq, ["#252B28", "#58645F", "#75827D"], 2)));
    Ⲇⵠ[679][sh.ⲆⲆΔ].push(pr(em(1, true, ["#252B28", "#58645F", "#75827D"], 2)));
    Ⲇⵠ[679][sh.ⲆⲆΔ].push(pr(em(0.9, Zl, ["#252B28", "#58645F", "#75827D"], 2)));
    Ⲇⵠ[679][sh.ⲆⵠⲆ].push(pr(em(1.1, Tj, ["#030d14", "#123335", "#183f3f"], 2)));
    Ⲇⵠ[679][sh.ⲆⵠⲆ].push(pr(em(0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
    Ⲇⵠ[679][sh.ⲆⵠⲆ].push(pr(em(1, Va, ["#030d14", "#123335", "#183f3f"], 2)));
    Ⲇⵠ[679][sh.ⲆⵠⲆ].push(pr(em(0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
    Ⲇⵠ[415] = [];
    Ⲇⵠ[415][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[415][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[415][sh.ⲆⲆΔ].push(pr(Tu(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    Ⲇⵠ[415][sh.ⲆⲆΔ].push(pr(Tu(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    Ⲇⵠ[415][sh.ⲆⲆΔ].push(pr(Tu(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    Ⲇⵠ[415][sh.ⲆⵠⲆ].push(pr(Tu(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    Ⲇⵠ[415][sh.ⲆⵠⲆ].push(pr(Tu(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    Ⲇⵠ[415][sh.ⲆⵠⲆ].push(pr(Tu(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    Ⲇⵠ[416] = [];
    Ⲇⵠ[416][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[416][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[416][sh.ⲆⲆΔ].push(pr(rm(1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
    Ⲇⵠ[416][sh.ⲆⲆΔ].push(pr(rm(0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
    Ⲇⵠ[416][sh.ⲆⲆΔ].push(pr(rm(0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
    Ⲇⵠ[416][sh.ⲆⵠⲆ].push(pr(rm(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    Ⲇⵠ[416][sh.ⲆⵠⲆ].push(pr(rm(0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    Ⲇⵠ[416][sh.ⲆⵠⲆ].push(pr(rm(0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    Ⲇⵠ[121] = [];
    Ⲇⵠ[121][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[121][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[121][sh.ⲆⲆΔ].push(pr(Hm(1.7, pg, ["#1d051e", "#c27add", "#cd98e5"])));
    Ⲇⵠ[121][sh.ⲆⲆΔ].push(pr(Hm(1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
    Ⲇⵠ[121][sh.ⲆⲆΔ].push(pr(Hm(1.3, Ng, ["#1d051e", "#c27add", "#cd98e5"])));
    Ⲇⵠ[121][sh.ⲆⵠⲆ].push(pr(Hm(1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    Ⲇⵠ[121][sh.ⲆⵠⲆ].push(pr(Hm(1.5, Ao, ["#1d051e", "#41aaa0", "#5cccc4"])));
    Ⲇⵠ[121][sh.ⲆⵠⲆ].push(pr(Hm(1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    Ⲇⵠ[678] = [];
    Ⲇⵠ[678][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[678][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[678][sh.ⲆⲆΔ].push(pr(kc(1, ["#2d53c4"])));
    Ⲇⵠ[678][sh.ⲆⵠⲆ].push(pr(kc(1, ["#2d53c4"])));
    Ⲇⵠ[696] = [];
    Ⲇⵠ[696][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[696][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[696][sh.ⲆⲆΔ].push(pr(kc(1, ["#c4912d"])));
    Ⲇⵠ[696][sh.ⲆⵠⲆ].push(pr(kc(1, ["#c4912d"])));
    Ⲇⵠ[680] = [];
    Ⲇⵠ[680][sh.ⲆⲆΔ] = pr(xc(1, ["#414040"]));
    Ⲇⵠ[680][sh.ⲆⵠⲆ] = pr(xc(1, ["#153635"]));
    Ⲇⵠ[508] = [];
    Ⲇⵠ[508][sh.ⲆⲆΔ] = pr(Mm(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    Ⲇⵠ[508][sh.ⲆⵠⲆ] = pr(Mm(1, Fa, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    Ⲇⵠ[509] = [];
    Ⲇⵠ[509][sh.ⲆⲆΔ] = pr(Pm(1, Mo, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    Ⲇⵠ[509][sh.ⲆⵠⲆ] = pr(Pm(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    Ⲇⵠ[512] = [];
    Ⲇⵠ[512][sh.ⲆⲆΔ] = pr(Pm(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    Ⲇⵠ[512][sh.ⲆⵠⲆ] = pr(Pm(1, yg, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    Ⲇⵠ[511] = [];
    Ⲇⵠ[511][sh.ⲆⲆΔ] = pr(dm(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    Ⲇⵠ[511][sh.ⲆⵠⲆ] = pr(dm(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    Ⲇⵠ[510] = [];
    Ⲇⵠ[510][sh.ⲆⲆΔ] = pr(um(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    Ⲇⵠ[510][sh.ⲆⵠⲆ] = pr(um(1, I, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    Ⲇⵠ[419] = [];
    Ⲇⵠ[419][sh.ⲆⲆΔ] = pr(Dc(0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
    Ⲇⵠ[419][sh.ⲆⵠⲆ] = pr(Dc(0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
    Ⲇⵠ[445] = [];
    Ⲇⵠ[445][sh.ⲆⲆΔ] = pr(dc(0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
    Ⲇⵠ[445][sh.ⲆⵠⲆ] = pr(dc(0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
    Ⲇⵠ[259] = [];
    Ⲇⵠ[818] = [];
    Ⲇⵠ[516] = [];
    Ⲇⵠ[819] = [];
    for (a = 0; a < 2; a++) {
      Ⲇⵠ[259][a] = document.createElement("canvas");
      Ⲇⵠ[259][a].width = 193;
      Ⲇⵠ[259][a].height = 193;
      Ⲇⵠ[818][a] = Ⲇⵠ[259][a].getContext("2d");
      Ⲇⵠ[516][a] = document.createElement("canvas");
      Ⲇⵠ[516][a].width = 600;
      Ⲇⵠ[516][a].height = 600;
      Ⲇⵠ[819][a] = Ⲇⵠ[516][a].getContext("2d");
    }
    Ⲇⵠ[475] = [];
    Ⲇⵠ[475][sh.ⲆⲆΔ] = pr(xc(1, ["#c8e0de"]));
    Ⲇⵠ[475][sh.ⲆⵠⲆ] = pr(xc(1, ["#147071"]));
    Ⲇⵠ[476] = [];
    Ⲇⵠ[476][sh.ⲆⲆΔ] = pr(xc(1, ["#231912"]));
    Ⲇⵠ[476][sh.ⲆⵠⲆ] = pr(xc(1, ["#021719"]));
    Ⲇⵠ[697] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 253;
      c.height = a * 192;
      d.save();
      d.translate(a * 37, a * 94);
      gd(d, a * -7, a * -20, a * 14, a * 37, a * 20);
      d.restore();
      hd(d, b[0]);
      d.save();
      d.translate(a * 131, a * 94);
      gd(d, a * -84, a * -67, a * 168, a * 134, a * 20);
      d.restore();
      hd(d, b[0], b[0], a * 13);
      d.save();
      d.translate(a * 223, a * 94.5);
      gd(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
      d.restore();
      hd(d, b[0]);
      d.save();
      d.translate(a * 128.5, a * 170.5);
      gd(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
      d.restore();
      hd(d, b[0]);
      return c;
    }(0.5, ["#BB0000"]));
    Ⲇⵠ[461] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 161;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 9, a * 93);
      d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
      d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
      d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
      d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
      d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
      d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
      d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
      d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
      d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
      d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
      d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
      d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
      d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
      d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
      d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
      d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
      d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
      d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
      d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
      d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
      d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
      d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
      d.closePath();
      hd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 25, a * 63);
      d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
      d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
      d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
      hd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 91, a * 53);
      d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
      d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
      d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
      hd(d, b, b, a * 4);
      return c;
    }(0.9, "#BB0000"));
    Ⲇⵠ[462] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 147;
      c.height = a * 172;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 8, a * 50);
      d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
      d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
      d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
      d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
      d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
      d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
      d.closePath();
      hd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 14, a * 57);
      d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
      d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
      hd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 47);
      d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
      d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
      hd(d, b, b, a * 4);
      return c;
    }(0.9, "#BB0000"));
    Ⲇⵠ[463] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 271;
      c.height = a * 366;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 133, a * 99);
      d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
      d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
      d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
      d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
      d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
      d.closePath();
      hd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 73, a * 270);
      d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
      d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
      d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
      d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
      d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
      d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
      d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
      d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
      d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
      d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
      d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
      d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
      d.closePath();
      hd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 76, a * 252);
      d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
      d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
      d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
      d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
      d.closePath();
      hd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 84, a * 257);
      d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
      d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
      d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
      d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
      d.closePath();
      hd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125, a * 65);
      d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
      d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
      d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
      d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
      d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
      d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
      d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
      d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
      d.closePath();
      hd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 115, a * 37);
      d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
      d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
      d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
      d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
      d.closePath();
      hd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 146, a * 34);
      d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
      d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
      d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
      d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
      d.closePath();
      hd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 143, a * 69);
      d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
      d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
      d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
      d.closePath();
      hd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149, a * 92);
      d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
      d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
      d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
      d.closePath();
      hd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 111, a * 61);
      d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
      d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
      d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
      d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
      d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
      d.closePath();
      hd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107, a * 81);
      d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
      d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
      d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
      d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
      d.closePath();
      hd(d, b[0]);
      return c;
    }(1, ["#BB0000"]));
    Ⲇⵠ[466] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -20, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 50, a * 105);
      d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
      d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
      d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
      d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
      d.closePath();
      hd(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 44, a * 106);
      d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
      d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
      d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
      d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
      d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
      d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
      d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
      d.closePath();
      hd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 30, a * 159);
      d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
      d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
      d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
      d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
      d.closePath();
      hd(d, b);
      return c;
    }(0.8, "#BB0000"));
    Ⲇⵠ[467] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -165, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217, a * 103);
      d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
      d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
      d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
      d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
      d.closePath();
      hd(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 231, a * 163);
      d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
      d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
      d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
      d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
      d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
      d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
      d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
      d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
      d.closePath();
      hd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 234, a * 154);
      d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
      d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
      d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
      d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
      d.closePath();
      hd(d, b);
      return c;
    }(0.8, "#BB0000"));
    Ⲇⵠ[322] = pr(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 85;
      var g = b * 115;
      var a = b * 4;
      d.width = f;
      d.height = g;
      e.translate(b * -130, b * -60);
      e.globalAlpha = 1;
      e.beginPath();
      e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
      e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
      e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
      e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
      e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
      e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
      e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
      e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
      e.closePath();
      hd(e, c, c, a);
      return d;
    }(0.9, "#BB0000"));
    Ⲇⵠ[279] = pr(Cd(0.6, "#BB0000"));
    Ⲇⵠ[280] = pr(Cd(0.6, "#1CE7E0"));
    Ⲇⵠ[281] = pr(Cd(0.6, "#DBE71C"));
    Ⲇⵠ[308] = pr(Cd(0.6, "#00BB00"));
    Ⲇⵠ[602] = [];
    Ⲇⵠ[602][sh.ⲆⲆΔ] = pr(xc(1, ["#dac291"]));
    Ⲇⵠ[602][sh.ⲆⵠⲆ] = pr(xc(1, ["#0D423D"]));
    Ⲇⵠ[698] = [];
    Ⲇⵠ[698][sh.ⲆⲆΔ] = pr(xc(1, ["#dac291"]));
    Ⲇⵠ[698][sh.ⲆⵠⲆ] = pr(xc(1, ["#0D423D"]));
    Ⲇⵠ[788] = [];
    Ⲇⵠ[788][sh.ⲆⲆΔ] = pr(rp(0.3, nq, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
    Ⲇⵠ[788][sh.ⲆⵠⲆ] = pr(rp(0.3, bq, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
    Ⲇⵠ[182] = [];
    Ⲇⵠ[182][sh.ⲆⲆΔ] = pr(rp(0.3, rr, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
    Ⲇⵠ[182][sh.ⲆⵠⲆ] = pr(rp(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
    Ⲇⵠ[127] = [pr(Cp(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    Ⲇⵠ[128] = [pr(Cp(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    Ⲇⵠ[603] = [];
    Ⲇⵠ[603][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[603][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[603][sh.ⲆⲆΔ].push(pr(Ym(1, ["#0B6A84"])));
    Ⲇⵠ[603][sh.ⲆⲆΔ].push(pr(Km(1, ["#0B6A84"])));
    Ⲇⵠ[603][sh.ⲆⲆΔ].push(pr(Pc(1, ["#0B6A84"])));
    Ⲇⵠ[603][sh.ⲆⲆΔ].push(pr($m(1, ["#0B6A84"])));
    Ⲇⵠ[603][sh.ⲆⲆΔ].push(pr(Lm(1, ["#0B6A84"])));
    Ⲇⵠ[603][sh.ⲆⲆΔ].push(pr(cc(1, ["#0B6A84"])));
    Ⲇⵠ[603][sh.ⲆⲆΔ].push(pr(Xm(1, ["#0B6A84"])));
    Ⲇⵠ[603][sh.ⲆⵠⲆ].push(pr(Ym(1, ["#09373F"])));
    Ⲇⵠ[603][sh.ⲆⵠⲆ].push(pr(Km(1, ["#09373F"])));
    Ⲇⵠ[603][sh.ⲆⵠⲆ].push(pr(Pc(1, ["#09373F"])));
    Ⲇⵠ[603][sh.ⲆⵠⲆ].push(pr($m(1, ["#09373F"])));
    Ⲇⵠ[603][sh.ⲆⵠⲆ].push(pr(Lm(1, ["#09373F"])));
    Ⲇⵠ[603][sh.ⲆⵠⲆ].push(pr(cc(1, ["#09373F"])));
    Ⲇⵠ[603][sh.ⲆⵠⲆ].push(pr(Xm(1, ["#09373F"])));
    Ⲇⵠ[692] = [];
    Ⲇⵠ[692][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[692][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[692][sh.ⲆⲆΔ].push(pr(pc(1.7, ["#FBEFBC"], 0)));
    Ⲇⵠ[692][sh.ⲆⲆΔ].push(pr(pc(1.9, ["#FBEFBC"], 1)));
    Ⲇⵠ[692][sh.ⲆⲆΔ].push(pr(pc(1.7, ["#FBEFBC"], 2)));
    Ⲇⵠ[692][sh.ⲆⵠⲆ].push(pr(pc(1.7, ["#0F4C48"], 0)));
    Ⲇⵠ[692][sh.ⲆⵠⲆ].push(pr(pc(1.9, ["#0F4C48"], 1)));
    Ⲇⵠ[692][sh.ⲆⵠⲆ].push(pr(pc(1.7, ["#0F4C48"], 2)));
    Ⲇⵠ[694] = [];
    Ⲇⵠ[694][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[694][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[694][sh.ⲆⲆΔ].push(pr(pc(1.8, ["#A9D6D3"], 0)));
    Ⲇⵠ[694][sh.ⲆⲆΔ].push(pr(pc(2, ["#A9D6D3"], 1)));
    Ⲇⵠ[694][sh.ⲆⲆΔ].push(pr(pc(1.8, ["#A9D6D3"], 2)));
    Ⲇⵠ[694][sh.ⲆⵠⲆ].push(pr(pc(1.8, ["#115E60"], 0)));
    Ⲇⵠ[694][sh.ⲆⵠⲆ].push(pr(pc(2, ["#115E60"], 1)));
    Ⲇⵠ[694][sh.ⲆⵠⲆ].push(pr(pc(1.8, ["#115E60"], 2)));
    Ⲇⵠ[695] = [];
    Ⲇⵠ[695][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[695][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[695][sh.ⲆⲆΔ].push(pr(pc(1.9, ["#2A8B9B"], 0)));
    Ⲇⵠ[695][sh.ⲆⲆΔ].push(pr(pc(2.1, ["#2A8B9B"], 1)));
    Ⲇⵠ[695][sh.ⲆⲆΔ].push(pr(pc(1.9, ["#2A8B9B"], 2)));
    Ⲇⵠ[695][sh.ⲆⵠⲆ].push(pr(pc(1.9, ["#0F464C"], 0)));
    Ⲇⵠ[695][sh.ⲆⵠⲆ].push(pr(pc(2.1, ["#0F464C"], 1)));
    Ⲇⵠ[695][sh.ⲆⵠⲆ].push(pr(pc(1.9, ["#0F464C"], 2)));
    Ⲇⵠ[693] = [];
    Ⲇⵠ[693][sh.ⲆⲆΔ] = [];
    Ⲇⵠ[693][sh.ⲆⵠⲆ] = [];
    Ⲇⵠ[693][sh.ⲆⲆΔ].push(pr(fm(0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    Ⲇⵠ[693][sh.ⲆⲆΔ].push(pr(fm(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    Ⲇⵠ[693][sh.ⲆⲆΔ].push(pr(fm(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    Ⲇⵠ[693][sh.ⲆⵠⲆ].push(pr(fm(0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    Ⲇⵠ[693][sh.ⲆⵠⲆ].push(pr(fm(1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    Ⲇⵠ[693][sh.ⲆⵠⲆ].push(pr(fm(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    Ⲇⵠ[637] = [];
    Ⲇⵠ[637][sh.ⲆⲆΔ] = pr(vp(0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
    Ⲇⵠ[637][sh.ⲆⵠⲆ] = pr(vp(0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
    Ⲇⵠ[687] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 376;
      c.height = a * 371;
      d.globalAlpha = 1;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 191.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
      d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
      d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
      d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
      d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
      d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
      d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
      d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
      d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
      d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
      d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
      d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
      d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
      d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
      d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
      d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
      d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
      d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
      d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
      d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
      d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
      d.closePath();
      hd(d, b[0], b[0], a * 12);
      return c;
    }(0.8, ["#B6222A"]));
    Ⲇⵠ[673] = [];
    Ⲇⵠ[673][sh.ⲆⲆΔ] = pr(ip(0.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
    Ⲇⵠ[673][sh.ⲆⵠⲆ] = pr(ip(0.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
    Ⲇⵠ[688] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 158;
      c.height = a * 201;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96.5, a * 76.421875);
      d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
      d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
      d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
      d.closePath();
      hd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 61.5, a * 78.421875);
      d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
      d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
      d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
      d.closePath();
      hd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116.5, a * 127.421875);
      d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
      d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
      d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
      d.closePath();
      hd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 41.5, a * 134.421875);
      d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
      d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
      d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
      d.closePath();
      hd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 78.5, a * 51.921875);
      d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
      d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
      d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
      d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
      d.closePath();
      hd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      hd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 42.5, a * 163.421875);
      d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
      d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
      d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
      d.closePath();
      hd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 79.5, a * 61.421875);
      d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
      d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
      d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
      d.closePath();
      hd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      hd(d, b[0], b[0], a * 10);
      return c;
    }(0.8, ["#B6222A"]));
    Ⲇⵠ[902] = [];
    Ⲇⵠ[902][sh.ⲆⲆΔ] = pr(Dd(0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
    Ⲇⵠ[902][sh.ⲆⵠⲆ] = pr(Dd(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    Ⲇⵠ[903] = [];
    Ⲇⵠ[903][sh.ⲆⲆΔ] = pr(Dd(0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
    Ⲇⵠ[903][sh.ⲆⵠⲆ] = pr(Dd(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
    Ⲇⵠ[sh.ᐃΔᐃΔⲆΔΔ] = [];
    Ⲇⵠ[sh.ᐃΔᐃΔⲆΔΔ][sh.ⲆⲆΔ] = pr(Dd(0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
    Ⲇⵠ[sh.ᐃΔᐃΔⲆΔΔ][sh.ⲆⵠⲆ] = pr(Dd(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    Ⲇⵠ[904] = pr(Qd(0.4, ["#B6222A"]));
    Ⲇⵠ[905] = pr(Qd(0.4, ["#B6222A"]));
    Ⲇⵠ[sh.ΔⵠⵠΔⵠΔⵠⲆΔ] = pr(Qd(0.4, ["#B6222A"]));
    Ⲇⵠ[230] = pr(pm(0.35, eg, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
    Ⲇⵠ[229] = pr(Gu(0.35, rr, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
    Ⲇⵠ[886] = [];
    Ⲇⵠ[886][sh.ⲆⲆΔ] = pr(zu(0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
    Ⲇⵠ[886][sh.ⲆⵠⲆ] = pr(zu(0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
    Ⲇⵠ[887] = [];
    Ⲇⵠ[887][sh.ⲆⲆΔ] = pr(zu(0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
    Ⲇⵠ[887][sh.ⲆⵠⲆ] = pr(zu(0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
    Ⲇⵠ[894] = [];
    Ⲇⵠ[894][sh.ⲆⲆΔ] = pr(Bu(0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
    Ⲇⵠ[894][sh.ⲆⵠⲆ] = pr(Bu(0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    Ⲇⵠ[895] = [];
    Ⲇⵠ[895][sh.ⲆⲆΔ] = pr(Eu(0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
    Ⲇⵠ[895][sh.ⲆⵠⲆ] = pr(Eu(0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    Ⲇⵠ[896] = [];
    Ⲇⵠ[896][sh.ⲆⲆΔ] = pr(Bu(0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
    Ⲇⵠ[896][sh.ⲆⵠⲆ] = pr(Bu(0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
    Ⲇⵠ[897] = [];
    Ⲇⵠ[897][sh.ⲆⲆΔ] = pr(Eu(0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
    Ⲇⵠ[897][sh.ⲆⵠⲆ] = pr(Eu(0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
    Ⲇⵠ[888] = pr(Au(0.35, ["#B6222A"]));
    Ⲇⵠ[889] = pr(Bu(0.35, 0, [undefined, "#B6222A"]));
    Ⲇⵠ[890] = pr(Eu(0.35, 0, [ir, "#B6222A"]));
    Ⲇⵠ[891] = pr(Au(0.35, ["#22E066"]));
    Ⲇⵠ[892] = pr(Bu(0.35, 0, [Wg, "#22E066"]));
    Ⲇⵠ[893] = pr(Eu(0.35, 0, [ct, "#22E066"]));
    Ⲇⵠ[48] = [];
    Ⲇⵠ[48][sh.ⲆⲆΔ] = pr(hm(0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
    Ⲇⵠ[48][sh.ⲆⵠⲆ] = pr(hm(0.3, true, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
    Ⲇⵠ[47] = [];
    Ⲇⵠ[47][sh.ⲆⲆΔ] = pr(lm(0.45, Ng, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
    Ⲇⵠ[47][sh.ⲆⵠⲆ] = pr(lm(0.45, true, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
    Ⲇⵠ[141] = [];
    Ⲇⵠ[141][sh.ⲆⲆΔ] = pr(gp(0.63, true, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
    Ⲇⵠ[141][sh.ⲆⵠⲆ] = pr(gp(0.63, Zl, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    Ⲇⵠ[125] = [];
    Ⲇⵠ[125][sh.ⲆⲆΔ] = pr(np(1, rr, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
    Ⲇⵠ[125][sh.ⲆⵠⲆ] = pr(np(1, vs, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    Ⲇⵠ[221] = [];
    Ⲇⵠ[221][sh.ⲆⲆΔ] = ᐃΔ.ⲆᐃⲆⲆⵠᐃΔⲆΔ;
    Ⲇⵠ[221][sh.ⲆⵠⲆ] = ᐃΔ.ⵠΔⵠΔΔⵠⲆΔⲆ;
    Ⲇⵠ[190] = [];
    Ⲇⵠ[190][sh.ⲆⲆΔ] = pr(Pd(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    Ⲇⵠ[190][sh.ⲆⵠⲆ] = pr(Pd(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    Ⲇⵠ[853] = [Ⲇⵠ[190]];
    Ⲇⵠ[853][1] = [];
    Ⲇⵠ[853][2] = [];
    Ⲇⵠ[853][1][sh.ⲆⲆΔ] = pr(Ad(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    Ⲇⵠ[853][1][sh.ⲆⵠⲆ] = pr(Ad(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    Ⲇⵠ[853][2][sh.ⲆⲆΔ] = pr(Sd(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    Ⲇⵠ[853][2][sh.ⲆⵠⲆ] = pr(Sd(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    Ⲇⵠ[49] = [];
    Ⲇⵠ[49][sh.ⲆⲆΔ] = pr(md(3 - Math.PI / 2, _c(0.6, Va, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
    Ⲇⵠ[49][sh.ⲆⵠⲆ] = pr(md(3 - Math.PI / 2, _c(0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
    Ⲇⵠ[728] = [];
    Ⲇⵠ[728][sh.ⲆⲆΔ] = pr(Yd(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
    Ⲇⵠ[728][sh.ⲆⵠⲆ] = pr(Yd(0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
    Ⲇⵠ[798] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 650;
      c.height = a * 650;
      d.scale(1.9, 1.9);
      d.save();
      d.translate(a * 202.5, a * 147.5);
      gd(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
      d.restore();
      hd(d, b[4], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      gd(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      hd(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      gd(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      hd(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      gd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      hd(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      gd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      hd(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 204, a * 121.5);
      gd(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
      d.restore();
      hd(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 197, a * 299);
      gd(d, a * 85, a * -9, a * -170, a * 18, a * 10);
      d.restore();
      hd(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94, a * 317);
      d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
      d.closePath();
      hd(d, undefined, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 279, a * 142);
      d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
      d.closePath();
      hd(d, undefined, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 106);
      d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
      d.closePath();
      hd(d, undefined, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 281, a * 282);
      d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
      d.closePath();
      hd(d, undefined, b[1], a * 12);
      return c;
    }(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
    Ⲇⵠ[729] = pr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 400;
      c.height = a * 400;
      d.save();
      d.translate(a * 202.5, a * 147.5);
      gd(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
      d.restore();
      hd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 190.5);
      gd(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
      d.restore();
      hd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 233.5);
      gd(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
      d.restore();
      hd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 275);
      gd(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
      d.restore();
      hd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      gd(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      hd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      gd(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      hd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      gd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      hd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      gd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      hd(d, b[0], b[0], a * 12);
      return c;
    }(0.3, ["#BB0000"]));
    Ⲇⵠ[658] = hu(1, [{
      f: kp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    Ⲇⵠ[150] = hu(1.5, [{
      f: Mp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    Ⲇⵠ[669] = Xc(0.35, ["#072428", "#67A242", "#67A242"], 0);
    Ⲇⵠ[670] = Xc(0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
    Ⲇⵠ[671] = Xc(0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
    Ⲇⵠ[672] = Xc(0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
    if (ΔᐃΔᐃᐃⲆΔ) {
      Ⲇⵠ[278] = pr(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 180;
        var g = b * 8;
        c.width = e;
        c.height = f;
        d.beginPath();
        gd(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.8;
        hd(d, "#1D6055");
        d.globalAlpha = 1;
        var a = Su(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(1));
    } else {
      Ⲇⵠ[278] = pr(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 270;
        var g = b * 8;
        c.width = e;
        c.height = f + 20;
        d.beginPath();
        gd(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.5;
        hd(d, "#1D6055");
        d.globalAlpha = 1;
        var a = Su(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(1));
    }
    if (ΔᐃΔᐃᐃⲆΔ) {
      Ⲇⵠ[267] = pr(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 335;
        var f = b * 250;
        var i = b * 120;
        var a = b * 20;
        var j = b * 35;
        var k = b * 65;
        var h = b * 2;
        var g = b * 4;
        c.width = e;
        c.height = i;
        d.beginPath();
        d.translate(0, b * 15);
        gd(d, k, 0, f, a, h);
        hd(d, null, "#69A148", g);
        d.translate(0, j);
        gd(d, k, 0, f, a, h);
        hd(d, null, "#AF352A", g);
        d.translate(0, j);
        gd(d, k, 0, f, a, h);
        hd(d, null, "#669BB1", g);
        return c;
      }(0.75));
    } else {
      Ⲇⵠ[267] = pr(function (c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = c * 950;
        var i = c * 180;
        var j = c * 50;
        var a = c * 20;
        var k = c * 240;
        var m = c * 35;
        var h = c * 1;
        var g = c * 4;
        var l = c * 4;
        d.width = f;
        d.height = j;
        e.translate(0, c * 15);
        gd(e, m, h, i, a, g);
        hd(e, null, "#69A148", l);
        var n = Ⲇⵠ[669];
        e.drawImage(n, 17, -8);
        e.translate(k, 0);
        gd(e, m, h, i, a, g);
        hd(e, null, "#AF352A", l);
        n = Ⲇⵠ[671];
        e.drawImage(n, 17, -9);
        e.translate(k, 0);
        gd(e, m, h, i, a, g);
        hd(e, null, "#669BB1", l);
        n = Ⲇⵠ[670];
        e.drawImage(n, 17, -8);
        e.translate(k, 0);
        gd(e, m, h, i, a, g);
        hd(e, null, "#074A87", l);
        n = Ⲇⵠ[672];
        e.drawImage(n, 17, -8);
        return d;
      }(1));
    }
    if (ΔᐃΔᐃᐃⲆΔ) {
      Ⲇⵠ[608] = pr(Vc(0.75));
    } else {
      Ⲇⵠ[608] = pr(Vc(1));
    }
    Ⲇⵠ[792] = pr(Cc(0.16, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
    Ⲇⵠ[537] = pr(md(5.8, uu(0.15, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
    Ⲇⵠ[283] = [];
    Ⲇⵠ[465] = [];
    for (a = 0; a < 18; a++) {
      Ⲇⵠ[465][a] = Su(1, "" + (a + 1), 12, "#FFF");
    }
    Ⲇⵠ[708] = [];
    Ⲇⵠ[708].push(pr(wp(0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
    Ⲇⵠ[708].push(pr(wp(0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
    Ⲇⵠ[708].push(pr(wp(0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
    Ⲇⵠ[725] = [];
    Ⲇⵠ[725].push(pr(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      bd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      hd(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      bd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      hd(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      hd(c, "#12432D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      hd(c, "#3A2A0D");
      bd(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      hd(c, Wg, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      hd(c, tr, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      hd(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      hd(c, Ro, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      hd(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      hd(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      hd(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      hd(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      hd(c, Ra, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      hd(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      hd(c, ma, "#c7a726", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      hd(c, ct, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      hd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      hd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      hd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      hd(c, Og, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      hd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      hd(c, Og, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      hd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      hd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      hd(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      hd(c, "#ECBE35", "#EDCE4F", a * 8);
      bd(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      hd(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(0.22)));
    Ⲇⵠ[725].push(pr(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      bd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      hd(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      bd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      hd(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      hd(c, "#3A2A0D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      hd(c, "#071A1B");
      bd(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      hd(c, Qa, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      hd(c, undefined, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      hd(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      hd(c, Bo, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      hd(c, Lh, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      hd(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      hd(c, ir, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      hd(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      hd(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      hd(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      hd(c, Lk, "#281C08", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      hd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      hd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      hd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      hd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      hd(c, Wg, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      hd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      hd(c, Dh, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      hd(c, Es, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      hd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      hd(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      hd(c, "#E1DDD5", "#EAE7E4", a * 8);
      bd(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      hd(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(0.22)));
    Ⲇⵠ[726] = pr(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      bd(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
      hd(c, "#C09D6F", "#A37943", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
      c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
      c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
      c.closePath();
      hd(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 161.50003051757812, a * 117.90341186523438);
      gd(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
      c.restore();
      hd(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 162.00003051757812, a * 78.90341186523438);
      gd(c, a * -10, a * -5.5, a * 20, a * 11, a * 1);
      c.restore();
      hd(c, "#C09D6F");
      bd(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
      hd(c, "#C09D6F");
      return b;
    }(0.22));
    Ⲇⵠ[727] = [];
    Ⲇⵠ[727].push(pr(Ld(1.5, ["#795026", "#654320", "#eda80d"], 0)));
    Ⲇⵠ[727].push(pr(Ld(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
    Ⲇⵠ[727].push(pr(Ld(1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
    Ⲇⵠ[546] = ᐃΔ.ᐃⵠⲆΔᐃᐃⵠ;
    Ⲇⵠ[547] = ᐃΔ.ᐃⵠΔΔᐃⵠΔ;
    Ⲇⵠ[548] = ᐃΔ.ᐃᐃⲆⲆᐃⲆᐃ;
    Ⲇⵠ[549] = ᐃΔ.ⲆⲆⵠⵠⲆⵠⲆ;
    Ⲇⵠ[517] = Su(1, "Show spectators", 25, "#FFF", undefined, undefined, "#000", 5, 220);
    Ⲇⵠ[525] = Su(1, "Reconnecting...", 30, "#FFF");
    console.log(undefined, Lh);
  }
  function Ep(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 89;
    d.height = a * 89;
    e.save();
    e.translate(a * 44.5, a * 44.5);
    cd(e, 6, a * 40, a * 10);
    e.restore();
    hd(e, c[0], c[1], a * 5);
    e.save();
    e.translate(a * 44.5, a * 44.5);
    cd(e, 6, a * 25.11521001172521, a * 10);
    e.restore();
    hd(e, c[2], c[3], a * 5);
    return d;
  }
  function Dp() {
    if (!Hx.ΔⵠⲆⲆ.open && !Hx.ᐃⲆⲆⵠᐃ.open && !Hx.ⲆΔⵠᐃ.open && !Hx.ⲆᐃᐃⲆ.open) {
      Hx.ⲆᐃᐃΔ.open = false;
      var b = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; Gx.ᐃⲆΔ[34].length > d; d++) {
          var e = Gx.ᐃⲆΔ[34][d];
          var f = ᐃⵠⵠ.ⲆⲆⲆΔ(e, b);
          if (c > f) {
            c = f;
            Hx.ⲆᐃᐃΔ.open = It;
            Hx.ⲆᐃᐃΔ.ⵠⲆⵠⵠΔⲆⵠ = e.info & 31;
            Hx.ⲆᐃᐃΔ.ΔΔⵠΔⲆ = (e.info & 992) >> 5;
            Hx.ⲆᐃᐃΔ.ⲆⵠⲆⵠⲆΔⲆ = (e.info & 31744) >> 10;
            Hx.ⲆᐃᐃΔ.ᐃⵠⲆⲆ = e.ᐃⵠⲆⲆ;
            Hx.ⲆᐃᐃΔ.ᐃⲆⲆⵠΔ = e.id;
          }
        }
        if (c < 100) {
          var g = Ⲇⵠ[722];
          var a = (k = Kx.ᐃᐃᐃⵠΔᐃⲆ).info.translate.x - 32;
          Gp(Uo, g, a, 0);
          if (Hx.ⲆᐃᐃΔ.ⵠⲆⵠⵠΔⲆⵠ > 0) {
            k.ⵠᐃⲆᐃ(Uo);
            var j = Hx.ⲆᐃᐃΔ.ⵠⲆⵠⵠΔⲆⵠ;
            if (j > 1) {
              Yp(j, k);
            }
          }
          var k = Kx.ⵠⵠⲆⵠΔⲆᐃ;
          if (Hx.ⲆᐃᐃΔ.ⲆⵠⲆⵠⲆΔⲆ > 0) {
            k.ⵠᐃⲆᐃ(Uo);
            if ((j = Hx.ⲆᐃᐃΔ.ⲆⵠⲆⵠⲆΔⲆ) > 1) {
              Yp(j, k);
            }
          }
          k = Kx.ⲆᐃⵠⲆⲆᐃᐃ;
          if (Hx.ⲆᐃᐃΔ.ΔΔⵠΔⲆ > 0) {
            k.ⵠᐃⲆᐃ(Uo);
            if ((j = Hx.ⲆᐃᐃΔ.ΔΔⵠΔⲆ) > 1) {
              Yp(j, k);
            }
          }
        }
      }
    }
  }
  function Ip() {
    if (!Hx.ΔⵠⲆⲆ.open && !Hx.ᐃⲆⲆⵠᐃ.open && !Hx.ⲆΔⵠᐃ.open && !Hx.ⲆᐃᐃΔ.open && !Hx.ⲆᐃᐃⲆ.open) {
      Hx.sign.open = Ks;
      var a = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
      var b = 100;
      if (a) {
        for (var c = 0; Gx.ᐃⲆΔ[36].length > c; c++) {
          var d = Gx.ᐃⲆΔ[36][c];
          var e = ᐃⵠⵠ.ⲆⲆⲆΔ(d, a);
          if (e < b && d.info === 0 && d.ᐃⵠⲆⲆ === Hx.id) {
            Hx.sign.open = true;
            b = e;
            Hx.sign.ᐃⲆⲆⵠΔ = d.id;
          }
        }
        if (b < 100) {
          Kx.sign.button.ⵠᐃⲆᐃ(Uo);
        }
      }
    }
  }
  function Sp() {
    var a = Kx.ⲆΔᐃⲆⲆ;
    var b = a.id;
    if (a.ΔⲆᐃΔⵠ === 1 && a.display === 1) {
      if (ΔᐃⲆᐃᐃ[b] === Ne) {
        ΔᐃⲆᐃᐃ[b] = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          var e = Qb[b];
          d.font = "20px Baloo Paaji";
          var f = 0;
          if (e.length >= 1) {
            f = Math.max(0, d.measureText(e[0]).width);
          }
          d.font = "17px Baloo Paaji";
          if (e.length >= 2) {
            f = Math.max(f, d.measureText(e[1]).width);
          }
          d.font = "14px Baloo Paaji";
          _b = 2;
          for (; e.length > _b; _b++) {
            f = Math.max(f, d.measureText(e[_b]).width);
          }
          var g = f + 35;
          var a = 0;
          a = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
          c.width = g;
          c.height = a;
          gd(d, 0, 0, g, a, 10);
          d.fillStyle = "#000000";
          d.globalAlpha = 0.5;
          d.fill();
          if (e.length >= 1) {
            d.textBaseline = "middle";
            d.font = "20px Baloo Paaji";
            d.globalAlpha = 1;
            d.fillStyle = "#e2c340";
            d.fillText(e[0], 15, 28);
          }
          if (e.length >= 2) {
            d.font = "17px Baloo Paaji";
            d.fillStyle = "#ffffff";
            d.fillText(e[1], 15, 55);
            a = 55;
          }
          if (e.length >= 3) {
            d.font = "14px Baloo Paaji";
            d.globalAlpha = 0.7;
            _b = 2;
            for (; _b < e.length; _b++) {
              d.fillText(e[_b], 15, a + 28);
              a += 26;
            }
          }
          return c;
        }(b);
      }
      if (a.ᐃⵠΔⲆ === 1) {
        Gp(Uo, ΔᐃⲆᐃᐃ[b], a.x, a.y);
      } else if (a.x - 80 + ΔᐃⲆᐃᐃ[b].width > Yo) {
        Gp(Uo, ΔᐃⲆᐃᐃ[b], Yo - ΔᐃⲆᐃᐃ[b].width - 10, a.y - ΔᐃⲆᐃᐃ[b].height - 10);
      } else {
        Gp(Uo, ΔᐃⲆᐃᐃ[b], a.x - 80, a.y - ΔᐃⲆᐃᐃ[b].height - 10);
      }
    }
  }
  function Qp() {
    if (Hx.ᐃⵠᐃⲆⵠⵠᐃ) {
      Uo.globalAlpha = 0.5;
      Uo.fillStyle = "#000";
      Uo.fillRect(0, 0, Yo, jq);
      Uo.globalAlpha = 0.8;
      var b = Ⲇⵠ[516][Gx.time];
      var c = kq - b.width / 2;
      var d = Zo - b.height / 2;
      Gp(Uo, b, c, d);
      Uo.globalAlpha = 1;
      if (Kx.ⵠⵠΔⲆⲆ.ⵠΔⵠΔⲆ.x > -1) {
        Uo.fillStyle = "#660000";
        bd(Uo, c + ia * (Kx.ⵠⵠΔⲆⲆ.ⵠΔⵠΔⲆ.x * 3), d + Kx.ⵠⵠΔⲆⲆ.ⵠΔⵠΔⲆ.y * 3 * ia, ia * 14);
        Uo.fill();
      }
      for (var e = Kx.ⵠⵠΔⲆⲆ.ᐃⲆⵠⲆ, f = 0; e.length > f; f++) {
        var g = e[f];
        Gx.time;
        Uo.fillStyle = "#ff0000";
        bd(Uo, c + g.x / (Gx.ⵠᐃΔΔΔ * 100) * 600 * ia, d + g.y / (Gx.ⲆΔⲆΔΔ * 100) * 600 * ia, ia * 6);
        Uo.fill();
      }
      var h = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
      if (h) {
        Uo.fillStyle = Gx.time ? "#fff" : "#e39716";
        bd(Uo, c + ia * (h.x / (Gx.ⵠᐃΔΔΔ * 100) * 600), d + h.y / (Gx.ⲆΔⲆΔΔ * 100) * 600 * ia, ia * 12);
        Uo.fill();
      }
    }
  }
  function _p() {
    if (!Hx.ΔⵠⲆⲆ.open && !Hx.ᐃⲆⲆⵠᐃ.open) {
      Hx.ⲆΔⵠᐃ.open = false;
      var b = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; Gx.ᐃⲆΔ[32].length > d; d++) {
          var e = Gx.ᐃⲆΔ[32][d];
          var f = ᐃⵠⵠ.ⲆⲆⲆΔ(e, b);
          if (f < c) {
            c = f;
            Hx.ⲆΔⵠᐃ.open = eg;
            Hx.ⲆΔⵠᐃ.ᐃΔΔⵠⲆᐃⲆ = e.info & 255;
            Hx.ⲆΔⵠᐃ.ΔΔⵠΔⲆ = (e.info & 65280) >> 8;
            Hx.ⲆΔⵠᐃ.ᐃⵠⲆⲆ = e.ᐃⵠⲆⲆ;
            Hx.ⲆΔⵠᐃ.ᐃⲆⲆⵠΔ = e.id;
          }
        }
        if (c < 100) {
          var g = Ⲇⵠ[655];
          var a = (k = Kx.ⲆⲆⲆᐃⵠⲆΔ).info.translate.x - 33;
          Gp(Uo, g, a, 0);
          if (Hx.ⲆΔⵠᐃ.ᐃΔΔⵠⲆᐃⲆ > 0) {
            k.ⵠᐃⲆᐃ(Uo);
            if ((j = Hx.ⲆΔⵠᐃ.ᐃΔΔⵠⲆᐃⲆ) > 1) {
              Yp(j, k);
            }
          }
          var j;
          var k = Kx.ᐃᐃᐃⵠᐃΔⵠ;
          if (Hx.ⲆΔⵠᐃ.ΔΔⵠΔⲆ > 0) {
            k.ⵠᐃⲆᐃ(Uo);
            if ((j = Hx.ⲆΔⵠᐃ.ΔΔⵠΔⲆ) > 1) {
              Yp(j, k);
            }
          }
        }
      }
    }
  }
  ΔᐃⲆᐃᐃ = [];
  ⵠᐃⵠⵠΔᐃⲆ = [];
  const Fp = 8089910;
  const Rp = 8089910 .ᐃᐃᐃⵠᐃⲆⵠ;
  const jp = `const ᐃᐃΔΔⵠΔⵠ = (typeof ⲆⵠⵠⵠⵠⵠΔ === "${Rp}") ? 1 : 0; return ᐃᐃΔΔⵠΔⵠ;`;
  function Lp() {
    if (!Hx.ΔⵠⲆⲆ.open && !Hx.ᐃⲆⲆⵠᐃ.open) {
      Hx.ⲆᐃᐃⲆ.open = go;
      var b = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; Kf.length > d; d++) {
          for (var e = Kf[d][0], f = Kf[d][1], j = 0; Gx.ᐃⲆΔ[e].length > j; j++) {
            var k = Gx.ᐃⲆΔ[e][j];
            var m = ᐃⵠⵠ.ⲆⲆⲆΔ(k, b);
            if (m < c) {
              c = m;
              Hx.ⲆᐃᐃⲆ.ᐃΔᐃⲆᐃⲆᐃ = f;
              Hx.ⲆᐃᐃⲆ.type = e;
              Hx.ⲆᐃᐃⲆ.open = Tk;
              Hx.ⲆᐃᐃⲆ.ⵠⲆⵠⵠΔⲆⵠ = k.info & 255;
              Hx.ⲆᐃᐃⲆ.ΔΔΔᐃᐃΔΔ = (k.info & 65280) >> 8;
              Hx.ⲆᐃᐃⲆ.ᐃⵠⲆⲆ = k.ᐃⵠⲆⲆ;
              Hx.ⲆᐃᐃⲆ.ᐃⲆⲆⵠΔ = k.id;
            }
          }
        }
        if (c < 100) {
          var p;
          var q = Ⲇⵠ[656];
          var g = (l = Kx.ⵠᐃⲆΔΔⵠΔ).info.translate.x - 33;
          Gp(Uo, q, g, 0);
          if (Hx.ⲆᐃᐃⲆ.ⵠⲆⵠⵠΔⲆⵠ > 0) {
            l.ⵠᐃⲆᐃ(Uo);
            if ((p = Hx.ⲆᐃᐃⲆ.ⵠⲆⵠⵠΔⲆⵠ) > 1) {
              Yp(p, l);
            }
          }
          switch (Hx.ⲆᐃᐃⲆ.ᐃΔᐃⲆᐃⲆᐃ) {
            case 108:
              var l = Kx.ᐃᐃⲆⵠⵠᐃᐃ;
              break;
            case 111:
              l = Kx.ⵠⲆⲆΔⵠⵠΔ;
              break;
            case 112:
              l = Kx.ᐃⵠΔᐃᐃᐃⵠ;
              break;
            case 121:
              l = Kx.ⵠᐃΔΔⵠⵠⲆ;
              break;
            case 202:
              l = Kx.ΔⲆΔΔΔⵠⵠ;
          }
          if (Hx.ⲆᐃᐃⲆ.ΔΔΔᐃᐃΔΔ > 0) {
            l.ⵠᐃⲆᐃ(Uo);
            if ((p = Hx.ⲆᐃᐃⲆ.ΔΔΔᐃᐃΔΔ) > 1) {
              Yp(p, l);
            }
          }
        }
      }
    }
  }
  function Wp() {
    Hx.ΔⲆΔⲆⲆ.id = -1;
    Hx.ΔⲆΔⲆⲆ.ᐃⵠⲆⲆ = -1;
    if (!Hx.ᐃᐃⲆⵠⲆᐃᐃ && !Hx.ΔⲆΔⲆⲆ.wait && !Hx.ᐃΔΔⵠΔ) {
      var b = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; d < Gx.ᐃⲆΔ[29].length; d++) {
          var e = Gx.ᐃⲆΔ[29][d];
          var f = ᐃⵠⵠ.ⲆⲆⲆΔ(e, b);
          if (c > f) {
            c = f;
            Hx.ΔⲆΔⲆⲆ.id = e.id;
            Hx.ΔⲆΔⲆⲆ.ᐃⵠⲆⲆ = e.ᐃⵠⲆⲆ;
            Hx.ΔⲆΔⲆⲆ.info = e.info;
            Hx.ΔⲆΔⲆⲆ.lock = (e.info & 16) >> 4;
          }
        }
      }
      var g = Kx.ⵠⲆΔᐃⵠ;
      Kx.ⵠⲆΔᐃⵠ = -1;
      if (Hx.ΔⲆΔⲆⲆ.ᐃⵠⲆⲆ == -1 || Hx.ⲆΔᐃⲆᐃ.length != 0 && Hx.id != Hx.ΔⲆΔⲆⲆ.ᐃⵠⲆⲆ) {
        if (Hx.ⲆΔᐃⲆᐃ.length != 0 && Hx.id != Hx.ⲆΔᐃⲆᐃ[0]) {
          Kx.ⵠⲆΔᐃⵠ = 2;
        } else if (Hx.ⲆΔᐃⲆᐃ.length != 0 && Hx.ⲆΔᐃⲆᐃ[0] == Hx.id) {
          Kx.ⵠⲆΔᐃⵠ = 1;
        } else if (Hx.ⲆΔᐃⲆᐃ.length != 0) {
          Kx.ⵠⲆΔᐃⵠ = 3;
        }
      } else if (Hx.ⲆΔᐃⲆᐃ.length == 0 && Hx.ΔⲆΔⲆⲆ.info >= 8) {
        Kx.ⵠⲆΔᐃⵠ = 4;
      } else if (Hx.ⲆΔᐃⲆᐃ.length == 0) {
        Kx.ⵠⲆΔᐃⵠ = 3;
      } else {
        Kx.ⵠⲆΔᐃⵠ = 0;
      }
      if (Kx.ⵠⲆΔᐃⵠ != -1) {
        Kx.ⲆΔᐃΔᐃ[Kx.ⵠⲆΔᐃⵠ].button.ⵠᐃⲆᐃ(Uo);
      }
      var a = document.getElementById("team_box").style;
      if (Kx.ⵠⲆΔᐃⵠ != -1 && g != Kx.ⵠⲆΔᐃⵠ && a.display == "inline-block") {
        Kx.ⲆΔᐃΔᐃ[Kx.ⵠⲆΔᐃⵠ].action();
      }
    }
  }
  function Gp(b, c, d, e, f, i, a, j, k, h) {
    if (Ns === c.ⵠⵠΔᐃⲆⲆΔ || c.ⵠⵠΔᐃⲆⲆΔ() === 1) {
      if (h !== undefined) {
        b.drawImage(c, d, e, Math.max(1, f), Math.max(1, i), a, j, k, h);
      } else if (Wg !== i) {
        b.drawImage(c, d, e, f, i);
      } else {
        b.drawImage(c, d, e);
      }
    }
  }
  function Np() {
    if (!Hx.ΔⵠⲆⲆ.open) {
      Hx.ᐃⲆⲆⵠᐃ.ᐃᐃΔᐃ = 0;
      Hx.ᐃⲆⲆⵠᐃ.open = false;
      var b = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; d < Gx.ᐃⲆΔ[18].length; d++) {
          var e = Gx.ᐃⲆΔ[18][d];
          var f = ᐃⵠⵠ.ⲆⲆⲆΔ(e, b);
          if (f < c) {
            c = f;
            Hx.ᐃⲆⲆⵠᐃ.open = true;
            Hx.ᐃⲆⲆⵠᐃ.ᐃᐃΔᐃ = e.info;
            Hx.ᐃⲆⲆⵠᐃ.ᐃⵠⲆⲆ = e.ᐃⵠⲆⲆ;
            Hx.ᐃⲆⲆⵠᐃ.ᐃⲆⲆⵠΔ = e.id;
          }
        }
        if (c < 100) {
          var j = Ⲇⵠ[411];
          var a = Kx.ΔⵠᐃᐃⲆⵠⲆ;
          var k = Math.floor(a.info.translate.x + (a.info.ⵠᐃ[0].width - j.width) / 2);
          var l = Math.floor(a.info.translate.y + (a.info.ⵠᐃ[0].height - j.height) / 2) + 3;
          Gp(Uo, j, k, l);
          if (Hx.ᐃⲆⲆⵠᐃ.ᐃᐃΔᐃ > 0) {
            a.ⵠᐃⲆᐃ(Uo);
            var h = Hx.ᐃⲆⲆⵠᐃ.ᐃᐃΔᐃ;
            if (h > 1) {
              Yp(h, a);
            }
          }
        }
      }
    }
  }
  function qp() {
    if (Hx.reconnect.enabled) {
      Uo.globalAlpha = 0.9;
      Uo.fillStyle = "#000";
      gd(Uo, kq - 150, Zo - 90, 300, 180, 15);
      Uo.fill();
      Uo.globalAlpha = 1;
      var a = Ⲇⵠ[301];
      Uo.save();
      Hx.reconnect.rotate = (Hx.reconnect.rotate + Ox * 2) % (Math.PI * 2);
      Uo.translate(Yo / 2, jq / 2 - 25);
      Uo.rotate(Hx.reconnect.rotate);
      Gp(Uo, a, -a.width / 2, -a.height / 2);
      Uo.restore();
      a = Ⲇⵠ[525];
      Gp(Uo, a, (Yo - a.width) / 2, (jq - a.height) / 2 + 25);
    }
  }
  function Op() {
    Hx.ⵠⵠⵠⲆⲆ.open = Ni;
    var a = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
    var b = 100;
    if (a) {
      for (var c = 0; Gx.ᐃⲆΔ[22].length > c; c++) {
        var d = Gx.ᐃⲆΔ[22][c];
        var e = ᐃⵠⵠ.ⲆⲆⲆΔ(d, a);
        if (e < b) {
          b = e;
          Hx.ⵠⵠⵠⲆⲆ.open = nq;
          Hx.ⵠⵠⵠⲆⲆ.ᐃⵠⲆⲆ = d.ᐃⵠⲆⲆ;
          Hx.ⵠⵠⵠⲆⲆ.ᐃⲆⲆⵠΔ = d.id;
        }
      }
      if (b < 100) {
        Kx.ⵠⵠⵠⲆⲆ.ⵠᐃⲆᐃ(Uo);
      }
    }
  }
  function Hp() {
    if (Hx.ⵠᐃΔⵠ.ⲆᐃⵠⲆΔ.length > 0) {
      var b = {
        x: Kx.ⵠⵠΔⲆⲆ.translate.x,
        y: Kx.ⵠⵠΔⲆⲆ.translate.y - ia * 120
      };
    } else {
      b = {
        x: Kx.ⵠⵠΔⲆⲆ.translate.x,
        y: Kx.ⵠⵠΔⲆⲆ.translate.y - ia * 50
      };
    }
    Uo.globalAlpha = 0.8;
    var c = Ⲇⵠ[259][Gx.time];
    Gp(Uo, c, b.x, b.y);
    Uo.globalAlpha = 1;
    if (Kx.ⵠⵠΔⲆⲆ.ⵠΔⵠΔⲆ.x > -1) {
      Uo.fillStyle = "#660000";
      bd(Uo, b.x + ia * Kx.ⵠⵠΔⲆⲆ.ⵠΔⵠΔⲆ.x, b.y + Kx.ⵠⵠΔⲆⲆ.ⵠΔⵠΔⲆ.y * ia, ia * 5);
      Uo.fill();
    }
    var d = ia;
    for (var f = Kx.ⵠⵠΔⲆⲆ.ᐃⲆⵠⲆ, g = 0; g < f.length; g++) {
      var h = f[g];
      Gx.time;
      Uo.fillStyle = "#ff0000";
      bd(Uo, b.x + ia * (h.x / (Gx.ⵠᐃΔΔΔ * 100) * 193), b.y + ia * (h.y / (Gx.ⲆΔⲆΔΔ * 100) * 193), ia * 2);
      Uo.fill();
    }
    var i = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
    if (i) {
      Uo.fillStyle = Gx.time ? "#fff" : "#e39716";
      bd(Uo, b.x + ia * (i.x / (Gx.ⵠᐃΔΔΔ * 100) * 193), b.y + i.y / (Gx.ⲆΔⲆΔΔ * 100) * 193 * ia, ia * 4);
      Uo.fill();
    }
    ia = d;
  }
  function Up() {
    Hx.ΔⵠⲆⲆ.id = -1;
    Hx.ΔⵠⲆⲆ.lock = Kr;
    Hx.ΔⵠⲆⲆ.locked = false;
    Hx.ΔⵠⲆⲆ.ⲆⵠⲆⲆΔⵠΔ = false;
    Hx.ΔⵠⲆⲆ.ΔⲆⲆΔⵠᐃΔ = false;
    Hx.ΔⵠⲆⲆ.open = $g;
    var b = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
    var c = 100;
    if (b) {
      for (var d = 0; d < Gx.ᐃⲆΔ[11].length; d++) {
        var e = Gx.ᐃⲆΔ[11][d];
        var f = ᐃⵠⵠ.ⲆⲆⲆΔ(e, b);
        if (c > f) {
          c = f;
          Hx.ΔⵠⲆⲆ.open = pg;
          Hx.ΔⵠⲆⲆ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
          Hx.ΔⵠⲆⲆ.ᐃᐃΔᐃ = e.info;
          Hx.ΔⵠⲆⲆ.ᐃⵠⲆⲆ = e.ᐃⵠⲆⲆ;
          Hx.ΔⵠⲆⲆ.ᐃⲆⲆⵠΔ = e.id;
          Hx.ΔⵠⲆⲆ.locked = e.lock;
          Hx.ΔⵠⲆⲆ.lock = e.lock && e.ᐃⵠⲆⲆ != Hx.id && !Hx.ⲆᐃⲆⵠΔΔⲆ(e.ᐃⵠⲆⲆ) ? Gh : Ni;
          Hx.ΔⵠⲆⲆ.ΔⲆⲆΔⵠᐃΔ = e.ᐃⵠⲆⲆ === Hx.id && !Hx.ΔⵠⲆⲆ.locked && Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(148) != -1;
          if (Hx.ΔⵠⲆⲆ.locked && Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(158) != -1) {
            Hx.ΔⵠⲆⲆ.ⲆⵠⲆⲆΔⵠΔ = true;
          }
        }
      }
      if (c < 100) {
        var j = Ⲇⵠ[339];
        var a = Kx.ⲆΔⲆ[0];
        var k = Math.floor(a.info.translate.x + (a.info.ⵠᐃ[0].width - j.width) / 2);
        var l = Math.floor(a.info.translate.y + (a.info.ⵠᐃ[0].height - j.height) / 2) + 3;
        Gp(Uo, j, k, l);
        if ((!Hx.ΔⵠⲆⲆ.lock || Hx.ΔⵠⲆⲆ.ᐃⵠⲆⲆ === Hx.id) && Hx.ΔⵠⲆⲆ.id >= 0) {
          (a = Kx.ⲆΔⲆ[Hx.ΔⵠⲆⲆ.id]).ⵠᐃⲆᐃ(Uo);
          var h = Hx.ΔⵠⲆⲆ.ᐃᐃΔᐃ;
          if (h > 1) {
            Yp(h, a);
          }
        }
        if (Hx.ΔⵠⲆⲆ.lock) {
          Kx.ⲆΔΔⵠΔⲆⵠ.ⵠᐃⲆᐃ(Uo);
        } else if (Hx.ΔⵠⲆⲆ.ΔⲆⲆΔⵠᐃΔ) {
          Kx.ᐃΔᐃⵠⵠᐃᐃ.ⵠᐃⲆᐃ(Uo);
        }
        if (Hx.ΔⵠⲆⲆ.ⲆⵠⲆⲆΔⵠΔ) {
          Kx.ⲆΔΔⵠΔⵠⵠ.ⵠᐃⲆᐃ(Uo);
        }
      }
    }
  }
  function Yp(a, b) {
    Ⲇⵠ[283][a] ||= Su(ia, "x" + a, 17, "#FFF");
    var c = Ⲇⵠ[283][a];
    var d = b.info.translate.x + b.info.ⵠᐃ[0].width - c.width - ia * 14;
    var e = b.info.translate.y + b.info.ⵠᐃ[0].height - c.height - ia * 19;
    if (wf == b.info.state) {
      e += ia * 5;
    }
    Gp(Uo, c, d, e);
  }
  function Kp(b, c, d) {
    var e = Ⲇⵠ[465][b];
    var f = c.info.translate.x + ia * 5;
    var g = c.info.translate.y + ia * 5;
    if (c.info.state == wf || d) {
      g += ia * 5;
    }
    Gp(Uo, e, f, g);
  }
  var Vp = [];
  function Xp(a) {
    if ((a = a / 100) <= 0.95) {
      Uo.save();
      Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
      Uo.rotate(this.angle);
      if (this.ⵠⵠᐃ.ⲆΔᐃ) {
        if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == 0) {
          this.ⵠⵠᐃ.ⲆΔᐃ = false;
        }
        var b = ia * (Ox * (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * 600);
        var c = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * b;
        var d = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      Uo.globalAlpha = 0.5;
      ud(Uo, c, d, ia * 28, a);
      hd(Uo, null, "#000000", ia * 18);
      Uo.globalAlpha = 1;
      ud(Uo, c, d, ia * 28, a);
      hd(Uo, null, sh.ⵠᐃᐃᐃⵠⵠᐃ[Gx.time], ia * 6);
      Uo.restore();
    }
  }
  function Zp() {
    var b = Hx.ΔⲆΔⲆⲆ;
    if (b.wait) {
      var c = b.timeout.ⲆΔᐃ();
      Uo.save();
      var d = Ⲇⵠ[562];
      var e = Ⲇⵠ[537].height + ia * 25;
      Uo.translate(d.width, Kx.ⵠΔⲆⵠ.translate.y - ia * 188 - e);
      var f = -d.width / 2 - 2;
      var g = -d.height / 2 - 4;
      Gp(Uo, d, f + 2, g);
      Uo.beginPath();
      Uo.lineWidth = ia * 5;
      Uo.strokeStyle = sh.ⲆᐃΔⲆΔⲆⵠ[Gx.time];
      Uo.lineCap = "round";
      Uo.arc(0, g + d.height / 2, ia * 25, 0, b.timeout.ᐃⵠⲆ * (Math.PI * 2));
      Uo.stroke();
      Uo.restore();
      if (c) {
        b.wait = false;
        b.timeout.ᐃⵠⲆ = 0;
        b.timeout.ⲆⲆⵠ = Nh;
      }
    }
  }
  function $p(b) {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == 0) {
        this.ⵠⵠᐃ.ⲆΔᐃ = Nq;
      }
      var c = (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * Ox * 600 * ia;
      var d = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * c;
      var e = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * c;
    } else {
      d = 0;
      e = 0;
    }
    if (b === 913 && !Gx.transition) {
      var f = 0;
      for (var g = Gx.ᐃⲆΔ[0], a = 0; g.length > a; a++) {
        var h = ᐃⵠⵠ.ⲆⲆⲆΔ(g[a], this);
        if (h < 140 && h > 35) {
          f = 0;
          break;
        }
        if (h <= 35) {
          f = 1;
        }
      }
      this.opacity = f === 0 ? Math.max(0.5, this.opacity - Ox / 1.5) : Math.min(1, this.opacity + Ox / 1.5);
      Uo.globalAlpha = this.opacity;
    }
    ⵠᐃ = Ⲇⵠ[b][Gx.time];
    ⵠΔⲆ = -ⵠᐃ.width;
    Ⲇᐃⵠ = -ⵠᐃ.height;
    Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2 + d, -Ⲇᐃⵠ / 2 + e, ⵠΔⲆ, Ⲇᐃⵠ);
    Uo.globalAlpha = 1;
    Uo.restore();
  }
  function Uu() {
    var a = Gx.ᐃⲆΔⵠᐃ;
    var b = Ⲇⵠ[725][Gx.time];
    Gp(Uo, b, a.translate.x, a.translate.y);
    Uo.save();
    Uo.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
    Gx.ᐃⲆΔⵠᐃ.now = (new Date().getTime() - a.ⲆⵠΔⵠⲆ + a.ᐃᐃⲆⵠⵠ) % 480000;
    var c = Gx.ᐃⲆΔⵠᐃ.now * (Math.PI * 2) / 480000 - Math.PI / 2;
    Uo.rotate(c);
    Gp(Uo, Ⲇⵠ[726], -b.width / 2, -b.height / 2);
    Uo.restore();
  }
  function Vu(a) {
    if ((a = a / 100) <= 0.8) {
      Uo.save();
      Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
      Uo.rotate(this.angle);
      if (this.ⵠⵠᐃ.ⲆΔᐃ) {
        if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == 0) {
          this.ⵠⵠᐃ.ⲆΔᐃ = false;
        }
        var b = ia * ((1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * Ox * 600);
        var c = b * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
        var d = b * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      Uo.globalAlpha = 0.5;
      ud(Uo, c, d, ia * 18, a);
      hd(Uo, null, "#000000", ia * 18);
      Uo.globalAlpha = 1;
      ud(Uo, c, d, ia * 18, a);
      hd(Uo, null, sh.ᐃⵠⲆⲆᐃᐃⲆ[Gx.time], ia * 6);
      Uo.restore();
    }
  }
  function Wu(b) {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == 0) {
        this.ⵠⵠᐃ.ⲆΔᐃ = cs;
      }
      var c = (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * Ox * 600 * ia;
      var d = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * c;
      var e = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * c;
    } else {
      d = 0;
      e = 0;
    }
    var f = Ⲇⵠ[853].length;
    ⵠᐃ = Ⲇⵠ[853][(this.ᐃᐃⵠⲆ + this.ⵠⲆ % 2) % f][Gx.time];
    ⵠΔⲆ = -ⵠᐃ.width;
    Ⲇᐃⵠ = -ⵠᐃ.height;
    var g = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
    if (g && (this.ᐃⵠⲆⲆ === Hx.id || Hx.ⲆᐃⲆⵠΔΔⲆ(this.ᐃⵠⲆⲆ))) {
      if (ᐃⵠⵠ.ⲆⲆⲆΔ(this, g) < 550) {
        this.opacity = Math.max(this.opacity - Ox, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + Ox, 1);
      }
    } else if (g && ᐃⵠⵠ.ⲆⲆⲆΔ(this, Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ]) < 150) {
      this.opacity = Math.max(this.opacity - Ox, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + Ox, 1);
    }
    var a = Uo.globalAlpha;
    Uo.globalAlpha *= this.opacity;
    Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2 + d, -Ⲇᐃⵠ / 2 + e, ⵠΔⲆ, Ⲇᐃⵠ);
    Uo.globalAlpha = a;
    Uo.restore();
  }
  function Xu() {
    var b = Hx.ᐃⵠΔⲆ;
    if (!b.ⵠⲆⲆΔΔ && b.ⲆⲆⵠⲆⵠ > 0) {
      var c = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
      if (!c) {
        return;
      }
      Uo.save();
      if (vh[b.ⲆⲆⵠⲆⵠ].ᐃΔΔΔ === 0 && b.mode === 0) {
        Uo.translate(Hx.ΔΔⲆ.x + c.x, Hx.ΔΔⲆ.y + c.y);
        Uo.rotate(c.angle);
        Uo.translate(120, 0);
      } else {
        var d = Math.floor(c.x + Math.sin(c.angle) * 120);
        var e = Math.floor(c.y + Math.cos(c.angle) * 120);
        d = Hx.ΔΔⲆ.x + (d - d % 100 + 50);
        e = Hx.ΔΔⲆ.y + (e - e % 100 + 50);
        Uo.translate(d, e);
      }
      var f = Ⲇⵠ[b.ⲆⲆⵠⲆⵠ][Gx.time];
      Uo.globalAlpha = 0.5;
      Gp(Uo, f, -f.width / 2, -f.height / 2);
      Uo.globalAlpha = 1;
      Uo.restore();
      if (vh[b.ⲆⲆⵠⲆⵠ].ᐃΔΔΔ === 0) {
        if (!b.label[b.mode]) {
          if (b.mode === 0) {
            b.label[0] = Su(ia, Qb[336], 20, "#e2c340");
          } else {
            b.label[1] = Su(ia, Qb[337], 20, "#e2c340");
          }
        }
        f = b.label[b.mode];
        Gp(Uo, f, kq + -f.width / 2, Kx.ⵠΔⲆⵠ.y - 26);
      }
    }
    if (b.ⵠⲆⲆΔΔ) {
      var i = b.timeout.ⲆΔᐃ();
      for (var a = 0; b.ᐃᐃⵠΔᐃ.length > a; a++) {
        var j = b.ᐃᐃⵠΔᐃ[a];
        if (j.id == b.id) {
          var k = ia * 42;
          var l = ia * 17;
          gd(Uo, j.info.translate.x, j.info.translate.y + (1 - b.timeout.ᐃⵠⲆ) * k, j.info.width, k * b.timeout.ᐃⵠⲆ + l, ia * 10);
          Uo.fillStyle = "#55B973";
          Uo.fill();
          Uo.globalAlpha = 0.8;
          j.ⵠᐃⲆᐃ(Uo);
        } else {
          Uo.globalAlpha = 0.5;
          j.ⵠᐃⲆᐃ(Uo);
        }
        Uo.globalAlpha = 1;
      }
      if (i) {
        b.ⵠⲆⲆΔΔ = false;
        b.timeout.ᐃⵠⲆ = 0;
        b.timeout.ⲆⲆⵠ = Kr;
      }
      return It;
    }
    for (a = 0; b.ᐃᐃⵠΔᐃ.length > a; a++) {
      b.ᐃᐃⵠΔᐃ[a].ⵠᐃⲆᐃ(Uo);
    }
    return Fa;
  }
  function Yu() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    ⵠᐃ = Ⲇⵠ[811][Gx.time];
    ⵠΔⲆ = -ⵠᐃ.width;
    Ⲇᐃⵠ = -ⵠᐃ.height;
    Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    Uo.restore();
  }
  function Zu() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    ⵠᐃ = Ⲇⵠ[321][Gx.time];
    ⵠΔⲆ = -ⵠᐃ.width;
    Ⲇᐃⵠ = -ⵠᐃ.height;
    Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    Uo.restore();
  }
  function $u() {
    var a = Hx.ⲆΔΔᐃⲆ;
    if (a.wait) {
      var b = a.timeout.ⲆΔᐃ();
      Uo.save();
      var c = Ⲇⵠ[794];
      Uo.translate(c.width - ia * 12, Kx.ⵠΔⲆⵠ.translate.y - ia * 190);
      var d = -c.width / 2 + 9;
      var e = -c.height / 2 - 4;
      Gp(Uo, c, d, e);
      Uo.beginPath();
      Uo.lineWidth = ia * 5;
      Uo.strokeStyle = sh.ⵠΔᐃΔᐃᐃᐃ[Gx.time];
      Uo.lineCap = "round";
      Uo.arc(9, e + c.height / 2, ia * 25, 0, Math.PI * 2 * a.timeout.ᐃⵠⲆ);
      Uo.stroke();
      Uo.restore();
      if (b) {
        a.wait = N;
        a.timeout.ᐃⵠⲆ = 0;
        a.timeout.ⲆⲆⵠ = false;
      }
    }
  }
  function _u() {
    Uo.save();
    var a = ia;
    if (Hx.ⵠΔⲆⵠ.ⵠⵠⲆⵠΔ.x < 0.25) {
      Uo.globalAlpha = Hx.ⵠΔⲆⵠ.ΔΔⵠⲆⲆᐃⲆ.ᐃⵠⲆ;
    }
    var b = Hx.ⵠᐃΔⵠ.ⲆᐃⵠⲆΔ.length > 0 ? -70 : 0;
    if (Hx.ΔⵠⲆⲆ.open || Hx.ᐃⲆⲆⵠᐃ.open && Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(109) != -1 || Hx.ⲆΔⵠᐃ.open && Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(134) != -1 || Hx.ⲆᐃᐃⲆ.open && Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(109) != -1 || Hx.ᐃⵠⵠᐃⲆ.open && Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(180) != -1 || Hx.ⲆᐃᐃΔ.open && (Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(109) != -1 || Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(131) != -1)) {
      b -= ia * 50;
    }
    Uo.translate((Yo - ia * 950) / 2, b);
    Uo.fillStyle = "#69A148";
    Uo.fillRect(this.translate.x + ia * 37, this.translate.y + ia * 17, ia * (Hx.ⵠΔⲆⵠ.ⵠⵠⲆⵠΔ.x * 178), ia * 18);
    Uo.globalAlpha = 1;
    if (Hx.ⵠΔⲆⵠ.ΔΔⲆᐃᐃⲆⵠ.x < 0.35) {
      Uo.fillStyle = "#8F050A";
      Uo.globalAlpha = Hx.ⵠΔⲆⵠ.ᐃᐃᐃⵠⲆᐃⵠ.ᐃⵠⲆ;
      Uo.fillRect(this.translate.x + ia * 277, this.translate.y + ia * 17, ia * 178, ia * 18);
      Uo.globalAlpha = 1;
    }
    Uo.fillStyle = "#AF352A";
    Uo.fillRect(this.translate.x + ia * 277, this.translate.y + ia * 17, ia * (Hx.ⵠΔⲆⵠ.ΔΔⲆᐃᐃⲆⵠ.x * 178), ia * 18);
    if (Hx.ⵠΔⲆⵠ.ⲆⵠⵠⲆᐃ.x < 0.35) {
      Uo.fillStyle = "#366B91";
      Uo.globalAlpha = Hx.ⵠΔⲆⵠ.ⵠΔΔⲆⲆⲆΔ.ᐃⵠⲆ;
      Uo.fillRect(this.translate.x + ia * 517, this.translate.y + ia * 17, ia * 178, ia * 18);
      Uo.globalAlpha = 1;
    }
    Uo.fillStyle = "#669BB1";
    Uo.fillRect(this.translate.x + ia * 517, this.translate.y + ia * 17, Hx.ⵠΔⲆⵠ.ⲆⵠⵠⲆᐃ.x * 178 * ia, ia * 18);
    if (Hx.ⵠΔⲆⵠ.ⲆⵠⵠⲆᐃ.x > 0.99) {
      if (Hx.ⵠΔⲆⵠ.ΔᐃΔⲆⲆ.x < 0.35) {
        Uo.fillStyle = "#6C4036";
        Uo.globalAlpha = Hx.ⵠΔⲆⵠ.ⲆᐃᐃⲆⵠΔΔ.ᐃⵠⲆ;
        Uo.fillRect(this.translate.x + ia * 517, this.translate.y + ia * 17, ia * 178, ia * 18);
        Uo.globalAlpha = 1;
      }
      Uo.fillStyle = "#9C4036";
      Uo.fillRect(this.translate.x + ia * 517, this.translate.y + ia * 17, ia * ((1 - Hx.ⵠΔⲆⵠ.ΔᐃΔⲆⲆ.x) * 178), ia * 18);
    }
    if (Hx.ⵠΔⲆⵠ.ΔⵠⵠⵠᐃⵠⲆ.x < 0.35) {
      Uo.fillStyle = "#001A57";
      Uo.globalAlpha = Hx.ⵠΔⲆⵠ.ⲆⲆᐃⲆⵠⲆⵠ.ᐃⵠⲆ;
      Uo.fillRect(this.translate.x + ia * 757, this.translate.y + ia * 17, ia * 178, ia * 18);
      Uo.globalAlpha = 1;
    }
    Uo.fillStyle = "#074A87";
    Uo.fillRect(this.translate.x + ia * 757, this.translate.y + ia * 17, ia * (Hx.ⵠΔⲆⵠ.ΔⵠⵠⵠᐃⵠⲆ.x * 178), ia * 18);
    ia = a;
    Gp(Uo, this.ⵠᐃ, this.translate.x, this.translate.y);
    this.y = this.translate.y + b;
    Uo.restore();
    if (Hx.ⵠΔⲆⵠ.ⲆⲆⵠⲆⲆⲆⲆ.x < 0.99) {
      var c = Math.floor(kq - Ⲇⵠ[608].width / 2);
      b += this.translate.y - Ⲇⵠ[608].height - ia * 5;
      Uo.fillStyle = "#BBE8EF";
      Uo.fillRect(c + 5, b + ia * 5, ia * 588 * Hx.ⵠΔⲆⵠ.ⲆⲆⵠⲆⲆⲆⲆ.x, ia * 10);
      if (Hx.ⵠΔⲆⵠ.ⲆⲆⵠⲆⲆⲆⲆ.x < 0.35) {
        Uo.fillStyle = "#9BA8AF";
        Uo.globalAlpha = Hx.ⵠΔⲆⵠ.ᐃᐃⲆⲆⵠⲆΔ.ᐃⵠⲆ;
        Uo.fillRect(c + 5, b + 5, ia * 588, ia * 10);
        Uo.globalAlpha = 1;
      }
      Gp(Uo, Ⲇⵠ[608], c, b);
      this.y = b;
    }
  }
  function av() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    ⵠᐃ = Ⲇⵠ[848][Gx.time];
    ⵠΔⲆ = -ⵠᐃ.width;
    Ⲇᐃⵠ = -ⵠᐃ.height;
    Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    Uo.restore();
  }
  function bv(a) {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == N) {
        this.ⵠⵠᐃ.ⲆΔᐃ = false;
      }
      var b = ia * (Ox * (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * 600);
      var c = b * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var d = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = Ⲇⵠ[a][Gx.time];
    ⵠΔⲆ = -e.width;
    Ⲇᐃⵠ = -e.height;
    Gp(Uo, e, -ⵠΔⲆ / 2 + c, -Ⲇᐃⵠ / 2 + d, ⵠΔⲆ, Ⲇᐃⵠ);
    Uo.restore();
  }
  function cv() {
    var a = Hx.ᐃΔᐃⲆⵠ;
    if (a.wait) {
      var b = a.timeout.ⲆΔᐃ();
      Uo.save();
      var c = Ⲇⵠ[792];
      Uo.translate(c.width - ia * 2, Kx.ⵠΔⲆⵠ.translate.y - ia * 125);
      var d = -c.width / 2 + 10;
      var e = -c.height / 2 - 4;
      Gp(Uo, c, d, e);
      Uo.beginPath();
      Uo.lineWidth = ia * 5;
      Uo.strokeStyle = sh.ⵠΔᐃΔᐃᐃᐃ[Gx.time];
      Uo.lineCap = "round";
      Uo.arc(9, e + c.height / 2, ia * 25, 0, Math.PI * 2 * a.timeout.ᐃⵠⲆ);
      Uo.stroke();
      Uo.restore();
      if (b) {
        a.wait = false;
        a.timeout.ᐃⵠⲆ = 0;
        a.timeout.ⲆⲆⵠ = false;
      }
    }
  }
  function dv() {
    var a = -8;
    if (Hx.ⵠΔⵠⵠᐃ.enabled) {
      var b = Ⲇⵠ[546];
      Gp(Uo, b, Hx.ⵠΔⵠⵠᐃ.translate.x, Hx.ⵠΔⵠⵠᐃ.translate.y + a);
      a += 70;
    }
    if (Hx.ⲆⲆΔΔⵠⵠΔ === 1) {
      b = Ⲇⵠ[549];
      Gp(Uo, b, Hx.ⵠΔⵠⵠᐃ.translate.x, Hx.ⵠΔⵠⵠᐃ.translate.y + a);
      a += 70;
    } else if (Hx.ⵠΔⲆⵠ.ⲆⵠⵠⲆᐃ.x < 0.25 || Hx.ⵠΔⲆⵠ.ΔΔⲆᐃᐃⲆⵠ.x < 0.25 || Hx.ⵠΔⲆⵠ.ΔⵠⵠⵠᐃⵠⲆ.x < 0.25 || Hx.ⵠΔⲆⵠ.ⲆⲆⵠⲆⲆⲆⲆ.x < 0.25 || Hx.ⵠΔⲆⵠ.ΔᐃΔⲆⲆ.x < 0.25) {
      b = Ⲇⵠ[548];
      Gp(Uo, b, Hx.ⵠΔⵠⵠᐃ.translate.x, Hx.ⵠΔⵠⵠᐃ.translate.y + a);
      a += 70;
    }
    if (Hx.ΔΔⲆⵠΔ > 0) {
      b = Ⲇⵠ[547];
      Gp(Uo, b, Hx.ⵠΔⵠⵠᐃ.translate.x, Hx.ⵠΔⵠⵠᐃ.translate.y + a);
      var c = Vp[Hx.ΔΔⲆⵠΔ];
      if (c === undefined) {
        c = Su(ia, Hx.ΔΔⲆⵠΔ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
        Vp[Hx.ΔΔⲆⵠΔ] = c;
      }
      if (Hx.ΔΔⲆⵠΔ < 9) {
        Gp(Uo, c, Hx.ⵠΔⵠⵠᐃ.translate.x - 39, Hx.ⵠΔⵠⵠᐃ.translate.y + a + 20);
      } else {
        Gp(Uo, c, Hx.ⵠΔⵠⵠᐃ.translate.x - 46, Hx.ⵠΔⵠⵠᐃ.translate.y + a + 20);
      }
    }
  }
  function ev() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == 0) {
        this.ⵠⵠᐃ.ⲆΔᐃ = false;
      }
      var a = ia * (Ox * (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * 600);
      var b = a * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var c = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    ⵠᐃ = Ⲇⵠ[167][Gx.time];
    ⵠΔⲆ = -ⵠᐃ.width;
    Ⲇᐃⵠ = -ⵠᐃ.height;
    Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2 + b, -Ⲇᐃⵠ / 2 + c, ⵠΔⲆ, Ⲇᐃⵠ);
    if (this.lock) {
      ⵠᐃ = Ⲇⵠ[148][Gx.time];
      ⵠΔⲆ = -ⵠᐃ.width;
      Ⲇᐃⵠ = -ⵠᐃ.height;
      Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2 + b - ia * 1, -Ⲇᐃⵠ / 2 + c, ⵠΔⲆ, Ⲇᐃⵠ);
    }
    Uo.restore();
  }
  function fv(a) {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == 0) {
        this.ⵠⵠᐃ.ⲆΔᐃ = yl;
      }
      var b = Ox * (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * 600 * ia;
      var c = b * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var d = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    if (this.ⲆᐃⵠⲆᐃ.ⲆΔᐃ()) {
      this.color += 0.2 + Math.random() * 0.3;
    }
    ⵠᐃ = Ⲇⵠ[872][Math.floor(this.id + this.color) % 5][Gx.time];
    ⵠΔⲆ = this.ⲆᐃⵠⲆᐃ.ᐃⵠⲆ * -ⵠᐃ.width;
    Ⲇᐃⵠ = this.ⲆᐃⵠⲆᐃ.ᐃⵠⲆ * -ⵠᐃ.height;
    Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2 + c, -Ⲇᐃⵠ / 2 + d, ⵠΔⲆ, Ⲇᐃⵠ);
    Uo.restore();
  }
  function gv() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    ⵠᐃ = Ⲇⵠ[239][Gx.time];
    ⵠΔⲆ = -ⵠᐃ.width;
    Ⲇᐃⵠ = -ⵠᐃ.height;
    Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    Uo.restore();
  }
  function hv() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    ⵠᐃ = Ⲇⵠ[837][Gx.time];
    ⵠΔⲆ = -ⵠᐃ.width;
    Ⲇᐃⵠ = -ⵠᐃ.height;
    Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    Uo.restore();
  }
  function iv() {
    var a = Hx.ᐃΔⲆΔᐃ;
    if (a.wait) {
      var b = a.timeout.ⲆΔᐃ();
      Uo.save();
      var c = Ⲇⵠ[537];
      Uo.translate(c.width - ia * 2, Kx.ⵠΔⲆⵠ.translate.y - ia * 60);
      var d = -c.width / 2 - 2;
      var e = -c.height / 2 - 4;
      Gp(Uo, c, d, e);
      Uo.beginPath();
      Uo.lineWidth = ia * 5;
      Uo.strokeStyle = sh.ⲆᐃΔⲆΔⲆⵠ[Gx.time];
      Uo.lineCap = "round";
      Uo.arc(0, e + c.height / 2, ia * 25, 0, Math.PI * 2 * a.timeout.ᐃⵠⲆ);
      Uo.stroke();
      Uo.restore();
      if (b) {
        a.wait = false;
        a.timeout.ᐃⵠⲆ = 0;
        a.timeout.ⲆⲆⵠ = false;
      }
    }
  }
  function jv(a) {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == bn) {
        this.ⵠⵠᐃ.ⲆΔᐃ = false;
      }
      var b = ia * (Ox * (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * 600);
      var c = b * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var d = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    ⵠᐃ = Ⲇⵠ[a][Gx.time];
    ⵠΔⲆ = -ⵠᐃ.width;
    Ⲇᐃⵠ = -ⵠᐃ.height;
    Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2 + c, -Ⲇᐃⵠ / 2 + d, ⵠΔⲆ, Ⲇᐃⵠ);
    Uo.restore();
  }
  function kv() {
    var b = Hx.ΔⵠⵠⲆΔ;
    var c = Kx.ᐃⲆΔΔᐃ;
    if (b.ⲆΔᐃ) {
      b.ⲆΔᐃ = th;
      var d = b.ᐃᐃᐃΔⲆ;
      var e = c.Ⲇᐃ.width;
      var f = c.Ⲇᐃ.height;
      var i = c.Ⲇ;
      var a = Gx.ᐃⲆⵠⲆ;
      var j = Nq;
      i.clearRect(0, 0, e, f);
      i.drawImage(c.ⵠᐃ, 0, 0);
      for (var k = 0; d.length > k; k++) {
        var l = a[d[k]];
        if ((Gx.mode !== 1 || l.ΔᐃΔΔⵠ !== "spectator") && (Gx.mode !== 2 || l.ⲆΔⵠΔ !== 0)) {
          if (d[k] == Hx.id) {
            j = Mg;
            if (Gx.mode === 3 && l.ⲆΔⵠΔ === 0) {
              ᐃⲆ = "#FF0000";
            } else {
              ᐃⲆ = "#FFF";
            }
          } else if (Gx.mode === 3 && l.ⲆΔⵠΔ === 0) {
            ᐃⲆ = "#990000";
          } else {
            ᐃⲆ = "#A1BDCD";
          }
          i.drawImage(Su(ia, "" + (k + 1), ia * 15, ᐃⲆ), ia * 20, (40 + k * 22) * ia);
          if (!l.ⵠⲆΔΔⲆⵠΔ) {
            l.ⵠⲆΔΔⲆⵠΔ = Su(ia, l.ΔᐃΔΔⵠ, ia * 15, ᐃⲆ, undefined, undefined, Lk, undefined, ia * 110);
          }
          i.drawImage(l.ⵠⲆΔΔⲆⵠΔ, ia * 39, ia * (40 + k * 22));
          i.drawImage(Su(ia, ᐃⵠⵠ.ᐃΔⲆᐃᐃᐃΔ(l.ΔⲆᐃᐃᐃ), ia * 15, ᐃⲆ), ia * 156, (40 + k * 22) * ia);
        }
      }
      if (!j) {
        if (Gx.mode === 0 || Gx.mode === 3 || Gx.mode === 4 || Gx.mode === 5 || Gx.mode === 7 || Gx.mode === 1 && !Hx.ᐃᐃⲆⵠⲆᐃᐃ || Gx.mode === 2 && !Hx.ᐃΔΔⵠΔ) {
          i.drawImage(Ⲇⵠ[306], ia * 15, ia * (46 + k * 22));
          i.drawImage(Su(ia, ᐃⵠⵠ.ᐃΔⲆᐃᐃᐃΔ(Gx.ᐃⲆⵠⲆ[Hx.id].ΔⲆᐃᐃᐃ), ia * 15, "#FFF"), ia * 100, (46 + k * 22) * ia);
        }
      }
    }
    Gp(Uo, c.Ⲇᐃ, c.translate.x, c.translate.y);
  }
  function lv() {
    for (var b = Hx.ⵠᐃΔⵠ, c = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ], d = 0; d < b.ⲆᐃⵠⲆΔ.length; d++) {
      var e = b.ⲆᐃⵠⲆΔ[d];
      var f = Tn;
      if ((c = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ]) && (c.right == e.id || c.ⵠΔΔᐃⲆ == e.id && c.ⵠΔΔᐃⲆ > 0)) {
        f = Ng;
        Gp(Uo, e.info.ⵠᐃ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
      } else {
        e.ⵠᐃⲆᐃ(Uo);
      }
      var g = Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[e.id];
      if (g > 1) {
        Yp(g, e);
      }
      if (g > 0) {
        Kp(d, e, f);
      }
      var h = Hx.ΔⵠⲆⲆ;
      if (h.open && (h.id < 0 || e.id == h.id) && (!h.lock || h.ᐃⵠⲆⲆ == Hx.id)) {
        Kx.ⵠⵠⲆΔⲆ[e.id].ⵠᐃⲆᐃ(Uo);
      }
      if (Hx.ᐃⲆⲆⵠᐃ.open && e.id == 109) {
        Kx.ⵠⵠⲆΔⲆ[e.id].ⵠᐃⲆᐃ(Uo);
      }
      if (Hx.ᐃⵠⵠᐃⲆ.open && e.id == 180) {
        Kx.ⵠⵠⲆΔⲆ[e.id].ⵠᐃⲆᐃ(Uo);
      }
      if (Hx.ⲆΔⵠᐃ.open && e.id == 134) {
        Kx.ⵠⵠⲆΔⲆ[e.id].ⵠᐃⲆᐃ(Uo);
      }
      if (Hx.ⲆᐃᐃⲆ.open && e.id == 109) {
        Kx.ⵠⵠⲆΔⲆ[e.id].ⵠᐃⲆᐃ(Uo);
      }
      if (Hx.ⲆᐃᐃΔ.open && (e.id == 109 || e.id == 131)) {
        Kx.ⵠⵠⲆΔⲆ[e.id].ⵠᐃⲆᐃ(Uo);
      }
    }
    if (e && b.max > d) {
      var j = Ⲇⵠ[334][2];
      ⲆΔ = e.info.translate.x;
      ⵠᐃⵠ = e.info.translate.y;
      ᐃᐃⵠⲆ = 1;
      for (; b.max > d; d++, ᐃᐃⵠⲆ++) {
        Gp(Uo, j, ⲆΔ + (j.width + 5) * ᐃᐃⵠⲆ, ⵠᐃⵠ);
      }
    }
  }
  function mv() {
    var a = Hx.ᐃⵠΔⲆ;
    if (a.ⵠⲆⲆΔΔ) {
      var b = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
      Uo.save();
      Uo.translate(Hx.ΔΔⲆ.x + b.x, Hx.ΔΔⲆ.y + b.y);
      var c = Ⲇⵠ[324];
      var d = -c.width / 2;
      var e = -c.height / 2 - ia * 125;
      Gp(Uo, c, d, e);
      Uo.beginPath();
      Uo.lineWidth = ia * 5;
      Uo.strokeStyle = sh.ⵠᐃᐃᐃⵠⵠᐃ[Gx.time];
      Uo.lineCap = "round";
      Uo.arc(0, e + c.height / 2, ia * 25, 0, a.timeout.ᐃⵠⲆ * (Math.PI * 2));
      Uo.stroke();
      Uo.restore();
    }
  }
  var nv = 0;
  function ov() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    this.ᐃⵠⵠⵠᐃ.ⲆΔᐃ();
    ⵠᐃ = Ⲇⵠ[288][Gx.time];
    ⵠΔⲆ = -ⵠᐃ.width * this.ᐃⵠⵠⵠᐃ.ᐃⵠⲆ;
    Ⲇᐃⵠ = this.ᐃⵠⵠⵠᐃ.ᐃⵠⲆ * -ⵠᐃ.height;
    Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    this.ⲆᐃⵠⲆᐃ.ⲆΔᐃ();
    ⵠᐃ = Ⲇⵠ[289][Gx.time];
    ⵠΔⲆ = -ⵠᐃ.width * this.ⲆᐃⵠⲆᐃ.ᐃⵠⲆ;
    Ⲇᐃⵠ = this.ⲆᐃⵠⲆᐃ.ᐃⵠⲆ * -ⵠᐃ.height;
    Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    Uo.restore();
  }
  function pv() {
    this.ⵠⵠᐃΔ.ⲆΔᐃ();
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    a = this.info === 0 ? Ⲇⵠ[1042][Gx.time] : Ⲇⵠ[1044][Gx.time];
    ⵠΔⲆ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -a.width;
    Ⲇᐃⵠ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -a.height;
    Gp(Uo, a, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆΔᐃ() && N == this.ⵠⵠᐃ.ⲆⲆⵠ) {
        this.action -= 2;
      }
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      var a = Ⲇⵠ[1045];
      Gp(Uo, a, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
  }
  function qv() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == 0) {
        this.ⵠⵠᐃ.ⲆΔᐃ = N;
      }
      var a = ia * (Ox * (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * 600);
      var b = a * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var c = a * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    if (this.action == 2) {
      ⵠᐃ = Ⲇⵠ[407][Gx.time];
    } else {
      ⵠᐃ = Ⲇⵠ[119][Gx.time];
    }
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2 + b, -ⵠᐃ.height / 2 + c);
    Uo.restore();
  }
  function rv() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ᐃᐃΔⵠᐃ.length == 0 || this.ᐃᐃΔⵠᐃ[this.ᐃᐃΔⵠᐃ.length - 1] <= sh.ΔᐃᐃᐃⲆᐃⲆ)) {
      this.ᐃᐃΔⵠᐃ.push(sh.ᐃⲆⵠⵠⵠΔΔ);
    }
    for (var a = 0; a < this.ᐃᐃΔⵠᐃ.length; a++) {
      this.ᐃᐃΔⵠᐃ[a] = Math.max(0, this.ᐃᐃΔⵠᐃ[a] - Ox * sh.ⲆΔΔⲆΔᐃᐃ);
      Uo.globalAlpha = this.ᐃᐃΔⵠᐃ[a] / 1.3;
      var b = (1 - this.ᐃᐃΔⵠᐃ[a]) * 40;
      var c = (1 - this.ᐃᐃΔⵠᐃ[a]) * 35 + 10;
      bd(Uo, ia * -68 + b * Math.sin(-this.angle - Math.PI / 2), ia * -20 + Math.cos(-this.angle - Math.PI / 2) * b, c);
      hd(Uo, "#333333");
    }
    Uo.globalAlpha = 1;
    if (this.ᐃᐃΔⵠᐃ.length > 0 && this.ᐃᐃΔⵠᐃ[0] === 0) {
      this.ᐃᐃΔⵠᐃ.shift();
    }
    Uo.restore();
  }
  function sv() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    var a = ᐃⵠⵠ.ⲆⲆⲆΔ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + Ox / 2, 1.8) : Math.max(this.scale - Ox, 1);
    this.ⵠⵠᐃΔ.ⲆΔᐃ();
    this.rotate.ⲆΔᐃ();
    this.ⲆⲆᐃΔ = a < 350 ? Math.max(0, this.ⲆⲆᐃΔ - Ox * 2.2) : Math.min(1, this.ⲆⲆᐃΔ + Ox * 2.2);
    b = (this.info & 1) === 0 ? Ⲇⵠ[1113][Gx.time] : Ⲇⵠ[1114][Gx.time];
    ⵠΔⲆ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -b.width * this.scale;
    Ⲇᐃⵠ = this.scale * (-b.height * this.ⵠⵠᐃΔ.ᐃⵠⲆ);
    Uo.globalAlpha = 1 - this.ⲆⲆᐃΔ;
    Gp(Uo, b, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
    b = (this.info & 1) === 0 ? Ⲇⵠ[235][Gx.time] : Ⲇⵠ[1098][Gx.time];
    ⵠΔⲆ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -b.width * this.scale;
    Ⲇᐃⵠ = -b.height * this.ⵠⵠᐃΔ.ᐃⵠⲆ * this.scale;
    Uo.globalAlpha = this.ⲆⲆᐃΔ;
    Gp(Uo, b, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆⲆⵠ == Sq) {
        this.action -= 2;
      }
      Uo.globalAlpha = (1 - this.ⲆⲆᐃΔ) * (0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ);
      var b = Ⲇⵠ[1115];
      ⵠΔⲆ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -b.width * this.scale;
      Ⲇᐃⵠ = this.scale * (-b.height * this.ⵠⵠᐃΔ.ᐃⵠⲆ);
      Gp(Uo, b, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      Uo.globalAlpha = (0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ) * this.ⲆⲆᐃΔ;
      b = Ⲇⵠ[1107];
      ⵠΔⲆ = this.scale * (this.ⵠⵠᐃΔ.ᐃⵠⲆ * -b.width);
      Ⲇᐃⵠ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -b.height * this.scale;
      Gp(Uo, b, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      Uo.globalAlpha = 1;
    }
    b = (this.info & 1) === 0 ? Ⲇⵠ[1102][Gx.time] : Ⲇⵠ[1101][Gx.time];
    ⵠΔⲆ = this.scale * (this.ⵠⵠᐃΔ.ᐃⵠⲆ * -b.width);
    Ⲇᐃⵠ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -b.height * this.scale;
    Uo.save();
    Uo.translate(ia * -20, ia * 0);
    Uo.rotate(this.rotate.ᐃⵠⲆ);
    Uo.globalAlpha = this.ⲆⲆᐃΔ;
    Gp(Uo, b, ia * -ⵠΔⲆ / 4, ia * -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
    if (this.action & 2) {
      Uo.globalAlpha = this.ⲆⲆᐃΔ * (0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ);
      b = Ⲇⵠ[1108];
      Gp(Uo, b, -ⵠΔⲆ * ia / 4, -Ⲇᐃⵠ * ia / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
    b = this.info & 1 ? Ⲇⵠ[1104][Gx.time] : Ⲇⵠ[1105][Gx.time];
    Uo.save();
    Uo.translate(ia * 20, ia * 0);
    Uo.rotate(-this.rotate.ᐃⵠⲆ);
    Uo.globalAlpha = this.ⲆⲆᐃΔ;
    Gp(Uo, b, -ⵠΔⲆ * ia / 4, ia * -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
    if (this.action & 2) {
      Uo.globalAlpha = (0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ) * this.ⲆⲆᐃΔ;
      b = Ⲇⵠ[1109];
      Gp(Uo, b, -ⵠΔⲆ * ia / 4, -Ⲇᐃⵠ * ia / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      Uo.globalAlpha = 1;
    }
    Uo.globalAlpha = 1;
    Uo.restore();
    Uo.restore();
  }
  function tv() {
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      var a = ia * ((1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * Ox * 600);
      var b = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * a;
      var c = a * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Ox * 0.5) % (Math.PI * 2);
    }
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x + b, Hx.ΔΔⲆ.y + this.y + c);
    Uo.save();
    Uo.rotate(this.rotate);
    ⵠᐃ = Ⲇⵠ[641][Gx.time];
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Uo.restore();
    Uo.save();
    Uo.rotate(this.ⲆⵠⲆⲆᐃᐃΔᐃΔ);
    ⵠᐃ = Ⲇⵠ[642][Gx.time];
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Uo.restore();
    Uo.restore();
  }
  function uv(a, b) {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    this.ⵠⵠᐃΔ.ⲆΔᐃ();
    c = Ⲇⵠ[a][Gx.time];
    ⵠΔⲆ = -c.width * this.ⵠⵠᐃΔ.ᐃⵠⲆ;
    Ⲇᐃⵠ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -c.height;
    Gp(Uo, c, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆⲆⵠ == 0) {
        this.action -= 2;
      }
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      var c = Ⲇⵠ[b];
      Gp(Uo, c, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
  }
  function vv(f, e, i, j, k, n, a, o = 0, p) {
    for (var h = f; h <= e; h++) {
      for (var q = i; j >= q; q++) {
        var r = Dx.ᐃⲆⲆᐃ[h][q];
        if (r !== undefined && r[n] !== kl) {
          var s = r[n];
          var t = Ⲇⵠ[k][Gx.time][s.ⲆᐃⲆⲆΔⵠᐃ];
          Gp(Uo, t, Hx.ΔΔⲆ.x + s.x - t.width / (ⲆΔᐃⲆⵠ * 4), Hx.ΔΔⲆ.y + s.y - t.height / (ⲆΔᐃⲆⵠ * 4), t.width / (ⲆΔᐃⲆⵠ * 2), t.height / (ⲆΔᐃⲆⵠ * 2));
          if (Fx.ⵠⲆᐃᐃᐃ) {
            var w = 2147483648;
            var x = ((h * 1000 + q) * 1103515245 + 12345) % w / w;
            if (x < 0.2) {
              x = Math.floor(Ⲇⵠ[1025][Gx.time][s.ⲆᐃⲆⲆΔⵠᐃ].length * (x * 5));
              t = Ⲇⵠ[1025][Gx.time][s.ⲆᐃⲆⲆΔⵠᐃ][x];
              Gp(Uo, t, Hx.ΔΔⲆ.x + s.x - t.width / (ⲆΔᐃⲆⵠ * 4), Hx.ΔΔⲆ.y + s.y - t.height / (ⲆΔᐃⲆⵠ * 4), t.width / (ⲆΔᐃⲆⵠ * 2), t.height / (ⲆΔᐃⲆⵠ * 2));
            } else if (s.ᐃⲆᐃⲆⵠⵠᐃ !== 0) {
              t = Ⲇⵠ[1026][Gx.time];
              var y = (nv + h % 2 * 30) % 60;
              Uo.globalAlpha = y < 30 ? y / 30 : 1 - (y - 30) / 30;
              Gp(Uo, t, Hx.ΔΔⲆ.x + s.x - t.width / (ⲆΔᐃⲆⵠ * 4), Hx.ΔΔⲆ.y + s.y - t.height / (ⲆΔᐃⲆⵠ * 4) - 30 + y, t.width / (ⲆΔᐃⲆⵠ * 2), t.height / (ⲆΔᐃⲆⵠ * 2));
              Uo.globalAlpha = 1;
            }
          }
        }
      }
    }
  }
  function wv() {
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && Tn == this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ) {
        this.ⵠⵠᐃ.ⲆΔᐃ = Ge;
      }
      var a = Ox * (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * 600 * ia;
      var b = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * a;
      var c = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    this.ⲆΔⲆΔⲆΔᐃ = (this.ⲆΔⲆΔⲆΔᐃ + Ox * 3) % (Math.PI * 2);
    this.ⵠⵠΔⲆⵠᐃᐃ = (this.ⵠⵠΔⲆⵠᐃᐃ - Ox * 3) % (Math.PI * 2);
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x + b, Hx.ΔΔⲆ.y + this.y + c);
    Uo.save();
    Uo.rotate(this.angle);
    ⵠᐃ = Ⲇⵠ[152][Gx.time];
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Uo.restore();
    Uo.save();
    Uo.rotate(this.ⲆΔⲆΔⲆΔᐃ);
    ⵠᐃ = Ⲇⵠ[1194][Gx.time];
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Uo.restore();
    Uo.save();
    Uo.rotate(this.ⵠⵠΔⲆⵠᐃᐃ);
    ⵠᐃ = Ⲇⵠ[1193][Gx.time];
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Uo.restore();
    Uo.restore();
  }
  function xv() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    this.ⲆᐃⵠⲆᐃ.ⲆΔᐃ();
    ⵠᐃ = Ⲇⵠ[289][Gx.time];
    ⵠΔⲆ = this.ⲆᐃⵠⲆᐃ.ᐃⵠⲆ * -ⵠᐃ.width;
    Ⲇᐃⵠ = -ⵠᐃ.height * this.ⲆᐃⵠⲆᐃ.ᐃⵠⲆ;
    Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    Uo.restore();
  }
  function yv() {
    if (this.info >= 10) {
      Uo.save();
      Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
      Uo.rotate(this.angle);
      if (this.ⵠⵠᐃ.ⲆΔᐃ) {
        if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && Nq == this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ) {
          this.ⵠⵠᐃ.ⲆΔᐃ = yl;
        }
        var b = ia * (Ox * (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * 600);
        var c = b * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
        var d = b * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      this.ᐃⵠⵠⵠ.ⲆΔᐃ();
      var e = Ⲇⵠ[115][Gx.time];
      var f = -e.width * this.ᐃⵠⵠⵠ.ᐃⵠⲆ;
      var g = -e.height * this.ᐃⵠⵠⵠ.ᐃⵠⲆ;
      Gp(Uo, e, -f / 2 + c, -g / 2 + d, f, g);
      Uo.restore();
    }
  }
  function zv() {
    if (this.info >= 10) {
      Uo.save();
      Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
      Uo.rotate(this.angle);
      if (this.ⵠⵠᐃ.ⲆΔᐃ) {
        if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && Ks == this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ) {
          this.ⵠⵠᐃ.ⲆΔᐃ = false;
        }
        var b = ia * ((1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * Ox * 600);
        var c = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * b;
        var d = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      this.ᐃⵠⵠⵠ.ⲆΔᐃ();
      var e = Ⲇⵠ[206][Gx.time];
      var f = this.ᐃⵠⵠⵠ.ᐃⵠⲆ * -e.width;
      var g = this.ᐃⵠⵠⵠ.ᐃⵠⲆ * -e.height;
      Gp(Uo, e, -f / 2 + c, -g / 2 + d, f, g);
      Uo.restore();
    }
  }
  function Av() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && Fa == this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ) {
        this.ⵠⵠᐃ.ⲆΔᐃ = false;
      }
      var b = ia * (Ox * (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * 600);
      var c = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * b;
      var d = b * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Uo.rotate(this.angle);
      this.ᐃⵠⵠⵠ.ⲆΔᐃ();
      if (this.info & 16) {
        var f = Ⲇⵠ[849][Gx.time];
      } else {
        f = Ⲇⵠ[193][Gx.time];
      }
      var g = this.ᐃⵠⵠⵠ.ᐃⵠⲆ * -f.width;
      var a = -f.height * this.ᐃⵠⵠⵠ.ᐃⵠⲆ;
      Gp(Uo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = Ⲇⵠ[869][Gx.time];
      } else {
        f = Ⲇⵠ[194][Gx.time];
      }
      Uo.translate(0, f.height / 2);
      Gp(Uo, f, c - f.width / 2, -f.height + d);
    }
    Uo.restore();
  }
  function Bv() {
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == Kr) {
        this.ⵠⵠᐃ.ⲆΔᐃ = I;
      }
      var a = Ox * (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * 600 * ia;
      var b = a * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var c = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Uo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Uo.translate(Hx.ΔΔⲆ.x + this.x + b, Hx.ΔΔⲆ.y + this.y + c);
    Uo.rotate(this.angle);
    ⵠᐃ = Ⲇⵠ[157][Gx.time];
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Ox * 3) % (Math.PI * 2);
    }
    Uo.rotate(this.rotate);
    ⵠᐃ = Ⲇⵠ[1214][Gx.time];
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Uo.restore();
  }
  function Cv() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    if (ᐃⵠⵠ.ⲆⲆⲆΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Ox / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Ox, 1);
    }
    this.ⵠⵠᐃΔ.ⲆΔᐃ();
    this.rotate.ⲆΔᐃ();
    a = this.info === 0 ? Ⲇⵠ[232][Gx.time] : Ⲇⵠ[1068][Gx.time];
    ⵠΔⲆ = -a.width * this.ⵠⵠᐃΔ.ᐃⵠⲆ * this.scale;
    Ⲇᐃⵠ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -a.height * this.scale;
    Gp(Uo, a, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆⲆⵠ == 0) {
        this.action -= 2;
      }
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      var a = Ⲇⵠ[1077];
      Gp(Uo, a, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      Uo.globalAlpha = 1;
    }
    a = this.info === 0 ? Ⲇⵠ[1072][Gx.time] : Ⲇⵠ[1071][Gx.time];
    ⵠΔⲆ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -a.width * this.scale;
    Ⲇᐃⵠ = this.scale * (-a.height * this.ⵠⵠᐃΔ.ᐃⵠⲆ);
    Uo.save();
    Uo.translate(ia * -40, ia * 10);
    Uo.rotate(this.rotate.ᐃⵠⲆ);
    Gp(Uo, a, ia * -ⵠΔⲆ / 4, -Ⲇᐃⵠ * ia / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
    if (this.action & 2) {
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      a = Ⲇⵠ[1078];
      Gp(Uo, a, ia * -ⵠΔⲆ / 4, ia * -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
    a = this.info === 0 ? Ⲇⵠ[1075][Gx.time] : Ⲇⵠ[1074][Gx.time];
    Uo.save();
    Uo.translate(ia * 40, ia * 10);
    Uo.rotate(-this.rotate.ᐃⵠⲆ);
    Gp(Uo, a, ia * -ⵠΔⲆ / 4, ia * -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
    if (this.action & 2) {
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      a = Ⲇⵠ[1079];
      Gp(Uo, a, -ⵠΔⲆ * ia / 4, ia * -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
    Uo.restore();
  }
  function Dv() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    this.ⲆᐃⵠⲆᐃ.ⲆΔᐃ();
    ⵠᐃ = Ⲇⵠ[1192][Gx.time];
    ⵠΔⲆ = this.ⲆᐃⵠⲆᐃ.ᐃⵠⲆ * -ⵠᐃ.width;
    Ⲇᐃⵠ = this.ⲆᐃⵠⲆᐃ.ᐃⵠⲆ * -ⵠᐃ.height;
    Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    Uo.restore();
  }
  function Ev() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ⵠⵠᐃΔ.ⲆΔᐃ();
    this.ΔⵠᐃᐃⲆⲆⵠ.ⲆΔᐃ();
    this.ⵠΔⲆΔⲆⵠⲆ.ⲆΔᐃ();
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    c = this.info === 0 ? Ⲇⵠ[887][Gx.time] : Ⲇⵠ[886][Gx.time];
    ⵠΔⲆ = -c.width * this.ⵠⵠᐃΔ.ᐃⵠⲆ;
    Ⲇᐃⵠ = -c.height * this.ⵠⵠᐃΔ.ᐃⵠⲆ;
    Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆΔᐃ() && $g == this.ⵠⵠᐃ.ⲆⲆⵠ) {
        this.action -= 2;
      }
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      var c = Ⲇⵠ[888];
      Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ⲆᐃⵠΔⲆ.ⲆΔᐃ() && cs == this.ⲆᐃⵠΔⲆ.ⲆⲆⵠ) {
        this.action -= 4;
      }
      Uo.globalAlpha = 0.6 - this.ⲆᐃⵠΔⲆ.ᐃⵠⲆ;
      c = Ⲇⵠ[891];
      Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle + b);
    Uo.translate(55, 0);
    Uo.rotate(a);
    c = this.info === 0 ? Ⲇⵠ[894][Gx.time] : Ⲇⵠ[896][Gx.time];
    ⵠΔⲆ = this.ΔⵠᐃᐃⲆⲆⵠ.ᐃⵠⲆ * -c.width;
    Ⲇᐃⵠ = -c.height * this.ΔⵠᐃᐃⲆⲆⵠ.ᐃⵠⲆ;
    Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    if (this.action & 2) {
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      c = Ⲇⵠ[889];
      Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Uo.globalAlpha = 0.6 - this.ⲆᐃⵠΔⲆ.ᐃⵠⲆ;
      c = Ⲇⵠ[892];
      Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle + a + b);
    Uo.translate(55, 0);
    Uo.rotate(a);
    c = this.info === 0 ? Ⲇⵠ[895][Gx.time] : Ⲇⵠ[897][Gx.time];
    ⵠΔⲆ = -c.width * this.ⵠΔⲆΔⲆⵠⲆ.ᐃⵠⲆ;
    Ⲇᐃⵠ = this.ⵠΔⲆΔⲆⵠⲆ.ᐃⵠⲆ * -c.height;
    Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    if (this.action & 2) {
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      c = Ⲇⵠ[890];
      Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Uo.globalAlpha = 0.6 - this.ⲆᐃⵠΔⲆ.ᐃⵠⲆ;
      c = Ⲇⵠ[893];
      Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
  }
  function Fv(a, b) {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    this.ⵠⵠᐃΔ.ⲆΔᐃ();
    c = Ⲇⵠ[a][Gx.time];
    ⵠΔⲆ = -c.width * this.ⵠⵠᐃΔ.ᐃⵠⲆ;
    Ⲇᐃⵠ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -c.height;
    Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆⲆⵠ == 0) {
        this.action -= 2;
      }
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      var c = Ⲇⵠ[b];
      Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
  }
  function Gv(a, b, c) {
    if (a >= 0) {
      ⵠᐃ = Ⲇⵠ[a][Gx.time];
      switch (a) {
        case 71:
        case 72:
        case 73:
          Kw(a, ⵠᐃ, -ⵠᐃ.width / 4 - ia * (0 + b), -ⵠᐃ.height / 4 + (c + 35) * ia);
          break;
        case 74:
          Kw(a, ⵠᐃ, -ⵠᐃ.width / 4 - ia * (1 + b), -ⵠᐃ.height / 4 + (c + 45) * ia);
          break;
        case 75:
        case 76:
          Kw(a, ⵠᐃ, -ⵠᐃ.width / 4 - ia * (1 + b), -ⵠᐃ.height / 4 + ia * (c + 40));
      }
    }
  }
  function Hv() {
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == bn) {
        this.ⵠⵠᐃ.ⲆΔᐃ = false;
      }
      var a = ia * (Ox * (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * 600);
      var b = a * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var c = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Uo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Uo.translate(Hx.ΔΔⲆ.x + this.x + b, Hx.ΔΔⲆ.y + this.y + c);
    Uo.rotate(this.angle);
    ⵠᐃ = Ⲇⵠ[154][Gx.time];
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Ox * 3) % (Math.PI * 2);
    }
    Uo.rotate(this.rotate);
    ⵠᐃ = Ⲇⵠ[1202][Gx.time];
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Uo.restore();
  }
  function Iv() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == Ge) {
        this.ⵠⵠᐃ.ⲆΔᐃ = Ge;
      }
      var a = ia * (Ox * (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * 600);
      var b = a * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var c = a * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    if (this.info === 0) {
      ⵠᐃ = Ⲇⵠ[183][Gx.time];
    } else {
      ⵠᐃ = Ⲇⵠ[802][Gx.time][this.info - 1];
    }
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2 + b, -ⵠᐃ.height / 2 + c);
    Uo.restore();
  }
  function Jv() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && Mo == this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ) {
        this.ⵠⵠᐃ.ⲆΔᐃ = Sq;
      }
      var b = ia * ((1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * Ox * 600);
      var c = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * b;
      var d = b * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Uo.rotate(this.angle);
      this.ᐃⵠⵠⵠ.ⲆΔᐃ();
      if (this.info & 16) {
        var f = Ⲇⵠ[668][Gx.time];
      } else {
        f = Ⲇⵠ[132][Gx.time];
      }
      var g = this.ᐃⵠⵠⵠ.ᐃⵠⲆ * -f.width;
      var a = -f.height * this.ᐃⵠⵠⵠ.ᐃⵠⲆ;
      Gp(Uo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      this.ΔⵠᐃᐃⵠⲆΔ.ⲆΔᐃ();
      if (this.info & 16) {
        f = Ⲇⵠ[638][Gx.time];
      } else {
        f = Ⲇⵠ[134][Gx.time];
      }
      Uo.translate(0, f.height / 2);
      Uo.rotate(this.ΔⵠᐃᐃⵠⲆΔ.ᐃⵠⲆ);
      Gp(Uo, f, c - f.width / 2, -f.height + d);
    }
    Uo.restore();
  }
  function Kv() {
    if (this.info !== 10) {
      for (var b = this.info & 15, c = 0; c < b; c++) {
        this.ⵠⵠⵠᐃ[c].ⵠᐃⲆᐃ(207, this.x, this.y);
      }
      Uo.save();
      Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
      Uo.rotate(this.angle);
      if (this.ⵠⵠᐃ.ⲆΔᐃ) {
        if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == 0) {
          this.ⵠⵠᐃ.ⲆΔᐃ = yl;
        }
        var d = ia * (Ox * (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * 600);
        var e = d * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
        var f = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * d;
      } else {
        e = 0;
        f = 0;
      }
      if (this.info & 16) {
        var g = Ⲇⵠ[958][Gx.time];
      } else {
        g = Ⲇⵠ[957][Gx.time];
      }
      Gp(Uo, g, -g.width / 2 + e, -g.width / 2 + f);
      Uo.restore();
    }
  }
  function Lv() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    var a = ᐃⵠⵠ.ⲆⲆⲆΔ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + Ox / 2, 1.8) : Math.max(this.scale - Ox, 1);
    this.ⵠⵠᐃΔ.ⲆΔᐃ();
    this.rotate.ⲆΔᐃ();
    this.ⲆⲆᐃΔ = a < 350 ? Math.max(0, this.ⲆⲆᐃΔ - Ox * 2.2) : Math.min(1, this.ⲆⲆᐃΔ + Ox * 2.2);
    b = Ⲇⵠ[1135][Gx.time];
    ⵠΔⲆ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -b.width * this.scale;
    Ⲇᐃⵠ = this.scale * (-b.height * this.ⵠⵠᐃΔ.ᐃⵠⲆ);
    Uo.globalAlpha = 1 - this.ⲆⲆᐃΔ;
    Gp(Uo, b, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
    b = Ⲇⵠ[1119][Gx.time];
    ⵠΔⲆ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -b.width * this.scale;
    Ⲇᐃⵠ = this.scale * (-b.height * this.ⵠⵠᐃΔ.ᐃⵠⲆ);
    Uo.globalAlpha = this.ⲆⲆᐃΔ;
    Gp(Uo, b, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆⲆⵠ == Mo) {
        this.action -= 2;
      }
      Uo.globalAlpha = (1 - this.ⲆⲆᐃΔ) * (0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ);
      var b = Ⲇⵠ[1136];
      ⵠΔⲆ = this.scale * (this.ⵠⵠᐃΔ.ᐃⵠⲆ * -b.width);
      Ⲇᐃⵠ = this.scale * (-b.height * this.ⵠⵠᐃΔ.ᐃⵠⲆ);
      Gp(Uo, b, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      Uo.globalAlpha = this.ⲆⲆᐃΔ * (0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ);
      b = Ⲇⵠ[1128];
      ⵠΔⲆ = this.scale * (this.ⵠⵠᐃΔ.ᐃⵠⲆ * -b.width);
      Ⲇᐃⵠ = -b.height * this.ⵠⵠᐃΔ.ᐃⵠⲆ * this.scale;
      Gp(Uo, b, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      Uo.globalAlpha = 1;
    }
    b = Ⲇⵠ[1122][Gx.time];
    ⵠΔⲆ = -b.width * this.ⵠⵠᐃΔ.ᐃⵠⲆ * this.scale;
    Ⲇᐃⵠ = this.scale * (this.ⵠⵠᐃΔ.ᐃⵠⲆ * -b.height);
    Uo.save();
    Uo.translate(ia * -40, ia * 80);
    Uo.rotate(this.rotate.ᐃⵠⲆ);
    Uo.globalAlpha = this.ⲆⲆᐃΔ;
    Gp(Uo, b, ia * -ⵠΔⲆ / 4, -Ⲇᐃⵠ * ia / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
    if (this.action & 2) {
      Uo.globalAlpha = (0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ) * this.ⲆⲆᐃΔ;
      b = Ⲇⵠ[1129];
      Gp(Uo, b, ia * -ⵠΔⲆ / 4, -Ⲇᐃⵠ * ia / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
    b = Ⲇⵠ[1125][Gx.time];
    Uo.save();
    Uo.translate(ia * 40, ia * 80);
    Uo.rotate(-this.rotate.ᐃⵠⲆ);
    Uo.globalAlpha = this.ⲆⲆᐃΔ;
    Gp(Uo, b, -ⵠΔⲆ * ia / 4, -Ⲇᐃⵠ * ia / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
    if (this.action & 2) {
      Uo.globalAlpha = this.ⲆⲆᐃΔ * (0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ);
      b = Ⲇⵠ[1130];
      Gp(Uo, b, ia * -ⵠΔⲆ / 4, -Ⲇᐃⵠ * ia / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      Uo.globalAlpha = 1;
    }
    Uo.globalAlpha = 1;
    Uo.restore();
    Uo.restore();
  }
  function Mv(a, b) {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    c = Ⲇⵠ[a][Gx.time];
    ⵠΔⲆ = -c.width;
    Ⲇᐃⵠ = -c.height;
    Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆⲆⵠ == $g) {
        this.action -= 2;
      }
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      var c = Ⲇⵠ[b];
      Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
  }
  function Nv(a, b) {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    if (a === 854) {
      a = 250;
      this.info = 36;
    }
    ⵠᐃ = Ⲇⵠ[a][this.info][Gx.time];
    ⵠΔⲆ = -ⵠᐃ.width / 2;
    Ⲇᐃⵠ = -ⵠᐃ.height / 2;
    Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆΔᐃ() && cs == this.ⵠⵠᐃ.ⲆⲆⵠ) {
        this.action -= 2;
      }
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      var c = rw(this.info, ⵠᐃ, ᐃⵠᐃΔⵠᐃᐃⵠΔ);
      Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
  }
  function Ov() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == 0) {
        this.ⵠⵠᐃ.ⲆΔᐃ = false;
      }
      var b = (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * Ox * 600 * ia;
      var c = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * b;
      var d = b * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
      e = Ⲇⵠ[716][Gx.time];
      Gp(Uo, e, -e.width / 2 + c, -e.height / 2 + d);
      this.up.ⲆΔᐃ();
      var e = Ⲇⵠ[720][Gx.time];
      var f = this.up.ᐃⵠⲆ * -e.width;
      var g = -e.height * this.up.ᐃⵠⲆ;
      Gp(Uo, e, -f / 2 + ia * 1, -g / 2 + ia * 3, f, g);
    } else {
      e = Ⲇⵠ[144][Gx.time];
      Gp(Uo, e, -e.width / 2 + c, -e.height / 2 + d);
    }
    Uo.restore();
  }
  function Pv() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    this.ᐃⲆⲆᐃΔⵠΔ = Math.min(1, this.ᐃⲆⲆᐃΔⵠΔ + Ox * 2);
    Uo.globalAlpha = Math.min(1, Math.max(0, ᐃⵠⵠ.ⲆⲆⲆΔ(this, this.r) / 80)) * this.ᐃⲆⲆᐃΔⵠΔ;
    this.ⵠⵠᐃΔ.ⲆΔᐃ();
    ⵠᐃ = Ⲇⵠ[247][Gx.time][this.ⲆΔᐃⵠᐃ];
    if (this.ⲆΔᐃⵠᐃ < 2) {
      ⵠΔⲆ = -ⵠᐃ.width * this.ⵠⵠᐃΔ.ᐃⵠⲆ;
      Ⲇᐃⵠ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -ⵠᐃ.height;
    } else if (this.ΔᐃᐃᐃⲆⵠⵠ === 0) {
      ⵠΔⲆ = -ⵠᐃ.width;
      Ⲇᐃⵠ = -ⵠᐃ.height;
    } else {
      ⵠΔⲆ = -ⵠᐃ.width * 1.35;
      Ⲇᐃⵠ = -ⵠᐃ.height * 1.35;
    }
    Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    Uo.globalAlpha = 1;
    Uo.restore();
  }
  function Qv(a) {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    this.ⵠⵠᐃΔ.ⲆΔᐃ();
    ⵠᐃ = Ⲇⵠ[a][Gx.time];
    ⵠΔⲆ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -ⵠᐃ.width;
    Ⲇᐃⵠ = -ⵠᐃ.height * this.ⵠⵠᐃΔ.ᐃⵠⲆ;
    Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    Uo.restore();
  }
  function Rv() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    if (ᐃⵠⵠ.ⲆⲆⲆΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Ox / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Ox, 1);
    }
    this.ⵠⵠᐃΔ.ⲆΔᐃ();
    this.rotate.ⲆΔᐃ();
    a = Ⲇⵠ[449][Gx.time];
    ⵠΔⲆ = this.scale * (this.ⵠⵠᐃΔ.ᐃⵠⲆ * -a.width);
    Ⲇᐃⵠ = -a.height * this.ⵠⵠᐃΔ.ᐃⵠⲆ * this.scale;
    Gp(Uo, a, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆⲆⵠ == 0) {
        this.action -= 2;
      }
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      var a = Ⲇⵠ[463];
      Gp(Uo, a, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    a = Ⲇⵠ[451][Gx.time];
    ⵠΔⲆ = -a.width * this.ⵠⵠᐃΔ.ᐃⵠⲆ * this.scale;
    Ⲇᐃⵠ = this.scale * (-a.height * this.ⵠⵠᐃΔ.ᐃⵠⲆ);
    Uo.save();
    Uo.translate(ia * -30, ia * 70);
    Uo.rotate(this.rotate.ᐃⵠⲆ);
    Gp(Uo, a, ia * -10, ia * -40, ⵠΔⲆ, Ⲇᐃⵠ);
    if (this.action & 2) {
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      a = Ⲇⵠ[466];
      Gp(Uo, a, ia * -10, ia * -40, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
    a = Ⲇⵠ[452][Gx.time];
    Uo.save();
    Uo.translate(ia * 30, ia * 70);
    Uo.rotate(-this.rotate.ᐃⵠⲆ);
    Gp(Uo, a, ia * 10 - ⵠΔⲆ, ia * -40, ⵠΔⲆ, Ⲇᐃⵠ);
    if (this.action & 2) {
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      a = Ⲇⵠ[467];
      Gp(Uo, a, ia * 10 - ⵠΔⲆ, ia * -40, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
    Uo.restore();
  }
  function Sv() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    if (ᐃⵠⵠ.ⲆⲆⲆΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Ox / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Ox, 1);
    }
    this.ⵠⵠᐃΔ.ⲆΔᐃ();
    this.rotate.ⲆΔᐃ();
    a = Ⲇⵠ[450][Gx.time];
    ⵠΔⲆ = -a.width * this.ⵠⵠᐃΔ.ᐃⵠⲆ * this.scale;
    Ⲇᐃⵠ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -a.height * this.scale;
    Gp(Uo, a, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆⲆⵠ == 0) {
        this.action -= 2;
      }
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      var a = Ⲇⵠ[464];
      Gp(Uo, a, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      Uo.globalAlpha = 1;
    }
    a = Ⲇⵠ[453][Gx.time];
    ⵠΔⲆ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -a.width * this.scale;
    Ⲇᐃⵠ = this.scale * (this.ⵠⵠᐃΔ.ᐃⵠⲆ * -a.height);
    Uo.save();
    Uo.translate(ia * -60, ia * 20);
    Uo.rotate(this.rotate.ᐃⵠⲆ);
    Gp(Uo, a, -ⵠΔⲆ * ia / 4, -Ⲇᐃⵠ * ia / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
    if (this.action & 2) {
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      a = Ⲇⵠ[468];
      Gp(Uo, a, -ⵠΔⲆ * ia / 4, -Ⲇᐃⵠ * ia / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
    a = Ⲇⵠ[454][Gx.time];
    Uo.save();
    Uo.translate(ia * 60, ia * 20);
    Uo.rotate(-this.rotate.ᐃⵠⲆ);
    Gp(Uo, a, ia * -ⵠΔⲆ / 4, -Ⲇᐃⵠ * ia / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
    if (this.action & 2) {
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      a = Ⲇⵠ[469];
      Gp(Uo, a, ia * -ⵠΔⲆ / 4, ia * -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
    Uo.restore();
  }
  function Tv() {
    if (~this.info & 1) {
      this.ᐃᐃΔΔⵠ = Math.max(this.ᐃᐃΔΔⵠ - Ox, 0);
      this.ⵠΔΔᐃⵠⵠⲆ += Ox;
      if (this.ⵠΔΔᐃⵠⵠⲆ > 0.1) {
        this.ⵠΔΔᐃⵠⵠⲆ = 0;
        var a = {
          x: this.x + Math.random() * 60 - 30,
          y: this.y + Math.random() * 60 - 30,
          a: 0,
          r: Math.random() * 30 + 30
        };
        this.ᐃⵠⵠⵠ.push(a);
      }
    } else {
      this.ᐃᐃΔΔⵠ = Math.min(this.ᐃᐃΔΔⵠ + Ox, 2.2);
    }
    for (var b = 0; this.ᐃⵠⵠⵠ.length > b; b++) {
      a = this.ᐃⵠⵠⵠ[b];
      Uo.save();
      Uo.translate(Hx.ΔΔⲆ.x + a.x, Hx.ΔΔⲆ.y + a.y);
      a.a = Math.min(1, 0 + Ox / 2);
      var c = 0;
      if (c < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      Uo.globalAlpha = c * 0.8;
      bd(Uo, 0, 0, a.r);
      hd(Uo, sh.ᐃᐃⵠⲆᐃΔᐃ[Gx.time]);
      Uo.restore();
      if (0 === 1) {
        this.ᐃⵠⵠⵠ.splice(b, 1);
        b--;
      }
    }
  }
  function Uv(a, b, c) {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + b, Hx.ΔΔⲆ.y + c);
    Uo.rotate(this.angle);
    Uo.translate(this.x - b, this.y - c);
    this.ⵠⵠᐃΔ.ⲆΔᐃ();
    ⵠᐃ = Ⲇⵠ[a][Gx.time];
    ⵠΔⲆ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -ⵠᐃ.width;
    Ⲇᐃⵠ = -ⵠᐃ.height * this.ⵠⵠᐃΔ.ᐃⵠⲆ;
    Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    Uo.restore();
  }
  function Vv() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == 0) {
        this.ⵠⵠᐃ.ⲆΔᐃ = false;
      }
      var b = Ox * (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * 600 * ia;
      var c = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * b;
      var d = b * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Uo.rotate(this.angle);
      this.ᐃⵠⵠⵠ.ⲆΔᐃ();
      if (this.info & 16) {
        var f = Ⲇⵠ[953][Gx.time];
      } else {
        f = Ⲇⵠ[204][Gx.time];
      }
      var g = -f.width * this.ᐃⵠⵠⵠ.ᐃⵠⲆ;
      var a = this.ᐃⵠⵠⵠ.ᐃⵠⲆ * -f.height;
      Gp(Uo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = Ⲇⵠ[954][Gx.time];
      } else {
        f = Ⲇⵠ[205][Gx.time];
      }
      Uo.translate(0, f.height / 2);
      Gp(Uo, f, c - f.width / 2, -f.height + d);
    }
    Uo.restore();
  }
  function Wv() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ⵠⵠᐃΔ.ⲆΔᐃ();
    this.ΔⵠᐃᐃⲆⲆⵠ.ⲆΔᐃ();
    this.ⵠΔⲆΔⲆⵠⲆ.ⲆΔᐃ();
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    c = this.info === 0 ? Ⲇⵠ[231][Gx.time] : Ⲇⵠ[1053][Gx.time];
    ⵠΔⲆ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -c.width;
    Ⲇᐃⵠ = -c.height * this.ⵠⵠᐃΔ.ᐃⵠⲆ;
    Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆΔᐃ() && Nh == this.ⵠⵠᐃ.ⲆⲆⵠ) {
        this.action -= 2;
      }
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      var c = Ⲇⵠ[1056];
      Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ⲆᐃⵠΔⲆ.ⲆΔᐃ() && this.ⲆᐃⵠΔⲆ.ⲆⲆⵠ == N) {
        this.action -= 4;
      }
      Uo.globalAlpha = 0.6 - this.ⲆᐃⵠΔⲆ.ᐃⵠⲆ;
      c = Ⲇⵠ[1065];
      Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle + b);
    Uo.translate(100, 0);
    Uo.rotate(a);
    c = this.info === 0 ? Ⲇⵠ[1060][Gx.time] : Ⲇⵠ[1059][Gx.time];
    ⵠΔⲆ = -c.width * this.ΔⵠᐃᐃⲆⲆⵠ.ᐃⵠⲆ;
    Ⲇᐃⵠ = this.ΔⵠᐃᐃⲆⲆⵠ.ᐃⵠⲆ * -c.height;
    Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    if (this.action & 2) {
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      c = Ⲇⵠ[1057];
      Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Uo.globalAlpha = 0.6 - this.ⲆᐃⵠΔⲆ.ᐃⵠⲆ;
      c = Ⲇⵠ[1066];
      Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle + a + b);
    Uo.translate(100, 0);
    Uo.rotate(a);
    c = this.info === 0 ? Ⲇⵠ[1063][Gx.time] : Ⲇⵠ[1062][Gx.time];
    ⵠΔⲆ = -c.width * this.ⵠΔⲆΔⲆⵠⲆ.ᐃⵠⲆ;
    Ⲇᐃⵠ = -c.height * this.ⵠΔⲆΔⲆⵠⲆ.ᐃⵠⲆ;
    Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    if (this.action & 2) {
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      c = Ⲇⵠ[1058];
      Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Uo.globalAlpha = 0.6 - this.ⲆᐃⵠΔⲆ.ᐃⵠⲆ;
      c = Ⲇⵠ[1067];
      Gp(Uo, c, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
  }
  function Xv() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && Ge == this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ) {
        this.ⵠⵠᐃ.ⲆΔᐃ = false;
      }
      var b = ia * ((1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * Ox * 600);
      var c = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * b;
      var d = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Uo.rotate(this.angle);
      this.ᐃⵠⵠⵠ.ⲆΔᐃ();
      if (this.info & 16) {
        var f = Ⲇⵠ[812][Gx.time];
      } else {
        f = Ⲇⵠ[188][Gx.time];
      }
      var g = this.ᐃⵠⵠⵠ.ᐃⵠⲆ * -f.width;
      var a = -f.height * this.ᐃⵠⵠⵠ.ᐃⵠⲆ;
      Gp(Uo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = Ⲇⵠ[813][Gx.time];
      } else {
        f = Ⲇⵠ[189][Gx.time];
      }
      Uo.translate(0, f.height / 2);
      Gp(Uo, f, c - f.width / 2, -f.height + d);
    }
    Uo.restore();
  }
  function Yv() {
    var a = undefined;
    var b = undefined;
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    this.ⵠⵠᐃΔ.ⲆΔᐃ();
    this.rotate.ⲆΔᐃ();
    if (this.ᐃᐃΔΔⵠ >= 0.1 && this.ᐃᐃΔΔⵠ <= 1.1) {
      if ((c = Math.max(0, Math.min(1, this.ᐃᐃΔΔⵠ - 0.1))) < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      a = Ⲇⵠ[1150][Gx.time];
      ⵠΔⲆ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -a.width;
      Ⲇᐃⵠ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -a.height;
      Uo.globalAlpha = c;
      Gp(Uo, a, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      b = Ⲇⵠ[1151];
    }
    if (this.ᐃᐃΔΔⵠ >= 0.9) {
      var c;
      if ((c = Math.max(0, Math.min(1, this.ᐃᐃΔΔⵠ - 0.9))) < 0.2) {
        c *= 5;
      } else {
        c = 1;
      }
      a = Ⲇⵠ[1152][Gx.time];
      ⵠΔⲆ = -a.width * this.ⵠⵠᐃΔ.ᐃⵠⲆ;
      Ⲇᐃⵠ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -a.height;
      Uo.globalAlpha = c;
      Gp(Uo, a, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      b = Ⲇⵠ[1153];
    }
    if (this.action & 2 && b !== Wg) {
      if (this.ⵠⵠᐃ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆⲆⵠ == Ks) {
        this.action -= 2;
      }
      Uo.globalAlpha = (0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ) * c;
      ⵠΔⲆ = this.ⵠⵠᐃΔ.ᐃⵠⲆ * -b.width;
      Ⲇᐃⵠ = -b.height * this.ⵠⵠᐃΔ.ᐃⵠⲆ;
      Gp(Uo, b, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
    }
    Uo.globalAlpha = 1;
    Uo.restore();
  }
  function Zv(a, b, c) {
    if (a >= 0) {
      ⵠᐃ = Ⲇⵠ[a][Gx.time];
      switch (a) {
        case 1:
        case 3:
        case 4:
        case 8:
        case 31:
        case 32:
          Ow(a, ⵠᐃ, -ⵠᐃ.width / 2 - ia * (45 + b), -ⵠᐃ.height / 2 + ia * (c + 22));
          break;
        case 94:
        case 95:
        case 96:
        case 97:
          Kw(a, ⵠᐃ, -ⵠᐃ.width / 4 - (52 + b) * ia, -ⵠᐃ.height / 4 + (c + 20) * ia);
          break;
        case 98:
        case 99:
          Kw(a, ⵠᐃ, -ⵠᐃ.width / 4 - (57 + b) * ia, -ⵠᐃ.height / 4 + (c + 20) * ia);
          break;
        case 57:
        case 0:
        case 5:
        case 6:
          Kw(a, ⵠᐃ, -ⵠᐃ.width / 4 - ia * (47 + b), -ⵠᐃ.height / 4 + ia * (c + 45));
          break;
        case 30:
          Kw(a, ⵠᐃ, -ⵠᐃ.width / 4 - (52 + b) * ia, -ⵠᐃ.height / 4 + ia * (c + 45));
          break;
        case 19:
          Kw(a, ⵠᐃ, -ⵠᐃ.width / 4 - ia * (47 + b), -ⵠᐃ.height / 4 + ia * (c + 44));
          break;
        case 9:
          Ow(a, ⵠᐃ, -ⵠᐃ.width / 2 - ia * (47 + b), -ⵠᐃ.height / 2 + (c + 44) * ia);
          break;
        case 62:
          Ow(a, ⵠᐃ, -ⵠᐃ.width / 2 - ia * (40 + b), -ⵠᐃ.height / 2 + ia * (c + 65));
          break;
        case 12:
          Kw(a, ⵠᐃ, -ⵠᐃ.width / 4 - ia * (37 + b), -ⵠᐃ.height / 4 + ia * (c + 85));
          break;
        case 34:
          Kw(a, ⵠᐃ, -ⵠᐃ.width / 4 - ia * (37 + b), -ⵠᐃ.height / 4 + ia * (c + 85));
          break;
        case 54:
        case 53:
          Kw(a, ⵠᐃ, -ⵠᐃ.width / 4 - ia * (26 + b), -ⵠᐃ.height / 4 + (c + 77) * ia);
          break;
        case 17:
          Kw(a, ⵠᐃ, -ⵠᐃ.width / 4 - ia * (37 + b), -ⵠᐃ.height / 4 + ia * (c + 85));
          break;
        case 63:
          Kw(a, ⵠᐃ, -ⵠᐃ.width / 4 - ia * (47 + b), -ⵠᐃ.height / 4 + ia * (c + 44));
          break;
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
          Kw(a, ⵠᐃ, -ⵠᐃ.width / 4 - ia * (37 + b), -ⵠᐃ.height / 4 + ia * (c + 30));
          break;
        case 56:
          Kw(a, ⵠᐃ, -ⵠᐃ.width / 4 - (47 + b) * ia, -ⵠᐃ.height / 4 + (c + 35) * ia);
          break;
        case 92:
        case 93:
          Kw(a, ⵠᐃ, -ⵠᐃ.width / 4 - ia * (47 + b), -ⵠᐃ.height / 4 + (c + 40) * ia);
          break;
        case 89:
          Kw(a, ⵠᐃ, -ⵠᐃ.width / 4 - ia * (47 + b), -ⵠᐃ.height / 4 + ia * (c + 34));
          break;
        case 13:
        case 14:
        case 15:
        case 33:
          Kw(a, ⵠᐃ, -ⵠᐃ.width / 4 - (37 + b) * ia, -ⵠᐃ.height / 4 + ia * (c + 90));
          break;
        case 18:
          Kw(a, ⵠᐃ, -ⵠᐃ.width / 4 - ia * (40 + b), -ⵠᐃ.height / 4 + (c + 85) * ia);
          break;
        case 16:
          Ow(a, ⵠᐃ, -ⵠᐃ.width / 2 - (39 + b) * ia, -ⵠᐃ.height / 2 + (c + 90) * ia);
          break;
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 45:
          Ow(a, ⵠᐃ, -ⵠᐃ.width / 2 - (46 + b) * ia, -ⵠᐃ.height / 2 + (c + 35) * ia);
          break;
        case 49:
          Ow(a, ⵠᐃ, -ⵠᐃ.width / 2 - (47 + b) * ia, -ⵠᐃ.height / 2 + ia * (c + 54));
          break;
        case 46:
        case 50:
        case 51:
        case 52:
          Ow(a, ⵠᐃ, -ⵠᐃ.width / 2 - (46 + b) * ia, -ⵠᐃ.height / 2 + (c + 35) * ia);
          break;
        case 55:
          Ow(a, ⵠᐃ, -ⵠᐃ.width / 2 - (47 + b) * ia, -ⵠᐃ.height / 2 + ia * (c + 20));
      }
    }
  }
  function $v() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && Nq == this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ) {
        this.ⵠⵠᐃ.ⲆΔᐃ = false;
      }
      var b = (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * Ox * 600 * ia;
      var c = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * b;
      var d = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Uo.rotate(this.angle);
      this.ᐃⵠⵠⵠ.ⲆΔᐃ();
      if (this.info & 16) {
        var f = Ⲇⵠ[838][Gx.time];
      } else {
        f = Ⲇⵠ[191][Gx.time];
      }
      var g = -f.width * this.ᐃⵠⵠⵠ.ᐃⵠⲆ;
      var a = this.ᐃⵠⵠⵠ.ᐃⵠⲆ * -f.height;
      Gp(Uo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = Ⲇⵠ[839][Gx.time];
      } else {
        f = Ⲇⵠ[192][Gx.time];
      }
      Uo.translate(0, f.height / 2);
      Gp(Uo, f, c - f.width / 2, -f.height + d);
    }
    Uo.restore();
  }
  function _v(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function aw(a) {
    return bj.String.fromCharCode(a);
  }
  function bw() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    this.ⲆᐃⵠⲆᐃ.ⲆΔᐃ();
    ⵠᐃ = Ⲇⵠ[526][Gx.time];
    ⵠΔⲆ = -ⵠᐃ.width * this.ⲆᐃⵠⲆᐃ.ᐃⵠⲆ;
    Ⲇᐃⵠ = this.ⲆᐃⵠⲆᐃ.ᐃⵠⲆ * -ⵠᐃ.height;
    Gp(Uo, ⵠᐃ, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    Uo.restore();
  }
  function cw() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    this.ᐃⵠⵠⵠ.ⲆΔᐃ();
    Uo.globalAlpha = 0.3;
    var a = Ⲇⵠ[282][Gx.time];
    var b = -a.width * this.ᐃⵠⵠⵠ.ᐃⵠⲆ;
    var c = -a.height * this.ᐃⵠⵠⵠ.ᐃⵠⲆ;
    Gp(Uo, a, -b / 2, -c / 2, b, c);
    Uo.globalAlpha = 1;
    Uo.restore();
  }
  function dw() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == 0) {
        this.ⵠⵠᐃ.ⲆΔᐃ = yl;
      }
      var b = Ox * (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * 600 * ia;
      var c = b * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var d = b * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Uo.rotate(this.angle);
      this.ᐃⵠⵠⵠ.ⲆΔᐃ();
      if (this.info & 16) {
        var f = Ⲇⵠ[970][Gx.time];
      } else {
        f = Ⲇⵠ[208][Gx.time];
      }
      var g = this.ᐃⵠⵠⵠ.ᐃⵠⲆ * -f.width;
      var a = this.ᐃⵠⵠⵠ.ᐃⵠⲆ * -f.height;
      Gp(Uo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = Ⲇⵠ[971][Gx.time];
      } else {
        f = Ⲇⵠ[209][Gx.time];
      }
      Uo.translate(0, f.height / 2);
      Gp(Uo, f, c - f.width / 2, -f.height + d);
    }
    Uo.restore();
  }
  function ew() {
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == 0) {
        this.ⵠⵠᐃ.ⲆΔᐃ = false;
      }
      var a = ia * (Ox * (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * 600);
      var b = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * a;
      var c = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Uo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Uo.translate(Hx.ΔΔⲆ.x + this.x + b, Hx.ΔΔⲆ.y + this.y + c);
    Uo.rotate(this.angle);
    ⵠᐃ = Ⲇⵠ[156][Gx.time];
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Ox * 3) % (Math.PI * 2);
    }
    Uo.rotate(this.rotate);
    ⵠᐃ = Ⲇⵠ[1210][Gx.time];
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Uo.restore();
  }
  function fw() {
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && Nq == this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ) {
        this.ⵠⵠᐃ.ⲆΔᐃ = false;
      }
      var a = ia * (Ox * (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * 600);
      var b = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * a;
      var c = a * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Uo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Uo.translate(Hx.ΔΔⲆ.x + this.x + b, Hx.ΔΔⲆ.y + this.y + c);
    Uo.rotate(this.angle);
    ⵠᐃ = Ⲇⵠ[153][Gx.time];
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Ox * 3) % (Math.PI * 2);
    }
    Uo.rotate(this.rotate);
    ⵠᐃ = Ⲇⵠ[1198][Gx.time];
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Uo.restore();
  }
  function gw() {
    this.ⵠⵠᐃΔ.ⲆΔᐃ();
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    a = this.info === 0 ? Ⲇⵠ[248][Gx.time] : Ⲇⵠ[1222][Gx.time];
    ⵠΔⲆ = -a.width * this.ⵠⵠᐃΔ.ᐃⵠⲆ;
    Ⲇᐃⵠ = -a.height * this.ⵠⵠᐃΔ.ᐃⵠⲆ;
    Gp(Uo, a, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆⲆⵠ == 0) {
        this.action -= 2;
      }
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      var a = Ⲇⵠ[1223];
      Gp(Uo, a, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
  }
  function hw() {
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == 0) {
        this.ⵠⵠᐃ.ⲆΔᐃ = bn;
      }
      var a = (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * Ox * 600 * ia;
      var b = a * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var c = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    this.ⲆΔⲆΔⲆΔᐃ = (this.ⲆΔⲆΔⲆΔᐃ + Ox * 3) % (Math.PI * 2);
    this.ⵠⵠΔⲆⵠᐃᐃ = (this.ⵠⵠΔⲆⵠᐃᐃ - Ox * 3) % (Math.PI * 2);
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x + b, Hx.ΔΔⲆ.y + this.y + c);
    Uo.save();
    Uo.rotate(this.angle);
    ⵠᐃ = Ⲇⵠ[151][Gx.time];
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Uo.restore();
    Uo.save();
    Uo.rotate(this.ⲆΔⲆΔⲆΔᐃ);
    ⵠᐃ = Ⲇⵠ[528][Gx.time];
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Uo.restore();
    Uo.save();
    Uo.rotate(this.ⵠⵠΔⲆⵠᐃᐃ);
    ⵠᐃ = Ⲇⵠ[527][Gx.time];
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Uo.restore();
    Uo.restore();
  }
  function iw() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    if (ᐃⵠⵠ.ⲆⲆⲆΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Ox / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Ox, 1);
    }
    this.ⵠⵠᐃΔ.ⲆΔᐃ();
    this.rotate.ⲆΔᐃ();
    a = this.info === 0 ? Ⲇⵠ[233][Gx.time] : Ⲇⵠ[1083][Gx.time];
    ⵠΔⲆ = -a.width * this.ⵠⵠᐃΔ.ᐃⵠⲆ * this.scale;
    Ⲇᐃⵠ = this.scale * (this.ⵠⵠᐃΔ.ᐃⵠⲆ * -a.height);
    Gp(Uo, a, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
    if (this.action & 2) {
      if (this.ⵠⵠᐃ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆⲆⵠ == go) {
        this.action -= 2;
      }
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      var a = Ⲇⵠ[1092];
      Gp(Uo, a, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      Uo.globalAlpha = 1;
    }
    a = this.info === 0 ? Ⲇⵠ[1087][Gx.time] : Ⲇⵠ[1086][Gx.time];
    ⵠΔⲆ = this.scale * (this.ⵠⵠᐃΔ.ᐃⵠⲆ * -a.width);
    Ⲇᐃⵠ = this.scale * (this.ⵠⵠᐃΔ.ᐃⵠⲆ * -a.height);
    Uo.save();
    Uo.translate(ia * -40, ia * 10);
    Uo.rotate(this.rotate.ᐃⵠⲆ);
    Gp(Uo, a, -ⵠΔⲆ * ia / 4, ia * -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
    if (this.action & 2) {
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      a = Ⲇⵠ[1093];
      Gp(Uo, a, ia * -ⵠΔⲆ / 4, ia * -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
    a = this.info === 0 ? Ⲇⵠ[1090][Gx.time] : Ⲇⵠ[1089][Gx.time];
    Uo.save();
    Uo.translate(ia * 40, ia * 10);
    Uo.rotate(-this.rotate.ᐃⵠⲆ);
    Gp(Uo, a, ia * -ⵠΔⲆ / 4, ia * -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
    if (this.action & 2) {
      Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
      a = Ⲇⵠ[1094];
      Gp(Uo, a, ia * -ⵠΔⲆ / 4, ia * -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
      Uo.globalAlpha = 1;
    }
    Uo.restore();
    Uo.restore();
  }
  function jw() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == 0) {
        this.ⵠⵠᐃ.ⲆΔᐃ = false;
      }
      var b = ia * ((1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * Ox * 600);
      var c = b * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var d = b * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Uo.rotate(this.angle);
      this.ᐃⵠⵠⵠ.ⲆΔᐃ();
      if (this.info & 16) {
        var f = Ⲇⵠ[985][Gx.time];
      } else {
        f = Ⲇⵠ[210][Gx.time];
      }
      var g = this.ᐃⵠⵠⵠ.ᐃⵠⲆ * -f.width;
      var a = this.ᐃⵠⵠⵠ.ᐃⵠⲆ * -f.height;
      Gp(Uo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = Ⲇⵠ[986][Gx.time];
      } else {
        f = Ⲇⵠ[211][Gx.time];
      }
      Uo.translate(0, f.height / 2);
      Gp(Uo, f, c - f.width / 2, -f.height + d);
    }
    Uo.restore();
  }
  function kw() {
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && yg == this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ) {
        this.ⵠⵠᐃ.ⲆΔᐃ = false;
      }
      var a = (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * Ox * 600 * ia;
      var b = a * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var c = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x + b, Hx.ΔΔⲆ.y + this.y + c);
    Uo.rotate(this.angle);
    ⵠᐃ = Ⲇⵠ[135][Gx.time];
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Uo.restore();
  }
  function lw() {
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == 0) {
        this.ⵠⵠᐃ.ⲆΔᐃ = Nq;
      }
      var a = (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * Ox * 600 * ia;
      var b = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * a;
      var c = a * Math.cos(this.ⵠⵠᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Uo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Uo.translate(Hx.ΔΔⲆ.x + this.x + b, Hx.ΔΔⲆ.y + this.y + c);
    Uo.rotate(this.angle);
    ⵠᐃ = Ⲇⵠ[155][Gx.time];
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Ox * 3) % (Math.PI * 2);
    }
    Uo.rotate(this.rotate);
    ⵠᐃ = Ⲇⵠ[1206][Gx.time];
    Gp(Uo, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Uo.restore();
  }
  function mw() {
    if (this.info !== 10) {
      Uo.save();
      Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
      Uo.rotate(this.angle);
      if (this.ⵠⵠᐃ.ⲆΔᐃ) {
        if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == cs) {
          this.ⵠⵠᐃ.ⲆΔᐃ = Ge;
        }
        var b = ia * (Ox * (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * 600);
        var c = Math.sin(this.ⵠⵠᐃ.angle - this.angle) * b;
        var d = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      if (this.info & 16) {
        var e = Ⲇⵠ[623][Gx.time];
      } else {
        e = Ⲇⵠ[287][Gx.time];
      }
      Gp(Uo, e, -e.width / 2 + c, -e.width / 2 + d);
      Uo.restore();
      for (var f = this.info & 15, g = 0; g < f; g++) {
        this.ⵠⵠⵠᐃ[g].ⵠᐃⲆᐃ(294);
      }
    }
  }
  function nw(b) {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    Uo.rotate(this.angle);
    this.ᐃⵠⵠⵠ.ⲆΔᐃ();
    Uo.globalAlpha = 0.3;
    var c = Ⲇⵠ[282][Gx.time];
    var d = -c.width * this.ᐃⵠⵠⵠ.ᐃⵠⲆ;
    var e = this.ᐃⵠⵠⵠ.ᐃⵠⲆ * -c.height;
    Gp(Uo, c, -d / 2, -e / 2, d, e);
    Uo.globalAlpha = 1;
    if (this.ⵠⵠᐃ.ⲆΔᐃ) {
      if (this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆΔᐃ() && this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ⲆⲆⵠ == 0) {
        this.ⵠⵠᐃ.ⲆΔᐃ = false;
      }
      var f = (1 - this.ⵠⵠᐃ.ⲆᐃⲆⵠ.ᐃⵠⲆ) * Ox * 600 * ia;
      var g = f * Math.sin(this.ⵠⵠᐃ.angle - this.angle);
      var h = Math.cos(this.ⵠⵠᐃ.angle - this.angle) * f;
    } else {
      g = 0;
      h = 0;
    }
    c = Ⲇⵠ[b][Gx.time];
    Gp(Uo, c, -c.width / 2 + g, -c.height / 2 + h);
    Uo.restore();
  }
  function ow(a) {
    if (a > 0) {
      var b = Ⲇⵠ[a][Gx.time];
      switch (a) {
        case 58:
          Ow(a, b, -b.width / 2 + ia * 2, -b.height / 2 - ia * 5);
          break;
        case 10:
          Ow(a, b, -b.width / 2, -b.height / 2 - ia * 18);
          break;
        case 11:
          Ow(a, b, -b.width / 2, -b.height / 2 - ia * 10);
          break;
        case 23:
          Ow(a, b, -b.width / 2, -b.height / 2 - ia * 19);
          break;
        case 24:
          Kw(a, b, -b.width / 4, -b.height / 4 - ia * 20);
          break;
        case 25:
          Ow(a, b, -b.width / 2 - ia * 1, -b.height / 2 - ia * 23);
          break;
        case 26:
          Ow(a, b, -b.width / 2, -b.height / 2 - ia * 5);
          break;
        case 27:
          Ow(a, b, -b.width / 2, -b.height / 2 - ia * 2);
          break;
        case 43:
          Ow(a, b, -b.width / 2 + ia * 1.5, -b.height / 2 - ia * 1);
          break;
        case 44:
        case 20:
        case 21:
        case 22:
        case 80:
        case 81:
        case 82:
        case 60:
        case 90:
        case 88:
        case 87:
          Kw(a, b, -b.width / 4, -b.height / 4 + ia * 2);
          break;
        case 41:
        case 42:
          Ow(a, b, -b.width / 2 - ia * 5, -b.height / 2 - ia * 2);
          break;
        case 40:
          Ow(a, b, -b.width / 2, -b.height / 2 - ia * 2);
          break;
        case 85:
          Ow(a, b, -b.width / 2, -b.height / 2 - ia * 2);
          break;
        case 48:
          Ow(a, b, -b.width / 2, -b.height / 2 - ia * 2);
          break;
        case 47:
          Ow(a, b, -b.width / 2 + ia * 2, -b.height / 2);
          break;
        case 59:
          Ow(a, b, -b.width / 2, -b.height / 2 - ia * 5);
          break;
        case 77:
        case 78:
        case 79:
          Ow(a, b, -b.width / 2 - ia * 1, -b.height / 2);
          break;
        case 83:
          Ow(a, b, -b.width / 2, -b.height / 2 + ia * 2);
          break;
        case 84:
        case 86:
          Ow(a, b, -b.width / 2, -b.height / 2 + ia * 8);
          break;
        case 61:
          Ow(a, b, -b.width / 2, -b.height / 2 - ia * 4);
      }
    }
  }
  function pw() {
    if (!this.ⲆΔⵠⵠⲆ && this.ΔᐃⲆᐃΔ !== 0) {
      if (this.x != this.r.x || this.r.y != this.y) {
        var a = (ᐃⵠⵠ.ⵠΔⲆⲆΔⲆΔ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
        this.ΔⲆⵠᐃⲆ = ᐃⵠⵠ.ⵠΔᐃⲆΔΔᐃ(a, this.ΔⲆⵠᐃⲆ);
        this.ΔⲆⵠᐃⲆ = ᐃⵠⵠ.ⲆⵠᐃΔⲆ(this.ΔⲆⵠᐃⲆ, a, 0.018);
      }
      Uo.save();
      Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
      Uo.rotate(this.ΔⲆⵠᐃⲆ);
      if (this.ΔᐃⲆᐃΔ === 223) {
        if (this.ΔΔΔΔⲆ > 50 || this.ⲆΔᐃⵠⲆ > 0) {
          if (this.ΔΔΔΔⲆ > 50) {
            this.ⲆΔᐃⵠⲆ = Math.min(1, this.ⲆΔᐃⵠⲆ + Ox);
          } else {
            this.ⲆΔᐃⵠⲆ = Math.max(0, this.ⲆΔᐃⵠⲆ - Ox);
          }
          Uo.globalAlpha = this.ⲆΔᐃⵠⲆ;
          var b = Ⲇⵠ[225][Gx.time];
          Kw(225, b, -b.width / 4, -b.height / 4);
          Uo.globalAlpha = 1;
        }
        b = Ⲇⵠ[223][Gx.time];
        Kw(223, b, -b.width / 4, -b.height / 4);
      } else if (this.ΔᐃⲆᐃΔ === 229) {
        this.ΔΔᐃⲆΔ = ᐃⵠⵠ.ⲆⵠᐃΔⲆ(this.ΔΔᐃⲆΔ, this.ΔΔΔΔⲆ, 0.018);
        this.ΔᐃΔⵠᐃΔᐃ.ⲆΔᐃ();
        if (this.ΔΔΔΔⲆ > 85) {
          this.ⲆΔᐃⵠⲆ = Math.min(1, this.ⲆΔᐃⵠⲆ + Ox / 4);
        } else {
          this.ⲆΔᐃⵠⲆ = Math.max(0.1, this.ⲆΔᐃⵠⲆ - Ox);
        }
        b = Ⲇⵠ[1100][Gx.time];
        Kw(1100, b, -b.width / 4, -b.height / 4);
        b = Ⲇⵠ[1103][Gx.time];
        ⵠΔⲆ = -b.width;
        Ⲇᐃⵠ = -b.height;
        Uo.save();
        Uo.translate(ia * -20, ia * -20);
        Uo.rotate(this.ⲆΔᐃⵠⲆ * this.ΔᐃΔⵠᐃΔᐃ.ᐃⵠⲆ);
        Gp(Uo, b, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
        Uo.restore();
        b = Ⲇⵠ[1106][Gx.time];
        Uo.save();
        Uo.translate(ia * 20, ia * -20);
        Uo.rotate(this.ⲆΔᐃⵠⲆ * -this.ΔᐃΔⵠᐃΔᐃ.ᐃⵠⲆ);
        Gp(Uo, b, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
        Uo.restore();
      } else if (this.ΔᐃⲆᐃΔ === 228) {
        this.ΔΔᐃⲆΔ = ᐃⵠⵠ.ⲆⵠᐃΔⲆ(this.ΔΔᐃⲆΔ, this.ΔΔΔΔⲆ, 0.018);
        this.ΔᐃΔⵠᐃΔᐃ.ⲆΔᐃ();
        if (this.ΔΔΔΔⲆ > 85) {
          this.ⲆΔᐃⵠⲆ = Math.min(1, this.ⲆΔᐃⵠⲆ + Ox / 4);
        } else {
          this.ⲆΔᐃⵠⲆ = Math.max(0.1, this.ⲆΔᐃⵠⲆ - Ox);
        }
        b = Ⲇⵠ[1085][Gx.time];
        Kw(1085, b, -b.width / 4, -b.height / 4);
        b = Ⲇⵠ[1088][Gx.time];
        ⵠΔⲆ = -b.width;
        Ⲇᐃⵠ = -b.height;
        Uo.save();
        Uo.translate(ia * -40, ia * -45);
        Uo.rotate(this.ⲆΔᐃⵠⲆ * this.ΔᐃΔⵠᐃΔᐃ.ᐃⵠⲆ);
        Gp(Uo, b, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
        Uo.restore();
        b = Ⲇⵠ[1091][Gx.time];
        Uo.save();
        Uo.translate(ia * 40, ia * -45);
        Uo.rotate(-this.ΔᐃΔⵠᐃΔᐃ.ᐃⵠⲆ * this.ⲆΔᐃⵠⲆ);
        Gp(Uo, b, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
        Uo.restore();
      } else if (this.ΔᐃⲆᐃΔ === 227) {
        this.ΔΔᐃⲆΔ = ᐃⵠⵠ.ⲆⵠᐃΔⲆ(this.ΔΔᐃⲆΔ, this.ΔΔΔΔⲆ, 0.018);
        this.ΔᐃΔⵠᐃΔᐃ.ⲆΔᐃ();
        if (this.ΔΔΔΔⲆ > 85) {
          this.ⲆΔᐃⵠⲆ = Math.min(1, this.ⲆΔᐃⵠⲆ + Ox / 4);
        } else {
          this.ⲆΔᐃⵠⲆ = Math.max(0.1, this.ⲆΔᐃⵠⲆ - Ox);
        }
        b = Ⲇⵠ[1070][Gx.time];
        Kw(1070, b, -b.width / 4, -b.height / 4);
        b = Ⲇⵠ[1073][Gx.time];
        ⵠΔⲆ = -b.width;
        Ⲇᐃⵠ = -b.height;
        Uo.save();
        Uo.translate(ia * -40, ia * -45);
        Uo.rotate(this.ⲆΔᐃⵠⲆ * this.ΔᐃΔⵠᐃΔᐃ.ᐃⵠⲆ);
        Gp(Uo, b, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
        Uo.restore();
        b = Ⲇⵠ[1076][Gx.time];
        Uo.save();
        Uo.translate(ia * 40, ia * -45);
        Uo.rotate(this.ⲆΔᐃⵠⲆ * -this.ΔᐃΔⵠᐃΔᐃ.ᐃⵠⲆ);
        Gp(Uo, b, -ⵠΔⲆ / 4, -Ⲇᐃⵠ / 4, ⵠΔⲆ / 2, Ⲇᐃⵠ / 2);
        Uo.restore();
      } else if (this.ΔᐃⲆᐃΔ === 91) {
        this.ΔΔᐃⲆΔ = ᐃⵠⵠ.ⲆⵠᐃΔⲆ(this.ΔΔᐃⲆΔ, this.ΔΔΔΔⲆ, 0.018);
        b = Ⲇⵠ[91][Gx.time];
        Kw(91, b, -b.width / 4, -b.height / 4);
      } else if (this.ΔᐃⲆᐃΔ === 230) {
        this.ΔΔᐃⲆΔ = ᐃⵠⵠ.ⲆⵠᐃΔⲆ(this.ΔΔᐃⲆΔ, this.ΔΔΔΔⲆ, 0.018);
        b = Ⲇⵠ[236][Gx.time];
        Kw(236, b, -b.width / 4, -b.height / 4);
      } else if (this.ΔᐃⲆᐃΔ === 224) {
        b = Ⲇⵠ[224][Gx.time];
        Kw(224, b, -b.width / 4, -b.height / 4);
      } else if (this.ΔᐃⲆᐃΔ === 239) {
        b = Ⲇⵠ[1221][Gx.time];
        if (this.ΔΔΔΔⲆ > 85) {
          this.ⲆΔᐃⵠⲆ = Math.min(1, this.ⲆΔᐃⵠⲆ + Ox / 4);
        } else {
          this.ⲆΔᐃⵠⲆ = Math.max(0, this.ⲆΔᐃⵠⲆ - Ox);
        }
        this.ᐃΔⲆⲆⲆ += Ox * 60;
        if (this.ᐃΔⲆⲆⲆ > 60) {
          this.ᐃΔⲆⲆⲆ -= 60;
        }
        var c = this.ⲆΔᐃⵠⲆ * ((this.ᐃΔⲆⲆⲆ < 30 ? this.ᐃΔⲆⲆⲆ / 30 : 1 - (this.ᐃΔⲆⲆⲆ - 30) / 30) * 12 - 6);
        Kw(1221, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ΔᐃⲆᐃΔ === 225) {
        b = Ⲇⵠ[1043][Gx.time];
        if (this.ΔΔΔΔⲆ > 85) {
          this.ⲆΔᐃⵠⲆ = Math.min(1, this.ⲆΔᐃⵠⲆ + Ox / 4);
        } else {
          this.ⲆΔᐃⵠⲆ = Math.max(0, this.ⲆΔᐃⵠⲆ - Ox);
        }
        this.ᐃΔⲆⲆⲆ += Ox * 60;
        if (this.ᐃΔⲆⲆⲆ > 60) {
          this.ᐃΔⲆⲆⲆ -= 60;
        }
        c = ((this.ᐃΔⲆⲆⲆ < 30 ? this.ᐃΔⲆⲆⲆ / 30 : 1 - (this.ᐃΔⲆⲆⲆ - 30) / 30) * 12 - 6) * this.ⲆΔᐃⵠⲆ;
        Kw(1043, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ΔᐃⲆᐃΔ === 226) {
        var d = Math.PI / 2;
        var e = Math.PI / 4;
        b = Ⲇⵠ[1055][Gx.time];
        if (this.ΔΔΔΔⲆ > 85) {
          this.ⲆΔᐃⵠⲆ = Math.min(1, this.ⲆΔᐃⵠⲆ + Ox / 4);
        } else {
          this.ⲆΔᐃⵠⲆ = Math.max(0, this.ⲆΔᐃⵠⲆ - Ox);
        }
        this.ᐃΔⲆⲆⲆ += Ox * 60;
        if (this.ᐃΔⲆⲆⲆ > 60) {
          this.ᐃΔⲆⲆⲆ -= 60;
        }
        c = this.ⲆΔᐃⵠⲆ * ((this.ᐃΔⲆⲆⲆ < 30 ? this.ᐃΔⲆⲆⲆ / 30 : 1 - (this.ᐃΔⲆⲆⲆ - 30) / 30) * 12 - 6);
        Kw(1055, b, -b.width / 4 + c, -b.height / 4);
        Uo.restore();
        Uo.save();
        Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
        Uo.rotate(Math.PI + this.ΔⲆⵠᐃⲆ + e);
        Uo.translate(120, c);
        Uo.rotate(d);
        b = Ⲇⵠ[1060][Gx.time];
        ⵠΔⲆ = -b.width;
        Ⲇᐃⵠ = -b.height;
        Gp(Uo, b, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
        Uo.restore();
        Uo.save();
        Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
        Uo.rotate(Math.PI + this.ΔⲆⵠᐃⲆ + d + e);
        Uo.translate(120, c);
        Uo.rotate(d);
        b = Ⲇⵠ[1063][Gx.time];
        ⵠΔⲆ = -b.width;
        Ⲇᐃⵠ = -b.height;
        Gp(Uo, b, -ⵠΔⲆ / 2, -Ⲇᐃⵠ / 2, ⵠΔⲆ, Ⲇᐃⵠ);
      }
      Uo.restore();
    }
  }
  function qw() {
    if (this.message !== undefined) {
      var a = Hx.ⵠᐃΔⵠ.ⲆᐃⵠⲆΔ.length > 0 ? -95 : 0;
      Gp(Uo, this.message, 0, jq - this.message.height + a);
    }
  }
  function rw(b, c, d) {
    if (c.ⵠⵠΔᐃⲆⲆΔ() !== 1) {
      return c;
    }
    var e = ᐃᐃⲆᐃᐃⲆΔ[d][b];
    if (e === Bo) {
      var f = (e = document.createElement("canvas")).getContext("2d");
      var g = c.width;
      var a = c.height;
      e.width = g;
      e.height = a;
      f.drawImage(c, 0, 0);
      f.globalCompositeOperation = "source-in";
      f.fillStyle = ⵠⵠⲆⲆⵠⵠⵠⲆᐃ[d];
      f.fillRect(0, 0, g, a);
      ᐃᐃⲆᐃᐃⲆΔ[d][b] = e;
    }
    return e;
  }
  function sw() {
    if (this.enabled && this.ⲆΔⲆΔⲆ >= 0) {
      var a = new Date().getTime() - this.ⲆΔⲆΔⲆ;
      var b = a % 1000 / 1000;
      if (b > 0.5) {
        b = 1 - (b - 0.5) * 2;
      } else {
        b *= 2;
      }
      a = Math.floor(a / 1000);
      if (a < 60) {
        a = 60 - a;
        this.label ||= Su(ia, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
        if (a != this.now || !this.ᐃⵠᐃᐃⵠΔΔ) {
          this.now = a;
          this.ᐃⵠᐃᐃⵠΔΔ = Su(ia, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
        }
        Gp(Uo, this.label, (Yo - this.label.width) / 2, ia * 100);
        Uo.globalAlpha = b;
        Gp(Uo, this.ᐃⵠᐃᐃⵠΔΔ, (Yo - this.label.width) / 2 - this.ᐃⵠᐃᐃⵠΔΔ.width + ia * 15, ia * 100);
        Uo.globalAlpha = 1;
      }
    }
  }
  function tw(a, b) {
    if (this.text) {
      if (this.timeout.ⲆⲆⵠ) {
        Uo.globalAlpha = 1 - this.timeout.ᐃⵠⲆ;
      } else {
        Uo.globalAlpha = 1;
      }
      this.label ||= Su(ia, this.text, 40, a, null, null, null, null, null, b, 10);
      Gp(Uo, this.label, (Yo - this.label.width) / 2, ia * 50);
      Uo.globalAlpha = 1;
      if (this.timeout.ⲆΔᐃ() && go == this.timeout.ⲆⲆⵠ) {
        this.text = this.list.shift();
        this.label = null;
      }
    }
  }
  function uw() {
    var c = 0;
    switch (this.right) {
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
        c = 1;
    }
    if (this.ⲆΔⵠⵠⲆ) {
      for (var f = 0; f < this.bubbles.length; f++) {
        var j = this.bubbles[f];
        if (j.ⵠⵠⲆⵠΔ > 0.5) {
          var k = 1 - (j.ⵠⵠⲆⵠΔ - 0.5) * 2;
        } else {
          k = j.ⵠⵠⲆⵠΔ * 2;
        }
        Uo.globalAlpha = k;
        var m = Ⲇⵠ[540][Gx.time][j.id];
        Gp(Uo, m, Hx.ΔΔⲆ.x + j.x - m.width / 2, Hx.ΔΔⲆ.y + j.y - m.height / 2);
        Uo.globalAlpha = 1;
      }
    } else {
      Uo.save();
      Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
      Gx.ⲆΔΔΔΔΔⲆⵠⲆ(this);
      if (this.action & 16) {
        (function (a) {
          if (a.right >= 0) {
            switch (a.right) {
              case 49:
                Uo.save();
                var b = a.attack.ᐃⵠⲆ * -3 / Math.PI;
                if (a.attack.ⲆⲆⵠ) {
                  var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.ᐃⵠⲆ) / 3;
                } else {
                  c = a.attack.ᐃⵠⲆ;
                }
                Uo.rotate(a.angle - Math.PI / 2 + c);
                Uo.globalAlpha = b / 1.2;
                bd(Uo, ia * -40, ia * 90, ia * 5);
                hd(Uo, "#0B6A84");
                Uo.globalAlpha = b / 1.2;
                bd(Uo, ia * -52, ia * 100, ia * 8);
                hd(Uo, "#0B6A84");
                Uo.globalAlpha = b / 1.2;
                bd(Uo, ia * -30, ia * 95, ia * 4);
                hd(Uo, "#0B6A84");
                Uo.globalAlpha = 1;
                Uo.restore();
                break;
              case 46:
              case 50:
              case 51:
              case 52:
                if (a.ΔᐃᐃᐃⲆⵠⵠ === 1) {
                  break;
                }
                if (a.ΔⵠⲆΔΔ > 0) {
                  var d = sh.ⲆⲆⵠⲆⲆⵠⲆ[Gx.time];
                } else {
                  d = a.ᐃⲆΔⲆᐃᐃⲆ > 0 || a.ⵠⵠⲆⲆΔ > 0 ? sh.ᐃⲆᐃᐃᐃⵠᐃ[Gx.time] : sh.ᐃⵠⲆⲆΔΔᐃ[Gx.time];
                }
                b = a.attack.ᐃⵠⲆ * -3 / Math.PI;
                if ((c = a.attack.ⲆⲆⵠ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0)) === 0) {
                  a.ᐃᐃⲆⵠⵠΔᐃ = a.angle;
                }
                Uo.save();
                Uo.rotate(a.ᐃᐃⲆⵠⵠΔᐃ - Math.PI / 2);
                Uo.globalAlpha = b;
                var e = ia * 25 + c * 25;
                bd(Uo, e, ia * 80, ia * 15);
                hd(Uo, d);
                bd(Uo, -e, ia * 80, ia * 15);
                hd(Uo, d);
                Uo.globalAlpha = 1;
                Uo.restore();
            }
          }
        })(this);
      }
      Uo.save();
      Uo.rotate(this.angle - Math.PI / 2);
      if (!(this.action & 16)) {
        if (this.action & 64 || this.ΔᐃⲆᐃΔ !== 0) {
          this.ⵠⵠᐃⵠᐃΔΔ.ⲆΔᐃ();
        } else if (this.action & 32) {
          this.ⲆᐃᐃᐃⵠΔⵠ.ⲆΔᐃ();
        }
      }
      var p;
      var q = this.ⵠⵠᐃⵠᐃΔΔ.ᐃⵠⲆ;
      var v = this.ⲆᐃᐃᐃⵠΔⵠ.ᐃⵠⲆ;
      if (this.ⵠΔΔᐃⲆ === 85) {
        m = Ⲇⵠ[793][Gx.time];
        p = 793;
      } else if (this.ⵠΔΔᐃⲆ === 20) {
        m = Ⲇⵠ[920][Gx.time];
        p = 920;
      } else if (this.ⵠΔΔᐃⲆ === 21) {
        m = Ⲇⵠ[924][Gx.time];
        p = 924;
      } else if (this.ⵠΔΔᐃⲆ === 22) {
        m = Ⲇⵠ[928][Gx.time];
        p = 928;
      } else if (this.ΔⲆᐃⲆΔⲆⲆ) {
        m = Ⲇⵠ[822][Gx.time];
        p = 822;
      } else {
        m = Ⲇⵠ[7][this.ⲆΔⵠΔ][Gx.time];
        p = 7;
      }
      ΔΔⲆⲆ = Ⲇⵠ[286][Gx.time];
      var w = m;
      var h = p;
      if (this.action & 16) {
        if (this.attack.ⲆΔᐃ() && this.attack.ⲆⲆⵠ == 0) {
          this.ᐃᐃᐃᐃⵠ = !this.ᐃᐃᐃᐃⵠ;
          this.action -= 16;
          if (this.ᐃⲆⲆⵠ == Hx.ᐃⲆⲆⵠ) {
            Hx.control.ΔΔⵠᐃ = 0;
          }
        }
        if (this.right >= 0) {
          this.ᐃᐃᐃᐃⵠ = true;
        }
        var g = this.ᐃᐃᐃᐃⵠ ? this.attack.ᐃⵠⲆ : -this.attack.ᐃⵠⲆ / 3;
        var x = this.ᐃᐃᐃᐃⵠ ? this.attack.ᐃⵠⲆ / 3 : -this.attack.ᐃⵠⲆ;
        if (this.ΔⲆᐃⲆΔⲆⲆ) {
          Uo.save();
          Uo.rotate(g);
          Ow(p, m, -m.width / 2 - ia * (66 + q), -m.height / 2 + ia * (5 + v));
          Uo.restore();
          Uo.save();
          Uo.rotate(x);
          Ow(p, m, -m.width / 2 + ia * (66 + q), -m.height / 2 + (5 + v) * ia);
          Uo.restore();
        } else if (c === 0) {
          if (this.right === 64) {
            g = -ᐃⵠⵠ.ΔΔᐃΔᐃΔᐃ(-g);
          }
          Uo.save();
          Uo.rotate(g);
          Ow(286, ΔΔⲆⲆ, -ΔΔⲆⲆ.width / 2 - (49 + q) * ia, -ΔΔⲆⲆ.height / 2 + (15 + v) * ia);
          if (this.right === 28) {
            var u = Ⲇⵠ[this.right][this.ⵠⵠⲆᐃΔ][Gx.time];
            lf(this.right, this.ⵠⵠⲆᐃΔ, u, -u.width / 4 - (62 + q) * ia, -u.height / 4 + ia * (v + 18));
          } else {
            Zv(this.right, q, v);
          }
          if (p >= 920) {
            Kw(p, m, -m.width / 4 - (49 + q) * ia, -m.height / 4 + (11 + v) * ia);
          } else if (p !== 793) {
            lf(p, this.ⲆΔⵠΔ, m, -m.width / 4 - ia * (49 + q), -m.height / 4 + (11 + v) * ia);
          } else {
            Ow(p, m, -m.width / 2 - (49 + q) * ia, -m.height / 2 + (11 + v) * ia);
          }
          Uo.restore();
          Uo.save();
          Uo.rotate(x);
          Ow(286, ΔΔⲆⲆ, -ΔΔⲆⲆ.width / 2 + ia * (49 + q), -ΔΔⲆⲆ.height / 2 + (15 + v) * ia);
          if (p >= 920) {
            Kw(p, m, -m.width / 4 + ia * (49 + q), -m.height / 4 + ia * (11 + v));
          } else if (p !== 793) {
            lf(p, this.ⲆΔⵠΔ, m, -m.width / 4 + ia * (49 + q), -m.height / 4 + (11 + v) * ia);
          } else {
            Ow(p, m, -m.width / 2 + ia * (49 + q), -m.height / 2 + (11 + v) * ia);
          }
          Uo.restore();
        }
      } else if (this.ΔⲆᐃⲆΔⲆⲆ) {
        Ow(p, m, -m.width / 2 - ia * (66 + q), -m.height / 2 + (5 + v) * ia);
        Ow(p, m, -m.width / 2 + ia * (66 + q), -m.height / 2 + ia * (5 + v));
      } else if (c === 0) {
        Ow(286, ΔΔⲆⲆ, -ΔΔⲆⲆ.width / 2 - (49 + q) * ia, -ΔΔⲆⲆ.height / 2 + (15 + v) * ia);
        if (this.right === 28) {
          u = Ⲇⵠ[this.right][this.ⵠⵠⲆᐃΔ][Gx.time];
          lf(this.right, this.ⵠⵠⲆᐃΔ, u, -u.width / 4 - ia * (62 + q), -u.height / 4 + (v + 18) * ia);
        } else {
          Zv(this.right, q, v);
        }
        if (p >= 920) {
          Kw(p, m, -m.width / 4 - ia * (49 + q), -m.height / 4 + (11 + v) * ia);
        } else if (p !== 793) {
          lf(p, this.ⲆΔⵠΔ, m, -m.width / 4 - (49 + q) * ia, -m.height / 4 + (11 + v) * ia);
        } else {
          Ow(p, m, -m.width / 2 - ia * (49 + q), -m.height / 2 + (11 + v) * ia);
        }
        Ow(286, ΔΔⲆⲆ, -ΔΔⲆⲆ.width / 2 + ia * (49 + q), -ΔΔⲆⲆ.height / 2 + (15 + v) * ia);
        if (p >= 920) {
          Kw(p, m, -m.width / 4 + ia * (49 + q), -m.height / 4 + ia * (11 + v));
        } else if (p !== 793) {
          lf(p, this.ⲆΔⵠΔ, m, -m.width / 4 + ia * (49 + q), -m.height / 4 + (11 + v) * ia);
        } else {
          Ow(p, m, -m.width / 2 + ia * (49 + q), -m.height / 2 + ia * (11 + v));
        }
      }
      if (this.ⵠⲆⲆᐃⲆ && this.ⵠΔΔᐃⲆ < 1) {
        m = Ⲇⵠ[29][this.ⲆⵠⲆⵠⵠᐃⲆ][Gx.time];
        lf(29, this.ⲆⵠⲆⵠⵠᐃⲆ, m, -m.width / 4, -m.height / 4 - ia * 39);
      }
      if (this.ΔⲆᐃⲆΔⲆⲆ) {
        m = Ⲇⵠ[820][Gx.time];
        Ow(820, m, -m.width / 2, -m.height / 2);
        this.ⵠΔⵠᐃΔⲆᐃ.ⲆΔᐃ();
        m = Ⲇⵠ[821][Gx.time];
        Ow(821, m, -m.width / 2, -m.height / 2 + this.ⵠΔⵠᐃΔⲆᐃ.ᐃⵠⲆ);
      } else {
        m = Ⲇⵠ[255][this.ⲆΔⵠΔ][Gx.time];
        if (this.ⵠΔΔᐃⲆ !== 85 && (lf(255, this.ⲆΔⵠΔ, m, -m.width / 4, -m.height / 4), this.ⲆⵠⲆⲆⲆ > 0)) {
          m = Ⲇⵠ[796][this.ⲆⵠⲆⲆⲆ][Gx.time];
          lf(796, this.ⲆⵠⲆⲆⲆ, m, -m.width / 4, -m.height / 4);
        }
      }
      if (this.action & 128) {
        if (this.ⲆᐃⵠΔⲆ.ⲆΔᐃ() && this.ⲆᐃⵠΔⲆ.ⲆⲆⵠ == Gg) {
          this.action -= 128;
        }
        Uo.globalAlpha = 0.6 - this.ⲆᐃⵠΔⲆ.ᐃⵠⲆ;
        if (this.ΔⲆᐃⲆΔⲆⲆ) {
          m = Ⲇⵠ[825];
          Gp(Uo, m, -m.width / 2, -m.height / 2);
        } else {
          m = rw(this.ⲆΔⵠΔ, Ⲇⵠ[255][this.ⲆΔⵠΔ][0], ⲆᐃᐃᐃⲆⲆⵠⵠΔ);
          Gp(Uo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        Uo.globalAlpha = 1;
      }
      if (this.action & 256) {
        if (this.ⲆⵠΔᐃᐃΔⵠ.ⲆΔᐃ() && this.ⲆⵠΔᐃᐃΔⵠ.ⲆⲆⵠ == 0) {
          this.action -= 256;
        }
        Uo.globalAlpha = 0.6 - this.ⲆⵠΔᐃᐃΔⵠ.ᐃⵠⲆ;
        m = Ⲇⵠ[266];
        Gp(Uo, m, -m.width / 2, -m.height / 2);
        Uo.globalAlpha = 1;
      }
      if (this.action & 2) {
        if (this.ⵠⵠᐃ.ⲆΔᐃ() && Kr == this.ⵠⵠᐃ.ⲆⲆⵠ) {
          this.action -= 2;
        }
        Uo.globalAlpha = 0.6 - this.ⵠⵠᐃ.ᐃⵠⲆ;
        if (this.ΔⲆᐃⲆΔⲆⲆ) {
          m = Ⲇⵠ[823];
          Gp(Uo, m, -m.width / 2, -m.height / 2);
        } else {
          m = rw(this.ⲆΔⵠΔ, Ⲇⵠ[255][this.ⲆΔⵠΔ][0], ⲆⵠⵠᐃⲆⲆΔᐃⵠ);
          Gp(Uo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        Uo.globalAlpha = 1;
      }
      if (this.action & 4) {
        if (this.freeze.ⲆΔᐃ() && this.freeze.ⲆⲆⵠ == 0) {
          this.action -= 4;
        }
        Uo.globalAlpha = 0.6 - this.freeze.ᐃⵠⲆ;
        m = rw(this.ⲆΔⵠΔ, Ⲇⵠ[255][this.ⲆΔⵠΔ][0], ⵠⲆΔΔΔᐃΔᐃΔ);
        Gp(Uo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        Uo.globalAlpha = 1;
      }
      if (this.action & 8) {
        if (this.ΔⲆᐃΔⵠΔⵠ.ⲆΔᐃ() && this.ΔⲆᐃΔⵠΔⵠ.ⲆⲆⵠ == 0) {
          this.action -= 8;
        }
        Uo.globalAlpha = 0.6 - this.ΔⲆᐃΔⵠΔⵠ.ᐃⵠⲆ;
        if (this.ΔⲆᐃⲆΔⲆⲆ) {
          m = Ⲇⵠ[824];
          Gp(Uo, m, -m.width / 2, -m.height / 2);
        } else {
          m = rw(this.ⲆΔⵠΔ, Ⲇⵠ[255][this.ⲆΔⵠΔ][0], ⲆᐃΔᐃⲆⵠᐃⵠⲆ);
          Gp(Uo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        Uo.globalAlpha = 1;
      }
      ow(this.ⵠΔΔᐃⲆ);
      if (c === 1) {
        if (this.action & 16) {
          q += this.attack.ᐃⵠⲆ * 15;
        }
        Ow(286, ΔΔⲆⲆ, -ΔΔⲆⲆ.width / 2 - ia * 26, -ΔΔⲆⲆ.height / 2 + (31 + v + q) * ia);
        if (h >= 920) {
          Kw(h, w, -w.width / 4 - ia * 26, -w.height / 4 + (27 + v + q) * ia);
        } else if (h !== 793) {
          lf(h, this.ⲆΔⵠΔ, w, -w.width / 4 - ia * 26, -w.height / 4 + (27 + v + q) * ia);
        } else {
          Ow(h, w, -w.width / 2 - ia * 26, -w.height / 2 + (27 + v + q) * ia);
        }
        Ow(286, ΔΔⲆⲆ, -ΔΔⲆⲆ.width / 2 + ia * 26, -ΔΔⲆⲆ.height / 2 + (31 + v + q) * ia);
        if (h >= 920) {
          Kw(h, w, -w.width / 4 + ia * 26, -w.height / 4 + ia * (27 + v + q));
        } else if (h !== 793) {
          lf(h, this.ⲆΔⵠΔ, w, -w.width / 4 + ia * 26, -w.height / 4 + ia * (27 + v + q));
        } else {
          Ow(h, w, -w.width / 2 + ia * 26, -w.height / 2 + (27 + v + q) * ia);
        }
        Gv(this.right, 0, v + q);
      }
      Uo.restore();
      if (this.ⵠΔΔᐃⲆ !== 83 && this.ⵠΔΔᐃⲆ !== 85) {
        if (this.ΔⵠⲆΔΔ > 0) {
          this.ΔⵠΔⲆ.ᐃⲆᐃᐃⲆᐃᐃ ||= Su(ia, this.ΔⵠΔⲆ.ΔᐃΔΔⵠ, 20, "#187484", "#000", 2, null, null, ia * 300);
          m = this.ΔⵠΔⲆ.ᐃⲆᐃᐃⲆᐃᐃ;
        } else {
          if (!this.ΔⵠΔⲆ.label) {
            this.ΔⵠΔⲆ.label = Su(ia, this.ΔⵠΔⲆ.ΔᐃΔΔⵠ, 20, "#FFF", "#000", 2, null, null, ia * 300);
          }
          m = this.ΔⵠΔⲆ.label;
        }
        if (sh.ⲆⵠⲆ == Gx.ΔⲆⵠ) {
          Uo.globalAlpha = 0.5;
        }
        q = Math.floor(-m.width / 2);
        v = Math.floor(-m.height / 2 - ia * 70);
        Gp(Uo, m, q, v);
        if (this.ΔⵠΔⲆ.level > 0) {
          var y = q + m.width + 5;
          m = Ⲇⵠ[885];
          if (ⵠᐃⵠⵠΔᐃⲆ[this.ΔⵠΔⲆ.level] === undefined) {
            ⵠᐃⵠⵠΔᐃⲆ[this.ΔⵠΔⲆ.level] = Su(ia, "[" + this.ΔⵠΔⲆ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, ia * 50);
          }
          Gp(Uo, ⵠᐃⵠⵠΔᐃⲆ[this.ΔⵠΔⲆ.level], y, v);
        }
        Uo.globalAlpha = 1;
      } else {
        v = Math.floor(ia * -70);
        q = Math.floor(Ⲇⵠ[558].width / 1.5);
      }
      if (Hx.ⲆᐃⲆⵠΔΔⲆ(this.ᐃⵠⲆⲆ)) {
        if (Hx.ⲆΔᐃⲆᐃ[0] == this.ᐃⵠⲆⲆ) {
          m = Ⲇⵠ[559];
        } else {
          m = Ⲇⵠ[558];
        }
        Gp(Uo, m, q - m.width - 5, v - 6);
      }
      Uo.restore();
    }
  }
  function vw() {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + this.x, Hx.ΔΔⲆ.y + this.y);
    if (this.text.length > 0) {
      for (var a = 0; this.text.length > a && a < 2; a++) {
        if (!this.label[a]) {
          this.label[a] = vd(ia, this.text[a]);
          this.ΔⵠⵠⵠᐃΔΔ[a] = 0;
          this.ΔᐃᐃⲆⵠΔⵠ[a] = 0;
        }
        if (a === 1) {
          this.ΔᐃᐃⲆⵠΔⵠ[0] = ᐃⵠⵠ.ΔⲆⲆᐃⲆ(this.ΔΔΔⲆᐃΔΔ) * 30;
        }
      }
      this.ΔⵠⵠⵠᐃΔΔ[0] += Ox;
      if (this.text.length > 1) {
        this.ΔΔΔⲆᐃΔΔ = Math.min(this.ΔΔΔⲆᐃΔΔ + Ox, 1);
        if (this.ΔⵠⵠⵠᐃΔΔ[0] > 1 && this.ΔΔΔⲆᐃΔΔ > 0.5) {
          this.ΔⵠⵠⵠᐃΔΔ[1] += Ox;
        }
      }
      for (a = 0; a < this.text.length && a < 2; a++) {
        var b = this.ΔⵠⵠⵠᐃΔΔ[a];
        if (b > 0) {
          Uo.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * 4, 0) : 1;
          Gp(Uo, this.label[a], -this.label[a].width / 2, -this.ΔᐃᐃⲆⵠΔⵠ[a] + -this.label[a].height / 2 - ia * 110);
        }
      }
      if (this.ΔⵠⵠⵠᐃΔΔ[0] > 4) {
        this.ΔⵠⵠⵠᐃΔΔ.shift();
        this.text.shift();
        this.ΔᐃᐃⲆⵠΔⵠ.shift();
        this.label.shift();
        this.ΔΔΔⲆᐃΔΔ = 0;
      }
    }
    Uo.restore();
  }
  ⲆⵠⵠᐃⲆⲆΔᐃⵠ = 0;
  ⲆᐃᐃᐃⲆⲆⵠⵠΔ = 1;
  ⵠⲆΔΔΔᐃΔᐃΔ = 2;
  ⲆᐃΔᐃⲆⵠᐃⵠⲆ = 3;
  ᐃⵠᐃΔⵠᐃᐃⵠΔ = 4;
  ᐃᐃⲆᐃᐃⲆΔ = [[], [], [], [], []];
  ⵠⵠⲆⲆⵠⵠⵠⲆᐃ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
  var ww = 0;
  function xw(j, e, i, k, n, o, a, q) {
    if (q === pj) {
      q = 0;
    }
    for (var r = a; r >= q; r--) {
      for (var t = j; e >= t; t++) {
        for (var w = i; k >= w; w++) {
          var x = Dx.ᐃⲆⲆᐃ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (y !== tr) {
              for (var z = 0; y.length > z; z++) {
                var A = y[z];
                var B = Ⲇⵠ[n][Gx.time][r];
                var D = (ww + (t + w) * 3) % 60;
                var E = D < 30 ? D / 30 : 1 - (D - 30) / 30;
                var F = -B.width * (1 + E * 0.9 / 30);
                var G = -B.height * (1 + E * 0.9 / 30);
                E = (D = (ww + (t + w) * 7) % 60) < 30 ? D / 30 : 1 - (D - 30) / 30;
                var H = Uo.globalAlpha;
                Uo.globalAlpha = (0.9 + E * 0.1) * H;
                Gp(Uo, B, Hx.ΔΔⲆ.x + A.x - F / 2, Hx.ΔΔⲆ.y + A.y - G / 2, F, G);
                Uo.globalAlpha = H;
              }
            }
          }
        }
      }
    }
  }
  function yw(j, e, i, k, n, o, a, q = 0) {
    Gx.ⵠⵠᐃΔ[n].ⲆΔᐃ();
    for (var r = a; q <= r; r--) {
      for (var s = j; e >= s; s++) {
        for (var t = i; k >= t; t++) {
          var w = Dx.ᐃⲆⲆᐃ[s][t];
          if (w && w[o]) {
            var x = w[o][r];
            if (x !== undefined) {
              for (var y = 0; x.length > y; y++) {
                var z = x[y];
                if (z.ⲆΔᐃ) {
                  if (z.ⵠⵠᐃ.ⲆΔᐃ() && yg == z.ⵠⵠᐃ.ⲆⲆⵠ) {
                    z.ⲆΔᐃ = false;
                  }
                  var A = (1 - z.ⵠⵠᐃ.ᐃⵠⲆ) * Ox * 600 * ia;
                  var B = A * Math.sin(z.angle);
                  var D = A * Math.cos(z.angle);
                } else {
                  B = 0;
                  D = 0;
                }
                var E = Ⲇⵠ[n][Gx.time][r];
                var F = Gx.ⵠⵠᐃΔ[n].ᐃⵠⲆ * -E.width;
                var G = Gx.ⵠⵠᐃΔ[n].ᐃⵠⲆ * -E.height;
                Gp(Uo, E, Hx.ΔΔⲆ.x + z.x - F / 2 + B, Hx.ΔΔⲆ.y + z.y - G / 2 + D, F, G);
              }
            }
          }
        }
      }
    }
  }
  var zw = [];
  for (_b = 0; _b < 100; _b++) {
    var Aw = 1;
    if (Math.random() < 0.25) {
      Aw = 0;
    }
    zw.push(Aw);
  }
  function Bw(c, e, f, i, j, k, a, m = 0, n) {
    for (var h = c; h <= e; h++) {
      for (var o = f; o <= i; o++) {
        var p = Dx.ᐃⲆⲆᐃ[h][o];
        if (ct !== p && p[k] !== tr) {
          var q = p[k];
          if (q !== undefined) {
            if (q.scale === 1) {
              var r = Ⲇⵠ[j][Gx.time][q.ΔᐃΔΔⲆ];
              Uo.save();
              Uo.translate(Hx.ΔΔⲆ.x + q.x, Hx.ΔΔⲆ.y + q.y);
              Uo.rotate(q.angle);
              Gp(Uo, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
              Uo.restore();
            } else if (q.scale === 3) {
              for (var s = 0; q.ΔⲆᐃ.length > s; s++) {
                Uo.save();
                Uo.translate(Hx.ΔΔⲆ.x + q.x, Hx.ΔΔⲆ.y + q.y);
                Uo.rotate(q.ΔⲆᐃ[s].angle);
                r = Ⲇⵠ[j][Gx.time][q.ΔⲆᐃ[s].ΔᐃΔΔⲆ];
                Gp(Uo, r, -r.width / 3 + q.ΔⲆᐃ[s].x, -r.height / 3 + q.ΔⲆᐃ[s].y, r.width / 1.5, r.height / 1.5);
                Uo.restore();
              }
            } else {
              r = Ⲇⵠ[j][Gx.time][q.ΔᐃΔΔⲆ];
              Uo.save();
              Uo.translate(Hx.ΔΔⲆ.x + q.x, Hx.ΔΔⲆ.y + q.y);
              Uo.rotate(q.angle);
              Gp(Uo, r, -r.width / 2, -r.height / 2, r.width, r.height);
              Uo.restore();
            }
          }
        }
      }
    }
  }
  function Cw(j, e, i, k, n, o, a, q = 0, r) {
    for (var h = a; h >= q; h--) {
      for (var s = j; e >= s; s++) {
        for (var t = i; k >= t; t++) {
          var w = Dx.ᐃⲆⲆᐃ[s][t];
          if (w !== tr && w[o] !== ir) {
            var x = w[o][h];
            if (tr !== x) {
              for (var A = 0; A < x.length; A++) {
                var B = x[A];
                if (B.ⲆΔᐃ) {
                  if (B.ⵠⵠᐃ.ⲆΔᐃ() && Nh == B.ⵠⵠᐃ.ⲆⲆⵠ) {
                    B.ⲆΔᐃ = N;
                  }
                  var D = ia * ((1 - B.ⵠⵠᐃ.ᐃⵠⲆ) * Ox * 600);
                  var E = Math.sin(B.angle) * D;
                  var F = D * Math.cos(B.angle);
                } else {
                  E = 0;
                  F = 0;
                }
                for (var G = 0; ᐃᐃⵠΔⲆⵠΔ[h].ᐃᐃΔᐃ > G; G++) {
                  if (Gx.ΔⵠⲆⲆᐃ[G].ⵠⵠᐃⲆΔ !== Px) {
                    Gx.ΔⵠⲆⲆᐃ[G].ⲆΔᐃ();
                    Gx.ΔⵠⲆⲆᐃ[G].ⵠⵠᐃⲆΔ = Px;
                  }
                  var H = Ⲇⵠ[941][Gx.time][ᐃᐃⵠΔⲆⵠΔ[h].ΔΔΔᐃ[G].ΔⵠΔ];
                  var I = Gx.ΔⵠⲆⲆᐃ[G].ᐃⵠⲆ * -H.width;
                  var J = Gx.ΔⵠⲆⲆᐃ[G].ᐃⵠⲆ * -H.height;
                  Gp(Uo, H, Hx.ΔΔⲆ.x + B.x - I / 4 + E + ᐃᐃⵠΔⲆⵠΔ[h].ΔΔΔᐃ[G].x, Hx.ΔΔⲆ.y + B.y - J / 4 + F + ᐃᐃⵠΔⲆⵠΔ[h].ΔΔΔᐃ[G].y, I / 2, J / 2);
                }
              }
            }
          }
        }
      }
    }
  }
  function Dw(f, e, i, j, k, n, a, o = 0, q) {
    for (var h = a; o <= h; h--) {
      for (var r = f; e >= r; r++) {
        for (var s = i; j >= s; s++) {
          if (q <= 0 || zw[(r + s * q) % zw.length] !== 1) {
            var t = Dx.ᐃⲆⲆᐃ[r][s];
            if (Bo !== t && t[n] !== ct) {
              var w = t[n][h];
              if (w !== undefined) {
                for (var x = 0; x < w.length; x++) {
                  var y = w[x];
                  if (y.ⲆΔᐃ) {
                    if (y.ⵠⵠᐃ.ⲆΔᐃ() && y.ⵠⵠᐃ.ⲆⲆⵠ == 0) {
                      y.ⲆΔᐃ = false;
                    }
                    var z = ia * (Ox * (1 - y.ⵠⵠᐃ.ᐃⵠⲆ) * 600);
                    var A = Math.sin(y.angle) * z;
                    var B = z * Math.cos(y.angle);
                  } else {
                    A = 0;
                    B = 0;
                  }
                  var D = Ⲇⵠ[k][Gx.time][h];
                  Gp(Uo, D, Hx.ΔΔⲆ.x + y.x - D.width / (ⲆΔᐃⲆⵠ * 2) + A, Hx.ΔΔⲆ.y + y.y - D.height / (ⲆΔᐃⲆⵠ * 2) + B, D.width / ⲆΔᐃⲆⵠ, D.height / ⲆΔᐃⲆⵠ);
                }
              }
            }
          }
        }
      }
    }
  }
  ⲆΔᐃⲆⵠ = 1;
  ᐃᐃⵠΔⲆⵠΔ = [{
    ᐃᐃΔᐃ: 10,
    ΔΔΔᐃ: [{
      x: -128,
      y: -20,
      ΔⵠΔ: 0
    }, {
      y: -4,
      ΔⵠΔ: 1,
      x: -86
    }, {
      y: -74,
      x: -60,
      ΔⵠΔ: 2
    }, {
      x: -22,
      y: -144,
      ΔⵠΔ: 0
    }, {
      y: 86,
      x: -58,
      ΔⵠΔ: 0
    }, {
      x: 3,
      y: -30,
      ΔⵠΔ: 0
    }, {
      x: 65,
      y: -115,
      ΔⵠΔ: 1
    }, {
      y: -50,
      ΔⵠΔ: 0,
      x: 118
    }, {
      y: 15,
      ΔⵠΔ: 1,
      x: 73
    }, {
      y: 79,
      x: 67,
      ΔⵠΔ: 0
    }]
  }, {
    ΔΔΔᐃ: [{
      x: -45,
      y: -26,
      ΔⵠΔ: 0
    }, {
      y: 20,
      ΔⵠΔ: 2,
      x: -45
    }, {
      x: 10,
      ΔⵠΔ: 1,
      y: -60
    }, {
      ΔⵠΔ: 1,
      x: 52,
      y: -17
    }, {
      x: 14,
      y: 45,
      ΔⵠΔ: 0
    }],
    ᐃᐃΔᐃ: 5
  }, {
    ΔΔΔᐃ: [{
      y: 3,
      ΔⵠΔ: 2,
      x: -30
    }, {
      ΔⵠΔ: 2,
      y: -38,
      x: 7
    }, {
      ΔⵠΔ: 2,
      x: 37,
      y: 5
    }],
    ᐃᐃΔᐃ: 3
  }, {
    ΔΔΔᐃ: [{
      y: -87,
      ΔⵠΔ: 2,
      x: -74
    }, {
      ΔⵠΔ: 1,
      y: -10,
      x: -11
    }, {
      y: 17,
      ΔⵠΔ: 1,
      x: -99
    }, {
      ΔⵠΔ: 0,
      x: -66,
      y: 84
    }, {
      ΔⵠΔ: 1,
      y: 123,
      x: -55
    }, {
      y: 81,
      x: 10,
      ΔⵠΔ: 2
    }, {
      x: 52,
      ΔⵠΔ: 0,
      y: 50
    }, {
      x: 138,
      y: 9,
      ΔⵠΔ: 1
    }, {
      ΔⵠΔ: 0,
      y: -28,
      x: 104
    }, {
      y: -56,
      x: 67,
      ΔⵠΔ: 2
    }, {
      x: 5,
      y: -112,
      ΔⵠΔ: 0
    }],
    ᐃᐃΔᐃ: 11
  }, {
    ΔΔΔᐃ: [{
      x: -33,
      ΔⵠΔ: 2,
      y: -66
    }, {
      x: -58,
      y: 10,
      ΔⵠΔ: 0
    }, {
      ΔⵠΔ: 1,
      x: -19,
      y: 44
    }, {
      ΔⵠΔ: 0,
      y: 20,
      x: 44
    }, {
      x: 53,
      ΔⵠΔ: 2,
      y: -36
    }, {
      ΔⵠΔ: 0,
      y: -62,
      x: 7
    }],
    ᐃᐃΔᐃ: 6
  }, {
    ΔΔΔᐃ: [{
      ΔⵠΔ: 1,
      x: -19,
      y: -25
    }, {
      x: -29,
      y: 13,
      ΔⵠΔ: 2
    }, {
      y: 12,
      x: 12,
      ΔⵠΔ: 0
    }],
    ᐃᐃΔᐃ: 3
  }];
  var Ew = 0;
  var Fw = 0;
  var Gw = 0;
  var Hw = 0;
  function Iw(a, b, c) {
    if (Gx.transition) {
      Uo.globalAlpha = 1;
      a.ⵠᐃⲆᐃ(b, c);
      Gx.time = Gx.time ? 0 : 1;
      Uo.globalAlpha = 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
      a.ⵠᐃⲆᐃ(b, c);
      Gx.time = Gx.time ? 0 : 1;
      Uo.globalAlpha = 1;
    } else {
      a.ⵠᐃⲆᐃ(b, c);
    }
  }
  function Jw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = Hx.ΔΔⲆ.y + f + 710;
    var g = Math.max(Hx.ΔΔⲆ.x + e, 0);
    var l = Math.max(-Hx.ΔΔⲆ.x + Yo - i - 100, 0);
    var r = g;
    var b = Yo - g - l;
    if (n) {
      var d = j.ΔⵠΔ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += -d + 0 + 2;
    if (n) {
      d = j.ΔⵠΔ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h - 250 - s - d;
    var u = (s += t + 2) - 2;
    if (n) {
      d = j.ΔⵠΔ(q).x;
    } else {
      d = q.r.x;
    }
    if (u > s + (t = h - 350 - s - d)) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (n > 0 && k.ⲆᐃⲆᐃᐃⵠᐃ === 1) {
      if (Gx.transition) {
        var p = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
        Uo.fillStyle = sf(15, 77, 72, 252, 239, 187, p);
      } else {
        Uo.fillStyle = sh.ΔⵠᐃᐃⲆⲆΔ[Gx.time];
      }
      Uo.fillRect(r, s, b, t);
    } else {
      if (Gx.transition) {
        p = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
        Uo.fillStyle = sf(k.ΔΔΔ[0], k.ΔΔΔ[1], k.ΔΔΔ[2], k.ΔⲆⵠ[0], k.ΔⲆⵠ[1], k.ΔⲆⵠ[2], p);
      } else {
        Uo.fillStyle = k.ᐃΔᐃⲆᐃ[Gx.time];
      }
      Uo.fillRect(r, s, b, t);
    }
  }
  function Kw(b, c, d, e) {
    var f = c.width;
    var g = c.height;
    var a = Math.floor(f / 2);
    var h = Math.floor(g / 2);
    if (Gx.transition) {
      Uo.globalAlpha = 1;
      Gp(Uo, Ⲇⵠ[b][Gx.time], 0, 0, f, g, d, e, a, h);
      Gx.time = Gx.time ? 0 : 1;
      Uo.globalAlpha = 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
      Gp(Uo, Ⲇⵠ[b][Gx.time], 0, 0, f, g, d, e, a, h);
      Gx.time = Gx.time ? 0 : 1;
      Uo.globalAlpha = 1;
    } else {
      Gp(Uo, c, 0, 0, f, g, d, e, a, h);
    }
  }
  function Lw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = Hx.ΔΔⲆ.x + f + 820;
    var g = Math.max(Hx.ΔΔⲆ.y + e, 0);
    var l = Math.max(-Hx.ΔΔⲆ.y + jq - i - 100, 0);
    var r = g;
    var b = jq - g - l;
    if (n) {
      var d = j.ΔⵠΔ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += -d + 0 + 2;
    if (n) {
      d = j.ΔⵠΔ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h - 250 - s - d;
    var u = (s += t + 2) - 2;
    if (n) {
      d = j.ΔⵠΔ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h - 350 - s - d) < u) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (n > 0 && k.ⲆᐃⲆᐃᐃⵠᐃ === 1) {
      if (Gx.transition) {
        var p = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
        Uo.fillStyle = sf(15, 77, 72, 252, 239, 187, p);
      } else {
        Uo.fillStyle = sh.ΔⵠᐃᐃⲆⲆΔ[Gx.time];
      }
      Uo.fillRect(s, r, t, b);
    } else {
      if (Gx.transition) {
        p = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
        Uo.fillStyle = sf(k.ΔΔΔ[0], k.ΔΔΔ[1], k.ΔΔΔ[2], k.ΔⲆⵠ[0], k.ΔⲆⵠ[1], k.ΔⲆⵠ[2], p);
      } else {
        Uo.fillStyle = k.ᐃΔᐃⲆᐃ[Gx.time];
      }
      Uo.fillRect(s, r, t, b);
    }
  }
  function Mw(a, b) {
    const c = (1013904223 + (a + 14976) * 1664525) % 4294967296;
    const d = ~(b & 20070) & 20070 | ~(b & 20070) & b;
    const e = yb(c, 0, c, d, c);
    yb(d, 0, d, c, d);
    return ~(e & 9653) & 9653 | ~(e & 9653) & e;
  }
  function Nw(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = Hx.ΔΔⲆ.y + j + 710;
    var g = Math.max(Hx.ΔΔⲆ.x + e, 0);
    var l = Math.max(-Hx.ΔΔⲆ.x + Yo - i - 100, 0);
    var t = g;
    var b = Yo - g - l;
    if (o) {
      var d = q.ΔⵠΔ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var c = t;
    var p = -d.x + 0;
    var C = b;
    var G = u += -d.x + 0 + 2;
    if (o) {
      d = q.ΔⵠΔ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - u - d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f + 2) - 2;
    if (o) {
      d = q.ΔⵠΔ(s);
    } else {
      d = s.r;
    }
    if (k > u + (f = h - 350 - u - d.x)) {
      var A = Mg;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var E = u += f + 2;
    } else {
      A = Ks;
      u = k;
      E = -1;
    }
    f = h - 700 - u;
    if (Gx.transition) {
      var N = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
      Uo.fillStyle = sf(9, 55, 63, 11, 106, 132, N);
    } else {
      Uo.fillStyle = sh.ΔΔⵠᐃⲆ[Gx.time];
    }
    Uo.fillRect(c, F, C, p);
    if (o) {
      if (Gx.transition) {
        N = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
        Uo.fillStyle = sf(15, 70, 76, 42, 139, 155, N);
      } else {
        Uo.fillStyle = sh.ᐃΔᐃⲆⲆⵠⲆ[Gx.time];
      }
    } else if (Gx.transition) {
      N = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
      Uo.fillStyle = sf(9, 55, 63, 11, 106, 132, N);
    } else {
      Uo.fillStyle = sh.ΔΔⵠᐃⲆ[Gx.time];
    }
    Uo.fillRect(y, H, K, w);
    if (A) {
      if (o) {
        if (Gx.transition) {
          N = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
          Uo.fillStyle = sf(17, 94, 96, 169, 214, 211, N);
        } else {
          Uo.fillStyle = sh.ⲆΔⵠΔⲆⵠΔ[Gx.time];
        }
      } else if (Gx.transition) {
        N = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
        Uo.fillStyle = sf(9, 55, 63, 11, 106, 132, N);
      } else {
        Uo.fillStyle = sh.ΔΔⵠᐃⲆ[Gx.time];
      }
      Uo.fillRect(J, L, B, M);
    }
    if (Fx.ⵠⲆᐃᐃᐃ && o) {
      q.ⲆΔⲆΔᐃΔⲆⲆᐃ(k, E, G, h, -Hx.ΔΔⲆ.x + c, -Hx.ΔΔⲆ.x + c + C);
    }
  }
  function Ow(a, b, c, d) {
    if (Gx.transition) {
      Uo.globalAlpha = 1;
      Gp(Uo, Ⲇⵠ[a][Gx.time], c, d);
      Gx.time = Gx.time ? 0 : 1;
      Uo.globalAlpha = 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
      Gp(Uo, Ⲇⵠ[a][Gx.time], c, d);
      Gx.time = Gx.time ? 0 : 1;
      Uo.globalAlpha = 1;
    } else {
      Gp(Uo, b, c, d);
    }
  }
  function Pw(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = Hx.ΔΔⲆ.x + j + 820;
    var g = Math.max(Hx.ΔΔⲆ.y + e, 0);
    var l = Math.max(-Hx.ΔΔⲆ.y + jq - i - 100, 0);
    var t = g;
    var b = jq - g - l;
    if (o) {
      var d = q.ΔⵠΔ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var c = t;
    var p = -d.x + 0;
    var C = b;
    var G = u += -d.x + 0 + 2;
    if (o) {
      d = q.ΔⵠΔ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - u - d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f + 2) - 2;
    if (o) {
      d = q.ΔⵠΔ(s);
    } else {
      d = s.r;
    }
    if (k > u + (f = h - 350 - u - d.x)) {
      var A = rr;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var E = u += f + 2;
    } else {
      A = cs;
      u = k;
      E = -1;
    }
    f = h - 700 - u;
    if (Gx.transition) {
      var N = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
      Uo.fillStyle = sf(9, 55, 63, 11, 106, 132, N);
    } else {
      Uo.fillStyle = sh.ΔΔⵠᐃⲆ[Gx.time];
    }
    Uo.fillRect(F, c, p, C);
    if (o) {
      if (Gx.transition) {
        N = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
        Uo.fillStyle = sf(15, 70, 76, 42, 139, 155, N);
      } else {
        Uo.fillStyle = sh.ᐃΔᐃⲆⲆⵠⲆ[Gx.time];
      }
    } else if (Gx.transition) {
      N = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
      Uo.fillStyle = sf(9, 55, 63, 11, 106, 132, N);
    } else {
      Uo.fillStyle = sh.ΔΔⵠᐃⲆ[Gx.time];
    }
    Uo.fillRect(H, y, w, K);
    if (A) {
      if (o) {
        if (Gx.transition) {
          N = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
          Uo.fillStyle = sf(17, 94, 96, 169, 214, 211, N);
        } else {
          Uo.fillStyle = sh.ⲆΔⵠΔⲆⵠΔ[Gx.time];
        }
      } else if (Gx.transition) {
        N = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
        Uo.fillStyle = sf(9, 55, 63, 11, 106, 132, N);
      } else {
        Uo.fillStyle = sh.ΔΔⵠᐃⲆ[Gx.time];
      }
      Uo.fillRect(L, J, M, B);
    }
    if (Fx.ⵠⲆᐃᐃᐃ && o) {
      q.ᐃᐃⵠᐃⵠΔᐃΔΔ(k, E, G, h, -Hx.ΔΔⲆ.y + c, -Hx.ΔΔⲆ.y + c + C);
    }
  }
  function Qw(a) {
    Uo.globalAlpha = a.alpha;
    bd(Uo, a.x + Hx.ΔΔⲆ.x, a.y + Hx.ΔΔⲆ.y, a.r);
    hd(Uo, sh.ᐃⵠᐃⲆᐃΔᐃ[Gx.time]);
    Uo.globalAlpha = 1;
  }
  function Rw(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = Hx.ΔΔⲆ.x + j - 700;
    var g = Math.max(Hx.ΔΔⲆ.y + e, 0);
    var l = Math.max(-Hx.ΔΔⲆ.y + jq - i - 100, 0);
    var t = g;
    var b = jq - g - l;
    if (o) {
      var d = q.ΔⵠΔ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var c = t;
    var p = d.x + 0;
    var C = b;
    var G = u += d.x + 0 - 2;
    if (o) {
      d = q.ΔⵠΔ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - u + d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f - 2) - 2;
    if (o) {
      d = q.ΔⵠΔ(s);
    } else {
      d = s.r;
    }
    if (k < u + (f = h + 350 - u + d.x) - 3) {
      var A = true;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var E = u += f - 2;
    } else {
      A = th;
      u = k;
      E = -1;
    }
    f = h + 700 - u;
    if (Gx.transition) {
      var N = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
      Uo.fillStyle = sf(9, 55, 63, 11, 106, 132, N);
    } else {
      Uo.fillStyle = sh.ΔΔⵠᐃⲆ[Gx.time];
    }
    Uo.fillRect(F, c, p, C);
    if (o) {
      if (Gx.transition) {
        N = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
        Uo.fillStyle = sf(15, 70, 76, 42, 139, 155, N);
      } else {
        Uo.fillStyle = sh.ᐃΔᐃⲆⲆⵠⲆ[Gx.time];
      }
    } else if (Gx.transition) {
      N = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
      Uo.fillStyle = sf(9, 55, 63, 11, 106, 132, N);
    } else {
      Uo.fillStyle = sh.ΔΔⵠᐃⲆ[Gx.time];
    }
    Uo.fillRect(H, y, w, K);
    if (A) {
      if (o) {
        if (Gx.transition) {
          N = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
          Uo.fillStyle = sf(17, 94, 96, 169, 214, 211, N);
        } else {
          Uo.fillStyle = sh.ⲆΔⵠΔⲆⵠΔ[Gx.time];
        }
      } else if (Gx.transition) {
        N = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
        Uo.fillStyle = sf(9, 55, 63, 11, 106, 132, N);
      } else {
        Uo.fillStyle = sh.ΔΔⵠᐃⲆ[Gx.time];
      }
      Uo.fillRect(L, J, M, B);
    }
    if (Fx.ⵠⲆᐃᐃᐃ && o) {
      q.ⲆⲆⵠᐃⲆΔⲆⲆⵠ(k, E, G, h, -Hx.ΔΔⲆ.y + c, -Hx.ΔΔⲆ.y + c + C);
    }
  }
  function Sw(a) {
    Uo.save();
    Uo.translate(Hx.ΔΔⲆ.x + a.x, Hx.ΔΔⲆ.y + a.y);
    Uo.rotate(a.angle);
    Uo.globalAlpha = a.alpha;
    var b = Ⲇⵠ[a.id][Gx.time];
    Gp(Uo, b, -b.width / 2, -b.height / 2);
    Uo.globalAlpha = 1;
    Uo.restore();
  }
  function ef(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = Hx.ΔΔⲆ.y + f - 700;
    var g = Math.max(Hx.ΔΔⲆ.x + e, 0);
    var l = Math.max(-Hx.ΔΔⲆ.x + Yo - i - 100, 0);
    var r = g;
    var b = Yo - g - l;
    if (n) {
      var d = j.ΔⵠΔ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += d + 0 - 2;
    if (n) {
      d = j.ΔⵠΔ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h + 250 - s + d;
    var u = (s += t - 2) - 2;
    if (n) {
      d = j.ΔⵠΔ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h + 350 - s + d) - 3 > u) {
      s += t - 2;
    } else {
      s = u;
    }
    t = h + 700 - s;
    if (n > 0 && k.ⲆᐃⲆᐃᐃⵠᐃ === 1) {
      if (Gx.transition) {
        var p = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
        Uo.fillStyle = sf(15, 77, 72, 252, 239, 187, p);
      } else {
        Uo.fillStyle = sh.ΔⵠᐃᐃⲆⲆΔ[Gx.time];
      }
      Uo.fillRect(r, s, b, t);
    } else {
      if (Gx.transition) {
        p = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
        Uo.fillStyle = sf(k.ΔΔΔ[0], k.ΔΔΔ[1], k.ΔΔΔ[2], k.ΔⲆⵠ[0], k.ΔⲆⵠ[1], k.ΔⲆⵠ[2], p);
      } else {
        Uo.fillStyle = k.ᐃΔᐃⲆᐃ[Gx.time];
      }
      Uo.fillRect(r, s, b, t);
    }
  }
  function tf(a, b) {
    if (Gx.transition) {
      Uo.globalAlpha = 1;
      a.ⲆⵠⵠⲆⵠ(b);
      Gx.time = Gx.time ? 0 : 1;
      Uo.globalAlpha = 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
      a.ⲆⵠⵠⲆⵠ(b);
      Gx.time = Gx.time ? 0 : 1;
      Uo.globalAlpha = 1;
    } else {
      a.ⲆⵠⵠⲆⵠ(b);
    }
  }
  function nf() {
    Uo.globalAlpha = 1;
    if (Gx.transition) {
      var a = Gx.ⵠⵠⲆⲆ.ⲆΔᐃ();
    }
    Gx.ᐃΔΔΔᐃⲆⵠⵠΔ(-Hx.ΔΔⲆ.x, -Hx.ΔΔⲆ.y);
    Ew = Math.max(Math.floor(-Hx.ΔΔⲆ.x / Gx.ᐃᐃΔⵠΔᐃⵠ) - 5, 0);
    Fw = Math.min(Math.floor((-Hx.ΔΔⲆ.x + Hx.ΔΔⲆ.w) / Gx.ᐃᐃΔⵠΔᐃⵠ) + 4, Gx.ⵠᐃΔΔΔ - 1);
    Gw = Math.max(Math.floor(-Hx.ΔΔⲆ.y / Gx.ᐃⲆᐃᐃⲆᐃⵠ) - 3, 0);
    Hw = Math.min(Math.floor((-Hx.ΔΔⲆ.y + Hx.ΔΔⲆ.Ⲇᐃⵠ) / Gx.ᐃⲆᐃᐃⲆᐃⵠ) + 3, Gx.ⲆΔⲆΔΔ - 1);
    (function () {
      for (var c = Gx.ᐃΔⲆΔⵠ.length - 1; c >= 0; c--) {
        var f = Gx.ᐃΔⲆΔⵠ[c];
        if (Gx.ⵠⵠⵠⵠΔ === f.ΔⵠΔ) {
          var j = Gx.ⲆᐃⲆⲆⲆ[f.ΔⵠΔ];
          if (f.x1 - 230 - Yo <= -Hx.ΔΔⲆ.x && f.x2 + 330 >= -Hx.ΔΔⲆ.x && -Hx.ΔΔⲆ.y >= f.y1 - jq && f.y2 + 100 >= -Hx.ΔΔⲆ.y) {
            var k = f.x2;
            if (Gx.ⵠⵠⵠⵠΔ !== f.ΔⵠΔ) {
              k -= 610;
            }
            var m = f.x1;
            if (Gx.ⵠⵠⵠⵠΔ !== f.ΔⵠΔ) {
              m += 610;
            }
            var p = f.y2;
            if (Gx.ⵠⵠⵠⵠΔ !== f.ΔⵠΔ) {
              p -= 610;
            }
            var q = f.y1;
            if (f.ΔⵠΔ !== Gx.ⵠⵠⵠⵠΔ) {
              q += 610;
            }
            if (Gx.transition) {
              var w = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
              Uo.fillStyle = sf(j.ΔΔΔ[0], j.ΔΔΔ[1], j.ΔΔΔ[2], j.ΔⲆⵠ[0], j.ΔⲆⵠ[1], j.ΔⲆⵠ[1], w);
            } else {
              Uo.fillStyle = j.ᐃΔᐃⲆᐃ[Gx.time];
            }
            var x = Math.max(Hx.ΔΔⲆ.x + m - 2 - 230, 0);
            var y = Math.max(-Hx.ΔΔⲆ.x + Yo - k - 330 - 2, 0);
            var z = Math.max(Hx.ΔΔⲆ.y + q - 2, 0);
            var A = Math.max(-Hx.ΔΔⲆ.y + jq - p - 100 - 2, 0);
            Uo.beginPath();
            Uo.fillRect(x, z, Yo - y - x, jq - z - A);
          }
        }
      }
      for (c = Gx.ᐃΔⲆΔⵠ.length - 1; c >= 0; c--) {
        f = Gx.ᐃΔⲆΔⵠ[c];
        if (Gx.ⵠⵠⵠⵠΔ !== f.ΔⵠΔ) {
          k = f.x2;
          if (f.ΔⵠΔ !== Gx.ⵠⵠⵠⵠΔ) {
            k -= 400;
          }
          m = f.x1;
          if (Gx.ⵠⵠⵠⵠΔ !== f.ΔⵠΔ) {
            m += 400;
          }
          p = f.y2;
          if (f.ΔⵠΔ !== Gx.ⵠⵠⵠⵠΔ) {
            p -= 300;
          }
          q = f.y1;
          if (Gx.ⵠⵠⵠⵠΔ !== f.ΔⵠΔ) {
            q += 300;
          }
          if ((f.ᐃⵠⲆ & 8) === 0 && k - Yo + 120 <= -Hx.ΔΔⲆ.x && k + 820 >= -Hx.ΔΔⲆ.x && -Hx.ΔΔⲆ.y >= q + 88 - jq && p + 50 >= -Hx.ΔΔⲆ.y) {
            Lw(k, q + 88, p - 88, Hx.ⲆⵠⲆⵠ[0], Gx.ⲆᐃⲆⲆⲆ[f.ΔⵠΔ], f.ᐃⵠⲆ & 8);
            Pw(k, q + 88, p - 88, Hx.ⲆⵠⲆⵠ[0], Gx.ⲆᐃⲆⲆⲆ[f.ΔⵠΔ], f.ᐃⵠⲆ & 8);
          }
          if (!(f.ᐃⵠⲆ & 4) && m - Yo - 700 <= -Hx.ΔΔⲆ.x && m - 20 >= -Hx.ΔΔⲆ.x && q + 88 - jq <= -Hx.ΔΔⲆ.y && p + 50 >= -Hx.ΔΔⲆ.y) {
            bf(m, q + 88, p - 88, Hx.ⲆⵠⲆⵠ[1], Gx.ⲆᐃⲆⲆⲆ[f.ΔⵠΔ], f.ᐃⵠⲆ & 4);
            Rw(m, q + 88, p - 88, Hx.ⲆⵠⲆⵠ[1], Gx.ⲆᐃⲆⲆⲆ[f.ΔⵠΔ], f.ᐃⵠⲆ & 4);
          }
          if (!(f.ᐃⵠⲆ & 2) && m - 235 - Yo <= -Hx.ΔΔⲆ.x && -Hx.ΔΔⲆ.x <= k + 350 && p - jq - 275 <= -Hx.ΔΔⲆ.y && p + 490 >= -Hx.ΔΔⲆ.y) {
            Jw(p - 230, m - 230, k + 230, Hx.ⲆⵠⲆⵠ[2], Gx.ⲆᐃⲆⲆⲆ[f.ΔⵠΔ], f.ᐃⵠⲆ & 2);
            Nw(p - 230, m - 230, k + 230, Hx.ⲆⵠⲆⵠ[2], Gx.ⲆᐃⲆⲆⲆ[f.ΔⵠΔ], f.ᐃⵠⲆ & 2);
          }
          if (!(f.ᐃⵠⲆ & 1) && -Hx.ΔΔⲆ.x >= m - 235 - Yo && k + 350 >= -Hx.ΔΔⲆ.x && -Hx.ΔΔⲆ.y >= q - jq - 390 && -Hx.ΔΔⲆ.y <= q + 315) {
            ef(q + 310, m - 230, k + 230, Hx.ⲆⵠⲆⵠ[3], Gx.ⲆᐃⲆⲆⲆ[f.ΔⵠΔ], f.ᐃⵠⲆ & 1);
            uf(q + 310, m - 230, k + 230, Hx.ⲆⵠⲆⵠ[3], Gx.ⲆᐃⲆⲆⲆ[f.ΔⵠΔ], f.ᐃⵠⲆ & 1);
          }
        }
      }
      for (c = Gx.ᐃΔⲆΔⵠ.length - 1; c >= 0; c--) {
        f = Gx.ᐃΔⲆΔⵠ[c];
        if (Gx.ⵠⵠⵠⵠΔ !== f.ΔⵠΔ) {
          k = f.x2;
          if (Gx.ⵠⵠⵠⵠΔ !== f.ΔⵠΔ) {
            k -= 400;
          }
          m = f.x1;
          if (f.ΔⵠΔ !== Gx.ⵠⵠⵠⵠΔ) {
            m += 400;
          }
          p = f.y2;
          if (f.ΔⵠΔ !== Gx.ⵠⵠⵠⵠΔ) {
            p -= 300;
          }
          q = f.y1;
          if (Gx.ⵠⵠⵠⵠΔ !== f.ΔⵠΔ) {
            q += 300;
          }
          if ((f.ᐃⵠⲆ & 8) !== 0 && k - Yo + 120 <= -Hx.ΔΔⲆ.x && -Hx.ΔΔⲆ.x <= k + 820 && -Hx.ΔΔⲆ.y >= q + 88 - jq && -Hx.ΔΔⲆ.y <= p + 50) {
            Lw(k, q + 88, p - 88, Hx.ⲆⵠⲆⵠ[0], Gx.ⲆᐃⲆⲆⲆ[f.ΔⵠΔ], f.ᐃⵠⲆ & 8);
          }
          if ((f.ᐃⵠⲆ & 4) !== 0 && m - Yo - 700 <= -Hx.ΔΔⲆ.x && m - 20 >= -Hx.ΔΔⲆ.x && q + 88 - jq <= -Hx.ΔΔⲆ.y && -Hx.ΔΔⲆ.y <= p + 50) {
            bf(m, q + 88, p - 88, Hx.ⲆⵠⲆⵠ[1], Gx.ⲆᐃⲆⲆⲆ[f.ΔⵠΔ], f.ᐃⵠⲆ & 4);
          }
          if (f.ᐃⵠⲆ & 2 && -Hx.ΔΔⲆ.x >= m - 235 - Yo && k + 350 >= -Hx.ΔΔⲆ.x && p - jq - 275 <= -Hx.ΔΔⲆ.y && p + 490 >= -Hx.ΔΔⲆ.y) {
            Jw(p - 230, m - 230, k + 230, Hx.ⲆⵠⲆⵠ[2], Gx.ⲆᐃⲆⲆⲆ[f.ΔⵠΔ], f.ᐃⵠⲆ & 2);
          }
          if ((f.ᐃⵠⲆ & 1) !== 0 && -Hx.ΔΔⲆ.x >= m - 235 - Yo && k + 350 >= -Hx.ΔΔⲆ.x && q - jq - 390 <= -Hx.ΔΔⲆ.y && q + 315 >= -Hx.ΔΔⲆ.y) {
            ef(q + 310, m - 230, k + 230, Hx.ⲆⵠⲆⵠ[3], Gx.ⲆᐃⲆⲆⲆ[f.ΔⵠΔ], f.ᐃⵠⲆ & 1);
          }
        }
      }
      for (c = Gx.ᐃΔⲆΔⵠ.length - 1; c >= 0; c--) {
        f = Gx.ᐃΔⲆΔⵠ[c];
        if (Gx.ⵠⵠⵠⵠΔ !== f.ΔⵠΔ) {
          j = Gx.ⲆᐃⲆⲆⲆ[f.ΔⵠΔ];
          if (-Hx.ΔΔⲆ.x >= f.x1 - 230 - Yo && -Hx.ΔΔⲆ.x <= f.x2 + 330 && f.y1 - jq <= -Hx.ΔΔⲆ.y && f.y2 + 100 >= -Hx.ΔΔⲆ.y) {
            k = f.x2;
            if (f.ΔⵠΔ !== Gx.ⵠⵠⵠⵠΔ) {
              if ((f.ᐃⵠⲆ & 8) === 0) {
                k -= 414;
              } else {
                k -= 610;
              }
            }
            m = f.x1;
            if (f.ΔⵠΔ !== Gx.ⵠⵠⵠⵠΔ) {
              if (f.ᐃⵠⲆ & 4) {
                m += 610;
              } else {
                m += 414;
              }
            }
            p = f.y2;
            if (Gx.ⵠⵠⵠⵠΔ !== f.ΔⵠΔ) {
              if ((f.ᐃⵠⲆ & 2) === 0) {
                p -= 414;
              } else {
                p -= 610;
              }
            }
            q = f.y1;
            if (f.ΔⵠΔ !== Gx.ⵠⵠⵠⵠΔ) {
              if (f.ᐃⵠⲆ & 1) {
                q += 610;
              } else {
                q += 414;
              }
            }
            if (Gx.transition) {
              w = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
              Uo.fillStyle = sf(j.ΔΔΔ[0], j.ΔΔΔ[1], j.ΔΔΔ[2], j.ΔⲆⵠ[0], j.ΔⲆⵠ[1], j.ΔⲆⵠ[2], w);
            } else {
              Uo.fillStyle = j.ᐃΔᐃⲆᐃ[Gx.time];
            }
            x = Math.max(Hx.ΔΔⲆ.x + m - 2 - 230, 0);
            y = Math.max(-Hx.ΔΔⲆ.x + Yo - k - 330 - 2, 0);
            z = Math.max(Hx.ΔΔⲆ.y + q - 2, 0);
            A = Math.max(-Hx.ΔΔⲆ.y + jq - p - 100 - 2, 0);
            Uo.beginPath();
            Uo.fillRect(x, z, Yo - y - x, jq - z - A);
          }
        }
      }
      if (Fx.ⵠⲆᐃᐃᐃ) {
        df(yw, Gw, Hw, Ew, Fw, 695, "isl", 2);
        df(yw, Gw, Hw, Ew, Fw, 694, "isl", 2);
      }
      df(Dw, Gw, Hw, Ew, Fw, 692, "isl", 2);
      if (Fx.ⵠⲆᐃᐃᐃ) {
        df(Bw, Gw, Hw, Ew, Fw, 243, "de");
      }
      var B = Gx.ᐃⲆΔ[0];
      for (c = 0; B.length > c; c++) {
        for (var b = B[c], C = 0; b.ΔⲆΔΔⲆ.length > C; C++) {
          Sw(b.ΔⲆΔΔⲆ[C]);
        }
      }
      if ((nv += Ox * 40) > 60) {
        nv -= 60;
      }
      df(vv, Gw, Hw, Ew, Fw, 1024, "r", 0);
      c = 0;
      for (; Gx.ᐃΔⲆΔⵠ.length > c; c++) {
        if ((f = Gx.ᐃΔⲆΔⵠ[c]).ΔⵠΔ !== Gx.ⵠⵠⵠⵠΔ) {
          k = f.x2;
          if (Gx.ⵠⵠⵠⵠΔ !== f.ΔⵠΔ) {
            k -= 400;
          }
          m = f.x1;
          if (Gx.ⵠⵠⵠⵠΔ !== f.ΔⵠΔ) {
            m += 400;
          }
          p = f.y2;
          if (f.ΔⵠΔ !== Gx.ⵠⵠⵠⵠΔ) {
            p -= 300;
          }
          q = f.y1;
          if (Gx.ⵠⵠⵠⵠΔ !== f.ΔⵠΔ) {
            q += 300;
          }
          if ((f.ᐃⵠⲆ & 8) > 0 && k - Yo + 120 <= -Hx.ΔΔⲆ.x && k + 820 >= -Hx.ΔΔⲆ.x && q + 88 - jq <= -Hx.ΔΔⲆ.y && p + 50 >= -Hx.ΔΔⲆ.y) {
            Pw(k, q + 88, p - 88, Hx.ⲆⵠⲆⵠ[0], Gx.ⲆᐃⲆⲆⲆ[f.ΔⵠΔ], f.ᐃⵠⲆ & 8);
          }
          if ((f.ᐃⵠⲆ & 4) > 0 && -Hx.ΔΔⲆ.x >= m - Yo - 700 && m - 20 >= -Hx.ΔΔⲆ.x && -Hx.ΔΔⲆ.y >= q + 88 - jq && -Hx.ΔΔⲆ.y <= p + 50) {
            Rw(m, q + 88, p - 88, Hx.ⲆⵠⲆⵠ[1], Gx.ⲆᐃⲆⲆⲆ[f.ΔⵠΔ], f.ᐃⵠⲆ & 4);
          }
          if ((f.ᐃⵠⲆ & 2) > 0 && m - 235 - Yo <= -Hx.ΔΔⲆ.x && -Hx.ΔΔⲆ.x <= k + 350 && p - jq - 275 <= -Hx.ΔΔⲆ.y && p + 490 >= -Hx.ΔΔⲆ.y) {
            Nw(p - 230, m - 230, k + 230, Hx.ⲆⵠⲆⵠ[2], Gx.ⲆᐃⲆⲆⲆ[f.ΔⵠΔ], f.ᐃⵠⲆ & 2);
          }
          if ((f.ᐃⵠⲆ & 1) > 0 && m - 235 - Yo <= -Hx.ΔΔⲆ.x && k + 350 >= -Hx.ΔΔⲆ.x && q - jq - 390 <= -Hx.ΔΔⲆ.y && -Hx.ΔΔⲆ.y <= q + 315) {
            uf(q + 310, m - 230, k + 230, Hx.ⲆⵠⲆⵠ[3], Gx.ⲆᐃⲆⲆⲆ[f.ΔⵠΔ], f.ᐃⵠⲆ & 1);
          }
        }
      }
    })();
    (function () {
      var w = Ew;
      var e = Fw;
      var i = Gw;
      var t = Hw;
      if (Fx.ⵠⲆᐃᐃᐃ) {
        df(Dw, i, t, w, e, 621, "l", 2);
      }
      if (Fx.ⵠⲆᐃᐃᐃ) {
        df(Dw, i, t, w, e, sh.ⲆⲆⲆⲆΔ, "la", 5);
      }
      df(Dw, i, t, w, e, 203, "la", 5);
      df(yw, i, t, w, e, 620, "l", 2);
      if (Fx.ⵠⲆᐃᐃᐃ) {
        df(Cw, i, t, w, e, 203, "la", 5);
        df(yw, i, t, w, e, 619, "l", 2);
      }
      df(Dw, i, t, w, e, 1052, "ma", 4);
      for (var n = Gx.ᐃⲆΔ[76], z = 0; z < n.length; z++) {
        n[z].ⵠⲆΔΔᐃⵠⲆ();
      }
      var L = Gx.ᐃⲆΔ[0];
      for (z = 0; L.length > z; z++) {
        for (var aa = L[z], ba = 0; ba < aa.ᐃᐃΔⲆΔ.length; ba++) {
          Qw(aa.ᐃᐃΔⲆΔ[ba]);
        }
      }
      var ca = Gx.ᐃⲆΔ[30];
      for (z = 0; z < ca.length; z++) {
        Iw(ca[z], 125);
        ca[z].ⲆᐃΔⲆᐃ(ca[z].info);
      }
      var g = Gx.ᐃⲆΔ[18];
      for (z = 0; z < g.length; z++) {
        if (g[z].action == 2) {
          hf(g[z]);
        }
      }
      var da = Gx.ᐃⲆΔ[1];
      for (z = 0; da.length > z; z++) {
        hf(da[z], 113);
      }
      var ea = Gx.ᐃⲆΔ[22];
      for (z = 0; ea.length > z; z++) {
        hf(ea[z]);
      }
      var fa = Gx.ᐃⲆΔ[23];
      for (z = 0; fa.length > z; z++) {
        hf(fa[z]);
      }
      var ha = Gx.ᐃⲆΔ[6];
      for (z = 0; z < ha.length; z++) {
        hf(ha[z], 118);
      }
      var v = Gx.ᐃⲆΔ[36];
      for (z = 0; v.length > z; z++) {
        Iw(v[z]);
      }
      var m = Gx.ᐃⲆΔ[33];
      for (z = 0; m.length > z; z++) {
        Iw(m[z], 141);
      }
      var c = Gx.ᐃⲆΔ[3];
      for (z = 0; z < c.length; z++) {
        hf(c[z]);
      }
      c = Gx.ᐃⲆΔ[43];
      z = 0;
      for (; c.length > z; z++) {
        hf(c[z]);
      }
      c = Gx.ᐃⲆΔ[3];
      z = 0;
      for (; z < c.length; z++) {
        tf(c[z]);
      }
      var ia = Gx.ᐃⲆΔ[44];
      for (z = 0; z < ia.length; z++) {
        if (!(ia[z].info & 15) || ia[z].info === 10) {
          Iw(ia[z]);
        }
      }
      var ja = Gx.ᐃⲆΔ[54];
      for (z = 0; ja.length > z; z++) {
        if ((ja[z].info & 15) === 0 || ja[z].info === 10) {
          Iw(ja[z]);
        }
      }
      var ka = Gx.ᐃⲆΔ[55];
      for (z = 0; z < ka.length; z++) {
        if (!(ka[z].info & 15) || ka[z].info === 10) {
          Iw(ka[z]);
        }
      }
      var la = Gx.ᐃⲆΔ[79];
      for (z = 0; la.length > z; z++) {
        Iw(la[z], 132);
      }
      var ma = Gx.ᐃⲆΔ[39];
      for (z = 0; ma.length > z; z++) {
        if (!(ma[z].info & 15) || ma[z].info === 10) {
          Iw(ma[z]);
        }
      }
      var na = Gx.ᐃⲆΔ[40];
      for (z = 0; z < na.length; z++) {
        if ((na[z].info & 15) === 0 || na[z].info === 10) {
          Iw(na[z]);
        }
      }
      var oa = Gx.ᐃⲆΔ[37];
      for (z = 0; oa.length > z; z++) {
        if (!(oa[z].info & 15) || oa[z].info === 10) {
          Iw(oa[z]);
        }
      }
      la = Gx.ᐃⲆΔ[31];
      z = 0;
      for (; la.length > z; z++) {
        Iw(la[z]);
      }
      var pa = Gx.ᐃⲆΔ[86];
      for (z = 0; z < pa.length; z++) {
        Iw(pa[z], 250, 729);
      }
      var x = Gx.ᐃⲆΔ[82];
      for (z = 0; z < x.length; z++) {
        Iw(x[z], 250, 729);
      }
      var J = Gx.ᐃⲆΔ[87];
      for (z = 0; z < J.length; z++) {
        Iw(J[z], 854, 859);
      }
      var M = Gx.ᐃⲆΔ[45];
      for (z = 0; z < M.length; z++) {
        if (M[z].info & 1) {
          Iw(M[z], 336);
        }
      }
      M = Gx.ᐃⲆΔ[46];
      z = 0;
      for (; z < M.length; z++) {
        if (M[z].info & 1) {
          Iw(M[z], 373);
        }
      }
      M = Gx.ᐃⲆΔ[47];
      z = 0;
      for (; M.length > z; z++) {
        if (M[z].info) {
          Iw(M[z], 376);
        }
      }
      M = Gx.ᐃⲆΔ[48];
      z = 0;
      for (; M.length > z; z++) {
        if (M[z].info) {
          Iw(M[z], 379);
        }
      }
      M = Gx.ᐃⲆΔ[49];
      z = 0;
      for (; M.length > z; z++) {
        if (M[z].info) {
          Iw(M[z], 500);
        }
      }
      M = Gx.ᐃⲆΔ[53];
      z = 0;
      for (; z < M.length; z++) {
        if (M[z].info) {
          Iw(M[z], 376);
        }
      }
      M = Gx.ᐃⲆΔ[10];
      z = 0;
      for (; M.length > z; z++) {
        if (M[z].info & 1) {
          Iw(M[z], 336);
        }
      }
      M = Gx.ᐃⲆΔ[15];
      z = 0;
      for (; M.length > z; z++) {
        if (M[z].info & 1) {
          Iw(M[z], 373);
        }
      }
      M = Gx.ᐃⲆΔ[16];
      z = 0;
      for (; z < M.length; z++) {
        if (M[z].info) {
          Iw(M[z], 376);
        }
      }
      M = Gx.ᐃⲆΔ[17];
      z = 0;
      for (; z < M.length; z++) {
        if (M[z].info) {
          Iw(M[z], 379);
        }
      }
      M = Gx.ᐃⲆΔ[21];
      z = 0;
      for (; z < M.length; z++) {
        if (M[z].info) {
          Iw(M[z], 500);
        }
      }
      M = Gx.ᐃⲆΔ[51];
      z = 0;
      for (; z < M.length; z++) {
        if (M[z].info) {
          Iw(M[z], 376);
        }
      }
      var qa = Gx.ᐃⲆΔ[80];
      for (z = 0; z < qa.length; z++) {
        Iw(qa[z], 264, 322);
      }
      var E = Gx.ᐃⲆΔ[41];
      for (z = 0; z < E.length; z++) {
        Iw(E[z], 198);
      }
      n = Gx.ᐃⲆΔ[76];
      z = 0;
      for (; n.length > z; z++) {
        Iw(n[z], sh.ᐃᐃΔⲆⲆᐃⵠ, sh.ᐃΔⵠΔΔⵠΔΔⲆ);
      }
      var ra = Gx.ᐃⲆΔ[91];
      for (z = 0; z < ra.length; z++) {
        if (ra[z].ΔᐃᐃᐃⲆⵠⵠ === 0) {
          Iw(ra[z]);
        }
      }
      L = Gx.ᐃⲆΔ[0];
      z = 0;
      for (; L.length > z; z++) {
        aa = L[z];
        if (L[z].ΔᐃⲆᐃΔ !== 227 && L[z].ΔᐃⲆᐃΔ !== 228 && L[z].ΔᐃⲆᐃΔ !== 229 && L[z].ΔᐃⲆᐃΔ !== 230 && L[z].ΔᐃⲆᐃΔ !== 91) {
          if (aa.ⵠⵠⲆⲆᐃⵠⵠ === 0) {
            if (aa.ᐃⲆⲆᐃⲆⲆⲆ > 0.001) {
              aa.ᐃⲆⲆᐃⲆⲆⲆ = ᐃⵠⵠ.ⲆⵠᐃΔⲆ(aa.ᐃⲆⲆᐃⲆⲆⲆ, 0, 0.018);
              var sa = 1 + Math.min(1, Math.max(aa.ᐃⲆⲆᐃⲆⲆⲆ, 0) / 100) * 0.18;
              Uo.save();
              Uo.scale(sa, sa);
              Hx.ΔΔⲆ.x /= sa;
              Hx.ΔΔⲆ.y /= sa;
              aa.x /= sa;
              aa.y /= sa;
              aa.r.x /= sa;
              aa.r.y /= sa;
              aa.ⲆΔΔⲆⵠΔⲆ();
              aa.ⵠᐃⲆᐃ();
              Hx.ΔΔⲆ.x *= sa;
              Hx.ΔΔⲆ.y *= sa;
              aa.x *= sa;
              aa.y *= sa;
              aa.r.x *= sa;
              aa.r.y *= sa;
              Uo.restore();
            } else {
              aa.ΔᐃᐃᐃⲆⵠⵠ = 0;
              aa.ⲆΔΔⲆⵠΔⲆ();
              aa.ⵠᐃⲆᐃ();
            }
          }
        } else if (aa.ΔΔΔΔⲆ <= 180) {
          Uo.save();
          sa = 1 + Math.min(1, Math.max(aa.ΔΔᐃⲆΔ - 30, 0) / 180) * 0.35;
          Uo.scale(sa, sa);
          Hx.ΔΔⲆ.x /= sa;
          Hx.ΔΔⲆ.y /= sa;
          aa.x /= sa;
          aa.y /= sa;
          aa.r.x /= sa;
          aa.r.y /= sa;
          aa.ΔᐃᐃᐃⲆⵠⵠ = 0;
          aa.ⲆΔΔⲆⵠΔⲆ();
          aa.ⵠᐃⲆᐃ();
          Hx.ΔΔⲆ.x *= sa;
          Hx.ΔΔⲆ.y *= sa;
          aa.x *= sa;
          aa.y *= sa;
          aa.r.x *= sa;
          aa.r.y *= sa;
          Uo.restore();
        }
      }
      E = Gx.ᐃⲆΔ[41];
      z = 0;
      for (; E.length > z; z++) {
        Iw(E[z], 913);
      }
      var ta = Gx.ᐃⲆΔ[67];
      for (z = 0; z < ta.length; z++) {
        Iw(ta[z]);
      }
      var Q = Gx.ᐃⲆΔ[62];
      for (z = 0; Q.length > z; z++) {
        Iw(Q[z], 419, 461);
      }
      var _ = Gx.ᐃⲆΔ[70];
      for (z = 0; _.length > z; z++) {
        Iw(_[z]);
      }
      var F = Gx.ᐃⲆΔ[60];
      for (z = 0; z < F.length; z++) {
        Iw(F[z], 299, 326);
      }
      var R = Gx.ᐃⲆΔ[72];
      for (z = 0; z < R.length; z++) {
        Iw(R[z], 232, 1077);
      }
      var j = Gx.ᐃⲆΔ[73];
      for (z = 0; z < j.length; z++) {
        Iw(j[z], 233, 1092);
      }
      ia = Gx.ᐃⲆΔ[44];
      z = 0;
      for (; ia.length > z; z++) {
        if ((ia[z].info & 15) !== 0 && ia[z].info !== 10) {
          Iw(ia[z]);
        }
      }
      ja = Gx.ᐃⲆΔ[54];
      z = 0;
      for (; z < ja.length; z++) {
        if (ja[z].info & 15 && ja[z].info !== 10) {
          Iw(ja[z]);
        }
      }
      ka = Gx.ᐃⲆΔ[89];
      z = 0;
      for (; ka.length > z; z++) {
        Iw(ka[z], 239);
      }
      ka = Gx.ᐃⲆΔ[55];
      z = 0;
      for (; z < ka.length; z++) {
        if ((ka[z].info & 15) !== 0 && ka[z].info !== 10) {
          Iw(ka[z]);
        }
      }
      c = Gx.ᐃⲆΔ[43];
      z = 0;
      for (; c.length > z; z++) {
        tf(c[z]);
      }
      ma = Gx.ᐃⲆΔ[39];
      z = 0;
      for (; ma.length > z; z++) {
        if (ma[z].info & 15 && ma[z].info !== 10) {
          Iw(ma[z]);
        }
      }
      na = Gx.ᐃⲆΔ[40];
      z = 0;
      for (; na.length > z; z++) {
        if (na[z].info & 15 && na[z].info !== 10) {
          Iw(na[z]);
        }
      }
      oa = Gx.ᐃⲆΔ[37];
      z = 0;
      for (; z < oa.length; z++) {
        if ((oa[z].info & 15) !== 0 && oa[z].info !== 10) {
          Iw(oa[z]);
        }
      }
      var W = Gx.ᐃⲆΔ[81];
      for (z = 0; W.length > z; z++) {
        Iw(W[z], 691, 697);
      }
      var G = Gx.ᐃⲆΔ[66];
      for (z = 0; z < G.length; z++) {
        Iw(G[z], 637, 687);
      }
      var N = Gx.ᐃⲆΔ[65];
      for (z = 0; N.length > z; z++) {
        Iw(N[z], 673, 688);
      }
      var q = Gx.ᐃⲆΔ[61];
      for (z = 0; q.length > z; z++) {
        Iw(q[z], 260, 333);
      }
      var O = Gx.ᐃⲆΔ[88];
      for (z = 0; z < O.length; z++) {
        Iw(O[z], 1033, 1034);
      }
      var H = Gx.ᐃⲆΔ[63];
      for (z = 0; H.length > z; z++) {
        Iw(H[z], 445, 462);
      }
      var U = Gx.ᐃⲆΔ[77];
      for (z = 0; z < U.length; z++) {
        Iw(U[z]);
      }
      var Y = Gx.ᐃⲆΔ[68];
      for (z = 0; Y.length > z; z++) {
        Iw(Y[z], 918, 919);
      }
      var K = Gx.ᐃⲆΔ[71];
      for (z = 0; z < K.length; z++) {
        Iw(K[z]);
      }
      var V = Gx.ᐃⲆΔ[78];
      for (z = 0; V.length > z; z++) {
        Iw(V[z], 1218, 1219);
      }
      var X = Gx.ᐃⲆΔ[64];
      for (z = 0; X.length > z; z++) {
        if (X[z].scale === 1) {
          Iw(X[z], 449, 463);
        }
      }
      X = Gx.ᐃⲆΔ[69];
      z = 0;
      for (; X.length > z; z++) {
        if (X[z].scale === 1) {
          Iw(X[z], 450, 464);
        }
      }
      var ua = Gx.ᐃⲆΔ[11];
      for (z = 0; z < ua.length; z++) {
        Iw(ua[z]);
      }
      var va = Gx.ᐃⲆΔ[2];
      for (z = 0; va.length > z; z++) {
        Iw(va[z], 114);
      }
      g = Gx.ᐃⲆΔ[18];
      z = 0;
      for (; g.length > z; z++) {
        Iw(g[z]);
      }
      var wa = Gx.ᐃⲆΔ[34];
      for (z = 0; z < wa.length; z++) {
        Iw(wa[z]);
      }
      M = Gx.ᐃⲆΔ[10];
      z = 0;
      for (; M.length > z; z++) {
        if (!(M[z].info & 1)) {
          Iw(M[z], 166);
        }
        M[z].ⲆᐃΔⲆᐃ(M[z].info >> 1);
      }
      M = Gx.ᐃⲆΔ[15];
      z = 0;
      for (; M.length > z; z++) {
        if (!(M[z].info & 1)) {
          Iw(M[z], 171);
        }
        M[z].ⲆᐃΔⲆᐃ(M[z].info >> 1);
      }
      M = Gx.ᐃⲆΔ[16];
      z = 0;
      for (; M.length > z; z++) {
        if (!(M[z].info & 1)) {
          Iw(M[z], 172);
        }
        M[z].ⲆᐃΔⲆᐃ(M[z].info >> 1);
      }
      M = Gx.ᐃⲆΔ[17];
      z = 0;
      for (; z < M.length; z++) {
        if (!(M[z].info & 1)) {
          Iw(M[z], 173);
        }
        M[z].ⲆᐃΔⲆᐃ(M[z].info >> 1);
      }
      M = Gx.ᐃⲆΔ[21];
      z = 0;
      for (; z < M.length; z++) {
        if (!(M[z].info & 1)) {
          Iw(M[z], 124);
        }
        M[z].ⲆᐃΔⲆᐃ(M[z].info >> 1);
      }
      M = Gx.ᐃⲆΔ[51];
      z = 0;
      for (; z < M.length; z++) {
        if (!(M[z].info & 1)) {
          Iw(M[z], 218);
        }
        M[z].ⲆᐃΔⲆᐃ(M[z].info >> 1);
      }
      M = Gx.ᐃⲆΔ[45];
      z = 0;
      for (; M.length > z; z++) {
        if (!(M[z].info & 1)) {
          Iw(M[z], 212);
        }
        M[z].ⲆᐃΔⲆᐃ(M[z].info >> 1);
      }
      M = Gx.ᐃⲆΔ[46];
      z = 0;
      for (; z < M.length; z++) {
        if (!(M[z].info & 1)) {
          Iw(M[z], 213);
        }
        M[z].ⲆᐃΔⲆᐃ(M[z].info >> 1);
      }
      M = Gx.ᐃⲆΔ[47];
      z = 0;
      for (; z < M.length; z++) {
        if (!(M[z].info & 1)) {
          Iw(M[z], 214);
        }
        M[z].ⲆᐃΔⲆᐃ(M[z].info >> 1);
      }
      M = Gx.ᐃⲆΔ[48];
      z = 0;
      for (; z < M.length; z++) {
        if (!(M[z].info & 1)) {
          Iw(M[z], 215);
        }
        M[z].ⲆᐃΔⲆᐃ(M[z].info >> 1);
      }
      M = Gx.ᐃⲆΔ[49];
      z = 0;
      for (; M.length > z; z++) {
        if (!(M[z].info & 1)) {
          Iw(M[z], 216);
        }
        M[z].ⲆᐃΔⲆᐃ(M[z].info >> 1);
      }
      M = Gx.ᐃⲆΔ[53];
      z = 0;
      for (; M.length > z; z++) {
        if (!(M[z].info & 1)) {
          Iw(M[z], 220);
        }
        M[z].ⲆᐃΔⲆᐃ(M[z].info >> 1);
      }
      var xa = Gx.ᐃⲆΔ[4];
      for (z = 0; xa.length > z; z++) {
        Iw(xa[z], 162);
        xa[z].ⲆᐃΔⲆᐃ(xa[z].info);
      }
      xa = Gx.ᐃⲆΔ[7];
      z = 0;
      for (; xa.length > z; z++) {
        Iw(xa[z], 163);
        xa[z].ⲆᐃΔⲆᐃ(xa[z].info);
      }
      xa = Gx.ᐃⲆΔ[8];
      z = 0;
      for (; z < xa.length; z++) {
        Iw(xa[z], 164);
        xa[z].ⲆᐃΔⲆᐃ(xa[z].info);
      }
      xa = Gx.ᐃⲆΔ[9];
      z = 0;
      for (; xa.length > z; z++) {
        Iw(xa[z], 165);
        xa[z].ⲆᐃΔⲆᐃ(xa[z].info);
      }
      xa = Gx.ᐃⲆΔ[19];
      z = 0;
      for (; xa.length > z; z++) {
        Iw(xa[z], 122);
        xa[z].ⲆᐃΔⲆᐃ(xa[z].info);
      }
      xa = Gx.ᐃⲆΔ[50];
      z = 0;
      for (; z < xa.length; z++) {
        Iw(xa[z], 217);
        xa[z].ⲆᐃΔⲆᐃ(xa[z].info);
      }
      var ya = Gx.ᐃⲆΔ[5];
      for (z = 0; ya.length > z; z++) {
        Iw(ya[z], 160);
        ya[z].ⲆᐃΔⲆᐃ(ya[z].info);
      }
      ya = Gx.ᐃⲆΔ[12];
      z = 0;
      for (; ya.length > z; z++) {
        Iw(ya[z], 168);
        ya[z].ⲆᐃΔⲆᐃ(ya[z].info);
      }
      ya = Gx.ᐃⲆΔ[13];
      z = 0;
      for (; ya.length > z; z++) {
        Iw(ya[z], 169);
        ya[z].ⲆᐃΔⲆᐃ(ya[z].info);
      }
      ya = Gx.ᐃⲆΔ[14];
      z = 0;
      for (; ya.length > z; z++) {
        Iw(ya[z], 170);
        ya[z].ⲆᐃΔⲆᐃ(ya[z].info);
      }
      ya = Gx.ᐃⲆΔ[20];
      z = 0;
      for (; ya.length > z; z++) {
        Iw(ya[z], 123);
        ya[z].ⲆᐃΔⲆᐃ(ya[z].info);
      }
      ya = Gx.ᐃⲆΔ[52];
      z = 0;
      for (; ya.length > z; z++) {
        Iw(ya[z], 219);
        ya[z].ⲆᐃΔⲆᐃ(ya[z].info);
      }
      var za = Gx.ᐃⲆΔ[35];
      for (z = 0; za.length > z; z++) {
        var Aa = za[z];
        if (Aa.info > 0) {
          Iw(Aa, 788);
        } else {
          Iw(Aa, 182);
        }
      }
      var Ba = Gx.ᐃⲆΔ[29];
      for (z = 0; Ba.length > z; z++) {
        Iw(Ba[z], 159);
      }
      df(Dw, i, t, w, e, 111, "g", 2);
      df(Dw, i, t, w, e, 415, "gw", 2);
      df(Dw, i, t, w, e, 112, "d", 2);
      df(Dw, i, t, w, e, 416, "dw", 2);
      df(Dw, i, t, w, e, 110, "p", 0);
      df(Dw, i, t, w, e, 241, "m", 2);
      df(Dw, i, t, w, e, 121, "a", 2);
      df(Dw, i, t, w, e, 202, "re", 2);
      df(Dw, i, t, w, e, 679, "cs", 3, 3);
      df(Dw, i, t, w, e, 679, "cs", 2, 2);
      df(Dw, i, t, w, e, 679, "cs", 1, 1);
      df(Dw, i, t, w, e, 679, "cs", 0, 0);
      df(Dw, i, t, w, e, 676, "cs", 3, 3);
      df(Dw, i, t, w, e, 676, "cs", 2, 2);
      df(Dw, i, t, w, e, 676, "cs", 1, 1);
      df(Dw, i, t, w, e, 676, "cs", 0, 0);
      var Ca = Gx.ᐃⲆΔ[100];
      for (z = 0; Ca.length > z; z++) {
        for (ba = 0; Ca[z].info > ba; ba++) {
          Iw(Ca[z].ⵠⵠⵠᐃ[ba], 294);
        }
      }
      df(Dw, i, t, w, e, 108, "s", 2);
      var Da = Gx.ᐃⲆΔ[24];
      for (z = 0; z < Da.length; z++) {
        Iw(Da[z]);
      }
      Da = Gx.ᐃⲆΔ[25];
      z = 0;
      for (; z < Da.length; z++) {
        Iw(Da[z]);
      }
      Da = Gx.ᐃⲆΔ[26];
      z = 0;
      for (; Da.length > z; z++) {
        Iw(Da[z]);
      }
      Da = Gx.ᐃⲆΔ[27];
      z = 0;
      for (; Da.length > z; z++) {
        Iw(Da[z]);
      }
      Da = Gx.ᐃⲆΔ[28];
      z = 0;
      for (; z < Da.length; z++) {
        Iw(Da[z]);
      }
      var Ea = Gx.ᐃⲆΔ[32];
      for (z = 0; Ea.length > z; z++) {
        hf(Ea[z]);
      }
      da = Gx.ᐃⲆΔ[1];
      z = 0;
      for (; z < da.length; z++) {
        tf(da[z]);
      }
      da = Gx.ᐃⲆΔ[6];
      z = 0;
      for (; z < da.length; z++) {
        tf(da[z]);
      }
      g = Gx.ᐃⲆΔ[18];
      z = 0;
      for (; z < g.length; z++) {
        if (g[z].action == 2) {
          tf(g[z]);
        }
      }
      wa = Gx.ᐃⲆΔ[34];
      z = 0;
      for (; z < wa.length; z++) {
        tf(wa[z]);
      }
      ea = Gx.ᐃⲆΔ[22];
      z = 0;
      for (; ea.length > z; z++) {
        tf(ea[z]);
      }
      fa = Gx.ᐃⲆΔ[23];
      z = 0;
      for (; fa.length > z; z++) {
        tf(fa[z]);
        fa[z].ⲆᐃΔⲆᐃ(fa[z].info);
      }
      df(Dw, i, t, w, e, 989, "c", 0);
      df(Dw, i, t, w, e, 109, "t", 5, 4);
      df(Dw, i, t, w, e, 413, "f", 2, 2);
      df(Dw, i, t, w, e, 693, "plm", 0, 0);
      df(Dw, i, t, w, e, 307, "b", 3, 2);
      df(Dw, i, t, w, e, 109, "t", 3, 2);
      df(Dw, i, t, w, e, 307, "b", 1, 0);
      df(Dw, i, t, w, e, 413, "f", 1, 1);
      df(Dw, i, t, w, e, 693, "plm", 1, 1);
      df(Dw, i, t, w, e, 109, "t", 1, 0);
      df(Dw, i, t, w, e, 413, "f", 0, 0);
      df(Dw, i, t, w, e, 693, "plm", 2, 2);
      Ea = Gx.ᐃⲆΔ[32];
      z = 0;
      for (; z < Ea.length; z++) {
        tf(Ea[z]);
      }
      var Fa = Gx.ᐃⲆΔ[56];
      for (z = 0; Fa.length > z; z++) {
        Iw(Fa[z], 221);
      }
      L = Gx.ᐃⲆΔ[0];
      z = 0;
      for (; L.length > z; z++) {
        if ((aa = L[z]).ⵠⵠⲆⲆᐃⵠⵠ === 1 && (aa.ΔΔΔΔⲆ < 180 || aa.ΔᐃⲆᐃΔ !== 227 && aa.ΔᐃⲆᐃΔ !== 228 && aa.ΔᐃⲆᐃΔ !== 91 && aa.ΔᐃⲆᐃΔ !== 229 && aa.ΔᐃⲆᐃΔ !== 230)) {
          aa.ᐃⲆⲆᐃⲆⲆⲆ = ᐃⵠⵠ.ⲆⵠᐃΔⲆ(aa.ᐃⲆⲆᐃⲆⲆⲆ, 100, 0.018);
          sa = 1 + Math.min(1, Math.max(aa.ᐃⲆⲆᐃⲆⲆⲆ, 0) / 100) * 0.18;
          Uo.save();
          Uo.scale(sa, sa);
          Hx.ΔΔⲆ.x /= sa;
          Hx.ΔΔⲆ.y /= sa;
          aa.x /= sa;
          aa.y /= sa;
          aa.r.x /= sa;
          aa.r.y /= sa;
          aa.ⲆΔΔⲆⵠΔⲆ();
          aa.ⵠᐃⲆᐃ();
          Hx.ΔΔⲆ.x *= sa;
          Hx.ΔΔⲆ.y *= sa;
          aa.x *= sa;
          aa.y *= sa;
          aa.r.x *= sa;
          aa.r.y *= sa;
          Uo.restore();
        }
      }
      var Ga = Gx.ᐃⲆΔ[38];
      for (z = 0; Ga.length > z; z++) {
        Iw(Ga[z], 190);
        Ga[z].ⲆᐃΔⲆᐃ(Ga[z].info);
      }
      var Ha = Gx.ᐃⲆΔ[90];
      for (z = 0; z < Ha.length; z++) {
        Iw(Ha[z], 245, 246);
      }
      var Ia = Gx.ᐃⲆΔ[42];
      for (z = 0; z < Ia.length; z++) {
        Iw(Ia[z], 201);
      }
      L = Gx.ᐃⲆΔ[0];
      z = 0;
      for (; L.length > z; z++) {
        aa = L[z];
        if ((aa.ΔᐃⲆᐃΔ === 227 || aa.ΔᐃⲆᐃΔ === 228 || aa.ΔᐃⲆᐃΔ === 91 || aa.ΔᐃⲆᐃΔ === 229 || aa.ΔᐃⲆᐃΔ === 230) && aa.ΔΔΔΔⲆ > 180) {
          aa.ΔᐃᐃᐃⲆⵠⵠ = 1;
          Uo.save();
          sa = 1 + Math.min(1, Math.max(aa.ΔΔᐃⲆΔ - 30, 0) / 180) * 0.35;
          Uo.scale(sa, sa);
          Hx.ΔΔⲆ.x /= sa;
          Hx.ΔΔⲆ.y /= sa;
          aa.x /= sa;
          aa.y /= sa;
          aa.r.x /= sa;
          aa.r.y /= sa;
          aa.ⲆΔΔⲆⵠΔⲆ();
          aa.ⵠᐃⲆᐃ();
          Hx.ΔΔⲆ.x *= sa;
          Hx.ΔΔⲆ.y *= sa;
          aa.x *= sa;
          aa.y *= sa;
          aa.r.x *= sa;
          aa.r.y *= sa;
          Uo.restore();
        }
      }
      ra = Gx.ᐃⲆΔ[91];
      z = 0;
      for (; ra.length > z; z++) {
        if (ra[z].ΔᐃᐃᐃⲆⵠⵠ === 1) {
          Iw(ra[z]);
        }
      }
      X = Gx.ᐃⲆΔ[64];
      z = 0;
      for (; X.length > z; z++) {
        if (X[z].scale > 1) {
          Iw(X[z], 449, 463);
        }
      }
      X = Gx.ᐃⲆΔ[69];
      z = 0;
      for (; X.length > z; z++) {
        if (X[z].scale > 1) {
          Iw(X[z], 450, 464);
        }
      }
      var Ja = Gx.ᐃⲆΔ[74];
      for (z = 0; z < Ja.length; z++) {
        Iw(Ja[z], 235, 1107);
      }
      var Ka = Gx.ᐃⲆΔ[75];
      for (z = 0; z < Ka.length; z++) {
        Iw(Ka[z], 238, 1128);
      }
      if ((ww += Ox * 15) > 60) {
        ww -= 60;
      }
      df(xw, i, t, w, e, 1041, "fo", 2);
      df(xw, i, t, w, e, 244, "fod", 2);
    })();
    if (Fx.ⵠⲆᐃᐃᐃ && Gx.mode !== 2 && Gx.mode !== 4 && Gx.mode !== 5) {
      (function () {
        var a = Hx.ⵠᐃⵠᐃᐃ;
        if (a.ΔⵠⲆⲆⵠ === 0) {
          a.ⵠΔΔᐃⵠ = Math.max(0, a.ⵠΔΔᐃⵠ - Ox / 10);
        } else {
          a.ⵠΔΔᐃⵠ = Math.min(1, a.ⵠΔΔᐃⵠ + Ox / 10);
        }
        for (var b = a.ΔΔⵠᐃΔ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ⲆΔᐃ(d);
          gf(471, d.id, Hx.ΔΔⲆ.x + d.x, Hx.ΔΔⲆ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).ⵠⵠⲆⵠΔ <= 0 || d.x > -Hx.ΔΔⲆ.x + Yo || -Hx.ΔΔⲆ.x - Hx.ΔΔⲆ.w / 2 > d.x || d.y > -Hx.ΔΔⲆ.y + jq) {
            b.splice(c, 1);
          }
        }
        var e = -Hx.ΔΔⲆ.y;
        if (Gx.ⵠⵠⲆⲆΔ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = Hx.ⵠΔΔⵠⲆ;
        if (a.ΔⵠⲆⲆⵠ === 0) {
          a.ⵠΔΔᐃⵠ = Math.max(0, a.ⵠΔΔᐃⵠ - Ox / 10);
        } else {
          a.ⵠΔΔᐃⵠ = Math.min(1, a.ⵠΔΔᐃⵠ + Ox / 10);
        }
        for (var b = a.ΔΔⵠᐃΔ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ⲆΔᐃ(d);
          gf(470, d.id, Hx.ΔΔⲆ.x + d.x, Hx.ΔΔⲆ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          d = b[c];
          if (d.ⵠⵠⲆⵠΔ <= 0 || -Hx.ΔΔⲆ.x + Yo < d.x || -Hx.ΔΔⲆ.x > d.x || -Hx.ΔΔⲆ.y + jq < d.y) {
            b.splice(c, 1);
          }
        }
        var e = -Hx.ΔΔⲆ.y;
        if (Gx.ΔⵠⲆΔΔ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = Hx.ΔᐃⲆΔⲆᐃΔ;
        for (var b = a.ΔΔⵠᐃΔ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ⲆΔᐃ(d);
          gf(942, d.id, Hx.ΔΔⲆ.x + d.x, Hx.ΔΔⲆ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          if ((d = b[c]).ⵠⵠⲆⵠΔ <= 0 || -Hx.ΔΔⲆ.x + Yo < d.x || d.x < -Hx.ΔΔⲆ.x || d.y > -Hx.ΔΔⲆ.y + jq) {
            b.splice(c, 1);
          }
        }
        var e = -Hx.ΔΔⲆ.y;
        if (Gx.ΔⵠΔᐃⲆ > -1000) {
          a.add(e);
        }
      })();
    }
    if (Gx.transition && a) {
      Gx.transition = false;
      Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ = 0;
      Gx.ⵠⵠⲆⲆ.ⲆⲆⵠ = Nh;
    }
  }
  const of = 9203507;
  const af = 9203507 .ΔⵠΔΔⲆⲆᐃΔᐃ;
  const rf = `const ΔⲆΔᐃⵠᐃᐃⲆⲆ = (typeof ⲆⲆΔᐃⵠⵠⲆⵠΔ === "${af}") ? 1 : 0; return ΔⲆΔᐃⵠᐃᐃⲆⲆ;`;
  function sf(b, c, d, e, f, g, a) {
    var i;
    var j = "#";
    j += (i = Math.floor(e * a + (1 - a) * b)) < 16 ? "0" + i.toString(16) : i.toString(16);
    j += (i = Math.floor(f * a + (1 - a) * c)) < 16 ? "0" + i.toString(16) : i.toString(16);
    return j += (i = Math.floor(g * a + (1 - a) * d)) < 16 ? "0" + i.toString(16) : i.toString(16);
  }
  function hf(a, b) {
    if (Gx.transition) {
      Uo.globalAlpha = 1;
      a.ⲆⵠᐃᐃΔ(b);
      Gx.time = Gx.time ? 0 : 1;
      Uo.globalAlpha = 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
      a.ⲆⵠᐃᐃΔ(b);
      Gx.time = Gx.time ? 0 : 1;
      Uo.globalAlpha = 1;
    } else {
      a.ⲆⵠᐃᐃΔ(b);
    }
  }
  function gf(a, b, c, d, e) {
    if (Gx.transition && e == 1) {
      Uo.globalAlpha = 1;
      Gp(Uo, Ⲇⵠ[a][Gx.time][b], c, d);
      Gx.time = Gx.time ? 0 : 1;
      Uo.globalAlpha = 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
      Gp(Uo, Ⲇⵠ[a][Gx.time][b], c, d);
      Gx.time = Gx.time ? 0 : 1;
      Uo.globalAlpha = 1;
    } else {
      Uo.globalAlpha = e;
      Gp(Uo, Ⲇⵠ[a][Gx.time][b], c, d);
      Uo.globalAlpha = 1;
    }
  }
  function lf(b, c, d, e, f) {
    var g = d.width;
    var a = d.height;
    var i = Math.floor(g / 2);
    var j = Math.floor(a / 2);
    if (Gx.transition) {
      Uo.globalAlpha = 1;
      Gp(Uo, Ⲇⵠ[b][c][Gx.time], 0, 0, g, a, e, f, i, j);
      Gx.time = Gx.time ? 0 : 1;
      Uo.globalAlpha = 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
      Gp(Uo, Ⲇⵠ[b][c][Gx.time], 0, 0, g, a, e, f, i, j);
      Gx.time = Gx.time ? 0 : 1;
      Uo.globalAlpha = 1;
    } else {
      Gp(Uo, Ⲇⵠ[b][c][Gx.time], 0, 0, g, a, e, f, i, j);
    }
  }
  function uf(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = Hx.ΔΔⲆ.y + j - 700;
    var g = Math.max(Hx.ΔΔⲆ.x + e, 0);
    var l = Math.max(-Hx.ΔΔⲆ.x + Yo - i - 100, 0);
    var t = g;
    var b = Yo - g - l;
    if (o) {
      var d = q.ΔⵠΔ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var w = t;
    var c = u;
    var p = d.x + 0;
    var C = b;
    var F = u += d.x + 0 - 2;
    if (o) {
      d = q.ΔⵠΔ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - u + d.x;
    var G = u;
    var y = t;
    var H = f;
    var k = b;
    var A = (u += f - 2) - 2;
    if (o) {
      d = q.ΔⵠΔ(s);
    } else {
      d = s.r;
    }
    if (A < u + (f = h + 350 - u + d.x) - 3) {
      var x = true;
      var K = u;
      var L = t;
      var B = f;
      var E = b;
      var D = u += f - 2;
    } else {
      x = false;
      u = A;
      D = -1;
    }
    f = h + 700 - u;
    if (Gx.transition) {
      var M = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
      Uo.fillStyle = sf(9, 55, 63, 11, 106, 132, M);
    } else {
      Uo.fillStyle = sh.ΔΔⵠᐃⲆ[Gx.time];
    }
    Uo.fillRect(w, c, C, p);
    if (o) {
      if (Gx.transition) {
        M = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
        Uo.fillStyle = sf(15, 70, 76, 42, 139, 155, M);
      } else {
        Uo.fillStyle = sh.ᐃΔᐃⲆⲆⵠⲆ[Gx.time];
      }
    } else if (Gx.transition) {
      M = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
      Uo.fillStyle = sf(9, 55, 63, 11, 106, 132, M);
    } else {
      Uo.fillStyle = sh.ΔΔⵠᐃⲆ[Gx.time];
    }
    Uo.fillRect(y, G, k, H);
    if (x) {
      if (o) {
        if (Gx.transition) {
          M = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
          Uo.fillStyle = sf(17, 94, 96, 169, 214, 211, M);
        } else {
          Uo.fillStyle = sh.ⲆΔⵠΔⲆⵠΔ[Gx.time];
        }
      } else if (Gx.transition) {
        M = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
        Uo.fillStyle = sf(9, 55, 63, 11, 106, 132, M);
      } else {
        Uo.fillStyle = sh.ΔΔⵠᐃⲆ[Gx.time];
      }
      Uo.fillRect(L, K, E, B);
    }
    if (Fx.ⵠⲆᐃᐃᐃ && o) {
      q.ᐃⲆⵠΔⲆⲆΔᐃᐃ(A, D, F, h, -Hx.ΔΔⲆ.x + w, -Hx.ΔΔⲆ.x + w + C);
    }
  }
  function bf(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = Hx.ΔΔⲆ.x + f - 700;
    var g = Math.max(Hx.ΔΔⲆ.y + e, 0);
    var l = Math.max(-Hx.ΔΔⲆ.y + jq - i - 100, 0);
    var r = g;
    var b = jq - g - l;
    if (n) {
      var d = j.ΔⵠΔ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += d + 0 - 2;
    if (n) {
      d = j.ΔⵠΔ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h + 250 - s + d;
    var u = (s += t - 2) - 2;
    if (n) {
      d = j.ΔⵠΔ(q).x;
    } else {
      d = q.r.x;
    }
    if (u < s + (t = h + 350 - s + d) - 3) {
      s += t - 2;
    } else {
      s = u;
    }
    t = h + 700 - s;
    if (n > 0 && k.ⲆᐃⲆᐃᐃⵠᐃ === 1) {
      if (Gx.transition) {
        var p = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
        Uo.fillStyle = sf(15, 77, 72, 252, 239, 187, p);
      } else {
        Uo.fillStyle = sh.ΔⵠᐃᐃⲆⲆΔ[Gx.time];
      }
      Uo.fillRect(s, r, t, b);
    } else {
      if (Gx.transition) {
        p = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
        Uo.fillStyle = sf(k.ΔΔΔ[0], k.ΔΔΔ[1], k.ΔΔΔ[2], k.ΔⲆⵠ[0], k.ΔⲆⵠ[1], k.ΔⲆⵠ[2], p);
      } else {
        Uo.fillStyle = k.ᐃΔᐃⲆᐃ[Gx.time];
      }
      Uo.fillRect(s, r, t, b);
    }
  }
  function df(b, c, d, e, f, i, a, j, k, h) {
    if (Gx.transition) {
      Uo.globalAlpha = 1;
      b(c, d, e, f, i, a, j, k, h);
      Gx.time = Gx.time ? 0 : 1;
      Uo.globalAlpha = 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
      b(c, d, e, f, i, a, j, k, h);
      Gx.time = Gx.time ? 0 : 1;
      Uo.globalAlpha = 1;
    } else {
      b(c, d, e, f, i, a, j, k, h);
    }
  }
  function vf(b, c, d, e, f) {
    Sj($f, b, c, d, e, f);
    const g = kb(Vw[0], Vw[1], Vw[2], Vw[3], Vw[4], Vw[0]);
    const a = function (a, b, c) {
      Qj($f, a, b, c);
      const d = yo(Vw[0], Vw[1], Vw[2], Vw[0]);
      kb(Vw[1], Vw[2], Vw[0], Vw[1], Vw[2], Vw[0]);
      return d ^ 18071;
    }(Vw[1], Vw[2], Vw[3]);
    return (16 << ((g ^ a) >> 8 & 255)) + (0 << ((g ^ a) >> 0 & 255)) + (24 << ((g ^ a) >> 24 & 255)) + (8 << ((g ^ a) >> 16 & 255));
  }
  function mf(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function cf(a) {
    return bj.String.fromCharCode(a);
  }
  var pf = 0;
  var Tf = 1;
  var ff = 2;
  var zf = 0;
  var yf = 1;
  var wf = 2;
  function Pf(b, c, d, e) {
    const f = (b | 28609) & ~(b & 28609);
    const g = c ^ 56659;
    const a = d ^ 13968;
    const h = ~(e & 1094) & 1094 | ~(e & 1094) & e;
    return (2531011 + (23430 + (Mk(f, g, a) ^ Ok(h, f, g, a, h))) * 214013) % 4294967296;
  }
  function kf(f, j, i, k, n, p, a, q, t, w, g, l, u, b, x) {
    if (f.length === 0) {
      f = " ";
    }
    if (a === undefined) {
      a = 0;
    }
    if (Lh === q) {
      q = 0;
    }
    if (kl === t) {
      t = 0;
    }
    if (b === undefined) {
      b = 0;
    }
    var v = document.createElement("canvas");
    var m = v.getContext("2d");
    m.textBaseline = "middle";
    m.font = (x !== kl ? x + " " : "") + k + "px " + j;
    n = n !== Ro ? Math.min(m.measureText(f).width, n) : m.measureText(f).width;
    v.width = n + a;
    v.height = k + q;
    if (p !== undefined) {
      if (g !== Lh) {
        m.globalAlpha = g;
      }
      m.fillStyle = p;
      if (jn !== l) {
        ᐃⲆⵠΔⲆᐃΔΔᐃ(m, t + 2, t, n + a - t * 2 - 4, k + q - t * 2, l);
        m.fill();
      } else {
        m.fillRect(t, t, n + a - t * 2, k + q - t * 2);
      }
      m.globalAlpha = 1;
      if (t !== 0) {
        m.lineWidth = t;
        m.strokeStyle = w;
        m.stroke();
      }
    }
    m.textBaseline = "middle";
    m.font = (x !== kl ? x + " " : "") + k + "px " + j;
    if (u !== Es) {
      m.strokeStyle = u;
      m.lineWidth = b;
      m.lineJoin = "miter";
      m.miterLimit = 2;
      m.strokeText(f, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(k / 2), n);
    }
    m.fillStyle = i;
    m.fillText(f, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(k / 2), n);
    v.w2 = v.width / 2;
    v.ᐃⲆΔⲆⵠ = v.height / 2;
    return v;
  }
  function Af(c, e, f, i, j, k, n, p, q, r, t) {
    if (Ro === q) {
      q = 0;
    }
    if (p === ma) {
      p = 0;
    }
    if (r === undefined) {
      r = 0;
    }
    if (t === undefined) {
      t = 1;
    }
    if (k !== 1) {
      k = 0;
    }
    if (i) {
      var w = i;
    }
    var u;
    var x = {
      width: c,
      height: e,
      ⵠᐃ: w,
      state: zf,
      translate: {
        x: p,
        y: q,
        ⲆⵠⲆΔⲆ: p,
        ⲆⵠΔΔᐃ: q
      },
      ⲆⵠΔΔⲆΔΔⵠⲆ: k,
      ⵠⵠᐃΔ: 0,
      callback: n,
      position: r,
      active: t
    };
    function d() {
      return x.ⵠᐃ[x.state];
    }
    function v(a) {
      var b = x.translate;
      if (x.width === 0 || x.height === 0) {
        x.width = x.ⵠᐃ[0].width;
        x.height = x.ⵠᐃ[0].height;
      }
      return a.x > b.x && a.x < b.x + x.width / j && a.y > b.y && a.y < b.y + x.height / j;
    }
    k = function () {
      var a = 0;
      if (x.ⲆⵠΔΔⲆΔΔⵠⲆ === 1) {
        if (yf === x.state || x.state === wf) {
          x.ⵠⵠᐃΔ = (0 + Ox * 1000) % 1000;
        } else if (0 < 0) {
          x.ⵠⵠᐃΔ = 0 > 500 ? 0 + Ox * 1000 : 0 - Ox * 1000;
          if (0 < 0 || 0 > 1000) {
            x.ⵠⵠᐃΔ = 0;
          }
        }
        a = ᐃⵠⵠ.ΔⲆⲆᐃⲆ(500 < 0 ? 2 : 0) * 0.2;
      }
      return a;
    };
    if ((j = j === 3 ? 3 : j === 1 ? 2 : 1) === 2) {
      u = function (a) {
        var b = 1 + k();
        var c = d();
        var e = x.width * b / 2;
        var f = x.height * b / 2;
        var g = (e - x.width / 2) / 2;
        var h = (f - x.height / 2) / 2;
        Gp(a, c, x.translate.x - g, x.translate.y - h, e, f);
      };
    } else if (j === 3) {
      u = function (b) {
        var c = d();
        var e = x.width;
        var f = x.height;
        var g = (e - x.width) / 2;
        var h = (f - x.height) / 2;
        Gp(b, c, x.translate.x - g, x.translate.y - h, e, f);
      };
      j = 1;
    } else {
      u = function (a) {
        Gp(a, d(), x.translate.x, x.translate.y);
      };
    }
    return {
      info: x,
      ᐃΔΔⵠ: function (a, b, c) {
        if (v(b)) {
          if (c == Tf) {
            x.state = wf;
          } else if (ff == c || pf == c && wf != x.state) {
            x.state = yf;
          }
          return true;
        } else {
          x.state = zf;
          return false;
        }
      },
      ⵠᐃⲆᐃ: u,
      ⲆⲆΔⲆⵠⵠᐃ: v
    };
  }
  function xf(a, b) {
    var c = a.getBoundingClientRect();
    return {
      x: b.clientX - c.left,
      y: b.clientY - c.top
    };
  }
  function Jf(b, c, d, e, f) {
    var g = {
      x: d,
      y: e,
      ⲆⵠⲆΔⲆ: d,
      ⲆⵠΔΔᐃ: e
    };
    return {
      translate: g,
      ⵠᐃⲆᐃ: function (a) {
        Gp(a, b, g.x, g.y, b.width / 2, b.height / 2);
      },
      active: c,
      position: f
    };
  }
  function Mf(a, b) {
    yi($f, a, b);
    const c = Db(Vw[0], Vw[1], Vw[0]);
    Cb(Vw[1], Vw[0], Vw[1], Vw[0]);
    return ~(c & 36406) & (c | 36406);
  }
  var Bf = "send";
  var Ef = ᐃⵠⵠ.ⲆΔΔΔᐃᐃⵠ("id") === "1" ? 1 : 0;
  var Df = ᐃⵠⵠ.ⲆΔΔΔᐃᐃⵠ("password");
  var If = ᐃⵠⵠ.ⲆΔΔΔᐃᐃⵠ("debug") || undefined;
  if (If !== undefined) {
    If = JSON.parse(bj.decodeURIComponent(If));
  }
  var Tw = ᐃⵠⵠ.ⲆΔΔΔᐃᐃⵠ("server") || undefined;
  var Qf = ᐃⵠⵠ.ⲆΔΔΔᐃᐃⵠ("region") || Wg;
  var _f = "starve.io";
  var Ff = "https://" + _f;
  var Rf = {
    IDLE: 64,
    ΔⲆⲆΔ: 2,
    ⲆᐃⵠΔⵠⵠⵠ: 16,
    ⲆᐃᐃⲆⲆⵠⲆ: 8,
    ᐃΔΔⵠⲆ: 4,
    ⲆⲆᐃᐃⵠΔΔ: 256,
    ⵠⵠᐃⵠΔⲆΔ: 32,
    ΔⲆᐃⵠᐃᐃⵠ: 128,
    ⲆⲆᐃΔΔᐃᐃⲆⵠ: 1
  };
  var jf = [{
    ⵠⲆⲆΔⵠ: 1000,
    items: [[2, 113], [1, 117], [8, 110], [1, 143]]
  }, {
    ⵠⲆⲆΔⵠ: 2000,
    items: [[2, 118], [1, 8], [2, 117], [16, 110], [2, 143]]
  }, {
    ⵠⲆⲆΔⵠ: 4000,
    items: [[3, 118], [1, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
  }, {
    ⵠⲆⲆΔⵠ: 8000,
    items: [[1, 29], [4, 118], [1, 3], [6, 117], [30, 110], [6, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
  }, {
    ⵠⲆⲆΔⵠ: 16000,
    items: [[1, 29], [1, 4], [1, 198], [7, 136], [2, 127], [2, 118], [1, 119], [15, 163], [2, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
  }, {
    ⵠⲆⲆΔⵠ: 16000,
    items: [[1, 29], [1, 11], [1, 50], [1, 3], [10, 136], [4, 127], [6, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
  }, {
    ⵠⲆⲆΔⵠ: 16000,
    items: [[1, 29], [1, 83], [1, 36], [3, 195], [1, 0], [1, 3], [7, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
  }, {
    ⵠⲆⲆΔⵠ: 16000,
    items: [[1, 29], [1, 84], [1, 3], [7, 136], [2, 127], [4, 118], [2, 135], [4, 144], [10, 141], [6, 132], [4, 115], [1, 49], [500, 109]]
  }, {
    ⵠⲆⲆΔⵠ: 16000,
    items: [[1, 29], [1, 3], [16, 138], [1, 127], [6, 118], [3, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
  }, {
    ⵠⲆⲆΔⵠ: 20000,
    items: [[1, 29], [1, 3], [1, 136], [1, 127], [3, 118], [3, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
  }];
  const Lf = [];
  let Wf = 0;
  var Uw = {
    ᐃᐃⵠⲆΔᐃⵠΔΔ: 5,
    ⲆᐃⵠΔⵠⵠⵠ: 0.2,
    ⵠΔⵠᐃᐃⵠⵠⲆⲆ: "[21]",
    ΔΔΔΔᐃⲆᐃ: 0,
    ⲆᐃΔΔᐃⵠΔⲆⵠ: 125000,
    ⲆⲆⵠⲆᐃⵠᐃ: 2,
    ᐃⵠΔⲆΔⲆⵠΔⵠ: 5,
    ⵠⵠⵠΔⲆΔΔ: 52,
    ⵠⵠΔᐃᐃⲆⵠΔⲆ: 50,
    ΔᐃⵠⲆⵠΔⵠΔⲆ: 60000,
    ᐃⵠΔⵠᐃⲆᐃᐃⵠ: 200,
    ᐃⵠΔⵠΔᐃⲆ: 3,
    ⵠΔΔΔΔⵠΔᐃΔ: 0.58,
    ⲆᐃⲆⲆⲆᐃⵠᐃⵠ: 20,
    ᐃⲆⵠⲆⲆᐃΔ: 0.2,
    ᐃΔⵠΔΔⵠΔⲆᐃ: 8000,
    ⵠⵠΔΔᐃⲆⲆ: 1,
    ⵠᐃⲆⲆΔⲆΔ: 4,
    ᐃⲆⲆΔⲆᐃᐃⲆⲆ: 14,
    ⵠⵠⲆⵠΔⵠⵠΔⲆ: 2000,
    ΔⲆⲆᐃᐃⵠⲆⵠΔ: 3,
    ᐃⲆⵠⲆΔⲆⲆᐃⲆ: 5,
    ⲆΔΔᐃⲆⵠⲆⵠⲆ: 14,
    ᐃᐃⲆⵠⵠⲆᐃ: 600000,
    ⲆⲆΔⲆⲆΔᐃ: 4
  };
  var Nf = {
    ⲆⲆΔ: 480000,
    ᐃⵠᐃΔΔΔᐃ: 10,
    ᐃⲆⵠᐃᐃᐃⲆ: 16,
    ΔⲆⲆΔⵠⲆⵠⲆⵠ: 6,
    ΔΔᐃᐃⲆⵠᐃ: 60,
    ⲆΔΔΔⵠ: 1,
    ⵠΔᐃⵠⲆ: 2,
    ⲆⲆΔⵠⲆ: 4,
    ⲆⵠⲆΔΔ: 8,
    ᐃⲆⵠⲆⲆᐃΔ: 10,
    ΔⵠΔᐃᐃᐃⵠ: 100,
    ΔᐃⲆᐃᐃⵠⲆ: 100,
    ΔⲆⲆᐃᐃⲆⵠ: 100,
    ΔΔᐃᐃⲆⵠⵠⵠᐃ: 100,
    ⵠⲆⲆΔΔΔΔ: 100,
    ⵠΔΔⲆΔⵠΔ: 100,
    ⵠⵠⵠΔⵠⵠΔⵠΔ: 100,
    ⵠΔΔⲆΔⵠΔ: 100,
    ΔⲆⵠⲆΔⵠⵠ: 100,
    ΔᐃᐃⵠⲆⵠᐃ: 100,
    ᐃⲆⵠΔⵠ: 0,
    ΔΔᐃⵠⵠⲆᐃ: 1,
    ⵠΔΔⵠᐃ: 2,
    ⲆΔΔⵠⲆ: 3,
    ᐃΔᐃᐃⵠ: 4,
    ΔᐃⲆΔⵠΔΔ: 5,
    ⲆᐃⲆᐃⵠ: 6,
    Δᐃⵠᐃⵠ: 7,
    ⲆⵠⵠⵠΔⲆⵠⵠⵠ: {
      frankfurt: "Frankfurt",
      osaka: "Osaka",
      sydney: "Sydney",
      atlanta: "Atlanta",
      losangeles: "Los Angeles"
    },
    ⵠᐃᐃⲆᐃᐃᐃ: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      6: "community",
      7: "experimental"
    },
    ⵠⵠⵠΔΔᐃⲆ: 0,
    ΔᐃΔⵠⲆᐃΔ: 0,
    ⵠⵠⵠΔΔᐃⵠ: 30,
    ᐃⵠΔⲆⲆⲆⲆⲆΔ: 2,
    ΔΔᐃᐃⲆⵠᐃ: 60000,
    ⲆᐃⵠⵠΔΔⵠⲆⵠ: 0,
    ⲆⵠᐃⲆⵠΔΔΔⵠ: 0,
    ⲆᐃᐃΔⵠⲆᐃΔⵠ: 50,
    ⲆⵠⵠΔⲆⵠΔΔΔ: 0,
    ΔⲆⵠⵠᐃⲆⲆΔΔ: 40,
    ⲆⲆᐃᐃⲆⵠⵠᐃΔ: 39,
    ⵠΔⵠᐃᐃᐃΔⵠⵠ: 830,
    ᐃᐃΔᐃᐃⲆⵠ: 25,
    ᐃⲆⲆΔⲆΔΔ: 8,
    ᐃⵠⲆⲆᐃ: 0,
    ΔΔⲆΔⲆ: 0,
    ⵠᐃⲆⵠΔΔᐃ: 200,
    ΔᐃΔΔᐃⵠⵠ: 0,
    ⵠΔΔⲆᐃ: 250,
    ΔΔⲆΔⵠⲆΔ: 150,
    ᐃᐃΔΔᐃⲆⲆ: 0,
    ΔᐃⲆⲆⲆ: 350,
    ΔⵠⲆΔⲆᐃΔ: 100,
    ⲆⲆᐃᐃⵠⲆΔ: 700,
    ᐃΔⵠⲆΔ: 39879
  };
  var qf = [];
  for (_b = 0; _b < 500; _b++) {
    qf[_b] = 0;
  }
  qf[47] = 1;
  qf[57] = 1;
  qf[0] = 1;
  qf[5] = 1;
  qf[6] = 1;
  qf[30] = 1;
  qf[19] = 1;
  qf[9] = 1;
  qf[62] = 1;
  qf[63] = 1;
  qf[13] = 1;
  qf[14] = 1;
  function Of(a) {
    const b = bj.setInterval;
    const c = b;
    const d = function () {
      b(d, 4074);
      c(d, 4958);
    };
    d();
  }
  qf[15] = 1;
  qf[33] = 1;
  qf[34] = 1;
  qf[16] = 1;
  qf[17] = 1;
  qf[12] = 1;
  qf[18] = 1;
  var Hf = [{
    time: 2880000
  }, {
    time: 1440000
  }, {
    time: 1920000
  }, {
    time: 1440000
  }, {
    time: 2880000
  }, {
    time: 2400000
  }, {
    time: 2400000
  }, {
    time: 4800000
  }, {
    time: 2880000
  }, {
    time: 3360000
  }, {
    time: 2880000
  }, {
    time: 3840000
  }, {
    time: 3360000
  }];
  var Yf = {
    ΔΔΔⲆⵠ: 43,
    ᐃᐃᐃᐃᐃ: 21,
    ⲆᐃⲆⲆΔ: 0,
    ⲆⵠⲆᐃⲆ: 52,
    ⲆⵠᐃΔⲆᐃⲆ: 85,
    ᐃⵠΔⲆΔ: 33,
    ⵠΔⲆⲆΔ: 37,
    ᐃΔⵠᐃⲆ: 87,
    ⵠΔᐃΔⲆ: 18,
    ⵠⵠΔⵠⵠ: 17,
    ⵠⲆⲆᐃᐃ: 9,
    ᐃⲆⲆⲆΔ: 35,
    ⲆⵠΔⲆᐃ: 74,
    ΔⵠᐃⲆᐃ: 19,
    ⵠⵠᐃⲆⲆ: 46,
    ⲆⵠⵠΔᐃ: 8,
    ΔΔᐃⲆⵠ: 69,
    ⲆᐃΔΔΔ: 42,
    ⵠΔⲆᐃΔ: 60,
    ⵠⵠᐃⲆᐃ: 16,
    ΔⵠΔΔⲆ: 31,
    ⵠᐃⲆⲆⵠ: 41,
    ᐃⵠᐃⵠⲆ: 88,
    ⵠᐃⲆᐃᐃ: 36,
    ᐃΔΔᐃⲆ: 15,
    ΔⵠⲆΔⲆ: 61,
    ᐃⲆᐃᐃⵠ: 5,
    Δⵠᐃᐃᐃ: 1,
    ⲆⵠΔᐃᐃ: 51,
    ΔΔⲆⲆᐃ: 71,
    ΔΔΔⵠΔ: 4,
    ᐃⵠⵠⲆᐃ: 39,
    ⵠᐃⵠⲆⲆ: 47,
    ᐃΔⵠⲆΔ: 3,
    Ⲇᐃᐃᐃᐃ: 25,
    ⵠⲆⵠⵠᐃ: 77,
    ᐃᐃⲆᐃΔ: 90,
    ΔᐃⵠΔᐃ: 73,
    ΔⲆᐃΔᐃ: 64,
    ⵠᐃΔΔⵠ: 38,
    ⵠⵠᐃᐃⵠ: 62,
    ⲆΔΔᐃⵠ: 6,
    ΔⲆΔⲆⵠ: 50,
    ΔⲆⵠᐃΔ: 86,
    ⵠⲆᐃᐃΔ: 29,
    ΔⲆΔⵠΔ: 26,
    ⲆᐃΔᐃΔ: 11,
    ⵠⲆⵠᐃᐃ: 78,
    ΔⲆⲆΔⲆ: 7,
    ⵠΔⵠΔΔ: 80,
    ΔⵠᐃⵠⲆ: 66,
    ⵠΔⵠⲆᐃ: 20,
    ᐃⵠⲆⲆΔ: 79,
    ᐃⲆᐃΔᐃ: 27,
    ⵠⵠⵠⵠᐃ: 34,
    ⲆⲆⵠⲆⲆ: 30,
    ⲆΔⲆⲆⲆ: 28,
    ⲆⵠᐃⲆⵠ: 32,
    ⵠⲆⵠᐃΔ: 75,
    ΔᐃⲆⲆΔ: 48,
    ΔⲆⵠΔⵠ: 45,
    ⵠⵠΔⵠΔ: 22,
    ΔⵠΔᐃⵠⵠⵠ: 82,
    ⵠΔⵠᐃᐃ: 53,
    ᐃⲆⵠⵠⲆⵠⵠ: 83,
    ⵠⲆᐃⵠΔ: 55,
    ⲆᐃᐃⲆᐃ: 100,
    ⵠᐃΔᐃΔ: 54,
    ᐃᐃΔⲆⲆᐃⵠ: 76,
    ⵠᐃⵠⵠΔ: 49,
    ΔΔΔΔᐃ: 13,
    ⲆⵠⲆΔᐃ: 40,
    ΔΔΔⵠⲆⵠᐃ: 84,
    ⲆΔⵠᐃⵠ: 24,
    ΔᐃᐃⲆᐃⲆΔ: 89,
    ⵠⵠⲆΔᐃ: 81,
    ΔⲆΔΔΔ: 23,
    ᐃⲆⵠᐃⵠ: 2,
    ᐃΔᐃᐃⲆ: 63,
    ⲆΔⵠⲆᐃ: 10,
    ⵠⲆᐃⵠᐃ: 44,
    ⵠⲆⲆⲆⲆ: 91,
    ΔⲆΔᐃΔ: 14,
    ᐃⲆⲆⲆᐃ: 65,
    ⵠⵠΔᐃΔ: 70,
    ΔⵠΔⵠᐃ: 67,
    ⲆⲆΔᐃⵠ: 56,
    ⵠΔᐃⲆⲆ: 68,
    ᐃᐃᐃⵠΔ: 12,
    ᐃᐃⵠΔⲆ: 72
  };
  var Kf = [[24, 108], [25, 111], [26, 112], [27, 121], [28, 202]];
  function Vf() {
    this.ΔᐃΔΔⵠ = "";
    this.ⲆΔⵠΔ = 0;
    this.ⲆⵠⲆⲆⲆ = 0;
    this.ⵠⲆⲆᐃⲆ = 0;
    this.ⲆⵠⲆⵠⵠᐃⲆ = 0;
    this.ⵠⵠⲆᐃΔ = 0;
    this.ΔΔΔⵠⲆ = 0;
    this.ᐃⵠΔΔⵠ = 0;
    this.level = 0;
    this.label = null;
    this.ᐃⲆᐃᐃⲆᐃᐃ = null;
    this.ⵠⲆΔΔⲆⵠΔ = null;
    this.ᐃⵠⵠᐃⵠ = false;
    this.ΔⲆᐃᐃᐃ = 0;
  }
  function Xf(b, c, d, e, f, i, a, j, k, h) {
    this.type = b;
    this.ᐃⵠⲆⲆ = c;
    this.id = d;
    this.x = e;
    this.y = f;
    this.angle = i;
    this.ⲆⵠΔⵠΔᐃⲆ = i;
    this.action = a;
    this.info = j;
    this.ⵠⲆΔᐃⲆ = h;
    this.r = {
      x: e,
      y: f
    };
    this.ΔΔΔΔⲆ = k;
    if (Gx) {
      this.ᐃⲆⲆⵠ = Gx.ⵠⲆᐃⵠⲆⵠᐃ * c + d;
    }
    switch (b) {
      case 0:
        this.ΔⵠΔⲆ = Gx.ᐃⲆⵠⲆ[this.ᐃⵠⲆⲆ];
        this.ⲆΔⵠΔ = this.ΔⵠΔⲆ.ⲆΔⵠΔ;
        this.ⲆⵠⲆⵠⵠᐃⲆ = this.ΔⵠΔⲆ.ⲆⵠⲆⵠⵠᐃⲆ;
        this.ⵠⵠⲆᐃΔ = this.ΔⵠΔⲆ.ⵠⵠⲆᐃΔ;
        this.ⲆⵠⲆⲆⲆ = this.ΔⵠΔⲆ.ⲆⵠⲆⲆⲆ;
        this.ⲆΔⵠⲆⲆΔᐃ = -1000000;
        this.ΔⵠΔᐃⲆ = -1000000;
        this.ΔⵠⲆΔΔ = -1000000;
        this.ⵠⵠⲆⲆΔ = -1000000;
        this.ᐃᐃⵠⵠⵠᐃᐃ = -1000000;
        this.ᐃⲆΔⲆᐃᐃⲆ = -1000000;
        this.ΔᐃⲆⲆⵠ = -1000000;
        this.ᐃΔΔⵠΔ = Gx.mode === 2 && this.ⲆΔⵠΔ === 0 || Kr;
        this.ᐃⲆΔⵠᐃⵠΔ = Gx.mode === 3 && this.ⲆΔⵠΔ === 0 ? pg : Fa;
        this.ΔⲆᐃⲆΔⲆⲆ = !!this.ᐃΔΔⵠΔ && this.ΔⵠΔⲆ.ΔᐃΔΔⵠ === "  ";
        this.ΔⲆΔΔⲆ = [];
        this.ⵠⵠⲆⲆᐃⵠⵠ = 0;
        this.ᐃⲆΔΔ = Zl;
        this.ⵠⲆΔⲆⲆΔᐃ = 0;
        this.ΔᐃᐃᐃⲆⵠⵠ = 0;
        this.ᐃᐃΔⲆΔ = [];
        this.r = {
          x: e,
          y: f
        };
        this.ⵠᐃⲆᐃ = uw;
        this.ⲆΔΔⲆⵠΔⲆ = pw;
        this.ⲆΔᐃⵠⲆ = 0;
        this.ΔⲆⵠᐃⲆ = 0;
        this.ᐃΔⲆⲆⲆ = 0;
        this.ΔᐃΔⵠᐃΔᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(N, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ΔΔᐃⲆΔ = 0;
        this.ᐃⲆⲆᐃⲆⲆⲆ = 0;
        this.ⵠⵠᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
        this.ⲆᐃⵠΔⲆ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
        this.freeze = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Gg, 0.6, 0.6, 0, 5, 3);
        this.ΔⲆᐃΔⵠΔⵠ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
        this.ⵠⵠᐃⵠᐃΔΔ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(eg, 0, 2.25, -1.5, 3.75, 7.5);
        this.ⲆᐃᐃᐃⵠΔⵠ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(eg, 0, 7.5, -3, 22.5, 33.75);
        this.attack = new ᐃⵠⵠ.ⲆⲆⲆᐃ(I, 0, 0, -Math.PI / 3, 6, 9);
        this.ΔⲆⵠᐃⵠⵠᐃᐃⲆ = 0;
        this.ⲆⵠΔᐃᐃΔⵠ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.6, 0.6, 0, 1, 3);
        this.ⵠΔⵠᐃΔⲆᐃ = this.ΔⲆᐃⲆΔⲆⲆ ? new ᐃⵠⵠ.ⲆⲆⲆᐃ(true, 0, 2.25, -1.5, 2.75, 5.5) : 0;
        this.ᐃᐃⲆⵠⵠΔᐃ = 0;
        this.ΔΔΔⲆᐃΔΔ = 0;
        this.ΔⵠⵠⵠᐃΔΔ = [];
        this.ΔᐃᐃⲆⵠΔⵠ = [];
        this.text = [];
        this.label = [];
        this.ⲆⵠⲆΔᐃᐃⵠ = vw;
        this.ᐃᐃᐃᐃⵠ = true;
        this.right = -1;
        this.ΔᐃⲆᐃΔ = -1;
        this.action = 64;
        this.ΔⵠⵠⵠΔᐃⲆ = Mo;
        this.ⵠΔΔᐃⲆ = 0;
        this.ⲆΔⵠⵠⲆ = yl;
        this.bubbles = [];
        this.ⵠⲆⲆᐃⲆ = 0;
        this.ᐃΔⵠᐃΔ = -1;
        this.ⲆΔᐃ = function (a) {
          if (this.info & 32768) {
            this.ΔⵠⵠⵠΔᐃⲆ = rr;
            this.info = this.info & -32769;
          } else {
            this.ΔⵠⵠⵠΔᐃⲆ = false;
          }
          if (this.info & 16384) {
            this.info = this.info & -16385;
            this.ⵠⲆⲆᐃⲆ = 1;
          } else {
            this.ⵠⲆⲆᐃⲆ = 0;
          }
          this.ⵠΔΔᐃⲆ = Math.floor(this.info / 128);
          this.info -= this.ⵠΔΔᐃⲆ * 128;
          if (this.info === 7 || this.ΔⲆᐃⲆΔⲆⲆ) {
            this.right = -1;
          } else {
            this.right = this.info;
          }
          this.ⵠⵠⲆⲆᐃⵠⵠ = Gx.ⵠⲆᐃΔΔΔᐃⲆΔ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
          this.ΔᐃⲆᐃΔ = this.ⵠⲆΔᐃⲆ & 255;
          if (this.right === 2) {
            this.ⲆΔⵠⵠⲆ = true;
          } else {
            this.ⲆΔⵠⵠⲆ = th;
          }
          if (qf[this.right]) {
            this.ᐃΔⲆΔᐃ = Tj;
          } else {
            this.ᐃΔⲆΔᐃ = false;
          }
          if (a & 256) {
            this.ⲆⵠΔᐃᐃΔⵠ.ⲆⲆⵠ = false;
            this.ⲆⵠΔᐃᐃΔⵠ.ᐃⵠⲆ = 0.6;
          } else if (a & 4) {
            this.freeze.ⲆⲆⵠ = false;
            this.freeze.ᐃⵠⲆ = 0.6;
          } else if (a & 128) {
            this.ⲆᐃⵠΔⲆ.ⲆⲆⵠ = false;
            this.ⲆᐃⵠΔⲆ.ᐃⵠⲆ = 0.6;
          }
          if (a & 8) {
            this.ΔⲆᐃΔⵠΔⵠ.ⲆⲆⵠ = yl;
            this.ΔⲆᐃΔⵠΔⵠ.ᐃⵠⲆ = 0.6;
          }
          if (a & 2) {
            this.ⵠⵠᐃ.ⲆⲆⵠ = th;
            this.ⵠⵠᐃ.ᐃⵠⲆ = 0.6;
          }
          if (a & 16) {
            this.ΔⲆⵠᐃⵠⵠᐃᐃⲆ = 0.58;
            if (Lx.ⵠᐃΔⵠΔ && this.ᐃΔⵠᐃΔ !== -1) {
              Lx.ᐃⲆⵠⲆ[this.ᐃΔⵠᐃΔ].ⲆⲆᐃΔⵠⵠΔᐃΔ(xx[this.right]);
            }
          }
        };
        this.ⲆΔᐃ();
        break;
      case 23:
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10),
          ⲆΔᐃ: false,
          angle: 0
        };
        this.ⲆⵠᐃᐃΔ = Dv;
        this.ⲆⵠⵠⲆⵠ = wv;
        this.ⲆᐃⵠⲆᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⲆΔⲆΔⲆΔᐃ = 0;
        this.ⵠⵠΔⲆⵠᐃᐃ = 0;
        this.ⲆᐃΔⲆᐃ = Xp;
        break;
      case 22:
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10),
          ⲆΔᐃ: false,
          angle: 0
        };
        this.ⲆⵠᐃᐃΔ = bw;
        this.ⲆⵠⵠⲆⵠ = hw;
        this.ⲆᐃⵠⲆᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Ge, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⲆΔⲆΔⲆΔᐃ = 0;
        this.ⵠⵠΔⲆⵠᐃᐃ = 0;
        break;
      case 1:
      case 6:
        this.ⲆⵠᐃᐃΔ = nw;
        this.ⲆⵠⵠⲆⵠ = ov;
        this.ᐃⵠⵠⵠᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Sq, 1, 1.03, 0.98, 0.3, 0.3);
        this.ᐃⵠⵠⵠ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⲆᐃⵠⲆᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Fa, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10),
          ⲆΔᐃ: Nq,
          angle: 0
        };
        break;
      case 43:
        this.ⲆⵠᐃᐃΔ = zv;
        this.ⲆⵠⵠⲆⵠ = Kv;
        this.ᐃⵠⵠⵠ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Tn, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(yg, 1, 1, 0, 10, 10),
          ⲆΔᐃ: false,
          angle: 0
        };
        this.ⵠⵠⵠᐃ = [];
        for (var g = 0; g < 3; g++) {
          this.ⵠⵠⵠᐃ.push({
            ⵠᐃⲆᐃ: Uv,
            ⵠⵠᐃΔ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(Mo, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ⵠⵠⵠᐃ[0].x = this.x - 16.5;
        this.ⵠⵠⵠᐃ[0].y = this.y - 15.5;
        this.ⵠⵠⵠᐃ[0].angle = this.angle;
        this.ⵠⵠⵠᐃ[1].x = this.x + 36;
        this.ⵠⵠⵠᐃ[1].y = this.y + 17;
        this.ⵠⵠⵠᐃ[1].angle = this.angle;
        this.ⵠⵠⵠᐃ[2].x = this.x - 18.5;
        this.ⵠⵠⵠᐃ[2].y = this.y + 39;
        this.ⵠⵠⵠᐃ[2].angle = this.angle;
        break;
      case 3:
        this.ⲆⵠᐃᐃΔ = yv;
        this.ⲆⵠⵠⲆⵠ = mw;
        this.ᐃⵠⵠⵠ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Sq, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10),
          ⲆΔᐃ: false,
          angle: 0
        };
        this.ⵠⵠⵠᐃ = [];
        for (g = 0; g < 3; g++) {
          this.ⵠⵠⵠᐃ.push({
            ⵠᐃⲆᐃ: Qv,
            ⵠⵠᐃΔ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(th, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ⵠⵠⵠᐃ[0].x = this.x - 16.5;
        this.ⵠⵠⵠᐃ[0].y = this.y - 15.5;
        this.ⵠⵠⵠᐃ[1].x = this.x - 5.5;
        this.ⵠⵠⵠᐃ[1].y = this.y + 7.5;
        this.ⵠⵠⵠᐃ[2].x = this.x + 18;
        this.ⵠⵠⵠᐃ[2].y = this.y - 5;
        break;
      case 77:
        this.ⵠᐃⲆᐃ = gw;
        this.ⵠⵠᐃΔ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Kr, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 70:
        this.ⵠᐃⲆᐃ = pv;
        this.ⵠⵠᐃΔ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(yg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Ge, 0.6, 0.6, 0, 5, 3);
        break;
      case 71:
        this.ⵠᐃⲆᐃ = Wv;
        this.ⵠⵠᐃΔ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔⵠᐃᐃⲆⲆⵠ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠΔⲆΔⲆⵠⲆ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
        this.ⲆᐃⵠΔⲆ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 67:
        this.ⵠᐃⲆᐃ = Ev;
        this.ⵠⵠᐃΔ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Ge, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔⵠᐃᐃⲆⲆⵠ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠΔⲆΔⲆⵠⲆ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(N, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(th, 0.6, 0.6, 0, 5, 3);
        this.ⲆᐃⵠΔⲆ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Sq, 0.6, 0.6, 0, 5, 3);
        break;
      case 68:
        this.ⵠᐃⲆᐃ = uv;
        this.ⵠⵠᐃΔ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 90:
        this.ⵠᐃⲆᐃ = Fv;
        this.ⵠⵠᐃΔ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
        this.ⵠⵠᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 91:
        this.ⲆΔᐃⵠᐃ = this.info & 15;
        this.ΔᐃᐃᐃⲆⵠⵠ = this.ⵠⲆΔᐃⲆ & 1;
        this.ᐃⲆⲆᐃΔⵠΔ = 0;
        this.x = this.info;
        this.y = this.ⵠⲆΔᐃⲆ;
        this.ⵠᐃⲆᐃ = Pv;
        this.ⵠⵠᐃΔ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Ks, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
        break;
      case 80:
      case 60:
      case 61:
      case 62:
      case 63:
      case 78:
      case 65:
      case 66:
      case 88:
        this.ⵠᐃⲆᐃ = Fv;
        this.ⵠⵠᐃΔ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Ge, 0.6, 0.6, 0, 5, 3);
        break;
      case 36:
        this.ⵠᐃⲆᐃ = Iv;
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10),
          ⲆΔᐃ: Gg,
          angle: 0
        };
        break;
      case 34:
        this.ⲆⵠⵠⲆⵠ = rv;
        this.ⵠᐃⲆᐃ = Ov;
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(yg, 1, 1, 0, 10, 10),
          ⲆΔᐃ: Sq,
          angle: 0
        };
        this.up = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Nh, 1, 1.03, 0.98, 0.1, 0.1);
        this.ᐃᐃΔⵠᐃ = [];
        break;
      case 87:
        this.angle = Math.random() * Math.PI / 2;
      case 86:
      case 82:
        this.ⵠᐃⲆᐃ = Nv;
        this.ⵠⵠᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(yg, 0.6, 0.6, 0, 5, 3);
        break;
      case 81:
        this.ⵠᐃⲆᐃ = Mv;
        this.ⵠⵠᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Nh, 0.6, 0.6, 0, 5, 3);
        break;
      case 69:
        this.scale = 1;
        this.ⵠᐃⲆᐃ = Sv;
        this.ⵠⵠᐃΔ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Tn, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠⵠᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 76:
        this.ᐃᐃΔΔⵠ = 0;
        this.ᐃⵠⵠⵠ = [];
        this.ⵠΔΔᐃⵠⵠⲆ = 0;
        this.ⵠⲆΔΔᐃⵠⲆ = Tv;
        this.ⵠᐃⲆᐃ = Yv;
        this.ⵠⵠᐃΔ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠⵠ.ⲆⲆⲆᐃ(yg, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠⵠᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 75:
        this.x = this.info;
        this.y = this.ⵠⲆΔᐃⲆ;
        this.scale = 1;
        this.ⲆⲆᐃΔ = 0;
        this.ⵠᐃⲆᐃ = Lv;
        this.ⵠⵠᐃΔ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠⵠᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 74:
        this.x = this.info;
        this.y = this.ⵠⲆΔᐃⲆ;
        this.scale = 1;
        this.ⲆⲆᐃΔ = 0;
        this.ⵠᐃⲆᐃ = sv;
        this.ⵠⵠᐃΔ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Sq, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠⵠ.ⲆⲆⲆᐃ(th, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠⵠᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 73:
        this.scale = 1;
        this.ⵠᐃⲆᐃ = iw;
        this.ⵠⵠᐃΔ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Gg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠⵠᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Ge, 0.6, 0.6, 0, 5, 3);
        break;
      case 72:
        this.scale = 1;
        this.ⵠᐃⲆᐃ = Cv;
        this.ⵠⵠᐃΔ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠⵠᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 64:
        this.scale = 1;
        this.ⵠᐃⲆᐃ = Rv;
        this.ⵠⵠᐃΔ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ⵠⵠᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Ni, 0.6, 0.6, 0, 5, 3);
        break;
      case 100:
        this.ⵠⵠⵠᐃ = [];
        for (g = 0; g < 5; g++) {
          this.ⵠⵠⵠᐃ.push({
            ⵠᐃⲆᐃ: Qv,
            ⵠⵠᐃΔ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(Nh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        switch (this.id % 3) {
          case 0:
            this.ⵠⵠⵠᐃ[0].x = this.x - 20.5;
            this.ⵠⵠⵠᐃ[0].y = this.y - 22.5;
            this.ⵠⵠⵠᐃ[1].x = this.x - 35.5;
            this.ⵠⵠⵠᐃ[1].y = this.y + 7.5;
            this.ⵠⵠⵠᐃ[2].x = this.x + 7.5;
            this.ⵠⵠⵠᐃ[2].y = this.y - 30;
            this.ⵠⵠⵠᐃ[3].x = this.x + 22.5;
            this.ⵠⵠⵠᐃ[3].y = this.y;
            this.ⵠⵠⵠᐃ[4].x = this.x - 7.5;
            this.ⵠⵠⵠᐃ[4].y = this.y + 14.5;
            break;
          case 1:
            this.ⵠⵠⵠᐃ[0].x = this.x - 30.5;
            this.ⵠⵠⵠᐃ[0].y = this.y - 22.5;
            this.ⵠⵠⵠᐃ[1].x = this.x - 15.5;
            this.ⵠⵠⵠᐃ[1].y = this.y + 7.5;
            this.ⵠⵠⵠᐃ[2].x = this.x + 15.5;
            this.ⵠⵠⵠᐃ[2].y = this.y - 30;
            this.ⵠⵠⵠᐃ[3].x = this.x + 12.5;
            this.ⵠⵠⵠᐃ[3].y = this.y + 5;
            this.ⵠⵠⵠᐃ[4].x = this.x - 40.5;
            this.ⵠⵠⵠᐃ[4].y = this.y + 14.5;
            break;
          case 2:
            this.ⵠⵠⵠᐃ[0].x = this.x - 20.5;
            this.ⵠⵠⵠᐃ[0].y = this.y - 20.5;
            this.ⵠⵠⵠᐃ[1].x = this.x - 35.5;
            this.ⵠⵠⵠᐃ[1].y = this.y + 15.5;
            this.ⵠⵠⵠᐃ[2].x = this.x + 7.5;
            this.ⵠⵠⵠᐃ[2].y = this.y - 17;
            this.ⵠⵠⵠᐃ[3].x = this.x + 22.5;
            this.ⵠⵠⵠᐃ[3].y = this.y + 5;
            this.ⵠⵠⵠᐃ[4].x = this.x - 7.5;
            this.ⵠⵠⵠᐃ[4].y = this.y + 1.5;
        }
        break;
      case 31:
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10),
          ⲆΔᐃ: false,
          angle: 0
        };
        this.ⵠᐃⲆᐃ = Jv;
        this.ᐃⵠⵠⵠ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Fa, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ΔⵠᐃᐃⵠⲆΔ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(go, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
        break;
      case 40:
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10),
          ⲆΔᐃ: yl,
          angle: 0
        };
        this.ⵠᐃⲆᐃ = Av;
        this.ᐃⵠⵠⵠ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 39:
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10),
          ⲆΔᐃ: cs,
          angle: 0
        };
        this.ⵠᐃⲆᐃ = $v;
        this.ᐃⵠⵠⵠ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 44:
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(Tn, 1, 1, 0, 10, 10),
          ⲆΔᐃ: cs,
          angle: 0
        };
        this.ⵠᐃⲆᐃ = Vv;
        this.ᐃⵠⵠⵠ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Mo, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 55:
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(bn, 1, 1, 0, 10, 10),
          ⲆΔᐃ: Gg,
          angle: 0
        };
        this.ⵠᐃⲆᐃ = jw;
        this.ᐃⵠⵠⵠ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 54:
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(go, 1, 1, 0, 10, 10),
          ⲆΔᐃ: false,
          angle: 0
        };
        this.ⵠᐃⲆᐃ = dw;
        this.ᐃⵠⵠⵠ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Ks, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 37:
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10),
          ⲆΔᐃ: false,
          angle: 0
        };
        this.ⵠᐃⲆᐃ = Xv;
        this.ᐃⵠⵠⵠ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Mo, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 24:
        this.ⵠᐃⲆᐃ = fw;
        this.rotate = 0;
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(Ge, 1, 1, 0, 10, 10),
          ⲆΔᐃ: false,
          angle: 0
        };
        break;
      case 25:
        this.ⵠᐃⲆᐃ = Hv;
        this.rotate = 0;
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10),
          ⲆΔᐃ: false,
          angle: 0
        };
        break;
      case 26:
        this.ⵠᐃⲆᐃ = lw;
        this.rotate = 0;
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ($g, 1, 1, 0, 10, 10),
          ⲆΔᐃ: false,
          angle: 0
        };
        break;
      case 27:
        this.ⵠᐃⲆᐃ = ew;
        this.rotate = 0;
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(go, 1, 1, 0, 10, 10),
          ⲆΔᐃ: false,
          angle: 0
        };
        break;
      case 28:
        this.ⵠᐃⲆᐃ = Bv;
        this.rotate = 0;
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ($g, 1, 1, 0, 10, 10),
          ⲆΔᐃ: $g,
          angle: 0
        };
        break;
      case 32:
        this.ⲆⵠᐃᐃΔ = kw;
        this.ⲆⵠⵠⲆⵠ = tv;
        this.rotate = 0;
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10),
          ⲆΔᐃ: Tn,
          angle: 0
        };
        break;
      case 38:
        this.ⵠᐃⲆᐃ = Wu;
        this.ᐃᐃⵠⲆ = Math.floor(this.x / 100);
        this.ⵠⲆ = Math.floor(this.y / 100);
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10),
          ⲆΔᐃ: false,
          angle: 0
        };
        this.opacity = 1;
        this.ⲆᐃΔⲆᐃ = Vu;
        break;
      case 42:
        this.ⵠᐃⲆᐃ = fv;
        this.ⲆᐃⵠⲆᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1.15, 1, 0.3, 0.3);
        this.color = 0;
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(Kr, 1, 1, 0, 10, 10),
          ⲆΔᐃ: false,
          angle: 0
        };
        break;
      case 33:
      case 2:
      case 56:
      case 35:
      case 29:
        this.ⵠᐃⲆᐃ = jv;
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(Tn, 1, 1, 0, 10, 10),
          ⲆΔᐃ: false,
          angle: 0
        };
        break;
      case 30:
        this.ⵠᐃⲆᐃ = jv;
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(Nh, 1, 1, 0, 10, 10),
          ⲆΔᐃ: false,
          angle: 0
        };
        this.ⲆᐃΔⲆᐃ = Vu;
        break;
      case 4:
      case 7:
      case 8:
      case 9:
      case 19:
      case 50:
      case 5:
      case 12:
      case 13:
      case 14:
      case 20:
      case 52:
        this.ⵠᐃⲆᐃ = jv;
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10),
          ⲆΔᐃ: false,
          angle: 0
        };
        this.ⲆᐃΔⲆᐃ = Xp;
        break;
      case 41:
        this.ⵠᐃⲆᐃ = $p;
        this.opacity = 1;
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10),
          ⲆΔᐃ: yg,
          angle: 0
        };
        var m = this.angle % (Math.PI / 2);
        if (Math.PI / 4 > m) {
          this.angle -= m;
        } else {
          this.angle += Math.PI / 2 - m;
        }
        break;
      case 79:
        this.ⵠᐃⲆᐃ = Zu;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 89:
        this.ⵠᐃⲆᐃ = gv;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 83:
        this.ⵠᐃⲆᐃ = Yu;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 84:
        this.ⵠᐃⲆᐃ = hv;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 85:
        this.ⵠᐃⲆᐃ = av;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 11:
        this.ⲆΔᐃ = function (a) {
          this.lock = this.info & 8192 ? 1 : 0;
          this.info = this.info & 8191;
          this.action = a;
        };
        this.ⵠᐃⲆᐃ = ev;
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(Tn, 1, 1, 0, 10, 10),
          ⲆΔᐃ: Fa,
          angle: 0
        };
        this.lock = 0;
        this.ⲆΔᐃ(this.action);
        break;
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 53:
      case 10:
      case 15:
      case 16:
      case 17:
      case 21:
      case 51:
        this.ⵠᐃⲆᐃ = bv;
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(Gg, 1, 1, 0, 10, 10),
          ⲆΔᐃ: Nq,
          angle: 0
        };
        this.ⲆᐃΔⲆᐃ = Xp;
        break;
      case 18:
        this.ⲆⵠᐃᐃΔ = cw;
        this.ⵠᐃⲆᐃ = qv;
        this.ⲆⵠⵠⲆⵠ = xv;
        this.ᐃⵠⵠⵠ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Tn, 1, 1.23, 1.18, 0.02, 0.02);
        this.ⲆᐃⵠⲆᐃ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1.23, 1.18, 0.04, 0.04);
        this.ⵠⵠᐃ = {
          ⲆᐃⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(yl, 1, 1, 0, 10, 10),
          ⲆΔᐃ: Ks,
          angle: 0
        };
        this.ⲆΔᐃ = function (a) {
          this.action = a;
        };
    }
  }
  function Zf(f) {
    function j(c, d, e, f, i) {
      var j = d + Math.floor(Gx.ᐃΔᐃΔᐃ.get() * f);
      var a = e + Math.floor(Gx.ᐃΔᐃΔᐃ.get() * f);
      var k = 10 + Math.floor((Gx.ⵠᐃΔΔΔ - j - 20) * Gx.ᐃΔᐃΔᐃ.get());
      var m = 10 + Math.floor((Gx.ⲆΔⲆΔΔ - a - 20) * Gx.ᐃΔᐃΔᐃ.get());
      var h = k + j;
      var g = m + a;
      for (var l = 0; l < Gx.ᐃΔⲆΔⵠ.length; l++) {
        var n = Gx.ᐃΔⲆΔⵠ[l];
        if (ᐃⵠⵠ.ⵠⲆⵠⵠΔΔᐃ(k, h, m, g, n.x1 / 100 - i, n.x2 / 100 + i, n.y1 / 100 - i, n.y2 / 100 + i) === 1) {
          return 0;
        }
      }
      Gx.ᐃΔⲆΔⵠ.push(new Gx.ᐃΔᐃᐃⵠⵠⲆ(c, k, m, j, a, 15));
      return 1;
    }
    function e(b, c, d, e, f) {
      for (var a = 0; a < f && j(b, c, d, e, 8) !== 1; a++);
      if (a === f) {
        return 0;
      } else {
        return 1;
      }
    }
    function i(b, c, d) {
      var e = c;
      for (var f = d; f < Gx.ⲆΔⲆΔΔ; f++) {
        for (var g = c; Gx.ⵠᐃΔΔΔ > g && (f === d && (e = Math.max(g, e)), g <= e) && b[f][g] !== 1; g++) {
          b[f][g] = 1;
        }
        if (e > g) {
          break;
        }
      }
      Gx.ᐃΔⲆΔⵠ.push(new Gx.ᐃΔᐃᐃⵠⵠⲆ(Gx.ⵠⵠⵠⵠΔ, c, d, e - c + 1, f - d, 15));
    }
    function k(a, b) {
      for (var c = 0; c < b.length; c++) {
        d(b[c][0], b[c][1], a, b[c][2]);
      }
    }
    function n(c, d, f, j, k, n, a, o) {
      var p = Math.floor(a / 2);
      var h = Math.max(1, Math.floor(a / 2));
      var g = Math.floor(o / 2);
      var l = Math.max(1, Math.floor(o / 2));
      for (var q = 0; f > q; q++) {
        for (var r = c - g; r < c + l; r++) {
          for (var s = d - p; d + h > s; s++) {
            if (x(r, s, "wtb", 0, 1) === 1) {
              n.push([r, s, 1]);
            }
          }
        }
        c += j;
        d += k;
      }
    }
    function a(a, d) {
      var e = Gx.ᐃΔⲆΔⵠ[a];
      var f = Math.floor(e.y1 / 100);
      var i = Math.floor(e.x1 / 100);
      var j = Math.floor(e.Ⲇᐃⵠ / 100);
      var k = i + (A = Math.floor(e.w / 100));
      var o = 2;
      var q = j;
      var r = f;
      for (var s = i + 10 + Math.floor(Gx.ᐃΔᐃΔᐃ.get() * (A - 20)), t = s - 4; t < s + 4; t++) {
        x(f - 1, t, "wtb", 0, 1);
      }
      while (q > 0) {
        if (o !== 2) {
          if (q < 10) {
            for (B = 1; q > 0; B++) {
              n(r, s, 1, 1, 0, d, B, 1);
              q -= 1;
              r += 1;
            }
          } else if (o !== 1) {
            o = 1;
            var w = Math.floor(1 + Gx.ᐃΔᐃΔᐃ.get() * 2);
            var y = 1 + Math.floor(Gx.ᐃΔᐃΔᐃ.get() * 4);
            if (s < i + 16) {
              n(r, s, w, 0, 1, d, y, y);
              s += w;
            } else if (s > k - 16) {
              n(r, s, w, 0, -1, d, y, y);
              s -= w;
            } else if (Gx.ᐃΔᐃΔᐃ.get() > 0.5) {
              n(r, s, w, 0, 1, d, y, y);
              s += w;
            } else {
              n(r, s, w, 0, -1, d, y, y);
              s -= w;
            }
          } else {
            var z = Math.min(q, Math.floor(1 + Gx.ᐃΔᐃΔᐃ.get() * 4));
            var A = 1 + Math.floor(Gx.ᐃΔᐃΔᐃ.get() * 4);
            n(r, s, z, 1, 0, d, A, A);
            o = 0;
            q -= z;
            r += z;
          }
        } else {
          for (var B = 10; B > 1; B--) {
            n(r, s, 1, 1, 0, d, B, 1);
            q -= 1;
            r += 1;
          }
          o = 0;
        }
      }
      for (t = s - 1; s + 2 > t; t++) {
        x(r, t, "wtb", 0, 1);
      }
    }
    function o(a) {
      var b = Gx.ᐃΔⲆΔⵠ[a];
      x(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      x(3 + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      x(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
      x(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
    }
    function q(a, b) {
      return a >= 0 && b >= 0 && a < Gx.ⲆΔⲆΔΔ && b < Gx.ⵠᐃΔΔΔ;
    }
    function h(d, e, f, i, j) {
      var k = Gx.ᐃΔⲆΔⵠ[d];
      var a = Math.floor(k.x1 / 100);
      var n = Math.floor(k.y1 / 100);
      var p = Math.floor(k.w / 100);
      var q = Math.floor(k.Ⲇᐃⵠ / 100);
      if (j !== ct) {
        j = 1 - j;
        a += Math.floor(j * p / 2);
        n += Math.floor(j * q / 2);
        p -= Math.floor(j * p);
        q -= Math.floor(q * j);
      }
      var t = Dx.ᐃⲆⲆᐃ;
      for (var l = 0, w = 0; l < i && w <= 50000; w++) {
        var y = n + Math.floor(q * Gx.ᐃΔᐃΔᐃ.get());
        var z = a + Math.floor(Gx.ᐃΔᐃΔᐃ.get() * p);
        if (Gx.ᐃⲆⲆΔᐃ(d, z * 100 + 50, y * 100 + 50) >= 400 && ((A = t[y][z + 1]) === undefined || A[e] === undefined || A[e][f] === undefined) && ((A = t[y][z - 1]) === undefined || A[e] === undefined || A[e][f] === undefined) && ((A = t[y + 1][z]) === Bo || A[e] === jn || Es === A[e][f]) && ((A = t[y - 1][z]) === undefined || A[e] === undefined || A[e][f] === ir)) {
          var A = t[y + 1][z - 1];
          if (tr === A || A[e] === undefined || A[e][f] === Ne) {
            if ((A = t[y - 1][z + 1]) === tr || A[e] === undefined || A[e][f] === undefined) {
              A = t[y + 1][z + 1];
              if (jn === A || A[e] === Dh || A[e][f] === undefined) {
                if ((A = t[y - 1][z - 1]) === undefined || Bo === A[e] || Bo === A[e][f]) {
                  if (t[y][z] === undefined) {
                    x(y, z, e, f, 1);
                    l++;
                  }
                }
              }
            }
          }
        }
      }
    }
    function r(a) {
      for (var b = 0; b < 3; b++) {
        h(a, "s", b, 15);
      }
      for (b = 0; b < 3; b++) {
        h(a, "a", b, 1);
      }
      for (b = 0; b < 3; b++) {
        h(a, "d", b, 1);
      }
      o(a);
    }
    function l(a, b) {
      (function (b, c) {
        var d = Gx.ᐃΔⲆΔⵠ[c];
        for (var e = 0, f = 0; e < b && f < 10000; f++) {
          var i = d.y1 + d.Ⲇᐃⵠ * Gx.ᐃΔᐃΔᐃ.get();
          var j = d.x1 + d.w * Gx.ᐃΔᐃΔᐃ.get();
          var k = Math.floor(i / 100);
          var m = Math.floor(j / 100);
          if (Gx.ᐃⲆⲆΔᐃ(c, m * 100 + 50, k * 100 + 50) >= 600) {
            for (var p = 1, q = k - 4; p === 1 && q <= k + 4; q++) {
              for (var t = m - 4; p === 1 && m + 4 >= t; t++) {
                if (Dx.ᐃⲆⲆᐃ[q][t] !== undefined) {
                  p = 0;
                }
              }
            }
            if (p !== 0) {
              x(k, m, "la", e % 6, 0);
              e++;
            }
          }
        }
      })(b * 80, a);
      for (var c = 0; c < 3; c++) {
        h(a, "s", c, Math.floor(b * 12));
      }
      for (c = 0; c < 3; c++) {
        h(a, "g", c, Math.floor(b * 6));
      }
      for (c = 0; c < 3; c++) {
        h(a, "re", c, Math.max(1, Math.floor(b * 1)), 0.2);
      }
      for (c = 0; c < 3; c++) {
        h(a, "a", c, Math.max(1, Math.floor(b * 2)));
      }
      o(a);
    }
    function t(b, c) {
      for (var d = 0; d < 6; d++) {
        h(b, "t", d, Math.floor(c * 80));
      }
      for (d = 0; d < 4; d++) {
        h(b, "b", d, Math.floor(c * 80));
      }
      for (d = 0; d < 3; d++) {
        h(b, "s", d, Math.floor(c * 50));
      }
      var e = [];
      for (d = 0; d < 6; d++) {
        a(b, e);
      }
      k(b, e);
      e = [];
      h(b, "p", 0, Math.floor(c * 28));
      for (d = 0; d < 3; d++) {
        h(b, "g", d, Math.floor(c * 7));
      }
      for (d = 0; d < 3; d++) {
        h(b, "d", d, Math.floor(c * 2));
      }
      for (d = 0; d < 3; d++) {
        h(b, "a", d, Math.floor(c * 1));
      }
      for (d = 0; d < 3; d++) {
        h(b, "m", d, Math.floor(c * 1));
      }
      h(b, "a", 0, Math.floor(c * 1));
      o(b);
    }
    function x(a, b, c, d, e) {
      if (a >= 0 && b >= 0 && Gx.ⲆΔⲆΔΔ > a && b < Gx.ⵠᐃΔΔΔ) {
        ᐃⲆⲆᐃ = Dx.ᐃⲆⲆᐃ;
        if (ᐃⲆⲆᐃ[a][b] === undefined) {
          ᐃⲆⲆᐃ[a][b] = {};
        }
        if (Bo !== ᐃⲆⲆᐃ[a][b][c]) {
          return 0;
        } else {
          ᐃⲆⲆᐃ[a][b][c] = [];
          ᐃⲆⲆᐃ[a][b][c][d] = [{
            x: b * 100 + 50,
            y: a * 100 + 50
          }];
          if (e === 1) {
            (function (a, b, c, d) {
              ad.push([a, b, c, d]);
            })(c, d, a, b);
          }
          return 1;
        }
      }
    }
    function b(b, c) {
      for (var d = 0; d < 6; d++) {
        h(b, "t", d, Math.floor(c * 20));
      }
      for (d = 0; d < 4; d++) {
        h(b, "b", d, Math.floor(c * 20));
      }
      for (d = 0; d < 3; d++) {
        h(b, "s", d, Math.floor(c * 20));
      }
      var e = [];
      a(b, e);
      k(b, e);
      e = [];
      h(b, "p", 0, Math.floor(c * 24));
      for (d = 0; d < 3; d++) {
        h(b, "g", d, Math.floor(c * 5));
      }
      if (Gx.mode === 2) {
        for (d = 0; d < 3; d++) {
          h(b, "d", d, Math.floor(c * 3));
        }
        for (d = 0; d < 3; d++) {
          h(b, "a", d, Math.floor(c * 2));
        }
      }
      o(b);
    }
    function d(a, b, c, d) {
      if (q(a, b) && (ᐃⲆⲆᐃ = Dx.ᐃⲆⲆᐃ, ᐃⲆⲆᐃ[a][b] === jn && (ᐃⲆⲆᐃ[a][b] = {}), Bo === ᐃⲆⲆᐃ[a][b].r)) {
        var e = 0;
        if (q(a - 1, b) && ᐃⲆⲆᐃ[a - 1][b] !== Dh && ᐃⲆⲆᐃ[a - 1][b].wtb !== undefined) {
          e += 2;
        }
        if (q(a, b - 1) && Ra !== ᐃⲆⲆᐃ[a][b - 1] && Lk !== ᐃⲆⲆᐃ[a][b - 1].wtb) {
          e += 8;
        }
        if (q(a, b + 1) && tr !== ᐃⲆⲆᐃ[a][b + 1] && jn !== ᐃⲆⲆᐃ[a][b + 1].wtb) {
          e += 16;
        }
        if (q(a + 1, b) && ᐃⲆⲆᐃ[a + 1][b] !== pj && Wg !== ᐃⲆⲆᐃ[a + 1][b].wtb) {
          e += 64;
        }
        if (q(a - 1, b - 1) && (e & 10) === 10 && ᐃⲆⲆᐃ[a - 1][b - 1] !== undefined && Bo !== ᐃⲆⲆᐃ[a - 1][b - 1].wtb) {
          e += 1;
        }
        if (!!q(a - 1, b + 1) && !(~e & 18) && ᐃⲆⲆᐃ[a - 1][b + 1] !== undefined && ᐃⲆⲆᐃ[a - 1][b + 1].wtb !== undefined) {
          e += 4;
        }
        if (q(a + 1, b - 1) && (e & 72) === 72 && ᐃⲆⲆᐃ[a + 1][b - 1] !== undefined && ᐃⲆⲆᐃ[a + 1][b - 1].wtb !== undefined) {
          e += 32;
        }
        if (q(a + 1, b + 1) && (e & 80) === 80 && ᐃⲆⲆᐃ[a + 1][b + 1] !== Dh && ᐃⲆⲆᐃ[a + 1][b + 1].wtb !== undefined) {
          e += 128;
        }
        ᐃⲆⲆᐃ[a][b].r = {};
        ᐃⲆⲆᐃ[a][b].r.ⲆᐃⲆⲆΔⵠᐃ = e;
        ᐃⲆⲆᐃ[a][b].r.ᐃⲆᐃⲆⵠⵠᐃ = d;
        ᐃⲆⲆᐃ[a][b].r.ⲆⲆⲆΔ = Gx.ᐃⲆⲆΔᐃ(c, b * 100 + 50, a * 100 + 50) - 400;
        ᐃⲆⲆᐃ[a][b].r.x = b * 100 + 50;
        ᐃⲆⲆᐃ[a][b].r.y = a * 100 + 50;
      }
    }
    function m(a, b) {
      for (var c = 0; c < 3; c++) {
        h(a, "s", c, Math.floor(b * 18));
      }
      for (c = 0; c < 3; c++) {
        h(a, "f", c, Math.floor(b * 24));
      }
      for (c = 0; c < 3; c++) {
        h(a, "d", c, Math.max(1, Math.floor(b * 2)), 0.3);
      }
      for (c = 0; c < 3; c++) {
        h(a, "g", c, Math.floor(b * 6));
      }
      o(a);
    }
    function c(a, b) {
      for (var c = 0; c < 3; c++) {
        h(a, "s", c, Math.floor(b * 12));
      }
      for (c = 0; c < 3; c++) {
        h(a, "m", c, Math.max(1, Math.floor(b * 1)), 0.2);
      }
      h(a, "c", 0, Math.floor(b * 36));
      var d = [];
      (function (b, c) {
        var d = Gx.ᐃΔⲆΔⵠ[b];
        var e = Math.floor(d.y1 / 100);
        var f = Math.floor(d.x1 / 100);
        var i = Math.floor(d.Ⲇᐃⵠ / 100);
        var a = Math.floor(d.w / 100);
        var j = e + Math.floor(i / 2);
        var k = f + Math.floor(a / 2);
        for (var h = 0; h < 3; h++) {
          x(m = Math.floor(j - 3 + Gx.ᐃΔᐃΔᐃ.get() * 6), n = Math.floor(k - 3 + Gx.ᐃΔᐃΔᐃ.get() * 6), "plm", h, 1);
        }
        for (h = 0; h < 80; h++) {
          var m;
          var n;
          if (x(m = Math.floor(j - 3 + Gx.ᐃΔᐃΔᐃ.get() * 6), n = Math.floor(k - 3 + Gx.ᐃΔᐃΔᐃ.get() * 6), "wtb", 0, 1) === 1) {
            c.push([m, n, 0]);
          }
        }
      })(a, d);
      k(a, d);
      d = [];
    }
    function g(a, b, c) {
      if (a[b]) {
        for (fq = 0; a[b].length > fq; fq++) {
          if (a[b][fq]) {
            for (ⲆᐃⵠΔ = 0; ⲆᐃⵠΔ < a[b][fq].length; ⲆᐃⵠΔ++) {
              a[b][fq][ⲆᐃⵠΔ].ⵠⵠᐃ = c;
              a[b][fq][ⲆᐃⵠΔ].ⲆΔᐃ = false;
              a[b][fq][ⲆᐃⵠΔ].time = 0;
              a[b][fq][ⲆᐃⵠΔ].angle = 0;
            }
          }
        }
      }
    }
    this.mode = 0;
    this.ⵠⲆᐃⵠⲆⵠᐃ = f;
    this.ⲆᐃΔⲆⲆ = 0;
    this.ⵠᐃΔⵠᐃⵠⲆ = 6;
    this.ᐃⲆⵠⲆ = [];
    this.ᐃⲆΔ = [];
    this.ᐃⲆΔ[0] = [];
    this.ᐃⲆΔ[100] = [];
    this.ᐃⲆΔ[80] = [];
    this.ᐃⲆΔ[60] = [];
    this.ᐃⲆΔ[67] = [];
    this.ᐃⲆΔ[70] = [];
    this.ᐃⲆΔ[77] = [];
    this.ᐃⲆΔ[71] = [];
    this.ᐃⲆΔ[72] = [];
    this.ᐃⲆΔ[73] = [];
    this.ᐃⲆΔ[74] = [];
    this.ᐃⲆΔ[65] = [];
    this.ᐃⲆΔ[66] = [];
    this.ᐃⲆΔ[62] = [];
    this.ᐃⲆΔ[88] = [];
    this.ᐃⲆΔ[91] = [];
    this.ᐃⲆΔ[90] = [];
    this.ᐃⲆΔ[63] = [];
    this.ᐃⲆΔ[78] = [];
    this.ᐃⲆΔ[64] = [];
    this.ᐃⲆΔ[69] = [];
    this.ᐃⲆΔ[68] = [];
    this.ᐃⲆΔ[79] = [];
    this.ᐃⲆΔ[89] = [];
    this.ᐃⲆΔ[83] = [];
    this.ᐃⲆΔ[84] = [];
    this.ᐃⲆΔ[85] = [];
    this.ᐃⲆΔ[81] = [];
    this.ᐃⲆΔ[82] = [];
    this.ᐃⲆΔ[86] = [];
    this.ᐃⲆΔ[34] = [];
    this.ᐃⲆΔ[36] = [];
    this.ᐃⲆΔ[61] = [];
    this.ᐃⲆΔ[2] = [];
    this.ᐃⲆΔ[1] = [];
    this.ᐃⲆΔ[6] = [];
    this.ᐃⲆΔ[3] = [];
    this.ᐃⲆΔ[5] = [];
    this.ᐃⲆΔ[12] = [];
    this.ᐃⲆΔ[13] = [];
    this.ᐃⲆΔ[14] = [];
    this.ᐃⲆΔ[20] = [];
    this.ᐃⲆΔ[52] = [];
    this.ᐃⲆΔ[4] = [];
    this.ᐃⲆΔ[7] = [];
    this.ᐃⲆΔ[8] = [];
    this.ᐃⲆΔ[9] = [];
    this.ᐃⲆΔ[19] = [];
    this.ᐃⲆΔ[50] = [];
    this.ᐃⲆΔ[41] = [];
    this.ᐃⲆΔ[10] = [];
    this.ᐃⲆΔ[15] = [];
    this.ᐃⲆΔ[16] = [];
    this.ᐃⲆΔ[17] = [];
    this.ᐃⲆΔ[21] = [];
    this.ᐃⲆΔ[51] = [];
    this.ᐃⲆΔ[45] = [];
    this.ᐃⲆΔ[46] = [];
    this.ᐃⲆΔ[47] = [];
    this.ᐃⲆΔ[48] = [];
    this.ᐃⲆΔ[49] = [];
    this.ᐃⲆΔ[53] = [];
    this.ᐃⲆΔ[18] = [];
    this.ᐃⲆΔ[29] = [];
    this.ᐃⲆΔ[56] = [];
    this.ᐃⲆΔ[11] = [];
    this.ᐃⲆΔ[22] = [];
    this.ᐃⲆΔ[23] = [];
    this.ᐃⲆΔ[30] = [];
    this.ᐃⲆΔ[38] = [];
    this.ᐃⲆΔ[33] = [];
    this.ᐃⲆΔ[31] = [];
    this.ᐃⲆΔ[55] = [];
    this.ᐃⲆΔ[37] = [];
    this.ᐃⲆΔ[43] = [];
    this.ᐃⲆΔ[44] = [];
    this.ᐃⲆΔ[54] = [];
    this.ᐃⲆΔ[39] = [];
    this.ᐃⲆΔ[40] = [];
    this.ᐃⲆΔ[32] = [];
    this.ᐃⲆΔ[24] = [];
    this.ᐃⲆΔ[25] = [];
    this.ᐃⲆΔ[26] = [];
    this.ᐃⲆΔ[27] = [];
    this.ᐃⲆΔ[28] = [];
    this.ᐃⲆΔ[35] = [];
    this.ᐃⲆΔ[87] = [];
    this.ᐃⲆΔ[42] = [];
    this.ⲆΔⲆΔⵠ = [];
    this.ⵠᐃΔΔΔ = 260;
    this.ⲆΔⲆΔΔ = 260;
    this.ᐃᐃΔⵠΔᐃⵠ = 100;
    this.ᐃⲆᐃᐃⲆᐃⵠ = 100;
    this.w = this.ᐃᐃΔⵠΔᐃⵠ * this.ⵠᐃΔΔΔ;
    this.Ⲇᐃⵠ = this.ⲆΔⲆΔΔ * this.ᐃⲆᐃᐃⲆᐃⵠ;
    this.ᐃΔᐃΔᐃ = new aq.ΔΔΔⵠᐃⲆⵠ();
    this.ᐃΔⲆΔⵠ = [];
    this.ⵠⵠⲆⲆ = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Tn, 0, 1, 0, 1, 1);
    this.transition = Nq;
    this.ⲆᐃⲆⲆⲆ = [];
    this.ΔΔⵠⲆⵠ = 0;
    this.ᐃΔΔᐃΔⲆⲆ = 1;
    this.ⲆⲆⲆⲆⵠΔⵠ = 2;
    this.ᐃⵠⵠⵠᐃⲆⵠ = 3;
    this.ⵠⵠⵠⵠΔ = 4;
    this.ⵠᐃᐃⲆⲆⵠᐃ = 10;
    this.ⲆᐃⲆⲆⲆ[this.ΔΔⵠⲆⵠ] = {
      ⲆᐃⲆᐃᐃⵠᐃ: 1,
      ΔⲆⵠ: [19, 58, 43],
      ΔΔΔ: [4, 43, 48],
      ᐃΔᐃⲆᐃ: ["#133a2b", "#042b30"]
    };
    this.ⲆᐃⲆⲆⲆ[this.ⵠⵠⵠⵠΔ] = {
      ⲆᐃⲆᐃᐃⵠᐃ: 0,
      ΔⲆⵠ: [11, 106, 132],
      ΔΔΔ: [9, 55, 63],
      ᐃΔᐃⲆᐃ: ["#0B6A84", "#09373F"]
    };
    this.ⲆᐃⲆⲆⲆ[this.ᐃΔΔᐃΔⲆⲆ] = {
      ⲆᐃⲆᐃᐃⵠᐃ: 0,
      ΔⲆⵠ: [235, 242, 240],
      ΔΔΔ: [19, 97, 103],
      ᐃΔᐃⲆᐃ: ["#EBF2F0", "#136167"]
    };
    this.ⲆᐃⲆⲆⲆ[this.ⲆⲆⲆⲆⵠΔⵠ] = {
      ΔΔΔ: [3, 28, 30],
      ⲆᐃⲆᐃᐃⵠᐃ: 0,
      ΔⲆⵠ: [45, 32, 23],
      ᐃΔᐃⲆᐃ: ["#2D2017", "#031C1E"]
    };
    this.ⲆᐃⲆⲆⲆ[this.ᐃⵠⵠⵠᐃⲆⵠ] = {
      ⲆᐃⲆᐃᐃⵠᐃ: 0,
      ᐃΔᐃⲆᐃ: ["#4A4A4A", "#183D3C"],
      ΔΔΔ: [24, 61, 60],
      ΔⲆⵠ: [74, 74, 74]
    };
    this.ⲆᐃⲆⲆⲆ[this.ⵠᐃᐃⲆⲆⵠᐃ] = {
      ⲆᐃⲆᐃᐃⵠᐃ: 0,
      ᐃΔᐃⲆᐃ: ["#EBD8A6", "#093D38"],
      ΔΔΔ: [9, 61, 56],
      ΔⲆⵠ: [235, 216, 166]
    };
    this.ᐃΔᐃᐃⵠⵠⲆ = function (b, c, d, e, f, g) {
      this.x1 = c * 100;
      this.y1 = d * 100;
      this.w = e * 100;
      this.Ⲇᐃⵠ = f * 100;
      this.x2 = (c + e) * 100;
      this.y2 = (d + f) * 100;
      this.ΔⵠΔ = b;
      this.ᐃⵠⲆ = Ra === g ? 15 : g;
    };
    this.ΔⵠⲆᐃⲆ = -1000000;
    this.ΔⵠⲆΔΔ = this.ΔⵠⲆᐃⲆ;
    this.ⵠⵠⲆⲆΔ = this.ΔⵠⲆᐃⲆ;
    this.ΔⵠΔᐃⲆ = this.ΔⵠⲆᐃⲆ;
    this.ⲆΔⵠⲆⲆΔᐃ = this.ΔⵠⲆᐃⲆ;
    this.ᐃᐃⵠⵠⵠᐃᐃ = this.ΔⵠⲆᐃⲆ;
    this.ΔᐃⲆⲆⵠ = this.ΔⵠⲆᐃⲆ;
    this.ⲆΔΔΔΔΔⲆⵠⲆ = function (b) {
      var c = b.r.x;
      var d = b.r.y;
      var e = Math.floor(d / 100);
      var f = Math.floor(c / 100);
      b.ΔⵠⲆΔΔ = Gx.ΔⵠⲆᐃⲆ;
      b.ⵠⵠⲆⲆΔ = Gx.ΔⵠⲆᐃⲆ;
      b.ΔⵠΔᐃⲆ = Gx.ΔⵠⲆᐃⲆ;
      b.ⲆΔⵠⲆⲆΔᐃ = Gx.ΔⵠⲆᐃⲆ;
      b.ΔᐃⲆⲆⵠ = Gx.ΔⵠⲆᐃⲆ;
      b.ᐃⲆΔⲆᐃᐃⲆ = Gx.ΔⵠⲆᐃⲆ;
      for (var g = 0; Gx.ⵠⵠⵠⵠΔ !== Gx.ᐃΔⲆΔⵠ[g].ΔⵠΔ; g++) {
        if (Gx.ᐃΔⲆΔⵠ[g].ΔⵠΔ === Gx.ΔΔⵠⲆⵠ) {
          var h = Gx.ᐃⲆⲆΔᐃ(g, c, d);
          b.ⲆΔⵠⲆⲆΔᐃ = Math.max(b.ⲆΔⵠⲆⲆΔᐃ, h);
          if (h > 0 && Gx.ⵠⵠⵠΔᐃⵠⵠⲆᐃ(g, c, d) === 1) {
            b.ᐃⲆΔⲆᐃᐃⲆ = 1;
          }
        } else if (Gx.ᐃΔⲆΔⵠ[g].ΔⵠΔ === Gx.ᐃΔΔᐃΔⲆⲆ) {
          b.ΔⵠⲆΔΔ = Math.max(b.ΔⵠⲆΔΔ, Gx.ᐃⲆⲆΔᐃ(g, c, d));
        } else if (Gx.ⵠᐃᐃⲆⲆⵠᐃ === Gx.ᐃΔⲆΔⵠ[g].ΔⵠΔ) {
          b.ⵠⵠⲆⲆΔ = Math.max(b.ⵠⵠⲆⲆΔ, Gx.ᐃⲆⲆΔᐃ(g, c, d));
        } else if (Gx.ⲆⲆⲆⲆⵠΔⵠ === Gx.ᐃΔⲆΔⵠ[g].ΔⵠΔ) {
          b.ΔⵠΔᐃⲆ = Math.max(b.ΔⵠΔᐃⲆ, Gx.ᐃⲆⲆΔᐃ(g, c, d));
        } else if (Gx.ᐃΔⲆΔⵠ[g].ΔⵠΔ === Gx.ᐃⵠⵠⵠᐃⲆⵠ) {
          b.ΔᐃⲆⲆⵠ = Math.max(b.ΔᐃⲆⲆⵠ, Gx.ᐃⲆⲆΔᐃ(g, c, d));
        }
      }
      if (Dx.ᐃⲆⲆᐃ[e][f].iblk) {
        b.ᐃⲆΔⲆᐃᐃⲆ = 1;
      }
      if (Gx.ΔΔᐃⲆⵠᐃⲆⵠⵠ(f, e)) {
        b.ᐃᐃⵠⵠⵠᐃᐃ = b.ΔⵠⲆᐃⲆ;
      } else if (Dx.ᐃⲆⲆᐃ[e][f].wtb || b.ΔⵠⲆΔΔ < 0 && b.ΔⵠΔᐃⲆ < 0 && b.ⲆΔⵠⲆⲆΔᐃ < 0 && b.ᐃⲆΔⲆᐃᐃⲆ < 0 && b.ΔᐃⲆⲆⵠ < 0 && b.ⵠⵠⲆⲆΔ < 0) {
        b.ᐃᐃⵠⵠⵠᐃᐃ = 1;
      } else {
        b.ᐃᐃⵠⵠⵠᐃᐃ = b.ΔⵠⲆᐃⲆ;
      }
    };
    this.ᐃΔΔΔᐃⲆⵠⵠΔ = function (a, b) {
      Gx.ΔⵠⲆΔΔ = Gx.ΔⵠⲆᐃⲆ;
      Gx.ⵠⵠⲆⲆΔ = Gx.ΔⵠⲆᐃⲆ;
      Gx.ΔⵠΔᐃⲆ = Gx.ΔⵠⲆᐃⲆ;
      Gx.ΔᐃⲆⲆⵠ = Gx.ΔⵠⲆᐃⲆ;
      Gx.ⲆΔⵠⲆⲆΔᐃ = Gx.ΔⵠⲆᐃⲆ;
      for (var c = 0; Gx.ᐃΔⲆΔⵠ[c].ΔⵠΔ !== Gx.ⵠⵠⵠⵠΔ; c++) {
        if (Gx.ΔΔⵠⲆⵠ === Gx.ᐃΔⲆΔⵠ[c].ΔⵠΔ) {
          Gx.ⲆΔⵠⲆⲆΔᐃ = Math.max(Gx.ⲆΔⵠⲆⲆΔᐃ, Gx.ᐃⲆⲆΔᐃ(c, a, b));
        } else if (Gx.ᐃΔΔᐃΔⲆⲆ === Gx.ᐃΔⲆΔⵠ[c].ΔⵠΔ) {
          Gx.ΔⵠⲆΔΔ = Math.max(Gx.ΔⵠⲆΔΔ, Gx.ᐃⲆⲆΔᐃ(c, a, b));
        } else if (Gx.ⵠᐃᐃⲆⲆⵠᐃ === Gx.ᐃΔⲆΔⵠ[c].ΔⵠΔ) {
          Gx.ⵠⵠⲆⲆΔ = Math.max(Gx.ⵠⵠⲆⲆΔ, Gx.ᐃⲆⲆΔᐃ(c, a, b));
        } else if (Gx.ᐃΔⲆΔⵠ[c].ΔⵠΔ === Gx.ⲆⲆⲆⲆⵠΔⵠ) {
          Gx.ΔⵠΔᐃⲆ = Math.max(Gx.ΔⵠΔᐃⲆ, Gx.ᐃⲆⲆΔᐃ(c, a, b));
        } else if (Gx.ᐃΔⲆΔⵠ[c].ΔⵠΔ === Gx.ᐃⵠⵠⵠᐃⲆⵠ) {
          Gx.ΔᐃⲆⲆⵠ = Math.max(Gx.ΔᐃⲆⲆⵠ, Gx.ᐃⲆⲆΔᐃ(c, a, b));
        }
      }
      if (Gx.ΔⵠⲆΔΔ < 0 && Gx.ΔᐃⲆⲆⵠ < 0 && Gx.ⲆΔⵠⲆⲆΔᐃ < 0 && Gx.ΔᐃⲆⲆⵠ < 0 && Gx.ⵠⵠⲆⲆΔ < 0) {
        Gx.ᐃᐃⵠⵠⵠᐃᐃ = 1;
      } else {
        Gx.ᐃᐃⵠⵠⵠᐃᐃ = Gx.ΔⵠⲆᐃⲆ;
      }
    };
    this.ⵠⵠⵠΔᐃⵠⵠⲆᐃ = function (b, c, d) {
      var e = Gx.ᐃΔⲆΔⵠ[b];
      var f = 0;
      ⲆⲆⲆⲆ = e.x1 + 30 + (e.ᐃⵠⲆ & 4 ? 0 : 150);
      var g = c - ⲆⲆⲆⲆ;
      if ((e.ᐃⵠⲆ & 4) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ΔΔΔⵠ = e.y1 + 250 + ((e.ᐃⵠⲆ & 1) === 0 ? 150 : 0);
      g = d - ΔΔΔⵠ;
      if ((e.ᐃⵠⲆ & 1) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ᐃⲆΔᐃ = e.x2 + 80 + ((e.ᐃⵠⲆ & 8) === 0 ? -200 : 0);
      g = ᐃⲆΔᐃ - c;
      if ((e.ᐃⵠⲆ & 8) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ⲆΔⲆⲆ = e.y2 - 200 + ((e.ᐃⵠⲆ & 2) === 0 ? -200 : 0);
      g = ⲆΔⲆⲆ - d;
      if ((e.ᐃⵠⲆ & 2) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      if (ⲆⲆⲆⲆ <= c && ᐃⲆΔᐃ >= c && d >= ΔΔΔⵠ && ⲆΔⲆⲆ >= d) {
        return f;
      } else {
        return 0;
      }
    };
    this.ᐃⲆⲆΔᐃ = function (a, b, c) {
      var d = Gx.ᐃΔⲆΔⵠ[a];
      ⲆⲆⲆⲆ = d.x1 + 30;
      ΔΔΔⵠ = d.y1 + 250;
      ᐃⲆΔᐃ = d.x2 + 80;
      ⲆΔⲆⲆ = d.y2 - 200;
      if (ⲆⲆⲆⲆ <= b && ᐃⲆΔᐃ >= b && ΔΔΔⵠ <= c && c <= ⲆΔⲆⲆ) {
        return Math.min(b - ⲆⲆⲆⲆ, ᐃⲆΔᐃ - b, c - ΔΔΔⵠ, ⲆΔⲆⲆ - c);
      }
      var e = -1000000;
      if (b - ⲆⲆⲆⲆ < 0) {
        e = Math.max(e, b - ⲆⲆⲆⲆ);
      } else if (ᐃⲆΔᐃ - b < 0) {
        e = Math.max(e, ᐃⲆΔᐃ - b);
      }
      ⲆᐃⵠᐃⲆⵠᐃ = -1000000;
      if (c < ΔΔΔⵠ || c > ⲆΔⲆⲆ) {
        if (c - ΔΔΔⵠ < 0) {
          ⲆᐃⵠᐃⲆⵠᐃ = Math.max(ⲆᐃⵠᐃⲆⵠᐃ, c - ΔΔΔⵠ);
        } else {
          ⲆᐃⵠᐃⲆⵠᐃ = Math.max(ⲆᐃⵠᐃⲆⵠᐃ, ⲆΔⲆⲆ - c);
        }
        e = e !== -1000000 && ⲆᐃⵠᐃⲆⵠᐃ !== -1000000 ? Math.min(e, ⲆᐃⵠᐃⲆⵠᐃ) : ⲆᐃⵠᐃⲆⵠᐃ;
      }
      return e;
    };
    this.ΔⲆᐃᐃⲆᐃΔ = function (b, c, d) {
      var e = d;
      var f = c;
      x(e, f, "isl", b, 1);
      for (var g = 0; g < 4; g++) {
        for (var h = 0; h < 3; h++) {
          x(e - h, f - g, "iblk", 0);
          x(e + h, f - g, "iblk", 0);
          x(e + h, f + g, "iblk", 0);
          x(e - h, f + g, "iblk", 0);
        }
      }
      if (b === 0) {
        for (g = 0; g < 2; g++) {
          x(e - g, f - 4, "iblk", 0);
          x(e + g, f - 4, "iblk", 0);
          x(e - g, f + 4, "iblk", 0);
          x(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 3; g++) {
          x(e - 3, f + g, "iblk", 0);
          x(e + 3, f + g, "iblk", 0);
          x(e - 3, f - g, "iblk", 0);
          x(e + 3, f - g, "iblk", 0);
        }
        x(e - 2, f - 4, "iblk", 0);
        x(e - 3, f - 3, "iblk", 0);
        x(e + 2, f + 4, "iblk", 0);
        x(e + 3, f + 3, "iblk", 0);
      } else if (b === 1) {
        for (g = 0; g < 3; g++) {
          x(e - g, f - 4, "iblk", 0);
          x(e + g, f - 4, "iblk", 0);
          x(e - g, f + 4, "iblk", 0);
          x(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 4; g++) {
          x(e - 3, f + g, "iblk", 0);
          x(e + 3, f + g, "iblk", 0);
          x(e - 3, f - g, "iblk", 0);
          x(e + 3, f - g, "iblk", 0);
        }
      } else if (b === 2) {
        for (g = 0; g < 2; g++) {
          x(e - g, f - 4, "iblk", 0);
          x(e + g, f - 4, "iblk", 0);
          x(e - g, f + 4, "iblk", 0);
          x(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 3; g++) {
          x(e - 3, f + g, "iblk", 0);
          x(e + 3, f + g, "iblk", 0);
          x(e - 3, f - g, "iblk", 0);
          x(e + 3, f - g, "iblk", 0);
        }
      }
    };
    this.ᐃⵠⲆⲆΔⵠⲆⲆⵠ = function (b) {
      for (var c = 0; c < Gx.ᐃΔⲆΔⵠ.length && b > 0; c++) {
        var d = Gx.ᐃΔⲆΔⵠ[c];
        if (Gx.ⵠⵠⵠⵠΔ === d.ΔⵠΔ && d.w > 1800 && d.Ⲇᐃⵠ > 1000) {
          var f = Math.floor((d.x1 + d.w / 2) / 100);
          var g = Math.floor((d.y1 + d.Ⲇᐃⵠ / 2) / 100);
          Gx.ΔⲆᐃᐃⲆᐃΔ(b % 3, f, g);
          for (var h = 0; h < 3; h++) {
            var j = g - 2 + Math.floor(Gx.ᐃΔᐃΔᐃ.get() * 4);
            var k = f - 3 + Math.floor(Gx.ᐃΔᐃΔᐃ.get() * 6);
            if (Og === Dx.ᐃⲆⲆᐃ[j][k].s) {
              x(j, k, "plm", h);
            }
            j = g - 2 + Math.floor(Gx.ᐃΔᐃΔᐃ.get() * 4);
            k = f - 3 + Math.floor(Gx.ᐃΔᐃΔᐃ.get() * 6);
            if (Dx.ᐃⲆⲆᐃ[j][k].plm === undefined) {
              x(j, k, "s", h);
            }
          }
          j = g - 2 + Math.floor(Gx.ᐃΔᐃΔᐃ.get() * 4);
          k = f - 3 + Math.floor(Gx.ᐃΔᐃΔᐃ.get() * 6);
          if (tr === Dx.ᐃⲆⲆᐃ[j][k].plm && Dx.ᐃⲆⲆᐃ[j][k].s === Dh) {
            x(j, k, "p", 0, 1);
          }
          b--;
        }
      }
    };
    this.ⵠᐃⲆⲆΔⲆⵠⵠⵠ = function (d) {
      Gx.ᐃΔᐃΔᐃ.ⲆⵠΔⵠⲆ(d);
      var j = 0;
      while (true) {
        if (++j > 10000) {
          return;
        }
        Gx.ᐃΔⲆΔⵠ = [];
        if (Gx.ⲆᐃΔⲆⲆ === 0 && (Gx.mode === 3 || Gx.mode === 7 || Gx.mode === 0)) {
          Gx.ⲆᐃΔⲆⲆ = ih;
        }
        if (Gx.mode === 2) {
          Gx.ᐃΔⲆΔⵠ.push(new Gx.ᐃΔᐃᐃⵠⵠⲆ(Gx.ΔΔⵠⲆⵠ, 2, 2, 80, 80, 15));
        } else if (Gx.mode === 4) {
          Gx.ᐃΔⲆΔⵠ.push(new Gx.ᐃΔᐃᐃⵠⵠⲆ(Gx.ΔΔⵠⲆⵠ, 2, 2, 150, 150, 15));
        } else if (Gx.ⲆᐃΔⲆⲆ !== 0 && Gx.ⲆᐃΔⲆⲆ.length > 0 && Gx.ⲆᐃΔⲆⲆ[0].length > 3) {
          for (var n = 0; n < Gx.ⲆᐃΔⲆⲆ.length; n++) {
            if ((D = Gx.ⲆᐃΔⲆⲆ[n])[0] !== 0) {
              break;
            }
            var o = Nf.ΔΔⵠⲆⵠ;
            switch (D[1]) {
              case "FOREST":
                o = Gx.ΔΔⵠⲆⵠ;
                break;
              case "WINTER":
                o = Gx.ᐃΔΔᐃΔⲆⲆ;
                break;
              case "DESERT":
                o = Gx.ⵠᐃᐃⲆⲆⵠᐃ;
                break;
              case "LAVA":
                o = Gx.ⲆⲆⲆⲆⵠΔⵠ;
                break;
              case "DRAGON":
                o = Gx.ᐃⵠⵠⵠᐃⲆⵠ;
            }
            Gx.ᐃΔⲆΔⵠ.push(new Gx.ᐃΔᐃᐃⵠⵠⲆ(o, D[2], D[3], D[4], D[5], D[6], D[7]));
          }
        } else if (Gx.ⲆᐃΔⲆⲆ !== 0) {
          for (n = 0; Gx.ⲆᐃΔⲆⲆ.length > n; n++) {
            var p = Gx.ⲆᐃΔⲆⲆ[n];
            o = Nf.ΔΔⵠⲆⵠ;
            switch (p[0]) {
              case "FOREST":
                o = Gx.ΔΔⵠⲆⵠ;
                break;
              case "WINTER":
                o = Gx.ᐃΔΔᐃΔⲆⲆ;
                break;
              case "DESERT":
                o = Gx.ⵠᐃᐃⲆⲆⵠᐃ;
                break;
              case "LAVA":
                o = Gx.ⲆⲆⲆⲆⵠΔⵠ;
                break;
              case "DRAGON":
                o = Gx.ᐃⵠⵠⵠᐃⲆⵠ;
            }
            if (e(o, p[1], p[2], 0, (n + 1) * 10) === 0) {
              break;
            }
          }
          if (Gx.ⲆᐃΔⲆⲆ.length !== n) {
            continue;
          }
        }
        break;
      }
      ᐃⵠⲆΔⲆⵠⲆΔᐃ();
      var q = [];
      for (var h = 0; Gx.ⲆΔⲆΔΔ > h; h++) {
        q[h] = new Array(Gx.ⵠᐃΔΔΔ);
        for (var u = 0; u < Gx.ⵠᐃΔΔΔ; u++) {
          q[h][u] = 0;
        }
      }
      for (h = 0; Gx.ᐃΔⲆΔⵠ.length > h; h++) {
        for (var v = (p = Gx.ᐃΔⲆΔⵠ[h]).x2 / 100, z = p.y2 / 100, A = p.x1 / 100; v >= A; A++) {
          for (var B = p.y1 / 100; z >= B; B++) {
            q[B][A] = 1;
          }
        }
      }
      for (B = 0; Gx.ⲆΔⲆΔΔ > B; B++) {
        for (A = 0; Gx.ⵠᐃΔΔΔ > A; A++) {
          if (q[B][A] === 0) {
            i(q, A, B);
          }
        }
      }
      Dx = {
        w: Gx.ⵠᐃΔΔΔ,
        Ⲇᐃⵠ: Gx.ⲆΔⲆΔΔ,
        ᐃⲆⲆᐃ: []
      };
      for (h = 0; h < Gx.ⲆΔⲆΔΔ; h++) {
        Dx.ᐃⲆⲆᐃ[h] = [];
      }
      if (Gx.ⲆᐃΔⲆⲆ !== 0 && Gx.ⲆᐃΔⲆⲆ.length > 0 && Gx.ⲆᐃΔⲆⲆ[0].length > 3) {
        for (n = 0; n < Gx.ⲆᐃΔⲆⲆ.length; n++) {
          var D = Gx.ⲆᐃΔⲆⲆ[n];
          if (D[1] === "isl") {
            Gx.ΔⲆᐃᐃⲆᐃΔ(D[2], D[3], D[4]);
          }
        }
      } else {
        Gx.ᐃⵠⲆⲆΔⵠⲆⲆⵠ(Gx.ⵠᐃΔⵠᐃⵠⲆ);
      }
      if (Gx.ⲆᐃΔⲆⲆ !== 0 && Gx.ⲆᐃΔⲆⲆ.length > 0 && Gx.ⲆᐃΔⲆⲆ[0].length > 3) {
        var E = [];
        for (n = 0; n < Gx.ⲆᐃΔⲆⲆ.length; n++) {
          if ((D = Gx.ⲆᐃΔⲆⲆ[n])[0] === 1) {
            if (D[1] === "r") {
              x(D[3], D[2], "wtb", 0, 1);
              E.push([D[3], D[2], D[4]]);
            } else {
              x(D[4], D[3], D[1], D[2], D[5]);
            }
          }
        }
        k(0, E);
        E = [];
      } else {
        for (h = 0; Gx.ᐃΔⲆΔⵠ.length > h; h++) {
          p = Gx.ᐃΔⲆΔⵠ[h];
          if (Gx.mode === 4) {
            if (p.ΔⵠΔ === Gx.ΔΔⵠⲆⵠ) {
              t(h, p.w / 10000);
            }
          } else {
            if (p.ΔⵠΔ === Gx.ΔΔⵠⲆⵠ) {
              b(h, p.w / 10000);
            }
            if (Gx.ⲆⲆⲆⲆⵠΔⵠ === p.ΔⵠΔ) {
              l(h, p.w / 10000);
            }
            if (p.ΔⵠΔ === Gx.ᐃΔΔᐃΔⲆⲆ) {
              m(h, p.w / 10000);
            }
            if (p.ΔⵠΔ === Gx.ⵠᐃᐃⲆⲆⵠᐃ) {
              c(h, p.w / 10000);
            }
            if (Gx.ᐃⵠⵠⵠᐃⲆⵠ === p.ΔⵠΔ) {
              r(h);
            }
          }
        }
      }
      Rt("isl", 1);
      Rt("wtb", 20);
      Rt("la", 1);
      Rt("c", 1);
      Rt("s", 1);
      Rt("f", 1);
      Rt("p", 1);
      Rt("g", 1);
      Rt("d", 1);
      Rt("a", 1);
      Rt("re", 1);
      Rt("m", 1);
      ad = [];
      Gx.ΔⵠΔᐃᐃΔⵠⲆⲆ(Dx);
    };
    this.ⵠΔΔⲆ = x;
    this.ΔⵠΔᐃᐃΔⵠⲆⲆ = function (b) {
      for (var c = 0; c < this.ⲆΔⲆΔΔ; c++) {
        for (var d = 0; this.ⵠᐃΔΔΔ > d; d++) {
          if (!b.ᐃⲆⲆᐃ[c]) {
            b.ᐃⲆⲆᐃ[c] = [];
          }
          if (b.ᐃⲆⲆᐃ[c][d]) {
            var e = b.ᐃⲆⲆᐃ[c][d];
            if (e.de && e.de.length > 0) {
              for (var f = 0; e.de.length > f; f++) {
                if (e.de[f] && e.de[f].length > 0) {
                  e.de = e.de[f][0];
                  if (f >= 41 && f <= 49) {
                    e.de.scale = 3;
                    var h = Math.floor(Math.random() * 3 + 1);
                    e.de.ΔⲆᐃ = [];
                    for (var j = 0; j < h; j++) {
                      e.de.ΔⲆᐃ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.PI * Math.random() * 2,
                        ΔᐃΔΔⲆ: 41 + Math.floor(Math.random() * 9)
                      });
                    }
                  } else if (f >= 19 && f <= 26) {
                    e.de.scale = 3;
                    h = Math.floor(Math.random() * 3 + 1);
                    e.de.ΔⲆᐃ = [];
                    for (j = 0; j < h; j++) {
                      e.de.ΔⲆᐃ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.random() * Math.PI * 2,
                        ΔᐃΔΔⲆ: 19 + Math.floor(Math.random() * 8)
                      });
                    }
                  } else if (f <= 15 || f >= 27 && f <= 40) {
                    e.de.angle = 0;
                    e.de.scale = 2;
                    e.de.ΔᐃΔΔⲆ = f;
                  } else {
                    e.de.angle = Math.PI * Math.random() * 2;
                    e.de.scale = 1;
                    e.de.ΔᐃΔΔⲆ = f;
                  }
                }
              }
            }
            g(e, "p", new ᐃⵠⵠ.ⲆⲆⲆᐃ(Mo, 1, 1, 0, 10, 10));
            g(e, "t", new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10));
            g(e, "s", new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10));
            g(e, "g", new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10));
            g(e, "d", new ᐃⵠⵠ.ⲆⲆⲆᐃ($g, 1, 1, 0, 10, 10));
            g(e, "b", new ᐃⵠⵠ.ⲆⲆⲆᐃ(Gg, 1, 1, 0, 10, 10));
            g(e, "f", new ᐃⵠⵠ.ⲆⲆⲆᐃ(yl, 1, 1, 0, 10, 10));
            g(e, "sw", new ᐃⵠⵠ.ⲆⲆⲆᐃ(Sq, 1, 1, 0, 10, 10));
            g(e, "gw", new ᐃⵠⵠ.ⲆⲆⲆᐃ(Fa, 1, 1, 0, 10, 10));
            g(e, "dw", new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10));
            g(e, "a", new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10));
            g(e, "cs", new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10));
            g(e, "plm", new ᐃⵠⵠ.ⲆⲆⲆᐃ(yg, 1, 1, 0, 10, 10));
            g(e, "re", new ᐃⵠⵠ.ⲆⲆⲆᐃ(Nh, 1, 1, 0, 10, 10));
            g(e, "c", new ᐃⵠⵠ.ⲆⲆⲆᐃ(yg, 1, 1, 0, 10, 10));
            g(e, "m", new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 10, 10));
          } else {
            b.ᐃⲆⲆᐃ[c][d] = [];
          }
        }
      }
    };
    this.time = sh.ⲆⲆΔ;
    this.ᐃⲆΔⵠᐃ = {
      now: 0,
      ⲆⵠΔⵠⲆ: 0,
      translate: {
        x: 0,
        y: 0
      },
      ᐃᐃⲆⵠⵠ: 0
    };
    this.ⲆᐃⵠⲆΔⵠΔⵠΔ = function () {
      this.ⲆΔⲆΔⵠ = [];
      this.ᐃⲆΔ[0] = [];
      this.ᐃⲆΔ[2] = [];
      this.ᐃⲆΔ[1] = [];
      this.ᐃⲆΔ[6] = [];
      this.ᐃⲆΔ[3] = [];
      this.ᐃⲆΔ[5] = [];
      this.ᐃⲆΔ[12] = [];
      this.ᐃⲆΔ[13] = [];
      this.ᐃⲆΔ[14] = [];
      this.ᐃⲆΔ[20] = [];
      this.ᐃⲆΔ[52] = [];
      this.ᐃⲆΔ[30] = [];
      this.ᐃⲆΔ[56] = [];
      this.ᐃⲆΔ[38] = [];
      this.ᐃⲆΔ[33] = [];
      this.ᐃⲆΔ[31] = [];
      this.ᐃⲆΔ[55] = [];
      this.ᐃⲆΔ[37] = [];
      this.ᐃⲆΔ[43] = [];
      this.ᐃⲆΔ[44] = [];
      this.ᐃⲆΔ[54] = [];
      this.ᐃⲆΔ[39] = [];
      this.ᐃⲆΔ[40] = [];
      this.ᐃⲆΔ[32] = [];
      this.ᐃⲆΔ[24] = [];
      this.ᐃⲆΔ[25] = [];
      this.ᐃⲆΔ[26] = [];
      this.ᐃⲆΔ[27] = [];
      this.ᐃⲆΔ[28] = [];
      this.ᐃⲆΔ[35] = [];
      this.ᐃⲆΔ[4] = [];
      this.ᐃⲆΔ[7] = [];
      this.ᐃⲆΔ[8] = [];
      this.ᐃⲆΔ[9] = [];
      this.ᐃⲆΔ[19] = [];
      this.ᐃⲆΔ[50] = [];
      this.ᐃⲆΔ[41] = [];
      this.ᐃⲆΔ[10] = [];
      this.ᐃⲆΔ[15] = [];
      this.ᐃⲆΔ[16] = [];
      this.ᐃⲆΔ[17] = [];
      this.ᐃⲆΔ[21] = [];
      this.ᐃⲆΔ[51] = [];
      this.ᐃⲆΔ[45] = [];
      this.ᐃⲆΔ[46] = [];
      this.ᐃⲆΔ[47] = [];
      this.ᐃⲆΔ[48] = [];
      this.ᐃⲆΔ[49] = [];
      this.ᐃⲆΔ[53] = [];
      this.ᐃⲆΔ[18] = [];
      this.ᐃⲆΔ[29] = [];
      this.ᐃⲆΔ[56] = [];
      this.ᐃⲆΔ[11] = [];
      this.ᐃⲆΔ[22] = [];
      this.ᐃⲆΔ[23] = [];
      this.ᐃⲆΔ[100] = [];
      this.ᐃⲆΔ[80] = [];
      this.ᐃⲆΔ[60] = [];
      this.ᐃⲆΔ[67] = [];
      this.ᐃⲆΔ[70] = [];
      this.ᐃⲆΔ[77] = [];
      this.ᐃⲆΔ[71] = [];
      this.ᐃⲆΔ[72] = [];
      this.ᐃⲆΔ[73] = [];
      this.ᐃⲆΔ[74] = [];
      this.ᐃⲆΔ[65] = [];
      this.ᐃⲆΔ[66] = [];
      this.ᐃⲆΔ[62] = [];
      this.ᐃⲆΔ[88] = [];
      this.ᐃⲆΔ[91] = [];
      this.ᐃⲆΔ[90] = [];
      this.ᐃⲆΔ[63] = [];
      this.ᐃⲆΔ[78] = [];
      this.ᐃⲆΔ[75] = [];
      this.ᐃⲆΔ[76] = [];
      this.ᐃⲆΔ[64] = [];
      this.ᐃⲆΔ[69] = [];
      this.ᐃⲆΔ[68] = [];
      this.ᐃⲆΔ[79] = [];
      this.ᐃⲆΔ[89] = [];
      this.ᐃⲆΔ[83] = [];
      this.ᐃⲆΔ[84] = [];
      this.ᐃⲆΔ[85] = [];
      this.ᐃⲆΔ[81] = [];
      this.ᐃⲆΔ[82] = [];
      this.ᐃⲆΔ[86] = [];
      this.ᐃⲆΔ[34] = [];
      this.ᐃⲆΔ[36] = [];
      this.ᐃⲆΔ[61] = [];
      this.ᐃⲆΔ[87] = [];
      this.ᐃⲆΔ[42] = [];
    };
    this.ⵠⵠⵠΔⲆⲆᐃⵠⲆ = function (a) {
      if (this.ⲆΔⲆΔⵠ[a]) {
        ⵠⲆΔⵠ = this.ⲆΔⲆΔⵠ[a].type;
        this.ⲆΔⲆΔⵠ[a] = null;
        for (var b = this.ᐃⲆΔ[ⵠⲆΔⵠ], c = 0; b.length > c; c++) {
          if (b[c].ᐃⲆⲆⵠ == a) {
            b.splice(c, 1);
            return;
          }
        }
      }
    };
    this.ⵠⲆᐃΔΔΔᐃⲆΔ = function (a, b) {
      for (var c = 0; this.ᐃⲆΔ[56].length > c; c++) {
        var d = this.ᐃⲆΔ[56][c];
        if (b === Math.floor(d.x / 100) && a === Math.floor(d.y / 100)) {
          return 1;
        }
      }
      return 0;
    };
    this.ΔΔᐃⲆⵠᐃⲆⵠⵠ = function (a, b) {
      for (var c = 0; c < this.ᐃⲆΔ[30].length; c++) {
        var d = this.ᐃⲆΔ[30][c];
        if (a == Math.floor(d.x / 100) && b == Math.floor(d.y / 100)) {
          return rr;
        }
      }
      return false;
    };
    this.ΔⲆᐃⵠⵠ = function (j) {
      for (var e = 0; e < j.length; e++) {
        ⵠΔᐃⵠ = j[e];
        if (ⵠΔᐃⵠ.angle != ⵠΔᐃⵠ.ⲆⵠΔⵠΔᐃⲆ) {
          var q = Math.PI * 2;
          ⵠΔᐃⵠ.angle = (ⵠΔᐃⵠ.angle + q) % q;
          ⵠΔᐃⵠ.ⲆⵠΔⵠΔᐃⲆ = (ⵠΔᐃⵠ.ⲆⵠΔⵠΔᐃⲆ + q) % q;
          if (ⵠΔᐃⵠ.angle != ⵠΔᐃⵠ.ⲆⵠΔⵠΔᐃⲆ) {
            var w = ⵠΔᐃⵠ.ⲆⵠΔⵠΔᐃⲆ - ⵠΔᐃⵠ.angle;
            var B = Math.abs(w);
            if (B > Math.PI) {
              B = Math.PI * 2 - B;
            }
            var D = B / Math.PI * 3 * 10 * Ox;
            if (Math.PI < w) {
              ⵠΔᐃⵠ.angle -= D;
            } else if (w < -Math.PI) {
              ⵠΔᐃⵠ.angle += D;
            } else if (w < 0) {
              ⵠΔᐃⵠ.angle -= D;
            } else {
              ⵠΔᐃⵠ.angle += D;
            }
            ⵠΔᐃⵠ.angle = (ⵠΔᐃⵠ.angle + q) % q;
            if (D > Math.abs(ⵠΔᐃⵠ.angle - ⵠΔᐃⵠ.ⲆⵠΔⵠΔᐃⲆ)) {
              ⵠΔᐃⵠ.angle = ⵠΔᐃⵠ.ⲆⵠΔⵠΔᐃⲆ;
            }
          }
        }
        Math.floor(ⵠΔᐃⵠ.r.y / 100);
        Math.floor(ⵠΔᐃⵠ.r.x / 100);
        if (ⵠΔᐃⵠ.x != ⵠΔᐃⵠ.r.x || ⵠΔᐃⵠ.r.y != ⵠΔᐃⵠ.y) {
          if (ⵠΔᐃⵠ.action & 64) {
            ⵠΔᐃⵠ.action -= 64;
          }
          ⵠΔᐃⵠ.action |= 32;
          var E = ᐃⵠⵠ.ΔⵠΔᐃⵠᐃᐃ(ⵠΔᐃⵠ, ⵠΔᐃⵠ.r) + Math.PI;
          var F = Ox * ⵠΔᐃⵠ.ΔΔΔΔⲆ;
          var G = ᐃⵠⵠ.ⲆᐃⵠⲆᐃᐃⵠ(F, E);
          if (ᐃⵠⵠ.ⲆΔⵠᐃΔΔⵠ(ᐃⵠⵠ.ᐃᐃᐃⲆΔᐃⵠ(ⵠΔᐃⵠ, ⵠΔᐃⵠ.r)) > ᐃⵠⵠ.ⲆΔⵠᐃΔΔⵠ(G)) {
            ᐃⵠⵠ.ⵠᐃⲆᐃⵠΔⲆ(ⵠΔᐃⵠ, G);
          } else {
            if (ⵠΔᐃⵠ.action & 32) {
              ⵠΔᐃⵠ.action -= 32;
            }
            ⵠΔᐃⵠ.action |= 64;
            ᐃⵠⵠ.ΔⵠᐃⲆᐃΔΔ(ⵠΔᐃⵠ.r, ⵠΔᐃⵠ);
          }
        }
        if (ⵠΔᐃⵠ.ⲆΔⵠⵠⲆ) {
          var H = ⵠΔᐃⵠ.bubbles;
          var I = H.length;
          if (I === 0 || sh.ᐃⵠΔᐃⲆΔΔ > I && H[I - 1].ⵠⵠⲆⵠΔ < 0.95) {
            H.push({
              id: Math.floor(Math.random() * Ⲇⵠ[540][0].length),
              x: Math.floor(ⵠΔᐃⵠ.x + Math.random() * 80 - 40),
              y: Math.floor(ⵠΔᐃⵠ.y + Math.random() * 80 - 40),
              ⵠⵠⲆⵠΔ: 1
            });
          }
          for (var K = 0; K < I; K++) {
            H[K].ⵠⵠⲆⵠΔ = Math.max(0, H[K].ⵠⵠⲆⵠΔ - Ox);
          }
          for (K = 0; K < I; K++) {
            if (H[K].ⵠⵠⲆⵠΔ === 0) {
              H.splice(K, 1);
              break;
            }
          }
        }
        var L = 0;
        if (ⵠΔᐃⵠ.ᐃⲆΔΔ && Fx.ⵠⲆᐃᐃᐃ) {
          var M = ⵠΔᐃⵠ.ᐃᐃΔⲆΔ;
          I = M.length;
          if (ⵠΔᐃⵠ.ᐃᐃⵠⵠⵠᐃᐃ > 0 && ⵠΔᐃⵠ.ΔᐃⲆᐃΔ !== 227 && ⵠΔᐃⵠ.ΔᐃⲆᐃΔ !== 228 && ⵠΔᐃⵠ.ΔᐃⲆᐃΔ !== 230 && ⵠΔᐃⵠ.ΔᐃⲆᐃΔ !== 229 && ⵠΔᐃⵠ.ΔᐃⲆᐃΔ !== 91 && !ⵠΔᐃⵠ.ⲆΔⵠⵠⲆ && (L = 1, I === 0 || sh.ⵠⵠᐃΔⵠⵠⵠ < ᐃⵠⵠ.ⲆⲆⲆΔ(M[I - 1], ⵠΔᐃⵠ))) {
            var N = -ⵠΔᐃⵠ.angle;
            var O = ia * (Math.cos(N) * 45);
            var Q = ia * (Math.sin(N) * 45);
            M.push({
              x: ⵠΔᐃⵠ.x + O,
              y: ⵠΔᐃⵠ.y + Q,
              r: 8,
              alpha: 0.8
            });
            M.push({
              x: ⵠΔᐃⵠ.x - O,
              y: ⵠΔᐃⵠ.y - Q,
              r: 8,
              alpha: 0.8
            });
            M.push({
              x: ⵠΔᐃⵠ.x,
              y: ⵠΔᐃⵠ.y,
              r: 24,
              alpha: 1
            });
          }
          for (K = 0; K < I; K++) {
            M[K].alpha = Math.max(0, M[K].alpha - Ox / 2.2);
            M[K].r += Ox * 20;
          }
          if (M.length > 0 && M[0].alpha === 0) {
            M.splice(0, 1);
          }
          var R = ⵠΔᐃⵠ.ΔⲆΔΔⲆ;
          I = R.length;
          var S = -1;
          var U = Math.max(0, Math.sign(ⵠΔᐃⵠ.ᐃⲆΔⲆᐃᐃⲆ));
          var V = Math.max(0, Math.sign(ⵠΔᐃⵠ.ΔⵠⲆΔΔ));
          Math.max(0, Math.sign(ⵠΔᐃⵠ.ⵠⵠⲆⲆΔ));
          var W = Math.max(0, Math.sign(ⵠΔᐃⵠ.ΔⵠΔᐃⲆ));
          var X = Math.max(0, Math.sign(ⵠΔᐃⵠ.ΔᐃⲆⲆⵠ));
          if (ⵠΔᐃⵠ.ᐃⲆΔⲆᐃᐃⲆ > 0 || ⵠΔᐃⵠ.ⵠⵠⲆⲆΔ > 0) {
            S = 602;
          } else if (ⵠΔᐃⵠ.ΔᐃⲆⲆⵠ > 0) {
            S = 680;
          } else if (ⵠΔᐃⵠ.ΔⵠⲆΔΔ > 0) {
            S = 475;
          } else if (ⵠΔᐃⵠ.ΔⵠΔᐃⲆ > 0) {
            S = 476;
          }
          if (ⵠΔᐃⵠ.ΔᐃⲆᐃΔ === 225 && (U | V | W | X) === 1) {
            S = 228;
            var Y = ⵠΔᐃⵠ.ΔⲆⵠᐃⲆ - Math.PI / 2;
            var Z = 15;
            var _ = 11;
            var aa = sh.ⵠΔⵠⲆᐃᐃⵠ;
          } else if (ⵠΔᐃⵠ.ΔᐃⲆᐃΔ === 239 && (U | V | W | X) === 1) {
            S = 249;
            Y = ⵠΔᐃⵠ.ΔⲆⵠᐃⲆ - Math.PI / 2;
            Z = 21;
            _ = 16;
            aa = sh.ⵠΔⵠⲆᐃᐃⵠ;
          } else if (ⵠΔᐃⵠ.ΔᐃⲆᐃΔ === 226 && (U | V | W | X) == 1) {
            S = 234;
            Y = ⵠΔᐃⵠ.ΔⲆⵠᐃⲆ - Math.PI / 2;
            var ba = Math.random() * 50;
            Z = 10 + ba;
            _ = 0 + ba;
            aa = sh.ⵠΔⵠⲆᐃᐃⵠ * 0.9;
          } else {
            Y = ⵠΔᐃⵠ.angle;
            Z = 15;
            _ = 11;
            aa = sh.ⵠΔⵠⲆᐃᐃⵠ;
          }
          if (ⵠΔᐃⵠ.ΔᐃⲆᐃΔ === 227 || ⵠΔᐃⵠ.ΔᐃⲆᐃΔ === 228 || ⵠΔᐃⵠ.ΔᐃⲆᐃΔ === 91 || ⵠΔᐃⵠ.ΔᐃⲆᐃΔ === 229 || ⵠΔᐃⵠ.ΔᐃⲆᐃΔ === 230 || ⵠΔᐃⵠ.ⲆΔⵠⵠⲆ); else if (ⵠΔᐃⵠ.ΔᐃⲆᐃΔ === 224) {
            if (I === 0 || ᐃⵠⵠ.ⲆⲆⲆΔ(R[I - 1], ⵠΔᐃⵠ) > sh.ⲆⵠᐃⵠⲆΔⵠ) {
              R.push({
                x: ⵠΔᐃⵠ.x,
                y: ⵠΔᐃⵠ.y,
                angle: ⵠΔᐃⵠ.ΔⲆⵠᐃⲆ,
                alpha: 1,
                id: 226
              });
            }
          } else if (S != -1 && L === 0 && (I === 0 || aa < ᐃⵠⵠ.ⲆⲆⲆΔ(R[I - 1], ⵠΔᐃⵠ))) {
            ⵠΔᐃⵠ.ⵠⲆΔⲆⲆΔᐃ++;
            if (Math.abs(ⵠΔᐃⵠ.x - ⵠΔᐃⵠ.r.x) > 1 && Math.abs(ⵠΔᐃⵠ.y - ⵠΔᐃⵠ.r.y) > 1) {
              if (ⵠΔᐃⵠ.r.x > ⵠΔᐃⵠ.x && ⵠΔᐃⵠ.r.y < ⵠΔᐃⵠ.y || ⵠΔᐃⵠ.r.x < ⵠΔᐃⵠ.x && ⵠΔᐃⵠ.r.y > ⵠΔᐃⵠ.y) {
                if (ⵠΔᐃⵠ.ⵠⲆΔⲆⲆΔᐃ % 2) {
                  O = -_ * ia;
                  Q = ia * -_;
                } else {
                  Q = ia * _;
                  O = _ * ia;
                }
              } else if (ⵠΔᐃⵠ.ⵠⲆΔⲆⲆΔᐃ % 2) {
                O = ia * _;
                Q = -_ * ia;
              } else {
                Q = _ * ia;
                O = ia * -_;
              }
            } else if (ⵠΔᐃⵠ.ⵠⲆΔⲆⲆΔᐃ % 2) {
              O = ia * (Z * Math.cos(Y));
              Q = Math.sin(Y) * Z * ia;
            } else {
              O = ia * (Z * -Math.cos(Y));
              Q = ia * (-Math.sin(Y) * Z);
            }
            R.push({
              x: ⵠΔᐃⵠ.x + O,
              y: ⵠΔᐃⵠ.y + Q,
              angle: Y + Math.PI / 2,
              alpha: 1,
              id: S
            });
          }
          for (K = 0; I > K; K++) {
            if (R[K].id === 226) {
              R[K].alpha = Math.max(0, R[K].alpha - Ox * 1.5);
            } else {
              R[K].alpha = Math.max(0, R[K].alpha - Ox / 2.85);
            }
          }
          if (R.length > 0 && R[0].alpha === 0) {
            R.splice(0, 1);
          }
        }
      }
    };
    this.ⲆΔᐃ = function () {
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[0]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[80]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[60]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[67]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[70]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[77]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[71]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[72]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[73]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[74]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[61]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[62]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[88]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[91]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[90]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[63]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[78]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[75]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[76]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[64]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[68]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[65]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[66]);
      this.ΔⲆᐃⵠⵠ(this.ᐃⲆΔ[69]);
    };
    this.ⵠⵠᐃΔ = [];
    this.ⵠⵠᐃΔ[620] = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1.05, 1, 0.008, 0.008);
    this.ⵠⵠᐃΔ[619] = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Kr, 1, 1.08, 1, 0.006, 0.006);
    this.ⵠⵠᐃΔ[694] = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1.02, 1, 0.008, 0.008);
    this.ⵠⵠᐃΔ[695] = new ᐃⵠⵠ.ⲆⲆⲆᐃ(th, 1, 1.08, 1, 0.006, 0.006);
    this.ΔⵠⲆⲆᐃ = [];
    this.ΔⵠⲆⲆᐃ[0] = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Ni, 0.1, 1, 0, 0.6, 0.6);
    this.ΔⵠⲆⲆᐃ[1] = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Ni, 0.4, 1, 0, 0.6, 0.6);
    this.ΔⵠⲆⲆᐃ[2] = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Kr, 0.3, 1, 0, 0.6, 0.6);
    this.ΔⵠⲆⲆᐃ[3] = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Ge, 0.8, 1, 0, 0.6, 0.6);
    this.ΔⵠⲆⲆᐃ[4] = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Nq, 0.3, 1, 0, 0.6, 0.6);
    this.ΔⵠⲆⲆᐃ[5] = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.8, 1, 0, 0.6, 0.6);
    this.ΔⵠⲆⲆᐃ[6] = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.5, 1, 0, 0.6, 0.6);
    this.ΔⵠⲆⲆᐃ[7] = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.9, 1, 0, 0.6, 0.6);
    this.ΔⵠⲆⲆᐃ[8] = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.6, 1, 0, 0.6, 0.6);
    this.ΔⵠⲆⲆᐃ[9] = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.2, 1, 0, 0.6, 0.6);
    this.ΔⵠⲆⲆᐃ[10] = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.6, 1, 0, 0.6, 0.6);
    this.ΔⵠⲆⲆᐃ[11] = new ᐃⵠⵠ.ⲆⲆⲆᐃ(I, 0.4, 1, 0, 0.6, 0.6);
    this.ΔⵠⲆⲆᐃ[12] = new ᐃⵠⵠ.ⲆⲆⲆᐃ(N, 0.8, 1, 0, 0.6, 0.6);
    this.ΔⵠⲆⲆᐃ[13] = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.2, 1, 0, 0.6, 0.6);
    this.ΔⵠⲆⲆᐃ[14] = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0.7, 1, 0, 0.6, 0.6);
  }
  let $f = Ro;
  let Vw = Lk;
  const Ww = kk;
  function Xw(a, b) {
    const c = a ^ 51874;
    const d = (b | 49756) & ~(b & 49756);
    const e = pb(c, d);
    (function (b, c, d, e) {
      const f = (0 << (b & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 8 & 255)) + (8 << (b >> 24 & 255));
      const g = (0 << (c >> 8 & 255)) + (24 << (c & 255)) + (8 << (c >> 24 & 255)) + (16 << (c >> 16 & 255));
      const a = e ^ 46031;
      Vx(f, g, d ^ 19779);
      ks(a, f, g);
    })(c, d, c, d);
    return ~(e & 43688) & e | ~(e & 43688) & 43688;
  }
  function Yw(b, c, d, e, f, i) {
    const a = e ^ 50636;
    const j = (16 << (f >> 24 & 255)) + (8 << (f >> 8 & 255)) + (24 << (f & 255)) + (0 << (f >> 16 & 255));
    const k = Mk((24 << (b >> 16 & 255)) + (0 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b & 255)), ((c + 51907) * 1664525 + 1013904223) % 4294967296, (1013904223 + (d + 23398) * 1664525) % 4294967296);
    const h = Ob(a, j);
    return (0 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 8 & 255)) + (16 << ((k ^ h) & 255)) + (24 << ((k ^ h) >> 16 & 255));
  }
  function Zw(a, b, c, d) {
    this.id = a;
    this.ΔΔΔΔⲆ = (a + 5) * 8;
    this.ⵠⵠⲆⵠΔ = Yo / 1366;
    this.x = b;
    this.y = c;
    this.c = Math.sin(d);
    this.ⲆΔΔΔ = Math.cos(d);
    this.alpha = 0;
  }
  function $w(a, b, c) {
    Ij($f, a, b, c);
    const d = _w(Vw[0], Vw[1]);
    _w(Vw[2], Vw[0]);
    return d ^ 11251;
  }
  function _w(a, b) {
    Ai($f, a, b);
    const c = hs(Vw[0], Vw[1], Vw[0], Vw[1], Vw[0]);
    sx(Vw[1], Vw[0], Vw[1], Vw[0]);
    return ~(c & 54000) & c | ~(c & 54000) & 54000;
  }
  function ax() {
    Math.random();
    return "o";
  }
  function bx() {
    Math.random();
    return "g";
  }
  function cx() {
    Math.random();
    return "p";
  }
  function dx() {
    Math.random();
    return "n";
  }
  function ex() {
    Math.random();
    return "d";
  }
  function fx() {
    this.ⲆⵠΔⵠⲆ = function () { };
    this.ⵠⵠⵠⲆⲆ = {
      ᐃⵠⲆⲆ: 1,
      open: Ni,
      ᐃⲆⲆⵠΔ: 1
    };
    this.ᐃⵠⵠᐃⲆ = {
      open: false,
      ᐃⵠⲆⲆ: 1,
      ᐃⲆⲆⵠΔ: -1
    };
    this.ⲆΔⵠᐃ = {
      ᐃΔΔⵠⲆᐃⲆ: 0,
      ᐃⵠⲆⲆ: 1,
      open: false,
      ᐃⲆⲆⵠΔ: -1,
      ΔΔⵠΔⲆ: 0
    };
    this.ⲆᐃᐃⲆ = {
      ⵠⲆⵠⵠΔⲆⵠ: 0,
      ΔΔΔᐃᐃΔΔ: 0,
      type: 0,
      ᐃΔᐃⲆᐃⲆᐃ: 0,
      ᐃⵠⲆⲆ: 1,
      ᐃⲆⲆⵠΔ: -1,
      open: false
    };
    this.ⲆᐃᐃΔ = {
      ⵠⲆⵠⵠΔⲆⵠ: 0,
      ⲆⵠⲆⵠⲆΔⲆ: 0,
      ΔΔⵠΔⲆ: 0,
      ᐃⵠⲆⲆ: 1,
      ᐃⲆⲆⵠΔ: -1,
      open: false
    };
    this.sign = {
      ᐃⲆⲆⵠΔ: -1,
      open: false
    };
    this.ᐃⲆⲆⵠᐃ = {
      ᐃᐃΔᐃ: 0,
      ᐃⵠⲆⲆ: 1,
      ᐃⲆⲆⵠΔ: -1,
      open: false
    };
    this.ⲆΔⵠⵠⲆ = {
      enabled: cs,
      ⲆΔⲆΔⲆ: -1,
      label: false,
      now: -1,
      ⵠᐃⲆᐃ: sw
    };
    this.ΔⵠⲆⲆ = {
      id: -1,
      ᐃᐃΔᐃ: 0,
      ᐃⵠⲆⲆ: 1,
      ᐃⲆⲆⵠΔ: -1,
      open: false,
      lock: Sq,
      locked: false,
      ⲆⵠⲆⲆΔⵠΔ: false,
      ΔⲆⲆΔⵠᐃΔ: Mo
    };
    this.ᐃⵠⵠᐃⵠ = true;
    this.reconnect = {
      enabled: false,
      rotate: 0
    };
    this.key = ᐃⵠⵠ.ⲆⲆΔⲆΔⲆⵠ("key", bj.location.href);
    var a = ᐃⵠⵠ.ⲆⲆΔⲆΔⲆⵠ("egg", bj.location.href);
    if (a) {
      Fx.ⲆΔⵠΔ = parseInt(a);
    }
    this.beta = bj.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
    if (this.key && this.beta) {
      ᐃⲆᐃΔ.set("starve_beta", this.key);
    } else if (this.beta) {
      this.key = ᐃⲆᐃΔ.get("starve_beta");
    }
    this.ⵠⵠⲆΔⵠ = ᐃⲆᐃΔ.get("starve_token") ? ᐃⲆᐃΔ.get("starve_token") : ᐃⵠⵠ.ΔΔᐃⵠⲆⵠⵠ(14);
    bj.baguette();
    var b = bj.kot2;
    function c() {
      this.seed = 1;
      this.ⵠΔⲆⵠⵠⵠⵠ = 2;
      this.ⵠⲆⵠⵠᐃⲆⵠ = 3;
      this.ⵠΔΔⵠΔⲆⵠⲆⲆ = 1;
      this.ⵠΔΔⲆᐃᐃᐃᐃΔ = 2;
      this.ᐃⲆⵠᐃⲆⲆⲆⲆᐃ = 3;
      this.ᐃⵠⲆᐃⲆⵠⲆ = function (a) {
        this.seed = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆᐃᐃΔⵠⵠⲆ = function (a) {
        this.ⵠΔⲆⵠⵠⵠⵠ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⵠⵠⲆⵠΔᐃᐃ = function (a) {
        this.ⵠⲆⵠⵠᐃⲆⵠ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⵠᐃΔⲆᐃⵠΔΔⵠ = function (a) {
        this.ⵠΔΔⵠΔⲆⵠⲆⲆ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆⵠⵠⵠᐃⲆⲆΔᐃ = function (a) {
        this.ⵠΔΔⲆᐃᐃᐃᐃΔ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆⵠⵠᐃΔᐃⲆⲆⵠ = function (a) {
        this.ᐃⲆⵠᐃⲆⲆⲆⲆᐃ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ΔᐃⲆⵠΔΔⲆ = function (c, e, f, i, j, k, a) {
        for (var m = 1; m < a;) {
          var n = m * f % ΔⲆᐃᐃⵠᐃⵠ;
          var o = ΔᐃᐃᐃⵠⲆΔ[n];
          if (o < 0.1) {
            p += 50;
            m += 50;
          } else {
            var p = Math.floor(o * i + j);
            if (m > k && m < a) {
              var q = Math.random() > 0.5 ? Ox * -10 : Ox * 10;
              var r = p * e;
              this.Ⲇⵠᐃᐃᐃᐃᐃ[n] = Math.max(-25, Math.min(25, this.Ⲇⵠᐃᐃᐃᐃᐃ[n] + q));
              this.ᐃⵠᐃΔⵠⵠⲆ[n] = Math.max(-8, Math.min(8, this.ᐃⵠᐃΔⵠⵠⲆ[n] + q));
              if (r > 0) {
                Uo.beginPath();
                Uo.arc(m + Hx.ΔΔⲆ.x + this.ᐃⵠᐃΔⵠⵠⲆ[n], c + this.Ⲇⵠᐃᐃᐃᐃᐃ[n] - 20, r, 0, Math.PI * 2);
                if (Gx.transition) {
                  var t = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
                  Uo.fillStyle = sf(83, 156, 160, 236, 247, 249, t);
                } else {
                  Uo.fillStyle = sh.ᐃΔⵠⲆⵠᐃᐃ[Gx.time];
                }
                Uo.fill();
              }
            }
            m += p * 2;
          }
        }
      };
      this.ᐃⲆΔⲆᐃⵠⲆ = function (c, e, f, i, j, k, a) {
        for (var m = 1; a > m;) {
          var n = m * f % ΔⲆᐃᐃⵠᐃⵠ;
          var o = ΔᐃᐃᐃⵠⲆΔ[n];
          if (o < 0.1) {
            p += 50;
            m += 50;
          } else {
            var p = Math.floor(o * i + j);
            if (m > k && a > m) {
              var q = Math.random() > 0.5 ? Ox * -10 : Ox * 10;
              var r = p * e;
              this.ΔΔΔⲆᐃ[n] = Math.max(-25, Math.min(25, this.ΔΔΔⲆᐃ[n] + q));
              this.ᐃᐃΔΔⲆ[n] = Math.max(-8, Math.min(8, this.ᐃᐃΔΔⲆ[n] + q));
              if (r > 0) {
                Uo.beginPath();
                Uo.arc(c + this.ΔΔΔⲆᐃ[n] - 20, m + Hx.ΔΔⲆ.y + this.ᐃᐃΔΔⲆ[n], r, 0, Math.PI * 2);
                if (Gx.transition) {
                  var t = Gx.time ? 1 - Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ : Gx.ⵠⵠⲆⲆ.ᐃⵠⲆ;
                  Uo.fillStyle = sf(83, 156, 160, 236, 247, 249, t);
                } else {
                  Uo.fillStyle = sh.ᐃΔⵠⲆⵠᐃᐃ[Gx.time];
                }
                Uo.fill();
              }
            }
            m += p * 2;
          }
        }
      };
      this.ⲆΔⲆΔᐃΔⲆⲆᐃ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - 0 - e - 2) / 200) === 0) {
          this.ⵠⵠⲆⵠΔᐃᐃ();
        }
        Uo.globalAlpha = ᐃⵠⵠ.ΔⲆⲆᐃⲆ(h);
        this.ΔᐃⲆⵠΔΔⲆ(d, h, this.ⵠⲆⵠⵠᐃⲆⵠ, 18, 16, f, g);
        Uo.globalAlpha = 1;
        if ((h = -(b - 250 - e + 500) / 150) === 0) {
          this.ᐃⵠⲆᐃⲆⵠⲆ();
        }
        Uo.globalAlpha = ᐃⵠⵠ.ΔⲆⲆᐃⲆ(h);
        this.ΔᐃⲆⵠΔΔⲆ(b, h, this.seed, 12, 10, f, g);
        Uo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.ⲆᐃᐃΔⵠⵠⲆ();
          }
          Uo.globalAlpha = ᐃⵠⵠ.ΔⲆⲆᐃⲆ(h);
          this.ΔᐃⲆⵠΔΔⲆ(c, h, this.ⵠΔⲆⵠⵠⵠⵠ, 6, 6, f, g);
          Uo.globalAlpha = 1;
        }
      };
      this.ᐃⲆⵠΔⲆⲆΔᐃᐃ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        var h = -(-d + 0 + e + 2) / 200;
        if (h === 0) {
          this.ⵠⵠⲆⵠΔᐃᐃ();
        }
        Uo.globalAlpha = ᐃⵠⵠ.ΔⲆⲆᐃⲆ(h);
        this.ΔᐃⲆⵠΔΔⲆ(d, h, this.ⵠⲆⵠⵠᐃⲆⵠ, 18, 16, f, g);
        Uo.globalAlpha = 1;
        if ((h = -(-b + 250 + e) / 150) === 0) {
          this.ᐃⵠⲆᐃⲆⵠⲆ();
        }
        Uo.globalAlpha = ᐃⵠⵠ.ΔⲆⲆᐃⲆ(h);
        this.ΔᐃⲆⵠΔΔⲆ(b, h, this.seed, 12, 10, f, g);
        Uo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.ⲆᐃᐃΔⵠⵠⲆ();
          }
          Uo.globalAlpha = ᐃⵠⵠ.ΔⲆⲆᐃⲆ(h);
          this.ΔᐃⲆⵠΔΔⲆ(c, h, this.ⵠΔⲆⵠⵠⵠⵠ, 6, 6, f, g);
          Uo.globalAlpha = 1;
        }
      };
      this.ⲆⲆⵠᐃⲆΔⲆⲆⵠ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        if ((h = -(-d + 0 + e + 2) / 200) === 0) {
          this.ⵠⵠⲆⵠΔᐃᐃ();
        }
        Uo.globalAlpha = ᐃⵠⵠ.ΔⲆⲆᐃⲆ(h);
        this.ᐃⲆΔⲆᐃⵠⲆ(d, h, this.ⵠⲆⵠⵠᐃⲆⵠ, 18, 16, f, g);
        Uo.globalAlpha = 1;
        var h = -(-b + 250 + e) / 150;
        if (h === 0) {
          this.ᐃⵠⲆᐃⲆⵠⲆ();
        }
        Uo.globalAlpha = ᐃⵠⵠ.ΔⲆⲆᐃⲆ(h);
        this.ᐃⲆΔⲆᐃⵠⲆ(b, h, this.seed, 12, 10, f, g);
        Uo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.ⲆᐃᐃΔⵠⵠⲆ();
          }
          Uo.globalAlpha = ᐃⵠⵠ.ΔⲆⲆᐃⲆ(h);
          this.ᐃⲆΔⲆᐃⵠⲆ(c, h, this.ⵠΔⲆⵠⵠⵠⵠ, 6, 6, f, g);
          Uo.globalAlpha = 1;
        }
      };
      this.ᐃᐃⵠᐃⵠΔᐃΔΔ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - 0 - e - 2) / 200) === 0) {
          this.ⵠⵠⲆⵠΔᐃᐃ();
        }
        Uo.globalAlpha = ᐃⵠⵠ.ΔⲆⲆᐃⲆ(h);
        this.ᐃⲆΔⲆᐃⵠⲆ(d, h, this.ⵠⲆⵠⵠᐃⲆⵠ, 18, 16, f, g);
        Uo.globalAlpha = 1;
        if ((h = -(b - 250 - e + 500) / 150) === 0) {
          this.ᐃⵠⲆᐃⲆⵠⲆ();
        }
        Uo.globalAlpha = ᐃⵠⵠ.ΔⲆⲆᐃⲆ(h);
        this.ᐃⲆΔⲆᐃⵠⲆ(b, h, this.seed, 12, 10, f, g);
        Uo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.ⲆᐃᐃΔⵠⵠⲆ();
          }
          Uo.globalAlpha = ᐃⵠⵠ.ΔⲆⲆᐃⲆ(h);
          this.ᐃⲆΔⲆᐃⵠⲆ(c, h, this.ⵠΔⲆⵠⵠⵠⵠ, 6, 6, f, g);
          Uo.globalAlpha = 1;
        }
      };
      this.w1 = {
        r: new ᐃⵠⵠ.ⵠΔΔⲆⲆ(ᐃⵠⵠ.ᐃΔⲆΔΔⵠΔ, 0, 10, 0, 0, 200),
        ⲆᐃⵠΔ: new ᐃⵠⵠ.ⵠΔΔⲆⲆ(ᐃⵠⵠ.ⲆⵠᐃⵠⲆᐃΔ, 0, 10, 200, 200, 0)
      };
      this.w2 = {
        r: new ᐃⵠⵠ.ⵠΔΔⲆⲆ(ᐃⵠⵠ.ΔⲆⲆᐃⲆⲆⲆ, 0, 10, 0, 0, 150),
        ⲆᐃⵠΔ: new ᐃⵠⵠ.ⵠΔΔⲆⲆ(ᐃⵠⵠ.ΔⲆⲆᐃⲆ, 0, 10, 150, 150, 0)
      };
      this.w3 = {
        r: new ᐃⵠⵠ.ⵠΔΔⲆⲆ(ᐃⵠⵠ.ⵠⲆⲆⵠⲆⵠΔ, 0, 10, 0, 0, 100),
        ⲆᐃⵠΔ: new ᐃⵠⵠ.ⵠΔΔⲆⲆ(ᐃⵠⵠ.ΔⲆⲆᐃⲆ, 0, 10, 100, 100, 0)
      };
      this.ᐃⵠⲆⲆᐃΔⵠⲆⵠ = function (a) {
        if (a.r.x === a.r.ⵠⵠΔᐃᐃ) {
          if (a.ⲆᐃⵠΔ.ⵠⵠΔᐃᐃ === a.ⲆᐃⵠΔ.x) {
            return a.r;
          } else {
            return a.ⲆᐃⵠΔ;
          }
        } else {
          return a.r;
        }
      };
      this.ΔⵠΔ = function (a) {
        var b;
        if (a.r.ⵠⵠΔᐃᐃ === a.r.x) {
          if (a.ⲆᐃⵠΔ.ⵠⵠΔᐃᐃ === a.ⲆᐃⵠΔ.x) {
            a.r.ᐃⲆⲆⲆΔⲆᐃ();
            a.ⲆᐃⵠΔ.ᐃⲆⲆⲆΔⲆᐃ();
            b = a.r;
          } else {
            b = a.ⲆᐃⵠΔ;
          }
        } else {
          b = a.r;
        }
        b.ⲆᐃⲆⲆⵠ(b.ⵠⵠΔᐃᐃ);
        return b;
      };
      this.ΔΔΔⲆᐃ = [];
      this.ᐃᐃΔΔⲆ = [];
      this.Ⲇⵠᐃᐃᐃᐃᐃ = [];
      this.ᐃⵠᐃΔⵠⵠⲆ = [];
      this.ⲆⵠΔⵠⲆ = function () {
        for (var a = 0; a < ΔⲆᐃᐃⵠᐃⵠ; a++) {
          this.ΔΔΔⲆᐃ[a] = Math.floor(ΔᐃᐃᐃⵠⲆΔ[a] * 25);
          this.ᐃᐃΔΔⲆ[a] = Math.floor(ΔᐃᐃᐃⵠⲆΔ[a] * 8);
          this.Ⲇⵠᐃᐃᐃᐃᐃ[a] = Math.floor(ΔᐃᐃᐃⵠⲆΔ[a] * 25);
          this.ᐃⵠᐃΔⵠⵠⲆ[a] = Math.floor(ΔᐃᐃᐃⵠⲆΔ[a] * 8);
        }
        this.w1.r.x = this.w1.r.ⵠⵠΔᐃᐃ;
        this.w2.r.ⵠᐃⲆΔᐃ = 3.5;
        this.w3.r.ⵠᐃⲆΔᐃ = 2;
      };
      this.ⲆⵠΔⵠⲆ();
    }
    this.ⵠⵠⲆΔⵠ = b.substring(0, 6) + this.ⵠⵠⲆΔⵠ.substring(6);
    this.ⵠᐃᐃᐃΔΔⲆ = ᐃⲆᐃΔ.get("starve_token_id") ? ᐃⲆᐃΔ.get("starve_token_id") : "";
    this.id = 0;
    this.ᐃⲆⲆⵠ = 0;
    this.ΔⲆⵠ = 0;
    this.ⵠᐃⲆᐃⲆⲆⲆ = {
      ΔⵠⲆᐃⲆⲆᐃ: "",
      ΔⲆᐃᐃᐃ: 0,
      ⵠⲆⵠᐃⵠ: 0,
      ⵠᐃⵠⲆⵠⵠΔ: 0
    };
    this.ᐃᐃⲆⵠⲆᐃᐃⲆΔ = {
      connected: 0,
      ⵠⵠᐃⲆΔ: new Date().getTime()
    };
    this.ⲆΔᐃⲆᐃ = [];
    this.ⲆᐃⲆⵠΔΔⲆ = function (a) {
      for (var b = 0; this.ⲆΔᐃⲆᐃ.length > b; b++) {
        if (a == this.ⲆΔᐃⲆᐃ[b]) {
          return true;
        }
      }
      return false;
    };
    this.ⵠⲆⲆΔⲆ = {
      ⲆΔⲆΔⲆ: 0,
      time: 0,
      value: 0,
      open: false,
      ⵠᐃⲆᐃ: function () {
        if (this.open) {
          var a = new Date().getTime();
          this.time = Math.floor((a - this.ⲆΔⲆΔⲆ) / 1000);
          if (this.time < 60) {
            Kx.ⵠⲆⲆΔⲆ.button.ⵠᐃⲆᐃ(Uo);
          } else {
            document.getElementById("shop_starterkit").style.display = "none";
            this.open = false;
          }
        }
      }
    };
    this.ΔⲆΔⲆⲆ = {
      id: -1,
      ᐃⵠⲆⲆ: -1,
      lock: 0,
      timeout: new ᐃⵠⵠ.ⲆⲆⲆᐃ(Tn, 0, 1, 0, 1 / 30, 1),
      wait: Ge
    };
    this.ᐃΔᐃⲆⵠ = {
      timeout: new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0, 1, 0, 1 / 5, 1),
      wait: Ks
    };
    this.ⲆΔΔᐃⲆ = {
      timeout: new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0, 1, 0, 1, 1),
      wait: Mo
    };
    this.ᐃΔⲆΔᐃ = {
      timeout: new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0, 1, 0, 1 / 10, 1),
      wait: Ks
    };
    this.ΔΔⲆ = new ᐃⵠⵠ.ᐃⲆⲆⲆⵠⵠⲆ(ᐃⵠⵠ.ΔΔᐃΔᐃΔᐃ, 0, 0.4, 0, 0, kq, Zo, kq, Zo);
    this.ΔΔⲆ.ⲆΔⲆΔⲆ = 0;
    this.ΔΔⲆ.ⵠⲆⵠⵠⵠᐃᐃ = 0;
    this.ΔΔⲆ.ⲆΔᐃ = function () {
      if (this.ⵠⲆⵠⵠⵠᐃᐃ > 0) {
        this.ⵠⲆⵠⵠⵠᐃᐃ -= Ox;
      } else {
        var a = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
        if (a) {
          this.ⲆΔⲆΔⲆ = 0;
          var b = Math.max(Math.min(kq - a.x, -2), -Gx.w + 2 + Yo);
          var c = Math.max(Math.min(Zo - a.y, -2), 2 - Gx.Ⲇᐃⵠ + jq);
          this.ⲆᐃⲆⲆⵠ({
            x: b,
            y: c
          });
        } else {
          this.ⲆΔⲆΔⲆ += Ox;
          if (this.ⲆΔⲆΔⲆ > 3) {
            this.ⲆΔⲆΔⲆ = 0;
            if (!Hx.reconnect.enabled) {
              Jx.ⵠᐃⵠΔΔⵠΔⲆⵠ();
            }
          }
        }
      }
    };
    this.ΔΔⲆ.w = screen.width;
    this.ΔΔⲆ.Ⲇᐃⵠ = screen.height;
    this.ΔΔⲆ.ΔᐃⵠΔⲆΔⲆ = this.ΔΔⲆ.w;
    this.ΔΔⲆ.ⵠⵠⲆΔⲆᐃΔ = this.ΔΔⲆ.Ⲇᐃⵠ;
    this.ΔΔⲆ.rx = 0;
    this.ΔΔⲆ.ry = 0;
    this.ΔΔⲆ.ⵠⲆᐃΔⲆᐃᐃᐃⲆ = 0;
    this.ΔΔⲆ.ⲆΔᐃΔᐃⵠᐃᐃⲆ = 0;
    this.ΔΔⲆ.ᐃⵠⲆᐃΔ = function (a, b) {
      this.x = -Math.min(Math.max(-Gx.ᐃᐃΔⵠΔᐃⵠ * 2, a - Gx.ᐃᐃΔⵠΔᐃⵠ - this.ΔᐃⵠΔⲆΔⲆ / 2), Gx.w - this.ΔᐃⵠΔⲆΔⲆ);
      this.y = -Math.min(Math.max(-Gx.ᐃⲆᐃᐃⲆᐃⵠ * 2, b - (Gx.ᐃⲆᐃᐃⲆᐃⵠ + this.ⵠⵠⲆΔⲆᐃΔ) / 2), Gx.Ⲇᐃⵠ - this.ⵠⵠⲆΔⲆᐃΔ + Gx.ᐃⲆᐃᐃⲆᐃⵠ);
      this.ⵠⵠΔᐃᐃ = this.x;
      this.ⲆᐃᐃⵠᐃΔⵠ = this.y;
    };
    this.control = {
      angle: 0,
      timeout: 0,
      ⵠⵠⲆⵠⵠⵠᐃ: 0,
      ΔΔⵠᐃ: 0,
      attack: 0,
      ⲆΔᐃ: function () {
        var a = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
        if (a) {
          var b = {
            x: Hx.ΔΔⲆ.x + a.x,
            y: Hx.ΔΔⲆ.y + a.y
          };
        } else {
          b = mq;
        }
        var c = ᐃⵠⵠ.ΔⵠΔᐃⵠᐃᐃ(Nx.ΔΔΔᐃ, b);
        var d = false;
        this.ΔΔⵠᐃ += Ox;
        if (!Nx.state) {
          if (a && !(a.action & 16) && this.ΔΔⵠᐃ > 0.2) {
            this.attack = 1;
            d = true;
            this.ΔΔⵠᐃ = 0;
            Jx.ⲆᐃᐃᐃⵠⲆⲆⲆᐃ(c);
          }
        }
        if (a) {
          a.angle = c;
          a.ⲆⵠΔⵠΔᐃⲆ = c;
        }
        if (!d) {
          this.timeout += Ox;
          if (this.timeout > 0.2) {
            this.timeout = 0;
            if (Math.abs(this.angle - c) > 0.005) {
              Jx.ΔⲆⲆⲆⲆᐃΔⲆⵠ(c);
              this.angle = c;
            }
          }
        }
        if (!Hx.ⲆᐃⲆᐃⲆ.open && !Hx.ᐃⲆᐃΔⵠ.open) {
          var e = 0;
          if (Mx.ΔⵠᐃⲆᐃΔᐃ()) {
            e |= 1;
          }
          if (Mx.ⲆΔΔᐃⵠΔⲆ()) {
            e |= 2;
          }
          if (Mx.ⵠᐃⲆⲆᐃⲆⵠ()) {
            e |= 4;
          }
          if (Mx.ⲆⲆⲆΔⲆⵠΔ()) {
            e |= 8;
          }
          if (this.ⵠⵠⲆⵠⵠⵠᐃ != e) {
            Jx.ⵠⲆⲆⲆⲆⲆᐃⵠⲆ(e);
          }
          this.ⵠⵠⲆⵠⵠⵠᐃ = e;
        }
      }
    };
    this.ⵠΔⲆⵠ = {
      c: 1,
      ⲆᐃⵠΔ: 1,
      Ⲇᐃⵠ: 1,
      ΔⵠΔ: 1,
      ⲆⲆⵠ: 1,
      ᐃⲆⵠⵠⲆⵠΔ: 1,
      ⵠΔΔⲆⲆⲆΔ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(true, 0, 1, 0, 3, 3),
      ΔΔⵠⲆⲆᐃⲆ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(vs, 0, 1, 0, 2, 2),
      ᐃᐃᐃⵠⲆᐃⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(vs, 0, 1, 0, 3, 3),
      ⲆⲆᐃⲆⵠⲆⵠ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(It, 0, 1, 0, 3, 3),
      ᐃᐃⲆⲆⵠⲆΔ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(It, 0, 1, 0, 3, 3),
      ⲆᐃᐃⲆⵠΔΔ: new ᐃⵠⵠ.ⲆⲆⲆᐃ(true, 0, 1, 0, 3, 3),
      ⲆⵠⵠⲆᐃ: new ᐃⵠⵠ.ⵠΔΔⲆⲆ(ᐃⵠⵠ.ΔΔᐃΔᐃΔᐃ, 0, 1, 0, 0, 1),
      ⵠⵠⲆⵠΔ: new ᐃⵠⵠ.ⵠΔΔⲆⲆ(ᐃⵠⵠ.ΔΔᐃΔᐃΔᐃ, 0, 1, 0, 0, 1),
      ΔΔⲆᐃᐃⲆⵠ: new ᐃⵠⵠ.ⵠΔΔⲆⲆ(ᐃⵠⵠ.ΔΔᐃΔᐃΔᐃ, 0, 1, 0, 0, 1),
      ΔⵠⵠⵠᐃⵠⲆ: new ᐃⵠⵠ.ⵠΔΔⲆⲆ(ᐃⵠⵠ.ΔΔᐃΔᐃΔᐃ, 0, 1, 0, 0, 1),
      ⲆⲆⵠⲆⲆⲆⲆ: new ᐃⵠⵠ.ⵠΔΔⲆⲆ(ᐃⵠⵠ.ΔΔᐃΔᐃΔᐃ, 0, 1, 0, 0, 1),
      ΔᐃΔⲆⲆ: new ᐃⵠⵠ.ⵠΔΔⲆⲆ(ᐃⵠⵠ.ΔΔᐃΔᐃΔᐃ, 0, 1, 0, 0, 1),
      ⲆΔᐃ: function () {
        this.ⵠΔΔⲆⲆⲆΔ.ⲆΔᐃ();
        this.ΔΔⵠⲆⲆᐃⲆ.ⲆΔᐃ();
        this.ᐃᐃᐃⵠⲆᐃⵠ.ⲆΔᐃ();
        this.ⲆⲆᐃⲆⵠⲆⵠ.ⲆΔᐃ();
        this.ᐃᐃⲆⲆⵠⲆΔ.ⲆΔᐃ();
        this.ⲆᐃᐃⲆⵠΔΔ.ⲆΔᐃ();
        this.ⲆⵠⵠⲆᐃ.ⲆᐃⲆⲆⵠ(this.c);
        this.ⵠⵠⲆⵠΔ.ⲆᐃⲆⲆⵠ(this.ⲆᐃⵠΔ);
        this.ΔΔⲆᐃᐃⲆⵠ.ⲆᐃⲆⲆⵠ(this.Ⲇᐃⵠ);
        this.ΔⵠⵠⵠᐃⵠⲆ.ⲆᐃⲆⲆⵠ(this.ΔⵠΔ);
        this.ⲆⲆⵠⲆⲆⲆⲆ.ⲆᐃⲆⲆⵠ(this.ⲆⲆⵠ);
        this.ΔᐃΔⲆⲆ.ⲆᐃⲆⲆⵠ(this.ᐃⲆⵠⵠⲆⵠΔ);
      }
    };
    this.ᐃⵠᐃⲆⵠⵠᐃ = false;
    this.ᐃᐃⲆⵠⲆᐃᐃ = I;
    this.ᐃΔΔⵠΔ = Nh;
    this.ᐃⲆΔⵠᐃⵠΔ = Ni;
    this.ⵠᐃΔⵠ = {
      max: 10,
      ᐃⵠᐃⵠⵠⵠⵠ: 0,
      ⵠⲆⲆᐃⲆ: 0,
      ΔΔᐃΔ: [],
      ⲆᐃⵠⲆΔ: [],
      ⵠⵠᐃⵠΔᐃᐃ: function (a, b) {
        if (a === 1) {
          this.ⵠⲆⲆᐃⲆ = 6;
        }
        this.ᐃⵠᐃⵠⵠⵠⵠ += b;
        this.max = 10 + this.ᐃⵠᐃⵠⵠⵠⵠ + this.ⵠⲆⲆᐃⲆ;
      },
      ⵠᐃΔΔⲆⲆⲆ: {
        item: -1,
        ⵠᐃ: null,
        ⲆⲆⵠⲆΔⵠᐃ: 0,
        ᐃⵠᐃΔⲆⵠᐃ: 0,
        ⲆⵠⲆΔⲆ: -1,
        ⲆⵠΔΔᐃ: -1,
        ⲆⲆⵠᐃⵠ: function (a) {
          if (!!this.ⲆⲆⵠⲆΔⵠᐃ && (a.x !== this.ⲆⵠⲆΔⲆ || a.y !== this.ⲆⵠΔΔᐃ)) {
            this.ᐃⵠᐃΔⲆⵠᐃ = 1;
          }
        },
        start: function (a, b) {
          this.ⲆⵠⲆΔⲆ = b.x;
          this.ⲆⵠΔΔᐃ = b.y;
          this.item = a;
          this.ⵠᐃ = Hx.ⵠᐃΔⵠ.ⲆᐃⵠⲆΔ[a].info.ⵠᐃ[2];
          this.ⲆⲆⵠⲆΔⵠᐃ = 1;
        },
        stop: function () {
          this.ⲆⲆⵠⲆΔⵠᐃ = 0;
          this.ᐃⵠᐃΔⲆⵠᐃ = 0;
          this.ⲆⵠⲆΔⲆ = -1;
          this.ⲆⵠΔΔᐃ = -1;
        },
        release: function () {
          var a = -1;
          var b = Hx.ⵠᐃΔⵠ.ⲆᐃⵠⲆΔ;
          var c = 0;
          if (this.ⲆⲆⵠⲆΔⵠᐃ && this.ᐃⵠᐃΔⲆⵠᐃ) {
            for (var d = 0; d < b.length; d++) {
              if (b[d].info.state === yf) {
                a = d;
                break;
              }
            }
            if (a !== -1 && a !== this.item && b[this.item]) {
              c = 1;
              var f = b[a];
              b[a] = b[this.item];
              b[this.item] = f;
              Kx.ⲆⲆⵠⲆᐃᐃⲆ();
            }
          }
          this.stop();
          return c;
        },
        ⵠᐃⲆᐃ: function (a, b) {
          if (this.ⲆⲆⵠⲆΔⵠᐃ && this.ᐃⵠᐃΔⲆⵠᐃ) {
            Gp(Uo, this.ⵠᐃ, Math.floor(a - this.ⵠᐃ.width / 2), Math.floor(b - this.ⵠᐃ.height / 2));
          }
        }
      },
      ΔⵠⲆᐃᐃΔⲆⲆⵠ: function (a) {
        for (d = 0; d < a.length; d++) {
          if (this.ΔΔᐃΔ[a[d][0]] == a[d][1]) {
            return B;
          }
        }
        return I;
      },
      ⵠⲆΔⲆΔ: function (a) {
        for (var b = 0; b < this.ⲆᐃⵠⲆΔ.length; b++) {
          if (this.ⲆᐃⵠⲆΔ[b].id == a) {
            return b;
          }
        }
        return -1;
      },
      ⲆΔΔⲆΔΔᐃ: function (a, b) {
        this.ΔΔᐃΔ[a] = 0;
        this.ⲆᐃⵠⲆΔ.splice(b, 1);
        Kx.ⲆⲆⵠⲆᐃᐃⲆ();
      },
      ΔΔΔⵠᐃᐃⵠ: function (a, b, c) {
        ⲆΔᐃ = true;
        this.ΔΔᐃΔ[a] = Math.max(0, this.ΔΔᐃΔ[a] - b);
        if (!this.ΔΔᐃΔ[a] && c >= 0) {
          this.ⲆΔΔⲆΔΔᐃ(a, c);
        }
      }
    };
    this.ᐃⲆΔᐃⵠ = {
      enabled: false,
      translate: {
        x: 0,
        y: 0
      },
      ᐃΔΔⵠᐃⲆⲆ: function () {
        if (Gx.mode == 1 && !Hx.ᐃᐃⲆⵠⲆᐃᐃ) {
          Hx.ᐃⲆΔᐃⵠ.enabled = !Hx.ᐃⲆΔᐃⵠ.enabled;
          if (Hx.ᐃⲆΔᐃⵠ.enabled) {
            Kx.options.ΔᐃΔᐃⲆᐃⵠ.display = "inline-block";
          } else {
            Kx.options.ΔᐃΔᐃⲆᐃⵠ.display = "none";
          }
        }
      }
    };
    Kx.options.ΔᐃΔᐃⲆᐃⵠ.display = "none";
    this.ⵠΔⵠⵠᐃ = {
      enabled: Kr,
      translate: {
        y: 0,
        x: 0
      },
      ⲆΔⲆΔⲆ: 0,
      ᐃΔΔⵠᐃⲆⲆ: function () {
        Hx.ⵠΔⵠⵠᐃ.enabled = !Hx.ⵠΔⵠⵠᐃ.enabled;
        if (Hx.ⵠΔⵠⵠᐃ.enabled) {
          Kx.options.ΔⵠⲆⲆᐃⲆⲆ.display = "inline-block";
        } else {
          Kx.options.ΔⵠⲆⲆᐃⲆⲆ.display = "none";
        }
      },
      ⲆΔᐃ: function () {
        if (!!this.enabled && Hx.ᐃⵠΔⲆ.id < 0 && !Kx.ᐃᐃᐃΔ.open) {
          if (Hx.ⵠΔⲆⵠ.Ⲇᐃⵠ < 0.35) {
            if (Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[110]) {
              Jx.ΔΔⵠⵠᐃ(110, Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(110));
            } else if (Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[192]) {
              Jx.ΔΔⵠⵠᐃ(192, Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(192));
            } else if (Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[196]) {
              Jx.ΔΔⵠⵠᐃ(196, Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(196));
            } else if (Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[189]) {
              Jx.ΔΔⵠⵠᐃ(189, Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(189));
            } else if (Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[207]) {
              Jx.ΔΔⵠⵠᐃ(207, Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(207));
            } else if (Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[205]) {
              Jx.ΔΔⵠⵠᐃ(205, Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(205));
            } else if (Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[209]) {
              Jx.ΔΔⵠⵠᐃ(209, Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(209));
            } else if (Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[143]) {
              Jx.ΔΔⵠⵠᐃ(143, Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(143));
            } else if (Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[117]) {
              Jx.ΔΔⵠⵠᐃ(117, Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(117));
            } else if (Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[138]) {
              Jx.ΔΔⵠⵠᐃ(138, Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(138));
            } else if (Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[133]) {
              Jx.ΔΔⵠⵠᐃ(133, Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(133));
            } else if (Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[145]) {
              Jx.ΔΔⵠⵠᐃ(145, Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(145));
            } else if (Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[136]) {
              Jx.ΔΔⵠⵠᐃ(136, Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(136));
            } else if (Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[197]) {
              Jx.ΔΔⵠⵠᐃ(197, Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(197));
            }
          } else if (Hx.ⵠΔⲆⵠ.ΔⵠΔ < 0.35 && Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[127]) {
            Jx.ΔΔⵠⵠᐃ(127, Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(127));
          }
        }
      }
    };
    Kx.options.ΔⵠⲆⲆᐃⲆⲆ.display = "none";
    this.ᐃⵠΔⲆ = {
      id: -1,
      ᐃᐃΔΔ: -1,
      timeout: new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0, 1, 0, 1, 1),
      ⵠⲆⲆΔΔ: Gg,
      ⲆⲆⵠⲆⵠ: -1,
      mode: 0,
      label: [],
      ᐃᐃⵠΔᐃ: [],
      ᐃⵠⲆⵠΔ: Mo,
      ᐃⵠⵠⵠᐃ: go,
      ΔⵠᐃⲆΔΔⵠ: yg,
      ᐃⵠⵠᐃⲆ: false,
      ⵠᐃᐃⲆΔⵠΔᐃΔ: function () {
        this.mode = this.mode === 0 ? 1 : 0;
      },
      ᐃⲆⲆΔⵠⵠΔᐃᐃ: function (a) {
        this.ᐃⵠⲆⵠΔ = a;
        var b = Kx.ᐃᐃᐃΔ;
        if (b.open) {
          b.ⲆᐃΔⵠⵠⲆⵠ(b.button);
        }
        this.ⲆΔᐃ();
      },
      ᐃⲆΔΔⲆⵠᐃⵠΔ: function (a) {
        var b = Nt[a];
        this.id = a;
        this.ⵠⲆⲆΔΔ = true;
        Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
        this.timeout.ᐃΔΔΔⵠⲆΔ = b.time * 8;
        this.ᐃᐃΔΔ = b.ᐃᐃΔΔ;
      },
      ΔᐃᐃᐃΔⵠⲆΔᐃ: function (a) {
        var b = Nt[a];
        this.id = a;
        this.ⵠⲆⲆΔΔ = true;
        var c = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
        if (c && c.right == 28) {
          this.timeout.ᐃΔΔΔⵠⲆΔ = b.time * 3;
        } else {
          this.timeout.ᐃΔΔΔⵠⲆΔ = b.time;
        }
        this.ᐃᐃΔΔ = b.ᐃᐃΔΔ;
        for (var d = 0; d < b.r.length; d++) {
          var e = b.r[d];
          Hx.ⵠᐃΔⵠ.ΔΔΔⵠᐃᐃⵠ(e[0], e[1], Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(e[0]));
        }
        Kx.ⲆⲆⵠⲆᐃᐃⲆ();
      },
      ⲆΔᐃ: function () {
        this.ᐃᐃⵠΔᐃ = [];
        if (Kx.ⲆΔᐃⲆⲆ.ᐃⵠΔⲆ === 1) {
          Kx.ⲆΔᐃⲆⲆ.display = 0;
        }
        for (var a in Nt) {
          var b = Nt[a];
          var c = true;
          if (b.r) {
            for (var d = 0; d < b.r.length; d++) {
              if (Hx.ⵠᐃΔⵠ.max >= 16 && b.id === 100) {
                c = false;
                break;
              }
              if (b.w > this.ᐃⵠⲆⵠΔ || b.f > this.ᐃⵠⵠⵠᐃ || b.ⲆⲆⵠ > this.ΔⵠᐃⲆΔΔⵠ || b.e > this.ᐃⵠⵠᐃⲆ) {
                c = false;
                break;
              }
              var f = b.r[d];
              if (!Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[f[0]] || Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[f[0]] < f[1]) {
                c = false;
                break;
              }
            }
            if (c) {
              this.ᐃᐃⵠΔᐃ.push(Kx.ΔΔⵠ[b.id]);
            }
          }
        }
        Kx.ᐃΔᐃᐃᐃΔⲆ();
        Kx.ᐃᐃⵠⵠΔⲆⵠ();
        Kx.ΔᐃⲆᐃⵠᐃᐃ();
        Kx.ᐃΔΔΔⵠⵠᐃ();
        Kx.ᐃⲆᐃᐃⵠⵠⲆ();
        Kx.ⲆΔᐃⵠᐃΔΔ();
        Kx.sign.ⲆⲆΔⵠΔᐃⲆ();
      },
      ᐃⲆⲆⲆΔⲆᐃ: function () {
        this.id = -1;
        this.ⵠⲆⲆΔΔ = false;
        this.timeout.ᐃⵠⲆ = 0;
        this.timeout.ⲆⲆⵠ = Gg;
        this.ⲆΔᐃ();
      }
    };
    this.ⵠⵠΔⲆⲆⵠΔ = {
      message: ct,
      ⵠᐃⲆᐃ: qw
    };
    this.alert = {
      timeout: new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 1, 1, 0, 4, 0.3),
      text: "",
      label: null,
      ⵠᐃⲆᐃ: tw,
      list: []
    };
    this.ΔⵠⵠⲆΔ = {
      Ⲇᐃ: document.createElement("canvas"),
      ᐃᐃᐃΔⲆ: [],
      ⲆΔᐃ: true,
      translate: {
        y: 0,
        x: 0
      },
      sort: function () {
        var a = [];
        for (var b = Gx.ᐃⲆⵠⲆ, c = 0; c < b.length; c++) {
          if (b[c].ᐃⵠⵠᐃⵠ) {
            a.push({
              id: c,
              ⲆΔΔΔ: b[c].ΔⲆᐃᐃᐃ
            });
          }
        }
        a.sort(function (a, b) {
          return b.ⲆΔΔΔ - a.ⲆΔΔΔ;
        });
        this.ᐃᐃᐃΔⲆ = [];
        for (c = 0; c < a.length && c < 10; c++) {
          this.ᐃᐃᐃΔⲆ.push(a[c].id);
        }
        this.ⲆΔᐃ = true;
      },
      ⲆⵠΔⵠⲆ: function (a) {
        for (var b = Gx.ᐃⲆⵠⲆ, c = 0; c < b.length; c++) {
          b[c].ΔⲆᐃᐃᐃ = 0;
        }
        b[Hx.id].ΔⲆᐃᐃᐃ = ᐃⵠⵠ.ΔᐃⲆᐃΔⲆΔ(a[1]);
        this.ᐃᐃᐃΔⲆ = [];
        for (c = 2; c < a.length; c += 2) {
          this.ᐃᐃᐃΔⲆ.push(a[c]);
          b[a[c]].ΔⲆᐃᐃᐃ = ᐃⵠⵠ.ΔᐃⲆᐃΔⲆΔ(a[c + 1]);
        }
        this.ⲆΔᐃ = true;
      }
    };
    this.ΔⵠⵠⲆΔ.Ⲇᐃ.width = ia * 180;
    this.ΔⵠⵠⲆΔ.Ⲇᐃ.height = ia * 300;
    this.ΔⵠⵠⲆΔ.Ⲇ = this.ΔⵠⵠⲆΔ.Ⲇᐃ.getContext("2d");
    this.ᐃⲆᐃΔⵠ = {
      open: false,
      input: document.getElementById("commandInput"),
      ⲆΔᐃⵠⲆΔᐃ: document.getElementById("commandsBox"),
      style: document.getElementById("commandMainBox").style,
      ᐃⵠⵠᐃᐃᐃΔⵠΔ: function (a) {
        this.ⲆΔᐃⵠⲆΔᐃ.innerHTML += a;
      },
      ⲆΔᐃ: function () {
        this.style.left = Math.floor(Yo / 2 - 300) + "px";
        this.style.top = Math.floor(jq / 2 - 250) + "px";
      },
      ⲆΔⲆⲆⲆⲆⲆⲆᐃ: function () {
        this.ⲆΔᐃⵠⲆΔᐃ.innerHTML = "";
      },
      ΔΔᐃⵠⲆ: function () {
        this.open = false;
        this.style.display = "none";
      },
      ᐃᐃⲆᐃᐃ: function (a) {
        var b = "<table class=\"tableList\">";
        for (var c = 0; c < a.length; c++) {
          if (c % 3 == 0) {
            b += "<tr>";
          }
          b += "<td class=\"tableList\">" + a[c] + "</td>";
          if ((c + 1) % 3 == 0 || c + 1 === a.length) {
            b += "</tr>";
          }
        }
        return b += "</table>";
      },
      ᐃΔⵠᐃⵠ: function (a, b, c, d) {
        d = d || "";
        var f = "<div class=commandWritten>" + (a = a || "");
        f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
        f += (c = c || "") + "</div>" + d + "</div>";
        this.ᐃⵠⵠᐃᐃᐃΔⵠΔ(f);
        this.ⲆⵠᐃΔᐃⵠⲆⲆⲆ();
      },
      ⲆⵠᐃΔᐃⵠⲆⲆⲆ: function () {
        this.ⲆΔᐃⵠⲆΔᐃ.scrollTop = this.ⲆΔᐃⵠⲆΔᐃ.scrollHeight;
      },
      ⵠᐃⵠᐃΔⲆⵠ: function (a) {
        switch (a) {
          case "clean":
            this.ⲆΔⲆⲆⲆⲆⲆⲆᐃ();
            return Mg;
          case "list":
            var b = "";
            const a = bj.document.createElement("div");
            for (var c = Gx.ᐃⲆⵠⲆ, d = 0; d < c.length; d++) {
              var f = c[d];
              if (f.ᐃⵠⵠᐃⵠ) {
                a.innerText = f.ΔᐃΔΔⵠ;
                b += a.innerHTML + " <span style=\"color:green\">#" + d + "</span><br />";
              }
            }
            this.ᐃΔⵠᐃⵠ("list", 1, "List all connected players", b);
            return true;
          case "weapon-list":
            this.ᐃΔⵠᐃⵠ("Weapons", 1, "List all weapons in the game", this.ᐃᐃⲆᐃᐃ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow", "wood_axe", "stone_axe", "gold_axe", "diamond_axe", "amethyst_axe", "reidite_axe"]));
            return bq;
          case "tool-list":
            this.ᐃΔⵠᐃⵠ("Tools", 1, "List all tools in the game", this.ᐃᐃⲆᐃᐃ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
            return Zl;
          case "survival-list":
            this.ᐃΔⵠᐃⵠ("Survival Items", 1, "List all survival items in the game", this.ᐃᐃⲆᐃᐃ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
            return true;
          case "resource-list":
            this.ᐃΔⵠᐃⵠ("Resources", 1, "List all resources in the game", this.ᐃᐃⲆᐃᐃ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
            return Ng;
          case "food-list":
            this.ᐃΔⵠᐃⵠ("Food", 1, "List all food in the game", this.ᐃᐃⲆᐃᐃ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
            return B;
          case "hat-list":
            this.ᐃΔⵠᐃⵠ("Hats", 1, "List all hats in the game", this.ᐃᐃⲆᐃᐃ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
            return true;
          case "building-list":
            this.ᐃΔⵠᐃⵠ("Buildings", 1, "List all buildings in the game", this.ᐃᐃⲆᐃᐃ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
            return true;
          case "biome-list":
            this.ᐃΔⵠᐃⵠ("Biomes list", 1, "List all available biomes in the game", this.ᐃᐃⲆᐃᐃ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
            return true;
          case "help-config":
            this.ᐃΔⵠᐃⵠ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
            return It;
          case "pos":
            c = Gx.ᐃⲆΔ[0];
            d = 0;
            for (; d < c.length; d++) {
              var e = c[d];
              if (e.ᐃⵠⲆⲆ === Hx.id) {
                this.ᐃΔⵠᐃⵠ("pos", 1, "Your position is " + Math.floor(e.x / 100) + ":" + Math.floor(e.y / 100));
                return true;
              }
            }
            break;
          case "help-admin":
            this.ᐃΔⵠᐃⵠ("help-admin", 1, "List all available commands for admin only", this.ᐃᐃⲆᐃᐃ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
            return qk;
          case "help":
            this.ᐃΔⵠᐃⵠ("help", 1, "List all available commands", this.ᐃᐃⲆᐃᐃ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
            return Ng;
        }
        return Ks;
      },
      ΔⲆᐃᐃⵠⲆⵠᐃⲆ: function () {
        if (!this.open) {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      },
      ᐃΔᐃⵠⲆᐃⲆ: function () {
        var a = this.input.value;
        if (a && a.length > 0) {
          if (!this.ⵠᐃⵠᐃΔⲆⵠ(a)) {
            Jx.ⵠⲆᐃᐃⲆⵠᐃⲆⲆ(this.input.value);
          }
          this.input.value = "";
        }
      }
    };
    this.ⲆᐃⲆᐃⲆ = {
      open: Ni,
      input: document.getElementById("chat_input"),
      style: document.getElementById("chat_block").style,
      ⲆΔᐃ: function () {
        this.style.left = Math.floor(Yo / 2 - 150) + "px";
        this.style.top = Math.floor(jq / 2 + 80) + "px";
      },
      ΔΔᐃⵠⲆ: function () {
        this.open = go;
        this.style.display = "none";
        this.input.value = "";
      },
      prefix: "!",
      cmd: {
        hud: function (a) {
          if (a === "off") {
            var b = "Enter \"!hud\" without the quotes to restore the HUD";
            if (Hx.alert.text) {
              Hx.alert.list.push(b);
            } else {
              Hx.alert.text = b;
            }
            Kx.ΔΔⲆΔΔᐃⲆ = 0;
          } else {
            Kx.ΔΔⲆΔΔᐃⲆ = 1;
          }
        }
      },
      ⵠᐃⵠᐃΔⲆⵠ: function (a) {
        if (a.charAt(0) == this.prefix) {
          var b = "";
          var c = "";
          for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
            b += a.charAt(d);
          }
          for (d++; d < a.length; d++) {
            c += a.charAt(d);
          }
          var e = this.cmd[b];
          if (e) {
            e(c);
          }
          return Tk;
        }
        return go;
      },
      ⵠᐃΔⵠΔ: function () {
        if (this.open) {
          this.open = I;
          this.style.display = "none";
          var a = this.input.value;
          if (a) {
            if (!this.ⵠᐃⵠᐃΔⲆⵠ(a)) {
              Jx.ⵠⵠⲆᐃΔᐃᐃΔΔ(this.input.value);
            }
            this.input.value = "";
          }
        } else {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      }
    };
    this.ΔᐃⲆΔⲆᐃΔ = {
      ΔΔⵠᐃΔ: [],
      ⲆΔᐃ: function (a) {
        a.y += Ox * 80 * a.ⲆΔΔΔ;
        a.x += Ox * 80 * a.c;
        a.ⵠⵠⲆⵠΔ -= Ox / 6;
        if (a.ⵠⵠⲆⵠΔ > 0.2) {
          a.alpha = Math.min(a.alpha + Ox * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - Ox * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min(sh.ⲆⲆᐃⲆᐃⲆᐃ * (Yo / 1366), sh.ⲆⲆᐃⲆᐃⲆᐃ + 10) * Math.max(Math.min(Gx.ΔⵠΔᐃⲆ + 1000, 3000) / 3000, 0));
        if (this.ΔΔⵠᐃΔ.length < c) {
          var d = Math.floor(Math.random() * sh.ⵠᐃᐃⵠᐃⵠⵠ);
          var e = -Hx.ΔΔⲆ.x + Math.floor(Math.random() * Hx.ΔΔⲆ.w);
          var f = -Hx.ΔΔⲆ.y + Math.floor(Math.random() * Hx.ΔΔⲆ.Ⲇᐃⵠ);
          var g = Math.random(Math.PI);
          this.ΔΔⵠᐃΔ.push(new Zw(d, e, f, g));
        }
      }
    };
    this.ⲆⲆΔΔⵠⵠΔ = 0;
    this.ΔΔⲆⵠΔ = 0;
    this.ⵠᐃⵠᐃᐃ = {
      ΔΔⵠᐃΔ: [],
      ΔⵠⲆⲆⵠ: 0,
      ⵠΔΔᐃⵠ: 0,
      ⲆΔᐃ: function (a) {
        a.y += Ox * (200 + this.ⵠΔΔᐃⵠ * 800) * a.ⲆΔΔΔ;
        a.x += Ox * (200 + this.ⵠΔΔᐃⵠ * 800) * a.c;
        a.ⵠⵠⲆⵠΔ -= Ox / 6;
        if (a.ⵠⵠⲆⵠΔ > 0.2) {
          a.alpha = Math.min(a.alpha + Ox * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - Ox * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min((this.ⵠΔΔᐃⵠ + 0.1) * sh.ⲆⵠᐃⲆΔΔᐃ * (Yo / 1366), (this.ⵠΔΔᐃⵠ + 0.1) * sh.ⲆⵠᐃⲆΔΔᐃ + 10) * Math.max(Math.min(Gx.ⵠⵠⲆⲆΔ + 1000, 3000) / 3000, 0));
        if (this.ΔΔⵠᐃΔ.length < c) {
          var d = Math.floor(Math.random() * sh.ⵠᐃᐃⵠᐃⵠⵠ);
          var e = -Hx.ΔΔⲆ.x + Math.floor(Math.random() * Hx.ΔΔⲆ.w);
          var f = -Hx.ΔΔⲆ.y + Math.floor(Math.random() * Hx.ΔΔⲆ.Ⲇᐃⵠ);
          var g = Math.random(Math.PI);
          if (Hx.ⵠᐃⵠᐃᐃ.ΔⵠⲆⲆⵠ !== 0) {
            e -= Hx.ΔΔⲆ.w / 2;
          }
          this.ΔΔⵠᐃΔ.push(new Zw(d, e, f, g));
        }
      }
    };
    this.ⵠΔΔⵠⲆ = {
      ΔΔⵠᐃΔ: [],
      ΔⵠⲆⲆⵠ: 0,
      ⵠΔΔᐃⵠ: 0,
      ⲆΔᐃ: function (a) {
        if (Mx.ⵠᐃⲆⲆᐃⲆⵠ()) {
          a.y += Ox * a.ΔΔΔΔⲆ * (5.5 + this.ⵠΔΔᐃⵠ * 10);
        } else {
          a.y += Ox * a.ΔΔΔΔⲆ * (5 + this.ⵠΔΔᐃⵠ * 10);
        }
        a.ⵠⵠⲆⵠΔ -= Ox / 2;
        if (Mx.ΔⵠᐃⲆᐃΔᐃ()) {
          a.x += Ox * (100 + this.ⵠΔΔᐃⵠ * 400);
        } else if (Mx.ⲆΔΔᐃⵠΔⲆ()) {
          a.x -= Ox * (130 - this.ⵠΔΔᐃⵠ * 400);
        } else {
          a.x -= Ox * (30 - this.ⵠΔΔᐃⵠ * 400);
        }
        if (a.ⵠⵠⲆⵠΔ > 0.2) {
          a.alpha = Math.min(a.alpha + Ox * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - Ox * 5, 0);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ⵠΔΔᐃⵠ * 1.5 + 0.5) * sh.ΔⵠΔⲆⲆⵠⲆ * (Yo / 1366), (this.ⵠΔΔᐃⵠ * 1.5 + 0.5) * sh.ΔⵠΔⲆⲆⵠⲆ + 10) * Math.max(Math.min(Gx.ΔⵠⲆΔΔ + 1000, 3000) / 3000, 0));
        if (this.ΔΔⵠᐃΔ.length < b) {
          var c = Math.floor(Math.random() * sh.ⵠⵠⲆᐃΔᐃΔ);
          var d = -Hx.ΔΔⲆ.x + Math.floor(Math.random() * Hx.ΔΔⲆ.w);
          var e = -Hx.ΔΔⲆ.y + Math.floor(Math.random() * 400 * ia - ia * 200);
          this.ΔΔⵠᐃΔ.push(new Zw(c, d, e, 0));
        }
      }
    };
    this.ⲆⵠⲆⵠ = [];
    for (var d = 0; d < 4; d++) {
      this.ⲆⵠⲆⵠ.push(new c());
    }
  }
  function gx() {
    Math.random();
    return "C";
  }
  function ax() {
    Math.random();
    return "o";
  }
  function cx() {
    Math.random();
    return "p";
  }
  function hx() {
    Math.random();
    return "s";
  }
  function ix() {
    Math.random();
    return "t";
  }
  function jx() {
    Math.random();
    return "e";
  }
  function kx() {
    Math.random();
    return "a";
  }
  function lx() {
    Math.random();
    return "r";
  }
  function kx() {
    Math.random();
    return "a";
  }
  function ix() {
    Math.random();
    return "t";
  }
  function mx() {
    Math.random();
    return "i";
  }
  kk = async function () {
    $f = tj(Pi(8));
    Vw = Nk($f);
    if (Ww) {
      Ww();
    }

    await bj.gapi.load("auth2", ty);
  };
  ⲆⵠⲆᐃⲆΔⵠᐃᐃ = 1;
  function nx(a, b) {
    bk($f, a, b);
    return ((168 + (zp(Vw[0], Vw[1], Vw[0]) ^ zp(Vw[1], Vw[0], Vw[1]))) * 8121 + 28411) % 134456;
  }
  function ox() {
    ᐃⵠⵠ.ΔⵠⵠᐃⵠⲆᐃ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
  }
  function px() {
    ᐃⵠⵠ.ΔⵠⵠᐃⵠⲆᐃ("https://twitter.com/intent/tweet?text=I%20survived%20" + Hx.ΔⲆⵠ + "%20days%20with%20" + Hx.ⵠᐃⲆᐃⲆⲆⲆ.ΔⲆᐃᐃᐃ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
  }
  function qx(a, b) {
    this.Ⲇᐃ = a;
    this.Ⲇ = b;
    var c = this;
    this.ⲆⵠⵠΔᐃⲆᐃ = false;
    this.ⲆⵠᐃΔΔⲆⵠ = {
      id: document.getElementById("scoreboard"),
      style: document.getElementById("scoreboard").style,
      height: 0,
      translate: {
        x: 0,
        y: 0
      },
      ⲆΔᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = this.translate.y + "px";
      },
      ⲆⵠΔⵠⲆ: function () {
        this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + Hx.ⵠᐃⲆᐃⲆⲆⲆ.ΔⵠⲆᐃⲆⲆᐃ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + Qb[335] + " : " + Hx.ΔⲆⵠ + "</div><div class=\"stats\"> " + Qb[334] + " : " + Hx.ⵠᐃⲆᐃⲆⲆⲆ.ⵠⲆⵠᐃⵠ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + Qb[333] + " : " + Hx.ⵠᐃⲆᐃⲆⲆⲆ.ΔⲆᐃᐃᐃ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + Hx.ⵠᐃⲆᐃⲆⲆⲆ.ⵠᐃⵠⲆⵠⵠΔ + " " + Qb[332] + "</div></div><div id=\"shop_points\">" + Qb[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + Qb[329] + "</div><div class=\"social\" id=\"fffacebook\">" + Qb[330] + "</div></div><div id=\"bbback\">" + Qb[328] + "</div>";
        this.style.display = "inline-block";
        document.getElementById("tttwitter").addEventListener("mouseup", px, false);
        document.getElementById("bbback").addEventListener("mouseup", function () {
          Ix.ΔΔᐃⵠⲆ(Fx.ⵠᐃΔⵠΔ);
        }, Ni);
        document.getElementById("fffacebook").addEventListener("mouseup", ox, false);
        this.height = Math.floor(this.id.clientHeight / 2);
        (function () {
          var a = new XMLHttpRequest();
          a.open("GET", Wx + "getBreadAndScore?userid=" + ey);
          a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
              var b = JSON.parse(a.responseText);
              var c = b.b - Fx.ᐃΔⲆⵠΔ;
              Fx.ᐃΔⲆⵠΔ = b.b;
              Fx.ΔⲆᐃᐃᐃ = b.s;
              Fx.ᐃⵠⲆΔᐃ = Fx.ᐃᐃΔⵠΔⲆᐃ(Fx.ΔⲆᐃᐃᐃ);
              Fx.ΔᐃᐃⲆⵠΔᐃ = Fx.ⲆᐃⵠᐃⲆᐃⵠ(Fx.ΔⲆᐃᐃᐃ);
              Fx.ⵠⲆⲆⵠⵠⲆΔ = 0;
              document.getElementById("breadWonInner").innerHTML = "" + c;
            }
          };
          a.send();
        })();
      }
    };
    var d;
    var f = 0;
    function e() {
      c.ⲆΔᐃ();
      if (++f != 30) {
        bj.setTimeout(e, 33);
      } else {
        c.ⲆΔᐃ();
      }
    }
    this.ΔΔᐃⵠⲆ = function (a) {
      if (c.ⲆⵠⵠΔᐃⲆᐃ === bq) {
        c.ⲆⵠⵠΔᐃⲆᐃ = th;
        d = a;
        g = -1;
        i();
        Rx();
      }
    };
    var g = -1;
    function i() {
      c.ⲆΔᐃ();
      if (++g == 30) {
        c.stop();
        c.ⲆⵠᐃΔΔⲆⵠ.style.display = "none";
        d();
        return;
      }
      bj.setTimeout(i, 33);
    }
    this.ⵠⲆΔᐃΔ = go;
    this.stop = function () {
      this.ⵠⲆΔᐃΔ = false;
    };
    this.ⵠᐃΔⵠΔ = function () {
      Tx();
      document.getElementById("game_body").style.backgroundColor = sh.ⲆⲆᐃⲆⵠ[Ex.time];
      c.ⲆⵠᐃΔΔⲆⵠ.ⲆⵠΔⵠⲆ();
      Fx.ΔΔⲆⵠⵠ.style.display = "inline-block";
      c.ⵠⲆΔᐃΔ = true;
      c.ⲆⵠⵠΔᐃⲆᐃ = qk;
      g = -1;
      f = 0;
      e();
    };
    this.ⲆΔᐃ = function () {
      this.ⲆⵠᐃΔΔⲆⵠ.translate.x = Math.floor(kq - 275);
      this.ⲆⵠᐃΔΔⲆⵠ.translate.y = Math.floor(Zo - this.ⲆⵠᐃΔΔⲆⵠ.height - 28);
      Fx.ΔΔⲆⵠⵠ.translate.x = this.ⲆⵠᐃΔΔⲆⵠ.translate.x - 350;
      Fx.ΔΔⲆⵠⵠ.translate.y = this.ⲆⵠᐃΔΔⲆⵠ.translate.y + 0;
      Fx.ΔΔⲆⵠⵠ.ⲆΔᐃ();
      if (f != 30 || g != -1) {
        var a = 0;
        if (f != 30) {
          a = 1500 / (f + 1) - 50;
        }
        if (g != -1) {
          a = -(1750 / (30 - g + 1) - 48);
        }
        this.ⲆⵠᐃΔΔⲆⵠ.translate.y -= a;
      }
      this.ⲆⵠᐃΔΔⲆⵠ.ⲆΔᐃ();
    };
    this.ⵠᐃⲆᐃ = function () {
      Tp();
      Hx.alert.ⵠᐃⲆᐃ("#FFF", "#000");
    };
  }
  function rx(a, c) {
    var f = this;
    this.Ⲇᐃ = a;
    this.Ⲇ = c;
    if (bj.navigator.userAgent.indexOf("Edge") > -1) {
      this.ⲆⲆⵠⲆⲆⲆΔ = "default";
      this.ᐃⵠΔⲆⵠΔᐃ = "pointer";
    } else {
      this.ⲆⲆⵠⲆⲆⲆΔ = "url('img/cursor0.png'), default";
      this.ᐃⵠΔⲆⵠΔᐃ = "url('img/cursor1.png'), pointer";
    }
    this.ΔΔⲆΔΔᐃⲆ = 1;
    this.ⲆⵠᐃⵠⲆⲆⵠ = 1;
    this.ᐃᐃΔᐃΔᐃⲆ = 1;
    this.ⵠᐃΔⲆᐃᐃΔ = 1;
    this.ᐃΔⵠΔᐃᐃⲆᐃⲆ = {
      id: document.getElementById("team_box"),
      style: document.getElementById("team_box").style,
      ⲆΔᐃ: function () {
        this.style.left = Math.floor(kq - 125) + "px";
        this.style.top = "110px";
      }
    };
    this.ᐃⲆⵠᐃ = {
      ⲆⲆⵠΔΔⲆⲆ: Af(60, 60, 0, Ⲇⵠ[782]),
      ΔΔΔⲆᐃⲆⵠ: Af(60, 60, 0, Ⲇⵠ[783])
    };
    this.sign = {
      open: Gg,
      ⲆᐃΔⲆᐃᐃⵠⵠⲆ: 0,
      ⵠΔⵠⲆᐃⲆⲆ: document.getElementById("sign_object"),
      ⵠⲆⲆⲆⲆⵠᐃ: 0,
      id: document.getElementById("sign_window"),
      style: document.getElementById("sign_window").style,
      button: Af(60, 60, 0, Ⲇⵠ[803]),
      ⲆⲆΔⵠΔᐃⲆ: function () {
        var a = Math.floor(Math.floor((3 + Hx.ᐃⵠΔⲆ.ᐃᐃⵠΔᐃ.length) / 4) * (10 + Ⲇⵠ[316][0].width) + 35);
        this.button.info.translate.x = a;
        this.button.info.translate.y = 22;
      },
      ⲆΔᐃ: function () {
        this.style.left = Math.floor(kq - 150) + "px";
        this.style.top = Math.floor(Zo - 115) + "px";
      },
      ΔΔᐃⵠⲆ: function () {
        Kx.sign.style.display = "none";
        Kx.sign.open = false;
      },
      select: function () {
        Kx.sign.open = !Kx.sign.open;
        if (Kx.sign.open) {
          Kx.sign.style.display = "inline-block";
        } else {
          Kx.sign.style.display = "none";
        }
      },
      ok: function () {
        Jx.ⵠᐃΔⲆⲆⵠⵠᐃⵠ(Hx.sign.ᐃⲆⲆⵠΔ, Kx.sign.ⵠⲆⲆⲆⲆⵠᐃ);
        Kx.sign.select();
      },
      up: function () {
        Kx.sign.ⵠⲆⲆⲆⲆⵠᐃ = Kx.sign.ⵠⲆⲆⲆⲆⵠᐃ === 0 ? 3 : Kx.sign.ⵠⲆⲆⲆⲆⵠᐃ - 1;
        Kx.sign.ⵠΔⵠⲆᐃⲆⲆ.src = "./img/sign" + Kx.sign.ⵠⲆⲆⲆⲆⵠᐃ + ".png";
      },
      down: function () {
        Kx.sign.ⵠⲆⲆⲆⲆⵠᐃ = (Kx.sign.ⵠⲆⲆⲆⲆⵠᐃ + 1) % 4;
        Kx.sign.ⵠΔⵠⲆᐃⲆⲆ.src = "./img/sign" + Kx.sign.ⵠⲆⲆⲆⲆⵠᐃ + ".png";
      }
    };
    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, Kr);
    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, false);
    document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, false);
    document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, Ks);
    this.ΔᐃΔᐃⲆ = {
      open: false,
      id: document.getElementById("shop_market"),
      style: document.getElementById("shop_market").style,
      items: [{
        id: 0,
        name: "wood",
        ΔⲆⵠⵠΔ: 1,
        b: 1,
        a: 3,
        ⵠΔⲆⲆⲆ: 316
      }, {
        id: 1,
        name: "stone",
        ΔⲆⵠⵠΔ: 1,
        b: 1,
        a: 4,
        ⵠΔⲆⲆⲆ: 315
      }, {
        id: 2,
        name: "gold",
        ΔⲆⵠⵠΔ: 1,
        b: 1,
        a: 6,
        ⵠΔⲆⲆⲆ: 297
      }, {
        id: 3,
        name: "diamond",
        ΔⲆⵠⵠΔ: 4,
        b: 4,
        a: 1,
        ⵠΔⲆⲆⲆ: 298
      }, {
        id: 4,
        name: "amethyst",
        ΔⲆⵠⵠΔ: 8,
        b: 8,
        a: 1,
        ⵠΔⲆⲆⲆ: 418
      }, {
        id: 5,
        name: "reidite",
        ΔⲆⵠⵠΔ: 16,
        b: 16,
        a: 1,
        ⵠΔⲆⲆⲆ: 938
      }, {
        id: 6,
        name: "pumpkin_seed",
        ΔⲆⵠⵠΔ: 10,
        b: 10,
        a: 1,
        ⵠΔⲆⲆⲆ: 808
      }, {
        id: 7,
        name: "carrot_seed",
        ΔⲆⵠⵠΔ: 16,
        b: 16,
        a: 1,
        ⵠΔⲆⲆⲆ: 949
      }, {
        id: 8,
        name: "tomato_seed",
        ΔⲆⵠⵠΔ: 20,
        b: 20,
        a: 1,
        ⵠΔⲆⲆⲆ: 959
      }, {
        id: 9,
        name: "thornbush_seed",
        ΔⲆⵠⵠΔ: 30,
        b: 30,
        a: 1,
        ⵠΔⲆⲆⲆ: 845
      }, {
        id: 10,
        name: "garlic_seed",
        ΔⲆⵠⵠΔ: 40,
        b: 40,
        a: 1,
        ⵠΔⲆⲆⲆ: 834
      }, {
        id: 11,
        name: "watermelon_seed",
        ΔⲆⵠⵠΔ: 60,
        b: 60,
        a: 1,
        ⵠΔⲆⲆⲆ: 966
      }],
      button: Af(60, 60, 0, Ⲇⵠ[795]),
      ⲆΔᐃ: function () {
        this.style.left = Math.floor(kq - 450) + "px";
        this.style.top = Math.floor(Zo - 270) + "px";
      },
      select: function () {
        Kx.ΔᐃΔᐃⲆ.open = !Kx.ΔᐃΔᐃⲆ.open;
        if (Kx.ΔᐃΔᐃⲆ.open) {
          Kx.ΔᐃΔᐃⲆ.style.display = "inline-block";
        } else {
          Kx.ΔᐃΔᐃⲆ.style.display = "none";
        }
      },
      ΔΔᐃⵠⲆ: function () {
        Kx.ΔᐃΔᐃⲆ.style.display = "none";
        Kx.ΔᐃΔᐃⲆ.open = Nh;
      },
      ΔΔⲆΔⵠᐃⲆ: function () {
        Jx.ⵠΔΔⲆⵠᐃΔΔⲆ(this.ⵠⵠⲆⲆⵠᐃⵠ);
      },
      ᐃⵠⲆᐃΔ: function () {
        this.id;
        if (this.ⵠⵠⲆⲆⵠᐃⵠ.a === 1) {
          var a = Math.floor(Number(this.value) * this.ⵠⵠⲆⲆⵠᐃⵠ.b);
          this.ⵠⵠⲆⲆⵠᐃⵠ.ΔⲆⵠⵠΔ = a;
          document.getElementById(this.ⵠⵠⲆⲆⵠᐃⵠ.name + "_trad_number").innerHTML = a + "";
        } else {
          a = Math.floor(Number(this.value) / this.ⵠⵠⲆⲆⵠᐃⵠ.a);
          this.ⵠⵠⲆⲆⵠᐃⵠ.ΔⲆⵠⵠΔ = a;
          document.getElementById(this.ⵠⵠⲆⲆⵠᐃⵠ.name + "_trad_number").innerHTML = a + "";
        }
      }
    };
    document.getElementById("quit_market").addEventListener("mouseup", this.ΔᐃΔᐃⲆ.ΔΔᐃⵠⲆ, false);
    var e = [["mouseup", this.ΔᐃΔᐃⲆ.ΔΔⲆΔⵠᐃⲆ, "buy_"], ["click", this.ΔᐃΔᐃⲆ.ᐃⵠⲆᐃΔ, ""], ["change", this.ΔᐃΔᐃⲆ.ᐃⵠⲆᐃΔ, ""], ["keypress", this.ΔᐃΔᐃⲆ.keypress, ""]];
    for (var i = 0; this.ΔᐃΔᐃⲆ.items.length > i; i++) {
      var j = this.ΔᐃΔᐃⲆ.items[i];
      document.getElementById(j.name + "_market").src = Ⲇⵠ[j.ⵠΔⲆⲆⲆ][0].ΔᐃᐃⲆΔ === undefined ? Ⲇⵠ[j.ⵠΔⲆⲆⲆ][0].src : Ⲇⵠ[j.ⵠΔⲆⲆⲆ][0].ΔᐃᐃⲆΔ;
      if (j.a === 1) {
        document.getElementById(j.name + "_trad_number").innerHTML = j.b;
        document.getElementById(j.name + "_number").value = 1;
        document.getElementById(j.name + "_number").step = 1;
        document.getElementById(j.name + "_number").min = 1;
        document.getElementById(j.name + "_number").max = Math.floor(255 / j.b);
      } else {
        document.getElementById(j.name + "_trad_number").innerHTML = 1;
        document.getElementById(j.name + "_number").value = j.a;
        document.getElementById(j.name + "_number").step = j.a;
        document.getElementById(j.name + "_number").min = j.a;
      }
      document.getElementById("buy_" + j.name + "_number").ⵠⵠⲆⲆⵠᐃⵠ = j;
      document.getElementById(j.name + "_number").ⵠⵠⲆⲆⵠᐃⵠ = j;
      for (var k = 0; e.length > k; k++) {
        document.getElementById(e[k][2] + j.name + "_number").addEventListener(e[k][0], e[k][1], false);
      }
    }
    $("[type='number']").keypress(function (a) {
      a.preventDefault();
    });
    this.options = {
      open: bn,
      id: document.getElementById("option_in_game"),
      style: document.getElementById("option_in_game").style,
      ΔⵠⵠⲆⲆ: document.getElementById("agree_ing").style,
      Δⵠᐃⵠᐃᐃᐃ: document.getElementById("cancel_agree_ing").style,
      ᐃⵠᐃⲆᐃⲆΔ: document.getElementById("quest_agree_ing").style,
      ΔᐃΔᐃⲆᐃⵠ: document.getElementById("spectator_agree_ing").style,
      ΔⵠⲆⲆᐃⲆⲆ: document.getElementById("auto_feed_agree_ing").style,
      ΔⵠⲆΔΔΔΔ: document.getElementById("info_agree_ing").style,
      ⵠᐃⵠΔⵠⵠΔ: document.getElementById("pixelated_agree_ing").style,
      button: Af(60, 60, 0, Ⲇⵠ[727]),
      ΔⵠⲆᐃΔⲆΔΔⵠ: function () {
        Kx.options.open = !Kx.options.open;
        if (Kx.options.open) {
          Kx.options.style.display = "inline-block";
        } else {
          Kx.options.style.display = "none";
        }
      },
      ΔΔⲆⲆⲆΔᐃⲆᐃ: function () {
        Fx.ᐃᐃᐃΔⵠΔⲆ();
      },
      ⵠⵠⵠⵠⵠⲆᐃᐃΔ: function () {
        Fx.ⵠⲆΔⲆⵠⲆΔ();
      },
      high: function () {
        Fx.ᐃᐃᐃⲆᐃⵠⵠⵠΔ();
      },
      low: function () {
        Fx.ⲆΔⵠΔⵠᐃᐃᐃᐃ();
      },
      ΔΔⲆᐃΔ: function () {
        Kx.ᐃᐃᐃΔ.ΔΔⲆᐃΔ();
      },
      ⲆᐃⲆⵠᐃΔᐃᐃᐃ: function () {
        Kx.ΔᐃⲆΔⲆ.ΔΔⲆᐃΔ();
      },
      ⲆⵠⵠᐃᐃᐃΔⲆⲆ: function () {
        Kx.ⵠⲆⵠⵠ.ΔΔⲆᐃΔ();
      },
      ᐃΔΔⵠᐃΔᐃⲆᐃ: function () {
        Hx.ᐃⲆΔᐃⵠ.ᐃΔΔⵠᐃⲆⲆ();
      },
      ᐃⲆⲆᐃᐃⲆΔΔᐃ: function () {
        Hx.ⵠΔⵠⵠᐃ.ᐃΔΔⵠᐃⲆⲆ();
      },
      ΔΔᐃⵠⲆ: function () {
        Kx.options.style.display = "none";
        Kx.options.open = false;
      },
      ⲆΔᐃ: function () {
        this.style.left = Math.floor(kq - 235) + "px";
        this.style.top = Math.floor(Zo - 170) + "px";
      }
    };
    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ΔΔⲆⲆⲆΔᐃⲆᐃ, false);
    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ⵠⵠⵠⵠⵠⲆᐃᐃΔ, false);
    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, Kr);
    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, I);
    document.getElementById("quit_opt").addEventListener("mouseup", this.options.ΔΔᐃⵠⲆ, false);
    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ΔΔⲆᐃΔ, N);
    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ⲆⵠⵠᐃᐃᐃΔⲆⲆ, Mo);
    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ⲆᐃⲆⵠᐃΔᐃᐃᐃ, false);
    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ᐃΔΔⵠᐃΔᐃⲆᐃ, Ni);
    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ᐃⲆⲆᐃᐃⲆΔΔᐃ, Tn);
    this.ΔᐃⲆΔⲆ = {
      open: Ks,
      ΔⲆᐃΔⵠ: ᐃⲆᐃΔ.get("starve_cancel") ? ᐃⲆᐃΔ.get("starve_cancel") === "0" ? 0 : 1 : 1,
      id: document.getElementById("cancel_sure_delete"),
      style: document.getElementById("cancel_sure_delete").style,
      ΔⵠⵠⲆⲆ: document.getElementById("cancel_agree").style,
      button: 0,
      ⵠⲆ: 0,
      ΔΔᐃⵠⲆ: function () {
        Kx.ΔᐃⲆΔⲆ.style.display = "none";
        Kx.ΔᐃⲆΔⲆ.open = yl;
      },
      ΔΔⲆⲆⲆⲆΔ: function () {
        if (Hx.ᐃⵠΔⲆ.ⵠⲆⲆΔΔ) {
          Jx.ⵠⵠⲆᐃᐃⵠᐃᐃⲆ();
        }
        Kx.ΔᐃⲆΔⲆ.ΔΔᐃⵠⲆ();
      },
      ΔΔⲆᐃΔ: function () {
        if (Kx.ΔᐃⲆΔⲆ.ΔⲆᐃΔⵠ) {
          ᐃⲆᐃΔ.set("starve_cancel", "0");
          Kx.ΔᐃⲆΔⲆ.ΔⵠⵠⲆⲆ.display = "inline-block";
          Kx.options.Δⵠᐃⵠᐃᐃᐃ.display = "none";
        } else {
          ᐃⲆᐃΔ.set("starve_cancel", "1");
          Kx.ΔᐃⲆΔⲆ.ΔⵠⵠⲆⲆ.display = "none";
          Kx.options.Δⵠᐃⵠᐃᐃᐃ.display = "inline-block";
        }
        Kx.ΔᐃⲆΔⲆ.ΔⲆᐃΔⵠ = !Kx.ΔᐃⲆΔⲆ.ΔⲆᐃΔⵠ;
      },
      ⲆᐃΔⵠⵠⲆⵠ: function () {
        if (this.ΔⲆᐃΔⵠ) {
          this.style.display = "inline-block";
          this.open = Fg;
        } else {
          this.ΔΔⲆⲆⲆⲆΔ();
        }
      },
      ⲆΔᐃ: function () {
        this.style.left = Math.floor(kq - 235) + "px";
        this.style.top = Math.floor(Zo - 130) + "px";
      }
    };
    this.ΔᐃⲆΔⲆ.id.oncontextmenu = function () {
      return $g;
    };
    this.ΔᐃⲆΔⲆ.ΔⵠⵠⲆⲆ.display = "none";
    if (this.ΔᐃⲆΔⲆ.ΔⲆᐃΔⵠ) {
      this.options.Δⵠᐃⵠᐃᐃᐃ.display = "inline-block";
    } else {
      this.options.Δⵠᐃⵠᐃᐃᐃ.display = "none";
    }
    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ΔᐃⲆΔⲆ.ΔΔⲆⲆⲆⲆΔ, false);
    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ΔᐃⲆΔⲆ.ΔΔᐃⵠⲆ, false);
    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ΔᐃⲆΔⲆ.ΔΔⲆᐃΔ, Tn);
    document.addEventListener("cancel_sure_delete", function (a) {
      a.preventDefault();
    }, false);
    this.ΔⲆᐃⲆᐃⲆⲆ = {
      ΔⲆᐃΔⵠ: ᐃⲆᐃΔ.get("starve_aliasing") && ᐃⲆᐃΔ.get("starve_aliasing") === "0" ? 0 : 1,
      ⵠⲆΔᐃⵠᐃΔ: function (a) {
        document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
      },
      ΔΔⲆᐃΔ: function () {
        if (Kx.ΔⲆᐃⲆᐃⲆⲆ.ΔⲆᐃΔⵠ === 0) {
          ᐃⲆᐃΔ.set("starve_aliasing", "1");
          Kx.ΔⲆᐃⲆᐃⲆⲆ.ⵠⲆΔᐃⵠᐃΔ(1);
          Kx.options.ⵠᐃⵠΔⵠⵠΔ.display = "inline-block";
        } else {
          ᐃⲆᐃΔ.set("starve_aliasing", "0");
          Kx.ΔⲆᐃⲆᐃⲆⲆ.ⵠⲆΔᐃⵠᐃΔ(0);
          Kx.options.ⵠᐃⵠΔⵠⵠΔ.display = "none";
        }
        Kx.ΔⲆᐃⲆᐃⲆⲆ.ΔⲆᐃΔⵠ = (Kx.ΔⲆᐃⲆᐃⲆⲆ.ΔⲆᐃΔⵠ + 1) % 2;
      }
    };
    if (this.ΔⲆᐃⲆᐃⲆⲆ.ΔⲆᐃΔⵠ === 1) {
      this.options.ⵠᐃⵠΔⵠⵠΔ.display = "inline-block";
    } else {
      this.ΔⲆᐃⲆᐃⲆⲆ.ⵠⲆΔᐃⵠᐃΔ(0);
      this.options.ⵠᐃⵠΔⵠⵠΔ.display = "none";
    }
    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ΔⲆᐃⲆᐃⲆⲆ.ΔΔⲆᐃΔ, Kr);
    this.ⲆΔᐃⲆⲆ = {
      ΔⲆᐃΔⵠ: ᐃⲆᐃΔ.get("starve_info_box") ? ᐃⲆᐃΔ.get("starve_info_box") === "0" ? 0 : 1 : 1,
      display: 0,
      x: 0,
      y: 0,
      id: 0,
      ᐃⵠΔⲆ: 0,
      ΔΔⲆᐃΔ: function () {
        if (Kx.ⲆΔᐃⲆⲆ.ΔⲆᐃΔⵠ === 0) {
          ᐃⲆᐃΔ.set("starve_info_box", "1");
          Kx.options.ΔⵠⲆΔΔΔΔ.display = "inline-block";
        } else {
          ᐃⲆᐃΔ.set("starve_info_box", "0");
          Kx.options.ΔⵠⲆΔΔΔΔ.display = "none";
        }
        Kx.ⲆΔᐃⲆⲆ.ΔⲆᐃΔⵠ = (Kx.ⲆΔᐃⲆⲆ.ΔⲆᐃΔⵠ + 1) % 2;
      },
      ᐃΔΔⵠ: function (a, b, c) {
        if (a && this.ΔⲆᐃΔⵠ) {
          this.display = 1;
          this.id = c === 0 ? b.id : Nt[b.id].ᐃᐃΔΔ;
          this.x = b.info.translate.x + 80;
          this.y = b.info.translate.y;
          this.ᐃⵠΔⲆ = c;
        }
        return a;
      }
    };
    if (this.ⲆΔᐃⲆⲆ.ΔⲆᐃΔⵠ === 1) {
      this.options.ΔⵠⲆΔΔΔΔ.display = "inline-block";
    } else {
      this.options.ΔⵠⲆΔΔΔΔ.display = "none";
    }
    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ⲆΔᐃⲆⲆ.ΔΔⲆᐃΔ, yl);
    if (ᐃⲆᐃΔ.get("starve_scale")) {
      ra = Number(ᐃⲆᐃΔ.get("starve_scale"));
      document.getElementById("input_ratio").value = ra;
      ra *= Vr / Zr;
      _r();
    }
    this.ᐃᐃΔΔᐃΔᐃ = function () {
      ᐃⲆᐃΔ.set("starve_scale", "" + document.getElementById("input_ratio").value);
      ra = document.getElementById("input_ratio").value * (Vr / Zr);
      _r();
    };
    document.getElementById("input_ratio").addEventListener("input", this.ᐃᐃΔΔᐃΔᐃ, false);
    this.ᐃᐃᐃΔ = {
      open: false,
      ΔⲆᐃΔⵠ: ᐃⲆᐃΔ.get("starve_safe") ? ᐃⲆᐃΔ.get("starve_safe") === "0" ? 0 : 1 : 1,
      id: document.getElementById("sure_delete"),
      style: document.getElementById("sure_delete").style,
      ΔⵠⵠⲆⲆ: document.getElementById("agree").style,
      button: 0,
      ⵠⲆ: 0,
      ΔΔᐃⵠⲆ: function () {
        Kx.ᐃᐃᐃΔ.style.display = "none";
        Kx.ᐃᐃᐃΔ.open = false;
      },
      all: function () {
        if (!Hx.ⲆΔΔᐃⲆ.wait) {
          if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && Hx.ᐃⵠΔⲆ.id < 0 && !Hx.ⲆΔⵠⵠⲆ.enabled) {
            Jx.ᐃΔⲆⲆⵠⵠΔΔⵠ(Kx.ᐃᐃᐃΔ.button);
          }
          Kx.ᐃᐃᐃΔ.ΔΔᐃⵠⲆ();
        }
      },
      Ⲇᐃⵠⵠ: function () {
        if (Hx.ᐃⵠΔⲆ.ᐃⵠⲆⵠΔ && !Hx.ⲆΔΔᐃⲆ.wait) {
          if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && Hx.ᐃⵠΔⲆ.id < 0 && !Hx.ⲆΔⵠⵠⲆ.enabled) {
            Jx.ⵠⵠᐃΔΔⲆΔΔᐃ(Kx.ᐃᐃᐃΔ.button);
          }
          Kx.ᐃᐃᐃΔ.ΔΔᐃⵠⲆ();
        }
      },
      ΔΔᐃⵠᐃⵠⵠᐃⵠ: function () {
        if (!Hx.ⲆΔΔᐃⲆ.wait) {
          if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && Hx.ᐃⵠΔⲆ.id < 0 && !Hx.ⲆΔⵠⵠⲆ.enabled) {
            Jx.ᐃΔⵠᐃΔⵠΔⲆΔ(Kx.ᐃᐃᐃΔ.button);
          }
          Kx.ᐃᐃᐃΔ.ΔΔᐃⵠⲆ();
        }
      },
      ΔΔⲆᐃΔ: function () {
        if (Kx.ᐃᐃᐃΔ.ΔⲆᐃΔⵠ) {
          ᐃⲆᐃΔ.set("starve_safe", "0");
          Kx.ᐃᐃᐃΔ.ΔⵠⵠⲆⲆ.display = "inline-block";
          Kx.options.ΔⵠⵠⲆⲆ.display = "none";
        } else {
          ᐃⲆᐃΔ.set("starve_safe", "1");
          Kx.ᐃᐃᐃΔ.ΔⵠⵠⲆⲆ.display = "none";
          Kx.options.ΔⵠⵠⲆⲆ.display = "inline-block";
        }
        Kx.ᐃᐃᐃΔ.ΔⲆᐃΔⵠ = !Kx.ᐃᐃᐃΔ.ΔⲆᐃΔⵠ;
      },
      ⲆᐃΔⵠⵠⲆⵠ: function (a) {
        this.button = a;
        document.getElementById("item_to_del").src = Ⲇⵠ[vh[a].ⵠᐃ][0].ΔᐃᐃⲆΔ === Wg ? Ⲇⵠ[vh[a].ⵠᐃ][0].src : Ⲇⵠ[vh[a].ⵠᐃ][0].ΔᐃᐃⲆΔ;
        if (vh[a].Ⲇᐃⵠⵠ && !Hx.ᐃΔΔⵠΔ && Hx.ᐃⵠΔⲆ.ᐃⵠⲆⵠΔ) {
          document.getElementById("recycle_delete").style.display = "inline-block";
        } else {
          document.getElementById("recycle_delete").style.display = "none";
        }
        if (this.ΔⲆᐃΔⵠ) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.all();
        }
      },
      ⲆΔᐃ: function () {
        this.style.left = Math.floor(kq - 235) + "px";
        this.style.top = Math.floor(Zo - 175) + "px";
      }
    };
    this.ᐃᐃᐃΔ.ΔⵠⵠⲆⲆ.display = "none";
    if (this.ᐃᐃᐃΔ.ΔⲆᐃΔⵠ) {
      this.options.ΔⵠⵠⲆⲆ.display = "inline-block";
    } else {
      this.options.ΔⵠⵠⲆⲆ.display = "none";
    }
    document.getElementById("one_delete").addEventListener("mouseup", this.ᐃᐃᐃΔ.ΔΔᐃⵠᐃⵠⵠᐃⵠ, Mo);
    document.getElementById("yes_delete").addEventListener("mouseup", this.ᐃᐃᐃΔ.all, N);
    document.getElementById("recycle_delete").addEventListener("mouseup", this.ᐃᐃᐃΔ.Ⲇᐃⵠⵠ, false);
    document.getElementById("no_delete").addEventListener("mouseup", this.ᐃᐃᐃΔ.ΔΔᐃⵠⲆ, false);
    document.getElementById("case_agree").addEventListener("mouseup", this.ᐃᐃᐃΔ.ΔΔⲆᐃΔ, false);
    this.ⵠⲆⲆΔⲆ = {
      open: false,
      ᐃⵠΔᐃᐃ: -1,
      button: Af(60, 60, 0, Ⲇⵠ[592]),
      id: document.getElementById("shop_starterkit"),
      style: document.getElementById("shop_starterkit").style,
      ⲆΔᐃ: function () {
        this.style.left = Math.floor(kq - 300) + "px";
        this.style.top = Math.floor(Zo - 215) + "px";
      },
      ΔΔᐃⵠⲆ: function () {
        Kx.ⵠⲆⲆΔⲆ.open = false;
        Kx.ⵠⲆⲆΔⲆ.style.display = "none";
      },
      select: function () {
        Kx.ⵠⲆⲆΔⲆ.open = !Kx.ⵠⲆⲆΔⲆ.open;
        if (Kx.ⵠⲆⲆΔⲆ.open) {
          Kx.ⵠⲆⲆΔⲆ.style.display = "inline-block";
        } else {
          Kx.ⵠⲆⲆΔⲆ.style.display = "none";
        }
      },
      ΔΔⲆΔⵠᐃⲆ: function () {
        if (Kx.ⵠⲆⲆΔⲆ.ᐃⵠΔᐃᐃ >= 0) {
          Jx.ΔⵠⲆᐃⵠⵠⵠⵠᐃ(Kx.ⵠⲆⲆΔⲆ.ᐃⵠΔᐃᐃ);
          Kx.ⵠⲆⲆΔⲆ.ΔΔᐃⵠⲆ();
          if (ga) {
            ga("send", "event", "Game", "kit", "" + Kx.ⵠⲆⲆΔⲆ.ᐃⵠΔᐃᐃ);
          }
        }
      },
      ⲆⵠΔⵠⲆ: function () {
        var a = Hx.ⵠⲆⲆΔⲆ.value;
        document.getElementById("points_bank").innerHTML = ᐃⵠⵠ.ᐃΔⲆᐃᐃᐃΔ(a) + " points";
        for (var b = 0; b < jf.length; b++) {
          if (jf[b].ⵠⲆⲆΔⵠ > a) {
            document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
          } else {
            document.getElementById("starter" + (b + 1)).style.opacity = "1";
          }
        }
        for (b = 1; b < 13; b++) {
          document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + b).innerHTML = "";
        }
        document.getElementById("buy_kit").style.opacity = "0.2";
      },
      ᐃᐃⵠᐃⵠΔᐃⵠⲆ: function () {
        if (this.id.length > 8) {
          var a = Number(this.id.charAt(7) + this.id.charAt(8));
        } else {
          a = Number(this.id.charAt(7));
        }
        var b = jf[a - 1];
        if (Hx.ⵠⲆⲆΔⲆ.value >= b.ⵠⲆⲆΔⵠ) {
          Kx.ⵠⲆⲆΔⲆ.ᐃⵠΔᐃᐃ = a;
          document.getElementById("buy_kit").style.opacity = "1";
        } else {
          Kx.ⵠⲆⲆΔⲆ.ᐃⵠΔᐃᐃ = -1;
          document.getElementById("buy_kit").style.opacity = "0.2";
        }
        b = b.items;
        for (var c = 1, d = 1; c < b.length + 1; c++) {
          if (b[c - 1][1] !== 29) {
            document.getElementById("inv_shop" + d).style.display = "inline-block";
            document.getElementById("inv_shop" + d).src = Ⲇⵠ[vh[b[c - 1][1]].ⵠᐃ][0].ΔᐃᐃⲆΔ === undefined ? Ⲇⵠ[vh[b[c - 1][1]].ⵠᐃ][0].src : Ⲇⵠ[vh[b[c - 1][1]].ⵠᐃ][0].ΔᐃᐃⲆΔ;
            document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][0];
            d++;
          }
        }
        for (; d < 13; d++) {
          document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + d).innerHTML = "";
        }
      }
    };
    document.getElementById("quit3").addEventListener("mouseup", this.ⵠⲆⲆΔⲆ.ΔΔᐃⵠⲆ, false);
    document.getElementById("buy_kit").addEventListener("mouseup", this.ⵠⲆⲆΔⲆ.ΔΔⲆΔⵠᐃⲆ, false);
    for (k = 1; k < 11; k++) {
      document.getElementById("starter" + k).addEventListener("mouseup", this.ⵠⲆⲆΔⲆ.ᐃᐃⵠᐃⵠΔᐃⵠⲆ, Kr);
    }
    this.ⵠⲆⵠⵠ = {
      open: false,
      ΔⲆᐃΔⵠ: ᐃⲆᐃΔ.get("starve_quests") ? ᐃⲆᐃΔ.get("starve_quests") === "1" ? 1 : 0 : 0,
      button: Af(60, 60, 0, Ⲇⵠ[755]),
      id: document.getElementById("chronoquest"),
      style: document.getElementById("chronoquest").style,
      ⲆΔᐃ: function () {
        this.style.left = Math.floor(kq - 420) + "px";
        this.style.top = Math.floor(Zo - 270) + "px";
      },
      ΔΔᐃⵠⲆ: function () {
        Kx.ⵠⲆⵠⵠ.style.display = "none";
        Kx.ⵠⲆⵠⵠ.open = Sq;
      },
      select: function () {
        Kx.ⵠⲆⵠⵠ.open = !Kx.ⵠⲆⵠⵠ.open;
        if (Kx.ⵠⲆⵠⵠ.open) {
          Kx.ⵠⲆⵠⵠ.style.display = "inline-block";
        } else {
          Kx.ⵠⲆⵠⵠ.style.display = "none";
        }
      },
      list: [],
      reset: function () {
        for (var a = 0; a < Hf.length; a++) {
          this.list[a] = 1;
          document.getElementById("timeremain_" + a).style.display = "inline-block";
          document.getElementById("time_finished_" + a).style.display = "none";
          document.getElementById("claim_reward_" + a).style.display = "none";
        }
      },
      ⵠΔᐃⵠᐃᐃⵠ: 0,
      ᐃⲆⲆᐃΔⵠΔ: 0,
      ᐃⲆΔΔⵠΔⵠⲆⲆ: function () {
        if (Kx.ⵠⲆⵠⵠ.open) {
          var a = new Date().getTime();
          if (a - this.ⵠΔᐃⵠᐃᐃⵠ >= 1000) {
            this.ⵠΔᐃⵠᐃᐃⵠ = a;
            for (var b = 0; b < Hf.length; b++) {
              if (Kx.ⵠⲆⵠⵠ.list[b]) {
                var c = Hf[b].time - (a - Gx.ᐃⲆΔⵠᐃ.ⲆⵠΔⵠⲆ + Kx.ⵠⲆⵠⵠ.ᐃⲆⲆᐃΔⵠΔ);
                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
              }
            }
          }
        }
      },
      restore: function (a) {
        for (var b = 0; b < a.length; b++) {
          if (a[b] != 1) {
            Kx.ⵠⲆⵠⵠ.ⵠⵠⲆᐃⲆΔΔ(b, a[b]);
          }
        }
      },
      ⵠⵠⲆᐃⲆΔΔ: function (a, b) {
        if (b === 3 && (a === 11 || a === 12)) {
          Hx.ⵠᐃΔⵠ.ⵠⵠᐃⵠΔᐃᐃ(0, 1);
          Kx.ⲆⲆⵠⲆᐃᐃⲆ();
        }
        document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        if (b > 1) {
          document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
          document.getElementById("timeremain_" + a).style.display = "none";
        } else if (b === 0) {
          document.getElementById("time_finished_" + a).innerHTML = "FAILED";
          document.getElementById("timeremain_" + a).style.display = "none";
        }
        document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
        document.getElementById("time_finished_" + a).style.display = "inline";
        Kx.ⵠⲆⵠⵠ.list[a] = 0;
      },
      modify: function (a, b) {
        Kx.ⵠⲆⵠⵠ.ⵠⵠⲆᐃⲆΔΔ(a, b);
        if (Kx.ⵠⲆⵠⵠ.ΔⲆᐃΔⵠ) {
          Kx.ⵠⲆⵠⵠ.open = true;
          Kx.ⵠⲆⵠⵠ.style.display = "inline-block";
        }
      },
      ΔΔⲆᐃΔ: function () {
        if (Kx.ⵠⲆⵠⵠ.ΔⲆᐃΔⵠ) {
          ᐃⲆᐃΔ.set("starve_quests", "0");
          Kx.options.ᐃⵠᐃⲆᐃⲆΔ.display = "none";
        } else {
          ᐃⲆᐃΔ.set("starve_quests", "1");
          Kx.options.ᐃⵠᐃⲆᐃⲆΔ.display = "inline-block";
        }
        Kx.ⵠⲆⵠⵠ.ΔⲆᐃΔⵠ = !Kx.ⵠⲆⵠⵠ.ΔⲆᐃΔⵠ;
      },
      ⲆⲆⲆⵠⲆⲆΔⲆⲆ: function () {
        var a = Number(this.id.charAt(13));
        var b = Number(this.id.charAt(14));
        if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
          a = a * 10 + b;
        }
        Jx.ⵠΔⵠⲆΔⵠᐃⲆⲆ(a);
      }
    };
    if (this.ⵠⲆⵠⵠ.ΔⲆᐃΔⵠ) {
      this.options.ᐃⵠᐃⲆᐃⲆΔ.display = "inline-block";
    } else {
      this.options.ᐃⵠᐃⲆᐃⲆΔ.display = "none";
    }
    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ⵠⲆⵠⵠ.ΔΔᐃⵠⲆ, false);
    for (k = 0; Hf.length > k; k++) {
      document.getElementById("claim_reward_" + k).addEventListener("mouseup", this.ⵠⲆⵠⵠ.ⲆⲆⲆⵠⲆⲆΔⲆⲆ, false);
    }
    this.ⵠΔᐃΔ = {
      open: yl,
      button: Af(60, 60, 0, Ⲇⵠ[708]),
      list: {
        id: document.getElementById("recipe_craft"),
        style: document.getElementById("recipe_craft").style,
        ⲆⲆⲆᐃⲆΔᐃ: [],
        ⲆΔΔⵠⵠⲆⵠ: 0,
        ⲆΔᐃ: function () {
          this.style.left = Math.floor(kq - 335) + "px";
          this.style.top = Math.floor(Zo - 215) + "px";
        },
        ΔΔᐃⵠⲆ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          Kx.ⵠΔᐃΔ.open = bn;
        },
        ⵠⵠⲆⵠⵠⵠᐃ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          document.getElementById("home_craft").style.display = "inline-block";
        },
        ΔΔⲆⲆⵠ: function (a) {
          if ((b = this.ⲆⲆⲆᐃⲆΔᐃ[a]).ⲆⲆⵠ) {
            document.getElementById("watercraft").style.display = "inline-block";
          } else {
            document.getElementById("watercraft").style.display = "none";
          }
          if (b.f) {
            document.getElementById("firecraft").style.display = "inline-block";
          } else {
            document.getElementById("firecraft").style.display = "none";
          }
          if (b.w) {
            document.getElementById("workcraft").style.display = "inline-block";
          } else {
            document.getElementById("workcraft").style.display = "none";
          }
          if (b.e) {
            document.getElementById("wellcraft").style.display = "inline-block";
          } else {
            document.getElementById("wellcraft").style.display = "none";
          }
          for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
            document.getElementById("inv" + c).style.display = "inline-block";
            document.getElementById("inv" + c).src = Ⲇⵠ[vh[b[a][0]].ⵠᐃ][0].ΔᐃᐃⲆΔ === undefined ? Ⲇⵠ[vh[b[a][0]].ⵠᐃ][0].src : Ⲇⵠ[vh[b[a][0]].ⵠᐃ][0].ΔᐃᐃⲆΔ;
            document.getElementById("numb" + c).innerHTML = "" + b[a][1];
            c++;
          }
          for (; c < 6; c++) {
            document.getElementById("inv" + c).style.display = "none";
            document.getElementById("numb" + c).innerHTML = "";
          }
        },
        select: function (a) {
          this.ⲆΔΔⵠⵠⲆⵠ = a;
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("workcraft").style.display = "none";
          document.getElementById("firecraft").style.display = "none";
          document.getElementById("watercraft").style.display = "none";
          document.getElementById("wellcraft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "inline-block";
          document.getElementById("inv1").style.display = "none";
          document.getElementById("inv2").style.display = "none";
          document.getElementById("inv3").style.display = "none";
          document.getElementById("inv4").style.display = "none";
          document.getElementById("inv5").style.display = "none";
          document.getElementById("numb1").innerHTML = "";
          document.getElementById("numb2").innerHTML = "";
          document.getElementById("numb3").innerHTML = "";
          document.getElementById("numb4").innerHTML = "";
          document.getElementById("numb5").innerHTML = "";
          for (var b = 0, c = 0; b < Nt.length; b++) {
            var d = Nt[b];
            if (a === d.ΔⵠΔ) {
              this.ⲆⲆⲆᐃⲆΔᐃ[c] = d;
              c++;
              document.getElementById("img_" + c).style.display = "inline-block";
              document.getElementById("img_" + c).src = Ⲇⵠ[vh[d.ᐃᐃΔΔ].ⵠᐃ][0].ΔᐃᐃⲆΔ === undefined ? Ⲇⵠ[vh[d.ᐃᐃΔΔ].ⵠᐃ][0].src : Ⲇⵠ[vh[d.ᐃᐃΔΔ].ⵠᐃ][0].ΔᐃᐃⲆΔ;
            }
          }
          for (c++; c < 49; c++) {
            document.getElementById("img_" + c).style.display = "none";
          }
        }
      },
      ⵠΔᐃᐃΔⲆⵠ: {
        id: document.getElementById("home_craft"),
        style: document.getElementById("home_craft").style,
        ⲆΔᐃ: function () {
          this.style.left = Math.floor(kq - 285) + "px";
          this.style.top = Math.floor(Zo - 170) + "px";
        },
        ΔΔᐃⵠⲆ: function () {
          document.getElementById("home_craft").style.display = "none";
          Kx.ⵠΔᐃΔ.open = false;
        }
      },
      ᐃᐃⵠΔⵠΔⵠⵠⲆ: function () {
        this.open = !this.open;
        if (this.open) {
          document.getElementById("home_craft").style.display = "inline-block";
        } else {
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "none";
        }
      }
    };
    document.getElementById("quit").addEventListener("mouseup", this.ⵠΔᐃΔ.ⵠΔᐃᐃΔⲆⵠ.ΔΔᐃⵠⲆ, false);
    document.getElementById("quitmenu").addEventListener("mouseup", this.ⵠΔᐃΔ.list.ΔΔᐃⵠⲆ, false);
    document.getElementById("backhome").addEventListener("mouseup", this.ⵠΔᐃΔ.list.ⵠⵠⲆⵠⵠⵠᐃ, yg);
    document.getElementById("hatcategory").addEventListener("mouseup", function () {
      Kx.ⵠΔᐃΔ.list.select(2);
    }, Mo);
    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
      Kx.ⵠΔᐃΔ.list.select(1);
    }, false);
    document.getElementById("toolcategory").addEventListener("mouseup", function () {
      Kx.ⵠΔᐃΔ.list.select(0);
    }, Ni);
    document.getElementById("foodcategory").addEventListener("mouseup", function () {
      Kx.ⵠΔᐃΔ.list.select(3);
    }, Fa);
    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
      Kx.ⵠΔᐃΔ.list.select(4);
    }, yl);
    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
      Kx.ⵠΔᐃΔ.list.select(5);
    }, false);
    document.getElementById("img_1").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(0);
    }, false);
    document.getElementById("img_2").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(1);
    }, false);
    document.getElementById("img_3").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(2);
    }, N);
    document.getElementById("img_4").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(3);
    }, bn);
    document.getElementById("img_5").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(4);
    }, Tn);
    document.getElementById("img_6").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(5);
    }, false);
    document.getElementById("img_7").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(6);
    }, false);
    document.getElementById("img_8").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(7);
    }, Gg);
    document.getElementById("img_9").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(8);
    }, Tn);
    document.getElementById("img_10").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(9);
    }, false);
    document.getElementById("img_11").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(10);
    }, false);
    document.getElementById("img_12").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(11);
    }, Gg);
    document.getElementById("img_13").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(12);
    }, Fa);
    document.getElementById("img_14").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(13);
    }, false);
    document.getElementById("img_15").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(14);
    }, false);
    document.getElementById("img_16").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(15);
    }, false);
    document.getElementById("img_17").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(16);
    }, false);
    document.getElementById("img_18").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(17);
    }, false);
    document.getElementById("img_19").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(18);
    }, Nq);
    document.getElementById("img_20").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(19);
    }, Kr);
    document.getElementById("img_21").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(20);
    }, false);
    document.getElementById("img_22").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(21);
    }, Nq);
    document.getElementById("img_23").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(22);
    }, false);
    document.getElementById("img_24").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(23);
    }, false);
    document.getElementById("img_25").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(24);
    }, N);
    document.getElementById("img_26").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(25);
    }, Tn);
    document.getElementById("img_27").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(26);
    }, false);
    document.getElementById("img_28").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(27);
    }, $g);
    document.getElementById("img_29").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(28);
    }, false);
    document.getElementById("img_30").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(29);
    }, yl);
    document.getElementById("img_31").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(30);
    }, false);
    document.getElementById("img_32").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(31);
    }, cs);
    document.getElementById("img_33").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(32);
    }, $g);
    document.getElementById("img_34").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(33);
    }, bn);
    document.getElementById("img_35").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(34);
    }, yg);
    document.getElementById("img_36").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(35);
    }, false);
    document.getElementById("img_37").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(36);
    }, Kr);
    document.getElementById("img_38").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(37);
    }, false);
    document.getElementById("img_39").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(38);
    }, false);
    document.getElementById("img_40").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(39);
    }, Mo);
    document.getElementById("img_41").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(40);
    }, Ge);
    document.getElementById("img_42").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(41);
    }, I);
    document.getElementById("img_43").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(42);
    }, Nh);
    document.getElementById("img_44").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(43);
    }, Ks);
    document.getElementById("img_45").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(44);
    }, false);
    document.getElementById("img_46").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(45);
    }, yl);
    document.getElementById("img_47").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(46);
    }, Tn);
    document.getElementById("img_48").addEventListener("mousedown", function () {
      Kx.ⵠΔᐃΔ.list.ΔΔⲆⲆⵠ(47);
    }, Kr);
    this.ⵠⵠΔⲆⲆ = {
      translate: {
        y: 0,
        x: 0
      },
      ⵠΔⵠΔⲆ: {
        x: -1,
        y: -1
      },
      ᐃⲆⵠⲆ: [],
      focus: function (a) {
        var b = this.translate.y + (Hx.ⵠᐃΔⵠ.ⲆᐃⵠⲆΔ.length > 0 ? -120 : -50);
        if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
          this.ⵠΔⵠΔⲆ.x = a.x - this.translate.x;
          this.ⵠΔⵠΔⲆ.y = a.y - b;
        }
      }
    };
    this.ᐃⲆΔΔᐃ = {
      translate: {
        x: 0,
        y: 0
      },
      ⵠᐃ: Ⲇⵠ[278],
      Ⲇᐃ: document.createElement("canvas")
    };
    this.ᐃⲆΔΔᐃ.Ⲇᐃ.width = this.ᐃⲆΔΔᐃ.ⵠᐃ.width;
    this.ᐃⲆΔΔᐃ.Ⲇᐃ.height = this.ᐃⲆΔΔᐃ.ⵠᐃ.height;
    this.ᐃⲆΔΔᐃ.Ⲇ = this.ᐃⲆΔΔᐃ.Ⲇᐃ.getContext("2d");
    this.ⵠΔⲆⵠ = {
      translate: {
        y: 0,
        x: 0
      },
      ⵠᐃ: Ⲇⵠ[267],
      ⵠᐃⲆᐃ: _u,
      y: 0
    };
    var m = bj.document.createElement("div");
    this.ⵠᐃⲆΔⵠⲆⲆ = function () {
      ΔⵠⵠⵠΔ = document.getElementById("team_box");
      ΔⵠⵠⵠΔ.innerHTML = "";
      ΔⵠⵠⵠΔ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((m.innerText = Gx.ᐃⲆⵠⲆ[Hx.ⲆΔᐃⲆᐃ[0]].ΔᐃΔΔⵠ) && m.innerHTML) + "</div";
      for (var a = 1; a < Hx.ⲆΔᐃⲆᐃ.length; a++) {
        ΔⵠⵠⵠΔ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((m.innerText = Gx.ᐃⲆⵠⲆ[Hx.ⲆΔᐃⲆᐃ[a]].ΔᐃΔΔⵠ) && m.innerHTML) + "</div></div>";
      }
      ΔⵠⵠⵠΔ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
      ΔⵠⵠⵠΔ.style.display = "inline-block";
      document.getElementById("leave").addEventListener("click", Jx.ⵠᐃⲆΔⵠⲆⲆ, Ge);
    };
    this.ᐃⵠⲆⵠᐃⲆΔᐃⵠ = function () {
      ΔⵠⵠⵠΔ = document.getElementById("team_box");
      ΔⵠⵠⵠΔ.innerHTML = "";
      ΔⵠⵠⵠΔ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((m.innerText = Gx.ᐃⲆⵠⲆ[Hx.ⲆΔᐃⲆᐃ[0]].ΔᐃΔΔⵠ) && m.innerHTML) + "</div";
      for (var a = 1; Hx.ⲆΔᐃⲆᐃ.length > a; a++) {
        ΔⵠⵠⵠΔ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((m.innerText = Gx.ᐃⲆⵠⲆ[Hx.ⲆΔᐃⲆᐃ[a]].ΔᐃΔΔⵠ) && m.innerHTML) + "</div></div>";
      }
      ΔⵠⵠⵠΔ.innerHTML += "</div>";
      ΔⵠⵠⵠΔ.style.display = "inline-block";
    };
    this.ᐃⵠΔⵠΔᐃΔᐃΔ = function () {
      ΔⵠⵠⵠΔ = document.getElementById("team_box");
      ΔⵠⵠⵠΔ.innerHTML = "";
      ΔⵠⵠⵠΔ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((m.innerText = Gx.ᐃⲆⵠⲆ[Hx.ⲆΔᐃⲆᐃ[0]].ΔᐃΔΔⵠ) && m.innerHTML) + "</div";
      for (var a = 1; a < Hx.ⲆΔᐃⲆᐃ.length; a++) {
        ΔⵠⵠⵠΔ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((m.innerText = Gx.ᐃⲆⵠⲆ[Hx.ⲆΔᐃⲆᐃ[a]].ΔᐃΔΔⵠ) && m.innerHTML) + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
      }
      if (Hx.ΔⲆΔⲆⲆ.lock === 0) {
        ΔⵠⵠⵠΔ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
      } else {
        ΔⵠⵠⵠΔ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
      }
      document.getElementById("lock_team").addEventListener("click", Jx.ᐃΔⲆᐃⵠⵠΔᐃΔ, th);
      ΔⵠⵠⵠΔ.style.display = "inline-block";
      for (a = 1; a < Hx.ⲆΔᐃⲆᐃ.length; a++) {
        switch (a) {
          case 1:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Jx.ΔᐃⵠΔᐃΔΔ(1);
            }, false);
            break;
          case 2:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Jx.ΔᐃⵠΔᐃΔΔ(2);
            }, false);
            break;
          case 3:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Jx.ΔᐃⵠΔᐃΔΔ(3);
            }, false);
            break;
          case 4:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Jx.ΔᐃⵠΔᐃΔΔ(4);
            }, false);
            break;
          case 5:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Jx.ΔᐃⵠΔᐃΔΔ(5);
            }, Nh);
            break;
          case 6:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Jx.ΔᐃⵠΔᐃΔΔ(6);
            }, false);
            break;
          case 7:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Jx.ΔᐃⵠΔᐃΔΔ(7);
            }, Mo);
            break;
          case 8:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Jx.ΔᐃⵠΔᐃΔΔ(8);
            }, Sq);
        }
      }
    };
    this.ⲆΔᐃΔᐃ = [];
    this.ⲆΔᐃΔᐃ[2] = {
      button: Af(60, 60, 0, Ⲇⵠ[556]),
      action: this.ⵠᐃⲆΔⵠⲆⲆ
    };
    this.ⲆΔᐃΔᐃ[3] = {
      button: Af(60, 60, 0, Ⲇⵠ[556]),
      action: Jx.ᐃⲆⵠΔⲆΔᐃΔⲆ
    };
    this.ⲆΔᐃΔᐃ[0] = {
      button: Af(60, 60, 0, Ⲇⵠ[557]),
      action: this.ᐃⵠΔⵠΔᐃΔᐃΔ
    };
    this.ⲆΔᐃΔᐃ[1] = {
      button: Af(60, 60, 0, Ⲇⵠ[561]),
      action: this.ᐃⵠⲆⵠᐃⲆΔᐃⵠ
    };
    this.ⲆΔᐃΔᐃ[4] = {
      button: Af(60, 60, 0, Ⲇⵠ[560]),
      action: function () { }
    };
    this.ⵠⲆΔᐃⵠ = -1;
    this.ᐃᐃᐃⵠΔᐃⲆ = Af(60, 60, 0, Ⲇⵠ[723]);
    this.ⵠⵠⲆⵠΔⲆᐃ = Af(60, 60, 0, Ⲇⵠ[724]);
    this.ⲆᐃⵠⲆⲆᐃᐃ = Af(60, 60, 0, Ⲇⵠ[658]);
    this.ⲆⲆⲆᐃⵠⲆΔ = Af(60, 60, 0, Ⲇⵠ[657]);
    this.ᐃᐃᐃⵠᐃΔⵠ = Af(60, 60, 0, Ⲇⵠ[658]);
    this.ⵠᐃⲆΔΔⵠΔ = Af(60, 60, 0, Ⲇⵠ[316]);
    this.ᐃᐃⲆⵠⵠᐃᐃ = Af(60, 60, 0, Ⲇⵠ[315]);
    this.ⵠⲆⲆΔⵠⵠΔ = Af(60, 60, 0, Ⲇⵠ[297]);
    this.ᐃⵠΔᐃᐃᐃⵠ = Af(60, 60, 0, Ⲇⵠ[298]);
    this.ⵠᐃΔΔⵠⵠⲆ = Af(60, 60, 0, Ⲇⵠ[418]);
    this.ΔⲆΔΔΔⵠⵠ = Af(60, 60, 0, Ⲇⵠ[938]);
    this.ΔⵠᐃᐃⲆⵠⲆ = Af(60, 60, 0, Ⲇⵠ[412]);
    this.ᐃΔᐃⵠⵠᐃᐃ = Af(60, 60, 0, Ⲇⵠ[536]);
    this.ⲆΔΔⵠΔⵠⵠ = Af(60, 60, 0, Ⲇⵠ[535]);
    this.ⲆΔΔⵠΔⲆⵠ = Af(60, 60, 0, Ⲇⵠ[538]);
    this.ⵠⵠⵠⲆⲆ = Af(120, 120, 0, Ⲇⵠ[149]);
    this.ⵠⵠⵠⲆⲆ.info.translate.x = 10;
    this.ⵠⵠⵠⲆⲆ.info.translate.y = 10;
    this.ⲆΔⲆ = [];
    this.ⲆΔⲆ[0] = Af(68, 68, 0, Ⲇⵠ[340], 3);
    this.ⲆΔⲆ[0].id = 0;
    this.ⲆΔⲆ[1] = Af(68, 68, 0, Ⲇⵠ[341], 3);
    this.ⲆΔⲆ[1].id = 1;
    this.ⲆΔⲆ[108] = Af(68, 68, 0, Ⲇⵠ[342], 3);
    this.ⲆΔⲆ[108].id = 108;
    this.ⲆΔⲆ[109] = Af(68, 68, 0, Ⲇⵠ[343], 3);
    this.ⲆΔⲆ[109].id = 109;
    this.ⲆΔⲆ[110] = Af(68, 68, 0, Ⲇⵠ[269], 3);
    this.ⲆΔⲆ[110].id = 110;
    this.ⲆΔⲆ[233] = Af(68, 68, 0, Ⲇⵠ[1155], 3);
    this.ⲆΔⲆ[233].id = 233;
    this.ⲆΔⲆ[111] = Af(68, 68, 0, Ⲇⵠ[270], 3);
    this.ⲆΔⲆ[111].id = 111;
    this.ⲆΔⲆ[112] = Af(68, 68, 0, Ⲇⵠ[271], 3);
    this.ⲆΔⲆ[112].id = 112;
    this.ⲆΔⲆ[3] = Af(68, 68, 0, Ⲇⵠ[272], 3);
    this.ⲆΔⲆ[3].id = 3;
    this.ⲆΔⲆ[4] = Af(68, 68, 0, Ⲇⵠ[344], 3);
    this.ⲆΔⲆ[4].id = 4;
    this.ⲆΔⲆ[5] = Af(68, 68, 0, Ⲇⵠ[345], 3);
    this.ⲆΔⲆ[5].id = 5;
    this.ⲆΔⲆ[57] = Af(68, 68, 0, Ⲇⵠ[831], 3);
    this.ⲆΔⲆ[57].id = 57;
    this.ⲆΔⲆ[6] = Af(68, 68, 0, Ⲇⵠ[346], 3);
    this.ⲆΔⲆ[6].id = 6;
    this.ⲆΔⲆ[113] = Af(68, 68, 0, Ⲇⵠ[273], 3);
    this.ⲆΔⲆ[113].id = 113;
    this.ⲆΔⲆ[114] = Af(68, 68, 0, Ⲇⵠ[358], 3);
    this.ⲆΔⲆ[114].id = 114;
    this.ⲆΔⲆ[115] = Af(68, 68, 0, Ⲇⵠ[348], 3);
    this.ⲆΔⲆ[115].id = 115;
    this.ⲆΔⲆ[162] = Af(68, 68, 0, Ⲇⵠ[349], 3);
    this.ⲆΔⲆ[162].id = 162;
    this.ⲆΔⲆ[160] = Af(68, 68, 0, Ⲇⵠ[350], 3);
    this.ⲆΔⲆ[160].id = 160;
    this.ⲆΔⲆ[8] = Af(68, 68, 0, Ⲇⵠ[274], 3);
    this.ⲆΔⲆ[8].id = 8;
    this.ⲆΔⲆ[117] = Af(68, 68, 0, Ⲇⵠ[351], 3);
    this.ⲆΔⲆ[117].id = 117;
    this.ⲆΔⲆ[116] = Af(68, 68, 0, Ⲇⵠ[275], 3);
    this.ⲆΔⲆ[116].id = 116;
    this.ⲆΔⲆ[118] = Af(68, 68, 0, Ⲇⵠ[276], 3);
    this.ⲆΔⲆ[118].id = 118;
    this.ⲆΔⲆ[195] = Af(68, 68, 0, Ⲇⵠ[352], 3);
    this.ⲆΔⲆ[195].id = 195;
    this.ⲆΔⲆ[161] = Af(68, 68, 0, Ⲇⵠ[353], 3);
    this.ⲆΔⲆ[161].id = 161;
    this.ⲆΔⲆ[163] = Af(68, 68, 0, Ⲇⵠ[354], 3);
    this.ⲆΔⲆ[163].id = 163;
    this.ⲆΔⲆ[164] = Af(68, 68, 0, Ⲇⵠ[355], 3);
    this.ⲆΔⲆ[164].id = 164;
    this.ⲆΔⲆ[165] = Af(68, 68, 0, Ⲇⵠ[356], 3);
    this.ⲆΔⲆ[165].id = 165;
    this.ⲆΔⲆ[166] = Af(68, 68, 0, Ⲇⵠ[357], 3);
    this.ⲆΔⲆ[166].id = 166;
    this.ⲆΔⲆ[167] = Af(68, 68, 0, Ⲇⵠ[359], 3);
    this.ⲆΔⲆ[167].id = 167;
    this.ⲆΔⲆ[168] = Af(68, 68, 0, Ⲇⵠ[382], 3);
    this.ⲆΔⲆ[168].id = 168;
    this.ⲆΔⲆ[169] = Af(68, 68, 0, Ⲇⵠ[383], 3);
    this.ⲆΔⲆ[169].id = 169;
    this.ⲆΔⲆ[170] = Af(68, 68, 0, Ⲇⵠ[384], 3);
    this.ⲆΔⲆ[170].id = 170;
    this.ⲆΔⲆ[2] = Af(68, 68, 0, Ⲇⵠ[386], 3);
    this.ⲆΔⲆ[2].id = 2;
    this.ⲆΔⲆ[237] = Af(68, 68, 0, Ⲇⵠ[1163], 3);
    this.ⲆΔⲆ[237].id = 237;
    this.ⲆΔⲆ[174] = Af(68, 68, 0, Ⲇⵠ[394], 3);
    this.ⲆΔⲆ[174].id = 174;
    this.ⲆΔⲆ[222] = Af(68, 68, 0, Ⲇⵠ[1036], 3);
    this.ⲆΔⲆ[222].id = 222;
    this.ⲆΔⲆ[231] = Af(68, 68, 0, Ⲇⵠ[1038], 3);
    this.ⲆΔⲆ[231].id = 231;
    this.ⲆΔⲆ[232] = Af(68, 68, 0, Ⲇⵠ[1040], 3);
    this.ⲆΔⲆ[232].id = 232;
    this.ⲆΔⲆ[234] = Af(68, 68, 0, Ⲇⵠ[1157], 3);
    this.ⲆΔⲆ[234].id = 234;
    this.ⲆΔⲆ[10] = Af(68, 68, 0, Ⲇⵠ[387], 3);
    this.ⲆΔⲆ[10].id = 10;
    this.ⲆΔⲆ[171] = Af(68, 68, 0, Ⲇⵠ[388], 3);
    this.ⲆΔⲆ[171].id = 171;
    this.ⲆΔⲆ[172] = Af(68, 68, 0, Ⲇⵠ[389], 3);
    this.ⲆΔⲆ[172].id = 172;
    this.ⲆΔⲆ[173] = Af(68, 68, 0, Ⲇⵠ[390], 3);
    this.ⲆΔⲆ[173].id = 173;
    this.ⲆΔⲆ[11] = Af(68, 68, 0, Ⲇⵠ[391], 3);
    this.ⲆΔⲆ[11].id = 11;
    this.ⲆΔⲆ[12] = Af(68, 68, 0, Ⲇⵠ[403], 3);
    this.ⲆΔⲆ[12].id = 12;
    this.ⲆΔⲆ[13] = Af(68, 68, 0, Ⲇⵠ[397], 3);
    this.ⲆΔⲆ[13].id = 13;
    this.ⲆΔⲆ[14] = Af(68, 68, 0, Ⲇⵠ[400], 3);
    this.ⲆΔⲆ[14].id = 14;
    this.ⲆΔⲆ[15] = Af(68, 68, 0, Ⲇⵠ[406], 3);
    this.ⲆΔⲆ[15].id = 15;
    this.ⲆΔⲆ[16] = Af(68, 68, 0, Ⲇⵠ[875], 3);
    this.ⲆΔⲆ[16].id = 16;
    this.ⲆΔⲆ[119] = Af(68, 68, 0, Ⲇⵠ[410], 3);
    this.ⲆΔⲆ[119].id = 119;
    this.ⲆΔⲆ[23] = Af(68, 68, 0, Ⲇⵠ[422], 3);
    this.ⲆΔⲆ[23].id = 23;
    this.ⲆΔⲆ[24] = Af(68, 68, 0, Ⲇⵠ[425], 3);
    this.ⲆΔⲆ[24].id = 24;
    this.ⲆΔⲆ[87] = Af(68, 68, 0, Ⲇⵠ[1229], 3);
    this.ⲆΔⲆ[87].id = 87;
    this.ⲆΔⲆ[88] = Af(68, 68, 0, Ⲇⵠ[1232], 3);
    this.ⲆΔⲆ[88].id = 88;
    this.ⲆΔⲆ[80] = Af(68, 68, 0, Ⲇⵠ[1139], 3);
    this.ⲆΔⲆ[80].id = 80;
    this.ⲆΔⲆ[81] = Af(68, 68, 0, Ⲇⵠ[1142], 3);
    this.ⲆΔⲆ[81].id = 81;
    this.ⲆΔⲆ[101] = Af(68, 68, 0, Ⲇⵠ[1167], 3);
    this.ⲆΔⲆ[101].id = 101;
    this.ⲆΔⲆ[64] = Af(68, 68, 0, Ⲇⵠ[571], 3);
    this.ⲆΔⲆ[64].id = 64;
    this.ⲆΔⲆ[71] = Af(68, 68, 0, Ⲇⵠ[1240], 3);
    this.ⲆΔⲆ[71].id = 71;
    this.ⲆΔⲆ[102] = Af(68, 68, 0, Ⲇⵠ[1170], 3);
    this.ⲆΔⲆ[102].id = 102;
    this.ⲆΔⲆ[65] = Af(68, 68, 0, Ⲇⵠ[574], 3);
    this.ⲆΔⲆ[65].id = 65;
    this.ⲆΔⲆ[72] = Af(68, 68, 0, Ⲇⵠ[1243], 3);
    this.ⲆΔⲆ[72].id = 72;
    this.ⲆΔⲆ[103] = Af(68, 68, 0, Ⲇⵠ[1173], 3);
    this.ⲆΔⲆ[103].id = 103;
    this.ⲆΔⲆ[66] = Af(68, 68, 0, Ⲇⵠ[577], 3);
    this.ⲆΔⲆ[66].id = 66;
    this.ⲆΔⲆ[73] = Af(68, 68, 0, Ⲇⵠ[1246], 3);
    this.ⲆΔⲆ[73].id = 73;
    this.ⲆΔⲆ[104] = Af(68, 68, 0, Ⲇⵠ[1176], 3);
    this.ⲆΔⲆ[104].id = 104;
    this.ⲆΔⲆ[67] = Af(68, 68, 0, Ⲇⵠ[580], 3);
    this.ⲆΔⲆ[67].id = 67;
    this.ⲆΔⲆ[74] = Af(68, 68, 0, Ⲇⵠ[1249], 3);
    this.ⲆΔⲆ[74].id = 74;
    this.ⲆΔⲆ[105] = Af(68, 68, 0, Ⲇⵠ[1179], 3);
    this.ⲆΔⲆ[105].id = 105;
    this.ⲆΔⲆ[68] = Af(68, 68, 0, Ⲇⵠ[583], 3);
    this.ⲆΔⲆ[68].id = 68;
    this.ⲆΔⲆ[75] = Af(68, 68, 0, Ⲇⵠ[1252], 3);
    this.ⲆΔⲆ[75].id = 75;
    this.ⲆΔⲆ[106] = Af(68, 68, 0, Ⲇⵠ[1182], 3);
    this.ⲆΔⲆ[106].id = 106;
    this.ⲆΔⲆ[69] = Af(68, 68, 0, Ⲇⵠ[586], 3);
    this.ⲆΔⲆ[69].id = 69;
    this.ⲆΔⲆ[76] = Af(68, 68, 0, Ⲇⵠ[1255], 3);
    this.ⲆΔⲆ[76].id = 76;
    this.ⲆΔⲆ[107] = Af(68, 68, 0, Ⲇⵠ[1185], 3);
    this.ⲆΔⲆ[107].id = 107;
    this.ⲆΔⲆ[70] = Af(68, 68, 0, Ⲇⵠ[589], 3);
    this.ⲆΔⲆ[70].id = 70;
    this.ⲆΔⲆ[94] = Af(68, 68, 0, Ⲇⵠ[1258], 3);
    this.ⲆΔⲆ[94].id = 94;
    this.ⲆΔⲆ[95] = Af(68, 68, 0, Ⲇⵠ[1261], 3);
    this.ⲆΔⲆ[95].id = 95;
    this.ⲆΔⲆ[96] = Af(68, 68, 0, Ⲇⵠ[1264], 3);
    this.ⲆΔⲆ[96].id = 96;
    this.ⲆΔⲆ[97] = Af(68, 68, 0, Ⲇⵠ[1267], 3);
    this.ⲆΔⲆ[97].id = 97;
    this.ⲆΔⲆ[98] = Af(68, 68, 0, Ⲇⵠ[1270], 3);
    this.ⲆΔⲆ[98].id = 98;
    this.ⲆΔⲆ[99] = Af(68, 68, 0, Ⲇⵠ[1273], 3);
    this.ⲆΔⲆ[99].id = 99;
    this.ⲆΔⲆ[58] = Af(68, 68, 0, Ⲇⵠ[828], 3);
    this.ⲆΔⲆ[58].id = 58;
    this.ⲆΔⲆ[25] = Af(68, 68, 0, Ⲇⵠ[431], 3);
    this.ⲆΔⲆ[25].id = 25;
    this.ⲆΔⲆ[26] = Af(68, 68, 0, Ⲇⵠ[434], 3);
    this.ⲆΔⲆ[26].id = 26;
    this.ⲆΔⲆ[27] = Af(68, 68, 0, Ⲇⵠ[437], 3);
    this.ⲆΔⲆ[27].id = 27;
    this.ⲆΔⲆ[28] = Af(68, 68, 0, Ⲇⵠ[440], 3);
    this.ⲆΔⲆ[28].id = 28;
    this.ⲆΔⲆ[120] = Af(68, 68, 0, Ⲇⵠ[443], 3);
    this.ⲆΔⲆ[120].id = 120;
    this.ⲆΔⲆ[29] = Af(68, 68, 0, Ⲇⵠ[385], 3);
    this.ⲆΔⲆ[29].id = 29;
    this.ⲆΔⲆ[121] = Af(68, 68, 0, Ⲇⵠ[446], 3);
    this.ⲆΔⲆ[121].id = 121;
    this.ⲆΔⲆ[30] = Af(68, 68, 0, Ⲇⵠ[457], 3);
    this.ⲆΔⲆ[30].id = 30;
    this.ⲆΔⲆ[9] = Af(68, 68, 0, Ⲇⵠ[862], 3);
    this.ⲆΔⲆ[9].id = 9;
    this.ⲆΔⲆ[31] = Af(68, 68, 0, Ⲇⵠ[459], 3);
    this.ⲆΔⲆ[31].id = 31;
    this.ⲆΔⲆ[32] = Af(68, 68, 0, Ⲇⵠ[1018], 3);
    this.ⲆΔⲆ[32].id = 32;
    this.ⲆΔⲆ[33] = Af(68, 68, 0, Ⲇⵠ[474], 3);
    this.ⲆΔⲆ[33].id = 33;
    this.ⲆΔⲆ[35] = Af(68, 68, 0, Ⲇⵠ[479], 3);
    this.ⲆΔⲆ[35].id = 35;
    this.ⲆΔⲆ[36] = Af(68, 68, 0, Ⲇⵠ[482], 3);
    this.ⲆΔⲆ[36].id = 36;
    this.ⲆΔⲆ[37] = Af(68, 68, 0, Ⲇⵠ[485], 3);
    this.ⲆΔⲆ[37].id = 37;
    this.ⲆΔⲆ[38] = Af(68, 68, 0, Ⲇⵠ[488], 3);
    this.ⲆΔⲆ[38].id = 38;
    this.ⲆΔⲆ[39] = Af(68, 68, 0, Ⲇⵠ[491], 3);
    this.ⲆΔⲆ[39].id = 39;
    this.ⲆΔⲆ[122] = Af(68, 68, 0, Ⲇⵠ[494], 3);
    this.ⲆΔⲆ[122].id = 122;
    this.ⲆΔⲆ[123] = Af(68, 68, 0, Ⲇⵠ[497], 3);
    this.ⲆΔⲆ[123].id = 123;
    this.ⲆΔⲆ[124] = Af(68, 68, 0, Ⲇⵠ[501], 3);
    this.ⲆΔⲆ[124].id = 124;
    this.ⲆΔⲆ[40] = Af(68, 68, 0, Ⲇⵠ[504], 3);
    this.ⲆΔⲆ[40].id = 40;
    this.ⲆΔⲆ[146] = Af(68, 68, 0, Ⲇⵠ[506], 3);
    this.ⲆΔⲆ[146].id = 146;
    this.ⲆΔⲆ[240] = Af(68, 68, 0, Ⲇⵠ[1234], 3);
    this.ⲆΔⲆ[240].id = 240;
    this.ⲆΔⲆ[147] = Af(68, 68, 0, Ⲇⵠ[514], 3);
    this.ⲆΔⲆ[147].id = 147;
    this.ⲆΔⲆ[148] = Af(68, 68, 0, Ⲇⵠ[520], 3);
    this.ⲆΔⲆ[148].id = 148;
    this.ⲆΔⲆ[149] = Af(68, 68, 0, Ⲇⵠ[522], 3);
    this.ⲆΔⲆ[149].id = 149;
    this.ⲆΔⲆ[150] = Af(68, 68, 0, Ⲇⵠ[524], 3);
    this.ⲆΔⲆ[150].id = 150;
    this.ⲆΔⲆ[151] = Af(68, 68, 0, Ⲇⵠ[531], 3);
    this.ⲆΔⲆ[151].id = 151;
    this.ⲆΔⲆ[158] = Af(68, 68, 0, Ⲇⵠ[534], 3);
    this.ⲆΔⲆ[158].id = 158;
    this.ⲆΔⲆ[159] = Af(68, 68, 0, Ⲇⵠ[554], 3);
    this.ⲆΔⲆ[159].id = 159;
    this.ⲆΔⲆ[43] = Af(68, 68, 0, Ⲇⵠ[543], 3);
    this.ⲆΔⲆ[43].id = 43;
    this.ⲆΔⲆ[45] = Af(68, 68, 0, Ⲇⵠ[552], 3);
    this.ⲆΔⲆ[45].id = 45;
    this.ⲆΔⲆ[125] = Af(68, 68, 0, Ⲇⵠ[606], 3);
    this.ⲆΔⲆ[125].id = 125;
    this.ⲆΔⲆ[221] = Af(68, 68, 0, Ⲇⵠ[1237], 3);
    this.ⲆΔⲆ[221].id = 221;
    this.ⲆΔⲆ[223] = Af(68, 68, 0, Ⲇⵠ[1029], 3);
    this.ⲆΔⲆ[223].id = 223;
    this.ⲆΔⲆ[224] = Af(68, 68, 0, Ⲇⵠ[1032], 3);
    this.ⲆΔⲆ[224].id = 224;
    this.ⲆΔⲆ[230] = Af(68, 68, 0, Ⲇⵠ[1118], 3);
    this.ⲆΔⲆ[230].id = 230;
    this.ⲆΔⲆ[89] = Af(68, 68, 0, Ⲇⵠ[1047], 3);
    this.ⲆΔⲆ[89].id = 89;
    this.ⲆΔⲆ[225] = Af(68, 68, 0, Ⲇⵠ[1050], 3);
    this.ⲆΔⲆ[225].id = 225;
    this.ⲆΔⲆ[227] = Af(68, 68, 0, Ⲇⵠ[1081], 3);
    this.ⲆΔⲆ[227].id = 227;
    this.ⲆΔⲆ[239] = Af(68, 68, 0, Ⲇⵠ[1225], 3);
    this.ⲆΔⲆ[239].id = 239;
    this.ⲆΔⲆ[228] = Af(68, 68, 0, Ⲇⵠ[1096], 3);
    this.ⲆΔⲆ[228].id = 228;
    this.ⲆΔⲆ[229] = Af(68, 68, 0, Ⲇⵠ[1111], 3);
    this.ⲆΔⲆ[229].id = 229;
    this.ⲆΔⲆ[226] = Af(68, 68, 0, Ⲇⵠ[1190], 3);
    this.ⲆΔⲆ[226].id = 226;
    this.ⲆΔⲆ[126] = Af(68, 68, 0, Ⲇⵠ[610], 3);
    this.ⲆΔⲆ[126].id = 126;
    this.ⲆΔⲆ[127] = Af(68, 68, 0, Ⲇⵠ[615], 3);
    this.ⲆΔⲆ[127].id = 127;
    this.ⲆΔⲆ[128] = Af(68, 68, 0, Ⲇⵠ[614], 3);
    this.ⲆΔⲆ[128].id = 128;
    this.ⲆΔⲆ[46] = Af(68, 68, 0, Ⲇⵠ[617], 3);
    this.ⲆΔⲆ[46].id = 46;
    this.ⲆΔⲆ[50] = Af(68, 68, 0, Ⲇⵠ[701], 3);
    this.ⲆΔⲆ[50].id = 50;
    this.ⲆΔⲆ[51] = Af(68, 68, 0, Ⲇⵠ[703], 3);
    this.ⲆΔⲆ[51].id = 51;
    this.ⲆΔⲆ[52] = Af(68, 68, 0, Ⲇⵠ[707], 3);
    this.ⲆΔⲆ[52].id = 52;
    this.ⲆΔⲆ[55] = Af(68, 68, 0, Ⲇⵠ[710], 3);
    this.ⲆΔⲆ[55].id = 55;
    this.ⲆΔⲆ[129] = Af(68, 68, 0, Ⲇⵠ[625], 3);
    this.ⲆΔⲆ[129].id = 129;
    this.ⲆΔⲆ[130] = Af(68, 68, 0, Ⲇⵠ[628], 3);
    this.ⲆΔⲆ[130].id = 130;
    this.ⲆΔⲆ[131] = Af(68, 68, 0, Ⲇⵠ[630], 3);
    this.ⲆΔⲆ[131].id = 131;
    this.ⲆΔⲆ[132] = Af(68, 68, 0, Ⲇⵠ[633], 3);
    this.ⲆΔⲆ[132].id = 132;
    this.ⲆΔⲆ[133] = Af(68, 68, 0, Ⲇⵠ[636], 3);
    this.ⲆΔⲆ[133].id = 133;
    this.ⲆΔⲆ[134] = Af(68, 68, 0, Ⲇⵠ[640], 3);
    this.ⲆΔⲆ[134].id = 134;
    this.ⲆΔⲆ[135] = Af(68, 68, 0, Ⲇⵠ[645], 3);
    this.ⲆΔⲆ[135].id = 135;
    this.ⲆΔⲆ[47] = Af(68, 68, 0, Ⲇⵠ[648], 3);
    this.ⲆΔⲆ[47].id = 47;
    this.ⲆΔⲆ[48] = Af(68, 68, 0, Ⲇⵠ[651], 3);
    this.ⲆΔⲆ[48].id = 48;
    this.ⲆΔⲆ[49] = Af(68, 68, 0, Ⲇⵠ[653], 3);
    this.ⲆΔⲆ[49].id = 49;
    this.ⲆΔⲆ[136] = Af(68, 68, 0, Ⲇⵠ[661], 3);
    this.ⲆΔⲆ[136].id = 136;
    this.ⲆΔⲆ[143] = Af(68, 68, 0, Ⲇⵠ[689], 3);
    this.ⲆΔⲆ[143].id = 143;
    this.ⲆΔⲆ[137] = Af(68, 68, 0, Ⲇⵠ[663], 3);
    this.ⲆΔⲆ[137].id = 137;
    this.ⲆΔⲆ[138] = Af(68, 68, 0, Ⲇⵠ[665], 3);
    this.ⲆΔⲆ[138].id = 138;
    this.ⲆΔⲆ[139] = Af(68, 68, 0, Ⲇⵠ[675], 3);
    this.ⲆΔⲆ[139].id = 139;
    this.ⲆΔⲆ[140] = Af(68, 68, 0, Ⲇⵠ[682], 3);
    this.ⲆΔⲆ[140].id = 140;
    this.ⲆΔⲆ[141] = Af(68, 68, 0, Ⲇⵠ[683], 3);
    this.ⲆΔⲆ[141].id = 141;
    this.ⲆΔⲆ[142] = Af(68, 68, 0, Ⲇⵠ[686], 3);
    this.ⲆΔⲆ[142].id = 142;
    this.ⲆΔⲆ[144] = Af(68, 68, 0, Ⲇⵠ[719], 3);
    this.ⲆΔⲆ[144].id = 144;
    this.ⲆΔⲆ[145] = Af(68, 68, 0, Ⲇⵠ[731], 3);
    this.ⲆΔⲆ[145].id = 145;
    this.ⲆΔⲆ[59] = Af(68, 68, 0, Ⲇⵠ[733], 3);
    this.ⲆΔⲆ[59].id = 59;
    this.ⲆΔⲆ[62] = Af(68, 68, 0, Ⲇⵠ[565], 3);
    this.ⲆΔⲆ[62].id = 62;
    this.ⲆΔⲆ[185] = Af(68, 68, 0, Ⲇⵠ[590], 3);
    this.ⲆΔⲆ[185].id = 185;
    this.ⲆΔⲆ[184] = Af(68, 68, 0, Ⲇⵠ[752], 3);
    this.ⲆΔⲆ[184].id = 184;
    this.ⲆΔⲆ[187] = Af(68, 68, 0, Ⲇⵠ[591], 3);
    this.ⲆΔⲆ[187].id = 187;
    this.ⲆΔⲆ[186] = Af(68, 68, 0, Ⲇⵠ[754], 3);
    this.ⲆΔⲆ[186].id = 186;
    this.ⲆΔⲆ[77] = Af(68, 68, 0, Ⲇⵠ[757], 3);
    this.ⲆΔⲆ[77].id = 77;
    this.ⲆΔⲆ[175] = Af(68, 68, 0, Ⲇⵠ[759], 3);
    this.ⲆΔⲆ[175].id = 175;
    this.ⲆΔⲆ[176] = Af(68, 68, 0, Ⲇⵠ[763], 3);
    this.ⲆΔⲆ[176].id = 176;
    this.ⲆΔⲆ[78] = Af(68, 68, 0, Ⲇⵠ[761], 3);
    this.ⲆΔⲆ[78].id = 78;
    this.ⲆΔⲆ[177] = Af(68, 68, 0, Ⲇⵠ[766], 3);
    this.ⲆΔⲆ[177].id = 177;
    this.ⲆΔⲆ[79] = Af(68, 68, 0, Ⲇⵠ[765], 3);
    this.ⲆΔⲆ[79].id = 79;
    this.ⲆΔⲆ[83] = Af(68, 68, 0, Ⲇⵠ[769], 3);
    this.ⲆΔⲆ[83].id = 83;
    this.ⲆΔⲆ[84] = Af(68, 68, 0, Ⲇⵠ[773], 3);
    this.ⲆΔⲆ[84].id = 84;
    this.ⲆΔⲆ[178] = Af(68, 68, 0, Ⲇⵠ[774], 3);
    this.ⲆΔⲆ[178].id = 178;
    this.ⲆΔⲆ[179] = Af(68, 68, 0, Ⲇⵠ[775], 3);
    this.ⲆΔⲆ[179].id = 179;
    this.ⲆΔⲆ[86] = Af(68, 68, 0, Ⲇⵠ[778], 3);
    this.ⲆΔⲆ[86].id = 86;
    this.ⲆΔⲆ[85] = Af(68, 68, 0, Ⲇⵠ[781], 3);
    this.ⲆΔⲆ[85].id = 85;
    this.ⲆΔⲆ[180] = Af(68, 68, 0, Ⲇⵠ[786], 3);
    this.ⲆΔⲆ[180].id = 180;
    this.ⲆΔⲆ[181] = Af(68, 68, 0, Ⲇⵠ[787], 3);
    this.ⲆΔⲆ[181].id = 181;
    this.ⲆΔⲆ[182] = Af(68, 68, 0, Ⲇⵠ[790], 3);
    this.ⲆΔⲆ[182].id = 182;
    this.ⲆΔⲆ[183] = Af(68, 68, 0, Ⲇⵠ[801], 3);
    this.ⲆΔⲆ[183].id = 183;
    this.ⲆΔⲆ[188] = Af(68, 68, 0, Ⲇⵠ[810], 3);
    this.ⲆΔⲆ[188].id = 188;
    this.ⲆΔⲆ[189] = Af(68, 68, 0, Ⲇⵠ[815], 3);
    this.ⲆΔⲆ[189].id = 189;
    this.ⲆΔⲆ[190] = Af(68, 68, 0, Ⲇⵠ[844], 3);
    this.ⲆΔⲆ[190].id = 190;
    this.ⲆΔⲆ[191] = Af(68, 68, 0, Ⲇⵠ[836], 3);
    this.ⲆΔⲆ[191].id = 191;
    this.ⲆΔⲆ[192] = Af(68, 68, 0, Ⲇⵠ[841], 3);
    this.ⲆΔⲆ[192].id = 192;
    this.ⲆΔⲆ[193] = Af(68, 68, 0, Ⲇⵠ[847], 3);
    this.ⲆΔⲆ[193].id = 193;
    this.ⲆΔⲆ[194] = Af(68, 68, 0, Ⲇⵠ[851], 3);
    this.ⲆΔⲆ[194].id = 194;
    this.ⲆΔⲆ[206] = Af(68, 68, 0, Ⲇⵠ[961], 3);
    this.ⲆΔⲆ[206].id = 206;
    this.ⲆΔⲆ[207] = Af(68, 68, 0, Ⲇⵠ[974], 3);
    this.ⲆΔⲆ[207].id = 207;
    this.ⲆΔⲆ[204] = Af(68, 68, 0, Ⲇⵠ[951], 3);
    this.ⲆΔⲆ[204].id = 204;
    this.ⲆΔⲆ[205] = Af(68, 68, 0, Ⲇⵠ[956], 3);
    this.ⲆΔⲆ[205].id = 205;
    this.ⲆΔⲆ[208] = Af(68, 68, 0, Ⲇⵠ[968], 3);
    this.ⲆΔⲆ[208].id = 208;
    this.ⲆΔⲆ[209] = Af(68, 68, 0, Ⲇⵠ[973], 3);
    this.ⲆΔⲆ[209].id = 209;
    this.ⲆΔⲆ[210] = Af(68, 68, 0, Ⲇⵠ[983], 3);
    this.ⲆΔⲆ[210].id = 210;
    this.ⲆΔⲆ[211] = Af(68, 68, 0, Ⲇⵠ[988], 3);
    this.ⲆΔⲆ[211].id = 211;
    this.ⲆΔⲆ[41] = Af(68, 68, 0, Ⲇⵠ[881], 3);
    this.ⲆΔⲆ[41].id = 41;
    this.ⲆΔⲆ[42] = Af(68, 68, 0, Ⲇⵠ[883], 3);
    this.ⲆΔⲆ[42].id = 42;
    this.ⲆΔⲆ[12] = Af(68, 68, 0, Ⲇⵠ[403], 3);
    this.ⲆΔⲆ[12].id = 12;
    this.ⲆΔⲆ[16] = Af(68, 68, 0, Ⲇⵠ[875], 3);
    this.ⲆΔⲆ[16].id = 16;
    this.ⲆΔⲆ[196] = Af(68, 68, 0, Ⲇⵠ[898], 3);
    this.ⲆΔⲆ[196].id = 196;
    this.ⲆΔⲆ[18] = Af(68, 68, 0, Ⲇⵠ[899], 3);
    this.ⲆΔⲆ[18].id = 18;
    this.ⲆΔⲆ[197] = Af(68, 68, 0, Ⲇⵠ[906], 3);
    this.ⲆΔⲆ[197].id = 197;
    this.ⲆΔⲆ[198] = Af(68, 68, 0, Ⲇⵠ[908], 3);
    this.ⲆΔⲆ[198].id = 198;
    this.ⲆΔⲆ[61] = Af(68, 68, 0, Ⲇⵠ[911], 3);
    this.ⲆΔⲆ[61].id = 61;
    this.ⲆΔⲆ[201] = Af(68, 68, 0, Ⲇⵠ[871], 3);
    this.ⲆΔⲆ[201].id = 201;
    this.ⲆΔⲆ[199] = Af(68, 68, 0, Ⲇⵠ[863], 3);
    this.ⲆΔⲆ[199].id = 199;
    this.ⲆΔⲆ[200] = Af(68, 68, 0, Ⲇⵠ[868], 3);
    this.ⲆΔⲆ[200].id = 200;
    this.ⵠⵠⲆΔⲆ = [];
    for (k = 0; k < 250; k++) {
      this.ⵠⵠⲆΔⲆ[k] = Af(0, 0, 0, Ⲇⵠ[366]);
    }
    this.ⵠᐃᐃ = [];
    this.ⵠᐃᐃ[0] = Af(60, 60, 0, Ⲇⵠ[261], 3);
    this.ⵠᐃᐃ[0].id = 0;
    this.ⵠᐃᐃ[1] = Af(60, 60, 0, Ⲇⵠ[312], 3);
    this.ⵠᐃᐃ[1].id = 1;
    this.ⵠᐃᐃ[108] = Af(60, 60, 0, Ⲇⵠ[315], 3);
    this.ⵠᐃᐃ[108].id = 108;
    this.ⵠᐃᐃ[108].info.ⵠᐃ[2] = this.ⵠᐃᐃ[108].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[109] = Af(60, 60, 0, Ⲇⵠ[316], 3);
    this.ⵠᐃᐃ[109].id = 109;
    this.ⵠᐃᐃ[109].info.ⵠᐃ[2] = this.ⵠᐃᐃ[109].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[110] = Af(60, 60, 0, Ⲇⵠ[277], 3);
    this.ⵠᐃᐃ[110].id = 110;
    this.ⵠᐃᐃ[233] = Af(60, 60, 0, Ⲇⵠ[1154], 3);
    this.ⵠᐃᐃ[233].id = 233;
    this.ⵠᐃᐃ[111] = Af(60, 60, 0, Ⲇⵠ[297], 3);
    this.ⵠᐃᐃ[111].id = 111;
    this.ⵠᐃᐃ[111].info.ⵠᐃ[2] = this.ⵠᐃᐃ[111].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[112] = Af(60, 60, 0, Ⲇⵠ[298], 3);
    this.ⵠᐃᐃ[112].id = 112;
    this.ⵠᐃᐃ[112].info.ⵠᐃ[2] = this.ⵠᐃᐃ[112].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[3] = Af(60, 60, 0, Ⲇⵠ[258], 3);
    this.ⵠᐃᐃ[3].id = 3;
    this.ⵠᐃᐃ[4] = Af(60, 60, 0, Ⲇⵠ[296], 3);
    this.ⵠᐃᐃ[4].id = 4;
    this.ⵠᐃᐃ[5] = Af(60, 60, 0, Ⲇⵠ[292], 3);
    this.ⵠᐃᐃ[5].id = 5;
    this.ⵠᐃᐃ[57] = Af(60, 60, 0, Ⲇⵠ[829], 3);
    this.ⵠᐃᐃ[57].id = 57;
    this.ⵠᐃᐃ[6] = Af(60, 60, 0, Ⲇⵠ[293], 3);
    this.ⵠᐃᐃ[6].id = 6;
    this.ⵠᐃᐃ[113] = Af(60, 60, 0, Ⲇⵠ[309], 3);
    this.ⵠᐃᐃ[113].id = 113;
    this.ⵠᐃᐃ[114] = Af(60, 60, 0, Ⲇⵠ[310], 3);
    this.ⵠᐃᐃ[114].id = 114;
    this.ⵠᐃᐃ[115] = Af(60, 60, 0, Ⲇⵠ[311], 3);
    this.ⵠᐃᐃ[115].id = 115;
    this.ⵠᐃᐃ[162] = Af(60, 60, 0, Ⲇⵠ[317], 3);
    this.ⵠᐃᐃ[162].id = 162;
    this.ⵠᐃᐃ[160] = Af(60, 60, 0, Ⲇⵠ[319], 3);
    this.ⵠᐃᐃ[160].id = 160;
    this.ⵠᐃᐃ[8] = Af(60, 60, 0, Ⲇⵠ[313], 3);
    this.ⵠᐃᐃ[8].id = 8;
    this.ⵠᐃᐃ[117] = Af(60, 60, 0, Ⲇⵠ[323], 3);
    this.ⵠᐃᐃ[117].id = 117;
    this.ⵠᐃᐃ[116] = Af(60, 60, 0, Ⲇⵠ[300], 3);
    this.ⵠᐃᐃ[116].id = 116;
    this.ⵠᐃᐃ[118] = Af(60, 60, 0, Ⲇⵠ[328], 3);
    this.ⵠᐃᐃ[118].id = 118;
    this.ⵠᐃᐃ[195] = Af(60, 60, 0, Ⲇⵠ[303], 3);
    this.ⵠᐃᐃ[195].id = 195;
    this.ⵠᐃᐃ[161] = Af(60, 60, 0, Ⲇⵠ[305], 3);
    this.ⵠᐃᐃ[161].id = 161;
    this.ⵠᐃᐃ[161].info.ⵠᐃ[2] = this.ⵠᐃᐃ[161].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[163] = Af(60, 60, 0, Ⲇⵠ[329], 3);
    this.ⵠᐃᐃ[163].id = 163;
    this.ⵠᐃᐃ[164] = Af(60, 60, 0, Ⲇⵠ[330], 3);
    this.ⵠᐃᐃ[164].id = 164;
    this.ⵠᐃᐃ[165] = Af(60, 60, 0, Ⲇⵠ[331], 3);
    this.ⵠᐃᐃ[165].id = 165;
    this.ⵠᐃᐃ[166] = Af(60, 60, 0, Ⲇⵠ[335], 3);
    this.ⵠᐃᐃ[166].id = 166;
    this.ⵠᐃᐃ[167] = Af(60, 60, 0, Ⲇⵠ[337], 3);
    this.ⵠᐃᐃ[167].id = 167;
    this.ⵠᐃᐃ[168] = Af(60, 60, 0, Ⲇⵠ[361], 3);
    this.ⵠᐃᐃ[168].id = 168;
    this.ⵠᐃᐃ[169] = Af(60, 60, 0, Ⲇⵠ[362], 3);
    this.ⵠᐃᐃ[169].id = 169;
    this.ⵠᐃᐃ[170] = Af(60, 60, 0, Ⲇⵠ[364], 3);
    this.ⵠᐃᐃ[170].id = 170;
    this.ⵠᐃᐃ[29] = Af(60, 60, 0, Ⲇⵠ[392], 3);
    this.ⵠᐃᐃ[29].id = 29;
    this.ⵠᐃᐃ[10] = Af(60, 60, 0, Ⲇⵠ[369], 3);
    this.ⵠᐃᐃ[10].id = 10;
    this.ⵠᐃᐃ[171] = Af(60, 60, 0, Ⲇⵠ[372], 3);
    this.ⵠᐃᐃ[171].id = 171;
    this.ⵠᐃᐃ[172] = Af(60, 60, 0, Ⲇⵠ[375], 3);
    this.ⵠᐃᐃ[172].id = 172;
    this.ⵠᐃᐃ[173] = Af(60, 60, 0, Ⲇⵠ[378], 3);
    this.ⵠᐃᐃ[173].id = 173;
    this.ⵠᐃᐃ[2] = Af(60, 60, 0, Ⲇⵠ[368], 3);
    this.ⵠᐃᐃ[2].id = 2;
    this.ⵠᐃᐃ[2].info.ⵠᐃ[2] = this.ⵠᐃᐃ[2].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[237] = Af(60, 60, 0, Ⲇⵠ[1162], 3);
    this.ⵠᐃᐃ[237].id = 237;
    this.ⵠᐃᐃ[237].info.ⵠᐃ[2] = this.ⵠᐃᐃ[237].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[174] = Af(60, 60, 0, Ⲇⵠ[393], 3);
    this.ⵠᐃᐃ[174].id = 174;
    this.ⵠᐃᐃ[174].info.ⵠᐃ[2] = this.ⵠᐃᐃ[174].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[222] = Af(60, 60, 0, Ⲇⵠ[1035], 3);
    this.ⵠᐃᐃ[222].id = 222;
    this.ⵠᐃᐃ[231] = Af(60, 60, 0, Ⲇⵠ[1037], 3);
    this.ⵠᐃᐃ[231].id = 231;
    this.ⵠᐃᐃ[232] = Af(60, 60, 0, Ⲇⵠ[1039], 3);
    this.ⵠᐃᐃ[232].id = 232;
    this.ⵠᐃᐃ[234] = Af(60, 60, 0, Ⲇⵠ[1156], 3);
    this.ⵠᐃᐃ[234].id = 234;
    this.ⵠᐃᐃ[10] = Af(60, 60, 0, Ⲇⵠ[369], 3);
    this.ⵠᐃᐃ[10].id = 10;
    this.ⵠᐃᐃ[11] = Af(60, 60, 0, Ⲇⵠ[381], 3);
    this.ⵠᐃᐃ[11].id = 11;
    this.ⵠᐃᐃ[12] = Af(60, 60, 0, Ⲇⵠ[401], 3);
    this.ⵠᐃᐃ[12].id = 12;
    this.ⵠᐃᐃ[13] = Af(60, 60, 0, Ⲇⵠ[395], 3);
    this.ⵠᐃᐃ[13].id = 13;
    this.ⵠᐃᐃ[14] = Af(60, 60, 0, Ⲇⵠ[398], 3);
    this.ⵠᐃᐃ[14].id = 14;
    this.ⵠᐃᐃ[15] = Af(60, 60, 0, Ⲇⵠ[404], 3);
    this.ⵠᐃᐃ[15].id = 15;
    this.ⵠᐃᐃ[16] = Af(60, 60, 0, Ⲇⵠ[874], 3);
    this.ⵠᐃᐃ[16].id = 16;
    this.ⵠᐃᐃ[119] = Af(60, 60, 0, Ⲇⵠ[408], 3);
    this.ⵠᐃᐃ[119].id = 119;
    this.ⵠᐃᐃ[23] = Af(60, 60, 0, Ⲇⵠ[420], 3);
    this.ⵠᐃᐃ[23].id = 23;
    this.ⵠᐃᐃ[24] = Af(60, 60, 0, Ⲇⵠ[423], 3);
    this.ⵠᐃᐃ[24].id = 24;
    this.ⵠᐃᐃ[87] = Af(60, 60, 0, Ⲇⵠ[1227], 3);
    this.ⵠᐃᐃ[87].id = 87;
    this.ⵠᐃᐃ[88] = Af(60, 60, 0, Ⲇⵠ[1230], 3);
    this.ⵠᐃᐃ[88].id = 88;
    this.ⵠᐃᐃ[80] = Af(60, 60, 0, Ⲇⵠ[1137], 3);
    this.ⵠᐃᐃ[80].id = 80;
    this.ⵠᐃᐃ[81] = Af(60, 60, 0, Ⲇⵠ[1140], 3);
    this.ⵠᐃᐃ[81].id = 81;
    this.ⵠᐃᐃ[64] = Af(60, 60, 0, Ⲇⵠ[569], 3);
    this.ⵠᐃᐃ[64].id = 64;
    this.ⵠᐃᐃ[101] = Af(60, 60, 0, Ⲇⵠ[1166], 3);
    this.ⵠᐃᐃ[101].id = 101;
    this.ⵠᐃᐃ[71] = Af(60, 60, 0, Ⲇⵠ[1239], 3);
    this.ⵠᐃᐃ[71].id = 71;
    this.ⵠᐃᐃ[65] = Af(60, 60, 0, Ⲇⵠ[572], 3);
    this.ⵠᐃᐃ[65].id = 65;
    this.ⵠᐃᐃ[102] = Af(60, 60, 0, Ⲇⵠ[1169], 3);
    this.ⵠᐃᐃ[102].id = 102;
    this.ⵠᐃᐃ[72] = Af(60, 60, 0, Ⲇⵠ[1242], 3);
    this.ⵠᐃᐃ[72].id = 72;
    this.ⵠᐃᐃ[66] = Af(60, 60, 0, Ⲇⵠ[575], 3);
    this.ⵠᐃᐃ[66].id = 66;
    this.ⵠᐃᐃ[103] = Af(60, 60, 0, Ⲇⵠ[1172], 3);
    this.ⵠᐃᐃ[103].id = 103;
    this.ⵠᐃᐃ[73] = Af(60, 60, 0, Ⲇⵠ[1245], 3);
    this.ⵠᐃᐃ[73].id = 73;
    this.ⵠᐃᐃ[67] = Af(60, 60, 0, Ⲇⵠ[578], 3);
    this.ⵠᐃᐃ[67].id = 67;
    this.ⵠᐃᐃ[104] = Af(60, 60, 0, Ⲇⵠ[1175], 3);
    this.ⵠᐃᐃ[104].id = 104;
    this.ⵠᐃᐃ[74] = Af(60, 60, 0, Ⲇⵠ[1248], 3);
    this.ⵠᐃᐃ[74].id = 74;
    this.ⵠᐃᐃ[68] = Af(60, 60, 0, Ⲇⵠ[581], 3);
    this.ⵠᐃᐃ[68].id = 68;
    this.ⵠᐃᐃ[105] = Af(60, 60, 0, Ⲇⵠ[1178], 3);
    this.ⵠᐃᐃ[105].id = 105;
    this.ⵠᐃᐃ[75] = Af(60, 60, 0, Ⲇⵠ[1251], 3);
    this.ⵠᐃᐃ[75].id = 75;
    this.ⵠᐃᐃ[69] = Af(60, 60, 0, Ⲇⵠ[584], 3);
    this.ⵠᐃᐃ[69].id = 69;
    this.ⵠᐃᐃ[106] = Af(60, 60, 0, Ⲇⵠ[1181], 3);
    this.ⵠᐃᐃ[106].id = 106;
    this.ⵠᐃᐃ[76] = Af(60, 60, 0, Ⲇⵠ[1254], 3);
    this.ⵠᐃᐃ[76].id = 76;
    this.ⵠᐃᐃ[70] = Af(60, 60, 0, Ⲇⵠ[587], 3);
    this.ⵠᐃᐃ[70].id = 70;
    this.ⵠᐃᐃ[107] = Af(60, 60, 0, Ⲇⵠ[1184], 3);
    this.ⵠᐃᐃ[107].id = 107;
    this.ⵠᐃᐃ[94] = Af(60, 60, 0, Ⲇⵠ[1257], 3);
    this.ⵠᐃᐃ[94].id = 94;
    this.ⵠᐃᐃ[95] = Af(60, 60, 0, Ⲇⵠ[1260], 3);
    this.ⵠᐃᐃ[95].id = 95;
    this.ⵠᐃᐃ[96] = Af(60, 60, 0, Ⲇⵠ[1263], 3);
    this.ⵠᐃᐃ[96].id = 96;
    this.ⵠᐃᐃ[97] = Af(60, 60, 0, Ⲇⵠ[1266], 3);
    this.ⵠᐃᐃ[97].id = 97;
    this.ⵠᐃᐃ[98] = Af(60, 60, 0, Ⲇⵠ[1269], 3);
    this.ⵠᐃᐃ[98].id = 98;
    this.ⵠᐃᐃ[99] = Af(60, 60, 0, Ⲇⵠ[1272], 3);
    this.ⵠᐃᐃ[99].id = 99;
    this.ⵠᐃᐃ[58] = Af(60, 60, 0, Ⲇⵠ[826], 3);
    this.ⵠᐃᐃ[58].id = 58;
    this.ⵠᐃᐃ[25] = Af(60, 60, 0, Ⲇⵠ[429], 3);
    this.ⵠᐃᐃ[25].id = 25;
    this.ⵠᐃᐃ[26] = Af(60, 60, 0, Ⲇⵠ[432], 3);
    this.ⵠᐃᐃ[26].id = 26;
    this.ⵠᐃᐃ[27] = Af(60, 60, 0, Ⲇⵠ[435], 3);
    this.ⵠᐃᐃ[27].id = 27;
    this.ⵠᐃᐃ[28] = Af(60, 60, 0, Ⲇⵠ[438], 3);
    this.ⵠᐃᐃ[28].id = 28;
    this.ⵠᐃᐃ[120] = Af(60, 60, 0, Ⲇⵠ[441], 3);
    this.ⵠᐃᐃ[120].id = 120;
    this.ⵠᐃᐃ[120].info.ⵠᐃ[2] = this.ⵠᐃᐃ[120].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[29] = Af(60, 60, 0, Ⲇⵠ[392], 3);
    this.ⵠᐃᐃ[29].id = 29;
    this.ⵠᐃᐃ[121] = Af(60, 60, 0, Ⲇⵠ[418], 3);
    this.ⵠᐃᐃ[121].id = 121;
    this.ⵠᐃᐃ[121].info.ⵠᐃ[2] = this.ⵠᐃᐃ[121].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[30] = Af(60, 60, 0, Ⲇⵠ[455], 3);
    this.ⵠᐃᐃ[30].id = 30;
    this.ⵠᐃᐃ[9] = Af(60, 60, 0, Ⲇⵠ[860], 3);
    this.ⵠᐃᐃ[9].id = 9;
    this.ⵠᐃᐃ[31] = Af(60, 60, 0, Ⲇⵠ[458], 3);
    this.ⵠᐃᐃ[31].id = 31;
    this.ⵠᐃᐃ[32] = Af(60, 60, 0, Ⲇⵠ[1017], 3);
    this.ⵠᐃᐃ[32].id = 32;
    this.ⵠᐃᐃ[33] = Af(60, 60, 0, Ⲇⵠ[472], 3);
    this.ⵠᐃᐃ[33].id = 33;
    this.ⵠᐃᐃ[35] = Af(60, 60, 0, Ⲇⵠ[477], 3);
    this.ⵠᐃᐃ[35].id = 35;
    this.ⵠᐃᐃ[36] = Af(60, 60, 0, Ⲇⵠ[480], 3);
    this.ⵠᐃᐃ[36].id = 36;
    this.ⵠᐃᐃ[37] = Af(60, 60, 0, Ⲇⵠ[483], 3);
    this.ⵠᐃᐃ[37].id = 37;
    this.ⵠᐃᐃ[38] = Af(60, 60, 0, Ⲇⵠ[486], 3);
    this.ⵠᐃᐃ[38].id = 38;
    this.ⵠᐃᐃ[39] = Af(60, 60, 0, Ⲇⵠ[489], 3);
    this.ⵠᐃᐃ[39].id = 39;
    this.ⵠᐃᐃ[122] = Af(60, 60, 0, Ⲇⵠ[492], 3);
    this.ⵠᐃᐃ[122].id = 122;
    this.ⵠᐃᐃ[123] = Af(60, 60, 0, Ⲇⵠ[495], 3);
    this.ⵠᐃᐃ[123].id = 123;
    this.ⵠᐃᐃ[124] = Af(60, 60, 0, Ⲇⵠ[499], 3);
    this.ⵠᐃᐃ[124].id = 124;
    this.ⵠᐃᐃ[40] = Af(60, 60, 0, Ⲇⵠ[502], 3);
    this.ⵠᐃᐃ[40].id = 40;
    this.ⵠᐃᐃ[146] = Af(60, 60, 0, Ⲇⵠ[505], 3);
    this.ⵠᐃᐃ[146].id = 146;
    this.ⵠᐃᐃ[146].info.ⵠᐃ[2] = this.ⵠᐃᐃ[146].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[240] = Af(60, 60, 0, Ⲇⵠ[1233], 3);
    this.ⵠᐃᐃ[240].id = 240;
    this.ⵠᐃᐃ[240].info.ⵠᐃ[2] = this.ⵠᐃᐃ[240].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[147] = Af(60, 60, 0, Ⲇⵠ[513], 3);
    this.ⵠᐃᐃ[147].id = 147;
    this.ⵠᐃᐃ[147].info.ⵠᐃ[2] = this.ⵠᐃᐃ[147].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[148] = Af(60, 60, 0, Ⲇⵠ[518], 3);
    this.ⵠᐃᐃ[148].id = 148;
    this.ⵠᐃᐃ[148].info.ⵠᐃ[2] = this.ⵠᐃᐃ[148].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[149] = Af(60, 60, 0, Ⲇⵠ[521], 3);
    this.ⵠᐃᐃ[149].id = 149;
    this.ⵠᐃᐃ[150] = Af(60, 60, 0, Ⲇⵠ[523], 3);
    this.ⵠᐃᐃ[150].id = 150;
    this.ⵠᐃᐃ[151] = Af(60, 60, 0, Ⲇⵠ[529], 3);
    this.ⵠᐃᐃ[151].id = 151;
    this.ⵠᐃᐃ[158] = Af(60, 60, 0, Ⲇⵠ[532], 3);
    this.ⵠᐃᐃ[158].id = 158;
    this.ⵠᐃᐃ[159] = Af(60, 60, 0, Ⲇⵠ[553], 3);
    this.ⵠᐃᐃ[159].id = 159;
    this.ⵠᐃᐃ[43] = Af(60, 60, 0, Ⲇⵠ[541], 3);
    this.ⵠᐃᐃ[43].id = 43;
    this.ⵠᐃᐃ[45] = Af(60, 60, 0, Ⲇⵠ[550], 3);
    this.ⵠᐃᐃ[45].id = 45;
    this.ⵠᐃᐃ[125] = Af(60, 60, 0, Ⲇⵠ[605], 3);
    this.ⵠᐃᐃ[125].id = 125;
    this.ⵠᐃᐃ[221] = Af(60, 60, 0, Ⲇⵠ[1236], 3);
    this.ⵠᐃᐃ[221].id = 221;
    this.ⵠᐃᐃ[223] = Af(60, 60, 0, Ⲇⵠ[1028], 3);
    this.ⵠᐃᐃ[223].id = 223;
    this.ⵠᐃᐃ[224] = Af(60, 60, 0, Ⲇⵠ[1031], 3);
    this.ⵠᐃᐃ[224].id = 224;
    this.ⵠᐃᐃ[230] = Af(60, 60, 0, Ⲇⵠ[1117], 3);
    this.ⵠᐃᐃ[230].id = 230;
    this.ⵠᐃᐃ[89] = Af(60, 60, 0, Ⲇⵠ[1046], 3);
    this.ⵠᐃᐃ[89].id = 89;
    this.ⵠᐃᐃ[225] = Af(60, 60, 0, Ⲇⵠ[1049], 3);
    this.ⵠᐃᐃ[225].id = 225;
    this.ⵠᐃᐃ[226] = Af(60, 60, 0, Ⲇⵠ[1189], 3);
    this.ⵠᐃᐃ[226].id = 226;
    this.ⵠᐃᐃ[227] = Af(60, 60, 0, Ⲇⵠ[1080], 3);
    this.ⵠᐃᐃ[227].id = 227;
    this.ⵠᐃᐃ[239] = Af(60, 60, 0, Ⲇⵠ[1224], 3);
    this.ⵠᐃᐃ[239].id = 239;
    this.ⵠᐃᐃ[228] = Af(60, 60, 0, Ⲇⵠ[1095], 3);
    this.ⵠᐃᐃ[228].id = 228;
    this.ⵠᐃᐃ[229] = Af(60, 60, 0, Ⲇⵠ[1110], 3);
    this.ⵠᐃᐃ[229].id = 229;
    this.ⵠᐃᐃ[126] = Af(60, 60, 0, Ⲇⵠ[609], 3);
    this.ⵠᐃᐃ[126].id = 126;
    this.ⵠᐃᐃ[126].info.ⵠᐃ[2] = this.ⵠᐃᐃ[126].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[127] = Af(60, 60, 0, Ⲇⵠ[613], 3);
    this.ⵠᐃᐃ[127].id = 127;
    this.ⵠᐃᐃ[128] = Af(60, 60, 0, Ⲇⵠ[612], 3);
    this.ⵠᐃᐃ[128].id = 128;
    this.ⵠᐃᐃ[46] = Af(60, 60, 0, Ⲇⵠ[616], 3);
    this.ⵠᐃᐃ[46].id = 46;
    this.ⵠᐃᐃ[50] = Af(60, 60, 0, Ⲇⵠ[699], 3);
    this.ⵠᐃᐃ[50].id = 50;
    this.ⵠᐃᐃ[51] = Af(60, 60, 0, Ⲇⵠ[702], 3);
    this.ⵠᐃᐃ[51].id = 51;
    this.ⵠᐃᐃ[52] = Af(60, 60, 0, Ⲇⵠ[705], 3);
    this.ⵠᐃᐃ[52].id = 52;
    this.ⵠᐃᐃ[55] = Af(60, 60, 0, Ⲇⵠ[709], 3);
    this.ⵠᐃᐃ[55].id = 55;
    this.ⵠᐃᐃ[129] = Af(60, 60, 0, Ⲇⵠ[624], 3);
    this.ⵠᐃᐃ[129].id = 129;
    this.ⵠᐃᐃ[129].info.ⵠᐃ[2] = this.ⵠᐃᐃ[129].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[130] = Af(60, 60, 0, Ⲇⵠ[626], 3);
    this.ⵠᐃᐃ[130].id = 130;
    this.ⵠᐃᐃ[131] = Af(60, 60, 0, Ⲇⵠ[629], 3);
    this.ⵠᐃᐃ[131].id = 131;
    this.ⵠᐃᐃ[131].info.ⵠᐃ[2] = this.ⵠᐃᐃ[131].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[132] = Af(60, 60, 0, Ⲇⵠ[631], 3);
    this.ⵠᐃᐃ[132].id = 132;
    this.ⵠᐃᐃ[133] = Af(60, 60, 0, Ⲇⵠ[634], 3);
    this.ⵠᐃᐃ[133].id = 133;
    this.ⵠᐃᐃ[134] = Af(60, 60, 0, Ⲇⵠ[639], 3);
    this.ⵠᐃᐃ[134].id = 134;
    this.ⵠᐃᐃ[134].info.ⵠᐃ[2] = this.ⵠᐃᐃ[134].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[135] = Af(60, 60, 0, Ⲇⵠ[644], 3);
    this.ⵠᐃᐃ[135].id = 135;
    this.ⵠᐃᐃ[47] = Af(60, 60, 0, Ⲇⵠ[646], 3);
    this.ⵠᐃᐃ[47].id = 47;
    this.ⵠᐃᐃ[48] = Af(60, 60, 0, Ⲇⵠ[649], 3);
    this.ⵠᐃᐃ[48].id = 48;
    this.ⵠᐃᐃ[49] = Af(60, 60, 0, Ⲇⵠ[652], 3);
    this.ⵠᐃᐃ[49].id = 49;
    this.ⵠᐃᐃ[136] = Af(60, 60, 0, Ⲇⵠ[659], 3);
    this.ⵠᐃᐃ[136].id = 136;
    this.ⵠᐃᐃ[143] = Af(60, 60, 0, Ⲇⵠ[143], 3);
    this.ⵠᐃᐃ[143].id = 143;
    this.ⵠᐃᐃ[137] = Af(60, 60, 0, Ⲇⵠ[662], 3);
    this.ⵠᐃᐃ[137].id = 137;
    this.ⵠᐃᐃ[138] = Af(60, 60, 0, Ⲇⵠ[664], 3);
    this.ⵠᐃᐃ[138].id = 138;
    this.ⵠᐃᐃ[139] = Af(60, 60, 0, Ⲇⵠ[674], 3);
    this.ⵠᐃᐃ[139].id = 139;
    this.ⵠᐃᐃ[139].info.ⵠᐃ[2] = this.ⵠᐃᐃ[139].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[140] = Af(60, 60, 0, Ⲇⵠ[140], 3);
    this.ⵠᐃᐃ[140].id = 140;
    this.ⵠᐃᐃ[140].info.ⵠᐃ[2] = this.ⵠᐃᐃ[140].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[141] = Af(60, 60, 0, Ⲇⵠ[685], 3);
    this.ⵠᐃᐃ[141].id = 141;
    this.ⵠᐃᐃ[142] = Af(60, 60, 0, Ⲇⵠ[142], 3);
    this.ⵠᐃᐃ[142].id = 142;
    this.ⵠᐃᐃ[142].info.ⵠᐃ[2] = this.ⵠᐃᐃ[142].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[144] = Af(60, 60, 0, Ⲇⵠ[717], 3);
    this.ⵠᐃᐃ[144].id = 144;
    this.ⵠᐃᐃ[145] = Af(60, 60, 0, Ⲇⵠ[145], 3);
    this.ⵠᐃᐃ[145].id = 145;
    this.ⵠᐃᐃ[59] = Af(60, 60, 0, Ⲇⵠ[732], 3);
    this.ⵠᐃᐃ[59].id = 59;
    this.ⵠᐃᐃ[62] = Af(60, 60, 0, Ⲇⵠ[563], 3);
    this.ⵠᐃᐃ[62].id = 62;
    this.ⵠᐃᐃ[185] = Af(60, 60, 0, Ⲇⵠ[252], 3);
    this.ⵠᐃᐃ[185].id = 185;
    this.ⵠᐃᐃ[185].info.ⵠᐃ[2] = this.ⵠᐃᐃ[185].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[184] = Af(60, 60, 0, Ⲇⵠ[751], 3);
    this.ⵠᐃᐃ[184].id = 184;
    this.ⵠᐃᐃ[184].info.ⵠᐃ[2] = this.ⵠᐃᐃ[184].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[17] = Af(60, 60, 0, Ⲇⵠ[877], 3);
    this.ⵠᐃᐃ[17].id = 17;
    this.ⵠᐃᐃ[63] = Af(60, 60, 0, Ⲇⵠ[566], 3);
    this.ⵠᐃᐃ[63].id = 63;
    this.ⵠᐃᐃ[187] = Af(60, 60, 0, Ⲇⵠ[253], 3);
    this.ⵠᐃᐃ[187].id = 187;
    this.ⵠᐃᐃ[187].info.ⵠᐃ[2] = this.ⵠᐃᐃ[187].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[186] = Af(60, 60, 0, Ⲇⵠ[753], 3);
    this.ⵠᐃᐃ[186].id = 186;
    this.ⵠᐃᐃ[186].info.ⵠᐃ[2] = this.ⵠᐃᐃ[186].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[77] = Af(60, 60, 0, Ⲇⵠ[756], 3);
    this.ⵠᐃᐃ[77].id = 77;
    this.ⵠᐃᐃ[175] = Af(60, 60, 0, Ⲇⵠ[176], 3);
    this.ⵠᐃᐃ[175].id = 175;
    this.ⵠᐃᐃ[175].info.ⵠᐃ[2] = this.ⵠᐃᐃ[175].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[176] = Af(60, 60, 0, Ⲇⵠ[177], 3);
    this.ⵠᐃᐃ[176].id = 176;
    this.ⵠᐃᐃ[176].info.ⵠᐃ[2] = this.ⵠᐃᐃ[176].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[78] = Af(60, 60, 0, Ⲇⵠ[760], 3);
    this.ⵠᐃᐃ[78].id = 78;
    this.ⵠᐃᐃ[177] = Af(60, 60, 0, Ⲇⵠ[175], 3);
    this.ⵠᐃᐃ[177].id = 177;
    this.ⵠᐃᐃ[177].info.ⵠᐃ[2] = this.ⵠᐃᐃ[177].info.ⵠᐃ[0];
    this.ⵠᐃᐃ[79] = Af(60, 60, 0, Ⲇⵠ[764], 3);
    this.ⵠᐃᐃ[79].id = 79;
    this.ⵠᐃᐃ[83] = Af(60, 60, 0, Ⲇⵠ[767], 3);
    this.ⵠᐃᐃ[83].id = 83;
    this.ⵠᐃᐃ[84] = Af(60, 60, 0, Ⲇⵠ[771], 3);
    this.ⵠᐃᐃ[84].id = 84;
    this.ⵠᐃᐃ[178] = Af(60, 60, 0, Ⲇⵠ[178], 3);
    this.ⵠᐃᐃ[178].id = 178;
    this.ⵠᐃᐃ[179] = Af(60, 60, 0, Ⲇⵠ[179], 3);
    this.ⵠᐃᐃ[179].id = 179;
    this.ⵠᐃᐃ[86] = Af(60, 60, 0, Ⲇⵠ[776], 3);
    this.ⵠᐃᐃ[86].id = 86;
    this.ⵠᐃᐃ[85] = Af(60, 60, 0, Ⲇⵠ[779], 3);
    this.ⵠᐃᐃ[85].id = 85;
    this.ⵠᐃᐃ[180] = Af(60, 60, 0, Ⲇⵠ[180], 3);
    this.ⵠᐃᐃ[180].id = 180;
    this.ⵠᐃᐃ[181] = Af(60, 60, 0, Ⲇⵠ[181], 3);
    this.ⵠᐃᐃ[181].id = 181;
    this.ⵠᐃᐃ[182] = Af(60, 60, 0, Ⲇⵠ[789], 3);
    this.ⵠᐃᐃ[182].id = 182;
    this.ⵠᐃᐃ[183] = Af(60, 60, 0, Ⲇⵠ[800], 3);
    this.ⵠᐃᐃ[183].id = 183;
    this.ⵠᐃᐃ[188] = Af(60, 60, 0, Ⲇⵠ[808], 3);
    this.ⵠᐃᐃ[188].id = 188;
    this.ⵠᐃᐃ[189] = Af(60, 60, 0, Ⲇⵠ[814], 3);
    this.ⵠᐃᐃ[189].id = 189;
    this.ⵠᐃᐃ[191] = Af(60, 60, 0, Ⲇⵠ[834], 3);
    this.ⵠᐃᐃ[191].id = 191;
    this.ⵠᐃᐃ[192] = Af(60, 60, 0, Ⲇⵠ[840], 3);
    this.ⵠᐃᐃ[192].id = 192;
    this.ⵠᐃᐃ[190] = Af(60, 60, 0, Ⲇⵠ[842], 3);
    this.ⵠᐃᐃ[190].id = 190;
    this.ⵠᐃᐃ[193] = Af(60, 60, 0, Ⲇⵠ[845], 3);
    this.ⵠᐃᐃ[193].id = 193;
    this.ⵠᐃᐃ[194] = Af(60, 60, 0, Ⲇⵠ[850], 3);
    this.ⵠᐃᐃ[194].id = 194;
    this.ⵠᐃᐃ[204] = Af(60, 60, 0, Ⲇⵠ[949], 3);
    this.ⵠᐃᐃ[204].id = 204;
    this.ⵠᐃᐃ[205] = Af(60, 60, 0, Ⲇⵠ[955], 3);
    this.ⵠᐃᐃ[205].id = 205;
    this.ⵠᐃᐃ[206] = Af(60, 60, 0, Ⲇⵠ[959], 3);
    this.ⵠᐃᐃ[206].id = 206;
    this.ⵠᐃᐃ[207] = Af(60, 60, 0, Ⲇⵠ[965], 3);
    this.ⵠᐃᐃ[207].id = 207;
    this.ⵠᐃᐃ[208] = Af(60, 60, 0, Ⲇⵠ[966], 3);
    this.ⵠᐃᐃ[208].id = 208;
    this.ⵠᐃᐃ[209] = Af(60, 60, 0, Ⲇⵠ[972], 3);
    this.ⵠᐃᐃ[209].id = 209;
    this.ⵠᐃᐃ[210] = Af(60, 60, 0, Ⲇⵠ[981], 3);
    this.ⵠᐃᐃ[210].id = 210;
    this.ⵠᐃᐃ[211] = Af(60, 60, 0, Ⲇⵠ[987], 3);
    this.ⵠᐃᐃ[211].id = 211;
    this.ⵠᐃᐃ[41] = Af(60, 60, 0, Ⲇⵠ[880], 3);
    this.ⵠᐃᐃ[41].id = 41;
    this.ⵠᐃᐃ[42] = Af(60, 60, 0, Ⲇⵠ[882], 3);
    this.ⵠᐃᐃ[42].id = 42;
    this.ⵠᐃᐃ[12] = Af(60, 60, 0, Ⲇⵠ[401], 3);
    this.ⵠᐃᐃ[12].id = 12;
    this.ⵠᐃᐃ[16] = Af(60, 60, 0, Ⲇⵠ[874], 3);
    this.ⵠᐃᐃ[16].id = 16;
    this.ⵠᐃᐃ[196] = Af(60, 60, 0, Ⲇⵠ[196], 3);
    this.ⵠᐃᐃ[196].id = 196;
    this.ⵠᐃᐃ[18] = Af(60, 60, 0, Ⲇⵠ[901], 3);
    this.ⵠᐃᐃ[18].id = 18;
    this.ⵠᐃᐃ[197] = Af(60, 60, 0, Ⲇⵠ[197], 3);
    this.ⵠᐃᐃ[197].id = 197;
    this.ⵠᐃᐃ[198] = Af(60, 60, 0, Ⲇⵠ[907], 3);
    this.ⵠᐃᐃ[198].id = 198;
    this.ⵠᐃᐃ[61] = Af(60, 60, 0, Ⲇⵠ[910], 3);
    this.ⵠᐃᐃ[61].id = 61;
    this.ⵠᐃᐃ[201] = Af(60, 60, 0, Ⲇⵠ[870], 3);
    this.ⵠᐃᐃ[201].id = 201;
    this.ⵠᐃᐃ[200] = Af(60, 60, 0, Ⲇⵠ[200], 3);
    this.ⵠᐃᐃ[200].id = 200;
    this.ⵠᐃᐃ[199] = Af(60, 60, 0, Ⲇⵠ[865], 3);
    this.ⵠᐃᐃ[199].id = 199;
    this.ΔΔⵠ = [];
    this.ΔΔⵠ[35] = Af(60, 60, 0, Ⲇⵠ[254], 3);
    this.ΔΔⵠ[35].id = 35;
    this.ΔΔⵠ[5] = Af(60, 60, 0, Ⲇⵠ[256], 3);
    this.ΔΔⵠ[5].id = 5;
    this.ΔΔⵠ[0] = Af(60, 60, 0, Ⲇⵠ[302], 3);
    this.ΔΔⵠ[0].id = 0;
    this.ΔΔⵠ[3] = Af(60, 60, 0, Ⲇⵠ[262], 3);
    this.ΔΔⵠ[3].id = 3;
    this.ΔΔⵠ[55] = Af(60, 60, 0, Ⲇⵠ[318], 3);
    this.ΔΔⵠ[55].id = 55;
    this.ΔΔⵠ[67] = Af(60, 60, 0, Ⲇⵠ[320], 3);
    this.ΔΔⵠ[67].id = 67;
    this.ΔΔⵠ[40] = Af(60, 60, 0, Ⲇⵠ[284], 3);
    this.ΔΔⵠ[40].id = 40;
    this.ΔΔⵠ[6] = Af(60, 60, 0, Ⲇⵠ[295], 3);
    this.ΔΔⵠ[6].id = 6;
    this.ΔΔⵠ[7] = Af(60, 60, 0, Ⲇⵠ[257], 3);
    this.ΔΔⵠ[7].id = 7;
    this.ΔΔⵠ[36] = Af(60, 60, 0, Ⲇⵠ[290], 3);
    this.ΔΔⵠ[36].id = 36;
    this.ΔΔⵠ[34] = Af(60, 60, 0, Ⲇⵠ[830], 3);
    this.ΔΔⵠ[34].id = 34;
    this.ΔΔⵠ[37] = Af(60, 60, 0, Ⲇⵠ[291], 3);
    this.ΔΔⵠ[37].id = 37;
    this.ΔΔⵠ[4] = Af(60, 60, 0, Ⲇⵠ[314], 3);
    this.ΔΔⵠ[4].id = 4;
    this.ΔΔⵠ[49] = Af(60, 60, 0, Ⲇⵠ[325], 3);
    this.ΔΔⵠ[49].id = 49;
    this.ΔΔⵠ[1] = Af(60, 60, 0, Ⲇⵠ[327], 3);
    this.ΔΔⵠ[1].id = 1;
    this.ΔΔⵠ[54] = Af(60, 60, 0, Ⲇⵠ[304], 3);
    this.ΔΔⵠ[54].id = 54;
    this.ΔΔⵠ[56] = Af(60, 60, 0, Ⲇⵠ[263], 3);
    this.ΔΔⵠ[56].id = 56;
    this.ΔΔⵠ[57] = Af(60, 60, 0, Ⲇⵠ[265], 3);
    this.ΔΔⵠ[57].id = 57;
    this.ΔΔⵠ[58] = Af(60, 60, 0, Ⲇⵠ[332], 3);
    this.ΔΔⵠ[58].id = 58;
    this.ΔΔⵠ[61] = Af(60, 60, 0, Ⲇⵠ[268], 3);
    this.ΔΔⵠ[61].id = 61;
    this.ΔΔⵠ[79] = Af(60, 60, 0, Ⲇⵠ[338], 3);
    this.ΔΔⵠ[79].id = 79;
    this.ΔΔⵠ[68] = Af(60, 60, 0, Ⲇⵠ[360], 3);
    this.ΔΔⵠ[68].id = 68;
    this.ΔΔⵠ[69] = Af(60, 60, 0, Ⲇⵠ[363], 3);
    this.ΔΔⵠ[69].id = 69;
    this.ΔΔⵠ[70] = Af(60, 60, 0, Ⲇⵠ[365], 3);
    this.ΔΔⵠ[70].id = 70;
    this.ΔΔⵠ[100] = Af(60, 60, 0, Ⲇⵠ[367], 3);
    this.ΔΔⵠ[100].id = 100;
    this.ΔΔⵠ[83] = Af(60, 60, 0, Ⲇⵠ[370], 3);
    this.ΔΔⵠ[83].id = 83;
    this.ΔΔⵠ[62] = Af(60, 60, 0, Ⲇⵠ[371], 3);
    this.ΔΔⵠ[62].id = 62;
    this.ΔΔⵠ[63] = Af(60, 60, 0, Ⲇⵠ[374], 3);
    this.ΔΔⵠ[63].id = 63;
    this.ΔΔⵠ[64] = Af(60, 60, 0, Ⲇⵠ[377], 3);
    this.ΔΔⵠ[64].id = 64;
    this.ΔΔⵠ[83] = Af(60, 60, 0, Ⲇⵠ[370], 3);
    this.ΔΔⵠ[83].id = 83;
    this.ΔΔⵠ[84] = Af(60, 60, 0, Ⲇⵠ[380], 3);
    this.ΔΔⵠ[84].id = 84;
    this.ΔΔⵠ[25] = Af(60, 60, 0, Ⲇⵠ[402], 3);
    this.ΔΔⵠ[25].id = 25;
    this.ΔΔⵠ[26] = Af(60, 60, 0, Ⲇⵠ[396], 3);
    this.ΔΔⵠ[26].id = 26;
    this.ΔΔⵠ[27] = Af(60, 60, 0, Ⲇⵠ[399], 3);
    this.ΔΔⵠ[27].id = 27;
    this.ΔΔⵠ[28] = Af(60, 60, 0, Ⲇⵠ[405], 3);
    this.ΔΔⵠ[28].id = 28;
    this.ΔΔⵠ[31] = Af(60, 60, 0, Ⲇⵠ[876], 3);
    this.ΔΔⵠ[31].id = 31;
    this.ΔΔⵠ[2] = Af(60, 60, 0, Ⲇⵠ[409], 3);
    this.ΔΔⵠ[2].id = 2;
    this.ΔΔⵠ[80] = Af(60, 60, 0, Ⲇⵠ[421], 3);
    this.ΔΔⵠ[80].id = 80;
    this.ΔΔⵠ[81] = Af(60, 60, 0, Ⲇⵠ[424], 3);
    this.ΔΔⵠ[81].id = 81;
    this.ΔΔⵠ[gh.ΔᐃⵠⲆⵠ] = Af(60, 60, 0, Ⲇⵠ[1228], 3);
    this.ΔΔⵠ[gh.ΔᐃⵠⲆⵠ].id = gh.ΔᐃⵠⲆⵠ;
    this.ΔΔⵠ[86] = Af(60, 60, 0, Ⲇⵠ[1231], 3);
    this.ΔΔⵠ[86].id = 86;
    this.ΔΔⵠ[98] = Af(60, 60, 0, Ⲇⵠ[1138], 3);
    this.ΔΔⵠ[98].id = 98;
    this.ΔΔⵠ[99] = Af(60, 60, 0, Ⲇⵠ[1141], 3);
    this.ΔΔⵠ[99].id = 99;
    this.ΔΔⵠ[131] = Af(60, 60, 0, Ⲇⵠ[570], 3);
    this.ΔΔⵠ[131].id = 131;
    this.ΔΔⵠ[132] = Af(60, 60, 0, Ⲇⵠ[1168], 3);
    this.ΔΔⵠ[132].id = 132;
    this.ΔΔⵠ[145] = Af(60, 60, 0, Ⲇⵠ[1238], 3);
    this.ΔΔⵠ[145].id = 145;
    this.ΔΔⵠ[133] = Af(60, 60, 0, Ⲇⵠ[573], 3);
    this.ΔΔⵠ[133].id = 133;
    this.ΔΔⵠ[134] = Af(60, 60, 0, Ⲇⵠ[1171], 3);
    this.ΔΔⵠ[134].id = 134;
    this.ΔΔⵠ[146] = Af(60, 60, 0, Ⲇⵠ[1241], 3);
    this.ΔΔⵠ[146].id = 146;
    this.ΔΔⵠ[135] = Af(60, 60, 0, Ⲇⵠ[576], 3);
    this.ΔΔⵠ[135].id = 135;
    this.ΔΔⵠ[136] = Af(60, 60, 0, Ⲇⵠ[1174], 3);
    this.ΔΔⵠ[136].id = 136;
    this.ΔΔⵠ[147] = Af(60, 60, 0, Ⲇⵠ[1244], 3);
    this.ΔΔⵠ[147].id = 147;
    this.ΔΔⵠ[137] = Af(60, 60, 0, Ⲇⵠ[579], 3);
    this.ΔΔⵠ[137].id = 137;
    this.ΔΔⵠ[138] = Af(60, 60, 0, Ⲇⵠ[1177], 3);
    this.ΔΔⵠ[138].id = 138;
    this.ΔΔⵠ[167] = Af(60, 60, 0, Ⲇⵠ[1256], 3);
    this.ΔΔⵠ[167].id = 167;
    this.ΔΔⵠ[168] = Af(60, 60, 0, Ⲇⵠ[1259], 3);
    this.ΔΔⵠ[168].id = 168;
    this.ΔΔⵠ[169] = Af(60, 60, 0, Ⲇⵠ[1262], 3);
    this.ΔΔⵠ[169].id = 169;
    this.ΔΔⵠ[170] = Af(60, 60, 0, Ⲇⵠ[1265], 3);
    this.ΔΔⵠ[170].id = 170;
    this.ΔΔⵠ[171] = Af(60, 60, 0, Ⲇⵠ[1268], 3);
    this.ΔΔⵠ[171].id = 171;
    this.ΔΔⵠ[172] = Af(60, 60, 0, Ⲇⵠ[1271], 3);
    this.ΔΔⵠ[172].id = 172;
    this.ΔΔⵠ[148] = Af(60, 60, 0, Ⲇⵠ[1247], 3);
    this.ΔΔⵠ[148].id = 148;
    this.ΔΔⵠ[139] = Af(60, 60, 0, Ⲇⵠ[582], 3);
    this.ΔΔⵠ[139].id = 139;
    this.ΔΔⵠ[140] = Af(60, 60, 0, Ⲇⵠ[1180], 3);
    this.ΔΔⵠ[140].id = 140;
    this.ΔΔⵠ[149] = Af(60, 60, 0, Ⲇⵠ[1250], 3);
    this.ΔΔⵠ[149].id = 149;
    this.ΔΔⵠ[141] = Af(60, 60, 0, Ⲇⵠ[585], 3);
    this.ΔΔⵠ[141].id = 141;
    this.ΔΔⵠ[142] = Af(60, 60, 0, Ⲇⵠ[1183], 3);
    this.ΔΔⵠ[142].id = 142;
    this.ΔΔⵠ[150] = Af(60, 60, 0, Ⲇⵠ[1253], 3);
    this.ΔΔⵠ[150].id = 150;
    this.ΔΔⵠ[143] = Af(60, 60, 0, Ⲇⵠ[588], 3);
    this.ΔΔⵠ[143].id = 143;
    this.ΔΔⵠ[144] = Af(60, 60, 0, Ⲇⵠ[1186], 3);
    this.ΔΔⵠ[144].id = 144;
    this.ΔΔⵠ[87] = Af(60, 60, 0, Ⲇⵠ[827], 3);
    this.ΔΔⵠ[87].id = 87;
    this.ΔΔⵠ[88] = Af(60, 60, 0, Ⲇⵠ[430], 3);
    this.ΔΔⵠ[88].id = 88;
    this.ΔΔⵠ[89] = Af(60, 60, 0, Ⲇⵠ[433], 3);
    this.ΔΔⵠ[89].id = 89;
    this.ΔΔⵠ[90] = Af(60, 60, 0, Ⲇⵠ[436], 3);
    this.ΔΔⵠ[90].id = 90;
    this.ΔΔⵠ[24] = Af(60, 60, 0, Ⲇⵠ[439], 3);
    this.ΔΔⵠ[24].id = 24;
    this.ΔΔⵠ[101] = Af(60, 60, 0, Ⲇⵠ[442], 3);
    this.ΔΔⵠ[101].id = 101;
    this.ΔΔⵠ[100] = Af(60, 60, 0, Ⲇⵠ[367], 3);
    this.ΔΔⵠ[100].id = 100;
    this.ΔΔⵠ[38] = Af(60, 60, 0, Ⲇⵠ[456], 3);
    this.ΔΔⵠ[38].id = 38;
    this.ΔΔⵠ[gh.ⵠᐃⵠᐃΔ] = Af(60, 60, 0, Ⲇⵠ[861], 3);
    this.ΔΔⵠ[gh.ⵠᐃⵠᐃΔ].id = gh.ⵠᐃⵠᐃΔ;
    this.ΔΔⵠ[8] = Af(60, 60, 0, Ⲇⵠ[460], 3);
    this.ΔΔⵠ[8].id = 8;
    this.ΔΔⵠ[9] = Af(60, 60, 0, Ⲇⵠ[1019], 3);
    this.ΔΔⵠ[9].id = 9;
    this.ΔΔⵠ[29] = Af(60, 60, 0, Ⲇⵠ[473], 3);
    this.ΔΔⵠ[29].id = 29;
    this.ΔΔⵠ[10] = Af(60, 60, 0, Ⲇⵠ[478], 3);
    this.ΔΔⵠ[10].id = 10;
    this.ΔΔⵠ[11] = Af(60, 60, 0, Ⲇⵠ[481], 3);
    this.ΔΔⵠ[11].id = 11;
    this.ΔΔⵠ[12] = Af(60, 60, 0, Ⲇⵠ[484], 3);
    this.ΔΔⵠ[12].id = 12;
    this.ΔΔⵠ[13] = Af(60, 60, 0, Ⲇⵠ[487], 3);
    this.ΔΔⵠ[13].id = 13;
    this.ΔΔⵠ[14] = Af(60, 60, 0, Ⲇⵠ[490], 3);
    this.ΔΔⵠ[14].id = 14;
    this.ΔΔⵠ[59] = Af(60, 60, 0, Ⲇⵠ[493], 3);
    this.ΔΔⵠ[59].id = 59;
    this.ΔΔⵠ[71] = Af(60, 60, 0, Ⲇⵠ[496], 3);
    this.ΔΔⵠ[71].id = 71;
    this.ΔΔⵠ[65] = Af(60, 60, 0, Ⲇⵠ[498], 3);
    this.ΔΔⵠ[65].id = 65;
    this.ΔΔⵠ[85] = Af(60, 60, 0, Ⲇⵠ[503], 3);
    this.ΔΔⵠ[85].id = 85;
    this.ΔΔⵠ[102] = Af(60, 60, 0, Ⲇⵠ[515], 3);
    this.ΔΔⵠ[102].id = 102;
    this.ΔΔⵠ[103] = Af(60, 60, 0, Ⲇⵠ[519], 3);
    this.ΔΔⵠ[103].id = 103;
    this.ΔΔⵠ[115] = Af(60, 60, 0, Ⲇⵠ[530], 3);
    this.ΔΔⵠ[115].id = 115;
    this.ΔΔⵠ[104] = Af(60, 60, 0, Ⲇⵠ[533], 3);
    this.ΔΔⵠ[104].id = 104;
    this.ΔΔⵠ[105] = Af(60, 60, 0, Ⲇⵠ[555], 3);
    this.ΔΔⵠ[105].id = 105;
    this.ΔΔⵠ[91] = Af(60, 60, 0, Ⲇⵠ[542], 3);
    this.ΔΔⵠ[91].id = 91;
    this.ΔΔⵠ[15] = Af(60, 60, 0, Ⲇⵠ[551], 3);
    this.ΔΔⵠ[15].id = 15;
    this.ΔΔⵠ[106] = Af(60, 60, 0, Ⲇⵠ[604], 3);
    this.ΔΔⵠ[106].id = 106;
    this.ΔΔⵠ[108] = Af(60, 60, 0, Ⲇⵠ[1235], 3);
    this.ΔΔⵠ[108].id = 108;
    this.ΔΔⵠ[163] = Af(60, 60, 0, Ⲇⵠ[1027], 3);
    this.ΔΔⵠ[163].id = 163;
    this.ΔΔⵠ[164] = Af(60, 60, 0, Ⲇⵠ[1030], 3);
    this.ΔΔⵠ[164].id = 164;
    this.ΔΔⵠ[166] = Af(60, 60, 0, Ⲇⵠ[1116], 3);
    this.ΔΔⵠ[166].id = 166;
    this.ΔΔⵠ[165] = Af(60, 60, 0, Ⲇⵠ[1048], 3);
    this.ΔΔⵠ[165].id = 165;
    this.ΔΔⵠ[gh.ⵠᐃⲆⵠⵠ] = Af(60, 60, 0, Ⲇⵠ[1051], 3);
    this.ΔΔⵠ[gh.ⵠᐃⲆⵠⵠ].id = gh.ⵠᐃⲆⵠⵠ;
    this.ΔΔⵠ[gh.ᐃᐃⵠΔⲆ] = Af(60, 60, 0, Ⲇⵠ[1082], 3);
    this.ΔΔⵠ[gh.ᐃᐃⵠΔⲆ].id = gh.ᐃᐃⵠΔⲆ;
    this.ΔΔⵠ[gh.ⵠⲆⵠⵠᐃ] = Af(60, 60, 0, Ⲇⵠ[1226], 3);
    this.ΔΔⵠ[gh.ⵠⲆⵠⵠᐃ].id = gh.ⵠⲆⵠⵠᐃ;
    this.ΔΔⵠ[gh.ΔΔⲆⲆᐃ] = Af(60, 60, 0, Ⲇⵠ[1191], 3);
    this.ΔΔⵠ[gh.ΔΔⲆⲆᐃ].id = gh.ΔΔⲆⲆᐃ;
    this.ΔΔⵠ[110] = Af(60, 60, 0, Ⲇⵠ[611], 3);
    this.ΔΔⵠ[110].id = 110;
    this.ΔΔⵠ[111] = Af(60, 60, 0, Ⲇⵠ[715], 3);
    this.ΔΔⵠ[111].id = 111;
    this.ΔΔⵠ[112] = Af(60, 60, 0, Ⲇⵠ[715], 3);
    this.ΔΔⵠ[112].id = 112;
    this.ΔΔⵠ[113] = Af(60, 60, 0, Ⲇⵠ[715], 3);
    this.ΔΔⵠ[113].id = 113;
    this.ΔΔⵠ[16] = Af(60, 60, 0, Ⲇⵠ[618], 3);
    this.ΔΔⵠ[16].id = 16;
    this.ΔΔⵠ[17] = Af(60, 60, 0, Ⲇⵠ[700], 3);
    this.ΔΔⵠ[17].id = 17;
    this.ΔΔⵠ[18] = Af(60, 60, 0, Ⲇⵠ[704], 3);
    this.ΔΔⵠ[18].id = 18;
    this.ΔΔⵠ[19] = Af(60, 60, 0, Ⲇⵠ[706], 3);
    this.ΔΔⵠ[19].id = 19;
    this.ΔΔⵠ[122] = Af(60, 60, 0, Ⲇⵠ[711], 3);
    this.ΔΔⵠ[122].id = 122;
    this.ΔΔⵠ[20] = Af(60, 60, 0, Ⲇⵠ[627], 3);
    this.ΔΔⵠ[20].id = 20;
    this.ΔΔⵠ[41] = Af(60, 60, 0, Ⲇⵠ[632], 3);
    this.ΔΔⵠ[41].id = 41;
    this.ΔΔⵠ[52] = Af(60, 60, 0, Ⲇⵠ[635], 3);
    this.ΔΔⵠ[52].id = 52;
    this.ΔΔⵠ[114] = Af(60, 60, 0, Ⲇⵠ[643], 3);
    this.ΔΔⵠ[114].id = 114;
    this.ΔΔⵠ[94] = Af(60, 60, 0, Ⲇⵠ[647], 3);
    this.ΔΔⵠ[94].id = 94;
    this.ΔΔⵠ[93] = Af(60, 60, 0, Ⲇⵠ[650], 3);
    this.ΔΔⵠ[93].id = 93;
    this.ΔΔⵠ[21] = Af(60, 60, 0, Ⲇⵠ[654], 3);
    this.ΔΔⵠ[21].id = 21;
    this.ΔΔⵠ[53] = Af(60, 60, 0, Ⲇⵠ[660], 3);
    this.ΔΔⵠ[53].id = 53;
    this.ΔΔⵠ[51] = Af(60, 60, 0, Ⲇⵠ[690], 3);
    this.ΔΔⵠ[51].id = 51;
    this.ΔΔⵠ[50] = Af(60, 60, 0, Ⲇⵠ[666], 3);
    this.ΔΔⵠ[50].id = 50;
    this.ΔΔⵠ[109] = Af(60, 60, 0, Ⲇⵠ[684], 3);
    this.ΔΔⵠ[109].id = 109;
    this.ΔΔⵠ[124] = Af(60, 60, 0, Ⲇⵠ[718], 3);
    this.ΔΔⵠ[124].id = 124;
    this.ΔΔⵠ[125] = Af(60, 60, 0, Ⲇⵠ[730], 3);
    this.ΔΔⵠ[125].id = 125;
    this.ΔΔⵠ[126] = Af(60, 60, 0, Ⲇⵠ[734], 3);
    this.ΔΔⵠ[126].id = 126;
    this.ΔΔⵠ[129] = Af(60, 60, 0, Ⲇⵠ[563], 3);
    this.ΔΔⵠ[129].id = 129;
    this.ΔΔⵠ[151] = Af(60, 60, 0, Ⲇⵠ[758], 3);
    this.ΔΔⵠ[151].id = 151;
    this.ΔΔⵠ[152] = Af(60, 60, 0, Ⲇⵠ[762], 3);
    this.ΔΔⵠ[152].id = 152;
    this.ΔΔⵠ[153] = Af(60, 60, 0, Ⲇⵠ[770], 3);
    this.ΔΔⵠ[153].id = 153;
    this.ΔΔⵠ[154] = Af(60, 60, 0, Ⲇⵠ[768], 3);
    this.ΔΔⵠ[154].id = 154;
    this.ΔΔⵠ[155] = Af(60, 60, 0, Ⲇⵠ[772], 3);
    this.ΔΔⵠ[155].id = 155;
    this.ΔΔⵠ[157] = Af(60, 60, 0, Ⲇⵠ[777], 3);
    this.ΔΔⵠ[157].id = 157;
    this.ΔΔⵠ[156] = Af(60, 60, 0, Ⲇⵠ[780], 3);
    this.ΔΔⵠ[156].id = 156;
    this.ΔΔⵠ[158] = Af(60, 60, 0, Ⲇⵠ[784], 3);
    this.ΔΔⵠ[158].id = 158;
    this.ΔΔⵠ[159] = Af(60, 60, 0, Ⲇⵠ[785], 3);
    this.ΔΔⵠ[159].id = 159;
    this.ΔΔⵠ[160] = Af(60, 60, 0, Ⲇⵠ[791], 3);
    this.ΔΔⵠ[160].id = 160;
    this.ΔΔⵠ[161] = Af(60, 60, 0, Ⲇⵠ[799], 3);
    this.ΔΔⵠ[161].id = 161;
    this.ΔΔⵠ[42] = Af(60, 60, 0, Ⲇⵠ[809], 3);
    this.ΔΔⵠ[42].id = 42;
    this.ΔΔⵠ[43] = Af(60, 60, 0, Ⲇⵠ[835], 3);
    this.ΔΔⵠ[43].id = 43;
    this.ΔΔⵠ[107] = Af(60, 60, 0, Ⲇⵠ[843], 3);
    this.ΔΔⵠ[107].id = 107;
    this.ΔΔⵠ[44] = Af(60, 60, 0, Ⲇⵠ[846], 3);
    this.ΔΔⵠ[44].id = 44;
    this.ΔΔⵠ[46] = Af(60, 60, 0, Ⲇⵠ[960], 3);
    this.ΔΔⵠ[46].id = 46;
    this.ΔΔⵠ[45] = Af(60, 60, 0, Ⲇⵠ[950], 3);
    this.ΔΔⵠ[45].id = 45;
    this.ΔΔⵠ[47] = Af(60, 60, 0, Ⲇⵠ[967], 3);
    this.ΔΔⵠ[47].id = 47;
    this.ΔΔⵠ[48] = Af(60, 60, 0, Ⲇⵠ[982], 3);
    this.ΔΔⵠ[48].id = 48;
    this.ΔΔⵠ[25] = Af(60, 60, 0, Ⲇⵠ[402], 3);
    this.ΔΔⵠ[25].id = 25;
    this.ΔΔⵠ[31] = Af(60, 60, 0, Ⲇⵠ[876], 3);
    this.ΔΔⵠ[31].id = 31;
    this.ΔΔⵠ[33] = Af(60, 60, 0, Ⲇⵠ[900], 3);
    this.ΔΔⵠ[33].id = 33;
    this.ΔΔⵠ[162] = Af(60, 60, 0, Ⲇⵠ[909], 3);
    this.ΔΔⵠ[162].id = 162;
    this.ΔΔⵠ[128] = Af(60, 60, 0, Ⲇⵠ[912], 3);
    this.ΔΔⵠ[128].id = 128;
    this.ⲆΔⲆ[53] = Af(68, 68, 0, Ⲇⵠ[976], 3);
    this.ⲆΔⲆ[53].id = 53;
    this.ⵠᐃᐃ[53] = Af(60, 60, 0, Ⲇⵠ[975], 3);
    this.ⵠᐃᐃ[53].id = 53;
    this.ΔΔⵠ[22] = Af(60, 60, 0, Ⲇⵠ[977], 3);
    this.ΔΔⵠ[22].id = 22;
    this.ⲆΔⲆ[54] = Af(68, 68, 0, Ⲇⵠ[979], 3);
    this.ⲆΔⲆ[54].id = 54;
    this.ⵠᐃᐃ[54] = Af(60, 60, 0, Ⲇⵠ[978], 3);
    this.ⵠᐃᐃ[54].id = 54;
    this.ΔΔⵠ[23] = Af(60, 60, 0, Ⲇⵠ[980], 3);
    this.ΔΔⵠ[23].id = 23;
    this.ⲆΔⲆ[56] = Af(68, 68, 0, Ⲇⵠ[713], 3);
    this.ⲆΔⲆ[56].id = 56;
    this.ⵠᐃᐃ[56] = Af(60, 60, 0, Ⲇⵠ[712], 3);
    this.ⵠᐃᐃ[56].id = 56;
    this.ΔΔⵠ[123] = Af(60, 60, 0, Ⲇⵠ[714], 3);
    this.ΔΔⵠ[123].id = 123;
    this.ⲆΔⲆ[82] = Af(68, 68, 0, Ⲇⵠ[428], 3);
    this.ⲆΔⲆ[82].id = 82;
    this.ⵠᐃᐃ[82] = Af(60, 60, 0, Ⲇⵠ[426], 3);
    this.ⵠᐃᐃ[82].id = 82;
    this.ΔΔⵠ[82] = Af(60, 60, 0, Ⲇⵠ[427], 3);
    this.ΔΔⵠ[82].id = 82;
    this.ⲆΔⲆ[235] = Af(68, 68, 0, Ⲇⵠ[1159], 3);
    this.ⲆΔⲆ[235].id = 235;
    this.ⵠᐃᐃ[235] = Af(60, 60, 0, Ⲇⵠ[1158], 3);
    this.ⵠᐃᐃ[235].id = 235;
    this.ⲆΔⲆ[238] = Af(68, 68, 0, Ⲇⵠ[1188], 3);
    this.ⲆΔⲆ[238].id = 238;
    this.ⵠᐃᐃ[238] = Af(60, 60, 0, Ⲇⵠ[1187], 3);
    this.ⵠᐃᐃ[238].id = 238;
    this.ⲆΔⲆ[236] = Af(68, 68, 0, Ⲇⵠ[1161], 3);
    this.ⲆΔⲆ[236].id = 236;
    this.ⵠᐃᐃ[236] = Af(60, 60, 0, Ⲇⵠ[1160], 3);
    this.ⵠᐃᐃ[236].id = 236;
    this.ⲆΔⲆ[152] = Af(68, 68, 0, Ⲇⵠ[1197], 3);
    this.ⲆΔⲆ[152].id = 152;
    this.ⵠᐃᐃ[152] = Af(60, 60, 0, Ⲇⵠ[1195], 3);
    this.ⵠᐃᐃ[152].id = 152;
    this.ΔΔⵠ[116] = Af(60, 60, 0, Ⲇⵠ[1196], 3);
    this.ΔΔⵠ[116].id = 116;
    this.ⲆΔⲆ[212] = Af(68, 68, 0, Ⲇⵠ[992], 3);
    this.ⲆΔⲆ[212].id = 212;
    this.ⵠᐃᐃ[212] = Af(60, 60, 0, Ⲇⵠ[991], 3);
    this.ⵠᐃᐃ[212].id = 212;
    this.ΔΔⵠ[73] = Af(60, 60, 0, Ⲇⵠ[990], 3);
    this.ΔΔⵠ[73].id = 73;
    this.ⲆΔⲆ[213] = Af(68, 68, 0, Ⲇⵠ[995], 3);
    this.ⲆΔⲆ[213].id = 213;
    this.ⵠᐃᐃ[213] = Af(60, 60, 0, Ⲇⵠ[994], 3);
    this.ⵠᐃᐃ[213].id = 213;
    this.ΔΔⵠ[74] = Af(60, 60, 0, Ⲇⵠ[993], 3);
    this.ΔΔⵠ[74].id = 74;
    this.ⲆΔⲆ[214] = Af(68, 68, 0, Ⲇⵠ[998], 3);
    this.ⲆΔⲆ[214].id = 214;
    this.ⵠᐃᐃ[214] = Af(60, 60, 0, Ⲇⵠ[997], 3);
    this.ⵠᐃᐃ[214].id = 214;
    this.ΔΔⵠ[75] = Af(60, 60, 0, Ⲇⵠ[996], 3);
    this.ΔΔⵠ[75].id = 75;
    this.ⲆΔⲆ[215] = Af(68, 68, 0, Ⲇⵠ[1001], 3);
    this.ⲆΔⲆ[215].id = 215;
    this.ⵠᐃᐃ[215] = Af(60, 60, 0, Ⲇⵠ[1000], 3);
    this.ⵠᐃᐃ[215].id = 215;
    this.ΔΔⵠ[76] = Af(60, 60, 0, Ⲇⵠ[999], 3);
    this.ΔΔⵠ[76].id = 76;
    this.ⲆΔⲆ[216] = Af(68, 68, 0, Ⲇⵠ[1004], 3);
    this.ⲆΔⲆ[216].id = 216;
    this.ⵠᐃᐃ[216] = Af(60, 60, 0, Ⲇⵠ[1003], 3);
    this.ⵠᐃᐃ[216].id = 216;
    this.ΔΔⵠ[77] = Af(60, 60, 0, Ⲇⵠ[1002], 3);
    this.ΔΔⵠ[77].id = 77;
    this.ⲆΔⲆ[220] = Af(68, 68, 0, Ⲇⵠ[1007], 3);
    this.ⲆΔⲆ[220].id = 220;
    this.ⵠᐃᐃ[220] = Af(60, 60, 0, Ⲇⵠ[1006], 3);
    this.ⵠᐃᐃ[220].id = 220;
    this.ΔΔⵠ[78] = Af(60, 60, 0, Ⲇⵠ[1005], 3);
    this.ΔΔⵠ[78].id = 78;
    this.ⲆΔⲆ[217] = Af(68, 68, 0, Ⲇⵠ[1016], 3);
    this.ⲆΔⲆ[217].id = 217;
    this.ⵠᐃᐃ[217] = Af(60, 60, 0, Ⲇⵠ[1015], 3);
    this.ⵠᐃᐃ[217].id = 217;
    this.ΔΔⵠ[60] = Af(60, 60, 0, Ⲇⵠ[1014], 3);
    this.ΔΔⵠ[60].id = 60;
    this.ⲆΔⲆ[219] = Af(68, 68, 0, Ⲇⵠ[1013], 3);
    this.ⲆΔⲆ[219].id = 219;
    this.ⵠᐃᐃ[219] = Af(60, 60, 0, Ⲇⵠ[1012], 3);
    this.ⵠᐃᐃ[219].id = 219;
    this.ΔΔⵠ[72] = Af(60, 60, 0, Ⲇⵠ[1011], 3);
    this.ΔΔⵠ[72].id = 72;
    this.ⲆΔⲆ[218] = Af(68, 68, 0, Ⲇⵠ[1010], 3);
    this.ⲆΔⲆ[218].id = 218;
    this.ⵠᐃᐃ[218] = Af(60, 60, 0, Ⲇⵠ[1009], 3);
    this.ⵠᐃᐃ[218].id = 218;
    this.ΔΔⵠ[66] = Af(60, 60, 0, Ⲇⵠ[1008], 3);
    this.ΔΔⵠ[66].id = 66;
    this.ⲆΔⲆ[153] = Af(68, 68, 0, Ⲇⵠ[1201], 3);
    this.ⲆΔⲆ[153].id = 153;
    this.ⵠᐃᐃ[153] = Af(60, 60, 0, Ⲇⵠ[1199], 3);
    this.ⵠᐃᐃ[153].id = 153;
    this.ΔΔⵠ[117] = Af(60, 60, 0, Ⲇⵠ[1200], 3);
    this.ΔΔⵠ[117].id = 117;
    this.ⲆΔⲆ[154] = Af(68, 68, 0, Ⲇⵠ[1205], 3);
    this.ⲆΔⲆ[154].id = 154;
    this.ⵠᐃᐃ[154] = Af(60, 60, 0, Ⲇⵠ[1203], 3);
    this.ⵠᐃᐃ[154].id = 154;
    this.ΔΔⵠ[118] = Af(60, 60, 0, Ⲇⵠ[1204], 3);
    this.ΔΔⵠ[118].id = 118;
    this.ⲆΔⲆ[155] = Af(68, 68, 0, Ⲇⵠ[1209], 3);
    this.ⲆΔⲆ[155].id = 155;
    this.ⵠᐃᐃ[155] = Af(60, 60, 0, Ⲇⵠ[1207], 3);
    this.ⵠᐃᐃ[155].id = 155;
    this.ΔΔⵠ[119] = Af(60, 60, 0, Ⲇⵠ[1208], 3);
    this.ΔΔⵠ[119].id = 119;
    this.ⲆΔⲆ[156] = Af(68, 68, 0, Ⲇⵠ[1213], 3);
    this.ⲆΔⲆ[156].id = 156;
    this.ⵠᐃᐃ[156] = Af(60, 60, 0, Ⲇⵠ[1211], 3);
    this.ⵠᐃᐃ[156].id = 156;
    this.ΔΔⵠ[120] = Af(60, 60, 0, Ⲇⵠ[1212], 3);
    this.ΔΔⵠ[120].id = 120;
    this.ⲆΔⲆ[157] = Af(68, 68, 0, Ⲇⵠ[1217], 3);
    this.ⲆΔⲆ[157].id = 157;
    this.ⵠᐃᐃ[157] = Af(60, 60, 0, Ⲇⵠ[1215], 3);
    this.ⵠᐃᐃ[157].id = 157;
    this.ΔΔⵠ[121] = Af(60, 60, 0, Ⲇⵠ[1216], 3);
    this.ΔΔⵠ[121].id = 121;
    this.ⲆΔⲆ[203] = Af(68, 68, 0, Ⲇⵠ[937], 3);
    this.ⲆΔⲆ[203].id = 203;
    this.ⵠᐃᐃ[203] = Af(60, 60, 0, Ⲇⵠ[936], 3);
    this.ⵠᐃᐃ[203].id = 203;
    this.ⵠᐃᐃ[203].info.ⵠᐃ[2] = this.ⵠᐃᐃ[203].info.ⵠᐃ[0];
    this.ⲆΔⲆ[150] = Af(68, 68, 0, Ⲇⵠ[524], 3);
    this.ⲆΔⲆ[150].id = 150;
    this.ⵠᐃᐃ[150] = Af(60, 60, 0, Ⲇⵠ[523], 3);
    this.ⵠᐃᐃ[150].id = 150;
    this.ⵠᐃᐃ[150].info.ⵠᐃ[2] = this.ⵠᐃᐃ[150].info.ⵠᐃ[0];
    this.ⲆΔⲆ[202] = Af(68, 68, 0, Ⲇⵠ[939], 3);
    this.ⲆΔⲆ[202].id = 202;
    this.ⵠᐃᐃ[202] = Af(60, 60, 0, Ⲇⵠ[938], 3);
    this.ⵠᐃᐃ[202].id = 202;
    this.ⵠᐃᐃ[202].info.ⵠᐃ[2] = this.ⵠᐃᐃ[202].info.ⵠᐃ[0];
    this.ⲆΔⲆ[19] = Af(68, 68, 0, Ⲇⵠ[934], 3);
    this.ⲆΔⲆ[19].id = 19;
    this.ⵠᐃᐃ[19] = Af(60, 60, 0, Ⲇⵠ[932], 3);
    this.ⵠᐃᐃ[19].id = 19;
    this.ΔΔⵠ[39] = Af(60, 60, 0, Ⲇⵠ[933], 3);
    this.ΔΔⵠ[39].id = 39;
    this.ⲆΔⲆ[20] = Af(68, 68, 0, Ⲇⵠ[923], 3);
    this.ⲆΔⲆ[20].id = 20;
    this.ⵠᐃᐃ[20] = Af(60, 60, 0, Ⲇⵠ[921], 3);
    this.ⵠᐃᐃ[20].id = 20;
    this.ΔΔⵠ[95] = Af(60, 60, 0, Ⲇⵠ[922], 3);
    this.ΔΔⵠ[95].id = 95;
    this.ⲆΔⲆ[21] = Af(68, 68, 0, Ⲇⵠ[927], 3);
    this.ⲆΔⲆ[21].id = 21;
    this.ⵠᐃᐃ[21] = Af(60, 60, 0, Ⲇⵠ[925], 3);
    this.ⵠᐃᐃ[21].id = 21;
    this.ΔΔⵠ[96] = Af(60, 60, 0, Ⲇⵠ[926], 3);
    this.ΔΔⵠ[96].id = 96;
    this.ⲆΔⲆ[22] = Af(68, 68, 0, Ⲇⵠ[931], 3);
    this.ⲆΔⲆ[22].id = 22;
    this.ⵠᐃᐃ[22] = Af(60, 60, 0, Ⲇⵠ[929], 3);
    this.ⵠᐃᐃ[22].id = 22;
    this.ΔΔⵠ[97] = Af(60, 60, 0, Ⲇⵠ[930], 3);
    this.ΔΔⵠ[97].id = 97;
    this.ⲆΔⲆ[60] = Af(68, 68, 0, Ⲇⵠ[736], 3);
    this.ⲆΔⲆ[60].id = 60;
    this.ⵠᐃᐃ[60] = Af(60, 60, 0, Ⲇⵠ[735], 3);
    this.ⵠᐃᐃ[60].id = 60;
    this.ΔΔⵠ[127] = Af(60, 60, 0, Ⲇⵠ[737], 3);
    this.ΔΔⵠ[127].id = 127;
    this.ⲆΔⲆ[90] = Af(68, 68, 0, Ⲇⵠ[739], 3);
    this.ⲆΔⲆ[90].id = 90;
    this.ⵠᐃᐃ[90] = Af(60, 60, 0, Ⲇⵠ[738], 3);
    this.ⵠᐃᐃ[90].id = 90;
    this.ΔΔⵠ[173] = Af(60, 60, 0, Ⲇⵠ[740], 3);
    this.ΔΔⵠ[173].id = 173;
    this.ⲆΔⲆ[92] = Af(68, 68, 0, Ⲇⵠ[745], 3);
    this.ⲆΔⲆ[92].id = 92;
    this.ⵠᐃᐃ[92] = Af(60, 60, 0, Ⲇⵠ[744], 3);
    this.ⵠᐃᐃ[92].id = 92;
    this.ΔΔⵠ[174] = Af(60, 60, 0, Ⲇⵠ[746], 3);
    this.ΔΔⵠ[174].id = 174;
    this.ⲆΔⲆ[93] = Af(68, 68, 0, Ⲇⵠ[748], 3);
    this.ⲆΔⲆ[93].id = 93;
    this.ⵠᐃᐃ[93] = Af(60, 60, 0, Ⲇⵠ[747], 3);
    this.ⵠᐃᐃ[93].id = 93;
    this.ΔΔⵠ[175] = Af(60, 60, 0, Ⲇⵠ[749], 3);
    this.ΔΔⵠ[175].id = 175;
    this.ⲆΔⲆ[91] = Af(68, 68, 0, Ⲇⵠ[742], 3);
    this.ⲆΔⲆ[91].id = 91;
    this.ⵠᐃᐃ[91] = Af(60, 60, 0, Ⲇⵠ[741], 3);
    this.ⵠᐃᐃ[91].id = 91;
    this.ΔΔⵠ[176] = Af(60, 60, 0, Ⲇⵠ[743], 3);
    this.ΔΔⵠ[176].id = 176;
    this.ⲆΔⲆ[100] = Af(68, 68, 0, Ⲇⵠ[1165], 3);
    this.ⲆΔⲆ[100].id = 100;
    this.ⵠᐃᐃ[100] = Af(60, 60, 0, Ⲇⵠ[1164], 3);
    this.ⵠᐃᐃ[100].id = 100;
    this.ΔΔⵠ[gh.ᐃᐃⲆᐃΔ] = Af(60, 60, 0, Ⲇⵠ[sh.ⵠᐃⲆᐃᐃᐃⵠΔΔ], 3);
    this.ΔΔⵠ[gh.ᐃᐃⲆᐃΔ].id = gh.ᐃᐃⲆᐃΔ;
    this.ⲆΔⲆ[34] = Af(68, 68, 0, Ⲇⵠ[945], 3);
    this.ⲆΔⲆ[34].id = 34;
    this.ⵠᐃᐃ[34] = Af(60, 60, 0, Ⲇⵠ[943], 3);
    this.ⵠᐃᐃ[34].id = 34;
    this.ΔΔⵠ[30] = Af(60, 60, 0, Ⲇⵠ[944], 3);
    this.ΔΔⵠ[30].id = 30;
    this.ⲆΔⲆ[44] = Af(68, 68, 0, Ⲇⵠ[948], 3);
    this.ⲆΔⲆ[44].id = 44;
    this.ⵠᐃᐃ[44] = Af(60, 60, 0, Ⲇⵠ[946], 3);
    this.ⵠᐃᐃ[44].id = 44;
    this.ΔΔⵠ[92] = Af(60, 60, 0, Ⲇⵠ[947], 3);
    this.ΔΔⵠ[92].id = 92;
    this.ⲆΔⲆ[17] = Af(68, 68, 0, Ⲇⵠ[878], 3);
    this.ⲆΔⲆ[17].id = 17;
    this.ⵠᐃᐃ[17] = Af(60, 60, 0, Ⲇⵠ[877], 3);
    this.ⵠᐃᐃ[17].id = 17;
    this.ΔΔⵠ[32] = Af(60, 60, 0, Ⲇⵠ[879], 3);
    this.ΔΔⵠ[32].id = 32;
    this.ⲆΔⲆ[63] = Af(68, 68, 0, Ⲇⵠ[568], 3);
    this.ⲆΔⲆ[63].id = 63;
    this.ⵠᐃᐃ[63] = Af(60, 60, 0, Ⲇⵠ[566], 3);
    this.ⵠᐃᐃ[63].id = 63;
    this.ΔΔⵠ[130] = Af(60, 60, 0, Ⲇⵠ[567], 3);
    this.ΔΔⵠ[130].id = 130;
    this.ⲆΔⲆ[187] = Af(68, 68, 0, Ⲇⵠ[591], 3);
    this.ⲆΔⲆ[187].id = 187;
    this.ⵠᐃᐃ[187] = Af(60, 60, 0, Ⲇⵠ[253], 3);
    this.ⵠᐃᐃ[187].id = 187;
    this.ⲆΔⲆ[uh.ᐃⲆⲆⲆⵠⵠΔ] = Af(68, 68, 0, Ⲇⵠ[sh.ΔᐃᐃⵠⲆΔⵠᐃⲆ], 3);
    this.ⲆΔⲆ[uh.ᐃⲆⲆⲆⵠⵠΔ].id = uh.ᐃⲆⲆⲆⵠⵠΔ;
    this.ⵠᐃᐃ[uh.ᐃⲆⲆⲆⵠⵠΔ] = Af(60, 60, 0, Ⲇⵠ[sh.ⲆⵠⲆᐃΔᐃⵠⵠᐃ], 3);
    this.ⵠᐃᐃ[uh.ᐃⲆⲆⲆⵠⵠΔ].id = uh.ᐃⲆⲆⲆⵠⵠΔ;
    this.ⲆΔⲆ[uh.ᐃⵠΔⵠⲆΔⲆ] = Af(68, 68, 0, Ⲇⵠ[sh.ⵠⵠⲆⵠᐃᐃⵠⵠⲆ], 3);
    this.ⲆΔⲆ[uh.ᐃⵠΔⵠⲆΔⲆ].id = uh.ᐃⵠΔⵠⲆΔⲆ;
    this.ⵠᐃᐃ[uh.ᐃⵠΔⵠⲆΔⲆ] = Af(60, 60, 0, Ⲇⵠ[sh.ᐃⵠΔᐃⵠᐃΔⵠⵠ], 3);
    this.ⵠᐃᐃ[uh.ᐃⵠΔⵠⲆΔⲆ].id = uh.ᐃⵠΔⵠⲆΔⲆ;
    this.ⲆΔⲆ[uh.ⲆⵠⲆⵠⲆΔⵠ] = Af(68, 68, 0, Ⲇⵠ[sh.ⵠⲆⲆⵠᐃᐃΔΔΔ], 3);
    this.ⲆΔⲆ[uh.ⲆⵠⲆⵠⲆΔⵠ].id = uh.ⲆⵠⲆⵠⲆΔⵠ;
    this.ⵠᐃᐃ[uh.ⲆⵠⲆⵠⲆΔⵠ] = Af(60, 60, 0, Ⲇⵠ[sh.ⵠⵠⵠΔⲆⵠⵠⵠⲆ], 3);
    this.ⵠᐃᐃ[uh.ⲆⵠⲆⵠⲆΔⵠ].id = uh.ⲆⵠⲆⵠⲆΔⵠ;
    this.ⲆΔⲆ[uh.ΔⲆⲆⵠΔᐃΔ] = Af(68, 68, 0, Ⲇⵠ[sh.ⲆⵠΔᐃⲆⲆⵠᐃⵠ], 3);
    this.ⲆΔⲆ[uh.ΔⲆⲆⵠΔᐃΔ].id = uh.ΔⲆⲆⵠΔᐃΔ;
    this.ⵠᐃᐃ[uh.ΔⲆⲆⵠΔᐃΔ] = Af(60, 60, 0, Ⲇⵠ[sh.ⵠⲆⵠᐃⵠΔᐃᐃⲆ], 3);
    this.ⵠᐃᐃ[uh.ΔⲆⲆⵠΔᐃΔ].id = uh.ΔⲆⲆⵠΔᐃΔ;
    this.ⲆΔⲆ[uh.ⵠⲆᐃⵠⲆΔΔ] = Af(68, 68, 0, Ⲇⵠ[sh.ᐃΔⵠΔΔΔᐃΔⲆ], 3);
    this.ⲆΔⲆ[uh.ⵠⲆᐃⵠⲆΔΔ].id = uh.ⵠⲆᐃⵠⲆΔΔ;
    this.ⵠᐃᐃ[uh.ⵠⲆᐃⵠⲆΔΔ] = Af(60, 60, 0, Ⲇⵠ[sh.ⲆᐃᐃΔΔⵠᐃΔᐃ], 3);
    this.ⵠᐃᐃ[uh.ⵠⲆᐃⵠⲆΔΔ].id = uh.ⵠⲆᐃⵠⲆΔΔ;
    this.ᐃΔᐃᐃᐃΔⲆ = function () {
      for (var a = Hx.ᐃⵠΔⲆ.ᐃᐃⵠΔᐃ, b = 10, c = 10, d = 0; d < a.length; d++) {
        if (d > 0 && !(d % 4)) {
          b += a[0].info.width + 10;
          c = 10;
        }
        a[d].info.translate.x = b;
        a[d].info.translate.y = c;
        c += 10 + a[d].info.height;
      }
    };
    this.ᐃᐃⵠⵠΔⲆⵠ = function () {
      var a = Math.floor((10 + this.ⲆΔⲆ[0].info.ⵠᐃ[0].width) * Math.floor((3 + Hx.ᐃⵠΔⲆ.ᐃᐃⵠΔᐃ.length) / 4) + 35);
      for (var b = 0; b < this.ⲆΔⲆ.length; b++) {
        if (this.ⲆΔⲆ[b]) {
          this.ⲆΔⲆ[b].info.translate.x = a;
          this.ⲆΔⲆ[b].info.translate.y = 22;
        }
      }
      this.ⲆΔΔⵠΔⵠⵠ.info.translate.x = a + 17;
      this.ⲆΔΔⵠΔⵠⵠ.info.translate.y = 22 + Ⲇⵠ[339].height;
      this.ⲆΔΔⵠΔⲆⵠ.info.translate.x = a + 17;
      this.ⲆΔΔⵠΔⲆⵠ.info.translate.y = 30;
      this.ᐃΔᐃⵠⵠᐃᐃ.info.translate.x = a + 17;
      this.ᐃΔᐃⵠⵠᐃᐃ.info.translate.y = 22 + Ⲇⵠ[339].height;
    };
    this.ᐃΔᐃΔΔᐃⲆⵠᐃ = function () {
      var a = Math.floor((Yo - Ⲇⵠ[556][0].width) / 2);
      for (var b = 0; this.ⲆΔᐃΔᐃ.length > b; b++) {
        this.ⲆΔᐃΔᐃ[b].button.info.translate.x = a;
        this.ⲆΔᐃΔᐃ[b].button.info.translate.y = -13;
      }
    };
    this.ⲆΔᐃⵠᐃΔΔ = function () {
      var a = 12 + Math.floor((10 + this.ᐃᐃᐃⵠΔᐃⲆ.info.ⵠᐃ[0].width) * Math.floor((3 + Hx.ᐃⵠΔⲆ.ᐃᐃⵠΔᐃ.length) / 4) + 35);
      this.ᐃᐃᐃⵠΔᐃⲆ.info.translate.x = a;
      this.ᐃᐃᐃⵠΔᐃⲆ.info.translate.y = 33;
      this.ⲆᐃⵠⲆⲆᐃᐃ.info.translate.x = this.ᐃᐃᐃⵠΔᐃⲆ.info.translate.x;
      this.ⲆᐃⵠⲆⲆᐃᐃ.info.translate.y = 137;
      this.ⵠⵠⲆⵠΔⲆᐃ.info.translate.x = this.ᐃᐃᐃⵠΔᐃⲆ.info.translate.x;
      this.ⵠⵠⲆⵠΔⲆᐃ.info.translate.y = 240;
    };
    this.ᐃⲆᐃᐃⵠⵠⲆ = function () {
      var a = 12 + Math.floor((10 + this.ⵠᐃⲆΔΔⵠΔ.info.ⵠᐃ[0].width) * Math.floor((3 + Hx.ᐃⵠΔⲆ.ᐃᐃⵠΔᐃ.length) / 4) + 35);
      this.ⵠᐃⲆΔΔⵠΔ.info.translate.x = a;
      this.ⵠᐃⲆΔΔⵠΔ.info.translate.y = 36;
      a += 83;
      this.ᐃᐃⲆⵠⵠᐃᐃ.info.translate.x = a;
      this.ᐃᐃⲆⵠⵠᐃᐃ.info.translate.y = 36;
      this.ⵠⲆⲆΔⵠⵠΔ.info.translate.x = a;
      this.ⵠⲆⲆΔⵠⵠΔ.info.translate.y = 36;
      this.ᐃⵠΔᐃᐃᐃⵠ.info.translate.x = a;
      this.ᐃⵠΔᐃᐃᐃⵠ.info.translate.y = 36;
      this.ⵠᐃΔΔⵠⵠⲆ.info.translate.x = a;
      this.ⵠᐃΔΔⵠⵠⲆ.info.translate.y = 36;
      this.ΔⲆΔΔΔⵠⵠ.info.translate.x = a;
      this.ΔⲆΔΔΔⵠⵠ.info.translate.y = 36;
    };
    this.ᐃΔΔΔⵠⵠᐃ = function () {
      var a = 12 + Math.floor(Math.floor((3 + Hx.ᐃⵠΔⲆ.ᐃᐃⵠΔᐃ.length) / 4) * (10 + this.ⲆⲆⲆᐃⵠⲆΔ.info.ⵠᐃ[0].width) + 35);
      this.ⲆⲆⲆᐃⵠⲆΔ.info.translate.x = a;
      this.ⲆⲆⲆᐃⵠⲆΔ.info.translate.y = 36;
      a += 83;
      this.ᐃᐃᐃⵠᐃΔⵠ.info.translate.x = a;
      this.ᐃᐃᐃⵠᐃΔⵠ.info.translate.y = 36;
    };
    this.ΔᐃⲆᐃⵠᐃᐃ = function () {
      var a = Math.floor(Math.floor((3 + Hx.ᐃⵠΔⲆ.ᐃᐃⵠΔᐃ.length) / 4) * (10 + this.ΔⵠᐃᐃⲆⵠⲆ.info.ⵠᐃ[0].width) + 35);
      this.ΔⵠᐃᐃⲆⵠⲆ.info.translate.x = a;
      this.ΔⵠᐃᐃⲆⵠⲆ.info.translate.y = 22;
    };
    this.ⲆⲆⵠⲆᐃᐃⲆ = function () {
      var a = Hx.ⵠᐃΔⵠ.ⲆᐃⵠⲆΔ;
      if (a.length > 0) {
        var b = Math.floor((Yo - Hx.ⵠᐃΔⵠ.max * (a[0].info.width + 5)) / 2);
      }
      for (var c = 0; c < a.length; c++) {
        a[c].info.translate.x = b + (a[c].info.width + 5) * c;
        a[c].info.translate.y = jq - a[c].info.width - 10;
        this.ⵠⵠⲆΔⲆ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
        this.ⵠⵠⲆΔⲆ[a[c].id].info.translate.y = a[c].info.translate.y - this.ⵠⵠⲆΔⲆ[a[c].id].info.ⵠᐃ[0].height - 6;
      }
    };
    var h;
    var n = 0;
    function p() {
      f.ⲆΔᐃ();
      if (++n == 30) {
        f.ᐃⵠΔΔᐃᐃΔ();
        f.ⲆΔᐃ();
        return;
      }
      bj.setTimeout(p, 33);
    }
    this.ΔΔᐃⵠⲆ = function (a) {
      if (Hx.ⲆᐃⲆᐃⲆ.open) {
        Hx.ⲆᐃⲆᐃⲆ.ΔΔᐃⵠⲆ();
      }
      if (Hx.ᐃⲆᐃΔⵠ.open) {
        Hx.ᐃⲆᐃΔⵠ.ΔΔᐃⵠⲆ();
      }
      document.getElementById("team_box").style.display = "none";
      f.ΔᐃΔᐃⲆ.style.display = "none";
      f.ΔᐃΔᐃⲆ.open = Ni;
      f.sign.style.display = "none";
      f.sign.open = Nq;
      document.getElementById("shop_starterkit").style.display = "none";
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
      f.ⵠΔᐃΔ.open = false;
      document.getElementById("option_in_game").style.display = "none";
      f.options.open = false;
      document.getElementById("sure_delete").style.display = "none";
      f.ᐃᐃᐃΔ.open = false;
      document.getElementById("cancel_sure_delete").style.display = "none";
      f.ΔᐃⲆΔⲆ.open = bn;
      document.getElementById("chronoquest").style.display = "none";
      f.ⵠⲆⵠⵠ.open = false;
      h = a;
      f.ΔⵠⲆⵠΔᐃⲆ();
      f.Ⲇᐃ.style.cursor = f.ⲆⲆⵠⲆⲆⲆΔ;
      Lx.ΔΔᐃⵠⲆ();
      q = -1;
      t();
      Rx();
    };
    var q = -1;
    function t() {
      f.ⲆΔᐃ();
      if (++q == 30) {
        f.stop();
        h();
        return;
      }
      bj.setTimeout(t, 33);
    }
    this.ⵠⲆΔᐃΔ = I;
    this.stop = function () {
      this.ⵠⲆΔᐃΔ = false;
    };
    this.ⵠᐃΔⵠΔ = function () {
      Jx.ᐃΔᐃᐃⵠᐃΔⲆΔ();
      f.ⵠⲆΔᐃΔ = pl;
      q = -1;
      n = 0;
      p();
    };
    this.ⲆΔᐃ = function () {
      this.ᐃⲆΔΔᐃ.translate.x = Yo - this.ᐃⲆΔΔᐃ.ⵠᐃ.width - 10;
      this.ᐃⲆΔΔᐃ.translate.y = 5;
      Gx.ᐃⲆΔⵠᐃ.translate.x = this.ᐃⲆΔΔᐃ.translate.x - Ⲇⵠ[725][0].width - 85;
      Gx.ᐃⲆΔⵠᐃ.translate.y = 10;
      this.ⵠΔᐃΔ.button.info.translate.x = this.ᐃⲆΔΔᐃ.translate.x - Ⲇⵠ[708][0].width - 10;
      this.ⵠΔᐃΔ.button.info.translate.y = 10;
      this.ⵠⲆⵠⵠ.button.info.translate.x = this.ᐃⲆΔΔᐃ.translate.x - Ⲇⵠ[755][0].width - 20;
      this.ⵠⲆⵠⵠ.button.info.translate.y = this.ⵠΔᐃΔ.button.info.translate.y + Ⲇⵠ[708][0].height + 5;
      this.options.button.info.translate.x = this.ᐃⲆΔΔᐃ.translate.x - Ⲇⵠ[727][0].width - 20;
      this.options.button.info.translate.y = this.ⵠⲆⵠⵠ.button.info.translate.y + Ⲇⵠ[727][0].height + 18;
      this.ᐃⲆⵠᐃ.ⲆⲆⵠΔΔⲆⲆ.info.translate.x = this.ᐃⲆΔΔᐃ.translate.x - Ⲇⵠ[727][0].width - 20;
      this.ᐃⲆⵠᐃ.ⲆⲆⵠΔΔⲆⲆ.info.translate.y = this.options.button.info.translate.y + Ⲇⵠ[783][0].height;
      this.ᐃⲆⵠᐃ.ΔΔΔⲆᐃⲆⵠ.info.translate.x = this.ᐃⲆΔΔᐃ.translate.x - Ⲇⵠ[727][0].width - 20;
      this.ᐃⲆⵠᐃ.ΔΔΔⲆᐃⲆⵠ.info.translate.y = this.options.button.info.translate.y + Ⲇⵠ[783][0].height;
      this.ΔᐃΔᐃⲆ.button.info.translate.x = this.ᐃⲆΔΔᐃ.translate.x - Ⲇⵠ[795][0].width - 20;
      this.ΔᐃΔᐃⲆ.button.info.translate.y = this.ᐃⲆⵠᐃ.ⲆⲆⵠΔΔⲆⲆ.info.translate.y + Ⲇⵠ[795][0].height;
      Hx.ⵠΔⵠⵠᐃ.translate.x = this.ᐃⲆΔΔᐃ.translate.x - 63 - 85;
      Hx.ⵠΔⵠⵠᐃ.translate.y = 100;
      Hx.ᐃⲆΔᐃⵠ.translate.x = this.ᐃⲆΔΔᐃ.translate.x - Ⲇⵠ[517].width - 85;
      Hx.ᐃⲆΔᐃⵠ.translate.y = Hx.ⵠΔⵠⵠᐃ.translate.y + 10 + Ⲇⵠ[546].height;
      this.ⵠⵠΔⲆⲆ.translate.y = jq - 3 - 193;
      this.ⵠⵠΔⲆⲆ.translate.x = Yo - 3 - 193;
      this.ⵠΔⲆⵠ.translate.x = 5;
      this.ⵠΔⲆⵠ.translate.y = jq - this.ⵠΔⲆⵠ.ⵠᐃ.height - 5;
      this.ⵠⲆⲆΔⲆ.button.info.translate.x = kq - 45.5;
      this.ⵠⲆⲆΔⲆ.button.info.translate.y = 50;
      this.ᐃΔᐃᐃᐃΔⲆ();
      this.ⲆⲆⵠⲆᐃᐃⲆ();
      this.ᐃᐃⵠⵠΔⲆⵠ();
      this.ΔᐃⲆᐃⵠᐃᐃ();
      this.ᐃΔΔΔⵠⵠᐃ();
      this.ᐃⲆᐃᐃⵠⵠⲆ();
      this.ⲆΔᐃⵠᐃΔΔ();
      this.ᐃΔᐃΔΔᐃⲆⵠᐃ();
      this.sign.ⲆⲆΔⵠΔᐃⲆ();
      Wp();
      Hx.ⲆᐃⲆᐃⲆ.ⲆΔᐃ();
      Hx.ᐃⲆᐃΔⵠ.ⲆΔᐃ();
      this.ᐃΔⵠΔᐃᐃⲆᐃⲆ.ⲆΔᐃ();
      this.ⵠΔᐃΔ.ⵠΔᐃᐃΔⲆⵠ.ⲆΔᐃ();
      this.ⵠΔᐃΔ.list.ⲆΔᐃ();
      this.ᐃᐃᐃΔ.ⲆΔᐃ();
      this.ΔᐃⲆΔⲆ.ⲆΔᐃ();
      this.ⵠⲆⵠⵠ.ⲆΔᐃ();
      this.ⵠⲆⲆΔⲆ.ⲆΔᐃ();
      this.options.ⲆΔᐃ();
      this.ΔᐃΔᐃⲆ.ⲆΔᐃ();
      this.sign.ⲆΔᐃ();
      var a = 0;
      if (n != 30) {
        a = 1500 / (n + 1) - 50;
      }
      if (q != -1) {
        a = -(1500 / (30 - q + 1) - 48);
      }
      this.ⵠⲆⲆΔⲆ.button.info.translate.y -= a > 0 ? a : -a;
      this.ᐃⲆΔΔᐃ.translate.y -= a > 0 ? a : -a;
      Hx.ⵠΔⵠⵠᐃ.translate.y -= a > 0 ? a : -a;
      Hx.ᐃⲆΔᐃⵠ.translate.y -= a > 0 ? a : -a;
      this.ⵠΔᐃΔ.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠⲆⵠⵠ.button.info.translate.y -= a > 0 ? a : -a;
      this.options.button.info.translate.y -= a > 0 ? a : -a;
      this.ΔᐃΔᐃⲆ.button.info.translate.y -= a > 0 ? a : -a;
      this.ᐃⲆⵠᐃ.ⲆⲆⵠΔΔⲆⲆ.info.translate.y -= a > 0 ? a : -a;
      this.ᐃⲆⵠᐃ.ΔΔΔⲆᐃⲆⵠ.info.translate.y -= a > 0 ? a : -a;
      Gx.ᐃⲆΔⵠᐃ.translate.y -= a > 0 ? a : -a;
      this.ⵠΔⲆⵠ.translate.y -= a < 0 ? a : -a;
      this.ⵠⵠΔⲆⲆ.translate.y -= a < 0 ? a : -a;
    };
    this.ᐃΔᐃᐃⵠᐃⵠⲆΔ = function () {
      if (!Hx.ⲆΔⵠⵠⲆ.enabled && this.ΔΔⲆΔΔᐃⲆ && !Hx.ᐃΔΔⵠΔ) {
        Xu();
      }
      mv();
      (function () {
        var a = Gx.ᐃⲆΔ[0];
        if (Gx.mode === 0 || Gx.mode === 7 || Gx.mode === 2 || Gx.mode === 4 || Gx.mode === 5 || Gx.mode === 6 || Gx.mode === 3) {
          for (var b = 0; b < a.length; b++) {
            a[b].ⲆⵠⲆΔᐃᐃⵠ();
          }
        } else if (Gx.mode === 1) {
          for (b = 0; a.length > b; b++) {
            if (Hx.ᐃᐃⲆⵠⲆᐃᐃ || Hx.ᐃⲆΔᐃⵠ.enabled || a[b].ΔⵠΔⲆ.ΔᐃΔΔⵠ !== "spectator") {
              a[b].ⲆⵠⲆΔᐃᐃⵠ();
            }
          }
        }
      })();
      if (this.ΔΔⲆΔΔᐃⲆ) {
        Hp();
        if (this.ᐃᐃΔᐃΔᐃⲆ === 1) {
          this.ⵠΔᐃΔ.button.ⵠᐃⲆᐃ(c);
        }
        if (Gx.mode !== 2 && Gx.mode !== 4 && Gx.mode !== 5 && this.ⵠᐃΔⲆᐃᐃΔ === 1) {
          this.ⵠⲆⵠⵠ.button.ⵠᐃⲆᐃ(c);
        }
        this.options.button.ⵠᐃⲆᐃ(c);
        if (this.ᐃⲆⵠΔⵠᐃⵠ === 1) {
          this.ΔᐃΔᐃⲆ.button.ⵠᐃⲆᐃ(c);
        }
        if (Lx.ⵠᐃΔⵠΔ) {
          this.ᐃⲆⵠᐃ.ⲆⲆⵠΔΔⲆⲆ.ⵠᐃⲆᐃ(c);
        } else {
          this.ᐃⲆⵠᐃ.ΔΔΔⲆᐃⲆⵠ.ⵠᐃⲆᐃ(c);
        }
        kv();
        dv();
        this.ⵠΔⲆⵠ.ⵠᐃⲆᐃ();
        iv();
        cv();
        $u();
        Zp();
        lv();
        Up();
        Np();
        (function () {
          if (!Hx.ΔⵠⲆⲆ.open && !Hx.ᐃⲆⲆⵠᐃ.open && !Hx.ⲆΔⵠᐃ.open && !Hx.ⲆᐃᐃΔ.open && !Hx.ⲆᐃᐃⲆ.open) {
            Hx.ᐃⵠⵠᐃⲆ.open = false;
            var a = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
            var b = 100;
            if (a) {
              for (var c = 0; Gx.ᐃⲆΔ[35].length > c; c++) {
                var d = Gx.ᐃⲆΔ[35][c];
                var e = ᐃⵠⵠ.ⲆⲆⲆΔ(d, a);
                if (e < b) {
                  b = e;
                  Hx.ᐃⵠⵠᐃⲆ.open = true;
                  Hx.ᐃⵠⵠᐃⲆ.ᐃⵠⲆⲆ = d.ᐃⵠⲆⲆ;
                  Hx.ᐃⵠⵠᐃⲆ.ᐃⲆⲆⵠΔ = d.id;
                }
              }
            }
          }
        })();
        _p();
        Lp();
        Dp();
        Ip();
        Wp();
        Sp();
      }
      if (Hx.ⲆΔⵠⵠⲆ.enabled) {
        Op();
      }
      Qp();
      if (this.ΔΔⲆΔΔᐃⲆ && this.ⲆⵠᐃⵠⲆⲆⵠ === 1) {
        Uu();
      }
      Hx.ⵠⵠΔⲆⲆⵠΔ.ⵠᐃⲆᐃ();
      Hx.alert.ⵠᐃⲆᐃ("#FFF", "#000");
      if (this.ΔΔⲆΔΔᐃⲆ) {
        Hx.ⲆΔⵠⵠⲆ.ⵠᐃⲆᐃ();
        Hx.ⵠⲆⲆΔⲆ.ⵠᐃⲆᐃ();
        Hx.ⵠᐃΔⵠ.ⵠᐃΔΔⲆⲆⲆ.ⵠᐃⲆᐃ(Nx.ΔΔΔᐃ.x, Nx.ΔΔΔᐃ.y);
      }
      qp();
    };
    this.ⲆⵠⲆⲆⵠⲆΔᐃⵠ = function () {
      Hx.ΔΔⲆ.ⲆΔᐃ();
      Hx.ⵠΔⲆⵠ.ⲆΔᐃ();
      if (!Hx.reconnect.enabled && Hx.ᐃⵠⵠᐃⵠ) {
        Hx.control.ⲆΔᐃ();
        //Hx.ⵠΔⵠⵠᐃ.ⲆΔᐃ();
      }
      Gx.ⲆΔᐃ();
      this.ⵠⲆⵠⵠ.ᐃⲆΔΔⵠΔⵠⲆⲆ();
    };
    this.ⲆᐃᐃᐃΔΔΔΔᐃ = function () {
      nf();
    };
    this.ΔΔᐃΔⵠᐃⲆⵠΔ = function () {
      Jx.ᐃΔΔᐃⲆΔᐃⲆⲆ();
      Jx.ΔᐃᐃⵠⵠⵠΔᐃΔ();
      Jx.ᐃᐃᐃΔⵠⵠⲆⵠᐃ();
      Jx.ⵠⲆⲆⵠᐃΔⲆⲆⵠ();
    };
    this.ⵠᐃⲆᐃ = function () {
      if (!Hx.reconnect.enabled && Hx.ᐃⵠⵠᐃⵠ) {
        this.ΔΔᐃΔⵠᐃⲆⵠΔ();
      }
      Lx.ᐃΔᐃⵠᐃⲆΔᐃⲆ();
      this.ⲆⵠⲆⲆⵠⲆΔᐃⵠ();
      if (Fx.ΔⵠⲆⲆᐃᐃⵠ !== 1) {
        this.ⲆᐃᐃᐃΔΔΔΔᐃ();
        this.ᐃΔᐃᐃⵠᐃⵠⲆΔ();
      } else {
        var a = ᐃΔ.ⵠᐃΔᐃⵠⲆⲆ;
        Gp(c, a, kq - a.width / 4, Zo - a.height / 4, a.width / 2, a.height / 2);
      }
    };
    this.ᐃⵠⵠⲆⲆᐃᐃ = function (a) {
      if (Hx.ⲆᐃⲆᐃⲆ.open && a.keyCode === 27) {
        Hx.ⲆᐃⲆᐃⲆ.ΔΔᐃⵠⲆ();
      } else if (Hx.ᐃⲆᐃΔⵠ.open && a.keyCode === 27) {
        Hx.ᐃⲆᐃΔⵠ.ΔΔᐃⵠⲆ();
      } else if (Hx.ⲆᐃⲆᐃⲆ.open || Hx.ᐃⲆᐃΔⵠ.open || a.keyCode != 79 || q != -1) {
        if (a.keyCode == 13 && q == -1) {
          if (Hx.ᐃⲆᐃΔⵠ.open) {
            Hx.ᐃⲆᐃΔⵠ.ᐃΔᐃⵠⲆᐃⲆ();
          } else {
            Hx.ⲆᐃⲆᐃⲆ.ⵠᐃΔⵠΔ();
          }
        } else if (!Hx.ⲆᐃⲆᐃⲆ.open && !Hx.ᐃⲆᐃΔⵠ.open) {
          if (a.keyCode === 82) {
            Hx.ⵠΔⵠⵠᐃ.ᐃΔΔⵠᐃⲆⲆ();
          } else if (a.keyCode !== 80 || Gx.mode !== 1 || Hx.ᐃᐃⲆⵠⲆᐃᐃ) {
            if (a.keyCode >= 49 && a.keyCode <= 57) {
              if (Hx.ᐃⵠΔⲆ.id < 0) {
                var b = a.keyCode - 49;
                var c = Hx.ⵠᐃΔⵠ.ⲆᐃⵠⲆΔ[b];
                if (c) {
                  Jx.ΔΔⵠⵠᐃ(c.id, b);
                }
              }
            } else if (a.keyCode == 89) {
              Hx.ᐃⵠᐃⲆⵠⵠᐃ = !Hx.ᐃⵠᐃⲆⵠⵠᐃ;
            } else if (a.keyCode == 71) {
              Hx.ᐃⵠΔⲆ.ⵠᐃᐃⲆΔⵠΔᐃΔ();
            }
          } else {
            Hx.ᐃⲆΔᐃⵠ.ᐃΔΔⵠᐃⲆⲆ();
          }
        }
      } else {
        Hx.ᐃⲆᐃΔⵠ.ΔⲆᐃᐃⵠⲆⵠᐃⲆ();
      }
      Mx.up(a);
    };
    this.ᐃΔⵠᐃΔΔΔ = function (a) {
      Mx.down(a);
      if (a.keyCode == 8 && !Hx.ⲆᐃⲆᐃⲆ.open && !Hx.ᐃⲆᐃΔⵠ.open) {
        a.preventDefault();
      }
    };
    this.ᐃΔⵠⵠᐃⵠⲆ = function (b) {
      Nx.ΔΔΔᐃ = xf(f.Ⲇᐃ, b);
      var c = false;
      if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0) {
        f.ⵠⵠΔⲆⲆ.focus(Nx.ΔΔΔᐃ);
      }
      var d = Hx.ΔⵠⲆⲆ;
      if (Hx.ᐃⵠΔⲆ.id < 0 && d.id >= 0) {
        if (!Hx.ΔⵠⲆⲆ.lock || Hx.id === Hx.ΔⵠⲆⲆ.ᐃⵠⲆⲆ) {
          c |= f.ⲆΔⲆ[Hx.ΔⵠⲆⲆ.id].ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
        }
      }
      var e = Hx.ⲆΔⵠᐃ;
      if (e.open && e.ΔΔⵠΔⲆ > 0) {
        c |= f.ᐃᐃᐃⵠᐃΔⵠ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
      }
      var j = Hx.ⲆᐃᐃⲆ;
      if (j.open && j.ΔΔΔᐃᐃΔΔ > 0) {
        c |= f.ᐃᐃⲆⵠⵠᐃᐃ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
        c |= f.ⵠⲆⲆΔⵠⵠΔ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
        c |= f.ᐃⵠΔᐃᐃᐃⵠ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
        c |= f.ⵠᐃΔΔⵠⵠⲆ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
        c |= f.ΔⲆΔΔΔⵠⵠ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
      }
      var a = Hx.ⲆᐃᐃΔ;
      if (a.open && a.ⲆⵠⲆⵠⲆΔⲆ > 0) {
        c |= f.ⵠⵠⲆⵠΔⲆᐃ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
      }
      if (Hx.sign.open) {
        c |= f.sign.button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
      }
      if (!Hx.ΔⵠⲆⲆ.lock) {
        if (Hx.ΔⵠⲆⲆ.ΔⲆⲆΔⵠᐃΔ) {
          c |= f.ᐃΔᐃⵠⵠᐃᐃ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
        }
      }
      if (Hx.ΔⵠⲆⲆ.ⲆⵠⲆⲆΔⵠΔ) {
        c |= f.ⲆΔΔⵠΔⵠⵠ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
      }
      if (Hx.ᐃⵠΔⲆ.id < 0 && !f.ⵠΔᐃΔ.open && !f.ᐃᐃᐃΔ.open && !f.ΔᐃⲆΔⲆ.open && !f.ⵠⲆⵠⵠ.open && !f.options.open && !f.ΔᐃΔᐃⲆ.open) {
        for (var k = Hx.ⵠᐃΔⵠ.ⲆᐃⵠⲆΔ, m = 0; k.length > m; m++) {
          var n = k[m].ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
          c |= n;
          if (n) {
            Hx.ⵠᐃΔⵠ.ⵠᐃΔΔⲆⲆⲆ.start(m, Nx.ΔΔΔᐃ);
          }
          if (d.open && (d.id < 0 || k[m].id == d.id) || Hx.ᐃⲆⲆⵠᐃ.open && k[m].id === 109 || Hx.ᐃⵠⵠᐃⲆ.open && k[m].id === 180 || Hx.ⲆᐃᐃΔ.open && (k[m].id === 109 || k[m].id === 131) || Hx.ⲆΔⵠᐃ.open && k[m].id === 134 || Hx.ⲆᐃᐃⲆ.open && k[m].id === 109) {
            c |= f.ⵠⵠⲆΔⲆ[k[m].id].ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
          }
        }
      }
      if (Hx.ⵠⵠⵠⲆⲆ.open) {
        c |= f.ⵠⵠⵠⲆⲆ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
      }
      if (f.ⵠⲆΔᐃⵠ != -1) {
        if (c |= f.ⲆΔᐃΔᐃ[f.ⵠⲆΔᐃⵠ].button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf)) {
          var o = Tj;
        }
      } else {
        o = Nq;
      }
      if (Hx.ᐃⵠΔⲆ.id < 0 && Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && !o && !f.ⵠΔᐃΔ.open && !f.ᐃᐃᐃΔ.open && !f.options.open && !f.ΔᐃⲆΔⲆ.open && !f.ΔᐃΔᐃⲆ.open && !Hx.ᐃΔΔⵠΔ) {
        k = Hx.ᐃⵠΔⲆ.ᐃᐃⵠΔᐃ;
        m = 0;
        for (; k.length > m; m++) {
          c |= k[m].ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
        }
      }
      if (Hx.ᐃⵠΔⲆ.id < 0 && Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && Hx.ⵠⲆⲆΔⲆ.open && !f.ⵠΔᐃΔ.open && !f.ᐃᐃᐃΔ.open && !f.options.open && !f.ΔᐃⲆΔⲆ.open && !f.ⵠⲆⵠⵠ.open && !f.ΔᐃΔᐃⲆ.open) {
        c |= f.ⵠⲆⲆΔⲆ.button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
      }
      if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && !f.ᐃᐃᐃΔ.open && !f.options.open && !f.ΔᐃⲆΔⲆ.open && !f.ⵠⲆⵠⵠ.open && !f.ΔᐃΔᐃⲆ.open) {
        c |= f.ⵠΔᐃΔ.button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
      }
      if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && !f.ⵠΔᐃΔ.open && !f.ᐃᐃᐃΔ.open && !f.ΔᐃⲆΔⲆ.open && !f.ⵠⲆⵠⵠ.open && !f.ΔᐃΔᐃⲆ.open) {
        c |= f.options.button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
      }
      if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && !f.ⵠΔᐃΔ.open && !f.ᐃᐃᐃΔ.open && !f.ΔᐃⲆΔⲆ.open && !f.ⵠⲆⵠⵠ.open && !f.options.open) {
        c |= f.ΔᐃΔᐃⲆ.button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
      }
      if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && !f.ⵠΔᐃΔ.open && !f.ᐃᐃᐃΔ.open && !f.ΔᐃⲆΔⲆ.open && !f.ⵠⲆⵠⵠ.open && !f.options.open && !f.ΔᐃΔᐃⲆ.open) {
        if (Lx.ⵠᐃΔⵠΔ) {
          c |= f.ᐃⲆⵠᐃ.ⲆⲆⵠΔΔⲆⲆ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
        } else {
          c |= f.ᐃⲆⵠᐃ.ΔΔΔⲆᐃⲆⵠ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
        }
      }
      if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && !f.ⵠΔᐃΔ.open && !f.ΔᐃΔᐃⲆ.open && !f.ᐃᐃᐃΔ.open && !f.options.open && !f.ΔᐃⲆΔⲆ.open && Gx.mode !== 2 && Gx.mode !== 4 && Gx.mode !== 5) {
        c |= f.ⵠⲆⵠⵠ.button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
      }
      if (!c && !f.ⵠΔᐃΔ.open && !f.ᐃᐃᐃΔ.open && !f.options.open && !f.ΔᐃⲆΔⲆ.open && !f.ⵠⲆⵠⵠ.open && !f.ΔᐃΔᐃⲆ.open && !f.sign.open) {
        if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ >= 0) {
          Jx.ⲆΔⲆᐃⲆᐃᐃⲆΔ();
        } else if (!o) {
          Nx.down();
        }
      }
    };
    this.ΔᐃⵠⲆⵠⵠᐃ = function (b) {
      Nx.ΔΔΔᐃ = xf(f.Ⲇᐃ, b);
      Nx.up();
      if (!Hx.ⵠᐃΔⵠ.ⵠᐃΔΔⲆⲆⲆ.release()) {
        var c = Hx.ΔⵠⲆⲆ;
        var d = Hx.ᐃⲆⲆⵠᐃ;
        var e = Hx.ᐃⵠⵠᐃⲆ;
        var i = Hx.ⲆΔⵠᐃ;
        var j = Hx.ⲆᐃᐃⲆ;
        var k = Hx.ⲆᐃᐃΔ;
        if (Hx.control.attack) {
          Hx.control.attack = 0;
          Jx.ⵠᐃΔᐃⲆᐃΔᐃᐃ();
        }
        if (f.ⵠⲆΔᐃⵠ != -1) {
          var m = f.ⲆΔᐃΔᐃ[f.ⵠⲆΔᐃⵠ].button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff);
          var n = document.getElementById("team_box").style;
          if (m && n.display == "inline-block") {
            n.display = "none";
            return;
          }
          if (m) {
            f.ⲆΔᐃΔᐃ[f.ⵠⲆΔᐃⵠ].action();
          }
        }
        if (Hx.ᐃⵠΔⲆ.id < 0 && c.id >= 0 && !f.ᐃᐃᐃΔ.open) {
          if (!Hx.ΔⵠⲆⲆ.lock || Hx.id === Hx.ΔⵠⲆⲆ.ᐃⵠⲆⲆ) {
            if (m = f.ⲆΔⲆ[Hx.ΔⵠⲆⲆ.id].ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) {
              Jx.ΔⲆᐃΔᐃⲆᐃⵠΔ(c);
            }
          }
        }
        if ((i = Hx.ⲆΔⵠᐃ).open && i.ΔΔⵠΔⲆ > 0 && !f.ᐃᐃᐃΔ.open) {
          if (m = f.ᐃᐃᐃⵠᐃΔⵠ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) {
            Jx.ᐃⵠⲆᐃⲆⲆⲆΔΔ(i);
          }
        }
        if ((j = Hx.ⲆᐃᐃⲆ).open && j.ΔΔΔᐃᐃΔΔ > 0 && !f.ᐃᐃᐃΔ.open) {
          switch (j.type) {
            case 24:
              if (m = f.ᐃᐃⲆⵠⵠᐃᐃ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) {
                Jx.ΔⲆΔᐃΔⵠΔ(j);
              }
              break;
            case 25:
              if (m = f.ⵠⲆⲆΔⵠⵠΔ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) {
                Jx.ΔⲆΔᐃΔⵠΔ(j);
              }
              break;
            case 26:
              if (m = f.ᐃⵠΔᐃᐃᐃⵠ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) {
                Jx.ΔⲆΔᐃΔⵠΔ(j);
              }
              break;
            case 27:
              if (m = f.ⵠᐃΔΔⵠⵠⲆ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) {
                Jx.ΔⲆΔᐃΔⵠΔ(j);
              }
              break;
            case 28:
              if (m = f.ΔⲆΔΔΔⵠⵠ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) {
                Jx.ΔⲆΔᐃΔⵠΔ(j);
              }
          }
        }
        if ((k = Hx.ⲆᐃᐃΔ).open && k.ⲆⵠⲆⵠⲆΔⲆ > 0 && !f.ᐃᐃᐃΔ.open) {
          if (m = f.ⵠⵠⲆⵠΔⲆᐃ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) {
            Jx.ᐃᐃⵠⲆΔΔᐃΔⵠ(k);
          }
        }
        if (Hx.sign.open && !f.ᐃᐃᐃΔ.open) {
          if (m = f.sign.button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) {
            f.sign.select();
          }
        }
        if (!Hx.ΔⵠⲆⲆ.lock && !f.ᐃᐃᐃΔ.open) {
          if (Hx.ΔⵠⲆⲆ.ΔⲆⲆΔⵠᐃΔ && (m = f.ᐃΔᐃⵠⵠᐃᐃ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff))) {
            Jx.ⲆⵠⲆⵠΔᐃΔᐃⵠ(c);
          }
        }
        if (Hx.ΔⵠⲆⲆ.ⲆⵠⲆⲆΔⵠΔ && !f.ᐃᐃᐃΔ.open && (m = f.ⲆΔΔⵠΔⵠⵠ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff))) {
          Jx.ΔΔⲆᐃⲆᐃⲆΔᐃ(c);
          if (ga) {
            ga("send", "event", "Game", "lockpick");
          }
        }
        if (Hx.ⵠⵠⵠⲆⲆ.open) {
          if (m = f.ⵠⵠⵠⲆⲆ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) {
            Jx.ⵠⵠⵠⲆⲆ();
            if (ga) {
              ga("send", "event", "Game", "resurrection");
            }
          }
        }
        if (Hx.ᐃⵠΔⲆ.id < 0 && !Hx.ⲆΔⵠⵠⲆ.enabled && !f.ᐃᐃᐃΔ.open) {
          for (var g = Hx.ⵠᐃΔⵠ.ⲆᐃⵠⲆΔ, o = 0; g.length > o; o++) {
            if (m = g[o].ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) {
              if (b.which != 1 || b.shiftKey) {
                if ((b.which == 1 && b.shiftKey || b.which == 3) && Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0) {
                  f.ᐃᐃᐃΔ.ⲆᐃΔⵠⵠⲆⵠ(g[o].id);
                }
              } else {
                Jx.ΔΔⵠⵠᐃ(g[o].id, o);
              }
            } else if (c.open && (c.id < 0 || c.id === g[o].id)) {
              if ((m = f.ⵠⵠⲆΔⲆ[g[o].id].ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) && Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0) {
                Jx.Ⲇⵠᐃⵠᐃⵠᐃᐃⵠ(c, g[o].id, b.shiftKey ? 10 : 1);
              }
            } else if (e.open && g[o].id === 180) {
              if ((m = f.ⵠⵠⲆΔⲆ[g[o].id].ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) && Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0) {
                Jx.ΔⲆⵠⵠΔⲆᐃⵠⵠ(e);
              }
            } else if (d.open && g[o].id === 109) {
              if ((m = f.ⵠⵠⲆΔⲆ[g[o].id].ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) && Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0) {
                Jx.ⲆᐃⵠᐃⲆΔᐃΔΔ(d, b.shiftKey ? 10 : 1);
              }
            } else if (i.open && g[o].id === 134) {
              if ((m = f.ⵠⵠⲆΔⲆ[g[o].id].ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) && Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0) {
                Jx.ⲆⵠΔᐃΔᐃⲆΔⵠ(i, b.shiftKey ? 10 : 1);
              }
            } else if (j.open && g[o].id === 109) {
              if ((m = f.ⵠⵠⲆΔⲆ[g[o].id].ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) && Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0) {
                Jx.ΔᐃΔⲆⵠⵠⵠΔⲆ(j, b.shiftKey ? 10 : 1);
              }
            } else if (k.open && (g[o].id === 109 || g[o].id === 131)) {
              if ((m = f.ⵠⵠⲆΔⲆ[g[o].id].ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) && Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0) {
                if (g[o].id === 109) {
                  Jx.ⵠᐃᐃⵠⵠⲆⵠ(k, b.shiftKey ? 10 : 1, 0);
                } else {
                  Jx.ⵠᐃᐃⵠⵠⲆⵠ(k, 0, b.shiftKey ? 10 : 1);
                }
              }
            }
          }
        }
        if (Hx.ᐃⵠΔⲆ.id < 0 && Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && !Hx.ⲆΔⵠⵠⲆ.enabled && !f.ᐃᐃᐃΔ.open && !Hx.ᐃΔΔⵠΔ) {
          g = Hx.ᐃⵠΔⲆ.ᐃᐃⵠΔᐃ;
          o = 0;
          for (; o < g.length; o++) {
            if (m = g[o].ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) {
              ⲆᐃΔΔⵠ = Jx.ⵠⲆΔⵠΔΔᐃΔᐃ(g[o].id);
              if (ⲆᐃΔΔⵠ && ga) {
                ga("send", "event", "Game", "craft", vh[Nt[g[o].id].ᐃᐃΔΔ].name);
              }
            }
          }
        }
        if (Hx.ᐃⵠΔⲆ.id < 0 && Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && Hx.ⵠⲆⲆΔⲆ.open && !f.ΔᐃΔᐃⲆ.open && !f.ⵠΔᐃΔ.open && !f.ᐃᐃᐃΔ.open && !f.options.open && !f.ΔᐃⲆΔⲆ.open && !f.ⵠⲆⵠⵠ.open) {
          if (m = f.ⵠⲆⲆΔⲆ.button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf)) {
            Kx.ⵠⲆⲆΔⲆ.select();
          }
        }
        if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && !f.ⵠΔᐃΔ.open && !f.ᐃᐃᐃΔ.open && !f.ΔᐃΔᐃⲆ.open && !f.ΔᐃⲆΔⲆ.open && !f.ⵠⲆⵠⵠ.open && !f.options.open) {
          if (Lx.ⵠᐃΔⵠΔ) {
            if (m = f.ᐃⲆⵠᐃ.ⲆⲆⵠΔΔⲆⲆ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) {
              Lx.select();
              if (ga) {
                ga("send", "event", "Game", "sound on");
              }
            }
          } else if (m = f.ᐃⲆⵠᐃ.ΔΔΔⲆᐃⲆⵠ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) {
            Lx.select();
            if (ga) {
              ga("send", "event", "Game", "sound off");
            }
          }
        }
        if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && !f.ⵠΔᐃΔ.open && !f.ᐃᐃᐃΔ.open && !f.ΔᐃⲆΔⲆ.open && !f.ⵠⲆⵠⵠ.open && !f.ΔᐃΔᐃⲆ.open) {
          if (m = f.options.button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) {
            f.options.ΔⵠⲆᐃΔⲆΔΔⵠ();
            if (ga) {
              ga("send", "event", "Game", "options");
            }
          }
        }
        if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && !f.ⵠΔᐃΔ.open && !f.ᐃᐃᐃΔ.open && !f.ΔᐃⲆΔⲆ.open && !f.ⵠⲆⵠⵠ.open && !f.options.open && f.ᐃⲆⵠΔⵠᐃⵠ === 1) {
          if (m = f.ΔᐃΔᐃⲆ.button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) {
            f.ΔᐃΔᐃⲆ.select();
            if (ga) {
              ga("send", "event", "Game", "market");
            }
          }
        }
        if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && !f.ᐃᐃᐃΔ.open && !f.ΔᐃΔᐃⲆ.open && !f.options.open && !f.ΔᐃⲆΔⲆ.open && !f.ⵠⲆⵠⵠ.open && f.ᐃᐃΔᐃΔᐃⲆ === 1) {
          if (m = f.ⵠΔᐃΔ.button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) {
            f.ⵠΔᐃΔ.ᐃᐃⵠΔⵠΔⵠⵠⲆ();
            if (ga) {
              ga("send", "event", "Game", "recipe");
            }
          }
        }
        if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && !f.ⵠΔᐃΔ.open && !f.ᐃᐃᐃΔ.open && !f.options.open && !f.ΔᐃⲆΔⲆ.open && !f.ΔᐃΔᐃⲆ.open && Gx.mode !== 2 && Gx.mode !== 4 && Gx.mode !== 5 && f.ⵠᐃΔⲆᐃᐃΔ === 1) {
          if (m = f.ⵠⲆⵠⵠ.button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) {
            f.ⵠⲆⵠⵠ.select();
            if (ga) {
              ga("send", "event", "Game", "quests");
            }
          }
        }
        if (Hx.ᐃⵠΔⲆ.ⵠⲆⲆΔΔ && b.which == 3) {
          f.ΔᐃⲆΔⲆ.ⲆᐃΔⵠⵠⲆⵠ();
        }
      }
    };
    this.ᐃⲆᐃⲆⵠΔᐃ = Tn;
    this.ⵠⲆⵠⲆᐃⲆⲆ = function (b) {
      Nx.ΔΔΔᐃ = xf(f.Ⲇᐃ, b);
      var c = Ks;
      Kx.ⲆΔᐃⲆⲆ.display = 0;
      Hx.ⵠᐃΔⵠ.ⵠᐃΔΔⲆⲆⲆ.ⲆⲆⵠᐃⵠ(Nx.ΔΔΔᐃ);
      if (f.ⵠⲆΔᐃⵠ != -1) {
        c |= f.ⲆΔᐃΔᐃ[f.ⵠⲆΔᐃⵠ].button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
      }
      var d = Hx.ⲆΔⵠᐃ;
      if (d.open && d.ΔΔⵠΔⲆ > 0) {
        c |= f.ᐃᐃᐃⵠᐃΔⵠ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
      }
      var e = Hx.ⲆᐃᐃⲆ;
      if (e.open && e.ΔΔΔᐃᐃΔΔ > 0) {
        c |= f.ᐃᐃⲆⵠⵠᐃᐃ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
        c |= f.ⵠⲆⲆΔⵠⵠΔ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
        c |= f.ᐃⵠΔᐃᐃᐃⵠ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
        c |= f.ⵠᐃΔΔⵠⵠⲆ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
        c |= f.ΔⲆΔΔΔⵠⵠ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
      }
      var i = Hx.ⲆᐃᐃΔ;
      if (i.open && i.ⲆⵠⲆⵠⲆΔⲆ > 0) {
        c |= f.ⵠⵠⲆⵠΔⲆᐃ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
      }
      if (Hx.sign.open) {
        c |= f.sign.button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
      }
      var j = Hx.ΔⵠⲆⲆ;
      if (Hx.ᐃⵠΔⲆ.id < 0 && j.id >= 0 && !Hx.ⲆΔⵠⵠⲆ.enabled && (!Hx.ΔⵠⲆⲆ.lock || Hx.id === Hx.ΔⵠⲆⲆ.ᐃⵠⲆⲆ)) {
        c |= f.ⲆΔⲆ[j.id].ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
      }
      if (Hx.ⵠⵠⵠⲆⲆ.open) {
        c |= f.ⵠⵠⵠⲆⲆ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
      }
      if (!Hx.ΔⵠⲆⲆ.lock && !Hx.ⲆΔⵠⵠⲆ.enabled) {
        if (Hx.ΔⵠⲆⲆ.ΔⲆⲆΔⵠᐃΔ) {
          c |= f.ᐃΔᐃⵠⵠᐃᐃ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
        }
      }
      if (Hx.ΔⵠⲆⲆ.ⲆⵠⲆⲆΔⵠΔ && !Hx.ⲆΔⵠⵠⲆ.enabled) {
        c |= f.ⲆΔΔⵠΔⵠⵠ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
      }
      if (Hx.ᐃⵠΔⲆ.id < 0 && !Hx.ⲆΔⵠⵠⲆ.enabled) {
        for (var k = Hx.ⵠᐃΔⵠ.ⲆᐃⵠⲆΔ, m = 0; k.length > m; m++) {
          var o = k[m].ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
          c |= Kx.ⲆΔᐃⲆⲆ.ᐃΔΔⵠ(o, k[m], 0);
          if (j.open && (j.id < 0 || k[m].id == j.id) || Hx.ᐃⲆⲆⵠᐃ.open && k[m].id == 109 || Hx.ᐃⵠⵠᐃⲆ.open && k[m].id === 180 || Hx.ⲆᐃᐃΔ.open && (k[m].id == 109 || k[m].id == 131) || Hx.ⲆΔⵠᐃ.open && k[m].id == 134 || Hx.ⲆᐃᐃⲆ.open && k[m].id == 109) {
            c |= f.ⵠⵠⲆΔⲆ[k[m].id].ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
          }
        }
      }
      if (Hx.ᐃⵠΔⲆ.id < 0 && Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && !Hx.ⲆΔⵠⵠⲆ.enabled && !Hx.ᐃΔΔⵠΔ) {
        k = Hx.ᐃⵠΔⲆ.ᐃᐃⵠΔᐃ;
        m = 0;
        for (; m < k.length; m++) {
          o = $g;
          o = k[m].ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
          c |= Kx.ⲆΔᐃⲆⲆ.ᐃΔΔⵠ(o, k[m], 1);
        }
      }
      if (Hx.ᐃⵠΔⲆ.id < 0 && Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && Hx.ⵠⲆⲆΔⲆ.open && !f.ⵠΔᐃΔ.open && !f.ᐃᐃᐃΔ.open && !f.options.open && !f.ΔᐃⲆΔⲆ.open && !f.ⵠⲆⵠⵠ.open && !f.ΔᐃΔᐃⲆ.open) {
        c |= f.ⵠⲆⲆΔⲆ.button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
      }
      if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && !f.ᐃᐃᐃΔ.open && !f.options.open && !f.ΔᐃⲆΔⲆ.open && !f.ⵠⲆⵠⵠ.open && !f.ΔᐃΔᐃⲆ.open && f.ᐃᐃΔᐃΔᐃⲆ === 1) {
        c |= f.ⵠΔᐃΔ.button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
      }
      if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && !f.ⵠΔᐃΔ.open && !f.ᐃᐃᐃΔ.open && !f.ΔᐃⲆΔⲆ.open && !f.ⵠⲆⵠⵠ.open && !f.ΔᐃΔᐃⲆ.open) {
        c |= f.options.button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
      }
      if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && !f.ⵠΔᐃΔ.open && !f.ᐃᐃᐃΔ.open && !f.ΔᐃⲆΔⲆ.open && !f.ⵠⲆⵠⵠ.open && !f.options.open && f.ᐃⲆⵠΔⵠᐃⵠ === 1) {
        c |= f.ΔᐃΔᐃⲆ.button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
      }
      if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && !f.ⵠΔᐃΔ.open && !f.ᐃᐃᐃΔ.open && !f.ΔᐃⲆΔⲆ.open && !f.ⵠⲆⵠⵠ.open && !f.options.open && !f.ΔᐃΔᐃⲆ.open) {
        if (Lx.ⵠᐃΔⵠΔ) {
          c |= f.ᐃⲆⵠᐃ.ⲆⲆⵠΔΔⲆⲆ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
        } else {
          c |= f.ᐃⲆⵠᐃ.ΔΔΔⲆᐃⲆⵠ.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
        }
      }
      if (Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ < 0 && !f.ⵠΔᐃΔ.open && !f.ᐃᐃᐃΔ.open && !f.options.open && !f.ΔᐃⲆΔⲆ.open && !f.ΔᐃΔᐃⲆ.open && Gx.mode !== 2 && Gx.mode !== 4 && Gx.mode !== Nf.ⵠᐃⲆⲆΔⲆᐃᐃⲆ && f.ⵠᐃΔⲆᐃᐃΔ === 1) {
        c |= f.ⵠⲆⵠⵠ.button.ᐃΔΔⵠ(f.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
      }
      if (f.ᐃⲆᐃⲆⵠΔᐃ !== c) {
        f.ᐃⲆᐃⲆⵠΔᐃ = c;
        a.style.cursor = c ? f.ᐃⵠΔⲆⵠΔᐃ : f.ⲆⲆⵠⲆⲆⲆΔ;
      }
    };
    this.ᐃⵠΔΔᐃᐃΔ = function () {
      bj.addEventListener("mousedown", this.ᐃΔⵠⵠᐃⵠⲆ, false);
      bj.addEventListener("mouseup", this.ΔᐃⵠⲆⵠⵠᐃ, th);
      bj.addEventListener("mousemove", this.ⵠⲆⵠⲆᐃⲆⲆ, Ni);
      bj.addEventListener("keyup", this.ᐃⵠⵠⲆⲆᐃᐃ, Fa);
      bj.addEventListener("keydown", this.ᐃΔⵠᐃΔΔΔ, th);
    };
    this.ΔⵠⲆⵠΔᐃⲆ = function () {
      bj.removeEventListener("mousedown", this.ᐃΔⵠⵠᐃⵠⲆ, Sq);
      bj.removeEventListener("mouseup", this.ΔᐃⵠⲆⵠⵠᐃ, Tn);
      bj.removeEventListener("mousemove", this.ⵠⲆⵠⲆᐃⲆⲆ, Tn);
      bj.removeEventListener("keyup", this.ᐃⵠⵠⲆⲆᐃᐃ, N);
      bj.removeEventListener("keydown", this.ᐃΔⵠᐃΔΔΔ, bn);
    };
  }
  function sx(b, c, d, e) {
    Fi($f, b, c, d, e);
    const f = function (b, c, d, e, f, g) {
      ck($f, b, c, d, e, f, g);
      const a = en(Vw[0], Vw[1], Vw[2], Vw[3], Vw[4], Vw[5]);
      Mf(Vw[0], Vw[1]);
      return ~(a & 34098) & (a | 34098);
    }(Vw[0], Vw[1], Vw[2], Vw[3], Vw[0], Vw[1]);
    const g = zp(Vw[2], Vw[3], Vw[0]);
    return (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 8 & 255)) + (8 << ((f ^ g) & 255)) + (0 << ((f ^ g) >> 16 & 255));
  }
  function tx(a, q) {
    this.Ⲇᐃ = a;
    this.Ⲇ = q;
    if (bj.navigator.userAgent.indexOf("Edge") > -1) {
      this.ⲆⲆⵠⲆⲆⲆΔ = "default";
      this.ᐃⵠΔⲆⵠΔᐃ = "pointer";
    } else {
      this.ⲆⲆⵠⲆⲆⲆΔ = "url('img/cursor0.png'), default";
      this.ᐃⵠΔⲆⵠΔᐃ = "url('img/cursor1.png'), pointer";
    }
    var w = this;
    function e(c, d, e, i, j) {
      var a = this;
      for (var k = d + 9, m = 0, n = i, o = d; k > o; o++) {
        w.buttons[o].info.callback = q;
        w.buttons[o].info.ⵠΔᐃΔⲆᐃΔΔᐃ = c;
      }
      function p() {
        var a = c[n];
        Fx.ΔⲆⲆΔᐃⵠⵠ = kf(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, Ne, 10, 8);
        if (a.level !== Ns) {
          Fx.Ⲇᐃⵠⵠⵠᐃⵠ = kf("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, Ne, 10, 8);
        } else {
          Fx.Ⲇᐃⵠⵠⵠᐃⵠ = kf("by " + a.Ⲇⵠᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, Bo, 10, 8);
        }
      }
      function q() {
        if (this.ⲆⵠⲆᐃᐃⲆᐃ !== n && this.ⲆⵠⲆᐃᐃⲆᐃ !== -1) {
          if (this.ᐃᐃΔΔⲆΔᐃ > 0) {
            if (d === ᐃⲆΔΔᐃⵠⲆ) {
              P(f, ha, "none");
            } else {
              P(y, ha, "none");
            }
          } else if (d === ᐃⲆΔΔᐃⵠⲆ) {
            P(f, ia, "inline-block");
          } else {
            P(y, ia, "inline-block");
          }
          n = this.ⲆⵠⲆᐃᐃⲆᐃ;
          e(this.ⲆⵠⲆᐃᐃⲆᐃ);
          p();
        }
      }
      this.ᐃⵠᐃⲆⲆ = function () {
        for (var a = d, b = m * 3; k > a && c.length > b; a++, b++) {
          if (Δᐃⵠ.ⲆΔⲆᐃΔΔⵠ !== c[b].ΔⵠⲆ || j[b] !== 0) {
            w.buttons[a].info.ⲆⵠⲆᐃᐃⲆᐃ = b;
            for (var e = 0; e < 3; e++) {
              w.buttons[a].info.ⵠᐃ[e] = ΔⵠⵠⵠⲆ[c[b].ΔⵠⲆ][e];
              w.buttons[a].info.active = ia;
              w.buttons[a].info.ᐃᐃΔΔⲆΔᐃ = j[b];
            }
          } else {
            w.buttons[a].info.ⲆⵠⲆᐃᐃⲆᐃ = -1;
            w.buttons[a].info.active = ha;
          }
        }
        for (; k > a; a++) {
          w.buttons[a].info.ⲆⵠⲆᐃᐃⲆᐃ = -1;
          w.buttons[a].info.active = ha;
        }
        p();
      };
      w.buttons[k].info.callback = function () {
        if (m > 0) {
          m--;
        }
        a.ᐃⵠᐃⲆⲆ();
      };
      w.buttons[k + 1].info.callback = function () {
        if (c.length > m * 3 + 9) {
          m++;
        }
        a.ᐃⵠᐃⲆⲆ();
      };
    }
    function t() {
      var b = Number(ᐃⲆᐃΔ.get("starve_crate"));
      var c = Number(ᐃⲆᐃΔ.get("starve_dead"));
      var d = Number(ᐃⲆᐃΔ.get("starve_book"));
      var e = Number(ᐃⲆᐃΔ.get("starve_bag"));
      var f = Number(ᐃⲆᐃΔ.get("starve_skin"));
      var a = Number(ᐃⲆᐃΔ.get("starve_accessory"));
      w.ⲆΔⵠΔ = f || 0;
      w.ⵠⵠⲆᐃΔ = d || 0;
      w.ΔΔΔⵠⲆ = b || 1;
      w.ⲆⵠⲆⲆⲆ = a || 0;
      w.ⵠⲆⲆᐃⲆ = e || 0;
      w.ᐃⵠΔΔⵠ = c || 0;
    }
    function i() {
      for (var a = ⲆⵠΔⵠ.Δⵠⵠⵠᐃ, b = 0; a.length > b; b++) {
        if (a[b].ΔⵠⲆ === Δᐃⵠ.ᐃΔᐃΔΔ) {
          w.unlock.ⲆΔⵠΔ[b] = 1;
        } else {
          w.unlock.ⲆΔⵠΔ[b] = 0;
        }
      }
      a = ⲆⵠΔⵠ.ⵠⵠΔⵠⲆ;
      b = 0;
      for (; b < a.length; b++) {
        if (Δᐃⵠ.ᐃΔᐃΔΔ === a[b].ΔⵠⲆ) {
          w.unlock.ⲆⵠⲆⲆⲆ[b] = 1;
        } else {
          w.unlock.ⲆⵠⲆⲆⲆ[b] = 0;
        }
      }
      a = ⲆⵠΔⵠ.ⵠᐃᐃⲆ;
      b = 0;
      for (; a.length > b; b++) {
        if (a[b].ΔⵠⲆ === Δᐃⵠ.ᐃΔᐃΔΔ) {
          w.unlock.ⵠⲆⲆᐃⲆ[b] = 1;
        } else {
          w.unlock.ⵠⲆⲆᐃⲆ[b] = 0;
        }
      }
      a = ⲆⵠΔⵠ.ⵠΔⲆᐃⲆ;
      b = 0;
      for (; b < a.length; b++) {
        if (a[b].ΔⵠⲆ === Δᐃⵠ.ᐃΔᐃΔΔ) {
          w.unlock.ⵠⵠⲆᐃΔ[b] = 1;
        } else {
          w.unlock.ⵠⵠⲆᐃΔ[b] = 0;
        }
      }
      a = ⲆⵠΔⵠ.ΔⲆⵠᐃΔ;
      b = 0;
      for (; a.length > b; b++) {
        if (a[b].ΔⵠⲆ === Δᐃⵠ.ᐃΔᐃΔΔ) {
          w.unlock.ΔΔΔⵠⲆ[b] = 1;
          w.unlock.ᐃⵠΔΔⵠ[b] = 1;
        } else {
          w.unlock.ΔΔΔⵠⲆ[b] = 0;
          w.unlock.ᐃⵠΔΔⵠ[b] = 0;
        }
      }
    }
    this.waiting = false;
    this.ΔΔⵠᐃⵠⲆᐃ = 0;
    this.ᐃΔⲆⲆⵠᐃᐃ = -1;
    this.ᐃⵠᐃΔⵠΔⵠ = {
      translate: {
        x: 0,
        y: 0
      },
      angle: 0,
      ⵠᐃ: Ⲇⵠ[301],
      ⵠᐃⲆᐃ: function () {
        this.angle += Ox * 2;
        q.save();
        q.translate(this.translate.x + this.ⵠᐃ.width / 2, this.translate.y + this.ⵠᐃ.height / 2);
        q.rotate(this.angle);
        Gp(q, this.ⵠᐃ, -this.ⵠᐃ.width / 2, -this.ⵠᐃ.height / 2);
        q.restore();
      }
    };
    this.ᐃⲆΔᐃⵠⵠᐃ = {
      id: document.getElementById("langselect"),
      style: document.getElementById("langselect").style,
      translate: {
        x: 0,
        y: 0
      },
      ⲆΔᐃ: function () {
        this.style.left = Math.floor(this.translate.x) + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ᐃΔⲆⵠΔ = 0;
    this.ⲆᐃᐃⵠⲆΔⲆ = -1;
    this.ΔⵠⵠⵠΔᐃⵠ = Lk;
    this.ΔΔᐃⲆΔΔᐃ = "";
    this.ᐃⵠⲆⵠΔᐃⵠ = "";
    this.ΔⵠᐃΔΔΔⵠ = tr;
    this.ᐃⵠⲆΔᐃ = 0;
    this.ΔⵠⵠⲆⲆⵠⵠ = -1;
    this.ⲆΔⵠⲆᐃⲆΔ = undefined;
    this.ⵠⲆⲆⵠⵠⲆΔ = 0;
    this.ΔᐃᐃⲆⵠΔᐃ = 0;
    this.ᐃΔⲆⲆᐃⵠΔ = 0;
    this.ⵠⲆⵠᐃⵠ = 0;
    this.ⲆΔⵠⵠᐃᐃᐃ = 0;
    this.time = 0;
    this.ΔⲆᐃᐃᐃ = 0;
    this.ᐃΔᐃΔΔΔᐃ = 0;
    this.ᐃⲆΔΔⵠⵠⲆ = 0;
    this.ⵠΔⵠᐃⵠΔᐃ = 0;
    this.ⲆΔⵠⲆᐃⲆⵠ = 0;
    this.ⲆΔΔΔⲆΔⲆ = [];
    this.ᐃⵠΔᐃᐃ = -1;
    this.ᐃⲆΔΔⲆΔⵠ = -1;
    this.Ⲇᐃᐃⵠⵠⵠⵠ = -1;
    this.ᐃᐃⲆᐃᐃⵠⲆ = Ns;
    this.ⲆᐃⵠⲆΔⲆᐃ = Qa;
    this.ⵠᐃᐃᐃᐃᐃⲆ = -1;
    this.ΔᐃⲆΔⵠⲆᐃ = -1;
    this.ᐃⵠⵠⵠᐃᐃᐃ = -1;
    this.ΔΔΔⵠⵠᐃⵠ = -1;
    this.ⲆᐃΔⵠΔΔΔ = undefined;
    this.ⵠᐃᐃᐃⲆⲆΔ = undefined;
    this.ΔΔⲆΔⲆⵠΔ = undefined;
    this.ΔⲆⲆΔᐃⵠⵠ = tr;
    this.Ⲇᐃⵠⵠⵠᐃⵠ = Og;
    this.ⵠⵠⵠⵠⲆⵠⵠ = undefined;
    this.ⲆⲆⵠᐃⵠⵠΔ = tr;
    this.ⲆⵠᐃⵠⵠΔᐃ = Kn;
    this.ⲆⵠΔⵠⵠᐃⲆ = undefined;
    this.ΔᐃΔⲆᐃΔᐃ = 3;
    this.ⵠⵠᐃΔ = 0;
    this.ⵠᐃΔⵠⵠⵠΔᐃΔ = false;
    this.ⵠⲆᐃᐃᐃ = ᐃⲆᐃΔ.get("starve_quality") ? ᐃⲆᐃΔ.get("starve_quality") : "high";
    if (this.ⵠⲆᐃᐃᐃ === "high") {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      this.ⵠⲆᐃᐃᐃ = 1;
    } else {
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      this.ⵠⲆᐃᐃᐃ = 0;
    }
    this.ᐃᐃᐃⲆᐃⵠⵠⵠΔ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      ᐃⲆᐃΔ.set("starve_quality", "high", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 1;
      Kx.ᐃᐃΔΔᐃΔᐃ();
      Fx.ⵠⲆᐃᐃᐃ = 1;
    };
    this.ⲆΔⵠΔⵠᐃᐃᐃᐃ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      ᐃⲆᐃΔ.set("starve_quality", "low", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 0.5 / (Vr / Zr);
      Kx.ᐃᐃΔΔᐃΔᐃ();
      Fx.ⵠⲆᐃᐃᐃ = 0;
    };
    if (ᐃⲆᐃΔ.get("starve_mapping") === undefined && os === "FR") {
      Mx.ᐃᐃᐃΔⵠΔⲆ();
      this.mapping = "azerty";
    } else {
      this.mapping = ᐃⲆᐃΔ.get("starve_mapping") ? ᐃⲆᐃΔ.get("starve_mapping") : "qwerty";
    }
    if (this.mapping == "azerty") {
      Mx.ᐃᐃᐃΔⵠΔⲆ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    } else {
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    }
    this.ᐃᐃᐃΔⵠΔⲆ = function () {
      Mx.ᐃᐃᐃΔⵠΔⲆ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      ᐃⲆᐃΔ.set("starve_mapping", "azerty", {
        expires: 30
      });
    };
    this.ⵠⲆΔⲆⵠⲆΔ = function () {
      Mx.ⵠⲆΔⲆⵠⲆΔ();
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      ᐃⲆᐃΔ.set("starve_mapping", "qwerty", {
        expires: 30
      });
    };
    this.ᐃⵠⵠⲆᐃⲆⵠ = {
      id: document.getElementById("all_rights_reserved"),
      style: document.getElementById("all_rights_reserved").style,
      translate: {
        x: 0,
        y: 0
      },
      ⲆΔᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    t();
    this.unlock = {};
    this.unlock.ⲆΔⵠΔ = [];
    this.unlock.ⵠⲆⲆᐃⲆ = [];
    this.unlock.ⵠⵠⲆᐃΔ = [];
    this.unlock.ΔΔΔⵠⲆ = [];
    this.unlock.ᐃⵠΔΔⵠ = [];
    this.unlock.ⲆⵠⲆⲆⲆ = [];
    this.ⵠⲆⵠⵠⲆⲆⲆ = 0;
    this.ΔΔⲆⵠⵠⲆΔ = i;
    i();
    this.ΔΔⲆⵠⵠ = {
      id: document.getElementById("trevda"),
      style: document.getElementById("trevda").style,
      translate: {
        y: 0,
        x: 0
      },
      ⲆΔᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    var n;
    var o = 0;
    function r() {
      w.ⲆΔᐃ();
      if (++o == 30) {
        w.ᐃⵠΔΔᐃᐃΔ();
        w.ΔΔⵠᐃⵠⲆᐃ = true;
        w.ⲆΔᐃ();
        return;
      }
      bj.setTimeout(r, 33);
    }
    this.ΔΔᐃⵠⲆ = function (a) {
      n = a;
      w.ΔⵠⲆⵠΔᐃⲆ();
      w.ΔΔⵠᐃⵠⲆᐃ = 0;
      g = -1;
      z();
    };
    var g = -1;
    function z() {
      w.ⲆΔᐃ();
      if (++g == 30) {
        ᐃⲆᐃΔ.set("starve_nickname", w.ΔᐃΔΔⵠ.input.value, {
          expires: 30
        });
        w.ΔᐃΔΔⵠ.style.display = "none";
        w.ⵠΔΔΔⵠ.style.display = "none";
        w.ᐃⲆΔᐃⵠⵠᐃ.style.display = "none";
        w.ᐃⵠⵠⲆᐃⲆⵠ.style.display = "none";
        w.ΔΔⲆⵠⵠ.style.display = "none";
        w.stop();
        n();
        return;
      }
      bj.setTimeout(z, 33);
    }
    this.ⵠⲆΔᐃΔ = Sq;
    this.stop = function () {
      this.ⵠⲆΔᐃΔ = yg;
    };
    this.ⵠᐃΔⵠΔ = function () {
      Tx();
      document.getElementById("game_body").style.backgroundColor = sh.ⲆⲆᐃⲆⵠ[Ex.time];
      w.ΔᐃΔΔⵠ.style.display = "inline-block";
      w.ⵠΔΔΔⵠ.style.display = "inline-block";
      w.ᐃⲆΔᐃⵠⵠᐃ.style.display = "inline-block";
      w.ᐃⵠⵠⲆᐃⲆⵠ.style.display = "inline-block";
      w.ΔΔⲆⵠⵠ.style.display = "inline-block";
      w.waiting = false;
      w.ⵠⲆΔᐃΔ = true;
      g = -1;
      o = 0;
      r();
    };
    this.ⲆⲆΔⵠⵠᐃᐃ = function (a, b) {
      b = b < 0 ? -b : b;
      if (ca === (a.position & ca)) {
        if (Z === (a.position & Z)) {
          a.translate.x = kq + a.translate.ⲆⵠⲆΔⲆ - b;
        } else if ((a.position & _) === _) {
          a.translate.x = kq + a.translate.ⲆⵠⲆΔⲆ + b;
        } else {
          a.translate.x = kq + a.translate.ⲆⵠⲆΔⲆ;
        }
      } else if ((a.position & Z) === Z) {
        a.translate.x = a.translate.ⲆⵠⲆΔⲆ - b;
      } else if (_ === (a.position & _)) {
        a.translate.x = Yo - a.translate.ⲆⵠⲆΔⲆ + b;
      } else {
        a.translate.x = a.translate.ⲆⵠⲆΔⲆ;
      }
      if ((a.position & da) === da) {
        if ((a.position & aa) === aa) {
          a.translate.y = Zo + a.translate.ⲆⵠΔΔᐃ - b;
        } else if (ba === (a.position & ba)) {
          a.translate.y = Zo + a.translate.ⲆⵠΔΔᐃ + b;
        } else {
          a.translate.y = Zo + a.translate.ⲆⵠΔΔᐃ;
        }
      } else if (aa === (a.position & aa)) {
        a.translate.y = a.translate.ⲆⵠΔΔᐃ - b;
      } else if ((a.position & ba) === ba) {
        a.translate.y = jq + a.translate.ⲆⵠΔΔᐃ + b;
      } else {
        a.translate.y = a.translate.ⲆⵠΔΔᐃ;
      }
      if (a.style !== Lk) {
        a.style.left = Math.floor(a.translate.x) + "px";
        a.style.top = Math.floor(a.translate.y) + "px";
      }
    };
    this.ⲆΔᐃ = function () {
      var a = 0;
      if (o != 30 || g != -1) {
        if (o != 30) {
          a = 1500 / (o + 1) - 50;
        }
        if (g != -1) {
          a = -(1750 / (30 - g + 1) - 48);
        }
      }
      for (var b = 0; b < this.ⲆΔΔⵠ.length; b++) {
        this.ⲆⲆΔⵠⵠᐃᐃ(this.ⲆΔΔⵠ[b], a);
      }
      for (b = 0; b < this.buttons.length; b++) {
        this.ⲆⲆΔⵠⵠᐃᐃ(this.buttons[b].info, a);
      }
      for (b = 0; this.ⲆⵠⲆⵠⵠ.length > b; b++) {
        this.ⲆⲆΔⵠⵠᐃᐃ(this.ⲆⵠⲆⵠⵠ[b], a);
      }
      this.ᐃⵠᐃΔⵠΔⵠ.translate.x = (Yo - this.ᐃⵠᐃΔⵠΔⵠ.ⵠᐃ.width) / 2;
      this.ᐃⵠᐃΔⵠΔⵠ.translate.y = 0;
      this.ᐃⲆΔᐃⵠⵠᐃ.translate.x = Yo - 450;
      this.ᐃⲆΔᐃⵠⵠᐃ.translate.y = jq - 40;
      this.ᐃⵠⵠⲆᐃⲆⵠ.translate.x = Yo - 340;
      this.ᐃⵠⵠⲆᐃⲆⵠ.translate.y = jq - 25;
      this.ΔΔⲆⵠⵠ.translate.x = Yo - 320;
      this.ΔΔⲆⵠⵠ.translate.y = 80;
      if (o != 30 || g != -1) {
        var c = 0;
        if (o != 30) {
          c = 1500 / (o + 1) - 50;
        }
        if (g != -1) {
          c = -(1750 / (30 - g + 1) - 48);
        }
        this.ᐃⵠᐃΔⵠΔⵠ.translate.y -= c > 0 ? c : -c;
        this.ᐃⲆΔᐃⵠⵠᐃ.translate.y -= c < 0 ? c : -c;
        this.ᐃⵠⵠⲆᐃⲆⵠ.translate.y -= c < 0 ? c : -c;
      }
      this.ᐃⲆΔᐃⵠⵠᐃ.ⲆΔᐃ();
      this.ᐃⵠⵠⲆᐃⲆⵠ.ⲆΔᐃ();
      this.ΔΔⲆⵠⵠ.ⲆΔᐃ();
    };
    this.ΔᐃⲆᐃΔᐃⵠ = function (b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = 342;
      c.height = 342;
      var e = -Math.PI / 2;
      for (var f = 0; b.length > f; f++) {
        var g = b[f][0];
        var h = b[f][1] * Math.PI / 180;
        d.beginPath();
        d.arc(171, 171, 170, e, e + h, false);
        d.lineTo(171, 171);
        d.fillStyle = g;
        d.fill();
        e += h;
      }
      return c;
    };
    this.ⲆⵠᐃΔΔΔⵠᐃⲆ = function () {
      this.ΔΔᐃⲆΔΔᐃ = document.getElementById("account_nickname_input").value;
      if (this.ᐃⵠⲆⵠΔᐃⵠ !== this.ΔΔᐃⲆΔΔᐃ) {
        this.ᐃⵠⲆⵠΔᐃⵠ = this.ΔΔᐃⲆΔΔᐃ;
        this.ΔⵠᐃΔΔΔⵠ = kf(this.ΔΔᐃⲆΔΔᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
      }
    };
    this.ⵠᐃⲆᐃ = function () {
      Tp();
      Fx.ⵠⲆⲆⵠⵠⲆΔ = ᐃⵠⵠ.ⲆⵠᐃΔⲆ(Fx.ⵠⲆⲆⵠⵠⲆΔ, Fx.ΔᐃᐃⲆⵠΔᐃ, 0.03);
      this.ⲆΔΔⵠ[ᐃΔⲆᐃⲆᐃⲆ].translate.x = this.ⲆΔΔⵠ[0].translate.x + -72 + Fx.ⵠⲆⲆⵠⵠⲆΔ * 165;
      this.ⲆΔΔⵠ[ᐃΔⲆᐃⲆᐃⲆ].translate.ⲆⵠⲆΔⲆ = this.ⲆΔΔⵠ[ᐃΔⲆᐃⲆᐃⲆ].translate.x;
      this.ⲆΔΔⵠ[ᐃΔⲆᐃⲆᐃⲆ].translate.y = this.ⲆΔΔⵠ[0].translate.y + 30;
      this.ⲆΔΔⵠ[ᐃΔⲆᐃⲆᐃⲆ].translate.ⲆⵠΔΔᐃ = this.ⲆΔΔⵠ[ᐃΔⲆᐃⲆᐃⲆ].translate.y;
      for (var i = 2; i < this.ⲆΔΔⵠ.length; i++) {
        if (this.ⲆΔΔⵠ[i].active === ia) {
          this.ⲆΔΔⵠ[i].ⵠᐃⲆᐃ(q);
        }
      }
      var t;
      if ((t = this.ᐃⵠΔᐃᐃ - Date.now()) > 0) {
        var z = Math.floor(t / 60000);
        var N = Math.floor(z / 60);
        if ((z %= 60) !== this.Ⲇᐃᐃⵠⵠⵠⵠ) {
          this.Ⲇᐃᐃⵠⵠⵠⵠ = z;
          z = z < 10 ? "0" + z : "" + z;
          w.ᐃᐃⲆᐃᐃⵠⲆ = kf(z, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (N !== this.ᐃⲆΔΔⲆΔⵠ) {
          this.ᐃⲆΔΔⲆΔⵠ = N;
          N = N < 10 ? "0" + N : "" + N;
          w.ⲆᐃⵠⲆΔⲆᐃ = kf(N, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (V = this.ⲆΔΔⵠ[ⲆᐃⲆᐃΔᐃⲆ]).ⵠᐃⲆᐃ(q);
        var U = this.ⲆᐃⵠⲆΔⲆᐃ;
        Gp(q, U, V.translate.x - U.width / 4 + 182, V.translate.y - U.height / 4 + 40, U.width / 2, U.height / 2);
        U = this.ᐃᐃⲆᐃᐃⵠⲆ;
        Gp(q, U, V.translate.x - U.width / 4 + 251, V.translate.y - U.height / 4 + 40, U.width / 2, U.height / 2);
      }
      if ((t = this.ⵠᐃᐃᐃᐃᐃⲆ - Date.now()) > 0) {
        z = Math.floor(t / 60000);
        N = Math.floor(z / 60);
        var V;
        var X = Math.floor(N / 24);
        N %= 24;
        if ((z %= 60) !== this.ΔΔΔⵠⵠᐃⵠ) {
          this.ΔΔΔⵠⵠᐃⵠ = z;
          z = z < 10 ? "0" + z : "" + z;
          w.ⲆᐃΔⵠΔΔΔ = kf(z, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ᐃⵠⵠⵠᐃᐃᐃ !== N) {
          this.ᐃⵠⵠⵠᐃᐃᐃ = N;
          N = N < 10 ? "0" + N : "" + N;
          w.ⵠᐃᐃᐃⲆⲆΔ = kf(N, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ΔᐃⲆΔⵠⲆᐃ !== X) {
          this.ΔᐃⲆΔⵠⲆᐃ = X;
          X = X < 10 ? "0" + X : "" + X;
          w.ΔΔⲆΔⲆⵠΔ = kf(X, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (V = this.ⲆΔΔⵠ[ᐃΔΔΔⲆⵠΔ]).ⵠᐃⲆᐃ(q);
        U = this.ΔΔⲆΔⲆⵠΔ;
        Gp(q, U, V.translate.x - U.width / 4 + 113, V.translate.y - U.height / 4 + 40, U.width / 2, U.height / 2);
        U = this.ⵠᐃᐃᐃⲆⲆΔ;
        Gp(q, U, V.translate.x - U.width / 4 + 182, V.translate.y - U.height / 4 + 40, U.width / 2, U.height / 2);
        U = this.ⲆᐃΔⵠΔΔΔ;
        Gp(q, U, V.translate.x - U.width / 4 + 251, V.translate.y - U.height / 4 + 40, U.width / 2, U.height / 2);
      }
      if ((this.ⲆᐃᐃⲆⵠ & L) === L) {
        this.buttons[ΔΔⲆΔᐃᐃᐃ].info.state = wf;
      } else if (C === (this.ⲆᐃᐃⲆⵠ & C)) {
        this.buttons[ⲆᐃⲆΔΔⲆⵠ].info.state = wf;
      } else if (m === (this.ⲆᐃᐃⲆⵠ & m)) {
        this.buttons[ⲆⲆᐃᐃᐃΔᐃ].info.state = wf;
      } else if ((this.ⲆᐃᐃⲆⵠ & d) === d) {
        this.buttons[ΔΔⲆⲆΔⲆⲆ].info.state = wf;
      } else if ((this.ⲆᐃᐃⲆⵠ & p) === p) {
        this.buttons[ⲆᐃΔᐃⲆⵠᐃ].info.state = wf;
      } else if (v === (this.ⲆᐃᐃⲆⵠ & v)) {
        this.buttons[ΔⵠⵠΔⵠΔⵠ].info.state = wf;
      } else if (c === (this.ⲆᐃᐃⲆⵠ & c) || (this.ⲆᐃᐃⲆⵠ & O) === O || (this.ⲆᐃᐃⲆⵠ & k) === k || (this.ⲆᐃᐃⲆⵠ & A) === A || x === (this.ⲆᐃᐃⲆⵠ & x) || (this.ⲆᐃᐃⲆⵠ & J) === J || M === (this.ⲆᐃᐃⲆⵠ & M)) {
        this.buttons[ⵠⵠᐃⵠΔⵠΔ].info.state = wf;
      } else if ((this.ⲆᐃᐃⲆⵠ & B) === B || I === (this.ⲆᐃᐃⲆⵠ & I) || (this.ⲆᐃᐃⲆⵠ & E) === E || (this.ⲆᐃᐃⲆⵠ & Q) === Q || S === (this.ⲆᐃᐃⲆⵠ & S) || (this.ⲆᐃᐃⲆⵠ & F) === F) {
        this.buttons[ⲆⲆᐃᐃᐃΔᐃ].info.state = wf;
      } else if (T === (this.ⲆᐃᐃⲆⵠ & T) || (this.ⲆᐃᐃⲆⵠ & G) === G || (this.ⲆᐃᐃⲆⵠ & W) === W) {
        this.buttons[ᐃᐃⵠᐃΔᐃⵠ].info.state = wf;
      } else if ((this.ⲆᐃᐃⲆⵠ & H) === H) {
        this.buttons[ΔΔⲆⲆΔⲆⲆ].info.state = wf;
      }
      if ((this.ⲆᐃᐃⲆⵠ & C) === C) {
        if (this.ⲆⲆⵠᐃⵠⵠΔ === this.Ⲇⵠᐃᐃᐃᐃⵠ) {
          this.ⵠⵠⵠⵠⲆⵠⵠ = this.ⲆΔⲆᐃⵠⵠΔ;
          this.buttons[this.ⲆΔⲆᐃⵠⵠΔ].info.active = ha;
          this.buttons[this.ΔΔⲆⵠΔⵠΔ].info.active = ha;
          this.buttons[this.ΔⵠᐃⲆᐃᐃΔ].info.active = ha;
        } else {
          this.buttons[this.ⲆΔⲆᐃⵠⵠΔ].info.active = ia;
          this.buttons[this.ΔΔⲆⵠΔⵠΔ].info.active = ia;
          this.buttons[this.ΔⵠᐃⲆᐃᐃΔ].info.active = ia;
        }
        if (this.ᐃⵠⵠⵠΔⲆᐃ === this.ⲆⲆⵠᐃⵠⵠΔ) {
          this.buttons[this.ᐃⵠⵠⵠΔⲆᐃ].info.state = wf;
        } else if (this.ⲆⲆⵠᐃⵠⵠΔ === this.ᐃⲆᐃᐃⵠⵠᐃ) {
          this.buttons[this.ᐃⲆᐃᐃⵠⵠᐃ].info.state = wf;
        } else if (this.Ⲇⵠᐃᐃᐃᐃⵠ === this.ⲆⲆⵠᐃⵠⵠΔ) {
          this.buttons[this.Ⲇⵠᐃᐃᐃᐃⵠ].info.state = wf;
        } else if (this.ⲆⲆⵠᐃⵠⵠΔ === this.ⲆΔⲆΔⵠᐃⲆ) {
          this.buttons[this.ⲆΔⲆΔⵠᐃⲆ].info.state = wf;
        } else if (this.ⲆⲆⵠⵠⵠⲆⵠ === this.ⲆⲆⵠᐃⵠⵠΔ) {
          this.buttons[this.ⲆⲆⵠⵠⵠⲆⵠ].info.state = wf;
        }
        if (this.ⲆΔⲆᐃⵠⵠΔ === this.ⵠⵠⵠⵠⲆⵠⵠ) {
          this.buttons[this.ⲆΔⲆᐃⵠⵠΔ].info.state = wf;
        } else if (this.ⵠⵠⵠⵠⲆⵠⵠ === this.ΔΔⲆⵠΔⵠΔ) {
          this.buttons[this.ΔΔⲆⵠΔⵠΔ].info.state = wf;
        } else if (this.ΔⵠᐃⲆᐃᐃΔ === this.ⵠⵠⵠⵠⲆⵠⵠ) {
          this.buttons[this.ΔⵠᐃⲆᐃᐃΔ].info.state = wf;
        }
        if (this.ᐃᐃⲆⵠΔⵠⵠ === this.ⲆⵠᐃⵠⵠΔᐃ) {
          this.buttons[this.ᐃᐃⲆⵠΔⵠⵠ].info.state = wf;
        } else if (this.ⵠᐃⲆⲆΔΔᐃ === this.ⲆⵠᐃⵠⵠΔᐃ) {
          this.buttons[this.ⵠᐃⲆⲆΔΔᐃ].info.state = wf;
        } else if (this.ⲆⵠᐃⵠⵠΔᐃ === this.ⲆᐃΔⲆᐃⵠⵠ) {
          this.buttons[this.ⲆᐃΔⲆᐃⵠⵠ].info.state = wf;
        }
        if (this.ⲆⵠΔⵠⵠᐃⲆ === this.ⲆᐃⵠΔΔⲆΔ) {
          this.buttons[this.ⲆᐃⵠΔΔⲆΔ].info.state = wf;
        } else if (this.ΔⵠⲆᐃΔⲆⲆ === this.ⲆⵠΔⵠⵠᐃⲆ) {
          this.buttons[this.ΔⵠⲆᐃΔⲆⲆ].info.state = wf;
        } else if (this.ⲆⲆΔΔⵠΔΔ === this.ⲆⵠΔⵠⵠᐃⲆ) {
          this.buttons[this.ⲆⲆΔΔⵠΔΔ].info.state = wf;
        } else if (this.ⲆⵠΔⵠⵠᐃⲆ === this.ΔᐃⲆᐃⲆⵠΔ) {
          this.buttons[this.ΔᐃⲆᐃⲆⵠΔ].info.state = wf;
        } else if (this.ⲆⵠΔⵠⵠᐃⲆ === this.ΔᐃᐃᐃⵠⵠΔ) {
          this.buttons[this.ΔᐃᐃᐃⵠⵠΔ].info.state = wf;
        } else if (this.ⲆⵠΔⵠⵠᐃⲆ === this.ΔΔᐃⵠⵠⲆⵠ) {
          this.buttons[this.ΔΔᐃⵠⵠⲆⵠ].info.state = wf;
        }
      }
      if (d === (this.ⲆᐃᐃⲆⵠ & d)) {
        if (this.ᐃΔⲆⲆⵠᐃᐃ === -1) {
          this.buttons[Aa].info.state = wf;
        } else if (this.ᐃΔⲆⲆⵠᐃᐃ === 0) {
          this.buttons[Ba].info.state = wf;
        } else if (this.ᐃΔⲆⲆⵠᐃᐃ === 2) {
          this.buttons[Da].info.state = wf;
        } else if (this.ᐃΔⲆⲆⵠᐃᐃ === 3) {
          this.buttons[Ea].info.state = wf;
        } else if (this.ᐃΔⲆⲆⵠᐃᐃ === 4) {
          this.buttons[Ca].info.state = wf;
        }
        if (this.ΔᐃΔⲆᐃΔᐃ === 0) {
          this.buttons[ua].info.state = wf;
        } else if (this.ΔᐃΔⲆᐃΔᐃ === 1) {
          this.buttons[va].info.state = wf;
        } else if (this.ΔᐃΔⲆᐃΔᐃ === 2) {
          this.buttons[wa].info.state = wf;
        } else if (this.ΔᐃΔⲆᐃΔᐃ === 3) {
          this.buttons[xa].info.state = wf;
        } else if (this.ΔᐃΔⲆᐃΔᐃ === 4) {
          this.buttons[ya].info.state = wf;
        } else if (this.ΔᐃΔⲆᐃΔᐃ === 5) {
          this.buttons[za].info.state = wf;
        }
      }
      if ((this.ⲆᐃᐃⲆⵠ & L) === L && Jx.ⲆΔⲆⵠⲆⲆⵠ === 0) {
        if (this.buttons[na].ⲆⲆΔⲆⵠⵠᐃ(Nx.ΔΔΔᐃ)) {
          this.buttons[na].hint = Math.min(1, this.buttons[na].hint + Ox * 1.5);
        } else {
          this.buttons[na].hint = Math.max(0, this.buttons[na].hint - Ox * 1.5);
        }
        if (this.buttons[oa].ⲆⲆΔⲆⵠⵠᐃ(Nx.ΔΔΔᐃ)) {
          this.buttons[oa].hint = Math.min(1, this.buttons[oa].hint + Ox * 1.5);
        } else {
          this.buttons[oa].hint = Math.max(0, this.buttons[oa].hint - Ox * 1.5);
        }
        if (this.buttons[pa].ⲆⲆΔⲆⵠⵠᐃ(Nx.ΔΔΔᐃ)) {
          this.buttons[pa].hint = Math.min(1, this.buttons[pa].hint + Ox * 1.5);
        } else {
          this.buttons[pa].hint = Math.max(0, this.buttons[pa].hint - Ox * 1.5);
        }
        if (this.buttons[sa].ⲆⲆΔⲆⵠⵠᐃ(Nx.ΔΔΔᐃ)) {
          this.buttons[sa].hint = Math.min(1, this.buttons[sa].hint + Ox * 1.5);
        } else {
          this.buttons[sa].hint = Math.max(0, this.buttons[sa].hint - Ox * 1.5);
        }
        if (this.buttons[qa].ⲆⲆΔⲆⵠⵠᐃ(Nx.ΔΔΔᐃ)) {
          this.buttons[qa].hint = Math.min(1, this.buttons[qa].hint + Ox * 1.5);
        } else {
          this.buttons[qa].hint = Math.max(0, this.buttons[qa].hint - Ox * 1.5);
        }
        if (this.buttons[ra].ⲆⲆΔⲆⵠⵠᐃ(Nx.ΔΔΔᐃ)) {
          this.buttons[ra].hint = Math.min(1, this.buttons[ra].hint + Ox * 1.5);
        } else {
          this.buttons[ra].hint = Math.max(0, this.buttons[ra].hint - Ox * 1.5);
        }
      }
      var Y = 1;
      if ((this.ⲆᐃᐃⲆⵠ & (O | k | A | x | J | M)) > 1) {
        U = ᐃΔ.ᐃᐃⲆⲆⵠΔᐃ;
        q.save();
        q.translate(kq, la + U.height / 4);
        if (this.ⲆΔΔⲆⵠ === 1) {
          this.ᐃⲆⵠΔΔⵠⵠ += Ox / 3;
          Y = this.ΔⲆᐃΔⵠΔᐃ - 100 / Math.pow(1 + this.ᐃⲆⵠΔΔⵠⵠ, 1 + this.ᐃⲆⵠΔΔⵠⵠ);
          q.rotate(Y);
        }
        Gp(q, U, -U.width / 4, -U.height / 4, U.width / 2, U.height / 2);
        q.restore();
      }
      if (Jx.ⲆΔⲆⵠⲆⲆⵠ === 0) {
        if (Jx.ⵠᐃⲆⵠΔ === 0) {
          this.buttons[na].info.state = wf;
        } else if (Jx.ⵠᐃⲆⵠΔ === 4) {
          this.buttons[oa].info.state = wf;
        } else if (Jx.ⵠᐃⲆⵠΔ === 2) {
          this.buttons[qa].info.state = wf;
        } else if (Jx.ⵠᐃⲆⵠΔ === 3) {
          this.buttons[ra].info.state = wf;
        } else if (Jx.ⵠᐃⲆⵠΔ === 6) {
          this.buttons[pa].info.state = wf;
        } else if (Jx.ⵠᐃⲆⵠΔ === 7) {
          this.buttons[sa].info.state = wf;
        }
      }
      for (i = 1; this.buttons.length > i; i++) {
        if (this.buttons[i].info.active === ia) {
          this.buttons[i].ⵠᐃⲆᐃ(q);
        }
      }
      this.ⲆΔΔⵠ[0].ⵠᐃⲆᐃ(q);
      if ((this.ⲆᐃᐃⲆⵠ & (j | R)) > 0) {
        U = this.ΔⵠᐃΔΔΔⵠ;
        Gp(q, U, kq - U.width / 4, 138, U.width / 2, U.height / 2);
      }
      var Z = Math.max(1, Math.min(18, Math.floor((Fx.ᐃⵠⲆΔᐃ + 3) / 2)));
      this.ⲆΔΔⵠ[Z].active = ia;
      this.ⲆΔΔⵠ[Z].ⵠᐃⲆᐃ(q);
      this.ⲆΔΔⵠ[Z].active = ha;
      this.buttons[0].ⵠᐃⲆᐃ(q);
      if ((this.ⲆᐃᐃⲆⵠ & (m | I | Q | B | S)) > 1) {
        var l = (this.ⲆᐃᐃⲆⵠ & (I | Q | B | S)) > 1 ? -190 : 0;
        U = Ⲇⵠ[29][this.ⵠⲆⲆᐃⲆ][this.ⵠⲆⵠⵠⲆⲆⲆ];
        Gp(q, U, kq - U.width / 4 + l, 183, U.width / 2, U.height / 2);
        this.ⵠⵠᐃΔ = (this.ⵠⵠᐃΔ + Ox * 1000) % 2000;
        var u = (this.ⵠⵠᐃΔ < 1000) * 4.5 ? this.ⵠⵠᐃΔ / 1000 : (2000 - this.ⵠⵠᐃΔ) / 1000;
        U = Ⲇⵠ[28][this.ⵠⵠⲆᐃΔ][this.ⵠⲆⵠⵠⲆⲆⲆ];
        Gp(q, U, kq - U.width / 4 - 62 + u + l, 240, U.width / 2, U.height / 2);
        U = Ⲇⵠ[7][this.ⲆΔⵠΔ][this.ⵠⲆⵠⵠⲆⲆⲆ];
        Gp(q, U, kq - U.width / 4 - 54 + u + l, 272, U.width / 2, U.height / 2);
        Gp(q, U, kq - U.width / 4 + 54 - u + l, 272, U.width / 2, U.height / 2);
        U = Ⲇⵠ[255][this.ⲆΔⵠΔ][this.ⵠⲆⵠⵠⲆⲆⲆ];
        Gp(q, U, kq - U.width / 4 + l, 222, U.width / 2, U.height / 2);
        U = Ⲇⵠ[796][this.ⲆⵠⲆⲆⲆ][this.ⵠⲆⵠⵠⲆⲆⲆ];
        Gp(q, U, kq - U.width / 4 + l, 222, U.width / 2, U.height / 2);
      }
      if ((this.ⲆᐃᐃⲆⵠ & m) === m) {
        U = Ⲇⵠ[250][this.ΔΔΔⵠⲆ][this.ⵠⲆⵠⵠⲆⲆⲆ];
        Gp(q, U, kq - U.width / 4 - 61, 406 - U.height / 4, U.width / 2, U.height / 2);
        U = Ⲇⵠ[250][this.ᐃⵠΔΔⵠ][this.ⵠⲆⵠⵠⲆⲆⲆ];
        Gp(q, U, kq - U.width / 4 + 53, 406 - U.height / 4, U.width / 2, U.height / 2);
      }
      if (E === (this.ⲆᐃᐃⲆⵠ & E)) {
        U = Ⲇⵠ[250][this.ᐃⵠΔΔⵠ][this.ⵠⲆⵠⵠⲆⲆⲆ];
        Gp(q, U, kq - U.width / 4 - 200, 268 - U.height / 4, U.width / 2, U.height / 2);
      }
      if (F === (this.ⲆᐃᐃⲆⵠ & F)) {
        U = Ⲇⵠ[250][this.ΔΔΔⵠⲆ][this.ⵠⲆⵠⵠⲆⲆⲆ];
        Gp(q, U, kq - U.width / 4 - 200, 268 - U.height / 4, U.width / 2, U.height / 2);
      }
      if ((this.ⲆᐃᐃⲆⵠ & (I | Q | B | S | E | F)) > 1) {
        for (i = 1; this.buttons.length > i; i++) {
          if (this.buttons[i].view & this.ⲆᐃᐃⲆⵠ) {
            var _ = this.buttons[i].info;
            if (_.ⲆⵠⲆᐃᐃⲆᐃ >= 0) {
              U = _.ⵠΔᐃΔⲆᐃΔΔᐃ[_.ⲆⵠⲆᐃᐃⲆᐃ].ΔⲆⵠ;
              Gp(q, U, _.translate.x - U.width / 8 + 44.5, _.translate.y - U.height / 8 + 45.5, U.width / 4, U.height / 4);
              if (_.ᐃᐃΔΔⲆΔᐃ !== 1) {
                U = ᐃΔ.ΔⵠᐃΔΔⵠⲆ;
                Gp(q, U, _.translate.x - U.width / 4 + 44.5, _.translate.y - U.height / 4 + 44.5, U.width / 2, U.height / 2);
              }
            }
          }
        }
        U = this.ΔⲆⲆΔᐃⵠⵠ;
        Gp(q, U, kq - 312, 375, U.width / 2, U.height / 2);
        U = this.Ⲇᐃⵠⵠⵠᐃⵠ;
        Gp(q, U, kq - 312, 395, U.width / 2, U.height / 2);
      }
      if (this.ⲆᐃᐃⵠⲆΔⲆ !== this.ᐃΔⲆⵠΔ) {
        this.ⲆᐃᐃⵠⲆΔⲆ = this.ᐃΔⲆⵠΔ;
        this.ΔⵠⵠⵠΔᐃⵠ = kf("" + this.ᐃΔⲆⵠΔ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
      }
      Gp(q, this.ΔⵠⵠⵠΔᐃⵠ, this.ⲆΔΔⵠ[0].translate.x + 350, 15, this.ΔⵠⵠⵠΔᐃⵠ.w2, this.ΔⵠⵠⵠΔᐃⵠ.ᐃⲆΔⲆⵠ);
      if (this.ᐃⵠⲆΔᐃ !== this.ΔⵠⵠⲆⲆⵠⵠ) {
        this.ΔⵠⵠⲆⲆⵠⵠ = this.ᐃⵠⲆΔᐃ;
        this.ⲆΔⵠⲆᐃⲆΔ = kf("LVL " + (this.ᐃⵠⲆΔᐃ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, undefined, 30, 24, undefined, undefined, undefined, undefined, "#3F3019", 20);
      }
      Gp(q, this.ⲆΔⵠⲆᐃⲆΔ, this.ⲆΔΔⵠ[0].translate.x + 94, 0, this.ⲆΔⵠⲆᐃⲆΔ.w2, this.ⲆΔⵠⲆᐃⲆΔ.ᐃⲆΔⲆⵠ);
      if (Jx.ⲆΔⲆⵠⲆⲆⵠ === 0) {
        if ((aa = this.buttons[na].hint) > 0) {
          U = ᐃΔ.ⲆⲆΔⲆⲆⵠᐃ;
          Gp(q, U, kq - U.width / 4, -36 - U.height * ᐃⵠⵠ.ΔⲆⲆᐃⲆ(1 - aa) / 2, U.width / 2, U.height / 2);
        }
        if ((aa = this.buttons[oa].hint) > 0) {
          U = ᐃΔ.ⵠΔΔᐃⲆᐃᐃ;
          Gp(q, U, kq - U.width / 4, -36 - ᐃⵠⵠ.ΔⲆⲆᐃⲆ(1 - aa) * U.height / 2, U.width / 2, U.height / 2);
        }
        var aa = this.buttons[pa].hint;
        if (aa > 0) {
          U = ᐃΔ.ⲆΔᐃΔⲆⵠΔ;
          Gp(q, U, kq - U.width / 4, -36 - ᐃⵠⵠ.ΔⲆⲆᐃⲆ(1 - aa) * U.height / 2, U.width / 2, U.height / 2);
        }
        if ((aa = this.buttons[sa].hint) > 0) {
          U = ᐃΔ.ᐃⲆⵠᐃⵠΔⲆ;
          Gp(q, U, kq - U.width / 4, -36 - U.height * ᐃⵠⵠ.ΔⲆⲆᐃⲆ(1 - aa) / 2, U.width / 2, U.height / 2);
        }
        if ((aa = this.buttons[ra].hint) > 0) {
          U = ᐃΔ.ⵠⲆⵠᐃⵠΔⵠ;
          Gp(q, U, kq - U.width / 4, -36 - ᐃⵠⵠ.ΔⲆⲆᐃⲆ(1 - aa) * U.height / 2, U.width / 2, U.height / 2);
        }
        aa = this.buttons[qa].hint;
        if (aa > 0) {
          U = ᐃΔ.ⵠᐃᐃΔⵠⲆΔ;
          Gp(q, U, kq - U.width / 4, -36 - ᐃⵠⵠ.ΔⲆⲆᐃⲆ(1 - aa) * U.height / 2, U.width / 2, U.height / 2);
        }
      }
      if (this.ⲆΔΔⲆⵠ === 1 && Math.abs(Y - this.ΔⲆᐃΔⵠΔᐃ) < 0.006) {
        q.globalAlpha = Math.min(1, this.ᐃⲆⵠΔⲆⲆΔ * 3);
        U = ᐃΔ.ᐃⵠᐃᐃᐃⵠⵠ;
        q.save();
        q.translate(kq, 260);
        this.ᐃⲆⵠΔⲆⲆΔ += Ox;
        q.rotate(this.ᐃⲆⵠΔⲆⲆΔ);
        Gp(q, U, -U.width / 2, -U.height / 2, U.width, U.height);
        q.restore();
        u = 1.05 + Math.cos(this.ᐃⲆⵠΔⲆⲆΔ * 5) * 0.05;
        if (this.ᐃⲆⲆᐃΔΔⲆ === 0) {
          var ba = (U = ⲆⵠΔⵠ.Δⵠⵠⵠᐃ[this.ⲆⲆⵠΔΔΔΔ].ΔⲆⵠ).width * u;
          var ca = U.height * u;
          Gp(q, U, kq - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ᐃⲆⲆᐃΔΔⲆ === 1) {
          ba = u * (U = ⲆⵠΔⵠ.Δⵠⵠⵠᐃ[0].ΔⲆⵠ).width;
          ca = u * U.height;
          Gp(q, U, kq - ba / 2, 260 - ca / 2, ba, ca);
          ba = (U = ⲆⵠΔⵠ.ⵠⵠΔⵠⲆ[this.ⲆⲆⵠΔΔΔΔ].ΔⲆⵠ).width * u;
          ca = u * U.height;
          Gp(q, U, kq - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ᐃⲆⲆᐃΔΔⲆ === 2) {
          ba = u * (U = ⲆⵠΔⵠ.ⵠᐃᐃⲆ[this.ⲆⲆⵠΔΔΔΔ].ΔⲆⵠ).width;
          ca = u * U.height;
          Gp(q, U, kq - ba / 2, 180 - ca / 2, ba, ca);
          ba = u * (U = ⲆⵠΔⵠ.Δⵠⵠⵠᐃ[0].ΔⲆⵠ).width;
          ca = U.height * u;
          Gp(q, U, kq - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ᐃⲆⲆᐃΔΔⲆ === 3) {
          ba = u * (U = ⲆⵠΔⵠ.ⵠΔⲆᐃⲆ[this.ⲆⲆⵠΔΔΔΔ].ΔⲆⵠ).width;
          ca = u * U.height;
          q.save();
          q.translate(kq, 260);
          q.rotate(Math.PI);
          Gp(q, U, -ba / 2, -ca / 2, ba, ca);
          q.restore();
        } else if (this.ᐃⲆⲆᐃΔΔⲆ === 4) {
          ba = u * (U = ⲆⵠΔⵠ.ΔⲆⵠᐃΔ[this.ⲆⲆⵠΔΔΔΔ].ΔⲆⵠ).width;
          ca = U.height * u;
          Gp(q, U, kq - ba / 2, 260 - ca / 2, ba, ca);
        }
        U = this.ΔᐃⲆⲆⵠⲆΔ;
        Gp(q, U, kq - U.width / 4, 340, U.width / 2, U.height / 2);
        U = this.ᐃΔΔΔⲆᐃⵠ;
        Gp(q, U, kq - U.width / 4, 365, U.width / 2, U.height / 2);
        if (this.ᐃⲆⵠΔⲆⲆΔ > 6) {
          this.ⲆΔΔⲆⵠ = 0;
          K(c);
        }
        q.globalAlpha = 1;
      }
      Hx.alert.ⵠᐃⲆᐃ("#FFF", "#000");
      if (w.waiting) {
        this.ᐃⵠᐃΔⵠΔⵠ.ⵠᐃⲆᐃ();
      }
    };
    var u = 0;
    var L = Math.pow(2, u++);
    var d = Math.pow(2, u++);
    this.ⲆⵠΔⲆΔ = d;
    var v = Math.pow(2, u++);
    var m = Math.pow(2, u++);
    var c = Math.pow(2, u++);
    var p = Math.pow(2, u++);
    var C = Math.pow(2, u++);
    var D = Math.pow(2, u++);
    this.ⵠⲆⵠᐃⲆ = D;
    var f = Math.pow(2, u++);
    var y = Math.pow(2, u++);
    var O = Math.pow(2, u++);
    var k = Math.pow(2, u++);
    var A = Math.pow(2, u++);
    var x = Math.pow(2, u++);
    var J = Math.pow(2, u++);
    var M = Math.pow(2, u++);
    var B = Math.pow(2, u++);
    var E = Math.pow(2, u++);
    var I = Math.pow(2, u++);
    var Q = Math.pow(2, u++);
    var S = Math.pow(2, u++);
    var F = Math.pow(2, u++);
    var R = Math.pow(2, u++);
    var j = Math.pow(2, u++);
    var T = Math.pow(2, u++);
    this.ⲆΔΔⵠᐃ = T;
    var G = Math.pow(2, u++);
    this.ⵠⲆⲆᐃΔ = G;
    var W = Math.pow(2, u++);
    this.ⲆⲆᐃⵠⲆ = W;
    var H = Math.pow(2, u++);
    function P(a, b, c) {
      for (var d = 0; d < w.ⲆΔΔⵠ.length; d++) {
        if ((w.ⲆΔΔⵠ[d].view & a) !== 0) {
          w.ⲆΔΔⵠ[d].active = b;
        }
      }
      for (d = 0; w.buttons.length > d; d++) {
        if (w.buttons[d].view & a) {
          w.buttons[d].info.active = b;
        }
      }
      for (d = 0; d < w.ⲆⵠⲆⵠⵠ.length; d++) {
        if ((w.ⲆⵠⲆⵠⵠ[d].view & a) !== 0) {
          w.ⲆⵠⲆⵠⵠ[d].style.display = c;
        }
      }
    }
    this.ⲆᐃᐃⲆⵠ = L;
    function U() {
      var b = Number(ᐃⲆᐃΔ.get("starve_crate"));
      var c = Number(ᐃⲆᐃΔ.get("starve_dead"));
      var d = Number(ᐃⲆᐃΔ.get("starve_book"));
      var e = Number(ᐃⲆᐃΔ.get("starve_bag"));
      var f = Number(ᐃⲆᐃΔ.get("starve_skin"));
      var g = Number(ᐃⲆᐃΔ.get("starve_accessory"));
      if (Fx.unlock.ⲆΔⵠΔ[Fx.ⲆΔⵠΔ] <= 0) {
        Fx.ⲆΔⵠΔ = Fx.unlock.ⲆΔⵠΔ[f] > 0 ? f : 0;
      }
      if (Fx.unlock.ⵠⵠⲆᐃΔ[Fx.ⵠⵠⲆᐃΔ] <= 0) {
        Fx.ⵠⵠⲆᐃΔ = Fx.unlock.ⵠⵠⲆᐃΔ[d] > 0 ? d : 0;
      }
      if (Fx.unlock.ᐃⵠΔΔⵠ[Fx.ᐃⵠΔΔⵠ] <= 0) {
        Fx.ᐃⵠΔΔⵠ = Fx.unlock.ᐃⵠΔΔⵠ[c] > 0 ? c : 0;
      }
      if (Fx.unlock.ΔΔΔⵠⲆ[Fx.ΔΔΔⵠⲆ] <= 0) {
        Fx.ΔΔΔⵠⲆ = Fx.unlock.ΔΔΔⵠⲆ[b] > 0 ? b : 0;
      }
      if (Fx.unlock.ⲆⵠⲆⲆⲆ[Fx.ⲆⵠⲆⲆⲆ] <= 0) {
        Fx.ⲆⵠⲆⲆⲆ = Fx.unlock.ⲆⵠⲆⲆⲆ[g] > 0 ? g : 0;
      }
      if (Fx.unlock.ⵠⲆⲆᐃⲆ[Fx.ⵠⲆⲆᐃⲆ] <= 0) {
        Fx.ⵠⲆⲆᐃⲆ = Fx.unlock.ⵠⲆⲆᐃⲆ[e] > 0 ? e : 0;
      }
    }
    function K(a) {
      if (w.ΔΔⵠᐃⵠⲆᐃ !== false) {
        P(f, ha, "none");
        P(y, ha, "none");
        U();
        if (a !== w.ⲆᐃᐃⲆⵠ && w.ⲆΔΔⲆⵠ < 1) {
          w.ΔΔⲆⵠⵠ.style.display = L === a || a === c || a === d || C === a || a === m || a === p ? "inline-block" : "none";
          P(w.ⲆᐃᐃⲆⵠ, ha, "none");
          w.ⲆᐃᐃⲆⵠ = a;
          P(w.ⲆᐃᐃⲆⵠ, ia, "inline-block");
        }
      }
    }
    function V(a) {
      if (Hx.ⵠⲆΔⲆΔⵠⵠ !== Bo && Bo !== Hx.ΔᐃⲆⵠⲆΔΔ && Hx.ᐃⵠΔⵠΔⲆⲆ !== undefined && Hx.ⲆᐃⵠᐃᐃΔⵠ !== Lh) {
        a();
      }
    }
    function X() {
      U();
      if (Sx % 2) {
        console.log(ct);
        Jx.connect();
      } else {
        console.log(Lh);
        if (bj.Widget.isBlocked === 1) {
          bj.Widget.createAdPlayer(Jx.connect.bind(Jx), Jx.connect.bind(Jx));
        } else {
          bj.Widget.preroll();
          bj.Widget.play = Jx.connect.bind(Jx);
        }
      }
    }
    function Y(a, b, c) {
      const d = new XMLHttpRequest();
      d.open("GET", a);
      d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      d.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          if (Ra !== b) {
            b(d.responseText);
          }
        } else if (this.readyState == 4 && c !== Ns) {
          c();
        }
      };
      d.send();
    }
    this.ΔⵠⲆⲆᐃᐃⵠ = 0;
    this.ⵠᐃⲆΔ = K;
    this.ⲆᐃΔⵠⵠⵠΔ = function (f, a) {
      let e = 0;
      let b = "0";
      if (ey) {
        b = ey + "0";
      }
      if (Hx.ⵠⲆΔⲆΔⵠⵠ) {
        V(f);
      } else {
        Y(`${Wx}token?id=${b}`, function (b) {
          if (e === 1) {
            return;
          }
          const c = b.split("_");
          const d = c[0] + "_";
          const g = Number(c[1]);
          const a = Math.abs(function (a) {
            return fn(a, 8260, 46947, 8004, 37330, 5330);
          }(g));
          Hx.ⵠⲆΔⲆΔⵠⵠ = d + a;
          V(f);
        }, function () {
          if (e !== 1) {
            if (a === 1) {
              e = 1;
              f();
              return;
            } else {
              w.waiting = $g;
              return;
            }
          }
        });
      }
      Y(`${Xx}let`, function (j) {
        if (e === 1) {
          return;
        }
        j = j.split(":");
        {
          if (168 == 11) {
            159;
          }
          const a = j[0].split("_");
          var k = 212;
          if (k > 9) {
            k = 33;
          }
          var q = 239;
          if (q >= 2) {
            q = 49;
          }
          const c = a[0] + "_";
          const e = 213;
          5 .ᐃΔᐃⲆⲆΔⲆΔᐃ = 12;
          var w = 78;
          if (w == 7) {
            w = 191;
          }
          var x = 118;
          if (x > 12) {
            x = 183;
          }
          var y = 189;
          var z = 184;
          if (z === 1) {
            z = 25;
          }
          if (y >= 12) {
            y = 253;
          }
          e.ⵠⲆⵠⵠΔⵠΔⲆⵠ = 2;
          var A = 135;
          if (A > 14) {
            A = 102;
          }
          const f = Number(a[1]);
          if (93 === 254) {
            6;
          }
          if (13 == 40) {
            203;
          }
          const b = Math.abs(tp(f));
          Hx.ΔᐃⲆⵠⲆΔΔ = c + b;
          if (148 === 171) {
            20;
          }
          Hx.ⲆΔᐃⵠⵠᐃⵠ = b;
          if (127 >= 73) {
            119;
          }
          if (16 >= 12) {
            201;
          }
          var B = 139;
          if (144 >= 33) {
            144;
          }
          if (B >= 2) {
            B = 87;
          }
        }
        {
          var D = 40;
          var E = 95;
          if (E > 5) {
            E = 181;
          }
          const b = 190;
          Math.floor(190[b.ⲆΔᐃᐃⲆⵠⲆ]);
          if (D > 10) {
            D = 199;
          }
          const c = j[1].split("_");
          const d = c[0] + "_";
          if (170 === 40) {
            181;
          }
          var F = 142;
          const e = 134;
          Math.floor(134[e.ᐃⵠⵠΔⵠΔⲆ]);
          if (F >= 2) {
            F = 193;
          }
          if (180 == 33) {
            76;
          }
          92 .ΔⵠⲆᐃΔΔΔⲆⵠ = 13;
          var G = 3;
          if (G == 14) {
            G = 115;
          }
          if (179 > 39) {
            108;
          }
          const f = Number(c[1]);
          const a = Math.abs(Pb(f));
          var H = 52;
          if (H >= 3) {
            H = 143;
          }
          Hx.ᐃⵠΔⵠΔⲆⲆ = d + a;
          var I = 173;
          if (I === 13) {
            I = 220;
          }
          Hx.ⵠⵠⲆΔⵠⲆΔⵠⲆ = a;
          var J = 135;
          if (J > 2) {
            J = 18;
          }
        }
        var n = 13;
        if (n === 13) {
          n = 205;
        }
        {
          const a = j[2].split("_");
          const b = a[0] + "_";
          const c = Number(a[1]);
          71 .ⲆⵠΔΔΔΔΔⲆⵠ = 4;
          if (135 < 119) {
            86;
          }
          if (200 === 136) {
            119;
          }
          const d = Math.abs(Pb(c));
          if (17 >= 242) {
            88;
          }
          Hx.ⲆᐃⵠᐃᐃΔⵠ = b + d;
          Hx.ⲆⵠⵠⵠⵠⵠΔᐃⵠ = d;
        }
        V(f);
      }, function () {
        if (e !== 1) {
          if (a === 1) {
            e = 1;
            f();
            return;
          } else {
            w.waiting = Nh;
            return;
          }
        }
      });
    };
    this.ᐃᐃΔΔᐃⵠΔ = function () {
      if (w.waiting === false) {
        Hx.reconnect.enabled = Ge;
        w.waiting = true;
        w.ⲆᐃΔⵠⵠⵠΔ(X);
      }
    };
    var Z = 1;
    var _ = 2;
    var aa = 4;
    var ba = 8;
    var ca = 16;
    var da = 32;
    var ea = 1;
    var fa = 1;
    var ha = 0;
    var ia = 1;
    if (bj.innerWidth < 1300) {
      this.ΔᐃΔΔⵠ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ia,
        position: aa | Z,
        view: L,
        translate: {
          ⲆⵠΔΔᐃ: 184,
          ⲆⵠⲆΔⲆ: 200,
          y: 0,
          x: 0
        }
      };
    } else {
      this.ΔᐃΔΔⵠ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ia,
        position: aa | ca,
        view: L,
        translate: {
          y: 0,
          ⲆⵠⲆΔⲆ: -180,
          x: 0,
          ⲆⵠΔΔᐃ: 184
        }
      };
    }
    this.ΔᐃΔΔⵠ.id.addEventListener("keyup", function (a) {
      a.preventDefault();
      if (a.keyCode == 13 && !w.waiting && !w.ⵠᐃΔⵠⵠⵠΔᐃΔ) {
        w.ᐃᐃΔΔᐃⵠΔ();
      }
    });
    this.ΔᐃΔΔⵠ.input.value = ᐃⲆᐃΔ.get("starve_nickname") ? ᐃⲆᐃΔ.get("starve_nickname") : "";
    this.ΔⲆⵠⵠⵠⵠⲆⵠᐃ = {
      id: document.getElementById("account_nickname_block"),
      style: document.getElementById("account_nickname_block").style,
      input: document.getElementById("account_nickname_input"),
      active: ha,
      position: aa | ca,
      view: d,
      translate: {
        ⲆⵠⲆΔⲆ: -122,
        x: 0,
        ⲆⵠΔΔᐃ: 110,
        y: 0
      }
    };
    if (bj.innerWidth < 1300) {
      this.ⵠΔΔΔⵠ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ia,
        position: aa | Z,
        view: L,
        translate: {
          y: 0,
          ⲆⵠⲆΔⲆ: 208,
          x: 0,
          ⲆⵠΔΔᐃ: 225
        }
      };
    } else {
      this.ⵠΔΔΔⵠ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ia,
        position: aa | ca,
        view: L,
        translate: {
          ⲆⵠⲆΔⲆ: -180,
          ⲆⵠΔΔᐃ: 225,
          x: 0,
          y: 0
        }
      };
    }
    this.ᐃⲆΔΔᐃ = {
      id: document.getElementById("leaderboard"),
      style: document.getElementById("leaderboard").style,
      active: ha,
      position: aa | ca,
      view: C,
      translate: {
        y: 0,
        ⲆⵠΔΔᐃ: 190,
        ⲆⵠⲆΔⲆ: -294.5,
        x: 0
      }
    };
    this.ⵠΔΔⲆⲆΔⲆⲆΔ = {
      id: document.getElementById("stats_box"),
      style: document.getElementById("stats_box").style,
      active: ha,
      position: aa | ca,
      view: d,
      translate: {
        ⲆⵠΔΔᐃ: 187,
        y: 0,
        x: 0,
        ⲆⵠⲆΔⲆ: 125
      }
    };
    this.ᐃΔᐃᐃᐃⲆᐃᐃⲆ = {
      id: document.getElementById("serverAddressBlock"),
      style: document.getElementById("serverAddressBlock").style,
      input: document.getElementById("serverAddressInput"),
      active: ha,
      position: aa | ca,
      view: W,
      translate: {
        ⲆⵠΔΔᐃ: 350,
        y: 0,
        ⲆⵠⲆΔⲆ: -260,
        x: 0
      }
    };
    u = 0;
    this.ⲆⵠⲆⵠⵠ = [];
    this.ⲆⵠⲆⵠⵠ[u++] = this.ΔᐃΔΔⵠ;
    this.ⲆⵠⲆⵠⵠ[u++] = this.ⵠΔΔΔⵠ;
    this.ⲆⵠⲆⵠⵠ[u++] = this.ᐃⲆΔΔᐃ;
    this.ⲆⵠⲆⵠⵠ[u++] = this.ΔⲆⵠⵠⵠⵠⲆⵠᐃ;
    this.ⲆⵠⲆⵠⵠ[u++] = this.ⵠΔΔⲆⲆΔⲆⲆΔ;
    this.ⲆⵠⲆⵠⵠ[u++] = this.ᐃΔᐃᐃᐃⲆᐃᐃⲆ;
    u = 0;
    this.ⲆΔΔⵠ = [];
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ᐃΔᐃⲆⵠᐃᐃ, ia, 0, 0, Z);
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ⵠᐃᐃᐃⲆΔⵠ, ha, 0, 0, Z);
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ⲆⲆⲆᐃⲆΔⲆ, ha, 0, 0, Z);
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ⲆᐃᐃᐃⲆᐃⲆ, ha, 0, 0, Z);
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ⲆⲆⲆΔⵠᐃΔ, ha, 0, 0, Z);
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ᐃᐃⵠⲆᐃⲆᐃ, ha, 0, 0, Z);
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ⵠΔᐃⲆΔⵠⲆ, ha, 0, 0, Z);
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ⵠⵠᐃⵠΔᐃⲆ, ha, 0, 0, Z);
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ⵠⲆⵠΔΔΔⵠ, ha, 0, 0, Z);
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ᐃⲆᐃᐃΔᐃΔ, ha, 0, 0, Z);
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ΔᐃⲆΔᐃΔⲆ, ha, 0, 0, Z);
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ⵠΔᐃⵠⲆΔΔ, ha, 0, 0, Z);
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ᐃΔᐃⲆΔⲆⲆ, ha, 0, 0, Z);
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ⵠᐃΔⲆⲆᐃⵠ, ha, 0, 0, Z);
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ᐃΔⵠᐃⵠⵠᐃ, ha, 0, 0, Z);
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ⵠᐃⲆⲆΔᐃⲆ, ha, 0, 0, Z);
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ⵠΔⵠΔⵠⵠᐃ, ha, 0, 0, Z);
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ⵠⵠⲆΔᐃⲆΔ, ha, 0, 0, Z);
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ⲆⵠⵠⲆᐃΔⲆ, ha, 0, 0, Z);
    if (bj.innerWidth < 1300) {
      this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ⵠⲆΔΔᐃⵠⵠ, ia, 200, 100, aa | Z);
    } else {
      this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ⵠⲆΔΔᐃⵠⵠ, ia, -753 / 4, 100, aa | ca);
    }
    this.ⲆΔΔⵠ[u++].view = L;
    this.ⲆΔΔⵠ[u++] = Jf(ᐃΔ.ⵠᐃᐃⵠᐃΔᐃ, ia, 403, -10, _);
    if (bj.innerWidth > 1300) {
      this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ⵠᐃΔⵠᐃⵠᐃ, ia, -885 / 4, -159.5, ba | ca);
      this.ⲆΔΔⵠ[u++].view = L;
    }
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ᐃⲆᐃᐃⲆⵠᐃ, ha, -1293 / 4, 100, aa | ca);
    this.ⲆΔΔⵠ[u++].view = d;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ᐃᐃΔⵠⲆⵠΔ, ha, -356.25, 100, aa | ca);
    this.ⲆΔΔⵠ[u++].view = m;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.Ⲇⵠᐃᐃⵠⵠⵠ, ha, -905 / 4, 50, aa | ca);
    this.ⲆΔΔⵠ[u++].view = v;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ⲆⵠΔᐃΔΔⲆ, ha, -402, 130, aa | ca);
    this.ⲆΔΔⵠ[u++].view = c;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ⲆᐃΔⲆΔᐃᐃ, ha, -1117 / 4, 130, aa | ca);
    this.ⲆΔΔⵠ[u++].view = T;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ᐃⲆΔⵠⵠᐃΔ, ha, -305.5, 130, aa | ca);
    this.ⲆΔΔⵠ[u++].view = G;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ⵠⲆΔⲆⲆᐃⵠ, ha, -305.5, 100, aa | ca);
    this.ⲆΔΔⵠ[u++].view = W;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ᐃᐃΔΔΔⲆᐃ, ha, -ᐃΔ.ᐃᐃΔΔΔⲆᐃ.width / 4 - 350, -15, aa | ca);
    this.ⲆΔΔⵠ[u++].view = H;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ⲆΔⲆⲆΔⲆⲆ, ha, -1497 / 4, 110, aa | ca);
    this.ⲆΔΔⵠ[u++].view = p;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ⵠⲆΔⵠᐃΔᐃ, ha, -306.5, 100, aa | ca);
    this.ⲆΔΔⵠ[u++].view = C;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ΔΔΔⵠⲆᐃᐃ, ha, -345.25, 80, aa | ca);
    this.ⲆΔΔⵠ[u++].view = D;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ΔⵠΔⲆⵠⲆΔ, ha, -1542 / 4, 150, aa | ca);
    this.ⲆΔΔⵠ[u++].view = O;
    var ja = 3.6;
    var ka = this.ΔᐃⲆᐃΔᐃⵠ([["#25c5d6", 10.8], ["#e2cf27", ja * 10], ["#afac98", 108], ["#d88e23", ja * 57]]);
    this.ⲆΔΔⵠ[u] = Jf(ka, ha, -ka.width / 4, 178, aa | ca);
    this.ⲆΔΔⵠ[u++].view = O;
    this.ᐃⵠΔⲆⵠⲆᐃⲆⲆ = function (b, c, d) {
      var e;
      w.ⲆΔΔⲆⵠ = 1;
      w.ᐃⲆⵠΔΔⵠⵠ = 0;
      w.ᐃⲆⵠΔⲆⲆΔ = 0;
      w.ΔⲆᐃΔⵠΔᐃ = b;
      w.ᐃⲆⲆᐃΔΔⲆ = c;
      var f = 0;
      if (c === 0) {
        for (f = 0; ⲆⵠΔⵠ.Δⵠⵠⵠᐃ.length > f && ⲆⵠΔⵠ.Δⵠⵠⵠᐃ[f].id !== d; f++);
        e = ⲆⵠΔⵠ.Δⵠⵠⵠᐃ[f];
        w.unlock.ⲆΔⵠΔ[f] = 1;
      } else if (c === 1) {
        for (f = 0; ⲆⵠΔⵠ.ⵠⵠΔⵠⲆ.length > f && d !== ⲆⵠΔⵠ.ⵠⵠΔⵠⲆ[f].id; f++);
        e = ⲆⵠΔⵠ.ⵠⵠΔⵠⲆ[f];
        w.unlock.ⲆⵠⲆⲆⲆ[f] = 1;
      } else if (c === 2) {
        for (f = 0; ⲆⵠΔⵠ.ⵠᐃᐃⲆ.length > f && d !== ⲆⵠΔⵠ.ⵠᐃᐃⲆ[f].id; f++);
        e = ⲆⵠΔⵠ.ⵠᐃᐃⲆ[f];
        w.unlock.ⵠⲆⲆᐃⲆ[f] = 1;
      } else if (c === 3) {
        for (f = 0; f < ⲆⵠΔⵠ.ⵠΔⲆᐃⲆ.length && ⲆⵠΔⵠ.ⵠΔⲆᐃⲆ[f].id !== d; f++);
        e = ⲆⵠΔⵠ.ⵠΔⲆᐃⲆ[f];
        w.unlock.ⵠⵠⲆᐃΔ[f] = 1;
      } else if (c === 4) {
        for (f = 0; f < ⲆⵠΔⵠ.ΔⲆⵠᐃΔ.length && d !== ⲆⵠΔⵠ.ΔⲆⵠᐃΔ[f].id; f++);
        e = ⲆⵠΔⵠ.ΔⲆⵠᐃΔ[f];
        w.unlock.ΔΔΔⵠⲆ[f] = 1;
        w.unlock.ᐃⵠΔΔⵠ[f] = 1;
      }
      w.ⲆⲆⵠΔΔΔΔ = f;
      w.ᐃΔΔΔⲆᐃⵠ = kf("by " + e.Ⲇⵠᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, undefined, 30, 24, undefined, ma, Lh, undefined, "#000000", 24);
      w.ΔᐃⲆⲆⵠⲆΔ = kf(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, Bo, 30, 24, undefined, undefined, ir, undefined, "#000000", 20);
    };
    this.ⲆΔΔⲆⵠ = 0;
    this.ᐃⲆⵠΔΔⵠⵠ = 0;
    this.ΔⲆᐃΔⵠΔᐃ = 0;
    this.ᐃⲆⲆᐃΔΔⲆ = 0;
    this.ᐃⲆⵠΔⲆⲆΔ = 0;
    this.ᐃΔΔΔⲆᐃⵠ = pj;
    this.ΔᐃⲆⲆⵠⲆΔ = undefined;
    var la = 197;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ᐃΔⲆΔᐃᐃⵠ, ha, -385.5, 150, aa | ca);
    this.ⲆΔΔⵠ[u++].view = J;
    ka = this.ΔᐃⲆᐃΔᐃⵠ([["#d45ce5", 10.8], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", ja * 57]]);
    this.ⲆΔΔⵠ[u] = Jf(ka, ha, -ka.width / 4, 178, aa | ca);
    this.ⲆΔΔⵠ[u++].view = J;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ᐃΔΔⵠᐃᐃⵠ, ha, -385.5, 150, aa | ca);
    this.ⲆΔΔⵠ[u++].view = A;
    ka = this.ΔᐃⲆᐃΔᐃⵠ([["#d33a2a", 10.8], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", ja * 57]]);
    this.ⲆΔΔⵠ[u] = Jf(ka, ha, -ka.width / 4, 178, aa | ca);
    this.ⲆΔΔⵠ[u++].view = A;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ⲆⵠⲆᐃⵠᐃⵠ, ha, -1542 / 4, 150, aa | ca);
    this.ⲆΔΔⵠ[u++].view = x;
    ka = this.ΔᐃⲆᐃΔᐃⵠ([["#25c5d6", 10.8], ["#e2cf27", 36], ["#afac98", 108], ["#d88e23", ja * 57]]);
    this.ⲆΔΔⵠ[u] = Jf(ka, ha, -ka.width / 4, 178, aa | ca);
    this.ⲆΔΔⵠ[u++].view = x;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ⲆᐃⲆⲆᐃΔⵠ, ha, -1542 / 4, 150, aa | ca);
    this.ⲆΔΔⵠ[u++].view = k;
    ka = this.ΔᐃⲆᐃΔᐃⵠ([["#d45ce5", 10.8], ["#25c5d6", ja * 10], ["#e2cf27", 108], ["#afac98", ja * 57]]);
    this.ⲆΔΔⵠ[u] = Jf(ka, ha, -ka.width / 4, 178, aa | ca);
    this.ⲆΔΔⵠ[u++].view = k;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ΔΔⵠΔⲆᐃᐃ, ha, -385.5, 150, aa | ca);
    this.ⲆΔΔⵠ[u++].view = M;
    ka = this.ΔᐃⲆᐃΔᐃⵠ([["#d33a2a", ja * 3], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", ja * 57]]);
    this.ⲆΔΔⵠ[u] = Jf(ka, ha, -ka.width / 4, 178, aa | ca);
    this.ⲆΔΔⵠ[u++].view = M;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ᐃΔΔᐃⵠᐃⵠ, ha, -341.5, 100, aa | ca);
    this.ⲆΔΔⵠ[u++].view = B;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ⵠⵠΔⵠᐃⲆᐃ, ha, -341.5, 100, aa | ca);
    this.ⲆΔΔⵠ[u++].view = S;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ⲆΔᐃᐃᐃᐃΔ, ha, -341.5, 100, aa | ca);
    this.ⲆΔΔⵠ[u++].view = I;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ⲆΔⵠᐃⵠᐃⲆ, ha, -1366 / 4, 100, aa | ca);
    this.ⲆΔΔⵠ[u++].view = Q;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ⵠⲆⵠⵠᐃⵠⲆ, ha, -341.5, 100, aa | ca);
    this.ⲆΔΔⵠ[u++].view = E;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ⲆΔΔⵠᐃᐃⲆ, ha, -341.5, 100, aa | ca);
    this.ⲆΔΔⵠ[u++].view = F;
    ⲆᐃⲆᐃΔᐃⲆ = u++;
    this.ⲆΔΔⵠ[ⲆᐃⲆᐃΔᐃⲆ] = Jf(ᐃΔ.ⲆᐃⲆᐃΔᐃⲆ, ha, 484, 0, aa);
    ᐃΔΔΔⲆⵠΔ = u++;
    this.ⲆΔΔⵠ[ᐃΔΔΔⲆⵠΔ] = Jf(ᐃΔ.ᐃΔΔΔⲆⵠΔ, ha, 812.5, 0, aa);
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ⲆⲆⲆᐃΔⲆⲆ, ha, -758 / 4, -5, aa | ca);
    this.ⲆΔΔⵠ[u++].view = y;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ⵠΔⲆⵠΔᐃⲆ, ha, -758 / 4, -5, aa | ca);
    this.ⲆΔΔⵠ[u++].view = f;
    ᐃΔⲆᐃⲆᐃⲆ = u++;
    this.ⲆΔΔⵠ[ᐃΔⲆᐃⲆᐃⲆ] = Jf(ᐃΔ.ⲆⵠⲆᐃⲆⵠⵠ, ia, 93, 30, aa);
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ᐃⵠᐃᐃⵠΔᐃ, ha, -173, 110, aa | ca);
    this.ⲆΔΔⵠ[u++].view = R;
    this.ⲆΔΔⵠ[u] = Jf(ᐃΔ.ⵠⲆⲆΔᐃᐃΔ, ha, -173, 110, aa | ca);
    this.ⲆΔΔⵠ[u++].view = j;
    u = 0;
    this.buttons = [];
    this.buttons[u] = Af(50, 57, 0, [ᐃΔ.ⲆΔᐃᐃⲆⲆⵠ, ᐃΔ.ⵠᐃⲆⲆᐃⲆΔ, ᐃΔ.ΔⵠⲆᐃⲆⲆⵠ], ea, 0, function () {
      if (w.ⲆΔⲆⵠⵠ()) {
        K(D);
      } else {
        K(v);
      }
    }, 320, 0, Z, ia);
    u++;
    if (bj.innerWidth < 1300) {
      this.buttons[u] = Af(202, 97, 0, [ᐃΔ.ᐃⵠⵠⵠⲆⵠⲆ, ᐃΔ.ⵠⵠᐃⵠΔⵠᐃ, ᐃΔ.ΔⲆᐃⲆⲆⵠᐃ], ea, 0, this.ᐃᐃΔΔᐃⵠΔ, 462, 235, aa | Z, ia);
    } else {
      this.buttons[u] = Af(202, 97, 0, [ᐃΔ.ᐃⵠⵠⵠⲆⵠⲆ, ᐃΔ.ⵠⵠᐃⵠΔⵠᐃ, ᐃΔ.ΔⲆᐃⲆⲆⵠᐃ], ea, 0, this.ᐃᐃΔΔᐃⵠΔ, 74, 235, aa | ca, ia);
    }
    this.buttons[u].view = L;
    u++;
    if (bj.innerWidth > 1300) {
      this.buttons[u] = Af(355, 168, 0, [ᐃΔ.ⵠΔΔᐃⵠΔΔ, ᐃΔ.ⵠΔΔᐃⵠΔΔ, ᐃΔ.ⵠΔΔᐃⵠΔΔ], ea, 0, function () {
        bj.open("./changelog.html", "_blank");
      }, -195, -115, ba | ca, ia);
      this.buttons[u++].view = L;
      this.buttons[u] = Af(355, 168, 0, [ᐃΔ.ⵠᐃⵠⲆᐃⲆΔ, ᐃΔ.ⵠᐃⵠⲆᐃⲆΔ, ᐃΔ.ⵠᐃⵠⲆᐃⲆΔ], ea, 0, function () {
        bj.open("https://taming.io", "_blank");
      }, 20, -115, ba | ca, ia);
      this.buttons[u++].view = L;
    }
    this.buttons[u++] = Af(80, 80, 0, [ᐃΔ.ⲆᐃⵠᐃᐃᐃΔ, ᐃΔ.ⲆⵠᐃΔᐃΔⵠ, ᐃΔ.ⵠᐃᐃᐃⲆⵠⵠ], ea, 0, function () {
      bj.open("https://lapamauve.creator-spring.com/", "_blank");
    }, 380, 10, _, ia);
    this.buttons[u++] = Af(80, 80, 0, [ᐃΔ.ⲆᐃⵠⵠⲆⵠΔ, ᐃΔ.ⲆᐃⵠΔΔΔᐃ, ᐃΔ.ΔⵠΔᐃⲆⲆΔ], ea, 0, function () {
      bj.open("https://discord.gg/starveio", "_blank");
    }, 330, 10, _, ia);
    this.buttons[u++] = Af(80, 80, 0, [ᐃΔ.ⵠⲆⲆᐃⵠⵠⲆ, ᐃΔ.ⵠⲆⵠᐃᐃΔᐃ, ᐃΔ.ᐃᐃΔⲆᐃΔᐃ], ea, 0, function () {
      bj.open("https://reddit.com/r/starveio", "_blank");
    }, 280, 10, _, ia);
    this.buttons[u++] = Af(80, 80, 0, [ᐃΔ.ⲆⲆⵠΔⲆⵠΔ, ᐃΔ.ΔⵠΔⲆΔᐃⲆ, ᐃΔ.ⵠⲆⵠⵠᐃⲆΔ], ea, 0, function () {
      bj.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, 230, 10, _, ia);
    this.buttons[u++] = Af(80, 80, 0, [ᐃΔ.ΔⲆᐃⲆⲆᐃΔ, ᐃΔ.ᐃⲆⲆΔΔⲆⵠ, ᐃΔ.ᐃⲆᐃⲆᐃⵠᐃ], ea, 0, function () {
      bj.open("https://www.facebook.com/LapaMauve/", "_blank");
    }, 155, 10, _, ia);
    this.buttons[u++] = Af(80, 80, 0, [ᐃΔ.ⲆᐃᐃⵠⵠΔᐃ, ᐃΔ.ΔᐃΔΔΔᐃⲆ, ᐃΔ.ⵠⵠᐃΔⵠⲆΔ], ea, 0, function () {
      bj.open("https://twitter.com/lapamauve", "_blank");
    }, 105, 10, _, ia);
    this.buttons[u++] = Af(80, 80, 0, [ᐃΔ.ⲆⵠⲆΔΔΔⲆ, ᐃΔ.ⵠⵠᐃⵠᐃⵠΔ, ᐃΔ.ⲆΔⵠΔⲆΔⲆ], ea, 0, function () {
      bj.open("https://www.youtube.com/@lapamauveofficial", "_blank");
    }, 55, 10, _, ia);
    ⲆᐃⲆΔΔⲆⵠ = u++;
    this.buttons[ⲆᐃⲆΔΔⲆⵠ] = Af(232, 142, 0, [ᐃΔ.ⲆᐃΔⵠⵠᐃᐃ, ᐃΔ.ΔⵠᐃⲆⲆᐃᐃ, ᐃΔ.ΔⲆⲆⵠⵠⵠⲆ], ea, 0, function () {
      K(C);
      Ay(Fx.ⲆΔⲆᐃⵠⵠΔ, Fx.Ⲇⵠᐃᐃᐃᐃⵠ, Fx.ⵠᐃⲆⲆΔΔᐃ, Fx.ΔΔᐃⵠⵠⲆⵠ);
    }, -5, 573, Z, ia);
    this.buttons[u++] = Af(236, 165, 0, [ᐃΔ.ᐃⲆⲆⵠⲆΔᐃ, ᐃΔ.ᐃⲆⲆⵠⲆΔᐃ, ᐃΔ.ᐃⲆⲆⵠⲆΔᐃ], ea, fa, function () {
      K(C);
    }, -5, 566, Z, ia);
    ⲆᐃΔᐃⲆⵠᐃ = u++;
    this.buttons[ⲆᐃΔᐃⲆⵠᐃ] = Af(236, 165, 0, [ᐃΔ.ΔΔΔⵠΔᐃⲆ, ᐃΔ.ⵠⵠΔΔⵠᐃⲆ, ᐃΔ.ᐃΔⲆΔⲆⵠΔ], ea, 0, function () {
      K(p);
    }, -5, 494, Z, ia);
    this.buttons[u++] = Af(236, 165, 0, [ᐃΔ.ⵠⵠΔΔΔᐃᐃ, ᐃΔ.ⵠⵠΔΔΔᐃᐃ, ᐃΔ.ⵠⵠΔΔΔᐃᐃ], ea, fa, function () {
      K(p);
    }, -5, 494, Z, ia);
    ᐃᐃⵠᐃΔᐃⵠ = u++;
    this.buttons[ᐃᐃⵠᐃΔᐃⵠ] = Af(236, 165, 0, [ᐃΔ.ΔΔΔⵠΔᐃⲆ, ᐃΔ.ⵠⵠΔΔⵠᐃⲆ, ᐃΔ.ᐃΔⲆΔⲆⵠΔ], ea, 0, function () {
      if (w.ⲆΔⲆⵠⵠ()) {
        if (Fx.ⵠᐃᐃᐃᐃᐃⲆ - Date.now() > 0) {
          K(W);
        } else {
          K(T);
        }
      } else {
        K(v);
      }
    }, -5, 415, Z, ia);
    this.buttons[u++] = Af(236, 165, 0, [ᐃΔ.ⵠⲆⲆΔΔⲆⲆ, ᐃΔ.ⵠⲆⲆΔΔⲆⲆ, ᐃΔ.ⵠⲆⲆΔΔⲆⲆ], ea, fa, function () {
      if (w.ⲆΔⲆⵠⵠ()) {
        if (Fx.ⵠᐃᐃᐃᐃᐃⲆ - Date.now() > 0) {
          K(W);
        } else {
          K(T);
        }
      } else {
        K(v);
      }
    }, -5, 415, Z, ia);
    ⵠⵠᐃⵠΔⵠΔ = u++;
    this.buttons[ⵠⵠᐃⵠΔⵠΔ] = Af(236, 165, 0, [ᐃΔ.ΔΔΔⵠΔᐃⲆ, ᐃΔ.ⵠⵠΔΔⵠᐃⲆ, ᐃΔ.ᐃΔⲆΔⲆⵠΔ], ea, 0, function () {
      K(c);
    }, -5, 336, Z, ia);
    this.buttons[u++] = Af(236, 165, 0, [ᐃΔ.ⵠΔⲆΔᐃⲆΔ, ᐃΔ.ⵠΔⲆΔᐃⲆΔ, ᐃΔ.ⵠΔⲆΔᐃⲆΔ], ea, fa, function () {
      K(c);
    }, -5, 336, Z, ia);
    ⲆⲆᐃᐃᐃΔᐃ = u++;
    this.buttons[ⲆⲆᐃᐃᐃΔᐃ] = Af(236, 165, 0, [ᐃΔ.ΔΔΔⵠΔᐃⲆ, ᐃΔ.ⵠⵠΔΔⵠᐃⲆ, ᐃΔ.ᐃΔⲆΔⲆⵠΔ], ea, 0, function () {
      K(m);
    }, -5, 257, Z, ia);
    this.buttons[u++] = Af(236, 165, 0, [ᐃΔ.ⵠⵠⵠⲆⲆⲆᐃ, ᐃΔ.ⵠⵠⵠⲆⲆⲆᐃ, ᐃΔ.ⵠⵠⵠⲆⲆⲆᐃ], ea, fa, function () {
      K(m);
    }, -5, 257, Z, ia);
    ΔΔⲆΔᐃᐃᐃ = u++;
    this.buttons[ΔΔⲆΔᐃᐃᐃ] = Af(236, 165, 0, [ᐃΔ.ΔΔΔⵠΔᐃⲆ, ᐃΔ.ⵠⵠΔΔⵠᐃⲆ, ᐃΔ.ᐃΔⲆΔⲆⵠΔ], ea, 0, function () {
      K(L);
    }, -5, 178, Z, ia);
    this.buttons[u++] = Af(236, 165, 0, [ᐃΔ.ᐃᐃΔⵠᐃᐃᐃ, ᐃΔ.ᐃᐃΔⵠᐃᐃᐃ, ᐃΔ.ᐃᐃΔⵠᐃᐃᐃ], ea, fa, function () {
      K(L);
    }, -5, 178, Z, ia);
    ΔⵠⵠΔⵠΔⵠ = u++;
    this.ΔⵠⵠΔⵠΔⵠ = ΔⵠⵠΔⵠΔⵠ;
    this.buttons[ΔⵠⵠΔⵠΔⵠ] = Af(324, 222, 0, [ᐃΔ.ⵠᐃⲆⲆᐃΔΔ, ᐃΔ.ⵠΔⲆᐃⵠⵠⵠ, ᐃΔ.ΔΔⲆⵠⲆⵠⲆ], ea, 0, function () {
      K(v);
    }, 0, 70, Z, ia);
    ΔΔⲆⲆΔⲆⲆ = u++;
    ⵠᐃⵠΔⲆᐃΔ = u++;
    this.ΔΔⲆⲆΔⲆⲆ = ΔΔⲆⲆΔⲆⲆ;
    this.ⵠᐃⵠΔⲆᐃΔ = ⵠᐃⵠΔⲆᐃΔ;
    this.buttons[ΔΔⲆⲆΔⲆⲆ] = Af(324, 222, 0, [ᐃΔ.ᐃⲆⵠⲆΔⲆⲆ, ᐃΔ.ⵠⵠⵠΔΔⲆⲆ, ᐃΔ.ΔⵠΔΔΔΔᐃ], ea, 0, function () {
      K(d);
      ta(-1);
    }, 0, 70, Z, ha);
    this.buttons[ⵠᐃⵠΔⲆᐃΔ] = Af(324, 222, 0, [ᐃΔ.ΔᐃⲆⵠⵠⲆᐃ, ᐃΔ.ΔᐃⲆⵠⵠⲆᐃ, ᐃΔ.ΔᐃⲆⵠⵠⲆᐃ], ea, fa, function () {
      K(d);
      ta(-1);
    }, 0, 70, Z, ha);
    if (Jx.ⲆΔⲆⵠⲆⲆⵠ === 0) {
      var na = u++;
      if (bj.innerWidth < 1300) {
        this.buttons[na] = Af(266, 176, 0, [ᐃΔ.ΔΔΔΔⵠⵠΔ, ᐃΔ.ⲆᐃᐃⵠⲆⲆⲆ, ᐃΔ.ⵠΔⵠⵠΔΔⲆ], ea, 0, function () {
          Jx.ΔⲆⵠⲆᐃ(0);
        }, 150, 300, Z | aa, ia);
      } else {
        this.buttons[na] = Af(266, 176, 0, [ᐃΔ.ΔΔΔΔⵠⵠΔ, ᐃΔ.ⲆᐃᐃⵠⲆⲆⲆ, ᐃΔ.ⵠΔⵠⵠΔΔⲆ], ea, 0, function () {
          Jx.ΔⲆⵠⲆᐃ(0);
        }, -340, 100, ca | aa, ia);
      }
      this.buttons[na].view = L;
      this.buttons[na].hint = 0;
      var oa = u++;
      if (bj.innerWidth < 1300) {
        this.buttons[oa] = Af(266, 176, 0, [ᐃΔ.ⲆΔⵠⵠᐃⵠΔ, ᐃΔ.ᐃᐃᐃΔᐃᐃΔ, ᐃΔ.Ⲇⵠⵠⵠⵠⵠᐃ], ea, 0, function () {
          Jx.ΔⲆⵠⲆᐃ(4);
        }, 150, 400, Z | aa, ia);
      } else {
        this.buttons[oa] = Af(266, 176, 0, [ᐃΔ.ⲆΔⵠⵠᐃⵠΔ, ᐃΔ.ᐃᐃᐃΔᐃᐃΔ, ᐃΔ.Ⲇⵠⵠⵠⵠⵠᐃ], ea, 0, function () {
          Jx.ΔⲆⵠⲆᐃ(4);
        }, -340, 200, ca | aa, ia);
      }
      this.buttons[oa].view = L;
      this.buttons[oa].hint = 0;
      var pa = u++;
      if (bj.innerWidth < 1300) {
        this.buttons[pa] = Af(266, 176, 0, [ᐃΔ.ⲆΔΔΔⵠⲆΔ, ᐃΔ.ΔΔᐃᐃⲆΔΔ, ᐃΔ.ⲆⵠⲆⲆⲆᐃΔ], ea, 0, function () {
          Jx.ΔⲆⵠⲆᐃ(6);
        }, 450, 300, Z | aa, ia);
      } else {
        this.buttons[pa] = Af(266, 176, 0, [ᐃΔ.ⲆΔΔΔⵠⲆΔ, ᐃΔ.ΔΔᐃᐃⲆΔΔ, ᐃΔ.ⲆⵠⲆⲆⲆᐃΔ], ea, 0, function () {
          Jx.ΔⲆⵠⲆᐃ(6);
        }, -340, 300, ca | aa, ia);
      }
      this.buttons[pa].view = L;
      this.buttons[pa].hint = 0;
      var qa = u++;
      if (bj.innerWidth < 1300) {
        this.buttons[qa] = Af(266, 176, 0, [ᐃΔ.ΔⲆΔⲆᐃᐃⲆ, ᐃΔ.ⵠⲆΔΔᐃΔⵠ, ᐃΔ.ⲆᐃΔΔⵠΔⲆ], ea, 0, function () {
          Jx.ΔⲆⵠⲆᐃ(2);
        }, 300, 300, Z | aa, ia);
      } else {
        this.buttons[qa] = Af(266, 176, 0, [ᐃΔ.ΔⲆΔⲆᐃᐃⲆ, ᐃΔ.ⵠⲆΔΔᐃΔⵠ, ᐃΔ.ⲆᐃΔΔⵠΔⲆ], ea, 0, function () {
          Jx.ΔⲆⵠⲆᐃ(2);
        }, 204, 100, ca | aa, ia);
      }
      this.buttons[qa].view = L;
      this.buttons[qa].hint = 0;
      var ra = u++;
      if (bj.innerWidth < 1300) {
        this.buttons[ra] = Af(266, 176, 0, [ᐃΔ.ΔᐃⲆⵠᐃΔⲆ, ᐃΔ.ⲆⲆⵠⵠΔⲆᐃ, ᐃΔ.ⵠⵠᐃΔⲆΔᐃ], ea, 0, function () {
          Jx.ΔⲆⵠⲆᐃ(3);
        }, 300, 400, Z | aa, ia);
      } else {
        this.buttons[ra] = Af(266, 176, 0, [ᐃΔ.ΔᐃⲆⵠᐃΔⲆ, ᐃΔ.ⲆⲆⵠⵠΔⲆᐃ, ᐃΔ.ⵠⵠᐃΔⲆΔᐃ], ea, 0, function () {
          Jx.ΔⲆⵠⲆᐃ(3);
        }, 204, 200, ca | aa, ia);
      }
      this.buttons[ra].view = L;
      this.buttons[ra].hint = 0;
      var sa = u++;
      this.buttons[sa] = Af(266, 176, 0, [ᐃΔ.ΔⵠⲆΔⲆⲆⵠ, ᐃΔ.ⵠΔᐃΔᐃΔⵠ, ᐃΔ.ᐃⲆⲆΔⲆⲆⵠ], ea, 0, function () {
        Jx.ΔⲆⵠⲆᐃ(7);
      }, bj.innerWidth < 1300 ? 450 : 204, bj.innerWidth < 1300 ? 400 : 300, (bj.innerWidth < 1300 ? Z : ca) | aa, ia);
      this.buttons[sa].view = L;
      this.buttons[sa].hint = 0;
    }
    function ta(b, c) {
      if (c !== undefined) {
        Fx.ΔᐃΔⲆᐃΔᐃ = c;
        var d = Fx.ⲆΔΔΔⲆΔⲆ[c];
        Fx.ΔⲆᐃᐃᐃ = d.score;
        Fx.ⵠⲆⵠᐃⵠ = d.kill;
        Fx.ⲆΔⵠⵠᐃᐃᐃ = d.death;
        Fx.time = d.time;
        Fx.ⲆΔⵠⲆᐃⲆⵠ = d.bestScore;
        Fx.ᐃⲆΔΔⵠⵠⲆ = d.bestKill;
        Fx.ⵠΔⵠᐃⵠΔᐃ = d.bestTime;
        Fx.ᐃΔᐃΔΔΔᐃ = d.scoreTotal;
      }
      if (ma === b) {
        b = Fx.ᐃΔⲆⲆⵠᐃᐃ;
      }
      Fx.ᐃΔⲆⲆⵠᐃᐃ = b;
      if (b >= 0) {
        document.getElementById("stats_box_time").innerHTML = Fx.ⵠΔⵠᐃⵠΔᐃ[b];
        document.getElementById("stats_box_kill").innerHTML = Fx.ᐃⲆΔΔⵠⵠⲆ[b];
        document.getElementById("stats_box_score").innerHTML = Fx.ⲆΔⵠⲆᐃⲆⵠ[b];
      } else {
        var f = 0;
        for (var g = 0; Fx.ⵠⲆⵠᐃⵠ.length > g; g++) {
          f += Fx.ⵠⲆⵠᐃⵠ[g];
        }
        var h = 0;
        for (g = 0; Fx.time.length > g; g++) {
          h += Fx.time[g];
        }
        document.getElementById("stats_box_time").innerHTML = h;
        document.getElementById("stats_box_kill").innerHTML = f;
        document.getElementById("stats_box_score").innerHTML = Fx.ΔⲆᐃᐃᐃ;
      }
    }
    this.buttons[u] = Af(87, 78, 0, [ᐃΔ.ᐃᐃⲆⵠΔᐃᐃ, ᐃΔ.ⲆᐃΔⲆⲆⵠᐃ, ᐃΔ.ᐃᐃⵠΔⲆⲆᐃ], ea, 0, function () {
      Fx.ⲆⵠᐃΔΔΔⵠᐃⲆ();
      if (Fx.ᐃΔⲆⲆᐃⵠΔ === 0) {
        K(j);
      } else {
        K(R);
      }
    }, 127, 110, ca | aa, ha);
    this.buttons[u++].view = d;
    this.buttons[u] = Af(87, 78, 0, [ᐃΔ.ⲆⲆⵠⲆΔΔΔ, ᐃΔ.ΔⵠΔⲆᐃⲆᐃ, ᐃΔ.ᐃΔΔᐃΔΔΔ], ea, 0, function () {
      const a = bj.document.createElement("textarea");
      a.value = ey;
      bj.document.body.appendChild(a);
      a.select();
      bj.document.execCommand("copy");
      bj.document.body.removeChild(a);
    }, 182, 110, ca | aa, ha);
    this.buttons[u++].view = d;
    this.buttons[u] = Af(87, 78, 0, [ᐃΔ.ⲆⲆⲆⵠΔᐃᐃ, ᐃΔ.ᐃᐃⲆⲆᐃᐃⲆ, ᐃΔ.ᐃⲆⵠΔΔᐃⲆ], ea, 0, function () {
      if (Zx === _x && bj.FB && bj.FB.getUserID()) {
        bj.FB.logout();
      }
      if (_x === Yx && ct !== ry) {
        bj.gapi.auth2.getAuthInstance().signOut();
        ry = Ro;
      }
      ey = undefined;
      ay = undefined;
      _x = Kn;
      Fx.ᐃⵠΔᐃᐃ = 0;
      Fx.ᐃΔⲆⵠΔ = 0;
      Fx.ΔⲆᐃᐃᐃ = 0;
      Fx.ΔΔⲆⵠⵠⲆΔ();
      ⲆⲆᐃΔᐃΔⵠΔΔ();
    }, 255, 110, ca | aa, ha);
    this.buttons[u++].view = d;
    this.buttons[u] = Af(58, 64, 0, [ᐃΔ.ΔⵠⵠⵠⵠᐃΔ, ᐃΔ.ⲆⵠᐃⵠⲆᐃⵠ, ᐃΔ.ⲆⲆⵠΔⵠⵠⲆ], ea, 0, function () {
      K(L);
    }, 189, 118, ca | aa, ha);
    this.buttons[u++].view = v;
    this.buttons[u] = Af(497, 72, 0, [ᐃΔ.ΔᐃᐃⵠⲆⵠⲆ, ᐃΔ.ⵠΔΔΔΔⵠⵠ, ᐃΔ.ᐃⵠΔⵠΔⲆⵠ], ea, 0, function () {
      (function () {
        if (If) {
          ay = ᐃⵠⵠ.ΔΔᐃⵠⲆⵠⵠ(40);
          _x = $x;
          ey = If.userId;
          bj.ΔΔᐃⲆΔΔΔ();
          return;
        }
        bj.gapi.auth2.getAuthInstance().signIn();
      })();
    }, -130, 390, ca | aa, ha);
    this.buttons[u++].view = v;
    this.buttons[u] = Af(497, 72, 0, [ᐃΔ.ⲆΔⵠⲆⲆΔΔ, ᐃΔ.ⵠΔⲆⵠⲆᐃⲆ, ᐃΔ.ΔⵠΔᐃΔᐃᐃ], ea, 0, function () {
      bj.FB.login(function (a) {
        if (a.authResponse) {
          bj.FB.api("/me", function (a) {
            _x = Zx;
            ay = bj.FB.getAuthResponse().accessToken;
            Dy();
            bj.ΔΔᐃⲆΔΔΔ();
          });
        }
      });
    }, -130, 430, ca | aa, ha);
    this.buttons[u++].view = v;
    ⵠΔᐃⵠΔⵠⲆ = 20000;
    this.ⲆᐃⵠᐃⲆᐃⵠ = function (a) {
      var b = Fx.ᐃᐃΔⵠΔⲆᐃ(a);
      var c = ⵠΔᐃⵠΔⵠⲆ * (b * b);
      return (a -= c) / ((b + 1) * (b + 1) * ⵠΔᐃⵠΔⵠⲆ - c);
    };
    this.ᐃᐃΔⵠΔⲆᐃ = function (a) {
      return Math.floor(Math.sqrt(a / ⵠΔᐃⵠΔⵠⲆ));
    };
    this.ᐃᐃⵠⲆⵠᐃⵠᐃⵠ = function (a) {
      Fx.ᐃⵠⲆΔᐃ = Fx.ᐃᐃΔⵠΔⲆᐃ(a);
      Fx.ΔᐃᐃⲆⵠΔᐃ = Fx.ⲆᐃⵠᐃⲆᐃⵠ(a);
      Fx.ⵠⲆⲆⵠⵠⲆΔ = 0;
      Fx.ΔⲆᐃᐃᐃ = a;
    };
    this.ⵠᐃᐃⲆᐃⵠΔΔⵠ = function (a) {
      Fx.buttons[Fx.ΔⵠⵠΔⵠΔⵠ].info.active = 0;
      Fx.buttons[Fx.ΔΔⲆⲆΔⲆⲆ].info.active = 1;
      Fx.buttons[Fx.ⵠᐃⵠΔⲆᐃΔ].info.active = 1;
      t();
      if (a.name.indexOf("Starver#") === -1) {
        document.getElementById("account_nickname_input").value = bj.decodeURIComponent(bj.escape(bj.atob(a.name)));
      } else {
        document.getElementById("account_nickname_input").value = a.name;
      }
      Fx.ᐃΔⲆⵠΔ = a.bread;
      var b = a.seasons;
      var c = b[b.length - 1];
      Fx.ⲆΔΔΔⲆΔⲆ = b;
      w.ᐃᐃⵠⲆⵠᐃⵠᐃⵠ(c.score);
      Fx.ΔⲆᐃᐃᐃ = c.score;
      Fx.ⵠⲆⵠᐃⵠ = c.kill;
      Fx.ⲆΔⵠⵠᐃᐃᐃ = c.death;
      Fx.time = c.time;
      Fx.ⲆΔⵠⲆᐃⲆⵠ = c.bestScore;
      Fx.ᐃⲆΔΔⵠⵠⲆ = c.bestKill;
      Fx.ⵠΔⵠᐃⵠΔᐃ = c.bestTime;
      Fx.ᐃΔᐃΔΔΔᐃ = c.scoreTotal;
      Fx.ᐃΔⲆⲆᐃⵠΔ = a.firstName;
      document.getElementById("serverAddressInput").value = a.privateServerRegion + " : " + a.privateServer;
      if (Fx.ᐃΔⲆⲆᐃⵠΔ === undefined) {
        Fx.ᐃΔⲆⲆᐃⵠΔ = 0;
      }
      Fx.ⵠᐃᐃᐃᐃᐃⲆ = Date.now() + a.privateServerTime;
      if (Number(a.privateServerTime) > 0) {
        Fx.ⵠᐃᐃᐃᐃᐃⲆ = Date.now() + Number(a.privateServerTime);
      }
      Fx.ᐃⵠΔᐃᐃ = Date.now() + a.kit;
      if (Number(a.kit) > 0) {
        Fx.ᐃⵠΔᐃᐃ = Date.now() + Number(a.kit);
      }
      var d = ⲆⵠΔⵠ.Δⵠⵠⵠᐃ;
      for (var e = 0; a.skins.length > e; e++) {
        var f = a.skins[e];
        if (f > 0) {
          for (var i = 0; i < d.length; i++) {
            if (e === d[i].id) {
              w.unlock.ⲆΔⵠΔ[i] = 1;
            }
          }
        }
      }
      d = ⲆⵠΔⵠ.ⵠⵠΔⵠⲆ;
      e = 0;
      for (; e < a.accessories.length; e++) {
        if ((f = a.accessories[e]) > 0) {
          for (i = 0; d.length > i; i++) {
            if (e === d[i].id) {
              w.unlock.ⲆⵠⲆⲆⲆ[i] = 1;
            }
          }
        }
      }
      d = ⲆⵠΔⵠ.ⵠΔⲆᐃⲆ;
      e = 0;
      for (; e < a.books.length; e++) {
        f = a.books[e];
        if (f > 0) {
          for (i = 0; d.length > i; i++) {
            if (e === d[i].id) {
              w.unlock.ⵠⵠⲆᐃΔ[i] = 1;
            }
          }
        }
      }
      d = ⲆⵠΔⵠ.ⵠᐃᐃⲆ;
      e = 0;
      for (; e < a.bags.length; e++) {
        if ((f = a.bags[e]) > 0) {
          for (i = 0; d.length > i; i++) {
            if (d[i].id === e) {
              w.unlock.ⵠⲆⲆᐃⲆ[i] = 1;
            }
          }
        }
      }
      d = ⲆⵠΔⵠ.ΔⲆⵠᐃΔ;
      e = 0;
      for (; e < a.crates.length; e++) {
        if ((f = a.crates[e]) > 0) {
          for (i = 0; i < d.length; i++) {
            if (d[i].id === e) {
              w.unlock.ΔΔΔⵠⲆ[i] = 1;
              w.unlock.ᐃⵠΔΔⵠ[i] = 1;
            }
          }
        }
      }
    };
    this.ᐃΔᐃⲆⵠᐃⵠΔᐃ = function () {
      bj.ΔΔᐃⲆΔΔΔ = function () {
        K(L);
        (function (a) {
          var b = new XMLHttpRequest();
          b.open("GET", Wx + "login?token=" + ay + "&type=" + _x + (If ? "&userId=" + If.userId + "&userInfo=" + If.userInfo : ""));
          b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
              a(JSON.parse(b.responseText));
            }
          };
          b.send();
        })(w.ⵠᐃᐃⲆᐃⵠΔΔⵠ);
      };
      if (iy === 1) {
        bj.ΔΔᐃⲆΔΔΔ();
      }
    };
    bj.ⲆⲆᐃΔᐃΔⵠΔΔ = function () {
      Fx.buttons[Fx.ΔⵠⵠΔⵠΔⵠ].info.active = 1;
      Fx.buttons[Fx.ΔΔⲆⲆΔⲆⲆ].info.active = 0;
      Fx.buttons[Fx.ⵠᐃⵠΔⲆᐃΔ].info.active = 0;
      K(L);
    };
    this.ⲆΔⲆⵠⵠ = function () {
      return Fx.buttons[Fx.ΔΔⲆⲆΔⲆⲆ].info.active;
    };
    this.buttons[u] = Af(461, 105, 0, [ᐃΔ.ⵠⵠⵠΔⵠⵠⲆ, ᐃΔ.ᐃⲆⵠΔᐃⵠᐃ, ᐃΔ.ᐃᐃⵠᐃⵠᐃΔ], ea, 0, function () {
      if (w.ⲆΔⲆⵠⵠ()) {
        K(D);
      } else {
        K(v);
      }
    }, -100, 80, ca | aa, ha);
    this.buttons[u++].view = c;
    this.buttons[u] = Af(157, 158, 0, [ᐃΔ.ᐃⲆⲆᐃⲆᐃᐃ, ᐃΔ.ᐃⵠⵠᐃⲆΔⵠ, ᐃΔ.ⵠⵠⲆᐃⵠΔⲆ], ea, 0, function () {
      bj.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, -35, 125, ca | aa, ha);
    this.buttons[u++].view = p;
    this.buttons[u] = Af(66, 73, 0, [ᐃΔ.ⵠⵠΔΔΔΔᐃ, ᐃΔ.ⵠᐃΔⵠⲆΔΔ, ᐃΔ.ᐃⵠⵠⲆⲆᐃΔ], ea, 0, Dh, -68, 340, ca | aa, ha);
    this.buttons[u++].view = p;
    this.buttons[u] = Af(66, 73, 0, [ᐃΔ.ΔΔⵠᐃΔᐃⲆ, ᐃΔ.ᐃⲆΔΔⲆⲆⵠ, ᐃΔ.ⵠᐃⲆⲆⵠⲆᐃ], ea, 0, undefined, -30, 340, ca | aa, ha);
    this.buttons[u++].view = p;
    this.ᐃⵠⵠᐃⲆΔⵠⲆⲆ = u;
    this.buttons[u] = Af(97, 66, 0, [ᐃΔ.ΔᐃᐃⲆⲆᐃᐃ, ᐃΔ.ⵠΔⵠᐃᐃΔⲆ, ᐃΔ.ΔᐃⲆΔᐃᐃⵠ], ea, 0, function () {
      Ay(kl, Ra, Fx.ⵠᐃⲆⲆΔΔᐃ);
    }, -14, 151, ca | aa, ha);
    this.buttons[u++].view = C;
    this.ᐃᐃⲆⵠΔⵠⵠ = u;
    this.buttons[u] = Af(135, 66, 0, [ᐃΔ.ᐃⵠⲆⲆΔⲆⵠ, ᐃΔ.ⲆⵠⵠⵠⵠᐃⲆ, ᐃΔ.ᐃᐃⵠⵠᐃᐃⲆ], ea, 0, function () {
      Ay(undefined, Ra, Fx.ᐃᐃⲆⵠΔⵠⵠ);
    }, 37.5, 151, ca | aa, ha);
    this.buttons[u++].view = C;
    this.ⲆᐃΔⲆᐃⵠⵠ = u;
    this.buttons[u] = Af(160, 66, 0, [ᐃΔ.ΔⲆⵠⵠⵠⵠΔ, ᐃΔ.ᐃⵠⵠᐃⵠΔᐃ, ᐃΔ.ⵠΔⲆⲆⲆⲆΔ], ea, 0, function () {
      Ay(Wg, undefined, Fx.ⲆᐃΔⲆᐃⵠⵠ);
    }, 107.5, 151, ca | aa, ha);
    this.buttons[u++].view = C;
    this.ⵠᐃⲆⲆΔΔᐃ = u;
    this.buttons[u] = Af(207, 66, 0, [ᐃΔ.ΔⵠᐃΔⲆⲆⵠ, ᐃΔ.ΔⲆᐃⵠΔᐃⲆ, ᐃΔ.ΔⵠᐃⲆⲆⲆΔ], ea, 0, function () {
      Ay(undefined, undefined, Fx.ⵠᐃⲆⲆΔΔᐃ);
    }, 190.5, 151, ca | aa, ha);
    this.buttons[u++].view = C;
    this.ΔⵠᐃⲆᐃᐃΔ = u;
    this.buttons[u] = Af(144, 66, 0, [ᐃΔ.ⵠⵠᐃⲆΔⲆᐃ, ᐃΔ.ᐃᐃⵠΔⲆⵠⵠ, ᐃΔ.ΔΔⲆⲆᐃᐃⵠ], ea, 0, function () {
      Ay(Fx.ΔⵠᐃⲆᐃᐃΔ);
    }, 103.5, 110, ca | aa, ha);
    this.buttons[u++].view = C;
    this.ΔΔⲆⵠΔⵠΔ = u;
    this.buttons[u] = Af(124, 66, 0, [ᐃΔ.ⵠⲆᐃⵠⵠΔᐃ, ᐃΔ.ⵠⵠΔⵠⵠΔΔ, ᐃΔ.ΔΔΔⵠΔΔⵠ], ea, 0, function () {
      Ay(Fx.ΔΔⲆⵠΔⵠΔ);
    }, 177.5, 110, ca | aa, ha);
    this.buttons[u++].view = C;
    this.ⲆΔⲆᐃⵠⵠΔ = u;
    this.buttons[u] = Af(104, 66, 0, [ᐃΔ.ΔΔⵠΔⵠᐃΔ, ᐃΔ.ΔΔⲆᐃΔΔᐃ, ᐃΔ.ᐃᐃⵠᐃⵠⵠⵠ], ea, 0, function () {
      Ay(Fx.ⲆΔⲆᐃⵠⵠΔ);
    }, 242, 110, ca | aa, ha);
    this.buttons[u++].view = C;
    this.ⲆᐃⵠΔΔⲆΔ = u;
    this.buttons[u] = Af(46, 51, 0, [ᐃΔ.ⵠⵠⲆⵠΔⲆΔ, ᐃΔ.ᐃⲆⵠΔΔⲆᐃ, ᐃΔ.ΔⵠⲆⲆᐃⵠᐃ], ea, 0, function () {
      Ay(undefined, jn, Wg, Fx.ⲆᐃⵠΔΔⲆΔ);
    }, -185, 528, ca | aa, ha);
    this.buttons[u++].view = C;
    this.ΔⵠⲆᐃΔⲆⲆ = u;
    this.buttons[u] = Af(46, 51, 0, [ᐃΔ.ⲆⵠⵠΔᐃⵠⵠ, ᐃΔ.ⵠΔⲆᐃᐃⲆΔ, ᐃΔ.ⲆΔⲆΔⵠⵠᐃ], ea, 0, function () {
      Ay(Ne, undefined, Bo, Fx.ΔⵠⲆᐃΔⲆⲆ);
    }, -149, 528, ca | aa, ha);
    this.buttons[u++].view = C;
    this.ⲆⲆΔΔⵠΔΔ = u;
    this.buttons[u] = Af(46, 51, 0, [ᐃΔ.ⲆⵠⵠΔⲆⲆᐃ, ᐃΔ.ᐃⵠⲆΔⲆΔᐃ, ᐃΔ.ⲆᐃⲆΔⵠⲆⵠ], ea, 0, function () {
      Ay(undefined, undefined, undefined, Fx.ⲆⲆΔΔⵠΔΔ);
    }, -113, 528, ca | aa, ha);
    this.buttons[u++].view = C;
    this.ΔᐃⲆᐃⲆⵠΔ = u;
    this.buttons[u] = Af(46, 51, 0, [ᐃΔ.ⵠᐃΔⵠⲆⵠᐃ, ᐃΔ.ⲆⲆⲆΔΔΔᐃ, ᐃΔ.ⲆⲆΔⵠⵠⵠᐃ], ea, 0, function () {
      Ay(undefined, undefined, undefined, Fx.ΔᐃⲆᐃⲆⵠΔ);
    }, -77, 528, ca | aa, ha);
    this.buttons[u++].view = C;
    this.ΔᐃᐃᐃⵠⵠΔ = u;
    this.buttons[u] = Af(46, 51, 0, [ᐃΔ.Ⲇᐃᐃᐃᐃᐃⵠ, ᐃΔ.ΔᐃⲆΔᐃᐃᐃ, ᐃΔ.ⲆⵠⲆᐃⲆⵠⲆ], ea, 0, function () {
      Ay(undefined, undefined, undefined, Fx.ΔᐃᐃᐃⵠⵠΔ);
    }, -41, 528, ca | aa, ha);
    this.buttons[u++].view = C;
    this.ΔΔᐃⵠⵠⲆⵠ = u;
    this.buttons[u] = Af(46, 51, 0, [ᐃΔ.ⲆᐃᐃⵠΔΔᐃ, ᐃΔ.ⵠⵠⵠΔⲆΔⵠ, ᐃΔ.ⵠⵠⵠᐃᐃⵠΔ], ea, 0, function () {
      Ay(undefined, undefined, undefined, Fx.ΔΔᐃⵠⵠⲆⵠ);
    }, -5, 528, ca | aa, ha);
    this.buttons[u++].view = C;
    this.buttons[u] = Af(232, 352, 0, [ᐃΔ.ⵠⲆΔⲆᐃΔⲆ, ᐃΔ.ⲆⲆᐃⲆΔΔⲆ, ᐃΔ.ᐃᐃⲆⵠΔΔᐃ], ea, 0, function () {
      Ey(300);
    }, -330, 135, ca | aa, ha);
    this.buttons[u++].view = D;
    this.buttons[u] = Af(232, 352, 0, [ᐃΔ.ΔΔⲆΔᐃΔΔ, ᐃΔ.ⲆⲆΔᐃⵠᐃΔ, ᐃΔ.ⲆΔⲆᐃⵠⲆΔ], ea, 0, function () {
      Ey(600);
    }, -195, 135, ca | aa, ha);
    this.buttons[u++].view = D;
    this.buttons[u] = Af(243, 374, 0, [ᐃΔ.ΔⲆᐃΔⲆᐃᐃ, ᐃΔ.ⵠⵠᐃⲆⲆⵠⲆ, ᐃΔ.ⵠᐃᐃᐃΔΔᐃ], ea, 0, function () {
      Ey(2600);
    }, -60, 130, ca | aa, ha);
    this.buttons[u++].view = D;
    this.buttons[u] = Af(232, 352, 0, [ᐃΔ.ⵠΔⲆΔᐃΔΔ, ᐃΔ.ΔᐃᐃⲆΔΔΔ, ᐃΔ.ᐃΔΔᐃⲆⲆᐃ], ea, 0, function () {
      Ey(7000);
    }, 78, 135, ca | aa, ha);
    this.buttons[u++].view = D;
    this.buttons[u] = Af(243, 374, 0, [ᐃΔ.ΔΔⵠⵠⵠᐃᐃ, ᐃΔ.ΔΔΔΔⵠⵠⵠ, ᐃΔ.ΔΔᐃᐃΔⲆΔ], ea, 0, function () {
      Ey(20000);
    }, 213, 130, ca | aa, ha);
    this.buttons[u++].view = D;
    this.buttons[u] = Af(58, 64, 0, [ᐃΔ.ΔⵠⵠⵠⵠᐃΔ, ᐃΔ.ⲆⵠᐃⵠⲆᐃⵠ, ᐃΔ.ⲆⲆⵠΔⵠⵠⲆ], ea, 0, function () {
      K(c);
    }, 300, 88, ca | aa, ha);
    this.buttons[u++].view = D;
    this.buttons[u] = Af(323, 112, 0, [ᐃΔ.ⵠΔⵠΔᐃΔΔ, ᐃΔ.ⲆⵠᐃΔⵠᐃⲆ, ᐃΔ.ᐃᐃⲆΔⵠᐃΔ], ea, 0, function () {
      K(B);
      Fa.ᐃⵠᐃⲆⲆ();
    }, -315, 185, ca | aa, ha);
    this.buttons[u++].view = m;
    this.buttons[u] = Af(323, 112, 0, [ᐃΔ.ⲆⲆᐃᐃⲆᐃᐃ, ᐃΔ.ᐃⲆⲆᐃⵠⵠⵠ, ᐃΔ.ⲆᐃⵠΔΔΔⲆ], ea, 0, function () {
      K(S);
      Ka.ᐃⵠᐃⲆⲆ();
    }, -315, 321, ca | aa, ha);
    this.buttons[u++].view = m;
    this.buttons[u] = Af(323, 112, 0, [ᐃΔ.ⵠⵠΔⲆᐃΔⲆ, ᐃΔ.ⲆΔⲆᐃⲆᐃⵠ, ᐃΔ.ⲆΔⲆⵠⵠΔⲆ], ea, 0, function () {
      K(I);
      Ga.ᐃⵠᐃⲆⲆ();
    }, 153, 185, ca | aa, ha);
    this.buttons[u++].view = m;
    this.buttons[u] = Af(323, 112, 0, [ᐃΔ.ΔⵠⲆⲆΔΔⲆ, ᐃΔ.ᐃΔⵠΔⲆⵠᐃ, ᐃΔ.ᐃⵠⲆⵠⵠⵠᐃ], ea, 0, function () {
      K(Q);
      Ha.ᐃⵠᐃⲆⲆ();
    }, 153, 321, ca | aa, ha);
    this.buttons[u++].view = m;
    this.buttons[u] = Af(323, 112, 0, [ᐃΔ.ΔⲆⵠⵠⵠΔⲆ, ᐃΔ.ΔΔᐃΔⵠⵠⲆ, ᐃΔ.ᐃᐃΔΔᐃᐃⲆ], ea, 0, function () {
      K(E);
      Ia.ᐃⵠᐃⲆⲆ();
    }, 153, 463, ca | aa, ha);
    this.buttons[u++].view = m;
    this.buttons[u] = Af(323, 112, 0, [ᐃΔ.ΔⲆᐃᐃᐃΔⵠ, ᐃΔ.ⲆⵠΔᐃⲆΔΔ, ᐃΔ.ⵠⵠΔⵠⲆᐃΔ], ea, 0, function () {
      K(F);
      Ja.ᐃⵠᐃⲆⲆ();
    }, -315, 463, ca | aa, ha);
    this.buttons[u++].view = m;
    this.buttons[u] = Af(327, 117, 0, [ᐃΔ.ⲆⲆⲆᐃΔΔᐃ, ᐃΔ.ⲆⲆⲆⵠᐃⵠⵠ, ᐃΔ.ⲆⵠⲆⲆⲆⲆⵠ], ea, 0, function () {
      K(H);
    }, 155, 70, Z, ia);
    this.buttons[u++].view = L;
    this.buttons[u] = Af(130, 129, 0, [ᐃΔ.ⲆⵠᐃⵠᐃΔⵠ, ᐃΔ.ΔⲆᐃΔⵠᐃᐃ, ᐃΔ.ⲆⲆᐃⵠⵠⵠⵠ], ea, 0, function () {
      P(f, ha, "none");
      K(c);
    }, 10, 40, ca | aa, ha);
    this.buttons[u++].view = f;
    this.buttons[u] = Af(130, 129, 0, [ᐃΔ.ⲆⵠᐃⵠᐃΔⵠ, ᐃΔ.ΔⲆᐃΔⵠᐃᐃ, ᐃΔ.ⲆⲆᐃⵠⵠⵠⵠ], ea, 0, function () {
      P(y, ha, "none");
      K(c);
    }, 10, 40, ca | aa, ha);
    this.buttons[u++].view = y;
    this.buttons[u] = Af(115, 73, 0, [ᐃΔ.ᐃⵠᐃᐃᐃ, ᐃΔ.ΔᐃⲆΔᐃ, ᐃΔ.ΔᐃⵠⵠΔ], ea, 0, function () {
      K(c);
    }, 200, 140, ca | aa, ha);
    this.buttons[u++].view = T;
    this.buttons[u] = Af(524, 110, 0, [ᐃΔ.ⲆΔⲆΔᐃᐃⵠ, ᐃΔ.ᐃᐃⲆⵠΔᐃⵠ, ᐃΔ.ΔΔΔΔⵠΔΔ], ea, 0, function () {
      zy("Atlanta");
    }, -265, 300, ca | aa, ha);
    this.buttons[u++].view = T;
    this.buttons[u] = Af(523, 110, 0, [ᐃΔ.ⵠΔᐃⵠⵠⲆⲆ, ᐃΔ.ⵠΔⵠⵠΔΔᐃ, ᐃΔ.ᐃⵠⵠⲆⲆⲆΔ], ea, 0, function () {
      zy("LosAngeles");
    }, 5, 300, ca | aa, ha);
    this.buttons[u++].view = T;
    this.buttons[u] = Af(344, 110, 0, [ᐃΔ.ⵠᐃⲆᐃᐃⲆⲆ, ᐃΔ.ⲆΔⵠⲆⲆᐃⵠ, ᐃΔ.ⲆⲆⲆⵠⵠΔⵠ], ea, 0, function () {
      zy("Frankfurt");
    }, -265, 365, ca | aa, ha);
    this.buttons[u++].view = T;
    this.buttons[u] = Af(344, 110, 0, [ᐃΔ.ⵠⵠᐃᐃᐃΔⲆ, ᐃΔ.ΔⲆⵠΔⲆΔᐃ, ᐃΔ.ⲆⲆⵠⵠΔᐃⵠ], ea, 0, function () {
      zy("Osaka");
    }, 100, 365, ca | aa, ha);
    this.buttons[u++].view = T;
    this.buttons[u] = Af(344, 110, 0, [ᐃΔ.ⵠᐃΔΔⵠΔΔ, ᐃΔ.ΔⵠΔΔⲆⵠΔ, ᐃΔ.ᐃΔᐃᐃΔⵠⲆ], ea, 0, function () {
      zy("Sydney");
    }, -86, 365, ca | aa, ha);
    this.buttons[u++].view = T;
    this.buttons[u] = Af(115, 73, 0, [ᐃΔ.ᐃⵠᐃᐃᐃ, ᐃΔ.ΔᐃⲆΔᐃ, ᐃΔ.ΔᐃⵠⵠΔ], ea, 0, function () {
      K(T);
    }, 224, 140, ca | aa, ha);
    this.buttons[u++].view = G;
    this.buttons[u] = Af(230, 352, 0, [ᐃΔ.ΔⵠΔΔᐃΔᐃ, ᐃΔ.ΔⲆⲆΔΔⵠⵠ, ᐃΔ.ΔⵠᐃΔᐃᐃⲆ], ea, 0, function () {
      Ey(350);
    }, -280, 240, ca | aa, ha);
    this.buttons[u++].view = G;
    this.buttons[u] = Af(230, 352, 0, [ᐃΔ.ⲆΔⲆΔΔⵠⲆ, ᐃΔ.ΔⲆΔᐃΔΔᐃ, ᐃΔ.ⲆⲆⵠΔᐃΔⲆ], ea, 0, function () {
      Ey(700);
    }, -130, 240, ca | aa, ha);
    this.buttons[u++].view = G;
    this.buttons[u] = Af(230, 352, 0, [ᐃΔ.ΔⵠⵠΔⲆᐃⲆ, ᐃΔ.ⲆᐃΔΔᐃⲆⵠ, ᐃΔ.ᐃᐃⵠᐃΔⵠΔ], ea, 0, function () {
      Ey(1400);
    }, 20, 240, ca | aa, ha);
    this.buttons[u++].view = G;
    this.buttons[u] = Af(230, 352, 0, [ᐃΔ.ⲆⵠᐃᐃⲆⲆⵠ, ᐃΔ.ⲆⵠⲆⵠⵠΔᐃ, ᐃΔ.ΔⲆⵠⵠᐃᐃΔ], ea, 0, function () {
      Ey(3000);
    }, 170, 240, ca | aa, ha);
    this.buttons[u++].view = G;
    this.buttons[u] = Af(105, 119, 0, [ᐃΔ.ᐃⲆΔⵠΔᐃΔ, ᐃΔ.ⲆⵠᐃⲆⲆⲆⵠ, ᐃΔ.ᐃⵠⲆⵠⲆᐃⲆ], ea, 0, function () {
      const a = document.getElementById("serverAddressInput").value.split(" : ");
      const b = bj.document.createElement("textarea");
      b.value = Ff + "?server=" + a[1] + "&region=" + a[0];
      bj.document.body.appendChild(b);
      b.select();
      bj.document.execCommand("copy");
      bj.document.body.removeChild(b);
    }, 105, 310, ca | aa, ha);
    this.buttons[u++].view = W;
    this.buttons[u] = Af(105, 119, 0, [ᐃΔ.ΔⲆᐃⲆⵠᐃᐃ, ᐃΔ.ΔΔΔΔⲆΔⲆ, ᐃΔ.ᐃᐃΔⵠᐃΔⵠ], ea, 0, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Wx + "rebootServer?token=" + ay + "&userid=" + ey);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = Ff + "?server=" + a[1] + "&region=" + a[0];
          }
        };
        a.send();
      })();
    }, 235, 310, ca | aa, ha);
    this.buttons[u++].view = W;
    this.buttons[u] = Af(105, 119, 0, [ᐃΔ.ⲆⲆΔᐃΔᐃᐃ, ᐃΔ.ⲆᐃⵠⲆᐃⵠⲆ, ᐃΔ.ᐃⲆΔⵠᐃⵠⲆ], ea, 0, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Wx + "restartServer?token=" + ay + "&userid=" + ey);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = Ff + "?server=" + a[1] + "&region=" + a[0];
          }
        };
        a.send();
      })();
    }, 170, 310, ca | aa, ha);
    this.buttons[u++].view = W;
    this.buttons[u] = Af(204, 115, 0, [ᐃΔ.ⵠⲆᐃⵠⵠΔⵠ, ᐃΔ.ⲆⲆⵠᐃΔⲆΔ, ᐃΔ.ⵠⲆΔΔᐃⲆΔ], ea, 0, function () {
      bj.open("./commands.html", "_blank");
    }, -265, 490, ca | aa, ha);
    this.buttons[u++].view = W;
    this.buttons[u] = Af(145, 69, 0, [ᐃΔ.ⲆⲆⲆᐃᐃⵠᐃ, ᐃΔ.ᐃⲆΔᐃⵠⵠⵠ, ᐃΔ.ᐃᐃᐃᐃⵠⵠΔ], ea, 0, function () {
      K(O);
    }, -210, 170, ca | aa, ha);
    this.buttons[u++].view = c;
    this.buttons[u] = Af(145, 69, 0, [ᐃΔ.ΔᐃⲆᐃᐃᐃⵠ, ᐃΔ.ΔᐃᐃⵠΔᐃᐃ, ᐃΔ.ⵠⲆΔᐃᐃⵠᐃ], ea, 0, function () {
      K(x);
    }, 70, 170, ca | aa, ha);
    this.buttons[u++].view = c;
    this.buttons[u] = Af(145, 69, 0, [ᐃΔ.ⵠΔᐃⵠΔΔⵠ, ᐃΔ.ΔⲆΔⵠⵠⵠⵠ, ᐃΔ.ᐃⵠΔⲆᐃⵠᐃ], ea, 0, function () {
      K(k);
    }, 70, 204, ca | aa, ha);
    this.buttons[u++].view = c;
    this.buttons[u] = Af(145, 69, 0, [ᐃΔ.ⵠⲆⵠᐃⵠᐃᐃ, ᐃΔ.ΔᐃⲆⲆᐃᐃΔ, ᐃΔ.ΔΔⲆⲆⲆⵠⲆ], ea, 0, function () {
      K(J);
    }, -210, 204, ca | aa, ha);
    this.buttons[u++].view = c;
    this.buttons[u] = Af(145, 69, 0, [ᐃΔ.ⵠⲆⵠᐃⵠᐃᐃ, ᐃΔ.ΔᐃⲆⲆᐃᐃΔ, ᐃΔ.ΔΔⲆⲆⲆⵠⲆ], ea, 0, function () {
      K(M);
    }, 70, 238, ca | aa, ha);
    this.buttons[u++].view = c;
    this.buttons[u] = Af(145, 69, 0, [ᐃΔ.ⵠⲆⵠᐃⵠᐃᐃ, ᐃΔ.ΔᐃⲆⲆᐃᐃΔ, ᐃΔ.ΔΔⲆⲆⲆⵠⲆ], ea, 0, function () {
      if (w.ⲆΔⲆⵠⵠ()) {
        xy(0, 300);
      } else {
        K(v);
      }
    }, 307, 205, ca | aa, ha);
    this.buttons[u++].view = c;
    this.buttons[u] = Af(145, 69, 0, [ᐃΔ.ⲆΔⲆⲆⲆⲆⲆ, ᐃΔ.ⵠΔⲆⵠⵠᐃⲆ, ᐃΔ.ᐃⵠᐃΔΔⲆΔ], ea, 0, function () {
      K(A);
    }, -210, 238, ca | aa, ha);
    this.buttons[u++].view = c;
    this.buttons[u] = Af(145, 69, 0, [ᐃΔ.ⲆΔⲆⲆⲆⲆⲆ, ᐃΔ.ⵠΔⲆⵠⵠᐃⲆ, ᐃΔ.ᐃⵠᐃΔΔⲆΔ], ea, 0, function () {
      if (w.ⲆΔⲆⵠⵠ()) {
        xy(1, 600);
      } else {
        K(v);
      }
    }, 307, 239, ca | aa, ha);
    this.buttons[u++].view = c;
    this.buttons[u] = Af(192, 101, 0, [ᐃΔ.ⲆⲆⲆᐃⵠᐃⲆ, ᐃΔ.ⲆⲆᐃΔⲆᐃⵠ, ᐃΔ.ΔⲆᐃΔΔΔⵠ], ea, 0, function () {
      yy();
    }, -100, 250, ca | aa, ha);
    this.buttons[u++].view = j;
    this.buttons[u] = Af(192, 104, 0, [ᐃΔ.ᐃⵠᐃⲆⵠⵠⲆ, ᐃΔ.ᐃᐃᐃⵠΔΔᐃ, ᐃΔ.ⵠⲆΔΔⲆⲆΔ], ea, 0, function () {
      yy();
    }, -100, 239, ca | aa, ha);
    this.buttons[u++].view = R;
    this.buttons[u] = Af(192, 101, 0, [ᐃΔ.ⵠΔⲆⵠΔΔⵠ, ᐃΔ.ⲆΔⲆΔⲆᐃⲆ, ᐃΔ.ⲆᐃⵠΔΔᐃᐃ], ea, 0, function () {
      K(d);
    }, 10, 250, ca | aa, ha);
    this.buttons[u++].view = j;
    this.buttons[u] = Af(192, 104, 0, [ᐃΔ.ⵠᐃⵠⵠᐃᐃᐃ, ᐃΔ.ⵠΔⲆⵠᐃⲆΔ, ᐃΔ.ⵠᐃⲆᐃᐃᐃⵠ], ea, 0, function () {
      K(d);
    }, 10, 239, ca | aa, ha);
    this.buttons[u++].view = R;
    ΔⵠⵠⵠⲆ = [];
    ΔⵠⵠⵠⲆ[Δᐃⵠ.ᐃΔᐃΔΔ] = [ᐃΔ.ⵠΔΔᐃᐃᐃⲆ, ᐃΔ.ⵠⲆΔΔᐃⲆⲆ, ᐃΔ.ⲆΔᐃⲆΔⲆⲆ];
    ΔⵠⵠⵠⲆ[Δᐃⵠ.ⲆⲆⲆⵠ] = [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ];
    ΔⵠⵠⵠⲆ[Δᐃⵠ.ⵠᐃΔⲆ] = [ᐃΔ.ⵠΔⲆᐃⲆⵠⲆ, ᐃΔ.ΔΔΔᐃⲆⲆⵠ, ᐃΔ.ⲆⵠᐃΔΔⵠⲆ];
    ΔⵠⵠⵠⲆ[Δᐃⵠ.ᐃΔⲆΔ] = [ᐃΔ.ΔⵠᐃᐃⵠᐃΔ, ᐃΔ.ᐃᐃⵠᐃᐃᐃⲆ, ᐃΔ.ΔΔⲆᐃᐃΔⵠ];
    ΔⵠⵠⵠⲆ[Δᐃⵠ.ⲆⵠᐃΔ] = [ᐃΔ.ⵠⵠⵠᐃⵠⵠΔ, ᐃΔ.ΔΔᐃⵠΔΔⵠ, ᐃΔ.ⵠⵠⵠΔᐃⵠΔ];
    ΔⵠⵠⵠⲆ[Δᐃⵠ.ΔⵠᐃⲆ] = [ᐃΔ.ᐃᐃΔⵠⲆΔᐃ, ᐃΔ.ⵠⲆᐃⲆΔⲆⲆ, ᐃΔ.ᐃⵠΔⲆⵠⵠΔ];
    ΔⵠⵠⵠⲆ[Δᐃⵠ.ⲆⵠᐃⲆ] = [ᐃΔ.ⵠⵠᐃⲆⵠΔᐃ, ᐃΔ.ᐃΔⵠᐃⵠⵠⵠ, ᐃΔ.ᐃΔⲆⵠⲆⲆⲆ];
    ΔⵠⵠⵠⲆ[Δᐃⵠ.ⲆⲆᐃᐃⲆ] = [ᐃΔ.ΔⵠⲆⵠⲆΔⲆ, ᐃΔ.ⵠⲆᐃΔΔΔⵠ, ᐃΔ.ⵠᐃⵠΔⵠᐃΔ];
    ΔⵠⵠⵠⲆ[Δᐃⵠ.ⲆΔⲆᐃΔΔⵠ] = [ᐃΔ.ⵠᐃⵠⵠⵠⲆΔ, ᐃΔ.ᐃΔᐃⲆᐃⵠᐃ, ᐃΔ.ΔⲆᐃⲆΔᐃᐃ];
    ᐃⲆΔΔᐃⵠⲆ = u;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, -29, 205, ca | aa, ha);
    this.buttons[u++].view = B;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, Es, -29, 300, ca | aa, ha);
    this.buttons[u++].view = B;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, Bo, -29, 395, ca | aa, ha);
    this.buttons[u++].view = B;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 65, 205, ca | aa, ha);
    this.buttons[u++].view = B;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 65, 300, ca | aa, ha);
    this.buttons[u++].view = B;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, jn, 65, 395, ca | aa, ha);
    this.buttons[u++].view = B;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, Lk, 159, 205, ca | aa, ha);
    this.buttons[u++].view = B;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 159, 300, ca | aa, ha);
    this.buttons[u++].view = B;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, Kn, 159, 395, ca | aa, ha);
    this.buttons[u++].view = B;
    this.buttons[u] = Af(39, 122, 0, [ᐃΔ.ΔⲆᐃⵠⵠΔⲆ, ᐃΔ.ⵠⲆⲆᐃⲆΔᐃ, ᐃΔ.ΔⲆⵠᐃᐃᐃᐃ], ea, 0, undefined, -61, 315, ca | aa, ha);
    this.buttons[u++].view = B;
    this.buttons[u] = Af(39, 122, 0, [ᐃΔ.ⲆᐃⵠⲆᐃᐃᐃ, ᐃΔ.ᐃⵠⲆᐃⵠⲆⵠ, ᐃΔ.ⵠΔΔᐃⵠᐃΔ], ea, 0, ct, 260, 315, ca | aa, ha);
    this.buttons[u++].view = B;
    this.buttons[u] = Af(115, 73, 0, [ᐃΔ.ᐃⵠᐃᐃᐃ, ᐃΔ.ΔᐃⲆΔᐃ, ᐃΔ.ΔᐃⵠⵠΔ], ea, 0, function () {
      K(m);
    }, -320, 470, ca | aa, ha);
    this.buttons[u++].view = B;
    ᐃᐃΔⲆᐃⵠⵠΔΔ = u;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, tr, -29, 205, ca | aa, ha);
    this.buttons[u++].view = S;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, Bo, -29, 300, ca | aa, ha);
    this.buttons[u++].view = S;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, -29, 395, ca | aa, ha);
    this.buttons[u++].view = S;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 65, 205, ca | aa, ha);
    this.buttons[u++].view = S;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, Kn, 65, 300, ca | aa, ha);
    this.buttons[u++].view = S;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 65, 395, ca | aa, ha);
    this.buttons[u++].view = S;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, tr, 159, 205, ca | aa, ha);
    this.buttons[u++].view = S;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 159, 300, ca | aa, ha);
    this.buttons[u++].view = S;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 159, 395, ca | aa, ha);
    this.buttons[u++].view = S;
    this.buttons[u] = Af(39, 122, 0, [ᐃΔ.ΔⲆᐃⵠⵠΔⲆ, ᐃΔ.ⵠⲆⲆᐃⲆΔᐃ, ᐃΔ.ΔⲆⵠᐃᐃᐃᐃ], ea, 0, undefined, -61, 315, ca | aa, ha);
    this.buttons[u++].view = S;
    this.buttons[u] = Af(39, 122, 0, [ᐃΔ.ⲆᐃⵠⲆᐃᐃᐃ, ᐃΔ.ᐃⵠⲆᐃⵠⲆⵠ, ᐃΔ.ⵠΔΔᐃⵠᐃΔ], ea, 0, Es, 260, 315, ca | aa, ha);
    this.buttons[u++].view = S;
    this.buttons[u] = Af(115, 73, 0, [ᐃΔ.ᐃⵠᐃᐃᐃ, ᐃΔ.ΔᐃⲆΔᐃ, ᐃΔ.ΔᐃⵠⵠΔ], ea, 0, function () {
      K(m);
    }, -320, 470, ca | aa, ha);
    this.buttons[u++].view = S;
    ⵠᐃΔᐃⲆΔⵠΔⵠ = u;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, pj, -29, 205, ca | aa, ha);
    this.buttons[u++].view = F;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, jn, -29, 300, ca | aa, ha);
    this.buttons[u++].view = F;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, -29, 395, ca | aa, ha);
    this.buttons[u++].view = F;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, pj, 65, 205, ca | aa, ha);
    this.buttons[u++].view = F;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 65, 300, ca | aa, ha);
    this.buttons[u++].view = F;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 65, 395, ca | aa, ha);
    this.buttons[u++].view = F;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, Og, 159, 205, ca | aa, ha);
    this.buttons[u++].view = F;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, Kn, 159, 300, ca | aa, ha);
    this.buttons[u++].view = F;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 159, 395, ca | aa, ha);
    this.buttons[u++].view = F;
    this.buttons[u] = Af(39, 122, 0, [ᐃΔ.ΔⲆᐃⵠⵠΔⲆ, ᐃΔ.ⵠⲆⲆᐃⲆΔᐃ, ᐃΔ.ΔⲆⵠᐃᐃᐃᐃ], ea, 0, undefined, -61, 315, ca | aa, ha);
    this.buttons[u++].view = F;
    this.buttons[u] = Af(39, 122, 0, [ᐃΔ.ⲆᐃⵠⲆᐃᐃᐃ, ᐃΔ.ᐃⵠⲆᐃⵠⲆⵠ, ᐃΔ.ⵠΔΔᐃⵠᐃΔ], ea, 0, Dh, 260, 315, ca | aa, ha);
    this.buttons[u++].view = F;
    this.buttons[u] = Af(115, 73, 0, [ᐃΔ.ᐃⵠᐃᐃᐃ, ᐃΔ.ΔᐃⲆΔᐃ, ᐃΔ.ΔᐃⵠⵠΔ], ea, 0, function () {
      K(m);
    }, -320, 470, ca | aa, ha);
    this.buttons[u++].view = F;
    ⵠⵠⵠΔⵠΔⵠΔᐃ = u;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, -29, 205, ca | aa, ha);
    this.buttons[u++].view = I;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, Bo, -29, 300, ca | aa, ha);
    this.buttons[u++].view = I;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, Dh, -29, 395, ca | aa, ha);
    this.buttons[u++].view = I;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, Kn, 65, 205, ca | aa, ha);
    this.buttons[u++].view = I;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 65, 300, ca | aa, ha);
    this.buttons[u++].view = I;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 65, 395, ca | aa, ha);
    this.buttons[u++].view = I;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, Ro, 159, 205, ca | aa, ha);
    this.buttons[u++].view = I;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 159, 300, ca | aa, ha);
    this.buttons[u++].view = I;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, tr, 159, 395, ca | aa, ha);
    this.buttons[u++].view = I;
    this.buttons[u] = Af(39, 122, 0, [ᐃΔ.ΔⲆᐃⵠⵠΔⲆ, ᐃΔ.ⵠⲆⲆᐃⲆΔᐃ, ᐃΔ.ΔⲆⵠᐃᐃᐃᐃ], ea, 0, undefined, -61, 315, ca | aa, ha);
    this.buttons[u++].view = I;
    this.buttons[u] = Af(39, 122, 0, [ᐃΔ.ⲆᐃⵠⲆᐃᐃᐃ, ᐃΔ.ᐃⵠⲆᐃⵠⲆⵠ, ᐃΔ.ⵠΔΔᐃⵠᐃΔ], ea, 0, Kn, 260, 315, ca | aa, ha);
    this.buttons[u++].view = I;
    this.buttons[u] = Af(115, 73, 0, [ᐃΔ.ᐃⵠᐃᐃᐃ, ᐃΔ.ΔᐃⲆΔᐃ, ᐃΔ.ΔᐃⵠⵠΔ], ea, 0, function () {
      K(m);
    }, -320, 470, ca | aa, ha);
    this.buttons[u++].view = I;
    ⲆΔΔⲆⲆᐃⲆᐃⵠ = u;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, ma, -29, 205, ca | aa, ha);
    this.buttons[u++].view = Q;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, kl, -29, 300, ca | aa, ha);
    this.buttons[u++].view = Q;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, -29, 395, ca | aa, ha);
    this.buttons[u++].view = Q;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 65, 205, ca | aa, ha);
    this.buttons[u++].view = Q;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 65, 300, ca | aa, ha);
    this.buttons[u++].view = Q;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, Dh, 65, 395, ca | aa, ha);
    this.buttons[u++].view = Q;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 159, 205, ca | aa, ha);
    this.buttons[u++].view = Q;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 159, 300, ca | aa, ha);
    this.buttons[u++].view = Q;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, Og, 159, 395, ca | aa, ha);
    this.buttons[u++].view = Q;
    this.buttons[u] = Af(39, 122, 0, [ᐃΔ.ΔⲆᐃⵠⵠΔⲆ, ᐃΔ.ⵠⲆⲆᐃⲆΔᐃ, ᐃΔ.ΔⲆⵠᐃᐃᐃᐃ], ea, 0, undefined, -61, 315, ca | aa, ha);
    this.buttons[u++].view = Q;
    this.buttons[u] = Af(39, 122, 0, [ᐃΔ.ⲆᐃⵠⲆᐃᐃᐃ, ᐃΔ.ᐃⵠⲆᐃⵠⲆⵠ, ᐃΔ.ⵠΔΔᐃⵠᐃΔ], ea, 0, undefined, 260, 315, ca | aa, ha);
    this.buttons[u++].view = Q;
    this.buttons[u] = Af(115, 73, 0, [ᐃΔ.ᐃⵠᐃᐃᐃ, ᐃΔ.ΔᐃⲆΔᐃ, ᐃΔ.ΔᐃⵠⵠΔ], ea, 0, function () {
      K(m);
    }, -320, 470, ca | aa, ha);
    this.buttons[u++].view = Q;
    ⲆⵠⵠᐃΔΔᐃⲆⵠ = u;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, Og, -29, 205, ca | aa, ha);
    this.buttons[u++].view = E;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, -29, 300, ca | aa, ha);
    this.buttons[u++].view = E;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, -29, 395, ca | aa, ha);
    this.buttons[u++].view = E;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 65, 205, ca | aa, ha);
    this.buttons[u++].view = E;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 65, 300, ca | aa, ha);
    this.buttons[u++].view = E;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 65, 395, ca | aa, ha);
    this.buttons[u++].view = E;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, Qa, 159, 205, ca | aa, ha);
    this.buttons[u++].view = E;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, undefined, 159, 300, ca | aa, ha);
    this.buttons[u++].view = E;
    this.buttons[u] = Af(178, 182, 0, [ᐃΔ.ΔᐃᐃⲆ, ᐃΔ.ⲆΔΔᐃ, ᐃΔ.ⲆⵠⲆᐃ], ea, 0, Qa, 159, 395, ca | aa, ha);
    this.buttons[u++].view = E;
    this.buttons[u] = Af(39, 122, 0, [ᐃΔ.ΔⲆᐃⵠⵠΔⲆ, ᐃΔ.ⵠⲆⲆᐃⲆΔᐃ, ᐃΔ.ΔⲆⵠᐃᐃᐃᐃ], ea, 0, Wg, -61, 315, ca | aa, ha);
    this.buttons[u++].view = E;
    this.buttons[u] = Af(39, 122, 0, [ᐃΔ.ⲆᐃⵠⲆᐃᐃᐃ, ᐃΔ.ᐃⵠⲆᐃⵠⲆⵠ, ᐃΔ.ⵠΔΔᐃⵠᐃΔ], ea, 0, ir, 260, 315, ca | aa, ha);
    this.buttons[u++].view = E;
    this.buttons[u] = Af(115, 73, 0, [ᐃΔ.ᐃⵠᐃᐃᐃ, ᐃΔ.ΔᐃⲆΔᐃ, ᐃΔ.ΔᐃⵠⵠΔ], ea, 0, function () {
      K(m);
    }, -320, 470, ca | aa, ha);
    this.buttons[u++].view = E;
    this.buttons[u] = Af(260, 260, 0, [ᐃΔ.ᐃⵠᐃᐃΔᐃΔ, ᐃΔ.ΔⲆⵠᐃᐃΔΔ, ᐃΔ.ΔᐃΔᐃⲆⲆᐃ], ea, 0, function () {
      if (w.ⲆΔⲆⵠⵠ()) {
        ky(3, 50);
      } else {
        K(v);
      }
    }, -65, 197, ca | aa, ha);
    this.buttons[u++].view = x;
    this.buttons[u] = Af(115, 73, 0, [ᐃΔ.ᐃⵠᐃᐃᐃ, ᐃΔ.ΔᐃⲆΔᐃ, ᐃΔ.ΔᐃⵠⵠΔ], ea, 0, function () {
      K(c);
    }, 309, 180, ca | aa, ha);
    this.buttons[u++].view = x;
    this.buttons[u] = Af(260, 260, 0, [ᐃΔ.ΔⲆΔᐃΔⲆⵠ, ᐃΔ.ⲆⲆΔⲆΔᐃⲆ, ᐃΔ.ΔᐃΔΔΔⵠⵠ], ea, 0, function () {
      if (w.ⲆΔⲆⵠⵠ()) {
        ky(0, 100);
      } else {
        K(v);
      }
    }, -65, 197, ca | aa, ha);
    this.buttons[u++].view = O;
    this.buttons[u] = Af(115, 73, 0, [ᐃΔ.ᐃⵠᐃᐃᐃ, ᐃΔ.ΔᐃⲆΔᐃ, ᐃΔ.ΔᐃⵠⵠΔ], ea, 0, function () {
      K(c);
    }, 309, 180, ca | aa, ha);
    this.buttons[u++].view = O;
    this.buttons[u] = Af(260, 260, 0, [ᐃΔ.ΔᐃᐃᐃΔᐃⲆ, ᐃΔ.ΔΔᐃⲆⵠⵠΔ, ᐃΔ.ⲆⲆΔΔΔⵠⵠ], ea, 0, function () {
      if (w.ⲆΔⲆⵠⵠ()) {
        ky(4, 150);
      } else {
        K(v);
      }
    }, -65, 197, ca | aa, ha);
    this.buttons[u++].view = k;
    this.buttons[u] = Af(115, 73, 0, [ᐃΔ.ᐃⵠᐃᐃᐃ, ᐃΔ.ΔᐃⲆΔᐃ, ᐃΔ.ΔᐃⵠⵠΔ], ea, 0, function () {
      K(c);
    }, 309, 180, ca | aa, ha);
    this.buttons[u++].view = k;
    this.buttons[u] = Af(260, 260, 0, [ᐃΔ.ΔΔΔΔⲆⲆⲆ, ᐃΔ.ⵠⵠⲆⵠⵠΔⵠ, ᐃΔ.ΔⲆᐃᐃⲆΔⵠ], ea, 0, function () {
      if (w.ⲆΔⲆⵠⵠ()) {
        ky(1, 300);
      } else {
        K(v);
      }
    }, -65, 197, ca | aa, ha);
    this.buttons[u++].view = J;
    this.buttons[u] = Af(115, 73, 0, [ᐃΔ.ᐃⵠᐃᐃᐃ, ᐃΔ.ΔᐃⲆΔᐃ, ᐃΔ.ΔᐃⵠⵠΔ], ea, 0, function () {
      K(c);
    }, 309, 180, ca | aa, ha);
    this.buttons[u++].view = J;
    this.buttons[u] = Af(260, 260, 0, [ᐃΔ.ᐃⲆⲆⵠⲆⲆΔ, ᐃΔ.ᐃⲆΔⲆⵠᐃΔ, ᐃΔ.ΔⵠⲆᐃᐃΔᐃ], ea, 0, function () {
      if (w.ⲆΔⲆⵠⵠ()) {
        ky(2, 600);
      } else {
        K(v);
      }
    }, -65, 197, ca | aa, ha);
    this.buttons[u++].view = A;
    this.buttons[u] = Af(115, 73, 0, [ᐃΔ.ᐃⵠᐃᐃᐃ, ᐃΔ.ΔᐃⲆΔᐃ, ᐃΔ.ΔᐃⵠⵠΔ], ea, 0, function () {
      K(c);
    }, 309, 180, ca | aa, ha);
    this.buttons[u++].view = A;
    this.buttons[u] = Af(260, 260, 0, [ᐃΔ.ΔΔΔΔⲆⲆⲆ, ᐃΔ.ⵠⵠⲆⵠⵠΔⵠ, ᐃΔ.ΔⲆᐃᐃⲆΔⵠ], ea, 0, function () {
      if (w.ⲆΔⲆⵠⵠ()) {
        ky(5, 300);
      } else {
        K(v);
      }
    }, -65, 197, ca | aa, ha);
    this.buttons[u++].view = M;
    this.buttons[u] = Af(115, 73, 0, [ᐃΔ.ᐃⵠᐃᐃᐃ, ᐃΔ.ΔᐃⲆΔᐃ, ᐃΔ.ΔᐃⵠⵠΔ], ea, 0, function () {
      K(c);
    }, 309, 180, ca | aa, ha);
    this.buttons[u++].view = M;
    var ua = u;
    this.buttons[u] = Af(46, 51, 0, [ᐃΔ.ⲆᐃⵠΔⵠⲆΔ, ᐃΔ.ⲆΔᐃⲆⵠΔⵠ, ᐃΔ.ⲆΔᐃⲆⲆⵠⲆ], ea, 0, function () {
      ta(undefined, 0);
    }, -305, 132, ca | aa, ha);
    this.buttons[u++].view = d;
    var va = u;
    this.buttons[u] = Af(46, 51, 0, [ᐃΔ.ΔⲆΔΔᐃᐃᐃ, ᐃΔ.ⵠⲆⲆⵠⵠΔΔ, ᐃΔ.ΔⵠΔᐃᐃᐃᐃ], ea, 0, function () {
      ta(Bo, 1);
    }, -273, 132, ca | aa, ha);
    this.buttons[u++].view = d;
    var wa = u;
    this.buttons[u] = Af(46, 51, 0, [ᐃΔ.ᐃⲆⵠⲆⲆᐃⲆ, ᐃΔ.ⵠⵠⵠᐃᐃᐃΔ, ᐃΔ.ⵠⲆᐃΔᐃⵠⵠ], ea, 0, function () {
      ta(tr, 2);
    }, -241, 132, ca | aa, ha);
    this.buttons[u++].view = d;
    var xa = u;
    this.buttons[u] = Af(46, 51, 0, [ᐃΔ.ᐃΔΔⲆΔᐃⲆ, ᐃΔ.ΔΔⲆΔⵠⵠⲆ, ᐃΔ.ⵠⵠⲆᐃᐃΔⵠ], ea, 0, function () {
      ta(Es, 3);
    }, -305, 165, ca | aa, ha);
    this.buttons[u++].view = d;
    var ya = u;
    this.buttons[u] = Af(46, 51, 0, [ᐃΔ.ᐃᐃΔⵠΔⲆⲆ, ᐃΔ.ⲆⲆⵠΔⵠᐃᐃ, ᐃΔ.ⵠΔⵠΔⵠᐃⲆ], ea, 0, function () {
      ta(ct, 4);
    }, -273, 165, ca | aa, ha);
    this.buttons[u++].view = d;
    var za = u;
    this.buttons[u] = Af(46, 51, 0, [ᐃΔ.ⲆⲆⵠᐃⵠⲆᐃ, ᐃΔ.ᐃΔⵠΔΔⵠⲆ, ᐃΔ.ⵠᐃᐃΔᐃᐃⵠ], ea, 0, function () {
      ta(undefined, 5);
    }, -241, 165, ca | aa, ha);
    this.buttons[u++].view = d;
    var Aa = u;
    this.buttons[u] = Af(460, 73, 0, [ᐃΔ.ᐃᐃⲆᐃⵠⵠⲆ, ᐃΔ.ᐃⲆⲆⵠⵠⵠⵠ, ᐃΔ.ⵠⲆⲆⵠⵠⵠⲆ], ea, 0, function () {
      ta(-1);
    }, -180, 170, ca | aa, ha);
    this.buttons[u++].view = d;
    var Ba = u;
    this.buttons[u] = Af(222, 68, 0, [ᐃΔ.ΔⲆⵠⵠΔᐃⲆ, ᐃΔ.ΔⲆⵠⵠⲆᐃⲆ, ᐃΔ.ᐃΔⵠᐃΔΔⲆ], ea, 0, function () {
      ta(0);
    }, -180, 215, ca | aa, ha);
    this.buttons[u++].view = d;
    var Ca = u;
    this.buttons[u] = Af(222, 68, 0, [ᐃΔ.ᐃᐃⲆᐃⵠⲆⲆ, ᐃΔ.ⲆⵠΔⲆΔⲆⲆ, ᐃΔ.ⵠⵠΔⲆᐃΔⵠ], ea, 0, function () {
      ta(4);
    }, -180, 260, ca | aa, ha);
    this.buttons[u++].view = d;
    var Da = u;
    this.buttons[u] = Af(222, 68, 0, [ᐃΔ.ⲆⲆᐃΔᐃⲆⵠ, ᐃΔ.ᐃⵠᐃⵠᐃΔⵠ, ᐃΔ.ⵠⵠᐃⲆⲆᐃΔ], ea, 0, function () {
      ta(2);
    }, -60, 215, ca | aa, ha);
    this.buttons[u++].view = d;
    var Ea = u;
    this.buttons[u] = Af(222, 68, 0, [ᐃΔ.ⵠᐃⵠΔⲆⵠᐃ, ᐃΔ.ⵠᐃΔⵠⲆᐃⵠ, ᐃΔ.ΔᐃⵠⲆᐃᐃΔ], ea, 0, function () {
      ta(3);
    }, -60, 260, ca | aa, ha);
    this.buttons[u++].view = d;
    this.Ⲇⵠᐃᐃᐃᐃⵠ = u;
    this.buttons[u] = Af(143, 66, 0, [ᐃΔ.ΔⲆⵠⲆⵠΔⲆ, ᐃΔ.ⵠᐃⲆᐃΔΔΔ, ᐃΔ.ⵠΔⵠⲆⲆⵠΔ], ea, 0, function () {
      Ay(Ns, Fx.Ⲇⵠᐃᐃᐃᐃⵠ);
    }, -298, 110, ca | aa, ha);
    this.buttons[u++].view = C;
    this.ᐃⵠⵠⵠΔⲆᐃ = u;
    this.buttons[u] = Af(104, 66, 0, [ᐃΔ.ΔⵠⵠΔⵠᐃⲆ, ᐃΔ.ᐃⵠΔⵠᐃⵠⵠ, ᐃΔ.ᐃⵠⵠⵠⵠⲆᐃ], ea, 0, function () {
      Ay(undefined, Fx.ᐃⵠⵠⵠΔⲆᐃ);
    }, -223, 110, ca | aa, ha);
    this.buttons[u++].view = C;
    this.ⲆⲆⵠⵠⵠⲆⵠ = u;
    this.buttons[u] = Af(110, 66, 0, [ᐃΔ.ᐃⵠⲆⲆⲆⲆⵠ, ᐃΔ.ᐃⲆⲆΔⲆᐃΔ, ᐃΔ.ΔⵠⲆᐃⵠΔⵠ], ea, 0, function () {
      Ay(Bo, Fx.ⲆⲆⵠⵠⵠⲆⵠ);
    }, -168, 110, ca | aa, ha);
    this.buttons[u++].view = C;
    this.ⲆΔⲆΔⵠᐃⲆ = u;
    this.buttons[u] = Af(88, 66, 0, [ᐃΔ.ⲆᐃΔΔΔⲆᐃ, ᐃΔ.ΔᐃΔⵠΔΔᐃ, ᐃΔ.ΔΔⲆⵠΔΔⲆ], ea, 0, function () {
      Ay(Es, Fx.ⲆΔⲆΔⵠᐃⲆ);
    }, -110, 110, ca | aa, ha);
    this.buttons[u++].view = C;
    this.ᐃⲆᐃᐃⵠⵠᐃ = u;
    this.buttons[u] = Af(88, 66, 0, [ᐃΔ.ⵠᐃⲆⵠⲆΔᐃ, ᐃΔ.ᐃΔᐃⵠᐃⲆΔ, ᐃΔ.ⵠⲆⲆᐃᐃᐃⵠ], ea, 0, function () {
      Ay(undefined, Fx.ᐃⲆᐃᐃⵠⵠᐃ);
    }, -63, 110, ca | aa, ha);
    this.buttons[u++].view = C;
    this.buttons[u] = Af(86, 44, 0, [ᐃΔ.ᐃⵠΔⲆΔᐃⲆ, ᐃΔ.ⵠⵠᐃᐃⲆΔᐃ, ᐃΔ.ⲆⲆΔᐃΔⲆⵠ], ea, 0, function () {
      bj.open("./terms.html", "_blank");
    }, 349, 290, ca | aa, ha);
    this.buttons[u++].view = c;
    var Fa = new e(ⲆⵠΔⵠ.Δⵠⵠⵠᐃ, ᐃⲆΔΔᐃⵠⲆ, function (a) {
      Fx.ⲆΔⵠΔ = a;
      if (Fx.unlock.ⲆΔⵠΔ[a] === 1) {
        ᐃⲆᐃΔ.set("starve_skin", "" + a, {
          expires: 30
        });
      }
    }, this.ⲆΔⵠΔ, this.unlock.ⲆΔⵠΔ);
    var Ga = new e(ⲆⵠΔⵠ.ⵠᐃᐃⲆ, ⵠⵠⵠΔⵠΔⵠΔᐃ, function (a) {
      Fx.ⵠⲆⲆᐃⲆ = a;
      if (Fx.unlock.ⵠⲆⲆᐃⲆ[a] === 1) {
        ᐃⲆᐃΔ.set("starve_bag", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠⲆⲆᐃⲆ, this.unlock.ⵠⲆⲆᐃⲆ);
    var Ha = new e(ⲆⵠΔⵠ.ⵠΔⲆᐃⲆ, ⲆΔΔⲆⲆᐃⲆᐃⵠ, function (a) {
      Fx.ⵠⵠⲆᐃΔ = a;
      if (Fx.unlock.ⵠⵠⲆᐃΔ[a] === 1) {
        ᐃⲆᐃΔ.set("starve_book", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠⵠⲆᐃΔ, this.unlock.ⵠⵠⲆᐃΔ);
    var Ia = new e(ⲆⵠΔⵠ.ΔⲆⵠᐃΔ, ⲆⵠⵠᐃΔΔᐃⲆⵠ, function (a) {
      Fx.ᐃⵠΔΔⵠ = a;
      if (Fx.unlock.ᐃⵠΔΔⵠ[a] === 1) {
        ᐃⲆᐃΔ.set("starve_dead", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃⵠΔΔⵠ, this.unlock.ᐃⵠΔΔⵠ);
    var Ja = new e(ⲆⵠΔⵠ.ΔⲆⵠᐃΔ, ⵠᐃΔᐃⲆΔⵠΔⵠ, function (a) {
      Fx.ΔΔΔⵠⲆ = a;
      if (Fx.unlock.ΔΔΔⵠⲆ[a] === 1) {
        ᐃⲆᐃΔ.set("starve_crate", "" + a, {
          expires: 30
        });
      }
    }, this.ΔΔΔⵠⲆ, this.unlock.ΔΔΔⵠⲆ);
    var Ka = new e(ⲆⵠΔⵠ.ⵠⵠΔⵠⲆ, ᐃᐃΔⲆᐃⵠⵠΔΔ, function (a) {
      Fx.ⲆⵠⲆⲆⲆ = a;
      if (Fx.unlock.ⲆⵠⲆⲆⲆ[a] === 1) {
        ᐃⲆᐃΔ.set("starve_accessory", "" + a, {
          expires: 30
        });
      }
    }, this.ⲆⵠⲆⲆⲆ, this.unlock.ⲆⵠⲆⲆⲆ);
    this.ᐃΔⵠⵠᐃⵠⲆ = function (a) {
      Nx.ΔΔΔᐃ = xf(w.Ⲇᐃ, a);
      for (var b = 0; b < w.buttons.length; b++) {
        if (ia === w.buttons[b].info.active) {
          w.buttons[b].ᐃΔΔⵠ(w.Ⲇᐃ, Nx.ΔΔΔᐃ, Tf);
        }
      }
    };
    this.ΔᐃⵠⲆⵠⵠᐃ = function (a) {
      Nx.ΔΔΔᐃ = xf(w.Ⲇᐃ, a);
      for (var b = 0; b < w.buttons.length; b++) {
        var c = w.buttons[b];
        if (ia === c.info.active && c.ᐃΔΔⵠ(w.Ⲇᐃ, Nx.ΔΔΔᐃ, ff)) {
          c.info.callback();
          return;
        }
      }
    };
    this.ᐃⲆᐃⲆⵠΔᐃ = false;
    this.ⵠⲆⵠⲆᐃⲆⲆ = function (b) {
      Nx.ΔΔΔᐃ = xf(w.Ⲇᐃ, b);
      var c = th;
      for (var d = 0; d < w.buttons.length; d++) {
        if (ia === w.buttons[d].info.active) {
          c |= w.buttons[d].ᐃΔΔⵠ(w.Ⲇᐃ, Nx.ΔΔΔᐃ, pf);
        }
      }
      if (c !== w.ᐃⲆᐃⲆⵠΔᐃ) {
        w.ᐃⲆᐃⲆⵠΔᐃ = c;
        a.style.cursor = c ? w.ᐃⵠΔⲆⵠΔᐃ : w.ⲆⲆⵠⲆⲆⲆΔ;
      }
    };
    this.ᐃⵠΔΔᐃᐃΔ = function () {
      bj.addEventListener("mousedown", this.ᐃΔⵠⵠᐃⵠⲆ, N);
      bj.addEventListener("mouseup", this.ΔᐃⵠⲆⵠⵠᐃ, Ge);
      bj.addEventListener("mousemove", this.ⵠⲆⵠⲆᐃⲆⲆ, yg);
    };
    this.ΔⵠⲆⵠΔᐃⲆ = function () {
      bj.removeEventListener("mousedown", this.ᐃΔⵠⵠᐃⵠⲆ, false);
      bj.removeEventListener("mouseup", this.ΔᐃⵠⲆⵠⵠᐃ, false);
      bj.removeEventListener("mousemove", this.ⵠⲆⵠⲆᐃⲆⲆ, th);
    };
  }
  var ux = 1;
  var vx = 1;
  var wx = {
    ⵠᐃⵠⵠᐃᐃⲆⵠᐃ: 5000,
    ΔⲆᐃⲆΔⲆΔⲆΔ: 12,
    ⵠⵠΔΔⲆ: 2,
    ⲆᐃⲆⵠΔⵠᐃΔᐃ: 5000,
    ᐃⵠᐃⵠΔⲆⲆⵠᐃ: 5000,
    ⵠᐃΔᐃΔⲆⲆΔΔ: 12,
    ᐃⲆΔᐃΔ: 1,
    ⵠΔᐃ: 6,
    ⵠⲆᐃⲆⲆⲆⵠ: 3000,
    ᐃⵠᐃᐃⲆ: 3,
    ⲆᐃⲆⲆΔ: 8,
    ⲆΔΔᐃᐃⲆΔ: 460000,
    ⲆⵠⵠⲆⵠⲆᐃ: 12
  };
  var xx = [];
  xx[-1] = 1;
  xx[28] = 1;
  xx[49] = 1;
  xx[uh.ⲆᐃⲆⵠᐃΔΔΔᐃ] = 2;
  xx[8] = 2;
  xx[1] = 2;
  xx[3] = 2;
  xx[4] = 2;
  xx[31] = 2;
  xx[32] = 2;
  xx[9] = 2;
  xx[57] = 2;
  xx[0] = 2;
  xx[63] = 2;
  xx[17] = 2;
  xx[5] = 2;
  xx[6] = 2;
  xx[30] = 2;
  xx[uh.ΔⲆΔᐃⲆⲆΔᐃΔ] = 2;
  xx[18] = 2;
  xx[12] = 2;
  xx[13] = 2;
  xx[14] = 2;
  xx[15] = 2;
  xx[16] = 2;
  xx[33] = 2;
  xx[uh.ΔⵠᐃⲆⵠᐃΔⲆⵠ] = 2;
  xx[35] = 2;
  xx[36] = 2;
  xx[37] = 2;
  xx[38] = 2;
  xx[39] = 2;
  xx[45] = 2;
  xx[62] = 2;
  xx[54] = 2;
  xx[53] = 2;
  xx[46] = 3;
  xx[50] = 3;
  xx[51] = 3;
  xx[52] = 3;
  ⲆⲆᐃⲆ = [];
  ⲆⲆᐃⲆ[0] = 0;
  ⲆⲆᐃⲆ[1] = 1;
  ⲆⲆᐃⲆ[2] = 1;
  ⲆⲆᐃⲆ[3] = 1;
  ⲆⲆᐃⲆ[4] = 0;
  ⲆⲆᐃⲆ[5] = 0;
  ⲆⲆᐃⲆ[6] = 0;
  ⲆⲆᐃⲆ[7] = 0;
  ⲆⲆᐃⲆ[8] = 0;
  ⲆⲆᐃⲆ[9] = 0;
  ⲆⲆᐃⲆ[10] = 1;
  ⲆⲆᐃⲆ[11] = 1;
  ⲆⲆᐃⲆ[12] = 1;
  ⲆⲆᐃⲆ[13] = 1;
  ⲆⲆᐃⲆ[14] = 1;
  ⲆⲆᐃⲆ[15] = 1;
  ⲆⲆᐃⲆ[16] = 0;
  ⲆⲆᐃⲆ[17] = 0;
  ⲆⲆᐃⲆ[18] = 0;
  ⲆⲆᐃⲆ[19] = 0;
  ⲆⲆᐃⲆ[20] = 0;
  ⲆⲆᐃⲆ[21] = 0;
  ⲆⲆᐃⲆ[22] = 0;
  ⲆⲆᐃⲆ[23] = 1;
  ⲆⲆᐃⲆ[24] = 1;
  ⲆⲆᐃⲆ[25] = 1;
  ⲆⲆᐃⲆ[26] = 1;
  ⲆⲆᐃⲆ[27] = 1;
  ⲆⲆᐃⲆ[28] = 1;
  ⲆⲆᐃⲆ[29] = 1;
  ⲆⲆᐃⲆ[30] = 1;
  ⲆⲆᐃⲆ[31] = 1;
  ⲆⲆᐃⲆ[32] = 1;
  ⲆⲆᐃⲆ[33] = 1;
  ⲆⲆᐃⲆ[34] = 1;
  ⲆⲆᐃⲆ[35] = 1;
  ⲆⲆᐃⲆ[36] = 1;
  ⲆⲆᐃⲆ[37] = 1;
  ⲆⲆᐃⲆ[38] = 1;
  ⲆⲆᐃⲆ[40] = 0;
  ⲆⲆᐃⲆ[41] = 0;
  ⲆⲆᐃⲆ[42] = 0;
  ⲆⲆᐃⲆ[50] = 1;
  ⲆⲆᐃⲆ[51] = 1;
  ⲆⲆᐃⲆ[52] = 1;
  ⲆⲆᐃⲆ[55] = 0;
  ⲆⲆᐃⲆ[56] = 0;
  ⲆⲆᐃⲆ[57] = 0;
  ⲆⲆᐃⲆ[58] = 0;
  ΔⲆⲆⲆⵠ = [];
  ΔⲆⲆⲆⵠ[Yf.ⲆΔᐃᐃⵠ] = 0;
  ΔⲆⲆⲆⵠ[1] = 0;
  ΔⲆⲆⲆⵠ[29] = 0;
  ΔⲆⲆⲆⵠ[6] = 0;
  ΔⲆⲆⲆⵠ[3] = -1;
  ΔⲆⲆⲆⵠ[31] = -1;
  ΔⲆⲆⲆⵠ[2] = 0;
  ΔⲆⲆⲆⵠ[4] = 0;
  ΔⲆⲆⲆⵠ[30] = 0;
  ΔⲆⲆⲆⵠ[33] = 0;
  ΔⲆⲆⲆⵠ[32] = 1;
  ΔⲆⲆⲆⵠ[35] = 1;
  ΔⲆⲆⲆⵠ[7] = 1;
  ΔⲆⲆⲆⵠ[8] = 1;
  ΔⲆⲆⲆⵠ[9] = 1;
  ΔⲆⲆⲆⵠ[19] = 1;
  ΔⲆⲆⲆⵠ[50] = 1;
  ΔⲆⲆⲆⵠ[5] = 0;
  ΔⲆⲆⲆⵠ[12] = 1;
  ΔⲆⲆⲆⵠ[13] = 1;
  ΔⲆⲆⲆⵠ[14] = 1;
  ΔⲆⲆⲆⵠ[20] = 1;
  ΔⲆⲆⲆⵠ[52] = 1;
  ΔⲆⲆⲆⵠ[10] = 0;
  ΔⲆⲆⲆⵠ[15] = 1;
  ΔⲆⲆⲆⵠ[16] = 1;
  ΔⲆⲆⲆⵠ[17] = 1;
  ΔⲆⲆⲆⵠ[21] = 1;
  ΔⲆⲆⲆⵠ[51] = 1;
  ΔⲆⲆⲆⵠ[45] = 0;
  ΔⲆⲆⲆⵠ[46] = 1;
  ΔⲆⲆⲆⵠ[47] = 1;
  ΔⲆⲆⲆⵠ[48] = 1;
  ΔⲆⲆⲆⵠ[49] = 1;
  ΔⲆⲆⲆⵠ[53] = 1;
  ΔⲆⲆⲆⵠ[18] = 1;
  ΔⲆⲆⲆⵠ[22] = 1;
  ΔⲆⲆⲆⵠ[23] = 1;
  ΔⲆⲆⲆⵠ[11] = 0;
  ΔⲆⲆⲆⵠ[34] = 1;
  var yx = {
    ⲆⵠⵠᐃⲆΔᐃ: {
      ᐃⲆΔΔⵠ: null,
      path: ["audio/ambience.mp3"],
      Ⲇⵠ: {
        d2: [90684, 300, $g],
        d1: [90391, 300, cs],
        d0: [90086, 300, Ge]
      },
      sample: {
        d0: 8,
        d1: 8,
        d2: 8
      }
    },
    ⵠⲆⵠⲆⲆⵠΔ: {
      ᐃⲆΔΔⵠ: null,
      path: ["audio/ambience.mp3"],
      Ⲇⵠ: {
        p2: [89815, 300, Sq],
        p0: [89303, 300, Nh],
        p1: [89549, 300, go]
      },
      sample: {
        p0: 8,
        p1: 8,
        p2: 8
      }
    },
    ΔⲆⵠᐃΔⵠᐃ: {
      ᐃⲆΔΔⵠ: null,
      path: ["audio/ambience.mp3"],
      Ⲇⵠ: {
        w3: [89025, 300, false],
        w2: [88751, 300, false],
        w1: [88473, 300, Nq],
        w0: [88195, 300, false]
      },
      sample: {
        w0: 8,
        w1: 8,
        w2: 8,
        w3: 8
      }
    },
    ⲆᐃⲆⵠⲆⵠⲆ: {
      ᐃⲆΔΔⵠ: null,
      path: ["audio/ambience.mp3"],
      Ⲇⵠ: {
        ᐃᐃΔⲆΔ: [28380, 1797, Gh],
        ⵠᐃᐃᐃΔᐃᐃ: [66961, 21223, true],
        ΔΔⲆⲆⲆΔⵠ: [91022, 400, yg],
        ᐃᐃᐃᐃⵠ: [91431, 400, Nh],
        ΔⵠΔⵠⵠᐃⵠⲆⵠ: [100, 2800, Gh],
        ⲆⵠⵠΔⵠⵠΔ: [19882, 8301, pl],
        ⵠⵠⵠⲆⵠⵠⵠ: [3100, 8800, true],
        ᐃᐃᐃΔᐃᐃⲆ: [30562, 655, Tj],
        ΔⵠⲆΔⲆⵠᐃ: [66961, 21223, true],
        ᐃⵠⵠⵠᐃ: [12356, 6965, Gh],
        ΔᐃⲆΔΔⲆᐃ: [66014, 925, Xs],
        ⵠΔΔⵠᐃᐃⲆ: [92249, 500, yl],
        ΔⵠⵠⲆΔΔⵠ: [32604, 21890, Ao],
        ⲆᐃᐃᐃⵠΔⵠ: [31658, 813, Gh],
        ⲆⵠⵠⲆΔᐃⵠ: [54524, 11393, true]
      },
      sample: {
        ΔⵠΔⵠⵠᐃⵠⲆⵠ: 1,
        ⵠⵠⵠⲆⵠⵠⵠ: 1,
        ⲆⵠⵠΔⵠⵠΔ: 1,
        ΔⵠⵠⲆΔΔⵠ: 1,
        ⲆⵠⵠⲆΔᐃⵠ: 1,
        ⵠᐃᐃᐃΔᐃᐃ: 1,
        ΔⵠⲆΔⲆⵠᐃ: 1,
        ᐃⵠⵠⵠᐃ: 8,
        ᐃᐃΔⲆΔ: 8,
        ᐃᐃᐃΔᐃᐃⲆ: 8,
        ⲆᐃᐃᐃⵠΔⵠ: 8,
        ΔᐃⲆΔΔⲆᐃ: 8,
        ΔΔⲆⲆⲆΔⵠ: 6,
        ᐃᐃᐃᐃⵠ: 6,
        ⵠΔΔⵠᐃᐃⲆ: 6
      }
    }
  };
  function zx(b, c, d, e, f, i, a, j, k, h, g) {
    this.r = 1;
    this.ⲆΔⲆΔⲆ = b;
    this.ΔᐃΔⲆᐃΔⲆ = b;
    this.ΔΔΔ = c;
    this.ΔⲆⵠ = d;
    this.fade = e;
    this.ⵠΔΔᐃΔⲆⵠ = f;
    this.ⵠⵠᐃⲆΔΔⵠ = i;
    this.ΔⵠΔⲆ = a;
    this.ᐃⲆΔⵠⲆⲆᐃ = j;
    this.source = k;
    this.source.ᐃΔΔⲆⲆᐃⵠ = k.x + k.w;
    this.source.ᐃᐃΔΔⲆ = k.y + k.Ⲇᐃⵠ;
    this.ⲆⵠⵠᐃⵠΔⲆⵠΔ = h;
    this.ⲆᐃⵠᐃⲆᐃᐃ = g;
    this.ⵠᐃⲆᐃⵠⲆⲆ = 0;
    this.ΔΔⵠΔᐃⵠⲆ = {
      d: 5,
      ᐃΔᐃⲆΔ: 5
    };
    this.ⵠⲆᐃⲆⲆ = function () {
      this.ⲆΔⲆΔⲆ -= Ox;
      if (this.ⲆΔⲆΔⲆ < 0) {
        this.ⲆΔⲆΔⲆ = this.ΔᐃΔⲆᐃΔⲆ;
        var a = yx.ⲆᐃⲆⵠⲆⵠⲆ.ᐃⲆΔΔⵠ.playing(this.ΔΔΔ);
        var b = yx.ⲆᐃⲆⵠⲆⵠⲆ.ᐃⲆΔΔⵠ.playing(this.ΔⲆⵠ);
        if (a && !b) {
          var c = ux * this.ΔⵠΔⲆ.volume(this.ΔΔΔ);
          var d = (Math.random() * this.ⵠⵠᐃⲆΔΔⵠ + this.ⵠΔΔᐃΔⲆⵠ) * ux;
          this.ΔⵠΔⲆ.fade(c, d, this.fade, this.ΔΔΔ);
        } else if (!a && b) {
          c = ux * this.ΔⵠΔⲆ.volume(this.ΔⲆⵠ);
          d = (this.ⵠⵠᐃⲆΔΔⵠ * Math.random() + this.ⵠΔΔᐃΔⲆⵠ) * ux;
          this.ΔⵠΔⲆ.fade(c, d, this.fade, this.ΔⲆⵠ);
        }
      }
    };
    this.transition = function () {
      this.ⲆΔⲆΔⲆ = this.ΔᐃΔⲆᐃΔⲆ;
      this.ΔΔⵠΔᐃⵠⲆ.d = this.ΔΔⵠΔᐃⵠⲆ.ᐃΔᐃⲆΔ;
      if (Gx.time) {
        this.ΔⵠΔⲆ.fade(0, this.ⵠΔΔᐃΔⲆⵠ * ux, this.ᐃⲆΔⵠⲆⲆᐃ, this.ΔΔΔ);
        this.ΔⵠΔⲆ.play(this.ΔΔΔ);
        if (this.ΔⵠΔⲆ.playing(this.ΔⲆⵠ)) {
          var a = ux * this.ΔⵠΔⲆ.volume(this.ΔⲆⵠ);
          this.ΔⵠΔⲆ.fade(a, 0, this.ᐃⲆΔⵠⲆⲆᐃ, this.ΔⲆⵠ);
        }
      } else {
        this.ΔⵠΔⲆ.fade(0, ux * this.ⵠΔΔᐃΔⲆⵠ, this.ᐃⲆΔⵠⲆⲆᐃ, this.ΔⲆⵠ);
        this.ΔⵠΔⲆ.play(this.ΔⲆⵠ);
        if (this.ΔⵠΔⲆ.playing(this.ΔΔΔ)) {
          a = ux * this.ΔⵠΔⲆ.volume(this.ΔΔΔ);
          this.ΔⵠΔⲆ.fade(a, 0, this.ᐃⲆΔⵠⲆⲆᐃ, this.ΔΔΔ);
        }
      }
    };
    this.check = function (a) {
      if (this.ⵠᐃⲆᐃⵠⲆⲆ) {
        if (ᐃⵠⵠ.ⲆᐃⵠᐃⲆᐃᐃ(a, this.ⲆⵠⵠᐃⵠΔⲆⵠΔ)) {
          if (!Lx.transition && Gx.ᐃⲆΔⵠᐃ.now < 460000) {
            if (Gx.time) {
              if (!this.ΔⵠΔⲆ.playing(this.ΔΔΔ)) {
                this.ΔΔⵠΔᐃⵠⲆ.d -= Ox;
                if (this.ΔΔⵠΔᐃⵠⲆ.d < 0) {
                  this.transition();
                }
              }
            } else if (!this.ΔⵠΔⲆ.playing(this.ΔⲆⵠ)) {
              this.ΔΔⵠΔᐃⵠⲆ.d -= Ox;
              if (this.ΔΔⵠΔᐃⵠⲆ.d < 0) {
                this.transition();
              }
            }
          }
        } else {
          this.ⵠᐃⲆᐃⵠⲆⲆ = 0;
          if (this.ΔⵠΔⲆ.playing(this.ΔΔΔ)) {
            var b = ux * this.ΔⵠΔⲆ.volume(this.ΔΔΔ);
            this.ΔⵠΔⲆ.fade(b, 0, this.ᐃⲆΔⵠⲆⲆᐃ, this.ΔΔΔ);
          }
          if (this.ΔⵠΔⲆ.playing(this.ΔⲆⵠ)) {
            b = ux * this.ΔⵠΔⲆ.volume(this.ΔⲆⵠ);
            this.ΔⵠΔⲆ.fade(b, 0, this.ᐃⲆΔⵠⲆⲆᐃ, this.ΔⲆⵠ);
          }
        }
      } else if (ᐃⵠⵠ.ⲆᐃⵠᐃⲆᐃᐃ(a, this.ⲆᐃⵠᐃⲆᐃᐃ)) {
        this.ⵠᐃⲆᐃⵠⲆⲆ = 1;
        if (!Lx.transition && Gx.ᐃⲆΔⵠᐃ.now < 460000) {
          this.transition();
        }
      }
    };
    this.ⲆΔᐃ = function (a, b) {
      var c;
      var d;
      c = this.source.x > a.x ? Lx.ⲆΔⵠⲆΔⲆⲆ(this.source.x) : a.x > this.source.ᐃΔΔⲆⲆᐃⵠ ? Lx.ⲆΔⵠⲆΔⲆⲆ(this.source.ᐃΔΔⲆⲆᐃⵠ) : b.x;
      d = a.y < this.source.y ? Lx.ⵠᐃᐃⲆᐃⲆⵠ(this.source.y) : a.y > this.source.ᐃᐃΔΔⲆ ? Lx.ⵠᐃᐃⲆᐃⲆⵠ(this.source.ᐃᐃΔΔⲆ) : b.y;
      this.ΔⵠΔⲆ.pos(c, d, -0.5, this.ΔΔΔ);
      this.ΔⵠΔⲆ.pos(c, d, -0.5, this.ΔⲆⵠ);
    };
  }
  function Ax(a, b) {
    const c = (8 << (a >> 24 & 255)) + (24 << (a & 255)) + (16 << (a >> 16 & 255)) + (0 << (a >> 8 & 255));
    const d = (b | 11053) & ~(b & 11053);
    const e = hq(c, d, c, d);
    (function (b, c, d, e, f) {
      const g = (d | 20600) & ~(d & 20600);
      const a = ~(e & 49191) & e | ~(e & 49191) & 49191;
      const i = (24 << (f >> 8 & 255)) + (0 << (f >> 16 & 255)) + (16 << (f & 255)) + (8 << (f >> 24 & 255));
      const j = pb(~(b & 33568) & 33568 | ~(b & 33568) & b, (60664 + c) % 65316);
      Vx(g, a, i);
    })(c, d, c, d, c);
    return ~(e & 28883) & e | ~(e & 28883) & 28883;
  }
  ΔⲆᐃⲆⲆ = {
    ΔᐃⲆᐃⵠⵠⲆ: 1,
    ⲆⲆⵠⲆᐃⲆᐃ: 4,
    ⲆⲆⲆⲆᐃΔΔΔⲆ: 0.2,
    ΔᐃⵠⵠΔᐃᐃ: 100,
    ⲆΔⲆⲆⵠ: 2,
    ⵠⵠᐃⵠΔⲆΔ: 0,
    ΔⵠⲆⲆⲆΔⲆ: 100,
    ᐃⲆΔΔᐃⵠΔⵠⲆ: 0.4,
    ᐃᐃⲆΔᐃⲆⵠⲆⲆ: 0.2,
    ΔΔΔⵠΔᐃΔ: 3,
    Δⵠᐃᐃᐃⵠⵠ: 2,
    ⵠᐃᐃⲆⵠΔⵠⲆⵠ: 0.2,
    ΔⲆⲆΔⵠⲆⵠ: 100,
    ⲆⲆΔⵠⲆⲆⲆ: 300
  };
  function Bx(a, b, c) {
    this.ᐃΔΔΔᐃⵠΔ = a;
    this.c = 0;
    this.ΔⵠΔⲆ = b;
    this.ᐃᐃᐃΔⲆ = c;
    this.max = c.length;
    this.play = function () {
      this.c = (this.c + 1) % this.max;
      var a = this.ᐃᐃᐃΔⲆ[this.c];
      this.ᐃΔΔΔᐃⵠΔ.ⵠᐃⵠⲆΔᐃΔ(this.ΔⵠΔⲆ, a);
      this.ΔⵠΔⲆ.play(a);
    };
  }
  function Cx(a) {
    this.ᐃⵠⲆᐃᐃⲆⵠ = 1;
    this.ᐃⲆⲆⵠ = 0;
    this.mode = -1;
    this.ᐃᐃΔⲆΔ = Lx.sample.ᐃᐃΔⲆΔ[a];
    this.ᐃᐃᐃΔᐃᐃⲆ = Lx.sample.ᐃᐃᐃΔᐃᐃⲆ[a];
    this.ⲆᐃᐃᐃⵠΔⵠ = Lx.sample.ⲆᐃᐃᐃⵠΔⵠ[a];
    this.ΔᐃⲆΔΔⲆᐃ = Lx.sample.ΔᐃⲆΔΔⲆᐃ[a];
    this.ᐃⵠⵠⵠⵠⵠΔ = new Bx(this, yx.ⵠⲆⵠⲆⲆⵠΔ.ᐃⲆΔΔⵠ, Lx.ⵠⲆᐃΔⵠ.ᐃⵠⵠⵠⵠⵠΔ[a]);
    this.ᐃΔⲆΔᐃ = new Bx(this, yx.ΔⲆⵠᐃΔⵠᐃ.ᐃⲆΔΔⵠ, Lx.ⵠⲆᐃΔⵠ.ᐃΔⲆΔᐃ[a]);
    this.ᐃᐃΔΔⵠ = new Bx(this, yx.ⲆⵠⵠᐃⲆΔᐃ.ᐃⲆΔΔⵠ, Lx.ⵠⲆᐃΔⵠ.ᐃᐃΔΔⵠ[a]);
    this.ᐃΔⵠᐃΔ = a;
    this.x = 0;
    this.y = 0;
    this.ⲆⲆⵠᐃⵠ = 0;
    this.ⲆΔⲆΔⲆ = ΔⲆᐃⲆⲆ.ⵠᐃΔⵠΔⲆⵠⲆᐃ;
    this.ΔΔΔᐃ = {
      y: 0,
      x: 0
    };
    this.ᐃⲆᐃᐃⲆ = yx.ⲆᐃⲆⵠⲆⵠⲆ.ᐃⲆΔΔⵠ;
    this.ⲆⲆᐃΔⵠⵠΔᐃΔ = function (a) {
      if (a === 1) {
        this.ᐃⵠⵠⵠⵠⵠΔ.play();
      } else if (a === 2) {
        this.ᐃΔⲆΔᐃ.play();
      } else if (a === 3) {
        this.ᐃᐃΔΔⵠ.play();
      }
    };
    this.ⲆᐃⲆⵠΔⵠΔ = function (a) {
      if (a.ᐃⲆΔⲆᐃᐃⲆ > 0) {
        return ΔⲆᐃⲆⲆ.ⲆΔⲆⲆⵠ;
      } else if (a.ᐃᐃⵠⵠⵠᐃᐃ > 0) {
        return ΔⲆᐃⲆⲆ.ΔᐃⲆᐃⵠⵠⲆ;
      } else if (a.ΔⵠⲆΔΔ > 0 || a.ΔⵠΔᐃⲆ > 0) {
        return ΔⲆᐃⲆⲆ.ΔΔΔⵠΔᐃΔ;
      } else {
        return ΔⲆᐃⲆⲆ.ⵠⵠᐃⵠΔⲆΔ;
      }
    };
    this.ⲆⵠΔⵠⲆ = function (a) {
      this.ᐃⵠⲆᐃᐃⲆⵠ = 0;
      this.ᐃⲆⲆⵠ = a;
      var b = Gx.ⲆΔⲆΔⵠ[a];
      b.ᐃΔⵠᐃΔ = this.ᐃΔⵠᐃΔ;
      this.mode = this.ⲆᐃⲆⵠΔⵠΔ(b);
      this.ΔΔΔᐃ.x = b.x;
      this.ΔΔΔᐃ.y = b.y;
    };
    this.ⵠⵠᐃᐃᐃⲆᐃ = function () {
      this.ᐃⵠⲆᐃᐃⲆⵠ = 1;
      this.mode = -1;
      this.ᐃⲆᐃᐃⲆ.stop(this.ᐃᐃΔⲆΔ);
      this.ᐃⲆᐃᐃⲆ.stop(this.ᐃᐃᐃΔᐃᐃⲆ);
      this.ᐃⲆᐃᐃⲆ.stop(this.ⲆᐃᐃᐃⵠΔⵠ);
      this.ᐃⲆᐃᐃⲆ.stop(this.ΔᐃⲆΔΔⲆᐃ);
    };
    this.fade = function (a, b) {
      var c = vx * this.ᐃⲆᐃᐃⲆ.volume(a);
      this.ᐃⲆᐃᐃⲆ.fade(c, 0, b, a);
    };
    this.ⵠᐃⵠⲆΔᐃΔ = function (a, b) {
      if (this.ⲆⲆⵠᐃⵠ && this.ᐃΔⵠᐃΔ) {
        a.pos(this.x, this.y, -0.5, b);
      }
    };
    this.ⵠⲆᐃⲆⲆ = function (b, c, d, e, f, g, a) {
      this.ⲆΔⲆΔⲆ = g;
      if (e && this.mode === f) {
        var i = vx * this.ᐃⲆᐃᐃⲆ.volume(b);
        if (this.ⲆⲆⵠᐃⵠ) {
          var j = (d * Math.random() + c) * vx;
          this.ᐃⲆᐃᐃⲆ.fade(i, j, a, b);
        } else {
          this.ᐃⲆᐃᐃⲆ.fade(i, 0, a, b);
        }
      } else if (this.mode != f && this.ⲆⲆⵠᐃⵠ) {
        this.ᐃⲆᐃᐃⲆ.fade(0, (c + d) * vx, a, b);
      } else if (this.ⲆⲆⵠᐃⵠ) {
        i = this.ᐃⲆᐃᐃⲆ.volume(b) * vx;
        j = (d * Math.random() + c) * vx;
        this.ᐃⲆᐃᐃⲆ.fade(i, j, a, b);
      }
      this.ⵠᐃⵠⲆΔᐃΔ(this.ᐃⲆᐃᐃⲆ, b);
      this.ᐃⲆᐃᐃⲆ.play(b);
    };
    this.ⲆΔᐃ = function () {
      var a = Gx.ⲆΔⲆΔⵠ[this.ᐃⲆⲆⵠ];
      this.ⲆΔⲆΔⲆ -= Ox;
      if (this.ⲆΔⲆΔⲆ <= 0) {
        var b = 0;
        if (a.x != this.ΔΔΔᐃ.x || this.ΔΔΔᐃ.y != a.y) {
          if (!this.ⲆⲆⵠᐃⵠ) {
            b = 1;
            this.ⲆⲆⵠᐃⵠ = 1;
          }
          this.x = Lx.ⲆΔⲆΔᐃΔⲆ(a.x, ΔⲆᐃⲆⲆ.Δⵠᐃᐃᐃⵠⵠ);
          this.y = Lx.ᐃᐃΔⲆᐃΔⵠ(a.y, ΔⲆᐃⲆⲆ.Δⵠᐃᐃᐃⵠⵠ);
        } else if (this.ⲆⲆⵠᐃⵠ) {
          b = 1;
          this.ⲆⲆⵠᐃⵠ = 0;
        }
        this.ΔΔΔᐃ.x = a.x;
        this.ΔΔΔᐃ.y = a.y;
        ⵠΔⵠⲆ = this.ⲆᐃⲆⵠΔⵠΔ(a);
        if (ⵠΔⵠⲆ != this.mode) {
          if (ΔⲆᐃⲆⲆ.ΔᐃⲆᐃⵠⵠⲆ === this.mode) {
            this.fade(this.ᐃᐃΔⲆΔ, ΔⲆᐃⲆⲆ.ⲆⲆΔⵠⲆⲆⲆ);
          } else if (this.mode === ΔⲆᐃⲆⲆ.ⲆΔⲆⲆⵠ) {
            this.fade(this.ᐃᐃᐃΔᐃᐃⲆ, ΔⲆᐃⲆⲆ.ΔᐃⵠⵠΔᐃᐃ);
          } else if (ΔⲆᐃⲆⲆ.ⵠⵠᐃⵠΔⲆΔ === this.mode) {
            this.fade(this.ⲆᐃᐃᐃⵠΔⵠ, ΔⲆᐃⲆⲆ.ΔⲆⲆΔⵠⲆⵠ);
          } else if (ΔⲆᐃⲆⲆ.ΔΔΔⵠΔᐃΔ === this.mode) {
            this.fade(this.ΔᐃⲆΔΔⲆᐃ, ΔⲆᐃⲆⲆ.ΔⵠⲆⲆⲆΔⲆ);
          }
        }
        if (ⵠΔⵠⲆ === ΔⲆᐃⲆⲆ.ΔᐃⲆᐃⵠⵠⲆ) {
          this.ⵠⲆᐃⲆⲆ(this.ᐃᐃΔⲆΔ, 0.08, 0.3, b, ⵠΔⵠⲆ, ΔⲆᐃⲆⲆ.ᐃⲆΔΔᐃⵠΔⵠⲆ, ΔⲆᐃⲆⲆ.ⲆⲆΔⵠⲆⲆⲆ);
        } else if (ⵠΔⵠⲆ === ΔⲆᐃⲆⲆ.ⲆΔⲆⲆⵠ) {
          this.ⵠⲆᐃⲆⲆ(this.ᐃᐃᐃΔᐃᐃⲆ, 0.2, 0.3, b, ⵠΔⵠⲆ, ΔⲆᐃⲆⲆ.ᐃᐃⲆΔᐃⲆⵠⲆⲆ, ΔⲆᐃⲆⲆ.ΔᐃⵠⵠΔᐃᐃ);
        } else if (ⵠΔⵠⲆ === ΔⲆᐃⲆⲆ.ⵠⵠᐃⵠΔⲆΔ) {
          this.ⵠⲆᐃⲆⲆ(this.ⲆᐃᐃᐃⵠΔⵠ, 0.3, 0.6, b, ⵠΔⵠⲆ, ΔⲆᐃⲆⲆ.ⲆⲆⲆⲆᐃΔΔΔⲆ, ΔⲆᐃⲆⲆ.ΔⲆⲆΔⵠⲆⵠ);
        } else if (ⵠΔⵠⲆ === ΔⲆᐃⲆⲆ.ΔΔΔⵠΔᐃΔ) {
          this.ⵠⲆᐃⲆⲆ(this.ΔᐃⲆΔΔⲆᐃ, 0.1, 0.25, b, ⵠΔⵠⲆ, ΔⲆᐃⲆⲆ.ⵠᐃᐃⲆⵠΔⵠⲆⵠ, ΔⲆᐃⲆⲆ.ΔⵠⲆⲆⲆΔⲆ);
        }
        this.mode = ⵠΔⵠⲆ;
      }
    };
    this.check = function () {
      var a = Gx.ⲆΔⲆΔⵠ[this.ᐃⲆⲆⵠ];
      if (a) {
        return vs;
      } else {
        this.ⵠⵠᐃᐃᐃⲆᐃ(a);
        return false;
      }
    };
  }
  ΔᐃΔᐃᐃⲆΔ = 0;
  document.getElementById("version").innerHTML = 52 + ".3";
  var Dx = [];
  var Ex = {
    time: Math.floor(Math.random() * 2),
    items: []
  };
  document.getElementById("game_body").style.backgroundColor = sh.ⲆⲆᐃⲆⵠ[Ex.time];
  Ex.items.push(new Xf(1, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
  Ex.items.push(new Xf(100, 0, 0, 0, 0, 0, 0, 5));
  Ex.items.push(new Xf(2, 0, 0, 0, 0, Math.PI / 4, 0, 0));
  Ex.items.push(new Xf(100, 0, 0, 0, 0, 0, 0, 5));
  var Fx;
  var Gx;
  var Hx;
  var Ix;
  var Jx = new function () {
    var b = this;
    function a(a) {
      let b = a.name || a.a;
      if (a.auto) {
        return b;
      } else {
        return b + " [" + a.nu + " " + Qb[324] + "]";
      }
    }
    this.ⲆΔⵠⲆ = null;
    this.ΔᐃΔⵠⵠ = 0;
    this.ⵠΔΔΔⵠ = [];
    this.ⵠⵠⲆᐃⵠᐃΔ = {};
    this.ᐃⲆΔⲆΔΔᐃ = {};
    this.ᐃⲆⲆΔΔ = [[], [], [], [], [], [], [], [], []];
    this.ΔΔⵠᐃᐃᐃⵠ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
    this.ⵠᐃⲆⵠΔ = 0;
    this.ⲆΔⲆⵠⲆⲆⵠ = 0;
    this.ⵠᐃᐃΔⲆΔΔ = function (c) {
      if (Ne !== If) {
        b.ⵠΔΔΔⵠ.push({
          a: If.name,
          gm: If.mode,
          idx: 0,
          m: 100,
          nu: 0,
          id: 0
        });
        c();
        return;
      }
      fetch(Ff + "/list", {
        method: "GET"
      }).then(function (a) {
        if (a.ok) {
          a.json().then(function (d) {
            b.ⵠΔΔΔⵠ = [];
            b.ᐃⲆΔⲆΔΔᐃ = {};
            for (let a in Nf.ⵠᐃᐃⲆᐃᐃᐃ) {
              const c = Nf.ⵠᐃᐃⲆᐃᐃᐃ[a];
              b.ⵠΔΔΔⵠ.push({
                a: "Auto Select",
                gm: c,
                m: 100,
                nu: 0,
                auto: true
              });
            }
            var f = 0;
            var e = 2;
            for (let c = 0; d.length > c; c++) {
              const i = d[c];
              const a = i.n;
              const j = i.l;
              const k = i.p;
              const h = [];
              b.ⵠⵠⲆᐃⵠᐃΔ[a] = h;
              const g = [];
              for (let b = 0; b < k.length; b++) {
                const c = a + k[b][f];
                g.push(c);
                h.push(c);
              }
              for (let c = 0; c < j.length; c++) {
                const d = j[c];
                let i;
                let a = Nf.ⵠᐃᐃⲆᐃᐃᐃ[d[e]];
                let k = a + d[1];
                i = a in b.ᐃⲆΔⲆΔΔᐃ ? ++b.ᐃⲆΔⲆΔΔᐃ[a] : b.ᐃⲆΔⲆΔΔᐃ[a] = 1;
                if (k in b.ᐃⲆΔⲆΔΔᐃ) {
                  ⲆᐃΔᐃᐃⵠⲆ = ++b.ᐃⲆΔⲆΔΔᐃ[k];
                } else {
                  ⲆᐃΔᐃᐃⵠⲆ = b.ᐃⲆΔⲆΔΔᐃ[k] = 1;
                }
                b.ⵠΔΔΔⵠ.push({
                  name: d[4],
                  a: Nf.ⲆⵠⵠⵠΔⲆⵠⵠⵠ[d[1]] + " " + ⲆᐃΔᐃᐃⵠⲆ,
                  r: d[1],
                  gm: Nf.ⵠᐃᐃⲆᐃᐃᐃ[d[e]],
                  idx: i,
                  m: 100,
                  nu: d[3],
                  id: d[1] + d[f],
                  p: g
                });
              }
            }
            const g = [];
            const a = [];
            const i = [];
            for (let c = 0; b.ⵠΔΔΔⵠ.length > c; c++) {
              const d = b.ⵠΔΔΔⵠ[c];
              if (!d.auto) {
                if (d.gm === Nf.ⵠᐃᐃⲆᐃᐃᐃ[6]) {
                  if (typeof d.name === "string" && (d.name.indexOf("Private Server") !== -1 || d.nu > 95)) {
                    i.push(d);
                  } else {
                    a.push(d);
                  }
                  g.push(c);
                }
              }
            }
            const j = [];
            j.push(...a.sort(function (a, b) {
              return b.nu - a.nu;
            }));
            j.push(...i.sort(function (a, b) {
              return (b.nu < 95 ? b.nu : 0) - (a.nu < 95 ? a.nu : 0);
            }));
            for (let a = 0; g.length > a; a++) {
              const c = g[a];
              const d = j[a];
              d.idx = a + 1;
              b.ⵠΔΔΔⵠ[c] = d;
            }
            c();
          });
        } else {
          bj.setTimeout(function () {
            b.ⵠᐃᐃΔⲆΔΔ(c);
          }, 3000);
        }
      });
    };
    this.ⲆᐃᐃΔⵠΔⵠᐃⵠ = function (a) {
      var b = [];
      for (var c = 0; a.length > c; c++) {
        if (a[c].a.indexOf(zs) !== -1) {
          b.push(c);
        }
      }
      if (b.length === 0) {
        return 0;
      } else {
        return b[Math.floor(Math.random() * b.length)];
      }
    };
    this.ⵠᐃᐃⲆᐃⵠⲆ = function (b) {
      var c = 0;
      for (var d = 0; b.length > d; d++) {
        c += b[d].nu;
      }
      var e = document.getElementById("servselect");
      if (Jx.ΔΔⵠᐃᐃᐃⵠ[Jx.ⵠᐃⲆⵠΔ] === -1) {
        Jx.ΔΔⵠᐃᐃᐃⵠ[Jx.ⵠᐃⲆⵠΔ] = e.selectedIndex = Jx.ⲆᐃᐃΔⵠΔⵠᐃⵠ(b);
      } else {
        e.selectedIndex = Jx.ΔΔⵠᐃᐃᐃⵠ[Jx.ⵠᐃⲆⵠΔ];
      }
      var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + Qb[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + Qb[323] + " (" + this.ⵠΔⵠΔⲆᐃⵠ + ") " + Qb[325] + "</li>";
      for (d = 0; b.length > d; d++) {
        f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
      }
      f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + Qb[326] + "</li>";
      f += "</div>";
      e.innerHTML = f;
      $(".md-select").on("click", function () {
        $(this).toggleClass("active");
      });
      $(".md-select ul li").on("click", function () {
        var b = $(this).text();
        var c = -1;
        for (var d = Jx.ᐃⲆⲆΔΔ[Jx.ⵠᐃⲆⵠΔ], e = 0; e < d.length; e++) {
          if (a(d[e]) === b) {
            c = e;
            break;
          }
        }
        if (c !== -1) {
          document.getElementById("servselect").selectedIndex = c;
          Jx.ΔΔⵠᐃᐃᐃⵠ[Jx.ⵠᐃⲆⵠΔ] = c;
          $(".md-select ul li").removeClass("active");
          $(this).addClass("active");
          $(".md-select label button").text(b);
        }
      });
    };
    this.ⵠΔⵠΔⲆᐃⵠ = 0;
    this.ⵠᐃⲆΔⵠⲆⲆᐃⲆ = function () {
      this.ⵠΔⵠΔⲆᐃⵠ = 0;
      for (var a = 0; a < Jx.ⵠΔΔΔⵠ.length; a++) {
        if (this.ⵠΔΔΔⵠ[a].gm == "experimental") {
          this.ᐃⲆⲆΔΔ[7].push(this.ⵠΔΔΔⵠ[a]);
        } else if (this.ⵠΔΔΔⵠ[a].gm == "zombies") {
          this.ᐃⲆⲆΔΔ[2].push(this.ⵠΔΔΔⵠ[a]);
        } else if (this.ⵠΔΔΔⵠ[a].gm == "community") {
          this.ᐃⲆⲆΔΔ[6].push(this.ⵠΔΔΔⵠ[a]);
        } else if (this.ⵠΔΔΔⵠ[a].gm == "forest") {
          this.ᐃⲆⲆΔΔ[4].push(this.ⵠΔΔΔⵠ[a]);
        } else if (this.ⵠΔΔΔⵠ[a].gm == "battle-royale") {
          this.ᐃⲆⲆΔΔ[5].push(this.ⵠΔΔΔⵠ[a]);
        } else if (this.ⵠΔΔΔⵠ[a].gm == "vampires") {
          this.ᐃⲆⲆΔΔ[3].push(this.ⵠΔΔΔⵠ[a]);
        } else {
          this.ᐃⲆⲆΔΔ[0].push(this.ⵠΔΔΔⵠ[a]);
        }
        this.ⵠΔⵠΔⲆᐃⵠ += this.ⵠΔΔΔⵠ[a].nu;
      }
      for (a = 0; this.ᐃⲆⲆΔΔ.length > a; a++) {
        if (this.ᐃⲆⲆΔΔ[a].length === 0) {
          this.ᐃⲆⲆΔΔ[a].push({
            a: Qb[327],
            ΔⵠⲆⲆⵠΔΔⵠΔ: 0,
            ⵠⲆ: "127.0.0.1",
            ΔⲆᐃ: 80
          });
        }
      }
      this.ⵠᐃᐃⲆᐃⵠⲆ(this.ᐃⲆⲆΔΔ[0]);
      this.ΔⲆⵠⲆᐃ = function (a) {
        Jx.ⵠᐃⲆⵠΔ = a;
        Jx.ⵠᐃᐃⲆᐃⵠⲆ(Jx.ᐃⲆⲆΔΔ[Jx.ⵠᐃⲆⵠΔ]);
        Jx.ⵠᐃᐃⲆᐃⵠⲆ(Jx.ᐃⲆⲆΔΔ[Jx.ⵠᐃⲆⵠΔ]);
        document.getElementById("servselect").selectedIndex = Jx.ⵠᐃⲆⵠΔ;
      };
    };
    this.ᐃⵠⲆⲆΔⵠᐃ = 0;
    this.ⲆΔΔⲆᐃⵠⵠ = 0;
    this.ΔⲆⵠᐃᐃ = null;
    this.timeout = function () {
      b.ⲆΔΔⲆᐃⵠⵠ++;
      b.ⲆΔⵠⲆ.close();
      if (b.ⲆΔΔⲆᐃⵠⵠ > 3) {
        Sx = 1;
        Fx.ⵠΔⵠⲆⵠⲆᐃⲆⲆ = Uw.ΔⲆᐃᐃΔΔᐃᐃΔ;
        b.ⵠᐃᐃΔᐃ(Qb[300]);
        Fx.waiting = Ni;
        if (Hx.reconnect.enabled) {
          Kx.ΔΔᐃⵠⲆ(Fx.ⵠᐃΔⵠΔ);
        }
      } else if (Hx.ⵠⲆΔⲆΔⵠⵠ === undefined || Hx.ΔᐃⲆⵠⲆΔΔ === jn || Hx.ᐃⵠΔⵠΔⲆⲆ === undefined || Ra === Hx.ⲆᐃⵠᐃᐃΔⵠ) {
        Fx.ⲆᐃΔⵠⵠⵠΔ(function () {
          b.ⲆⲆΔⵠᐃⵠⲆ();
        }, 1);
      } else {
        b.ⲆⲆΔⵠᐃⵠⲆ();
      }
    };
    this.ᐃⲆᐃⵠᐃⵠΔ = function (a) {
      if (this.ΔᐃΔⵠⵠ == this.ⲆΔⵠⲆ.ΔᐃΔⵠⵠ) {
        this.ΔᐃΔⵠⵠ++;
        this.ⵠᐃᐃΔᐃ(Qb[301] + a);
        Kx.ΔΔᐃⵠⲆ(Fx.ⵠᐃΔⵠΔ);
      }
    };
    this.ⲆΔΔΔᐃΔΔΔⵠ = function () {
      this.ⵠᐃᐃΔᐃ("You speak too much");
    };
    this.ⲆⲆΔᐃΔΔⲆΔⲆ = function () {
      clearTimeout(this.ΔⲆⵠᐃᐃ);
      this.ⵠᐃᐃΔᐃ(Qb[302]);
      Fx.waiting = false;
    };
    this.ⲆΔⲆΔⲆⵠⲆΔⵠ = function () {
      Hx.ⵠⲆⲆΔⲆ.open = Mo;
    };
    this.ᐃⲆⵠⵠⲆᐃᐃΔⲆ = function () {
      Kx.ᐃᐃΔᐃΔᐃⲆ = 0;
    };
    this.ⵠⵠΔⲆⵠⲆᐃΔⵠ = function () {
      Kx.ⲆⵠᐃⵠⲆⲆⵠ = 0;
    };
    this.ⲆⲆⲆⵠᐃΔΔⲆΔ = function (a) {
      Hx.ⵠᐃⵠᐃᐃ.ΔⵠⲆⲆⵠ = a;
      if (Gx.ⵠⵠⲆⲆΔ > -300) {
        if (a === 0) {
          this.ⵠᐃᐃΔᐃ(Qb[340]);
        } else {
          this.ⵠᐃᐃΔᐃ(Qb[341]);
        }
      }
    };
    this.ΔΔⲆⵠΔ = function (a) {
      Hx.ΔΔⲆⵠΔ = a;
    };
    this.ΔⲆᐃΔⲆᐃⲆΔΔ = function (a) {
      Hx.ⲆⲆΔΔⵠⵠΔ = a;
    };
    this.ⲆⲆΔΔⵠⵠΔ = function (a) {
      Hx.ⵠΔΔⵠⲆ.ΔⵠⲆⲆⵠ = a;
      if (Gx.ΔⵠⲆΔΔ > -300) {
        if (a === 0) {
          this.ⵠᐃᐃΔᐃ(Qb[342]);
        } else {
          this.ⵠᐃᐃΔᐃ(Qb[343]);
        }
      }
    };
    this.ᐃΔΔᐃΔᐃⲆᐃᐃ = function (a) {
      if (a === 0) {
        document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
      } else if (a === 1) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else if (a === 2) {
        document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
      } else if (a === 3) {
        document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
      }
    };
    this.ᐃᐃⲆⵠΔᐃⲆΔⲆ = function () {
      Kx.ᐃⲆⵠΔⵠᐃⵠ = 0;
    };
    this.ᐃᐃᐃᐃΔⵠⵠⲆᐃ = function () {
      Kx.ⵠᐃΔⲆᐃᐃΔ = 0;
    };
    this.ᐃⵠⲆⲆⲆⵠⵠΔΔ = function () {
      Hx.ⵠᐃΔⵠ.ⲆᐃⵠⲆΔ = [];
      Hx.ⵠᐃΔⵠ.ΔΔᐃΔ = [];
      Hx.ⵠᐃΔⵠ.id = -1;
      Hx.ⵠᐃΔⵠ.ⵠᐃΔΔⲆⲆⲆ.stop();
      Hx.ᐃⵠΔⲆ.ᐃᐃⵠΔᐃ = [];
      Hx.ᐃⵠΔⲆ.ⵠⲆⲆΔΔ = Kr;
      Hx.ᐃⵠΔⲆ.ⵠΔᐃⲆᐃᐃⲆⵠⵠ = yl;
      Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ = -1;
      Hx.ᐃⵠΔⲆ.id = -1;
      Hx.ᐃⵠΔⲆ.ᐃⵠⲆⵠΔ = false;
      Hx.ᐃⵠΔⲆ.ᐃⵠⵠᐃⲆ = Ks;
      Hx.ᐃⵠΔⲆ.ᐃⵠⵠⵠᐃ = false;
      Hx.ᐃⵠΔⲆ.ΔⵠᐃⲆΔΔⵠ = Gg;
      Hx.ᐃⵠΔⲆ.timeout = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0, 1, 0, 1, 1);
    };
    this.ⲆᐃⲆᐃᐃⲆⵠⲆᐃ = function () {
      clearTimeout(this.ΔⲆⵠᐃᐃ);
      this.ⵠᐃᐃΔᐃ();
      Fx.waiting = false;
    };
    this.ⵠᐃⵠᐃΔⲆⵠ = function (a) {
      for (var b = 0; a.length > b; b++) {
        if (typeof a[b] === "string") {
          a[b] = ᐃⵠⵠ.ΔⵠᐃΔⲆⵠᐃ(a[b]);
        }
      }
      Hx.ᐃⲆᐃΔⵠ.ᐃΔⵠᐃⵠ(a[1], a[2], a[3], a[4]);
    };
    this.message = function (a) {
      this.ⵠᐃᐃΔᐃ(a);
    };
    this.ⲆΔⵠⲆⵠⲆᐃᐃⵠ = function () {
      clearTimeout(this.ΔⲆⵠᐃᐃ);
      this.ⵠᐃᐃΔᐃ(Qb[339]);
      Fx.waiting = th;
    };
    this.ᐃⵠᐃᐃΔⲆⲆⵠᐃ = function () {
      clearTimeout(this.ΔⲆⵠᐃᐃ);
      this.ⵠᐃᐃΔᐃ(Qb[338]);
      Fx.waiting = false;
    };
    this.ⵠⲆᐃΔⲆⵠΔᐃⲆ = function () {
      clearTimeout(this.ΔⲆⵠᐃᐃ);
      this.ⵠᐃᐃΔᐃ(Qb[304]);
      Fx.waiting = Nq;
    };
    this.ᐃⲆᐃⵠΔᐃⵠΔⵠ = function () {
      Hx.ⵠᐃΔⵠ.ⵠⵠᐃⵠΔᐃᐃ(1, 0);
      Kx.ⲆⲆⵠⲆᐃᐃⲆ();
    };
    this.ᐃΔᐃⲆⲆⲆΔΔᐃ = function (a) {
      var b = a[1];
      var c = Gx.ᐃⲆⵠⲆ[b];
      c.ⲆΔⵠΔ = a[2];
      c.ⲆⵠⲆⲆⲆ = a[3];
      c.ⲆⵠⲆⵠⵠᐃⲆ = a[4];
      c.ⵠⵠⲆᐃΔ = a[5];
      c.ΔΔΔⵠⲆ = a[6];
      c.ᐃⵠΔΔⵠ = a[7];
      c.level = a[8];
      var d = Gx.ⲆΔⲆΔⵠ[b * Gx.ⵠⲆᐃⵠⲆⵠᐃ];
      if (d) {
        d.ⲆΔⵠΔ = a[2];
        d.ⲆⵠⲆⲆⲆ = a[3];
        d.ⲆⵠⲆⵠⵠᐃⲆ = a[4];
        d.ⵠⵠⲆᐃΔ = a[5];
      }
    };
    this.ᐃⲆΔⵠᐃΔⵠᐃⲆ = function (a) {
      if (a === 29) {
        Hx.ⵠᐃΔⵠ.ⵠⵠᐃⵠΔᐃᐃ(1, 0);
        Kx.ⲆⲆⵠⲆᐃᐃⲆ();
      } else {
        this.ⲆⵠⵠΔⲆΔⲆ([0, a, 1]);
      }
      Hx.ᐃⵠΔⲆ.ᐃⲆⲆⲆΔⲆᐃ();
    };
    this.ΔΔᐃΔⵠᐃᐃⵠᐃ = function (a) {
      Hx.ⵠΔⵠⵠᐃ.ⲆΔⲆΔⲆ = 0;
      Hx.ᐃⵠΔⲆ.ᐃⲆΔΔⲆⵠᐃⵠΔ(a);
    };
    this.ᐃΔᐃᐃΔΔᐃⵠΔ = function (a) {
      for (var b = Nt[a].r, c = 0; b.length > c; c++) {
        if (Hx.ⵠᐃΔⵠ.ⲆᐃⵠⲆΔ.length < Hx.ⵠᐃΔⵠ.max || Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[b[c][0]] > 0) {
          var d = Math.floor(b[c][1] * 0.8);
          if (!d) {
            continue;
          }
          this.ⲆⵠⵠΔⲆΔⲆ([0, b[c][0], d]);
        }
      }
      Hx.ᐃⵠΔⲆ.ᐃⲆⲆⲆΔⲆᐃ();
    };
    this.ᐃⵠᐃⲆⵠΔⲆⲆΔ = function (a) {
      Hx.ⵠΔⵠⵠᐃ.ⲆΔⲆΔⲆ = 0;
      Hx.ᐃⵠΔⲆ.ΔᐃᐃᐃΔⵠⲆΔᐃ(a);
    };
    this.ⵠᐃᐃΔᐃ = function (a) {
      if (Hx.alert.text) {
        if (Hx.alert.text !== a && a !== Hx.alert.list[Hx.alert.list.length - 1]) {
          Hx.alert.list.push(a);
        }
      } else {
        Hx.alert.text = a;
      }
    };
    this.ᐃⵠⵠⲆⵠⲆΔⲆΔ = function () {
      this.ⵠᐃᐃΔᐃ(Qb[305]);
    };
    this.ΔⵠⵠⵠⵠⵠΔΔⲆ = function () {
      var a;
      a = Hx.ΔⲆⵠ == 0 ? Qb[306] : Qb[307] + (Hx.ΔⲆⵠ + 1) + Qb[308];
      this.ⵠᐃᐃΔᐃ(a);
      Hx.ΔⲆⵠ++;
    };
    this.ᐃⲆᐃᐃΔⵠⵠⵠΔ = function () {
      clearTimeout(b.ΔⲆⵠᐃᐃ);
      Hx.reconnect.enabled = Fa;
      Hx.ᐃⵠⵠᐃⵠ = Ks;
      this.ⵠᐃᐃΔᐃ(Qb[309]);
      Kx.ΔΔᐃⵠⲆ(Fx.ⵠᐃΔⵠΔ);
      this.ⲆΔⵠⲆ.close();
    };
    this.ΔΔⵠᐃⲆⵠΔⲆΔ = function () {
      Sx = 1;
      clearTimeout(this.ΔⲆⵠᐃᐃ);
      this.ⵠᐃᐃΔᐃ(Qb[310]);
      Fx.waiting = I;
    };
    this.ⲆⵠⵠⲆᐃΔΔᐃⲆ = function () {
      Sx = 1;
      clearTimeout(this.ΔⲆⵠᐃᐃ);
      this.ⵠᐃᐃΔᐃ(Qb[311]);
      Fx.waiting = Tn;
    };
    this.ⵠΔᐃΔⵠΔΔΔⵠ = function (a) {
      var b = a[1];
      var c = Gx.ᐃⲆⵠⲆ;
      c[b].ΔᐃΔΔⵠ = a[2];
      c[b].ⲆΔⵠΔ = a[3];
      c[b].ⲆⵠⲆⲆⲆ = a[4];
      c[b].ⲆⵠⲆⵠⵠᐃⲆ = a[5];
      c[b].ⵠⵠⲆᐃΔ = a[6];
      c[b].ΔΔΔⵠⲆ = a[7];
      c[b].ᐃⵠΔΔⵠ = a[8];
      c[b].level = a[9];
      c[b].ΔⲆᐃᐃᐃ = 0;
      c[b].ⵠⲆΔΔⲆⵠΔ = null;
      c[b].label = null;
      c[b].ᐃⲆᐃᐃⲆᐃᐃ = null;
      c[b].ᐃⵠⵠᐃⵠ = Mg;
      if (Ef === 1) {
        c[b].ΔᐃΔΔⵠ += "|" + b;
      }
    };
    this.ⵠᐃⵠΔΔⵠΔⲆⵠ = function () {
      this.ⲆΔⵠⲆ[Bf](tq[fa].stringify([9]));
    };
    this.ᐃᐃΔⲆⵠⲆⵠⲆⵠ = function () {
      this.ⵠᐃᐃΔᐃ(Qb[312]);
    };
    this.ΔⲆΔᐃⵠᐃΔ = function () {
      this.ⵠᐃᐃΔᐃ(Qb[313]);
    };
    this.ΔⵠⲆᐃⵠⵠⵠⵠᐃ = function (a) {
      this.ⲆΔⵠⲆ[Bf](Sa[Jq].stringify([38, a]));
      Hx.ⵠⲆⲆΔⲆ.open = false;
    };
    this.ⲆⲆⵠᐃΔΔᐃⵠⵠ = function (a) {
      for (var b = jf[a - 1].items, c = 0; b.length > c && Hx.ⵠᐃΔⵠ.max > Hx.ⵠᐃΔⵠ.ⲆᐃⵠⲆΔ.length; c++) {
        var d = b[c][1];
        var e = b[c][0];
        if (b[c][1] === 29) {
          Hx.ⵠᐃΔⵠ.ⵠⵠᐃⵠΔᐃᐃ(1, 0);
        } else {
          this.ⲆⵠⵠΔⲆΔⲆ([0, d, e]);
        }
      }
    };
    this.ⲆⵠⵠΔⲆΔⲆ = function (b) {
      for (var c = b.length, d = Hx.ⵠᐃΔⵠ, e = 1; e < c; e += 2) {
        var f = b[e];
        var g = b[e + 1];
        for (var h = 0; d.ⲆᐃⵠⲆΔ.length > h; h++) {
          if (f == d.ⲆᐃⵠⲆΔ[h].id) {
            d.ΔΔᐃΔ[f] += g;
            break;
          }
        }
        if (h == d.ⲆᐃⵠⲆΔ.length) {
          d.ΔΔᐃΔ[f] = g;
          d.ⲆᐃⵠⲆΔ.push(Kx.ⵠᐃᐃ[f]);
          Kx.ⲆⲆⵠⲆᐃᐃⲆ();
        }
      }
      Hx.ᐃⵠΔⲆ.ⲆΔᐃ();
    };
    this.ⵠΔⲆⵠ = function (b, c, d, e, f, g, a) {
      Hx.ⵠΔⲆⵠ.ⲆᐃⵠΔ = b / 100;
      Hx.ⵠΔⲆⵠ.Ⲇᐃⵠ = c / 100;
      Hx.ⵠΔⲆⵠ.c = d / 100;
      Hx.ⵠΔⲆⵠ.ΔⵠΔ = e / 100;
      Hx.ⵠΔⲆⵠ.ⲆⲆⵠ = f / 100;
      Hx.ⵠΔⲆⵠ.ᐃⲆⵠⵠⲆⵠΔ = g / 100;
      Hx.ΔΔⲆⵠΔ = a;
    };
    this.ⲆᐃⲆⲆΔᐃΔⵠᐃ = function (a) {
      Kx.ⵠⲆⵠⵠ.modify(a, 2);
    };
    this.ᐃⲆⲆΔⲆΔᐃᐃΔ = function (a) {
      Kx.ⵠⲆⵠⵠ.modify(a, 0);
    };
    this.claimed = function (a) {
      Kx.ⵠⲆⵠⵠ.modify(a, 3);
    };
    this.ᐃⵠⵠᐃΔⵠⲆᐃΔ = function (a, b) {
      Hx.ⵠΔⲆⵠ.ⲆᐃⵠΔ = a / 100;
      Hx.ΔΔⲆⵠΔ = b;
    };
    this.ⲆⲆᐃᐃⵠΔΔⲆᐃ = function (a) {
      Hx.ⵠΔⲆⵠ.ΔⵠΔ = a / 100;
    };
    this.ⲆᐃⲆΔⵠΔⵠⲆⲆ = function (a) {
      Hx.ⵠΔⲆⵠ.Ⲇᐃⵠ = a / 100;
    };
    this.ⲆᐃΔΔⲆΔⵠⵠⲆ = function (a) {
      Hx.ⵠΔⲆⵠ.ᐃⲆⵠⵠⲆⵠΔ = a / 100;
    };
    this.ΔⵠⵠᐃᐃⲆᐃⲆⲆ = function (a) {
      Hx.ⵠΔⲆⵠ.c = a / 100;
    };
    this.ᐃⲆⵠΔΔⵠⲆᐃΔ = function (a) {
      Gx.time = a;
      Gx.transition = true;
      Lx.transition = 1;
    };
    this.ᐃΔᐃᐃⵠᐃΔⲆΔ = function () {
      document.getElementById("game_body").style.backgroundColor = sh.ⲆⲆᐃⲆⵠ[Gx.time];
    };
    this.ᐃⵠΔΔᐃΔΔΔΔ = function (a) {
      if (Gx.mode == 1 && Gx.ᐃⲆⵠⲆ[a].ΔᐃΔΔⵠ !== "spectator") {
        this.ⵠᐃᐃΔᐃ(Gx.ᐃⲆⵠⲆ[a].ΔᐃΔΔⵠ + Qb[314]);
      }
      Gx.ᐃⲆⵠⲆ[a].ᐃⵠⵠᐃⵠ = Nh;
    };
    this.ⵠᐃΔⲆⵠⵠΔᐃΔ = function (a) {
      var b = new Uint16Array(a);
      ΔⵠΔⲆ.ΔΔⲆ.ᐃⵠⲆᐃΔ(b[1], b[2]);
    };
    this.ΔΔᐃⵠⵠⲆⲆΔᐃ = function (a) {
      var b = new Uint16Array(a);
      Hx.ΔΔⲆ.ᐃⵠⲆᐃΔ(b[1], b[2]);
    };
    this.ΔⵠⵠⵠⲆᐃΔΔᐃ = function (b, c) {
      var d = new Uint16Array(c);
      for (var e = (b.length - 2) / 4, f = 0; e > f; f++) {
        var g = d[1 + f * 2];
        var i = b[4 + f * 4];
        var j = (b[5 + f * 4] >> 1) / 127 * Math.PI * 2;
        var k = Gx.ⲆΔⲆΔⵠ[i * Gx.ⵠⲆᐃⵠⲆⵠᐃ + g];
        if (k && k.ⵠⵠᐃ) {
          if (Lx.loaded && Lx.ⵠᐃΔⵠΔ) {
            Lx.ⵠⵠᐃ(b[5 + f * 4] & 1, ΔⲆⲆⲆⵠ[k.type], k.x, k.y);
          }
          k.ⵠⵠᐃ.angle = j;
          k.ⵠⵠᐃ.ⲆΔᐃ = j;
        }
      }
    };
    this.ⵠⲆΔΔΔΔΔⲆⵠ = function (b) {
      var c = new Uint16Array(b);
      for (var d = (c.length - 1) / 4, e = 0; e < d; e++) {
        var f;
        var i = e * 4;
        var j = c[1 + i];
        var k = c[2 + i];
        var m = Math.PI * ((c[3 + i] >> 1) / 127) * 2;
        var p = c[4 + i];
        var q = Dx.ᐃⲆⲆᐃ[k][j];
        switch (p) {
          case 0:
            (f = q.p[0][0]).angle = m;
            f.ⲆΔᐃ = Ao;
            break;
          case 1:
            (f = q.s[0][0]).angle = m;
            f.ⲆΔᐃ = Fg;
            break;
          case 2:
            (f = q.s[1][0]).angle = m;
            f.ⲆΔᐃ = eg;
            break;
          case 3:
            (f = q.s[2][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 4:
            (f = q.t[0][0]).angle = m;
            f.ⲆΔᐃ = Ao;
            break;
          case 5:
            (f = q.t[1][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 6:
            (f = q.t[2][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 7:
            (f = q.t[3][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 8:
            (f = q.t[4][0]).angle = m;
            f.ⲆΔᐃ = Gh;
            break;
          case 9:
            (f = q.t[5][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 10:
            (f = q.g[0][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 11:
            (f = q.g[1][0]).angle = m;
            f.ⲆΔᐃ = B;
            break;
          case 12:
            (f = q.g[2][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 13:
            (f = q.d[0][0]).angle = m;
            f.ⲆΔᐃ = Xs;
            break;
          case 14:
            (f = q.d[1][0]).angle = m;
            f.ⲆΔᐃ = Fg;
            break;
          case 15:
            (f = q.d[2][0]).angle = m;
            f.ⲆΔᐃ = Ng;
            break;
          case 16:
            (f = q.b[0][0]).angle = m;
            f.ⲆΔᐃ = rr;
            break;
          case 17:
            (f = q.b[1][0]).angle = m;
            f.ⲆΔᐃ = Va;
            break;
          case 18:
            (f = q.b[2][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 19:
            (f = q.b[3][0]).angle = m;
            f.ⲆΔᐃ = B;
            break;
          case 20:
            (f = q.f[0][0]).angle = m;
            f.ⲆΔᐃ = Tj;
            break;
          case 21:
            (f = q.f[1][0]).angle = m;
            f.ⲆΔᐃ = Ao;
            break;
          case 22:
            (f = q.f[2][0]).angle = m;
            f.ⲆΔᐃ = vs;
            break;
          case 23:
            (f = q.sw[0][0]).angle = m;
            f.ⲆΔᐃ = Mg;
            break;
          case 24:
            (f = q.sw[1][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 25:
            (f = q.sw[2][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 26:
            (f = q.gw[0][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 27:
            (f = q.gw[1][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 28:
            (f = q.gw[2][0]).angle = m;
            f.ⲆΔᐃ = qk;
            break;
          case 29:
            (f = q.dw[0][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 30:
            (f = q.dw[1][0]).angle = m;
            f.ⲆΔᐃ = Zl;
            break;
          case 31:
            (f = q.dw[2][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 32:
            (f = q.a[0][0]).angle = m;
            f.ⲆΔᐃ = pg;
            break;
          case 33:
            (f = q.a[1][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 34:
            (f = q.a[2][0]).angle = m;
            f.ⲆΔᐃ = Gh;
            break;
          case 35:
            (f = q.cs[0][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 36:
            (f = q.cs[1][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 37:
            (f = q.cs[2][0]).angle = m;
            f.ⲆΔᐃ = Fg;
            break;
          case 38:
            (f = q.cs[3][0]).angle = m;
            f.ⲆΔᐃ = It;
            break;
          case 40:
            (f = q.plm[0][0]).angle = m;
            f.ⲆΔᐃ = Fg;
            break;
          case 41:
            (f = q.plm[1][0]).angle = m;
            f.ⲆΔᐃ = nq;
            break;
          case 42:
            (f = q.plm[2][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 50:
            (f = q.re[0][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 51:
            (f = q.re[1][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 52:
            (f = q.re[2][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 55:
            (f = q.c[0][0]).angle = m;
            f.ⲆΔᐃ = Mg;
            break;
          case 56:
            (f = q.m[0][0]).angle = m;
            f.ⲆΔᐃ = true;
            break;
          case 57:
            (f = q.m[1][0]).angle = m;
            f.ⲆΔᐃ = Tk;
            break;
          case 58:
            (f = q.m[2][0]).angle = m;
            f.ⲆΔᐃ = Va;
        }
        if (Lx.loaded && Lx.ⵠᐃΔⵠΔ && f) {
          Lx.ⵠⵠᐃ(c[3 + i] & 1, ⲆⲆᐃⲆ[p], f.x, f.y);
        }
      }
    };
    this.ⵠⵠⵠⲆⲆ = function () {
      this.ⲆΔⵠⲆ[Bf](wq[pa].stringify([35, Hx.ⵠⵠⵠⲆⲆ.ᐃⵠⲆⲆ, Hx.ⵠⵠⵠⲆⲆ.ᐃⲆⲆⵠΔ]));
    };
    this.ⲆⵠΔᐃΔᐃⲆΔⵠ = function (a, b) {
      this.ⲆΔⵠⲆ[Bf](wq[ja].stringify([30, b, a.ᐃⵠⲆⲆ, a.ᐃⲆⲆⵠΔ]));
    };
    this.ⵠᐃᐃⵠⵠⲆⵠ = function (a, b, c) {
      if (b) {
        this.ⲆΔⵠⲆ[Bf](wq[ja].stringify([14, b, a.ᐃⵠⲆⲆ, a.ᐃⲆⲆⵠΔ]));
      } else {
        this.ⲆΔⵠⲆ[Bf](wq[wa].stringify([25, c, a.ᐃⵠⲆⲆ, a.ᐃⲆⲆⵠΔ]));
      }
    };
    this.ᐃᐃⵠⲆΔΔᐃΔⵠ = function (a) {
      this.ⲆΔⵠⲆ[Bf](Bq[Dq].stringify([13, a.ᐃⵠⲆⲆ, a.ᐃⲆⲆⵠΔ]));
    };
    this.ⵠΔⵠⲆΔⵠᐃⲆⲆ = function (a) {
      this.ⲆΔⵠⲆ[Bf](Bq[Pq].stringify([32, a]));
    };
    this.ΔⲆⵠⵠΔⲆᐃⵠⵠ = function (a) {
      this.ⲆΔⵠⲆ[Bf](Xa[pa].stringify([29, a.ᐃⵠⲆⲆ, a.ᐃⲆⲆⵠΔ]));
    };
    this.ΔᐃΔⲆⵠⵠⵠΔⲆ = function (a, b) {
      this.ⲆΔⵠⲆ[Bf](Sa[Dq].stringify([27, b, a.ᐃⵠⲆⲆ, a.ᐃⲆⲆⵠΔ, a.type]));
    };
    this.ⲆᐃⵠᐃⲆΔᐃΔΔ = function (a, b) {
      this.ⲆΔⵠⲆ[Bf](Sa[Dq].stringify([7, b, a.ᐃⵠⲆⲆ, a.ᐃⲆⲆⵠΔ]));
    };
    this.Ⲇⵠᐃⵠᐃⵠᐃᐃⵠ = function (a, b, c) {
      this.ⲆΔⵠⲆ[Bf](Xa[ja].stringify([1, b, c, a.ᐃⵠⲆⲆ, a.ᐃⲆⲆⵠΔ]));
    };
    this.ΔⲆΔᐃΔⵠΔ = function (a) {
      this.ⲆΔⵠⲆ[Bf](Bq[Dq].stringify([37, a.ᐃⵠⲆⲆ, a.ᐃⲆⲆⵠΔ, a.type]));
    };
    this.ᐃⵠⲆᐃⲆⲆⲆΔΔ = function (a) {
      this.ⲆΔⵠⲆ[Bf](Bq[Dq].stringify([4, a.ᐃⵠⲆⲆ, a.ᐃⲆⲆⵠΔ]));
    };
    this.ΔⲆᐃΔᐃⲆᐃⵠΔ = function (a) {
      this.ⲆΔⵠⲆ[Bf](Bq[Dq].stringify([8, a.ᐃⵠⲆⲆ, a.ᐃⲆⲆⵠΔ]));
    };
    this.ΔΔⲆᐃⲆᐃⲆΔᐃ = function (a) {
      this.ⲆΔⵠⲆ[Bf](Lq[Iq].stringify([20, a.ᐃⵠⲆⲆ, a.ᐃⲆⲆⵠΔ]));
    };
    this.ⲆⵠⲆⵠΔᐃΔᐃⵠ = function (a) {
      this.ⲆΔⵠⲆ[Bf](Mq[Jq].stringify([3, a.ᐃⲆⲆⵠΔ]));
    };
    this.ΔᐃⵠΔᐃΔΔ = function (a) {
      b.ⲆΔⵠⲆ[Bf](Uq[Pq].stringify([23, Hx.ΔⲆΔⲆⲆ.id, Hx.ⲆΔᐃⲆᐃ[a]]));
    };
    this.ᐃⲆⵠΔⲆΔᐃΔⲆ = function () {
      b.ⲆΔⵠⲆ[Bf](Xq[Wq].stringify([17, Hx.ΔⲆΔⲆⲆ.ᐃⵠⲆⲆ, Hx.ΔⲆΔⲆⲆ.id]));
    };
    this.ⵠᐃⲆΔⵠⲆⲆ = function () {
      b.ⲆΔⵠⲆ[Bf](dr[br].stringify([12]));
    };
    this.ᐃΔⲆᐃⵠⵠΔᐃΔ = function () {
      b.ⲆΔⵠⲆ[Bf](dr[Pq].stringify([19, Hx.ΔⲆΔⲆⲆ.id]));
      if (document.getElementById("lock_team").innerHTML == "LOCK") {
        Hx.ΔⲆΔⲆⲆ.lock = 1;
        document.getElementById("lock_team").innerHTML = "UNLOCK";
      } else {
        Hx.ΔⲆΔⲆⲆ.lock = 0;
        document.getElementById("lock_team").innerHTML = "LOCK";
      }
    };
    this.ᐃⲆΔ = function (j, e, i) {
      var k = new Uint16Array(j);
      if (i) {
        Gx.ⲆᐃⵠⲆΔⵠΔⵠΔ();
      }
      for (var n = (e.length - 2) / 18, o = 0; o < n; o++) {
        var q = 2 + o * 18;
        var t = 1 + o * 9;
        var w = e[q];
        var x = k[t + 1];
        var y = k[t + 5];
        var z = w * Gx.ⵠⲆᐃⵠⲆⵠᐃ + y;
        if (x & 1) {
          Gx.ⵠⵠⵠΔⲆⲆᐃⵠⲆ(z);
        } else {
          var A = k[t + 2];
          var B = k[t + 3];
          var D = k[t + 4];
          var E = k[t + 6];
          var F = k[t + 7];
          var G = k[t + 8];
          var H = Math.PI * (e[q + 1] / 255) * 2;
          if (Gx.ⲆΔⲆΔⵠ[z]) {
            var I = Gx.ⲆΔⲆΔⵠ[z];
            I.r.x = B;
            I.r.y = D;
            if (w != 0 && ᐃⵠⵠ.ⲆⲆⲆΔ(I, I.r) > 200) {
              I.x = B;
              I.y = D;
            }
            if (I.id !== Hx.id || w === 0) {
              I.ⲆⵠΔⵠΔᐃⲆ = H;
            }
            I.action |= x;
            I.info = E;
            I.ΔΔΔΔⲆ = F;
            I.ⵠⲆΔᐃⲆ = G;
            if (I.ⲆΔᐃ) {
              I.ⲆΔᐃ(x);
            }
          } else {
            var J = new Xf(A, w, y, B, D, H, x, E, F, G);
            Gx.ⲆΔⲆΔⵠ[z] = J;
            Gx.ᐃⲆΔ[A].push(J);
          }
        }
      }
    };
    this.ᐃⲆΔΔᐃ = function (a) {
      this.ᐃⵠⲆⲆΔⵠᐃ = Px;
      var b = new Uint16Array(a);
      Hx.ΔⵠⵠⲆΔ.ⲆⵠΔⵠⲆ(b);
    };
    this.ᐃⵠᐃΔᐃΔΔⲆⵠ = function (a) {
      if (sb !== undefined) {
        Nt = sb;
      }
      if (a.length > 0) {
        sb = JSON.parse(JSON.stringify(Nt));
        for (var b = 0; a.length > b; b++) {
          var c = a[b];
          var d = Nt[c.item];
          if (d !== undefined) {
            d.r = c.recipe;
            d.w = c.workbench;
            d.f = c.fire;
            d.ⲆⲆⵠ = c.water;
            d.e = c.well;
            d.time = 1 / c.time;
          }
        }
      }
    };
    this.ⵠⵠΔⲆⲆⵠΔ = function (a) {
      if (a && a.length !== 0) {
        Hx.ⵠⵠΔⲆⲆⵠΔ.message = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
            b = b.replace("\\n", "\n");
          }
          b = b.split("\n");
          ᐃⲆ = [];
          var f = 14;
          var g = (f + 4) * b.length + 10;
          var h = 0;
          d.font = f + "px Baloo Paaji";
          for (var i = 0; i < b.length; i++) {
            if (b[i].charAt(0) === "#") {
              ᐃⲆ[i] = b[i].substring(0, 7);
              b[i] = b[i].substring(8);
            } else {
              ᐃⲆ[i] = "#FFFFFF";
            }
            h = Math.max(d.measureText(b[i]).width + 16, h);
          }
          c.height = g;
          c.width = h;
          i = 0;
          for (; b.length > i; i++) {
            var j = Su(1, b[i], f, ᐃⲆ[i], null, null, null, null, null, "#000", 6);
            d.drawImage(j, 8, i * (f + 4) + 5);
          }
          return c;
        }(a);
      } else {
        Hx.ⵠⵠΔⲆⲆⵠΔ.message = undefined;
      }
    };
    this.ⲆᐃⲆᐃⲆ = function (a) {
      var b = Gx.ⲆΔⲆΔⵠ[a[1] * Gx.ⵠⲆᐃⵠⲆⵠᐃ];
      if (b) {
        if (Gx.mode === 2 && b.ⲆΔⵠΔ === 0) {
          if (Hx.ᐃΔΔⵠΔ) {
            if (Math.random() > 0.5) {
              b.text.push(a[2] + " ..." + ᐃⲆΔᐃⲆ);
            } else {
              b.text.push(ᐃⲆΔᐃⲆ + "... " + a[2]);
            }
          } else {
            b.text.push(ᐃᐃⲆⲆΔⲆⲆ[Math.floor(Math.random() * ᐃᐃⲆⲆΔⲆⲆ.length)]);
          }
        } else {
          b.text.push(a[2]);
        }
      }
    };
    this.ⵠⲆΔⵠΔΔᐃΔᐃ = function (a) {
      if (Hx.ⵠᐃΔⵠ.ⲆᐃⵠⲆΔ.length !== Hx.ⵠᐃΔⵠ.max || Nt[a].ᐃᐃΔΔ === 29 || Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(Nt[a].ᐃᐃΔΔ) != -1 || Hx.ⵠᐃΔⵠ.ΔⵠⲆᐃᐃΔⲆⲆⵠ(Nt[a].r)) {
        this.ⲆΔⵠⲆ[Bf](tq[fa].stringify([26, a]));
        return 1;
      } else {
        this.ΔⲆΔᐃⵠᐃΔ();
        return 0;
      }
    };
    this.ᐃⵠⲆⵠΔ = function (a) {
      Hx.ᐃⵠΔⲆ.ᐃⲆⲆΔⵠⵠΔᐃᐃ(a);
    };
    this.ᐃⵠⵠᐃⲆ = function (a) {
      Hx.ᐃⵠΔⲆ.ᐃⵠⵠᐃⲆ = a;
      Hx.ᐃⵠΔⲆ.ⲆΔᐃ();
    };
    this.ᐃⵠⵠⵠᐃ = function (a) {
      Hx.ᐃⵠΔⲆ.ᐃⵠⵠⵠᐃ = a;
      Hx.ᐃⵠΔⲆ.ⲆΔᐃ();
    };
    this.ΔⵠᐃⲆΔΔⵠ = function (a) {
      Hx.ᐃⵠΔⲆ.ΔⵠᐃⲆΔΔⵠ = a;
      Hx.ᐃⵠΔⲆ.ⲆΔᐃ();
    };
    this.ΔⵠᐃⵠⵠᐃᐃⲆᐃ = function (a) {
      this.ⵠᐃᐃΔᐃ(Qb[315]);
    };
    this.ⵠᐃⵠⵠⵠᐃⲆᐃⵠ = function () {
      Hx.ᐃⵠΔⲆ.ᐃⲆⲆⲆΔⲆᐃ();
    };
    this.ⵠⵠΔⲆⲆ = function (a) {
      Kx.ⵠⵠΔⲆⲆ.ᐃⲆⵠⲆ = [];
      var b = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
      var c = 0;
      for (var d = 1; d < a.length; d += 2) {
        var e = {
          x: Math.floor(a[d] * Gx.w / 250),
          y: Math.floor(a[d + 1] * Gx.Ⲇᐃⵠ / 250)
        };
        if (b && !c && !Hx.ᐃᐃⲆⵠⲆᐃᐃ && ᐃⵠⵠ.ⲆⲆⲆΔ(e, b) < 250) {
          c += 1;
        } else {
          Kx.ⵠⵠΔⲆⲆ.ᐃⲆⵠⲆ.push(e);
        }
      }
    };
    this.ⵠⲆΔⵠᐃⲆᐃⲆΔ = function () {
      Hx.ⵠⵠⵠⲆⲆ.open = false;
      Hx.ⲆΔⵠⵠⲆ.enabled = false;
      Hx.ⲆΔⵠⵠⲆ.ⲆΔⲆΔⲆ = -1;
      Hx.ⲆΔⵠⵠⲆ.label = null;
      Hx.ⲆΔⵠⵠⲆ.ᐃⵠᐃᐃⵠΔΔ = null;
      Hx.ⲆΔⵠⵠⲆ.now = -1;
    };
    this.ⲆΔⵠⵠⲆ = function (a) {
      Nf.ΔΔᐃᐃⲆⵠᐃ = a;
      Hx.ⲆΔⵠⵠⲆ.enabled = true;
      Hx.ⲆΔⵠⵠⲆ.ⲆΔⲆΔⲆ = new Date().getTime();
      Hx.ⲆΔⵠⵠⲆ.label = null;
      Hx.ⲆΔⵠⵠⲆ.now = -1;
      for (var b = [39, 45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; c < b.length; c++) {
        var d = Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(b[c]);
        if (d != -1) {
          Hx.ⵠᐃΔⵠ.ⲆΔΔⲆΔΔᐃ(b.length[c], d);
        }
      }
      Hx.ᐃⵠΔⲆ.ᐃⲆⲆⲆΔⲆᐃ();
    };
    this.ⵠΔⲆⵠᐃⲆⵠᐃⵠ = function (a, b, c) {
      this.ⵠⵠΔᐃΔⲆⵠ(a, b * 256 + c);
    };
    this.ⵠⵠΔᐃΔⲆⵠ = function (a, b) {
      Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ = -1;
      Hx.ⵠᐃΔⵠ.ΔΔΔⵠᐃᐃⵠ(a, b, Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(a));
      Hx.ᐃⵠΔⲆ.ⲆΔᐃ();
    };
    this.ⵠᐃᐃⲆΔⲆⲆⵠᐃ = function (a) {
      Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ = -1;
      Hx.ⲆΔΔᐃⲆ.wait = true;
      var b = Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(a);
      Hx.ⵠᐃΔⵠ.ΔΔΔⵠᐃᐃⵠ(a, 1, b);
      if (b >= 0 && !Hx.ⵠᐃΔⵠ.ΔΔᐃΔ[a]) {
        Hx.ᐃⵠΔⲆ.ⲆΔᐃ();
      }
      if (a == 159) {
        Hx.ⲆΔᐃⲆᐃ = [Hx.id];
      }
    };
    this.ⵠⵠⲆᐃᐃⵠᐃᐃⲆ = function () {
      this.ⲆΔⵠⲆ[Bf](wq[pa].stringify([6]));
    };
    this.ⵠΔΔⲆⵠᐃΔΔⲆ = function (a) {
      this.ⲆΔⵠⲆ[Bf](Sa[wa].stringify([2, a.ΔⲆⵠⵠΔ, a.id]));
    };
    this.ⵠᐃΔⲆⲆⵠⵠᐃⵠ = function (a, b) {
      this.ⲆΔⵠⲆ[Bf](Sa[Dq].stringify([10, a, b]));
    };
    this.ⲆΔⲆᐃⲆᐃᐃⲆΔ = function () {
      var a = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
      if (a) {
        var b = Math.PI * 2;
        this.ⲆΔⵠⲆ[Bf](Sa[wa].stringify([22, Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ, Math.floor((a.angle + b) % b * 255 / b), Hx.ᐃⵠΔⲆ.mode]));
      }
    };
    this.ΔΔⵠⵠᐃ = function (a, b) {
      switch (a) {
        case 195:
        case 110:
        case 116:
        case 117:
        case 145:
        case 127:
        case 133:
        case 136:
        case 142:
        case 143:
        case 189:
        case 207:
        case 233:
        case 205:
        case 209:
        case 211:
        case 192:
        case 137:
        case 138:
        case 196:
        case 197:
        case 200:
        case 199:
          Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ = -1;
          this.ⲆΔⵠⲆ[Bf](Xa[ja].stringify([34, a]));
          break;
        case 114:
        case 160:
        case 115:
        case 132:
        case 188:
        case 206:
        case 204:
        case 191:
        case 193:
        case 208:
        case 210:
        case 113:
        case 162:
        case 163:
        case 164:
        case 165:
        case 118:
        case 167:
        case 151:
        case 152:
        case 166:
        case 171:
        case 172:
        case 173:
        case 124:
        case 218:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 220:
        case 168:
        case 169:
        case 170:
        case 119:
        case 122:
        case 123:
        case 217:
        case 219:
        case 125:
        case 190:
        case 141:
        case 135:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 198:
        case 201:
        case 182:
        case 183:
        case 144:
        case 159:
        case 221:
          if (!Hx.ᐃΔΔⵠΔ) {
            if (a === Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ) {
              Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ = -1;
            } else {
              Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ = a;
            }
          }
          break;
        case 0:
        case 57:
        case 5:
        case 6:
        case 30:
        case 19:
        case 9:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 92:
        case 93:
        case 12:
        case 13:
        case 14:
        case 15:
        case 33:
        case uh.ΔⵠᐃⲆⵠᐃΔⲆⵠ:
        case 16:
        case 17:
        case 34:
        case 18:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
          if (!Hx.ᐃΔΔⵠΔ) {
            Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ = -1;
            if ((c = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ]) && c.right === a) {
              this.ⲆΔⵠⲆ[Bf](Bq[Dq].stringify([34, 7]));
            } else {
              Hx.ᐃΔⲆΔᐃ.wait = true;
              this.ⲆΔⵠⲆ[Bf](Lq[Iq].stringify([34, a]));
            }
          }
          break;
        case 1:
        case 8:
        case 3:
        case 4:
        case 35:
        case 36:
        case 37:
        case 28:
        case 38:
        case 39:
        case 31:
        case 32:
        case 45:
        case 46:
        case 50:
        case 51:
        case 52:
        case 55:
        case 56:
        case 53:
        case 54:
        case 89:
        case 49:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
          if (!Hx.ᐃΔΔⵠΔ) {
            Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ = -1;
            if ((c = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ]) && a === c.right) {
              this.ⲆΔⵠⲆ[Bf](Mq[Jq].stringify([34, 7]));
            } else {
              this.ⲆΔⵠⲆ[Bf](Uq[Pq].stringify([34, a]));
            }
          }
          break;
        case 223:
        case 224:
        case 225:
        case 239:
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 91:
          if (!Hx.ᐃΔΔⵠΔ) {
            Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ = -1;
            var c = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
            this.ⲆΔⵠⲆ[Bf](Uq[Pq].stringify([34, a]));
          }
          break;
        case 77:
        case 78:
        case 79:
        case 58:
        case 25:
        case 26:
        case 27:
        case 43:
        case 44:
        case 20:
        case 21:
        case 22:
        case 59:
        case 60:
        case 90:
        case 61:
        case 47:
          if ((c = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ]) && a !== c.ⵠΔΔᐃⲆ) {
            Hx.ᐃΔᐃⲆⵠ.wait = true;
          }
          this.ⲆΔⵠⲆ[Bf](Xa[Dq].stringify([34, a]));
          break;
        case 10:
        case 83:
        case 84:
        case 86:
        case 11:
        case 40:
        case 88:
        case 82:
        case 80:
        case 81:
        case 41:
        case 42:
        case 85:
        case 23:
        case 24:
        case 48:
          this.ⲆΔⵠⲆ[Bf](Xq[Wq].stringify([34, a]));
      }
    };
    this.ᐃΔⲆⲆⵠⵠΔΔⵠ = function (a) {
      this.ⲆΔⵠⲆ[Bf](Sa[fa].stringify([31, a]));
    };
    this.ᐃΔⵠᐃᐃⲆΔᐃᐃ = function (a) {
      Hx.ⲆΔΔᐃⲆ.wait = true;
      var b = Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(a);
      Hx.ⵠᐃΔⵠ.ⲆΔΔⲆΔΔᐃ(a, b);
      Hx.ᐃⵠΔⲆ.ⲆΔᐃ();
    };
    this.ⵠⵠᐃΔΔⲆΔΔᐃ = function (a, b) {
      this.ⲆΔⵠⲆ[Bf](tq[Jq].stringify([18, a]));
    };
    this.ᐃΔⵠᐃΔⵠΔⲆΔ = function (a, b) {
      this.ⲆΔⵠⲆ[Bf](wq[pa].stringify([24, a]));
    };
    this.ΔⵠⵠⲆΔᐃⲆᐃᐃ = function (a) {
      Hx.ⲆΔΔᐃⲆ.wait = true;
      var b = Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(a);
      Hx.ⵠᐃΔⵠ.ΔΔΔⵠᐃᐃⵠ(a, 1, b);
      Hx.ᐃⵠΔⲆ.ⲆΔᐃ();
    };
    this.ⵠᐃΔᐃΔᐃⵠᐃΔ = function (a) {
      var b = a[1];
      var c = a[2];
      Hx.ⲆΔΔᐃⲆ.wait = true;
      var d = Hx.ⵠᐃΔⵠ.ⵠⲆΔⲆΔ(b);
      Hx.ⵠᐃΔⵠ.ΔΔΔⵠᐃᐃⵠ(b, c, d);
      Hx.ᐃⵠΔⲆ.ⲆΔᐃ();
    };
    this.ⵠᐃΔᐃⲆᐃΔᐃᐃ = function () {
      this.ⲆΔⵠⲆ[Bf](wq[pa].stringify([16]));
    };
    this.ⲆᐃᐃᐃⵠⲆⲆⲆᐃ = function (a) {
      var b = Math.PI * 2;
      this.ⲆΔⵠⲆ[Bf](Sa[wa].stringify([36, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ΔⲆⲆⲆⲆᐃΔⲆⵠ = function (a) {
      var b = Math.PI * 2;
      this.ⲆΔⵠⲆ[Bf](Sa[wa].stringify([0, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ⵠⲆⲆⲆⲆⲆᐃⵠⲆ = function (a) {
      this.ⲆΔⵠⲆ[Bf](ⲆⲆΔΔΔⵠⲆ[0].stringify([11, a]));
    };
    this.ⵠⲆᐃᐃⲆⵠᐃⲆⲆ = function (a) {
      this.ⲆΔⵠⲆ[Bf](Bq[Dq].stringify([33, a]));
    };
    this.ⵠⵠⲆᐃΔᐃᐃΔΔ = function (a) {
      var b = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
      if (Hx.ᐃΔΔⵠΔ) {
        if (Math.random() > 0.5) {
          b.text.push(a.substring(0, 25) + " ..." + ᐃⲆΔᐃⲆ);
        } else {
          b.text.push(ᐃⲆΔᐃⲆ + "... " + a.substring(0, 25));
        }
      } else {
        b.text.push(a);
      }
      this.ⲆΔⵠⲆ[Bf](Bq[Dq].stringify([15, a]));
    };
    this.ΔⲆᐃⵠⵠ = function (a) {
      var b = ΔⵠΔⲆ.select.ᐃⲆΔ;
      if (b.length != 0) {
        var c = [11];
        var d = [];
        ᐃⵠⵠ.ⲆΔⵠΔⲆΔᐃ(a, {
          x: ΔⵠΔⲆ.ΔΔⲆ.rx,
          y: ΔⵠΔⲆ.ΔΔⲆ.ry
        });
        c.push(a.x);
        c.push(a.y);
        for (var e = 0; e < b.length; e++) {
          d.push(b[e].ⲆΔΔᐃⵠᐃᐃⵠΔ);
        }
        c.push(d);
        this.ⲆΔⵠⲆ[Bf](Lq[Iq].stringify(c));
      }
    };
    this.ΔⵠⲆⵠΔΔⵠ = 0;
    this.ΔⲆⵠᐃᐃΔⲆ = {
      ⵠⲆ: 0,
      ᐃᐃⵠⲆ: 0
    };
    this.ⵠⲆⲆⵠᐃΔⲆⲆⵠ = function () {
      if (Px - this.ΔⵠⲆⵠΔΔⵠ > 50) {
        this.ΔⵠⲆⵠΔΔⵠ = Px;
        var a = Hx.ΔΔⲆ;
        var b = Math.floor(a.x / 100);
        var c = Math.floor(a.y / 100);
        if (this.ΔⲆⵠᐃᐃΔⲆ.ⵠⲆ != b || this.ΔⲆⵠᐃᐃΔⲆ.ᐃᐃⵠⲆ != c) {
          this.ⲆΔⵠⲆ[Bf](Uq[Jq].stringify([28, Math.floor(-a.x), Math.floor(-a.y)]));
          this.ΔⲆⵠᐃᐃΔⲆ.ⵠⲆ = b;
          this.ΔⲆⵠᐃᐃΔⲆ.ᐃᐃⵠⲆ = c;
        }
      }
    };
    this.ⵠⵠᐃᐃⵠΔⲆ = 0;
    this.ᐃᐃᐃΔⵠⵠⲆⵠᐃ = function () {
      if (Px - this.ⵠⵠᐃᐃⵠΔⲆ > 60000) {
        this.ⵠⵠᐃᐃⵠΔⲆ = Px;
        //this.ping();
      }
    };
    this.ⲆⵠⲆⵠⲆΔᐃⵠΔ = function () {
      Hx.reconnect.enabled = true;
      if (b.ⲆΔⵠⲆ.ΔᐃΔⵠⵠ == b.ΔᐃΔⵠⵠ) {
        b.ΔᐃΔⵠⵠ++;
        b.ⲆΔⵠⲆ.close();
        Jx.connect();
      }
    };
    this.ᐃⵠⵠᐃⵠᐃⲆⵠⲆ = function (a) {
      this.ⵠᐃᐃΔᐃ(Qb[316]);
      for (var b = 1; a.length > b; b++) {
        Hx.ⲆΔᐃⲆᐃ.push(a[b]);
      }
    };
    this.ⲆΔᐃⵠΔΔΔⵠⵠ = function (a) {
      this.ⵠᐃᐃΔᐃ(Gx.ᐃⲆⵠⲆ[a].ΔᐃΔΔⵠ + Qb[318]);
      Hx.ⲆΔᐃⲆᐃ.push(a);
      var b = document.getElementById("team_box");
      if (Kx.ⵠⲆΔᐃⵠ != -1 && b.style.display == "inline-block") {
        Kx.ⲆΔᐃΔᐃ[Kx.ⵠⲆΔᐃⵠ].action();
      }
    };
    this.ⵠⵠᐃⵠΔᐃⵠⵠⲆ = function () {
      this.ⵠᐃᐃΔᐃ(Qb[319]);
      Hx.ΔⲆΔⲆⲆ.wait = true;
      Hx.ⲆΔᐃⲆᐃ = [];
      document.getElementById("team_box").style.display = "none";
    };
    this.ⲆΔΔⲆⲆⲆⲆⵠᐃ = function (a) {
      if (Hx.id == a) {
        this.ⵠᐃᐃΔᐃ(Qb[320]);
        Hx.ΔⲆΔⲆⲆ.wait = true;
        Hx.ⲆΔᐃⲆᐃ = [];
        document.getElementById("team_box").style.display = "none";
      } else {
        this.ⵠᐃᐃΔᐃ(Gx.ᐃⲆⵠⲆ[a].ΔᐃΔΔⵠ + Qb[321]);
        for (var b = 0; b < Hx.ⲆΔᐃⲆᐃ.length; b++) {
          if (a == Hx.ⲆΔᐃⲆᐃ[b]) {
            Hx.ⲆΔᐃⲆᐃ.splice(b, 1);
            break;
          }
        }
        var c = document.getElementById("team_box");
        if (Kx.ⵠⲆΔᐃⵠ != -1 && c.style.display == "inline-block") {
          Kx.ⲆΔᐃΔᐃ[Kx.ⵠⲆΔᐃⵠ].action();
        }
      }
    };
    this.ᐃᐃΔᐃⵠᐃᐃⲆⵠ = function (a) {
      Hx.ᐃⵠⵠᐃⵠ = Ks;
      this.ⵠᐃᐃΔᐃ(Qb[322]);
      if (this.ΔᐃΔⵠⵠ == this.ⲆΔⵠⲆ.ΔᐃΔⵠⵠ) {
        this.ΔᐃΔⵠⵠ++;
        Kx.ΔΔᐃⵠⲆ(Fx.ⵠᐃΔⵠΔ);
        this.ⲆΔⵠⲆ.close();
      }
    };
    this.ⲆⵠΔᐃⲆᐃΔⵠΔ = function (a, b) {
      Hx.ᐃⵠⵠᐃⵠ = cs;
      var c = new Uint16Array(b);
      var d = new Uint32Array(b);
      Hx.ⵠᐃⲆᐃⲆⲆⲆ.ΔⵠⲆᐃⲆⲆᐃ = Pt[a][Math.floor(Math.random() * Pt[a].length)];
      Hx.ⵠᐃⲆᐃⲆⲆⲆ.ΔⲆᐃᐃᐃ = ᐃⵠⵠ.ᐃΔⲆᐃᐃᐃΔ(Gx.ᐃⲆⵠⲆ[Hx.id].ΔⲆᐃᐃᐃ);
      Hx.ⵠᐃⲆᐃⲆⲆⲆ.ⵠᐃⵠⲆⵠⵠΔ = ᐃⵠⵠ.ᐃΔⲆᐃᐃᐃΔ(d[1]);
      Hx.ⵠᐃⲆᐃⲆⲆⲆ.ⵠⲆⵠᐃⵠ = c[1];
      this.ⵠᐃᐃΔᐃ(Qb[317]);
      if (this.ⲆΔⵠⲆ.ΔᐃΔⵠⵠ == this.ΔᐃΔⵠⵠ) {
        this.ΔᐃΔⵠⵠ++;
        Kx.ΔΔᐃⵠⲆ(Ix.ⵠᐃΔⵠΔ);
        this.ⲆΔⵠⲆ.close();
        try {
          bj.Widget.adsRefresh();
        } catch (a) { }
      }
    };
    this.ping = function () {
      this.ⲆΔⵠⲆ[Bf]("[21]");
    };
    this.ᐃΔΔᐃⲆΔᐃⲆⲆ = function () {
      if (this.ⲆΔⵠⲆ.readyState == 3) {
        this.ᐃⵠⲆⲆΔⵠᐃ -= 600000;
      }
    };
    this.ΔᐃᐃⵠⵠⵠΔᐃΔ = function () {
      if (Ox > 5) {
        this.ᐃⵠⲆⲆΔⵠᐃ = Px;
      }
      if (Px - this.ᐃⵠⲆⲆΔⵠᐃ > 600000) {
        this.ᐃⵠⲆⲆΔⵠᐃ = Px;
        this.ⲆⵠⲆⵠⲆΔᐃⵠΔ();
      }
    };
    this.ΔⲆΔⲆΔᐃⲆⲆᐃ = function (c) {
      Sx++;
      clearTimeout(this.ΔⲆⵠᐃᐃ);
      document.getElementById("commandMainBoxName").innerHTML = this.ᐃⲆⲆΔΔ[this.ⵠᐃⲆⵠΔ][this.ΔΔⵠᐃᐃᐃⵠ[this.ⵠᐃⲆⵠΔ]].a;
      document.getElementById("exploreForest").src = "img/forest-leaf.png";
      document.getElementById("exploreWinter").src = "img/winter-flake.png";
      document.getElementById("exploreDesert").src = "img/desert-cactus.png";
      document.getElementById("exploreLava").src = "img/lava-volcano.png";
      this.ᐃⵠⲆⲆΔⵠᐃ = Px;
      Hx.ⵠΔⲆⵠ.ⲆⵠⵠⲆᐃ.ⵠᐃⲆΔᐃ = Hx.ⵠΔⲆⵠ.ⲆⵠⵠⲆᐃ.ΔΔΔᐃⲆ;
      Hx.ⵠΔⲆⵠ.ΔΔⲆᐃᐃⲆⵠ.ⵠᐃⲆΔᐃ = Hx.ⵠΔⲆⵠ.ΔΔⲆᐃᐃⲆⵠ.ΔΔΔᐃⲆ;
      Hx.ⵠΔⲆⵠ.ΔⵠⵠⵠᐃⵠⲆ.ⵠᐃⲆΔᐃ = Hx.ⵠΔⲆⵠ.ΔⵠⵠⵠᐃⵠⲆ.ΔΔΔᐃⲆ;
      Hx.ⵠΔⲆⵠ.ⲆⲆⵠⲆⲆⲆⲆ.ⵠᐃⲆΔᐃ = Hx.ⵠΔⲆⵠ.ⲆⲆⵠⲆⲆⲆⲆ.ΔΔΔᐃⲆ;
      Hx.ⵠΔⲆⵠ.ΔᐃΔⲆⲆ.ⵠᐃⲆΔᐃ = Hx.ⵠΔⲆⵠ.ΔᐃΔⲆⲆ.ΔΔΔᐃⲆ;
      Hx.ⵠΔⲆⵠ.ⲆᐃⵠΔ = 1;
      Hx.ⵠΔⲆⵠ.c = 1;
      Hx.ⵠΔⲆⵠ.Ⲇᐃⵠ = 1;
      Hx.ⵠΔⲆⵠ.ΔⵠΔ = 1;
      Hx.ⵠΔⲆⵠ.ⲆⲆⵠ = 1;
      Hx.ⵠΔⲆⵠ.ᐃⲆⵠⵠⲆⵠΔ = 1;
      Hx.ᐃⵠᐃⲆⵠⵠᐃ = $g;
      Kx.ⲆΔᐃⲆⲆ.display = 0;
      Hx.ⵠᐃΔⵠ.ⲆᐃⵠⲆΔ = [];
      Hx.ⵠᐃΔⵠ.ΔΔᐃΔ = [];
      Hx.ⵠᐃΔⵠ.max = 10;
      Hx.ⵠᐃΔⵠ.ᐃⵠᐃⵠⵠⵠⵠ = 0;
      Hx.ⵠᐃΔⵠ.ⵠⲆⲆᐃⲆ = 0;
      Hx.ⵠᐃΔⵠ.id = -1;
      Kx.ᐃᐃΔᐃΔᐃⲆ = 1;
      Kx.ⲆⵠᐃⵠⲆⲆⵠ = 1;
      Kx.ⵠᐃΔⲆᐃᐃΔ = 1;
      Kx.ᐃⲆⵠΔⵠᐃⵠ = 1;
      Hx.ᐃⵠⵠᐃⵠ = true;
      Hx.ⵠᐃΔⵠ.ⵠᐃΔΔⲆⲆⲆ.stop();
      Hx.ᐃⵠΔⲆ.ᐃᐃⵠΔᐃ = [];
      Hx.ᐃⵠΔⲆ.ⵠⲆⲆΔΔ = false;
      Hx.ᐃⵠΔⲆ.ⵠΔᐃⲆᐃᐃⲆⵠⵠ = N;
      Hx.ᐃⵠΔⲆ.ⲆⲆⵠⲆⵠ = -1;
      Hx.ᐃⵠΔⲆ.id = -1;
      Hx.ᐃⵠΔⲆ.ᐃⵠⲆⵠΔ = yg;
      Hx.ᐃⵠΔⲆ.ᐃⵠⵠᐃⲆ = Ni;
      Hx.ᐃⵠΔⲆ.ᐃⵠⵠⵠᐃ = false;
      Hx.ᐃⵠΔⲆ.ΔⵠᐃⲆΔΔⵠ = $g;
      Hx.ᐃⵠΔⲆ.timeout = new ᐃⵠⵠ.ⲆⲆⲆᐃ(false, 0, 1, 0, 1, 1);
      Hx.ᐃΔⲆΔᐃ.timeout = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Ge, 0, 1, 0, 0.1, 1);
      Hx.ᐃΔⲆΔᐃ.wait = false;
      Hx.ᐃΔᐃⲆⵠ.timeout = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Mo, 0, 1, 0, 1 / 5, 1);
      Hx.ᐃΔᐃⲆⵠ.wait = yl;
      Hx.ⲆΔΔᐃⲆ.timeout = new ᐃⵠⵠ.ⲆⲆⲆᐃ(cs, 0, 1, 0, 1, 1);
      Hx.ⲆΔΔᐃⲆ.wait = Nq;
      Hx.ΔⲆΔⲆⲆ.id = -1;
      Hx.ΔⲆΔⲆⲆ.ᐃⵠⲆⲆ = -1;
      Hx.ΔⲆΔⲆⲆ.wait = false;
      Hx.ΔⲆΔⲆⲆ.timeout = new ᐃⵠⵠ.ⲆⲆⲆᐃ(Sq, 0, 1, 0, 1 / 30, 1);
      Kx.ⵠⵠΔⲆⲆ.ⵠΔⵠΔⲆ.x = -1;
      Kx.ⵠⵠΔⲆⲆ.ⵠΔⵠΔⲆ.y = -1;
      Kx.ⵠΔᐃΔ.open = Nq;
      Kx.ⵠⵠΔⲆⲆ.ᐃⲆⵠⲆ = [];
      Hx.ᐃⲆΔᐃⵠ.enabled = bn;
      Gx.mode = c[1];
      if (c[20] !== Wg && ma !== c[21]) {
        Gx.ⵠᐃΔΔΔ = c[20];
        Gx.ⲆΔⲆΔΔ = c[21];
        Gx.w = Gx.ⵠᐃΔΔΔ * Gx.ᐃᐃΔⵠΔᐃⵠ;
        Gx.Ⲇᐃⵠ = Gx.ᐃⲆᐃᐃⲆᐃⵠ * Gx.ⲆΔⲆΔΔ;
      }
      Gx.ⵠᐃΔⵠᐃⵠⲆ = c[22];
      Gx.ⲆᐃΔⲆⲆ = c[23];
      b.ⵠⵠΔⲆⲆⵠΔ(c[24]);
      b.ᐃⵠᐃΔᐃΔΔⲆⵠ(c[25]);
      Hx.ⵠᐃⵠᐃᐃ.ΔⵠⲆⲆⵠ = c[26];
      Hx.ⲆⲆΔΔⵠⵠΔ = 0;
      Hx.ⵠΔΔⵠⲆ.ΔⵠⲆⲆⵠ = c[27];
      Gx.ⵠᐃⲆⲆΔⲆⵠⵠⵠ(c[19]);
      Gx.time = c[5];
      Gx.ᐃⲆΔⵠᐃ.ᐃᐃⲆⵠⵠ = c[15];
      Gx.ᐃⲆΔⵠᐃ.ⲆⵠΔⵠⲆ = new Date().getTime();
      Kx.ⵠⲆⵠⵠ.ᐃⲆⲆᐃΔⵠΔ = c[16];
      Gx.transition = yl;
      Hx.ΔⲆⵠ = c[2];
      Kx.ⵠⲆⵠⵠ.reset();
      Hx.ⲆΔᐃⲆᐃ = c[8];
      Gx.ᐃⲆΔ[0] = [];
      Gx.ᐃⲆΔ[100] = [];
      Gx.ᐃⲆΔ[2] = [];
      Gx.ᐃⲆΔ[1] = [];
      Gx.ᐃⲆΔ[6] = [];
      Gx.ᐃⲆΔ[3] = [];
      Gx.ᐃⲆΔ[31] = [];
      Gx.ᐃⲆΔ[37] = [];
      Gx.ᐃⲆΔ[43] = [];
      Gx.ᐃⲆΔ[44] = [];
      Gx.ᐃⲆΔ[39] = [];
      Gx.ᐃⲆΔ[40] = [];
      Gx.ᐃⲆΔ[54] = [];
      Gx.ᐃⲆΔ[55] = [];
      Gx.ᐃⲆΔ[4] = [];
      Gx.ᐃⲆΔ[7] = [];
      Gx.ᐃⲆΔ[8] = [];
      Gx.ᐃⲆΔ[9] = [];
      Gx.ᐃⲆΔ[10] = [];
      Gx.ᐃⲆΔ[15] = [];
      Gx.ᐃⲆΔ[16] = [];
      Gx.ᐃⲆΔ[17] = [];
      Gx.ᐃⲆΔ[45] = [];
      Gx.ᐃⲆΔ[46] = [];
      Gx.ᐃⲆΔ[47] = [];
      Gx.ᐃⲆΔ[48] = [];
      Gx.ᐃⲆΔ[49] = [];
      Gx.ᐃⲆΔ[53] = [];
      Gx.ᐃⲆΔ[11] = [];
      Gx.ᐃⲆΔ[22] = [];
      Gx.ᐃⲆΔ[23] = [];
      Gx.ᐃⲆΔ[5] = [];
      Gx.ᐃⲆΔ[12] = [];
      Gx.ᐃⲆΔ[13] = [];
      Gx.ᐃⲆΔ[14] = [];
      Gx.ᐃⲆΔ[60] = [];
      Gx.ᐃⲆΔ[70] = [];
      Gx.ᐃⲆΔ[71] = [];
      Gx.ᐃⲆΔ[72] = [];
      Gx.ᐃⲆΔ[73] = [];
      Gx.ᐃⲆΔ[74] = [];
      Gx.ᐃⲆΔ[81] = [];
      Gx.ᐃⲆΔ[82] = [];
      Gx.ᐃⲆΔ[87] = [];
      Gx.ᐃⲆΔ[86] = [];
      Gx.ᐃⲆΔ[34] = [];
      Gx.ᐃⲆΔ[65] = [];
      Gx.ᐃⲆΔ[66] = [];
      Gx.ᐃⲆΔ[67] = [];
      Gx.ᐃⲆΔ[62] = [];
      Gx.ᐃⲆΔ[63] = [];
      Gx.ᐃⲆΔ[78] = [];
      Gx.ᐃⲆΔ[77] = [];
      Gx.ᐃⲆΔ[75] = [];
      Gx.ᐃⲆΔ[76] = [];
      Gx.ᐃⲆΔ[64] = [];
      Gx.ᐃⲆΔ[69] = [];
      Gx.ᐃⲆΔ[68] = [];
      Gx.ᐃⲆΔ[79] = [];
      Gx.ᐃⲆΔ[89] = [];
      Gx.ᐃⲆΔ[83] = [];
      Gx.ᐃⲆΔ[84] = [];
      Gx.ᐃⲆΔ[85] = [];
      Gx.ᐃⲆΔ[80] = [];
      Gx.ᐃⲆΔ[88] = [];
      Gx.ᐃⲆΔ[91] = [];
      Gx.ᐃⲆΔ[90] = [];
      Gx.ᐃⲆΔ[61] = [];
      Gx.ᐃⲆΔ[18] = [];
      Gx.ᐃⲆΔ[19] = [];
      Gx.ᐃⲆΔ[20] = [];
      Gx.ᐃⲆΔ[21] = [];
      Gx.ᐃⲆΔ[50] = [];
      Gx.ᐃⲆΔ[52] = [];
      Gx.ᐃⲆΔ[51] = [];
      Gx.ᐃⲆΔ[29] = [];
      Gx.ᐃⲆΔ[56] = [];
      Gx.ᐃⲆΔ[30] = [];
      Gx.ᐃⲆΔ[38] = [];
      Gx.ᐃⲆΔ[33] = [];
      Gx.ᐃⲆΔ[32] = [];
      Gx.ᐃⲆΔ[24] = [];
      Gx.ᐃⲆΔ[25] = [];
      Gx.ᐃⲆΔ[26] = [];
      Gx.ᐃⲆΔ[27] = [];
      Gx.ᐃⲆΔ[28] = [];
      Gx.ᐃⲆΔ[42] = [];
      Gx.ᐃⲆΔ[41] = [];
      Gx.ᐃⲆΔ[35] = [];
      Gx.ᐃⲆΔ[36] = [];
      Gx.ⲆΔⲆΔⵠ = [];
      Gx.ⵠⲆᐃⵠⲆⵠᐃ = c[7];
      Hx.id = c[9];
      Hx.ᐃⲆⲆⵠ = Gx.ⵠⲆᐃⵠⲆⵠᐃ * Hx.id;
      if (Lx.loaded) {
        Lx.ᐃⲆⵠⲆ[0].ᐃⲆⲆⵠ = Hx.ᐃⲆⲆⵠ;
        Lx.ᐃⲆⵠⲆ[0].ᐃⵠⲆᐃᐃⲆⵠ = 0;
      }
      Mx.ᐃΔΔᐃΔⵠⵠ();
      Hx.ΔΔⲆ.ᐃⵠⲆᐃΔ(c[3], c[10]);
      Gx.ᐃⲆⵠⲆ = [];
      var d = Gx.ᐃⲆⵠⲆ;
      for (var e = 0; e < c[11]; e++) {
        d.push(new Vf());
      }
      e = 0;
      for (var f = c[4]; f.length > e; e++) {
        var g = d[f[e].i];
        g.ΔᐃΔΔⵠ = f[e].n;
        g.ⲆΔⵠΔ = f[e].s;
        g.ⲆⵠⲆⲆⲆ = f[e].a;
        g.ΔΔΔⵠⲆ = f[e].c;
        g.ⵠⵠⲆᐃΔ = f[e].b;
        g.ᐃⵠΔΔⵠ = f[e].d;
        g.ⲆⵠⲆⵠⵠᐃⲆ = f[e].g;
        g.level = f[e].l;
        g.ΔⲆᐃᐃᐃ = ᐃⵠⵠ.ΔᐃⲆᐃΔⲆΔ(f[e].p);
        g.ᐃⵠⵠᐃⵠ = qk;
        if (Ef === 1) {
          g.ΔᐃΔΔⵠ += "|" + f[e].i;
        }
      }
      Hx.ΔⵠⵠⲆΔ.sort();
      if (Gx.mode === 1 && Gx.ᐃⲆⵠⲆ[Hx.id].ΔᐃΔΔⵠ === "spectator") {
        Hx.ᐃᐃⲆⵠⲆᐃᐃ = true;
      } else {
        Hx.ᐃᐃⲆⵠⲆᐃᐃ = false;
      }
      if (Gx.mode === 2 && Gx.ᐃⲆⵠⲆ[Hx.id].ⲆΔⵠΔ === 0) {
        Hx.ᐃΔΔⵠΔ = true;
      } else {
        Hx.ᐃΔΔⵠΔ = false;
      }
      if (Gx.mode === 3 && Gx.ᐃⲆⵠⲆ[Hx.id].ⲆΔⵠΔ === 0) {
        Hx.ᐃⲆΔⵠᐃⵠΔ = pl;
      } else {
        Hx.ᐃⲆΔⵠᐃⵠΔ = Ni;
      }
      ᐃⲆᐃΔ.set("starve_token", Hx.ⵠⵠⲆΔⵠ);
      if (c[12] === 0) {
        Hx.ⵠⲆⲆΔⲆ.ⲆΔⲆΔⲆ = 0;
        Kx.ⵠⲆⵠⵠ.restore(c[17]);
        var h = c[14];
        if (h[29]) {
          Hx.ⵠᐃΔⵠ.ⵠⵠᐃⵠΔᐃᐃ(1, 0);
        }
        for (e = 0; e < h.length; e++) {
          if (h[e]) {
            if (e == 29) {
              continue;
            }
            if (e == 7) {
              continue;
            }
            this.ⲆⵠⵠΔⲆΔⲆ([0, e, h[e]]);
          }
        }
        Hx.ⵠⲆⲆΔⲆ.open = Kr;
      } else {
        if (Gx.mode === 4) {
          this.ⲆⵠⵠΔⲆΔⲆ([0, 238, 1]);
        } else if (Gx.mode === 3) {
          if (Hx.ᐃⲆΔⵠᐃⵠΔ) {
            this.ⲆⵠⵠΔⲆΔⲆ([0, 190, 4]);
          } else {
            this.ⲆⵠⵠΔⲆΔⲆ([0, 191, 3]);
          }
        }
        if (Gx.mode === 0 || Gx.mode === 3 || Gx.mode === 7 || Gx.mode === 4) {
          Hx.ⵠⲆⲆΔⲆ.ⲆΔⲆΔⲆ = new Date().getTime();
          Hx.ⵠⲆⲆΔⲆ.open = true;
          Hx.ⵠⲆⲆΔⲆ.value = c[13];
          Kx.ⵠⲆⲆΔⲆ.ⲆⵠΔⵠⲆ();
        } else {
          Hx.ⵠⲆⲆΔⲆ.ⲆΔⲆΔⲆ = 0;
          Hx.ⵠⲆⲆΔⲆ.open = false;
          Hx.ⵠⲆⲆΔⲆ.value = 0;
        }
        Hx.ⵠᐃᐃᐃΔΔⲆ = c[12].toString();
      }
      Hx.ⲆΔⵠⵠⲆ.enabled = c[6];
      Hx.ⲆΔⵠⵠⲆ.ⲆΔⲆΔⲆ = -1;
      Hx.ⲆΔⵠⵠⲆ.label = null;
      Hx.ⲆΔⵠⵠⲆ.now = -1;
      ᐃⲆᐃΔ.set("starve_token_id", Hx.ⵠᐃᐃᐃΔΔⲆ);
      if (Hx.reconnect.enabled) {
        Hx.reconnect.rotate = 0;
        Hx.reconnect.enabled = false;
      } else {
        Fx.ΔΔᐃⵠⲆ(Kx.ⵠᐃΔⵠΔ);
        if (ga) {
          ga("send", "event", "Game", "play", "S" + Fx.ⲆΔⵠΔ + "A" + Fx.ⲆⵠⲆⲆⲆ);
        }
      }
    };
    this.connect = function () {
      b.ⲆΔΔⲆᐃⵠⵠ = 0;
      b.ⲆⲆΔⵠᐃⵠⲆ();
    };
    this.ᐃⲆⲆᐃⲆΔⵠ = [];
    this.ᐃⲆⵠᐃⵠᐃΔⲆⵠ = function (c) {
      const a = b.ⵠΔΔΔⵠ.filter(a => a.gm === c);
      const d = {};
      for (let b = 0; b < a.length; b++) {
        const c = a[b];
        const e = c.r;
        if (e !== undefined) {
          if (d[e] === undefined) {
            d[e] = [];
          }
          d[e].push(c);
        }
      }
      function f(e) {
        b.ᐃⲆⲆᐃⲆΔⵠ[c] = e;
        const f = d[e];
        const g = f[Math.floor(Math.random() * f.length)];
        b.ᐃᐃᐃΔΔΔᐃ({
          domain: _f,
          is_tls: 1,
          id: g.id,
          p: g.p
        });
      }
      if (b.ᐃⲆⲆᐃⲆΔⵠ[c] !== undefined) {
        f(b.ᐃⲆⲆᐃⲆΔⵠ[c]);
        return;
      }
      let g = 1;
      function h(a) {
        const b = new bj.XMLHttpRequest();
        const c = a[0];
        const d = c.p;
        const e = c.r;
        const i = d[Math.floor(Math.random() * d.length)];
        b.open("GET", "https://" + i + "." + _f + "/", bq);
        b.onreadystatechange = function () {
          if (b.readyState === 4) {
            if (g === 0) {
              return;
            }
            g = 0;
            f(e);
          }
        };
        b.send();
      }
      for (let a in d) {
        h(d[a]);
      }
      bj.setTimeout(function () {
        if (g === 0) {
          return;
        }
        g = 0;
        const a = bj.Object.keys(d);
        f(a[Math.floor(a.length * Math.random())]);
      }, 5000);
    };
    this.ⲆⲆⵠᐃΔΔⵠⵠᐃ = function () {
      let a = Nf.ⵠᐃᐃⲆᐃᐃᐃ[b.ⵠᐃⲆⵠΔ];
      console.log(undefined, kl, Ns);
      let c = b.ΔΔⵠᐃᐃᐃⵠ[b.ⵠᐃⲆⵠΔ];
      let d = b.ⵠΔΔΔⵠ.find(b => b.gm == a && b.idx == c);
      if (d === Bo) {
        b.ᐃⲆⵠᐃⵠᐃΔⲆⵠ(a);
      } else {
        b.ᐃᐃᐃΔΔΔᐃ({
          domain: _f,
          is_tls: 1,
          id: d.id,
          p: d.p
        });
      }
    };
    this.ⲆⲆΔⵠᐃⵠⲆ = function () {
      console.log(undefined);
      if (Tw !== undefined && Ns !== Qf) {
        console.log(Dh, undefined, undefined);
        b.ᐃᐃᐃΔΔΔᐃ({
          domain: _f,
          is_tls: 1,
          id: Qf + Tw,
          p: b.ⵠⵠⲆᐃⵠᐃΔ[Qf]
        });
        return;
      }
      if (If === undefined) {
        b.ⲆⲆⵠᐃΔΔⵠⵠᐃ();
      } else {
        b.ᐃᐃᐃΔΔΔᐃ({
          domain: If.domain,
          is_tls: If.ssl,
          id: If.id,
          p: [If.p]
        });
      }
    };
    this.ᐃᐃᐃΔΔΔᐃ = function (a) {
      let c = a.domain;
      let d = a.is_tls;
      let e = a.id;
      let f = a.p;
      let g = f[Math.floor(Math.random() * f.length)];
      let i = d ? "wss://" + g + "." + c + "/" + e + "?" + Hx.ⲆᐃⵠᐃᐃΔⵠ : "ws://" + c;
      console.log(undefined, Ra);
      b.ⲆΔⵠⲆ = new bj.WebSocket(i);
      b.ⲆΔⵠⲆ.binaryType = "arraybuffer";
      b.ⲆΔⵠⲆ.ΔᐃΔⵠⵠ = b.ΔᐃΔⵠⵠ;
      b.ⲆΔⵠⲆ.onmessage = function (a) {
        if (b.ΔᐃΔⵠⵠ == b.ΔᐃΔⵠⵠ) {
          if (typeof a.data == "string") {
            var c = JSON.parse(a.data);
            switch (c[0]) {
              case 0:
                b.ⲆᐃⲆᐃⲆ(c);
                break;
              case 1:
                b.ᐃⲆᐃⵠᐃⵠΔ(c[1]);
                break;
              case 2:
                b.ⵠΔᐃΔⵠΔΔΔⵠ(c);
                break;
              case 3:
                b.ΔⲆΔⲆΔᐃⲆⲆᐃ(c);
                break;
              case 4:
                b.message(c[1]);
                break;
              case 5:
                b.ⵠᐃⵠᐃΔⲆⵠ(c);
                break;
              case 6:
                b.ⵠⵠΔⲆⲆⵠΔ(c[1]);
            }
          } else {
            var d = function (b, c, d) {
              const f = new Uint8Array(b);
              const e = f.length;
              let g;
              let h = Lf[e];
              let i = pj;
              if (Lh === h) {
                Wf += e * 2;
                if (Wf < 65535) {
                  g = tj(Zj(e));
                } else {
                  Wf = e;
                  for (let a = 0; a < Lf.length; a++) {
                    if (Lf[a] !== undefined) {
                      const b = Lf[a][0];
                      Lf[a] = Wg;
                      fe(b);
                    }
                  }
                  g = tj(Zj(e));
                  vj();
                }
                i = Nk(g);
                Lf[e] = [g, i];
              } else {
                g = h[0];
                i = h[1];
              }
              for (let a = 0; f.length > a; a++) {
                i[a] = f[a];
              }
              Nj(g, c, d);
              for (let a = 0; a < f.length; a++) {
                f[a] = i[a];
              }
              return f;
            }(a.data, Hx.ⲆΔᐃⵠⵠᐃⵠ, Hx.ⵠⵠⲆΔⵠⲆΔⵠⲆ);
            var e = d.buffer;
            switch (d[0]) {
              case 0:
                b.ᐃⲆΔ(e, d, false);
                break;
              case 1:
                b.ᐃⲆΔ(e, d, true);
                break;
              case 2:
                b.ⵠᐃⵠⵠⵠᐃⲆᐃⵠ();
                break;
              case 3:
                b.ⲆⵠⵠΔⲆΔⲆ(new Uint16Array(e));
                break;
              case 4:
                b.ⵠⲆᐃΔⲆⵠΔᐃⲆ();
                break;
              case 5:
                b.ⲆⵠⵠⲆᐃΔΔᐃⲆ();
                break;
              case 6:
                b.ΔⵠᐃⵠⵠᐃᐃⲆᐃ();
                break;
              case 7:
                b.ⵠⲆΔΔΔΔΔⲆⵠ(e);
                break;
              case 8:
                b.ᐃⲆΔⵠᐃΔⵠᐃⲆ(d[1]);
                break;
              case 9:
                b.ᐃⵠᐃⲆⵠΔⲆⲆΔ(d[1]);
                break;
              case 10:
                b.ΔⲆΔᐃⵠᐃΔ();
                break;
              case 11:
                b.ⵠⵠΔᐃΔⲆⵠ(d[1], d[2]);
                break;
              case 12:
                b.ᐃⵠⲆⵠΔ(d[1]);
                break;
              case 13:
                b.ΔⵠⵠⵠⲆᐃΔΔᐃ(d, e);
                break;
              case 14:
                b.ⲆΔΔΔᐃΔΔΔⵠ();
                break;
              case 15:
                b.ᐃⵠΔΔᐃΔΔΔΔ(d[1]);
                break;
              case 16:
                b.ⵠΔⲆⵠ(d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
                break;
              case 17:
                b.ΔΔᐃⵠⵠⲆⲆΔᐃ(e);
                break;
              case 18:
                b.ᐃᐃΔⲆⵠⲆⵠⲆⵠ();
                break;
              case 19:
                b.ᐃⵠⵠⵠᐃ(d[1]);
                break;
              case 20:
                b.ΔⵠⵠⵠⵠⵠΔΔⲆ();
                break;
              case 21:
                b.ᐃⲆΔΔᐃ(e);
                break;
              case 22:
                b.ᐃⲆⵠΔΔⵠⲆᐃΔ(d[1]);
                break;
              case 23:
                b.ⵠᐃΔⲆⵠⵠΔᐃΔ(e);
                break;
              case 24:
                b.ⵠᐃᐃⲆΔⲆⲆⵠᐃ(d[1]);
                break;
              case 25:
                b.ⲆⵠΔᐃⲆᐃΔⵠΔ(d[1], e);
                break;
              case 26:
                b.ⵠⵠΔⲆⲆ(d);
                break;
              case 27:
                b.ᐃⲆᐃᐃΔⵠⵠⵠΔ();
                break;
              case 28:
                b.ⲆΔⵠⵠⲆ(d[1]);
                break;
              case 29:
                b.ⵠⲆΔⵠᐃⲆᐃⲆΔ();
                break;
              case 30:
                b.ᐃᐃΔᐃⵠᐃᐃⲆⵠ();
                break;
              case 31:
                b.ᐃⵠⵠᐃⵠᐃⲆⵠⲆ(d);
                break;
              case 32:
                b.ⲆΔΔⲆⲆⲆⲆⵠᐃ(d[1]);
                break;
              case 33:
                b.ⲆΔᐃⵠΔΔΔⵠⵠ(d[1]);
                break;
              case 34:
                b.ⵠⵠᐃⵠΔᐃⵠⵠⲆ();
                break;
              case 35:
                b.ⲆⲆⵠᐃΔΔᐃⵠⵠ(d[1]);
                break;
              case 36:
                b.ΔⵠᐃⲆΔΔⵠ(d[1]);
                break;
              case 37:
                b.ᐃⵠⵠᐃΔⵠⲆᐃΔ(d[1], d[2]);
                break;
              case 38:
                b.ⲆᐃⲆΔⵠΔⵠⲆⲆ(d[1]);
                break;
              case 39:
                b.ⲆⲆᐃᐃⵠΔΔⲆᐃ(d[1]);
                break;
              case 40:
                b.ᐃⲆᐃⵠΔᐃⵠΔⵠ();
                break;
              case 41:
                b.ᐃΔᐃⲆⲆⲆΔΔᐃ(d);
                break;
              case 42:
                b.ⲆᐃⲆⲆΔᐃΔⵠᐃ(d[1]);
                break;
              case 43:
                b.ᐃⲆⲆΔⲆΔᐃᐃΔ(d[1]);
                break;
              case 44:
                b.claimed(d[1]);
                break;
              case 45:
                b.ΔΔᐃΔⵠᐃᐃⵠᐃ(d[1]);
                break;
              case 46:
                b.ᐃΔᐃᐃΔΔᐃⵠΔ(d[1]);
                break;
              case 47:
                b.ᐃⵠⵠᐃⲆ(d[1]);
                break;
              case 48:
                b.ᐃⵠⵠⲆⵠⲆΔⲆΔ();
                break;
              case 50:
                b.ⵠΔⲆⵠᐃⲆⵠᐃⵠ(d[1], d[2], d[3]);
                break;
              case 51:
                b.ΔΔⵠᐃⲆⵠΔⲆΔ();
                break;
              case 52:
                b.ᐃΔⵠᐃᐃⲆΔᐃᐃ(d[1]);
                break;
              case 53:
                b.ΔⵠⵠⲆΔᐃⲆᐃᐃ(d[1]);
                break;
              case 54:
                b.ⲆⲆⵠⲆⵠⵠΔⵠⵠ();
                break;
              case 55:
                b.ⲆᐃΔΔⲆΔⵠⵠⲆ(d[1]);
                break;
              case 56:
                b.ΔⵠⵠᐃᐃⲆᐃⲆⲆ(d[1]);
                break;
              case 57:
                b.ᐃⵠᐃᐃΔⲆⲆⵠᐃ();
                break;
              case 58:
                b.ⲆΔⵠⲆⵠⲆᐃᐃⵠ();
                break;
              case 59:
                b.ᐃⵠⲆⲆⲆⵠⵠΔΔ();
                break;
              case 60:
                b.ⲆΔⲆΔⲆⵠⲆΔⵠ();
                break;
              case 61:
                Hx.ΔΔⲆ.ⵠⲆⵠⵠⵠᐃᐃ = 0.2;
                Hx.ΔΔⲆ.ⲆΔⲆΔⲆ = 3;
                break;
              case 62:
                b.ⵠᐃΔᐃΔᐃⵠᐃΔ(new Uint16Array(e));
                break;
              case 63:
                b.ⵠⵠΔⲆⵠⲆᐃΔⵠ();
                break;
              case 64:
                b.ᐃⲆⵠⵠⲆᐃᐃΔⲆ();
                break;
              case 65:
                b.ᐃᐃᐃᐃΔⵠⵠⲆᐃ();
                break;
              case 66:
                b.ᐃᐃⲆⵠΔᐃⲆΔⲆ();
                break;
              case 67:
                b.ᐃΔΔᐃΔᐃⲆᐃᐃ(d[1]);
                break;
              case 68:
                b.ⲆⲆⲆⵠᐃΔΔⲆΔ(d[1]);
                break;
              case 69:
                b.ⲆⲆΔΔⵠⵠΔ(d[1]);
                break;
              case 70:
                b.ΔⲆᐃΔⲆᐃⲆΔΔ(d[1]);
                break;
              case 71:
                b.ΔΔⲆⵠΔ(d[1]);
            }
          }
        }
      };
      b.ⲆΔⵠⲆ.onerror = function () {
        if (Hx.reconnect.enabled) {
          bj.setTimeout(b.timeout, 2500);
        }
      };
      this.ⲆΔⵠⲆ.onopen = function () {
        clearTimeout(b.ΔⲆⵠᐃᐃ);
        Hx.ⵠⲆΔⲆΔⵠⵠ = Hx.ⵠⲆΔⲆΔⵠⵠ || ᐃⵠⵠ.ⲆΔΔΔᐃᐃⵠ("token");
        ᐃⵠⵠ.ⲆⵠⲆⲆᐃᐃⵠ().then(a => {
          b.ⲆΔⵠⲆ[Bf](dr[Wq].stringify([Fx.ΔᐃΔΔⵠ.input.value, screen.width + 200, screen.height + 200, 52, Hx.ⵠⵠⲆΔⵠ, Hx.ⵠᐃᐃᐃΔΔⲆ, Hx.reconnect.enabled ? 1 : 0, Fx.ⲆΔⵠΔ, Fx.ⲆⵠⲆⲆⲆ, Fx.ⵠⲆⲆᐃⲆ, Fx.ⵠⵠⲆᐃΔ, Fx.ΔΔΔⵠⲆ, Fx.ᐃⵠΔΔⵠ, ey === Og ? 0 : ey, ay === undefined ? 0 : ay.substring(ay.length - 50), Df, Hx.ⵠⲆΔⲆΔⵠⵠ, a, Hx.ΔᐃⲆⵠⲆΔΔ, Hx.ᐃⵠΔⵠΔⲆⲆ]));
          Hx.ⵠⲆΔⲆΔⵠⵠ = Og;
          Hx.ΔᐃⲆⵠⲆΔΔ = undefined;
          Hx.ᐃⵠΔⵠΔⲆⲆ = undefined;
          Hx.ⲆᐃⵠᐃᐃΔⵠ = Qa;
          b.ΔⲆⵠᐃᐃ = setTimeout(b.timeout, 2000);
        });
      };
    };
  }();
  var Kx = {
    ⵠⲆΔᐃΔ: false
  };
  var Lx = new function () {
    this.ⵠᐃΔⵠΔ = 0;
    this.loaded = 0;
    this.transition = 0;
    this.ⲆΔⵠⲆΔⲆⲆ = function (a) {
      return a / Gx.w * 100;
    };
    this.ⵠᐃᐃⲆᐃⲆⵠ = function (a) {
      return a / Gx.Ⲇᐃⵠ * 100;
    };
    this.ⲆΔⲆΔᐃΔⲆ = function (a, b) {
      a = this.ⲆΔⵠⲆΔⲆⲆ(a) - this.ᐃⲆΔᐃᐃ.x;
      return this.ᐃⲆΔᐃᐃ.x + b * a;
    };
    this.ᐃᐃΔⲆᐃΔⵠ = function (a, b) {
      a = Math.abs(this.ⵠᐃᐃⲆᐃⲆⵠ(a) - this.ᐃⲆΔᐃᐃ.y);
      return this.ᐃⲆΔᐃᐃ.y + b * a;
    };
    this.sample = {};
    this.ⵠⲆᐃΔⵠ = {};
    this.ΔⵠΔⲆ = {};
    this.ᐃᐃΔᐃᐃᐃⲆ = function (b, c, d, e) {
      for (var f = 0; f < c.length; f++) {
        var g = c[f];
        if (!b.playing(g)) {
          b.pos(d, e, -0.5, g);
          b.play(g);
          return Tk;
        }
      }
      return false;
    };
    this.ⵠⵠᐃ = function (a, b, c, d) {
      c = this.ⲆΔⲆΔᐃΔⲆ(c, ΔⲆᐃⲆⲆ.ⲆⲆⵠⲆᐃⲆᐃ);
      d = this.ᐃᐃΔⲆᐃΔⵠ(d, ΔⲆᐃⲆⲆ.ⲆⲆⵠⲆᐃⲆᐃ);
      console.log("HIT", a, b, c, d, ΔⲆᐃⲆⲆ.ⲆⲆⵠⲆᐃⲆᐃ);
      if (a) {
        if (b === 1) {
          this.ᐃᐃΔᐃᐃᐃⲆ(this.ΔⵠΔⲆ.ⵠΔΔⵠᐃᐃⲆ, this.sample.ⵠΔΔⵠᐃᐃⲆ, c, d);
        } else if (b === 0) {
          this.ᐃᐃΔᐃᐃᐃⲆ(this.ΔⵠΔⲆ.ΔΔⲆⲆⲆΔⵠ, this.sample.ΔΔⲆⲆⲆΔⵠ, c, d);
        }
      } else {
        this.ᐃᐃΔᐃᐃᐃⲆ(this.ΔⵠΔⲆ.ᐃᐃᐃᐃⵠ, this.sample.ᐃᐃᐃᐃⵠ, c, d);
      }
    };
    this.ᐃⲆΔᐃᐃ = {
      y: 0,
      x: 0
    };
    this.ᐃⲆᐃⵠⵠⵠⲆ = {
      x: 0,
      y: 0
    };
    this.ⲆᐃⲆⵠⵠ = {};
    this.ᐃⲆⵠⲆ = [];
    this.ᐃⲆᐃᐃⲆ = function (a, b) {
      for (var c in this.ⲆᐃⲆⵠⵠ) {
        var d = this.ⲆᐃⲆⵠⵠ[c];
        d.check(a);
        if (d.ⵠᐃⲆᐃⵠⲆⲆ) {
          if (Gx.ᐃⲆΔⵠᐃ.now < 460000) {
            d.ⵠⲆᐃⲆⲆ();
          }
          if (b) {
            d.ⲆΔᐃ(a, this.ᐃⲆΔᐃᐃ);
          }
          if (this.transition) {
            d.transition();
          }
        }
      }
      this.transition &&= 0;
    };
    this.ΔⲆᐃᐃⵠᐃΔΔΔ = function () {
      var a = [];
      for (var b = 0; this.ᐃⲆⵠⲆ.length > b; b++) {
        if ((e = this.ᐃⲆⵠⲆ[b]).ᐃⵠⲆᐃᐃⲆⵠ) {
          a.push(b);
        } else if (!e.ᐃⵠⲆᐃᐃⲆⵠ && !Gx.ⲆΔⲆΔⵠ[e.ᐃⲆⲆⵠ]) {
          e.ⵠⵠᐃᐃᐃⲆᐃ();
          a.push(b);
        }
      }
      var c = Gx.ᐃⲆΔ[0];
      var d = 0;
      for (b = 0; b < c.length && a.length > d; b++) {
        var e = c[b];
        if ((Gx.mode != 1 || Gx.ᐃⲆⵠⲆ[e.id].ΔᐃΔΔⵠ !== "spectator") && e.ᐃΔⵠᐃΔ === -1 && e.ᐃⲆⲆⵠ !== Hx.ᐃⲆⲆⵠ) {
          this.ᐃⲆⵠⲆ[a[d]].ⲆⵠΔⵠⲆ(e.ᐃⲆⲆⵠ);
          d++;
        }
      }
    };
    this.ᐃⲆᐃⲆⲆⵠΔⵠᐃ = function () {
      this.ΔⲆᐃᐃⵠᐃΔΔΔ();
      for (var a = 0; a < this.ᐃⲆⵠⲆ.length; a++) {
        var b = this.ᐃⲆⵠⲆ[a];
        if (!b.ᐃⵠⲆᐃᐃⲆⵠ && b.check()) {
          b.ⲆΔᐃ();
        }
      }
    };
    this.ᐃⲆⲆᐃⲆᐃᐃⵠᐃ = function (a) {
      if (a.x === this.ᐃⲆᐃⵠⵠⵠⲆ.x && this.ᐃⲆᐃⵠⵠⵠⲆ.y === a.y) {
        return 0;
      } else {
        this.ᐃⲆᐃⵠⵠⵠⲆ.x = a.x;
        this.ᐃⲆᐃⵠⵠⵠⲆ.y = a.y;
        this.ᐃⲆΔᐃᐃ.x = this.ⲆΔⵠⲆΔⲆⲆ(a.x);
        this.ᐃⲆΔᐃᐃ.y = this.ⵠᐃᐃⲆᐃⲆⵠ(a.y);
        Howler.pos(this.ᐃⲆΔᐃᐃ.x, this.ᐃⲆΔᐃᐃ.y, 0);
        return 1;
      }
    };
    this.ᐃΔᐃⵠᐃⲆΔᐃⲆ = function () {
      if (this.ⵠᐃΔⵠΔ && this.loaded) {
        var a = Gx.ⲆΔⲆΔⵠ[Hx.ᐃⲆⲆⵠ];
        if (a) {
          a.ᐃΔⵠᐃΔ = 0;
          var b = this.ᐃⲆⲆᐃⲆᐃᐃⵠᐃ(a);
          if (Gx.mode !== 2 && Gx.mode !== 4 && Gx.mode !== 5) {
            this.ᐃⲆᐃᐃⲆ(a, b);
          }
          this.ᐃⲆᐃⲆⲆⵠΔⵠᐃ();
        }
      }
    };
    this.ᐃⵠᐃΔΔⵠⵠᐃΔ = function () {
      for (var b in yx) {
        var c = yx[b];
        if (typeof c === "object" && c.path) {
          c.ᐃⲆΔΔⵠ = new Howl({
            src: c.path,
            volume: 0,
            sprite: c.Ⲇⵠ
          });
        }
        for (var d in c.sample) {
          var f = c.sample[d];
          var g = [];
          console.log(undefined);
          for (var h = 0; h < f; h++) {
            var j = c.ᐃⲆΔΔⵠ.play(d);
            c.ᐃⲆΔΔⵠ.stop(j);
            c.ᐃⲆΔΔⵠ.on("fade", function (a) {
              if (!this.volume(a)) {
                console.log(ct, Ns);
                this.stop(a);
              }
            }, j);
            g.push(j);
          }
          if (g.length > 1) {
            Lx.sample[d] = g;
          } else {
            Lx.sample[d] = g[0];
          }
          Lx.ΔⵠΔⲆ[d] = c.ᐃⲆΔΔⵠ;
        }
      }
    };
    this.ΔⲆᐃΔⵠΔΔ = function (a, b, c) {
      for (var d = 0; a.length > d; d++) {
        b.volume(c, a[d]);
      }
    };
    this.ⵠⲆⲆΔΔᐃⵠ = function (b, c, d, e, f, g) {
      var a = b;
      for (var i = 0; i < d; i++) {
        var j = a[i] = [];
        for (ᐃᐃⵠⲆ = 0; ᐃᐃⵠⲆ < e; ᐃᐃⵠⲆ++) {
          j[ᐃᐃⵠⲆ] = Lx.sample[f + ᐃᐃⵠⲆ][i];
          c.ᐃⲆΔΔⵠ.volume(g, j[ᐃᐃⵠⲆ]);
        }
      }
    };
    this.ⲆⵠΔⵠⲆ = function () {
      Lx.ᐃⵠᐃΔΔⵠⵠᐃΔ();
      Lx.ⵠⲆᐃΔⵠ.ᐃⵠⵠⵠⵠⵠΔ = [];
      Lx.ⵠⲆᐃΔⵠ.ᐃΔⲆΔᐃ = [];
      Lx.ⵠⲆᐃΔⵠ.ᐃᐃΔΔⵠ = [];
      Lx.ⵠⲆⲆΔΔᐃⵠ(Lx.ⵠⲆᐃΔⵠ.ᐃⵠⵠⵠⵠⵠΔ, yx.ⵠⲆⵠⲆⲆⵠΔ, 8, 3, "p", 0.15);
      Lx.ⵠⲆⲆΔΔᐃⵠ(Lx.ⵠⲆᐃΔⵠ.ᐃΔⲆΔᐃ, yx.ΔⲆⵠᐃΔⵠᐃ, 8, 4, "w", 0.15);
      Lx.ⵠⲆⲆΔΔᐃⵠ(Lx.ⵠⲆᐃΔⵠ.ᐃᐃΔΔⵠ, yx.ⲆⵠⵠᐃⲆΔᐃ, 8, 3, "d", 0.09);
      Lx.ΔⲆᐃΔⵠΔΔ(Lx.sample.ᐃᐃᐃᐃⵠ, Lx.ΔⵠΔⲆ.ᐃᐃᐃᐃⵠ, 0.15);
      Lx.ΔⲆᐃΔⵠΔΔ(Lx.sample.ΔΔⲆⲆⲆΔⵠ, Lx.ΔⵠΔⲆ.ΔΔⲆⲆⲆΔⵠ, 0.2);
      Lx.ΔⲆᐃΔⵠΔΔ(Lx.sample.ⵠΔΔⵠᐃᐃⲆ, Lx.ΔⵠΔⲆ.ⵠΔΔⵠᐃᐃⲆ, 1);
      Lx.ⲆᐃⲆⵠⵠ.ⵠᐃΔⲆⵠᐃᐃᐃⵠ = new zx(12, this.sample.ⲆⵠⵠΔⵠⵠΔ, this.sample.ⵠⵠⵠⲆⵠⵠⵠ, 5000, 0.05, 0.4, yx.ⲆᐃⲆⵠⲆⵠⲆ.ᐃⲆΔΔⵠ, 3000, {
        x: sh.ᐃΔⵠᐃΔᐃΔ,
        y: sh.ΔᐃⵠⵠⵠΔᐃ,
        w: Gx.w,
        Ⲇᐃⵠ: Gx.Ⲇᐃⵠ
      }, {
        x: sh.ᐃΔⵠᐃΔᐃΔ - 2300,
        y: sh.ΔᐃⵠⵠⵠΔᐃ - 4000,
        w: Gx.w,
        Ⲇᐃⵠ: Gx.Ⲇᐃⵠ
      }, {
        x: sh.ᐃΔⵠᐃΔᐃΔ - 1500,
        y: sh.ΔᐃⵠⵠⵠΔᐃ - 2000,
        w: Gx.w,
        Ⲇᐃⵠ: Gx.Ⲇᐃⵠ
      });
      Lx.ⲆᐃⲆⵠⵠ.ᐃⵠⵠⲆΔᐃⵠⵠⲆ = new zx(12, this.sample.ⲆⵠⵠⲆΔᐃⵠ, this.sample.ΔⵠⵠⲆΔΔⵠ, 5000, 0.03, 0.25, yx.ⲆᐃⲆⵠⲆⵠⲆ.ᐃⲆΔΔⵠ, 3000, {
        x: 0,
        y: sh.ΔᐃⵠⵠⵠΔᐃ + 800,
        w: sh.ᐃΔⵠᐃΔᐃΔ - 2300,
        Ⲇᐃⵠ: Gx.Ⲇᐃⵠ
      }, {
        x: -100,
        y: sh.ΔᐃⵠⵠⵠΔᐃ - 300,
        w: sh.ᐃΔⵠᐃΔᐃΔ - 100,
        Ⲇᐃⵠ: Gx.Ⲇᐃⵠ
      }, {
        x: -100,
        y: sh.ΔᐃⵠⵠⵠΔᐃ + 400,
        w: sh.ᐃΔⵠᐃΔᐃΔ - 1400,
        Ⲇᐃⵠ: Gx.Ⲇᐃⵠ
      });
      Lx.ⲆᐃⲆⵠⵠ.ΔᐃⲆΔΔⲆᐃ = new zx(12, this.sample.ΔⵠⲆΔⲆⵠᐃ, this.sample.ⵠᐃᐃᐃΔᐃᐃ, 5000, 0.01, 0.22, yx.ⲆᐃⲆⵠⲆⵠⲆ.ᐃⲆΔΔⵠ, 3000, {
        x: -100,
        y: -100,
        w: Gx.w + 200,
        Ⲇᐃⵠ: sh.ΔᐃⵠⵠⵠΔᐃ - 1000
      }, {
        x: -100,
        y: -100,
        w: Gx.w + 200,
        Ⲇᐃⵠ: sh.ΔᐃⵠⵠⵠΔᐃ + 600
      }, {
        x: -100,
        y: -100,
        w: Gx.w + 200,
        Ⲇᐃⵠ: sh.ΔᐃⵠⵠⵠΔᐃ + 100
      });
      for (var a = 0; a < 8; a++) {
        Lx.ᐃⲆⵠⲆ[a] = new Cx(a);
      }
      Lx.ᐃⲆⵠⲆ[0].ⲆⵠΔⵠⲆ(Hx.ᐃⲆⲆⵠ);
      Lx.loaded = 1;
    };
    this.ΔⲆΔΔⵠⵠⲆΔΔ = function () {
      if (!this.transition && Gx.ᐃⲆΔⵠᐃ.now < 460000) {
        this.transition = 1;
      }
    };
    this.ΔΔᐃⵠⲆ = function () {
      if (this.ⵠᐃΔⵠΔ && this.loaded) {
        for (var a in Lx.sample) {
          var b = Lx.sample[a];
          if (typeof b === "object") {
            for (var c = 0; c < b.length; c++) {
              Lx.ΔⵠΔⲆ[a].stop(b[c]);
            }
          } else {
            Lx.ΔⵠΔⲆ[a].stop(b);
          }
        }
        for (c = 0; Lx.ᐃⲆⵠⲆ.length > c; c++) {
          Lx.ᐃⲆⵠⲆ[c].ⵠⵠᐃᐃᐃⲆᐃ();
        }
      }
    };
    this.select = function () {
      if (Lx.ⵠᐃΔⵠΔ) {
        Lx.ΔΔᐃⵠⲆ();
      } else {
        if (!Lx.loaded) {
          Lx.ⲆⵠΔⵠⲆ();
        }
        Lx.ᐃⲆⵠⲆ[0].ᐃⲆⲆⵠ = Hx.ᐃⲆⲆⵠ;
        Lx.ᐃⲆⵠⲆ[0].ᐃⵠⲆᐃᐃⲆⵠ = 0;
        Lx.ΔⲆΔΔⵠⵠⲆΔΔ();
      }
      Lx.ⵠᐃΔⵠΔ = !Lx.ⵠᐃΔⵠΔ;
    };
  }();
  var Mx = new function () {
    this.ᐃᐃᐃΔⵠΔⲆ = function () {
      this.ⲆⲆΔⵠⲆ = 81;
      this.ⲆⵠⲆΔΔ = 68;
      this.ⲆΔΔΔⵠ = 90;
      this.ⲆⲆⵠⵠᐃᐃΔ = 83;
    };
    this.ⵠⲆΔⲆⵠⲆΔ = function () {
      this.ⲆⲆΔⵠⲆ = 65;
      this.ⲆⵠⲆΔΔ = 68;
      this.ⲆΔΔΔⵠ = 87;
      this.ⵠΔᐃⵠⲆ = 83;
    };
    this.ᐃᐃΔⵠⲆ = 0;
    this.ⲆⲆⵠⵠᐃᐃΔ = 1;
    this.ᐃⲆⵠᐃⵠⵠⵠ = 49;
    this.ⲆⵠⲆⵠᐃΔΔ = 50;
    this.ⵠⵠΔⵠⵠΔⲆ = 51;
    this.Δᐃⵠⵠⵠᐃᐃ = 52;
    this.ⲆⵠⵠΔⲆⲆᐃⵠᐃ = 53;
    this.ⵠⲆⵠⵠΔᐃⵠ = 17;
    this.ⲆᐃᐃΔᐃᐃᐃ = 37;
    this.ⲆᐃΔⲆᐃΔⵠ = 39;
    this.ΔⲆΔᐃⲆᐃⵠ = 38;
    this.ᐃⵠⲆⵠΔⲆᐃ = 40;
    this.ᐃᐃᐃⵠΔⲆᐃ = 32;
    this.ΔⲆⵠⵠⲆΔⵠ = 82;
    this.ΔΔⲆΔⲆᐃᐃ = 71;
    this.ᐃⵠΔΔⲆΔⲆ = 86;
    this.ᐃⲆⵠⲆΔⵠᐃ = 66;
    this.ⵠⲆΔⲆⵠⲆΔ();
    this.keys = new Array(255);
    for (var a = 0; a < 255; a++) {
      this.keys[a] = this.ᐃᐃΔⵠⲆ;
    }
    this.up = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      this.keys[b] = this.ᐃᐃΔⵠⲆ;
    };
    this.down = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      if (b == this.ⲆⲆΔⵠⲆ || b == this.ⲆᐃᐃΔᐃᐃᐃ) {
        this.ΔⵠᐃⲆΔⲆⲆ();
      } else if (b == this.ⲆΔΔΔⵠ || this.ΔⲆΔᐃⲆᐃⵠ == b) {
        this.ΔΔΔᐃⲆΔⵠ();
      } else if (b == this.ⲆⲆⵠⵠᐃᐃΔ || this.ⵠⵠΔᐃᐃⲆⵠⲆⲆ == b) {
        this.ⵠⵠΔᐃⲆⲆⲆ();
      } else if (b == this.ⲆⵠⲆΔΔ || b == this.ⲆᐃΔⲆᐃΔⵠ) {
        this.ⵠΔⲆⲆΔⲆⵠ();
      }
      this.keys[b] = this.ⲆⲆⵠⵠᐃᐃΔ;
      return b;
    };
    this.ΔⵠᐃⲆΔⲆⲆ = function () {
      this.keys[this.ⲆⵠⲆΔΔ] = this.ᐃᐃΔⵠⲆ;
      this.keys[this.ⲆᐃΔⲆᐃΔⵠ] = this.ᐃᐃΔⵠⲆ;
    };
    this.ⵠΔⲆⲆΔⲆⵠ = function () {
      this.keys[this.ⲆⲆΔⵠⲆ] = this.ᐃᐃΔⵠⲆ;
      this.keys[this.ⲆᐃᐃΔᐃᐃᐃ] = this.ᐃᐃΔⵠⲆ;
    };
    this.ⵠⵠΔᐃⲆⲆⲆ = function () {
      this.keys[this.ⲆΔΔΔⵠ] = this.ᐃᐃΔⵠⲆ;
      this.keys[this.ΔⲆΔᐃⲆᐃⵠ] = this.ᐃᐃΔⵠⲆ;
    };
    this.ΔΔΔᐃⲆΔⵠ = function () {
      this.keys[this.ⵠΔᐃⵠⲆ] = this.ᐃᐃΔⵠⲆ;
      this.keys[this.ᐃⵠⲆⵠΔⲆᐃ] = this.ᐃᐃΔⵠⲆ;
    };
    this.ᐃΔΔᐃΔⵠⵠ = function () {
      this.keys[this.ⲆⵠⲆΔΔ] = this.ᐃᐃΔⵠⲆ;
      this.keys[this.ⲆᐃΔⲆᐃΔⵠ] = this.ᐃᐃΔⵠⲆ;
      this.keys[this.ⲆⲆΔⵠⲆ] = this.ᐃᐃΔⵠⲆ;
      this.keys[this.ⲆᐃᐃΔᐃᐃᐃ] = this.ᐃᐃΔⵠⲆ;
      this.keys[this.ⲆΔΔΔⵠ] = this.ᐃᐃΔⵠⲆ;
      this.keys[this.ΔⲆΔᐃⲆᐃⵠ] = this.ᐃᐃΔⵠⲆ;
      this.keys[this.ⵠΔᐃⵠⲆ] = this.ᐃᐃΔⵠⲆ;
      this.keys[this.ᐃⵠⲆⵠΔⲆᐃ] = this.ᐃᐃΔⵠⲆ;
    };
    this.ΔⵠᐃⲆᐃΔᐃ = function () {
      return this.keys[this.ⲆⲆΔⵠⲆ] || this.keys[this.ⲆᐃᐃΔᐃᐃᐃ];
    };
    this.ⲆΔΔᐃⵠΔⲆ = function () {
      return this.keys[this.ⲆⵠⲆΔΔ] || this.keys[this.ⲆᐃΔⲆᐃΔⵠ];
    };
    this.ⲆⲆⲆΔⲆⵠΔ = function () {
      return this.keys[this.ⲆΔΔΔⵠ] || this.keys[this.ΔⲆΔᐃⲆᐃⵠ];
    };
    this.ⵠᐃⲆⲆᐃⲆⵠ = function () {
      return this.keys[this.ⵠΔᐃⵠⲆ] || this.keys[this.ᐃⵠⲆⵠΔⲆᐃ];
    };
    this.ⵠⲆΔΔⲆᐃⵠⲆⲆ = function () {
      return this.keys[this.ⵠⲆⵠⵠΔᐃⵠ];
    };
    this.ᐃⵠⵠΔᐃⵠⵠⲆⲆ = function () {
      return this.keys[this.ᐃⲆⵠᐃⵠⵠⵠ];
    };
    this.ΔΔⵠⲆᐃⵠⲆΔΔ = function () {
      return this.keys[this.ⲆⵠⲆⵠᐃΔΔ];
    };
    this.ⲆᐃᐃⲆΔᐃⲆⲆᐃ = function () {
      return this.keys[this.ⵠⵠΔⵠⵠΔⲆ];
    };
    this.ⵠᐃⵠⵠΔⵠⵠⵠⲆ = function () {
      return this.keys[this.Δᐃⵠⵠⵠᐃᐃ];
    };
    this.ⵠⵠΔᐃⲆΔⵠᐃΔ = function () {
      return this.keys[this.ᐃᐃᐃⵠΔⲆᐃ];
    };
    this.ΔᐃᐃⵠⵠⵠᐃⲆⵠ = function () {
      return this.keys[this.ΔⲆⵠⵠⲆΔⵠ];
    };
    this.ΔΔⵠΔΔΔⵠΔΔ = function () {
      return this.keys[this.ΔΔⲆΔⲆᐃᐃ];
    };
    this.ᐃⵠⵠᐃⲆⲆⲆⵠⵠ = function () {
      return this.keys[this.ᐃⵠΔΔⲆΔⲆ];
    };
    this.ⲆΔⵠΔⲆΔᐃᐃΔ = function () {
      return this.keys[this.ᐃⲆⵠⲆΔⵠᐃ];
    };
  }();
  var Nx = new function () {
    this.ⲆⲆⵠⵠᐃᐃΔ = 0;
    this.ᐃᐃΔⵠⲆ = 1;
    this.IDLE = 2;
    this.ⲆⵠΔⲆⵠⵠⲆ = 0;
    this.ΔⲆΔᐃΔⵠⵠΔⲆ = 1;
    this.ΔΔΔᐃ = {
      y: 0,
      x: 0
    };
    this.ⲆⵠΔⲆᐃⲆⵠ = 0;
    this.ⵠⲆⵠᐃⲆᐃⵠ = 0;
    this.angle = 0;
    this.state = this.IDLE;
    this.ⲆⲆⲆΔ = this.ⲆⵠΔⲆⵠⵠⲆ;
    this.down = function () {
      this.state = this.ⲆⲆⵠⵠᐃᐃΔ;
    };
    this.up = function () {
      this.state = this.ᐃᐃΔⵠⲆ;
    };
    this.ⲆΔᐃ = function () {
      return (this.ΔΔΔᐃ.x != this.ⲆⵠΔⲆᐃⲆⵠ || this.ⵠⲆⵠᐃⲆᐃⵠ != this.ΔΔΔᐃ.y) && (this.ⲆⵠΔⲆᐃⲆⵠ = this.ΔΔΔᐃ.x, this.ⵠⲆⵠᐃⲆᐃⵠ = this.ΔΔΔᐃ.y, true);
    };
  }();
  var Ox = 0;
  var Px = 0;
  var Qx = new function (a, c, f) {
    this.Ⲇᐃ = a;
    this.Ⲇ = c;
    this.ΔΔΔΔᐃᐃⵠ = {
      translate: {
        x: 0,
        y: 0
      },
      style: document.getElementById("loading").style,
      ⲆΔᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ΔΔΔΔᐃᐃⵠ.style.position = "absolute";
    this.ΔΔΔΔᐃᐃⵠ.style.display = "inline-block";
    this.ΔΔΔΔᐃᐃⵠ.ⲆΔᐃ();
    this.ⵠⲆΔᐃΔ = B;
    this.stop = function () {
      this.ⵠⲆΔᐃΔ = false;
    };
    this.ᐃⵠᐃΔⵠΔⵠ = {
      total: 1
    };
    var i = this;
    function j() { }
    var k = 0;
    function n(a) {
      if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
        return 1;
      } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -1 || a.indexOf("avatar-player") !== -1) {
        return 0;
      } else {
        return 1;
      }
    }
    this.ᐃⵠᐃⲆᐃ = function () {
      i.ⲆΔᐃ();
      if (++k == 40) {
        i.stop();
        j();
        return;
      }
      bj.setTimeout(i.ᐃⵠᐃⲆᐃ, 33);
    };
    this.ΔΔᐃⵠⲆ = function (a) {
      j = a;
      i.ᐃⵠᐃⲆᐃ();
    };
    new Date().getTime();
    Object.keys(ᐃΔ).length;
    console.log(undefined, undefined);
    for (var e in ᐃΔ) {
      if (n(ᐃΔ[e]) === 0) {
        0;
      }
    }
    console.log(Kn, Lh);
    function p() {
      if (this.ⵠⵠΔⵠᐃᐃΔ !== 0) {
        return this.ⵠⵠΔⵠᐃᐃΔ;
      } else {
        this.ⵠⵠΔⵠᐃᐃΔ = 2;
        this.src = this.ΔᐃᐃⲆΔ;
        return 0;
      }
    }
    function g(a) {
      this.ⵠⵠΔⵠᐃᐃΔ = 1;
    }
    var l = 0;
    function q() {
      console.log(Ns);
      if (l !== 1) {
        l = 1;
        console.log(undefined);
        if (Tb !== Gb) {
          Tb();
        }
        Gb();
        var a = ᐃⵠⵠ.ⲆΔΔΔᐃᐃⵠ("server");
        if (a !== null) {
          Jx.ⲆΔⲆⵠⲆⲆⵠ = 1;
          Jx.ⵠΔΔΔⵠ = [{
            nu: 0,
            m: 100,
            i: "server" + a + ".starve.io",
            p: 443,
            a: a,
            ssl: 1
          }];
        }
        Jx.ⵠᐃⲆΔⵠⲆⲆᐃⲆ();
        setTimeout(f, 100);
      }
    }
    function b() {
      let a = function () {
        Jx.ⵠᐃᐃΔⲆΔΔ(q);
      };
      if (document.fonts && document.fonts.check) {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(a, 100);
        } else {
          setTimeout(b, 100);
        }
      } else {
        setTimeout(a, 1000);
      }
    }
    function d() {
      this.ⵠᐃΔΔⵠⵠΔ++;
      console.warn(`Image (${this.src}) failed to load, attempt ${this.ⵠᐃΔΔⵠⵠΔ}`, this);
      if (this.ⵠᐃΔΔⵠⵠΔ > 3) {
        console.warn("Failed to load image too many times");
      }
      var a = this.ⵠᐃΔΔⵠⵠΔ;
      var b = this.src;
      var c = n(b) === 0 ? 10000 : 2000;
      setTimeout(function () {
        for (var c in ⲆᐃᐃΔⲆⵠΔ) {
          if (b.indexOf(ⲆᐃᐃΔⲆⵠΔ[c]) !== -1) {
            ᐃΔ[c] = new Image();
            ᐃΔ[c].onload = g;
            ᐃΔ[c].onerror = d;
            ᐃΔ[c].ⵠᐃΔΔⵠⵠΔ = a;
            ᐃΔ[c].src = b;
            break;
          }
        }
      }, c);
    }
    function s(a) {
      for (var b in ᐃΔ) {
        var c = ᐃΔ[b];
        if (typeof c === "string" && n(c) === a) {
          ᐃΔ[b] = new Image();
          ᐃΔ[b].ⵠⵠΔⵠᐃᐃΔ = 0;
          ᐃΔ[b].ⵠᐃΔΔⵠⵠΔ = 0;
          ᐃΔ[b].onload = g;
          ᐃΔ[b].onerror = d;
          ᐃΔ[b].ⵠⵠΔᐃⲆⲆΔ = p;
          ᐃΔ[b].ΔᐃᐃⲆΔ = c;
        }
      }
    }
    s(1);
    s(0);
    Su(1, "l", 20, "#000");
    b();
    Nc();
    this.ⲆΔᐃ = function () {
      this.ΔΔΔΔᐃᐃⵠ.translate.x = (Yo - 500) / 2;
      this.ΔΔΔΔᐃᐃⵠ.translate.y = (jq - 150) / 2;
      var a = 2500 / (40 - k + 1) - 48;
      this.ΔΔΔΔᐃᐃⵠ.translate.y -= a;
      this.ΔΔΔΔᐃᐃⵠ.ⲆΔᐃ();
    };
    this.ΔΔΔΔᐃᐃⵠ.ⲆΔᐃ();
    this.ⵠᐃⲆᐃ = function () {
      try {
        Tp();
      } catch (a) { }
      this.ⲆΔᐃ();
    };
  }(Ho, Uo, function () {
    Bp();
    Kx = new rx(Ho, Uo);
    (Fx = new tx(Ho, Uo)).ᐃΔᐃⲆⵠᐃⵠΔᐃ();
    Ix = new qx(Ho, Uo);
    Gx = new Zf();
    Hx = new fx();
    Qx.ΔΔᐃⵠⲆ(function () {
      Qx.ΔΔΔΔᐃᐃⵠ.style.display = "none";
      Fx.ⵠᐃΔⵠΔ();
    });
  });
  function Rx() {
    try {
      bj.Widget.adsRefresh();
    } catch (a) { }
  }
  bj.onbeforeunload = function () {
    if (Kx.ⵠⲆΔᐃΔ) {
      return "Are you sure you want quit starve.io ;-; ?";
    }
  };
  _r();
  (function b(a) {
    bj.requestAnimationFrame(b);
    Ox = (a - Px) / 1000;
    Px = a;
    Ox = Ox > 1 ? 1 : Ox;
    if (Kx.ⵠⲆΔᐃΔ) {
      Kx.ⵠᐃⲆᐃ();
    } else {
      Uo.clearRect(0, 0, Yo, jq);
      if (Qx.ⵠⲆΔᐃΔ) {
        Qx.ⵠᐃⲆᐃ();
      } else if (Fx.ⵠⲆΔᐃΔ) {
        Fx.ⵠᐃⲆᐃ();
      } else if (Ix.ⵠⲆΔᐃΔ) {
        Ix.ⵠᐃⲆᐃ();
      }
    }
  })(0);
  const workerTimersSetInterval = (() => { var R = Object.create; var g = Object.defineProperty; var U = Object.getOwnPropertyDescriptor; var A = Object.getOwnPropertyNames; var q = Object.getPrototypeOf, x = Object.prototype.hasOwnProperty; var k = (t, r) => () => (r || t((r = { exports: {} }).exports, r), r.exports); var F = (t, r, i, a) => { if (r && typeof r == "object" || typeof r == "function") for (let s of A(r)) !x.call(t, s) && s !== i && g(t, s, { get: () => r[s], enumerable: !(a = U(r, s)) || a.enumerable }); return t }; var L = (t, r, i) => (i = t != null ? R(q(t)) : {}, F(r || !t || !t.__esModule ? g(i, "default", { value: t, enumerable: !0 }) : i, t)); var E = k((f, y) => { (function (t, r) { typeof f == "object" && typeof y < "u" ? r(f) : typeof define == "function" && define.amd ? define(["exports"], r) : (t = typeof globalThis < "u" ? globalThis : t || self, r(t.fastUniqueNumbers = {})) })(f, function (t) { "use strict"; var r = function (e) { return function (u) { var m = e(u); return u.add(m), m } }, i = function (e) { return function (u, m) { return e.set(u, m), m } }, a = Number.MAX_SAFE_INTEGER === void 0 ? 9007199254740991 : Number.MAX_SAFE_INTEGER, s = 536870912, l = s * 2, w = function (e, u) { return function (m) { var h = u.get(m), c = h === void 0 ? m.size : h < l ? h + 1 : 0; if (!m.has(c)) return e(m, c); if (m.size < s) { for (; m.has(c);)c = Math.floor(Math.random() * l); return e(m, c) } if (m.size > a) throw new Error("Congratulations, you created a collection of unique numbers which uses all available integers!"); for (; m.has(c);)c = Math.floor(Math.random() * a); return e(m, c) } }, T = new WeakMap, v = i(T), o = w(v, T), n = r(o); t.addUniqueNumber = n, t.generateUniqueNumber = o }) }); var p = L(E()); var b = t => t.method !== void 0 && t.method === "call"; var M = t => typeof t.id == "number" && typeof t.result == "boolean"; var N = t => { let r = new Map([[0, () => { }]]), i = new Map([[0, () => { }]]), a = new Map, s = new Worker(t); return s.addEventListener("message", ({ data: o }) => { if (b(o)) { let { params: { timerId: n, timerType: d } } = o; if (d === "interval") { let e = r.get(n); if (typeof e === void 0) throw new Error("The timer is in an undefined state."); if (typeof e == "number") { let u = a.get(e); if (u === void 0 || u.timerId !== n || u.timerType !== d) throw new Error("The timer is in an undefined state.") } else typeof e == "function" && e() } else if (d === "timeout") { let e = i.get(n); if (typeof e === void 0) throw new Error("The timer is in an undefined state."); if (typeof e == "number") { let u = a.get(e); if (u === void 0 || u.timerId !== n || u.timerType !== d) throw new Error("The timer is in an undefined state.") } else typeof e == "function" && (e(), i.delete(n)) } } else if (M(o)) { let { id: n } = o, d = a.get(n); if (d === void 0) throw new Error("The timer is in an undefined state."); let { timerId: e, timerType: u } = d; a.delete(n), u === "interval" ? r.delete(e) : i.delete(e) } else { let { error: { message: n } } = o; throw new Error(n) } }), { clearInterval: o => { if (typeof r.get(o) == "function") { let n = (0, p.generateUniqueNumber)(a); a.set(n, { timerId: o, timerType: "interval" }), r.set(o, n), s.postMessage({ id: n, method: "clear", params: { timerId: o, timerType: "interval" } }) } }, clearTimeout: o => { if (typeof i.get(o) == "function") { let n = (0, p.generateUniqueNumber)(a); a.set(n, { timerId: o, timerType: "timeout" }), i.set(o, n), s.postMessage({ id: n, method: "clear", params: { timerId: o, timerType: "timeout" } }) } }, setInterval: (o, n = 0, ...d) => { let e = (0, p.generateUniqueNumber)(r); return r.set(e, () => { o(...d), typeof r.get(e) == "function" && s.postMessage({ id: null, method: "set", params: { delay: n, now: performance.timeOrigin + performance.now(), timerId: e, timerType: "interval" } }) }), s.postMessage({ id: null, method: "set", params: { delay: n, now: performance.timeOrigin + performance.now(), timerId: e, timerType: "interval" } }), e }, setTimeout: (o, n = 0, ...d) => { let e = (0, p.generateUniqueNumber)(i); return i.set(e, () => o(...d)), s.postMessage({ id: null, method: "set", params: { delay: n, now: performance.timeOrigin + performance.now(), timerId: e, timerType: "timeout" } }), e } } }; var I = (t, r) => { let i = null; return () => { if (i !== null) return i; let a = new Blob([r], { type: "application/javascript; charset=utf-8" }), s = URL.createObjectURL(a); return i = t(s), setTimeout(() => URL.revokeObjectURL(s)), i } }; var _ = `(()=>{"use strict";const e=new Map,t=new Map,r=t=>{const r=e.get(t);return void 0!==r&&(clearTimeout(r),e.delete(t),!0)},s=e=>{const r=t.get(e);return void 0!==r&&(clearTimeout(r),t.delete(e),!0)},o=(e,t)=>{const r=performance.now(),s=e+t-r-performance.timeOrigin;return{expected:r+s,remainingDelay:s}},i=(e,t,r,s)=>{const o=r-performance.now();o>0?e.set(t,setTimeout(i,o,e,t,r,s)):(e.delete(t),postMessage({id:null,method:"call",params:{timerId:t,timerType:s}}))};addEventListener("message",(n=>{let{data:a}=n;try{if("clear"===a.method){const{id:e,params:{timerId:t,timerType:o}}=a;if("interval"===o)postMessage({id:e,result:r(t)});else{if("timeout"!==o)throw new Error('The given type "'.concat(o,'" is not supported'));postMessage({id:e,result:s(t)})}}else{if("set"!==a.method)throw new Error('The given method "'.concat(a.method,'" is not supported'));{const{params:{delay:r,now:s,timerId:n,timerType:m}}=a;if("interval"===m)((t,r,s)=>{const{expected:n,remainingDelay:a}=o(t,s);e.set(r,setTimeout(i,a,e,r,n,"interval"))})(r,n,s);else{if("timeout"!==m)throw new Error('The given type "'.concat(m,'" is not supported'));((e,r,s)=>{const{expected:n,remainingDelay:a}=o(e,s);t.set(r,setTimeout(i,a,t,r,n,"timeout"))})(r,n,s)}}}}catch(e){postMessage({error:{message:e.message},id:a.id,result:null})}}))})();`; var W = I(N, _); var O = (...t) => W().setInterval(...t); return O; })();
  workerTimersSetInterval(function () {
    try {
      if (!Hx.reconnect.enabled && Hx.ᐃⵠⵠᐃⵠ) {
        Hx.ⵠΔⵠⵠᐃ.ⲆΔᐃ();
      }
    } catch { }
  }, 2e3);
  workerTimersSetInterval(function () {
    try {
      if (!Hx.reconnect.enabled && Hx.ᐃⵠⵠᐃⵠ) {
        Jx.ping();
      }
    } catch { }
  }, 1000 * 60);
  var Sx = 0;
  function Tx() {
    Ux.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", Gh);
    Ux.send();
  }
  var Ux = new XMLHttpRequest();
  function Vx(b, c, d) {
    const e = (b | 41866) & ~(b & 41866);
    const f = ((10192 + c) * 22695477 + 1) % 4294967296;
    const g = ~(d & 24412) & 24412 | ~(d & 24412) & d;
    return ((14712 + (Ok(e, f, g, e, f) ^ function (a, b) {
      const c = a ^ 4299;
      const d = ~(b & 21184) & (b | 21184);
      const e = Pf(c, d, c, d);
      hq(c, d, c, d);
      return e ^ 30687;
    }(g, e))) * 1103515245 + 12345) % 2147483648;
  }
  Ux.onreadystatechange = function () {
    if (this.readyState === 4) {
      this.status;
    }
  };
  var Wx = "https://token.starve.io/";
  var Xx = "https://token2.starve.io/";
  var Yx = 0;
  var Zx = 1;
  var $x = 4;
  var _x = Bo;
  var ay = Ne;
  var ey = undefined;
  var iy = 0;
  bj.ΔΔᐃⲆΔΔΔ = function () {
    iy = 1;
  };
  var jy = {
    ΔⵠⲆΔⵠᐃᐃᐃⵠ: "ACCESS_TOKEN"
  };
  var ny = document.createElement("script");
  ny.type = "text/javascript";
  ny.async = It;
  ny.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
  ny.addEventListener("load", function (a) {
    bj.XPayStationWidget.init(jy);
    bj.XPayStationWidget.on("status-done", Cy);
  }, I);
  document.getElementsByTagName("head")[0].appendChild(ny);
  bj.fbAsyncInit = function () {
    Dy();
    console.log(Dh);
  };
  (function (a, b, c) {
    var d;
    var e = a.getElementsByTagName(b)[0];
    if (!a.getElementById(c)) {
      (d = a.createElement(b)).id = c;
      d.src = "https://connect.facebook.net/en_US/sdk.js";
      e.parentNode.insertBefore(d, e);
    }
  })(document, "script", "facebook-jssdk");
  var by = undefined;
  const oy = String.fromCharCode;
  const qy = oy(101);
  const my = oy(118);
  const cy = oy(97);
  const py = oy(108);
  var ry = ma;
  function ty() {
    bj.gapi.auth2.init({
      client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
      scope: "https://www.googleapis.com/auth/userinfo.profile"
    }).then(a => {
      (by = a).isSignedIn.listen(uy);
      by.currentUser.listen(vy);
      if (by.isSignedIn.get()) {
        by.signIn();
      }
      wy();
    });
  }
  function uy(a) { }
  function vy(a) {
    if (ay === undefined && ry !== Lh && (ay = ry.getAuthResponse().id_token) !== undefined) {
      _x = Yx;
      ey = ry.getBasicProfile().getId();
      bj.ΔΔᐃⲆΔΔΔ();
      return;
    }
    if (Es !== a && a.isSignedIn() === pg) {
      ey = (ry = a).id;
      ey = ry.getBasicProfile().getId();
      ay = ry.getAuthResponse().id_token;
      _x = Yx;
      bj.ΔΔᐃⲆΔΔΔ();
    }
  }
  function wy() {
    if (by) {
      ry = by.currentUser.get();
    }
  }
  function yy() {
    if (Fx.ᐃΔⲆⵠΔ >= 300 || Fx.ᐃΔⲆⲆᐃⵠΔ <= 0) {
      var a = document.getElementById("account_nickname_input").value.trim();
      document.getElementById("account_nickname_input").value = a;
      if (a.length >= 1 && a.length <= 20) {
        var b = new XMLHttpRequest();
        b.open("GET", Wx + "changeNickname?token=" + ay + "&userid=" + ey + "&nickname=" + encodeURIComponent(a));
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
            var a = Number(b.responseText);
            if (a > 0) {
              Fx.ᐃΔⲆⵠΔ -= a;
            }
            Fx.ᐃΔⲆⲆᐃⵠΔ = 1;
            Fx.ⵠᐃⲆΔ(Fx.ⲆⵠΔⲆΔ);
          }
        };
        b.send();
      }
    }
  }
  function ky(a, b) {
    if (Fx.ⲆΔΔⲆⵠ <= 0) {
      if (Fx.ᐃΔⲆⵠΔ < b) {
        Fx.ⵠᐃⲆΔ(Fx.ⵠⲆⵠᐃⲆ);
      } else {
        Fx.ⲆΔΔⲆⵠ = 2;
        Fx.ᐃⲆⵠΔΔⵠⵠ = 0;
        Fx.ΔⲆᐃΔⵠΔᐃ = 100;
        var c = new XMLHttpRequest();
        c.open("GET", Wx + "buySpin?token=" + ay + "&userid=" + ey + "&spin=" + a);
        c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        c.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200) {
            if (c.responseText !== "0") {
              var a = JSON.parse(c.responseText);
              Fx.ᐃⵠΔⲆⵠⲆᐃⲆⲆ(Math.PI * a.rand * 2, a.type, a.id);
              Fx.ᐃΔⲆⵠΔ -= b;
            } else {
              Fx.ⲆΔΔⲆⵠ = 0;
            }
          }
        };
        c.send();
      }
    }
  }
  function zy(a) {
    var b = new XMLHttpRequest();
    b.open("GET", Wx + "setRegion?token=" + ay + "&userid=" + ey + "&region=" + a);
    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    b.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        if (b.responseText !== "0") {
          Fx.ⵠᐃⲆΔ(Fx.ⵠⲆⲆᐃΔ);
        } else {
          Fx.ⵠᐃⲆΔ(Fx.ⵠᐃⲆᐃΔ);
        }
      }
    };
    b.send();
  }
  function xy(a, b) {
    if (Fx.ᐃΔⲆⵠΔ < b) {
      Fx.ⵠᐃⲆΔ(Fx.ⵠⲆⵠᐃⲆ);
    } else {
      var c = new XMLHttpRequest();
      c.open("GET", Wx + "buyKit?token=" + ay + "&userid=" + ey + "&kit=" + a);
      c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      c.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
          var a = JSON.parse(c.responseText);
          Fx.ᐃΔⲆⵠΔ -= b;
          Fx.ᐃⵠΔᐃᐃ = Date.now() + Number(a);
        }
      };
      c.send();
    }
  }
  function Ay(a, b, c, d) {
    a = a === ma ? Fx.ⵠⵠⵠⵠⲆⵠⵠ : a;
    b = b === undefined ? Fx.ⲆⲆⵠᐃⵠⵠΔ : b;
    c = Wg === c ? Fx.ⲆⵠᐃⵠⵠΔᐃ : c;
    d = d === undefined ? Fx.ⲆⵠΔⵠⵠᐃⲆ : d;
    if (Fx.ⵠⵠⵠⵠⲆⵠⵠ !== a || Fx.ⲆⲆⵠᐃⵠⵠΔ !== b || Fx.ⲆⵠᐃⵠⵠΔᐃ !== c || Fx.ⲆⵠΔⵠⵠᐃⲆ !== d) {
      Fx.ⵠⵠⵠⵠⲆⵠⵠ = a;
      Fx.ⲆⲆⵠᐃⵠⵠΔ = b;
      Fx.ⲆⵠᐃⵠⵠΔᐃ = c;
      Fx.ⲆⵠΔⵠⵠᐃⲆ = d;
      if (d === Fx.ⲆᐃⵠΔΔⲆΔ) {
        d = "0";
      } else if (Fx.ΔⵠⲆᐃΔⲆⲆ === d) {
        d = "1";
      } else if (Fx.ⲆⲆΔΔⵠΔΔ === d) {
        d = "2";
      } else if (Fx.ΔᐃⲆᐃⲆⵠΔ === d) {
        d = "3";
      } else if (Fx.ΔᐃᐃᐃⵠⵠΔ === d) {
        d = "4";
      } else if (d === Fx.ΔΔᐃⵠⵠⲆⵠ) {
        d = "5";
      }
      if (Fx.Ⲇⵠᐃᐃᐃᐃⵠ === b) {
        b = "total";
      } else if (Fx.ᐃⵠⵠⵠΔⲆᐃ === b) {
        b = "normal";
      } else if (b === Fx.ⲆΔⲆΔⵠᐃⲆ) {
        b = "zombie";
      } else if (Fx.ᐃⲆᐃᐃⵠⵠᐃ === b) {
        b = "vampire";
      } else if (Fx.ⲆⲆⵠⵠⵠⲆⵠ === b) {
        b = "forest";
      }
      if (a === Fx.ⲆΔⲆᐃⵠⵠΔ) {
        a = "all";
      }
      if (Fx.ΔΔⲆⵠΔⵠΔ === a) {
        a = "week";
      }
      if (a === Fx.ΔⵠᐃⲆᐃᐃΔ) {
        a = "today";
      }
      if (c === Fx.ᐃᐃⲆⵠΔⵠⵠ) {
        c = "kill";
      } else if (Fx.ⵠᐃⲆⲆΔΔᐃ === c) {
        c = "score";
      } else if (Fx.ⲆᐃΔⲆᐃⵠⵠ === c) {
        c = "time";
      }
      var f = new XMLHttpRequest();
      f.open("GET", Wx + "leaderboard?range=" + a + "&mode=" + b + "&sort=" + c + "&season=" + d);
      f.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      f.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && f.responseText !== "0") {
          for (var a = JSON.parse(f.responseText), b = "", c = 0; a.length > c; c++) {
            Δᐃᐃᐃᐃ = a[c];
            var d = Δᐃᐃᐃᐃ[1];
            try {
              if (d.indexOf("Starver#") === -1) {
                d = bj.decodeURIComponent(bj.escape(bj.atob(d)));
              }
            } catch (a) { }
            b += "<div class=\"lineLeaderboard\">";
            b += "<div class=\"rank\">";
            b += c + 1 + "";
            b += "</div>";
            b += "<div class=\"name\">";
            b += d;
            b += "</div>";
            b += "<div class=\"lvl\">";
            b += Fx.ᐃᐃΔⵠΔⲆᐃ(Δᐃᐃᐃᐃ[6]) + 1 + "";
            b += "</div>";
            b += "<div class=\"kills\">";
            b += Δᐃᐃᐃᐃ[5] + "";
            b += "</div>";
            b += "<div class=\"time\">";
            b += Δᐃᐃᐃᐃ[4] + "";
            b += "</div>";
            b += "<div class=\"score\">";
            b += Δᐃᐃᐃᐃ[3] + "";
            b += "</div>";
            b += "</div>";
          }
          document.getElementById("leaderboard").innerHTML = b;
        }
      };
      f.send();
    }
  }
  function Cy() {
    var a = new XMLHttpRequest();
    a.open("GET", Wx + "claimBread?userid=" + ey);
    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    a.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
        var b = Number(a.responseText);
        if (!isNaN(b)) {
          Fx.ᐃΔⲆⵠΔ = b;
        }
      }
    };
    a.send();
  }
  function By(a) {
    const b = bj.setTimeout;
    const c = b;
    const d = function () {
      b(d, 8512);
      c(d, 7423);
    };
    d();
  }
  function Dy() {
    if (bj.FB) {
      bj.FB.init({
        appId: "642017356260407",
        version: "v15.0",
        xfbml: true,
        cookie: rr
      });
    }
    if (ey === undefined) {
      (function () {
        try {
          if (bj.FB && bj.FB.getUserID()) {
            ey = bj.FB.getUserID();
            if (ay === kl) {
              bj.FB.getLoginStatus(function () {
                _x = Zx;
                ay = bj.FB.getAuthResponse().accessToken;
                bj.ΔΔᐃⲆΔΔΔ(ey);
              });
            }
          }
        } catch (a) { }
        try {
          ey = ry.getBasicProfile().getId();
        } catch (a) { }
      })();
    }
  }
  function Ey(a) {
    if (ey) {
      var b = new XMLHttpRequest();
      b.open("GET", Wx + "xsolla?userid=" + ey + "&item=" + a);
      b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      b.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
          jy.access_token = b.responseText;
          bj.XPayStationWidget.init(jy);
          bj.XPayStationWidget.open();
        }
      };
      b.send();
    }
  }
})();
